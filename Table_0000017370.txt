OBJECT Table 17370 Position
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 HumanResSetup.GET;
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series",0D,"No.","No. Series");
               END;

               "Created By User" := USERID;
               "Creation Date" := TODAY;
             END;

    OnDelete=BEGIN
               TESTFIELD(Status,Position.Status::Planned);
               IF NOT CONFIRM(Text000,TRUE,"No.") THEN
                 ERROR('');

               LaborContractTermsSetup.RESET;
               LaborContractTermsSetup.SETRANGE("Table Type",LaborContractTermsSetup."Table Type"::Position);
               LaborContractTermsSetup.SETRANGE("No.","No.");
               LaborContractTermsSetup.DELETEALL;
             END;

    CaptionML=[ENU=Position;
               RUS=Позиция];
    LookupPageID=Page17381;
    DrillDownPageID=Page17381;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  HumanResSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              RUS=Номер] }
    { 2   ;   ;Job Title Code      ;Code10        ;TableRelation="Job Title";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                                IF JobTitle.GET("Job Title Code") THEN BEGIN
                                                                  JobTitle.TESTFIELD(Type,JobTitle.Type::"Job Title");
                                                                  JobTitle.TESTFIELD(Blocked,FALSE);
                                                                  "Job Title Name" := JobTitle.Name;
                                                                  IF "Budgeted Position No." <> '' THEN BEGIN
                                                                    Position2.GET("Budgeted Position No.");
                                                                    TESTFIELD("Job Title Code",Position2."Job Title Code");
                                                                  END;
                                                                  "Base Salary Element Code" := JobTitle."Base Salary Element Code";
                                                                  VALIDATE("Base Salary",JobTitle."Base Salary Amount");
                                                                  VALIDATE("Category Code",JobTitle."Category Code");
                                                                  VALIDATE("Calendar Code",JobTitle."Calendar Code");
                                                                  VALIDATE("Worktime Norm",JobTitle."Worktime Norm");
                                                                  VALIDATE("Kind of Work",JobTitle."Kind of Work");
                                                                  VALIDATE("Conditions of Work",JobTitle."Conditions of Work");
                                                                  VALIDATE("Calc Group Code",JobTitle."Calc Group Code");
                                                                  VALIDATE("Posting Group",JobTitle."Posting Group");
                                                                  VALIDATE("Statistical Group Code",JobTitle."Statistics Group Code");
                                                                  CopyContractTerms;
                                                                  Calculate;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Title Code;
                                                              RUS=Код должности] }
    { 3   ;   ;Job Title Name      ;Text50        ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Job Title Name;
                                                              RUS=Название должности];
                                                   Editable=No }
    { 4   ;   ;Org. Unit Code      ;Code10        ;TableRelation="Organizational Unit";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                                HumanResSetup.GET;
                                                                IF "Org. Unit Code" = '' THEN
                                                                  "Org. Unit Name" := ''
                                                                ELSE BEGIN
                                                                  OrganizationalUnit.GET("Org. Unit Code");
                                                                  OrganizationalUnit.TESTFIELD(Type,OrganizationalUnit.Type::Unit);
                                                                  IF NOT HumanResSetup."Use Staff List Change Orders" THEN
                                                                    OrganizationalUnit.TESTFIELD(Status,OrganizationalUnit.Status::Approved);
                                                                  OrganizationalUnit.TESTFIELD(Blocked,FALSE);
                                                                  "Org. Unit Name" := OrganizationalUnit.Name;
                                                                  IF ("Starting Date" <> 0D) AND (OrganizationalUnit."Starting Date" > "Starting Date") THEN
                                                                    ERROR(Text002,
                                                                      OrganizationalUnit.TABLECAPTION,OrganizationalUnit.FIELDCAPTION("Starting Date"),
                                                                      TABLECAPTION,FIELDCAPTION("Starting Date"));
                                                                  IF ("Ending Date" <> 0D) AND (OrganizationalUnit."Ending Date" <> 0D) AND
                                                                     (OrganizationalUnit."Ending Date" < "Ending Date")
                                                                  THEN
                                                                    ERROR(Text002,
                                                                      TABLECAPTION,FIELDCAPTION("Starting Date"),
                                                                      OrganizationalUnit.TABLECAPTION,OrganizationalUnit.FIELDCAPTION("Starting Date"));
                                                                  IF "Budgeted Position No." <> '' THEN BEGIN
                                                                    Position2.GET("Budgeted Position No.");
                                                                    TESTFIELD("Job Title Code",Position2."Job Title Code");
                                                                  END;
                                                                  CopyContractTerms;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Org. Unit Code;
                                                              RUS=Код подразделения] }
    { 5   ;   ;Org. Unit Name      ;Text50        ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Org. Unit Name;
                                                              RUS=Название подразделения];
                                                   Editable=No }
    { 7   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Planned,Approved,Closed;
                                                                    RUS=Плановая,Утвержденные,Закрыта];
                                                   OptionString=Planned,Approved,Closed;
                                                   Editable=No }
    { 8   ;   ;Parent Position No. ;Code20        ;TableRelation=Position;
                                                   OnValidate=BEGIN

                                                                IF "Parent Position No." <> '' THEN BEGIN
                                                                  IF "No." = "Parent Position No." THEN
                                                                    FIELDERROR("Parent Position No.");
                                                                  Position.GET("Parent Position No.");
                                                                  Level := Position.Level + 1;
                                                                  IF "Org. Unit Code" = '' THEN
                                                                    VALIDATE("Org. Unit Code",Position."Org. Unit Code");
                                                                END ELSE
                                                                  Level := 0;
                                                              END;

                                                   CaptionML=[ENU=Parent Position No.;
                                                              RUS=Номер старшей позиции] }
    { 9   ;   ;Filled Rate         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Employee Job Entry"."Position Rate" WHERE (Position No.=FIELD(No.),
                                                                                                               Starting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Filled Rate;
                                                              RUS=Занятые ставки];
                                                   Editable=No }
    { 10  ;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                CheckModify;
                                                                IF NOT "Budgeted Position" THEN
                                                                  IF Rate > 1 THEN
                                                                    ERROR(Text003,FIELDCAPTION(Rate),1);

                                                                Calculate;
                                                              END;

                                                   CaptionML=[ENU=Rate;
                                                              RUS=Ставка];
                                                   MinValue=0 }
    { 11  ;   ;Base Salary         ;Decimal       ;OnValidate=BEGIN
                                                                CheckModify;
                                                                Calculate;
                                                              END;

                                                   CaptionML=[ENU=Base Salary;
                                                              RUS=Базовый оклад] }
    { 12  ;   ;Additional Salary   ;Decimal       ;OnValidate=BEGIN
                                                                CheckModify;
                                                                Calculate;
                                                              END;

                                                   CaptionML=[ENU=Additional Salary;
                                                              RUS=Надбавка] }
    { 13  ;   ;Budgeted Salary     ;Decimal       ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Budgeted Salary;
                                                              RUS=Оклад по бюджету] }
    { 14  ;   ;Monthly Salary      ;Decimal       ;CaptionML=[ENU=Monthly Salary;
                                                              RUS=Месячный оклад];
                                                   Editable=No }
    { 15  ;   ;Note                ;Text250       ;CaptionML=[ENU=Note;
                                                              RUS=Примечание] }
    { 16  ;   ;Approval Date       ;Date          ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Approval Date;
                                                              RUS=Дата утверждения];
                                                   Editable=No }
    { 17  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckModify;
                                                                IF OrganizationalUnit.GET("Org. Unit Code") THEN
                                                                  IF ("Starting Date" <> 0D) AND (OrganizationalUnit."Starting Date" > "Starting Date") THEN
                                                                    ERROR(Text002,
                                                                      OrganizationalUnit.TABLECAPTION,OrganizationalUnit.FIELDCAPTION("Starting Date"),
                                                                      TABLECAPTION,FIELDCAPTION("Starting Date"));
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              RUS=Дата начала] }
    { 18  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckModify;
                                                                IF OrganizationalUnit.GET("Org. Unit Code") THEN
                                                                  IF ("Ending Date" <> 0D) AND (OrganizationalUnit."Ending Date" <> 0D) AND
                                                                     (OrganizationalUnit."Ending Date" < "Ending Date")
                                                                  THEN
                                                                    ERROR(Text002,
                                                                      TABLECAPTION,FIELDCAPTION("Ending Date"),
                                                                      OrganizationalUnit.TABLECAPTION,OrganizationalUnit.FIELDCAPTION("Ending Date"));
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              RUS=Дата окончания] }
    { 19  ;   ;Base Salary Element Code;Code20    ;TableRelation="Payroll Element";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Base Salary Element Code;
                                                              RUS=Код элемента базового оклада] }
    { 20  ;   ;Category Code       ;Code10        ;TableRelation="Employee Category";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                                CopyContractTerms;
                                                                Calculate;
                                                              END;

                                                   CaptionML=[ENU=Category Code;
                                                              RUS=Код категории] }
    { 21  ;   ;Opening Reason      ;Text250       ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Opening Reason;
                                                              RUS=Основание открытия] }
    { 22  ;   ;Calendar Code       ;Code10        ;TableRelation="Payroll Calendar";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Calendar Code;
                                                              RUS=Код календаря] }
    { 23  ;   ;Statistical Group Code;Code10      ;TableRelation="Employee Statistics Group";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Statistical Group Code;
                                                              RUS=Код статистической группы] }
    { 24  ;   ;Worktime Norm       ;Code10        ;TableRelation="Worktime Norm";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Worktime Norm;
                                                              RUS=Норма рабочего времени] }
    { 25  ;   ;Use Trial Period    ;Boolean       ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Use Trial Period;
                                                              RUS=Исп. испытательный срок] }
    { 26  ;   ;Trial Period Description;Text50    ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Trial Period Description;
                                                              RUS=Описание испытательного срока] }
    { 27  ;   ;Liability for Breakage;Option      ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Liability for Breakage;
                                                              RUS=Материальная ответственность];
                                                   OptionCaptionML=[ENU=None,Team,Personal;
                                                                    RUS=Нет,Командная,Личная];
                                                   OptionString=None,Team,Personal }
    { 28  ;   ;Hire Conditions     ;Code20        ;TableRelation="General Directory".Code WHERE (Type=FILTER(Hire Condition));
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Hire Conditions;
                                                              RUS=Условия найма] }
    { 29  ;   ;Level               ;Integer       ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Level;
                                                              RUS=Уровень] }
    { 30  ;   ;Kind of Work        ;Option        ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Kind of Work;
                                                              RUS=Вид работы];
                                                   OptionCaptionML=[ENU=" ,Permanent,Temporary,Seasonal";
                                                                    RUS=" ,Постоянная,Временная,Сезонная"];
                                                   OptionString=[ ,Permanent,Temporary,Seasonal] }
    { 31  ;   ;Out-of-Staff        ;Boolean       ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Out-of-Staff;
                                                              RUS=Внештатная позиция] }
    { 32  ;   ;Conditions of Work  ;Option        ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Conditions of Work;
                                                              RUS=Условия труда];
                                                   OptionCaptionML=[ENU=" ,Regular,Heavy,Unhealthy,Very Heavy,Other";
                                                                    RUS=" ,Нормальные,Тяжелые,Вредные,Очень тяжелые,Прочие"];
                                                   OptionString=[ ,Regular,Heavy,Unhealthy,Very Heavy,Other] }
    { 33  ;   ;Calc Group Code     ;Code10        ;TableRelation="Payroll Calc Group";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Calc Group Code;
                                                              RUS=Код группы расчета] }
    { 34  ;   ;Posting Group       ;Code20        ;TableRelation="Payroll Posting Group";
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Posting Group;
                                                              RUS=Учетная группа] }
    { 35  ;   ;Created By User     ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created By User;
                                                              RUS=Создано пользователем];
                                                   Editable=No }
    { 36  ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              RUS=Дата создания];
                                                   Editable=No }
    { 37  ;   ;Approved By User    ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Approved By User;
                                                              RUS=Утверждено];
                                                   Editable=No }
    { 38  ;   ;Closed By User      ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Closed By User;
                                                              RUS=Закрыто пользователем];
                                                   Editable=No }
    { 39  ;   ;Closing Date        ;Date          ;CaptionML=[ENU=Closing Date;
                                                              RUS=Дата закрытия];
                                                   Editable=No }
    { 40  ;   ;Organization Size   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Position WHERE (Parent Position No.=FIELD(No.)));
                                                   CaptionML=[ENU=Organization Size;
                                                              RUS=Размер организации];
                                                   Editable=No }
    { 41  ;   ;Trial Period Formula;DateFormula   ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Trial Period Formula;
                                                              RUS=Формула испытательного срока] }
    { 42  ;   ;Reopened Date       ;Date          ;CaptionML=[ENU=Reopened Date;
                                                              RUS=Дата открытия] }
    { 43  ;   ;Reopened by User    ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Reopened by User;
                                                              RUS=Открыто пользователем] }
    { 45  ;   ;Allow Overdraft     ;Boolean       ;CaptionML=[ENU=Allow Overdraft;
                                                              RUS=Разрешить занятие при отсутствии] }
    { 50  ;   ;Budgeted Position   ;Boolean       ;OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Budgeted Position;
                                                              RUS=Бюджетная позиция] }
    { 51  ;   ;Budgeted Position No.;Code20       ;TableRelation=Position WHERE (Budgeted Position=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                CheckModify;
                                                              END;

                                                   CaptionML=[ENU=Budgeted Position No.;
                                                              RUS=Номер бюджетной позиции] }
    { 52  ;   ;Used Rate           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum(Position.Rate WHERE (Budgeted Position No.=FIELD(No.)));
                                                   CaptionML=[ENU=Used Rate;
                                                              RUS=Исп. ставка];
                                                   Editable=No }
    { 53  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              RUS=Серия номеров];
                                                   Editable=No }
    { 54  ;   ;Base Salary Amount  ;Decimal       ;CaptionML=[ENU=Base Salary Amount;
                                                              RUS=Размер базового оклада];
                                                   Editable=No }
    { 55  ;   ;Monthly Salary Amount;Decimal      ;CaptionML=[ENU=Monthly Salary Amount;
                                                              RUS=Сумма месячного оклада];
                                                   Editable=No }
    { 56  ;   ;Additional Salary Amount;Decimal   ;CaptionML=[ENU=Additional Salary Amount;
                                                              RUS=Сумма дополнительной зарплаты];
                                                   Editable=No }
    { 57  ;   ;Budgeted Salary Amount;Decimal     ;CaptionML=[ENU=Budgeted Salary Amount;
                                                              RUS=Сумма оклада по бюджету];
                                                   Editable=No }
    { 60  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              RUS=Фильтр по дате] }
    { 70  ;   ;Future Period Vacat. Post. Gr.;Code20;
                                                   TableRelation="Payroll Posting Group";
                                                   CaptionML=[ENU=Future Period Vacat. Post. Gr.;
                                                              RUS=Учетная группа отпусков буд. пер.] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Org. Unit Code,Job Title Code,Status,Budgeted Position,Out-of-Staff,Starting Date;
                                                   SumIndexFields=Monthly Salary Amount,Base Salary Amount,Additional Salary Amount,Budgeted Salary Amount,Rate }
    {    ;Org. Unit Code,Job Title Code,No.        }
    {    ;Parent Position No.,No.                  }
    {    ;Budgeted Position,Budgeted Position No. ;SumIndexFields=Budgeted Salary,Rate }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Job Title Code,Job Title Name,Org. Unit Code,Org. Unit Name }
  }
  CODE
  {
    VAR
      HumanResSetup@1210000 : Record 5218;
      Position@1210001 : Record 17370;
      Position2@1210012 : Record 17370;
      OrganizationalUnit@1210005 : Record 12422;
      JobTitle@1210003 : Record 12423;
      DefaultLaborContractTerms@1210010 : Record 17364;
      LaborContractTermsSetup@1210011 : Record 17365;
      NoSeriesMgt@1210002 : Codeunit 396;
      Text000@1210004 : TextConst 'ENU=Do you want really to delete position %1?;RUS=Действительно удалить позицию %1?';
      Text001@1210006 : TextConst 'ENU=Do you want to approve %1?;RUS=Одобрить %1?';
      Text002@1210007 : TextConst '@@@="%1 = Org. Unit, %2 = Date, %3 = Position, %4 = Date";ENU=%1 %2 should be earlier than %3 %4.;RUS=%1 %2 должна быть раньше %3 %4.';
      Text003@1210009 : TextConst 'ENU=%1 can exceed %2 for budget positions only.;RUS=%1 может превышать %2 только для бюджетных позиций.';

    PROCEDURE AssistEdit@2(OldPosition@1000 : Record 17370) : Boolean;
    BEGIN
      WITH Position DO BEGIN
        Position := Rec;
        HumanResSetup.GET;
        HumanResSetup.TESTFIELD("Position Nos.");
        IF NoSeriesMgt.SelectSeries(HumanResSetup."Position Nos.",OldPosition."No. Series","No. Series") THEN BEGIN
          HumanResSetup.GET;
          HumanResSetup.TESTFIELD("Position Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Position;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6();
    BEGIN
      IF "Budgeted Position" THEN
        HumanResSetup.TESTFIELD("Budgeted Position Nos.")
      ELSE
        HumanResSetup.TESTFIELD("Position Nos.");
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      IF "Budgeted Position" THEN
        EXIT(HumanResSetup."Budgeted Position Nos.");

      EXIT(HumanResSetup."Position Nos.");
    END;

    PROCEDURE CheckModify@1210005();
    BEGIN
      IF Status > Status::Planned THEN
        FIELDERROR(Status);
    END;

    PROCEDURE Calculate@1210000();
    BEGIN
      "Monthly Salary" := "Base Salary" + "Additional Salary";

      "Base Salary Amount" := "Base Salary" * Rate;
      "Additional Salary Amount" := "Additional Salary" * Rate;
      "Monthly Salary Amount" := "Monthly Salary" * Rate;
      "Budgeted Salary Amount" := "Budgeted Salary" * Rate;
    END;

    PROCEDURE Approve@1210001(IsChangeOrder@1210000 : Boolean);
    VAR
      Confirmed@1210001 : Boolean;
    BEGIN
      IF NOT IsChangeOrder THEN BEGIN
        HumanResSetup.GET;
        HumanResSetup.TESTFIELD("Use Staff List Change Orders",FALSE);
      END;

      TESTFIELD(Status,Status::Planned);

      TESTFIELD("Job Title Code");
      TESTFIELD("Org. Unit Code");
      TESTFIELD(Rate);
      TESTFIELD("Base Salary");
      TESTFIELD("Monthly Salary");
      TESTFIELD("Category Code");
      TESTFIELD("Calendar Code");
      TESTFIELD("Calc Group Code");
      TESTFIELD("Posting Group");
      TESTFIELD("Kind of Work");
      TESTFIELD("Conditions of Work");
      TESTFIELD(Rate);
      TESTFIELD("Starting Date");
      IF "Kind of Work" IN ["Kind of Work"::"Temporary","Kind of Work"::Seasonal] THEN
        TESTFIELD("Ending Date");

      IF "Org. Unit Code" <> '' THEN BEGIN
        OrganizationalUnit.GET("Org. Unit Code");
        OrganizationalUnit.TESTFIELD(Type,OrganizationalUnit.Type::Unit);
        IF NOT HumanResSetup."Use Staff List Change Orders" THEN
          OrganizationalUnit.TESTFIELD(Status,OrganizationalUnit.Status::Approved);
        OrganizationalUnit.TESTFIELD(Blocked,FALSE);
      END;

      Confirmed := TRUE;
      IF NOT IsChangeOrder THEN
        IF NOT CONFIRM(Text001,TRUE,"No.") THEN
          Confirmed := FALSE;

      IF Confirmed THEN BEGIN
        Status := Status::Approved;
        "Approved By User" := USERID;
        "Approval Date" := TODAY;
        MODIFY;
      END;
    END;

    PROCEDURE Reopen@1210004(IsChangeOrder@1210000 : Boolean);
    BEGIN
      IF NOT IsChangeOrder THEN BEGIN
        HumanResSetup.GET;
        HumanResSetup.TESTFIELD("Use Staff List Change Orders",FALSE);
      END;

      TESTFIELD(Status,Status::Approved);
      IF "Budgeted Position" THEN BEGIN
        CALCFIELDS("Used Rate");
        TESTFIELD("Used Rate",0);
      END ELSE BEGIN
        CALCFIELDS("Filled Rate");
        TESTFIELD("Filled Rate",0);
      END;
      Status := Status::Planned;
      "Reopened by User" := USERID;
      "Reopened Date" := TODAY;
      MODIFY;
    END;

    PROCEDURE Close@1210002(IsChangeOrder@1210000 : Boolean);
    BEGIN
      IF NOT IsChangeOrder THEN BEGIN
        HumanResSetup.GET;
        HumanResSetup.TESTFIELD("Use Staff List Change Orders",FALSE);
      END;

      TESTFIELD(Status,Status::Approved);
      IF "Budgeted Position" THEN BEGIN
        CALCFIELDS("Used Rate");
        IF "Used Rate" > 0 THEN BEGIN
          Position2.RESET;
          Position2.SETCURRENTKEY("Budgeted Position","Budgeted Position No.");
          Position2.SETRANGE("Budgeted Position",FALSE);
          Position2.SETRANGE("Budgeted Position No.","No.");
          IF Position2.FINDSET THEN
            REPEAT
              Position2.TESTFIELD(Status,Position2.Status::Closed);
            UNTIL Position2.NEXT = 0;
        END;
      END ELSE BEGIN
        CALCFIELDS("Filled Rate");
        TESTFIELD("Filled Rate",0);
      END;

      Status := Status::Closed;
      "Closed By User" := USERID;
      "Closing Date" := TODAY;
      MODIFY;
    END;

    PROCEDURE CopyContractTerms@1210007();
    BEGIN
      IF ("Job Title Code" <> '') AND ("Org. Unit Code" <> '') AND ("Category Code" <> '') THEN BEGIN
        DefaultLaborContractTerms.RESET;
        DefaultLaborContractTerms.SETFILTER("Category Code",'%1|%2',"Category Code",'');
        DefaultLaborContractTerms.SETFILTER("Org. Unit Code",'%1|%2',"Org. Unit Code",'');
        DefaultLaborContractTerms.SETFILTER("Job Title Code",'%1|%2',"Job Title Code",'');
        DefaultLaborContractTerms.SETRANGE("Start Date",0D,"Starting Date");
        DefaultLaborContractTerms.SETFILTER("End Date",'%1|%2..',0D,"Ending Date");
        IF DefaultLaborContractTerms.FINDSET THEN
          REPEAT
            LaborContractTermsSetup.SETRANGE("Table Type",LaborContractTermsSetup."Table Type"::Position);
            LaborContractTermsSetup.SETRANGE("No.","No.");
            LaborContractTermsSetup.SETRANGE("Element Code",DefaultLaborContractTerms."Element Code");
            LaborContractTermsSetup.SETRANGE("Operation Type",DefaultLaborContractTerms."Operation Type");
            LaborContractTermsSetup.SETRANGE("Start Date",DefaultLaborContractTerms."Start Date");
            IF LaborContractTermsSetup.FINDFIRST THEN BEGIN
              IF LaborContractTermsSetup.Amount < DefaultLaborContractTerms.Amount THEN BEGIN
                LaborContractTermsSetup.Amount := DefaultLaborContractTerms.Amount;
                LaborContractTermsSetup.MODIFY;
              END;
              IF LaborContractTermsSetup.Quantity < DefaultLaborContractTerms.Quantity THEN BEGIN
                LaborContractTermsSetup.Quantity := DefaultLaborContractTerms.Quantity;
                LaborContractTermsSetup.MODIFY;
              END;
            END ELSE BEGIN
              LaborContractTermsSetup.INIT;
              LaborContractTermsSetup."Table Type" := LaborContractTermsSetup."Table Type"::Position;
              LaborContractTermsSetup."No." := "No.";
              LaborContractTermsSetup."Element Code" := DefaultLaborContractTerms."Element Code";
              LaborContractTermsSetup."Operation Type" := DefaultLaborContractTerms."Operation Type";
              LaborContractTermsSetup."Start Date" := DefaultLaborContractTerms."Start Date";
              LaborContractTermsSetup."End Date" := DefaultLaborContractTerms."End Date";
              LaborContractTermsSetup.Type := DefaultLaborContractTerms.Type;
              LaborContractTermsSetup.Amount := DefaultLaborContractTerms.Amount;
              LaborContractTermsSetup.Percent := DefaultLaborContractTerms.Percent;
              LaborContractTermsSetup.Quantity := DefaultLaborContractTerms.Quantity;
              LaborContractTermsSetup."Additional Salary" := DefaultLaborContractTerms."Additional Salary";
              LaborContractTermsSetup.INSERT;
            END;
          UNTIL DefaultLaborContractTerms.NEXT = 0;
      END;
    END;

    PROCEDURE ShowContractTerms@1210003();
    VAR
      LaborContractTermsSetup@1210000 : Record 17365;
      PayrollElement@1210001 : Record 17400;
      LaborContractTermsSetupPage@1210002 : Page 17371;
    BEGIN
      LaborContractTermsSetup.SETRANGE("Table Type",LaborContractTermsSetup."Table Type"::Position);
      LaborContractTermsSetup.SETRANGE("No.","No.");
      LaborContractTermsSetupPage.SETTABLEVIEW(LaborContractTermsSetup);
      LaborContractTermsSetupPage.RUNMODAL;

      IF Status = Status::Planned THEN BEGIN
        "Additional Salary" := 0;
        LaborContractTermsSetup.SETRANGE(Type,LaborContractTermsSetup.Type::"Payroll Element");
        IF LaborContractTermsSetup.FIND('-') THEN
          REPEAT
            PayrollElement.GET(LaborContractTermsSetup."Element Code");
            IF PayrollElement.Type = PayrollElement.Type::Wage THEN
              "Additional Salary" := "Additional Salary" + LaborContractTermsSetup.Amount;
          UNTIL LaborContractTermsSetup.NEXT = 0;

        IF "Additional Salary" <> xRec."Additional Salary" THEN BEGIN
          VALIDATE("Additional Salary");
          MODIFY;
        END;
      END;
    END;

    PROCEDURE CopyPosition@1210006(CreationDate@1210002 : Date) : Code[20];
    VAR
      NewPosition@1210000 : Record 17370;
      NewLaborContractTermsSetup@1210001 : Record 17365;
    BEGIN
      NewPosition.INIT;
      NewPosition.TRANSFERFIELDS(Rec,FALSE);
      NewPosition.Status := NewPosition.Status::Planned;
      NewPosition."Created By User" := USERID;
      NewPosition."Creation Date" := CreationDate;
      NewPosition."Approved By User" := '';
      NewPosition."Approval Date" := 0D;
      NewPosition."Closed By User" := '';
      NewPosition."Closing Date" := 0D;
      NewPosition."No." := '';
      NewPosition.INSERT(TRUE);

      LaborContractTermsSetup.RESET;
      LaborContractTermsSetup.SETRANGE("Table Type",LaborContractTermsSetup."Table Type"::Position);
      LaborContractTermsSetup.SETRANGE("No.","No.");
      IF LaborContractTermsSetup.FINDSET THEN
        REPEAT
          NewLaborContractTermsSetup := LaborContractTermsSetup;
          NewLaborContractTermsSetup."No." := NewPosition."No.";
          NewLaborContractTermsSetup.INSERT;
        UNTIL LaborContractTermsSetup.NEXT = 0;

      EXIT(NewPosition."No.");
    END;

    BEGIN
    END.
  }
}

