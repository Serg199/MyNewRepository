OBJECT Codeunit 14931 Factura-Invoice Report Helper
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExcelReportBuilderMgr@1210006 : Codeunit 14930;
      StdRepMgt@1210001 : Codeunit 12401;
      SameTxt@1210000 : TextConst 'ENU=Same;RUS=То же самое';
      PrevDocumentPageNo@1210002 : Integer;
      CurrentDocumentNo@1210003 : Text;
      CurrentDocumentDate@1210004 : Text;
      InvoiceTxt@1210005 : TextConst 'ENU=Invoice %1 from %2 Page %3;RUS=Счет %1 от %2, стр. %3';

    PROCEDURE InitReportTemplate@1210002(TemplateCode@1210000 : Code[10]);
    VAR
      SheetName@1210001 : Text;
    BEGIN
      SheetName := 'Sheet1';
      ExcelReportBuilderMgr.InitTemplate(TemplateCode);
      ExcelReportBuilderMgr.SetSheet(SheetName);
      PrevDocumentPageNo := 0;
    END;

    PROCEDURE ExportData@1210008();
    BEGIN
      ExcelReportBuilderMgr.ExportData;
    END;

    PROCEDURE FillHeader@1210006(DocNo@1210007 : Code[20];DocDate@1210006 : Text;RevNo@1210005 : Code[20];RevDate@1210004 : Text;HeaderDetails@1210000 : ARRAY [12] OF Text);
    BEGIN
      ExcelReportBuilderMgr.AddSection('REPORTHEADER');

      ExcelReportBuilderMgr.AddDataToSection('FactureNum',DocNo);
      ExcelReportBuilderMgr.AddDataToSection('FactureDate',DocDate);
      ExcelReportBuilderMgr.AddDataToSection('RevisionNum',RevNo);
      ExcelReportBuilderMgr.AddDataToSection('RevisionDate',RevDate);

      ExcelReportBuilderMgr.AddDataToSection('SellerName',HeaderDetails[1]);
      ExcelReportBuilderMgr.AddDataToSection('SellerAddress',HeaderDetails[2]);
      ExcelReportBuilderMgr.AddDataToSection('SellerINN',HeaderDetails[3]);
      ExcelReportBuilderMgr.AddDataToSection('ConsignorAndAddress',HeaderDetails[4]);
      ExcelReportBuilderMgr.AddDataToSection('ConsigneeAndAddress',HeaderDetails[5]);
      ExcelReportBuilderMgr.AddDataToSection('DocumentNumDate',HeaderDetails[6]);
      ExcelReportBuilderMgr.AddDataToSection('BuyerName',HeaderDetails[7]);
      ExcelReportBuilderMgr.AddDataToSection('BuyerAddress',HeaderDetails[8]);
      ExcelReportBuilderMgr.AddDataToSection('BuyerINN',HeaderDetails[9]);
      ExcelReportBuilderMgr.AddDataToSection('CurrencyCode',HeaderDetails[10]);
      ExcelReportBuilderMgr.AddDataToSection('CurrencyName',HeaderDetails[11]);
      ExcelReportBuilderMgr.AddDataToSection('VATAgentText',HeaderDetails[12]);

      ExcelReportBuilderMgr.AddSection('PAGEHEADER');

      CurrentDocumentNo := DocNo;
      CurrentDocumentDate := DocDate;
    END;

    PROCEDURE FillPageHeader@1210015();
    BEGIN
      ExcelReportBuilderMgr.AddSection('PAGEHEADER');

      ExcelReportBuilderMgr.AddDataToSection(
        'PageNoTxt',
        STRSUBSTNO(
          InvoiceTxt,CurrentDocumentNo,CurrentDocumentDate,
          ExcelReportBuilderMgr.GetLastPageNo - PrevDocumentPageNo));
    END;

    PROCEDURE FillBody@1210012(LineValue@1210000 : ARRAY [12] OF Text);
    BEGIN
      IF NOT ExcelReportBuilderMgr.TryAddSection('BODY') THEN BEGIN
        ExcelReportBuilderMgr.AddPagebreak;
        FillPageHeader;
        ExcelReportBuilderMgr.AddSection('BODY');
      END;

      ExcelReportBuilderMgr.AddDataToSection('ItemName',LineValue[1]);
      ExcelReportBuilderMgr.AddDataToSection('Unit',LineValue[2]);
      ExcelReportBuilderMgr.AddDataToSection('UnitName',LineValue[3]);
      ExcelReportBuilderMgr.AddDataToSection('Quantity',LineValue[4]);
      ExcelReportBuilderMgr.AddDataToSection('Price',LineValue[5]);
      ExcelReportBuilderMgr.AddDataToSection('Amount',LineValue[6]);
      ExcelReportBuilderMgr.AddDataToSection('TaxRate',LineValue[7]);
      ExcelReportBuilderMgr.AddDataToSection('TaxAmount',LineValue[8]);
      ExcelReportBuilderMgr.AddDataToSection('AmountInclTax',LineValue[9]);
      ExcelReportBuilderMgr.AddDataToSection('CountryCode',LineValue[10]);
      ExcelReportBuilderMgr.AddDataToSection('Country',LineValue[11]);
      ExcelReportBuilderMgr.AddDataToSection('GTD',LineValue[12]);
    END;

    PROCEDURE FillReportFooter@1210001(AmountArrayTxt@1210000 : ARRAY [3] OF Text;ResponsiblePerson@1210001 : ARRAY [2] OF Text;IsProforma@1210002 : Boolean);
    VAR
      CompanyInformation@1210003 : Record 79;
    BEGIN
      IF NOT ExcelReportBuilderMgr.TryAddSectionWithPlaceForFooter('REPORTFOOTER','FOOTER') THEN BEGIN
        ExcelReportBuilderMgr.AddPagebreak;
        FillPageHeader;
        ExcelReportBuilderMgr.AddSection('REPORTFOOTER');
      END;

      ExcelReportBuilderMgr.AddDataToSection('AmountTotal',AmountArrayTxt[1]);
      ExcelReportBuilderMgr.AddDataToSection('TaxAmountTotal',AmountArrayTxt[2]);
      ExcelReportBuilderMgr.AddDataToSection('AmountInclTaxTotal',AmountArrayTxt[3]);

      IF IsProforma THEN BEGIN
        CompanyInformation.GET;
        ExcelReportBuilderMgr.AddDataToSection('BankName',CompanyInformation."Bank Name");
        ExcelReportBuilderMgr.AddDataToSection('BankCity',CompanyInformation."Bank City");
        ExcelReportBuilderMgr.AddDataToSection('CompanyINN',CompanyInformation."VAT Registration No.");
        ExcelReportBuilderMgr.AddDataToSection('CompanyKPP',CompanyInformation."KPP Code");
        ExcelReportBuilderMgr.AddDataToSection('CompanyName',StdRepMgt.GetCompanyName);
        ExcelReportBuilderMgr.AddDataToSection('BankBranchNo',CompanyInformation."Bank Branch No.");
        ExcelReportBuilderMgr.AddDataToSection('BankBIC',CompanyInformation."Bank BIC");
        ExcelReportBuilderMgr.AddDataToSection('BankCorrespAccNo',CompanyInformation."Bank Corresp. Account No.");
        ExcelReportBuilderMgr.AddDataToSection('BankAccountNo',CompanyInformation."Bank Account No.");
      END;

      ExcelReportBuilderMgr.AddDataToSection('DirectorName',ResponsiblePerson[1]);
      ExcelReportBuilderMgr.AddDataToSection('AccountantName',ResponsiblePerson[2]);

      ExcelReportBuilderMgr.AddSection('FOOTER');

      PrevDocumentPageNo := ExcelReportBuilderMgr.GetLastPageNo;
    END;

    PROCEDURE FinalizeReport@1210000(AmountArrayTxt@1210001 : ARRAY [3] OF Text;ResponsiblePerson@1210000 : ARRAY [2] OF Text;IsProforma@1210002 : Boolean);
    BEGIN
      FillReportFooter(AmountArrayTxt,ResponsiblePerson,IsProforma);
      ExcelReportBuilderMgr.AddPagebreak;
    END;

    PROCEDURE GetCurrencyInfo@1210050(CurrencyCode@1210002 : Code[10];VAR CurrencyDigitalCode@1210003 : Code[3];VAR CurrencyDescription@1210004 : Text);
    VAR
      GLSetup@1210000 : Record 98;
      Currency@1210001 : Record 4;
    BEGIN
      CurrencyDigitalCode := '';
      CurrencyDescription := '';
      IF CurrencyCode = '' THEN BEGIN
        GLSetup.GET;
        CurrencyCode := GLSetup."LCY Code";
      END;

      IF Currency.GET(CurrencyCode) THEN BEGIN
        CurrencyDigitalCode := Currency."RU Bank Digital Code";
        CurrencyDescription := LOWERCASE(COPYSTR(Currency.Description,1,1)) + COPYSTR(Currency.Description,2);
      END;
    END;

    PROCEDURE GetFAInfo@1210004(FANo@1210001 : Code[20];VAR CDNo@1210002 : Text;VAR CountryName@1210004 : Text);
    VAR
      FA@1210000 : Record 5600;
      CDNoInfo@1210003 : Record 12408;
    BEGIN
      CDNo := '';
      CountryName := '';

      FA.GET(FANo);
      IF FA."CD No." <> '' THEN BEGIN
        CDNo := FA."CD No.";
        CDNoInfo.GET(
          CDNoInfo.Type::"Fixed Asset",FA."No.",'',FA."CD No.");
        CountryName := CDNoInfo.GetCountryName;
        // CountryCode := CDNoInfo.GetCountryLocalCode;
      END;
    END;

    PROCEDURE GetConsignorInfo@1210005(VendorNo@1210000 : Code[20];VAR ConsignorName@1210002 : Text;VAR ConsignorAddress@1210003 : Text);
    VAR
      Vendor@1210001 : Record 23;
    BEGIN
      IF VendorNo = '' THEN BEGIN
        ConsignorName := SameTxt;
        ConsignorAddress := '';
      END ELSE BEGIN
        Vendor.GET(VendorNo);
        ConsignorName := StdRepMgt.GetVendorName(VendorNo);
        ConsignorAddress := Vendor."Post Code" + ', ' + Vendor.City + ', ' + Vendor.Address + ' ' + Vendor."Address 2";
      END;
    END;

    PROCEDURE GetCurrencyAmtCode@1210003(CurrencyCode@1210001 : Code[20];AmountInvoiceCurrent@1210000 : 'Invoice Currency,LCY') CurrencyWrittenAmount : Code[20];
    BEGIN
      CurrencyWrittenAmount := '';
      IF AmountInvoiceCurrent = AmountInvoiceCurrent::"Invoice Currency" THEN
        CurrencyWrittenAmount := CurrencyCode;
    END;

    PROCEDURE InitAddressInfo@1210009(VAR ConsignorName@1210000 : Text;VAR ConsignorAddress@1210001 : Text;VAR Receiver@1210002 : ARRAY [2] OF Text);
    BEGIN
      ConsignorName := '-';
      ConsignorAddress := '';
      Receiver[1] := '-';
      Receiver[2] := '';
    END;

    PROCEDURE FormatTotalAmounts@1210007(VAR TotalAmountTxt@1210001 : ARRAY [3] OF Text;TotalAmount@1210002 : ARRAY [3] OF Decimal;Sign@1210000 : Integer;Prepayment@1210003 : Boolean;VATExemptTotal@1210004 : Boolean);
    BEGIN
      IF Prepayment THEN
        TotalAmountTxt[1] := '-'
      ELSE
        TotalAmountTxt[1] := StdRepMgt.FormatReportValue(Sign * TotalAmount[1],2);

      IF VATExemptTotal THEN
        TotalAmountTxt[2] := '-'
      ELSE
        TotalAmountTxt[2] := StdRepMgt.FormatReportValue(Sign * TotalAmount[2],2);

      TotalAmountTxt[3] := StdRepMgt.FormatReportValue(Sign * TotalAmount[3],2);
    END;

    PROCEDURE TransferItemTrLineValues@1210024(VAR LineValues@1210000 : ARRAY [12] OF Text;VAR TrackingSpecBuf@1210002 : TEMPORARY Record 336;CountryCode@1210003 : Code[10];CountryName@1210001 : Text;Sign@1210005 : Integer);
    VAR
      I@1210004 : Integer;
    BEGIN
      FOR I := 1 TO 3 DO
        LineValues[I] := '';

      LineValues[4] := FORMAT(Sign * TrackingSpecBuf."Quantity (Base)");

      FOR I := 5 TO 9 DO
        LineValues[I] := '-';

      LineValues[10] := StdRepMgt.FormatTextValue(CountryCode);
      LineValues[11] := StdRepMgt.FormatTextValue(COPYSTR(CountryName,1,1024));
      LineValues[12] := StdRepMgt.FormatTextValue(TrackingSpecBuf."CD No.")
    END;

    PROCEDURE TransferLineDescrValues@1210023(VAR LineValues@1210000 : ARRAY [12] OF Text;LineDescription@1210005 : Text);
    VAR
      I@1210004 : Integer;
    BEGIN
      LineValues[1] := LineDescription;

      FOR I := 2 TO 12 DO
        LineValues[I] := '';
    END;

    PROCEDURE ExportDataFile@1210010(FileName@1210000 : Text);
    BEGIN
      ExcelReportBuilderMgr.ExportDataToClientFile(FileName);
    END;

    BEGIN
    END.
  }
}

