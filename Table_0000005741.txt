OBJECT Table 5741 Transfer Line
{
  OBJECT-PROPERTIES
  {
    Date=22.05.17;
    Time=12:03:21;
    Modified=Yes;
    Version List=NAVW110.00.00.15140,NAVRU10.00.00.15140,NOS-26;
  }
  PROPERTIES
  {
    OnInsert=VAR
               TransLine2@1000 : Record 5741;
             BEGIN
               TestStatusOpen;
               TransLine2.RESET;
               TransLine2.SETFILTER("Document No.",TransHeader."No.");
               IF TransLine2.FINDLAST THEN
                 "Line No." := TransLine2."Line No." + 10000;
               ReserveTransferLine.VerifyQuantity(Rec,xRec);
             END;

    OnModify=BEGIN
               ReserveTransferLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               ItemChargeAssgntPurch@1000 : Record 5805;
             BEGIN
               TestStatusOpen;

               TESTFIELD("Quantity Shipped","Quantity Received");
               TESTFIELD("Qty. Shipped (Base)","Qty. Received (Base)");
               CALCFIELDS("Reserved Qty. Inbnd. (Base)","Reserved Qty. Outbnd. (Base)");
               TESTFIELD("Reserved Qty. Inbnd. (Base)",0);
               TESTFIELD("Reserved Qty. Outbnd. (Base)",0);

               ReserveTransferLine.DeleteLine(Rec);
               WhseValidateSourceLine.TransLineDelete(Rec);

               ItemChargeAssgntPurch.SETCURRENTKEY(
                 "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
               ItemChargeAssgntPurch.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Transfer Line;
               RUS=Строка перемещения];
    LookupPageID=Page5749;
    DrillDownPageID=Page5749;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=VAR
                                                                TempTransferLine@1000 : TEMPORARY Record 5741;
                                                              BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                CALCFIELDS("Reserved Qty. Inbnd. (Base)");
                                                                TESTFIELD("Reserved Qty. Inbnd. (Base)",0);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);

                                                                TempTransferLine := Rec;
                                                                INIT;
                                                                "Item No." := TempTransferLine."Item No.";
                                                                IF "Item No." = '' THEN
                                                                  EXIT;

                                                                GetTransHeader;
                                                                GetItem;
                                                                GetDefaultBin("Transfer-from Code","Transfer-to Code");

                                                                Item.TESTFIELD(Blocked,FALSE);
                                                                IF Item."Gross Weight Mandatory" THEN
                                                                  Item.TESTFIELD("Gross Weight");
                                                                IF Item."Unit Volume Mandatory" THEN
                                                                  Item.TESTFIELD("Unit Volume");

                                                                VALIDATE(Description,Item.Description);
                                                                VALIDATE("Gen. Prod. Posting Group",Item."Gen. Prod. Posting Group");
                                                                VALIDATE("Inventory Posting Group",Item."Inventory Posting Group");
                                                                VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                VALIDATE("Gross Weight",Item."Gross Weight");
                                                                VALIDATE("Net Weight",Item."Net Weight");
                                                                VALIDATE("Unit Volume",Item."Unit Volume");
                                                                VALIDATE("Units per Parcel",Item."Units per Parcel");
                                                                VALIDATE("Description 2",Item."Description 2");
                                                                VALIDATE(Quantity,xRec.Quantity);
                                                                "Item Category Code" := Item."Item Category Code";
                                                                "Product Group Code" := Item."Product Group Code";

                                                                CreateDim(DATABASE::Item,"Item No.");
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              RUS=Код товара] }
    { 4   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF Quantity <> 0 THEN
                                                                  TESTFIELD("Item No.");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF ((Quantity * "Quantity Shipped") < 0) OR
                                                                   (ABS(Quantity) < ABS("Quantity Shipped"))
                                                                THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text002,FIELDCAPTION("Quantity Shipped")));
                                                                IF (("Quantity (Base)" * "Qty. Shipped (Base)") < 0) OR
                                                                   (ABS("Quantity (Base)") < ABS("Qty. Received (Base)"))
                                                                THEN
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToShip;
                                                                InitQtyToReceive;
                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                ReserveTransferLine.VerifyQuantity(Rec,xRec);

                                                                UpdateWithWarehouseShipReceive;

                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              RUS=Кол-во];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5   ;   ;Unit of Measure     ;Text10        ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              RUS=Единица измерения] }
    { 6   ;   ;Qty. to Ship        ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Transfer-from Code");
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF Location."Require Shipment" AND
                                                                     ("Qty. to Ship" <> 0)
                                                                  THEN
                                                                    CheckWarehouse("Transfer-from Code",FALSE);
                                                                  WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Ship" > "Outstanding Quantity" THEN
                                                                  IF "Outstanding Quantity" > 0 THEN
                                                                    ERROR(
                                                                      Text005,
                                                                      "Outstanding Quantity")
                                                                  ELSE
                                                                    ERROR(Text006);
                                                                "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");

                                                                IF "In-Transit Code" = '' THEN
                                                                  VALIDATE("Qty. to Receive","Qty. to Ship");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              RUS=Кол-во для отгрузки];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7   ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Transfer-to Code");
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF Location."Require Receive" AND
                                                                     ("Qty. to Receive" <> 0)
                                                                  THEN
                                                                    CheckWarehouse("Transfer-to Code",TRUE);
                                                                  WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                END;

                                                                GetTransferHeaderNoVerification;
                                                                IF NOT TransHeader."Direct Transfer" THEN
                                                                  IF "Qty. to Receive" > "Qty. in Transit" THEN
                                                                    IF "Qty. in Transit" > 0 THEN
                                                                      ERROR(
                                                                        Text008,
                                                                        "Qty. in Transit")
                                                                    ELSE
                                                                      ERROR(Text009);
                                                                "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive;
                                                              RUS=Кол-во для получения];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 8   ;   ;Quantity Shipped    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Shipped (Base)" := CalcBaseQty("Quantity Shipped");
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToShip;
                                                                InitQtyToReceive;
                                                              END;

                                                   CaptionML=[ENU=Quantity Shipped;
                                                              RUS=Отгруженное кол-во];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 9   ;   ;Quantity Received   ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Received (Base)" := CalcBaseQty("Quantity Received");
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToReceive;
                                                              END;

                                                   CaptionML=[ENU=Quantity Received;
                                                              RUS=Полученное кол-во];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 10  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Open,Released;
                                                                    RUS=Открыто,Выпущено];
                                                   OptionString=Open,Released;
                                                   Editable=No }
    { 11  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              RUS=Код ярлыка измерения 1];
                                                   CaptionClass='1,2,1' }
    { 12  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              RUS=Код ярлыка измерения 2];
                                                   CaptionClass='1,2,2' }
    { 13  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 14  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              RUS=Общая товарная группа] }
    { 15  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              RUS=Учетная группа товаров] }
    { 16  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              RUS=Количество (баз.)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 17  ;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              RUS=Недопоставл. кол-во (баз.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 18  ;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              RUS=Кол-во для отгрузки (баз.)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 19  ;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              RUS=Отгруженное кол-во (баз.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              RUS=Кол-во для получения (баз.)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              RUS=Полученное кол-во (баз.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 22  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              RUS=Кол-во в единице измерения];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 23  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                UnitOfMeasure@1000 : Record 204;
                                                                UOMMgt@1001 : Codeunit 5402;
                                                              BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Qty. Received (Base)",0);
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                END;
                                                                GetItem;
                                                                VALIDATE("Qty. per Unit of Measure",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"));
                                                                "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              RUS=Код единицы измерения] }
    { 24  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              RUS=Недопоставленное кол-во];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 25  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              RUS=Вес брутто];
                                                   DecimalPlaces=0:5 }
    { 26  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              RUS=Вес нетто];
                                                   DecimalPlaces=0:5 }
    { 27  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              RUS=Объем единицы];
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                GetDefaultBin("Transfer-from Code","Transfer-to Code");
                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";

                                                                CheckItemAvailable(FIELDNO("Variant Code"));
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              RUS=Код варианта] }
    { 31  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              RUS=Кол-во единиц в упаковке];
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              RUS=Описание 2] }
    { 33  ;   ;In-Transit Code     ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                              END;

                                                   CaptionML=[ENU=In-Transit Code;
                                                              RUS=Код транзитного склада];
                                                   Editable=No }
    { 34  ;   ;Qty. in Transit     ;Decimal       ;CaptionML=[ENU=Qty. in Transit;
                                                              RUS=Кол-во в пути];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 35  ;   ;Qty. in Transit (Base);Decimal     ;CaptionML=[ENU=Qty. in Transit (Base);
                                                              RUS=Кол-во в пути (баз.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 36  ;   ;Transfer-from Code  ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Transfer-from Code" <> xRec."Transfer-from Code" THEN BEGIN
                                                                  "Transfer-from Bin Code" := '';
                                                                  GetDefaultBin("Transfer-from Code",'');
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Transfer-from Code"));
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                UpdateWithWarehouseShipReceive;
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Transfer-from Code;
                                                              RUS=Код склада-источника];
                                                   Editable=No }
    { 37  ;   ;Transfer-to Code    ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Transfer-to Code" <> xRec."Transfer-to Code" THEN BEGIN
                                                                  "Transfer-To Bin Code" := '';
                                                                  GetDefaultBin('',"Transfer-to Code");
                                                                END;

                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                UpdateWithWarehouseShipReceive;
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Transfer-to Code;
                                                              RUS=Код склада-назначения];
                                                   Editable=No }
    { 38  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipment Date"));
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              RUS=Дата отгрузки] }
    { 39  ;   ;Receipt Date        ;Date          ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcShipmentDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipment Date"));
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Receipt Date;
                                                              RUS=Дата приемки] }
    { 40  ;   ;Derived From Line No.;Integer      ;TableRelation="Transfer Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Derived From Line No.;
                                                              RUS=Выделено из строки номер] }
    { 41  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              RUS=Код экспедитора] }
    { 42  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.GetShippingTime(
                                                                  "Transfer-from Code","Transfer-to Code",
                                                                  "Shipping Agent Code","Shipping Agent Service Code",
                                                                  "Shipping Time");
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipping Agent Service Code"));
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              RUS=Код услуги экспедитора] }
    { 43  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  TESTFIELD(Quantity);
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  IF (ItemLedgEntry."Lot No." <> '') OR (ItemLedgEntry."Serial No." <> '') THEN
                                                                    ERROR(MustUseTrackingErr,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));
                                                                  IF ABS("Qty. to Ship (Base)") > ItemLedgEntry.Quantity THEN
                                                                    ERROR(ShippingMoreUnitsThanReceivedErr,ItemLedgEntry.Quantity,ItemLedgEntry."Document No.");

                                                                  ItemLedgEntry.TESTFIELD("Location Code","Transfer-from Code");
                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(LedgEntryWillBeOpenedMsg,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              RUS=Примен. к товарной операции] }
    { 50  ;   ;Reserved Quantity Inbnd.;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(5741),
                                                                                                       Source Subtype=CONST(1),
                                                                                                       Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Inbnd.;
                                                              RUS=Зарезерв. входящее кол-во];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 51  ;   ;Reserved Quantity Outbnd.;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(5741),
                                                                                                        Source Subtype=CONST(0),
                                                                                                        Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Outbnd.;
                                                              RUS=Зарезерв. исходящее кол-во];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 52  ;   ;Reserved Qty. Inbnd. (Base);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Inbnd. (Base);
                                                              RUS=Зарезерв. входящее кол-во (баз.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Reserved Qty. Outbnd. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(5741),
                                                                                                                 Source Subtype=CONST(0),
                                                                                                                 Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Outbnd. (Base);
                                                              RUS=Зарезерв. исходящее кол-во (баз.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 54  ;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                DateConflictCheck;
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              RUS=Время отгрузки] }
    { 55  ;   ;Reserved Quantity Shipped;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FILTER(<>0),
                                                                                                       Source Type=CONST(5741),
                                                                                                       Source Subtype=CONST(1),
                                                                                                       Source Prod. Order Line=FIELD(Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Shipped;
                                                              RUS=Отгруженное зарезервированное кол-во];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 56  ;   ;Reserved Qty. Shipped (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FILTER(<>0),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Source Prod. Order Line=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Shipped (Base);
                                                              RUS=Отгруженное зарезервированное кол-во (баз.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              RUS=Код набора измерений];
                                                   Editable=No }
    { 5704;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              RUS=Код товарной категории] }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              RUS=Код товарной группы] }
    { 5750;   ;Whse. Inbnd. Otsdg. Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5741),
                                                                                                                             Source Subtype=CONST(1),
                                                                                                                             Source No.=FIELD(Document No.),
                                                                                                                             Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse. Inbnd. Otsdg. Qty (Base);
                                                              RUS=Вход. недост. кол-во на складе (баз.)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5751;   ;Whse Outbnd. Otsdg. Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5741),
                                                                                                                              Source Subtype=CONST(0),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse Outbnd. Otsdg. Qty (Base);
                                                              RUS=Исход. недост. кол-во на складе (баз.)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              RUS=Полностью поставлено];
                                                   Editable=No }
    { 5753;   ;Completely Received ;Boolean       ;CaptionML=[ENU=Completely Received;
                                                              RUS=Получено полностью];
                                                   Editable=No }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              RUS=Время исход. обработки на складе] }
    { 5794;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              RUS=Время вход. обработки на складе] }
    { 7300;   ;Transfer-from Bin Code;Code20      ;TableRelation="Bin Content"."Bin Code" WHERE (Location Code=FIELD(Transfer-from Code),
                                                                                                 Item No.=FIELD(Item No.),
                                                                                                 Variant Code=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF "Transfer-from Bin Code" <> xRec."Transfer-from Bin Code" THEN BEGIN
                                                                  TESTFIELD("Transfer-from Code");
                                                                  IF "Transfer-from Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Transfer-from Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Transfer-from Code","Transfer-from Bin Code");
                                                                    TESTFIELD("Transfer-from Code",Bin."Location Code");
                                                                    HandleDedicatedBin(TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer-from Bin Code;
                                                              RUS=Код ячейки склада-источника] }
    { 7301;   ;Transfer-To Bin Code;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Transfer-to Code));
                                                   OnValidate=BEGIN
                                                                IF "Transfer-To Bin Code" <> xRec."Transfer-To Bin Code" THEN BEGIN
                                                                  TESTFIELD("Transfer-to Code");
                                                                  IF "Transfer-To Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Transfer-to Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Transfer-to Code","Transfer-To Bin Code");
                                                                    TESTFIELD("Transfer-to Code",Bin."Location Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer-To Bin Code;
                                                              RUS=Код ячейки склада-назначения] }
    { 99000755;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReserveTransferLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=[ENU=Planning Flexibility;
                                                              RUS=Гибкость планирования];
                                                   OptionCaptionML=[ENU=Unlimited,None;
                                                                    RUS=Неограниченно,Нет];
                                                   OptionString=Unlimited,None }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Transfer-to Code,Status,Derived From Line No.,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Receipt Date,In-Transit Code;
                                                   SumIndexFields=Qty. in Transit (Base),Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Transfer-from Code,Status,Derived From Line No.,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Shipment Date,In-Transit Code;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Variant Code                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;RUS=Нельзя переименовать %1.';
      Text002@1002 : TextConst 'ENU=must not be less than %1;RUS=не должно быть меньше %1';
      Text003@1003 : TextConst 'ENU="Warehouse %1 is required for %2 = %3.";RUS="Склад %1 требуется для %2 = %3."';
      Text004@1004 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.;RUS=\Введенные сведения могут не быть учтены в складских операциях.';
      Text005@1005 : TextConst 'ENU=You cannot ship more than %1 units.;RUS=Нельзя отгрузить более %1 ед.';
      Text006@1006 : TextConst 'ENU=All items have been shipped.;RUS=Все товары отгружены.';
      Text008@1008 : TextConst 'ENU=You cannot receive more than %1 units.;RUS=Нельзя получить более чем %1 ед.';
      Text009@1009 : TextConst 'ENU=No items are currently in transit.;RUS=Товары в пути в данный момент отсутствуют.';
      Text011@1011 : TextConst 'ENU=Outbound,Inbound;RUS=Исходящие,Входящие';
      Text012@1020 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;RUS=Одно или несколько измерений отгруженной номенклатуры %1 было изменено. При разноске строки с измененной в аналитикой в ГК суммы на промежуточном счете учета запасов при выведении отчетов по аналитике не будут сбалансированы.\\Сохранить измененную аналитику?';
      Text013@1017 : TextConst 'ENU=Cancelled.;RUS=Отменено.';
      TransferRoute@1012 : Record 5742;
      Item@1013 : Record 27;
      TransHeader@1014 : Record 5740;
      Location@1016 : Record 14;
      Bin@1000 : Record 7354;
      DimMgt@1019 : Codeunit 408;
      WhseValidateSourceLine@1022 : Codeunit 5777;
      ReserveTransferLine@1024 : Codeunit 99000836;
      CheckDateConflict@1025 : Codeunit 99000815;
      WMSManagement@1015 : Codeunit 7302;
      Reservation@1018 : Page 498;
      TrackingBlocked@1007 : Boolean;
      Text12402@1210000 : TextConst 'ENU=Quantity %1 in line %2 cannot be reserved automatically.;RUS=Не удается автоматически зарезервировать количество %1 в строке %2.';
      MustUseTrackingErr@1023 : TextConst '@@@="%1 = Form Name, %2 = Value to Enter";ENU=You must use the %1 page to specify the %2, if you use item tracking.;RUS=При использовании трассировки товаров на странице %1 следует указать %2.';
      LedgEntryWillBeOpenedMsg@1021 : TextConst '@@@="%1 = Entry No.";ENU=When posting the Applied to Ledger Entry %1 will be opened first.;RUS=При учете применения в первую очередь будет открыта операция %1.';
      ShippingMoreUnitsThanReceivedErr@1010 : TextConst '@@@="%1 = Quantity Value, %2 = Document No.";ENU=You cannot ship more than the %1 units that you have received for document no. %2.;RUS=Невозможно отгрузить более чем %1 единиц, которые были получены по документу №%2.';

    LOCAL PROCEDURE InitOutstandingQty@16();
    BEGIN
      "Outstanding Quantity" := Quantity - "Quantity Shipped";
      "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
    END;

    LOCAL PROCEDURE InitQtyToShip@15();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END;

    LOCAL PROCEDURE InitQtyToReceive@2();
    BEGIN
      IF "In-Transit Code" <> '' THEN BEGIN
        "Qty. to Receive" := "Qty. in Transit";
        "Qty. to Receive (Base)" := "Qty. in Transit (Base)";
      END ELSE BEGIN
        "Qty. to Receive" := "Qty. to Ship";
        "Qty. to Receive (Base)" := "Qty. to Ship (Base)";
      END;
    END;

    LOCAL PROCEDURE InitQtyInTransit@4();
    BEGIN
      IF "In-Transit Code" <> '' THEN BEGIN
        "Qty. in Transit" := "Quantity Shipped" - "Quantity Received";
        "Qty. in Transit (Base)" := "Qty. Shipped (Base)" - "Qty. Received (Base)";
      END ELSE BEGIN
        "Qty. in Transit" := 0;
        "Qty. in Transit (Base)" := 0;
      END;
      "Completely Received" := (Quantity <> 0) AND (Quantity = "Quantity Received");
    END;

    PROCEDURE ResetPostedQty@6();
    BEGIN
      "Quantity Shipped" := 0;
      "Qty. Shipped (Base)" := 0;
      "Quantity Received" := 0;
      "Qty. Received (Base)" := 0;
      "Qty. in Transit" := 0;
      "Qty. in Transit (Base)" := 0;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetTransHeader@1();
    BEGIN
      GetTransferHeaderNoVerification;

      TransHeader.TESTFIELD("Shipment Date");
      TransHeader.TESTFIELD("Receipt Date");
      TransHeader.TESTFIELD("Transfer-from Code");
      TransHeader.TESTFIELD("Transfer-to Code");
      IF NOT TransHeader."Direct Transfer" THEN
        TransHeader.TESTFIELD("In-Transit Code");
      "In-Transit Code" := TransHeader."In-Transit Code";
      "Transfer-from Code" := TransHeader."Transfer-from Code";
      "Transfer-to Code" := TransHeader."Transfer-to Code";
      "Shipment Date" := TransHeader."Shipment Date";
      "Receipt Date" := TransHeader."Receipt Date";
      "Shipping Agent Code" := TransHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := TransHeader."Shipping Agent Service Code";
      "Shipping Time" := TransHeader."Shipping Time";
      "Outbound Whse. Handling Time" := TransHeader."Outbound Whse. Handling Time";
      "Inbound Whse. Handling Time" := TransHeader."Inbound Whse. Handling Time";
      Status := TransHeader.Status;
    END;

    LOCAL PROCEDURE GetTransferHeaderNoVerification@1210002();
    BEGIN
      TESTFIELD("Document No.");
      IF "Document No." <> TransHeader."No." THEN
        TransHeader.GET("Document No.");
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      TESTFIELD("Item No.");
      IF "Item No." <> Item."No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE BlockDynamicTracking@23(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReserveTransferLine.Block(SetBlock);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.SetObjectFrom(Rec); // NC NOS-26 SPA
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record 242;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Transfer,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",TransHeader."Dimension Set ID",DATABASE::Item);
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      VerifyItemLineDim;
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [20] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE CheckItemAvailable@3(CalledByFieldNo@1000 : Integer);
    VAR
      ItemCheckAvail@1001 : Codeunit 311;
    BEGIN
      IF (CurrFieldNo <> 0) AND
         (CurrFieldNo = CalledByFieldNo) AND
         ("Item No." <> '') AND
         ("Outstanding Quantity" > 0)
      THEN
        IF ItemCheckAvail.TransferLineCheck(Rec) THEN
          ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    PROCEDURE OpenItemTrackingLines@6500(Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Quantity (Base)");

      ReserveTransferLine.CallItemTracking(Rec,Direction,FALSE);
    END;

    PROCEDURE OpenItemTrackingLinesWithReclass@1210001(Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Quantity (Base)");

      ReserveTransferLine.CallItemTracking(Rec,Direction,TRUE);
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    BEGIN
      TESTFIELD("Document No.");
      IF TransHeader."No." <> "Document No." THEN
        TransHeader.GET("Document No.");
      TransHeader.TESTFIELD(Status,TransHeader.Status::Open);
    END;

    PROCEDURE ShowReservation@10();
    VAR
      OptionNumber@1000 : Integer;
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      OptionNumber := STRMENU(Text011);
      IF OptionNumber > 0 THEN BEGIN
        Reservation.SetTransLine(Rec,OptionNumber - 1);
        Reservation.RUNMODAL;
      END;
    END;

    PROCEDURE UpdateWithWarehouseShipReceive@41();
    BEGIN
      IF Location.RequireShipment("Transfer-from Code") THEN
        VALIDATE("Qty. to Ship",0)
      ELSE
        VALIDATE("Qty. to Ship","Outstanding Quantity");

      IF Location.RequireReceive("Transfer-to Code") THEN
        VALIDATE("Qty. to Receive",0)
      ELSE
        IF "In-Transit Code" <> '' THEN
          VALIDATE("Qty. to Receive","Qty. in Transit")
        ELSE
          VALIDATE("Qty. to Receive","Qty. to Ship");
    END;

    LOCAL PROCEDURE CheckWarehouse@47(LocationCode@1003 : Code[10];Receive@1004 : Boolean);
    VAR
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1000 : Text[50];
    BEGIN
      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF Receive THEN
          DialogText := Location.GetRequirementText(Location.FIELDNO("Require Receive"))
        ELSE
          DialogText := Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
      END ELSE BEGIN
        IF Receive AND (Location."Require Receive" OR Location."Require Put-away") THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               1,
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location."Require Receive" THEN
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Receive"))
          ELSE
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Put-away"));
        END;

        IF NOT Receive AND (Location."Require Shipment" OR Location."Require Pick") THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               0,
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location."Require Shipment" THEN
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Shipment"))
          ELSE
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Pick"));
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text003 + Text004,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text003,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;
    END;

    LOCAL PROCEDURE GetLocation@44(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF Bin.Code <> BinCode THEN
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE GetDefaultBin@5(FromLocationCode@1000 : Code[10];ToLocationCode@1001 : Code[10]);
    BEGIN
      IF (FromLocationCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(FromLocationCode);
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          WMSManagement.GetDefaultBin("Item No.","Variant Code",FromLocationCode,"Transfer-from Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;

      IF (ToLocationCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(ToLocationCode);
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          WMSManagement.GetDefaultBin("Item No.","Variant Code",ToLocationCode,"Transfer-To Bin Code");
      END;
    END;

    PROCEDURE IsInbound@8() : Boolean;
    BEGIN
      EXIT("Quantity (Base)" < 0);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@7(IssueWarning@1000 : Boolean);
    VAR
      WhseIntegrationMgt@1001 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Transfer-from Code","Transfer-from Bin Code",IssueWarning);
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean;IsSupplyForPlanning@1002 : Boolean);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.");
      SETRANGE("Item No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      IF NOT IsSupplyForPlanning THEN
        SETRANGE("Derived From Line No.",0);
      IF IsReceipt THEN BEGIN
        SETFILTER("Transfer-to Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Receipt Date",Item.GETFILTER("Date Filter"))
      END ELSE BEGIN
        SETFILTER("Transfer-from Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
        SETFILTER("Outstanding Qty. (Base)",'<>0');
      END;
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean;IsSupplyForPlanning@1002 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IsReceipt,IsSupplyForPlanning);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IsReceipt,FALSE);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE VerifyItemLineDim@87();
    BEGIN
      IF IsShippedDimChanged THEN
        ConfirmShippedDimChange;
    END;

    PROCEDURE ReserveFromInventory@1210000(VAR TransLine@1210000 : Record 5741);
    VAR
      ReservMgt@1210001 : Codeunit 99000845;
      AutoReserv@1210002 : Boolean;
    BEGIN
      IF TransLine.FINDSET THEN
        REPEAT
          ReservMgt.SetTransferLine(TransLine,0);
          TransLine.TESTFIELD("Shipment Date");
          TransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)");
          ReservMgt.AutoReserveToShip(
            AutoReserv,'',TransLine."Shipment Date",
            TransLine."Qty. to Ship" - TransLine."Reserved Quantity Outbnd.",
            TransLine."Qty. to Ship (Base)" - TransLine."Reserved Qty. Outbnd. (Base)");
          IF NOT AutoReserv THEN
            ERROR(Text12402,TransLine."Qty. to Ship (Base)",TransLine."Line No.");
        UNTIL TransLine.NEXT = 0;
    END;

    PROCEDURE IsShippedDimChanged@105() : Boolean;
    BEGIN
      EXIT(("Dimension Set ID" <> xRec."Dimension Set ID") AND
        (("Quantity Shipped" <> 0) OR ("Qty. Shipped (Base)" <> 0)));
    END;

    PROCEDURE ConfirmShippedDimChange@106() : Boolean;
    BEGIN
      IF NOT CONFIRM(Text012,FALSE,TABLECAPTION) THEN
        ERROR(Text013);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SelectItemEntry@11(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      TransferLine2@1002 : Record 5741;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","Item No.");
      IF "Transfer-from Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Transfer-from Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      ItemLedgEntry.SETRANGE(Positive,TRUE);
      ItemLedgEntry.SETRANGE(Open,TRUE);

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        TransferLine2 := Rec;
        TransferLine2.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := TransferLine2;
      END;
    END;

    PROCEDURE DateConflictCheck@13();
    BEGIN
      IF NOT TrackingBlocked THEN
        CheckDateConflict.TransferLineCheck(Rec);
    END;

    BEGIN
    {
      NC NOS-26 SPA
    }
    END.
  }
}

