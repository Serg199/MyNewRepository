OBJECT Page 26587 XML Element Lines
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=XML Element Lines;
               RUS=Строки XML элемента];
    SourceTable=Table26570;
    DelayedInsert=Yes;
    SourceTableView=SORTING(Report Code,Sequence No.);
    DataCaptionFields=Report Code;
    PageType=List;
    OnInit=BEGIN
             ApplySelectionButtonEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 OnActivateForm;
               END;

    OnClosePage=BEGIN
                  IF NOT ISNULL(XlWrkBk) THEN BEGIN
                    IF NOT ISNULL(XlApp) THEN
                      IF XlApp.Visible THEN BEGIN
                        XlHelper.CallQuit(XlApp);
                        CLEAR(XlWrkBk);
                      END;

                    IF NOT ISNULL(XlApp) THEN BEGIN
                      XlHelper.CallQuit(XlApp);
                      CLEAR(XlApp);
                    END;
                  END;

                  EraseTempFile;
                END;

    OnAfterGetRecord=BEGIN
                       "Element NameIndent" := 0;
                       ElementNameOnFormat;
                     END;

    OnNewRecord=BEGIN
                  IF NOT BelowxRec THEN BEGIN
                    Indentation := xRec.Indentation;
                    "Parent Line No." := xRec."Parent Line No.";
                    "Element Type" := xRec."Element Type";
                  END;
                END;

    OnInsertRecord=VAR
                     XMLElementLine@1210000 : Record 26570;
                     SequenceNo@1210001 : Integer;
                     LineNo@1210002 : Integer;
                   BEGIN
                     XMLElementLine.SETRANGE("Report Code","Report Code");
                     IF XMLElementLine.FIND('+') THEN;
                     LineNo := XMLElementLine."Line No." + 10000;

                     XMLElementLine.SETCURRENTKEY("Report Code","Sequence No.");

                     IF BelowxRec THEN BEGIN
                       IF XMLElementLine.FIND('+') THEN;
                       "Sequence No." := XMLElementLine."Sequence No." + 1;
                       "Line No." := LineNo;
                     END ELSE BEGIN
                       SequenceNo := xRec."Sequence No.";

                       XMLElementLine.SETFILTER("Sequence No.",'%1..',SequenceNo);
                       IF XMLElementLine.FIND('+') THEN
                         REPEAT
                           XMLElementLine."Sequence No." := XMLElementLine."Sequence No." + 1;
                           XMLElementLine.MODIFY;
                         UNTIL XMLElementLine.NEXT(-1) = 0;

                       "Line No." := LineNo;
                       "Sequence No." := SequenceNo;
                     END;
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1210042 ;1   ;ActionGroup;
                      CaptionML=[ENU=Element;
                                 RUS=Элемент] }
      { 1210043 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+E;
                      CaptionML=[ENU=Expression Lines;
                                 RUS=Строки выражения];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=AdjustItemCost;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 XMLElementExpressionLine@1210001 : Record 26572;
                                 XMLElementExpressionLines@1210000 : Page 26585;
                               BEGIN
                                 TESTFIELD("Source Type","Source Type"::Expression);
                                 XMLElementExpressionLine.FILTERGROUP(2);
                                 XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
                                 XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
                                 XMLElementExpressionLine.FILTERGROUP(0);
                                 XMLElementExpressionLines.SETTABLEVIEW(XMLElementExpressionLine);
                                 XMLElementExpressionLines.RUNMODAL;
                               END;
                                }
      { 1210013 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+C;
                      CaptionML=[ENU=Compound Element Lines;
                                 RUS=Строки составного элемента];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ExplodeBOM;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowCompoundElementLines;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210041 ;1   ;Action    ;
                      Name=ApplySelectionButton;
                      CaptionML=[ENU=&Apply Selection;
                                 RUS=&Применить выбор];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=No;
                      Enabled=ApplySelectionButtonEnable;
                      Image=Excel;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ApplySelection;
                               END;
                                }
      { 1210030 ;1   ;ActionGroup;
                      CaptionML=[ENU=Functions;
                                 RUS=Функции];
                      Image=Action }
      { 1210031 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+W;
                      CaptionML=[ENU=Move Up;
                                 RUS=Сдвинуть вверх];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=MoveUp;
                      OnAction=BEGIN
                                 MoveUp;
                               END;
                                }
      { 1210032 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+S;
                      CaptionML=[ENU=Move Down;
                                 RUS=Сдвинуть вниз];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=MoveDown;
                      OnAction=BEGIN
                                 MoveDown;
                               END;
                                }
      { 1210033 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Move Right;
                                 RUS=Сдвинуть вправо];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 MoveRight;
                               END;
                                }
      { 1210034 ;2   ;Action    ;
                      CaptionML=[ENU=Move Left;
                                 RUS=Сдвинуть влево];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 MoveLeft;
                               END;
                                }
      { 1210038 ;2   ;Separator  }
      { 1210056 ;2   ;Action    ;
                      CaptionML=[ENU=Update Expression;
                                 RUS=Обновить выражение];
                      ApplicationArea=#Basic,#Suite;
                      Image=Refresh;
                      OnAction=BEGIN
                                 UpdateExpression;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 1210055 ;2   ;Separator  }
      { 1210039 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+O;
                      CaptionML=[ENU=Open Excel Template;
                                 RUS=Открыть шаблон Excel];
                      ApplicationArea=#Basic,#Suite;
                      Image=Excel;
                      OnAction=BEGIN
                                 OpenTemplate;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210000;1;Group     ;
                IndentationColumnName="Element NameIndent";
                IndentationControls=Element Name;
                GroupType=Repeater }

    { 1210001;2;Field     ;
                ToolTipML=[ENU=Specifies the element name associated with the XML element line.;
                           RUS=Определяет имя элемента, связанное со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Element Name";
                Style=Strong;
                StyleExpr="Element NameEmphasize" }

    { 1210037;2;Field     ;
                ToolTipML=[ENU=Specifies the indentation of the XML element line.;
                           RUS=Определяет отступ строки XML-элемента.];
                SourceExpr=Indentation;
                Visible=FALSE;
                Editable=FALSE }

    { 1210035;2;Field     ;
                ToolTipML=[ENU=Specifies the parent line number associated with the XML element line.;
                           RUS=Определяет номер родительской строки, связанный со строкой XML-элемента.];
                SourceExpr="Parent Line No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1210003;2;Field     ;
                ToolTipML=[ENU=Specifies the element type associated with the XML element line.;
                           RUS=Определяет тип элемента, связанный со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Element Type" }

    { 1210005;2;Field     ;
                ToolTipML=[ENU=Specifies the description of the XML element line.;
                           RUS=Определяет описание строки XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description }

    { 1210007;2;Field     ;
                ToolTipML=[ENU=Specifies the data type associated with the XML element line.;
                           RUS=Определяет тип данных, связанный со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Data Type" }

    { 1210009;2;Field     ;
                ToolTipML=[ENU=Specifies the link type associated with the XML element line.;
                           RUS=Определяет тип связи, связанный со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Link Type" }

    { 1210045;2;Field     ;
                ToolTipML=[ENU=Specifies the source type associated with the XML element line.;
                           RUS=Определяет тип источника, связанный со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Source Type";
                OnValidate=VAR
                             XMLElementExpressionLine@1210000 : Record 26572;
                           BEGIN
                             IF "Source Type" <> xRec."Source Type" THEN BEGIN
                               IF "Source Type" <> "Source Type"::" " THEN
                                 TESTFIELD("Link Type","Link Type"::Value);
                               CheckReportDataExistence(Text005);

                               CASE xRec."Source Type" OF
                                 xRec."Source Type"::Expression:
                                   BEGIN
                                     XMLElementExpressionLine.RESET;
                                     XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
                                     XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
                                     IF XMLElementExpressionLine.FINDFIRST THEN
                                       IF CONFIRM(Text002) THEN BEGIN
                                         XMLElementExpressionLine.DELETEALL;
                                         Value := '';
                                       END ELSE
                                         ERROR('');
                                   END;
                                 xRec."Source Type"::"Compound Element":
                                   BEGIN
                                     XMLElementExpressionLine.RESET;
                                     XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
                                     XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
                                     IF XMLElementExpressionLine.FINDFIRST THEN
                                       IF CONFIRM(Text004) THEN
                                         XMLElementExpressionLine.DELETEALL
                                       ELSE
                                         ERROR('');
                                   END;
                                 xRec."Source Type"::"Inserted Element",
                                 xRec."Source Type"::"Individual Element":
                                   "Column Link No." := 0;
                               END;

                               IF "Source Type" <> "Source Type"::Constant THEN
                                 Value := '';

                               CASE "Source Type" OF
                                 "Source Type"::" ",
                                 "Source Type"::Expression,
                                 "Source Type"::Constant,
                                 "Source Type"::"Individual Element",
                                 "Source Type"::"Compound Element":
                                   "Column Link No." := 0;
                                 "Source Type"::"Inserted Element":
                                   "Column Link No." := -10000;
                               END;

                               "Row Link No." := 0;
                             END;
                           END;
                            }

    { 1210014;2;Field     ;
                ToolTipML=[ENU=Specifies the value of the XML element line.;
                           RUS=Определяет значение строки XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Value }

    { 1210048;2;Field     ;
                ToolTipML=[ENU=Specifies the export type associated with the XML element line.;
                           RUS=Определяет тип экспорта, связанный со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Export Type" }

    { 1210044;2;Field     ;
                ToolTipML=[ENU=Specifies the service element associated with the XML element line.;
                           RUS=Определяет служебный элемент, связанный со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Service Element" }

    { 1210051;2;Field     ;
                ToolTipML=[ENU=Specifies if the XML element line is a choice line.;
                           RUS=Определяет, является ли строка XML-элемента строкой выбора.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Choice }

    { 1210059;2;Field     ;
                ToolTipML=[ENU=Specifies if OKEI scaling is associated with the XML element line.;
                           RUS=Определяет, связано ли масштабирование ОКЕИ со строкой XML-элемента.];
                SourceExpr="OKEI Scaling";
                Visible=FALSE }

    { 1210011;2;Field     ;
                ToolTipML=[ENU=Specifies the table code associated with the XML element line.;
                           RUS=Определяет код таблицы, связанный со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Code";
                OnValidate=BEGIN
                             TableCodeOnAfterValidate;
                           END;
                            }

    { 1210015;2;Field     ;
                ToolTipML=[ENU=Specifies the row link number of the XML element line.;
                           RUS=Определяет ссылочный номер строки для строки XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Row Link No.";
                OnLookup=BEGIN
                           LookupRow;
                         END;
                          }

    { 1210017;2;Field     ;
                ToolTipML=[ENU=Specifies the column link number of the XML element line.;
                           RUS=Определяет ссылочный номер столбца для строки XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Column Link No.";
                OnLookup=BEGIN
                           LookupColumn;
                         END;
                          }

    { 1210019;2;Field     ;
                ToolTipML=[ENU=Specifies the Microsoft Excel mapping type associated with the XML element line.;
                           RUS=Определяет тип сопоставления Microsoft Excel, связанный со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Excel Mapping Type" }

    { 1210057;2;Field     ;
                ToolTipML=[ENU=Specifies the Microsoft Excel sheet name of the XML element line.;
                           RUS=Определяет имя листа Microsoft Excel строки XML-элемента.];
                SourceExpr="Excel Sheet Name";
                Visible=FALSE }

    { 1210021;2;Field     ;
                ToolTipML=[ENU=Specifies the Microsoft Excel cell name associated with the XML element line.;
                           RUS=Определяет имя ячейки Microsoft Excel, связанное со строкой XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Excel Cell Name" }

    { 1210023;2;Field     ;
                ToolTipML=[ENU=Specifies the quantity of the horizontal cells of the XML element line.;
                           RUS=Определяет количество горизонтальных ячеек в строке XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Horizontal Cells Quantity" }

    { 1210025;2;Field     ;
                ToolTipML=[ENU=Specifies the quantity of the vertical cells of the XML element line.;
                           RUS=Определяет количество вертикальных ячеек в строке XML-элемента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Vertical Cells Quantity" }

    { 1210053;2;Field     ;
                ToolTipML=[ENU=Specifies the fraction digits of the XML element line.;
                           RUS=Определяет количество цифр после запятой для строки XML-элемента.];
                SourceExpr="Fraction Digits";
                Visible=FALSE }

    { 1210002;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="XML Export Date Format" }

    { 1210004;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Alignment }

    { 1210006;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pad Character" }

    { 1210008;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Template Data" }

  }
  CODE
  {
    VAR
      StatutoryReport@1210007 : Record 26550;
      StatutoryReportTable@1210005 : Record 26552;
      FormatVersion@1210006 : Record 26573;
      ExcelMgt@1210012 : Codeunit 12416;
      FileMgt@1210000 : Codeunit 419;
      XlApp@1210018 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1210017 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorkbookClass" RUNONCLIENT;
      XlHelper@1210016 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      XlWrkSht@1210015 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      XlWrkshts@1210014 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheets" RUNONCLIENT;
      Text000@1210001 : TextConst 'ENU=Excel not found.;RUS=Excel не установлен.';
      Text001@1210008 : TextConst 'ENU=Excel template is already opened.;RUS=Шаблон Excel уже открыт.';
      Text002@1210010 : TextConst 'ENU=All related expression lines will be deleted. Proceed?;RUS=Все связанные строки выражения будут удалены. Продолжить?';
      Text004@1210011 : TextConst 'ENU=All related compound element lines will be deleted. Proceed?;RUS=Все связанные строки составного элемента будут удалены. Продолжить?';
      Text005@1210009 : TextConst 'ENU=%1 cannot be modified because %2 %3 contains report data.;RUS=Изменение %1 невозможно, так как %2 %3 содержит данные отчета.';
      XlRange@1210002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      FileName@1210013 : Text[250];
      "Element NameEmphasize"@19030224 : Boolean INDATASET;
      "Element NameIndent"@19012220 : Integer INDATASET;
      ApplySelectionButtonEnable@19051700 : Boolean INDATASET;

    PROCEDURE MoveUp@1210002();
    VAR
      UpperLine@1210000 : Record 26570;
      SequenceNo@1210001 : Integer;
      CurrLineNo@1210002 : Integer;
    BEGIN
      CheckReportDataExistence(Text005);
      UpperLine.SETCURRENTKEY("Report Code","Sequence No.");
      UpperLine.SETRANGE("Report Code","Report Code");
      UpperLine.SETFILTER("Sequence No.",'..%1',"Sequence No." - 1);
      IF UpperLine.FINDLAST THEN BEGIN
        SequenceNo := UpperLine."Sequence No.";
        UpperLine."Sequence No." := "Sequence No.";
        UpperLine.MODIFY;

        CurrLineNo := "Line No.";

        GET("Report Code",UpperLine."Line No.");
        "Sequence No." := UpperLine."Sequence No.";
        MODIFY;

        GET("Report Code",CurrLineNo);
        Indentation := UpperLine.Indentation;
        "Sequence No." := SequenceNo;
        MODIFY(TRUE);

        UpperLine.GET("Report Code",CurrLineNo);
        UpperLine.Indentation := Indentation;
        UpperLine."Sequence No." := SequenceNo;
        UpperLine.MODIFY;
      END;

      UpdateLinks;
    END;

    PROCEDURE MoveDown@1210003();
    VAR
      LowerLine@1210001 : Record 26570;
      SequenceNo@1210000 : Integer;
      CurrLineNo@1210002 : Integer;
    BEGIN
      CheckReportDataExistence(Text005);
      LowerLine.SETCURRENTKEY("Report Code","Sequence No.");
      LowerLine.SETRANGE("Report Code","Report Code");
      LowerLine.SETFILTER("Sequence No.",'%1..',"Sequence No." + 1);
      IF LowerLine.FINDFIRST THEN BEGIN
        SequenceNo := LowerLine."Sequence No.";
        LowerLine."Sequence No." := "Sequence No.";
        LowerLine.MODIFY;

        CurrLineNo := "Line No.";

        GET("Report Code",LowerLine."Line No.");
        "Sequence No." := LowerLine."Sequence No.";
        MODIFY;

        GET("Report Code",CurrLineNo);
        Indentation := LowerLine.Indentation;
        "Sequence No." := SequenceNo;
        MODIFY(TRUE);

        LowerLine.GET("Report Code",CurrLineNo);
        LowerLine.Indentation := Indentation;
        LowerLine."Sequence No." := SequenceNo;
        LowerLine.MODIFY;
      END;
      UpdateLinks;
    END;

    PROCEDURE MoveRight@1210004();
    BEGIN
      CheckReportDataExistence(Text005);
      Indentation := Indentation + 1;
      MODIFY(TRUE);
      UpdateLinks;
    END;

    PROCEDURE MoveLeft@1210005();
    BEGIN
      CheckReportDataExistence(Text005);
      IF Indentation > 0 THEN BEGIN
        Indentation := Indentation - 1;
        MODIFY(TRUE);
      END;
      UpdateLinks;
    END;

    PROCEDURE UpdateLinks@1210000();
    VAR
      XMLElementLine@1210000 : Record 26570;
      ParentLine@1210001 : Record 26570;
    BEGIN
      ParentLine.SETCURRENTKEY("Report Code","Sequence No.");
      ParentLine.SETRANGE("Report Code","Report Code");

      XMLElementLine.SETCURRENTKEY("Report Code","Sequence No.");
      XMLElementLine.SETRANGE("Report Code","Report Code");
      IF XMLElementLine.FINDSET THEN
        REPEAT
          IF XMLElementLine.Indentation > 0 THEN BEGIN
            ParentLine.SETFILTER("Sequence No.",'<%1',XMLElementLine."Sequence No.");
            ParentLine.SETFILTER(Indentation,'<%1',XMLElementLine.Indentation);
            IF ParentLine.FINDLAST THEN BEGIN
              XMLElementLine."Parent Line No." := ParentLine."Line No.";
              XMLElementLine.MODIFY;
            END;
          END ELSE BEGIN
            XMLElementLine."Parent Line No." := 0;
            XMLElementLine.MODIFY;
          END;
        UNTIL XMLElementLine.NEXT = 0;
    END;

    PROCEDURE OpenTemplate@1210008();
    VAR
      TempBlob@1210000 : Record 99008535;
      EndOfLoop@1210001 : Integer;
      i@1210002 : Integer;
      Found@1210003 : Boolean;
    BEGIN
      EraseTempFile;
      StatutoryReport.GET("Report Code");
      StatutoryReport.TESTFIELD("Format Version Code");
      FormatVersion.GET(StatutoryReport."Format Version Code");
      FormatVersion.TESTFIELD("Excel File Name");

      IF NOT ISNULL(XlApp) THEN
        IF NOT XlApp.Visible THEN
          CLEAR(XlApp)
        ELSE
          ERROR(Text001);

      FormatVersion.CALCFIELDS("Report Template");
      IF FormatVersion."Report Template".HASVALUE THEN BEGIN
        FileName := FileMgt.ClientTempFileName('xls');
        TempBlob.Blob := FormatVersion."Report Template";
        FileName := FileMgt.BLOBExport(TempBlob,FileName,FALSE);
      END;

      XlApp := XlApp.ApplicationClass;
      IF ISNULL(XlApp) THEN
        ERROR(Text000);
      XlHelper.CallOpen(XlApp,FileName);
      XlWrkBk := XlApp.ActiveWorkbook;

      i := 1;
      EndOfLoop := XlWrkBk.Worksheets.Count;
      WHILE i <= EndOfLoop DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(i);
        i := i + 1;
      END;

      XlWrkSht := XlWrkBk.ActiveSheet;

      IF "Table Code" <> '' THEN BEGIN
        StatutoryReportTable.GET("Report Code","Table Code");
        IF StatutoryReportTable."Excel Sheet Name" <> '' THEN BEGIN
          i := 1;
          EndOfLoop := XlWrkBk.Worksheets.Count;
          WHILE (i <= EndOfLoop) AND (NOT Found) DO BEGIN
            XlWrkSht := XlWrkBk.Worksheets.Item(i);

            IF XlWrkSht.Name = StatutoryReportTable."Excel Sheet Name" THEN BEGIN
              Found := TRUE;
              XlWrkSht.Activate;
            END;

            i := i + 1;
          END;
        END;
      END;

      XlApp.Visible(TRUE);
      XlApp.UserControl(TRUE);
      XlWrkBk.Activate;

      UpdateControls;
    END;

    PROCEDURE ApplySelection@1210006();
    VAR
      SelectedAddress@1210000 : Text[30];
      FirstColumnName@1210002 : Code[10];
      LastColumnName@1210003 : Code[10];
      FirstRowName@1210004 : Code[10];
      LastRowName@1210005 : Code[10];
      FirstRowNo@1210001 : Integer;
      LastRowNo@1210006 : Integer;
      SelectionType@1210007 : 'Cell,Row,Column,Area';
    BEGIN
      IF NOT ISNULL(XlApp) THEN
        IF XlApp.Visible THEN BEGIN
          XlRange := XlApp.Selection;
          XlWrkSht := XlApp.ActiveSheet;

          SelectedAddress := FORMAT(XlRange.Address(TRUE,TRUE,ExcelMgt.GetXReferenceStyleXlA1Id,FALSE,0));
          ExcelMgt.ParseSelectionAddress(SelectedAddress,FirstColumnName,LastColumnName,FirstRowName,LastRowName);

          EVALUATE(FirstRowNo,FirstRowName);
          EVALUATE(LastRowNo,LastRowName);

          CASE GetSelectionType(FirstColumnName,LastColumnName,FirstRowName,LastRowName) OF
            SelectionType::Cell:
              BEGIN
                "Excel Mapping Type" := "Excel Mapping Type"::"Single-cell";
                "Excel Cell Name" := FirstColumnName + FirstRowName;
                "Horizontal Cells Quantity" := 1;
                "Vertical Cells Quantity" := 1;
              END;
            SelectionType::Row:
              ParseRow(FirstColumnName,LastColumnName,FirstRowName,LastRowName);
            SelectionType::Column:
              ParseColumn(FirstColumnName,LastColumnName,FirstRowName,LastRowName);
            SelectionType::Area:
              ParseArea(FirstColumnName,LastColumnName,FirstRowName,LastRowName);
          END;

          "Excel Sheet Name" := FORMAT(XlWrkSht.Name);
          MODIFY;
        END ELSE
          UpdateControls;
    END;

    PROCEDURE ParseRow@1210014(FirstColumnName@1210001 : Code[10];LastColumnName@1210002 : Code[10];FirstRowName@1210017 : Code[10];LastRowName@1210016 : Code[10]);
    VAR
      CurrColumnName@1210013 : Code[10];
      FirstColumnNo@1210004 : Integer;
      LastColumnNo@1210005 : Integer;
      CellCounter@1210011 : Integer;
      i@1210006 : Integer;
      MergedCells@1210014 : Boolean;
      Address@1210015 : Text[30];
    BEGIN
      FirstColumnNo := ExcelMgt.ColNameToInt(FirstColumnName);
      LastColumnNo := ExcelMgt.ColNameToInt(LastColumnName);

      "Excel Mapping Type" := "Excel Mapping Type"::"Multi-cell";

      FOR i := FirstColumnNo TO LastColumnNo DO BEGIN
        CurrColumnName := ExcelMgt.ColumnNo2Name(i);
        CellCounter := CellCounter + 1;

        IF CellCounter = 1 THEN
          "Excel Cell Name" := CurrColumnName + FirstRowName;

        MergedCells := XlWrkSht.Range(CurrColumnName + FirstRowName).MergeCells;
        IF MergedCells THEN BEGIN
          Address := XlWrkSht.Range(CurrColumnName + FirstRowName).MergeArea.Address;
          ExcelMgt.ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
          i := ExcelMgt.ColNameToInt(LastColumnName);
        END;
      END;

      "Horizontal Cells Quantity" := CellCounter;
      "Vertical Cells Quantity" := 1;
    END;

    PROCEDURE ParseColumn@1210018(FirstColumnName@1210001 : Code[10];LastColumnName@1210002 : Code[10];FirstRowName@1210017 : Code[10];LastRowName@1210016 : Code[10]);
    VAR
      CurrRowName@1210013 : Code[10];
      FirstRowNo@1210004 : Integer;
      LastRowNo@1210005 : Integer;
      CellCounter@1210011 : Integer;
      i@1210006 : Integer;
      MergedCells@1210014 : Boolean;
      Address@1210015 : Text[30];
    BEGIN
      FirstRowNo := ExcelMgt.CellName2RowNo(FirstRowName);
      LastRowNo := ExcelMgt.CellName2RowNo(LastRowName);

      "Excel Mapping Type" := "Excel Mapping Type"::"Multi-cell";

      FOR i := FirstRowNo TO LastRowNo DO BEGIN
        CurrRowName := FORMAT(i);
        CellCounter := CellCounter + 1;

        IF CellCounter = 1 THEN
          "Excel Cell Name" := FirstColumnName + CurrRowName;

        MergedCells := XlWrkSht.Range(FirstColumnName + CurrRowName).MergeCells;
        IF MergedCells THEN BEGIN
          Address := XlWrkSht.Range(FirstColumnName + CurrRowName).MergeArea.Address;
          ExcelMgt.ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
          i := ExcelMgt.CellName2RowNo(LastRowName);
        END;
      END;

      "Horizontal Cells Quantity" := 1;
      "Vertical Cells Quantity" := CellCounter;
    END;

    PROCEDURE ParseArea@1210010(FirstColumnName@1210001 : Code[10];LastColumnName@1210002 : Code[10];FirstRowName@1210017 : Code[10];LastRowName@1210016 : Code[10]);
    VAR
      CurrCellName@1210019 : Code[10];
      CurrRowName@1210013 : Code[10];
      FirstRowNo@1210004 : Integer;
      LastRowNo@1210005 : Integer;
      CellCounter@1210011 : Integer;
      i@1210006 : Integer;
      MergedCells@1210014 : Boolean;
      Address@1210015 : Text[30];
    BEGIN
      FirstRowNo := ExcelMgt.CellName2RowNo(FirstRowName);
      LastRowNo := ExcelMgt.CellName2RowNo(LastRowName);

      ParseRow(FirstColumnName,LastColumnName,FirstRowName,FirstRowName);

      FOR i := FirstRowNo TO LastRowNo DO BEGIN
        CurrRowName := FORMAT(i);
        CurrCellName := FirstColumnName + CurrRowName;
        IF CheckBorders(XlWrkSht,CurrCellName) THEN
          CellCounter := CellCounter + 1;

        MergedCells := XlWrkSht.Range(CurrCellName).MergeCells;
        IF MergedCells THEN BEGIN
          Address := XlWrkSht.Range(CurrCellName).MergeArea.Address;
          ExcelMgt.ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
          i := ExcelMgt.CellName2RowNo(LastRowName);
        END;
      END;

      "Vertical Cells Quantity" := CellCounter;
    END;

    PROCEDURE GetSelectionType@1210022(FirstColumnName@1210003 : Code[10];LastColumnName@1210000 : Code[10];FirstRowName@1210001 : Code[10];LastRowName@1210009 : Code[10]) : Integer;
    VAR
      Address@1210002 : Text[30];
      MergedCells@1210004 : Boolean;
      CellFirstColumnName@1210008 : Code[10];
      CellLastColumnName@1210007 : Code[10];
      CellFirstRowName@1210006 : Code[10];
      CellLastRowName@1210005 : Code[10];
      SelectionType@1210010 : 'Cell,Row,Column,Area';
    BEGIN
      MergedCells := XlWrkSht.Range(FirstColumnName + FirstRowName).MergeCells;
      IF MergedCells THEN BEGIN
        Address := XlWrkSht.Range(FirstColumnName + FirstRowName).MergeArea.Address;
        ExcelMgt.ParseSelectionAddress(Address,CellFirstColumnName,CellLastColumnName,CellFirstRowName,CellLastRowName);

        IF (LastRowName = CellLastRowName) AND (LastColumnName = CellLastColumnName) THEN
          EXIT(SelectionType::Cell);

        IF (LastRowName = CellLastRowName) AND (LastColumnName <> CellLastColumnName) THEN
          EXIT(SelectionType::Row);

        IF (LastRowName <> CellLastRowName) AND (LastColumnName = CellLastColumnName) THEN
          EXIT(SelectionType::Column);

        IF (LastRowName <> CellLastRowName) AND (LastColumnName <> CellLastColumnName) THEN
          EXIT(SelectionType::Area);
      END ELSE
        EXIT(0);
    END;

    PROCEDURE UpdateControls@1210007();
    BEGIN
      IF NOT ISNULL(XlApp) THEN BEGIN
        IF XlApp.Visible THEN
          ApplySelectionButtonEnable := TRUE
        ELSE
          ApplySelectionButtonEnable := FALSE;
      END ELSE
        ApplySelectionButtonEnable := FALSE;
    END;

    PROCEDURE ShowCompoundElementLines@1210001();
    VAR
      XMLElementExpressionLine@1210000 : Record 26572;
      CompoundXMLElementLines@1210001 : Page 26589;
    BEGIN
      TESTFIELD("Source Type","Source Type"::"Compound Element");
      XMLElementExpressionLine.FILTERGROUP(2);
      XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
      XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
      XMLElementExpressionLine.FILTERGROUP(0);
      CompoundXMLElementLines.SETTABLEVIEW(XMLElementExpressionLine);
      CompoundXMLElementLines.RUNMODAL;
    END;

    PROCEDURE EraseTempFile@1210015();
    BEGIN
      IF FileName <> '' THEN
        IF EXISTS(FileName) THEN
          IF ERASE(FileName) THEN;
    END;

    LOCAL PROCEDURE TableCodeOnAfterValidate@19041596();
    BEGIN
      IF "Table Code" <> '' THEN BEGIN
        CurrPage.SAVERECORD;
        UpdateTableCode("Table Code");
        CurrPage.UPDATE;
      END;
    END;

    LOCAL PROCEDURE OnActivateForm@19002417();
    BEGIN
      UpdateControls;
    END;

    LOCAL PROCEDURE ElementNameOnFormat@19070548();
    BEGIN
      "Element NameIndent" := Indentation;
      "Element NameEmphasize" := "Element Type" = "Element Type"::Complex;
      IF ("Element Type" <> "Element Type"::Complex) AND
         ("Excel Cell Name" = '')
      THEN;
    END;

    BEGIN
    END.
  }
}

