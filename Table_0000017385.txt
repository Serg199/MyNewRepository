OBJECT Table 17385 Absence Header
{
  OBJECT-PROPERTIES
  {
    Date=18.05.17;
    Time=18:19:27;
    Modified=Yes;
    Version List=NAVRU7.10,NOS-26;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               HumanResSetup.GET;

               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               END;

               InitRecord;
             END;

    OnDelete=BEGIN
               TESTFIELD(Status,Status::Open);

               AbsenceLine.RESET;
               AbsenceLine.SETRANGE("Document Type","Document Type");
               AbsenceLine.SETRANGE("Document No.","No.");
               AbsenceLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text003,"Document Type");
             END;

    CaptionML=[ENU=Absence Header;
               RUS=Заголовок отсутствия];
    LookupPageID=Page17474;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=Vacation,Sick Leave,Travel,Other Absence;
                                                                    RUS=Отпуск,Больничный,Командировка,Прочее отсутствие];
                                                   OptionString=Vacation,Sick Leave,Travel,Other Absence }
    { 2   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  HumanResSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;

                                                                IF "HR Order No." = '' THEN
                                                                  "HR Order No." := "No.";
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              RUS=Номер] }
    { 3   ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Document Date" <> 0D THEN BEGIN
                                                                  GetEmployee("Employee No.");
                                                                  IF "Document Date" < Employee."Employment Date" THEN
                                                                    LocMgt.DateMustBeLater(FIELDCAPTION("Document Date"),Employee."Employment Date");
                                                                  IF "Posting Date" = 0D THEN
                                                                    "Posting Date" := "Document Date";
                                                                END;

                                                                IF "HR Order Date" = 0D THEN
                                                                  "HR Order Date" := "Document Date";

                                                                IF "Period Code" = '' THEN
                                                                  "Period Code" := PayrollPeriod.PeriodByDate("Document Date");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              RUS=Дата документа] }
    { 4   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              RUS=Дата учета] }
    { 5   ;   ;Calendar Days       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Absence Line"."Calendar Days" WHERE (Document Type=FIELD(Document Type),
                                                                                                         Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calendar Days;
                                                              RUS=Календарные дни];
                                                   Editable=No }
    { 6   ;   ;Working Days        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Absence Line"."Working Days" WHERE (Document Type=FIELD(Document Type),
                                                                                                        Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Working Days;
                                                              RUS=Рабочие дни];
                                                   Editable=No }
    { 7   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 8   ;   ;Start Date          ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Absence Line"."Start Date" WHERE (Document Type=FIELD(Document Type),
                                                                                                      Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Start Date;
                                                              RUS=Дата начала];
                                                   Editable=No }
    { 9   ;   ;End Date            ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Absence Line"."End Date" WHERE (Document Type=FIELD(Document Type),
                                                                                                    Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=End Date;
                                                              RUS=Дата окончания];
                                                   Editable=No }
    { 10  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              RUS=Серия номеров] }
    { 12  ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                AbsenceLine.RESET;
                                                                AbsenceLine.SETRANGE("Document Type","Document Type");
                                                                AbsenceLine.SETRANGE("Document No.","No.");
                                                                IF NOT AbsenceLine.ISEMPTY THEN
                                                                  ERROR(Text000,FIELDCAPTION("Employee No."));
                                                              END;

                                                   CaptionML=[ENU=Employee No.;
                                                              RUS=Код сотрудника] }
    { 13  ;   ;HR Order No.        ;Code20        ;CaptionML=[ENU=HR Order No.;
                                                              RUS=Номер кадрового приказа] }
    { 14  ;   ;HR Order Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=HR Order Date;
                                                              RUS=Дата кадрового приказа] }
    { 15  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("HR Order Comment Line" WHERE (Table Name=CONST(Absence Order),
                                                                                                    No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              RUS=Комментарий];
                                                   Editable=No }
    { 19  ;   ;Period Code         ;Code10        ;TableRelation="Payroll Period";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Period Code;
                                                              RUS=Код периода] }
    { 24  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              RUS=Сумма] }
    { 25  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Open,Released;
                                                                    RUS=Открыт,Выпущен];
                                                   OptionString=Open,Released;
                                                   Editable=No }
    { 26  ;   ;Assigned User ID    ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Assigned User ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Assigned User ID;
                                                              RUS=Код исполнителя] }
    { 29  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              RUS=Код причины] }
    { 30  ;   ;Note                ;Text50        ;CaptionML=[ENU=Note;
                                                              RUS=Примечание] }
    { 31  ;   ;Travel Destination  ;Text100       ;CaptionML=[ENU=Travel Destination;
                                                              RUS=Пункт назначения] }
    { 32  ;   ;Travel Purpose      ;Text100       ;CaptionML=[ENU=Travel Purpose;
                                                              RUS=Цель командировки] }
    { 33  ;   ;Travel Paid by No.  ;Code20        ;TableRelation=IF (Travel Paid By Type=CONST(Customer)) Customer
                                                                 ELSE IF (Travel Paid By Type=CONST(Vendor)) Vendor;
                                                   CaptionML=[ENU=Travel Paid by No.;
                                                              RUS=Оплачивается номер] }
    { 34  ;   ;Payment Days        ;Decimal       ;CaptionML=[ENU=Payment Days;
                                                              RUS=Оплачиваемые дни] }
    { 35  ;   ;Payment Hours       ;Decimal       ;CaptionML=[ENU=Payment Hours;
                                                              RUS=Оплачиваемые часы] }
    { 37  ;   ;Allocation Type     ;Option        ;CaptionML=[ENU=Allocation Type;
                                                              RUS=Тип распределения];
                                                   OptionCaptionML=[ENU=" 3,12";
                                                                    RUS=" 3,12"];
                                                   OptionString=[ 3,12] }
    { 38  ;   ;Travel Reason Document;Text100     ;CaptionML=[ENU=Travel Reason Document;
                                                              RUS=Основание для командировки] }
    { 39  ;   ;Travel Paid By Type ;Option        ;CaptionML=[ENU=Travel Paid By Type;
                                                              RUS=Оплачивается тип];
                                                   OptionCaptionML=[ENU=Company,Customer,Vendor;
                                                                    RUS=Организация,Клиент,Поставщик];
                                                   OptionString=Company,Customer,Vendor }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              RUS=Код ярлыка измерения 1];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              RUS=Код ярлыка измерения 2];
                                                   CaptionClass='1,2,2' }
    { 44  ;   ;Use Salary Indexation;Boolean      ;CaptionML=[ENU=Use Salary Indexation;
                                                              RUS=Исп. индексацию зарплаты] }
    { 52  ;   ;Sick Certificate Series;Text10     ;CaptionML=[ENU=Sick Certificate Series;
                                                              RUS=Серия больничного листа] }
    { 53  ;   ;Sick Certificate No.;Text30        ;CaptionML=[ENU=Sick Certificate No.;
                                                              RUS=Номер больничного листа] }
    { 54  ;   ;Sick Certificate Date;Date         ;CaptionML=[ENU=Sick Certificate Date;
                                                              RUS=Дата больничного листа] }
    { 55  ;   ;Sick Certificate Reason;Text50     ;CaptionML=[ENU=Sick Certificate Reason;
                                                              RUS=Основание больничного листа] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              RUS=Код набора измерений];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HumanResSetup@1210000 : Record 5218;
      AbsenceLine@1210002 : Record 17386;
      PayrollPeriod@1210004 : Record 17426;
      Employee@1210007 : Record 5200;
      NoSeriesMgt@1210001 : Codeunit 396;
      Text000@1210005 : TextConst 'ENU=You cannot change %1 while order lines exist.;RUS=Невозможно изменить %1, пока существуют строки приказа.';
      Text003@1210006 : TextConst 'ENU=You cannot rename a %1.;RUS=Нельзя переименовать %1.';
      LocMgt@1210008 : Codeunit 12400;
      DimMgt@1210009 : Codeunit 408;
      Text064@1210003 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;RUS=Вы, возможно, изменили измерение.\\Обновить строки?';

    PROCEDURE InitRecord@1210000();
    BEGIN
      "HR Order No." := "No.";
    END;

    PROCEDURE AssistEdit@1(OldAbsenceHeader@1000 : Record 17385) : Boolean;
    VAR
      AbsenceHeader@1001 : Record 17385;
    BEGIN
      WITH AbsenceHeader DO BEGIN
        COPY(Rec);
        HumanResSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldAbsenceHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := AbsenceHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6();
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Vacation:
          HumanResSetup.TESTFIELD("Vacation Order Nos.");
        "Document Type"::"Sick Leave":
          HumanResSetup.TESTFIELD("Sick Leave Order Nos.");
        "Document Type"::Travel:
          HumanResSetup.TESTFIELD("Travel Order Nos.");
        "Document Type"::"Other Absence":
          HumanResSetup.TESTFIELD("Other Absence Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Vacation:
          EXIT(HumanResSetup."Vacation Order Nos.");
        "Document Type"::"Sick Leave":
          EXIT(HumanResSetup."Sick Leave Order Nos.");
        "Document Type"::Travel:
          EXIT(HumanResSetup."Travel Order Nos.");
        "Document Type"::"Other Absence":
          EXIT(HumanResSetup."Other Absence Order Nos.");
      END;
    END;

    PROCEDURE GetEmployee@1210001(EmployeeNo@1210000 : Code[20]);
    BEGIN
      IF (Employee."No." = '') AND (EmployeeNo <> '') THEN
        Employee.GET("Employee No.");
    END;

    PROCEDURE AbsenceLinesExist@3() : Boolean;
    BEGIN
      AbsenceLine.RESET;
      AbsenceLine.SETRANGE("Document Type","Document Type");
      AbsenceLine.SETRANGE("Document No.","No.");
      EXIT(AbsenceLine.FINDFIRST);
    END;

    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Document Date","No.");
      NavigateForm.RUN;
    END;

    PROCEDURE CreateDim@1210004(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND AbsenceLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@1210003(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF AbsenceLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ShowDocDim@1210002();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.SetObjectFrom(Rec); // NC NOS-26 SPA
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF AbsenceLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text064) THEN
        EXIT;

      AbsenceLine.RESET;
      AbsenceLine.SETRANGE("Document Type","Document Type");
      AbsenceLine.SETRANGE("Document No.","No.");
      AbsenceLine.LOCKTABLE;
      IF AbsenceLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(AbsenceLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF AbsenceLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            AbsenceLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              AbsenceLine."Dimension Set ID",AbsenceLine."Shortcut Dimension 1 Code",AbsenceLine."Shortcut Dimension 2 Code");
            AbsenceLine.MODIFY;
          END;
        UNTIL AbsenceLine.NEXT = 0;
    END;

    BEGIN
    {
      NC NOS-26 SPA
    }
    END.
  }
}

