OBJECT Report 12481 Phys. Inventory Form INV-3
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Phys. Inventory Form INV-3;
               RUS=Инвентаризационная опись ИНВ-3];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  InventorySetup@1210000 : Record 313;
                BEGIN
                  InventorySetup.GET;
                  InventorySetup.TESTFIELD("Phys.Inv. INV-3 Template Code");
                  ExcelReportBuilderMgr.InitTemplate(InventorySetup."Phys.Inv. INV-3 Template Code");
                END;

    OnPostReport=BEGIN
                   IF FileName <> '' THEN
                     ExcelReportBuilderMgr.ExportDataToClientFile(FileName)
                   ELSE
                     ExcelReportBuilderMgr.ExportData;
                 END;

  }
  DATASET
  {
    { 8280;    ;DataItem;                    ;
               DataItemTable=Table83;
               OnPreDataItem=BEGIN
                               CompanyInfo.GET;

                               CheckLocation;

                               FINDFIRST;
                               FillSheet1;

                               ExcelReportBuilderMgr.SetSheet('Sheet2');
                               ExcelReportBuilderMgr.AddSection('MainPageHeader0');
                               ExcelReportBuilderMgr.AddSection('MAINPAGEHEADER');
                             END;

               OnAfterGetRecord=BEGIN
                                  ValueEntry.RESET;
                                  ValueEntry.SETCURRENTKEY(
                                    "Item No.","Location Code","Expected Cost",Inventoriable,"Posting Date");
                                  ValueEntry.SETRANGE("Item No.","Item No.");
                                  ValueEntry.SETRANGE("Location Code","Location Code");
                                  ValueEntry.SETRANGE(Inventoriable,TRUE);
                                  ValueEntry.SETRANGE("Expected Cost",FALSE);
                                  ValueEntry.SETFILTER("Posting Date",'<%1',"Posting Date");
                                  ValueEntry.CALCSUMS("Cost Amount (Actual)");
                                  TurnoverRUB := ValueEntry."Cost Amount (Actual)";

                                  IF "Qty. (Phys. Inventory)" >= "Qty. (Calculated)" THEN
                                    ActualTurnoverRUB := TurnoverRUB + Amount
                                  ELSE
                                    ActualTurnoverRUB := TurnoverRUB -
                                      "Quantity (Base)" * ItemCostManagement.CalcAvgUnitActualCost("Item No.","Location Code","Posting Date");

                                  IF NOT ExcelReportBuilderMgr.TryAddSectionWithPlaceForFooter('MAINPAGEBODY','MAINPAGEFOOTER') THEN BEGIN
                                    ExcelReportBuilderMgr.AddSection('MAINPAGEFOOTER');
                                    FillSheet2Totals(
                                      PageAmounts[ValueIndex::FactQty],PageAmounts[ValueIndex::FactAmt],
                                      PageAmounts[ValueIndex::CalcQty],PageAmounts[ValueIndex::CalcAmt]);

                                    ExcelReportBuilderMgr.AddPagebreak;
                                    ExcelReportBuilderMgr.AddSection('MAINPAGEHEADER');
                                    ExcelReportBuilderMgr.AddSection('MAINPAGEBODY');

                                    NumberPPPage := 0;
                                    CLEAR(PageAmounts);
                                  END;

                                  NumberPP := NumberPP + 1;
                                  NumberPPPage := NumberPPPage + 1;
                                  AddTotals(PageAmounts,"Qty. (Phys. Inventory)",ActualTurnoverRUB,"Qty. (Calculated)",TurnoverRUB);
                                  AddTotals(TotalAmounts,"Qty. (Phys. Inventory)",ActualTurnoverRUB,0,0);

                                  ExcelReportBuilderMgr.AddDataToSection('LineNum',FORMAT(NumberPP));
                                  ExcelReportBuilderMgr.AddDataToSection('ItemName',Description);
                                  ExcelReportBuilderMgr.AddDataToSection('ItemId',"Item No.");
                                  ExcelReportBuilderMgr.AddDataToSection('CodeOKEI',"Unit of Measure Code");
                                  ExcelReportBuilderMgr.AddDataToSection('UnitName',StdRepMgt.GetUoMDesc("Unit of Measure Code"));
                                  ExcelReportBuilderMgr.AddDataToSection('CountedQty',StdRepMgt.FormatReportValue("Qty. (Phys. Inventory)",2));
                                  ExcelReportBuilderMgr.AddDataToSection('CountedAmount',StdRepMgt.FormatReportValue(ActualTurnoverRUB,2));
                                  ExcelReportBuilderMgr.AddDataToSection('OnHandQty',StdRepMgt.FormatReportValue("Qty. (Calculated)",2));
                                  ExcelReportBuilderMgr.AddDataToSection('OnHandAmount',StdRepMgt.FormatReportValue(TurnoverRUB,2));
                                END;

               OnPostDataItem=BEGIN
                                ExcelReportBuilderMgr.AddSection('MAINPAGEFOOTER');
                                FillSheet2Totals(
                                  PageAmounts[ValueIndex::FactQty],PageAmounts[ValueIndex::FactAmt],
                                  PageAmounts[ValueIndex::CalcQty],PageAmounts[ValueIndex::CalcAmt]);

                                FillSheet3;
                              END;

               ReqFilterFields=Journal Template Name,Journal Batch Name }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры] }

      { 1210019;2;Field     ;
                  CaptionML=[ENU=Document No.;
                             RUS=Номер документа];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocumentNo }

      { 1210016;2;Field     ;
                  CaptionML=[ENU=Document Date;
                             RUS=Дата документа];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocumentDate }

      { 1210013;2;Field     ;
                  CaptionML=[ENU=Inventorization Start Date;
                             RUS=Дата начала инвентаризации];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=StartingDate }

      { 1210014;2;Field     ;
                  CaptionML=[ENU=Inventorization End Date;
                             RUS=Дата окончания инвентаризации];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndingDate }

      { 1210009;2;Field     ;
                  CaptionML=[ENU=Document Creation Date;
                             RUS=Дата создания документа];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CreationDate }

      { 1210011;2;Field     ;
                  CaptionML=[ENU=As of Date;
                             RUS=На дату];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=StatusOn }

      { 1210023;2;Field     ;
                  CaptionML=[ENU=Responsible Employee;
                             RUS=Материально ответственное лицо];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=RespEmployeeNo;
                  TableRelation=Employee }

      { 1210004;2;Field     ;
                  CaptionML=[ENU=Chairman;
                             RUS=Председатель];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Chairman;
                  TableRelation=Employee }

      { 1210002;2;Field     ;
                  CaptionML=[ENU=Commission Member1;
                             RUS=Член комиссии1];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Member1;
                  TableRelation=Employee }

      { 1210003;2;Field     ;
                  CaptionML=[ENU=Commission Member2;
                             RUS=Член комиссии2];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Member2;
                  TableRelation=Employee }

      { 1210001;2;Field     ;
                  CaptionML=[ENU=Commission Member3;
                             RUS=Член комиссии3];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Member3;
                  TableRelation=Employee }

      { 1210000;2;Field     ;
                  CaptionML=[ENU=Checked by;
                             RUS=Код проверяющего];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CheckedBy;
                  TableRelation=Employee }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CompanyInfo@1210000 : Record 79;
      Location@1210037 : Record 14;
      ValueEntry@1210038 : Record 5802;
      ItemJnlLine@1210018 : Record 83;
      LocMgt@1210004 : Codeunit 12400;
      StdRepMgt@1210002 : Codeunit 12401;
      ExcelReportBuilderMgr@1210001 : Codeunit 14930;
      ItemCostManagement@1210011 : Codeunit 5804;
      ValueIndex@1210012 : ',FactQty,FactAmt,CalcQty,CalcAmt';
      FileName@1210003 : Text;
      StartingDate@1210005 : Date;
      EndingDate@1210006 : Date;
      DocumentNo@1210008 : Code[10];
      DocumentDate@1210009 : Date;
      NumberPP@1210010 : Integer;
      NumberPPPage@1210028 : Integer;
      PageAmounts@1210013 : ARRAY [4] OF Decimal;
      TotalAmounts@1210029 : ARRAY [4] OF Decimal;
      CreationDate@1210017 : Date;
      TurnoverRUB@1210020 : Decimal;
      ActualTurnoverRUB@1210021 : Decimal;
      Chairman@1210023 : Code[10];
      Member1@1210024 : Code[10];
      Member2@1210025 : Code[10];
      Member3@1210026 : Code[10];
      CheckedBy@1210027 : Code[10];
      StatusOn@1210040 : Date;
      RespEmployeeNo@1210007 : Code[20];
      LocationCode@1210019 : Code[10];
      RespEmployeeDoesNotMatchErr@1210036 : TextConst 'ENU=Journal Line exists for Location %1 Responsible Employee %2. Must be one Responsible Employee only.;RUS=Строка журнала существует для склада %1 Ответственный сотрудник %2. Должен быть только один ответственный сотрудник.';

    PROCEDURE CheckLocation@1210001();
    BEGIN
      ItemJnlLine.SETRANGE("Journal Template Name","Item Journal Line"."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name","Item Journal Line"."Journal Batch Name");
      IF ItemJnlLine.FINDSET THEN BEGIN
        LocationCode := ItemJnlLine."Location Code";
        Location.GET(LocationCode);
        RespEmployeeNo := Location."Responsible Employee No.";
        REPEAT
          IF ItemJnlLine."Location Code" <> LocationCode THEN BEGIN
            Location.GET(ItemJnlLine."Location Code");
            IF Location."Responsible Employee No." <> RespEmployeeNo THEN
              ERROR(RespEmployeeDoesNotMatchErr,Location.Code,Location."Responsible Employee No.");
          END;
        UNTIL ItemJnlLine.NEXT = 0;
      END;
    END;

    PROCEDURE SetFileNameSilent@1210007(NewFileName@1210001 : Text);
    BEGIN
      FileName := NewFileName;
    END;

    LOCAL PROCEDURE GetDecimals@1210004(FullAmount@1210000 : Decimal) : Decimal;
    BEGIN
      EXIT(ABS((FullAmount - ROUND(FullAmount,1,'<')) * 100));
    END;

    LOCAL PROCEDURE AddTotals@1210014(VAR TotalArr@1210000 : ARRAY [4] OF Decimal;FactQty@1210001 : Decimal;FactAmt@1210002 : Decimal;CalcQty@1210003 : Decimal;CalcAmt@1210004 : Decimal);
    BEGIN
      TotalArr[ValueIndex::FactQty] += FactQty;
      TotalArr[ValueIndex::FactAmt] += FactAmt;
      TotalArr[ValueIndex::CalcQty] += CalcQty;
      TotalArr[ValueIndex::CalcAmt] += CalcAmt;
    END;

    LOCAL PROCEDURE FillSheet1@1210011();
    BEGIN
      ExcelReportBuilderMgr.SetSheet('Sheet1');
      ExcelReportBuilderMgr.AddSection('FIRSTPAGE');

      ExcelReportBuilderMgr.AddDataToSection('Company',StdRepMgt.GetCompanyName);
      ExcelReportBuilderMgr.AddDataToSection('Warehouse',StdRepMgt.GetEmpDepartment(RespEmployeeNo));

      ExcelReportBuilderMgr.AddDataToSection('ClassificationbyOKPO',CompanyInfo."OKPO Code");
      ExcelReportBuilderMgr.AddDataToSection('OrderNum',DocumentNo);
      ExcelReportBuilderMgr.AddDataToSection('OrderDate',FORMAT(DocumentDate));
      ExcelReportBuilderMgr.AddDataToSection('InventStartDate',FORMAT(StartingDate));
      ExcelReportBuilderMgr.AddDataToSection('InventEndDate',FORMAT(EndingDate));
      ExcelReportBuilderMgr.AddDataToSection('InventJournalNum',"Item Journal Line"."Document No.");
      ExcelReportBuilderMgr.AddDataToSection('CountingListCreateDate',FORMAT(CreationDate));

      ExcelReportBuilderMgr.AddDataToSection('InChargeTitleFirstPageLine1',StdRepMgt.GetEmpPosition(RespEmployeeNo));
      ExcelReportBuilderMgr.AddDataToSection('InChargeNameFirstPageLine1',StdRepMgt.GetEmpName(RespEmployeeNo));

      ExcelReportBuilderMgr.AddDataToSection('InventOnHandDateDay',FORMAT(WORKDATE,0,'<Day,2>'));
      ExcelReportBuilderMgr.AddDataToSection('InventOnHandDateMth',FORMAT(LocMgt.Month2Text(WORKDATE)));
      ExcelReportBuilderMgr.AddDataToSection('InventOnHandDateYr',FORMAT(WORKDATE,0,'<Year>'));
    END;

    LOCAL PROCEDURE FillSheet2Totals@1210029(FactQty@1210000 : Decimal;FactAmt@1210001 : Decimal;CalcQty@1210002 : Decimal;CalcAmt@1210003 : Decimal);
    BEGIN
      ExcelReportBuilderMgr.AddDataToSection('CountedQtyPageTotal',StdRepMgt.FormatReportValue(FactQty,2));
      ExcelReportBuilderMgr.AddDataToSection('CountedAmountPageTotal',StdRepMgt.FormatReportValue(FactAmt,2));
      ExcelReportBuilderMgr.AddDataToSection('OnHandQtyPageTotal',StdRepMgt.FormatReportValue(CalcQty,2));
      ExcelReportBuilderMgr.AddDataToSection('OnHandAmountPageTotal',StdRepMgt.FormatReportValue(CalcAmt,2));

      ExcelReportBuilderMgr.AddDataToSection('LineNumPageTotalStr',LocMgt.Integer2Text(NumberPPPage,2,'','',''));
      ExcelReportBuilderMgr.AddDataToSection('CountedQtyPageTotalStr',
        LocMgt.Integer2Text(FactQty,2,'','','') + ' / ' +
        LocMgt.Integer2Text(GetDecimals(FactQty),0,'','',''));

      ExcelReportBuilderMgr.AddDataToSection('CountedAmountPageTotalStr',LocMgt.Integer2Text(FactAmt,2,'','',''));
      ExcelReportBuilderMgr.AddDataToSection('CountedAmountPageTotalCent',StdRepMgt.FormatReportValue(GetDecimals(FactAmt),0));
    END;

    LOCAL PROCEDURE FillSheet3@1210012();
    BEGIN
      ExcelReportBuilderMgr.SetSheet('Sheet3');
      ExcelReportBuilderMgr.AddSection('LASTPAGE');

      ExcelReportBuilderMgr.AddDataToSection('LineNumTotalStr',LocMgt.Integer2Text(NumberPP,2,'','',''));
      ExcelReportBuilderMgr.AddDataToSection('CountedQtyTotalStr',
        LocMgt.Integer2Text(TotalAmounts[ValueIndex::FactQty],2,'','','') + ' / ' +
        LocMgt.Integer2Text(GetDecimals(TotalAmounts[ValueIndex::FactQty]),0,'','',''));

      ExcelReportBuilderMgr.AddDataToSection('CountedAmountTotalStr',
        LocMgt.Integer2Text(TotalAmounts[ValueIndex::FactAmt],2,'','',''));
      ExcelReportBuilderMgr.AddDataToSection('CountedAmountTotalCent',
        StdRepMgt.FormatReportValue(GetDecimals(TotalAmounts[ValueIndex::FactAmt]),0));

      ExcelReportBuilderMgr.AddDataToSection('ChairmanTitle',StdRepMgt.GetEmpPosition(Chairman));
      ExcelReportBuilderMgr.AddDataToSection('ChairmanName',StdRepMgt.GetEmpName(Chairman));
      ExcelReportBuilderMgr.AddDataToSection('MemberTitleLine1',StdRepMgt.GetEmpPosition(Member1));
      ExcelReportBuilderMgr.AddDataToSection('MemberNameLine1',StdRepMgt.GetEmpName(Member1));
      ExcelReportBuilderMgr.AddDataToSection('MemberTitleLine2',StdRepMgt.GetEmpPosition(Member2));
      ExcelReportBuilderMgr.AddDataToSection('MemberNameLine2',StdRepMgt.GetEmpName(Member2));
      ExcelReportBuilderMgr.AddDataToSection('MemberTitleLine3',StdRepMgt.GetEmpPosition(Member3));
      ExcelReportBuilderMgr.AddDataToSection('MemberNameLine3',StdRepMgt.GetEmpName(Member3));

      ExcelReportBuilderMgr.AddDataToSection('InChargeTitleLastPageLine1',StdRepMgt.GetEmpPosition(RespEmployeeNo));
      ExcelReportBuilderMgr.AddDataToSection('InChargeNameLastPageLine1',StdRepMgt.GetEmpName(RespEmployeeNo));
      ExcelReportBuilderMgr.AddDataToSection('CheckedByTitleLastPage',StdRepMgt.GetEmpPosition(CheckedBy));
      ExcelReportBuilderMgr.AddDataToSection('CheckedByNameLastPage',StdRepMgt.GetEmpName(CheckedBy));
      ExcelReportBuilderMgr.AddDataToSection('TotalNumStr',FORMAT(NumberPP));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

