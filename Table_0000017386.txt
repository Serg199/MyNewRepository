OBJECT Table 17386 Absence Line
{
  OBJECT-PROPERTIES
  {
    Date=22.05.17;
    Time=12:06:49;
    Modified=Yes;
    Version List=NAVRU8.00,NOS-26;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
             END;

    OnDelete=BEGIN
               TestStatusOpen;
             END;

    CaptionML=[ENU=Absence Line;
               RUS=Строка отсутствия];
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=Vacation,Sick Leave,Travel,Other Absence;
                                                                    RUS=Отпуск,Больничный,Командировка,Прочее отсутствие];
                                                   OptionString=Vacation,Sick Leave,Travel,Other Absence }
    { 2   ;   ;Document No.        ;Code20        ;TableRelation="Absence Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 4   ;   ;Time Activity Code  ;Code10        ;TableRelation=IF (Document Type=CONST(Vacation)) "Time Activity" WHERE (Time Activity Type=CONST(Vacation))
                                                                 ELSE IF (Document Type=CONST(Sick Leave)) "Time Activity" WHERE (Time Activity Type=CONST(Sick Leave))
                                                                 ELSE IF (Document Type=CONST(Travel)) "Time Activity" WHERE (Time Activity Type=CONST(Travel))
                                                                 ELSE IF (Document Type=CONST(Other Absence)) "Time Activity" WHERE (Time Activity Type=CONST(Other));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetAbsenceHeader;
                                                                "Employee No." := AbsenceHeader."Employee No.";
                                                                Employee.GET("Employee No.");
                                                                "Person No." := Employee."Person No.";

                                                                IF TimeActivity.GET("Time Activity Code") THEN BEGIN
                                                                  CASE "Document Type" OF
                                                                    "Document Type"::Vacation:
                                                                      BEGIN
                                                                        TimeActivity.TESTFIELD("Time Activity Type",
                                                                          TimeActivity."Time Activity Type"::Vacation);
                                                                        VALIDATE("Vacation Type",TimeActivity."Vacation Type");
                                                                        IF "Time Activity Code" <> xRec."Time Activity Code" THEN
                                                                          VALIDATE("Vacation Request No.",'');
                                                                      END;
                                                                    "Document Type"::"Sick Leave":
                                                                      BEGIN
                                                                        TimeActivity.TESTFIELD("Time Activity Type",
                                                                          TimeActivity."Time Activity Type"::"Sick Leave");
                                                                        VALIDATE("Sick Leave Type",TimeActivity."Sick Leave Type");
                                                                      END;
                                                                  END;
                                                                  Description := COPYSTR(TimeActivity.Description,1,MAXSTRLEN(Description));
                                                                  VALIDATE("Element Code",TimeActivity."Element Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Time Activity Code;
                                                              RUS=Код временной активности] }
    { 5   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 6   ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                LocMgt.CheckPeriodDates("Start Date","End Date");
                                                                AbsenceLine := Rec;
                                                                AbsenceLine.SETRANGE("Document Type","Document Type");
                                                                AbsenceLine.SETRANGE("Document No.","Document No.");
                                                                IF AbsenceLine.NEXT(-1) <> 0 THEN
                                                                  IF AbsenceLine."End Date" >= "Start Date" THEN
                                                                    FIELDERROR("Start Date");

                                                                VALIDATE("Employee No.");
                                                              END;

                                                   CaptionML=[ENU=Start Date;
                                                              RUS=Дата начала] }
    { 7   ;   ;End Date            ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                LocMgt.CheckPeriodDates("Start Date","End Date");
                                                                VALIDATE("Employee No.");
                                                              END;

                                                   CaptionML=[ENU=End Date;
                                                              RUS=Дата окончания] }
    { 8   ;   ;Absence Entry No.   ;Integer       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   OnLookup=BEGIN
                                                              EmployeeAbsenceEntry.RESET;
                                                              EmployeeAbsenceEntry.SETCURRENTKEY("Employee No.");
                                                              EmployeeAbsenceEntry.SETRANGE("Employee No.","Employee No.");
                                                              EmployeeAbsenceEntry.SETRANGE("Time Activity Code","Time Activity Code");
                                                              EmployeeAbsenceEntry.SETRANGE("Entry Type",EmployeeAbsenceEntry."Entry Type"::Accrual);
                                                              IF PAGE.RUNMODAL(0,EmployeeAbsenceEntry) = ACTION::LookupOK THEN
                                                                VALIDATE("Absence Entry No.",EmployeeAbsenceEntry."Entry No.");
                                                            END;

                                                   CaptionML=[ENU=Absence Entry No.;
                                                              RUS=Номер операции отсутствия] }
    { 9   ;   ;Vacation Request No.;Code20        ;TableRelation="Vacation Request" WHERE (Employee No.=FIELD(Employee No.),
                                                                                           Time Activity Code=FIELD(Time Activity Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Document Type","Document Type"::Vacation);
                                                                IF "Vacation Request No." <> '' THEN BEGIN
                                                                  VacationRequest.GET("Vacation Request No.");
                                                                  VacationRequest.TESTFIELD(Status,VacationRequest.Status::Approved);
                                                                  "Start Date" := VacationRequest."Start Date";
                                                                  VALIDATE("End Date",VacationRequest."End Date");
                                                                  Description := VacationRequest.Description;
                                                                END ELSE BEGIN
                                                                  "Start Date" := 0D;
                                                                  "End Date" := 0D;
                                                                  "Calendar Days" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vacation Request No.;
                                                              RUS=Номер заявления на отпуск] }
    { 10  ;   ;Calendar Days       ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Calendar Days" > 0 THEN
                                                                  "End Date" := CALCDATE(STRSUBSTNO('<%1D>',"Calendar Days" - 1),"Start Date")
                                                                ELSE
                                                                  "End Date" := "Start Date";
                                                                VALIDATE("Employee No.");
                                                              END;

                                                   CaptionML=[ENU=Calendar Days;
                                                              RUS=Календарные дни];
                                                   MinValue=1 }
    { 11  ;   ;Working Days        ;Decimal       ;CaptionML=[ENU=Working Days;
                                                              RUS=Рабочие дни];
                                                   Editable=No }
    { 13  ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF "Start Date" <> 0D THEN BEGIN
                                                                  Employee.GET("Employee No.");
                                                                  Terminated := Employee.IsTerminated("Start Date");
                                                                  IF NOT Terminated THEN BEGIN
                                                                    IF "Document Type" = "Document Type"::"Sick Leave" THEN BEGIN
                                                                      SickLeaveSetup.GetPaymentPercent(Rec);
                                                                      IF ("Sick Leave Type" IN
                                                                          ["Sick Leave Type"::"Family Member Care",
                                                                           "Sick Leave Type"::"Post Vaccination",
                                                                           "Sick Leave Type"::Quarantine]) AND
                                                                         ("Relative Person No." <> '')
                                                                      THEN BEGIN
                                                                        TESTFIELD("Treatment Type");
                                                                        SickLeaveSetup.GetCarePaymentPercent(Rec);
                                                                      END;
                                                                    END;

                                                                    CalcDays;

                                                                    IF "End Date" <> 0D THEN BEGIN
                                                                      AECalcMgt.FillAbsenceLineAEDates(Rec);
                                                                      IF "Document Type" = "Document Type"::"Sick Leave" THEN BEGIN
                                                                        SickLeaveSetup.GetEmployerPaymentDay(Rec);
                                                                        SickLeaveSetup.GetFSIPaymentDays(Rec);
                                                                      END;
                                                                    END;
                                                                  END ELSE
                                                                    IF ("Document Type" = "Document Type"::"Sick Leave") AND ("End Date" <> 0D) THEN BEGIN
                                                                      // TEST "Sick Leave Type"
                                                                      SickLeaveSetup.GetPaymentPercent(Rec);
                                                                      AECalcMgt.FillAbsenceLineAEDates(Rec);
                                                                      "Calendar Days" :=
                                                                        CalendarMgt.GetPeriodInfo(
                                                                          Employee."Calendar Code","Start Date","End Date",1);
                                                                      SickLeaveSetup.GetEmployerPaymentDay(Rec);
                                                                      SickLeaveSetup.GetFSIPaymentDays(Rec);
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Employee No.;
                                                              RUS=Код сотрудника];
                                                   Editable=No }
    { 14  ;   ;Special Payment Days;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Special Payment Days;
                                                              RUS=Дни оплаты по уходу] }
    { 15  ;   ;Special Payment Percent;Decimal    ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Special Payment Percent;
                                                              RUS=Процент оплаты по уходу] }
    { 16  ;   ;Days Paid by Employer;Decimal      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Days Paid by Employer;
                                                              RUS=Дни оплачиваемые работодателем] }
    { 17  ;   ;Days Not Paid       ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Days Not Paid;
                                                              RUS=Неоплачиваемые дни] }
    { 18  ;   ;Payment Days        ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Payment Days;
                                                              RUS=Оплачиваемые дни] }
    { 19  ;   ;Payment Percent     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Payment Percent;
                                                              RUS=Процент оплаты] }
    { 20  ;   ;Vacation Type       ;Option        ;CaptionML=[ENU=Vacation Type;
                                                              RUS=Тип отпуска];
                                                   OptionCaptionML=[ENU=" ,Regular,Additional,Education,Childcare,Other";
                                                                    RUS=" ,Очередной,Дополнительный,Учебный,По уходу за ребенком,Прочий"];
                                                   OptionString=[ ,Regular,Additional,Education,Childcare,Other];
                                                   Editable=No }
    { 21  ;   ;Sick Leave Type     ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Employee No.");
                                                              END;

                                                   CaptionML=[ENU=Sick Leave Type;
                                                              RUS=Тип больничного];
                                                   OptionCaptionML=[ENU=" ,Common Disease,Common Injury,Professional Disease,Work Injury,Family Member Care,Post Vaccination,Quarantine,Sanatory Cure,Pregnancy Leave,Child Care 1.5 years,Child Care 3 years";
                                                                    RUS=" ,Общее заболевание,Общая травма,Проф. заболевание,Произв. травма,Уход за членом семьи,Поствакц. заболевание,Карантин,Санаторное лечение,Беременность,Уход за ребенком до 1.5 лет,Уход за ребенком до 3 лет"];
                                                   OptionString=[ ,Common Disease,Common Injury,Professional Disease,Work Injury,Family Member Care,Post Vaccination,Quarantine,Sanatory Cure,Pregnancy Leave,Child Care 1.5 years,Child Care 3 years];
                                                   Editable=No }
    { 22  ;   ;Change Reason       ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Change Reason;
                                                              RUS=Основание для изменения] }
    { 23  ;   ;Treatment Type      ;Option        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Treatment Type;
                                                              RUS=Тип лечения];
                                                   OptionCaptionML=[ENU=" ,Out-Patient,In-Patient";
                                                                    RUS=" ,Амбулаторно,Госпитализация"];
                                                   OptionString=[ ,Out-Patient,In-Patient] }
    { 24  ;   ;AE Period From      ;Code10        ;TableRelation="Payroll Period";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=AE Period From;
                                                              RUS=Период СЗ с] }
    { 25  ;   ;AE Period To        ;Code10        ;TableRelation="Payroll Period";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=AE Period To;
                                                              RUS=Период СЗ по] }
    { 27  ;   ;Person No.          ;Code20        ;TableRelation=Person;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Person No.;
                                                              RUS=Код физ. лица] }
    { 28  ;   ;Relative Person No. ;Code20        ;TableRelation=Person;
                                                   OnValidate=BEGIN
                                                                IF "Relative Person No." <> '' THEN BEGIN
                                                                  TESTFIELD("Document Type","Document Type"::"Sick Leave");
                                                                  IF NOT ("Sick Leave Type" IN
                                                                          ["Sick Leave Type"::"Family Member Care",
                                                                           "Sick Leave Type"::"Child Care 1.5 years",
                                                                           "Sick Leave Type"::"Child Care 3 years",
                                                                           "Sick Leave Type"::"Post Vaccination",
                                                                           "Sick Leave Type"::Quarantine])
                                                                  THEN
                                                                    ERROR(Text002,
                                                                      FIELDCAPTION("Relative Person No."),
                                                                      FIELDCAPTION("Sick Leave Type"),
                                                                      "Sick Leave Type");
                                                                END;

                                                                IF ("Document Type" = "Document Type"::"Sick Leave") AND ("Start Date" <> 0D) THEN BEGIN
                                                                  SickLeaveSetup.GetPaymentPercent(Rec);
                                                                  IF ("Sick Leave Type" IN
                                                                      ["Sick Leave Type"::"Family Member Care",
                                                                       "Sick Leave Type"::"Post Vaccination",
                                                                       "Sick Leave Type"::Quarantine]) AND
                                                                     ("Relative Person No." <> '')
                                                                  THEN BEGIN
                                                                    TESTFIELD("Treatment Type");
                                                                    SickLeaveSetup.GetCarePaymentPercent(Rec);
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Document Type","Document Type"::"Sick Leave");
                                                              IF NOT ("Sick Leave Type" IN
                                                                      ["Sick Leave Type"::"Family Member Care",
                                                                       "Sick Leave Type"::"Child Care 1.5 years",
                                                                       "Sick Leave Type"::"Child Care 3 years",
                                                                       "Sick Leave Type"::"Post Vaccination",
                                                                       "Sick Leave Type"::Quarantine])
                                                              THEN
                                                                ERROR(Text002,
                                                                  FIELDCAPTION("Relative Person No."),
                                                                  FIELDCAPTION("Sick Leave Type"),
                                                                  "Sick Leave Type");

                                                              EmployeeRelative.RESET;
                                                              EmployeeRelative.SETRANGE("Person No.","Person No.");
                                                              IF PAGE.RUNMODAL(0,EmployeeRelative) = ACTION::LookupOK THEN BEGIN
                                                                EmployeeRelative.TESTFIELD("Relative Person No.");
                                                                VALIDATE("Relative Person No.",EmployeeRelative."Relative Person No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Relative Person No.;
                                                              RUS=Код родственника физ. лица] }
    { 29  ;   ;Child Grant Type    ;Option        ;CaptionML=[ENU=Child Grant Type;
                                                              RUS=Тип детского пособия];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5;
                                                                    RUS=0,1,2,3,4,5];
                                                   OptionString=0,1,2,3,4,5 }
    { 30  ;   ;Element Code        ;Code20        ;TableRelation="Payroll Element";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Element Code;
                                                              RUS=Код элемента] }
    { 31  ;   ;Previous Document No.;Code20       ;TableRelation="Posted Absence Header".No. WHERE (Document Type=FIELD(Document Type),
                                                                                                    Employee No.=FIELD(Employee No.));
                                                   OnValidate=BEGIN
                                                                VALIDATE("Employee No.");
                                                              END;

                                                   CaptionML=[ENU=Previous Document No.;
                                                              RUS=Номер предыдущего документа] }
    { 32  ;   ;Terminated          ;Boolean       ;CaptionML=[ENU=Terminated;
                                                              RUS=Уволен];
                                                   Editable=No }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              RUS=Код ярлыка измерения 1];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              RUS=Код ярлыка измерения 2];
                                                   CaptionClass='1,2,2' }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              RUS=Код набора измерений];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Calendar Days,Working Days;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TimeActivity@1210000 : Record 5206;
      AbsenceHeader@1210002 : Record 17385;
      AbsenceLine@1210012 : Record 17386;
      Employee@1210003 : Record 5200;
      EmployeeRelative@1210004 : Record 5205;
      SickLeaveSetup@1210005 : Record 17390;
      EmployeeJobEntry@1210006 : Record 17363;
      EmployeeAbsenceEntry@1210008 : Record 17389;
      VacationRequest@1210014 : Record 17434;
      LocMgt@1210009 : Codeunit 12400;
      CalendarMgt@1210010 : Codeunit 17430;
      AECalcMgt@1210016 : Codeunit 17480;
      Text002@1210015 : TextConst 'ENU=You cannot enter %1 if %2 is %3.;RUS=Нельзя ввести %1, если %2 равно %3.';
      Text003@1210017 : TextConst 'ENU=Employee %1 is not employed as of date %2.;RUS=Сотрудник %1 не принят на работу на дату %2.';
      DimMgt@1210001 : Codeunit 408;

    PROCEDURE CalcDays@1210002();
    VAR
      CalDays@1210000 : Decimal;
      Holidays@1210001 : Decimal;
    BEGIN
      IF ("Start Date" <> 0D) AND ("End Date" <> 0D) THEN BEGIN
        IF NOT Employee.GetJobEntry("Employee No.","Start Date",EmployeeJobEntry) THEN
          ERROR(Text003,"Employee No.","Start Date");

        CalDays :=
          CalendarMgt.GetPeriodInfo(
            EmployeeJobEntry."Calendar Code","Start Date","End Date",1);
        Holidays :=
          CalendarMgt.GetPeriodInfo(
            GetOfficialCalendarCode,"Start Date","End Date",4);
        "Working Days" :=
          CalendarMgt.GetPeriodInfo(
            EmployeeJobEntry."Calendar Code","Start Date","End Date",2);

        CASE "Document Type" OF
          "Document Type"::Vacation:
            BEGIN
              "Calendar Days" := CalDays - Holidays;

              TimeActivity.GET("Time Activity Code");
              IF TimeActivity."Paid Activity" THEN BEGIN
                "Payment Days" := "Calendar Days";
                "Payment Percent" := 100;
                "Days Paid by Employer" := "Calendar Days";
              END;
            END;
          "Document Type"::"Sick Leave":
            "Calendar Days" := CalDays;
          ELSE BEGIN
            "Calendar Days" := CalDays;
            TimeActivity.GET("Time Activity Code");
            IF TimeActivity."Paid Activity" THEN BEGIN
              TESTFIELD("Working Days");
              "Payment Days" := "Working Days";
              "Payment Percent" := 100;
              "Days Paid by Employer" := "Working Days";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record 242;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetAbsenceHeader;
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Sales,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          AbsenceHeader."Dimension Set ID",DATABASE::Employee);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [20] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.SetObjectFrom(Rec); // NC NOS-26 SPA
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ShowComments@1210001();
    VAR
      HROrderCommentLine@1210000 : Record 17368;
      HROrderCommentLines@1210001 : Page 17394;
    BEGIN
      HROrderCommentLine.SETRANGE("Table Name",HROrderCommentLine."Table Name"::"Absence Order");
      HROrderCommentLine.SETRANGE("No.","Document No.");
      HROrderCommentLine.SETRANGE("Line No.","Line No.");
      HROrderCommentLines.SETTABLEVIEW(HROrderCommentLine);
      HROrderCommentLines.RUNMODAL;
    END;

    PROCEDURE ShowMonthlyCalendar@4();
    VAR
      GraphicCalendar@1000 : Page 17432;
    BEGIN
      Employee.GetJobEntry("Employee No.","Start Date",EmployeeJobEntry);
      GraphicCalendar.SetCalendarCode(EmployeeJobEntry."Calendar Code","Start Date");
      GraphicCalendar.RUN;
    END;

    PROCEDURE FindPreviousAbsenceHeader@1210000(VAR PostedAbsenceLine@1210001 : Record 17388) Exist : Boolean;
    BEGIN
      Exist := FindFirstAbsenceHeader(PostedAbsenceLine,"Previous Document No.");
    END;

    LOCAL PROCEDURE FindFirstAbsenceHeader@1210005(VAR PostedAbsenceLine@1210000 : Record 17388;PrevDocNo@1210001 : Code[20]) : Boolean;
    BEGIN
      PostedAbsenceLine.RESET;
      PostedAbsenceLine.SETRANGE("Document Type","Document Type");
      PostedAbsenceLine.SETRANGE("Document No.",PrevDocNo);
      IF PostedAbsenceLine.FINDFIRST THEN
        IF PostedAbsenceLine."Previous Document No." = '' THEN
          EXIT(TRUE)
        ELSE
          EXIT(FindFirstAbsenceHeader(PostedAbsenceLine,PostedAbsenceLine."Previous Document No."))
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetPaymentDaysPerYear@1210003() Days : Decimal;
    VAR
      PostedAbsenceLine@1210000 : Record 17388;
    BEGIN
      PostedAbsenceLine.RESET;
      PostedAbsenceLine.SETRANGE("Document Type","Document Type");
      PostedAbsenceLine.SETRANGE("Sick Leave Type","Sick Leave Type");
      PostedAbsenceLine.SETRANGE("Start Date",CALCDATE('<-CY>',"Start Date"),CALCDATE('<CY>',"Start Date"));
      PostedAbsenceLine.SETRANGE("Relative Person No.","Relative Person No.");
      IF PostedAbsenceLine.FIND('-') THEN
        REPEAT
          Days := Days + PostedAbsenceLine."Payment Days" + PostedAbsenceLine."Special Payment Days";
        UNTIL PostedAbsenceLine.NEXT = 0;
    END;

    PROCEDURE GetAbsenceHeader@1210004();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> AbsenceHeader."Document Type") OR ("Document No." <> AbsenceHeader."No.") THEN
        AbsenceHeader.GET("Document Type","Document No.");
    END;

    LOCAL PROCEDURE TestStatusOpen@33();
    BEGIN
      GetAbsenceHeader;
      AbsenceHeader.TESTFIELD(Status,AbsenceHeader.Status::Open);
    END;

    LOCAL PROCEDURE GetOfficialCalendarCode@1210006() : Code[10];
    VAR
      HRSetup@1210000 : Record 5218;
    BEGIN
      HRSetup.GET;
      HRSetup.TESTFIELD("Official Calendar Code");
      EXIT(HRSetup."Official Calendar Code");
    END;

    BEGIN
    {
      NC NOS-26 SPA
    }
    END.
  }
}

