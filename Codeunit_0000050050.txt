OBJECT Codeunit 50050 Transformation From Buffer NAV
{
  OBJECT-PROPERTIES
  {
    Date=24.02.16;
    Time=13:05:41;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=50063;
    OnRun=BEGIN
            // Проверки обеспечиающие контроль правильного программного запуска
            ConsolidationSetup.GET;
            ConsolidationSetup.TESTFIELD("Gen. Jnl. Template");
            MovingDataSetup.GET;
            IF "Type Processing" <> "Type Processing"::"Cons. Source" THEN
              ERROR(Text001);
            ConsSource.CHANGECOMPANY("Company No.");
            ConsSource.GET(Processor);
            //NC S1893 > PCH
            Company.GET("Company No.");
            GLSetup.CHANGECOMPANY("Company No.");
            GLSetup.GET;
            //NC S1893 < PCH

            IF ConsSource."Import Format" <> ConsSource."Import Format"::FromBufferNAV THEN
              ERROR(Text001);
            IF ConsSource."Use External File" THEN
              ERROR(Text001);
            //NC S1893 > PCH
            IF NOT GLSetup."Use Bus.Unit for Separ. Trans." THEN
            //NC S1893 < PCH
              ConsSource.TESTFIELD("Business Unit Code");
            ConsSource.TESTFIELD("Gen. Journal Batch");
            ConsSource.TESTFIELD("Reposted Journal Batch");
            ConsSource.TESTFIELD("Removed Journal Batch");
            ConsSource.TESTFIELD("Closed Period Journal Batch");
            //NC S676 > PCH
            ConsSource.TESTFIELD("External System");
            //NC S676 < PCH

            //TransOneOperationFact.InitLog;
            Buffer.RESET;
            Buffer.SETCURRENTKEY("Import Cons. Source Code","Import Register No.","FA Operation","Transaction No.","Document No.");
            //NC S676 > PCH
            Buffer.SETRANGE("External System ID",ConsSource."External System");
            //NC S676 < PCH
            //NC S1893 > PCH
            IF GLSetup."Use Bus.Unit for Separ. Trans." THEN
              Buffer.SETRANGE("Id Legal Entity",Company."Legal Entity Id")
            ELSE
            //NC S1893 < PCH
              Buffer.SETRANGE("Id Legal Entity",ConsSource."Business Unit Code");
            Buffer.SETFILTER("Import Cons. Source Code",'%1','');
            Buffer.SETRANGE("Import Register No.",0);
            //NC MCO04.1 > DP
            IF ConsSource."FA Source" THEN
            //NC MCO04.1 < DP
            Buffer.SETRANGE("FA Operation",FALSE);

            isOK := NOT Buffer.ISEMPTY;

            IF ("Processing Mode" = "Processing Mode"::Test) OR
               (NOT isOK) THEN
              EXIT;

            IF "Company No." <> COMPANYNAME THEN
              ERROR(Text002,ConsSource.Code);

            IF GUIALLOWED THEN BEGIN
              Indicator.OPEN(Text55001 +
                             Text55002 +
                             Text55003 +
                             Text55004);
              iCount := Buffer.COUNT;
              i := 0;
              Indicator.UPDATE(2, iCount);
            END;

            //NC MIO-10.7 > DP
            GV.ClearCU;
            //NC MIO-10.7 < DP


            CountCanceled := 0;
            CountProcessed := 0;

            IF "Cons. Register" = 0 THEN BEGIN
              ConsRegister.RESET;
              ConsRegister.SETRANGE("Cons. Source Code", Processor);
              IF ConsRegister.FINDLAST THEN
                "Cons. Register" := ConsRegister."No." + 1
              ELSE
                "Cons. Register" := 1;
              ConsRegister.INIT;
            END ELSE
              ConsRegister.GET("Cons. Register",Processor);

            ConsRegister."No." := "Cons. Register";
            ConsRegister."Cons. Source Code" := Processor;
            ConsRegister."Consolidation Date" := TODAY;
            ConsRegister."Consolidation Time" := TIME;
            ConsRegister."User ID" := USERID;
            ConsRegister."From Entry No." := 0;
            ConsRegister."To Entry No." := 0;
            ConsRegister."From Entry No." := 0;
            ConsRegister."To Entry No." := 0;
            ConsRegister."Id Legal Entity" := Company."Legal Entity Id";
            ConsRegister."Gen. Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
            ConsRegister."Gen. Journal Batch" := ConsSource."Gen. Journal Batch";
            ConsRegister."Closed Period Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
            ConsRegister."Closed Period Journal Batch" := ConsSource."Closed Period Journal Batch";
            ConsRegister."Reposted Journal Template" :=  ConsolidationSetup."Gen. Jnl. Template";
            ConsRegister."Reposted Journal Batch" := ConsSource."Reposted Journal Batch";
            ConsRegister."Removed Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
            ConsRegister."Removed Journal Batch" := ConsSource."Removed Journal Batch";
            ConsRegister."Consolidation Time" := TIME;
            IF NOT ConsRegister.INSERT(TRUE) THEN
              ConsRegister.MODIFY(TRUE);

            //TDRANCS-706 >
            "Cons. Register" := ConsRegister."No.";
            MODIFY;
            //TDRANCS-706 <

            COMMIT;

            //NC MIO-10.7 > DP
            CLEAR(Log);
            Log.SetIsActive(FALSE);
            Log.WriteLogFile('GL Buffer',TRUE,FALSE,1); // оно же название файла
            Log.StartCounter(-26);
            //NC MIO-10.7 < DP

            IF NOT Buffer.FIND('-') THEN BEGIN
              isOK := FALSE;
              EXIT;
            END;

            REPEAT
              IF GUIALLOWED THEN BEGIN
                i += iCurrCount;
                Indicator.UPDATE(1, ROUND((i/iCount)*10000, 1));
                Indicator.UPDATE(3, i);
              END;

              CurrBeginEntryNo := Buffer."Entry No.";
              CurrLastEntryNo := 0;
              NextEntryNo := 0;
              iCurrCount := 0;
              TransactionNo := Buffer."Transaction No.";
              DocumentNo := Buffer."Document No.";
              REPEAT
                iCurrCount += 1;
                CurrLastEntryNo := Buffer."Entry No.";
              UNTIL (Buffer.NEXT = 0) OR (TransactionNo <> Buffer."Transaction No.") OR (DocumentNo <> Buffer."Document No.");
              IF (TransactionNo <> Buffer."Transaction No.") OR (DocumentNo <> Buffer."Document No.") THEN
                NextEntryNo := Buffer."Entry No.";

              //NC MIO-10.7 > DP
              Log.StartCounter(26);
              Log.StartCounter(-27);
              //NC MIO-10.7 < DP

              isRepeat := FALSE;
              REPEAT
                isOK := TRUE;
                //NC S676 > PCH
                //Buffer2.GET(Buffer."Id Legal Entity",CurrLastEntryNo);
                Buffer2.GET(Buffer."External System ID",Buffer."Id Legal Entity",CurrLastEntryNo);
                //NC S676 < PCH
                RecRefBuffer.GETTABLE(Buffer2);
                Rec."Record ID" := RecRefBuffer.RECORDID;
                IF NOT CODEUNIT.RUN(CODEUNIT::"Table Check Blocked",Rec) THEN BEGIN

                  //NC S676 > PCH
                  //IF NOT isRepeat AND Buffer2.GET(Buffer."Id Legal Entity",CurrLastEntryNo) THEN BEGIN
                  IF NOT isRepeat AND Buffer2.GET(Buffer."External System ID",Buffer."Id Legal Entity",CurrLastEntryNo) THEN BEGIN
                  //NC S676 < PCH
                    SLEEP(MovingDataSetup."Timeout with Blocking (m.sec)");
                    isRepeat := TRUE;
                  END ELSE BEGIN
                    isRepeat := FALSE;
                    EXIT;
                  END;
                END ELSE
                  isRepeat := FALSE;
              UNTIL NOT isRepeat;

              //NC MIO-10.7 > DP
              {
              //NC NCS-1106 > DP
              Buffer3.RESET;
              Buffer3.SETRANGE("External System ID",Buffer."External System ID");
              Buffer3.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
              Buffer3.SETRANGE("Entry No.",CurrBeginEntryNo,CurrLastEntryNo);
              Buffer3.CALCSUMS(Amount);
              IF Buffer3.Amount<>0 THEN BEGIN

                //NC NCS-1106.1 > DP
                isOK := FALSE;
                //NC NCS-1106.1 < DP

                EXIT;

                //NC NCS-1106.1 > DP
                {
                isOK := FALSE;
                }
                //NC NCS-1106.1 < DP

              END;
              //NC NCS-1106 < DP
              }
              Log.StartCounter(27);
              Log.StartCounter(-28);
              //NC MIO-10.7 < DP

              "Begin Entry No." := CurrBeginEntryNo;
              "Last Entry No." := CurrLastEntryNo;

              isRepeat := FALSE;
              REPEAT
                //NC S676 > PCH
                //Buffer2.GET(Buffer."Id Legal Entity",CurrBeginEntryNo);
                Buffer2.GET(Buffer."External System ID",Buffer."Id Legal Entity",CurrBeginEntryNo);
                //NC S676 < PCH
                RecRefBuffer.GETTABLE(Buffer2);
                Rec."Record ID" := RecRefBuffer.RECORDID;
                IF NOT CODEUNIT.RUN(CODEUNIT::"Trans. One From Buffer NAV",Rec) THEN BEGIN

                  //NC MIO-10.7 > DP
                  Log.StartCounter(30);
                  //NC MIO-10.7 < DP

                  {  // отключена повторная обработка
                  //NC S676 > PCH
                  //IF NOT isRepeat AND Buffer2.GET(Buffer."Id Legal Entity",CurrBeginEntryNo) THEN BEGIN
                  IF NOT isRepeat AND Buffer2.GET(Buffer."External System ID",Buffer."Id Legal Entity",CurrBeginEntryNo) THEN BEGIN
                  //NC S676 < PCH
                    SLEEP(MovingDataSetup."Timeout with Blocking (m.sec)");
                    isRepeat := TRUE;
                  END ELSE BEGIN
                  }
                    // здесь групповую модификацию нужно сделать
                    Buffer2.RESET;
                    //NC S676 > PCH
                    Buffer2.SETRANGE("External System ID",Buffer."External System ID");
                    //NC S676 < PCH
                    Buffer2.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
                    Buffer2.SETRANGE("Entry No.",CurrBeginEntryNo,CurrLastEntryNo);
                    Buffer2.MODIFYALL("Error in Import",TRUE);

                    ErrorJournal.AddLastError1("Company No.",ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Warning,
                                               Processor,"Cons. Register",
                                               Buffer2.TABLECAPTION,RecRefBuffer,"Line No.");
                    isRepeat := FALSE;
                  {
                  END;
                  }
                END ELSE
                  isRepeat := FALSE;
              UNTIL NOT isRepeat;

              //NC MIO-10.7 > DP
              Log.StartCounter(28);
              Log.StartCounter(-29);
              //NC MIO-10.7 < DP

              //NC S676 > PCH
              //Buffer2.GET(Buffer."Id Legal Entity",CurrBeginEntryNo);
              Buffer2.GET(Buffer."External System ID",Buffer."Id Legal Entity",CurrBeginEntryNo);
              //NC S676 < PCH
              IF Buffer2."Import Register No." = 0 THEN
                CountCanceled += iCurrCount
              ELSE IF Buffer2."Not Translate" THEN BEGIN
                // некоторые полупроводки проводки могут быть исключены и помечены как "Not Translate"
                //NC S676 > PCH
                Buffer2.SETRANGE("External System ID",ConsSource."External System");
                //NC S676 < PCH
                //NC S1893 > PCH
                IF GLSetup."Use Bus.Unit for Separ. Trans." THEN
                  Buffer2.SETRANGE("Id Legal Entity",Company."Legal Entity Id")
                ELSE
                //NC S1893 < PCH
                Buffer2.SETRANGE("Id Legal Entity",ConsSource."Business Unit Code");
                Buffer2.SETRANGE("Entry No.",CurrBeginEntryNo,CurrLastEntryNo);
                Buffer2.SETRANGE("Not Translate",FALSE);
                IF Buffer2.ISEMPTY THEN
                  CountWithoutJnl += iCurrCount
                ELSE
                  CountProcessed += iCurrCount;
              END ELSE
                CountProcessed += iCurrCount;

              //NC S1273 > PCH
              //ConsRegister."Total Entries In Session" := iCount;

              // TDVYNCS-1312 >
              //iProc += 1;
              iProc += iCurrCount;
              // TDVYNCS-1312 <

              IF (ConsRegister."From Posting Date" = 0D) OR
                 (Buffer2."Posting Date" < ConsRegister."From Posting Date") THEN
                ConsRegister."From Posting Date" := Buffer2."Posting Date";
              IF (ConsRegister."To Posting Date" = 0D) OR
                 (Buffer2."Posting Date" > ConsRegister."To Posting Date") THEN
                ConsRegister."To Posting Date" := Buffer2."Posting Date";
              ConsRegister."Total Entries In Session" := iProc;
              //NC S1273 < PCH
              ConsRegister."Total Success Loaded In Sess" := CountProcessed;
              ConsRegister."Total Unloaded In Session" := CountCanceled;
              ConsRegister."Total Loaded without Jnl" := CountWithoutJnl;
              ConsRegister."Consolidation Time" := TIME;
              ConsRegister.MODIFY;

              COMMIT;
              //NC MIO-10.7 > DP
              Log.StartCounter(29);
              //NC MIO-10.7 < DP

            UNTIL NextEntryNo = 0;

            IF GUIALLOWED THEN
              Indicator.CLOSE;

            //TransOneOperationFact.CloseLog;

            //NC MIO-10.7 > DP
            GenJournalLine.RESET;
            GenJournalLine.SETRANGE("Journal Template Name",ConsolidationSetup."Gen. Jnl. Template");
            GenJournalLine.SETRANGE("Journal Batch Name",ConsSource."Gen. Journal Batch");
            GenJournalLine.SETRANGE("Export Cons. Source Code",ConsSource.Code);
            GenJournalLine.SETRANGE("Export Register No.","Cons. Register");
            IF GenJournalLine.FINDFIRST THEN BEGIN
              l_RecRef.GETTABLE(GenJournalLine);
              l_cuChangLogMgt.Notify(0,l_RecRef,l_RecRef);
            END;
            GenJournalLine.SETRANGE("Journal Batch Name",ConsSource."Reposted Journal Batch");
            IF GenJournalLine.FINDFIRST THEN BEGIN
              l_RecRef.GETTABLE(GenJournalLine);
              l_cuChangLogMgt.Notify(0,l_RecRef,l_RecRef);
            END;
            GenJournalLine.SETRANGE("Journal Batch Name",ConsSource."Removed Journal Batch");
            IF GenJournalLine.FINDFIRST THEN BEGIN
              l_RecRef.GETTABLE(GenJournalLine);
              l_cuChangLogMgt.Notify(0,l_RecRef,l_RecRef);
            END;
            GenJournalLine.SETRANGE("Journal Batch Name",ConsSource."Closed Period Journal Batch");
            IF GenJournalLine.FINDFIRST THEN BEGIN
              l_RecRef.GETTABLE(GenJournalLine);
              l_cuChangLogMgt.Notify(0,l_RecRef,l_RecRef);
            END;

            Log.WriteLogFile('  Buffer.FIND',FALSE,FALSE,26);
            Log.WriteLogFile('  Check Blocked',FALSE,FALSE,27);
            Log.WriteLogFile('  Trans. One',FALSE,FALSE,28);

            Log.WriteLogFile('    Trans One',FALSE,FALSE,30);
            Log.WriteLogFile('    Init',FALSE,FALSE,31);
            Log.WriteLogFile('    Check',FALSE,FALSE,32);
            Log.WriteLogFile('      FIND',FALSE,FALSE,45);
            Log.WriteLogFile('      LedgerEntryDimTemp.INSERT',FALSE,FALSE,46);
            Log.WriteLogFile('      CheckErrorsConsFromNav',FALSE,FALSE,43);
            Log.WriteLogFile('        CheckExceptionCorrespondense',FALSE,FALSE,51);
            Log.WriteLogFile('        Check Exception',FALSE,FALSE,48);
            Log.WriteLogFile('        CheckGLMapp',FALSE,FALSE,44);
            Log.WriteLogFile('          IsFoundGLMapp',FALSE,FALSE,53);
            Log.WriteLogFile('        CheckDim',FALSE,FALSE,47);
            Log.WriteLogFile('        CheckDim2',FALSE,FALSE,52);
            Log.WriteLogFile('          CheckDefaultDimensions',FALSE,FALSE,54);
            Log.WriteLogFile('          CheckSameCodeDimensions',FALSE,FALSE,55);
            Log.WriteLogFile('          CheckRestrictedDimensions',FALSE,FALSE,56);
            Log.WriteLogFile('          CheckRealDimensions',FALSE,FALSE,57);
            Log.WriteLogFile('          Check DimValue.GET',FALSE,FALSE,58);
            Log.WriteLogFile('    Exception',FALSE,FALSE,33);
            Log.WriteLogFile('    Transform',FALSE,FALSE,34);
            Log.WriteLogFile('      Convert Orig Amt',FALSE,FALSE,37);
            Log.WriteLogFile('      CreateJnlLine',FALSE,FALSE,38);

            Log.WriteLogFile('        [INT]CreateJnlLine',FALSE,FALSE,10);
            Log.WriteLogFile('           [INT]Gen. Journal Line.VALIDATE',FALSE,FALSE,16);
            Log.WriteLogFile('           [INT]MappChartsOfAccount',FALSE,FALSE,11);
            Log.WriteLogFile('           [INT]GetNextLineNo',FALSE,FALSE,18);

            Log.WriteLogFile('      CreateJnlLineDimensions',FALSE,FALSE,39);

            Log.WriteLogFile('        [INT]CreateJnlLineDimensions',FALSE,FALSE,12);
            Log.WriteLogFile('           [INT]JournalLineDimension.GET',FALSE,FALSE,20);
            Log.WriteLogFile('           [INT]CheckDimensions + проверки',FALSE,FALSE,19);
            Log.WriteLogFile('           [INT]JournalLineDimension.INSERT',FALSE,FALSE,17);
            Log.WriteLogFile('           [INT]MappDimension',FALSE,FALSE,13);

            Log.WriteLogFile('      Link ID',FALSE,FALSE,40);
            Log.WriteLogFile('        MODIFY',FALSE,FALSE,49);
            Log.WriteLogFile('      INSERT',FALSE,FALSE,41);
            Log.WriteLogFile('      Notify',FALSE,FALSE,50);
            Log.WriteLogFile('      MODIF',FALSE,FALSE,42);
            Log.WriteLogFile('      InsertCorrectLine',FALSE,FALSE,60);
            Log.WriteLogFile('      отсеянные полупроводки',FALSE,FALSE,59);
            Log.WriteLogFile('    Err',FALSE,FALSE,35);
            Log.WriteLogFile('    Correct',FALSE,FALSE,36);

            Log.WriteLogFile('  Stat',FALSE,FALSE,29);
            Log.WriteLogFile('GL Buffer',FALSE,TRUE,1);
            //NC MIO-10.7 < DP
          END;

  }
  CODE
  {
    VAR
      TableCheckBlocked@1000000007 : Codeunit 50010;
      ErrorJournal@1101495000 : Record 50023;
      TextError@1101495001 : Text[250];
      Text001@1101495002 : TextConst 'ENU=Incorrect startup parameters.;RUS=Неправильные параметры запуска.';
      ConsolidationSetup@1101495016 : Record 50000;
      ConsSource@1101495003 : Record 50001;
      Buffer@1101495004 : Record 50093;
      Buffer2@1000000006 : Record 50093;
      Company@1101495005 : Record 2000000006;
      RecRefBuffer@1101495006 : RecordRef;
      Text002@1101495007 : TextConst 'ENU=Processing ischtochnika consolidation %1 must run in your company;RUS=Обработка исчточника консолидации %1 должна запускаться в своей фирме';
      Text003@1000000008 : TextConst 'ENU=You can not start the download. As legal persons loading.;RUS=Нельзя запустить загрузку. В юрлице идет загрузка.';
      ConsRegister@1101495009 : Record 50005;
      Indicator@1101495010 : Dialog;
      iCount@1101495011 : Integer;
      i@1101495012 : Integer;
      Text004@1101495018 : TextConst 'ENU=In the process of implementation unclassified error occurred. %1;RUS=В процессе выполнения возникла ошибка. %1';
      TextEDB01@1000000011 : TextConst 'ENU=In the process of implementation %1 unclassified error occurred. %2 Processing stopped.;RUS=В процессе выполнения %1 возникла ошибка. %2 Обработка прекращена.';
      Text55001@1000000000 : TextConst 'ENU=Transformation entries from Buffer Process... \;RUS=Трансформация данных из буфера NAV... \';
      Text55002@1000000001 : TextConst 'ENU=Total Entries      #2##### \;RUS=Общее число строк  #2##### \';
      Text55003@1000000002 : TextConst 'ENU=Processed          #3##### \;RUS=Обработано         #3##### \';
      Text55004@1000000003 : TextConst 'ENU=Progress:          @1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;RUS=Процент выполнения:@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      iCurrCount@1101495017 : Integer;
      CountCanceled@1000000004 : Integer;
      CountProcessed@1000000005 : Integer;
      CountWithoutJnl@1000000012 : Integer;
      isRepeat@1000000009 : Boolean;
      MovingDataSetup@1000000010 : Record 50064;
      CurrBeginEntryNo@1101495008 : Integer;
      CurrLastEntryNo@1101495014 : Integer;
      NextEntryNo@1101495013 : Integer;
      TransactionNo@1101495015 : Integer;
      DocumentNo@1101495019 : Code[20];
      Buffer3@1101495020 : Record 50093;
      iProc@1101495021 : Integer;
      GV@1101495022 : Codeunit 50033;
      GenJournalLine@1101495025 : Record 81;
      l_RecRef@1101495024 : RecordRef;
      l_cuChangLogMgt@1101495023 : Codeunit 423;
      Log@1101495027 : Codeunit 50014;
      GLSetup@1101495029 : Record 98;

    PROCEDURE LoadFromBufferGL@1101495000(ConsSource@1101495000 : Record 50001);
    VAR
      JobProcStatusTemp@1101495001 : TEMPORARY Record 50063;
      JobProc@1000000000 : Record 50062;
      JobProcStatus@1000000001 : Record 50063;
    BEGIN
      {
      JobProcStatusTemp."Company No." := COMPANYNAME;
      JobProcStatusTemp."Line No." := 0;
      JobProcStatusTemp.Blocked := FALSE;
      JobProcStatusTemp.Process := '';
      JobProcStatusTemp.Description := '';
      JobProcStatusTemp."Auto Start" := FALSE;
      JobProcStatusTemp.Dependency := 0;
      JobProcStatusTemp."Type Processing" := JobProcStatusTemp."Type Processing"::"Cons. Source";
      JobProcStatusTemp.Processor := ConsSource.Code;
      JobProcStatusTemp."Status Monitor" := JobProcStatusTemp."Status Monitor"::"trnsform";
      JobProcStatusTemp."Import Format" := ConsSource."Import Format";
      JobProcStatusTemp."External Source" := ConsSource."External System";
      JobProcStatusTemp."Name Service NAS" := '';
      JobProcStatusTemp."Transaction No." := 0;
      JobProcStatusTemp.Status := JobProcStatusTemp.Status::"Processing Begin";
      JobProcStatusTemp."Time Status" := CREATEDATETIME(TODAY,TIME);
      JobProcStatusTemp."Cons. Register" := 0;
      //JobProcStatusTemp."Object No."
      JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Load;
      //JobProcStatusTemp."Record ID"

      CODEUNIT.RUN(CODEUNIT::"Transformation Operation Fact",JobProcStatusTemp);

      //MESSAGE('Ваполнено без ошибок: %1 \ Созданы операции в буфере: %2 .. %3',JobProcStatusTemp.isOK,
      //                                                                         JobProcStatusTemp."Begin Entry No.",
      //                                                                         JobProcStatusTemp."Last Entry No.");
      }

      ConsSource.TESTFIELD("Import Format",ConsSource."Import Format"::FromBufferNAV);
      ConsSource.TESTFIELD("Use External File",FALSE);


      JobProc.RESET;
      JobProc.INIT;
      JobProc.VALIDATE("Company No.",COMPANYNAME);
      JobProc.VALIDATE(Blocked,FALSE);
      JobProc.VALIDATE("Type Processing",JobProc."Type Processing"::"Cons. Source");
      JobProc.VALIDATE(Processor,ConsSource.Code);
      JobProc.VALIDATE("Import Format",JobProc."Import Format"::FromBufferNAV);
      JobProc.VALIDATE("External Source",ConsSource."External System");
      JobProc."Auto Start" := FALSE;
      JobProc."Name Service NAS" := '';
      JobProc."Name Server NAS" := '';
      JobProc."Status Monitor" := JobProc."Status Monitor"::Transformation;
      JobProc."Data Check" := TRUE;
      JobProc."Check Uniqueness" := TRUE;

      // Проверка на загрузку операций в юрлице
      IF NOT JobProcStatus.IsCheckUniq(JobProc,STRSUBSTNO('%1|%2',JobProcStatus.Status::Scheduled,
                                                                  JobProcStatus.Status::Working)) THEN
        ERROR(Text003,ConsSource."Company Name");

      JobProcStatus.AddJob(JobProc);
      JobProcStatus.Status := JobProcStatus.Status::Scheduled;
      JobProcStatus."Transaction No." := JobProcStatus.GetNewTransactionNo;
      JobProcStatus."Processing Mode" := JobProcStatusTemp."Processing Mode"::Load;
      JobProcStatus.MODIFY;
      COMMIT;

      CODEUNIT.RUN(CODEUNIT::"Run Job Process",JobProcStatus);

      JobProcStatus.GET(JobProcStatus."Line No.");
      IF GUIALLOWED AND
        (JobProcStatus.Status = JobProcStatus.Status::"Error Reported") AND
        (GETLASTERRORTEXT <> '') THEN
       MESSAGE(Text004,GETLASTERRORTEXT);
    END;

    BEGIN
    {
      NC MIO-10 DP Перенесен CU
      ПАРАМЕТРЫ:
        "Company No."
        "Line No."
        Blocked
        Process
        Description
        "Auto Start"
        Dependency
        "Type Processing" - Ист. Консолидации
        Processor - Код Ист. Консолидации
        "Status Monitor" - не исп.
        "Import Format" - 0 - Загрузка из Внеш. Системы
        "External Source" - ID внешней системы
        "Transaction No."
        "Object No." - не используется
        "Processing Mode" - Test - проверка наличия записей, Load - загрузка
        "Record ID" - не используется
      ВОЗВРАТ:
        isOK - ОК
        "Cons. Register" - регистр в котором произошла загрузка
        Status - ???
        "Time Status" - ???
        "Begin Entry No."
        "Last Entry No."
      NC S676 PCH Фильтр на код внешней компании
      TDRANCS-706
        SET "Cons. Register" in "Job Process Status"
      NC NCS-1106 DP Исключение обработки небалансирующих транзакций источника
      NC NCS-1106.1 DP Изменена функция OnRun - присвоение значения переменной isOK
      NC S1273 PCH заполнение статистики
      TDVYNCS-1312 Обновление поля "Total Entries In Session"
      NC MIO-10.7 DP Изменена функция OnRun
      NC MIO-10.7 PCH изменен вывод статистики
      NC S1893 PCH
    }
    END.
  }
}

