OBJECT Codeunit 17 Gen. Jnl.-Post Reverse
{
  OBJECT-PROPERTIES
  {
    Date=08.06.17;
    Time=14:52:04;
    Modified=Yes;
    Version List=NAVW19.00,NAVRU9.00,NOS-26;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 17=m,
                TableData 21=imd,
                TableData 25=imd,
                TableData 45=rm,
                TableData 253=rimd,
                TableData 254=imd,
                TableData 271=imd,
                TableData 272=imd,
                TableData 379=imd,
                TableData 380=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1210000 : Record 98;
      GenJnlPostLine@1002 : Codeunit 12;
      ReversalMismatchErr@1026 : TextConst 'ENU=Reversal found a %1 without a matching general ledger entry.;RUS=Во время сторнирования обнаружен %1 без соответствующей операции ГК.';
      CannotReverseErr@1023 : TextConst 'ENU=You cannot reverse the transaction, because it has already been reversed.;RUS=Нельзя сторнировать эту транзакцию, так как она уже сторнирована.';
      DimCombBlockedErr@1027 : TextConst 'ENU=The combination of dimensions used in general ledger entry %1 is blocked. %2.;RUS=Комбинация измерений, использованная в операции ГК %1, заблокирована. %2';

    PROCEDURE Reverse@72(VAR ReversalEntry@1002 : Record 179;VAR ReversalEntry2@1000 : Record 179);
    VAR
      SourceCodeSetup@1016 : Record 242;
      GLEntry@1018 : Record 17;
      GLEntry2@1003 : Record 17;
      ReversedGLEntry@1001 : Record 17;
      GLReg@1019 : Record 45;
      GLReg2@1021 : Record 45;
      GenJnlLine@1017 : Record 81;
      CustLedgEntry@1004 : Record 21;
      TempCustLedgEntry@1005 : TEMPORARY Record 21;
      VendLedgEntry@1008 : Record 25;
      TempVendLedgEntry@1012 : TEMPORARY Record 25;
      BankAccLedgEntry@1009 : Record 271;
      TempBankAccLedgEntry@1015 : TEMPORARY Record 271;
      VATEntry@1010 : Record 254;
      FALedgEntry@1007 : Record 5601;
      MaintenanceLedgEntry@1011 : Record 5625;
      TempRevertTransactionNo@1024 : TEMPORARY Record 2000000026;
      TempReversedGLEntry@1023 : TEMPORARY Record 17;
      ValueEntry@1470000 : Record 5802;
      TempValueEntry@1210001 : TEMPORARY Record 5802;
      GLEntry3@1470001 : Record 17;
      TaxDiffLedgEntry@1470002 : Record 17306;
      TempTaxDiffLedgEntry@1470003 : TEMPORARY Record 17306;
      TaxDiffRegister@1470004 : Record 17302;
      DtldCustLedgEntry@1470005 : Record 379;
      DtldVendLedgEntry@1470006 : Record 380;
      GLItemLedgerRelation@1210003 : Record 5823;
      FAInsertLedgEntry@1006 : Codeunit 5600;
      VATAllocationPost@1210002 : Codeunit 12417;
      UpdateAnalysisView@1020 : Codeunit 410;
      NextDtldCustLedgEntryEntryNo@1014 : Integer;
      NextDtldVendLedgEntryEntryNo@1013 : Integer;
      "NCV>"@1101495008 : Integer;
      EliminatedGLEntry@1101495007 : Record 17;
      FILedgEntry@1101495006 : Record 50106;
      TempFILedgEntry@1101495005 : TEMPORARY Record 50106;
      FIRegister@1101495004 : Record 50109;
      AllocationCostGLEntry@1101495003 : Record 50012;
      TempAllocationCostGLEntry@1101495002 : TEMPORARY Record 50012;
      AllocationRegister@1101495001 : Record 50029;
      AllocationRegister2@1101495000 : Record 50029;
    BEGIN
      SourceCodeSetup.GET;
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Register THEN
      //NC NCS-1820 > DP
      BEGIN
      //NC NCS-1820 < DP
        GLReg2."No." := ReversalEntry2."G/L Register No.";

          //NC NCS-1820 > DP
        AllocationRegister2."No." := ReversalEntry2."Alloc. G/L Register No.";
      END;
      //NC NCS-1820 < DP

      ReversalEntry.CopyReverseFilters(
        GLEntry2,CustLedgEntry,VendLedgEntry,BankAccLedgEntry,VATEntry,FALedgEntry,MaintenanceLedgEntry,TaxDiffLedgEntry,ValueEntry);

      //NC MTF02 < II
      ReversalEntry.CopyFILedgerEntryFilters(FILedgEntry);
      //NC MTF02 < II
      //NC NCS-1820 < DP
      ReversalEntry.CopyFilters2(AllocationCostGLEntry);
      //NC NCS-1820 > DP
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        IF ReversalEntry2.FINDSET(FALSE,FALSE) THEN
          REPEAT
            TempRevertTransactionNo.Number := ReversalEntry2."Transaction No.";
            IF TempRevertTransactionNo.INSERT THEN;
          UNTIL ReversalEntry2.NEXT = 0;
      END;

      GenJnlLine.INIT;
      GenJnlLine."Source Code" := SourceCodeSetup.Reversal;

      IF GenJnlPostLine.GetNextEntryNo = 0 THEN
        GenJnlPostLine.StartPosting(GenJnlLine)
      ELSE
        GenJnlPostLine.ContinuePosting(GenJnlLine);

      GenJnlPostLine.SetGLRegReverse(GLReg);

      CopyCustLedgEntry(CustLedgEntry,TempCustLedgEntry);
      CopyVendLedgEntry(VendLedgEntry,TempVendLedgEntry);
      CopyBankAccLedgEntry(BankAccLedgEntry,TempBankAccLedgEntry);
      GLSetup.GET;
      IF GLSetup."Enable Russian Tax Accounting" THEN
        CopyTaxDiffLedgEntry(TaxDiffLedgEntry,TempTaxDiffLedgEntry);
      IF GLSetup."Enable Russian Accounting" THEN
        CopyValueEntry(ValueEntry,TempValueEntry);
      //NC NOS-26 > SPA
      CopyFILedgEntry(FILedgEntry,TempFILedgEntry);
      CopyAllocationCostLedgEntry(AllocationCostGLEntry,TempAllocationCostGLEntry);
      //NC NOS-26 < SPA

      //NC MTF02.1 > AKU
      TempRevertTransactionNo.ASCENDING(FALSE);  //Сначала аннулируем более поздние транзакции
      //NC MTF02.1 < AKU
      IF TempRevertTransactionNo.FINDSET THEN;
      REPEAT
        IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN
          GLEntry2.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
        WITH GLEntry2 DO
          IF FIND('+') THEN
            REPEAT
              IF "Reversed by Entry No." <> 0 THEN
                ERROR(CannotReverseErr);
              //NC MDR01 > MP
              IF "Reversed Entry No." <> 0 THEN
                ERROR(CannotReverseErr);
              //NC MDR01 < MP
              GenJnlPostLine.SetGlobalDimensionSetID("Dimension Set ID"); // NC NOS-26 SPA
              CheckDimComb("Entry No.","Dimension Set ID",DATABASE::"G/L Account","G/L Account No.",0,'',
                ReversalEntry."Posting Date",GLEntry2); // NC NOS-26 SPA
              GLEntry := GLEntry2;
              IF ("FA Entry No." <> 0) AND GLSetup."Enable Russian Tax Accounting" THEN
                InsertReverseTaxEntry(FAInsertLedgEntry,"Entry No.",GenJnlPostLine.GetNextEntryNo,"FA Entry Type",
                  "FA Entry No.",GLEntry."FA Entry No.",GenJnlPostLine.GetNextTransactionNo,ReversalEntry2);
              IF "FA Entry No." <> 0 THEN
                FAInsertLedgEntry.InsertReverseEntry(
                  GenJnlPostLine.GetNextEntryNo,"FA Entry Type","FA Entry No.",GLEntry."FA Entry No.",
                  GenJnlPostLine.GetNextTransactionNo,ReversalEntry2);
              GLEntry.Amount := -Amount;
              GLEntry.Quantity := -Quantity;
              GLEntry."VAT Amount" := -"VAT Amount";
              GLEntry."Debit Amount" := -"Debit Amount";
              GLEntry."Credit Amount" := -"Credit Amount";
              GLEntry."Additional-Currency Amount" := -"Additional-Currency Amount";
              GLEntry."Add.-Currency Debit Amount" := -"Add.-Currency Debit Amount";
              GLEntry."Add.-Currency Credit Amount" := -"Add.-Currency Credit Amount";
              //NC PIF001 > DP 07.05.07
              GLEntry."Original Amount" := -"Original Amount";
              GLEntry."Original Debit Amount" := -"Original Debit Amount";
              GLEntry."Original Credit Amount" := -"Original Credit Amount";
              //NC PIF001 < DP 07.05.07
              //NC PIF010 > MP
              GLEntry."Debit Quantity" := -"Debit Quantity";
              GLEntry."Credit Quantity" := -"Credit Quantity";
              //NC PIF010 < MP
              GLEntry."Entry No." := GenJnlPostLine.GetNextEntryNo;
              GLEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
              GLEntry."User ID" := USERID;
              GenJnlLine.Correction :=
                (GLEntry."Debit Amount" < 0) OR (GLEntry."Credit Amount" < 0) OR
                (GLEntry."Add.-Currency Debit Amount" < 0) OR (GLEntry."Add.-Currency Credit Amount" < 0);
              GLEntry."Journal Batch Name" := '';
              GLEntry."Source Code" := GenJnlLine."Source Code";
              SetReversalDescription(
                ReversalEntry."Entry Type"::"G/L Account","Entry No.",ReversalEntry2,GLEntry.Description);
              GLEntry."Reversed Entry No." := "Entry No.";
              GLEntry.Reversed := TRUE;
              //NC MIFI02 > MP
              GLEntry.Elimination := FALSE;
              GLEntry."Eliminated Entry No." := 0;
              GLEntry."Eliminated by Entry No." := 0;
              GLEntry."External System ID" := '';
              IF Elimination THEN BEGIN
                IF EliminatedGLEntry.GET("Eliminated Entry No.") THEN BEGIN
                  EliminatedGLEntry."Eliminated by Entry No." := 0;
                  EliminatedGLEntry.MODIFY;
                END;
                "Eliminated Entry No." := 0;
                Elimination := FALSE;
              END;
              //NC MIFI02 < MP
              IF ReversalEntry."Corrected Period Date" <> 0D THEN
                GLEntry."Posting Date" := ReversalEntry."Posting Date";
              // Reversal of Reversal
              IF "Reversed Entry No." <> 0 THEN BEGIN
                ReversedGLEntry.GET("Reversed Entry No.");
                ReversedGLEntry."Reversed by Entry No." := 0;
                ReversedGLEntry.Reversed := FALSE;
                ReversedGLEntry.MODIFY;
                "Reversed Entry No." := GLEntry."Entry No.";
                GLEntry."Reversed by Entry No." := "Entry No.";
              END;
              "Reversed by Entry No." := GLEntry."Entry No.";
              Reversed := TRUE;
              MODIFY;
              GenJnlPostLine.InsertGLEntry(GenJnlLine,GLEntry,FALSE);
              TempReversedGLEntry := GLEntry;
              TempReversedGLEntry.INSERT;
              IF GLSetup."Enable Russian Accounting" AND (GLEntry.Amount <> 0) THEN BEGIN
                GLItemLedgerRelation.RESET;
                GLItemLedgerRelation.SETRANGE("G/L Entry No.",GLEntry2."Entry No.");
                IF GLItemLedgerRelation.FINDFIRST THEN
                  IF ValueEntry.GET(GLItemLedgerRelation."Value Entry No.") THEN BEGIN
                    GLItemLedgerRelation."G/L Entry No." := GLEntry."Entry No.";
                    GLItemLedgerRelation."Value Entry No." :=
                      VATAllocationPost.InsertItemReverseEntry(ValueEntry."Entry No.",ReversalEntry2);
                    GLItemLedgerRelation."G/L Register No." := GLReg."No.";
                    GLItemLedgerRelation.INSERT;
                  END;
              END;

              IF GLSetup."Enable Russian Tax Accounting" THEN BEGIN
                DtldCustLedgEntry.SETRANGE("Tax Diff. Transaction No.","Transaction No.");
                IF NOT DtldCustLedgEntry.ISEMPTY THEN // TDVYNCS-1722
                  IF DtldCustLedgEntry.FINDFIRST THEN BEGIN
                    DtldCustLedgEntry."Tax Diff. Transaction No." := 0;
                    DtldCustLedgEntry.MODIFY;
                  END;
                DtldVendLedgEntry.SETRANGE("Tax Diff. Transaction No.","Transaction No.");
                IF NOT DtldVendLedgEntry.ISEMPTY THEN // TDVYNCS-1722
                  IF DtldVendLedgEntry.FINDFIRST THEN BEGIN
                    DtldVendLedgEntry."Tax Diff. Transaction No." := 0;
                    DtldVendLedgEntry.MODIFY;
                  END;
                TempTaxDiffLedgEntry.SETRANGE("Transaction No.","Transaction No.");
              END;

              CASE TRUE OF
                TempCustLedgEntry.GET("Entry No."):
                  BEGIN
                    CheckDimComb("Entry No.","Dimension Set ID",
                      DATABASE::Customer,TempCustLedgEntry."Customer No.",
                      DATABASE::"Salesperson/Purchaser",TempCustLedgEntry."Salesperson Code",
                        ReversalEntry."Posting Date",TempCustLedgEntry); //NC NOS-26 SPA
                    ReverseCustLedgEntry(
                      TempCustLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,GenJnlLine."Source Code",
                      NextDtldCustLedgEntryEntryNo,ReversalEntry2);
                    TempCustLedgEntry.DELETE;
                  END;
                TempVendLedgEntry.GET("Entry No."):
                  BEGIN
                    CheckDimComb("Entry No.","Dimension Set ID",
                      DATABASE::Vendor,TempVendLedgEntry."Vendor No.",
                      DATABASE::"Salesperson/Purchaser",TempVendLedgEntry."Purchaser Code",
                        ReversalEntry."Posting Date",TempVendLedgEntry); // NC NOS-26 SPA
                    ReverseVendLedgEntry(
                      TempVendLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,GenJnlLine."Source Code",
                      NextDtldVendLedgEntryEntryNo,ReversalEntry2);
                    TempVendLedgEntry.DELETE;
                  END;
                TempBankAccLedgEntry.GET("Entry No."):
                  BEGIN
                    CheckDimComb("Entry No.","Dimension Set ID",
                      DATABASE::"Bank Account",TempBankAccLedgEntry."Bank Account No.",0,'',
                        ReversalEntry."Posting Date",TempBankAccLedgEntry); // NC NOS-26 SPA
                    ReverseBankAccLedgEntry(TempBankAccLedgEntry,GLEntry."Entry No.",GenJnlLine."Source Code",ReversalEntry2);
                    TempBankAccLedgEntry.DELETE;
                  END;
                //NC MTF02 > II
                TempFILedgEntry.GET("Entry No."):
                  BEGIN
                    CheckDimComb("Entry No.","Dimension Set ID",
                      DATABASE::"Financial Instrument",TempFILedgEntry."FI No.",0,'',
                        ReversalEntry."Posting Date",TempFILedgEntry);
                    ReverseFILedgEntry(TempFILedgEntry,GLEntry."Entry No.",ReversalEntry2, FIRegister, GenJnlLine, GLReg);
                    TempFILedgEntry.DELETE;
                  END;
                //NC MTF02 < II
                TempTaxDiffLedgEntry.FIND('-'):
                  BEGIN
                    GLSetup.TESTFIELD("Enable Russian Tax Accounting");
                    ReverseTaxDiffLedgEntries(TempTaxDiffLedgEntry,TaxDiffRegister);
                  END;
                //NC NCS-1820 > DP
                TempAllocationCostGLEntry.FIND('-'):
                  BEGIN
                    CheckDimComb("Entry No.","Dimension Set ID",
                      DATABASE::"Allocation of Cost G/L Entry",TempAllocationCostGLEntry."G/L Account No.",0,'',
                        ReversalEntry."Posting Date",TempAllocationCostGLEntry);
                    ReverseAllocationCostGLEntry(TempAllocationCostGLEntry,AllocationRegister,GenJnlLine,GLEntry,GLReg);
                  END;
                //NC NCS-1820 < DP
              END;
            UNTIL NEXT(-1) = 0;
      UNTIL TempRevertTransactionNo.NEXT = 0;

      IF NOT FALedgEntry.ISEMPTY THEN // TDVYNCS-1722
        IF FALedgEntry.FINDSET THEN
          REPEAT
            FAInsertLedgEntry.CheckFAReverseEntry(FALedgEntry)
          UNTIL FALedgEntry.NEXT = 0;

      IF NOT MaintenanceLedgEntry.ISEMPTY THEN // TDVYNCS-1722
        IF MaintenanceLedgEntry.FINDFIRST THEN
          REPEAT
            FAInsertLedgEntry.CheckMaintReverseEntry(MaintenanceLedgEntry)
          UNTIL FALedgEntry.NEXT = 0;

      FAInsertLedgEntry.FinishFAReverseEntry(GLReg);

      IF NOT TempCustLedgEntry.ISEMPTY THEN
        ERROR(ReversalMismatchErr,CustLedgEntry.TABLECAPTION);
      IF NOT TempVendLedgEntry.ISEMPTY THEN
        ERROR(ReversalMismatchErr,VendLedgEntry.TABLECAPTION);
      IF NOT TempBankAccLedgEntry.ISEMPTY THEN
        ERROR(ReversalMismatchErr,BankAccLedgEntry.TABLECAPTION);
      IF NOT TempTaxDiffLedgEntry.ISEMPTY THEN
        ERROR(ReversalMismatchErr,TaxDiffLedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);

      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        TempRevertTransactionNo.FINDSET;
        REPEAT
          VATEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
          IF GLSetup."Enable Russian Accounting" THEN
            ReverseVATRU(VATEntry,ReversalEntry,TempReversedGLEntry,GenJnlLine."Source Code")
          ELSE
            ReverseVAT(VATEntry,TempReversedGLEntry,GenJnlLine."Source Code");
        UNTIL TempRevertTransactionNo.NEXT = 0;
      END ELSE
        IF GLSetup."Enable Russian Accounting" THEN
          ReverseVATRU(VATEntry,ReversalEntry,TempReversedGLEntry,GenJnlLine."Source Code")
        ELSE
          ReverseVAT(VATEntry,TempReversedGLEntry,GenJnlLine."Source Code");

      GenJnlPostLine.FinishPosting(GenJnlLine);

      IF GLReg2."No." <> 0 THEN
        IF GLReg2.GET(GLReg2."No.") THEN BEGIN
          GLReg2.Reversed := TRUE;
          GLReg2.MODIFY;
        END;

      //NC NCS-1820 > DP
      IF AllocationRegister2."No." <> 0 THEN
        IF AllocationRegister2.GET(AllocationRegister2."No.") THEN BEGIN
          AllocationRegister2.Canceled := TRUE;
          AllocationRegister2."Canceled by User ID" := USERID;
          AllocationRegister2."Cancelation Date" :=CURRENTDATETIME;
          AllocationRegister2.MODIFY;
        END;
      //NC NCS-1820 < DP

      //NC NCS-1820.4 > DP
      IF AllocationRegister."No." <> 0 THEN BEGIN
        AllocationRegister."From G/L Entry No." := GLReg."From Entry No.";
        AllocationRegister."To G/L Entry No." := GLReg."To Entry No.";
        AllocationRegister.MODIFY;
      END;
      //NC NCS-1820.4 < DP

      UpdateAnalysisView.UpdateAll(0,TRUE);
    END;

    LOCAL PROCEDURE ReverseCustLedgEntry@71(CustLedgEntry@1000 : Record 21;NewEntryNo@1001 : Integer;Correction@1006 : Boolean;SourceCode@1009 : Code[10];VAR NextDtldCustLedgEntryEntryNo@1003 : Integer;VAR ReversalEntry@1008 : Record 179);
    VAR
      NewCustLedgEntry@1002 : Record 21;
      ReversedCustLedgEntry@1007 : Record 21;
      DtldCustLedgEntry@1005 : Record 379;
      NewDtldCustLedgEntry@1004 : Record 379;
    BEGIN
      WITH NewCustLedgEntry DO BEGIN
        NewCustLedgEntry := CustLedgEntry;
        "Sales (LCY)" := -"Sales (LCY)";
        "Profit (LCY)" := -"Profit (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Given (LCY)" := -"Pmt. Disc. Given (LCY)";
        Positive := NOT Positive;
        IF NOT GLSetup."Enable Russian Accounting" THEN BEGIN
          "Adjusted Currency Factor" := "Adjusted Currency Factor";
          "Original Currency Factor" := "Original Currency Factor";
        END;
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(
          ReversalEntry."Entry Type"::Customer,CustLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := CustLedgEntry."Entry No.";
        Reversed := TRUE;
        "Applies-to ID" := '';
        // Reversal of Reversal
        IF CustLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedCustLedgEntry.GET(CustLedgEntry."Reversed Entry No.");
          ReversedCustLedgEntry."Reversed by Entry No." := 0;
          ReversedCustLedgEntry.Reversed := FALSE;
          ReversedCustLedgEntry.MODIFY;
          CustLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := CustLedgEntry."Entry No.";
        END;
        CustLedgEntry."Applies-to ID" := '';
        CustLedgEntry."Reversed by Entry No." := "Entry No.";
        CustLedgEntry.Reversed := TRUE;
        CustLedgEntry.MODIFY;
        INSERT;

      //NC MLN09 > DP
        IF CustLedgEntry."Amount Type"=CustLedgEntry."Amount Type"::Interest THEN
          GenJnlPostLine.UpdateCVAgreementSchedule(1,CustLedgEntry."Customer No.",
                                      CustLedgEntry."Agreement No.",
                                      CustLedgEntry."Agreement Condition No.",
                                      CustLedgEntry."Posting Date",
                                      NewCustLedgEntry."Entry No.",
                                      TRUE);
      //NC MLN09 < DP
      //NC MLN09.3 > DP
        IF CustLedgEntry."Change Condition Block Status" THEN BEGIN
           NewCustLedgEntry."Change Condition Block Status" := TRUE;
           GenJnlPostLine.UpdateCVAgreementDetail(0,CustLedgEntry."Customer No.",
                                       CustLedgEntry."Agreement No.",
                                       CustLedgEntry."Agreement Condition No.",
                                       CustLedgEntry."Posting Date",
                                       TRUE,
                                       CustLedgEntry."Document Type"
      //NC MLN09.5 > DP
                                      ,CustLedgEntry."Change Condition Block Status"
      //NC MLN09.5 < DP

                                       );
        END;
      //NC MLN09.3 > DP

        IF NextDtldCustLedgEntryEntryNo = 0 THEN BEGIN
          DtldCustLedgEntry.FINDLAST;
          NextDtldCustLedgEntryEntryNo := DtldCustLedgEntry."Entry No." + 1;
        END;
        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
        DtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
        DtldCustLedgEntry.FINDSET;
        REPEAT
          DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::"Initial Entry");
          NewDtldCustLedgEntry := DtldCustLedgEntry;
          NewDtldCustLedgEntry.Amount := -NewDtldCustLedgEntry.Amount;
          NewDtldCustLedgEntry."Amount (LCY)" := -NewDtldCustLedgEntry."Amount (LCY)";
          NewDtldCustLedgEntry.UpdateDebitCredit(Correction);
          NewDtldCustLedgEntry."Cust. Ledger Entry No." := NewEntryNo;
          NewDtldCustLedgEntry."User ID" := USERID;
          NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
          NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
          NewDtldCustLedgEntry.INSERT(TRUE);
        UNTIL DtldCustLedgEntry.NEXT = 0;

        ApplyCustLedgEntryByReversal(
          CustLedgEntry,NewCustLedgEntry,NewDtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);
        ApplyCustLedgEntryByReversal(
          NewCustLedgEntry,CustLedgEntry,DtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseVendLedgEntry@70(VendLedgEntry@1000 : Record 25;NewEntryNo@1001 : Integer;Correction@1006 : Boolean;SourceCode@1009 : Code[10];VAR NextDtldVendLedgEntryEntryNo@1003 : Integer;VAR ReversalEntry@1007 : Record 179);
    VAR
      NewVendLedgEntry@1002 : Record 25;
      ReversedVendLedgEntry@1008 : Record 25;
      DtldVendLedgEntry@1005 : Record 380;
      NewDtldVendLedgEntry@1004 : Record 380;
    BEGIN
      WITH NewVendLedgEntry DO BEGIN
        NewVendLedgEntry := VendLedgEntry;
        "Purchase (LCY)" := -"Purchase (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Rcd.(LCY)" := -"Pmt. Disc. Rcd.(LCY)";
        Positive := NOT Positive;
        IF NOT GLSetup."Enable Russian Accounting" THEN BEGIN
          "Adjusted Currency Factor" := "Adjusted Currency Factor";
          "Original Currency Factor" := "Original Currency Factor";
        END;
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(
          ReversalEntry."Entry Type"::Vendor,VendLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := VendLedgEntry."Entry No.";
        Reversed := TRUE;
        "Applies-to ID" := '';
        // Reversal of Reversal
        IF VendLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedVendLedgEntry.GET(VendLedgEntry."Reversed Entry No.");
          ReversedVendLedgEntry."Reversed by Entry No." := 0;
          ReversedVendLedgEntry.Reversed := FALSE;
          ReversedVendLedgEntry.MODIFY;
          VendLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := VendLedgEntry."Entry No.";
        END;
        VendLedgEntry."Applies-to ID" := '';
        VendLedgEntry."Reversed by Entry No." := "Entry No.";
        VendLedgEntry.Reversed := TRUE;
        VendLedgEntry.MODIFY;
        INSERT;

      //NC MLN09 > DP
        IF VendLedgEntry."Amount Type"=VendLedgEntry."Amount Type"::Interest THEN
          GenJnlPostLine.UpdateCVAgreementSchedule(1,VendLedgEntry."Vendor No.",
                                      VendLedgEntry."Agreement No.",
                                      VendLedgEntry."Agreement Condition No.",
                                      VendLedgEntry."Posting Date",
                                      NewVendLedgEntry."Entry No.",
                                      TRUE);
      //NC MLN09 < DP

      //NC MLN09.3 > DP
        IF VendLedgEntry."Change Condition Block Status" THEN BEGIN
           NewVendLedgEntry."Change Condition Block Status" := TRUE;
           GenJnlPostLine.UpdateCVAgreementDetail(1,VendLedgEntry."Vendor No.",
                                       VendLedgEntry."Agreement No.",
                                       VendLedgEntry."Agreement Condition No.",
                                       VendLedgEntry."Posting Date",
                                       TRUE,
                                       VendLedgEntry."Document Type"
      //NC MLN09.5 > DP
                                      ,VendLedgEntry."Change Condition Block Status"
      //NC MLN09.5 < DP
                                      );
        END;
      //NC MLN09.3 > DP

        IF NextDtldVendLedgEntryEntryNo = 0 THEN BEGIN
          DtldVendLedgEntry.FINDLAST;
          NextDtldVendLedgEntryEntryNo := DtldVendLedgEntry."Entry No." + 1;
        END;
        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
        DtldVendLedgEntry.SETRANGE(Unapplied,FALSE);
        DtldVendLedgEntry.FINDSET;
        REPEAT
          DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::"Initial Entry");
          NewDtldVendLedgEntry := DtldVendLedgEntry;
          NewDtldVendLedgEntry.Amount := -NewDtldVendLedgEntry.Amount;
          NewDtldVendLedgEntry."Amount (LCY)" := -NewDtldVendLedgEntry."Amount (LCY)";
          NewDtldVendLedgEntry.UpdateDebitCredit(Correction);
          NewDtldVendLedgEntry."Vendor Ledger Entry No." := NewEntryNo;
          NewDtldVendLedgEntry."User ID" := USERID;
          NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
          NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
          NewDtldVendLedgEntry.INSERT(TRUE);
        UNTIL DtldVendLedgEntry.NEXT = 0;

        ApplyVendLedgEntryByReversal(
          VendLedgEntry,NewVendLedgEntry,NewDtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);
        ApplyVendLedgEntryByReversal(
          NewVendLedgEntry,VendLedgEntry,DtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseBankAccLedgEntry@68(BankAccLedgEntry@1000 : Record 271;NewEntryNo@1001 : Integer;SourceCode@1005 : Code[10];VAR ReversalEntry@1003 : Record 179);
    VAR
      NewBankAccLedgEntry@1002 : Record 271;
      ReversedBankAccLedgEntry@1004 : Record 271;
    BEGIN
      WITH NewBankAccLedgEntry DO BEGIN
        NewBankAccLedgEntry := BankAccLedgEntry;
        Amount := -Amount;
        "Remaining Amount" := -"Remaining Amount";
        "Amount (LCY)" := -"Amount (LCY)";
        "Debit Amount" := -"Debit Amount";
        "Credit Amount" := -"Credit Amount";
        "Debit Amount (LCY)" := -"Debit Amount (LCY)";
        "Credit Amount (LCY)" := -"Credit Amount (LCY)";
        Positive := NOT Positive;
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(
          ReversalEntry."Entry Type"::"Bank Account",BankAccLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := BankAccLedgEntry."Entry No.";
        Reversed := TRUE;
        // Reversal of Reversal
        IF BankAccLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedBankAccLedgEntry.GET(BankAccLedgEntry."Reversed Entry No.");
          ReversedBankAccLedgEntry."Reversed by Entry No." := 0;
          ReversedBankAccLedgEntry.Reversed := FALSE;
          ReversedBankAccLedgEntry.MODIFY;
          BankAccLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := BankAccLedgEntry."Entry No.";
        END;
        BankAccLedgEntry."Reversed by Entry No." := "Entry No.";
        BankAccLedgEntry.Reversed := TRUE;
        BankAccLedgEntry.MODIFY;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReverseVAT@67(VAR VATEntry@1000 : Record 254;VAR TempReversedGLEntry@1005 : TEMPORARY Record 17;SourceCode@1003 : Code[10]);
    VAR
      NewVATEntry@1001 : Record 254;
      ReversedVATEntry@1002 : Record 254;
      GLEntryVATEntryLink@1004 : Record 253;
    BEGIN
      IF VATEntry.FINDSET THEN
        REPEAT
          IF VATEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          WITH NewVATEntry DO BEGIN
            NewVATEntry := VATEntry;
            Base := -Base;
            Amount := -Amount;
            "Unrealized Amount" := -"Unrealized Amount";
            "Unrealized Base" := -"Unrealized Base";
            "Remaining Unrealized Amount" := -"Remaining Unrealized Amount";
            "Remaining Unrealized Base" := -"Remaining Unrealized Base";
            "Additional-Currency Amount" := -"Additional-Currency Amount";
            "Additional-Currency Base" := -"Additional-Currency Base";
            "Add.-Currency Unrealized Amt." := -"Add.-Currency Unrealized Amt.";
            "Add.-Curr. Rem. Unreal. Amount" := -"Add.-Curr. Rem. Unreal. Amount";
            "Add.-Curr. Rem. Unreal. Base" := -"Add.-Curr. Rem. Unreal. Base";
            "VAT Difference" := -"VAT Difference";
            "Add.-Curr. VAT Difference" := -"Add.-Curr. VAT Difference";
            "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            "Source Code" := SourceCode;
            Positive := Amount > 0;
            "User ID" := USERID;
            "Entry No." := GenJnlPostLine.GetNextVATEntryNo;
            "Reversed Entry No." := VATEntry."Entry No.";
            Reversed := TRUE;
            // Reversal of Reversal
            IF VATEntry."Reversed Entry No." <> 0 THEN BEGIN
              ReversedVATEntry.GET(VATEntry."Reversed Entry No.");
              ReversedVATEntry."Reversed by Entry No." := 0;
              ReversedVATEntry.Reversed := FALSE;
              ReversedVATEntry.MODIFY;
              VATEntry."Reversed Entry No." := "Entry No.";
              "Reversed by Entry No." := VATEntry."Entry No.";
            END;
            VATEntry."Reversed by Entry No." := "Entry No.";
            VATEntry.Reversed := TRUE;
            VATEntry.MODIFY;
            INSERT;
            GLEntryVATEntryLink.SETRANGE("VAT Entry No.",VATEntry."Entry No.");
            IF GLEntryVATEntryLink.FINDSET THEN
              REPEAT
                TempReversedGLEntry.SETRANGE("Reversed Entry No.",GLEntryVATEntryLink."G/L Entry No.");
                IF TempReversedGLEntry.FINDFIRST THEN
                  GLEntryVATEntryLink.InsertLink(TempReversedGLEntry."Entry No.","Entry No.");
              UNTIL GLEntryVATEntryLink.NEXT = 0;
            GenJnlPostLine.IncrNextVATEntryNo;
          END;
        UNTIL VATEntry.NEXT = 0;
    END;

    PROCEDURE SetReversalDescription@74(EntryType@1000 : ' ,G/L Account,Customer,Vendor,Bank Account,Fixed Asset,Maintenance,VAT';EntryNo@1001 : Integer;VAR ReversalEntry@1002 : Record 179;VAR Description@1003 : Text[50]);
    BEGIN
      ReversalEntry.RESET;
      ReversalEntry.SETRANGE("Entry Type",EntryType);
      ReversalEntry.SETRANGE("Entry No.",EntryNo);
      IF ReversalEntry.FINDFIRST THEN
        Description := ReversalEntry.Description;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntryByReversal@75(CustLedgEntry@1000 : Record 21;CustLedgEntry2@1001 : Record 21;DtldCustLedgEntry2@1002 : Record 379;AppliedEntryNo@1005 : Integer;VAR NextDtldCustLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldCustLedgEntry@1003 : Record 379;
    BEGIN
      CustLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      CustLedgEntry."Closed by Entry No." := CustLedgEntry2."Entry No.";
      CustLedgEntry."Closed at Date" := CustLedgEntry2."Posting Date";
      CustLedgEntry."Closed by Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry."Closed by Amount (LCY)" := -CustLedgEntry2."Remaining Amt. (LCY)";
      CustLedgEntry."Closed by Currency Code" := CustLedgEntry2."Currency Code";
      CustLedgEntry."Closed by Currency Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry.Open := FALSE;
      CustLedgEntry.MODIFY;

      NewDtldCustLedgEntry := DtldCustLedgEntry2;
      NewDtldCustLedgEntry."Cust. Ledger Entry No." := CustLedgEntry."Entry No.";
      NewDtldCustLedgEntry."Entry Type" := NewDtldCustLedgEntry."Entry Type"::Application;
      NewDtldCustLedgEntry."Applied Cust. Ledger Entry No." := AppliedEntryNo;
      NewDtldCustLedgEntry."User ID" := USERID;
      NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
      NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
      NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
      NewDtldCustLedgEntry.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ApplyVendLedgEntryByReversal@76(VendLedgEntry@1000 : Record 25;VendLedgEntry2@1001 : Record 25;DtldVendLedgEntry2@1002 : Record 380;AppliedEntryNo@1005 : Integer;VAR NextDtldVendLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldVendLedgEntry@1003 : Record 380;
    BEGIN
      VendLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      VendLedgEntry."Closed by Entry No." := VendLedgEntry2."Entry No.";
      VendLedgEntry."Closed at Date" := VendLedgEntry2."Posting Date";
      VendLedgEntry."Closed by Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry."Closed by Amount (LCY)" := -VendLedgEntry2."Remaining Amt. (LCY)";
      VendLedgEntry."Closed by Currency Code" := VendLedgEntry2."Currency Code";
      VendLedgEntry."Closed by Currency Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry.Open := FALSE;
      VendLedgEntry.MODIFY;

      NewDtldVendLedgEntry := DtldVendLedgEntry2;
      NewDtldVendLedgEntry."Vendor Ledger Entry No." := VendLedgEntry."Entry No.";
      NewDtldVendLedgEntry."Entry Type" := NewDtldVendLedgEntry."Entry Type"::Application;
      NewDtldVendLedgEntry."Applied Vend. Ledger Entry No." := AppliedEntryNo;
      NewDtldVendLedgEntry."User ID" := USERID;
      NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
      NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
      NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
      NewDtldVendLedgEntry.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CheckDimComb@91(EntryNo@1001 : Integer;DimSetID@1002 : Integer;TableID1@1006 : Integer;AccNo1@1007 : Code[20];TableID2@1009 : Integer;AccNo2@1008 : Code[20];PostingDate@1101495000 : Date;RecordVar@1101495002 : Variant);
    VAR
      DimMgt@1010 : Codeunit 408;
      TableID@1003 : ARRAY [10] OF Integer;
      AccNo@1005 : ARRAY [10] OF Code[20];
    BEGIN
      IF NOT DimMgt.CheckDimIDComb(DimSetID) THEN
        ERROR(DimCombBlockedErr,EntryNo,DimMgt.GetDimCombErr);
      CLEAR(TableID);
      CLEAR(AccNo);
      TableID[1] := TableID1;
      AccNo[1] := AccNo1;
      TableID[2] := TableID2;
      AccNo[2] := AccNo2;
      //TDRANCS-1071> commented
      //IF NOT DimMgt.CheckDimValuePosting(TableID,AccNo,DimSetID) THEN
      IF NOT DimMgt.fn_CheckJnlLineDimValuePosting(TableID,AccNo,DimSetID,PostingDate) THEN
      //TDRANCS-1071<
        ERROR(DimMgt.GetDimValuePostingErr);

      //NC NOS-26 > SPA
      IF TableID1 = DATABASE::"G/L Account" THEN
        IF NOT DimMgt.fn_CheckRealCounterparty(DimSetID,AccNo1) THEN
          ERROR(DimMgt.GetDimValuePostingErr);
      //NC NOS-26 < SPA
    END;

    LOCAL PROCEDURE CopyCustLedgEntry@1(VAR CustLedgEntry@1000 : Record 21;VAR TempCustLedgEntry@1001 : TEMPORARY Record 21);
    BEGIN
      IF NOT CustLedgEntry.ISEMPTY THEN  // TDVYNCS-1722
        IF CustLedgEntry.FINDSET THEN
          REPEAT
            IF CustLedgEntry."Reversed by Entry No." <> 0 THEN
              ERROR(CannotReverseErr);
            TempCustLedgEntry := CustLedgEntry;
            TempCustLedgEntry.INSERT;
          UNTIL CustLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyVendLedgEntry@3(VAR VendLedgEntry@1000 : Record 25;VAR TempVendLedgEntry@1001 : TEMPORARY Record 25);
    BEGIN
      IF NOT VendLedgEntry.ISEMPTY THEN  // TDVYNCS-1722
        IF VendLedgEntry.FINDSET THEN
          REPEAT
            IF VendLedgEntry."Reversed by Entry No." <> 0 THEN
              ERROR(CannotReverseErr);
            TempVendLedgEntry := VendLedgEntry;
            TempVendLedgEntry.INSERT;
          UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyBankAccLedgEntry@4(VAR BankAccLedgEntry@1000 : Record 271;VAR TempBankAccLedgEntry@1001 : TEMPORARY Record 271);
    BEGIN
      IF BankAccLedgEntry.FINDSET THEN
        REPEAT
          IF BankAccLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          TempBankAccLedgEntry := BankAccLedgEntry;
          TempBankAccLedgEntry.INSERT;
        UNTIL BankAccLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyValueEntry@1210001(VAR ValueEntry@1170000000 : Record 5802;VAR TempValueEntry@1170000001 : TEMPORARY Record 5802);
    BEGIN
      IF ValueEntry.FIND('-') THEN
        REPEAT
          IF ValueEntry.Reversed THEN
            ERROR(CannotReverseErr);
          TempValueEntry := ValueEntry;
          TempValueEntry.INSERT;
        UNTIL ValueEntry.NEXT(1) = 0;
    END;

    LOCAL PROCEDURE CopyTaxDiffLedgEntry@1210002(VAR TaxDiffLedgEntry@1170000000 : Record 17306;VAR TempTaxDiffLedgEntry@1170000001 : TEMPORARY Record 17306);
    BEGIN
      IF TaxDiffLedgEntry.FINDSET THEN
        REPEAT
          IF TaxDiffLedgEntry.Reversed THEN
            ERROR(CannotReverseErr);
          TempTaxDiffLedgEntry := TaxDiffLedgEntry;
          TempTaxDiffLedgEntry.INSERT;
        UNTIL TaxDiffLedgEntry.NEXT(1) = 0;
    END;

    LOCAL PROCEDURE ReverseVATRU@1210000(VAR VATEntry@1000 : Record 254;ReversalEntry@1470001 : Record 179;VAR TempReversedGLEntry@1005 : TEMPORARY Record 17;SourceCode@1003 : Code[10]);
    VAR
      NewVATEntry@1001 : Record 254;
      ReversedVATEntry@1002 : Record 254;
      GLEntryVATEntryLink@1004 : Record 253;
      VATSettlementMgt@1470000 : Codeunit 12411;
      DtldCustLedgEntry@1210000 : Record 379;
      DtldCustLedgEntry2@1210001 : TEMPORARY Record 379;
      VATEntry2@1210002 : TEMPORARY Record 254;
      CustLedgEntry@1210003 : Record 21;
      SalesInvLine@1210004 : Record 113;
    BEGIN
      DtldCustLedgEntry2.RESET;
      DtldCustLedgEntry2.DELETEALL;
      VATEntry2.RESET;
      VATEntry2.DELETEALL;
      IF VATEntry.FINDLAST THEN
        REPEAT
          IF VATEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          WITH NewVATEntry DO BEGIN
            NewVATEntry := VATEntry;
            Base := -Base;
            Amount := -Amount;
            "Unrealized Amount" := -"Unrealized Amount";
            "Unrealized Base" := -"Unrealized Base";
            "Remaining Unrealized Amount" := -"Remaining Unrealized Amount";
            "Remaining Unrealized Base" := -"Remaining Unrealized Base";
            "Additional-Currency Amount" := -"Additional-Currency Amount";
            "Additional-Currency Base" := -"Additional-Currency Base";
            "Add.-Currency Unrealized Amt." := -"Add.-Currency Unrealized Amt.";
            "Add.-Curr. Rem. Unreal. Amount" := -"Add.-Curr. Rem. Unreal. Amount";
            "Add.-Curr. Rem. Unreal. Base" := -"Add.-Curr. Rem. Unreal. Base";
            "VAT Difference" := -"VAT Difference";
            "Add.-Curr. VAT Difference" := -"Add.-Curr. VAT Difference";
            "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            "Source Code" := SourceCode;
            Positive := Amount > 0;
            "User ID" := USERID;
            "Entry No." := GenJnlPostLine.GetNextVATEntryNo;
            "Reversed Entry No." := VATEntry."Entry No.";
            Reversed := TRUE;
            // Reversal of Reversal
            IF VATEntry."Reversed Entry No." <> 0 THEN BEGIN
              ReversedVATEntry.GET(VATEntry."Reversed Entry No.");
              ReversedVATEntry."Reversed by Entry No." := 0;
              ReversedVATEntry.Reversed := FALSE;
              ReversedVATEntry.MODIFY;
              VATEntry."Reversed Entry No." := "Entry No.";
              "Reversed by Entry No." := VATEntry."Entry No.";
            END;
            VATEntry."Reversed by Entry No." := "Entry No.";
            VATEntry.Reversed := TRUE;
            VATEntry.MODIFY;
            IF ReversalEntry."Corrected Period Date" <> 0D THEN BEGIN
              "Corrected Document Date" := ReversalEntry."Corrected Period Date";
              "Additional VAT Ledger Sheet" := TRUE;
              "Posting Date" := ReversalEntry."Posting Date";
            END;
            INSERT;
            GLEntryVATEntryLink.SETRANGE("VAT Entry No.",VATEntry."Entry No.");
            IF GLEntryVATEntryLink.FINDSET THEN
              REPEAT
                IF TempReversedGLEntry.GET(GLEntryVATEntryLink."G/L Entry No.") THEN
                  GLEntryVATEntryLink.InsertLink(TempReversedGLEntry."Entry No.","Entry No.");
              UNTIL GLEntryVATEntryLink.NEXT = 0;
            GenJnlPostLine.IncrNextVATEntryNo;
            IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
              GET(VATEntry."Unrealized VAT Entry No.");
              "Remaining Unrealized Amount" := "Remaining Unrealized Amount" + VATEntry.Amount;
              "Remaining Unrealized Base" := "Remaining Unrealized Base" + VATEntry.Base;
              "Add.-Curr. Rem. Unreal. Amount" := "Add.-Curr. Rem. Unreal. Amount" + VATEntry."Additional-Currency Amount";
              "Add.-Curr. Rem. Unreal. Base" := "Add.-Curr. Rem. Unreal. Base" + VATEntry."Additional-Currency Base";
              "VAT Settlement Part" := VATSettlementMgt.GetPart(VATEntry."Unrealized VAT Entry No.");
              MODIFY;
          END;
          END;
        UNTIL VATEntry.NEXT(-1) = 0;
    END;

    LOCAL PROCEDURE ReverseTaxDiffLedgEntries@1210003(VAR TmpTaxDiffLedgEntry@1470001 : Record 17306;VAR TaxDiffRegister@1470000 : Record 17302);
    VAR
      TaxDiffLedgEntry@1470003 : Record 17306;
      NewTaxDiffLedgEntry@1470002 : Record 17306;
    BEGIN
      WITH TaxDiffLedgEntry DO
        REPEAT
          GET(TmpTaxDiffLedgEntry."Entry No.");
          NewTaxDiffLedgEntry.RESET;
          IF NOT NewTaxDiffLedgEntry.FIND('+') THEN
            NewTaxDiffLedgEntry."Entry No." := 0;
          NewTaxDiffLedgEntry."Entry No." += 1;

          NewTaxDiffLedgEntry.TRANSFERFIELDS(TaxDiffLedgEntry,FALSE);
          ReverseDeprBonusRecover;

          Reversed := TRUE;
          "Reversed by Entry No." := NewTaxDiffLedgEntry."Entry No.";
          MODIFY;

          WITH TaxDiffRegister DO BEGIN
            IF "No." = 0 THEN BEGIN
              LOCKTABLE;
              IF FIND('+') THEN
                "No." := "No." + 1;
              INIT;
              "From Entry No." := NewTaxDiffLedgEntry."Entry No.";
              "Creation Date" := TODAY;
              "Journal Batch Name" := NewTaxDiffLedgEntry."Journal Batch Name";
              "User ID" := USERID;
              INSERT;
            END;
            "To Entry No." := NewTaxDiffLedgEntry."Entry No.";
            MODIFY;
          END;

          NewTaxDiffLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewTaxDiffLedgEntry."Amount (Base)" := -"Amount (Base)";
          NewTaxDiffLedgEntry."Amount (Tax)" := -"Amount (Tax)";
          NewTaxDiffLedgEntry.Difference := -Difference;
          NewTaxDiffLedgEntry."Tax Amount" := -"Tax Amount";
          NewTaxDiffLedgEntry."Asset Tax Amount" := -"Asset Tax Amount";
          NewTaxDiffLedgEntry."Liability Tax Amount" := -"Liability Tax Amount";
          NewTaxDiffLedgEntry."Disposal Tax Amount" := -"Disposal Tax Amount";
          IF NewTaxDiffLedgEntry."Partial Disposal" THEN BEGIN
            NewTaxDiffLedgEntry."DTA Ending Balance" := -"DTA Ending Balance";
            NewTaxDiffLedgEntry."DTL Ending Balance" := -"DTL Ending Balance";
          END ELSE BEGIN
            NewTaxDiffLedgEntry."DTA Starting Balance" := "DTA Ending Balance";
            NewTaxDiffLedgEntry."DTL Starting Balance" := "DTL Ending Balance";
            NewTaxDiffLedgEntry."DTA Ending Balance" := "DTA Starting Balance";
            NewTaxDiffLedgEntry."DTL Ending Balance" := "DTL Starting Balance";
          END;
          NewTaxDiffLedgEntry."YTD Amount (Base)" := -"YTD Amount (Base)";
          NewTaxDiffLedgEntry."YTD Amount (Tax)" := -"YTD Amount (Tax)";
          NewTaxDiffLedgEntry."YTD Difference" := -"YTD Difference";

          NewTaxDiffLedgEntry.Reversed := TRUE;
          NewTaxDiffLedgEntry."Reversed Entry No." := "Entry No.";
          NewTaxDiffLedgEntry.INSERT;
          TmpTaxDiffLedgEntry.DELETE;
        UNTIL TmpTaxDiffLedgEntry.NEXT(1) = 0;
    END;

    LOCAL PROCEDURE InsertReverseTaxEntry@1210004(VAR FAInsertLedgEntry@1470006 : Codeunit 5600;GLEntryNo@1470009 : Integer;NewGLEntryNo@1470005 : Integer;FAEntryType@1470004 : '  ,FA,Maintenance';FAEntryNo@1470003 : Integer;VAR NewFAEntryNo@1470002 : Integer;TransactionNo@1470001 : Integer;VAR ReversalEntry@1470000 : Record 179);
    VAR
      FALedgEntryLoc@1470007 : Record 5601;
      TaxRegSetup@1470008 : Record 17236;
    BEGIN
      TaxRegSetup.GET;
      WITH FALedgEntryLoc DO BEGIN
        SETCURRENTKEY("G/L Entry No.");
        SETRANGE("G/L Entry No.",GLEntryNo);
        IF FIND('-') THEN
          REPEAT
            IF ("Entry No." <> FAEntryNo) AND ("Depreciation Book Code" = TaxRegSetup."Tax Depreciation Book") THEN
              FAInsertLedgEntry.InsertReverseEntry(NewGLEntryNo,FAEntryType,"Entry No.",NewFAEntryNo,TransactionNo,ReversalEntry);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE PostVATSettlementReverse@1210005(GenJnlLine@1470000 : Record 81);
    VAR
      GLEntry@1470002 : Record 17;
      ReversalEntry@1470001 : TEMPORARY Record 179;
      UnrealizedVATEntry@1470003 : Record 254;
      SettledVATEntry@1470007 : Record 254;
      NextLineNo@1470004 : Integer;
      FirstEntryNo@1470005 : Integer;
      LastEntryNo@1470006 : Integer;
      RecordFound@1000 : Boolean;
    BEGIN
      GenJnlLine.TESTFIELD("Unrealized VAT Entry No.");

      UnrealizedVATEntry.GET(GenJnlLine."Unrealized VAT Entry No.");

      GLEntry.SETCURRENTKEY("Transaction No.");
      GLEntry.SETRANGE("Transaction No.",GenJnlLine."VAT Transaction No.");
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice,GLEntry."Document Type"::"Credit Memo");

      FirstEntryNo := -1;
      LastEntryNo := -1;

      SettledVATEntry.SETCURRENTKEY("Transaction No.");
      SettledVATEntry.SETRANGE("Transaction No.",GenJnlLine."VAT Transaction No.");
      IF SettledVATEntry.FIND('-') THEN
        REPEAT
          IF (SettledVATEntry.Base <> 0) AND (SettledVATEntry.Amount <> 0) THEN BEGIN
            IF GLEntry."Entry No." = 0 THEN
              RecordFound := GLEntry.FINDFIRST
            ELSE
              RecordFound := GLEntry.NEXT <> 0;

            IF RecordFound THEN
              IF (GLEntry.Amount = 0) AND (GLEntry."Additional-Currency Amount" = 0) THEN
                RecordFound := GLEntry.NEXT <> 0;

            IF RecordFound THEN
              IF SettledVATEntry."Entry No." = UnrealizedVATEntry."Entry No." THEN
                IF (GLEntry."Entry No." <> 0) AND (NOT GLEntry.Reversed) THEN
                  FirstEntryNo := GLEntry."Entry No.";

            IF (GLEntry.Amount <> 0) OR (GLEntry."Additional-Currency Amount" <> 0) THEN BEGIN
              RecordFound := GLEntry.NEXT <> 0;
              IF RecordFound THEN
                IF SettledVATEntry."Entry No." = UnrealizedVATEntry."Entry No." THEN
                  IF (GLEntry."Entry No." <> 0) AND (NOT GLEntry.Reversed) THEN
                    LastEntryNo := GLEntry."Entry No.";
            END;
          END;
        UNTIL SettledVATEntry.NEXT = 0;

      ReversalEntry."Corrected Period Date" := GenJnlLine."Corrected Document Date";
      ReversalEntry."Posting Date" := GenJnlLine."Posting Date";
      ReversalEntry.SetVATSettlReverseFilters(UnrealizedVATEntry."Entry No.",FirstEntryNo,LastEntryNo);
      Reverse(ReversalEntry,ReversalEntry);
    END;

    LOCAL PROCEDURE CopyFILedgEntry@1101495002(VAR FILedgEntry@1101495000 : Record 50106;VAR TempFILedgEntry@1101495001 : TEMPORARY Record 50106);
    BEGIN
      //NC MTF02 > II
      IF NOT FILedgEntry.ISEMPTY THEN  // TDVYNCS-1722
        IF FILedgEntry.FIND('-') THEN
          REPEAT
            IF FILedgEntry.Reversed THEN
              ERROR(CannotReverseErr);
            TempFILedgEntry := FILedgEntry;
            TempFILedgEntry.INSERT;
          UNTIL FILedgEntry.NEXT(1) = 0;
      //NC MTF02 < II
    END;

    LOCAL PROCEDURE CopyAllocationCostLedgEntry@1101495004(VAR AllocationCostLedgEntry@1101495000 : Record 50012;VAR TempAllocationCostLedgEntry@1101495001 : TEMPORARY Record 50012);
    BEGIN
      //NC NCS-1820 > DP
      IF AllocationCostLedgEntry.FIND('-') THEN
        REPEAT
          IF AllocationCostLedgEntry.Reversed THEN
            ERROR(CannotReverseErr);
          TempAllocationCostLedgEntry := AllocationCostLedgEntry;
          TempAllocationCostLedgEntry.INSERT;
        UNTIL AllocationCostLedgEntry.NEXT(1) = 0;
      //NC NCS-1820 < DP
    END;

    PROCEDURE ReverseFILedgEntry@1000000014(FILedgEntry@1000 : Record 50106;NewEntryNo@1001 : Integer;VAR ReversalEntry@1003 : Record 179;VAR FIRegister@1000000000 : Record 50109;GenJnlLine@1101495000 : Record 81;GLReg@1101495003 : Record 45);
    VAR
      NewFILedgEntry@1002 : Record 50106;
      ReversedFILedgEntry@1004 : Record 50106;
      FIValueEntry@1000000001 : Record 50107;
      NewFIValueEntry@1000000002 : Record 50107;
      ReversedFIValueEntry@1000000003 : Record 50107;
      NextFIValueEntryNo@1101495002 : Integer;
      FICalcAvgCost@1101495004 : Codeunit 50042;
    BEGIN
      //NC MTF02 < II
      WITH NewFILedgEntry DO BEGIN
        NewFILedgEntry := FILedgEntry;
        Quantity := -Quantity;
        Positive := NOT Positive;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Source Code" := GenJnlLine."Source Code";
        //"G/L Entry No." := NewEntryNo;
        IF ReversalEntry."Line No." = 0 THEN BEGIN
          NewFILedgEntry."Document No." := GenJnlLine."Document No.";
          NewFILedgEntry.Description := GenJnlLine.Description;
          "Journal Batch Name" := GenJnlLine."Journal Batch Name";
          "Posting Date" := GenJnlLine."Posting Date";
        END ELSE BEGIN
          "Journal Batch Name" := '';
          SetReversalDescription(
            ReversalEntry."Entry Type"::FI,FILedgEntry."Entry No.",ReversalEntry,Description);
        END;
        "Reversed Entry No." := FILedgEntry."Entry No.";
        Reversed := TRUE;
        IF FILedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedFILedgEntry.GET(FILedgEntry."Reversed Entry No.");
          ReversedFILedgEntry."Reversed by Entry No." := 0;
          ReversedFILedgEntry.Reversed := FALSE;
          ReversedFILedgEntry.MODIFY;
          FILedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := FILedgEntry."Entry No.";
        END;
        FILedgEntry."Reversed by Entry No." := "Entry No.";
        FILedgEntry.Reversed := TRUE;
        FILedgEntry.MODIFY;
        "Dimension Set ID" := FILedgEntry."Dimension Set ID"; // NC NOS-26 SPA
        INSERT;
      END;

      IF NextFIValueEntryNo = 0 THEN BEGIN
        FIValueEntry.RESET;
        FIValueEntry.LOCKTABLE;
        IF FIValueEntry.FIND('+') THEN
          NextFIValueEntryNo := FIValueEntry."Entry No.";
      END;
      NextFIValueEntryNo := NextFIValueEntryNo + 1;

      FIValueEntry.SETRANGE("FI Ledger Entry No.", FILedgEntry."Entry No.");
      IF FIValueEntry.FIND('-') THEN REPEAT
        NewFIValueEntry := FIValueEntry;
        IF ReversalEntry."Line No." = 0 THEN
          NewFIValueEntry."Document No." := GenJnlLine."Document No.";
        NewFIValueEntry."Entry No." := NextFIValueEntryNo;
        NewFIValueEntry."FI Ledger Entry No." := NewFILedgEntry."Entry No.";
        NewFIValueEntry."Sales Amount" := -NewFIValueEntry."Sales Amount";
        NewFIValueEntry."Sales Amount (CFI)" := -NewFIValueEntry."Sales Amount (CFI)";
        NewFIValueEntry."Cost Amount" := -NewFIValueEntry."Cost Amount";
        NewFIValueEntry."Cost Amount (CFI)" := -NewFIValueEntry."Cost Amount (CFI)";
      //  NewFIValueEntry."Valued Quantity" := -NewFIValueEntry."Valued Quantity";
        NewFIValueEntry."FI Ledger Entry Quantity" := -NewFIValueEntry."FI Ledger Entry Quantity";
        NewFIValueEntry.Amount := -NewFIValueEntry.Amount;
        NewFIValueEntry.Positive := NOT NewFIValueEntry.Positive;
        NewFIValueEntry."Global Dimension 1 Code" := FIValueEntry."Global Dimension 1 Code";
        NewFIValueEntry."Global Dimension 2 Code" := FIValueEntry."Global Dimension 2 Code";

        NewFIValueEntry."Reversed Entry No." := FIValueEntry."Entry No.";
        NewFIValueEntry.Reversed := TRUE;
        IF FIValueEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedFIValueEntry.GET(FIValueEntry."Reversed Entry No.");
          ReversedFIValueEntry."Reversed by Entry No." := 0;
          ReversedFIValueEntry.Reversed := FALSE;
          ReversedFIValueEntry.MODIFY;
          FIValueEntry."Reversed Entry No." := NewFIValueEntry."Entry No.";
          NewFIValueEntry."Reversed by Entry No." := FIValueEntry."Entry No.";
        END;
        FIValueEntry."Reversed by Entry No." := NewFIValueEntry."Entry No.";
        FIValueEntry.Reversed := TRUE;
        FIValueEntry.MODIFY;
        NewFIValueEntry.INSERT;

        NextFIValueEntryNo := NextFIValueEntryNo + 1;
      UNTIL FIValueEntry.NEXT = 0;

      WITH FIRegister DO BEGIN
        IF "No." = 0 THEN BEGIN
          LOCKTABLE;
          IF FIND('+') THEN
            "No." := "No." + 1;
          INIT;
          "From Entry No." := NewFILedgEntry."Entry No.";
          "Creation Date" := TODAY;
          "Journal Batch Name" := NewFILedgEntry."Journal Batch Name";
          "User ID" := USERID;
          "G/L Register No." := GLReg."No.";
          "Source Code" := GLReg."Source Code";
          INSERT;
        END;
        "To Entry No." := NewFILedgEntry."Entry No.";

        MODIFY;
      END;

      FICalcAvgCost.SetAvgCostAdjmt(FILedgEntry."FI No.", FILedgEntry."FI Portfolio",
                                    FILedgEntry."FI Posting Book", FILedgEntry."Posting Date");
      //NC MTF02 < II
    END;

    PROCEDURE ReverseAllocationCostGLEntry@1101495008(VAR TmpAllocationCostGLEntry@1101495001 : Record 50012;VAR AllocationRegister@1101495000 : Record 50029;GenJnlLine@1101495005 : Record 81;GLEntry@1101495006 : Record 17;GLReg@1101495007 : Record 45);
    VAR
      AllocationCostGLEntry@1101495002 : Record 50012;
      NewAllocationCostGLEntry@1101495003 : Record 50012;
      PrevTrnNo@1101495004 : Integer;
    BEGIN
      //NC NCS-1820 > DP
      PrevTrnNo := 0;
      WITH AllocationCostGLEntry DO
        REPEAT
          GET(TmpAllocationCostGLEntry."Entry No.");
          NewAllocationCostGLEntry.RESET;
          IF NOT NewAllocationCostGLEntry.FIND('+') THEN
            NewAllocationCostGLEntry."Entry No." := 0;
          NewAllocationCostGLEntry."Entry No." += 1;

          NewAllocationCostGLEntry.TRANSFERFIELDS(AllocationCostGLEntry,FALSE);

          AllocationCostGLEntry.Reversed := TRUE;
          AllocationCostGLEntry."Reversed by Entry No." := NewAllocationCostGLEntry."Entry No.";
          AllocationCostGLEntry.MODIFY;

          WITH AllocationRegister DO BEGIN
            IF "No." = 0 THEN BEGIN
              LOCKTABLE;
              IF FIND('+') THEN
                "No." := "No." + 1;
              INIT;
              "From Entry No." := NewAllocationCostGLEntry."Entry No.";
              "Creation Date" := CURRENTDATETIME;
              "Source Code" := GenJnlLine."Source Code";
              "Journal Batch Name" := NewAllocationCostGLEntry."Journal Batch Name";
              "User ID" := USERID;
              Canceled := TRUE;
              "G/L Register No." := GLReg."No.";
              INSERT;
            END;
            "To Entry No." := NewAllocationCostGLEntry."Entry No.";
            MODIFY;
          END;
          NewAllocationCostGLEntry.Amount := -Amount;
          NewAllocationCostGLEntry.Quantity := -Quantity;
          NewAllocationCostGLEntry."VAT Amount" := -"VAT Amount";
          NewAllocationCostGLEntry."Debit Amount" := -"Debit Amount";
          NewAllocationCostGLEntry."Credit Amount" := -"Credit Amount";
          NewAllocationCostGLEntry."Additional-Currency Amount" := -"Additional-Currency Amount";
          NewAllocationCostGLEntry."Add.-Currency Debit Amount" := -"Add.-Currency Debit Amount";
          NewAllocationCostGLEntry."Add.-Currency Credit Amount" := -"Add.-Currency Credit Amount";
          NewAllocationCostGLEntry."Original Amount" := -"Original Amount";
          NewAllocationCostGLEntry."Original Debit Amount" := -"Original Debit Amount";
          NewAllocationCostGLEntry."Original Credit Amount" := -"Original Credit Amount";
          IF (NewAllocationCostGLEntry."Original Amount" = 0) AND (NewAllocationCostGLEntry.Amount <> 0) THEN BEGIN
            NewAllocationCostGLEntry."Original Currency Code" := '';
          END;
          IF (AllocationCostGLEntry."Transaction No."<>PrevTrnNo) AND (PrevTrnNo<>0) THEN
            GenJnlPostLine.SetNextTransaction;
          PrevTrnNo := AllocationCostGLEntry."Transaction No.";
          NewAllocationCostGLEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewAllocationCostGLEntry."User ID" := USERID;
          NewAllocationCostGLEntry."Prior-Year Entry" := GLEntry."Posting Date" < GenJnlPostLine.GetFiscalYearStartDate;
          NewAllocationCostGLEntry."Journal Batch Name" := '';
          NewAllocationCostGLEntry.Reversed := TRUE;
          NewAllocationCostGLEntry."Reversed Entry No." := "Entry No.";
          NewAllocationCostGLEntry."Dimension Set ID" := AllocationCostGLEntry."Dimension Set ID"; // NC NOS-26 SPA
          NewAllocationCostGLEntry.INSERT;
          TmpAllocationCostGLEntry.DELETE;
        UNTIL TmpAllocationCostGLEntry.NEXT(1) = 0;
      //NC NCS-1820 < DP
    END;

    BEGIN
    {
      NC NOS-26 SPA Миграция кода из NAV5.0
    }
    END.
  }
}

