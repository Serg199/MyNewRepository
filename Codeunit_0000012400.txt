OBJECT Codeunit 12400 Localisation Management
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd,
                TableData 32=rimd,
                TableData 120=rimd,
                TableData 121=rimd,
                TableData 122=rimd,
                TableData 123=rimd,
                TableData 5601=rimd,
                TableData 5802=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1210003 : TextConst 'ENU=Zero;RUS=Ноль';
      Text001@1210002 : TextConst 'ENU="thousand1;thousand2;thousand5,million1;million2;million5,billion1;billion2;billion5,trillion1;trillion2;trillion5";RUS="тысяча;тысячи;тысяч,миллион;миллиона;миллионов,миллиард;миллиарда;миллиардов,триллион;триллиона;триллионов"';
      Text002@1210001 : TextConst 'ENU=*** *** ***;RUS=*** *** ***';
      MonthName01@1470000 : TextConst 'ENU=January;RUS=Январь';
      MonthName02@1470001 : TextConst 'ENU=February;RUS=Февраль';
      MonthName03@1470002 : TextConst 'ENU=March;RUS=Март';
      MonthName04@1470003 : TextConst 'ENU=April;RUS=Апрель';
      MonthName05@1470004 : TextConst 'ENU=May;RUS=Май';
      MonthName06@1470005 : TextConst 'ENU=June;RUS=Июнь';
      MonthName07@1470006 : TextConst 'ENU=July;RUS=Июль';
      MonthName08@1470007 : TextConst 'ENU=August;RUS=Август';
      MonthName09@1470008 : TextConst 'ENU=September;RUS=Сентябрь';
      MonthName10@1470009 : TextConst 'ENU=October;RUS=Октябрь';
      MonthName11@1470010 : TextConst 'ENU=November;RUS=Ноябрь';
      MonthName12@1470011 : TextConst 'ENU=December;RUS=Декабрь';
      ShouldBeLaterErr@1210004 : TextConst 'ENU=%1 should be later than %2.;RUS=%1 должно следовать за %2.';
      HundredsTxt@1210010 : TextConst 'ENU=hundred,two hundred,three  hundred,four  hundred,five  hundred,six  hundred,seven  hundred,eight  hundred,nine  hundred;RUS=сто,двести,триста,четыреста,пятьсот,шестьсот,семьсот,восемьсот,девятьсот';
      TeensTxt@1210009 : TextConst 'ENU=ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen;RUS=десять,одиннадцать,двенадцать,тринадцать,четырнадцать,пятнадцать,шестнадцать,семнадцать,восемнадцать,девятнадцать';
      DozensTxt@1210008 : TextConst 'ENU=twenty,thirty,forty,fifty,sixty,seventy,eighty,ninety;RUS=двадцать,тридцать,сорок,пятьдесят,шестьдесят,семьдесят,восемьдесят,девяносто';
      OneTxt@1210007 : TextConst 'ENU=one1,one2,one3;RUS=одна,один,одно';
      TwoTxt@1210006 : TextConst 'ENU=two1,two2;RUS=две,два';
      DigitsTxt@1210005 : TextConst 'ENU=three,four,five,six,seven,eight,nine;RUS=три,четыре,пять,шесть,семь,восемь,девять';
      YearsTxt@1210014 : TextConst 'ENU=" years ";RUS=" лет "';
      MonthsTxt@1210013 : TextConst 'ENU=" months ";RUS=" месяцев "';
      DaysTxt@1210012 : TextConst 'ENU=" days";RUS=" дней"';
      NoDataTxt@1210011 : TextConst 'ENU=" no data ";RUS=" нет данных "';
      UnitName1Txt@1210015 : TextConst 'ENU=rubl;RUS=рубль';
      UnitName2Txt@1210016 : TextConst 'ENU=rublya;RUS=рубля';
      UnitName5Txt@1210017 : TextConst 'ENU=rubley;RUS=рублей';
      CentName1Txt@1210018 : TextConst 'ENU=kopeika;RUS=копейка';
      CentName2Txt@1210019 : TextConst 'ENU=kopeiki;RUS=копейки';
      CentName5Txt@1210020 : TextConst 'ENU=kopeek;RUS=копеек';

    PROCEDURE Amount2Text@4(CurrencyCode@1210001 : Code[10];Amount@1210002 : Decimal) AmountText@1210000 : Text;
    VAR
      Currency@1210003 : Record 4;
      DecSym@1210006 : Decimal;
      DecSymFactor@1210007 : Decimal;
      DecSymFormat@1210009 : Text;
      DecSymsText@1210010 : Text;
      DecSymFactorText@1210011 : Text;
      InvoiceRoundingType@1210012 : Text;
    BEGIN
      WITH Currency DO BEGIN
        INIT;
        InvoiceRoundingType := SetRoundingPrecision(Currency);
        IF CurrencyCode = '' THEN BEGIN
          "Unit Kind" := "Unit Kind"::Male;
          "Unit Name 1" := UnitName1Txt;
          "Unit Name 2" := UnitName2Txt;
          "Unit Name 5" := UnitName5Txt;
          "Hundred Kind" := "Hundred Kind"::Female;
          "Hundred Name 1" := CentName1Txt;
          "Hundred Name 2" := CentName2Txt;
          "Hundred Name 5" := CentName5Txt;
        END ELSE
          GET(CurrencyCode);

        IF "Hundred Name 1" = '' THEN
          DecSymFormat := '/'
        ELSE
          DecSymFormat := '';

        DecSymFactor := ROUND(1 / "Invoice Rounding Precision",1,'<');
        DecSymFactorText := FORMAT(DecSymFactor,0,'<Integer>');
        DecSym :=
          ROUND(
            (ROUND(Amount,"Invoice Rounding Precision",InvoiceRoundingType) - ROUND(Amount,1,'<')) *
            DecSymFactor,1,'<');
        DecSymsText := FORMAT(DecSym,0,'<Integer>');
        IF STRLEN(DecSymFactorText) > STRLEN(DecSymsText) THEN
          DecSymsText := PADSTR('',STRLEN(DecSymFactorText) - STRLEN(DecSymsText) - 1,'0') + DecSymsText;
        IF DecSymFormat = '/' THEN
          AmountText :=
            Integer2Text(ROUND(Amount,"Invoice Rounding Precision",InvoiceRoundingType),
              "Unit Kind",'','','')
        ELSE
          AmountText :=
            Integer2Text(ROUND(Amount,"Invoice Rounding Precision",InvoiceRoundingType),
              "Unit Kind","Unit Name 1","Unit Name 2","Unit Name 5");
        IF DecSymFormat = '/' THEN BEGIN
          IF STRLEN(DELCHR(AmountText,'=',' ')) > 0 THEN
            AmountText := AmountText + ' ';
          AmountText := AmountText +
            DecSymsText + '/' + DecSymFactorText + ' ' + "Unit Name 2";
        END ELSE BEGIN
          IF STRLEN(DELCHR(AmountText,'=',' ')) > 0 THEN
            AmountText := AmountText + ' ';
          AmountText := AmountText + DecSymsText + ' ';
          CASE TRUE OF
            (DecSym = 0):
              AmountText := AmountText + "Hundred Name 5";
            (DecSym > 4) AND (DecSym < 21):
              AmountText := AmountText + "Hundred Name 5";
            ((DecSym MOD 10) = 1):
              AmountText := AmountText + "Hundred Name 1";
            ((DecSym MOD 10) > 1) AND ((DecSym MOD 10) < 5):
              AmountText := AmountText + "Hundred Name 2";
            ELSE
              AmountText := AmountText + "Hundred Name 5";
          END;
        END;
      END;
    END;

    PROCEDURE Amount2Text2@1210004(CurrencyCode@1210001 : Code[10];Amount@1210002 : Decimal;VAR WholeAmountText@1210000 : Text;VAR HundredAmount@1210005 : Decimal);
    VAR
      Currency@1210003 : Record 4;
      DecSymFactor@1210007 : Decimal;
      InvoiceRoundingType@1210012 : Text;
    BEGIN
      WITH Currency DO BEGIN
        INIT;
        InvoiceRoundingType := SetRoundingPrecision(Currency);
        IF CurrencyCode = '' THEN
          "Unit Kind" := "Unit Kind"::Male
        ELSE
          GET(CurrencyCode);

        DecSymFactor := ROUND(1 / "Invoice Rounding Precision",1,'<');
        HundredAmount :=
          ROUND(
            (ROUND(Amount,"Invoice Rounding Precision",InvoiceRoundingType) - ROUND(Amount,1,'<')) * DecSymFactor,1,'<');
        WholeAmountText :=
          Integer2Text(ROUND(Amount,"Invoice Rounding Precision",InvoiceRoundingType),
            "Unit Kind",'','','');
      END;
    END;

    PROCEDURE Integer2Text@7(IntegerValue@1210001 : Decimal;IntegerGender@1210002 : 'Femine,Men,Neutral';IntegerNameONE@1210003 : Text;IntegerNameTWO@1210004 : Text;IntegerNameFIVE@1210005 : Text) IntegerText@1210000 : Text;
    VAR
      DigInInteger@1210006 : Code[250];
      IndDigInInteger@1210007 : Integer;
      IndTriad@1210008 : Integer;
      DigInTriad@1210009 : ARRAY [3] OF Integer;
      IndDigInTriad@1210010 : Integer;
      TriadName@1210011 : Text;
      Phrase@1210012 : Text;
      Gender@1210013 : Integer;
      HasTriad@1210014 : Boolean;
    BEGIN
      IF ROUND(IntegerValue,1,'<') = 0 THEN BEGIN
        IntegerText := Text000;
        HasTriad := FALSE;
      END ELSE BEGIN
        IntegerText := '';
        TriadName := Text001;
        DigInInteger := FORMAT(IntegerValue,0,'<Integer>');
        IndTriad := (STRLEN(DigInInteger) + 2) DIV 3;
        IF IndTriad > (STRLEN(TriadName) - STRLEN(DELCHR(TriadName,'=',',')) + 2) THEN BEGIN
          IntegerText := Text002;
          EXIT;
        END;
        IndDigInInteger := 0;
        IndDigInTriad := (3 - (STRLEN(DigInInteger) MOD 3)) MOD 3;
        IF IndDigInTriad > 0 THEN BEGIN
          DigInTriad[1] := 0;
          IF IndDigInTriad > 1 THEN
            DigInTriad[2] := 0;
        END;
        REPEAT
          REPEAT
            IndDigInInteger := IndDigInInteger + 1;
            IndDigInTriad := IndDigInTriad + 1;
            IF NOT EVALUATE(DigInTriad[IndDigInTriad],COPYSTR(DigInInteger,IndDigInInteger,1)) THEN
              DigInTriad[IndDigInTriad] := 0;
          UNTIL IndDigInTriad = 3;
          IndTriad := IndTriad - 1;
          IndDigInTriad := 0;
          CASE IndTriad OF
            0:
              Gender := IntegerGender;
            1:
              Gender := IntegerGender::Femine;
            ELSE
              Gender := IntegerGender::Men;
          END;
          IF IndTriad = 0 THEN
            HasTriad :=
              Triad2Text(DigInTriad[1],DigInTriad[2],DigInTriad[3],
                IntegerText,Gender,IntegerNameONE,IntegerNameTWO,IntegerNameFIVE)
          ELSE BEGIN
            Phrase := CONVERTSTR(SELECTSTR(IndTriad,TriadName),';',',');
            HasTriad :=
              Triad2Text(DigInTriad[1],DigInTriad[2],DigInTriad[3],
                IntegerText,Gender,SELECTSTR(1,Phrase),SELECTSTR(2,Phrase),SELECTSTR(3,Phrase));
          END;
        UNTIL IndDigInInteger = STRLEN(DigInInteger);
      END;
      IF NOT HasTriad THEN
        IntegerText := IntegerText + ' ' + IntegerNameFIVE;
    END;

    PROCEDURE Date2Text@3(DateValue@1210001 : Date) DateText@1210000 : Text;
    BEGIN
      IF DateValue = 0D THEN
        EXIT('');
      IF GLOBALLANGUAGE <> 1049 THEN BEGIN
        DateText := FORMAT(DateValue,0,4);
        EXIT;
      END;
      DateText := FORMAT(DateValue,0,'<Day,2> ') + Month2Text(DateValue) + FORMAT(DateValue,0,' <Year4>');
    END;

    LOCAL PROCEDURE Triad2Text@6(C1@1210000 : Integer;C2@1210001 : Integer;C3@1210002 : Integer;VAR TargetText@1210003 : Text;TriadGender@1210004 : 'Femine,Men,Neutral';TriadNameONE@1210005 : Text;TriadNameTWO@1210006 : Text;TriadNameFIVE@1210007 : Text) : Boolean;
    VAR
      TriadWords@1210008 : Text;
      SymbSkip@1210009 : Text[1];
      NameSelect@1210010 : Integer;
    BEGIN
      IF (C1 + C2 + C3) = 0 THEN
        EXIT(FALSE);

      IF C1 > 0 THEN BEGIN
        TriadWords := SELECTSTR(C1,HundredsTxt);
        SymbSkip := ' ';
        NameSelect := 3;
      END ELSE BEGIN
        TriadWords := '';
        SymbSkip := '';
      END;
      IF C2 = 1 THEN BEGIN
        TriadWords := TriadWords + SymbSkip + SELECTSTR(C3 + 1,TeensTxt);
        NameSelect := 3;
      END ELSE BEGIN
        IF C2 > 0 THEN BEGIN
          TriadWords := TriadWords + SymbSkip + SELECTSTR(C2 - 1,DozensTxt);
          SymbSkip := ' ';
          NameSelect := 3;
        END;
        CASE TRUE OF
          (C3 = 1):
            BEGIN
              TriadWords := TriadWords + SymbSkip + SELECTSTR(TriadGender + 1,OneTxt);
              NameSelect := 1;
            END;
          (C3 = 2):
            BEGIN
              IF TriadGender = TriadGender::Neutral THEN
                NameSelect := TriadGender::Men
              ELSE
                NameSelect := TriadGender;
              TriadWords := TriadWords + SymbSkip + SELECTSTR(NameSelect + 1,TwoTxt);
              NameSelect := 2;
            END;
          (C3 > 0):
            BEGIN
              TriadWords := TriadWords + SymbSkip + SELECTSTR(C3 - 2,DigitsTxt);
              IF C3 < 5 THEN
                NameSelect := 2
              ELSE
                NameSelect := 3;
            END;
        END;
      END;
      IF STRLEN(DELCHR(TargetText,'=',' ')) = 0 THEN BEGIN
        TriadWords := Triad2UpperCase(TriadWords);
        SymbSkip := '';
      END ELSE
        SymbSkip := ' ';
      CASE NameSelect OF
        1:
          TriadWords := TriadWords + ' ' + TriadNameONE;
        2:
          TriadWords := TriadWords + ' ' + TriadNameTWO;
        ELSE
          TriadWords := TriadWords + ' ' + TriadNameFIVE;
      END;
      TargetText := TargetText + SymbSkip + TriadWords;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE Triad2UpperCase@1210006(TriadWords@1210004 : Text) : Text;
    VAR
      LowerCaseChars@1210003 : Text;
      UpperCaseChars@1210002 : Text;
      FirstSymb@1210001 : Text[1];
      PosSymb@1210000 : Integer;
    BEGIN
      LowerCaseChars := 'abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщьыъэюя';
      UpperCaseChars := 'ABCDEFGHIJKLMNOPQRSTUVWXYZАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ';
      FirstSymb := COPYSTR(TriadWords,1,1);
      PosSymb := STRPOS(LowerCaseChars,FirstSymb);
      IF PosSymb > 0 THEN
        EXIT(FORMAT(UpperCaseChars[PosSymb]) + COPYSTR(TriadWords,2));

      EXIT(UPPERCASE(COPYSTR(TriadWords,1,1)) + COPYSTR(TriadWords,2));
    END;

    PROCEDURE DigitalPartCode@1(SourceCode@1210001 : Code[20]) Result@1210000 : Code[20];
    VAR
      Index@1210002 : Integer;
      Symbol@1210003 : Code[1];
    BEGIN
      Index := STRLEN(SourceCode);
      WHILE Index > 0 DO BEGIN
        Symbol := COPYSTR(SourceCode,Index,1);
        IF STRPOS('0123456789',Symbol) = 0 THEN BEGIN
          Index := Index - 1;
          IF Index > 0 THEN
            SourceCode := COPYSTR(SourceCode,1,Index)
          ELSE
            SourceCode := '';
        END ELSE
          Index := 0;
      END;
      Index := STRLEN(SourceCode);
      Result := '';
      WHILE Index > 0 DO BEGIN
        Symbol := COPYSTR(SourceCode,Index,1);
        IF STRPOS('0123456789',Symbol) = 0 THEN
          Index := 0
        ELSE
          Result := Symbol + Result;
        Index := Index - 1;
      END;
      IF Result = '' THEN
        Result := SourceCode;
    END;

    PROCEDURE GetPeriodDate@1210015(Date1@1210000 : Date;Date2@1210001 : Date;Type@1210005 : Integer) : Text;
    VAR
      Delta@1210006 : Integer;
      DeltaDuration@1210010 : Duration;
    BEGIN
      IF (Date1 <> 0D) AND (Date2 <> 0D) THEN BEGIN
        DeltaDuration := Date2 - Date1;
        Delta := DeltaDuration;
        CASE Type OF
          0:
            EXIT(FORMAT(ROUND(Delta / 360,1,'<')) + GetPeriodText(1) +
              FORMAT(ROUND(Delta / 30 - ROUND(Delta / 360,1,'<') * 12,1,'<')) + GetPeriodText(2) +
              FORMAT(ROUND(Delta - ROUND(Delta / 360,1,'<') * 360 - ROUND(Delta / 30 - ROUND(Delta / 360,1,'<') * 12,1,'<') * 30)) +
              GetPeriodText(3));
          1:
            EXIT(FORMAT(ROUND(Delta / 360,0.01,'=')) + GetPeriodText(1));
          2:
            EXIT(FORMAT(ROUND(Delta / 30,1,'=')) + GetPeriodText(2));
          3:
            EXIT(FORMAT(ROUND(Delta,1,'=')) + GetPeriodText(3));
        END;
      END ELSE
        EXIT(NoDataTxt);
    END;

    PROCEDURE GetPeriodText@1210005(Type@1210000 : Integer) : Text;
    BEGIN
      CASE Type OF
        1:
          EXIT(YearsTxt);
        2:
          EXIT(MonthsTxt);
        3:
          EXIT(DaysTxt);
      END;
    END;

    PROCEDURE Month2Text@1210000(Date@1210001 : Date) DateText@1210000 : Text;
    BEGIN
      DateText := LOWERCASE(FORMAT(Date,0,'<Month Text>'));
      IF GLOBALLANGUAGE <> 1049 THEN
        EXIT;

      IF STRLEN(DateText) > 1 THEN
        CASE COPYSTR(DateText,STRLEN(DateText),1) OF
          'т':
            DateText := DateText + 'а';
          'ь','й':
            DateText := COPYSTR(DateText,1,STRLEN(DateText) - 1) + 'я';
        END;
    END;

    PROCEDURE GetMonthName@1470000(MonthsDate@1470000 : Date;Genitive@1210000 : Boolean) Name : Text;
    VAR
      MonthNo@1210001 : Integer;
    BEGIN
      IF NOT Genitive THEN
        Name := FORMAT(MonthsDate,0,'<Month Text>')
      ELSE BEGIN
        MonthNo := DATE2DMY(MonthsDate,2);
        CASE MonthNo OF
          1:
            Name := MonthName01;
          2:
            Name := MonthName02;
          3:
            Name := MonthName03;
          4:
            Name := MonthName04;
          5:
            Name := MonthName05;
          6:
            Name := MonthName06;
          7:
            Name := MonthName07;
          8:
            Name := MonthName08;
          9:
            Name := MonthName09;
          10:
            Name := MonthName10;
          11:
            Name := MonthName11;
          12:
            Name := MonthName12;
        END;
      END;
    END;

    PROCEDURE CheckPeriodDates@1210001(StartDate@1210000 : Date;EndDate@1210001 : Date) : Integer;
    BEGIN
      IF (StartDate <> 0D) AND (EndDate <> 0D) THEN BEGIN
        IF StartDate > EndDate THEN
          ERROR(ShouldBeLaterErr,EndDate,StartDate);
        EXIT(EndDate - StartDate + 1);
      END;
    END;

    PROCEDURE DateMustBeLater@1210002(FieldCaption@1210000 : Text;Date2@1210001 : Date);
    BEGIN
      ERROR(ShouldBeLaterErr,FieldCaption,Date2);
    END;

    LOCAL PROCEDURE SetRoundingPrecision@1210007(VAR Currency@1000 : Record 4) : Text;
    BEGIN
      WITH Currency DO BEGIN
        InitRoundingPrecision;
        IF NOT ("Invoice Rounding Precision" IN [0.1,0.01]) THEN
          "Invoice Rounding Precision" := 0.01;
        CASE "Invoice Rounding Type" OF
          "Invoice Rounding Type"::Up:
            EXIT('>');
          "Invoice Rounding Type"::Down:
            EXIT('<');
          ELSE
            EXIT('=');
        END;
      END;
    END;

    PROCEDURE FormatDate@1210003(DateToFormat@1210001 : Date) : Text;
    BEGIN
      EXIT(FORMAT(DateToFormat,0,'<Day,2>.<Month,2>.<Year4>'));
    END;

    BEGIN
    END.
  }
}

