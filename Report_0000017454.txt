OBJECT Report 17454 Spreadsheet Addition & Deduct
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Spreadsheet Addition & Deduct;
               RUS=Плате&жная ведомость - начисление и удержание];
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   ExcelMgt.GiveUserControl;
                 END;

  }
  DATASET
  {
    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               HumanResSetup.GET;

                               FillInElementsBuffer;
                               AdditionBuffer.RESET;
                               DeductionBuffer.RESET;
                               AdditionBuffer.SETCURRENTKEY(Description);
                               DeductionBuffer.SETCURRENTKEY(Description);
                               AdditionBufferCount := AdditionBuffer.COUNT;
                               DeductionBufferCount := DeductionBuffer.COUNT;

                               IF AdditionBufferCount >= DeductionBufferCount THEN
                                 SETRANGE(Number,1,AdditionBufferCount)
                               ELSE
                                 SETRANGE(Number,1,DeductionBufferCount);

                               ExcelMgt.CreateBook;
                               FillCell('A1','Организация: ' + LocalRepMngt.GetCompanyName,TRUE,0,0);
                               IF OrgUnitCode <> '' THEN BEGIN
                                 OrganizationalUnit.GET(OrgUnitCode);
                                 OrgUnitName := OrganizationalUnit.Name;
                               END;
                               FillCell('A2','Подразделение: ' + OrgUnitName,TRUE,0,0);
                               FillCell('A3','Сводная ведомость начислений и удержаний № ' + DocumentNo,TRUE,0,0);
                               FillCell('A4','за ' + PayrollPeriod.Name,TRUE,0,0);

                               ExcelMgt.SetColumnSize('A6',30);
                               ExcelMgt.SetColumnSize('B6',11);
                               ExcelMgt.SetColumnSize('C6',30);
                               ExcelMgt.SetColumnSize('D6',11);

                               FillCell('A6','Наименоване начислений',TRUE,1,0);
                               FillCell('B6','Сумма',TRUE,1,0);
                               FillCell('C6','Наименоване удержаний',TRUE,1,0);
                               FillCell('D6','Сумма',TRUE,1,0);
                               RowNo := 7;
                             END;

               OnAfterGetRecord=BEGIN
                                  AdditionDesc := '';
                                  DeductionDesc := '';
                                  AdditionAmount := 0;
                                  DeductionAmount := 0;
                                  IF Number = 1 THEN BEGIN
                                    IF AdditionBuffer.FINDSET THEN
                                      GetDataFromBuffer(AdditionBuffer,AdditionDesc,AdditionAmount);
                                    IF DeductionBuffer.FINDSET THEN
                                      GetDataFromBuffer(DeductionBuffer,DeductionDesc,DeductionAmount);
                                  END ELSE BEGIN
                                    IF AdditionBuffer.NEXT <> 0 THEN
                                      GetDataFromBuffer(AdditionBuffer,AdditionDesc,AdditionAmount);
                                    IF DeductionBuffer.NEXT <> 0 THEN
                                      GetDataFromBuffer(DeductionBuffer,DeductionDesc,DeductionAmount);
                                  END;

                                  DeductionAmount := -DeductionAmount;

                                  AdditionTotalAmount += AdditionAmount;
                                  DeductionTotalAmount += DeductionAmount;

                                  FillCell('A' + FORMAT(RowNo),AdditionDesc,FALSE,1,1);
                                  FillCell('B' + FORMAT(RowNo),FormatAmount(AdditionAmount),FALSE,1,1);
                                  FillCell('C' + FORMAT(RowNo),DeductionDesc,FALSE,1,1);
                                  FillCell('D' + FORMAT(RowNo),FormatAmount(DeductionAmount),FALSE,1,1);

                                  RowNo += 1;
                                END;

               OnPostDataItem=BEGIN
                                ExcelMgt.FormatCellBorder('A' + FORMAT(RowNo),0,1);
                                FillCell('C' + FORMAT(RowNo),'Сальдо начальное, руб.',TRUE,1,0);
                                FillCell('D' + FORMAT(RowNo),FormatAmount(StartingBalance),TRUE,1,1);
                                RowNo += 1;

                                FillCell('A' + FORMAT(RowNo),'Итого начислено, руб.',TRUE,1,0);
                                FillCell('B' + FORMAT(RowNo),FormatAmount(AdditionTotalAmount),TRUE,1,1);
                                FillCell('C' + FORMAT(RowNo),'Итого удержано, руб.',TRUE,1,0);
                                FillCell('D' + FORMAT(RowNo),FormatAmount(DeductionTotalAmount + StartingBalance),TRUE,1,1);
                                RowNo += 1;

                                FillCell('A' + FORMAT(RowNo),'К выдаче, руб.',TRUE,1,0);
                                FillCell('B' + FORMAT(RowNo),
                                  FormatAmount(AdditionTotalAmount - DeductionTotalAmount - StartingBalance - EndingBalance),TRUE,1,1);
                                ExcelMgt.FormatCellBorder('D' + FORMAT(RowNo),1,1);
                                RowNo += 1;

                                FillCell('A' + FORMAT(RowNo),'Сальдо конечное, руб.',TRUE,1,0);
                                FillCell('B' + FORMAT(RowNo),FormatAmount(EndingBalance),TRUE,1,1);
                                ExcelMgt.FormatCellOutsideBorders(STRSUBSTNO('C%1:D%1',RowNo),1);
                              END;
                               }

    { 1655;    ;DataItem;OtherIncome         ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               OtherIncomeBuffer.RESET;
                               OtherIncomeBuffer.SETCURRENTKEY(Description);
                               SETRANGE(Number,1,OtherIncomeBuffer.COUNT);

                               IF OtherIncomeBuffer.COUNT >= 1 THEN BEGIN
                                 RowNo += 1;
                                 FillCell('A' + FORMAT(RowNo),'Прочие доходы',TRUE,0,0);
                                 ExcelMgt.FormatCellBorder('A' + FORMAT(RowNo),0,1);
                                 ExcelMgt.FormatCellBorder('B' + FORMAT(RowNo),1,1);
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    OtherIncomeBuffer.FINDSET
                                  ELSE
                                    OtherIncomeBuffer.NEXT;

                                  RowNo += 1;

                                  FillCell('A' + FORMAT(RowNo),OtherIncomeBuffer.Description,FALSE,1,1);
                                  FillCell('B' + FORMAT(RowNo),FormatAmount(OtherIncomeBuffer."Amount 1"),FALSE,1,1);
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   PeriodCode := PayrollPeriod.PeriodByDate(WORKDATE);
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры] }

      { 1210000;2;Field     ;
                  CaptionML=[ENU=Data Source;
                             RUS=Источник данных];
                  OptionCaptionML=[ENU=Posted Entries,Payroll Documents;
                                   RUS=Учтенные операции,Зарплатные документы];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DataSource }

      { 1210006;2;Field     ;
                  CaptionML=[ENU=Pay Period;
                             RUS=Платежный период];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PeriodCode;
                  TableRelation="Payroll Period";
                  OnValidate=BEGIN
                               PeriodCodeOnAfterValidate;
                             END;
                              }

      { 1210004;2;Field     ;
                  CaptionML=[ENU=Org. Unit Code;
                             RUS=Код подразделения];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=OrgUnitCode;
                  TableRelation="Organizational Unit" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      OrganizationalUnit@1210025 : Record 12422;
      PayrollDocLine@1210007 : Record 17415;
      PayrollLedgEntry@1210021 : Record 17418;
      HumanResSetup@1210009 : Record 5218;
      AdditionBuffer@1210010 : TEMPORARY Record 17454;
      DeductionBuffer@1210012 : TEMPORARY Record 17454;
      OtherIncomeBuffer@1210031 : TEMPORARY Record 17454;
      PayrollPeriod@1210000 : Record 17426;
      LocalRepMngt@1210024 : Codeunit 12401;
      ExcelMgt@1210022 : Codeunit 12416;
      PeriodCode@1210033 : Code[10];
      StartingBalance@1210002 : Decimal;
      EndingBalance@1210003 : Decimal;
      AdditionAmount@1210017 : Decimal;
      DeductionAmount@1210016 : Decimal;
      AdditionTotalAmount@1210019 : Decimal;
      DeductionTotalAmount@1210018 : Decimal;
      AdditionBufferCount@1210011 : Integer;
      DeductionBufferCount@1210013 : Integer;
      RowNo@1210030 : Integer;
      OrgUnitCode@1210004 : Code[20];
      DocumentNo@1210008 : Code[20];
      AdditionDesc@1210014 : Text[50];
      DeductionDesc@1210015 : Text[50];
      OrgUnitName@1210023 : Text[50];
      DataSource@1210020 : 'Posted Entries,Payroll Documents';

    PROCEDURE FillInElementsBuffer@1210002();
    VAR
      PayrollElement@1210002 : Record 17400;
    BEGIN
      CASE DataSource OF
        DataSource::"Payroll Documents":
          BEGIN
            PayrollDocLine.RESET;
            PayrollDocLine.SETRANGE("Period Code",PeriodCode);
            PayrollDocLine.SETFILTER("Payroll Amount",'<>0');
            IF OrgUnitCode <> '' THEN
              PayrollDocLine.SETRANGE("Org. Unit Code",OrgUnitCode);
            IF PayrollDocLine.FINDSET THEN
              REPEAT
                PayrollElement.GET(PayrollDocLine."Element Code");
                IF PayrollDocLine."Print Priority" = 74 THEN // Other income
                  UpdateBuffer(OtherIncomeBuffer,PayrollElement,PayrollDocLine."Payroll Amount")
                ELSE
                  IF PayrollDocLine."Payroll Amount" > 0 THEN
                    UpdateBuffer(AdditionBuffer,PayrollElement,PayrollDocLine."Payroll Amount")
                  ELSE
                    UpdateBuffer(DeductionBuffer,PayrollElement,PayrollDocLine."Payroll Amount");

              UNTIL PayrollDocLine.NEXT = 0;
          END;
        DataSource::"Posted Entries":
          BEGIN
            PayrollLedgEntry.RESET;
            PayrollLedgEntry.SETRANGE("Period Code",PeriodCode);
            IF OrgUnitCode <> '' THEN
              PayrollLedgEntry.SETRANGE("Org. Unit Code",OrgUnitCode);
            IF PayrollLedgEntry.FINDSET THEN
              REPEAT
                PayrollElement.GET(PayrollLedgEntry."Element Code");
                IF PayrollLedgEntry."Print Priority" = 74 THEN  // Other income
                  UpdateBuffer(OtherIncomeBuffer,PayrollElement,PayrollLedgEntry."Payroll Amount")
                ELSE
                  IF PayrollLedgEntry."Payroll Amount" > 0 THEN
                    UpdateBuffer(AdditionBuffer,PayrollElement,PayrollLedgEntry."Payroll Amount")
                  ELSE
                    UpdateBuffer(DeductionBuffer,PayrollElement,PayrollLedgEntry."Payroll Amount");
              UNTIL PayrollLedgEntry.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE UpdateBuffer@1210005(VAR Buffer@1210000 : Record 17454;PayrollElement@1210003 : Record 17400;Amount@1210002 : Decimal);
    VAR
      EntryNo@1210001 : Integer;
    BEGIN
      Buffer.RESET;
      IF Buffer.FINDLAST THEN;
      EntryNo := Buffer."Entry No." + 1;
      Buffer.SETRANGE("Element Code",PayrollElement.Code);
      IF Buffer.FINDFIRST THEN BEGIN
        Buffer."Amount 1" += Amount;
        Buffer.MODIFY;
      END ELSE BEGIN
        Buffer."Entry No." := EntryNo;
        Buffer."Element Code" := PayrollElement.Code;
        Buffer.Description := PayrollElement.Description;
        Buffer."Amount 1" := Amount;
        Buffer.INSERT;
      END;
    END;

    PROCEDURE CalcAmount@1210000(ElementCode@1210000 : Code[20]) : Decimal;
    BEGIN
      CASE DataSource OF
        DataSource::"Payroll Documents":
          BEGIN
            PayrollDocLine.RESET;
            PayrollDocLine.SETRANGE("Element Code",ElementCode);
            IF OrgUnitCode <> '' THEN
              PayrollDocLine.SETRANGE("Org. Unit Code",OrgUnitCode);
            PayrollDocLine.SETRANGE("Period Code",PeriodCode);
            PayrollDocLine.CALCSUMS("Payroll Amount");
            EXIT(PayrollDocLine."Payroll Amount");
          END;
        DataSource::"Posted Entries":
          BEGIN
            PayrollLedgEntry.RESET;
            PayrollLedgEntry.SETCURRENTKEY(
              "Org. Unit Code","Element Type","Element Code","Posting Date","Period Code");
            PayrollLedgEntry.SETRANGE("Element Code",ElementCode);
            IF OrgUnitCode <> '' THEN
              PayrollLedgEntry.SETRANGE("Org. Unit Code",OrgUnitCode);
            PayrollLedgEntry.SETRANGE("Period Code",PeriodCode);
            PayrollLedgEntry.CALCSUMS("Payroll Amount");
            EXIT(PayrollLedgEntry."Payroll Amount");
          END;
      END;
    END;

    PROCEDURE GetDataFromBuffer@1210004(Buffer@1210000 : Record 17454;VAR Description@1210001 : Text[50];VAR Amount@1210002 : Decimal);
    BEGIN
      Description := Buffer.Description;
      Amount := Buffer."Amount 1";
    END;

    PROCEDURE FormatAmount@1210031(Amount@1210000 : Decimal) : Text[50];
    BEGIN
      IF Amount = 0 THEN
        EXIT('');

      EXIT(FORMAT(Amount,0,'<Precision,2:2><Standard Format,1>'));
    END;

    PROCEDURE FillCell@1210008(CellName@1210000 : Text[30];CellValue@1210001 : Text[250];Bold@1210003 : Boolean;Borders@1210002 : 'None,Thin,Medium';CellFormat@1210004 : 'Text,Decimal');
    BEGIN
      ExcelMgt.FillCell(CellName,CellValue);
      CASE Borders OF
        Borders::Thin:
          ExcelMgt.FormatCellOutsideBorders(CellName,1);
        Borders::Medium:
          ExcelMgt.FormatCellOutsideBorders(CellName,2);
      END;
      IF Bold THEN
        ExcelMgt.FormatCell_Bold(CellName,TRUE);

      IF CellFormat = CellFormat::Decimal THEN
        ExcelMgt.SetCellNumberFormat(CellName,'0,00');
    END;

    LOCAL PROCEDURE PeriodCodeOnAfterValidate@19067385();
    BEGIN
      PayrollPeriod.GET(PeriodCode);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

