OBJECT Table 14964 Payroll Analysis Column
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payroll Analysis Column;
               RUS=Столбцы анализа зарплаты];
  }
  FIELDS
  {
    { 1   ;   ;Analysis Column Template;Code10    ;TableRelation="Payroll Analysis Column Tmpl.";
                                                   CaptionML=[ENU=Analysis Column Template;
                                                              RUS=Шаблон столбца анализа] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 3   ;   ;Column No.          ;Code10        ;CaptionML=[ENU=Column No.;
                                                              RUS=Номер столбца] }
    { 4   ;   ;Column Header       ;Text30        ;CaptionML=[ENU=Column Header;
                                                              RUS=Заголовок столбца] }
    { 5   ;   ;Column Type         ;Option        ;InitValue=Net Change;
                                                   CaptionML=[ENU=Column Type;
                                                              RUS=Тип столбца];
                                                   OptionCaptionML=[ENU=Formula,Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Payroll Year,Entire Payroll Year;
                                                                    RUS=Формула,Оборот,Сальдо на дату,Начальное сальдо,С начала года,Остаток фин. года,Весь фин. год];
                                                   OptionString=Formula,Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Payroll Year,Entire Payroll Year }
    { 6   ;   ;Amount Type         ;Option        ;CaptionML=[ENU=Amount Type;
                                                              RUS=Тип суммы];
                                                   OptionCaptionML=[ENU=Payroll Amount,Taxable Amount,Quantity,Payment Days,Number of Employees;
                                                                    RUS=Сумма зарплаты,Налогооблагаемая сумма,Количество,Оплачиваемые дни,Число сотрудников];
                                                   OptionString=Payroll Amount,Taxable Amount,Quantity,Payment Days,Number of Employees }
    { 8   ;   ;Formula             ;Code80        ;CaptionML=[ENU=Formula;
                                                              RUS=Формула] }
    { 9   ;   ;Comparison Date Formula;DateFormula;OnValidate=BEGIN
                                                                IF FORMAT("Comparison Date Formula") <> '' THEN
                                                                  VALIDATE("Comparison Period Formula",'');
                                                              END;

                                                   CaptionML=[ENU=Comparison Date Formula;
                                                              RUS=Формула даты для сравнения] }
    { 10  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=[ENU=Show Opposite Sign;
                                                              RUS=Показать с против. знаком] }
    { 11  ;   ;Show                ;Option        ;InitValue=Always;
                                                   CaptionML=[ENU=Show;
                                                              RUS=Показать];
                                                   OptionCaptionML=[ENU=Always,Never,When Positive,When Negative;
                                                                    RUS=Всегда,Никогда,Когда Положительно,Когда Отрицательно];
                                                   OptionString=Always,Never,When Positive,When Negative;
                                                   NotBlank=Yes }
    { 12  ;   ;Rounding Factor     ;Option        ;CaptionML=[ENU=Rounding Factor;
                                                              RUS=Коэфф. округления];
                                                   OptionCaptionML=[ENU=None,1,1000,1000000;
                                                                    RUS=Нет,1,1000,1000000];
                                                   OptionString=None,1,1000,1000000 }
    { 13  ;   ;Comparison Period Formula;Code20   ;CaptionML=[ENU=Comparison Period Formula;
                                                              RUS=Формула периода сравнения] }
  }
  KEYS
  {
    {    ;Analysis Column Template,Line No.       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210004 : TextConst 'ENU=%1 is not a valid Period Formula;RUS=%1 не является допустимой формулой периода';
      Text002@1210003 : TextConst '@@@=Period;ENU=P;RUS=P';
      Text003@1210002 : TextConst '@@@=Fiscal Year;ENU=FY;RUS=ФГ';
      Text004@1210001 : TextConst '@@@=Current Period;ENU=CP;RUS=CP';
      Text005@1210000 : TextConst '@@@=Last Period;ENU=LP;RUS=LP';

    PROCEDURE ParsePeriodFormula@26(Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : ' ,Period,Fiscal Year,Fiscal Halfyear,Fiscal Quarter';VAR RangeFromType@1009 : 'Int,CP,LP';VAR RangeToType@1008 : 'Int,CP,LP';VAR RangeFromInt@1003 : Integer;VAR RangeToInt@1000 : Integer);
    VAR
      OriginalFormula@1004 : Code[20];
    BEGIN
      // <PeriodFormula> ::= <signed integer> <formula> | blank
      // <signed integer> ::= <sign> <positive integer> | blank
      // <sign> ::= + | - | blank
      // <positive integer> ::= <digit 1-9> <digits>
      // <digit 1-9> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
      // <digits> ::= 0 <digits> | <digit 1-9> <digits> | blank
      // <formula> ::= P | FY <range> | FH <range> | FQ <range>
      // <range> ::= blank | [<range2>]
      // <range2> ::= <index> .. <index> | <index>
      // <index> ::= <positive integer> | CP | LP

      OriginalFormula := Formula;
      Formula := DELCHR(Formula);

      IF NOT ParseFormula(Formula,Steps,Type) THEN
        ERROR(Text001,OriginalFormula);

      IF Type = Type::"Fiscal Year" THEN
        IF NOT ParseRange(Formula,RangeFromType,RangeFromInt,RangeToType,RangeToInt) THEN
          ERROR(Text001,OriginalFormula);

      IF Formula <> '' THEN
        ERROR(Text001,OriginalFormula);
    END;

    LOCAL PROCEDURE ParseFormula@5(VAR Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : ' ,Period,Fiscal Year,Fiscal Halfyear,Fiscal Quarter') : Boolean;
    BEGIN
      Steps := 0;
      Type := Type::" ";

      IF Formula = '' THEN
        EXIT(TRUE);

      IF NOT ParseSignedInteger(Formula,Steps) THEN
        EXIT(FALSE);

      IF Formula = '' THEN
        EXIT(FALSE);

      IF NOT ParseType(Formula,Type) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseSignedInteger@1(VAR Formula@1000 : Code[20];VAR Int@1001 : Integer) : Boolean;
    BEGIN
      Int := 0;

      CASE COPYSTR(Formula,1,1) OF
        '-':
          BEGIN
            Formula := COPYSTR(Formula,2);
            IF NOT ParseInt(Formula,Int,FALSE) THEN
              EXIT(FALSE);
            Int := -Int;
          END;
        '+':
          BEGIN
            Formula := COPYSTR(Formula,2);
            IF NOT ParseInt(Formula,Int,FALSE) THEN
              EXIT(FALSE);
          END;
        ELSE
          IF NOT ParseInt(Formula,Int,TRUE) THEN
            EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseInt@2(VAR Formula@1001 : Code[20];VAR Int@1000 : Integer;AllowNotInt@1003 : Boolean) : Boolean;
    VAR
      IntegerStr@1002 : Code[20];
    BEGIN
      IF COPYSTR(Formula,1,1) IN ['1'..'9'] THEN
        REPEAT
          IntegerStr := IntegerStr + COPYSTR(Formula,1,1);
          Formula := COPYSTR(Formula,2);
          IF Formula = '' THEN
            EXIT(FALSE);
        UNTIL NOT (COPYSTR(Formula,1,1) IN ['0'..'9'])
      ELSE
        EXIT(AllowNotInt);
      EVALUATE(Int,IntegerStr);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseType@3(VAR Formula@1001 : Code[20];VAR Type@1000 : ' ,Period,Fiscal Year') : Boolean;
    BEGIN
      CASE ReadToken(Formula) OF
        Text002:
          Type := Type::Period;
        Text003:
          Type := Type::"Fiscal Year";
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseRange@6(VAR Formula@1002 : Code[20];VAR FromType@1001 : 'Int,CP,LP';VAR FromInt@1004 : Integer;VAR ToType@1006 : 'Int,CP,LP';VAR ToInt@1005 : Integer) : Boolean;
    BEGIN
      FromType := FromType::CP;
      ToType := ToType::CP;

      IF Formula = '' THEN
        EXIT(TRUE);

      IF NOT ParseToken(Formula,'[') THEN
        EXIT(FALSE);

      IF NOT ParseIndex(Formula,FromType,FromInt) THEN
        EXIT(FALSE);
      IF Formula = '' THEN
        EXIT(FALSE);

      IF COPYSTR(Formula,1,1) = '.' THEN BEGIN
        IF NOT ParseToken(Formula,'..') THEN
          EXIT(FALSE);
        IF NOT ParseIndex(Formula,ToType,ToInt) THEN
          EXIT(FALSE);
      END ELSE BEGIN
        ToType := FromType;
        ToInt := FromInt;
      END;

      IF NOT ParseToken(Formula,']') THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseIndex@11(VAR Formula@1002 : Code[20];VAR IndexType@1001 : 'Int,CP,LP';VAR Index@1004 : Integer) : Boolean;
    BEGIN
      IF Formula = '' THEN
        EXIT(FALSE);

      IF ParseInt(Formula,Index,FALSE) THEN
        IndexType := IndexType::Int
      ELSE
        CASE ReadToken(Formula) OF
          Text004:
            IndexType := IndexType::CP;
          Text005:
            IndexType := IndexType::LP;
          ELSE
            EXIT(FALSE);
        END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseToken@13(VAR Formula@1000 : Code[20];Token@1001 : Code[20]) : Boolean;
    BEGIN
      IF COPYSTR(Formula,1,STRLEN(Token)) <> Token THEN
        EXIT(FALSE);
      Formula := COPYSTR(Formula,STRLEN(Token) + 1);
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE ReadToken@7(VAR Formula@1000 : Code[20]) : Code[20];
    VAR
      Token@1001 : Code[20];
      p@1002 : Integer;
    BEGIN
      FOR p := 1 TO STRLEN(Formula) DO BEGIN
        IF COPYSTR(Formula,p,1) IN ['[',']','.'] THEN BEGIN
          Formula := COPYSTR(Formula,STRLEN(Token) + 1);
          EXIT(Token);
        END;
        Token := Token + COPYSTR(Formula,p,1);
      END;

      Formula := '';
      EXIT(Token);
    END;

    PROCEDURE GetRecDescription@1210000() : Text[250];
    BEGIN
      EXIT(
        STRSUBSTNO('%1 %2=''%3'', %4=''%5''',
          TABLECAPTION,
          FIELDCAPTION("Analysis Column Template"),"Analysis Column Template",
          FIELDCAPTION("Line No."),"Line No."));
    END;

    BEGIN
    END.
  }
}

