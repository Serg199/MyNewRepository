OBJECT Page 14965 Payroll Analysis Report
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payroll Analysis Report;
               RUS=Аналитический отчет по зарплате];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table14962;
    DataCaptionExpr=GetCaption;
    PageType=Card;
    OnOpenPage=VAR
                 PayrollAnalysisLineTemplate@1001 : Record 14961;
               BEGIN
                 IF (NewCurrentReportName <> '') AND (NewCurrentReportName <> CurrentReportName) THEN BEGIN
                   CurrentReportName := NewCurrentReportName;
                   PayrollAnalysisReportMgt.CheckReportName(CurrentReportName);
                   ValidateReportName;
                   PayrollAnalysisReportMgt.SetAnalysisLineTemplName(CurrentLineTemplate,Rec);
                   ValidateAnalysisTemplateName;
                 END;

                 PayrollAnalysisReportMgt.OpenAnalysisLines(CurrentLineTemplate,Rec);
                 PayrollAnalysisReportMgt.OpenColumns(CurrentColumnTemplate,Rec,PayrollAnalysisColumn);

                 PayrollAnalysisReportMgt.CopyColumnsToTemp(Rec,CurrentColumnTemplate,PayrollAnalysisColumn);

                 GLSetup.GET;

                 IF PayrollAnalysisLineTemplate.GET(CurrentLineTemplate) THEN
                   IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" <> '' THEN
                     PayrollAnalysisView.GET(PayrollAnalysisLineTemplate."Payroll Analysis View Code")
                   ELSE BEGIN
                     CLEAR(PayrollAnalysisView);
                     PayrollAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
                     PayrollAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
                   END;

                 FindPeriod('');

                 NoOfColumns := 7;
                 Direction := Direction::Forward;

                 ClearPoints;
                 SetPointsAnalysisColumn;
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 13      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Actions;
                                 RUS=&Действия];
                      Image=Action }
      { 17      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Set Up &Lines;
                                 RUS=Настроить &строки];
                      ApplicationArea=#Basic,#Suite;
                      Image=SetupLines;
                      OnAction=BEGIN
                                 PayrollAnalysisReportMgt.OpenAnalysisLinesForm(Rec,CurrentLineTemplate);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 18      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Set Up &Columns;
                                 RUS=Настроить &столбцы];
                      ApplicationArea=#Basic,#Suite;
                      Image=SetupColumns;
                      OnAction=BEGIN
                                 PayrollAnalysisReportMgt.OpenAnalysisColumnsForm(Rec,CurrentColumnTemplate);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 19      ;2   ;Separator  }
      { 20      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Export to Excel;
                                 RUS=Экспорт в Excel];
                      ApplicationArea=#Basic,#Suite;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportPayrAnRepToExcel@1000 : Report 14964;
                               BEGIN
                                 ExportPayrAnRepToExcel.SetOptions(Rec,CurrentColumnTemplate,CurrentLineTemplate);
                                 ExportPayrAnRepToExcel.RUN;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;Action    ;
                      CaptionML=[ENU=&Show Matrix;
                                 RUS=&Показать];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SetFilters;
                                 CLEAR(MatrixColumnCaptions);
                                 FillMatrixColumns;
                                 CLEAR(PayrollAnalysisMatrix);
                                 PayrollAnalysisMatrix.Load(PayrollAnalysisColumn,MatrixColumnCaptions,ShowError,FirstLineNo,LastLineNo);
                                 PayrollAnalysisMatrix.SETTABLEVIEW(PayrollAnalysisLine);
                                 PayrollAnalysisMatrix.RUNMODAL;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 RUS=Пред. набор];
                      ToolTipML=[ENU=Previous Set;
                                 RUS=Пред. набор];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Direction := Direction::Backward;
                                 SetPointsAnalysisColumn;
                               END;
                                }
      { 7       ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 RUS=След. набор];
                      ToolTipML=[ENU=Next Set;
                                 RUS=След. набор];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Direction := Direction::Forward;
                                 SetPointsAnalysisColumn;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 29  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           RUS=Общее] }

    { 40  ;2   ;Field     ;
                CaptionML=[ENU=Analysis Report Name;
                           RUS=Название аналитического отчета];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentReportName;
                OnValidate=BEGIN
                             PayrollAnalysisReportMgt.CheckReportName(CurrentReportName);
                               CurrentReportNameOnAfterValida;
                           END;

                OnLookup=BEGIN
                           IF PayrollAnalysisReportMgt.LookupReportName(CurrentReportName) THEN BEGIN
                             Text := CurrentReportName;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Analysis Line Template;
                           RUS=Шаблон строки анализа];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentLineTemplate;
                OnValidate=BEGIN
                             PayrollAnalysisReportMgt.CheckAnalysisLineTemplName(CurrentLineTemplate,Rec);
                               CurrentLineTemplateOnAfterVali;
                           END;

                OnLookup=BEGIN
                           CurrPage.SAVERECORD;
                           PayrollAnalysisReportMgt.LookupAnalysisLineTemplName(CurrentLineTemplate,Rec);
                           ValidateAnalysisTemplateName;
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Analysis Column Template;
                           RUS=Шаблон столбца анализа];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentColumnTemplate;
                OnValidate=BEGIN
                             PayrollAnalysisReportMgt.GetColumnTemplate(CurrentColumnTemplate);
                               CurrentColumnTemplateOnAfterVa;
                           END;

                OnLookup=BEGIN
                           IF PayrollAnalysisReportMgt.LookupColumnName(CurrentColumnTemplate) THEN BEGIN
                             Text := CurrentColumnTemplate;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           RUS=Параметры] }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Show Error;
                           RUS=Показать ошибку];
                OptionCaptionML=[ENU=None,Division by Zero,Period Error,Invalid Formula,Cyclic Formula,All;
                                 RUS=Нет,Деление на ноль,Ошибка периода,Недопустимая формула,Циклическая формула,Все];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShowError }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           RUS=Параметры матрицы] }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=View by;
                           RUS=Просмотр по];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 RUS=День,Неделя,Месяц,Квартал,Год,Учетный период];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                           END;
                            }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Column Set;
                           RUS=Набор столбцов];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ColumnsSet }

  }
  CODE
  {
    VAR
      GLSetup@1017 : Record 98;
      PayrollAnalysisColumn@1003 : TEMPORARY Record 14964;
      PayrollAnalysisView@1016 : Record 14965;
      PayrollAnalysisLine@1020 : Record 14962;
      PayrollAnalysisReportMgt@1000 : Codeunit 14960;
      PayrollAnalysisMatrix@1210000 : Page 35661;
      CurrentReportName@1005 : Code[10];
      CurrentLineTemplate@1001 : Code[10];
      CurrentColumnTemplate@1002 : Code[10];
      NewCurrentReportName@1010 : Code[10];
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      ShowError@1007 : 'None,Division by Zero,Period Error,Invalid Formula,Cyclic Formula,All';
      Text003@1008 : TextConst 'ENU=1,6,,Dimension %1 Filter;RUS=1,6,,Фильтр измерения %1';
      Direction@1012 : 'Backward,Forward';
      NoOfColumns@1013 : Integer;
      FirstLineNo@1018 : Integer;
      LastLineNo@1019 : Integer;
      FirstColumn@1021 : Text[1024];
      LastColumn@1022 : Text[1024];
      MatrixColumnCaptions@1009 : ARRAY [32] OF Text[1024];

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF GETFILTER("Date Filter") <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",GETFILTER("Date Filter"));
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
      SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
        SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
    END;

    LOCAL PROCEDURE ValidateAnalysisTemplateName@3();
    VAR
      PayrollAnalysisLineTemplate@1001 : Record 14961;
      PrevPayrollAnalysisView@1000 : Record 14965;
    BEGIN
      IF PayrollAnalysisLineTemplate.GET(CurrentLineTemplate) THEN
        IF (PayrollAnalysisLineTemplate."Default Column Template Name" <> '') AND
           (CurrentColumnTemplate <> PayrollAnalysisLineTemplate."Default Column Template Name")
        THEN BEGIN
          CurrentColumnTemplate := PayrollAnalysisLineTemplate."Default Column Template Name";
          PayrollAnalysisReportMgt.OpenColumns(CurrentColumnTemplate,Rec,PayrollAnalysisColumn);
          PayrollAnalysisReportMgt.CopyColumnsToTemp(Rec,CurrentColumnTemplate,PayrollAnalysisColumn);
        END;

      IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" <> PayrollAnalysisView.Code THEN BEGIN
        PrevPayrollAnalysisView := PayrollAnalysisView;
        IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" <> '' THEN
          PayrollAnalysisView.GET(PayrollAnalysisLineTemplate."Payroll Analysis View Code")
        ELSE BEGIN
          CLEAR(PayrollAnalysisView);
          PayrollAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          PayrollAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        END;
        IF PrevPayrollAnalysisView."Dimension 1 Code" <> PayrollAnalysisView."Dimension 1 Code" THEN
          SETRANGE("Dimension 1 Filter");
        IF PrevPayrollAnalysisView."Dimension 2 Code" <> PayrollAnalysisView."Dimension 2 Code" THEN
          SETRANGE("Dimension 2 Filter");
        IF PrevPayrollAnalysisView."Dimension 3 Code" <> PayrollAnalysisView."Dimension 3 Code" THEN
          SETRANGE("Dimension 3 Filter");
      END;
    END;

    LOCAL PROCEDURE ValidateReportName@1();
    VAR
      PayrollAnalysisReportName@1000 : Record 14960;
    BEGIN
      IF PayrollAnalysisReportName.GET(CurrentReportName) THEN BEGIN
        IF PayrollAnalysisReportName."Analysis Line Template Name" <> '' THEN
          CurrentLineTemplate := PayrollAnalysisReportName."Analysis Line Template Name";
        IF PayrollAnalysisReportName."Analysis Column Template Name" <> '' THEN
          CurrentColumnTemplate := PayrollAnalysisReportName."Analysis Column Template Name";
      END;
    END;

    LOCAL PROCEDURE GetCaption@6() : Text[250];
    VAR
      PayrollAnalysisReportName@1000 : Record 14960;
    BEGIN
      IF CurrentReportName <> '' THEN
        IF PayrollAnalysisReportName.GET(CurrentReportName) THEN
          EXIT(PayrollAnalysisReportName.Name + ' ' + PayrollAnalysisReportName.Description);
    END;

    PROCEDURE SetFilters@4();
    BEGIN
      PayrollAnalysisColumn.RESET;
      PayrollAnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnTemplate);

      PayrollAnalysisLine.COPY(Rec);
      PayrollAnalysisLine.SETRANGE("Analysis Line Template Name",CurrentLineTemplate);
    END;

    LOCAL PROCEDURE ColumnsSet@7() : Text[80];
    BEGIN
      IF FirstColumn = LastColumn THEN
        EXIT(FirstColumn);

      EXIT(FirstColumn + '..' + LastColumn);
    END;

    LOCAL PROCEDURE SetPointsAnalysisColumn@22();
    VAR
      PayrollAnalysisColumn2@1013 : Record 14964;
      tmpFirstColumn@1000 : Text[80];
      tmpLastColumn@1001 : Text[80];
      tmpFirstLineNo@1003 : Integer;
      tmpLastLineNo@1002 : Integer;
    BEGIN
      PayrollAnalysisColumn2.SETRANGE("Analysis Column Template",CurrentColumnTemplate);

      IF (Direction = Direction::Forward) OR (FirstColumn = '') THEN
        IF LastColumn = '' THEN BEGIN
          PayrollAnalysisColumn2.FINDFIRST;
          tmpFirstColumn := PayrollAnalysisColumn2."Column Header";
          tmpFirstLineNo := PayrollAnalysisColumn2."Line No.";
          PayrollAnalysisColumn2.NEXT(NoOfColumns - 1);
          tmpLastColumn := PayrollAnalysisColumn2."Column Header";
          tmpLastLineNo := PayrollAnalysisColumn2."Line No.";
        END ELSE BEGIN
          IF PayrollAnalysisColumn2.GET(CurrentColumnTemplate,LastLineNo) THEN;
          PayrollAnalysisColumn2.NEXT;
          tmpFirstColumn := PayrollAnalysisColumn2."Column Header";
          tmpFirstLineNo := PayrollAnalysisColumn2."Line No.";
          PayrollAnalysisColumn2.NEXT(NoOfColumns - 1);
          tmpLastColumn := PayrollAnalysisColumn2."Column Header";
          tmpLastLineNo := PayrollAnalysisColumn2."Line No.";
        END
      ELSE BEGIN
        IF PayrollAnalysisColumn2.GET(CurrentColumnTemplate,FirstLineNo) THEN;
        PayrollAnalysisColumn2.NEXT(-1);
        tmpLastColumn := PayrollAnalysisColumn2."Column Header";
        tmpLastLineNo := PayrollAnalysisColumn2."Line No.";
        PayrollAnalysisColumn2.NEXT(-NoOfColumns + 1);
        tmpFirstColumn := PayrollAnalysisColumn2."Column Header";
        tmpFirstLineNo := PayrollAnalysisColumn2."Line No.";
      END;

      IF (tmpFirstColumn = tmpLastColumn) AND
         ((tmpLastColumn = LastColumn) OR (tmpFirstColumn = FirstColumn)) THEN
        EXIT;

      FirstColumn := tmpFirstColumn;
      LastColumn := tmpLastColumn;
      FirstLineNo := tmpFirstLineNo;
      LastLineNo := tmpLastLineNo;
    END;

    LOCAL PROCEDURE FillMatrixColumns@8();
    VAR
      PayrollAnalysisColumn2@1013 : Record 14964;
      i@1004 : Integer;
    BEGIN
      PayrollAnalysisColumn2.SETRANGE("Analysis Column Template",CurrentColumnTemplate);
      PayrollAnalysisColumn2.SETRANGE("Line No.",FirstLineNo,LastLineNo);
      i := 1;

      IF PayrollAnalysisColumn2.FINDSET THEN
        REPEAT
          MatrixColumnCaptions[i] := PayrollAnalysisColumn2."Column Header";
          i := i + 1;
        UNTIL (PayrollAnalysisColumn2.NEXT = 0) OR (i > ARRAYLEN(MatrixColumnCaptions));
    END;

    PROCEDURE ClearPoints@5();
    BEGIN
      CLEAR(FirstColumn);
      CLEAR(LastColumn);
    END;

    PROCEDURE SetReportName@10(NewReportName@1000 : Code[10]);
    BEGIN
      NewCurrentReportName := NewReportName;
    END;

    LOCAL PROCEDURE CurrentReportNameOnAfterValida@19043622();
    BEGIN
      CurrPage.SAVERECORD;
      ValidateReportName;
      PayrollAnalysisReportMgt.SetAnalysisLineTemplName(CurrentLineTemplate,Rec);
      ValidateAnalysisTemplateName;
      PayrollAnalysisReportMgt.CopyColumnsToTemp(Rec,CurrentColumnTemplate,PayrollAnalysisColumn);
      CurrPage.UPDATE(FALSE);
      ClearPoints;
      SetPointsAnalysisColumn;
    END;

    LOCAL PROCEDURE CurrentLineTemplateOnAfterVali@19002239();
    BEGIN
      CurrPage.SAVERECORD;
      PayrollAnalysisReportMgt.SetAnalysisLineTemplName(CurrentLineTemplate,Rec);
      ValidateAnalysisTemplateName;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE CurrentColumnTemplateOnAfterVa@19007060();
    BEGIN
      PayrollAnalysisReportMgt.CopyColumnsToTemp(Rec,CurrentColumnTemplate,PayrollAnalysisColumn);
      CurrPage.UPDATE(FALSE);
      ClearPoints;
      SetPointsAnalysisColumn;
    END;

    BEGIN
    END.
  }
}

