OBJECT Page 1040 Copy Job
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Job;
               RUS=Копировать работу];
    PageType=StandardDialog;
    OnOpenPage=BEGIN
                 PlanningLineType := PlanningLineType::"Budget+Billable";
                 LedgerEntryType := LedgerEntryType::"Usage+Sale";
                 ValidateSource;
               END;

    OnQueryClosePage=BEGIN
                       IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
                         ValidateUserInput;
                         CopyJob.SetCopyOptions(CopyJobPrices,CopyQuantity,CopyDimensions,Source,PlanningLineType,LedgerEntryType);
                         CopyJob.SetJobTaskRange(FromJobTaskNo,ToJobTaskNo);
                         CopyJob.SetJobTaskDateRange(FromDate,ToDate);
                         CopyJob.CopyJob(SourceJob,TargetJobNo,TargetJobDescription,TargetBillToCustomerNo);
                         MESSAGE(Text001);
                       END
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 15  ;1   ;Group     ;
                CaptionML=[ENU=Copy from;
                           RUS=Копировать из] }

    { 11  ;2   ;Field     ;
                CaptionML=[ENU=Job No.;
                           RUS=Код работы];
                ToolTipML=[ENU=Specifies the job number.;
                           RUS=Определяет номер работы.];
                ApplicationArea=#Jobs;
                SourceExpr=SourceJobNo;
                TableRelation=Job;
                OnValidate=BEGIN
                             IF (SourceJobNo <> '') AND NOT SourceJob.GET(SourceJobNo) THEN
                               ERROR(Text003,SourceJob.TABLECAPTION,SourceJobNo);
                             TargetJobDescription := SourceJob.Description;
                             TargetBillToCustomerNo := SourceJob."Bill-to Customer No.";

                             FromJobTaskNo := '';
                             ToJobTaskNo := '';
                           END;
                            }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Job Task No. from;
                           RUS=Номер рабочих заданий из];
                ToolTipML=[ENU=Specifies the first job task number to be copied from. Only planning lines with a job task number equal to or higher than the number specified in this field will be included.;
                           RUS=Определяет первый номер рабочего задания для копирования. Будут включены только строки планирования с номером рабочего задания равным или большим номера, указанного в этом поле.];
                ApplicationArea=#Jobs;
                SourceExpr=FromJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record 1001;
                           BEGIN
                             IF (FromJobTaskNo <> '') AND NOT JobTask.GET(SourceJob."No.",FromJobTaskNo) THEN
                               ERROR(Text003,JobTask.TABLECAPTION,FromJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record 1001;
                         BEGIN
                           IF SourceJob."No." <> '' THEN BEGIN
                             JobTask.SETRANGE("Job No.",SourceJob."No.");
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               FromJobTaskNo := JobTask."Job Task No.";
                           END;
                         END;
                          }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Job Task No. to;
                           RUS=Номер рабочих заданий в];
                ToolTipML=[ENU=Specifies the last job task number to be copied from. Only planning lines with a job task number equal to or lower than the number specified in this field will be included.;
                           RUS=Определяет последний номер рабочего задания для копирования. Будут включены только строки планирования с номером рабочего задания равным или меньше номера, указанного в этом поле.];
                ApplicationArea=#Jobs;
                SourceExpr=ToJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record 1001;
                           BEGIN
                             IF (ToJobTaskNo <> '') AND NOT JobTask.GET(SourceJobNo,ToJobTaskNo) THEN
                               ERROR(Text003,JobTask.TABLECAPTION,ToJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record 1001;
                         BEGIN
                           IF SourceJobNo <> '' THEN BEGIN
                             JobTask.SETRANGE("Job No.",SourceJobNo);
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               ToJobTaskNo := JobTask."Job Task No.";
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                Name=From Source;
                CaptionML=[ENU=Source;
                           RUS=Источник];
                ToolTipML=[ENU=Specifies the basis on which you want the planning lines to be copied. If, for example, you want the planning lines to reflect actual usage and invoicing of items, resources, and general ledger expenses on the job you copy from, then select Job Ledger Entries in this field.;
                           RUS=Определяет основу для копирования строк планирования. Например, если необходимо, чтобы строки планирования отражали фактическое потребление товаров, ресурсов и расходов ГК по работе, из которой выполняется копирование, то в этом поле необходимо выбрать "Книга операций по работам".];
                OptionCaptionML=[ENU=Job Planning Lines,Job Ledger Entries,None;
                                 RUS=Строки планирования работ,записи книги работ,отсутствие];
                ApplicationArea=#Jobs;
                SourceExpr=Source;
                OnValidate=BEGIN
                             ValidateSource;
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=Planning Line Type;
                CaptionML=[ENU=Incl. Planning Line Type;
                           RUS=Включ. строки планирования типа];
                ToolTipML=[ENU=Specifies how copy planning lines. Budget+Billable: All planning lines are copied. Budget: Only lines of type Budget or type Both Budget and Billable are copied. Billable: Only lines of type Billable or type Both Budget and Billable are copied.;
                           RUS=Определяет порядок копирования строк планирования. "Бюджет и к оплате": копируются все строки планирования. "Бюджет": копируются только строки типа "Бюджет" или "Бюджет и к оплате". "К оплате": копируются только строки типа "К оплате" или "Бюджет и к оплате".];
                OptionCaptionML=[ENU=Budget+Billable,Budget,Billable;
                                 RUS=Бюджет и к оплате,Бюджет,К оплате];
                ApplicationArea=#Jobs;
                SourceExpr=PlanningLineType;
                Enabled=PlanningLineTypeEnable }

    { 25  ;2   ;Field     ;
                Name=Ledger Entry Line Type;
                CaptionML=[ENU=Incl. Ledger Entry Line Type;
                           RUS=Вкл. тип записи строки книги];
                ToolTipML=[ENU=Specifies how to copy job ledger entries. Usage+Sale: All job ledger entries are copied. Entries of type Usage are copied to new planning lines of type Budget. Entries of type Sale are copied to new planning lines of type Billable. Usage: All job ledger entries of type Usage are copied to new planning lines of type Budget. Sale: All job ledger entries of type Sale are copied to new planning lines of type Billable.;
                           RUS=Определяет порядок копирования операций книги работ. "Использование+Продажи": копируются все операции книги работ. Операции типа "Использование" копируются в новые строки планирования типа "Бюджет". Операции типа "Продажи" копируются в новые строки планирования типа "К оплате". "Использование": все операции книги работ с типом "Использование" копируются в новые строки планирования типа "Бюджет". "Продажи": все операции книги работ с типом "Продажи" копируются в новые строки планирования типа "К оплате".];
                OptionCaptionML=[ENU=Usage+Sale,Usage,Sale;
                                 RUS=Использование+Продажи,Использование,Продажи];
                ApplicationArea=#Jobs;
                SourceExpr=LedgerEntryType;
                Enabled=LedgerEntryLineTypeEnable }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Starting Date;
                           RUS=Дата начала];
                ToolTipML=[ENU=Specifies the date from which the report or batch job processes information.;
                           RUS=Определяет дату, начиная с которой информация будет обрабатываться отчетом или пакетным заданием.];
                ApplicationArea=#Jobs;
                SourceExpr=FromDate }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Ending Date;
                           RUS=Дата окончания];
                ToolTipML=[ENU=Specifies the date to which the report or batch job processes information.;
                           RUS=Определяет дату, до которой информация будет обрабатываться отчетом или пакетным заданием.];
                ApplicationArea=#Jobs;
                SourceExpr=ToDate }

    { 5   ;1   ;Group     ;
                CaptionML=[ENU=Copy to;
                           RUS=Копировать в] }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Job No.;
                           RUS=Код работы];
                ToolTipML=[ENU=Specifies the job number.;
                           RUS=Определяет номер работы.];
                ApplicationArea=#Jobs;
                SourceExpr=TargetJobNo }

    { 31  ;2   ;Field     ;
                CaptionML=[ENU=Job Description;
                           RUS=Описание работы];
                ToolTipML=[ENU=Specifies a description of the job.;
                           RUS=Определяет описание работы.];
                ApplicationArea=#Jobs;
                SourceExpr=TargetJobDescription }

    { 33  ;2   ;Field     ;
                CaptionML=[ENU=Bill-To Customer No.;
                           RUS=Код плательщика];
                ToolTipML=[ENU=Specifies the number of an alternate customer that the job is billed to instead of the main customer.;
                           RUS=Определяет номер альтернативного клиента, которому выставляется счет за работу вместо основного клиента.];
                ApplicationArea=#Jobs;
                SourceExpr=TargetBillToCustomerNo;
                TableRelation=Customer }

    { 6   ;1   ;Group     ;
                CaptionML=[ENU=Apply;
                           RUS=Применить] }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Copy Job Prices;
                           RUS=Копировать цены работы];
                ToolTipML=[ENU=Specifies that item prices, resource prices, and G/L prices will be copied from the job that you specified on the Copy From FastTab.;
                           RUS=Указывает, что цены товаров, цены ресурсов и цены ГК будут скопированы из работы, указанной на экспресс-вкладке "Копировать из".];
                ApplicationArea=#Jobs;
                SourceExpr=CopyJobPrices }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Copy Quantity;
                           RUS=Копировать количество];
                ToolTipML=[ENU=Specifies that the quantities will be copied to the new job.;
                           RUS=Указывает, что количества будут скопированы в новую работу.];
                ApplicationArea=#Jobs;
                SourceExpr=CopyQuantity }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Copy Dimensions;
                           RUS=Копировать измерения];
                ToolTipML=[ENU=Specifies that the dimensions will be copied to the new job.;
                           RUS=Указывает, что измерения будут скопированы в новую работу.];
                ApplicationArea=#Jobs;
                SourceExpr=CopyDimensions }

  }
  CODE
  {
    VAR
      SourceJob@1010 : Record 167;
      CopyJob@1013 : Codeunit 1006;
      SourceJobNo@1017 : Code[20];
      FromJobTaskNo@1009 : Code[20];
      ToJobTaskNo@1004 : Code[20];
      TargetJobNo@1008 : Code[20];
      TargetJobDescription@1007 : Text[50];
      TargetBillToCustomerNo@1014 : Code[20];
      FromDate@1006 : Date;
      ToDate@1005 : Date;
      Source@1003 : 'Job Planning Lines,Job Ledger Entries,None';
      PlanningLineType@1002 : 'Budget+Billable,Budget,Billable';
      LedgerEntryType@1001 : 'Usage+Sale,Usage,Sale';
      Text001@1016 : TextConst 'ENU=The job was successfully copied.;RUS=Задание успешно скопировано.';
      Text002@1019 : TextConst 'ENU=Job No. %1 will be assigned to the new Job. Do you want to continue?;RUS=Задание №%1 будет назначено новому заданию. Продолжить?';
      Text003@1018 : TextConst '@@@=Job Task 1000 does not exist.;ENU=%1 %2 does not exist.;RUS=%1 %2 не существует.';
      CopyJobPrices@1012 : Boolean;
      CopyQuantity@1011 : Boolean;
      CopyDimensions@1000 : Boolean;
      PlanningLineTypeEnable@1020 : Boolean INDATASET;
      LedgerEntryLineTypeEnable@1021 : Boolean INDATASET;
      Text004@1015 : TextConst 'ENU=Provide a valid source %1.;RUS=Укажите действующий источник %1.';

    LOCAL PROCEDURE ValidateUserInput@1();
    VAR
      JobsSetup@1001 : Record 315;
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      IF (SourceJobNo = '') OR NOT SourceJob.GET(SourceJob."No.") THEN
        ERROR(Text004,SourceJob.TABLECAPTION);

      JobsSetup.GET;
      JobsSetup.TESTFIELD("Job Nos.");
      IF TargetJobNo = '' THEN BEGIN
        TargetJobNo := NoSeriesManagement.GetNextNo(JobsSetup."Job Nos.",0D,TRUE);
        IF NOT CONFIRM(Text002,TRUE,TargetJobNo) THEN BEGIN
          TargetJobNo := '';
          ERROR('');
        END;
      END ELSE
        NoSeriesManagement.TestManual(JobsSetup."Job Nos.");
    END;

    LOCAL PROCEDURE ValidateSource@2();
    BEGIN
      CASE TRUE OF
        Source = Source::"Job Planning Lines":
          BEGIN
            PlanningLineTypeEnable := TRUE;
            LedgerEntryLineTypeEnable := FALSE;
          END;
        Source = Source::"Job Ledger Entries":
          BEGIN
            PlanningLineTypeEnable := FALSE;
            LedgerEntryLineTypeEnable := TRUE;
          END;
        Source = Source::None:
          BEGIN
            PlanningLineTypeEnable := FALSE;
            LedgerEntryLineTypeEnable := FALSE;
          END;
      END;
    END;

    PROCEDURE SetFromJob@3(SourceJob2@1000 : Record 167);
    BEGIN
      SourceJob := SourceJob2;
      SourceJobNo := SourceJob."No.";
      TargetJobDescription := SourceJob.Description;
      TargetBillToCustomerNo := SourceJob."Bill-to Customer No.";
    END;

    BEGIN
    END.
  }
}

