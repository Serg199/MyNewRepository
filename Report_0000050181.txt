OBJECT Report 50181 Batch Import Files from OBS
{
  OBJECT-PROPERTIES
  {
    Date=12.07.17;
    Time=16:44:42;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  I@1101495003 : Integer;
                  J@1101495002 : Integer;
                  DirectoryPath@1101495001 : Text[100];
                BEGIN
                  MovingDataSetup.GET;

                  CheckSetup;
                  CheckSubdirs;
                  //#TODO# -- переработать постановку задач
                  //CreateJobProcStatus;

                  IF GUIALLOWED THEN
                    Window.OPEN(Text006);

                  //NCS-2510 > AAP
                  //FOR I := 0 TO 2 DO BEGIN
                  FOR I := 0 TO 3 DO BEGIN
                  //NCS-2510 < AAP
                    IF GUIALLOWED THEN
                      Window.UPDATE(1, SELECTSTR(I+1, Text005));

                    RetrieveDirectoryPath(I, DirectoryPath);
                    CASE I OF
                      0: FileType := FileType::Customer;
                      1: FileType := FileType::Deal;
                      2: FileType := FileType::"G/L Transaction";
                      //NCS-2510 > AAP
                      3: FileType := FileType::"Bank Account";
                      //NCS-2510 > AAP
                    END;

                    //NC NOS-26 > SPA
                    Folder := Folder.DirectoryInfo(DirectoryPath);
                    IF NOT Folder.Exists THEN
                      ERROR(Text008);

                    DirArray := Folder.GetFiles;
                    FolderItems := DirArray.GetEnumerator;
                    WHILE FolderItems.MoveNext DO BEGIN
                      FileInfo := FolderItems.Current;
                      CurrFileName := FileInfo.Name;
                      COMMIT;
                      CLEAR(BatchImport);
                      BatchImport.SetParameters(FileInfo.FullName, FileType);
                      IF NOT BatchImport.RUN THEN BEGIN
                        ErrorJournal.AddError(COMPANYNAME,ErrorJournal."Error Group"::"Periodical Job",
                                              ErrorJournal.Type::Delay,'',
                                              COPYSTR(STRSUBSTNO(Text009, CurrFileName, GETLASTERRORTEXT), 1, 250),LineNo);

                        //NCS-2039 >>
                        SETSTAMP(FileInfo.FullName,TODAY,TIME);
                        //NCS-2039 <<
                        FileInfo.MoveTo(DirectoryPath + '\' + MovingDataSetup."Failed Files Dir" + '\' + FileInfo.Name);

                        IF NOT ErrorOccured THEN
                          ErrorOccured := TRUE;
                      END ELSE BEGIN
                        //NCS-2039 >>
                        SETSTAMP(FileInfo.FullName,TODAY,TIME);
                        //NCS-2039 <<
                        FileInfo.MoveTo(DirectoryPath + '\' + MovingDataSetup."Loaded Files Dir" + '\' + FileInfo.Name);
                      END;
                    END;
                    //NC NOS-26 < SPA
                  END;

                  IF NeedCloseLogEntry THEN
                    CloseJobProcStatus;

                  IF GUIALLOWED THEN BEGIN
                    Window.CLOSE;
                    IF ErrorOccured THEN
                      MESSAGE(Text003)
                    ELSE
                      MESSAGE(Text002);
                  END;
                END;

    UseRequestPage=Yes;
  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1101495000;;Container;
                  ContainerType=ContentArea }

      { 1101495001;1;Field  ;
                  CaptionML=[ENU=Attention! Batch Import .CSV files will be run. Press OK to continue.;
                             RUS=Внимание! Будет запущена пакетная загрузка .CSV файлов. Для запуска нажмите ОК.];
                  Editable=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      BatchImport@1101495009 : Codeunit 50073;
      FileType@1101495008 : 'Customer,Deal,G/L Transaction,Bank Account';
      LineNo@1101495007 : Integer;
      ErrorJournal@1101495006 : Record 50023;
      MovingDataSetup@1101495005 : Record 50064;
      Window@1101495003 : Dialog;
      ErrorOccured@1101495002 : Boolean;
      NeedCloseLogEntry@1101495001 : Boolean;
      CurrFileName@1101495000 : Text[500];
      Text001@1101495018 : TextConst 'ENU=You can not start the download. As legal persons loading.;RUS=Нельзя запустить загрузку. В юрлице идет загрузка.';
      Text002@1101495017 : TextConst 'ENU=Batch import files is completed successfully.;RUS=Пакетная загрузка файлов успешно завершена.';
      Text003@1101495016 : TextConst 'ENU=Errors are found during import. Please see Error Log Entry.;RUS="В процессе импорта произошли ошибки. Посмотрите Журнал Ошибок. ";ENI=Errors are found during import. Please see Error Log Entry.';
      Text004@1101495015 : TextConst 'ENU=must be defined for procedure correctly processing;RUS=не определено. Для корректной работы задания определите его';
      Text005@1101495014 : TextConst 'ENU=Customers,Deals,G/L transactions,Bank Accounts;RUS=Клиенты,Сделки,Транзакции ГК,Банковские Счета';
      Text006@1101495013 : TextConst 'ENU=Loading file: #1#########################;RUS=Загрузка файла: #1#########################';
      Text007@1101495012 : TextConst 'ENU=Batch Import .CSV files will be run. Press OK to continue.;RUS="  Будет запущена пакетная загрузка .CSV файлов.Продолжить?"';
      Text008@1101495011 : TextConst 'ENU="Directory path ''%1'' not found. ";RUS=Указанный путь к папке ''%1'' не найден.';
      Text009@1101495010 : TextConst 'ENU=During import file %1 error is occured: %2;RUS=При загрузке файла %1 возникла ошибка: %2';
      Folder@1101495019 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo";
      FileInfo@1101495020 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
      FolderItems@1101495022 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      DirArray@1101495023 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";

    PROCEDURE SetJobProcStatusLineNo@1101495000(NewLineNo@1101495000 : Integer);
    BEGIN
      LineNo := NewLineNo;
    END;

    PROCEDURE CreateJobProcStatus@1101495008();
    VAR
      JobProc@1101495000 : Record 50062;
      JobProcStatus@1101495002 : Record 50063;
      JobQueueLogEntry@1101495001 : Record 474;
    BEGIN
      IF LineNo <> 0 THEN
        EXIT;

      {
      IF JobQueueSetup."New Integration Active" THEN BEGIN
        IF NOT JobQueueLogEntry.CheckProc(FALSE,COMPANYNAME,
                                          JobQueueLogEntry."Object Type to Run"::Report,REPORT::"Batch Import Files from OBS",
                                          JobQueueLogEntry."Type Processing"::" ",'',
                                          STRSUBSTNO('%1|%2',JobQueueLogEntry.Status::Planed,
                                          JobQueueLogEntry.Status::Working)) THEN
          ERROR(Text001);

        JobQueueLogEntry.AddJobManual(COMPANYNAME,
                                      JobQueueLogEntry."Object Type to Run"::Report,REPORT::"Batch Import Files from OBS",
                                      JobQueueLogEntry."Type Processing"::" ",'');

        JobQueueLogEntry."Run Through CU" := CODEUNIT::"RunPeriodicAcivity 2";
        JobQueueLogEntry.Status := JobQueueLogEntry.Status::Working;
        JobQueueLogEntry."Processing Mode" := JobQueueLogEntry."Processing Mode"::Load;
        JobQueueLogEntry."Start Date/Time" := CURRENTDATETIME;
        JobQueueLogEntry.MODIFY;
        COMMIT;
        LineNo := JobQueueLogEntry."Entry No.";
      END ELSE BEGIN
      }
        JobProc.INIT;
        JobProc.VALIDATE("Company No." ,COMPANYNAME);
        JobProc.VALIDATE(Blocked,FALSE);
        JobProc.VALIDATE("Type Processing",JobProc."Type Processing"::"Program Module");
        JobProc.VALIDATE(Processor,FORMAT(CODEUNIT::RunPeriodicAcivity));
        JobProc.Description := 'Batch Import Files from OBS';
        JobProc."Report No. Parameter" := REPORT::"Batch Import Files from OBS";
        JobProc."Auto Start" := FALSE;
        JobProc."Name Service NAS" := '';
        JobProc."Name Server NAS" := '';
        JobProc."Status Monitor" := JobProc."Status Monitor"::"Packet Task";
        JobProc."Data Check" := TRUE;
        JobProc."Check Uniqueness" := TRUE;

        IF NOT JobProcStatus.IsCheckUniq(JobProc, STRSUBSTNO('%1|%2',JobProcStatus.Status::Scheduled,
                                         JobProcStatus.Status::Working)) THEN
          ERROR(Text001);

        JobProcStatus.AddJob(JobProc);

        JobProcStatus.Status := JobProcStatus.Status::Working;
        JobProcStatus."Transaction No." := JobProcStatus.GetNewTransactionNo;
        JobProcStatus."Processing Mode" := JobProcStatus."Processing Mode"::Load;
        JobProcStatus."Time Start" := CURRENTDATETIME;
        JobProcStatus.MODIFY;
        COMMIT;
        LineNo := JobProcStatus."Line No.";
      {
      END;
      }
      NeedCloseLogEntry := TRUE;
    END;

    PROCEDURE CloseJobProcStatus@1101495005();
    VAR
      JobProcStatus@1101495000 : Record 50063;
      JobQueueLogEntry@1101495001 : Record 474;
    BEGIN
      {
      IF JobQueueSetup."New Integration Active" THEN BEGIN
        JobQueueLogEntry.GET(LineNo);
        JobQueueLogEntry.Status := JobQueueLogEntry.Status::"Competed Successfully";
        JobQueueLogEntry."End Date/Time" := CURRENTDATETIME;
        JobQueueLogEntry.MODIFY;
      END ELSE BEGIN
      }
        JobProcStatus.GET(LineNo);
        JobProcStatus.Status := JobProcStatus.Status::"Competed Successfully";
        JobProcStatus.MODIFY;
      {
      END;
      }
      COMMIT;
    END;

    PROCEDURE CheckSetup@1101495001();
    BEGIN
      IF MovingDataSetup."Customers Directory Path" = '' THEN
        MovingDataSetup.FIELDERROR("Customers Directory Path", Text004);
      IF MovingDataSetup."Deals Directory Path" = '' THEN
        MovingDataSetup.FIELDERROR("Deals Directory Path", Text004);
      IF MovingDataSetup."G\L Entries Directory Path" = '' THEN
        MovingDataSetup.FIELDERROR("G\L Entries Directory Path", Text004);
      IF MovingDataSetup."Loaded Files Dir" = '' THEN
        MovingDataSetup.FIELDERROR("Loaded Files Dir", Text004);
      IF MovingDataSetup."Failed Files Dir" = '' THEN
        MovingDataSetup.FIELDERROR("Failed Files Dir", Text004);
      //NCS-2510 > AAP
      IF MovingDataSetup."Banks Acc. Directory Path" = '' THEN
        MovingDataSetup.FIELDERROR("Banks Acc. Directory Path", Text004);
      //NCS-2510 < AAP
    END;

    PROCEDURE CheckSubdirs@1101495006();
    VAR
      DirectoryHelper@1101495000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      SuccessSubDir@1101495002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo";
      FailedSubDir@1101495001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo";
    BEGIN
      //NC NOS-26 > SPA
      // 1. Customer Directory
      SuccessSubDir := SuccessSubDir.DirectoryInfo(MovingDataSetup."Customers Directory Path" + '\' + MovingDataSetup."Loaded Files Dir");
      IF NOT SuccessSubDir.Exists THEN BEGIN
        SuccessSubDir := SuccessSubDir.DirectoryInfo(MovingDataSetup."Customers Directory Path");
        IF NOT SuccessSubDir.Exists THEN
          ERROR(Text008, MovingDataSetup."Customers Directory Path");
        SuccessSubDir.CreateSubdirectory(MovingDataSetup."Loaded Files Dir");
      END;
      FailedSubDir := FailedSubDir.DirectoryInfo(MovingDataSetup."Customers Directory Path" + '\' + MovingDataSetup."Failed Files Dir");
      IF NOT FailedSubDir.Exists THEN BEGIN
        FailedSubDir := FailedSubDir.DirectoryInfo(MovingDataSetup."Customers Directory Path");
        FailedSubDir.CreateSubdirectory(MovingDataSetup."Failed Files Dir");
      END;

      // 2. Deal Directory
      SuccessSubDir := SuccessSubDir.DirectoryInfo(MovingDataSetup."Deals Directory Path" + '\' + MovingDataSetup."Loaded Files Dir");
      IF NOT SuccessSubDir.Exists THEN BEGIN
        SuccessSubDir := SuccessSubDir.DirectoryInfo(MovingDataSetup."Deals Directory Path");
        IF NOT SuccessSubDir.Exists THEN
          ERROR(Text008, MovingDataSetup."Deals Directory Path");
        SuccessSubDir.CreateSubdirectory(MovingDataSetup."Loaded Files Dir");
      END;
      FailedSubDir := FailedSubDir.DirectoryInfo(MovingDataSetup."Deals Directory Path" + '\' + MovingDataSetup."Failed Files Dir");
      IF NOT FailedSubDir.Exists THEN BEGIN
        FailedSubDir := FailedSubDir.DirectoryInfo(MovingDataSetup."Deals Directory Path");
        FailedSubDir.CreateSubdirectory(MovingDataSetup."Failed Files Dir");
      END;

      // 3. G/L Directory
      SuccessSubDir := SuccessSubDir.DirectoryInfo(MovingDataSetup."G\L Entries Directory Path" + '\' + MovingDataSetup."Loaded Files Dir");
      IF NOT SuccessSubDir.Exists THEN BEGIN
        SuccessSubDir := SuccessSubDir.DirectoryInfo(MovingDataSetup."G\L Entries Directory Path");
        IF NOT SuccessSubDir.Exists THEN
          ERROR(Text008, MovingDataSetup."G\L Entries Directory Path");
        SuccessSubDir.CreateSubdirectory(MovingDataSetup."Loaded Files Dir");
      END;
      FailedSubDir := FailedSubDir.DirectoryInfo(MovingDataSetup."G\L Entries Directory Path" + '\' + MovingDataSetup."Failed Files Dir");
      IF NOT FailedSubDir.Exists THEN BEGIN
        FailedSubDir := FailedSubDir.DirectoryInfo(MovingDataSetup."G\L Entries Directory Path");
        FailedSubDir.CreateSubdirectory(MovingDataSetup."Failed Files Dir");
      END;

      // 4. Bank Acc. Directory
      SuccessSubDir := SuccessSubDir.DirectoryInfo(MovingDataSetup."Banks Acc. Directory Path" + '\' + MovingDataSetup."Loaded Files Dir");
      IF NOT SuccessSubDir.Exists THEN BEGIN
        SuccessSubDir := SuccessSubDir.DirectoryInfo(MovingDataSetup."Banks Acc. Directory Path");
        IF NOT SuccessSubDir.Exists THEN
          ERROR(Text008, MovingDataSetup."Banks Acc. Directory Path");
        SuccessSubDir.CreateSubdirectory(MovingDataSetup."Loaded Files Dir");
      END;
      FailedSubDir := FailedSubDir.DirectoryInfo(MovingDataSetup."Banks Acc. Directory Path" + '\' + MovingDataSetup."Failed Files Dir");
      IF NOT FailedSubDir.Exists THEN BEGIN
        FailedSubDir := FailedSubDir.DirectoryInfo(MovingDataSetup."Banks Acc. Directory Path");
        FailedSubDir.CreateSubdirectory(MovingDataSetup."Failed Files Dir");
      END;
      //NC NOS-26 < SPA
    END;

    PROCEDURE RetrieveDirectoryPath@1101495007(Number@1101495000 : Integer;VAR Path@1101495001 : Text[100]);
    BEGIN
      CASE Number OF
        0 : Path := MovingDataSetup."Customers Directory Path";
        1 : Path := MovingDataSetup."Deals Directory Path";
        2 : Path := MovingDataSetup."G\L Entries Directory Path";
        //NCS-2510 > AAP
        3 : Path := MovingDataSetup."Banks Acc. Directory Path";
        //NCS-2510 < AAP
      END;
    END;

    BEGIN
    {
      NC NCS-1896 SPA Created report
      NC NCS-2039 AAP Modify date in inflow files
      NC NCS-2510 AAP modify functions OnPreReport,CheckSetup, CheckSubdirs, RetrieveDirectoryPath
                      modify global variable FileType: added option "Bank Account"
      ------------------------
      NC NOS-26 SPA Миграция на NAV2017
    }
    END.
  }
  RDLDATA
  {
  }
}

