OBJECT Report 50182 Import GL from OBS
{
  OBJECT-PROPERTIES
  {
    Date=04.07.17;
    Time=12:09:14;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   Tab[1] := 9;
                 END;

    OnPreReport=VAR
                  I@1101495000 : Integer;
                BEGIN
                  //NC NOS-26 > SPA
                  {
                  IF NOT EXISTS(FileName) THEN
                    ERROR(Text001,FILE);
                  }
                  ServerFileName := CommDialog.UploadFileSilentToServerPath(FileName,'');
                  //NC NOS-26 < SPA
                  Company.GET(COMPANYNAME);

                  BufferGL.RESET;
                  BufferGL.SETRANGE("External System ID",'OB');
                  BufferGL.SETRANGE("Id Legal Entity",Company."Legal Entity Id");
                  IF BufferGL.FINDLAST THEN
                    LastLineNo := BufferGL."Entry No."
                  ELSE
                    LastLineNo := 0;
                  BufferGL.RESET;

                  //NC NOS-26 > SPA
                  //I := ImpBuffer(FileName);
                  I := ImpBuffer(ServerFileName);
                  //NC NOS-26 < SPA
                END;

    OnPostReport=BEGIN
                   IF NOT NASSilentMode THEN
                     MESSAGE(Text003);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1101495000;;Container;
                  ContainerType=ContentArea }

      { 1101495001;1;Field  ;
                  CaptionML=[ENU=Path to files;
                             RUS=Путь к файлам];
                  SourceExpr=FileName;
                  OnAssistEdit=BEGIN
                                 FileName := CommDialog.OpenFileDialog(Text002,FileName,''); // NC NOS-26 SPA
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FileName@1101495055 : Text[1024];
      ServerFileName@1101495061 : Text;
      CommDialog@1101495054 : Codeunit 419;
      Tab@1101495053 : Text[1];
      LineNo@1101495052 : Integer;
      NASSilentMode@1101495051 : Boolean;
      GLSetup@1101495050 : Record 98;
      LastLineNo@1101495049 : Integer;
      Company@1101495048 : Record 2000000006;
      BufferGL@1101495047 : Record 50093;
      BufferGL2@1101495046 : Record 50093;
      BufferLEDim@1101495045 : Record 50094;
      txtGLAccountNo@1101495044 : Text[20];
      txtPostingDate@1101495043 : Text[30];
      txtDocumentNo@1101495042 : Text[20];
      txtDescription@1101495041 : Text[50];
      txtQuantity@1101495040 : Text[30];
      txtTransactionNo@1101495039 : Text[30];
      txtDebitAmount@1101495038 : Text[30];
      txtCreditAmount@1101495037 : Text[30];
      txtDocumentDate@1101495036 : Text[30];
      txtExternalDocumentNo@1101495035 : Text[20];
      txtReversedbyEntryNo@1101495034 : Text[30];
      txtReversedEntryNo@1101495033 : Text[30];
      txtIDEntryNo@1101495032 : Text[30];
      txtDueDate@1101495031 : Text[30];
      txtOriginalCurrencyCode@1101495030 : Text[10];
      txtOriginalDebitAmount@1101495029 : Text[30];
      txtOriginalCreditAmount@1101495028 : Text[30];
      txtLocalGLAccount@1101495027 : Text[20];
      txtHistoricalDate@1101495026 : Text[30];
      txtDescription2@1101495025 : Text[50];
      txtACCOMP@1101495024 : Text[20];
      txtACCRUALTYPE@1101495023 : Text[20];
      txtBANKACC@1101495022 : Text[20];
      txtBOOK@1101495021 : Text[20];
      txtCAPITALMOVE@1101495020 : Text[20];
      txtCOMMISSIONS@1101495019 : Text[20];
      txtCOSTCENTER@1101495018 : Text[20];
      txtCOUNTERPARTY@1101495017 : Text[20];
      txtCOUNTERPARTYREAL@1101495016 : Text[20];
      txtDEAL@1101495015 : Text[20];
      txtDFEXPENSE@1101495014 : Text[20];
      txtEXPOP@1101495013 : Text[20];
      txtFA@1101495012 : Text[20];
      txtFAOPERTYPE@1101495011 : Text[20];
      txtFININSTR@1101495010 : Text[20];
      txtFUNDSTATUS@1101495009 : Text[20];
      txtIC@1101495008 : Text[20];
      txtPROJECT@1101495007 : Text[20];
      txtPROVMOVEMENTS@1101495006 : Text[20];
      txtPROVISIONS@1101495005 : Text[20];
      txtRECONCTYPE@1101495004 : Text[20];
      txtREVALTYPE@1101495003 : Text[20];
      txtTAXOTHER@1101495002 : Text[20];
      txtOBSAccountNo@1101495001 : Text[20];
      txtVATRATE@1101495000 : Text[20];
      Text001@1101495060 : TextConst 'ENU=File %1 does not exist;RUS=Файл %1 не существует';
      Text002@1101495059 : TextConst 'ENU=Select Folder;RUS=Выбор Файла';
      Text003@1101495058 : TextConst 'ENU=File imported successfully;RUS=Файл успешно импортирован';
      Text004@1101495057 : TextConst 'ENU=Customers Directory, error occurs when import field: %1. Line No.: %2;RUS=Справочник Клиенты, ошибка при загрузке поля: %1. Строка: %2';
      Text005@1101495056 : TextConst 'ENU="Operation %1 = %2, %3 = %4 is already loaded.";RUS="Операция %1 = %2, %3 = %4 уже загружалась."';

    PROCEDURE SetParameters@1000000040(NewFileName@1000000000 : Text[1024];NewNASSilentMode@1101495000 : Boolean);
    BEGIN
      FileName := NewFileName;
      NASSilentMode := NewNASSilentMode;
      IF NASSilentMode THEN
        CurrReport.USEREQUESTPAGE(FALSE);
    END;

    PROCEDURE GetSubstr@1000000007(MainStr@1000000000 : Text[1024];SubstrNo@1000000001 : Integer;separator@1000000002 : Text[1];MaxLen@1101495000 : Integer) SubStr : Text[1024];
    VAR
      i@1000000003 : Integer;
      Pos@1000000004 : Integer;
      Str@1000000005 : Text[1024];
    BEGIN
      SubStr := '';
      Str := MainStr;
      IF STRLEN(Str) = 0 THEN
       EXIT;

      i := STRPOS(Str,separator);
      IF i = 0 THEN
        EXIT;

      FOR i := 1 TO SubstrNo DO BEGIN
        Pos := STRPOS(Str,separator);
        IF i = SubstrNo THEN BEGIN
          IF Pos <> 0 THEN
            SubStr := COPYSTR(Str,1,Pos-1)
          ELSE
            SubStr := COPYSTR(Str,1,STRLEN(Str));
          IF MaxLen <> 0 THEN
            SubStr := COPYSTR(SubStr, 1, MaxLen);
          EXIT(SubStr);
        END ELSE
          Str := COPYSTR(Str,Pos+1,STRLEN(Str));
      END;
    END;

    PROCEDURE ImpBuffer@1000000011(File@1000000000 : Text[1024]) FileLineNo : Integer;
    VAR
      Str@1000000001 : Text[1024];
      InStr@1000000004 : InStream;
      SrcFile@1000000003 : File;
      CrLf@1101495000 : Char;
    BEGIN
      IF EXISTS(File) THEN
        SrcFile.OPEN(File)
      ELSE
        EXIT;

      IF SrcFile.LEN = 0 THEN
        EXIT;

      SrcFile.TEXTMODE(TRUE);
      SrcFile.CREATEINSTREAM(InStr);

      //SKIP HEADER TEXT
      REPEAT
        InStr.READ(CrLf);
      UNTIL CrLf = 10;

      LineNo := 1;

      REPEAT
        InStr.READTEXT(Str);
        LineNo += 1;
        InsertBuffer(Str);
      UNTIL InStr.EOS;
      SrcFile.CLOSE;

      COMMIT;
    END;

    PROCEDURE InsertBuffer@1101495001(Str@1101495000 : Text[1024]);
    VAR
      DummyTxt@1101495001 : Text[1024];
    BEGIN
      txtGLAccountNo := GetSubstr(Str, 1, Tab, 0);
      txtPostingDate := GetSubstr(Str, 2, Tab, 0);
      txtDocumentNo := GetSubstr(Str, 3, Tab, 0);
      txtDescription := GetSubstr(Str, 4, Tab, 0);
      txtQuantity := GetSubstr(Str, 5, Tab, 0);
      txtTransactionNo := GetSubstr(Str, 6, Tab, 0);
      txtDebitAmount := GetSubstr(Str, 7, Tab, 0);
      txtCreditAmount := GetSubstr(Str, 8, Tab, 0);
      txtDocumentDate := GetSubstr(Str, 9, Tab, 0);
      txtExternalDocumentNo := GetSubstr(Str, 10, Tab, 0);
      txtReversedbyEntryNo := GetSubstr(Str, 11, Tab, 0);
      txtReversedEntryNo := GetSubstr(Str, 12, Tab, 0);
      txtIDEntryNo := GetSubstr(Str, 13, Tab, 0);
      txtDueDate := GetSubstr(Str, 14, Tab, 0);
      txtOriginalCurrencyCode := GetSubstr(Str, 15, Tab, 0);
      IF UPPERCASE(txtOriginalCurrencyCode) = 'RUB' THEN
        txtOriginalCurrencyCode := 'RUR';
      txtOriginalDebitAmount := GetSubstr(Str, 16, Tab, 0);
      txtOriginalCreditAmount := GetSubstr(Str, 17, Tab, 0);
      txtLocalGLAccount := GetSubstr(Str, 18, Tab, 0);
      txtHistoricalDate := GetSubstr(Str, 19, Tab, 0);
      txtDescription2 := GetSubstr(Str, 20, Tab, 0);
      txtACCOMP := GetSubstr(Str, 21, Tab, 0);
      txtACCRUALTYPE := GetSubstr(Str, 22, Tab, 0);
      txtBANKACC := GetSubstr(Str, 23, Tab, 0);
      txtBOOK := GetSubstr(Str, 24, Tab, 0);
      txtCAPITALMOVE := GetSubstr(Str, 25, Tab, 0);
      txtCOMMISSIONS := GetSubstr(Str, 26, Tab, 0);
      txtCOSTCENTER := GetSubstr(Str, 27, Tab, 0);
      txtCOUNTERPARTY := GetSubstr(Str, 28, Tab, 0);
      txtCOUNTERPARTYREAL := GetSubstr(Str, 29, Tab, 0);
      txtDEAL := GetSubstr(Str, 30, Tab, 0);
      txtDFEXPENSE := GetSubstr(Str, 31, Tab, 0);
      txtEXPOP := GetSubstr(Str, 32, Tab, 0);
      txtFA := GetSubstr(Str, 33, Tab, 0);
      txtFAOPERTYPE := GetSubstr(Str, 34, Tab, 0);
      txtFININSTR := GetSubstr(Str, 35, Tab, 0);
      txtFUNDSTATUS := GetSubstr(Str, 36, Tab, 0);
      txtIC := GetSubstr(Str, 37, Tab, 0);
      txtPROJECT := GetSubstr(Str, 38, Tab, 0);
      txtPROVMOVEMENTS := GetSubstr(Str, 39, Tab, 0);
      txtPROVISIONS := GetSubstr(Str, 40, Tab, 0);
      txtRECONCTYPE := GetSubstr(Str, 41, Tab, 0);
      txtREVALTYPE := GetSubstr(Str, 42, Tab, 0);
      txtTAXOTHER := GetSubstr(Str, 43, Tab, 0);
      txtOBSAccountNo := GetSubstr(Str, 44, Tab, 0);
      txtVATRATE := GetSubstr(Str, 45, Tab, 0);


      BufferGL.INIT;

      LastLineNo += 1;

      BufferGL."Entry No." := LastLineNo;
      BufferGL."G/L Account No." := txtGLAccountNo;
      IF txtPostingDate = '' THEN
        BufferGL."Posting Date" := 0D
      ELSE
        EVALUATE(BufferGL."Posting Date",txtPostingDate,9);
      BufferGL."Document Type" := 0;
      BufferGL."Document No." := txtDocumentNo;
      BufferGL.Description := txtDescription;
      BufferGL."Bal. Account No." := '';
      BufferGL."Global Dimension 1 Code" := '';
      BufferGL."Global Dimension 2 Code" := '';
      BufferGL."User ID" := '';
      BufferGL."Source Code" := '';
      BufferGL."System-Created Entry" := FALSE;
      BufferGL."Prior-Year Entry" := FALSE;
      BufferGL."Job No." := '';
      IF txtQuantity = '' THEN
        BufferGL.Quantity := 0
      ELSE
        EVALUATE(BufferGL.Quantity,txtQuantity,9);
      BufferGL."VAT Amount" := 0;
      BufferGL."Business Unit Code" := '';
      BufferGL."Journal Batch Name" := '';
      BufferGL."Reason Code" := '';
      BufferGL."Gen. Posting Type" := 0;
      BufferGL."Gen. Bus. Posting Group" := '';
      BufferGL."Gen. Prod. Posting Group" := '';
      BufferGL."Bal. Account Type" := 0;
      IF txtTransactionNo = '' THEN
        BufferGL."Transaction No." := 0
      ELSE
        EVALUATE(BufferGL."Transaction No.",txtTransactionNo,9);
      IF txtDebitAmount = '' THEN
        BufferGL."Debit Amount" := 0
      ELSE
        EVALUATE(BufferGL."Debit Amount",txtDebitAmount,9);
      IF txtCreditAmount = '' THEN
        BufferGL."Credit Amount" := 0
      ELSE
        EVALUATE(BufferGL."Credit Amount",txtCreditAmount,9);
      IF txtDocumentDate = '' THEN
        BufferGL."Document Date" := 0D
      ELSE
        EVALUATE(BufferGL."Document Date",txtDocumentDate,9);
      BufferGL."External Document No." := txtExternalDocumentNo;
      BufferGL."Source Type" := 0;
      BufferGL."Source No." := '';
      BufferGL."No. Series" := '';
      BufferGL."Tax Area Code" := '';
      BufferGL."Tax Liable" := FALSE;
      BufferGL."Tax Group Code" := '';
      BufferGL."Use Tax" := FALSE;
      BufferGL."VAT Bus. Posting Group" := '';
      BufferGL."VAT Prod. Posting Group" := '';
      BufferGL."Additional-Currency Amount" := 0;
      BufferGL."Add.-Currency Debit Amount" := 0;
      BufferGL."Add.-Currency Credit Amount" := 0;
      BufferGL."Close Income Statement Dim. ID" := 0;
      BufferGL."IC Partner Code" := '';
      {
      IF txtReversedbyEntryNo = '' THEN
        BufferGL."Reversed by Entry No." := 0
      ELSE
        EVALUATE(BufferGL."Reversed by Entry No.",txtReversedbyEntryNo,9);
      IF txtReversedEntryNo = '' THEN
        BufferGL."Reversed Entry No." := 0
      ELSE
        EVALUATE(BufferGL."Reversed Entry No.",txtReversedEntryNo,9);
      }
      BufferGL."Prod. Order No." := '';
      BufferGL."FA Entry Type" := 0;
      BufferGL."FA Entry No." := 0;
      BufferGL."Used in Correspondence" := FALSE;
      BufferGL."Agreement No." := '';
      BufferGL."Buffer Entry No." := 0;
      BufferGL."Transaction Type" := 0;
      BufferGL."Not Consolidate" := FALSE;
      BufferGL.Reverse := FALSE;
      BufferGL.Elimination := FALSE;
      BufferGL."Eliminated by Entry No." := 0;
      BufferGL."Eliminated Entry No." := 0;
      {
      IF txtIDEntryNo = '' THEN
        BufferGL."ID Entry No." := 0
      ELSE
        EVALUATE(BufferGL."ID Entry No.",txtIDEntryNo,9);
      }
      BufferGL."Id Legal Entity" := Company."Legal Entity Id";
      BufferGL."Error in Import" := FALSE;
      BufferGL."Import Cons. Source Code" := '';
      BufferGL."Import Register No." := 0;
      BufferGL."Not Translate" := FALSE;
      BufferGL."Mapping Code" := '';
      BufferGL."Mapping Line No" := 0;
      BufferGL."Count Dim. Processed" := 0;
      BufferGL."Allocation For Dim. 1" := FALSE;
      BufferGL."Allocation For Dim. 2" := FALSE;
      BufferGL."External System ID" := 'OB';
      BufferGL."Original System ID" := 'OB';
      BufferGL."Cons. Source Code" := '';
      IF txtIDEntryNo = '' THEN
        BufferGL."Source Entry No." := 0
      ELSE
        EVALUATE(BufferGL."Source Entry No.",txtIDEntryNo,9);
      //BufferGL."Source Transaction No." := 0;
      BufferGL."Register No." := 0;
      BufferGL."Cons. Register Error Entry No." := 0;
      BufferGL."Export Cons. Source Code" := '';
      BufferGL."Export Register No." := 0;
      IF txtDueDate = '' THEN
        BufferGL."Due Date" := 0D
      ELSE
        EVALUATE(BufferGL."Due Date",txtDueDate,9);
      BufferGL."External Document Type" := '';
      BufferGL."External Document ID" := '';
      BufferGL."External Document Date" := 0D;
      BufferGL."External Operation No" := 0;
      BufferGL."Original Currency Code" := txtOriginalCurrencyCode;
      BufferGL."Original Currency Factor" := 0;
      IF txtOriginalDebitAmount = '' THEN
        BufferGL."Original Debit Amount" := 0
      ELSE
        EVALUATE(BufferGL."Original Debit Amount",txtOriginalDebitAmount,9);
      IF txtOriginalCreditAmount = '' THEN
        BufferGL."Original Credit Amount" := 0
      ELSE
        EVALUATE(BufferGL."Original Credit Amount",txtOriginalCreditAmount,9);
      BufferGL."Special Correspondense" := FALSE;
      BufferGL.Reposted := FALSE;
      BufferGL.Removed := FALSE;
      BufferGL."FA Operation" := FALSE;
      BufferGL."Begining Date" := 0D;
      BufferGL."Ending Date" := 0D;
      BufferGL."Local G/L Account" := '';
      IF txtHistoricalDate = '' THEN
        BufferGL."Historical Date" := 0D
      ELSE
        EVALUATE(BufferGL."Historical Date",txtHistoricalDate,9);
      BufferGL."Description 2" := txtDescription2;
      BufferGL."Financial Instrument No." := '';
      BufferGL."Balance Entry" := FALSE;
      BufferGL."Source G/L Account No." := txtLocalGLAccount;
      BufferGL."Posted Time" := CREATEDATETIME(0D,0T);
      BufferGL."Cons. Time" := CREATEDATETIME(0D,0T);

      //NCS-2041 > AAP
      //BufferGL.DataStageID := CREATEDATETIME(0D,0T);
      BufferGL.DataStageID := CURRENTDATETIME;
      //NCS-2041 < AAP

      BufferGL.Amount := 0;
      BufferGL."Debit Quantity" := 0;
      BufferGL."Credit Quantity" := 0;
      IF BufferGL."Debit Amount" <> 0 THEN BEGIN
        BufferGL.Amount := BufferGL."Debit Amount";
        BufferGL."Debit Quantity" := BufferGL.Quantity;
      END ELSE IF BufferGL."Credit Amount" <> 0 THEN BEGIN
        BufferGL.Amount := -BufferGL."Credit Amount";
        BufferGL."Credit Quantity" := -BufferGL.Quantity;
      END;

      BufferGL."Original Amount" := 0;
      IF BufferGL."Original Debit Amount" <> 0 THEN
        BufferGL."Original Amount" := BufferGL."Original Debit Amount"
      ELSE IF BufferGL."Original Credit Amount" <> 0 THEN
        BufferGL."Original Amount" := -BufferGL."Original Credit Amount";

      IF (BufferGL."Reversed by Entry No." <> 0) OR (BufferGL."Reversed Entry No." <> 0) THEN
        BufferGL.Reversed := TRUE;

      AddDim('AC.COMP',txtACCOMP);
      AddDim('ACCRUAL.TYPE',txtACCRUALTYPE);
      AddDim('BANK.ACC',txtBANKACC);
      AddDim('BOOK',txtBOOK);
      AddDim('CAPITAL.MOVE',txtCAPITALMOVE);
      AddDim('COMMISSIONS',txtCOMMISSIONS);
      AddDim('COSTCENTER',txtCOSTCENTER);
      AddDim('COUNTERPARTY',txtCOUNTERPARTY);
      AddDim('COUNTERPARTY.REAL',txtCOUNTERPARTYREAL);
      AddDim('DEAL',txtDEAL);
      AddDim('DF.EXPENSE',txtDFEXPENSE);
      AddDim('EXP.OP',txtEXPOP);
      AddDim('FA',txtFA);
      AddDim('FA.OPERTYPE',txtFAOPERTYPE);
      AddDim('FIN.INSTR',txtFININSTR);
      AddDim('FUND.STATUS',txtFUNDSTATUS);
      AddDim('IC',txtIC);
      AddDim('PROJECT',txtPROJECT);
      AddDim('PROV.MOVEMENTS',txtPROVMOVEMENTS);
      AddDim('PROVISIONS',txtPROVISIONS);
      AddDim('RECONC.TYPE',txtRECONCTYPE);
      AddDim('REVAL.TYPE',txtREVALTYPE);
      AddDim('TAX.OTHER',txtTAXOTHER);
      AddDim('TAX.OTHER',txtVATRATE);

      BufferGL2.RESET;
      BufferGL2.SETRANGE("External System ID",BufferGL."External System ID");
      BufferGL2.SETRANGE("Id Legal Entity",BufferGL."Id Legal Entity");
      BufferGL2.SETRANGE("Transaction No.",BufferGL."Transaction No.");
      BufferGL2.SETRANGE("Source Entry No.",BufferGL."Source Entry No.");
      IF NOT BufferGL2.ISEMPTY THEN
        ERROR(Text005,BufferGL.FIELDCAPTION("Transaction No."),BufferGL."Transaction No.",
                      BufferGL.FIELDCAPTION("Source Entry No."),BufferGL."Source Entry No.");

      BufferGL.INSERT;
    END;

    PROCEDURE RiseErrorMsg@1101495003(FieldName@1101495000 : Text[50]);
    BEGIN
      ERROR(Text004, FieldName, LineNo);
    END;

    PROCEDURE AddDim@1101495000(DimCode@1101495000 : Code[20];DimValue@1101495001 : Code[20]);
    BEGIN
      IF (DimCode = '') OR (DimValue = '') THEN
        EXIT;
      BufferLEDim.INIT;
      BufferLEDim."External System ID" := BufferGL."External System ID";
      BufferLEDim."Id Legal Entity" := BufferGL."Id Legal Entity";
      BufferLEDim."Table ID" := 17;
      BufferLEDim."Entry No." := BufferGL."Entry No.";
      BufferLEDim."Dimension Code" := DimCode;
      BufferLEDim."Dimension Value Code" := DimValue;
      IF NOT BufferLEDim.INSERT THEN
        BufferLEDim.MODIFY;

      IF GLSetup."Global Dimension 1 Code" = DimCode THEN
        BufferGL."Global Dimension 1 Code" := DimValue;

      IF GLSetup."Global Dimension 2 Code" = DimCode THEN
        BufferGL."Global Dimension 2 Code" := DimValue;
    END;

    BEGIN
    {
      NCS-1896 PCH Created report
      NCS-2041 AAP Заполнение DataStageID
      ----------------
      NC NOS-26 SPA Миграция на NAV2017
    }
    END.
  }
  RDLDATA
  {
  }
}

