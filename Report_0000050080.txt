OBJECT Report 50080 Import Metal Exch. Rate CB
{
  OBJECT-PROPERTIES
  {
    Date=25.04.17;
    Time=13:14:41;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Metal Exch. Rate CB;
               RUS=Импорт Курсов Meталов ЦБ];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF GUIALLOWED THEN BEGIN
                    IF StartDate = 0D THEN
                      ERROR(Text008);

                    IF EndDate = 0D THEN
                      ERROR(Text009);

                    IF EndDate < StartDate THEN
                      ERROR(Text007);
                  END ELSE BEGIN
                    StartDate := TODAY;
                    EndDate := TODAY;
                  END;
                END;

  }
  DATASET
  {
    { 1101495000;;DataItem;                  ;
               DataItemTable=Table2000000007;
               DataItemTableView=SORTING(Period Type,Period Start)
                                 WHERE(Period Type=CONST(Date));
               OnPreDataItem=BEGIN
                               SETRANGE("Period Start",StartDate,EndDate);

                               ProcessingDaysQty := EndDate - StartDate + 1;
                               IF GUIALLOWED THEN
                                 Window.OPEN(Text000);
                             END;

               OnAfterGetRecord=BEGIN
                                  DaysCounter += 1;
                                  IF GUIALLOWED THEN BEGIN
                                    Window.UPDATE(1,FORMAT("Period Start"));
                                    Window.UPDATE(2,ROUND(DaysCounter/ProcessingDaysQty*10000,1));
                                  END;

                                  LoadXML("Period Start",XmlRootNode,DateLoaded);
                                  IF DateLoaded <> "Period Start" THEN
                                    CurrReport.SKIP;

                                  ImportExchRates;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   StartDate := TODAY;
                   EndDate := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1101495003;0;Container;
                  ContainerType=ContentArea }

      { 1101495002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры] }

      { 1101495001;2;Field  ;
                  CaptionML=[ENU=Start Date;
                             RUS=Дата начала];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=StartDate }

      { 1101495000;2;Field  ;
                  CaptionML=[ENU=End Date;
                             RUS=Дата окончания];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Currency@1101495015 : Record 4;
      CompanyInformation@1101495014 : Record 79;
      CurrencyExchangeRate@1101495013 : Record 330;
      Company@1101495012 : Record 2000000006;
      StartDate@1101495011 : Date;
      EndDate@1101495010 : Date;
      DateLoaded@1101495009 : Date;
      g_dateIndex@1101495008 : Date;
      ExchRateAmount@1101495007 : Decimal;
      RelationalExchRateAmount@1101495006 : Decimal;
      ReplacementConfirmed@1101495005 : Boolean;
      ProcessingDaysQty@1101495004 : Integer;
      DaysCounter@1101495003 : Integer;
      ProcessingMonthesQty@1101495002 : Integer;
      MonthesCounter@1101495001 : Integer;
      Window@1101495000 : Dialog;
      XmlRootNode@1101495016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Text000@1101495027 : TextConst 'ENU=Importing Metal Exchange Rates #1######\Daily Exchange Rates    @2@@@@@@@@@@@@@@@@;RUS=Импорт курсов металлов №#1######\Ежедневные курсы    @2@@@@@@@@@@@@@@@@';
      Text001@1101495026 : TextConst 'ENU=Failed to load XML file.;RUS=Ошибка загрузки XML-файла.';
      Text002@1101495025 : TextConst 'ENU=Unexpected XML structure.;RUS=Непредвиденная структура XML.';
      Text004@1101495024 : TextConst 'ENU=Unable to find %1 attribute.;RUS=Не удается найти атрибут %1.';
      Text005@1101495023 : TextConst 'ENU=Unexpected %1 attribute format.;RUS=Непредвиденный формат атрибута %1.';
      Text006@1101495022 : TextConst 'ENU=Unexpected %1 node value.;RUS=Непредвиденное значение узла %1.';
      Text007@1101495021 : TextConst 'ENU=Start Date cannot be greater than End Date.;RUS=Дата начала не может превышать дату окончания.';
      Text008@1101495020 : TextConst 'ENU=You must specify the Start Date.;RUS=Необходимо указать Дату Начала.';
      Text009@1101495019 : TextConst 'ENU=You must specify the End Date.;RUS=Необходимо указать Дату Конца.';
      Text010@1101495018 : TextConst 'ENU=The MSXML is not properly installed. Contact the system administrator.;RUS=Неправильно установлен MSXML. Обратитесь к системному администратору.';
      Text011@1101495017 : TextConst 'ENU=In %1 not found %2 for metal %3;RUS=В %1 не найден %2 для металла %3';

    PROCEDURE LoadXML@1210019(DateReq@1210000 : Date;VAR XMLNode@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR DateLoaded@1210004 : Date);
    VAR
      XMLDOMManagement@1101495000 : Codeunit 6224;
      XMLNamedNodeMap@1210005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLNodeDate@1210003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMManagement.LoadXMLNodeFromUri(
        'http://www.cbr.ru/scripts/xml_metall.asp?date_req1=' +
        FORMAT(DateReq,0,'<Day,2>/<Month,2>/<Year4>') + '&date_req2=' +
        FORMAT(DateReq,0,'<Day,2>/<Month,2>/<Year4>'),
        XMLNode);

      IF XMLNode.Name <> 'Metall' THEN
        ERROR(Text002);

      XMLNamedNodeMap := XMLNode.Attributes;
      XMLNodeDate := XMLNamedNodeMap.GetNamedItem('FromDate');
      IF ISNULL(XMLNodeDate) THEN
        ERROR(Text004,'FromDate');

      IF NOT EvaluateDate(DateLoaded,FORMAT(XMLNodeDate.Value)) THEN
        ERROR(Text005,'FromDate');
    END;

    PROCEDURE GetExchRateParameters@1210023(CurrencyCode@1210000 : Code[10];VAR ExchRateAmount@1210001 : Decimal;VAR RelationalExchRateAmount@1210002 : Decimal;VAR XMLNode@1101495000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      XMLNodeList@1101495005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNodeExchRate@1101495004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeCurrencyCode@1101495003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeExchRateAmount@1101495002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeRelExchRateAmount@1101495001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1210005 : Integer;
    BEGIN
      XMLNodeList := XMLNode.ChildNodes;
      ExchRateAmount := 1;

      IF NOT ISNULL(XMLNodeList) THEN
        FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
          XMLNodeExchRate := XMLNodeList.Item(i);

          IF FindAttr(XMLNodeExchRate,'Record',XMLNodeCurrencyCode) THEN
            IF FORMAT(XMLNodeCurrencyCode.InnerText) = CurrencyCode THEN BEGIN
              IF FindNode(XMLNodeExchRate,'Buy',XMLNodeRelExchRateAmount) THEN
                IF NOT EVALUATE(RelationalExchRateAmount,
                     ConvertToXMLFormat(FORMAT(XMLNodeRelExchRateAmount.InnerText)),9) THEN
                  ERROR(Text006,'Buy');
              EXIT(TRUE);
            END;
        END;

      EXIT(FALSE);
    END;

    PROCEDURE FindAttr@1000000009(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text[250];VAR XMLNodeAttr@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      XMLAttr@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      XMLNamedNodeMap@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT(FALSE);

      XMLNamedNodeMap := XMLRootNode.Attributes;
      XMLNodeAttr := XMLNamedNodeMap.GetNamedItem('Code');

      IF ISNULL(XMLNodeAttr) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE ConvertToXMLFormat@1101495003(Str@1210000 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(CONVERTSTR(Str,',','.'));
    END;

    PROCEDURE FindNode@1101495002(VAR XMLRootNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text[250];VAR FoundXMLNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT(FALSE);

      FoundXMLNode := XMLRootNode.SelectSingleNode(NodePath);

      IF ISNULL(FoundXMLNode) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE EvaluateDate@1101495001(VAR DateLoaded@1210004 : Date;Str@1210000 : Text[30]) : Boolean;
    VAR
      Day@1210001 : Integer;
      Month@1210002 : Integer;
      Year@1210003 : Integer;
    BEGIN
      IF NOT EVALUATE(Day,COPYSTR(Str,7)) THEN
        EXIT(FALSE);

      IF NOT EVALUATE(Month,COPYSTR(Str,5,2)) THEN
        EXIT(FALSE);

      IF NOT EVALUATE(Year,COPYSTR(Str,1,4)) THEN
        EXIT(FALSE);

      DateLoaded := DMY2DATE(Day,Month,Year);

      EXIT(TRUE);
    END;

    PROCEDURE ImportExchRates@1210003();
    VAR
      l_recCurrency@1000000000 : Record 4;
    BEGIN
      IF Company.FINDSET THEN REPEAT
        CompanyInformation.CHANGECOMPANY(Company.Name);
        CompanyInformation.GET;
        IF CompanyInformation."Import Curr. Exch. Rates" THEN BEGIN
          //Currency.SETRANGE(Import,TRUE);
          Currency.SETFILTER("CB Currency Code",'<>%1','');
          Currency.SETRANGE("Currency Type",Currency."Currency Type"::"Prec. Metal");
          IF Currency.FINDSET THEN
            REPEAT
              IF NOT l_recCurrency.GET(Currency."CB Currency Code") THEN
                ERROR(Text011, l_recCurrency.TABLECAPTION,l_recCurrency.FIELDCAPTION("CB Currency Code"), Currency.Code);
              l_recCurrency.TESTFIELD("RU Bank Code");
              IF GetExchRateParameters(l_recCurrency."RU Bank Code",ExchRateAmount,RelationalExchRateAmount,XmlRootNode) THEN BEGIN
                IF NOT CurrencyExchangeRate.GET(l_recCurrency.Code,DateLoaded) THEN BEGIN
                  CurrencyExchangeRate.INIT;
                  CurrencyExchangeRate."Currency Code" := l_recCurrency.Code;
                  CurrencyExchangeRate."Starting Date" := DateLoaded;
                  CurrencyExchangeRate."Exchange Rate Amount" := ExchRateAmount;
                  CurrencyExchangeRate."Adjustment Exch. Rate Amount" := ExchRateAmount;
                  //CurrencyExchangeRate."Relational Exch. Rate Amount" := RelationalExchRateAmount;
                  //CurrencyExchangeRate."Relational Adjmt Exch Rate Amt" := RelationalExchRateAmount;
                  CurrencyExchangeRate."Relational Exch. Rate Amount" :=
                    ROUND(RelationalExchRateAmount * 31.1034768,0.01);    //per ounce
                  CurrencyExchangeRate."Relational Adjmt Exch Rate Amt" :=
                    ROUND(RelationalExchRateAmount * 31.1034768,0.01);
                  CurrencyExchangeRate.INSERT;
                END ELSE BEGIN
                  IF GUIALLOWED THEN
                    IF CompanyInformation.IsNeedToReplaceCurrExchRate(l_recCurrency.Code,DateLoaded,Company.Name) THEN BEGIN
                      CurrencyExchangeRate."Exchange Rate Amount" := ExchRateAmount;
                      CurrencyExchangeRate."Adjustment Exch. Rate Amount" := ExchRateAmount;
                      //CurrencyExchangeRate."Relational Exch. Rate Amount" := RelationalExchRateAmount;
                      //CurrencyExchangeRate."Relational Adjmt Exch Rate Amt" := RelationalExchRateAmount;
                      CurrencyExchangeRate."Relational Exch. Rate Amount" :=
                        ROUND(RelationalExchRateAmount * 31.1034768,0.01); //per ounce
                      CurrencyExchangeRate."Relational Adjmt Exch Rate Amt" :=
                        ROUND(RelationalExchRateAmount * 31.1034768,0.01);
                      CurrencyExchangeRate.MODIFY;
                    END;
                END;
              END;
            UNTIL Currency.NEXT = 0;
        END;
      UNTIL Company.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

