OBJECT Report 50043 Import Ext. Data from Excel
{
  OBJECT-PROPERTIES
  {
    Date=10.07.17;
    Time=17:36:39;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    Permissions=TableData 50045=rimd;
    CaptionML=[ENU=Import External Data from Excel;
               RUS=Импорт Внешних Данных из Excel];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  //Проверка на ввод вилки дат для операций
                  IF IsImportSheet[1] THEN BEGIN
                    IF StartDate = 0D THEN
                      ERROR(Text006);
                    IF EndDate = 0D THEN
                      ERROR(Text007);
                  END;

                  //Список листов в импортируемом Excel файле
                  ExcelSheets[1] := 'Cons. Data PreBuffer';
                  ExcelSheets[2] := 'Buffer Deal';
                  ExcelSheets[3] := 'Buffer FA';
                  ExcelSheets[4] := 'Buffer Customer';
                  ExcelSheets[5] := 'Buffer Operation Closing';

                  //NC MDB07.2 >  AKO
                  {
                  ExcelSheetsCount := 1;

                  //Проверка листов на наличие в файле Excel
                  }
                  //NC MDB07.2 < AKO



                  //NC MDB07.2 >  AKO
                  {
                  WHILE ExcelSheets[ExcelSheetsCount] <> '' DO BEGIN
                    IF IsImportSheet[ExcelSheetsCount] THEN BEGIN
                      ReadExcelSheet(ExcelSheets[ExcelSheetsCount]);
                      AnalyzeData(ExcelSheets[ExcelSheetsCount]);
                    END;
                    ExcelSheetsCount += 1;
                  END;
                  }

                  //Проверка листов на наличие в файле Excel
                  FOR ExcelSheetsCount := 1 TO 5 DO BEGIN

                  //NC MDB07.3 >  AKO
                    IF IsImportSheet[ExcelSheetsCount] THEN BEGIN
                  //NC MDB07.3 <  AKO

                      ExcelBuf[ExcelSheetsCount].RESET;
                      ExcelBuf[ExcelSheetsCount].DELETEALL;
                      ExcelBuf[ExcelSheetsCount].OpenBook(FileMgt.UploadFileSilent(GetConvertedFileName), ExcelSheets[ExcelSheetsCount]);
                  //NC MDB07.3 >  AKO
                    END;
                  //NC MDB07.3 <  AKO
                  END;

                  //Предварительная проверка корректности данных на листах
                  //В текущем состоянии проверяется только лист с операциями
                  IF IsImportSheet[1] THEN BEGIN
                    ExcelSheetsCount := 1;
                    ReadExcelSheet(1);
                    CheckDataOnSheet(1);
                  END;

                  //Перебор и обработка листов
                  ExcelSheetsCount := 1;
                  FOR ExcelSheetsCount := 1 TO 5 DO BEGIN
                    IF IsImportSheet[ExcelSheetsCount] THEN BEGIN
                      //т.к. лист с операциями уже был загруже в буфер на шаге проверки, не грузим его здесь
                      IF ExcelSheetsCount <> 1 THEN
                        ReadExcelSheet(ExcelSheetsCount);
                      AnalyzeData(ExcelSheets[ExcelSheetsCount], ExcelSheetsCount);
                    END;
                  END;
                  //NC MDB07.2 < AKO

                  MESSAGE(Text001);
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               FOR ExcelSheetsCount := 1 TO 5 DO BEGIN
                 IsImportSheet[ExcelSheetsCount] := TRUE;
               END;

               StartAnalyseFromRow := 3;
             END;

      OnOpenPage=BEGIN
                   //NC NOS-26 > SPA
                   {
                   IF IsImportSheet[1] THEN BEGIN
                     RequestOptionsForm.StartDateField.ENABLED := TRUE;
                     RequestOptionsForm.EndDateField.ENABLED := TRUE;
                   END ELSE BEGIN
                     RequestOptionsForm.StartDateField.ENABLED := FALSE;
                     RequestOptionsForm.EndDateField.ENABLED := FALSE;
                   END;
                   }
                   DateFieldEnabled := IsImportSheet[1];
                   //NC NOS-26 < SPA
                 END;

    }
    CONTROLS
    {
      { 1101495000;;Container;
                  ContainerType=ContentArea }

      { 1101495011;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры];
                  GroupType=Group }

      { 1101495001;2;Field  ;
                  CaptionML=[ENU=Workbook File Name;
                             RUS=Рабочий Лист Имя Файла];
                  SourceExpr=FileName;
                  OnAssistEdit=BEGIN
                                 FileName := FileMgt.OpenFileDialog(ImportHeader,'.xlsx','');
                               END;
                                }

      { 1101495002;2;Field  ;
                  CaptionML=[ENU=First String for Analyse;
                             RUS=Первая Импортируемая Строка];
                  SourceExpr=StartAnalyseFromRow }

      { 1101495003;2;Field  ;
                  CaptionML=[ENU=Import "Cons. Data PreBuffer" Table;
                             RUS=Импортировать Проводки];
                  SourceExpr=IsImportSheet[1];
                  OnValidate=BEGIN
                               DateFieldEnabled := IsImportSheet[1];
                             END;
                              }

      { 1101495004;2;Field  ;
                  CaptionML=[ENU=Import "Buffer Deal" Table;
                             RUS=Импортировать Сделки];
                  SourceExpr=IsImportSheet[2] }

      { 1101495005;2;Field  ;
                  CaptionML=[ENU=Import "Buffer FA" Table;
                             RUS=Импортировать ОС];
                  SourceExpr=IsImportSheet[3] }

      { 1101495006;2;Field  ;
                  CaptionML=[ENU=Import "Buffer Customer" Table;
                             RUS=Импортировать Клиентов];
                  SourceExpr=IsImportSheet[4] }

      { 1101495007;2;Field  ;
                  CaptionML=[ENU=Import "Buffer Operation Closing" Table;
                             RUS=Импортировать Операции Закрытия];
                  SourceExpr=IsImportSheet[5] }

      { 1101495008;2;Field  ;
                  CaptionML=[ENU=Date of Open;
                             RUS=Дата Начала];
                  SourceExpr=StartDate;
                  Enabled=DateFieldEnabled }

      { 1101495009;2;Field  ;
                  CaptionML=[ENU=Date of End;
                             RUS=Дата Конца];
                  SourceExpr=EndDate;
                  Enabled=DateFieldEnabled }

      { 1101495010;2;Field  ;
                  CaptionML=[ENU=Sheets Names in Excel

                             1. Operations - "Cons. Data PreBuffer"

                             2. Deals - "Buffer Deal"

                             3. FA - "Buffer FA"

                             4. Customers - "Buffer Customer"

                             5. Operation Closing - "Buffer Operation Closing">;
                             RUS=Правила Именования Листов в Excel

                             1. Операции - "Cons. Data PreBuffer"

                             2. Сделки - "Buffer Deal"

                             3. ОС - "Buffer FA"

                             4. Клиенты - "Buffer Customer"

                             5. Операции Закрытия - "Buffer Operation Closing"];
                  MultiLine=Yes }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      BufferCustomer@1101495023 : Record 50045;
      ConsDataPreBuffer@1101495022 : Record 50007;
      BufferOperationClosing@1101495021 : Record 50068;
      BufferDeal@1101495020 : Record 50036;
      BufferFA@1101495019 : Record 50043;
      ExcelBuf@1101495018 : ARRAY [5] OF TEMPORARY Record 370;
      ConsSource@1101495017 : Record 50001;
      ConsSetup@1101495016 : Record 50000;
      ExcelSheets@1101495015 : ARRAY [5] OF Text[30];
      FileName@1101495014 : Text[250];
      TotalRecNo@1101495013 : Integer;
      RecNo@1101495012 : Integer;
      RowNo@1101495011 : Integer;
      ExcelSheetsCount@1101495010 : Integer;
      TempValueOfOption@1101495009 : Integer;
      StartAnalyseFromRow@1101495008 : Integer;
      NowDate@1101495007 : DateTime;
      Window@1101495006 : Dialog;
      StartDate@1101495005 : Date;
      EndDate@1101495004 : Date;
      IsImportSheet@1101495003 : ARRAY [6] OF Boolean;
      IDExtSystem@1101495002 : Code[2];
      IDExtLE@1101495001 : Code[15];
      LEMapping@1101495000 : Record 50075;
      Text001@1101495043 : TextConst 'ENU=Import finished;RUS=Импорт завершен';
      Text002@1101495042 : TextConst 'ENU=Analysing Data;RUS=Обработка листа';
      Text003@1101495041 : TextConst 'ENU=Analysing Excel Worksheet;RUS=Обработка листа Excel';
      Text004@1101495040 : TextConst 'ENU=Where are date in "Cons. Data PreBuffer" table that early than date of open;RUS="В таблице проводок существует проводка с датой, более ранней, чем указанная дата начала. Cтрока "';
      Text005@1101495039 : TextConst 'ENU=Where are date in "Cons. Data PreBuffer" table that elder than date of end;RUS="В таблице проводок существует проводка с датой, более поздней, чем указанная дата окончания. Cтрока "';
      Text006@1101495038 : TextConst 'ENU=There are no open date;RUS=Не введена дата начала.';
      Text007@1101495037 : TextConst 'ENU=There are no end date;RUS=Не введена дата окончания.';
      Text008@1101495036 : TextConst 'ENU=There are not correct value in cell;RUS=В ячейке';
      Text010@1101495035 : TextConst 'ENU=on the worksheet;RUS=на листе таблицы';
      Text011@1101495034 : TextConst 'ENU=:;RUS=содержится неверное значение:';
      Text012@1101495033 : TextConst 'ENU=Be sure that data type and format are correct;RUS=Убедитесь, что оно соответствует требованиям по типу и формату данных.';
      Text013@1101495032 : TextConst 'ENU=Table is empty. Import is impossible;RUS=Таблица пуста. Импорт невозможен.';
      Text015@1101495031 : TextConst 'ENU=Value of start string for import is biger then number of last row in worksheet;RUS=Значение первой импортируемой строки больше номера последней строки на листе';
      Text016@1101495030 : TextConst 'ENU=There are not correct value in cell %1 on the worksheet "%2": "%3". Be sure that data type and format are correct.;RUS=В ячейке %1 на листе таблицы "%2" содержится неверное значение: "%3". Убедитесь, что оно соответствует требованиям по типу и формату данных.';
      Text017@1101495029 : TextConst 'ENU=Processing Load Buffer;RUS=Обработка Буфера Загрузки';
      Text018@1101495028 : TextConst 'ENU=Searching Deleted Entries;RUS=Поиск Удаленных Проводок';
      Text019@1101495027 : TextConst 'ENU=Cannot Find %1 due External System %2.;RUS=Не настроен %1 для внешней системы %2.';
      Text020@1101495026 : TextConst 'ENU=There is more than one Consolidation Source due External System %1.;RUS=В системе настроено больше одного источника консолидации для внешней системы %1.';
      Text021@1101495025 : TextConst 'ENU=Cheking operations\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\;RUS=Проверка загружаемых проводок\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\';
      Text022@1101495024 : TextConst 'ENU=., `''-&?;RUS=., `''-&?';
      DateFieldEnabled@1101495044 : Boolean INDATASET;
      FileMgt@1101495045 : Codeunit 419;
      ConvertedFileName@1101495046 : Text;
      ImportHeader@1101495047 : TextConst 'ENU=Select Excel file for import.;RUS=Выберите файл Excel для загрузки.';

    LOCAL PROCEDURE ReadExcelSheet@1(NoOfSheet@1000000000 : Integer);
    BEGIN
      //Функция очищает Excel Buffer и  читает в него текущий лист
      //NC MDB07.2 >  AKO
      {
      ExcelBuf[ExcelSheetsCount].RESET;
      ExcelBuf[ExcelSheetsCount].DELETEALL;
      ExcelBuf[ExcelSheetsCount].OpenBook(FileName, ExcelSheet);
      ExcelBuf[ExcelSheetsCount].ReadSheet;
      }
      ExcelBuf[NoOfSheet].ReadSheet;
      //NC MDB07.2 < AKO
    END;

    LOCAL PROCEDURE AnalyzeData@2(ExcelSheet@1000000000 : Text[30];NoOfSheet@1000000007 : Integer);
    VAR
      GLPrebuffer@1000000003 : Record 50007;
      GLPrebufferCor@1000000002 : Record 50007;
      GLPrebuffer2@1000000004 : Record 50007;
      GLBuffer@1000000001 : Record 50008;
      TotalPreBuff@1000000005 : Integer;
      CurrPreBuffEntryNo@1000000006 : Integer;
    BEGIN
      //NC MDB07.1 > MP
      IF ExcelSheet = 'Cons. Data PreBuffer' THEN BEGIN
        GLPrebuffer.RESET;
        IF ExcelBuf[NoOfSheet].GET(StartAnalyseFromRow,20) THEN //Id External LE
          IDExtLE := AddTextDataToField(StartAnalyseFromRow, 20, 15);
        IF ExcelBuf[NoOfSheet].GET(StartAnalyseFromRow,19) THEN //Id External System
          IDExtSystem := AddTextDataToField(StartAnalyseFromRow, 19, 2);

        LEMapping.GET(IDExtSystem,IDExtLE);
        LEMapping.TESTFIELD("Company No.");

        ConsSource.RESET;
        ConsSource.CHANGECOMPANY(LEMapping."Company No.");
        ConsSource.SETRANGE("Import Format",ConsSource."Import Format"::FromExtSystem);
        ConsSource.SETRANGE("External System",IDExtSystem);
        IF NOT ConsSource.FINDFIRST THEN
          ERROR(STRSUBSTNO(Text019,ConsSource.TABLECAPTION));
        IF ConsSource.COUNT <> 1 THEN
          ERROR(STRSUBSTNO(Text020,IDExtSystem));

        GLPrebuffer.SETRANGE("External Id Legal Entity",IDExtLE);
        GLPrebuffer.SETRANGE("Id External System",IDExtSystem);
        GLPrebuffer.SETRANGE(Status,GLPrebuffer.Status::New);
        GLPrebuffer.SETRANGE("Document Date",StartDate,EndDate);

        IF GLPrebuffer.FINDSET THEN BEGIN
          Window.OPEN(Text017 + '...\' + '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\');
          TotalPreBuff := GLPrebuffer.COUNT;
          CurrPreBuffEntryNo := 0;
          REPEAT
            Window.UPDATE(1,ROUND(CurrPreBuffEntryNo / TotalPreBuff * 10000,1));
            CurrPreBuffEntryNo += 1;
            GLPrebufferCor.GET(GLPrebuffer."Entry No.");
            GLPrebufferCor.Status := GLPrebufferCor.Status::"Processing Canceled";
            GLPrebufferCor."Time Complete" := CURRENTDATETIME;
            GLPrebufferCor.MODIFY;
            //Добавить предупреждение в лог ошибок
          UNTIL GLPrebuffer.NEXT = 0;
          Window.CLOSE;
        END;
      END;
      //NC MDB07.1 < MP

      //Функция просматривает таблицу Excel Buffer и переносит из нее информацию в таблицу назначения
      Window.OPEN(
        Text002 +
        ' "' +
        ExcelSheet +
        '"...\' +  '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);

      NowDate := CURRENTDATETIME;

      //Определение количества строк в таблице
      IF ExcelBuf[NoOfSheet].FINDLAST THEN
        TotalRecNo := ExcelBuf[NoOfSheet]."Row No."
      ELSE
        ERROR(Text013);

      //Назначаем первую строку не заголовок
      IF StartAnalyseFromRow <= TotalRecNo THEN
        RecNo := StartAnalyseFromRow
      ELSE
        ERROR(Text015 + ' "' + ExcelSheet + '"');

      //Получение кодов измерений из настроект источника консолидации

      //Поменять логику.
      {
      ConsSetup.GET;
      ConsSetup.TESTFIELD("Main Consolidation Source");
      ConsSource.GET(ConsSetup."Main Consolidation Source");
      }

      WHILE RecNo <= TotalRecNo DO BEGIN
        Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

        //Выбор последовательности обработки в зависимости от листа
        CASE ExcelSheet OF

          'Cons. Data PreBuffer':
            BEGIN

              //Инициализация переменной и заполнение базовой информации
              ConsDataPreBuffer.INIT;
              ConsDataPreBuffer.VALIDATE("Entry No.", 0);
              ConsDataPreBuffer.VALIDATE("Time Creation", NowDate);
              //ConsDataPreBuffer.VALIDATE(Type, ConsDataPreBuffer.Type::New);
              ConsDataPreBuffer.VALIDATE(Status, ConsDataPreBuffer.Status::New);

              //NC MDB07.1 > MP
              // Document ID,Operation No.,Document Date,Removed,Remove Oper. No,Reposted
              //GLBuffer.SETCURRENTKEY("Document ID");
              GLBuffer.CHANGECOMPANY(LEMapping."Company No.");
              GLBuffer.SETRANGE("Document ID",AddTextDataToField(RecNo, 16, 50));
              GLBuffer.SETRANGE("Operation No.", 0);
              GLBuffer.SETRANGE(Removed, FALSE);
              GLBuffer.SETRANGE("Remove Oper. No", 0);
              GLBuffer.SETRANGE(Reposted, FALSE);
              IF GLBuffer.FINDFIRST THEN
                ConsDataPreBuffer.Type := ConsDataPreBuffer.Type::Modify
              ELSE BEGIN
                GLPrebuffer2.SETCURRENTKEY(Status,"Id External System","Id Legal Entity","Document ID","Operation No.");
                GLPrebuffer2.SETRANGE("Document ID",AddTextDataToField(RecNo, 16, 50));
                GLPrebuffer2.SETRANGE(Status,GLPrebuffer2.Status::New);
                IF GLPrebuffer2.FINDFIRST THEN
                  ConsDataPreBuffer.Type := ConsDataPreBuffer.Type::Modify
                ELSE
                  ConsDataPreBuffer.Type := ConsDataPreBuffer.Type::New;
              END;
              //NC MDB07.1 < MP

              ConsDataPreBuffer.VALIDATE("Dimension 1 Code", ConsSource."Shortcut Dimension 1 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 2 Code", ConsSource."Shortcut Dimension 2 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 3 Code", ConsSource."Shortcut Dimension 3 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 4 Code", ConsSource."Shortcut Dimension 4 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 5 Code", ConsSource."Shortcut Dimension 5 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 6 Code", ConsSource."Shortcut Dimension 6 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 7 Code", ConsSource."Shortcut Dimension 7 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 8 Code", ConsSource."Shortcut Dimension 8 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 9 Code", ConsSource."Shortcut Dimension 9 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 10 Code", ConsSource."Shortcut Dimension 10 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 11 Code", ConsSource."Shortcut Dimension 11 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 12 Code", ConsSource."Shortcut Dimension 12 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 13 Code", ConsSource."Shortcut Dimension 13 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 14 Code", ConsSource."Shortcut Dimension 14 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 15 Code", ConsSource."Shortcut Dimension 15 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 16 Code", ConsSource."Shortcut Dimension 16 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 17 Code", ConsSource."Shortcut Dimension 17 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 18 Code", ConsSource."Shortcut Dimension 18 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 19 Code", ConsSource."Shortcut Dimension 19 Code");
              ConsDataPreBuffer.VALIDATE("Dimension 20 Code", ConsSource."Shortcut Dimension 20 Code");

              //Заполнение полей записи в зависимости от столбца
              ConsDataPreBuffer.VALIDATE("Document Type", AddTextDataToField1(RecNo, 1, 30));
              ConsDataPreBuffer.VALIDATE("Document No.", AddTextDataToField1(RecNo, 2, 20));

              //NC MDB07.2 >  AKO
              //Проверка на наличие документов, не попадающих в вилку дат создания
              IF AddDateDataToField(RecNo, 3) > EndDate THEN
                ERROR(Text005 + FORMAT(RecNo));
              IF AddDateDataToField(RecNo, 3) < StartDate THEN
                ERROR(Text004 + FORMAT(RecNo));
              ConsDataPreBuffer.VALIDATE("Document Date", AddDateDataToField(RecNo, 3));
              //NC MDB07.2 < AKO

              ConsDataPreBuffer.VALIDATE("Debit G/L Account No.", AddTextDataToField2(RecNo, 4, 30));
              ConsDataPreBuffer.VALIDATE("Credit G/L Account No.", AddTextDataToField2(RecNo, 5, 20));
              ConsDataPreBuffer.VALIDATE(Description, AddTextDataToField1(RecNo, 6, 50));
              ConsDataPreBuffer.VALIDATE("Description 2", AddTextDataToField1(RecNo, 7, 50));
              ConsDataPreBuffer.VALIDATE("Amount (LCY)", AddDecimalDataToField(RecNo, 8));
              ConsDataPreBuffer.VALIDATE("Debit Currency Code", AddTextDataToField(RecNo, 9, 10));
              ConsDataPreBuffer.VALIDATE("Debit Original Amount", AddDecimalDataToField(RecNo, 10));
              ConsDataPreBuffer.VALIDATE("Credit Currency Code", AddTextDataToField(RecNo, 11, 10));
              ConsDataPreBuffer.VALIDATE("Credit Original Amount", AddDecimalDataToField(RecNo, 12));
              ConsDataPreBuffer.VALIDATE("FA Operation", AddBooleanDataToField(RecNo, 13));
              ConsDataPreBuffer.VALIDATE(Quantity, AddDecimalDataToField(RecNo, 14));
              ConsDataPreBuffer.VALIDATE("Original Doc. Date", AddDateDataToField(RecNo, 15));
              ConsDataPreBuffer.VALIDATE("Document ID", AddTextDataToField(RecNo, 16, 50));
              ConsDataPreBuffer.VALIDATE("Amount Difference", AddBooleanDataToField(RecNo, 17));
              ConsDataPreBuffer.VALIDATE("Due Date", AddDateDataToField(RecNo, 18));
              ConsDataPreBuffer.VALIDATE("Id External System", AddTextDataToField(RecNo, 19, 2));
              ConsDataPreBuffer.VALIDATE("External Id Legal Entity", AddTextDataToField(RecNo, 20, 15));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 1 Value Code", AddTextDataToField(RecNo, 21, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 1 Value Code", AddTextDataToField(RecNo, 22, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 2 Value Code", AddTextDataToField(RecNo, 23, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 2 Value Code", AddTextDataToField(RecNo, 24, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 3 Value Code", AddTextDataToField(RecNo, 25, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 3 Value Code", AddTextDataToField(RecNo, 26, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 4 Value Code", AddTextDataToField(RecNo, 27, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 4 Value Code", AddTextDataToField(RecNo, 28, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 5 Value Code", AddTextDataToField(RecNo, 29, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 5 Value Code", AddTextDataToField(RecNo, 30, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 6 Value Code", AddTextDataToField(RecNo, 31, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 6 Value Code", AddTextDataToField(RecNo, 32, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 7 Value Code", AddTextDataToField(RecNo, 33, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 7 Value Code", AddTextDataToField(RecNo, 34, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 8 Value Code", AddTextDataToField(RecNo, 35, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 8 Value Code", AddTextDataToField(RecNo, 36, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 19 Value Code", AddTextDataToField(RecNo, 37, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 19 Value Code", AddTextDataToField(RecNo, 38, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 20 Value Code", AddTextDataToField(RecNo, 39, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 20 Value Code", AddTextDataToField(RecNo, 40, 20));
              ConsDataPreBuffer.VALIDATE("Debit Dimension 9 Value Code", AddTextDataToField(RecNo, 41, 20));
              ConsDataPreBuffer.VALIDATE("Credit Dimension 9 Value Code", AddTextDataToField(RecNo, 42, 20));

              ConsDataPreBuffer.INSERT(TRUE);

            END;

          'Buffer Deal':
            BEGIN
              //Инициализация переменной и заполнение базовой информации
              BufferDeal.INIT;
              BufferDeal.VALIDATE("Entry No.", 0);
              BufferDeal.VALIDATE("Time Creation", NowDate);
              BufferDeal.VALIDATE(Type, ConsDataPreBuffer.Type::New);
              BufferDeal.VALIDATE(Status, ConsDataPreBuffer.Status::New);

              //Заполнение полей записи в зависимости от столбца
              BufferDeal.VALIDATE("Id External System", AddTextDataToField(RecNo, 1, 2));
              BufferDeal.VALIDATE("Deal ID", AddTextDataToField(RecNo, 2, 20));
              BufferDeal.VALIDATE("Type Deal", AddTextDataToField(RecNo, 3, 20));
              BufferDeal.VALIDATE("External Company No.", AddTextDataToField(RecNo, 4, 15));
              BufferDeal.VALIDATE(Book, AddTextDataToField(RecNo, 5, 20));
              BufferDeal.VALIDATE("Profit Center", AddTextDataToField(RecNo, 6, 20));
              BufferDeal.VALIDATE("Type of Loan", AddOptionDataToField(RecNo, 7));
              BufferDeal.VALIDATE("Customer No.", AddTextDataToField(RecNo, 8, 20));
              BufferDeal.VALIDATE("Agreement Date", AddDateDataToField(RecNo, 9));
              BufferDeal.VALIDATE("Agreement No.", AddTextDataToField(RecNo, 10, 20));
              BufferDeal.VALIDATE("Trade Date", AddDateDataToField(RecNo, 11));
              BufferDeal.VALIDATE("Type of Collateral", AddTextDataToField(RecNo, 12, 20));
              BufferDeal.VALIDATE("Loan Agreement No.", AddTextDataToField(RecNo, 13, 20));
              BufferDeal.VALIDATE(Currency, AddTextDataToField(RecNo, 14, 10));
              BufferDeal.VALIDATE("Interest Rate Fixing Rules", AddOptionDataToField(RecNo, 15));
              BufferDeal.VALIDATE("Floating Rate Type 1", AddTextDataToField(RecNo, 16, 20));
              BufferDeal.VALIDATE("Floating Rate Type 2", AddTextDataToField(RecNo, 17, 20));
              BufferDeal.VALIDATE("Fixed Interest Rate 1", AddDecimalDataToField(RecNo, 18));
              BufferDeal.VALIDATE("Fixed Interest Rate 2", AddDecimalDataToField(RecNo, 19));
              BufferDeal.VALIDATE("Renegotiation History", AddBooleanDataToField(RecNo, 20));
              BufferDeal.VALIDATE(Covenants, AddBooleanDataToField(RecNo, 21));
              BufferDeal.VALIDATE("Payment Currency", AddTextDataToField(RecNo, 22, 10));
              BufferDeal.VALIDATE("Payment Currency Rate", AddDecimalDataToField(RecNo, 23));
              BufferDeal.VALIDATE("Term Type", AddOptionDataToField(RecNo, 24));
              BufferDeal.VALIDATE("Market Type", AddOptionDataToField(RecNo, 25));
              BufferDeal.VALIDATE("Price per FI", AddDecimalDataToField(RecNo, 26));
              BufferDeal.VALIDATE(Quantity, AddDecimalDataToField(RecNo, 27));
              BufferDeal.VALIDATE("Discount/Premium", AddDecimalDataToField(RecNo, 28));
              BufferDeal.VALIDATE("CCY Buy", AddTextDataToField(RecNo, 29, 10));
              BufferDeal.VALIDATE("CCY Buy Amount", AddDecimalDataToField(RecNo, 30));
              BufferDeal.VALIDATE("CCY Sell", AddTextDataToField(RecNo, 31, 10));
              BufferDeal.VALIDATE("CCY Sell Amount", AddDecimalDataToField(RecNo, 32));
              BufferDeal.VALIDATE("Settlement Type", AddOptionDataToField(RecNo, 33));
              BufferDeal.VALIDATE("Trade Direction", AddOptionDataToField(RecNo, 34));
              BufferDeal.VALIDATE("First Ch. Flow Date,Issue Date", AddDateDataToField(RecNo, 35));
              BufferDeal.VALIDATE("Delivery Date", AddDateDataToField(RecNo, 36));
              BufferDeal.VALIDATE("Underlying FI No", AddTextDataToField(RecNo, 37, 20));
              BufferDeal.VALIDATE("Financial instrument No.", AddTextDataToField(RecNo, 38, 20));
              BufferDeal.VALIDATE("Start Date Buy", AddDateDataToField(RecNo, 39));
              BufferDeal.VALIDATE("Maturity Date Buy", AddDateDataToField(RecNo, 40));
              BufferDeal.VALIDATE("Margin 1", AddDecimalDataToField(RecNo, 41));
              BufferDeal.VALIDATE("Rate Convention 1", AddDecimalDataToField(RecNo, 42));
              BufferDeal.VALIDATE("Start Date Sell", AddDateDataToField(RecNo, 43));
              BufferDeal.VALIDATE("Maturity Date Sell", AddDateDataToField(RecNo, 44));
              BufferDeal.VALIDATE("Margin 2", AddDecimalDataToField(RecNo, 45));
              BufferDeal.VALIDATE("Rate Convention 2", AddDecimalDataToField(RecNo, 46));
              BufferDeal.VALIDATE("Maturity Date", AddDateDataToField(RecNo, 47));
              BufferDeal.VALIDATE("Fee Type", AddOptionDataToField(RecNo, 48));
              BufferDeal.VALIDATE("Fixed Fee Amount", AddDecimalDataToField(RecNo, 49));
              BufferDeal.VALIDATE("Fee Currency", AddTextDataToField(RecNo, 50, 10));
              BufferDeal.VALIDATE("Standard Fee Rate", AddDecimalDataToField(RecNo, 51));
              BufferDeal.VALIDATE("Payment frequency Buy", AddOptionDataToField(RecNo, 52));
              BufferDeal.VALIDATE("Payment frequency Sell", AddOptionDataToField(RecNo, 53));
              BufferDeal.VALIDATE("Amount 1 (principal)", AddDecimalDataToField(RecNo, 54));
              BufferDeal.VALIDATE("Amount 2 (principal)", AddDecimalDataToField(RecNo, 55));
              BufferDeal.VALIDATE("Accrued Coupon 1", AddDecimalDataToField(RecNo, 56));
              BufferDeal.VALIDATE("Accrued Coupon 2", AddDecimalDataToField(RecNo, 57));
              BufferDeal.VALIDATE("Fixed fee Payment Date", AddDateDataToField(RecNo, 58));
              BufferDeal.VALIDATE("Deal Relation ID", AddTextDataToField(RecNo, 59, 20));
              BufferDeal.VALIDATE(Flag, AddIntegerDataToField(RecNo, 60));
              BufferDeal.VALIDATE("Contract Flag", AddIntegerDataToField(RecNo, 61));
              BufferDeal.VALIDATE(Number, AddTextDataToField(RecNo, 62, 20));
              BufferDeal.VALIDATE("Book Rt.", AddTextDataToField(RecNo, 63, 20));

              BufferDeal.INSERT(TRUE);
            END;

          'Buffer FA':
            BEGIN
              //Инициализация переменной и заполнение базовой информации
              BufferFA.INIT;
              BufferFA.VALIDATE("Entry No.", 0);
              BufferFA.VALIDATE("Time Creation", NowDate);
              BufferFA.VALIDATE(Type, ConsDataPreBuffer.Type::New);
              BufferFA.VALIDATE(Status, ConsDataPreBuffer.Status::New);

              //Заполнение полей записи в зависимости от столбца
              BufferFA.VALIDATE("Id External System", AddTextDataToField(RecNo, 1, 2));
              BufferFA.VALIDATE("External Id Legal Entity", AddTextDataToField(RecNo, 2, 15));
              BufferFA.VALIDATE("No.", AddTextDataToField(RecNo, 3, 20));
              BufferFA.VALIDATE("Profit Center", AddTextDataToField(RecNo, 4, 20));
              BufferFA.VALIDATE("FA Class Code", AddTextDataToField(RecNo, 5, 10));
              BufferFA.VALIDATE(Name, AddTextDataToField(RecNo, 6, 100));
              BufferFA.VALIDATE("Type FA", AddOptionDataToField(RecNo, 7));
              BufferFA.VALIDATE("No of Depreciation Months", AddIntegerDataToField(RecNo, 8));

              BufferFA.INSERT(TRUE);
            END;

          'Buffer Customer':
            BEGIN

              //Инициализация переменной и заполнение базовой информации
              BufferCustomer.INIT;
              BufferCustomer.VALIDATE("Entry No.", 0);
              BufferCustomer.VALIDATE("Time Creation", NowDate);
              BufferCustomer.VALIDATE(Type, ConsDataPreBuffer.Type::New);
              BufferCustomer.VALIDATE(Status, ConsDataPreBuffer.Status::New);

              //Заполнение полей записи в зависимости от столбца
              BufferCustomer.VALIDATE("Id External System", AddTextDataToField(RecNo, 1, 2));
              BufferCustomer.VALIDATE("No.", AddTextDataToField(RecNo, 2, 20));
              BufferCustomer.VALIDATE("Relationship to the Group", AddBooleanDataToField(RecNo, 3));
              BufferCustomer.VALIDATE("Counterparty Category", AddOptionDataToField(RecNo, 4));
              BufferCustomer.VALIDATE(Name, AddTextDataToField(RecNo, 5, 100));
              BufferCustomer.VALIDATE("Counterparty Type", AddOptionDataToField(RecNo, 6));
              BufferCustomer.VALIDATE("Country of Registration", AddTextDataToField(RecNo, 7, 10));
              BufferCustomer.VALIDATE(Industry, AddTextDataToField(RecNo, 8, 10));
              BufferCustomer.VALIDATE("Customer Segment", AddTextDataToField(RecNo, 9, 20));
              BufferCustomer.VALIDATE("Customer ID", AddTextDataToField(RecNo, 10, 20));

              BufferCustomer.INSERT(TRUE);
            END;

          'Buffer Operation Closing':
            BEGIN
              //Инициализация переменной и заполнение базовой информации
              BufferOperationClosing.INIT;
              BufferOperationClosing.VALIDATE("Entry No.", 0);
              BufferOperationClosing.VALIDATE("Time Creation", NowDate);
              BufferOperationClosing.VALIDATE(Type, ConsDataPreBuffer.Type::New);
              BufferOperationClosing.VALIDATE(Status, ConsDataPreBuffer.Status::New);

              //Заполнение полей записи в зависимости от столбца
              BufferOperationClosing.VALIDATE("Id External System", AddTextDataToField(RecNo, 1, 2));
              BufferOperationClosing.VALIDATE("Document ID", AddTextDataToField(RecNo, 2, 50));
              BufferOperationClosing.VALIDATE("Closing Date", AddDateDataToField(RecNo, 3));

              BufferOperationClosing.INSERT(TRUE);

            END;
        END;
        RecNo += 1;
      END;

      Window.CLOSE;
      //NC MDB07.1 > MP
      {
      IF ExcelSheet = 'Cons. Data PreBuffer' THEN BEGIN
        //GLBuffer.SETRANGE("Document ID",AddTextDataToField(RecNo, 16, 50));
        //GLBuffer.SETRANGE("Operation No.", 0);
        GLBuffer.RESET;
        GLBuffer.CHANGECOMPANY(LEMapping."Company No.");
        GLBuffer.SETRANGE(Removed, FALSE);
        GLBuffer.SETRANGE("Remove Oper. No", 0);
        GLBuffer.SETRANGE(Reposted, FALSE);
        GLBuffer.SETRANGE("Document Date",StartDate,EndDate);
        GLBuffer.SETRANGE("Cons. Source Code",ConsSource.Code);
        IF GLBuffer.FINDSET THEN BEGIN
          Window.OPEN(Text018 + '...\' + '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\');
          TotalPreBuff := GLBuffer.COUNT;
          CurrPreBuffEntryNo := 0;
          REPEAT
            Window.UPDATE(1,ROUND(CurrPreBuffEntryNo / TotalPreBuff * 10000,1));
            CurrPreBuffEntryNo += 1;
            GLPrebuffer2.SETRANGE(Status,GLPrebuffer2.Status::New);
            GLPrebuffer2.SETRANGE("Document ID",GLBuffer."Document ID");
            GLPrebuffer2.SETRANGE("Operation No.",GLBuffer."Operation No.");
            GLPrebuffer2.SETRANGE("Document Date",StartDate,EndDate);
            IF NOT GLPrebuffer2.FINDFIRST THEN BEGIN
              GLPrebufferCor.INIT;
              GLPrebufferCor.TRANSFERFIELDS(GLBuffer);
              GLPrebufferCor."Entry No." := 0;
              GLPrebufferCor."Time Creation" := NowDate;
              GLPrebufferCor.Type := GLPrebufferCor.Type::Delete;
              GLPrebufferCor.Status := GLPrebufferCor.Status::New;
              GLPrebufferCor."Document ID" := GLPrebufferCor."Document ID";
              GLPrebufferCor."Operation No." := GLPrebufferCor."Operation No.";
              GLPrebufferCor."Id External System" := IDExtSystem;
              GLPrebufferCor."External Id Legal Entity" := IDExtLE;
              GLPrebufferCor.INSERT(TRUE);
            END;
          UNTIL GLBuffer.NEXT = 0;
          Window.CLOSE;
        END;
      END;
      }
      //NC MDB07.1 < MP
    END;

    PROCEDURE PostError@1000000021(Row@1000000000 : Integer;Coll@1000000001 : Text[10];BadVal@1000000002 : Text[250];ExcelNameOfSheet@1000000003 : Text[30]);
    BEGIN
      //Функция формирует текст ошибки формата данных, включающий коды строки и столбца в Excel и самого значения
      {ERROR(Text008 +
            ' ' + FORMAT(Coll) +
            FORMAT(Row) +
            ' ' + Text010 +
            ' "' + ExcelSheet +
            '" ' + Text011 + ' "' + BadVal + '".' +
            ' ' + Text012);
      }
      ERROR(STRSUBSTNO(Text016, FORMAT(Coll) + FORMAT(Row), ExcelNameOfSheet, BadVal));
    END;

    PROCEDURE AddIntegerDataToField@1000000006(Row@1000000000 : Integer;Col@1000000001 : Integer) OutputIntVal : Integer;
    VAR
      IntTempVal@1000000003 : Integer;
    BEGIN
      //Функция производит проверку на соответствие входящих данных необходимому типу
      IF ExcelBuf[ExcelSheetsCount].GET(Row, Col) THEN BEGIN
        IF NOT EVALUATE(OutputIntVal, ExcelBuf[ExcelSheetsCount]."Cell Value as Text") THEN
          PostError(Row, ExcelBuf[ExcelSheetsCount].xlColID,
                    ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
                    ExcelSheets[ExcelSheetsCount]);
      END ELSE
        OutputIntVal := 0;
    END;

    PROCEDURE AddTextDataToField@1000000010(Row@1000000002 : Integer;Col@1000000001 : Integer;MaxLength@1000000000 : Integer) OutputTextVal : Text[250];
    BEGIN
      //Функция производит проверку на соответствие входящих данных необходимому типу
      IF ExcelBuf[ExcelSheetsCount].GET(Row, Col) THEN
        IF STRLEN(ExcelBuf[ExcelSheetsCount]."Cell Value as Text") <= MaxLength THEN
          OutputTextVal := ExcelBuf[ExcelSheetsCount]."Cell Value as Text"
        ELSE
          PostError(Row, ExcelBuf[ExcelSheetsCount].xlColID,
                    ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
                    ExcelSheets[ExcelSheetsCount])
      ELSE
        OutputTextVal := '';
    END;

    PROCEDURE AddDecimalDataToField@1000000012(Row@1000000000 : Integer;Col@1000000001 : Integer) OutputDecimalValue : Decimal;
    BEGIN
      //Функция производит проверку на соответствие входящих данных необходимому типу
      IF ExcelBuf[ExcelSheetsCount].GET(Row, Col) THEN BEGIN
        OutputDecimalValue := GetNumber(ExcelBuf[ExcelSheetsCount]."Cell Value as Text");
      END ELSE
        OutputDecimalValue := 0;
    END;

    PROCEDURE AddBooleanDataToField@1000000013(Row@1000000000 : Integer;Col@1000000001 : Integer) OutputBooleanVal : Boolean;
    BEGIN
      //Функция производит проверку на соответствие входящих данных необходимому типу
      IF ExcelBuf[ExcelSheetsCount].GET(Row, Col) THEN BEGIN
        IF NOT EVALUATE(OutputBooleanVal, ExcelBuf[ExcelSheetsCount]."Cell Value as Text") THEN
          PostError(Row,
                    ExcelBuf[ExcelSheetsCount].xlColID,
                    ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
                    ExcelSheets[ExcelSheetsCount]);
      END ELSE
        OutputBooleanVal := FALSE;
    END;

    PROCEDURE AddDateDataToField@1000000015(Row@1000000000 : Integer;Col@1000000001 : Integer) OutputDateVal : Date;
    BEGIN
      //Функция производит проверку на соответствие входящих данных необходимому типу
      IF ExcelBuf[ExcelSheetsCount].GET(Row, Col) THEN BEGIN
        IF NOT EVALUATE(OutputDateVal, ExcelBuf[ExcelSheetsCount]."Cell Value as Text") THEN
          PostError(Row,
                    ExcelBuf[ExcelSheetsCount].xlColID,
                    ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
                    ExcelSheets[ExcelSheetsCount]);
      END ELSE
        OutputDateVal := 0D;
    END;

    PROCEDURE AddOptionDataToField@1000000001(Row@1000000000 : Integer;Col@1000000001 : Integer) OutputOptionVal : Integer;
    BEGIN
      //Функция производит проверку на соответствие входящих данных необходимому типу
      IF ExcelBuf[ExcelSheetsCount].GET(Row, Col) THEN BEGIN
        IF NOT EVALUATE(OutputOptionVal, ExcelBuf[ExcelSheetsCount]."Cell Value as Text") THEN
          PostError(Row,
                    ExcelBuf[ExcelSheetsCount].xlColID,
                    ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
                    ExcelSheets[ExcelSheetsCount]);
      END ELSE
        OutputOptionVal := 0;
    END;

    PROCEDURE GetNumber@1000000002(txtNumber@1000000000 : Text[250]) : Decimal;
    VAR
      txtTempNumber@1000000001 : Text[250];
      decResult@1000000002 : Decimal;
      intPos@1000000003 : Integer;
    BEGIN
      // Выделяем число. Если число формата 1,000.00 , то надо сделать 1000,00
      // Т.е. надо убрать все запятые, а точку превратить в запятую
      txtTempNumber := txtNumber;

      // Убираем пробелы
      WHILE (STRPOS(txtTempNumber, ' ') <> 0) DO BEGIN
        intPos := STRPOS(txtTempNumber, ' ');
        txtTempNumber := COPYSTR(txtTempNumber, 1, intPos-1) + COPYSTR(txtTempNumber, intPos+1);
      END;

      IF EVALUATE(decResult, txtTempNumber) THEN
        EXIT(decResult);

      //Проверяем на установленный в системе десятичный разделитель
      IF COPYSTR(FORMAT(1.5),2,1) = ',' THEN BEGIN
        // Убираем запятые
        WHILE (STRPOS(txtTempNumber, ',') <> 0) DO BEGIN
          intPos := STRPOS(txtTempNumber,',');
          txtTempNumber := COPYSTR(txtTempNumber, 1, intPos-1) + COPYSTR(txtTempNumber, intPos+1);
        END;

        // Меняем точку на запятую
        intPos := STRPOS(txtTempNumber, '.');
        IF intPos <> 0 THEN
          txtTempNumber := COPYSTR(txtTempNumber, 1, intPos-1) + ',' + COPYSTR(txtTempNumber, intPos+1);

        IF EVALUATE(decResult, txtTempNumber) THEN
          EXIT(decResult)
        ELSE
           PostError(ExcelBuf[ExcelSheetsCount]."Row No.",
                     ExcelBuf[ExcelSheetsCount].xlColID,
                     ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
                     ExcelSheets[ExcelSheetsCount]);
      END ELSE BEGIN
        // Убираем точки
        WHILE (STRPOS(txtTempNumber, '.') <> 0) DO BEGIN
          intPos := STRPOS(txtTempNumber,',');
          txtTempNumber := COPYSTR(txtTempNumber, 1, intPos-1) + COPYSTR(txtTempNumber, intPos+1);
        END;

        // Меняем запятую на точку
        intPos := STRPOS(txtTempNumber, ',');
        IF intPos <> 0 THEN
          txtTempNumber := COPYSTR(txtTempNumber, 1, intPos-1) + '.' + COPYSTR(txtTempNumber, intPos+1);

        IF EVALUATE(decResult, txtTempNumber) THEN
          EXIT(decResult)
        ELSE
          PostError(ExcelBuf[ExcelSheetsCount]."Row No.",
                    ExcelBuf[ExcelSheetsCount].xlColID,
                    ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
                    ExcelSheets[ExcelSheetsCount]);
      END;
    END;

    PROCEDURE CheckDataOnSheet@1000000019(NoOfSheet@1000000000 : Integer);
    BEGIN
      //NC MDB07.2 >  AKO
      //Функция производит проверку загруженных операций на соотствие вилке дат, заданных на рекрест форме

      Window.OPEN(Text021);
      Window.UPDATE(1,0);

      //Определение количества строк в таблице
      IF ExcelBuf[NoOfSheet].FINDLAST THEN
        TotalRecNo := ExcelBuf[NoOfSheet]."Row No."
      ELSE
        ERROR(Text013);

      //Назначаем первую строку не заголовок
      IF StartAnalyseFromRow <= TotalRecNo THEN
        RecNo := StartAnalyseFromRow
      ELSE
        ERROR(Text015 + ' "' + ExcelSheets[NoOfSheet] + '"');

      //Прогон теста по ячейкам
      WHILE RecNo <= TotalRecNo DO BEGIN
        Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

        IF AddDateDataToField(RecNo, 3) > EndDate THEN
          ERROR(Text005 + FORMAT(RecNo));
        IF AddDateDataToField(RecNo, 3) < StartDate THEN
          ERROR(Text004 + FORMAT(RecNo));

        RecNo += 1;
      END;

      //NC MDB07.2 < AKO
    END;

    PROCEDURE AddTextDataToField1@1000000000(Row@1000000002 : Integer;Col@1000000001 : Integer;MaxLength@1000000000 : Integer) OutputTextVal : Text[250];
    BEGIN
      //Функция производит проверку на соответствие входящих данных необходимому типу
      IF ExcelBuf[ExcelSheetsCount].GET(Row, Col) THEN
        IF STRLEN(ExcelBuf[ExcelSheetsCount]."Cell Value as Text") <= MaxLength THEN
          OutputTextVal := ExcelBuf[ExcelSheetsCount]."Cell Value as Text"
        ELSE
          OutputTextVal := COPYSTR(ExcelBuf[ExcelSheetsCount]."Cell Value as Text",1,MaxLength)
          //PostError(Row, ExcelBuf[ExcelSheetsCount].xlColID,
          //          ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
          //          ExcelSheets[ExcelSheetsCount])
      ELSE
        OutputTextVal := '';
    END;

    PROCEDURE AddTextDataToField2@1000000003(Row@1000000002 : Integer;Col@1000000001 : Integer;MaxLength@1000000000 : Integer) OutputTextVal : Text[250];
    BEGIN
      //Функция производит проверку на соответствие входящих данных необходимому типу
      IF ExcelBuf[ExcelSheetsCount].GET(Row, Col) THEN
        IF STRLEN(DELCHR(ExcelBuf[ExcelSheetsCount]."Cell Value as Text",'========',Text022)) <= MaxLength THEN
          OutputTextVal := DELCHR(ExcelBuf[ExcelSheetsCount]."Cell Value as Text",'========',Text022)
        ELSE
          PostError(Row, ExcelBuf[ExcelSheetsCount].xlColID,
                    ExcelBuf[ExcelSheetsCount]."Cell Value as Text",
                    ExcelSheets[ExcelSheetsCount])
      ELSE
        OutputTextVal := '';
    END;

    LOCAL PROCEDURE GetConvertedFileName@1101495001() : Text;
    VAR
      ExcelMgt@1101495000 : Codeunit 12416;
    BEGIN
      //NC NOS-26 > SPA
      // если исходный файл в новом формате, то использовать его
      IF FileMgt.GetExtension(FileName) = 'xlsx' THEN
        EXIT(FileName);

      // если файл уже был конвертирован, то вернуть имя конвертированного файла
      IF ConvertedFileName <> '' THEN
        EXIT(ConvertedFileName);

      // конвертировать файл в новый формат
      ConvertedFileName := ExcelMgt.ConvertToOpenXML(FileName);
      EXIT(ConvertedFileName);
      //NC NOS-26 < SPA
    END;

    BEGIN
    {
      NC MDB07 AKO Создан отчет
      NC MDB07.2 AKO Предварительная проверка операций на валидность дат и наличие листов, косметика
      NC MDB07.3 AKO Исправлена ошибка при проверке листов на наличие
      -------------------------
      NC NOS-26 SPA Миграция на NAV2017
    }
    END.
  }
  RDLDATA
  {
  }
}

