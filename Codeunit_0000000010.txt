OBJECT Codeunit 10 Type Helper
{
  OBJECT-PROPERTIES
  {
    Date=23.02.17;
    Time=12:00:00;
    Version List=NAVW110.00.00.15601;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UnsupportedTypeErr@1000 : TextConst 'ENU=The Type is not supported by the Evaluate function.;RUS=Тип не поддерживается функцией Evaluate.';
      KeyDoesNotExistErr@1001 : TextConst 'ENU=The requested key does not exist.;RUS=Запрошенный ключ не существует.';
      InvalidMonthErr@1002 : TextConst 'ENU=An invalid month was specified.;RUS=Указан недопустимый месяц.';
      StringTooLongErr@1003 : TextConst '@@@="%1=a number, e.g. 1024";ENU=This function only allows strings of length up to %1.;RUS=Эта функция поддерживает строки длиной не более %1.';

    PROCEDURE Evaluate@3(VAR Variable@1000 : Variant;String@1001 : Text;Format@1002 : Text;CultureName@1003 : Text) : Boolean;
    BEGIN
      // Variable is return type containing the string value
      // String is input to evaluate
      // Format is in format "MM/dd/yyyy" only supported on date, search MSDN for more details ("CultureInfo.Name Property")
      // CultureName is in format "en-US", search MSDN for more details ("Custom Date and Time Format Strings")
      CASE TRUE OF
        Variable.ISDATE:
          EXIT(TryEvaluateDate(String,Format,CultureName,Variable));
        Variable.ISDECIMAL:
          EXIT(TryEvaluateDecimal(String,CultureName,Variable));
        Variable.ISINTEGER:
          EXIT(TryEvaluateInteger(String,CultureName,Variable));
        ELSE
          ERROR(UnsupportedTypeErr);
      END;
    END;

    LOCAL PROCEDURE TryEvaluateDate@12(DateText@1000 : Text;Format@1001 : Text;CultureName@1004 : Text;VAR EvaluatedDate@1006 : Date) : Boolean;
    VAR
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDateTime@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTimeStyles@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeStyles";
      XMLConvert@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlConvert";
    BEGIN
      IF (Format = '') AND (CultureName = '') THEN
        DotNetDateTime := XMLConvert.ToDateTimeOffset(DateText).DateTime
      ELSE BEGIN
        DotNetDateTime := DotNetDateTime.DateTime(0);
        CultureInfo := CultureInfo.GetCultureInfo(CultureName);
        CASE Format OF
          '':
            IF NOT DotNetDateTime.TryParse(DateText,CultureInfo,DateTimeStyles.None,DotNetDateTime) THEN
              EXIT(FALSE);
          ELSE
            IF NOT DotNetDateTime.TryParseExact(DateText,Format,CultureInfo,DateTimeStyles.None,DotNetDateTime) THEN
              EXIT(FALSE);
        END;
      END;

      EvaluatedDate := DMY2DATE(DotNetDateTime.Day,DotNetDateTime.Month,DotNetDateTime.Year);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TryEvaluateDecimal@13(DecimalText@1000 : Text;CultureName@1001 : Text;VAR EvaluatedDecimal@1006 : Decimal) : Boolean;
    VAR
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDecimal@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Decimal";
      NumberStyles@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberStyles";
    BEGIN
      EvaluatedDecimal := 0;
      IF DotNetDecimal.TryParse(DecimalText,NumberStyles.Number,CultureInfo.GetCultureInfo(CultureName),EvaluatedDecimal) THEN
        EXIT(TRUE);
      EXIT(FALSE)
    END;

    LOCAL PROCEDURE TryEvaluateInteger@21(IntegerText@1000 : Text;CultureName@1001 : Text;VAR EvaluatedInteger@1006 : Integer) : Boolean;
    VAR
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetInteger@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Int32";
      NumberStyles@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberStyles";
    BEGIN
      EvaluatedInteger := 0;
      IF DotNetInteger.TryParse(IntegerText,NumberStyles.Number,CultureInfo.GetCultureInfo(CultureName),EvaluatedInteger) THEN
        EXIT(TRUE);
      EXIT(FALSE)
    END;

    PROCEDURE GetLocalizedMonthToInt@22(Month@1000 : Text) : Integer;
    VAR
      TestMonth@1002 : Text;
      Result@1001 : Integer;
    BEGIN
      Month := LOWERCASE(Month);

      FOR Result := 1 TO 12 DO BEGIN
        TestMonth := LOWERCASE(FORMAT(CALCDATE(STRSUBSTNO('<CY+%1M>',Result)),0,'<Month Text>'));
        IF Month = TestMonth THEN
          EXIT(Result);
      END;

      ERROR(InvalidMonthErr);
    END;

    PROCEDURE FormatDate@25(DateToFormat@1000 : Date;LanguageId@1003 : Integer) : Text;
    VAR
      CultureInfo@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DateTimeFormatInfo@1007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeFormatInfo";
      DotNetDateTime@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo(LanguageId);
      DateTimeFormatInfo := CultureInfo.DateTimeFormat;
      DotNetDateTime := DotNetDateTime.DateTime(DATE2DMY(DateToFormat,3),DATE2DMY(DateToFormat,2),DATE2DMY(DateToFormat,1));
      EXIT(DotNetDateTime.ToString('d',DateTimeFormatInfo));
    END;

    PROCEDURE LanguageIDToCultureName@4(LanguageID@1001 : Integer) : Text;
    VAR
      CultureInfo@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo(LanguageID);
      EXIT(CultureInfo.Name);
    END;

    PROCEDURE GetOptionNo@20(Value@1007 : Text;OptionString@1006 : Text) : Integer;
    VAR
      OptionNo@1001 : Integer;
      OptionsQty@1000 : Integer;
    BEGIN
      Value := UPPERCASE(Value);
      OptionString := UPPERCASE(OptionString);

      IF (Value = '') AND (STRPOS(OptionString,' ') = 1) THEN
        EXIT(0);
      IF (Value <> '') AND (STRPOS(OptionString,Value) = 0) THEN
        EXIT(-1);

      OptionsQty := GetNumberOfOptions(OptionString);
      IF OptionsQty > 0 THEN BEGIN
        FOR OptionNo := 0 TO OptionsQty - 1 DO BEGIN
          IF OptionsAreEqual(Value,COPYSTR(OptionString,1,STRPOS(OptionString,',') - 1)) THEN
            EXIT(OptionNo);
          OptionString := DELSTR(OptionString,1,STRPOS(OptionString,','));
        END;
        OptionNo += 1;
      END;

      IF OptionsAreEqual(Value,OptionString) THEN
        EXIT(OptionNo);

      EXIT(-1);
    END;

    PROCEDURE GetNumberOfOptions@11(OptionString@1000 : Text) : Integer;
    BEGIN
      EXIT(STRLEN(OptionString) - STRLEN(DELCHR(OptionString,'=',',')));
    END;

    LOCAL PROCEDURE OptionsAreEqual@18(Value@1000 : Text;CurrentOption@1001 : Text) : Boolean;
    BEGIN
      EXIT((Value = CurrentOption) OR ((Value = '') AND (DELCHR(CurrentOption,'=',' ') = '')));
    END;

    PROCEDURE GetFieldLength@1(TableNo@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      Field@1002 : Record 2000000041;
    BEGIN
      IF Field.GET(TableNo,FieldNo) THEN
        EXIT(Field.Len);

      EXIT(0);
    END;

    PROCEDURE Equals@2(ThisRecRef@1000 : RecordRef;OtherRecRef@1003 : RecordRef;SkipBlob@1006 : Boolean) : Boolean;
    VAR
      Field@1004 : Record 2000000041;
      Key@1005 : Record 2000000063;
      OtherFieldRef@1002 : FieldRef;
      ThisFieldRef@1001 : FieldRef;
    BEGIN
      IF ThisRecRef.NUMBER <> OtherRecRef.NUMBER THEN
        EXIT(FALSE);

      IF ThisRecRef.KEYCOUNT = ThisRecRef.FIELDCOUNT THEN
        EXIT(FALSE);

      Field.SETRANGE(TableNo,ThisRecRef.NUMBER);
      Field.FINDSET;

      REPEAT
        IF NOT Key.GET(ThisRecRef.NUMBER,Field."No.") THEN BEGIN
          ThisFieldRef := ThisRecRef.FIELD(Field."No.");
          OtherFieldRef := OtherRecRef.FIELD(Field."No.");

          CASE Field.Type OF
            Field.Type::BLOB,Field.Type::Binary:
              IF NOT SkipBlob THEN
                IF ReadBlob(ThisFieldRef) <> ReadBlob(OtherFieldRef) THEN
                  EXIT(FALSE);
            ELSE
              IF ThisFieldRef.VALUE <> OtherFieldRef.VALUE THEN
                EXIT(FALSE);
          END;
        END;
      UNTIL Field.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE ReadBlob@7(VAR BlobFieldRef@1000 : FieldRef) Content : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      InStream@1002 : InStream;
    BEGIN
      BlobFieldRef.CALCFIELD;

      TempBlob.INIT;
      TempBlob.Blob := BlobFieldRef.VALUE;

      TempBlob.Blob.CREATEINSTREAM(InStream);
      InStream.READ(Content);
    END;

    PROCEDURE ReadTextBlob@14(VAR BlobFieldRef@1000 : FieldRef;LineSeparator@1002 : Text) : Text;
    BEGIN
      EXIT(ReadTextBlobWithEncoding(BlobFieldRef,LineSeparator,TEXTENCODING::MSDos));
    END;

    PROCEDURE WriteTextToBlobIfChanged@15(VAR BlobFieldRef@1000 : FieldRef;NewContent@1003 : Text;Encoding@1007 : TextEncoding) : Boolean;
    VAR
      TempBlob@1004 : TEMPORARY Record 99008535;
      OutStream@1002 : OutStream;
      OldContent@1005 : Text;
    BEGIN
      // Returns TRUE if the value was changed, FALSE if the old value was identical and no change was needed
      OldContent := ReadTextBlobWithTextEncoding(BlobFieldRef,Encoding);
      IF NewContent = OldContent THEN
        EXIT(FALSE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStream,Encoding);
      OutStream.WRITETEXT(NewContent);
      TempBlob.INSERT;

      BlobFieldRef.VALUE := TempBlob.Blob;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadTextBlobWithEncoding@8(VAR BlobFieldRef@1000 : FieldRef;LineSeparator@1003 : Text;Encoding@1002 : TextEncoding) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
    BEGIN
      BlobFieldRef.CALCFIELD;

      TempBlob.INIT;
      TempBlob.Blob := BlobFieldRef.VALUE;

      EXIT(TempBlob.ReadAsText(LineSeparator,Encoding));
    END;

    PROCEDURE IsMatch@6(Input@1000 : Text;RegExExpression@1003 : Text) : Boolean;
    VAR
      Regex@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      AlphanumericRegEx@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
    BEGIN
      AlphanumericRegEx := Regex.Regex(RegExExpression);
      EXIT(AlphanumericRegEx.IsMatch(Input));
    END;

    PROCEDURE IsAlphanumeric@9(Input@1000 : Text) : Boolean;
    BEGIN
      EXIT(IsMatch(Input,'^[a-zA-Z0-9]*$'));
    END;

    PROCEDURE ReadTextBlobWithTextEncoding@17(VAR BlobFieldRef@1002 : FieldRef;Encoding@1000 : TextEncoding) BlobContent : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      InStream@1003 : InStream;
    BEGIN
      TempBlob.INIT;
      BlobFieldRef.CALCFIELD;
      TempBlob.Blob := BlobFieldRef.VALUE;
      TempBlob.Blob.CREATEINSTREAM(InStream,Encoding);
      IF InStream.READ(BlobContent) = 0 THEN;
    END;

    [TryFunction]
    PROCEDURE GetUserTimezoneOffset@5(VAR Duration@1001 : Duration);
    VAR
      UserPersonalization@1004 : Record 2000000073;
      TimeZoneInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
      TimeZone@1000 : Text;
    BEGIN
      UserPersonalization.GET(USERSECURITYID);
      TimeZone := UserPersonalization."Time Zone";
      TimeZoneInfo := TimeZoneInfo.FindSystemTimeZoneById(TimeZone);

      Duration := TimeZoneInfo.BaseUtcOffset;
    END;

    PROCEDURE EvaluateUnixTimestamp@19(Timestamp@1002 : BigInteger) : DateTime;
    VAR
      ResultDateTime@1000 : DateTime;
      EpochDateTime@1001 : DateTime;
      TimezoneOffset@1003 : Duration;
      TimestampInMilliseconds@1004 : BigInteger;
    BEGIN
      IF NOT GetUserTimezoneOffset(TimezoneOffset) THEN
        TimezoneOffset := 0;

      EpochDateTime := CREATEDATETIME(DMY2DATE(1,1,1970),0T);

      TimestampInMilliseconds := Timestamp * 1000;

      ResultDateTime := EpochDateTime + TimestampInMilliseconds + TimezoneOffset;

      EXIT(ResultDateTime);
    END;

    PROCEDURE UrlEncode@10(VAR Value@1000 : Text) : Text;
    VAR
      HttpUtility@1001 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      Value := HttpUtility.UrlEncode(Value);
      EXIT(Value);
    END;

    PROCEDURE GetKeyAsString@16(RecordVariant@1000 : Variant;KeyIndex@1001 : Integer) : Text;
    VAR
      DataTypeManagement@1008 : Codeunit 701;
      RecRef@1007 : RecordRef;
      SelectedKeyRef@1006 : KeyRef;
      KeyFieldRef@1005 : FieldRef;
      I@1004 : Integer;
      KeyString@1003 : Text;
      Separator@1002 : Text;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVariant,RecRef);

      IF RecRef.KEYCOUNT < KeyIndex THEN
        ERROR(KeyDoesNotExistErr);

      SelectedKeyRef := RecRef.KEYINDEX(KeyIndex);

      FOR I := 1 TO SelectedKeyRef.FIELDCOUNT DO BEGIN
        KeyFieldRef := SelectedKeyRef.FIELDINDEX(I);
        KeyString += Separator + KeyFieldRef.NAME;
        Separator := ',';
      END;

      EXIT(KeyString);
    END;

    PROCEDURE SortRecordRef@28(VAR RecRef@1000 : RecordRef;CommaSeparatedFieldsToSort@1001 : Text;Ascending@1002 : Boolean);
    VAR
      OrderString@1003 : Text;
    BEGIN
      IF Ascending THEN
        OrderString := 'ORDER(Ascending)'
      ELSE
        OrderString := 'ORDER(Descending)';

      RecRef.SETVIEW(STRSUBSTNO('SORTING(%1) %2',CommaSeparatedFieldsToSort,OrderString));
      IF RecRef.FINDSET THEN ;
    END;

    PROCEDURE TextDistance@23(Text1@1000 : Text;Text2@1001 : Text) : Integer;
    VAR
      Array1@1002 : ARRAY [1026] OF Integer;
      Array2@1003 : ARRAY [1026] OF Integer;
      i@1004 : Integer;
      j@1005 : Integer;
      Cost@1006 : Integer;
      MaxLen@1007 : Integer;
    BEGIN
      // Returns the number of edits to get from Text1 to Text2
      // Reference: https://en.wikipedia.org/wiki/Levenshtein_distance
      IF (STRLEN(Text1) + 2 > ARRAYLEN(Array1)) OR (STRLEN(Text2) + 2 > ARRAYLEN(Array1)) THEN
        ERROR(StringTooLongErr,ARRAYLEN(Array1) - 2);
      IF Text1 = Text2 THEN
        EXIT(0);
      IF Text1 = '' THEN
        EXIT(STRLEN(Text2));
      IF Text2 = '' THEN
        EXIT(STRLEN(Text1));

      IF STRLEN(Text1) >= STRLEN(Text2) THEN
        MaxLen := STRLEN(Text1)
      ELSE
        MaxLen := STRLEN(Text2);

      FOR i := 0 TO MaxLen + 1 DO
        Array1[i + 1] := i;

      FOR i := 0 TO STRLEN(Text1) - 1 DO BEGIN
        Array2[1] := i + 1;
        FOR j := 0 TO STRLEN(Text2) - 1 DO BEGIN
          IF Text1[i + 1] = Text2[j + 1] THEN
            Cost := 0
          ELSE
            Cost := 1;
          Array2[j + 2] := MinimumInt3(Array2[j + 1] + 1,Array1[j + 2] + 1,Array1[j + 1] + Cost);
        END;
        FOR j := 1 TO MaxLen + 2 DO
          Array1[j] := Array2[j];
      END;
      EXIT(Array2[STRLEN(Text2) + 1]);
    END;

    LOCAL PROCEDURE MinimumInt3@26(i1@1000 : Integer;i2@1001 : Integer;i3@1002 : Integer) : Integer;
    BEGIN
      IF (i1 <= i2) AND (i1 <= i3) THEN
        EXIT(i1);
      IF (i2 <= i1) AND (i2 <= i3) THEN
        EXIT(i2);
      EXIT(i3);
    END;

    PROCEDURE GetGuidAsString@27(GuidValue@1000 : GUID) : Text[36];
    BEGIN
      // Converts guid to string
      // Example: Converts {21EC2020-3AEA-4069-A2DD-08002B30309D} to 21ec2020-3aea-4069-a2dd-08002b30309d
      EXIT(LOWERCASE(COPYSTR(FORMAT(GuidValue),2,36)));
    END;

    PROCEDURE WriteRecordLinkNote@24(VAR RecordLink@1000 : Record 2000000068;Note@1001 : Text);
    VAR
      BinWriter@1003 : DotNet "'mscorlib'.System.IO.BinaryWriter";
      OStr@1002 : OutStream;
    BEGIN
      // Writes the Note BLOB into the format the client code expects
      RecordLink.Note.CREATEOUTSTREAM(OStr,TEXTENCODING::UTF8);
      BinWriter := BinWriter.BinaryWriter(OStr);
      BinWriter.Write(Note);
    END;

    PROCEDURE GetMaxNumberOfParametersInSQLQuery@31() : Integer;
    BEGIN
      EXIT(2100);
    END;

    PROCEDURE FindRecordByDescription@30(VAR Result@1001 : Text;Type@1004 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';SearchText@1000 : Text) : Integer;
    VAR
      RecRef@1014 : RecordRef;
      KeyFieldRef@1009 : FieldRef;
      DescriptionFieldRef@1010 : FieldRef;
      AdditionalFieldRef@1012 : FieldRef;
      KeyNoFieldNo@1011 : Integer;
      KeyNoMaxStrLen@1005 : Integer;
      DescriptionFieldNo@1003 : Integer;
      AdditionalFieldNo@1002 : Integer;
      RecWithoutQuote@1008 : Text;
      RecFilterFromStart@1007 : Text;
      RecFilterContains@1006 : Text;
    BEGIN
      // Try to find a record by SearchText looking into "No." OR "Description" fields
      Result := '';
      IF (SearchText = '') OR (Type = Type::" ") THEN
        EXIT(0);

      GetRecRefAndFieldsNoByType(RecRef,Type,KeyNoFieldNo,DescriptionFieldNo,AdditionalFieldNo);

      KeyFieldRef := RecRef.FIELD(KeyNoFieldNo);
      DescriptionFieldRef := RecRef.FIELD(DescriptionFieldNo);
      IF AdditionalFieldNo <> 0 THEN
        AdditionalFieldRef := RecRef.FIELD(AdditionalFieldNo);

      // Try GET(SearchText)
      KeyNoMaxStrLen := KeyFieldRef.LENGTH;
      IF STRLEN(SearchText) <= KeyNoMaxStrLen THEN BEGIN
        KeyFieldRef.SETRANGE(COPYSTR(SearchText,1,KeyNoMaxStrLen));
        IF RecRef.FINDFIRST THEN BEGIN
          Result := KeyFieldRef.VALUE;
          EXIT(1);
        END;
      END;
      KeyFieldRef.SETRANGE;

      // Example of SearchText = "Search string ''";
      // Try FINDFIRST "Description" by mask "@Search string ?"
      RecWithoutQuote := CONVERTSTR(SearchText,'''','?');
      DescriptionFieldRef.SETFILTER('''@' + RecWithoutQuote + '''');
      IF RecRef.FINDFIRST THEN BEGIN
        Result := KeyFieldRef.VALUE;
        EXIT(1);
      END;
      DescriptionFieldRef.SETRANGE;

      // Try FINDFIRST "No." OR "Description" by mask "@Search string ?*"
      RecRef.FILTERGROUP := -1;
      RecFilterFromStart := '''@' + RecWithoutQuote + '*''';
      KeyFieldRef.SETFILTER(RecFilterFromStart);
      DescriptionFieldRef.SETFILTER(RecFilterFromStart);
      IF RecRef.FINDFIRST THEN BEGIN
        Result := KeyFieldRef.VALUE;
        EXIT(1);
      END;

      // Try FINDFIRST "No." OR "Description" OR additional field by mask "@*Search string ?*"
      RecFilterContains := '''@*' + RecWithoutQuote + '*''';
      KeyFieldRef.SETFILTER(RecFilterContains);
      DescriptionFieldRef.SETFILTER(RecFilterContains);
      IF AdditionalFieldNo <> 0 THEN
        AdditionalFieldRef.SETFILTER(RecFilterContains);

      IF RecRef.FINDFIRST THEN BEGIN
        Result := KeyFieldRef.VALUE;
        EXIT(RecRef.COUNT);
      END;

      // Try FINDLAST record with similar "Description"
      IF FindRecordWithSimilarName(RecRef,SearchText,DescriptionFieldNo) THEN BEGIN
        Result := KeyFieldRef.VALUE;
        EXIT(1);
      END;

      // Not found
      EXIT(0);
    END;

    LOCAL PROCEDURE FindRecordWithSimilarName@29(RecRef@1001 : RecordRef;SearchText@1000 : Text;DescriptionFieldNo@1006 : Integer) : Boolean;
    VAR
      Description@1002 : Text;
      RecCount@1003 : Integer;
      TextLength@1004 : Integer;
      Treshold@1005 : Integer;
    BEGIN
      IF SearchText = '' THEN
        EXIT(FALSE);

      TextLength := STRLEN(SearchText);
      IF TextLength > RecRef.FIELD(DescriptionFieldNo).LENGTH THEN
        EXIT(FALSE);

      Treshold := TextLength DIV 5;
      IF Treshold = 0 THEN
        EXIT(FALSE);

      RecRef.RESET;
      RecRef.ASCENDING(FALSE); // most likely to search for newest records
      IF RecRef.FINDSET THEN
        REPEAT
          RecCount += 1;
          Description := RecRef.FIELD(DescriptionFieldNo).VALUE;
          IF ABS(TextLength - STRLEN(Description)) <= Treshold THEN
            IF TextDistance(UPPERCASE(SearchText),UPPERCASE(Description)) <= Treshold THEN
              EXIT(TRUE);
        UNTIL (RecRef.NEXT = 0) OR (RecCount > 1000);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetRecRefAndFieldsNoByType@33(RecRef@1004 : RecordRef;Type@1002 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';VAR KeyNoFieldNo@1003 : Integer;VAR DescriptionFieldNo@1001 : Integer;VAR AdditionalFieldNo@1000 : Integer);
    VAR
      GLAccount@1005 : Record 15;
      Item@1006 : Record 27;
      FixedAsset@1007 : Record 5600;
      Resource@1008 : Record 156;
      ItemCharge@1009 : Record 5800;
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          BEGIN
            RecRef.OPEN(DATABASE::"G/L Account");
            KeyNoFieldNo := GLAccount.FIELDNO("No.");
            DescriptionFieldNo := GLAccount.FIELDNO(Name);
            AdditionalFieldNo := 0;
          END;
        Type::Item:
          BEGIN
            RecRef.OPEN(DATABASE::Item);
            KeyNoFieldNo := Item.FIELDNO("No.");
            DescriptionFieldNo := Item.FIELDNO(Description);
            AdditionalFieldNo := Item.FIELDNO("Base Unit of Measure");
          END;
        Type::Resource:
          BEGIN
            RecRef.OPEN(DATABASE::Resource);
            KeyNoFieldNo := Resource.FIELDNO("No.");
            DescriptionFieldNo := Resource.FIELDNO(Name);
            AdditionalFieldNo := 0;
          END;
        Type::"Fixed Asset":
          BEGIN
            RecRef.OPEN(DATABASE::"Fixed Asset");
            KeyNoFieldNo := FixedAsset.FIELDNO("No.");
            DescriptionFieldNo := FixedAsset.FIELDNO(Description);
            AdditionalFieldNo := 0;
          END;
        Type::"Charge (Item)":
          BEGIN
            RecRef.OPEN(DATABASE::"Item Charge");
            KeyNoFieldNo := ItemCharge.FIELDNO("No.");
            DescriptionFieldNo := ItemCharge.FIELDNO(Description);
            AdditionalFieldNo := 0;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

