OBJECT Page 50032 Import FA Operation
{
  OBJECT-PROPERTIES
  {
    Date=07.07.17;
    Time=14:00:39;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import FA Operation;
               RUS=Загрузка ОС Операций];
    SaveValues=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table50008;
    SourceTableView=WHERE(FA Operation=CONST(Yes));
    PageType=List;
    OnOpenPage=BEGIN
                 RESET;

                 SETCURRENTKEY("Cons. Source Code","Document Date","FA Operation","FA Operation Type","FA Operation Processed");

                 IF ConsSourceFilter = '' THEN BEGIN

                   //NC MFA20 > DP
                   ConsSetup.GET;
                   IF ConsSetup."FA Oper. Type Auto Update" THEN
                   //NC MFA20 < DP

                   //NC FA013 > DP
                   //UpdateFAOperationType;
                   //NC FA013 < DP

                   ConsSetup.GET;
                   //NC MDB01 > MP
                   {
                   ConsSetup.TESTFIELD("Company for FA Import");
                   ConsolidationSource.RESET;
                   ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
                   CHANGECOMPANY(ConsSetup."Company for FA Import");
                   ConsolidationSource.SETRANGE(ConsolidationSource."FA Import Company Name",COMPANYNAME);
                   }
                   ConsolidationSource.SETRANGE("FA Source",TRUE);
                   //NC MDB01 > MP


                   IF ConsolidationSource.FINDSET THEN BEGIN
                     REPEAT
                       ConsSourceFilter := ConsSourceFilter + ConsolidationSource.Code + '|';
                     UNTIL ConsolidationSource.NEXT = 0;
                     ConsSourceFilter := DELSTR(ConsSourceFilter,STRLEN(ConsSourceFilter),1);
                   END;
                   //NC PIF001 < DP
                   //NC PIF001 > DP
                   FILTERGROUP(2);
                   //NC PIF001 < DP
                   SETFILTER("Cons. Source Code",ConsSourceFilter);
                   //NC PIF001 > DP
                   //FILTERGROUP(0);
                   //NC PIF001 < DP

                 END;

                 FAOperationType := FAOperationType::Приобретение;
                 //NC PIF001 > DP
                 ShowOperation := ShowOperation::Unloaded;
                 Remove := Remove::No;
                 //FILTERGROUP(2);
                 //NC PIF001 < DP
                 SETRANGE("FA Operation Type", FAOperationType);
                 //NC PIF001 > DP
                 SETRANGE("FA Operation",TRUE);
                 CASE ShowOperation OF
                      ShowOperation::All: SETRANGE("FA Operation Processed");
                      ShowOperation::Loaded: SETRANGE("FA Operation Processed", TRUE);
                      ShowOperation::Unloaded: SETRANGE("FA Operation Processed", FALSE);
                 END;
                 CASE Remove OF
                      Remove::All: SETRANGE(Removed);
                      Remove::Yes: SETRANGE(Removed, TRUE);
                      Remove::No: SETRANGE(Removed, FALSE);
                 END;
                 FILTERGROUP(0);
                 CurrPage.UPDATE;
                 //NC PIF001 < DP
               END;

    ActionList=ACTIONS
    {
      { 1101495078;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1101495079;1 ;Action    ;
                      ShortCutKey=F11;
                      CaptionML=[ENU=Load to FA Journals;
                                 RUS=Загрузить в Журналы];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Journals;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ImportType@1101495002 : 'Загрузка в Журнал,Загрузка и Учет';
                                 ImportOperation@1101495001 : 'Приобретение,Ввод в Эксплуатацию,Амортизация,Реклассификация,Выбытие';
                                 Selection@1101495000 : Integer;
                               BEGIN
                                 IF FAOperationType = FAOperationType::"Не Импортировать" THEN
                                   ERROR(Text003);

                                 IF FAOperationType = FAOperationType::"Все Типы" THEN
                                   ERROR(Text004);

                                 IF FAOperationType = FAOperationType::" " THEN
                                   ERROR(Text005);

                                 IF ConsSourceFilter = '' THEN
                                   ERROR(Text006);

                                 Selection := STRMENU(Text002);
                                 IF Selection <> 0 THEN BEGIN
                                   ImportType := Selection -1;
                                   FAConsolMgt.PostFABuffer(ImportType, FAOperationType-1, ConsSourceFilter, DocumentDateFilter,Remove);
                                 END;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1101495080;1 ;Action    ;
                      ShortCutKey=F9;
                      CaptionML=[ENU=Accept All Lines;
                                 RUS=Принять Все Строки];
                      Promoted=Yes;
                      Image=Completed;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FABuffer.RESET;
                                 FABuffer.SETCURRENTKEY("Cons. Source Code","Document Date","FA Operation","FA Operation Type","FA Operation Processed");
                                 //FABuffer.CHANGECOMPANY(ConsSetup."Company for FA Import");
                                 FABuffer.COPYFILTERS(Rec);
                                 IF FABuffer.FINDSET(TRUE,FALSE) THEN
                                 REPEAT
                                   FABuffer.VALIDATE(Accept,TRUE);
                                   FABuffer.MODIFY(TRUE);
                                 UNTIL FABuffer.NEXT = 0;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1101495081;1 ;Action    ;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=[ENU=Cancel Acceptions;
                                 RUS=Отменить Принятие Всех Строк];
                      Promoted=Yes;
                      Image=ResetStatus;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FABuffer.RESET;
                                 FABuffer.SETCURRENTKEY("Cons. Source Code","Document Date","FA Operation","FA Operation Type","FA Operation Processed");
                                 //FABuffer.CHANGECOMPANY(ConsSetup."Company for FA Import");
                                 FABuffer.COPYFILTERS(Rec);
                                 FABuffer.MODIFYALL(Accept,FALSE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1101495082;1 ;Action    ;
                      ShortCutKey=F5;
                      CaptionML=[ENU=Refresh FA Operation Type;
                                 RUS=Обновить ОС Тип Операции];
                      Image=RefreshLines;
                      OnAction=BEGIN
                                 //NC FA013 > DP
                                 UpdateFAOperationType;
                                 //NC FA013 < DP
                               END;
                                }
      { 1101495083;1 ;Action    ;
                      CaptionML=[ENU=Erase FA Operation Type;
                                 RUS=Снять ОС Тип Операции];
                      Promoted=Yes;
                      Image=CancelAllLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //NC M1 > DP 29.08.11 Добавлена функция Очистить ОС Операция Тип
                                   IF NOT CONFIRM(Text009) THEN BEGIN
                                     EXIT;
                                   END;
                                 FABufferReverse.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(FABufferReverse);
                                 CLEAR(tmpFABufferErase);
                                 IF FABufferReverse.FINDSET(FALSE,FALSE) THEN BEGIN
                                   tmpFABufferErase.DELETEALL;
                                   REPEAT
                                     tmpFABufferErase.INIT;
                                     tmpFABufferErase.TRANSFERFIELDS(FABufferReverse);
                                     tmpFABufferErase.INSERT;
                                   UNTIL FABufferReverse.NEXT = 0;
                                 END;

                                 IF tmpFABufferErase.FINDSET THEN
                                   REPEAT
                                     IF FABufferReverse1.GET(tmpFABufferErase."Cons. Source Code",tmpFABufferErase."Entry No.") THEN BEGIN
                                       FABufferReverse1."FA Operation Type" := FABufferReverse1."FA Operation Type"::"Not Defined";
                                       FABufferReverse1.MODIFY;
                                     END;
                                   UNTIL tmpFABufferErase.NEXT=0;
                                 CLEAR(tmpFABufferErase);
                                 CurrPage.UPDATE;
                                 //NC M1 < DP 29.08.11
                               END;
                                }
      { 1101495084;1 ;Action    ;
                      ShortCutKey=Shift+F5;
                      CaptionML=[ENU=Refresh FA Class Code;
                                 RUS=Обновить ОС Класс];
                      Promoted=Yes;
                      Image=RefreshLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UpdateFAClassCode(FAOperationType);
                               END;
                                }
      { 1101495085;1 ;Action    ;
                      ShortCutKey=F4;
                      CaptionML=[ENU=Reverse;
                                 RUS=Аннулировать];
                      Promoted=Yes;
                      Image=ReverseLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //NC PIF001 > DP
                                   IF NOT CONFIRM(Text007) THEN BEGIN
                                     EXIT;
                                   END;
                                 //NC MFA42 > DP

                                 FABufferReverse.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(FABufferReverse);
                                 CLEAR(tmpFABufferReverse);
                                 IF FABufferReverse.FINDSET(FALSE,FALSE) THEN BEGIN
                                   tmpFABufferReverse.DELETEALL;
                                   REPEAT
                                     tmpFABufferReverse.INIT;
                                     tmpFABufferReverse.TRANSFERFIELDS(FABufferReverse);
                                     tmpFABufferReverse.INSERT;
                                   UNTIL FABufferReverse.NEXT = 0;
                                 END;

                                 IF tmpFABufferReverse.FINDSET THEN
                                   REPEAT
                                     IF FABufferReverse1.GET(tmpFABufferReverse."Cons. Source Code",tmpFABufferReverse."Entry No.") THEN
                                       CancelFATranslation(FABufferReverse1);
                                   UNTIL tmpFABufferReverse.NEXT=0;
                                 CLEAR(tmpFABufferReverse);

                                 {
                                 CancelFATranslation;
                                 }
                                 //NC MFA42 > DP

                                 CurrPage.UPDATE;
                                 //NC PIF001 < DP
                               END;
                                }
      { 1101495086;1 ;Action    ;
                      ShortCutKey=Ctrl+F5;
                      CaptionML=[ENU=Loading Errors;
                                 RUS=Журнал Ошибок Загрузки];
                      Promoted=Yes;
                      Image=ErrorLog;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ErrorJnl@1101495006 : Record 50023;
                                 locFABuffer@1101495005 : Record 50008;
                                 RecRef@1101495004 : RecordRef;
                                 tmpErrorJnl@1101495003 : TEMPORARY Record 50023;
                                 Recid@1101495002 : RecordID;
                                 FAConsolidationRegister@1101495001 : Record 50006;
                                 ErrorJnl1@1101495000 : Record 50023;
                               BEGIN
                                 tmpErrorJnl.DELETEALL;
                                 locFABuffer.COPY(Rec);
                                 locFABuffer.SETRANGE("Cons. Source Code","Cons. Source Code");
                                 locFABuffer.SETRANGE("Entry No.","Entry No.");
                                 locFABuffer.SETRANGE(locFABuffer."Error in Import",TRUE);
                                 IF locFABuffer.FINDSET THEN
                                   REPEAT
                                     RecRef.GETTABLE(locFABuffer);
                                     Recid :=RecRef.RECORDID;
                                     RecRef.GET(Recid);
                                     IF FAConsolidationRegister.GET(locFABuffer."FA Export Cons. Register") THEN;
                                       ErrorJnl.RESET;

                                       //NC MFA36 > DP
                                       ErrorJnl.SETCURRENTKEY("Object No. 1","Object Type 1","Search Record ID 1");
                                       //NC MFA36 < DP

                                       ErrorJnl.SETRANGE("Error Group",ErrorJnl."Error Group"::Transformation);
                                       ErrorJnl.SETRANGE("Company Name",COMPANYNAME);
                                       ErrorJnl.SETRANGE("Object No. 1",RecRef.NUMBER);
                                       ErrorJnl.SETFILTER("Record ID 1",'%1',Recid);
                                       IF ErrorJnl.FINDLAST THEN BEGIN
                                         ErrorJnl1.RESET;

                                         //NC MFA36 > DP
                                         ErrorJnl1.SETCURRENTKEY("Object No. 1","Object Type 1","Search Record ID 1");
                                         //NC MFA36 < DP

                                         ErrorJnl1.SETRANGE("Cons. Register",ErrorJnl."Cons. Register");
                                         ErrorJnl1.SETRANGE("Error Group",ErrorJnl."Error Group"::Transformation);
                                         ErrorJnl1.SETRANGE("Company Name",COMPANYNAME);
                                         ErrorJnl1.SETRANGE("Object No. 1",RecRef.NUMBER);
                                         ErrorJnl1.SETFILTER("Record ID 1",'%1',Recid);
                                         IF ErrorJnl1.FINDSET THEN
                                           REPEAT
                                             tmpErrorJnl.INIT;
                                             tmpErrorJnl.TRANSFERFIELDS(ErrorJnl1);
                                             IF tmpErrorJnl.INSERT THEN;
                                           UNTIL ErrorJnl1.NEXT=0;
                                       END;
                                   UNTIL locFABuffer.NEXT=0;
                                 PAGE.RUN(0,tmpErrorJnl);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1101495000;0;Container;
                ContainerType=ContentArea }

    { 1101495071;1;Group  ;
                CaptionML=[ENU=Parameters;
                           RUS=Параметры];
                GroupType=Group }

    { 1101495072;2;Field  ;
                CaptionML=[ENU=Consolidation Source Filter;
                           RUS=Источник Консолидации Фильтр];
                SourceExpr=ConsSourceFilter;
                OnValidate=BEGIN
                             IF ConsSourceFilter <> '' THEN BEGIN
                               //NC PIF001 > DP 16.02.07
                               FILTERGROUP(2);
                               //NC PIF001 < DP 16.02.07
                               SETFILTER("Cons. Source Code", ConsSourceFilter);
                               //NC PIF001 > DP 16.02.07
                               FILTERGROUP(0);
                               //NC PIF001 < DP 16.02.07
                               CurrPage.UPDATE;
                             END ELSE BEGIN
                               //NC PIF001 > DP 16.02.07
                               FILTERGROUP(2);
                               //NC PIF001 < DP 16.02.07
                               SETRANGE("Cons. Source Code");
                               //NC PIF001 > DP 16.02.07
                               FILTERGROUP(0);
                               //NC PIF001 < DP 16.02.07
                               CurrPage.UPDATE;
                             END;
                           END;

                OnLookup=BEGIN
                           //NC PIF001 > DP 22.02.07
                           ConsolidationSource.RESET;
                           //ConsolidationSource.SETRANGE("FA Import Company Name",COMPANYNAME);
                           ConsolidationSource.SETRANGE("FA Source",TRUE);
                           IF PAGE.RUNMODAL(0,ConsolidationSource) = ACTION::LookupOK THEN BEGIN
                             Text := ConsolidationSource.Code;
                             EXIT(TRUE);
                           END;
                           //NC PIF001 < DP 22.02.07
                         END;
                          }

    { 1101495077;2;Field  ;
                CaptionML=[ENU=View by;
                           RUS=Просмотр по];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                 RUS=День,Неделя,Месяц,Квартал,Год];
                SourceExpr=PeriodLength;
                OnValidate=BEGIN
                             FindPeriod('');
                           END;
                            }

    { 1101495073;2;Field  ;
                CaptionML=[ENU=Document Date Filter;
                           RUS=Дата Документа Фильтр];
                SourceExpr=DocumentDateFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             IF DocumentDateFilter <> '' THEN BEGIN
                               SETFILTER("Document Date",DocumentDateFilter);
                               DocumentDateFilter := GETFILTER("Document Date");
                             END ELSE BEGIN
                               SETRANGE("Document Date");
                             END;
                             FILTERGROUP(0);
                           END;

                OnLookup=BEGIN
                           CurrPage.UPDATE;
                         END;
                          }

    { 1101495074;2;Field  ;
                CaptionML=[ENU=Type Operation Filter;
                           RUS=Тип Операции Фильтр];
                OptionCaptionML=[ENU=Not define,Acquisition,Release,Transition to Lease,Depretiation,Reclassification,WriteOff,Transfer,Not Import,All Types;
                                 RUS=Не определено,Приобретение,Ввод в Эксплуатацию,Передача Лизингополучателю,Амортизация,Реклассификация,Выбытие,Перемещение,Не Импортировать,Все Типы];
                SourceExpr=FAOperationType;
                OnValidate=BEGIN
                             IF FAOperationType = FAOperationType::"Все Типы" THEN
                               //NC PIF001 > DP
                               BEGIN
                                 FILTERGROUP(2);
                               //NC PIF001 < DP
                               SETRANGE("FA Operation Type")
                               //NC PIF001 > DP
                                 ;FILTERGROUP(0);
                               END
                               //NC PIF001 < DP
                             ELSE
                               //NC PIF001 > DP 16.02.07
                               BEGIN
                                 FILTERGROUP(2);
                               //NC PIF001 < DP 16.02.07
                               SETRANGE("FA Operation Type", FAOperationType);
                               //NC PIF001 > DP 16.02.07
                                 FILTERGROUP(0);
                               END;
                               //NC PIF001 < DP 16.02.07
                             CurrPage.UPDATE;
                           END;
                            }

    { 1101495075;2;Field  ;
                CaptionML=[ENU=Show Operation;
                           RUS=Показывать Операции];
                OptionCaptionML=[ENU=All,Loaded,Unloaded;
                                 RUS=Все,Загруженные,Незагруженные];
                SourceExpr=ShowOperation;
                OnValidate=BEGIN
                             //NC PIF001 > DP 16.02.07
                             FILTERGROUP(2);
                             //NC PIF001 < DP 16.02.07
                             CASE ShowOperation OF
                                  ShowOperation::All: SETRANGE("FA Operation Processed");
                                  ShowOperation::Loaded: SETRANGE("FA Operation Processed", TRUE);
                                  ShowOperation::Unloaded: SETRANGE("FA Operation Processed", FALSE);
                             END;
                             //NC PIF001 > DP 16.02.07
                             FILTERGROUP(0);
                             //NC PIF001 < DP 16.02.07
                             CurrPage.UPDATE;
                           END;
                            }

    { 1101495076;2;Field  ;
                CaptionML=[ENU=Removing Operation;
                           RUS=Удаляющие Операции];
                OptionCaptionML=[ENU=Yes,No,All;
                                 RUS=Да,Нет,Все];
                SourceExpr=Remove;
                OnValidate=BEGIN
                             //NC PIF001 > DP 16.02.07
                             FILTERGROUP(2);
                             CASE Remove OF
                                  Remove::All: SETRANGE(Removed);
                                  Remove::Yes: SETRANGE(Removed, TRUE);
                                  Remove::No: SETRANGE(Removed, FALSE);
                             END;
                             FILTERGROUP(0);
                             //NC PIF001 < DP 16.02.07
                             CurrPage.UPDATE;
                           END;
                            }

    { 1101495001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1101495002;2;Field  ;
                SourceExpr=Accept }

    { 1101495003;2;Field  ;
                SourceExpr="FA Operation Processed";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495004;2;Field  ;
                SourceExpr="Cons. Source Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495005;2;Field  ;
                SourceExpr="Entry No.";
                Editable=FALSE }

    { 1101495006;2;Field  ;
                SourceExpr="Related Cons. Source Code";
                Visible=FALSE }

    { 1101495007;2;Field  ;
                SourceExpr="Related Entry No.";
                Visible=FALSE }

    { 1101495008;2;Field  ;
                SourceExpr="Document Type";
                Editable=FALSE }

    { 1101495009;2;Field  ;
                SourceExpr=Type;
                Editable=FALSE }

    { 1101495010;2;Field  ;
                SourceExpr="Error in Import";
                Editable=FALSE }

    { 1101495039;2;Field  ;
                SourceExpr="Document No.";
                Editable=FALSE }

    { 1101495040;2;Field  ;
                SourceExpr="Document Date";
                Editable=FALSE }

    { 1101495041;2;Field  ;
                SourceExpr="Debit G/L Account No.";
                Editable=FALSE }

    { 1101495042;2;Field  ;
                SourceExpr="Credit G/L Account No.";
                Editable=FALSE }

    { 1101495043;2;Field  ;
                SourceExpr="FA Class Code" }

    { 1101495044;2;Field  ;
                SourceExpr=Description;
                Editable=FALSE }

    { 1101495045;2;Field  ;
                SourceExpr="Amount (LCY)";
                Editable=FALSE }

    { 1101495046;2;Field  ;
                SourceExpr="Debit Currency Code";
                Editable=FALSE }

    { 1101495047;2;Field  ;
                SourceExpr="Debit Original Amount";
                Editable=FALSE }

    { 1101495048;2;Field  ;
                SourceExpr="Credit Currency Code" }

    { 1101495049;2;Field  ;
                SourceExpr="Credit Original Amount" }

    { 1101495050;2;Field  ;
                SourceExpr="FA Operation Exported";
                Editable=FALSE }

    { 1101495051;2;Field  ;
                SourceExpr="FA Operation Type";
                Editable=FALSE }

    { 1101495052;2;Field  ;
                SourceExpr=Quantity }

    { 1101495019;2;Field  ;
                SourceExpr="Debit Dimension 1 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495020;2;Field  ;
                SourceExpr="Credit Dimension 1 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495021;2;Field  ;
                SourceExpr="Debit Dimension 2 Value Code";
                OnValidate=BEGIN
                             MovingDataSetup.GET;
                             IF "Debit Dimension 2 Value Code" <> '' THEN
                               DimValue.GET(MovingDataSetup."PROFIT CENTER Dimension Code","Debit Dimension 2 Value Code");
                           END;
                            }

    { 1101495022;2;Field  ;
                SourceExpr="Credit Dimension 2 Value Code";
                OnValidate=BEGIN
                             MovingDataSetup.GET;
                             IF "Credit Dimension 2 Value Code" <> '' THEN
                               DimValue.GET(MovingDataSetup."PROFIT CENTER Dimension Code","Credit Dimension 2 Value Code");
                           END;
                            }

    { 1101495023;2;Field  ;
                SourceExpr="Debit Dimension 3 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495024;2;Field  ;
                SourceExpr="Credit Dimension 3 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495025;2;Field  ;
                SourceExpr="Debit Dimension 4 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495026;2;Field  ;
                SourceExpr="Credit Dimension 4 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495027;2;Field  ;
                SourceExpr="Debit Dimension 5 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495028;2;Field  ;
                SourceExpr="Credit Dimension 5 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495029;2;Field  ;
                SourceExpr="Debit Dimension 6 Value Code";
                Editable=FALSE }

    { 1101495030;2;Field  ;
                SourceExpr="Credit Dimension 6 Value Code";
                Editable=FALSE }

    { 1101495031;2;Field  ;
                SourceExpr="Debit Dimension 7 Value Code";
                Editable=FALSE }

    { 1101495032;2;Field  ;
                SourceExpr="Credit Dimension 7 Value Code";
                Editable=FALSE }

    { 1101495033;2;Field  ;
                SourceExpr="Debit Dimension 8 Value Code";
                Editable=FALSE }

    { 1101495034;2;Field  ;
                SourceExpr="Credit Dimension 8 Value Code";
                Editable=FALSE }

    { 1101495035;2;Field  ;
                SourceExpr="Debit Dimension 9 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495036;2;Field  ;
                SourceExpr="Credit Dimension 9 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495037;2;Field  ;
                SourceExpr="Debit Dimension 10 Value Code";
                Editable=FALSE }

    { 1101495038;2;Field  ;
                SourceExpr="Credit Dimension 10 Value Code";
                Editable=FALSE }

    { 1101495053;2;Field  ;
                SourceExpr="Debit Dimension 11 Value Code";
                Editable=FALSE }

    { 1101495054;2;Field  ;
                SourceExpr="Credit Dimension 11 Value Code";
                Editable=FALSE }

    { 1101495056;2;Field  ;
                SourceExpr="Debit Dimension 12 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495055;2;Field  ;
                SourceExpr="Credit Dimension 12 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495058;2;Field  ;
                SourceExpr="Debit Dimension 13 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495057;2;Field  ;
                SourceExpr="Credit Dimension 13 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495059;2;Field  ;
                SourceExpr="Debit Dimension 14 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495060;2;Field  ;
                SourceExpr="Credit Dimension 14 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495061;2;Field  ;
                SourceExpr="Debit Dimension 15 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495062;2;Field  ;
                SourceExpr="Credit Dimension 15 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495063;2;Field  ;
                SourceExpr="Debit Dimension 16 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495064;2;Field  ;
                SourceExpr="Credit Dimension 16 Value Code";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495012;2;Field  ;
                SourceExpr="Debit Dimension 17 Value Code" }

    { 1101495011;2;Field  ;
                SourceExpr="Credit Dimension 17 Value Code" }

    { 1101495014;2;Field  ;
                SourceExpr="Credit Dimension 18 Value Code";
                OnLookup=BEGIN
                           //NC MFA25 > DP
                           MovingDataSetup.GET;
                           IF "Dimension 18 Code"= MovingDataSetup."FA Dimension Code" THEN BEGIN
                             IF FA.GET("Credit Dimension 18 Value Code") THEN
                               PAGE.RUNMODAL(0, FA);
                           END;
                           //NC MFA25 < DP
                         END;
                          }

    { 1101495013;2;Field  ;
                SourceExpr="Debit Dimension 18 Value Code";
                OnLookup=BEGIN
                           //NC MFA25 > DP
                           MovingDataSetup.GET;
                           IF "Dimension 18 Code"= MovingDataSetup."FA Dimension Code" THEN BEGIN
                             IF FA.GET("Debit Dimension 18 Value Code") THEN
                               PAGE.RUNMODAL(0, FA);
                           END;
                           //NC MFA25 <
                         END;
                          }

    { 1101495016;2;Field  ;
                SourceExpr="Credit Dimension 19 Value Code";
                OnLookup=BEGIN
                           //NC MFA25 > DP
                           MovingDataSetup.GET;
                           IF "Dimension 19 Code"= MovingDataSetup."FA Dimension Code" THEN BEGIN
                             IF FA.GET("Credit Dimension 19 Value Code") THEN
                               PAGE.RUNMODAL(0, FA);
                           END;
                           //NC MFA25 <
                         END;
                          }

    { 1101495015;2;Field  ;
                SourceExpr="Debit Dimension 19 Value Code";
                OnLookup=BEGIN
                           //NC MFA25 > DP
                           MovingDataSetup.GET;
                           IF "Dimension 19 Code"= MovingDataSetup."FA Dimension Code" THEN BEGIN
                             IF FA.GET("Debit Dimension 19 Value Code") THEN
                               PAGE.RUNMODAL(0, FA);
                           END;
                           //NC MFA25 <
                         END;
                          }

    { 1101495017;2;Field  ;
                SourceExpr="Debit Dimension 20 Value Code";
                OnValidate=BEGIN
                             //NC MFA25 > DP
                             MovingDataSetup.GET;
                             IF "Dimension 20 Code"= MovingDataSetup."FA Dimension Code" THEN BEGIN
                               IF FA.GET("Debit Dimension 20 Value Code") THEN
                                 PAGE.RUNMODAL(0, FA);
                             END;
                             //NC MFA25 <
                           END;
                            }

    { 1101495018;2;Field  ;
                SourceExpr="Credit Dimension 20 Value Code";
                OnLookup=BEGIN
                           //NC MFA25 > DP
                           MovingDataSetup.GET;
                           IF "Dimension 20 Code"= MovingDataSetup."FA Dimension Code" THEN BEGIN
                             IF FA.GET("Credit Dimension 20 Value Code") THEN
                               PAGE.RUNMODAL(0, FA);
                           END;
                           //NC MFA25 <
                         END;
                          }

    { 1101495065;2;Field  ;
                SourceExpr="Consolidation Register";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495066;2;Field  ;
                SourceExpr="Export Consolidation Register";
                Visible=FALSE;
                Editable=FALSE }

    { 1101495067;2;Field  ;
                SourceExpr="Structure Unit" }

    { 1101495068;2;Field  ;
                SourceExpr="Document ID";
                Visible=FALSE }

    { 1101495069;2;Field  ;
                SourceExpr=Transferred;
                Visible=FALSE }

    { 1101495070;2;Field  ;
                SourceExpr="Operation No.";
                Visible=FALSE;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ConsSourceFilter@1101495016 : Text[1000];
      DocumentDateFilter@1101495015 : Text[100];
      FAOperationType@1101495014 : ' ,Приобретение,Ввод в Эксплуатацию,Передача Лизингополучателю,Амортизация,Реклассификация,Выбытие,Перемещение,Не Импортировать,Все Типы';
      ShowOperation@1101495013 : 'All,Loaded,Unloaded';
      ConsolidationSource@1101495012 : Record 50001;
      FABuffer@1101495011 : Record 50008;
      FAConsolMgt@1101495010 : Codeunit 50002;
      Remove@1101495009 : 'Yes,No,All';
      PeriodLength@1101495008 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      ConsSetup@1101495007 : Record 50000;
      MovingDataSetup@1101495006 : Record 50064;
      DimValue@1101495005 : Record 349;
      FA@1101495004 : Record 5600;
      FABufferReverse@1101495003 : Record 50008;
      FABufferReverse1@1101495002 : Record 50008;
      tmpFABufferReverse@1101495001 : TEMPORARY Record 50008;
      tmpFABufferErase@1101495000 : TEMPORARY Record 50008;
      Text001@1101495025 : TextConst 'ENU=FA Operation Type updating is possible only for lines with an empty Type;RUS=Обновить тип операции можно только для операций с пустым типом';
      Text002@1101495024 : TextConst 'ENU=Load,Load and Post;RUS=Загрузка в журнал,Загрузка и Учет';
      Text003@1101495023 : TextConst 'ENU=Operation Type Filter could not be ''Not Imported'';RUS=Тип Операции Фильтр не должно быть равно ''Не Импортировать''';
      Text004@1101495022 : TextConst 'ENU=Operation Type Filter could not be ''All'';RUS=Тип Операции Фильтр не должно быть равно ''Все Типы''''';
      Text005@1101495021 : TextConst 'ENU=Operation Type Filter could not be '' '';RUS=Тип Операции Фильтр" не должно быть равно '' ''';
      Text006@1101495020 : TextConst 'ENU=Consolidation Source Filter could not be '' '';RUS=Источник Консолидации Фильтр не должно быть равно ''''';
      Text007@1101495019 : TextConst 'ENU=Reverse Buffer Entry;RUS=Аннулировать строку буфера';
      Text008@1101495018 : TextConst 'ENU=Buffer Entry was reversed.;RUS=Строка Буфера аннулирована.';
      Text009@1101495017 : TextConst 'ENU=Erase FA Operation Type;RUS=Очистить ОС тип операции';

    LOCAL PROCEDURE FindPeriod@1(SearchText@1210000 : Code[10]);
    VAR
      Calendar@1210001 : Record 2000000007;
      AccountingPeriod@1210002 : Record 50;
      PeriodFormManagement@1210003 : Codeunit 359;
    BEGIN
      IF DocumentDateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DocumentDateFilter);
        IF NOT PeriodFormManagement.FindDate('+',Calendar,PeriodLength) THEN
          PeriodFormManagement.FindDate('+',Calendar,PeriodLength::Day);
        Calendar.SETRANGE("Period Start");
      END;
      PeriodFormManagement.FindDate(SearchText,Calendar,PeriodLength);
      IF Calendar."Period Start" = Calendar."Period End" THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Document Date",Calendar."Period Start");
        FILTERGROUP(0);
        DocumentDateFilter := FORMAT(Calendar."Period Start");
      END ELSE BEGIN
        FILTERGROUP(2);
        SETRANGE("Document Date",Calendar."Period Start",Calendar."Period End");
        FILTERGROUP(0);
        DocumentDateFilter := FORMAT(Calendar."Period Start") + '..' + FORMAT(Calendar."Period End");
        //VALIDATE(DocumentDateFilter,FORMAT(Calendar."Period Start") + '..' + FORMAT(Calendar."Period End"));
      END;
    END;

    PROCEDURE GetFAClassCode@1101495000(FABuffer@1101495000 : Record 50008;SetupType@1101495003 : 'Debit,Credit') : Code[10];
    VAR
      FACatalog@1101495002 : Record 50044;
      FAClassCode@1101495001 : Code[10];
      NewFANo@1101495004 : Code[20];
      FAType@1101495005 : 'CIP,FA,IA,FE';
    BEGIN
      //NC MFA01 > DP
      FAClassCode :='';
      IF SetupType = SetupType::Debit THEN BEGIN
        IF FABuffer."Debit Dimension 17 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Debit Dimension 17 Value Code";
          FAType := FAType::CIP;
        END ELSE
        IF FABuffer."Debit Dimension 18 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Debit Dimension 18 Value Code";
          FAType := FAType::FA;
        END ELSE
        IF FABuffer."Debit Dimension 19 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Debit Dimension 19 Value Code";
          FAType := FAType::IA;
        END
        ELSE
        IF FABuffer."Debit Dimension 20 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Debit Dimension 20 Value Code";
          FAType := FAType::FE;
        END
      END ELSE BEGIN
       IF FABuffer."Credit Dimension 17 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Credit Dimension 17 Value Code";
          FAType := FAType::CIP;
        END ELSE
        IF FABuffer."Credit Dimension 18 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Credit Dimension 18 Value Code";
          FAType := FAType::FA;
        END ELSE
        IF FABuffer."Credit Dimension 19 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Credit Dimension 19 Value Code";
          FAType := FAType::IA;
        END ELSE
        IF FABuffer."Credit Dimension 20 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Credit Dimension 20 Value Code";
          FAType := FAType::FE;
        END;
      END;
      IF FACatalog.GET(NewFANo) THEN
        FAClassCode := FACatalog."FA Class Code"
      ELSE
        IF FA.GET(NewFANo) AND (FA."FA Class Code" <> '') THEN
          FAClassCode := FA."FA Class Code";
      EXIT(FAClassCode);
      //NC MFA01 < DP
    END;

    PROCEDURE UpdateFAOperationType@1000000000();
    VAR
      FATransformationSetup@1000000000 : Record 50004;
      FABuffer1@1000000001 : Record 50008;
      SetupType@1000000002 : 'Debit,Credit';
      TempMapping@1000000003 : TEMPORARY Record 50022;
      OneMapping@1000000004 : Boolean;
      ConsolidationMgt@1000000005 : Codeunit 50000;
    BEGIN
      //NC FA013 > DP
      FABuffer.RESET;
      //FABuffer.CHANGECOMPANY(ConsSetup."Company for FA Import");
      FABuffer.SETCURRENTKEY("Cons. Source Code","Document Date","FA Operation","FA Operation Type","FA Operation Processed");
      FABuffer.SETFILTER("Cons. Source Code",ConsSourceFilter);
      FABuffer.SETRANGE("FA Operation",TRUE);
      FABuffer.SETRANGE(FABuffer."FA Operation Type",0);
      FATransformationSetup.RESET;
      FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
      "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

      IF FABuffer.FINDSET(TRUE,TRUE) THEN
      REPEAT
        //Проверка для незаполненной фирмы
        IF ConsolidationSource.GET(FABuffer."Cons. Source Code") THEN
          //FATransformationSetup.SETRANGE("Company Name",ConsolidationSource."FA Import Company Name");
          FATransformationSetup.SETFILTER("Company Name",'%1|%2',COMPANYNAME,'');
        ConsolidationSource.TESTFIELD("Mapping Code");
        //NC MDTM11 > MP
        TempMapping.RESET;
        TempMapping.DELETEALL;
        ConsolidationMgt.CheckUseOfMask(TempMapping,ConsolidationSource."Mapping Code",1,OneMapping);
        ConsolidationMgt.GetMapping(FABuffer."Document Date",TempMapping);
        FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
        //NC MDTM11 < MP
        FAConsolMgt.SetConsSource(FABuffer."Cons. Source Code");
        FATransformationSetup.SETRANGE(FATransformationSetup."Extern. Debit Acc. No.",
          FAConsolMgt.GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                         TempMapping.Code,TempMapping."Temp Use Masks",
                                         TempMapping."Temp No. Of Symb. In Masks"));
        FATransformationSetup.SETRANGE(FATransformationSetup."Extern. Credit Acc. No.",
          FAConsolMgt.GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                         TempMapping.Code,TempMapping."Temp Use Masks",
                                         TempMapping."Temp No. Of Symb. In Masks"));
        IF FATransformationSetup.FINDFIRST THEN BEGIN
          //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
          FABuffer1.GET(FABuffer."Cons. Source Code",FABuffer."Entry No.");
          FABuffer1."FA Operation Type" := FATransformationSetup."FA Operation Type";
          IF FATransformationSetup."FA Card Type Debit"<>FATransformationSetup."FA Card Type Debit"::" " THEN
            FABuffer1."FA Class Code" := GetFAClassCode(FABuffer1,SetupType::Debit);

          IF FABuffer1."FA Operation Type" = FABuffer1."FA Operation Type"::"Not Import" THEN BEGIN
            FABuffer1."FA Operation Exported" := TRUE;
            FABuffer1."FA Operation Processed" := TRUE;
          END;
          FABuffer1.MODIFY;
        END;

        //Проверка для незаполненной фирмы
        FATransformationSetup.SETRANGE("Company Name",'');
        IF FATransformationSetup.FINDFIRST THEN BEGIN
          //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
          FABuffer1.GET(FABuffer."Cons. Source Code",FABuffer."Entry No.");
          FABuffer1."FA Operation Type" := FATransformationSetup."FA Operation Type";
          IF FATransformationSetup."FA Card Type Debit"<>FATransformationSetup."FA Card Type Debit"::" " THEN
            FABuffer1."FA Class Code" := GetFAClassCode(FABuffer1,SetupType::Debit);

          IF FABuffer1."FA Operation Type" = FABuffer1."FA Operation Type"::"Not Import" THEN BEGIN
            FABuffer1."FA Operation Exported" := TRUE;
            FABuffer1."FA Operation Processed" := TRUE;
          END;
          FABuffer1.MODIFY;
        END;
      UNTIL FABuffer.NEXT = 0;
      //NC FA013 < DP
    END;

    PROCEDURE UpdateFAClassCode@1000000001(OperationType@1000000001 : ' ,Приобретение,Ввод в Эксплуатацию,Передача Лизингополучателю,Амортизация,Реклассификация,Выбытие,Перемещение,Не Импортировать,Все Типы');
    VAR
      SetupType@1000000000 : 'Debit,Credit';
    BEGIN
      FABuffer.RESET;
      FABuffer.SETCURRENTKEY("Cons. Source Code","Document Date","FA Operation","FA Operation Type","FA Operation Processed");
      FABuffer.SETFILTER("Cons. Source Code",ConsSourceFilter);
      FABuffer.SETRANGE("FA Operation",TRUE);
      FABuffer.SETRANGE(FABuffer."FA Operation Type",OperationType);
      IF FABuffer.FINDSET(TRUE,TRUE) THEN
      REPEAT
        FABuffer."FA Class Code" := GetFAClassCode(FABuffer,SetupType::Debit);
        FABuffer.MODIFY;
      UNTIL FABuffer.NEXT = 0;
      //NC FA013 < DP
    END;

    BEGIN
    {
      NC MP 16.02.07 Преобразован код на фильтрах в заголовке формы, на открытии формы
      NC PIF001 MP Новая опция Тип Операции - Перемещение
      NC MDTM11 MP Обновление ос типа операций по дате
      NC M1 DP 29.08.11 Добавлена функция Очистить ОС Операция Тип
    }
    END.
  }
}

