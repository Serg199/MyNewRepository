OBJECT Table 14919 Excel Template
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Excel Template;
               RUS=Шаблон Excel];
    LookupPageID=Page14919;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              RUS=Код] }
    { 2   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 3   ;   ;File Name           ;Text250       ;CaptionML=[ENU=File Name;
                                                              RUS=Имя файла] }
    { 4   ;   ;BLOB                ;BLOB          ;CaptionML=[ENU=BLOB;
                                                              RUS=BLOB-объект] }
    { 5   ;   ;File Extension      ;Option        ;CaptionML=[ENU=File Extension;
                                                              RUS=Расширение файла];
                                                   OptionCaptionML=[ENU=XLS,XLSX;
                                                                    RUS=XLS,XLSX];
                                                   OptionString=XLS,XLSX }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210000 : TextConst 'ENU=You should import template file for template code %1.;RUS=Необходимо импортировать файл шаблона для кода шаблона %1.';
      FileMgt@1210002 : Codeunit 419;

    PROCEDURE OpenTemplate@1210000(TemplateCode@1210000 : Code[10]) FileName : Text[1024];
    VAR
      BLOBRef@1210001 : TEMPORARY Record 99008535;
    BEGIN
      GET(TemplateCode);
      CALCFIELDS(BLOB);
      IF NOT BLOB.HASVALUE THEN
        ERROR(Text001,TemplateCode);

      IF "File Name" <> '' THEN BEGIN
        FileName := FileMgt.ServerTempFileName('');
        IF EXISTS(FileName) THEN
          ERASE(FileName);
        BLOBRef.Blob := BLOB;
        FileName := FileMgt.BLOBExport(BLOBRef,FileName,FALSE);
      END ELSE
        FileMgt.BLOBExport(BLOBRef,'',TRUE);
    END;

    LOCAL PROCEDURE LoadSheetSectionHeights@1210001(ServerFileName@1002 : Text;SheetName@1000 : Text);
    VAR
      ExcelTemplateSection@1210007 : Record 14931;
      ReportBuilder@1210001 : DotNet "'Microsoft.Dynamics.NAV.RU.ExcelReportBuilder, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.NAV.RU.ExcelReportBuilder.ReportBuilder";
      SectionInfo@1210005 : DotNet "'Microsoft.Dynamics.NAV.RU.ExcelReportBuilder, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.NAV.RU.ExcelReportBuilder.HeightInfo";
      List@1210004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      I@1210003 : Integer;
    BEGIN
      List := ReportBuilder.GetReportSectionHeights(ServerFileName,SheetName);
      FOR I := 0 TO List.Count - 1 DO BEGIN
        SectionInfo := List.Item(I);
        ExcelTemplateSection.INIT;
        ExcelTemplateSection."Template Code" := Code;
        ExcelTemplateSection."Sheet Name" := SheetName;
        ExcelTemplateSection.Name := SectionInfo.Name;
        ExcelTemplateSection.Height := SectionInfo.Height;
        ExcelTemplateSection.INSERT;
      END;
    END;

    PROCEDURE UpdateTemplateHeight@1210002(FileName@1005 : Text);
    VAR
      ExcelTemplateSheet@1210004 : Record 14930;
      ExcelTemplateSection@1210006 : Record 14931;
      ReportBuilder@1210003 : DotNet "'Microsoft.Dynamics.NAV.RU.ExcelReportBuilder, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.NAV.RU.ExcelReportBuilder.ReportBuilder";
      SheetInfo@1210002 : DotNet "'Microsoft.Dynamics.NAV.RU.ExcelReportBuilder, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.NAV.RU.ExcelReportBuilder.HeightInfo";
      List@1210001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      I@1210000 : Integer;
      ServerFileName@1008 : Text;
    BEGIN
      IF LOWERCASE(FileMgt.GetExtension(FileName)) <> 'xlsx' THEN
        EXIT;

      ExcelTemplateSheet.SETRANGE("Template Code",Code);
      ExcelTemplateSheet.DELETEALL;
      ExcelTemplateSection.SETRANGE("Template Code",Code);
      ExcelTemplateSection.DELETEALL;
      COMMIT;

      ServerFileName := FileMgt.UploadFileSilent(FileName);
      List := ReportBuilder.GetReportSheetsPrintZoneHeight(ServerFileName);
      FOR I := 0 TO List.Count - 1 DO BEGIN
        SheetInfo := List.Item(I);
        ExcelTemplateSheet.INIT;
        ExcelTemplateSheet."Template Code" := Code;
        ExcelTemplateSheet.Name := SheetInfo.Name;
        ExcelTemplateSheet."Paper Height" := SheetInfo.Height;
        ExcelTemplateSheet.INSERT;

        LoadSheetSectionHeights(ServerFileName,SheetInfo.Name);
      END;
    END;

    BEGIN
    END.
  }
}

