OBJECT Report 99991 Import dimensions
{
  OBJECT-PROPERTIES
  {
    Date=27.03.17;
    Time=14:18:25;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  Dimension@1101495000 : Record 348;
                BEGIN
                  CLEAR(ExcelBuff);
                  ExcelBuff.DELETEALL;
                  m:=1;
                  // выбор листов и чтение
                  SheetName := ExcelBuff.SelectSheetsName(FilePath);
                  ExcelBuff.DELETEALL;
                  ExcelBuff.OpenBook(FilePath, SheetName);
                  ExcelBuff.ReadSheet;

                  // разбор файла
                  IF ExcelBuff.FINDFIRST THEN REPEAT
                      EVALUATE(i,ExcelBuff.xlRowID);
                      j := ExcelBuff."Column No.";
                      IF j = 1 THEN No := DELCHR(ExcelBuff."Cell Value as Text",'==',Text001);//ExcelBuff."Cell Value as Text";

                      IF (i = 1) AND (j > 3) THEN BEGIN
                        DimCode[j] := ExcelBuff."Cell Value as Text";//COPYSTR(ExcelBuff."Cell Value as Text",1,20);
                        IF NOT Dim.GET(DimCode[j]) THEN ERROR('не существует %1', DimCode[j]);
                         {
                         DimNo.SETRANGE(Code, DimCode[j]);
                         IF NOT DimNo.FINDFIRST THEN BEGIN
                           DimNo2.RESET;
                           DimNo2.VALIDATE(Code,DimCode[j]);
                           DimNo2.INSERT;
                         END;
                         }
                      END;

                     IF (i > 1) AND (j > 3) THEN BEGIN
                      ExcelBuff."Cell Value as Text" := DELCHR(ExcelBuff."Cell Value as Text",'=',' ');
                      IF (ExcelBuff."Cell Value as Text" <> '') THEN BEGIN
                        IF (ExcelBuff."Cell Value as Text" = 'x') OR (ExcelBuff."Cell Value as Text" = '?') THEN
                            BEGIN
                              DefDim.INIT;
                              DefDim."Dimension Value Code" := '';
                              Dimension.GET(DimCode[j]);
                              DefDim."Dimension Code" := DimCode[j];
                              DefDim."No." := DELCHR(No);
                              GLAcc.GET(No);
                              DefDim."Table ID" := 15;
                              DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
                              DefDim.INSERT;
                            END ELSE BEGIN

                              IF STRPOS(ExcelBuff."Cell Value as Text",',') = 0 THEN BEGIN
                              {
                              ReturnComm(ExcelBuff."Cell Value as Text",l);
                              FOR m := 1 TO l DO  BEGIN
                              tmpString[m] := SELECTSTR(m, FORMAT(ExcelBuff."Cell Value as Text"));
                              IF tmpString[m] <> '' THEN BEGIN
                              DimCode[j] := COPYSTR(ExcelBuff."Cell Value as Text",1,20);
                              DimNo.SETRANGE(Code, DimCode[j]);
                              IF NOT DimNo.FINDFIRST THEN BEGIN
                               DimNo2.RESET;
                               DimNo2.VALIDATE(Code,DimCode[j]);
                               DimNo2.INSERT;
                              END;
                              }
                               DefDim."Dimension Code" := ExcelBuff."Cell Value as Text";
                               Dimension.GET(ExcelBuff."Cell Value as Text");
                               DefDim."No." := DELCHR(No);
                               GLAcc.GET(No);
                               DefDim."Table ID" := 15;
                               DefDim."Dimension Value Code" := '';
                               DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
                               DefDim.INSERT;
                               //END;
                              END;
                           END;
                        END;
                     END;
                     l := 1;
                  UNTIL ExcelBuff.NEXT = 0;  // чтение следующей ячейки

                  {
                  DefDim.RESET;
                  IF DefDim.FINDFIRST THEN REPEAT
                     DefDim."No." := DELCHR(DefDim."No.");
                     DefDim.MODIFY(FALSE);
                  UNTIL DefDim.NEXT = 0;
                  }

                  {
                            FOR m := 1 TO 10 DO tmpString[m] := SELECTSTR(i,DefDim."Dimension Value Code");

                            FOR m := 1 TO 10 DO  BEGIN
                             IF tmpString[m] <> '' THEN BEGIN
                              DefDim."Dimension Code" := DimCode[j];
                              DefDim."No." := No;
                              DefDim."Table ID" := 15;
                              DefDim."Dimension Value Code" := tmpString[m];
                              DefDim.INSERT;
                              END;
                          END;
                  }
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuff@1210000 : Record 370;
      GenJnlLine@1210001 : Record 81;
      SheetName@1210002 : Text[30];
      LineCompleted@1210005 : Boolean;
      Marker@1210007 : Boolean;
      Date@1210008 : Date;
      CustNo@1210009 : Code[30];
      CurrCode@1210010 : Code[10];
      Amount@1210012 : Decimal;
      j@1101495001 : Integer;
      i@1210013 : Integer;
      DocType@1210014 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
      CustomerRec@1210015 : Record 18;
      FilePath@1210017 : Text[100];
      CommonDialogMgt@1210018 : Codeunit 412;
      NoSeriesMgt@1210022 : Codeunit 396;
      BalAccNo@1210024 : Code[30];
      Text55000@1210025 : TextConst 'ENU=Impossible to convert the date.;RUS=Невозможно преобразовать дату.';
      Text55001@1210026 : TextConst 'ENU=Type of payment must have the following values: Payment, Invoice, Credit;RUS=Тип оплаты должен иметь следующие значения: Оплата,Счет,Кредит Нота,Процент Нота,Памятка,Возмещение.';
      Text55002@1210027 : TextConst 'RUS=Клиента %1 не существует.';
      Text55003@1210028 : TextConst 'RUS=Невозможно преобразовать сумму.';
      Text55004@1210029 : TextConst 'RUS=Бал. Фин. Сч. должен иметь следующие значения: Фин. Счет,Клиент,Поставщик,Банк. Счет,ОС.';
      DocNoSer@1210030 : Code[10];
      LineNo@1210031 : Integer;
      JnlLineDim@1210032 : Record 356;
      DocNo@1210006 : Code[10];
      IsPositive@1210003 : Boolean;
      InitDocNo@1210004 : Code[10];
      DefDim@1101495000 : Record 352;
      No@1101495002 : Code[20];
      DimCode@1101495003 : ARRAY [60] OF Code[20];
      DimNo@1101495004 : Record 348;
      DimNo2@1101495005 : Record 348;
      DimVal2@1101495013 : Record 349;
      DimVal@1101495006 : Record 349;
      workString@1101495007 : Text[200];
      tmpString3@1101495011 : Text[20];
      tmpString2@1101495010 : Text[20];
      tmpString1@1101495008 : Text[20];
      m@1101495009 : Integer;
      tmpString@1101495012 : ARRAY [10] OF Text[25];
      srtLength@1101495014 : Integer;
      k@1101495015 : Integer;
      l@1101495016 : Integer;
      Text001@1101495017 : TextConst 'RUS=" ''"';
      GLAcc@1101495018 : Record 15;
      Dim@1101495019 : Record 348;

    PROCEDURE ReturnComm@1101495000(Str@1101495000 : Text[100];VAR m@1101495001 : Integer);
    VAR
      x@1101495002 : Integer;
    BEGIN
      x := STRPOS(Str,',');
      IF x <> 0 THEN BEGIN
      Str := COPYSTR(Str,1,x-1);
      m += 1;
      END ELSE EXIT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

