OBJECT Table 1226 Payment Export Data
{
  OBJECT-PROPERTIES
  {
    Date=15.09.15;
    Time=12:00:00;
    Version List=NAVW19.00,NAVRU9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF NOT PreserveNonLatinCharacters THEN
                 PaymentExportConvertToLatin;
             END;

    CaptionML=[ENU=Payment Export Data;
               RUS=Данные экспорта платежей];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              RUS=Номер операции] }
    { 2   ;   ;Data Exch Entry No. ;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch Entry No.;
                                                              RUS=Номер операции обмена данными] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 4   ;   ;Data Exch. Line Def Code;Code20    ;CaptionML=[ENU=Data Exch. Line Def Code;
                                                              RUS=Код определения строки обмена данными] }
    { 5   ;   ;General Journal Template;Code10    ;TableRelation="Gen. Journal Template";
                                                   CaptionML=[ENU=General Journal Template;
                                                              RUS=Шаблон финансового журнала] }
    { 6   ;   ;General Journal Batch Name;Code10  ;TableRelation="Gen. Journal Batch";
                                                   CaptionML=[ENU=General Journal Batch Name;
                                                              RUS=Название раздела финансового журнала] }
    { 7   ;   ;General Journal Line No.;Integer   ;CaptionML=[ENU=General Journal Line No.;
                                                              RUS=Номер строки финансового журнала] }
    { 28  ;   ;Sender Bank Name - Data Conv.;Text50;
                                                   CaptionML=[ENU=Sender Bank Name - Data Conv.;
                                                              RUS=Название банка отправителя - преобр. данных] }
    { 29  ;   ;Sender Bank Name    ;Text50        ;CaptionML=[ENU=Sender Bank Name;
                                                              RUS=Название банка отправителя] }
    { 30  ;   ;Sender Bank Account Code;Code20    ;TableRelation="Bank Account";
                                                   CaptionML=[ENU=Sender Bank Account Code;
                                                              RUS=Код банковского счета отправителя] }
    { 31  ;   ;Sender Bank Account No.;Text50     ;CaptionML=[ENU=Sender Bank Account No.;
                                                              RUS=Номер банковского счета отправителя] }
    { 32  ;   ;Sender Bank Account Currency;Code10;TableRelation=Currency;
                                                   CaptionML=[ENU=Sender Bank Account Currency;
                                                              RUS=Валюта банковского счета отправителя] }
    { 33  ;   ;Sender Bank Country/Region;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Sender Bank Country/Region;
                                                              RUS=Страна/регион банка отправителя] }
    { 34  ;   ;Sender Bank BIC     ;Code35        ;CaptionML=[ENU=Sender Bank BIC;
                                                              RUS=БИК банка отправителя] }
    { 35  ;   ;Sender Bank Clearing Std.;Text50   ;TableRelation="Bank Clearing Standard";
                                                   CaptionML=[ENU=Sender Bank Clearing Std.;
                                                              RUS=Клиринговый стандарт банка отправителя] }
    { 36  ;   ;Sender Bank Clearing Code;Text50   ;CaptionML=[ENU=Sender Bank Clearing Code;
                                                              RUS=Клиринговый код банка отправителя] }
    { 37  ;   ;Sender Bank Address ;Text50        ;CaptionML=[ENU=Sender Bank Address;
                                                              RUS=Адрес банка отправителя] }
    { 38  ;   ;Sender Bank City    ;Text50        ;CaptionML=[ENU=Sender Bank City;
                                                              RUS=Город отправителя] }
    { 39  ;   ;Sender Bank Post Code;Code20       ;CaptionML=[ENU=Sender Bank Post Code;
                                                              RUS=Почтовый индекс банка отправителя] }
    { 40  ;   ;Recipient Name      ;Text50        ;CaptionML=[ENU=Recipient Name;
                                                              RUS=Имя получателя] }
    { 41  ;   ;Recipient Address   ;Text50        ;CaptionML=[ENU=Recipient Address;
                                                              RUS=Адрес получателя] }
    { 42  ;   ;Recipient City      ;Text50        ;CaptionML=[ENU=Recipient City;
                                                              RUS=Город получателя] }
    { 43  ;   ;Recipient Post Code ;Code20        ;CaptionML=[ENU=Recipient Post Code;
                                                              RUS=Индекс получателя] }
    { 44  ;   ;Recipient Country/Region Code;Code10;
                                                   CaptionML=[ENU=Recipient Country/Region Code;
                                                              RUS=Код страны/региона получателя] }
    { 45  ;   ;Recipient Email Address;Text80     ;CaptionML=[ENU=Recipient Email Address;
                                                              RUS=Адрес электронной почты получателя] }
    { 46  ;   ;Recipient ID        ;Code20        ;CaptionML=[ENU=Recipient ID;
                                                              RUS=Код получателя] }
    { 48  ;   ;Recipient Bank Clearing Std.;Text50;TableRelation="Bank Clearing Standard";
                                                   CaptionML=[ENU=Recipient Bank Clearing Std.;
                                                              RUS=Клиринговый стандарт банка получателя] }
    { 49  ;   ;Recipient Bank Clearing Code;Text50;CaptionML=[ENU=Recipient Bank Clearing Code;
                                                              RUS=Клиринговый код банка получателя] }
    { 50  ;   ;Recipient Reg. No.  ;Code20        ;CaptionML=[ENU=Recipient Reg. No.;
                                                              RUS=Рег. номер получателя] }
    { 51  ;   ;Recipient Acc. No.  ;Code30        ;CaptionML=[ENU=Recipient Acc. No.;
                                                              RUS=Номер счета получателя] }
    { 52  ;   ;Recipient Bank Acc. No.;Text50     ;CaptionML=[ENU=Recipient Bank Acc. No.;
                                                              RUS=Номер банковского счета получателя] }
    { 53  ;   ;Recipient Bank BIC  ;Code35        ;CaptionML=[ENU=Recipient Bank BIC;
                                                              RUS=БИК банка получателя] }
    { 54  ;   ;Recipient Bank Name ;Text50        ;CaptionML=[ENU=Recipient Bank Name;
                                                              RUS=Название банка получателя] }
    { 55  ;   ;Recipient Bank Address;Text50      ;CaptionML=[ENU=Recipient Bank Address;
                                                              RUS=Адрес банка получателя] }
    { 56  ;   ;Recipient Bank City ;Text50        ;CaptionML=[ENU=Recipient Bank City;
                                                              RUS=Город банка получателя] }
    { 57  ;   ;Recipient Bank Country/Region;Code10;
                                                   TableRelation=Country/Region;
                                                   CaptionML=[ENU=Recipient Bank Country/Region;
                                                              RUS=Страна/регион банка получателя] }
    { 58  ;   ;Recipient Creditor No.;Code20      ;CaptionML=[ENU=Recipient Creditor No.;
                                                              RUS=Номер кредитора получателя] }
    { 59  ;   ;Recipient Bank Post Code;Code20    ;CaptionML=[ENU=Recipient Bank Post Code;
                                                              RUS=Индекс банка получателя] }
    { 60  ;   ;Message Type        ;Code1         ;CaptionML=[ENU=Message Type;
                                                              RUS=Тип сообщения] }
    { 61  ;   ;Letter to Sender    ;Code1         ;CaptionML=[ENU=Letter to Sender;
                                                              RUS=Письмо отправителю] }
    { 63  ;   ;Recipient Acknowledgement;Code1    ;CaptionML=[ENU=Recipient Acknowledgement;
                                                              RUS=Подтверждение получателя] }
    { 64  ;   ;Short Advice        ;Text35        ;CaptionML=[ENU=Short Advice;
                                                              RUS=Краткий статус] }
    { 65  ;   ;Message to Recipient 1;Text140     ;CaptionML=[ENU=Message to Recipient 1;
                                                              RUS=Сообщение получателю 1] }
    { 66  ;   ;Message to Recipient 2;Text140     ;CaptionML=[ENU=Message to Recipient 2;
                                                              RUS=Сообщение получателю 2] }
    { 80  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   DecimalPlaces=2:2 }
    { 81  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=Код валюты] }
    { 82  ;   ;Transfer Date       ;Date          ;CaptionML=[ENU=Transfer Date;
                                                              RUS=Дата перевода] }
    { 83  ;   ;Transfer Type       ;Code1         ;CaptionML=[ENU=Transfer Type;
                                                              RUS=Тип переноса] }
    { 84  ;   ;Payment Type        ;Text50        ;CaptionML=[ENU=Payment Type;
                                                              RUS=Вид оплаты] }
    { 85  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 87  ;   ;Recipient Reference ;Code35        ;CaptionML=[ENU=Recipient Reference;
                                                              RUS=Ссылка на получателя] }
    { 88  ;   ;Payment Reference   ;Code50        ;CaptionML=[ENU=Payment Reference;
                                                              RUS=Ссылка на оплату] }
    { 89  ;   ;Invoice Amount      ;Decimal       ;CaptionML=[ENU=Invoice Amount;
                                                              RUS=Сумма счета] }
    { 90  ;   ;Invoice Date        ;Date          ;CaptionML=[ENU=Invoice Date;
                                                              RUS=Дата счета] }
    { 91  ;   ;Recipient County    ;Text30        ;CaptionML=[ENU=Recipient County;
                                                              RUS=Район получателя] }
    { 92  ;   ;Recipient Bank County;Text30       ;CaptionML=[ENU=Recipient Bank County;
                                                              RUS=Район банка получателя] }
    { 93  ;   ;Sender Bank County  ;Text30        ;CaptionML=[ENU=Sender Bank County;
                                                              RUS=Район банка отправителя] }
    { 100 ;   ;Payment Information ID;Text50      ;CaptionML=[ENU=Payment Information ID;
                                                              RUS=Код сведений о платеже] }
    { 101 ;   ;End-to-End ID       ;Text50        ;CaptionML=[ENU=End-to-End ID;
                                                              RUS=Комплексный идентификатор] }
    { 102 ;   ;Message ID          ;Text35        ;CaptionML=[ENU=Message ID;
                                                              RUS=Код сообщения] }
    { 103 ;   ;SEPA Instruction Priority;Option   ;OnValidate=BEGIN
                                                                CASE "SEPA Instruction Priority" OF
                                                                  "SEPA Instruction Priority"::NORMAL:
                                                                    "SEPA Instruction Priority Text" := 'NORM';
                                                                  "SEPA Instruction Priority"::HIGH:
                                                                    "SEPA Instruction Priority Text" := 'HIGH';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SEPA Instruction Priority;
                                                              RUS=Приоритет руководства SEPA];
                                                   OptionCaptionML=[ENU=NORMAL,HIGH;
                                                                    RUS=NORMAL,HIGH];
                                                   OptionString=NORMAL,HIGH }
    { 104 ;   ;SEPA Instruction Priority Text;Code4;
                                                   CaptionML=[ENU=SEPA Instruction Priority Text;
                                                              RUS=Текст приоритета руководства SEPA];
                                                   Editable=No }
    { 105 ;   ;SEPA Payment Method ;Option        ;InitValue=TRF;
                                                   OnValidate=BEGIN
                                                                CASE "SEPA Payment Method" OF
                                                                  "SEPA Payment Method"::CHK:
                                                                    "SEPA Payment Method Text" := 'CHK';
                                                                  "SEPA Payment Method"::TRF:
                                                                    "SEPA Payment Method Text" := 'TRF';
                                                                  "SEPA Payment Method"::TRA:
                                                                    "SEPA Payment Method Text" := 'TRA';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SEPA Payment Method;
                                                              RUS=Способ оплаты SEPA];
                                                   OptionCaptionML=[ENU=CHK,TRF,TRA;
                                                                    RUS=CHK,TRF,TRA];
                                                   OptionString=CHK,TRF,TRA }
    { 106 ;   ;SEPA Payment Method Text;Code3     ;CaptionML=[ENU=SEPA Payment Method Text;
                                                              RUS=Текст способа оплаты SEPA] }
    { 107 ;   ;SEPA Batch Booking  ;Boolean       ;CaptionML=[ENU=SEPA Batch Booking;
                                                              RUS=Резервирование партии SEPA] }
    { 108 ;   ;SEPA Charge Bearer  ;Option        ;InitValue=SLEV;
                                                   OnValidate=BEGIN
                                                                CASE "SEPA Charge Bearer" OF
                                                                  "SEPA Charge Bearer"::DEBT:
                                                                    "SEPA Charge Bearer Text" := 'DEBT';
                                                                  "SEPA Charge Bearer"::CRED:
                                                                    "SEPA Charge Bearer Text" := 'CRED';
                                                                  "SEPA Charge Bearer"::SHAR:
                                                                    "SEPA Charge Bearer Text" := 'SHAR';
                                                                  "SEPA Charge Bearer"::SLEV:
                                                                    "SEPA Charge Bearer Text" := 'SLEV';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SEPA Charge Bearer;
                                                              RUS=Носитель издержек SEPA];
                                                   OptionCaptionML=[ENU=DEBT,CRED,SHAR,SLEV;
                                                                    RUS=DEBT,CRED,SHAR,SLEV];
                                                   OptionString=DEBT,CRED,SHAR,SLEV }
    { 109 ;   ;SEPA Charge Bearer Text;Code4      ;CaptionML=[ENU=SEPA Charge Bearer Text;
                                                              RUS=Текст носителя издержек SEPA] }
    { 120 ;   ;SEPA Direct Debit Mandate ID;Code35;CaptionML=[ENU=SEPA Direct Debit Mandate ID;
                                                              RUS=Идентификатор поручения на прямое дебетование SEPA] }
    { 121 ;   ;SEPA Direct Debit Seq. Type;Option ;OnValidate=BEGIN
                                                                CASE "SEPA Direct Debit Seq. Type" OF
                                                                  "SEPA Direct Debit Seq. Type"::"One Off":
                                                                    "SEPA Direct Debit Seq. Text" := 'OOFF';
                                                                  "SEPA Direct Debit Seq. Type"::First:
                                                                    "SEPA Direct Debit Seq. Text" := 'FRST';
                                                                  "SEPA Direct Debit Seq. Type"::Recurring:
                                                                    "SEPA Direct Debit Seq. Text" := 'RCUR';
                                                                  "SEPA Direct Debit Seq. Type"::Last:
                                                                    "SEPA Direct Debit Seq. Text" := 'FNAL';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SEPA Direct Debit Seq. Type;
                                                              RUS=Тип последовательности прямого дебетования SEPA];
                                                   OptionCaptionML=[ENU=One Off,First,Recurring,Last;
                                                                    RUS=Единоразовый,Первый,Типовой,Последний];
                                                   OptionString=One Off,First,Recurring,Last }
    { 122 ;   ;SEPA Direct Debit Seq. Text;Code4  ;CaptionML=[ENU=SEPA Direct Debit Seq. Text;
                                                              RUS=Текст последовательности прямого дебетования SEPA] }
    { 123 ;   ;SEPA DD Mandate Signed Date;Date   ;CaptionML=[ENU=SEPA DD Mandate Signed Date;
                                                              RUS=Дата подписания поручения на прямое дебетование SEPA] }
    { 124 ;   ;SEPA Partner Type   ;Option        ;OnValidate=BEGIN
                                                                CASE "SEPA Partner Type" OF
                                                                  "SEPA Partner Type"::" ":
                                                                    "SEPA Partner Type Text" := '';
                                                                  "SEPA Partner Type"::Company:
                                                                    "SEPA Partner Type Text" := 'B2B';
                                                                  "SEPA Partner Type"::Person:
                                                                    "SEPA Partner Type Text" := 'CORE';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SEPA Partner Type;
                                                              RUS=Тип партнера SEPA];
                                                   OptionCaptionML=[ENU=" ,Company,Person";
                                                                    RUS=" ,Организация,Сотрудник"];
                                                   OptionString=[ ,Company,Person] }
    { 125 ;   ;SEPA Partner Type Text;Code4       ;CaptionML=[ENU=SEPA Partner Type Text;
                                                              RUS=Текст типа партнера SEPA] }
    { 130 ;   ;Importing Code      ;Code10        ;CaptionML=[ENU=Importing Code;
                                                              RUS=Код импорта] }
    { 131 ;   ;Importing Date      ;Date          ;CaptionML=[ENU=Importing Date;
                                                              RUS=Дата импорта] }
    { 132 ;   ;Importing Description;Text250      ;CaptionML=[ENU=Importing Description;
                                                              RUS=Описание импорта] }
    { 133 ;   ;Costs Distribution  ;Text30        ;CaptionML=[ENU=Costs Distribution;
                                                              RUS=Распределение затрат] }
    { 134 ;   ;Message Structure   ;Text30        ;CaptionML=[ENU=Message Structure;
                                                              RUS=Структура сообщения] }
    { 135 ;   ;Own Address Info.   ;Text30        ;CaptionML=[ENU=Own Address Info.;
                                                              RUS=Сведения о собственном адресе.] }
    { 170 ;   ;Creditor No.        ;Code35        ;CaptionML=[ENU=Creditor No.;
                                                              RUS=Номер кредитора] }
    { 171 ;   ;Transit No.         ;Code35        ;CaptionML=[ENU=Transit No.;
                                                              RUS=Номер транзитного счета] }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35    ;CaptionML=[ENU=Applies-to Ext. Doc. No.;
                                                              RUS=Применяемый внешний номер документа] }
    { 200 ;   ;Format Command      ;Code4         ;CaptionML=[ENU=Format Command;
                                                              RUS=Команда формата] }
    { 201 ;   ;Format Remittance Info Type;Code1  ;CaptionML=[ENU=Format Remittance Info Type;
                                                              RUS=Тип информации перевода формата] }
    { 220 ;   ;Format Payment Type ;Code2         ;CaptionML=[ENU=Format Payment Type;
                                                              RUS=Тип платежа формата] }
    { 221 ;   ;Format Expense Code ;Code1         ;CaptionML=[ENU=Format Expense Code;
                                                              RUS=Код расходов формата] }
    { 222 ;   ;Format Text Code    ;Code3         ;CaptionML=[ENU=Format Text Code;
                                                              RUS=Код текста формата] }
    { 283 ;   ;Format Form Type    ;Code2         ;CaptionML=[ENU=Format Form Type;
                                                              RUS=Тип формы формата] }
    { 12402;  ;Sender VAT Reg. No. ;Text20        ;CaptionML=[ENU=Sender VAT Reg. No.;
                                                              RUS=ИНН отправителя] }
    { 12407;  ;Sender Transit No.  ;Code20        ;CaptionML=[ENU=Sender Transit No.;
                                                              RUS=Номер транзитного счета отправителя] }
    { 12408;  ;Sender KPP          ;Code20        ;CaptionML=[ENU=Sender KPP;
                                                              RUS=КПП отправителя] }
    { 12410;  ;Recipient VAT Reg. No.;Text20      ;CaptionML=[ENU=Recipient VAT Reg. No.;
                                                              RUS=ИНН получателя] }
    { 12415;  ;Recipient Transit No.;Code20       ;CaptionML=[ENU=Recipient Transit No.;
                                                              RUS=Номер транзитного счета получателя] }
    { 12416;  ;Recipient KPP       ;Code20        ;CaptionML=[ENU=Recipient KPP;
                                                              RUS=КПП получателя] }
    { 12427;  ;Payment Method      ;Option        ;CaptionML=[ENU=Payment Method;
                                                              RUS=Способ платежа];
                                                   OptionCaptionML=[ENU=" ,Mail,Telegraph,Through Moscow,Clearing,Electronic";
                                                                    RUS=" ,Почтой,Телеграфом,Через Москву,Клиринг,Электронный"];
                                                   OptionString=[ ,Mail,Telegraph,Through Moscow,Clearing,Electronic] }
    { 12428;  ;Payment Variant     ;Code10        ;CaptionML=[ENU=Payment Variant;
                                                              RUS=Вариант оплаты] }
    { 12430;  ;Payment Subsequence ;Code10        ;CaptionML=[ENU=Payment Subsequence;
                                                              RUS=Очередность платежа] }
    { 12440;  ;Payment Purpose     ;Text250       ;CaptionML=[ENU=Payment Purpose;
                                                              RUS=Цель платежа] }
    { 12441;  ;Sender Name         ;Text50        ;CaptionML=[ENU=Sender Name;
                                                              RUS=Имя отправителя] }
    { 12442;  ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              RUS=Дата создания] }
    { 12443;  ;Creation Time       ;Text30        ;CaptionML=[ENU=Creation Time;
                                                              RUS=Время создания] }
    { 12444;  ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              RUS=Дата начала] }
    { 12445;  ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              RUS=Дата окончания] }
    { 12446;  ;Payment Code        ;Text20        ;CaptionML=[ENU=Payment Code;
                                                              RUS=Код платежа] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TempPaymentExportRemittanceText@1001 : TEMPORARY Record 1229;
      PreserveNonLatinCharacters@1004 : Boolean;

    PROCEDURE InitData@1(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      RESET;
      CLEAR(TempPaymentExportRemittanceText);
      INIT;
      Amount := GenJnlLine.Amount;
      "Currency Code" := GenJnlLine."Currency Code";
    END;

    PROCEDURE AddRemittanceText@3(NewText@1000 : Text[140]);
    BEGIN
      IF NewText = '' THEN
        EXIT;
      IF TempPaymentExportRemittanceText.FINDLAST THEN;
      TempPaymentExportRemittanceText."Pmt. Export Data Entry No." := "Entry No.";
      TempPaymentExportRemittanceText."Line No." += 1;
      IF PreserveNonLatinCharacters THEN
        TempPaymentExportRemittanceText.Text := NewText
      ELSE
        TempPaymentExportRemittanceText.Text := COPYSTR(ConvertToASCII(NewText),1,MAXSTRLEN(TempPaymentExportRemittanceText.Text));
      TempPaymentExportRemittanceText.INSERT;
    END;

    PROCEDURE GetRemittanceTexts@5(VAR PaymentExportRemittanceText@1000 : Record 1229);
    BEGIN
      IF TempPaymentExportRemittanceText.FINDSET THEN
        REPEAT
          PaymentExportRemittanceText := TempPaymentExportRemittanceText;
          PaymentExportRemittanceText.INSERT;
        UNTIL TempPaymentExportRemittanceText.NEXT = 0;
    END;

    PROCEDURE AddGenJnlLineErrorText@8(GenJnlLine@1001 : Record 81;NewText@1000 : Text);
    BEGIN
      GenJnlLine.InsertPaymentFileError(NewText);
    END;

    LOCAL PROCEDURE ConvertToASCII@9(Text@1000 : Text) : Text;
    VAR
      StringConversionManagement@1004 : Codeunit 47;
    BEGIN
      EXIT(StringConversionManagement.WindowsToASCII(Text));
    END;

    PROCEDURE SetPreserveNonLatinCharacters@15(NewPreserveNonLatinCharacters@1000 : Boolean);
    BEGIN
      PreserveNonLatinCharacters := NewPreserveNonLatinCharacters;
    END;

    PROCEDURE GetPreserveNonLatinCharacters@17() : Boolean;
    BEGIN
      EXIT(PreserveNonLatinCharacters);
    END;

    LOCAL PROCEDURE PaymentExportConvertToLatin@22();
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      ConvertFieldsToLatinCharacters(RecRef);
      RecRef.SETTABLE(Rec);
    END;

    PROCEDURE CompanyInformationConvertToLatin@20(VAR CompanyInformation@1000 : Record 79);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(CompanyInformation);
      ConvertFieldsToLatinCharacters(RecRef);
      RecRef.SETTABLE(CompanyInformation);
    END;

    LOCAL PROCEDURE ConvertFieldsToLatinCharacters@19(VAR RecRef@1001 : RecordRef);
    VAR
      StringConversionManagement@1004 : Codeunit 47;
      FieldRef@1002 : FieldRef;
      i@1003 : Integer;
    BEGIN
      PreserveNonLatinCharacters := FALSE;
      FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FieldRef := RecRef.FIELDINDEX(i);
        IF (FORMAT(FieldRef.CLASS) = 'Normal') AND (FORMAT(FieldRef.TYPE) IN ['Text','Code']) THEN
          FieldRef.VALUE := COPYSTR(StringConversionManagement.WindowsToASCII(FORMAT(FieldRef.VALUE)),1,FieldRef.LENGTH);
      END;
    END;

    PROCEDURE SetCustomerAsRecipient@2(VAR Customer@1000 : Record 18;VAR CustomerBankAccount@1001 : Record 287);
    BEGIN
      "Recipient Name" := Customer.Name;
      "Recipient Address" := Customer.Address;
      "Recipient City" := COPYSTR(Customer.City,1,35);
      "Recipient County" := Customer.County;
      "Recipient Post Code" := Customer."Post Code";
      "Recipient Country/Region Code" := Customer."Country/Region Code";
      "Recipient Email Address" := Customer."E-Mail";
      "Recipient Bank Name" := CustomerBankAccount.Name;
      "Recipient Bank Address" := CustomerBankAccount.Address;
      "Recipient Bank City" := COPYSTR(CustomerBankAccount.City,1,35);
      "Recipient Bank County" := CustomerBankAccount.County;
      "Recipient Bank Post Code" := CustomerBankAccount."Post Code";
      "Recipient Bank Country/Region" := CustomerBankAccount."Country/Region Code";
      "Recipient Bank BIC" := CustomerBankAccount."SWIFT Code";
      "Recipient Bank Acc. No." := COPYSTR(CustomerBankAccount.GetBankAccountNo,1,MAXSTRLEN("Recipient Bank Acc. No."));
      "Recipient Bank Clearing Std." := CustomerBankAccount."Bank Clearing Standard";
      "Recipient Bank Clearing Code" := CustomerBankAccount."Bank Clearing Code";
    END;

    PROCEDURE SetVendorAsRecipient@10(VAR Vendor@1000 : Record 23;VAR VendorBankAccount@1001 : Record 288);
    BEGIN
      "Recipient Name" := Vendor.Name;
      "Recipient Address" := Vendor.Address;
      "Recipient City" := COPYSTR(Vendor.City,1,35);
      "Recipient County" := Vendor.County;
      "Recipient Post Code" := Vendor."Post Code";
      "Recipient Country/Region Code" := Vendor."Country/Region Code";
      "Recipient Email Address" := Vendor."E-Mail";
      "Recipient Bank Name" := VendorBankAccount.Name;
      "Recipient Bank Address" := VendorBankAccount.Address;
      "Recipient Bank City" := COPYSTR(VendorBankAccount.City,1,35);
      "Recipient Bank County" := VendorBankAccount.County;
      "Recipient Bank Post Code" := VendorBankAccount."Post Code";
      "Recipient Bank Country/Region" := VendorBankAccount."Country/Region Code";
      "Recipient Bank BIC" := VendorBankAccount."SWIFT Code";
      "Recipient Bank Acc. No." := COPYSTR(VendorBankAccount.GetBankAccountNo,1,MAXSTRLEN("Recipient Bank Acc. No."));
      "Recipient Bank Clearing Std." := VendorBankAccount."Bank Clearing Standard";
      "Recipient Bank Clearing Code" := VendorBankAccount."Bank Clearing Code";
    END;

    PROCEDURE SetBankAsSenderBank@11(BankAccount@1000 : Record 270);
    BEGIN
      "Sender Bank Name - Data Conv." := BankAccount."Bank Name - Data Conversion";
      "Sender Bank Name" := BankAccount.Name;
      "Sender Bank Address" := BankAccount.Address;
      "Sender Bank City" := BankAccount.City;
      "Sender Bank County" := BankAccount.County;
      "Sender Bank Post Code" := BankAccount."Post Code";
      "Sender Bank Account Code" := BankAccount."No.";
      "Sender Bank Account No." := COPYSTR(BankAccount.GetBankAccountNo,1,MAXSTRLEN("Sender Bank Account No."));
      "Sender Bank BIC" := BankAccount."SWIFT Code";
      "Sender Bank Clearing Std." := BankAccount."Bank Clearing Standard";
      "Sender Bank Clearing Code" := BankAccount."Bank Clearing Code";
    END;

    PROCEDURE SetCreditorIdentifier@6(BankAccount@1000 : Record 270);
    BEGIN
      BankAccount.TESTFIELD("Creditor No.");
      "Creditor No." := BankAccount."Creditor No.";
      "Transit No." := BankAccount."Transit No.";
    END;

    PROCEDURE SetCreditTransferIDs@7(MessageID@1000 : Code[20]);
    BEGIN
      "Message ID" := MessageID;
      "Payment Information ID" := MessageID + '/' + FORMAT("Entry No.");
      "End-to-End ID" := "Payment Information ID";
    END;

    PROCEDURE IsFieldBlank@4(FieldID@1003 : Integer) : Boolean;
    VAR
      RecRef@1005 : RecordRef;
      FieldRef@1002 : FieldRef;
      BlankValue@1000 : Text;
    BEGIN
      RecRef.GETTABLE(Rec);
      FieldRef := RecRef.FIELD(FieldID);
      CASE FORMAT(FieldRef.TYPE) OF
        'Text','Code','Date':
          BlankValue := '';
        'Decimal','Integer':
          BlankValue := '0';
      END;
      EXIT(FORMAT(FieldRef.VALUE) = BlankValue);
    END;

    BEGIN
    END.
  }
}

