OBJECT Table 17350 Person
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 HumanResSetup.GET;
                 HumanResSetup.TESTFIELD("Person Nos.");
                 NoSeriesMgt.InitSeries(HumanResSetup."Person Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
             END;

    OnModify=BEGIN
               IF Vendor.READPERMISSION THEN
                 PersonVendorUpdate.PersonToVendor(xRec,Rec);
             END;

    OnDelete=BEGIN
               PersonNameHistory.SETRANGE("Person No.","No.");
               PersonNameHistory.DELETEALL;
             END;

    CaptionML=[ENU=Person;
               RUS=Физическое лицо];
    LookupPageID=Page17351;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  HumanResSetup.GET;
                                                                  NoSeriesMgt.TestManual(HumanResSetup."Person Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              RUS=Код] }
    { 2   ;   ;First Name          ;Text30        ;OnValidate=BEGIN
                                                                IF (xRec."First Name" <> '') AND UsedAsEmployee THEN
                                                                  ERROR(Text007);

                                                                IF ("First Name" <> '') AND ("Middle Name" <> '') THEN
                                                                  Initials := COPYSTR("First Name",1,1) + '.' + COPYSTR("Middle Name",1,1) + '.';

                                                                VALIDATE("Full Name",GetFullName);

                                                                IF "First Name" <> xRec."First Name" THEN BEGIN
                                                                  Employee.RESET;
                                                                  Employee.SETCURRENTKEY("Person No.");
                                                                  Employee.SETRANGE("Person No.","No.");
                                                                  Employee.MODIFYALL("First Name","First Name");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=First Name;
                                                              RUS=Имя] }
    { 3   ;   ;Middle Name         ;Text30        ;OnValidate=BEGIN
                                                                IF (xRec."Middle Name" <> '') AND UsedAsEmployee THEN
                                                                  ERROR(Text007);

                                                                IF ("First Name" <> '') AND ("Middle Name" <> '') THEN
                                                                  Initials := COPYSTR("First Name",1,1) + '.' + COPYSTR("Middle Name",1,1) + '.';

                                                                VALIDATE("Full Name",GetFullName);

                                                                IF "Middle Name" <> xRec."Middle Name" THEN BEGIN
                                                                  Employee.RESET;
                                                                  Employee.SETCURRENTKEY("Person No.");
                                                                  Employee.SETRANGE("Person No.","No.");
                                                                  Employee.MODIFYALL("Middle Name","Middle Name");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Middle Name;
                                                              RUS=Отчество] }
    { 4   ;   ;Last Name           ;Text30        ;OnValidate=BEGIN
                                                                IF (xRec."Last Name" <> '') AND UsedAsEmployee THEN
                                                                  ERROR(Text007);

                                                                VALIDATE("Full Name",GetFullName);

                                                                IF "Last Name" <> xRec."Last Name" THEN BEGIN
                                                                  Employee.RESET;
                                                                  Employee.SETCURRENTKEY("Person No.");
                                                                  Employee.SETRANGE("Person No.","No.");
                                                                  Employee.MODIFYALL("Last Name","Last Name");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Last Name;
                                                              RUS=Фамилия] }
    { 5   ;   ;Initials            ;Text30        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Initials)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := COPYSTR(Initials,1,MAXSTRLEN("Search Name"));
                                                              END;

                                                   CaptionML=[ENU=Initials;
                                                              RUS=Инициалы] }
    { 6   ;   ;Full Name           ;Text100       ;OnValidate=BEGIN
                                                                "Search Name" := UPPERCASE(COPYSTR("Full Name",1,MAXSTRLEN("Search Name")));
                                                              END;

                                                   CaptionML=[ENU=Full Name;
                                                              RUS=ФИО] }
    { 7   ;   ;Search Name         ;Text50        ;CaptionML=[ENU=Search Name;
                                                              RUS=Имя поиска] }
    { 8   ;   ;Last Name Change Date;Date         ;CaptionML=[ENU=Last Name Change Date;
                                                              RUS=Дата изменения фамилии];
                                                   Editable=No }
    { 13  ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              RUS=Телефон] }
    { 14  ;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              RUS=Мобильный телефон] }
    { 15  ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              RUS=Эл. почта] }
    { 19  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              RUS=Фотография];
                                                   SubType=Bitmap }
    { 20  ;   ;Birth Date          ;Date          ;OnValidate=BEGIN
                                                                IF "Birth Date" <> xRec."Birth Date" THEN BEGIN
                                                                  Employee.RESET;
                                                                  Employee.SETCURRENTKEY("Person No.");
                                                                  Employee.SETRANGE("Person No.","No.");
                                                                  Employee.MODIFYALL("Birth Date","Birth Date");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Birth Date;
                                                              RUS=Дата рождения] }
    { 21  ;   ;Social Security No. ;Text14        ;OnValidate=VAR
                                                                Pos10@1210000 : Integer;
                                                                CheckSum@1210001 : Integer;
                                                              BEGIN
                                                                IF "Social Security No." <> '' THEN BEGIN
                                                                  IF STRLEN("Social Security No.") <> 14 THEN
                                                                    ERROR(Text003,FIELDCAPTION("Social Security No."));
                                                                  IF "Social Security No." <> '000-000-000 00' THEN
                                                                    IF (COPYSTR("Social Security No.",4,1) = '-') AND
                                                                       (COPYSTR("Social Security No.",8,1) = '-') AND
                                                                       ((COPYSTR("Social Security No.",12,1) = ' ') OR (COPYSTR("Social Security No.",12,1) = '-')) AND
                                                                       EVALUATE(Pos10,COPYSTR("Social Security No.",13,2)) AND
                                                                       (DELCHR(DELCHR(COPYSTR("Social Security No.",1,11),'=','-'),'=','0987654321') = '')
                                                                    THEN BEGIN
                                                                      CheckSum := ((101 - STRCHECKSUM(DELCHR(COPYSTR("Social Security No.",1,11),'=','-'),'987654321',101)) MOD 101);
                                                                      IF ((CheckSum = 100) OR (CheckSum = 101)) AND (Pos10 <> 0) THEN
                                                                        ERROR(Text005,FIELDCAPTION("Social Security No."),0);
                                                                      IF (CheckSum < 100) AND (CheckSum <> Pos10) THEN
                                                                        ERROR(Text005,FIELDCAPTION("Social Security No."),CheckSum);
                                                                    END ELSE
                                                                      ERROR(Text003);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Social Security No.;
                                                              RUS=Страховой номер ПФР] }
    { 22  ;   ;VAT Registration No.;Code20        ;OnValidate=VAR
                                                                VATRegNoFormat@1210000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.",'',"No.",DATABASE::Person);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              RUS=ИНН];
                                                   CharAllowed=09 }
    { 23  ;   ;Tax Inspection Code ;Code4         ;CaptionML=[ENU=Tax Inspection Code;
                                                              RUS=Номер налоговой инспекции] }
    { 24  ;   ;Gender              ;Option        ;OnValidate=BEGIN
                                                                IF Gender <> xRec.Gender THEN BEGIN
                                                                  Employee.RESET;
                                                                  Employee.SETCURRENTKEY("Person No.");
                                                                  Employee.SETRANGE("Person No.","No.");
                                                                  Employee.MODIFYALL(Gender,Gender);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Gender;
                                                              RUS=Пол];
                                                   OptionCaptionML=[ENU=" ,Female,Male";
                                                                    RUS=" ,Женский,Мужской"];
                                                   OptionString=[ ,Female,Male] }
    { 25  ;   ;Single Parent       ;Boolean       ;CaptionML=[ENU=Single Parent;
                                                              RUS=Одинокий родитель] }
    { 26  ;   ;Family Status       ;Code10        ;TableRelation="Classificator OKIN".Code WHERE (Group=CONST(10));
                                                   CaptionML=[ENU=Family Status;
                                                              RUS=Семейное положение] }
    { 27  ;   ;Citizenship         ;Code10        ;TableRelation="Classificator OKIN".Code WHERE (Group=CONST(02));
                                                   CaptionML=[ENU=Citizenship;
                                                              RUS=Гражданство] }
    { 28  ;   ;Nationality         ;Code10        ;TableRelation="Classificator OKIN".Code WHERE (Group=CONST(03));
                                                   CaptionML=[ENU=Nationality;
                                                              RUS=Национальность] }
    { 29  ;   ;Native Language     ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Native Language;
                                                              RUS=Родной язык] }
    { 30  ;   ;Non-Resident        ;Boolean       ;CaptionML=[ENU=Non-Resident;
                                                              RUS=Нерезидент] }
    { 31  ;   ;Identity Document Type;Code2       ;TableRelation="Taxpayer Document Type";
                                                   CaptionML=[ENU=Identity Document Type;
                                                              RUS=Код индентиф. документа] }
    { 32  ;   ;Sick Leave Payment Benefit;Boolean ;CaptionML=[ENU=Sick Leave Payment Benefit;
                                                              RUS=Льгота по оплате больничного] }
    { 33  ;   ;Citizenship Country/Region;Code10  ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF "Citizenship Country/Region" <> xRec."Citizenship Country/Region" THEN BEGIN
                                                                  Employee.RESET;
                                                                  Employee.SETCURRENTKEY("Person No.");
                                                                  Employee.SETRANGE("Person No.","No.");
                                                                  Employee.MODIFYALL("Country/Region Code","Citizenship Country/Region");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Citizenship Country/Region;
                                                              RUS=Код страны/региона по гражданству] }
    { 39  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(Person),
                                                                                                          No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              RUS=Комментарий];
                                                   Editable=No }
    { 40  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              RUS=Дата последнего изменения];
                                                   Editable=No }
    { 41  ;   ;Birthplace Type     ;Option        ;CaptionML=[ENU=Birthplace Type;
                                                              RUS=Тип места рождения];
                                                   OptionCaptionML=[ENU=Standard,Special;
                                                                    RUS=Стандартный,Специальный];
                                                   OptionString=Standard,Special }
    { 53  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              RUS=Серия номеров];
                                                   Editable=No }
    { 80  ;   ;Military Status     ;Option        ;CaptionML=[ENU=Military Status;
                                                              RUS=Статус для воинской службы];
                                                   OptionCaptionML=[ENU=Not Liable,Liable,Dismissed;
                                                                    RUS=Не подлежит,Подлежит,Уволен];
                                                   OptionString=Not Liable,Liable,Dismissed }
    { 81  ;   ;Military Rank       ;Code10        ;TableRelation="Classificator OKIN".Code WHERE (Group=CONST(17));
                                                   CaptionML=[ENU=Military Rank;
                                                              RUS=Воинское звание] }
    { 82  ;   ;Military Speciality No.;Text15     ;CaptionML=[ENU=Military Speciality No.;
                                                              RUS=Номер военно-учетной специальности] }
    { 83  ;   ;Military Agency     ;Text20        ;TableRelation="General Directory".Code WHERE (Type=CONST(Military Agency));
                                                   CaptionML=[ENU=Military Agency;
                                                              RUS=Воинская группа учета] }
    { 84  ;   ;Military Retirement Category;Option;CaptionML=[ENU=Military Retirement Category;
                                                              RUS=Воинская категория запаса];
                                                   OptionCaptionML=[ENU=" ,1,2,3";
                                                                    RUS=" ,1,2,3"];
                                                   OptionString=[ ,1,2,3] }
    { 85  ;   ;Military Structure  ;Text20        ;TableRelation="General Directory".Code WHERE (Type=CONST(Military Composition));
                                                   CaptionML=[ENU=Military Structure;
                                                              RUS=Воинский состав] }
    { 86  ;   ;Military Fitness    ;Option        ;CaptionML=[ENU=Military Fitness;
                                                              RUS=Годность к воинской службе];
                                                   OptionCaptionML=[ENU=A-Valid,B-Valid with insignificant restrictions,V-Valid with restrictions,G-Temporary not valid,D-Not valid;
                                                                    RUS=А-Годен,Б-Годен с незначительными ограничениями,В-Ограниченно годен,Г-Временно не годен,Д-Не годен];
                                                   OptionString=A-Valid,B-Valid with insignificant restrictions,V-Valid with restrictions,G-Temporary not valid,D-Not valid }
    { 87  ;   ;Military Registration No.;Text15   ;CaptionML=[ENU=Military Registration No.;
                                                              RUS=Воинский учетный номер] }
    { 88  ;   ;Military Registration Office;Text50;TableRelation="General Directory".Code WHERE (Type=CONST(Military Office));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Military Registration Office;
                                                              RUS=Военный комиссариат] }
    { 89  ;   ;Recruit             ;Boolean       ;CaptionML=[ENU=Recruit;
                                                              RUS=Призывник] }
    { 90  ;   ;Reservist           ;Boolean       ;CaptionML=[ENU=Reservist;
                                                              RUS=В запасе] }
    { 91  ;   ;Mobilisation Order  ;Boolean       ;CaptionML=[ENU=Mobilisation Order;
                                                              RUS=Мобилизационное предписание] }
    { 92  ;   ;Military Dismissal Reason;Option   ;CaptionML=[ENU=Military Dismissal Reason;
                                                              RUS=Причина снятия с воинского учета];
                                                   OptionCaptionML=[ENU=" ,Age,State of Health";
                                                                    RUS=" ,Возраст,Состояние здоровья"];
                                                   OptionString=[ ,Age,State of Health] }
    { 93  ;   ;Military Dismissal Date;Date       ;CaptionML=[ENU=Military Dismissal Date;
                                                              RUS=Дата снятия с воинского учета] }
    { 94  ;   ;Militaty Duty Relation;Code10      ;TableRelation="Classificator OKIN".Code WHERE (Group=CONST(16));
                                                   CaptionML=[ENU=Militaty Duty Relation;
                                                              RUS=Отношение к воинской обязанности] }
    { 95  ;   ;Special Military Register;Boolean  ;CaptionML=[ENU=Special Military Register;
                                                              RUS=Специальный воинский учет] }
    { 100 ;   ;First Name (English);Text30        ;CaptionML=[ENU=First Name (English);
                                                              RUS=Имя (English)] }
    { 101 ;   ;Middle Name (English);Text30       ;CaptionML=[ENU=Middle Name (English);
                                                              RUS=Отчество (English)] }
    { 102 ;   ;Last Name (English) ;Text30        ;CaptionML=[ENU=Last Name (English);
                                                              RUS=Фамилия (English)] }
    { 103 ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor WHERE (Vendor Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                IF ("Vendor No." <> xRec."Vendor No.") AND
                                                                   ("Vendor No." <> '')
                                                                THEN BEGIN
                                                                  Person.RESET;
                                                                  Person.SETRANGE("Vendor No.","Vendor No.");
                                                                  Person.SETFILTER("No.",'<>%1',"No.");
                                                                  IF Person.FINDFIRST THEN
                                                                    ERROR(Text006,Person."No.","Vendor No.");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              Vendor@1210001 : Record 23;
                                                              VendorList@1210000 : Page 27;
                                                            BEGIN
                                                              Vendor.SETCURRENTKEY("Vendor Type");
                                                              Vendor.FILTERGROUP(2);
                                                              Vendor.SETRANGE("Vendor Type",Vendor."Vendor Type"::Person);
                                                              Vendor.FILTERGROUP(0);
                                                              IF "Vendor No." <> '' THEN BEGIN
                                                                Vendor.GET("Vendor No.");
                                                                VendorList.SETRECORD(Vendor);
                                                              END;
                                                              VendorList.SETTABLEVIEW(Vendor);
                                                              VendorList.LOOKUPMODE := TRUE;
                                                              IF VendorList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                VendorList.GETRECORD(Vendor);
                                                                "Vendor No." := Vendor."No.";
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Vendor No.;
                                                              RUS=Код поставщика] }
    { 110 ;   ;Total Service (Days);Integer       ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Total Service (Days);
                                                              RUS=Общий стаж (дней)];
                                                   MinValue=0;
                                                   MaxValue=30 }
    { 111 ;   ;Total Service (Months);Integer     ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Total Service (Months);
                                                              RUS=Общий стаж (месяцев)];
                                                   MinValue=0;
                                                   MaxValue=11 }
    { 112 ;   ;Total Service (Years);Integer      ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Total Service (Years);
                                                              RUS=Общий стаж (лет)];
                                                   MinValue=0 }
    { 113 ;   ;Insured Service (Days);Integer     ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Insured Service (Days);
                                                              RUS=Страховой стаж (дней)];
                                                   MinValue=0;
                                                   MaxValue=30 }
    { 114 ;   ;Insured Service (Months);Integer   ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Insured Service (Months);
                                                              RUS=Страховой стаж (месяцев)];
                                                   MinValue=0;
                                                   MaxValue=11 }
    { 115 ;   ;Insured Service (Years);Integer    ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Insured Service (Years);
                                                              RUS=Страховой стаж (лет)];
                                                   MinValue=0 }
    { 116 ;   ;Unbroken Service (Days);Integer    ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Unbroken Service (Days);
                                                              RUS=Непрерывный стаж (дней)];
                                                   MinValue=0;
                                                   MaxValue=30 }
    { 117 ;   ;Unbroken Service (Months);Integer  ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Unbroken Service (Months);
                                                              RUS=Непрерывный стаж (месяцев)];
                                                   MinValue=0;
                                                   MaxValue=11 }
    { 118 ;   ;Unbroken Service (Years);Integer   ;OnValidate=BEGIN
                                                                CheckJobHistory;
                                                              END;

                                                   CaptionML=[ENU=Unbroken Service (Years);
                                                              RUS=Непрерывный стаж (лет)];
                                                   MinValue=0 }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;VAT Registration No.                     }
    {    ;Last Name,First Name                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Last Name,First Name,Middle Name     }
  }
  CODE
  {
    VAR
      Vendor@1210011 : Record 23;
      HumanResSetup@1210000 : Record 5218;
      Person@1210002 : Record 17350;
      Employee@1210005 : Record 5200;
      AlternativeAddress@1210013 : Record 5201;
      PersonMedicalInfo@1210003 : Record 17353;
      EmployeeRelative@1210004 : Record 5205;
      PersonNameHistory@1210014 : Record 17351;
      NoSeriesMgt@1210001 : Codeunit 396;
      Text003@1210008 : TextConst 'ENU=%1 format must be xxx-xxx-xxx xx.;RUS=Значение %1 должно быть задано в формате xxx-xxx-xxx xx.';
      Text005@1210006 : TextConst 'ENU=Incorrect checksum for %1. Checksum must be %2.;RUS=Некорректная контрольная сумма %1. Контрольная сумма должна быть %2.';
      Text006@1210007 : TextConst 'ENU=Person No. %1 is already linked with %2.;RUS=Код физ. лица %1 уже связан с %2.';
      PersonVendorUpdate@1210012 : Codeunit 17352;
      Text007@1210010 : TextConst 'ENU=Please use function Change Name to modify person name.;RUS=Используйте функцию Изменение имени для изменения имени физ. лица.';

    PROCEDURE AssistEdit@2(OldPerson@1000 : Record 17350) : Boolean;
    BEGIN
      WITH Person DO BEGIN
        Person := Rec;
        HumanResSetup.GET;
        HumanResSetup.TESTFIELD("Position Nos.");
        IF NoSeriesMgt.SelectSeries(HumanResSetup."Person Nos.",OldPerson."No. Series","No. Series") THEN BEGIN
          HumanResSetup.GET;
          HumanResSetup.TESTFIELD("Person Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Person;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetFullName@1210007() : Text[100];
    BEGIN
      EXIT("Last Name" + ' ' + "First Name" + ' ' + "Middle Name");
    END;

    PROCEDURE GetFullNameOnDate@1210012(CurrDate@1210000 : Date) : Text[100];
    VAR
      PersonNameHistory@1210001 : Record 17351;
    BEGIN
      PersonNameHistory.SETRANGE("Person No.","No.");
      IF PersonNameHistory.ISEMPTY THEN
        EXIT(GetFullName);

      PersonNameHistory.SETFILTER("Start Date",'<=%1',CurrDate);
      PersonNameHistory.FINDLAST;
      EXIT(PersonNameHistory.GetFullName);
    END;

    PROCEDURE GetNameInitials@1210006() : Text[100];
    BEGIN
      EXIT("Last Name" + ' ' + Initials);
    END;

    PROCEDURE GetNameInitialsOnDate@1210013(CurrDate@1210000 : Date) : Text[100];
    VAR
      PersonNameHistory@1210001 : Record 17351;
    BEGIN
      PersonNameHistory.SETRANGE("Person No.","No.");
      IF PersonNameHistory.ISEMPTY THEN
        EXIT(GetNameInitials);

      PersonNameHistory.SETFILTER("Start Date",'<=%1',CurrDate);
      PersonNameHistory.FINDLAST;
      EXIT(PersonNameHistory.GetNameInitials);
    END;

    PROCEDURE GetEntireAge@1210005(BirthDate@1470000 : Date;CurrDate@1470001 : Date) : Decimal;
    VAR
      BD@1470002 : ARRAY [3] OF Integer;
      CD@1470007 : ARRAY [3] OF Integer;
      i@1470003 : Integer;
      EntireAge@1470004 : Integer;
    BEGIN
      IF CurrDate <= BirthDate THEN
        EXIT(0);
      FOR i := 1 TO 3 DO BEGIN
        BD[i] := DATE2DMY(BirthDate,i);
        CD[i] := DATE2DMY(CurrDate,i);
      END;
      EntireAge := CD[3] - BD[3];
      IF (CD[2] < BD[2]) OR (CD[2] = BD[2]) AND (CD[1] < BD[1]) THEN
        EntireAge -= 1;
      EXIT(EntireAge);
    END;

    PROCEDURE GetIdentityDoc@1210008(CurrDate@1210000 : Date;VAR PersonDoc@1210001 : Record 17352);
    BEGIN
      TESTFIELD("Identity Document Type");
      PersonDoc.RESET;
      PersonDoc.SETRANGE("Person No.","No.");
      PersonDoc.SETRANGE("Document Type","Identity Document Type");
      PersonDoc.SETRANGE("Valid from Date",0D,CurrDate);
      PersonDoc.SETFILTER("Valid to Date",'%1|%2..',0D,CurrDate);
      IF NOT PersonDoc.FINDLAST THEN
        CLEAR(PersonDoc);
    END;

    PROCEDURE IsChild@1210000(CurrentDate@1210000 : Date) : Boolean;
    BEGIN
      TESTFIELD("Birth Date");
      EXIT(GetEntireAge("Birth Date",CurrentDate) < 18);
    END;

    PROCEDURE IsVeteran@1210002(Type@1210000 : 'Chernobyl,Afganistan,Pensioneer';CurrentDate@1210001 : Date) : Boolean;
    BEGIN
      PersonMedicalInfo.SETRANGE("Person No.","No.");
      PersonMedicalInfo.SETRANGE("Starting Date",0D,CurrentDate);
      PersonMedicalInfo.SETFILTER("Ending Date",'%1|%2..',0D,CALCDATE('<1D>',CurrentDate));
      CASE Type OF
        Type::Chernobyl:
          PersonMedicalInfo.SETRANGE(Privilege,PersonMedicalInfo.Privilege::"Chernobyl Veteran");
        Type::Afganistan:
          PersonMedicalInfo.SETRANGE(Privilege,PersonMedicalInfo.Privilege::"Afghanistan Veteran");
        Type::Pensioneer:
          PersonMedicalInfo.SETRANGE(Privilege,PersonMedicalInfo.Privilege::Pensioner);
      END;
      EXIT(NOT PersonMedicalInfo.ISEMPTY);
    END;

    PROCEDURE IsDisabled@1210003(CurrentDate@1210000 : Date) : Boolean;
    BEGIN
      PersonMedicalInfo.SETRANGE("Person No.","No.");
      PersonMedicalInfo.SETRANGE("Starting Date",0D,CurrentDate);
      PersonMedicalInfo.SETFILTER("Ending Date",'%1|%2..',0D,CALCDATE('<1D>',CurrentDate));
      PersonMedicalInfo.SETFILTER("Disability Group",'<>%1',0);
      EXIT(NOT PersonMedicalInfo.ISEMPTY);
    END;

    PROCEDURE GetDisabilityGroup@1210014(CurrentDate@1210000 : Date) : Integer;
    BEGIN
      PersonMedicalInfo.SETRANGE("Person No.","No.");
      PersonMedicalInfo.SETRANGE("Starting Date",0D,CurrentDate);
      PersonMedicalInfo.SETFILTER("Ending Date",'%1|%2..',0D,CALCDATE('<1D>',CurrentDate));
      PersonMedicalInfo.SETFILTER("Disability Group",'<>%1',0);
      IF PersonMedicalInfo.FINDFIRST THEN
        EXIT(PersonMedicalInfo."Disability Group");

      EXIT(0);
    END;

    PROCEDURE ChildrenNumber@1210004(CurrentDate@1210000 : Date) Kids : Integer;
    VAR
      Relative@1210001 : Record 5204;
    BEGIN
      Kids := 0;
      EmployeeRelative.RESET;
      EmployeeRelative.SETRANGE("Person No.","No.");
      IF EmployeeRelative.FINDSET THEN
        REPEAT
          Relative.GET(EmployeeRelative."Relative Code");
          IF (Relative."Relative Type" = Relative."Relative Type"::Child) AND
             (GetEntireAge(EmployeeRelative."Birth Date",CurrentDate) < 18)
          THEN
            Kids := Kids + 1;
        UNTIL EmployeeRelative.NEXT = 0;
      EXIT(Kids);
    END;

    PROCEDURE UsedAsEmployee@1210009() : Boolean;
    BEGIN
      Employee.RESET;
      Employee.SETCURRENTKEY("Person No.");
      Employee.SETRANGE("Person No.","No.");
      EXIT(NOT Employee.ISEMPTY);
    END;

    PROCEDURE GetBirthPlace@1210010() BirthPlace : Text[50];
    BEGIN
      AlternativeAddress.RESET;
      AlternativeAddress.SETRANGE("Person No.","No.");
      AlternativeAddress.SETRANGE("Address Type",AlternativeAddress."Address Type"::Birthplace);
      IF AlternativeAddress.FINDFIRST THEN
        BirthPlace := AlternativeAddress.City;
    END;

    PROCEDURE CheckJobHistory@1210011();
    VAR
      PersonJobHistory@1210000 : Record 17354;
    BEGIN
      PersonJobHistory.SETRANGE("Person No.","No.");
      IF NOT PersonJobHistory.ISEMPTY THEN
        CASE CurrFieldNo OF
          FIELDNO("Total Service (Days)"):
            FIELDERROR("Total Service (Days)");
          FIELDNO("Total Service (Months)"):
            FIELDERROR("Total Service (Months)");
          FIELDNO("Total Service (Years)"):
            FIELDERROR("Total Service (Years)");
          FIELDNO("Insured Service (Days)"):
            FIELDERROR("Insured Service (Days)");
          FIELDNO("Insured Service (Months)"):
            FIELDERROR("Insured Service (Months)");
          FIELDNO("Insured Service (Years)"):
            FIELDERROR("Insured Service (Years)");
          FIELDNO("Unbroken Service (Days)"):
            FIELDERROR("Unbroken Service (Days)");
          FIELDNO("Unbroken Service (Months)"):
            FIELDERROR("Unbroken Service (Months)");
          FIELDNO("Unbroken Service (Years)"):
            FIELDERROR("Unbroken Service (Years)");
        END;
    END;

    BEGIN
    END.
  }
}

