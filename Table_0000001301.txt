OBJECT Table 1301 Item Template
{
  OBJECT-PROPERTIES
  {
    Date=23.02.17;
    Time=12:00:00;
    Version List=NAVW110.00.00.15601;
  }
  PROPERTIES
  {
    OnInsert=VAR
               FieldRefArray@1001 : ARRAY [17] OF FieldRef;
               RecRef@1000 : RecordRef;
             BEGIN
               TESTFIELD("Template Name");
               RecRef.GETTABLE(Rec);
               CreateFieldRefArray(FieldRefArray,RecRef);

               InsertConfigurationTemplateHeaderAndLines;
             END;

    OnModify=VAR
               FieldRefArray@1000 : ARRAY [17] OF FieldRef;
               RecRef@1001 : RecordRef;
             BEGIN
               TESTFIELD(Code);
               TESTFIELD("Template Name");
               RecRef.GETTABLE(Rec);
               CreateFieldRefArray(FieldRefArray,RecRef);
               ConfigTemplateManagement.UpdateConfigTemplateAndLines(Code,"Template Name",DATABASE::Item,FieldRefArray);
             END;

    OnDelete=VAR
               ConfigTemplateHeader@1000 : Record 8618;
             BEGIN
               IF ConfigTemplateHeader.GET(Code) THEN BEGIN
                 ConfigTemplateManagement.DeleteRelatedTemplates(Code,DATABASE::"Default Dimension");
                 ConfigTemplateHeader.DELETE(TRUE);
               END;
             END;

    CaptionML=[ENU=Item Template;
               RUS=Шаблон товара];
  }
  FIELDS
  {
    { 1   ;   ;Key                 ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Key;
                                                              RUS=Ключ] }
    { 2   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              RUS=Код];
                                                   NotBlank=Yes }
    { 3   ;   ;Template Name       ;Text50        ;CaptionML=[ENU=Template Name;
                                                              RUS=Название шаблона];
                                                   NotBlank=Yes }
    { 8   ;   ;Base Unit of Measure;Code10        ;TableRelation="Unit of Measure";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Base Unit of Measure;
                                                              RUS=Базовая единица измерения] }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::Service THEN
                                                                  VALIDATE("Inventory Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              RUS=Тип];
                                                   OptionCaptionML=[ENU=Inventory,Service;
                                                                    RUS=Запасы,Сервис];
                                                   OptionString=Inventory,Service }
    { 11  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              RUS=Учетная группа товаров] }
    { 14  ;   ;Item Disc. Group    ;Code20        ;TableRelation="Item Discount Group";
                                                   CaptionML=[ENU=Item Disc. Group;
                                                              RUS=Группа скидки товара] }
    { 15  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              RUS=Разрешить скидку по счету] }
    { 19  ;   ;Price/Profit Calculation;Option    ;CaptionML=[ENU=Price/Profit Calculation;
                                                              RUS=Расчет цены/прибыли];
                                                   OptionCaptionML=[ENU="Profit=Price-Cost,Price=Cost+Profit,No Relationship";
                                                                    RUS="Прибыль=цена-себестоимость,Цена=себестоимость+прибыль,Нет связи"];
                                                   OptionString=Profit=Price-Cost,Price=Cost+Profit,No Relationship }
    { 20  ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              RUS=Прибыль (%)];
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100 }
    { 21  ;   ;Costing Method      ;Option        ;CaptionML=[ENU=Costing Method;
                                                              RUS=Метод учета себестоимости];
                                                   OptionCaptionML=[ENU=FIFO,LIFO,Specific,Average,Standard;
                                                                    RUS=FIFO,LIFO,По серийным номерам,По средней,По стандартной];
                                                   OptionString=FIFO,LIFO,Specific,Average,Standard }
    { 28  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=[ENU=Indirect Cost %;
                                                              RUS=Косвенные затраты (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 87  ;   ;Price Includes VAT  ;Boolean       ;CaptionML=[ENU=Price Includes VAT;
                                                              RUS=Цена включает НДС] }
    { 91  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              RUS=Общая товарная группа] }
    { 96  ;   ;Automatic Ext. Texts;Boolean       ;CaptionML=[ENU=Automatic Ext. Texts;
                                                              RUS=Автом. вставка расш. текста] }
    { 98  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              RUS=Код налоговой группы] }
    { 99  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              RUS=НДС товарная группа] }
    { 5702;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              RUS=Код товарной категории] }
    { 5900;   ;Service Item Group  ;Code10        ;TableRelation="Service Item Group".Code;
                                                   CaptionML=[ENU=Service Item Group;
                                                              RUS=Группа сервисных товаров] }
    { 7300;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   CaptionML=[ENU=Warehouse Class Code;
                                                              RUS=Код класса склада] }
  }
  KEYS
  {
    {    ;Key                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ConfigTemplateManagement@1000 : Codeunit 8612;

    PROCEDURE CreateFieldRefArray@12(VAR FieldRefArray@1000 : ARRAY [17] OF FieldRef;RecRef@1003 : RecordRef);
    VAR
      I@1002 : Integer;
    BEGIN
      I := 1;

      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO(Type)));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Base Unit of Measure")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Automatic Ext. Texts")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Gen. Prod. Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("VAT Prod. Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Inventory Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Costing Method")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Indirect Cost %")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Price Includes VAT")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Profit %")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Price/Profit Calculation")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Allow Invoice Disc.")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Item Disc. Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Tax Group Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Warehouse Class Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Item Category Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Service Item Group")));
    END;

    LOCAL PROCEDURE AddToArray@4(VAR FieldRefArray@1000 : ARRAY [17] OF FieldRef;VAR I@1001 : Integer;CurrFieldRef@1002 : FieldRef);
    BEGIN
      FieldRefArray[I] := CurrFieldRef;
      I += 1;
    END;

    PROCEDURE InitializeTempRecordFromConfigTemplate@1(VAR TempItemTemplate@1000 : TEMPORARY Record 1301;ConfigTemplateHeader@1001 : Record 8618);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      TempItemTemplate.SETRANGE(Code,ConfigTemplateHeader.Code);
      TempItemTemplate.SETRANGE("Template Name",ConfigTemplateHeader.Description);
      IF NOT TempItemTemplate.FINDFIRST THEN BEGIN
        TempItemTemplate.INIT;
        TempItemTemplate.Code := ConfigTemplateHeader.Code;
        TempItemTemplate."Template Name" := ConfigTemplateHeader.Description;
        TempItemTemplate.INSERT;
      END;

      RecRef.GETTABLE(TempItemTemplate);

      ConfigTemplateManagement.ApplyTemplateLinesWithoutValidation(ConfigTemplateHeader,RecRef);

      RecRef.SETTABLE(TempItemTemplate);
    END;

    PROCEDURE CreateConfigTemplateFromExistingItem@5(Item@1000 : Record 27;VAR TempItemTemplate@1001 : TEMPORARY Record 1301);
    VAR
      DimensionsTemplate@1002 : Record 1302;
      ConfigTemplateHeader@1010 : Record 8618;
      RecRef@1008 : RecordRef;
      FieldRefArray@1004 : ARRAY [17] OF FieldRef;
      NewTemplateCode@1011 : Code[10];
    BEGIN
      RecRef.GETTABLE(Item);
      CreateFieldRefArray(FieldRefArray,RecRef);

      ConfigTemplateManagement.CreateConfigTemplateAndLines(NewTemplateCode,'',DATABASE::Item,FieldRefArray);
      DimensionsTemplate.CreateTemplatesFromExistingMasterRecord(Item."No.",NewTemplateCode,DATABASE::Item);
      ConfigTemplateHeader.GET(NewTemplateCode);
      InitializeTempRecordFromConfigTemplate(TempItemTemplate,ConfigTemplateHeader);
    END;

    PROCEDURE SaveAsTemplate@7(Item@1000 : Record 27);
    VAR
      TempItemTemplate@1001 : TEMPORARY Record 1301;
      ItemTemplateCard@1002 : Page 1342;
    BEGIN
      ItemTemplateCard.CreateFromItem(Item);
      ItemTemplateCard.SETRECORD(TempItemTemplate);
      ItemTemplateCard.LOOKUPMODE := TRUE;
      IF ItemTemplateCard.RUNMODAL = ACTION::LookupOK THEN;
    END;

    LOCAL PROCEDURE InsertConfigurationTemplateHeaderAndLines@2();
    VAR
      FieldRefArray@1001 : ARRAY [17] OF FieldRef;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      CreateFieldRefArray(FieldRefArray,RecRef);
      ConfigTemplateManagement.CreateConfigTemplateAndLines(Code,"Template Name",DATABASE::Item,FieldRefArray);
    END;

    PROCEDURE NewItemFromTemplate@3(VAR Item@1002 : Record 27) : Boolean;
    VAR
      ConfigTemplateHeader@1004 : Record 8618;
      ConfigTemplates@1001 : Page 1340;
    BEGIN
      ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Item);
      ConfigTemplateHeader.SETRANGE(Enabled,TRUE);

      IF ConfigTemplateHeader.COUNT = 1 THEN BEGIN
        ConfigTemplateHeader.FINDFIRST;
        InsertItemFromTemplate(ConfigTemplateHeader,Item);
        EXIT(TRUE);
      END;

      IF (ConfigTemplateHeader.COUNT > 1) AND GUIALLOWED THEN BEGIN
        ConfigTemplates.SETTABLEVIEW(ConfigTemplateHeader);
        ConfigTemplates.LOOKUPMODE(TRUE);
        ConfigTemplates.SetNewMode;
        IF ConfigTemplates.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ConfigTemplates.GETRECORD(ConfigTemplateHeader);
          InsertItemFromTemplate(ConfigTemplateHeader,Item);
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateItemFromTemplate@8(VAR Item@1000 : Record 27);
    VAR
      ConfigTemplateHeader@1001 : Record 8618;
      ConfigTemplates@1003 : Page 1340;
      ItemRecRef@1002 : RecordRef;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Item);
        ConfigTemplateHeader.SETRANGE(Enabled,TRUE);
        ConfigTemplates.SETTABLEVIEW(ConfigTemplateHeader);
        ConfigTemplates.LOOKUPMODE(TRUE);
        IF ConfigTemplates.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ConfigTemplates.GETRECORD(ConfigTemplateHeader);
          ItemRecRef.GETTABLE(Item);
          ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,ItemRecRef);
          ItemRecRef.SETTABLE(Item);
        END;
      END;
    END;

    PROCEDURE InsertItemFromTemplate@16(ConfigTemplateHeader@1006 : Record 8618;VAR Item@1003 : Record 27);
    VAR
      DimensionsTemplate@1001 : Record 1302;
      UnitOfMeasure@1004 : Record 204;
      ConfigTemplateMgt@1002 : Codeunit 8612;
      RecRef@1000 : RecordRef;
    BEGIN
      Item.INSERT(TRUE);
      RecRef.GETTABLE(Item);
      ConfigTemplateMgt.UpdateRecord(ConfigTemplateHeader,RecRef);
      RecRef.SETTABLE(Item);
      IF Item."Base Unit of Measure" = '' THEN BEGIN
        UnitOfMeasure.SETRANGE("International Standard Code",'EA'); // 'Each' ~= 'PCS'
        IF NOT UnitOfMeasure.FINDFIRST THEN BEGIN
          UnitOfMeasure.SETRANGE("International Standard Code");
          IF UnitOfMeasure.FINDFIRST THEN;
        END;
        Item.VALIDATE("Base Unit of Measure",UnitOfMeasure.Code);
      END;
      DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Item."No.",DATABASE::Item);
    END;

    BEGIN
    END.
  }
}

