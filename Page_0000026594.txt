OBJECT Page 26594 Stat. Rep. Table Cell Mapping
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Stat. Rep. Table Cell Mapping;
               RUS=Соответствие ячеек таблиц регл. отчета];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table26587;
    PageType=Card;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             "Int. Source Section CodeEnable" := TRUE;
             IntSourceColumnHeaderEnable := TRUE;
           END;

    OnAfterGetRecord=BEGIN
                       UpdateControls;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210000;1;Group     ;
                CaptionML=[ENU=General;
                           RUS=Общее] }

    { 1210001;2;Field     ;
                ToolTipML=[ENU=Specifies the report code for statutory reports.;
                           RUS=Определяет код отчета для регламентных отчетов.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Report Code";
                Editable=FALSE }

    { 1210003;2;Field     ;
                ToolTipML=[ENU=Specifies the table code associated with the statutory report.;
                           RUS=Определяет код таблицы, связанный с регламентным отчетом.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Code";
                Editable=FALSE }

    { 1210006;2;Field     ;
                ToolTipML=[ENU=Specifies the table row description associated with the statutory report.;
                           RUS=Определяет описание строки таблицы, связанное с регламентным отчетом.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Row Description";
                Editable=FALSE }

    { 1210008;2;Field     ;
                ToolTipML=[ENU=Specifies the table column header associated with the statutory report.;
                           RUS=Определяет заголовок столбца таблицы, связанный с регламентным отчетом.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Column Header";
                Editable=FALSE }

    { 1210014;2;Field     ;
                ToolTipML=[ENU=Specifies the internal source type for the statutory report.;
                           RUS=Определяет тип внутреннего источника для регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Int. Source Type";
                OnValidate=BEGIN
                             IntSourceTypeOnAfterValidate;
                           END;
                            }

    { 1210016;2;Field     ;
                ToolTipML=[ENU=Specifies the internal source section code associated with the statutory report.;
                           RUS=Определяет код раздела внутреннего источника, связанный с регламентным отчетом.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Int. Source Section Code";
                Enabled="Int. Source Section CodeEnable" }

    { 1210018;2;Field     ;
                ToolTipML=[ENU=Specifies the internal source number for statutory reports.;
                           RUS=Определяет номер внутреннего источника для регламентных отчетов.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Int. Source No." }

    { 1210010;2;Field     ;
                ToolTipML=[ENU=Specifies the internal source row description associated with the statutory report.;
                           RUS=Определяет описание строки внутреннего источника, связанное с регламентным отчетом.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Int. Source Row Description";
                Editable=FALSE;
                OnLookup=BEGIN
                           CASE "Int. Source Type" OF
                             "Int. Source Type"::"Acc. Schedule":
                               BEGIN
                                 AccScheduleLine.FILTERGROUP(2);
                                 AccScheduleLine.SETRANGE("Schedule Name","Int. Source No.");
                                 AccScheduleLine.FILTERGROUP(0);
                                 CLEAR(AccScheduleLines);
                                 AccScheduleLines.SETTABLEVIEW(AccScheduleLine);
                                 IF "Internal Source Row No." <> 0 THEN
                                   IF AccScheduleLine.GET("Int. Source No.","Internal Source Row No.") THEN
                                     AccScheduleLines.SETRECORD(AccScheduleLine);
                                 AccScheduleLines.LOOKUPMODE := TRUE;
                                 IF AccScheduleLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   AccScheduleLines.GETRECORD(AccScheduleLine);
                                   "Internal Source Row No." := AccScheduleLine."Line No.";
                                   "Int. Source Row Description" := AccScheduleLine.Description;
                                 END;
                               END;
                             "Int. Source Type"::"Tax Register":
                               BEGIN
                                 TaxRegisterTemplate.FILTERGROUP(2);
                                 TaxRegisterTemplate.SETRANGE("Section Code","Int. Source Section Code");
                                 TaxRegisterTemplate.SETRANGE(Code,"Int. Source No.");
                                 TaxRegisterTemplate.FILTERGROUP(0);
                                 CLEAR(TaxRegisterTemplateLines);
                                 TaxRegisterTemplateLines.SETTABLEVIEW(TaxRegisterTemplate);
                                 IF "Internal Source Row No." <> 0 THEN
                                   IF TaxRegisterTemplate.GET(
                                        "Int. Source Section Code",
                                        "Int. Source No.",
                                        "Internal Source Row No.")
                                   THEN
                                     TaxRegisterTemplateLines.SETRECORD(TaxRegisterTemplate);
                                 TaxRegisterTemplateLines.LOOKUPMODE := TRUE;
                                 IF TaxRegisterTemplateLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   TaxRegisterTemplateLines.GETRECORD(TaxRegisterTemplate);
                                   "Internal Source Row No." := TaxRegisterTemplate."Line No.";
                                   "Int. Source Row Description" := TaxRegisterTemplate.Description;
                                 END;
                               END;
                             "Int. Source Type"::"Tax Difference":
                               BEGIN
                                 TaxCalcLine.FILTERGROUP(2);
                                 TaxCalcLine.SETRANGE("Section Code","Int. Source Section Code");
                                 TaxCalcLine.SETRANGE(Code,"Int. Source No.");
                                 TaxCalcLine.FILTERGROUP(0);
                                 CLEAR(TaxCalcLines);
                                 TaxCalcLines.SETTABLEVIEW(TaxCalcLine);
                                 IF "Internal Source Row No." <> 0 THEN
                                   IF TaxCalcLine.GET(
                                        "Int. Source Section Code",
                                        "Int. Source No.",
                                        "Internal Source Row No.")
                                   THEN
                                     TaxCalcLines.SETRECORD(TaxCalcLine);
                                 TaxCalcLines.LOOKUPMODE := TRUE;
                                 IF TaxCalcLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   TaxCalcLines.GETRECORD(TaxCalcLine);
                                   "Internal Source Row No." := TaxCalcLine."Line No.";
                                   "Int. Source Row Description" := TaxCalcLine.Description;
                                 END;
                               END;
                             "Int. Source Type"::"Payroll Analysis Report":
                               BEGIN
                                 PayrollAnalysisReportName.GET("Int. Source No.");
                                 PayrollAnalysisReportName.TESTFIELD("Analysis Line Template Name");
                                 PayrollAnalysisLine.FILTERGROUP(2);
                                 PayrollAnalysisLine.SETRANGE(
                                   "Analysis Line Template Name",
                                   PayrollAnalysisReportName."Analysis Line Template Name");
                                 PayrollAnalysisLine.FILTERGROUP(0);
                                 CLEAR(PayrollAnalysisLines);
                                 PayrollAnalysisLines.SETTABLEVIEW(PayrollAnalysisLine);
                                 IF "Internal Source Row No." <> 0 THEN
                                   IF PayrollAnalysisLine.GET(
                                        PayrollAnalysisReportName."Analysis Line Template Name",
                                        "Internal Source Row No.")
                                   THEN
                                     PayrollAnalysisLines.SETRECORD(PayrollAnalysisLine);
                                 PayrollAnalysisLines.LOOKUPMODE := TRUE;
                                 PayrollAnalysisLines.EDITABLE := FALSE;
                                 PayrollAnalysisLines.SetCurrentAnalysisLineTempl(
                                   PayrollAnalysisReportName."Analysis Line Template Name");
                                 IF PayrollAnalysisLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   PayrollAnalysisLines.GETRECORD(PayrollAnalysisLine);
                                   "Internal Source Row No." := PayrollAnalysisLine."Line No.";
                                   "Int. Source Row Description" := PayrollAnalysisLine.Description;
                                 END;
                               END;
                           END;
                         END;
                          }

    { 1210012;2;Field     ;
                ToolTipML=[ENU=Specifies the internal source column header associated with the statutory report.;
                           RUS=Определяет заголовок столбца внутреннего источника, связанный с регламентным отчетом.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Int. Source Column Header";
                Enabled=IntSourceColumnHeaderEnable;
                Editable=FALSE;
                OnLookup=BEGIN
                           CASE "Int. Source Type" OF
                             "Int. Source Type"::"Acc. Schedule":
                               BEGIN
                                 AccScheduleName.GET("Int. Source No.");
                                 AccScheduleName.TESTFIELD("Default Column Layout");
                                 ColumnLayout.FILTERGROUP(2);
                                 ColumnLayout.SETRANGE("Column Layout Name",AccScheduleName."Default Column Layout");
                                 ColumnLayout.FILTERGROUP(0);
                                 CLEAR(ColumnLayouts);
                                 ColumnLayouts.SETTABLEVIEW(ColumnLayout);
                                 IF "Internal Source Column No." <> 0 THEN
                                   IF ColumnLayout.GET(AccScheduleName."Default Column Layout","Internal Source Column No.") THEN
                                     ColumnLayouts.SETRECORD(ColumnLayout);
                                 ColumnLayouts.LOOKUPMODE := TRUE;
                                 IF ColumnLayouts.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   ColumnLayouts.GETRECORD(ColumnLayout);
                                   "Internal Source Column No." := ColumnLayout."Line No.";
                                   "Int. Source Column Header" := ColumnLayout."Column Header";
                                 END;
                               END;
                             "Int. Source Type"::"Payroll Analysis Report":
                               BEGIN
                                 PayrollAnalysisReportName.GET("Int. Source No.");
                                 PayrollAnalysisReportName.TESTFIELD("Analysis Column Template Name");
                                 PayrollAnalysisColumn.FILTERGROUP(2);
                                 PayrollAnalysisColumn.SETRANGE(
                                   "Analysis Column Template",
                                   PayrollAnalysisReportName."Analysis Column Template Name");
                                 PayrollAnalysisColumn.FILTERGROUP(0);
                                 CLEAR(PayrollAnalysisColumns);
                                 PayrollAnalysisColumns.SETTABLEVIEW(PayrollAnalysisColumn);
                                 IF "Internal Source Column No." <> 0 THEN
                                   IF PayrollAnalysisColumn.GET(
                                        PayrollAnalysisReportName."Analysis Column Template Name",
                                        "Internal Source Column No.")
                                   THEN
                                     PayrollAnalysisColumns.SETRECORD(PayrollAnalysisColumn);
                                 PayrollAnalysisColumns.LOOKUPMODE := TRUE;
                                 PayrollAnalysisColumns.EDITABLE := FALSE;
                                 PayrollAnalysisColumns.SetCurrentColumnName(
                                   PayrollAnalysisReportName."Analysis Column Template Name");
                                 IF PayrollAnalysisColumns.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   PayrollAnalysisColumns.GETRECORD(PayrollAnalysisColumn);
                                   "Internal Source Column No." := PayrollAnalysisColumn."Line No.";
                                   "Int. Source Column Header" := PayrollAnalysisColumn."Column Header";
                                 END;
                               END;
                           END;
                         END;
                          }

  }
  CODE
  {
    VAR
      AccScheduleName@1210000 : Record 84;
      AccScheduleLine@1210002 : Record 85;
      ColumnLayout@1210003 : Record 334;
      TaxRegisterTemplate@1210004 : Record 17202;
      TaxCalcLine@1210008 : Record 17310;
      PayrollAnalysisReportName@1210009 : Record 14960;
      PayrollAnalysisLine@1210010 : Record 14962;
      PayrollAnalysisColumn@1210011 : Record 14964;
      AccScheduleLines@1210005 : Page 26595;
      ColumnLayouts@1210001 : Page 26596;
      PayrollAnalysisLines@1210012 : Page 14962;
      PayrollAnalysisColumns@1210013 : Page 14964;
      TaxRegisterTemplateLines@1210006 : Page 17212;
      TaxCalcLines@1210007 : Page 17320;
      IntSourceColumnHeaderEnable@19060001 : Boolean INDATASET;
      "Int. Source Section CodeEnable"@19053802 : Boolean INDATASET;

    PROCEDURE UpdateControls@1210000();
    VAR
      TaxReg@1210000 : Boolean;
    BEGIN
      TaxReg := "Int. Source Type" IN ["Int. Source Type"::"Tax Register","Int. Source Type"::"Tax Difference"];
      "Int. Source Section CodeEnable" := TaxReg;
      IntSourceColumnHeaderEnable := NOT TaxReg;
    END;

    PROCEDURE SetData@1210001(StatReportTableMapping@1210000 : Record 26587);
    BEGIN
      Rec := StatReportTableMapping;
      INSERT;
    END;

    LOCAL PROCEDURE IntSourceTypeOnAfterValidate@19073606();
    BEGIN
      UpdateControls;
    END;

    BEGIN
    END.
  }
}

