OBJECT Table 6300 Azure AD App Setup
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               IF COUNT > 1 THEN
                 ERROR(OnlyOneRecordErr);
             END;

    CaptionML=[ENU=Azure AD App Setup;
               RUS=Установка приложения Azure AD];
  }
  FIELDS
  {
    { 1   ;   ;App ID              ;GUID          ;CaptionML=[ENU=App ID;
                                                              RUS=Код приложения];
                                                   NotBlank=Yes }
    { 2   ;   ;Secret Key          ;BLOB          ;CaptionML=[ENU=Secret Key;
                                                              RUS=Секретный ключ] }
    { 3   ;   ;Primary Key         ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Primary Key;
                                                              RUS=Первичный ключ] }
    { 4   ;   ;Redirect URL        ;Text150       ;CaptionML=[ENU=Redirect URL;
                                                              RUS=URL-адрес перенаправления] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EncryptionManagement@1000 : Codeunit 1266;
      OnlyOneRecordErr@1001 : TextConst 'ENU=There should be only one record for Azure AD App Setup.;RUS=Должна быть только одна запись для установки приложения Azure AD.';

    PROCEDURE GetSecretKey@2() SecretKey : Text;
    VAR
      InStream@1000 : InStream;
    BEGIN
      CALCFIELDS("Secret Key");
      "Secret Key".CREATEINSTREAM(InStream);
      InStream.READ(SecretKey);

      IF EncryptionManagement.IsEncryptionPossible THEN
        EXIT(EncryptionManagement.Decrypt(SecretKey));

      EXIT(SecretKey);
    END;

    PROCEDURE SetSecretKey@3(SecretKey@1000 : Text);
    VAR
      OutStream@1001 : OutStream;
    BEGIN
      IF EncryptionManagement.IsEncryptionPossible THEN
        SecretKey := EncryptionManagement.Encrypt(SecretKey);

      "Secret Key".CREATEOUTSTREAM(OutStream);
      OutStream.WRITE(SecretKey);
    END;

    BEGIN
    END.
  }
}

