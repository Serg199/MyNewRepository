OBJECT Codeunit 17382 Employee Journal - Post Line
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    Permissions=TableData 17413=imd,
                TableData 17424=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EmplJnlLine@1210010 : Record 17382;
      Employee@1210008 : Record 5200;
      EmplLedgEntry@1210000 : Record 17413;
      PayrollElement@1210006 : Record 17400;
      PayrollReg@1210007 : Record 17424;
      EmplJnlCheckLine@1210003 : Codeunit 17381;
      TimesheetMgt@1210005 : Codeunit 17440;
      NextEntryNo@1210004 : Integer;

    PROCEDURE RunWithCheck@3(VAR EmplJnlLine2@1000 : Record 17382) : Integer;
    VAR
      EntryNo@1210000 : Integer;
    BEGIN
      EmplJnlLine.COPY(EmplJnlLine2);
      EntryNo := Code;
      EmplJnlLine2 := EmplJnlLine;
      EXIT(EntryNo);
    END;

    LOCAL PROCEDURE Code@1() : Integer;
    BEGIN
      WITH EmplJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;

        EmplJnlCheckLine.RUN(EmplJnlLine);

        IF NextEntryNo = 0 THEN BEGIN
          EmplLedgEntry.LOCKTABLE;
          IF EmplLedgEntry.FINDLAST THEN
            NextEntryNo := EmplLedgEntry."Entry No." + 1
          ELSE
            NextEntryNo := 1;
        END;

        IF "Document Date" = 0D THEN
          "Document Date" := "Posting Date";
        IF "HR Order Date" = 0D THEN
          "HR Order Date" := "Document Date";

        IF PayrollReg."No." = 0 THEN BEGIN
          PayrollReg.LOCKTABLE;
          IF PayrollReg.FINDLAST THEN
            PayrollReg."No." := PayrollReg."No." + 1
          ELSE
            PayrollReg."No." := 1;
          PayrollReg.INIT;
          PayrollReg."From Entry No." := NextEntryNo;
          PayrollReg."To Entry No." := NextEntryNo;
          PayrollReg."Creation Date" := TODAY;
          PayrollReg."Source Code" := "Source Code";
          PayrollReg."Journal Batch Name" := "Journal Batch Name";
          PayrollReg."User ID" := USERID;
          PayrollReg.INSERT;
        END;

        Employee.GET("Employee No.");
        Employee.TESTFIELD(Blocked,FALSE);

        CASE "Post Action" OF
          "Post Action"::Add:
            BEGIN
              // close wage elements if any
              PayrollElement.GET("Element Code");
              IF PayrollElement.Type = PayrollElement.Type::Wage THEN BEGIN
                EmplLedgEntry.RESET;
                EmplLedgEntry.SETCURRENTKEY("Element Code");
                EmplLedgEntry.SETRANGE("Element Code","Element Code");
                EmplLedgEntry.SETRANGE("Employee No.","Employee No.");
                EmplLedgEntry.SETRANGE("Contract No.","Contract No.");
                EmplLedgEntry.SETFILTER("Action Starting Date",'<%1',"Starting Date");
                EmplLedgEntry.SETRANGE("Action Ending Date",0D);
                IF EmplLedgEntry.FINDSET THEN
                  REPEAT
                    EmplLedgEntry."Action Ending Date" := CALCDATE('<-1D>',"Starting Date");
                    EmplLedgEntry.MODIFY;
                  UNTIL EmplLedgEntry.NEXT = 0;
              END;

              // insert new entry
              EmplLedgEntry.INIT;
              EmplLedgEntry."Entry No." := NextEntryNo;
              NextEntryNo := NextEntryNo + 1;
              EmplLedgEntry."Employee No." := "Employee No.";
              EmplLedgEntry."Position No." := "Position No.";
              EmplLedgEntry."Contract No." := "Contract No.";
              EmplLedgEntry."Element Code" := "Element Code";
              EmplLedgEntry."Action Starting Date" := "Starting Date";
              EmplLedgEntry."Action Ending Date" := "Ending Date";
              EmplLedgEntry."Period Code" := "Period Code";
              EmplLedgEntry."Wage Period From" := "Wage Period From";
              EmplLedgEntry."Wage Period To" := "Wage Period To";
              EmplLedgEntry."Time Activity Code" := "Time Activity Code";
              EmplLedgEntry.Description := Description;
              EmplLedgEntry.Amount := Amount;
              EmplLedgEntry.Quantity := Quantity;
              EmplLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
              EmplLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
              EmplLedgEntry."Posting Group" := "Posting Group";
              EmplLedgEntry."Currency Code" := "Currency Code";
              EmplLedgEntry."Calendar Code" := "Calendar Code";
              EmplLedgEntry."Payroll Calc Group" := "Payroll Calc Group";
              EmplLedgEntry."Document Type" := "Document Type";
              EmplLedgEntry."Document No." := "Document No.";
              EmplLedgEntry."Document Date" := "Document Date";
              EmplLedgEntry."HR Order No." := "HR Order No.";
              EmplLedgEntry."HR Order Date" := "HR Order Date";
              EmplLedgEntry."Sick Leave Type" := "Sick Leave Type";
              EmplLedgEntry."Vacation Type" := "Vacation Type";
              EmplLedgEntry."Payment Days" := "Payment Days";
              EmplLedgEntry."Payment Percent" := "Payment Percent";
              EmplLedgEntry."Payment Source" := "Payment Source";
              EmplLedgEntry."Days Not Paid" := "Days Not Paid";
              EmplLedgEntry."Relative Person No." := "Relative Person No.";
              EmplLedgEntry."AE Period From" := "AE Period From";
              EmplLedgEntry."AE Period To" := "AE Period To";
              EmplLedgEntry."Salary Indexation" := "Salary Indexation";
              EmplLedgEntry."Depends on Salary Element" := "Depends on Salary Element";
              EmplLedgEntry."Related to Entry No." := "Applies-to Entry";
              EmplLedgEntry.Terminated := Terminated;
              EmplLedgEntry."External Document No." := "External Document No.";
              EmplLedgEntry."External Document Date" := "External Document Date";
              EmplLedgEntry."External Document Issued By" := "External Document Issued By";
              EmplLedgEntry."Dimension Set ID" := "Dimension Set ID";
              EmplLedgEntry.INSERT;

              PayrollReg."To Entry No." := NextEntryNo - 1;
              PayrollReg.MODIFY;

              IF ("Time Activity Code" <> '') AND (NOT Terminated) THEN
                TimesheetMgt.CreateFromLine(
                  "Employee No.","Time Activity Code",
                  "Starting Date","Ending Date",
                  "Document Type","Document No.","Document Date");
            END;
          "Post Action"::Update:
            BEGIN
              EmplLedgEntry.GET("Applies-to Entry");
              EmplLedgEntry.Amount := Amount;
              EmplLedgEntry.Quantity := Quantity;
              EmplLedgEntry."Payment Days" := "Payment Days";
              EmplLedgEntry.MODIFY;
            END;
          "Post Action"::Close:
            BEGIN
              EmplLedgEntry.GET("Applies-to Entry");
              IF "Ending Date" >= EmplLedgEntry."Action Starting Date" THEN BEGIN
                EmplLedgEntry."Action Ending Date" := "Ending Date";
                EmplLedgEntry.MODIFY;
              END;
            END;
        END;
      END;

      EXIT(EmplLedgEntry."Entry No.");
    END;

    PROCEDURE CancelRegister@1210002(PayrollRegNo@1210000 : Integer);
    VAR
      PayrollStatus@1210004 : Record 17457;
    BEGIN
      PayrollReg.GET(PayrollRegNo);
      EmplLedgEntry.SETRANGE("Entry No.",PayrollReg."From Entry No.",PayrollReg."To Entry No.");
      IF EmplLedgEntry.FINDSET THEN BEGIN
        REPEAT
          PayrollStatus.CheckPayrollStatus(EmplLedgEntry."Period Code",EmplLedgEntry."Employee No.");
          EmplLedgEntry.DELETE;
        UNTIL EmplLedgEntry.NEXT = 0;
      END;

      PayrollReg."From Entry No." := 0;
      PayrollReg."To Entry No." := 0;
      PayrollReg.MODIFY;
    END;

    BEGIN
    END.
  }
}

