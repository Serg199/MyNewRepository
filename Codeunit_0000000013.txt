OBJECT Codeunit 13 Gen. Jnl.-Post Batch
{
  OBJECT-PROPERTIES
  {
    Date=08.06.17;
    Time=13:34:32;
    Modified=Yes;
    Version List=NAVW110.00.00.15052,NAVRU10.00.00.15052,NOS-26;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 232=imd;
    OnRun=BEGIN
            GenJnlLine.COPY(Rec);
            Code;
            Rec := GenJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot exceed %1 characters;RUS=не может превышать %1 символов';
      PostingStateMsg@1001 : TextConst '@@@=This is a message for dialog window. Parameters do not require translation.;ENU=Journal Batch Name    #1##########\\Posting @2@@@@@@@@@@@@@\#3#############;RUS=Код раздела журнала    #1##########\\Учет @2@@@@@@@@@@@@@\#3#############';
      CheckingLinesMsg@1003 : TextConst 'ENU=Checking lines;RUS=Проверка строк';
      CheckingBalanceMsg@1004 : TextConst 'ENU=Checking balance;RUS=Проверка сальдо';
      UpdatingBalLinesMsg@1005 : TextConst 'ENU=Updating bal. lines;RUS=Обновление бал. строк';
      PostingLinesMsg@1006 : TextConst 'ENU=Posting lines;RUS=Учет строк';
      PostingReversLinesMsg@1007 : TextConst 'ENU=Posting revers. lines;RUS=Учет сторнирующих строк';
      UpdatingLinesMsg@1036 : TextConst 'ENU=Updating lines;RUS=Обновление строк';
      Text008@1008 : TextConst 'ENU=must be the same on all lines for the same document.;RUS=должно быть одинаково на всех строках того же самого документа.';
      Text009@1009 : TextConst 'ENU="%1 %2 posted on %3 includes more than one customer or vendor. ";RUS="%1 %2, учтенный в %3, содержит более одного клиента или поставщика. "';
      Text010@1010 : TextConst 'ENU=In order for the program to calculate VAT, the entries must be separated by another document number or by an empty line.;RUS=Для вычисления НДС операции должны быть разделены другим номером документа или пустой строкой.';
      Text012@1012 : TextConst 'ENU="%5 %2 is out of balance by %1. ";RUS="%5 %2 дает ненулевое сальдо по %1. "';
      Text013@1013 : TextConst 'ENU=Please check that %3, %4, %5 and %6 are correct for each line.;RUS=Убедитесь в корректности %3, %4, %5 и %6 для каждой строки.';
      Text014@1014 : TextConst 'ENU="The lines in %1 are out of balance by %2. ";RUS="Строки в %1 не сбалансированы по %2. "';
      Text015@1015 : TextConst 'ENU=Check that %3 and %4 are correct for each line.;RUS=Проверьте правильность %3 и %4 для каждой строки.';
      Text016@1016 : TextConst 'ENU="Your reversing entries in %4 %2 are out of balance by %1. ";RUS="Ваши сторно в %4 %2 не балансируются %1. "';
      Text017@1017 : TextConst 'ENU=Please check whether %3 is correct for each line for this %4.;RUS=Проверьте, является ли %3 правильным для каждой строки этого %4.';
      Text018@1018 : TextConst 'ENU="Your reversing entries for %1 are out of balance by %2. ";RUS="Ваши сторно для %1 не балансируются %2. "';
      Text019@1019 : TextConst 'ENU="%3 %1 is out of balance due to the additional reporting currency. ";RUS="%3 %1 не соответствует сумме задолженности по дополнительной отчетной валюте. "';
      Text020@1020 : TextConst 'ENU=Please check that %2 is correct for each line.;RUS=Убедитесь в корректности %2 для каждой строки.';
      Text021@1021 : TextConst 'ENU=cannot be specified when using recurring journals.;RUS=не может быть определено в типовых журналах.';
      Text022@1022 : TextConst 'ENU=The Balance and Reversing Balance recurring methods can be used only for G/L accounts.;RUS=Типовые методы "Сальдо" и "Сторнирование сальдо" можно использовать только для счетов ГК.';
      Text023@1023 : TextConst 'ENU=Allocations can only be used with recurring journals.;RUS=Распределения могут быть использованы только в типовых журналах.';
      Text024@1024 : TextConst 'ENU=<Month Text>;RUS=<Month Text>';
      Text025@1025 : TextConst 'ENU=A maximum of %1 posting number series can be used in each journal.;RUS=В каждом журнале можно использовать не более %1 серий учетных номеров.';
      Text026@1026 : TextConst 'ENU="%5 %2 is out of balance by %1 %7. ";RUS="%5 %2 дает ненулевое сальдо по %1 %7. "';
      Text027@1027 : TextConst 'ENU="The lines in %1 are out of balance by %2 %5. ";RUS="Строки в %1 не сбалансированы по %2 %5. "';
      Text028@1028 : TextConst 'ENU=The Balance and Reversing Balance recurring methods can be used only with Allocations.;RUS=Типовые методы "Сальдо" и "Сторнирование сальдо" можно использовать только при распределении.';
      GenJnlTemplate@1029 : Record 80;
      GenJnlBatch@1030 : Record 232;
      GenJnlLine@1031 : Record 81;
      GenJnlLine2@1032 : Record 81;
      GenJnlLine3@1033 : Record 81;
      TempGenJnlLine4@1034 : TEMPORARY Record 81;
      GenJnlLine5@1035 : Record 81;
      GLEntry@1037 : Record 17;
      GLReg@1038 : Record 45;
      GLAcc@1039 : Record 15;
      GenJnlAlloc@1042 : Record 221;
      AccountingPeriod@1043 : Record 50;
      NoSeries@1044 : TEMPORARY Record 308;
      GLSetup@1045 : Record 98;
      FAJnlSetup@1046 : Record 5605;
      GenJnlLineTemp@1102601000 : TEMPORARY Record 81;
      GenJnlLineArchive@1470000 : Record 12403;
      UserSetup@1210000 : Record 91;
      GenJnlCheckLine@1047 : Codeunit 11;
      GenJnlPostLine@1048 : Codeunit 12;
      GenJnlPostPreview@1080 : Codeunit 19;
      NoSeriesMgt@1049 : Codeunit 396;
      NoSeriesMgt2@1050 : ARRAY [10] OF Codeunit 396;
      ICOutboxMgt@1078 : Codeunit 427;
      InstructionMgt@1072 : Codeunit 1330;
      Window@1052 : Dialog;
      GLRegNo@1053 : Integer;
      StartLineNo@1054 : Integer;
      StartLineNoReverse@1055 : Integer;
      LastDate@1056 : Date;
      LastDocType@1057 : Integer;
      LastDocNo@1058 : Code[20];
      LastPostedDocNo@1059 : Code[20];
      CurrentBalance@1060 : Decimal;
      CurrentBalanceReverse@1061 : Decimal;
      Day@1062 : Integer;
      Week@1063 : Integer;
      Month@1064 : Integer;
      MonthText@1065 : Text[30];
      NoOfRecords@1066 : Integer;
      NoOfReversingRecords@1067 : Integer;
      LineCount@1068 : Integer;
      NoOfPostingNoSeries@1069 : Integer;
      PostingNoSeriesNo@1070 : Integer;
      DocCorrection@1071 : Boolean;
      VATEntryCreated@1073 : Boolean;
      LastFAAddCurrExchRate@1074 : Decimal;
      LastCurrencyCode@1075 : Code[10];
      CurrencyBalance@1076 : Decimal;
      Text029@1041 : TextConst 'ENU="%1 %2 posted on %3 includes more than one customer, vendor or IC Partner. ";RUS="%1 %2, учтенный в %3, содержит более одного клиента, поставщика или партнера МФ. "';
      Text030@1011 : TextConst 'ENU=You cannot enter G/L Account or Bank Account in both %1 and %2.;RUS=Нельзя ввести счет ГК или банк. счет и в %1, и в %2.';
      Text031@1040 : TextConst 'ENU=Line No. %1 does not contain a G/L Account or Bank Account. When the %2 field contains an account number, either the %3 field or the %4 field must contain a G/L Account or Bank Account.;RUS=В строке номер %1 не указан счет ГК или банк. счет. Если в поле %2 содержится номер счета, требуется указать в поле %3 или в поле %4 номер счета ГК или банк. счета.';
      RefPostingState@1002 : 'Checking lines,Checking balance,Updating bal. lines,Posting Lines,Posting revers. lines,Updating lines';
      Text12400@1210015 : TextConst 'ENU=Do you want to post the journal lines?;RUS=Учесть строки журнала?';
      Text12401@1470013 : TextConst 'ENU=Can not find Vendor\Customer Ledger Entry : %1;RUS=Не удалось обнаружить операцию книги клиентов\поставщиков: %1';
      Text12406@1470009 : TextConst 'ENU=Expense Amount %2 on %3 %4 can''t has sign rest %1;RUS=Сумма расходов %2 по %3 %4 не может иметь знак остатка %1';
      Text12407@1470008 : TextConst 'ENU=Expense Amount %2 on %3 %4 can''t be more rest %1;RUS=Сумма расходов %2 по %3 %4 не может быть больше остатка %1.';
      Text12408@1470007 : TextConst 'ENU=Impossible change operation status  %1 %2 on %3 %4.\Accrual %5\write-off %6;RUS=Недопустимое изменение статуса операций %1 %2 по %3 %4.\Начислено %5\списано %6';
      Text12409@1470006 : TextConst 'ENU=Remaining Amount on %1 %2 must be 0;RUS=Сумма остатка по %1 %2 должна равняться 0.';
      Text12420@1470004 : TextConst 'ENU=G/L Account %1 - future account. Amount must be < 0.;RUS=Cчет ГК %1 - будущ. счет. Сумма должна быть < 0.';
      Text12421@1470003 : TextConst 'ENU=Line No. %1 can''t post, because \Posting Date > WORKDATE and(or)\Expiration Date < WORKDATE;RUS=Строку номер %1 нельзя учесть, поскольку \"Дата учета" > WORKDATE и(или)\"Годен до" < WORKDATE';
      Text12422@1470002 : TextConst 'ENU=FA No. %1 is not into operation.;RUS=ОС номер %1 не эксплуатируется.';
      Text12423@1470001 : TextConst 'ENU=Posting Date can not be less than Date Into Operation FA No. %1;RUS=Дата учета не может быть более ранней, чем дата ввода в эксплуатацию ОС номер %1';
      Text12411@1470010 : TextConst 'ENU=Check expense     #2###### @3@@@@@@@@@@@@@;RUS=Проверка расходов     #2###### @3@@@@@@@@@@@@@';
      Text12424@1470011 : TextConst 'ENU=There is no applied Vendor Ledger Entries.;RUS=Отсутствуют примененные операции книги операций поставщиков.';
      Text12425@1470005 : TextConst 'ENU="There is duplicate Journal Line: %1 = %2, %3 = %4. It should be only one.  ";RUS="Существует дубликат строки журнала: %1 = %2, %3 = %4. Эта строка должна быть единственной.  "';
      Text12426@1470014 : TextConst 'ENU=Posting Date %1 can not be less than Initial Entry''s Posting Date %2;RUS=Дата учета (%1) не может быть меньше даты учета исходной операции (%2)';
      PreviewMode@1051 : Boolean;
      SkippedLineMsg@1092 : TextConst 'ENU=One or more lines has not been posted because the amount is zero.;RUS=Одна или несколько строк не были учтены, поскольку они содержат нулевые суммы.';
      ConfirmPostingOutsidePeriodQst@1079 : TextConst 'ENU=The posting date of one or more journal lines is outside the current fiscal year. Do you want to continue?;RUS=Дата учета одной или нескольких строк журнала не относится к текущему финансовому году. Продолжить?';
      "NCV>"@1101495008 : Integer;
      FISetup@1101495006 : Record 50100;
      LastConvID@1101495005 : Code[20];
      CurrentBalanceConvID@1101495004 : Decimal;
      FIPostAvgCost@1101495003 : Codeunit 50042;
      TempConversIDAmount@1101495002 : TEMPORARY Record 386;
      ConsSource@1101495001 : Record 50001;
      IsRemoveRepostBatch@1101495000 : Boolean;
      Text50100@1101495009 : TextConst 'ENU="%5 %2 is out of balance by %1. ";RUS="Конвертация ID %1 не балансирует на %2. "';
      Text50101@1101495007 : TextConst 'ENU=Please check that %3, %4, %5 and %6 are correct for each line.;RUS=Проверьте, что %3 и %4 правильны для каждой строки.';
      FlagFI@1101495010 : Boolean;

    LOCAL PROCEDURE Code@7();
    VAR
      TempGenJnlLine@1010 : TEMPORARY Record 81;
      GenJnlLineVATInfoSource@1008 : Record 81;
      ICHandledInboxTransaction@1007 : Record 420;
      VATPostingSetup@1006 : Record 325;
      BalVatPostingSetup@1005 : Record 325;
      UpdateAnalysisView@1003 : Codeunit 410;
      ICLastDate@1014 : Date;
      LastLineNo@1002 : Integer;
      ICTransactionNo@1004 : Integer;
      ICLastDocType@1013 : Integer;
      CurrentICPartner@1009 : Code[20];
      ICLastDocNo@1012 : Code[20];
      VATInfoSourceLineIsInserted@1015 : Boolean;
      SkippedLine@1020 : Boolean;
      TransNo@1210003 : Integer;
      LineNo@1210001 : Integer;
      VendLedgEntry@1470000 : Record 25;
      PostingOutsideFiscalYearConfirmed@1000 : Boolean;
      "NCV>"@1101495009 : Integer;
      GLAccount1@1101495008 : Record 15;
      LastDocNo2@1101495007 : Code[20];
      LastPostingDate2@1101495006 : Date;
      LastNotConsolidate2@1101495005 : Boolean;
      LastBusinessUnitCode@1101495004 : Code[20];
      LastFAOperation@1101495002 : Boolean;
      l_recPerActStPar@1101495001 : Record 50076;
      l_boolRevaluate@1101495000 : Boolean;
    BEGIN
      //NC MDTA01 > MP
      GLSetup.GET;
      IF GLSetup."Add Currency Dim. at Posting" THEN BEGIN
        GLSetup.TESTFIELD("LCY Currency Dimension Value");
        GLSetup.TESTFIELD("Currency Dimension Code");
      END;
      //NC MDTA01 < MP
      // NC MTF02 > II
      IF NOT FISetup.GET THEN
        FISetup.INIT;
      // NC MTF02 < II

      WITH GenJnlLine DO BEGIN
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");

        LOCKTABLE;
        GenJnlAlloc.LOCKTABLE;

        GenJnlTemplate.GET("Journal Template Name");
        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");

        //NC 200912 > DP
        IsRemoveRepostBatch := FALSE;
        IF "Cons. Source Code"<>'' THEN
          ConsSource.SETRANGE(Code,"Cons. Source Code");
        ConsSource.SETRANGE("Removed Journal Batch", "Journal Batch Name");
        IF ConsSource.FINDFIRST THEN
          IsRemoveRepostBatch := TRUE
        ELSE BEGIN
          ConsSource.SETRANGE("Reposted Journal Batch", "Journal Batch Name");
          IF ConsSource.FINDFIRST THEN
             IsRemoveRepostBatch := TRUE;
        END;
        //NC 200912 < DP

        //TDRAMIO-79>
        l_recPerActStPar.SETRANGE("Gen. Journal Template","Journal Template Name");
        l_recPerActStPar.SETRANGE("Gen. Journal Batch","Journal Batch Name");
        l_recPerActStPar.SETFILTER("Report ID",'%1|%2|%3|%4',
          REPORT::"Adjust Reporting Currency CB", REPORT::"Adjust Local Currency",
          REPORT::"Adjust Reporting Currency", REPORT::"Adjust Local Currency CB");
        IF l_recPerActStPar.FINDSET THEN
          l_boolRevaluate := TRUE;
        //TDRAMIO-79<

        IF STRLEN(INCSTR(GenJnlBatch.Name)) > MAXSTRLEN(GenJnlBatch.Name) THEN
          GenJnlBatch.FIELDERROR(
            Name,
            STRSUBSTNO(Text000,MAXSTRLEN(GenJnlBatch.Name)));

        GLSetup.GET;
        IF GenJnlTemplate.Recurring THEN BEGIN
          CheckExpiredLine(GenJnlLine);
          SETRANGE("Posting Date",0D,WORKDATE);
        END;

        IF NOT FIND('=><') THEN BEGIN
          "Line No." := 0;
          IF PreviewMode THEN
            GenJnlPostPreview.ThrowError;
          COMMIT;
          EXIT;
        END;


        //NC MDM02 > PCH
        IF GUIALLOWED THEN BEGIN
        //NC MDM02 < PCH
          Window.OPEN(PostingStateMsg);
          Window.UPDATE(1,"Journal Batch Name");
        //NC MDM02 > PCH
        END;
        //NC MDM02 < PCH

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";

        //NC MDP01 > MP
        LastDocNo2 := '';
        LastPostingDate2 := 0D;
        LastNotConsolidate2 := FALSE;
        LastBusinessUnitCode := '';
        //NC MDP01 < MP
        //NC MDP01.1 > DP
        LastFAOperation := FALSE;
        //NC MDP01.1 < DP

        NoOfRecords := COUNT;
        GenJnlCheckLine.SetBatchMode(TRUE);
        //NC NOS-26 > SPA
        GenJnlCheckLine.CheckForSkippingDimComb;
        GenJnlCheckLine.SetGenJnlBatch(GenJnlBatch);
        //NC NOS-26 < SPA
        REPEAT
          LineCount := LineCount + 1;

          //NC MDP01 > MP
          //TDRANCS-905 > commented
          IF (LastDocNo2 = "Document No.") AND (LastPostingDate2 = "Posting Date") AND NOT EmptyLine THEN BEGIN
          //TDRANCS-905 <
            IF (LastNotConsolidate2 <> "Not Consolidate") THEN
              FIELDERROR("Not Consolidate", Text008);

            IF (LastBusinessUnitCode <> "Business Unit Code") AND NOT IsRemoveRepostBatch THEN
            //TDRAMIO-79>
              IF NOT l_boolRevaluate THEN
            //TDRAMIO-79>
                FIELDERROR("Business Unit Code", Text008);

            //NC MDP01.1 > DP
            IF LastFAOperation <> "FA Operation" THEN
              FIELDERROR("FA Operation", Text008);
            //NC MDP01.1 < DP
          END;
          //NC MDP01 < MP

          UpdateDialog(RefPostingState::"Checking lines",LineCount,NoOfRecords);
          CheckLine(GenJnlLine,PostingOutsideFiscalYearConfirmed);
          TempGenJnlLine := GenJnlLine5;
          TempGenJnlLine.INSERT;

          // TD RA BMN 07.03.2011 >
          IF NOT EmptyLine THEN BEGIN
            LastDocNo2 := "Document No.";
            LastPostingDate2 := "Posting Date";
            LastNotConsolidate2 := "Not Consolidate";
            LastBusinessUnitCode := "Business Unit Code";
          END;
          // TD RA BMN 07.03.2011 <

          //NC MDP01.1 > DP
          LastFAOperation := "FA Operation";
          //NC MDP01.1 < DP

          IF NEXT = 0 THEN
            FINDFIRST;
        UNTIL "Line No." = StartLineNo;
        IF GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany THEN
          CheckICDocument(TempGenJnlLine);

        // Check balance
        IF (GenJnlBatch."No. Series" = '') AND GenJnlTemplate."Force Doc. Balance" THEN
          SETCURRENTKEY("Document No.");
        LineCount := 0;
        LastDate := 0D;
        LastDocType := 0;
        LastDocNo := '';
        LastFAAddCurrExchRate := 0;
        GenJnlLineTemp.RESET;
        GenJnlLineTemp.DELETEALL;
        VATEntryCreated := FALSE;
        CurrentBalance := 0;
        CurrentBalanceReverse := 0;
        CurrencyBalance := 0;
        // NC MTF02 > AKU
        TempConversIDAmount.RESET;
        TempConversIDAmount.DELETEALL;
        // NC MTF02 < AKU

        FINDSET(TRUE,FALSE);
        LastCurrencyCode := "Currency Code";

        REPEAT
          LineCount := LineCount + 1;
          UpdateDialog(RefPostingState::"Checking balance",LineCount,NoOfRecords);

          IF NOT EmptyLine THEN BEGIN
            IF NOT PreviewMode THEN
              CheckDocNoBasedOnNoSeries(LastDocNo,GenJnlBatch."No. Series",NoSeriesMgt);
            IF NOT GLSetup."Enable Russian Accounting" THEN
              IF "Posting No. Series" <> '' THEN
                TESTFIELD("Posting No. Series",GenJnlBatch."Posting No. Series");
            IF ("Posting Date" <> LastDate) OR
               ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo)
            THEN BEGIN
              IF Correction THEN
                GenJnlTemplate.TESTFIELD("Force Doc. Balance",TRUE);
              DocCorrection := Correction;
            END ELSE
              IF Correction <> DocCorrection THEN
                FIELDERROR(Correction,Text008);
          END;
          IF ("Posting Date" <> LastDate) OR
             GenJnlTemplate."Force Doc. Balance" AND
             (("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo))
          THEN BEGIN
            CheckBalance;
            CurrencyBalance := 0;
            LastCurrencyCode := "Currency Code";
            GenJnlLineTemp.RESET;
            GenJnlLineTemp.DELETEALL;
          END;

          // NC MTF02 > AKU
          IF FISetup."Check Conversion Amount" AND Conversation THEN BEGIN
            TESTFIELD("Conversation ID");
            IF NOT TempConversIDAmount.GET("Conversation ID", 0) THEN BEGIN
              TempConversIDAmount."Business Unit Code" := "Conversation ID";
              TempConversIDAmount.Amount := "Amount (LCY)";
              TempConversIDAmount.INSERT;
            END ELSE BEGIN
              TempConversIDAmount.Amount += "Amount (LCY)";
              TempConversIDAmount.MODIFY;
            END;
          END;
          // NC MTF02 < AKU

          IF Amount <> 0 THEN BEGIN
            IF LastFAAddCurrExchRate <> "FA Add.-Currency Factor" THEN
              CheckAddExchRateBalance;
            IF (CurrentBalance = 0) AND (CurrentICPartner = '') THEN BEGIN
              GenJnlLineTemp.RESET;
              GenJnlLineTemp.DELETEALL;
              IF VATEntryCreated AND VATInfoSourceLineIsInserted THEN
                UpdateGenJnlLineWithVATInfo(GenJnlLine,GenJnlLineVATInfoSource,StartLineNo,LastLineNo);
              VATEntryCreated := FALSE;
              VATInfoSourceLineIsInserted := FALSE;
              StartLineNo := "Line No.";
            END;
            IF CurrentBalanceReverse = 0 THEN
              StartLineNoReverse := "Line No.";
            UpdateLineBalance;
            CurrentBalance := CurrentBalance + "Balance (LCY)";
            IF "Recurring Method" >= "Recurring Method"::"RF Reversing Fixed" THEN
              CurrentBalanceReverse := CurrentBalanceReverse + "Balance (LCY)";

            IF "Recurring Method" <> "Recurring Method"::" " THEN
              CALCFIELDS("Allocated Amt. (LCY)");
            IF ("Recurring Method" = "Recurring Method"::" ") OR ("Amount (LCY)" <> -"Allocated Amt. (LCY)") THEN
              IF "Currency Code" <> LastCurrencyCode THEN
                LastCurrencyCode := ''
              ELSE
                IF ("Currency Code" <> '') AND (("Account No." = '') XOR ("Bal. Account No." = '')) THEN
                  IF "Account No." <> '' THEN
                    CurrencyBalance := CurrencyBalance + Amount
                  ELSE
                    CurrencyBalance := CurrencyBalance - Amount;
          END;

          LastDate := "Posting Date";
          LastDocType := "Document Type";
          IF NOT EmptyLine THEN
            LastDocNo := "Document No.";
          LastFAAddCurrExchRate := "FA Add.-Currency Factor";
          IF GenJnlTemplate."Force Doc. Balance" THEN BEGIN
            IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
              CLEAR(VATPostingSetup);
            IF NOT BalVatPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") THEN
              CLEAR(BalVatPostingSetup);
            VATEntryCreated :=
              VATEntryCreated OR
              (("Account Type" = "Account Type"::"G/L Account") AND ("Account No." <> '') AND
               ("Gen. Posting Type" IN ["Gen. Posting Type"::Purchase,"Gen. Posting Type"::Sale]) AND
               (VATPostingSetup."VAT %" <> 0)) OR
              (("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '') AND
               ("Bal. Gen. Posting Type" IN ["Bal. Gen. Posting Type"::Purchase,"Bal. Gen. Posting Type"::Sale]) AND
               (BalVatPostingSetup."VAT %" <> 0));
            IF IsCustVendICAdded(GenJnlLine) THEN BEGIN
              GenJnlLineVATInfoSource := GenJnlLine;
              VATInfoSourceLineIsInserted := TRUE;
            END;
            IF (GenJnlLineTemp.COUNT > 1) AND VATEntryCreated
               //NC OAM033 > DP
               AND NOT GenJnlBatch."Adv. Statement Batch"
               //NC OAM033 > DP
            THEN
              ERROR(
                Text009 +
                Text010,
                "Document Type","Document No.","Posting Date");
            IF (GenJnlLineTemp.COUNT > 1) AND (CurrentICPartner <> '') AND
               (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany)
            THEN
              ERROR(
                Text029,
                "Document Type","Document No.","Posting Date");
            LastLineNo := "Line No.";
          END;
        UNTIL NEXT = 0;
        CheckBalance;
        //NC MTF02 > AKU
        CheckBalanceConvID;
        //NC MTF02 < AKU
        CopyFields;
        IF VATEntryCreated AND VATInfoSourceLineIsInserted THEN
          UpdateGenJnlLineWithVATInfo(GenJnlLine,GenJnlLineVATInfoSource,StartLineNo,LastLineNo);

        // Find next register no.
        GLEntry.LOCKTABLE;
        IF GLEntry.FINDLAST THEN;
        FindNextGLRegisterNo;

        IF GenJnlTemplate.Archive THEN BEGIN
          GenJnlLineArchive.LOCKTABLE;
          GenJnlLineArchive.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
          GenJnlLineArchive.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
          IF GenJnlLineArchive.FIND('+') THEN
            LineNo := GenJnlLineArchive."Line No." + 1
          ELSE
            LineNo := 1;

          TransNo := 0;
        END;

        // Post lines
        LineCount := 0;
        LastDocNo := '';
        LastPostedDocNo := '';
        TempGenJnlLine4.DELETEALL;
        NoOfReversingRecords := 0;
        FINDSET(TRUE,FALSE);
        REPEAT
          IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND NOT EmptyLine AND
             (("Posting Date" <> ICLastDate) OR ("Document Type" <> ICLastDocType) OR ("Document No." <> ICLastDocNo))
          THEN BEGIN
            CurrentICPartner := '';
            ICLastDate := "Posting Date";
            ICLastDocType := "Document Type";
            ICLastDocNo := "Document No.";
            TempGenJnlLine.RESET;
            TempGenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
            TempGenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
            TempGenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
            TempGenJnlLine.SETRANGE("Posting Date","Posting Date");
            TempGenJnlLine.SETRANGE("Document No.","Document No.");
            TempGenJnlLine.SETFILTER("IC Partner Code",'<>%1','');
            IF TempGenJnlLine.FINDFIRST AND (TempGenJnlLine."IC Partner Code" <> '') THEN BEGIN
              CurrentICPartner := TempGenJnlLine."IC Partner Code";
              IF TempGenJnlLine."IC Direction" = TempGenJnlLine."IC Direction"::Outgoing THEN BEGIN
                ICTransactionNo := ICOutboxMgt.CreateOutboxJnlTransaction(TempGenJnlLine,FALSE);
              END ELSE BEGIN
                IF ICHandledInboxTransaction.GET(
                     TempGenJnlLine."IC Partner Transaction No.",TempGenJnlLine."IC Partner Code",
                     ICHandledInboxTransaction."Transaction Source"::"Created by Partner",TempGenJnlLine."Document Type")
                THEN BEGIN
                  ICHandledInboxTransaction.LOCKTABLE;
                  ICHandledInboxTransaction.Status := ICHandledInboxTransaction.Status::Posted;
                  ICHandledInboxTransaction.MODIFY;
                END
              END;
            END
          END;
          GenJnlLine3 := GenJnlLine;
          IF NOT PostGenJournalLine(GenJnlLine3,CurrentICPartner,ICTransactionNo,LineNo,TransNo) THEN
            SkippedLine := TRUE;
        UNTIL NEXT = 0;

        // Post reversing lines
        PostReversingLines(TempGenJnlLine4, LineNo, TransNo);

        IF PreviewMode THEN
          GenJnlPostPreview.ThrowError;

        // Copy register no. and current journal batch name to general journal
        IF NOT GLReg.FINDLAST OR (GLReg."No." <> GLRegNo) THEN
          GLRegNo := 0;

        INIT;
        "Line No." := GLRegNo;

        // Update/delete lines
        IF GLRegNo <> 0 THEN
          UpdateAndDeleteLines;

        IF GenJnlBatch."No. Series" <> '' THEN
          NoSeriesMgt.SaveNoSeries;
        IF NoSeries.FINDSET THEN
          REPEAT
            EVALUATE(PostingNoSeriesNo,NoSeries.Description);
            NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
          UNTIL NoSeries.NEXT = 0;

        COMMIT;
        CLEAR(GenJnlCheckLine);
        CLEAR(GenJnlPostLine);
        CLEARMARKS;
      END;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      GenJnlBatch.OnMoveGenJournalBatch(GLReg.RECORDID);
      COMMIT;

      IF SkippedLine AND GUIALLOWED THEN
        MESSAGE(SkippedLineMsg);
    END;

    LOCAL PROCEDURE CheckBalance@8();
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF CurrentBalance <> 0 THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNo);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text012 +
              Text013,
              CurrentBalance,LastDocNo,FIELDCAPTION("Posting Date"),FIELDCAPTION("Document Type"),
              FIELDCAPTION("Document No."),FIELDCAPTION(Amount));
          ERROR(
            Text014 +
            Text015,
            LastDate,CurrentBalance,FIELDCAPTION("Posting Date"),FIELDCAPTION(Amount));
        END;
        IF CurrentBalanceReverse <> 0 THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNoReverse);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text016 +
              Text017,
              CurrentBalanceReverse,LastDocNo,FIELDCAPTION("Recurring Method"),FIELDCAPTION("Document No."));
          ERROR(
            Text018 +
            Text017,
            LastDate,CurrentBalanceReverse,FIELDCAPTION("Recurring Method"),FIELDCAPTION("Posting Date"));
        END;
        IF (LastCurrencyCode <> '') AND (CurrencyBalance <> 0) THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNo);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text026 +
              Text013,
              CurrencyBalance,LastDocNo,FIELDCAPTION("Posting Date"),FIELDCAPTION("Document Type"),
              FIELDCAPTION("Document No."),FIELDCAPTION(Amount),
              LastCurrencyCode);
          ERROR(
            Text027 +
            Text015,
            LastDate,CurrencyBalance,FIELDCAPTION("Posting Date"),FIELDCAPTION(Amount),LastCurrencyCode);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckAddExchRateBalance@9();
    BEGIN
      WITH GenJnlLine DO
        IF CurrentBalance <> 0 THEN
          ERROR(
            Text019 +
            Text020,
            LastDocNo,FIELDCAPTION("FA Add.-Currency Factor"),FIELDCAPTION("Document No."));
    END;

    LOCAL PROCEDURE CheckRecurringLine@1(VAR GenJnlLine2@1000 : Record 81);
    VAR
      DummyDateFormula@1001 : DateFormula;
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Account No." <> '' THEN
          IF GenJnlTemplate.Recurring THEN BEGIN
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            IF "Bal. Account No." <> '' THEN
              FIELDERROR("Bal. Account No.",Text021);
            CASE "Recurring Method" OF
              "Recurring Method"::"V  Variable","Recurring Method"::"RV Reversing Variable",
              "Recurring Method"::"F  Fixed","Recurring Method"::"RF Reversing Fixed":
                //NC MNET03 > PCH
                IF NOT "System-Created Entry" AND
                   NOT "Allow Zero-Amount Posting" AND
                   (Quantity = 0)
                THEN
                //NC MNET03 < PCH
                  TESTFIELD(Amount);
              "Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance":
                TESTFIELD(Amount,0);
            END;
          END ELSE BEGIN
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency",DummyDateFormula);
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateRecurringAmt@2(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF ("Account No." <> '') AND
           ("Recurring Method" IN
            ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"])
        THEN BEGIN
          GLEntry.LOCKTABLE;
          IF "Account Type" = "Account Type"::"G/L Account" THEN BEGIN
            GLAcc."No." := "Account No.";
            GLAcc.SETRANGE("Date Filter",0D,"Posting Date");
            IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
              "Source Currency Code" := GLSetup."Additional Reporting Currency";
              GLAcc.CALCFIELDS("Additional-Currency Net Change");
              "Source Currency Amount" := -GLAcc."Additional-Currency Net Change";
              GenJnlAlloc.UpdateAllocationsAddCurr(GenJnlLine2,"Source Currency Amount");
            END;
            GLAcc.CALCFIELDS("Net Change");
            VALIDATE(Amount,-GLAcc."Net Change");
          END ELSE
            ERROR(
              Text022);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckAllocations@3(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Account No." <> '' THEN BEGIN
          IF "Recurring Method" IN
             ["Recurring Method"::"B  Balance",
              "Recurring Method"::"RB Reversing Balance"]
          THEN BEGIN
            GenJnlAlloc.RESET;
            GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
            GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
            IF GenJnlAlloc.ISEMPTY THEN
              ERROR(
                Text028);
          END;

          GenJnlAlloc.RESET;
          GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
          GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
          GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
          GenJnlAlloc.SETFILTER(Amount,'<>0');
          IF NOT GenJnlAlloc.ISEMPTY THEN BEGIN
            IF NOT GenJnlTemplate.Recurring THEN
              ERROR(Text023);
            GenJnlAlloc.SETRANGE("Account No.",'');
            IF GenJnlAlloc.FINDFIRST THEN
              GenJnlAlloc.TESTFIELD("Account No.");
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@4(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF ("Account No." <> '') AND ("Recurring Method" <> 0) THEN BEGIN
          Day := DATE2DMY("Posting Date",1);
          Week := DATE2DWY("Posting Date",2);
          Month := DATE2DMY("Posting Date",2);
          MonthText := FORMAT("Posting Date",0,Text024);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Posting Date");
          IF NOT AccountingPeriod.FINDLAST THEN
            AccountingPeriod.Name := '';
          "Document No." :=
            DELCHR(
              PADSTR(
                STRSUBSTNO("Document No.",Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN("Document No.")),
              '>');
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
        END;
      END;
    END;

    LOCAL PROCEDURE PostAllocations@5(VAR AllocateGenJnlLine@1000 : Record 81;Reversing@1001 : Boolean);
    BEGIN
      WITH AllocateGenJnlLine DO BEGIN
        IF "Account No." <> '' THEN BEGIN
          GenJnlAlloc.RESET;
          GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
          GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
          GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
          GenJnlAlloc.SETFILTER("Account No.",'<>%1','');
          IF GenJnlAlloc.FINDSET(TRUE,FALSE) THEN BEGIN
            GenJnlLine2.INIT;
            GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";
            GenJnlLine2."Posting Date" := "Posting Date";
            GenJnlLine2."Document Type" := "Document Type";
            GenJnlLine2."Document No." := "Document No.";
            GenJnlLine2.Description := Description;
            GenJnlLine2."Source Code" := "Source Code";
            GenJnlLine2."Journal Batch Name" := "Journal Batch Name";
            GenJnlLine2."Line No." := "Line No.";
            GenJnlLine2."Reason Code" := "Reason Code";
            GenJnlLine2.Correction := Correction;
            GenJnlLine2."Recurring Method" := "Recurring Method";
            IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor] THEN BEGIN
              GenJnlLine2."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
              GenJnlLine2."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
            END;
            REPEAT
              GenJnlLine2.CopyFromGenJnlAllocation(GenJnlAlloc);
              GenJnlLine2."Shortcut Dimension 1 Code" := GenJnlAlloc."Shortcut Dimension 1 Code";
              GenJnlLine2."Shortcut Dimension 2 Code" := GenJnlAlloc."Shortcut Dimension 2 Code";
              GenJnlLine2."Dimension Set ID" := GenJnlAlloc."Dimension Set ID";
              GenJnlLine2."Allow Zero-Amount Posting" := TRUE;
              GenJnlLine2.Correction := Correction;
              //NC MMTM05 > DP
              GenJnlLine2.VALIDATE("Currency Code",AllocateGenJnlLine."Currency Code");
              GenJnlLine2.VALIDATE(Amount,GenJnlAlloc.Amount);
              //NC MMTM05 < DP
              PrepareGenJnlLineAddCurr(GenJnlLine2);
              IF NOT Reversing THEN BEGIN
                GenJnlPostLine.SetPreviewMode(PreviewMode);
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                IF "Recurring Method" IN
                   ["Recurring Method"::"V  Variable","Recurring Method"::"B  Balance"]
                THEN BEGIN
                  GenJnlAlloc.Amount := 0;
                  GenJnlAlloc."Additional-Currency Amount" := 0;
                  GenJnlAlloc.MODIFY;
                END;
              END ELSE BEGIN
                MultiplyAmounts(GenJnlLine2,-1);
                GenJnlLine2."Reversing Entry" := TRUE;
                GenJnlPostLine.SetPreviewMode(PreviewMode);
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                IF "Recurring Method" IN
                   ["Recurring Method"::"RV Reversing Variable",
                    "Recurring Method"::"RB Reversing Balance"]
                THEN BEGIN
                  GenJnlAlloc.Amount := 0;
                  GenJnlAlloc."Additional-Currency Amount" := 0;
                  GenJnlAlloc.MODIFY;
                END;
              END;
            UNTIL GenJnlAlloc.NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE MultiplyAmounts@6(VAR GenJnlLine2@1000 : Record 81;Factor@1001 : Decimal);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Account No." <> '' THEN BEGIN
          //NC MNET07 > DP
          IF GenJnlBatch."Reversing Amount Validate" THEN BEGIN
            VALIDATE(Amount,Amount * Factor);
            VALIDATE(Correction,Correction);
          END ELSE BEGIN
          //NC MNET07 < DP
            Amount := Amount * Factor;
            "Debit Amount" := "Debit Amount" * Factor;
            "Credit Amount" := "Credit Amount" * Factor;
            "Amount (LCY)" := "Amount (LCY)" * Factor;
          //NC MNET07 > DP
          END;
          //NC MNET07 < DP

          "Balance (LCY)" := "Balance (LCY)" * Factor;
          "Sales/Purch. (LCY)" := "Sales/Purch. (LCY)" * Factor;
          "Profit (LCY)" := "Profit (LCY)" * Factor;
          "Inv. Discount (LCY)" := "Inv. Discount (LCY)" * Factor;
          Quantity := Quantity * Factor;

          //NC MNET07 > DP
          "Debit Quantity" := "Debit Quantity" * Factor;
          "Credit Quantity" := "Credit Quantity" * Factor;
          //NC MNET07 > DP

          "VAT Amount" := "VAT Amount" * Factor;
          "VAT Base Amount" := "VAT Base Amount" * Factor;
          "VAT Amount (LCY)" := "VAT Amount (LCY)" * Factor;
          "VAT Base Amount (LCY)" := "VAT Base Amount (LCY)" * Factor;
          "Source Currency Amount" := "Source Currency Amount" * Factor;
          IF "Job No." <> '' THEN BEGIN
            "Job Quantity" := "Job Quantity" * Factor;
            "Job Total Cost (LCY)" := "Job Total Cost (LCY)" * Factor;
            "Job Total Price (LCY)" := "Job Total Price (LCY)" * Factor;
            "Job Line Amount (LCY)" := "Job Line Amount (LCY)" * Factor;
            "Job Total Cost" := "Job Total Cost" * Factor;
            "Job Total Price" := "Job Total Price" * Factor;
            "Job Line Amount" := "Job Line Amount" * Factor;
            "Job Line Discount Amount" := "Job Line Discount Amount" * Factor;
            "Job Line Disc. Amount (LCY)" := "Job Line Disc. Amount (LCY)" * Factor;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckDocumentNo@11(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Posting No. Series" = '' THEN
          "Posting No. Series" := GenJnlBatch."No. Series"
        ELSE
          IF NOT EmptyLine THEN
            IF "Document No." = LastDocNo THEN
              "Document No." := LastPostedDocNo
            ELSE BEGIN
              IF NOT NoSeries.GET("Posting No. Series") THEN BEGIN
                NoOfPostingNoSeries := NoOfPostingNoSeries + 1;
                IF NoOfPostingNoSeries > ARRAYLEN(NoSeriesMgt2) THEN
                  ERROR(
                    Text025,
                    ARRAYLEN(NoSeriesMgt2));
                NoSeries.Code := "Posting No. Series";
                NoSeries.Description := FORMAT(NoOfPostingNoSeries);
                NoSeries.INSERT;
              END;
              LastDocNo := "Document No.";
              EVALUATE(PostingNoSeriesNo,NoSeries.Description);
              "Document No." :=
                NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",TRUE);
              LastPostedDocNo := "Document No.";
            END;
      END;
    END;

    LOCAL PROCEDURE PrepareGenJnlLineAddCurr@10(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      IF (GLSetup."Additional Reporting Currency" <> '') AND
         (GenJnlLine."Recurring Method" IN
          [GenJnlLine."Recurring Method"::"B  Balance",
           GenJnlLine."Recurring Method"::"RB Reversing Balance"])
      THEN BEGIN
        GenJnlLine."Source Currency Code" := GLSetup."Additional Reporting Currency";
        IF (GenJnlLine.Amount = 0) AND
           (GenJnlLine."Source Currency Amount" <> 0)
        THEN BEGIN
          GenJnlLine."Additional-Currency Posting" :=
            GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only";
          GenJnlLine.Amount := GenJnlLine."Source Currency Amount";
          GenJnlLine."Source Currency Amount" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyFields@12();
    VAR
      GenJnlLine4@1000 : Record 81;
      GenJnlLine6@1001 : Record 81;
      TempGenJnlLine@1007 : TEMPORARY Record 81;
      JnlLineTotalQty@1002 : Integer;
      RefPostingSubState@1003 : 'Check account,Check bal. account,Update lines';
    BEGIN
      GenJnlLine6.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
      GenJnlLine4.FILTERGROUP(2);
      GenJnlLine4.COPY(GenJnlLine);
      GenJnlLine4.FILTERGROUP(0);
      GenJnlLine6.FILTERGROUP(2);
      GenJnlLine6.COPY(GenJnlLine);
      GenJnlLine6.FILTERGROUP(0);
      GenJnlLine6.SETRANGE("Bill-to/Pay-to No.",'');
      GenJnlLine4.SETFILTER(
        "Account Type",'%1|%2',GenJnlLine4."Account Type"::Customer,GenJnlLine4."Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Bal. Account No.",'');
      CheckAndCopyBalancingData(GenJnlLine4,GenJnlLine6,TempGenJnlLine,FALSE);

      GenJnlLine4.SETRANGE("Account Type");
      GenJnlLine4.SETRANGE("Bal. Account No.");
      GenJnlLine4.SETFILTER(
        "Bal. Account Type",'%1|%2',GenJnlLine4."Bal. Account Type"::Customer,GenJnlLine4."Bal. Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Account No.",'');
      CheckAndCopyBalancingData(GenJnlLine4,GenJnlLine6,TempGenJnlLine,TRUE);

      JnlLineTotalQty := TempGenJnlLine.COUNT;
      LineCount := 0;
      IF TempGenJnlLine.FINDSET THEN
        REPEAT
          LineCount := LineCount + 1;
          UpdateDialogUpdateBalLines(RefPostingSubState::"Update lines",LineCount,JnlLineTotalQty);
          GenJnlLine4.GET(TempGenJnlLine."Journal Template Name",TempGenJnlLine."Journal Batch Name",TempGenJnlLine."Line No.");
          CopyGenJnlLineBalancingData(GenJnlLine4,TempGenJnlLine);
          GenJnlLine4.MODIFY;
        UNTIL TempGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckICDocument@13(VAR TempGenJnlLine1@1001 : TEMPORARY Record 81);
    VAR
      TempGenJnlLine2@1002 : TEMPORARY Record 81;
      CurrentICPartner@1000 : Code[20];
    BEGIN
      WITH TempGenJnlLine1 DO BEGIN
        SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        FIND('-');
        REPEAT
          IF ("Posting Date" <> LastDate) OR ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo) THEN BEGIN
            TempGenJnlLine2 := TempGenJnlLine1;
            SETRANGE("Posting Date","Posting Date");
            SETRANGE("Document No.","Document No.");
            SETFILTER("IC Partner Code",'<>%1','');
            IF FIND('-') THEN
              CurrentICPartner := "IC Partner Code"
            ELSE
              CurrentICPartner := '';
            SETRANGE("Posting Date");
            SETRANGE("Document No.");
            SETRANGE("IC Partner Code");
            LastDate := "Posting Date";
            LastDocType := "Document Type";
            LastDocNo := "Document No.";
            TempGenJnlLine1 := TempGenJnlLine2;
          END;
          IF (CurrentICPartner <> '') AND ("IC Direction" = "IC Direction"::Outgoing) THEN BEGIN
            IF ("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
               ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
               ("Account No." <> '') AND
               ("Bal. Account No." <> '')
            THEN
              ERROR(Text030,FIELDCAPTION("Account No."),FIELDCAPTION("Bal. Account No."));
            IF (("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND ("Account No." <> '')) XOR
               (("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
                ("Bal. Account No." <> ''))
            THEN
              TESTFIELD("IC Partner G/L Acc. No.")
            ELSE
              IF "IC Partner G/L Acc. No." <> '' THEN
                ERROR(Text031,
                  "Line No.",FIELDCAPTION("IC Partner G/L Acc. No."),FIELDCAPTION("Account No."),
                  FIELDCAPTION("Bal. Account No."));
          END ELSE
            TESTFIELD("IC Partner G/L Acc. No.",'');
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateIncomingDocument@15(VAR GenJnlLine@1000 : Record 81);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      WITH GenJnlLine DO
        IncomingDocument.UpdateIncomingDocumentFromPosting("Incoming Document Entry No.","Posting Date","Document No.");
    END;

    LOCAL PROCEDURE AddCustVendIC@14(AccountType@1000 : Option;AccountNo@1001 : Code[20]) : Boolean;
    BEGIN
      GenJnlLineTemp.SETRANGE("Account Type",AccountType);
      GenJnlLineTemp.SETRANGE("Account No.",AccountNo);
      IF GenJnlLineTemp.FINDFIRST THEN
        EXIT(FALSE);

      GenJnlLineTemp.RESET;
      IF GenJnlLineTemp.FINDLAST THEN
        GenJnlLineTemp."Line No." := GenJnlLineTemp."Line No." + 10000
      ELSE
        GenJnlLineTemp."Line No." := 10000;

      GenJnlLineTemp."Account Type" := AccountType;
      GenJnlLineTemp."Account No." := AccountNo;
      GenJnlLineTemp.INSERT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CopyGenJnlLineBalancingData@18(VAR GenJnlLineTo@1000 : Record 81;VAR GenJnlLineFrom@1002 : Record 81);
    BEGIN
      GenJnlLineTo."Bill-to/Pay-to No." := GenJnlLineFrom."Bill-to/Pay-to No.";
      GenJnlLineTo."Ship-to/Order Address Code" := GenJnlLineFrom."Ship-to/Order Address Code";
      GenJnlLineTo."VAT Registration No." := GenJnlLineFrom."VAT Registration No.";
      GenJnlLineTo."Country/Region Code" := GenJnlLineFrom."Country/Region Code";
    END;

    LOCAL PROCEDURE CheckGenPostingType@19(GenJnlLine6@1000 : Record 81;AccountType@1001 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner');
    BEGIN
      IF (AccountType = AccountType::Customer) AND
         (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Purchase) OR
         (AccountType = AccountType::Vendor) AND
         (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Sale)
      THEN
        GenJnlLine6.FIELDERROR("Gen. Posting Type");
      IF (AccountType = AccountType::Customer) AND
         (GenJnlLine6."Bal. Gen. Posting Type" = GenJnlLine6."Bal. Gen. Posting Type"::Purchase) OR
         (AccountType = AccountType::Vendor) AND
         (GenJnlLine6."Bal. Gen. Posting Type" = GenJnlLine6."Bal. Gen. Posting Type"::Sale)
      THEN
        GenJnlLine6.FIELDERROR("Bal. Gen. Posting Type");
    END;

    LOCAL PROCEDURE CheckAndCopyBalancingData@16(VAR GenJnlLine4@1002 : Record 81;VAR GenJnlLine6@1001 : Record 81;VAR TempGenJnlLine@1004 : TEMPORARY Record 81;CheckBalAcount@1003 : Boolean);
    VAR
      AccountType@1005 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';
      CheckAmount@1000 : Decimal;
      JnlLineTotalQty@1007 : Integer;
      RefPostingSubState@1009 : 'Check account,Check bal. account,Update lines';
    BEGIN
      JnlLineTotalQty := GenJnlLine4.COUNT;
      LineCount := 0;
      IF CheckBalAcount THEN
        RefPostingSubState := RefPostingSubState::"Check bal. account"
      ELSE
        RefPostingSubState := RefPostingSubState::"Check account";
      IF GenJnlLine4.FINDSET THEN
        REPEAT
          LineCount := LineCount + 1;
          UpdateDialogUpdateBalLines(RefPostingSubState,LineCount,JnlLineTotalQty);

          GenJnlLine6.SETRANGE("Posting Date",GenJnlLine4."Posting Date");
          GenJnlLine6.SETRANGE("Document No.",GenJnlLine4."Document No.");
          AccountType := GetPostingTypeFilter(GenJnlLine4,CheckBalAcount);
          CheckAmount := 0;
          IF GenJnlLine6.FINDSET THEN
            REPEAT
              IF (GenJnlLine6."Account No." = '') <> (GenJnlLine6."Bal. Account No." = '') THEN BEGIN
                CheckGenPostingType(GenJnlLine6,AccountType);
                TempGenJnlLine := GenJnlLine6;
                CopyGenJnlLineBalancingData(TempGenJnlLine,GenJnlLine4);
                IF TempGenJnlLine.INSERT THEN;
                CheckAmount := CheckAmount + GenJnlLine6.Amount;
              END;
            UNTIL (GenJnlLine6.NEXT = 0) OR (-GenJnlLine4.Amount = CheckAmount);
        UNTIL GenJnlLine4.NEXT = 0;
    END;

    LOCAL PROCEDURE IsCustVendICAdded@30(GenJournalLine@1000 : Record 81) : Boolean;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF ("Account No." <> '') AND
           ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,
                               "Account Type"::"IC Partner"])
        THEN
          EXIT(AddCustVendIC("Account Type","Account No."));

        IF ("Bal. Account No." <> '') AND
           ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,
                                    "Bal. Account Type"::"IC Partner"])
        THEN
          EXIT(AddCustVendIC("Bal. Account Type","Bal. Account No."));
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateGenJnlLineWithVATInfo@26(VAR GenJournalLineFiltersSource@1005 : Record 81;GenJournalLineVATInfoSource@1000 : Record 81;StartLineNo@1003 : Integer;LastLineNo@1004 : Integer);
    VAR
      GenJournalLine@1001 : Record 81;
      Finish@1002 : Boolean;
    BEGIN
      WITH GenJournalLine DO BEGIN
        COPY(GenJournalLineFiltersSource);
        "Line No." := StartLineNo;
        Finish := FALSE;
        IF GET("Journal Template Name","Journal Batch Name","Line No.") THEN
          REPEAT
            IF "Line No." <> GenJournalLineVATInfoSource."Line No." THEN BEGIN
              "Bill-to/Pay-to No." := GenJournalLineVATInfoSource."Bill-to/Pay-to No.";
              "Country/Region Code" := GenJournalLineVATInfoSource."Country/Region Code";
              "VAT Registration No." := GenJournalLineVATInfoSource."VAT Registration No.";
              MODIFY;
            END;
            Finish := "Line No." = LastLineNo;
          UNTIL (NEXT = 0) OR Finish;
      END;
    END;

    LOCAL PROCEDURE GetPostingTypeFilter@17(VAR GenJnlLine4@1002 : Record 81;CheckBalAcount@1000 : Boolean) : Integer;
    BEGIN
      IF CheckBalAcount THEN
        EXIT(GenJnlLine4."Bal. Account Type");
      EXIT(GenJnlLine4."Account Type");
    END;

    LOCAL PROCEDURE UpdateDialog@23(PostingState@1000 : Integer;LineNo@1001 : Integer;TotalLinesQty@1002 : Integer);
    BEGIN
      //NC MDM02 > PCH
      IF NOT GUIALLOWED THEN
        EXIT;
      //NC MDM02 < PCH

      UpdatePostingState(PostingState,LineNo);
      Window.UPDATE(2,GetProgressBarValue(PostingState,LineNo,TotalLinesQty));
    END;

    LOCAL PROCEDURE UpdateDialogUpdateBalLines@22(PostingSubState@1003 : Integer;LineNo@1001 : Integer;TotalLinesQty@1002 : Integer);
    BEGIN
      //NC MDM02 > PCH
      IF NOT GUIALLOWED THEN
        EXIT;
      //NC MDM02 < PCH

      UpdatePostingState(RefPostingState::"Updating bal. lines",LineNo);
      Window.UPDATE(
        2,
        GetProgressBarUpdateBalLinesValue(
          CalcProgressPercent(PostingSubState,3,LineCount,TotalLinesQty)));
    END;

    LOCAL PROCEDURE UpdatePostingState@25(PostingState@1000 : Integer;LineNo@1002 : Integer);
    BEGIN
      //NC MDM02 > PCH
      IF NOT GUIALLOWED THEN
        EXIT;
      //NC MDM02 < PCH

      Window.UPDATE(3,STRSUBSTNO('%1 (%2)',GetPostingStateMsg(PostingState),LineNo));
    END;

    LOCAL PROCEDURE GetPostingStateMsg@29(PostingState@1000 : Integer) : Text;
    BEGIN
      CASE PostingState OF
        RefPostingState::"Checking lines":
          EXIT(CheckingLinesMsg);
        RefPostingState::"Checking balance":
          EXIT(CheckingBalanceMsg);
        RefPostingState::"Updating bal. lines":
          EXIT(UpdatingBalLinesMsg);
        RefPostingState::"Posting Lines":
          EXIT(PostingLinesMsg);
        RefPostingState::"Posting revers. lines":
          EXIT(PostingReversLinesMsg);
        RefPostingState::"Updating lines":
          EXIT(UpdatingLinesMsg);
      END;
    END;

    LOCAL PROCEDURE GetProgressBarValue@21(PostingState@1002 : Integer;LineNo@1001 : Integer;TotalLinesQty@1000 : Integer) : Integer;
    BEGIN
      EXIT(ROUND(100 * CalcProgressPercent(PostingState,GetNumberOfPostingStages,LineNo,TotalLinesQty),1));
    END;

    LOCAL PROCEDURE GetProgressBarUpdateBalLinesValue@34(PostingStatePercent@1000 : Decimal) : Integer;
    BEGIN
      EXIT(ROUND((RefPostingState::"Updating bal. lines" * 100 + PostingStatePercent) / GetNumberOfPostingStages * 100,1));
    END;

    LOCAL PROCEDURE CalcProgressPercent@20(PostingState@1001 : Integer;NumberOfPostingStates@1000 : Integer;LineNo@1002 : Integer;TotalLinesQty@1003 : Integer) : Decimal;
    BEGIN
      EXIT(100 / NumberOfPostingStates * (PostingState + LineNo / TotalLinesQty));
    END;

    LOCAL PROCEDURE GetNumberOfPostingStages@33() : Integer;
    BEGIN
      IF GenJnlTemplate.Recurring THEN
        EXIT(6);

      EXIT(4);
    END;

    LOCAL PROCEDURE FindNextGLRegisterNo@24();
    BEGIN
      GLReg.LOCKTABLE;
      IF GLReg.FINDLAST THEN
        GLRegNo := GLReg."No." + 1
      ELSE
        GLRegNo := 1;
    END;

    PROCEDURE VATSettlement@1210008(VAR Rec@1210000 : Record 81);
    BEGIN
      GenJnlLine.COPY(Rec);
      VATSettlementCode;
      Rec := GenJnlLine;
    END;

    LOCAL PROCEDURE VATSettlementCode@1210000();
    VAR
      VendLedgEntry@1210001 : Record 25;
      CustLedgEntry@1470002 : Record 21;
      FA@1210004 : Record 5600;
      RecurrenceBuf@1470000 : TEMPORARY Record 43;
      VATAllocationLine@1210006 : Record 14925;
      VATSettlementMgt@1470001 : Codeunit 12411;
      VATChargePost@1210005 : Codeunit 12417;
    BEGIN
      WITH GenJnlLine DO BEGIN
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        LOCKTABLE;
        GenJnlAlloc.LOCKTABLE;

        //NC MTRA01 > DP
        GLReg.LOCKTABLE;
        IF GLReg.FINDLAST THEN
          GLRegNo := GLReg."No." + 1
        ELSE
          GLRegNo := 1;
        //NC MTRA01 < DP

        GenJnlTemplate.GET("Journal Template Name");
        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF STRLEN(INCSTR(GenJnlBatch.Name)) > MAXSTRLEN(GenJnlBatch.Name) THEN
          GenJnlBatch.FIELDERROR(
            Name,
            STRSUBSTNO(Text12400,
              MAXSTRLEN(GenJnlBatch.Name)));

        IF NOT FIND('=><') THEN BEGIN
          "Line No." := 0;
          EXIT;
        END;


        //NC MDM02 > PCH
        IF GUIALLOWED THEN BEGIN
        //NC MDM02 < PCH
          Window.OPEN(PostingStateMsg);
          Window.UPDATE(1,"Journal Batch Name");
        //NC MDM02 > PCH
        END;
        //NC MDM02 < PCH

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        REPEAT
          IF NOT EmptyLine THEN BEGIN
            IF NOT ("Account Type" IN ["Account Type"::Vendor,
                                       "Account Type"::Customer]) THEN
              FIELDERROR("Account Type");

            GenJnlCheckLine.CheckDateAllowed(GenJnlLine);
            VATSettlementMgt.CheckDate(GenJnlLine);
            VATSettlementMgt.CheckVATAllocation(GenJnlLine);
            CALCFIELDS("Allocated VAT Amount");
            TESTFIELD("Allocated VAT Amount");
            IF Amount <> -"Allocated VAT Amount" THEN
              ERROR(
                Text014 +
                Text015,
                "Posting Date",Amount + "Allocated VAT Amount",
                FIELDCAPTION("Allocated VAT Amount"),FIELDCAPTION(Amount));

            IF GenJnlLine."Prepmt. Diff." THEN
              TESTFIELD("Initial VAT Entry No.");

            LineCount := LineCount + 1;
            CheckAllocations(GenJnlLine);
          END;
          IF NEXT = 0 THEN
            FINDFIRST;
        UNTIL "Line No." = StartLineNo;
        NoOfRecords := LineCount;

        // Post VAT item charges if any
        IF FINDSET THEN
          REPEAT
            IF "Object Type" <> "Object Type"::"Fixed Asset" THEN BEGIN
              VATAllocationLine.RESET;
              VATAllocationLine.SETRANGE("VAT Entry No.","Unrealized VAT Entry No.");
              VATAllocationLine.SETRANGE(Type,VATAllocationLine.Type::Charge);
              IF VATAllocationLine.FINDSET THEN
                REPEAT
                  VATAllocationLine.TESTFIELD(Amount);
                    VATChargePost.PostItem(GenJnlLine,VATAllocationLine)
                UNTIL VATAllocationLine.NEXT = 0;
            END;
          UNTIL NEXT = 0;

        // Post lines
        LineCount := 0;
        FINDSET(TRUE,FALSE);
        REPEAT
          IF NOT EmptyLine THEN BEGIN
            GenJnlLine3 := GenJnlLine;
            WITH GenJnlLine3 DO BEGIN
              LineCount := LineCount + 1;
              UpdateDialog(RefPostingState::"Posting Lines",LineCount,NoOfRecords);

              CASE "Account Type" OF
                "Account Type"::Vendor:
                  BEGIN
                    VendLedgEntry.RESET;
                    IF NOT VendLedgEntry.GET("Initial Entry No.") THEN
                      ERROR(Text12401,VendLedgEntry.GETFILTERS);
                  END;
                "Account Type"::Customer:
                  BEGIN
                    CustLedgEntry.RESET;
                    IF NOT CustLedgEntry.GET("Initial Entry No.") THEN
                      ERROR(Text12401,CustLedgEntry.GETFILTERS);
                  END;
              END;
              VATSettlementMgt.CheckDuplicate(GenJnlLine3);
              VATSettlementMgt.RecalculateAllocation("Unrealized VAT Entry No.","Posting Date");

              GenJnlLine5.COPY(GenJnlLine3);
              PrepareGenJnlLineAddCurr(GenJnlLine5);
              GenJnlPostLine.SetPreviewMode(PreviewMode);
              CASE "Account Type" OF
                "Account Type"::Vendor:
                   GenJnlPostLine.PostVendVATSettlement(GenJnlLine,VendLedgEntry,GenJnlLine5);
                "Account Type"::Customer:
                   GenJnlPostLine.PostCustVATSettlement(GenJnlLine,CustLedgEntry,GenJnlLine5);
              END;
            END;
          END;
        UNTIL NEXT = 0;

        // delete lines
        GenJnlLine2.COPYFILTERS(GenJnlLine);
        GenJnlLine2.SETFILTER("Account No.",'<>%1','');
        IF GenJnlLine2.FINDLAST THEN; // Remember the last line
        GenJnlLine3.COPY(GenJnlLine);
        IF GenJnlLine3.FINDSET(TRUE,FALSE) THEN
          REPEAT
            GenJnlLine3.DELETE;
          UNTIL GenJnlLine3.NEXT = 0;
        GenJnlLine3.RESET;
        GenJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
        IF NOT GenJnlLine3.FINDLAST THEN
          IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
            GenJnlBatch.DELETE;
            FAJnlSetup.IncGenJnlBatchName(GenJnlBatch);
            GenJnlBatch.Name := INCSTR("Journal Batch Name");
            IF GenJnlBatch.INSERT THEN;
              "Journal Batch Name" := GenJnlBatch.Name;
          END;

        IF PreviewMode THEN
          ERROR('');

        COMMIT;
        CLEAR(GenJnlPostLine);
      END;
    END;

    PROCEDURE CheckLineRecurrence@1470000(GenJnlLine@1470000 : Record 81;VAR RecurrenceBuf@1470001 : TEMPORARY Record 43);
    BEGIN
      RecurrenceBuf."Document Type" := GenJnlLine."VAT Transaction No.";
      RecurrenceBuf."No." := GenJnlLine."Object No.";
      RecurrenceBuf."Line No." := GenJnlLine."Unrealized VAT Entry No.";
      IF NOT RecurrenceBuf.INSERT THEN
        ERROR(Text12425,GenJnlLine.FIELDCAPTION("Object No."),GenJnlLine."Object No.",
          GenJnlLine.FIELDCAPTION("Unrealized VAT Entry No."),GenJnlLine."Unrealized VAT Entry No.");
    END;

    PROCEDURE VATReinstatement@1210001(VAR Rec@1210000 : Record 81);
    BEGIN
      GenJnlLine.COPY(Rec);
      VATReinstatementCode;
      Rec := GenJnlLine;
    END;

    LOCAL PROCEDURE VATReinstatementCode@1210002();
    VAR
      VendLedgEntry@1210001 : Record 25;
      FA@1210004 : Record 5600;
      RecurrenceBuf@1470000 : TEMPORARY Record 43;
      VATReinstMgt@1470001 : Codeunit 12418;
    BEGIN
      WITH GenJnlLine DO BEGIN
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        LOCKTABLE;
        GenJnlAlloc.LOCKTABLE;

        GenJnlTemplate.GET("Journal Template Name");
        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF STRLEN(INCSTR(GenJnlBatch.Name)) > MAXSTRLEN(GenJnlBatch.Name) THEN
          GenJnlBatch.FIELDERROR(
            Name,
            STRSUBSTNO(Text12400,
              MAXSTRLEN(GenJnlBatch.Name)));

        IF NOT FIND('=><') THEN BEGIN
          "Line No." := 0;
          EXIT;
        END;

        //NC MDM02 > PCH
        IF GUIALLOWED THEN BEGIN
        //NC MDM02 < PCH
          Window.OPEN(PostingStateMsg);
          Window.UPDATE(1,"Journal Batch Name");
        //NC MDM02 > PCH
        END;
        //NC MDM02 < PCH

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        REPEAT
          IF NOT EmptyLine THEN BEGIN
            TESTFIELD("Account Type","Account Type"::Vendor);

            GenJnlCheckLine.CheckDateAllowed(GenJnlLine);
            VATReinstMgt.CheckAmount(GenJnlLine);

            LineCount := LineCount + 1;
          END;
          IF NEXT = 0 THEN
            FINDFIRST;
        UNTIL "Line No." = StartLineNo;
        NoOfRecords := LineCount;

        // Post lines
        LineCount := 0;
        FINDSET(TRUE,FALSE);
        REPEAT
          IF NOT EmptyLine THEN BEGIN
            GenJnlLine3 := GenJnlLine;
            WITH GenJnlLine3 DO BEGIN
              LineCount := LineCount + 1;
              UpdateDialog(RefPostingState::"Posting Lines",LineCount,NoOfRecords);

              VendLedgEntry.RESET;
              IF NOT VendLedgEntry.GET("Initial Entry No.") THEN
                ERROR(Text12401,VendLedgEntry.GETFILTERS);

              GenJnlLine5.COPY(GenJnlLine3);
              PrepareGenJnlLineAddCurr(GenJnlLine5);
              GenJnlPostLine.SetPreviewMode(PreviewMode);
              GenJnlPostLine.PostVendVATReinstatement(GenJnlLine5);
            END;
          END;
        UNTIL NEXT = 0;

        // delete lines
        GenJnlLine2.COPYFILTERS(GenJnlLine);
        GenJnlLine2.SETFILTER("Account No.",'<>%1','');
        IF GenJnlLine2.FINDLAST THEN; // Remember the last line
        GenJnlLine3.COPY(GenJnlLine);
        IF GenJnlLine3.FINDSET(TRUE,FALSE) THEN
          REPEAT
            GenJnlLine3.DELETE;
          UNTIL GenJnlLine3.NEXT = 0;
        GenJnlLine3.RESET;
        GenJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
        IF NOT GenJnlLine3.FINDLAST THEN
          IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
            GenJnlBatch.DELETE;
            FAJnlSetup.IncGenJnlBatchName(GenJnlBatch);
            GenJnlBatch.Name := INCSTR("Journal Batch Name");
            IF GenJnlBatch.INSERT THEN;
              "Journal Batch Name" := GenJnlBatch.Name;
          END;

        IF PreviewMode THEN
          ERROR('');

        COMMIT;
        CLEAR(GenJnlPostLine);
      END;
    END;

    LOCAL PROCEDURE SaveGenJournalLineToArchive@1210003(VAR LineNo@1210000 : Integer);
    BEGIN
      GenJnlLineArchive.TRANSFERFIELDS(GenJnlLine);
      GenJnlLineArchive."Line No." := LineNo;
      GenJnlLineArchive.INSERT;
      LineNo := LineNo + 1;
    END;

    LOCAL PROCEDURE CheckExpiredLine@36(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF NOT FIND THEN
          FINDSET;
        StartLineNo := "Line No.";
        REPEAT
          IF ("Expiration Date" = 0D) OR ("Expiration Date" >= "Posting Date") THEN
            MARK(TRUE);
          IF NEXT = 0 THEN
            FINDFIRST;
        UNTIL "Line No." = StartLineNo;
        MARKEDONLY(TRUE);
      END;
    END;

    PROCEDURE SetPreviewMode@27(NewPreviewMode@1000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    LOCAL PROCEDURE PostReversingLines@28(VAR TempGenJnlLine@1000 : TEMPORARY Record 81;VAR LineNo@1210000 : Integer;VAR TransNo@1210001 : Integer);
    VAR
      GenJournalLine1@1001 : Record 81;
      GenJournalLine2@1002 : Record 81;
    BEGIN
      LineCount := 0;
      LastDocNo := '';
      LastPostedDocNo := '';
      IF TempGenJnlLine.FIND('-') THEN
        REPEAT
          GenJournalLine1 := TempGenJnlLine;
          WITH GenJournalLine1 DO BEGIN
            LineCount := LineCount + 1;
            UpdateDialog(RefPostingState::"Posting revers. lines",LineCount,NoOfReversingRecords);
            IF GenJnlTemplate.Archive AND (NOT GenJnlTemplate.Recurring) AND (GenJnlLine."Account No." <> '') THEN
              SaveGenJournalLineToArchive(LineNo);
            CheckDocumentNo(GenJournalLine1);
            GenJournalLine2.COPY(GenJournalLine1);
            PrepareGenJnlLineAddCurr(GenJournalLine2);

            //NC MMTM05 > AG
            IF GenJnlBatch."Reversing As Red Storno" THEN BEGIN
              GenJournalLine2.VALIDATE(Correction,TRUE);
              GenJournalLine1.Correction := TRUE;
            END;
            //NC MMTM05 < AG

            //TDRANCS-2048>
            IF GenJnlTemplate.Recurring AND (GenJnlBatch."Batch Type" = GenJnlBatch."Batch Type"::Manual) THEN BEGIN
              GenJournalLine2."Currency Factor" := 0;
              GenJournalLine2.VALIDATE("Currency Code",GenJnlLine3."Currency Code");
              GenJournalLine2.UpdateLineBalance;
            END;
            //TDRANCS-2048<
            GenJnlPostLine.SetPreviewMode(PreviewMode);
            GenJnlPostLine.RunWithCheck(GenJournalLine2);
            IF TransNo = 0 THEN
              TransNo := GenJnlPostLine.GetNextTransactionNo;
            PostAllocations(GenJournalLine1,TRUE);
          END;
        UNTIL TempGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateAndDeleteLines@31();
    VAR
      TempGenJnlLine2@1002 : TEMPORARY Record 81;
      OldVATAmount@1000 : Decimal;
      OldVATPct@1001 : Decimal;
    BEGIN
      //NC NOS-26 > SPA
      IF GenJnlLine."Transaction Type" <> GenJnlLine."Transaction Type"::Automatic THEN
      //NC NOS-26 < SPA
      ClearDataExchEntries(GenJnlLine);
      IF GenJnlTemplate.Recurring THEN BEGIN
        // Recurring journal
        LineCount := 0;
        GenJnlLine2.COPY(GenJnlLine);
        GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
        GenJnlLine2.FINDSET(TRUE,FALSE);
        REPEAT
          LineCount := LineCount + 1;
          UpdateDialog(RefPostingState::"Updating lines",LineCount,NoOfRecords);
          OldVATAmount := GenJnlLine2."VAT Amount";
          OldVATPct := GenJnlLine2."VAT %";
          IF GenJnlLine2."Posting Date" <> 0D THEN
            GenJnlLine2.VALIDATE(
              "Posting Date",CALCDATE(GenJnlLine2."Recurring Frequency",GenJnlLine2."Posting Date"));
          IF NOT
             (GenJnlLine2."Recurring Method" IN
              [GenJnlLine2."Recurring Method"::"F  Fixed",
               GenJnlLine2."Recurring Method"::"RF Reversing Fixed"])
          THEN
            MultiplyAmounts(GenJnlLine2,0)
          ELSE
            IF (GenJnlLine2."VAT %" = OldVATPct) AND (GenJnlLine2."VAT Amount" <> OldVATAmount) THEN
              GenJnlLine2.VALIDATE("VAT Amount",OldVATAmount);
          GenJnlLine2.MODIFY;
        UNTIL GenJnlLine2.NEXT = 0;
      END ELSE BEGIN
        // Not a recurring journal
        GenJnlLine2.COPY(GenJnlLine);
        GenJnlLine2.SETFILTER("Account No.",'<>%1','');
        IF GenJnlLine2.FINDLAST THEN; // Remember the last line
        GenJnlLine3.COPY(GenJnlLine);
        GenJnlLine3.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
        GenJnlLine3.DELETEALL;
        GenJnlLine3.RESET;
        GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
        GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        IF NOT GenJnlLine3.FINDLAST THEN
          IF INCSTR(GenJnlLine."Journal Batch Name") <> '' THEN BEGIN
            GenJnlBatch.DELETE;
            IF GenJnlTemplate.Type = GenJnlTemplate.Type::Assets THEN
              FAJnlSetup.IncGenJnlBatchName(GenJnlBatch);
            GenJnlBatch.Name := INCSTR(GenJnlLine."Journal Batch Name");
            IF GenJnlBatch.INSERT THEN;
            GenJnlLine."Journal Batch Name" := GenJnlBatch.Name;
          END;

        GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        IF (GenJnlBatch."No. Series" = '') AND NOT GenJnlLine3.FINDLAST THEN BEGIN
          GenJnlLine3.INIT;
          GenJnlLine3."Journal Template Name" := GenJnlLine."Journal Template Name";
          GenJnlLine3."Journal Batch Name" := GenJnlLine."Journal Batch Name";
          GenJnlLine3."Line No." := 10000;
          GenJnlLine3.INSERT;
          TempGenJnlLine2 := GenJnlLine2;
          TempGenJnlLine2."Balance (LCY)" := 0;
          GenJnlLine3.SetUpNewLine(TempGenJnlLine2,0,TRUE);
          GenJnlLine3.MODIFY;
        END;
      END;
    END;

    PROCEDURE Preview@32(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      PreviewMode := TRUE;
      GenJnlLine.COPY(GenJournalLine);
      Code;
    END;

    LOCAL PROCEDURE CheckRestrictions@35(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      IF NOT PreviewMode THEN
        GenJournalLine.OnCheckGenJournalLinePostRestrictions;
    END;

    LOCAL PROCEDURE ClearDataExchEntries@37(VAR PassedGenJnlLine@1000 : Record 81);
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine.COPY(PassedGenJnlLine);
      IF GenJnlLine.FINDSET THEN
        REPEAT
          GenJnlLine.ClearDataExchangeEntries(TRUE);
        UNTIL GenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PostGenJournalLine@39(VAR GenJournalLine@1000 : Record 81;CurrentICPartner@1001 : Code[20];ICTransactionNo@1002 : Integer;VAR LineNo@1210000 : Integer;VAR TransNo@1210001 : Integer) : Boolean;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF NeedCheckZeroAmount AND (Amount = 0) AND IsRecurring
          AND (Quantity = 0) // NC NOS-26 SPA
        THEN
          EXIT(FALSE);

        LineCount := LineCount + 1;
        IF CurrentICPartner <> '' THEN
          "IC Partner Code" := CurrentICPartner;
        UpdateDialog(RefPostingState::"Posting Lines",LineCount,NoOfRecords);
        IF GenJnlTemplate.Archive AND (NOT GenJnlTemplate.Recurring) AND (GenJnlLine."Account No." <> '') THEN BEGIN
          GenJnlLineArchive.TRANSFERFIELDS(GenJnlLine);
          GenJnlLineArchive."Line No." := LineNo;
          GenJnlLineArchive.INSERT;
          LineNo := LineNo + 1;
        END;
        MakeRecurringTexts(GenJournalLine);
        CheckDocumentNo(GenJournalLine);
        GenJnlLine5.COPY(GenJournalLine);
        PrepareGenJnlLineAddCurr(GenJnlLine5);
        UpdateIncomingDocument(GenJnlLine5);
        GenJnlPostLine.SetPreviewMode(PreviewMode);
        GenJnlPostLine.RunWithoutCheck(GenJnlLine5);

        // NCS-1880 > ORM
        IF NOT PreviewMode THEN
          IF GLSetup."Approval for Gen. Journal Line" THEN
            GenJnlLine3.CheckAgainstApproved;
        // NCS-1880 < ORM

        IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
           ("IC Direction" = "IC Direction"::Outgoing) AND (ICTransactionNo > 0)
        THEN
          ICOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,GenJnlLine5);
        IF TransNo = 0 THEN
          TransNo := GenJnlPostLine.GetNextTransactionNo;

        IF ("Recurring Method" >= "Recurring Method"::"RF Reversing Fixed") AND ("Posting Date" <> 0D) THEN BEGIN

          //NC APCOC-110 > DP
            //TDRANCS-2048 commented>
          //"Source Historical Date" :="Posting Date";
          IF NOT (GenJnlTemplate.Recurring AND (GenJnlBatch."Batch Type" = GenJnlBatch."Batch Type"::Manual)) THEN
            "Source Historical Date" :="Posting Date";
            //TDRANCS-2048<
          //NC APCOC-110 < DP

          //TDRANCS-2048>
          IF GenJnlTemplate.Recurring AND (GenJnlBatch."Batch Type" = GenJnlBatch."Batch Type"::Manual) THEN
            "Posting Date" := CALCDATE("Recurring Frequency", "Posting Date")
          ELSE
          //TDRANCS-2048<
            "Posting Date" := "Posting Date" + 1;
          "Document Date" := "Posting Date";
          MultiplyAmounts(GenJournalLine,-1);
          TempGenJnlLine4 := GenJournalLine;
          TempGenJnlLine4."Reversing Entry" := TRUE;
          TempGenJnlLine4.INSERT;
          NoOfReversingRecords := NoOfReversingRecords + 1;
          "Posting Date" := "Posting Date" - 1;
          "Document Date" := "Posting Date";
        END;
        //NC NOS-26 > SPA
        IF "Transaction Type" <> "Transaction Type"::Automatic THEN
        //NC NOS-26 < SPA
          PostAllocations(GenJournalLine,FALSE);
        // NC MTF02 > II
      //  IF ("Account Type" = "Account Type"::"6") OR ("Bal. Account Type" = "Bal. Account Type"::"6") THEN
      //    FlagFI := TRUE;
        // NC MTF02 < II
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckLine@38(VAR GenJnlLine@1000 : Record 81;VAR PostingOutsideFiscalYearConfirmed@1002 : Boolean);
    BEGIN
      CheckRecurringLine(GenJnlLine);
      UpdateRecurringAmt(GenJnlLine);
      //NC NOS-26 > SPA
      IF GenJnlLine."Transaction Type" <> GenJnlLine."Transaction Type"::Automatic THEN
      //NC NOS-26 < SPA
        CheckAllocations(GenJnlLine);
      GenJnlLine5.COPY(GenJnlLine);
      IF NOT PostingOutsideFiscalYearConfirmed THEN
        PostingOutsideFiscalYearConfirmed :=
          InstructionMgt.ConfirmPostingOutsideFiscalYear(
            ConfirmPostingOutsidePeriodQst,GenJnlLine5."Posting Date",InstructionMgt.PostingOutsideFiscalYearNotAllowedCode);
      PrepareGenJnlLineAddCurr(GenJnlLine5);
      GenJnlCheckLine.RunCheck(GenJnlLine5);
      //NC NOS-26 > SPA
      IF GenJnlLine."Transaction Type" <> GenJnlLine."Transaction Type"::Automatic THEN
      //NC NOS-26 < SPA
        CheckRestrictions(GenJnlLine5);
    END;

    LOCAL PROCEDURE "//NCF"@1101495007();
    BEGIN
    END;

    LOCAL PROCEDURE CheckBalanceConvID@1000000007();
    BEGIN
      //NC MTF02 > AKU
      WITH TempConversIDAmount DO BEGIN
        SETFILTER(Amount, '<>0');
        IF FINDFIRST THEN
          ERROR(
              Text50100 +
              Text50101,
              "Business Unit Code", Amount, GenJnlLine.FIELDCAPTION("Conversation ID"), GenJnlLine.FIELDCAPTION(Amount));
      END;
      //NC MTF02 < AKU
    END;

    BEGIN
    {
      NC PIF001 DL Добавлена проверка на Code
      NC PIF001 MP опциональная замена счета P&L на 84.1 при учете реверсных операций - для сторно
                   корректировок по МСФО
      NC MDP01 MP Мелкие доработки по журналам.
      NC MDTA01 MP Измерение Валюта
      NC MDM02 PCH изменения для работы под NAS
      NC MNET03 PCH Разрешен учет периодических журналов с нулевыми суммами
      NC MMTM05 AG - внесены изменения в PostAllocations для возможности учета переоценки МТМ через типовой журнал
                   - поднятие флажка Correction по полю GenJnlBatch."Reversing As Red Storno"
      -------------------------------------------------------------------------------------------------
      NC BLD01 AKU Создан билд, включающий доработки NCPIF001,MDP001,MDTA01,MDM02,MNET03,MMTM05
      NC MTRA01 DP Preview functional transfer
      NC MTF02 II Учет операций с фин. инструментами
      NC MTF02 II Запуск функций PostCost, PostCoupon только при учете шаблона фин. журнала с типом "ФИ"
      NC OAM33 DP Документ с несколькими поставщиками (авансовый отчет)
      NC MTF02 AKU Проверка сумм конвертации
      NC MNET07 DP Реверс неттинг - изменена функция MultiplyAmounts
      NC MDP01.1 DP проверка поля "ОС операция"

      TD RA BMN 07.03.2011 > Внесены изменения в функцию Code для корректной обработки пустой строки.
      -------------------------------------------------------------------------------------------------
      NC BLD02 DP Создан билд, включающий доработки NCBLD01,MTRA01,MLN02,OAM33,MTF02,MNET07,MDP01,APCOC-92
      NC APCOC-110 DP Установка исторической даты для реверса
      NC 200912 DP Снятие контроля заполнения филиал для раздела фин. журнала перепроведения, удаления
      NC #5695 Включена доработка APCOC-110
      TDRANCS-905 Modify Code - changed check for Business Unit
      TDRAMIO-79 Modified Code
        Post without check BU for Revaluate Journal Batch
      NCS-1880 Добавлен код проверки того, что строка журнала утверждена
      BLD03 NAVW15.00,NAVRU5.00.01.02,NCBLD02,APCOC-101,200912,#5695,NCS-905
      TDRANCS-2048> Reverce Entry and ExchRate
        Modified func Code
      TDRANCS-2230 added read Permissions for g\l entry
      NC NCS-2368 DP Modify function "Code"
      -------------------------------------
      NC NOS-26 SPA Миграция на новую версию
                      Режим предпросмотра не перенесен, т.к. теперь он есть в стандарте
    }
    END.
  }
}

