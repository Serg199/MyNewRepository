OBJECT Table 79 Company Information
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00,NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Company Information;
               RUS=Информация об организации];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              RUS=Первичный ключ] }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              RUS=Название] }
    { 3   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              RUS=Название 2] }
    { 4   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              RUS=Адрес] }
    { 5   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              RUS=Адрес 2] }
    { 6   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              RUS=Город] }
    { 7   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              RUS=Телефон] }
    { 8   ;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No. 2;
                                                              RUS=Телефон 2] }
    { 9   ;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              RUS=Телекс] }
    { 10  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              RUS=Факс] }
    { 11  ;   ;Giro No.            ;Text20        ;CaptionML=[ENU=Giro No.;
                                                              RUS=Номер жиросчета] }
    { 12  ;   ;Bank Name           ;Text50        ;CaptionML=[ENU=Bank Name;
                                                              RUS=Название банка] }
    { 13  ;   ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              RUS=Номер отделения банка] }
    { 14  ;   ;Bank Account No.    ;Text30        ;CaptionML=[ENU=Bank Account No.;
                                                              RUS=Код банк. счета] }
    { 15  ;   ;Payment Routing No. ;Text20        ;CaptionML=[ENU=Payment Routing No.;
                                                              RUS=Номер маршрута оплаты] }
    { 17  ;   ;Customs Permit No.  ;Text10        ;CaptionML=[ENU=Customs Permit No.;
                                                              RUS=Номер разрешения таможни] }
    { 18  ;   ;Customs Permit Date ;Date          ;CaptionML=[ENU=Customs Permit Date;
                                                              RUS=Дата разрешения таможни] }
    { 19  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',DATABASE::"Company Information");
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              RUS=ИНН] }
    { 20  ;   ;Registration No.    ;Text20        ;CaptionML=[ENU=Registration No.;
                                                              RUS=Регистрационный номер] }
    { 21  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              RUS=Телекс для ответа] }
    { 22  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              RUS=Название получателя] }
    { 23  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              RUS=Название 2 получателя] }
    { 24  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              RUS=Адрес получателя] }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              RUS=Адрес 2 получателя] }
    { 26  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              RUS=Город получателя] }
    { 27  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              RUS=Контакт получателя] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              RUS=Код склада] }
    { 29  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              RUS=Изображение];
                                                   SubType=Bitmap }
    { 30  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              RUS=Индекс] }
    { 31  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              RUS=Район] }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              RUS=Индекс получателя] }
    { 33  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              RUS=Район получателя] }
    { 34  ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              RUS=Эл. почта] }
    { 35  ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              RUS=Интернет-адрес] }
    { 36  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              RUS=Код страны/региона] }
    { 37  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              RUS=Код страны/региона получателя] }
    { 38  ;   ;IBAN                ;Code50        ;OnValidate=BEGIN
                                                                CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              RUS=IBAN] }
    { 39  ;   ;SWIFT Code          ;Code20        ;CaptionML=[ENU=SWIFT Code;
                                                              RUS=SWIFT-код] }
    { 40  ;   ;Industrial Classification;Text30   ;CaptionML=[ENU=Industrial Classification;
                                                              RUS=Отраслевая классификация] }
    { 41  ;   ;IC Partner Code     ;Code20        ;AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Code;
                                                              RUS=Код МФ-партнера] }
    { 42  ;   ;IC Inbox Type       ;Option        ;OnValidate=BEGIN
                                                                IF "IC Inbox Type" = "IC Inbox Type"::Database THEN
                                                                  "IC Inbox Details" := '';
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Inbox Type;
                                                              RUS=Тип входящих МФ];
                                                   OptionCaptionML=[ENU=File Location,Database;
                                                                    RUS=Местоположение файла,База данных];
                                                   OptionString=File Location,Database }
    { 43  ;   ;IC Inbox Details    ;Text250       ;OnLookup=VAR
                                                              FileMgt@1000 : Codeunit 419;
                                                              FileName@1002 : Text;
                                                              FileName2@1003 : Text;
                                                              Path@1004 : Text;
                                                            BEGIN
                                                              TESTFIELD("IC Partner Code");
                                                              CASE "IC Inbox Type" OF
                                                                "IC Inbox Type"::"File Location":
                                                                  BEGIN
                                                                    IF "IC Inbox Details" = '' THEN
                                                                      FileName := STRSUBSTNO('%1.xml',"IC Partner Code")
                                                                    ELSE
                                                                      FileName := "IC Inbox Details" + STRSUBSTNO('\%1.xml',"IC Partner Code");

                                                                    FileName2 := FileMgt.SaveFileDialog(Text001,FileName,'');
                                                                    IF FileName <> FileName2 THEN BEGIN
                                                                      Path := FileMgt.GetDirectoryName(FileName2);
                                                                      IF Path <> '' THEN
                                                                        "IC Inbox Details" := COPYSTR(Path,1,250);
                                                                    END;
                                                                  END;
                                                              END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Inbox Details;
                                                              RUS=Входящие МФ, подробно] }
    { 46  ;   ;System Indicator    ;Option        ;CaptionML=[ENU=System Indicator;
                                                              RUS=Индикатор системы];
                                                   OptionCaptionML=[ENU=None,Custom Text,Company Information,Company,Database,Company+Database;
                                                                    RUS=Нет,Пользовательский текст,Информация об организации,Организация,База данных,Организация+База данных];
                                                   OptionString=None,Custom Text,Company Information,Company,Database,Company+Database }
    { 47  ;   ;Custom System Indicator Text;Text250;
                                                   CaptionML=[ENU=Custom System Indicator Text;
                                                              RUS=Пользовательский текст индикатора системы] }
    { 48  ;   ;System Indicator Style;Option      ;CaptionML=[ENU=System Indicator Style;
                                                              RUS=Стиль индикатора системы];
                                                   OptionCaptionML=[ENU=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9;
                                                                    RUS=Стандартный,Акцент1,Акцент2,Акцент3,Акцент4,Акцент5,Акцент6,Акцент7,Акцент8,Акцент9];
                                                   OptionString=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9 }
    { 50  ;   ;Allow Blank Payment Info.;Boolean  ;CaptionML=[ENU=Allow Blank Payment Info.;
                                                              RUS=Разрешить пустые сведения о платеже] }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit 1607;
                                                              BEGIN
                                                                IF GLN <> '' THEN
                                                                  IF NOT GLNCalculator.IsValidCheckDigit13(GLN) THEN
                                                                    ERROR(GLNCheckDigitErr,FIELDCAPTION(GLN));
                                                              END;

                                                   CaptionML=[ENU=GLN;
                                                              RUS=Код GLN];
                                                   Numeric=Yes }
    { 99  ;   ;Created DateTime    ;DateTime      ;CaptionML=[ENU=Created DateTime;
                                                              RUS=Дата и время создания];
                                                   Editable=No }
    { 100 ;   ;Demo Company        ;Boolean       ;CaptionML=[ENU=Demo Company;
                                                              RUS=Демонстрационная организация];
                                                   Editable=No }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center".Code;
                                                   ValidateTableRelation=Yes;
                                                   CaptionML=[ENU=Responsibility Center;
                                                              RUS=Центр ответственности] }
    { 5791;   ;Check-Avail. Period Calc.;DateFormula;
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Check-Avail. Period Calc.;
                                                              RUS=Расчет периода проверки наличия] }
    { 5792;   ;Check-Avail. Time Bucket;Option    ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Check-Avail. Time Bucket;
                                                              RUS=Временной период проверки наличия];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                                                    RUS=День,Неделя,Месяц,Квартал,Год];
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              RUS=Код базового календаря] }
    { 7601;   ;Cal. Convergence Time Frame;DateFormula;
                                                   InitValue=1Y;
                                                   AccessByPermission=TableData 7600=R;
                                                   CaptionML=[ENU=Cal. Convergence Time Frame;
                                                              RUS=Время сведения календаря] }
    { 7602;   ;Show Chart On RoleCenter;Boolean   ;CaptionML=[ENU=Show Chart On RoleCenter;
                                                              RUS=Показать диаграмму в RoleCenter] }
    { 12400;  ;Director No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                "Director Name" := StdRepMgt.GetEmpName("Director No.");
                                                              END;

                                                   CaptionML=[ENU=Director No.;
                                                              RUS=Код директора] }
    { 12401;  ;Director Name       ;Text50        ;CaptionML=[ENU=Director Name;
                                                              RUS=Директор (ФИО)] }
    { 12402;  ;Accountant Name     ;Text50        ;CaptionML=[ENU=Accountant Name;
                                                              RUS=Бухгалтер (ФИО)] }
    { 12403;  ;Accountant No.      ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                "Accountant Name" := StdRepMgt.GetEmpName("Accountant No.");
                                                              END;

                                                   CaptionML=[ENU=Accountant No.;
                                                              RUS=Код бухгалтера] }
    { 12404;  ;OGRN Code           ;Code13        ;CaptionML=[ENU=OGRN Code;
                                                              RUS=Код ОГРН] }
    { 12405;  ;OKPO Code           ;Code10        ;CaptionML=[ENU=OKPO Code;
                                                              RUS=Код ОКПО] }
    { 12406;  ;OKONX Code          ;Code10        ;CaptionML=[ENU=OKONX Code;
                                                              RUS=Код ОКОНХ] }
    { 12407;  ;OKOPF Code          ;Code10        ;CaptionML=[ENU=OKOPF Code;
                                                              RUS=Код ОКОПФ] }
    { 12408;  ;OKFS Code           ;Code10        ;CaptionML=[ENU=OKFS Code;
                                                              RUS=Код ОКФС] }
    { 12409;  ;Full Name           ;Text250       ;CaptionML=[ENU=Full Name;
                                                              RUS=Полное название] }
    { 12410;  ;Bank BIC            ;Code20        ;TableRelation="Bank Directory".BIC;
                                                   OnValidate=BEGIN
                                                                IF BankDir.GET("Bank BIC") THEN BEGIN
                                                                  "Bank Corresp. Account No." := BankDir."Corr. Account No.";
                                                                  "Bank Name"  := COPYSTR(BankDir."Full Name",1,MAXSTRLEN("Bank Name"));
                                                                  "Bank City" := BankDir."Area Name";
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bank BIC;
                                                              RUS=БИК банка] }
    { 12411;  ;Recipient Tax Authority SONO;Code4 ;CaptionML=[ENU=Recipient Tax Authority SONO;
                                                              RUS=СОНО налогового органа получателя] }
    { 12412;  ;Admin. Tax Authority SONO;Code4    ;CaptionML=[ENU=Admin. Tax Authority SONO;
                                                              RUS=СОНО налогового органа админ. единицы] }
    { 12416;  ;Region Code         ;Code10        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Region Code;
                                                              RUS=Код региона] }
    { 12417;  ;Populated Locality  ;Text30        ;CaptionML=[ENU=Populated Locality;
                                                              RUS=Населенный пункт] }
    { 12418;  ;Street              ;Text30        ;CaptionML=[ENU=Street;
                                                              RUS=Улица] }
    { 12419;  ;House               ;Text5         ;CaptionML=[ENU=House;
                                                              RUS=Дом] }
    { 12420;  ;Building            ;Text5         ;CaptionML=[ENU=Building;
                                                              RUS=Корпус] }
    { 12421;  ;Apartment           ;Text5         ;CaptionML=[ENU=Apartment;
                                                              RUS=Квартира] }
    { 12425;  ;KPP Code            ;Code10        ;CaptionML=[ENU=KPP Code;
                                                              RUS=КПП] }
    { 12426;  ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Russian Entity,Subsidiary,Private,Foreign Entity Subsidiary,Other Entity;
                                                                    RUS=Российская организация,Филиал,Частная,Филиал иностранной организации,Другая организация];
                                                   OptionString=Russian Entity,Subsidiary,Private,Foreign Entity Subsidiary,Other Entity }
    { 12435;  ;Registration Date   ;Date          ;CaptionML=[ENU=Registration Date;
                                                              RUS=Дата регистрации] }
    { 12436;  ;Principal Activity  ;Text30        ;CaptionML=[ENU=Principal Activity;
                                                              RUS=Основной вид деятельности] }
    { 12443;  ;OKOGU Code          ;Code10        ;CaptionML=[ENU=OKOGU Code;
                                                              RUS=Код ОКОГУ] }
    { 12444;  ;OKATO Code          ;Code11        ;CaptionML=[ENU=OKATO Code;
                                                              RUS=Код ОКАТО] }
    { 12445;  ;OKVED Code          ;Code10        ;CaptionML=[ENU=OKVED Code;
                                                              RUS=Код ОКВЭД] }
    { 12446;  ;HR Manager No.      ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=HR Manager No.;
                                                              RUS=Код начальника отдела кадров] }
    { 12450;  ;Taxation Body No.   ;Code10        ;CaptionML=[ENU=Taxation Body No.;
                                                              RUS=Налоговый орган - код] }
    { 12451;  ;Taxation Body Name  ;Text40        ;CaptionML=[ENU=Taxation Body Name;
                                                              RUS=Налоговый орган - наименование] }
    { 12452;  ;Taxation Body District;Text30      ;CaptionML=[ENU=Taxation Body District;
                                                              RUS=Налоговый орган - регион] }
    { 12453;  ;Taxation Body Address;Text30       ;CaptionML=[ENU=Taxation Body Address;
                                                              RUS=Налоговый орган - адрес] }
    { 12454;  ;Taxation Body Address 2;Text50     ;CaptionML=[ENU=Taxation Body Address 2;
                                                              RUS=Налоговый орган - адрес 2] }
    { 12455;  ;Taxation Body Post Code;Code10     ;CaptionML=[ENU=Taxation Body Post Code;
                                                              RUS=Налоговый орган - индекс] }
    { 12456;  ;Taxation Body Phone No.;Text30     ;CaptionML=[ENU=Taxation Body Phone No.;
                                                              RUS=Налоговый орган - телефон] }
    { 12457;  ;Pension Fund Registration No.;Text20;
                                                   CaptionML=[ENU=Pension Fund Registration No.;
                                                              RUS=Регистрационный номер ПФ] }
    { 12458;  ;Medical Fund Registration No.;Text20;
                                                   CaptionML=[ENU=Medical Fund Registration No.;
                                                              RUS=Регистрационный номер в ФОМС] }
    { 12459;  ;Social Insurance Fund Agency;Text35;CaptionML=[ENU=Social Insurance Fund Agency;
                                                              RUS=Агентство фонда социального страхования] }
    { 12460;  ;Social Insurance Code;Text10       ;CaptionML=[ENU=Social Insurance Code;
                                                              RUS=Код социального страхования] }
    { 12461;  ;Tax Bearer Category ;Text50        ;CaptionML=[ENU=Tax Bearer Category;
                                                              RUS=Категория налогоплательщика] }
    { 12462;  ;Tax Bearer Category Code;Code10    ;CaptionML=[ENU=Tax Bearer Category Code;
                                                              RUS=Код категории налогоплательщика] }
    { 12463;  ;Pension Fund Registration Name;Text50;
                                                   CaptionML=[ENU=Pension Fund Registration Name;
                                                              RUS=Название для пенсионного фонда] }
    { 12464;  ;Bank City           ;Text50        ;CaptionML=[ENU=Bank City;
                                                              RUS=Город банка] }
    { 12478;  ;Bank Corresp. Account No.;Code20   ;CaptionML=[ENU=Bank Corresp. Account No.;
                                                              RUS=Номер корр. счета банка] }
    { 12479;  ;Company Status      ;Option        ;CaptionML=[ENU=Company Status;
                                                              RUS=Статус организации];
                                                   OptionCaptionML=[ENU=" ,01,02,03,04,05,06,07,08";
                                                                    RUS=" ,01,02,03,04,05,06,07,08"];
                                                   OptionString=[ ,01,02,03,04,05,06,07,08] }
    { 12480;  ;Administrative Region;Text50       ;CaptionML=[ENU=Administrative Region;
                                                              RUS=Административный регион] }
    { 12481;  ;Primary Activity    ;Text50        ;CaptionML=[ENU=Primary Activity;
                                                              RUS=Основная деятельность] }
    { 12482;  ;Form of Ownership   ;Text50        ;CaptionML=[ENU=Form of Ownership;
                                                              RUS=Форма собственности] }
    { 12483;  ;Separated Org. Unit ;Boolean       ;CaptionML=[ENU=Separated Org. Unit;
                                                              RUS=Обособленное подразделение] }
    { 12485;  ;Region Name         ;Text30        ;CaptionML=[ENU=Region Name;
                                                              RUS=Регион] }
    { 12487;  ;Municipal District  ;Code10        ;CaptionML=[ENU=Municipal District;
                                                              RUS=Муниципальный округ] }
    { 12488;  ;FSI Registration No.;Code10        ;CaptionML=[ENU=FSI Registration No.;
                                                              RUS=Регистрационный номер ФСС] }
    { 14716;  ;Reg. Country/Region ;Text50        ;CaptionML=[ENU=Reg. Country/Region;
                                                              RUS=Страна/регион регистрации] }
    { 14717;  ;Reg. Country/Region Code;Code10    ;TableRelation=Country/Region;
                                                   OnValidate=VAR
                                                                Country@1470000 : Record 9;
                                                              BEGIN
                                                                "Reg. Country/Region" := Country.GetLocalName("Reg. Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Reg. Country/Region Code;
                                                              RUS=Код страны/региона регистрации] }
    { 14718;  ;Reg. VAT Registration No.;Text30   ;CaptionML=[ENU=Reg. VAT Registration No.;
                                                              RUS=ИНН регистрации] }
    { 14719;  ;Property Locat. KPP Code;Code10    ;CaptionML=[ENU=Property Locat. KPP Code;
                                                              RUS=КПП по месту нахожд. имущества] }
    { 14720;  ;Stat. Acc. Sert. - Series;Code20   ;CaptionML=[ENU=Stat. Acc. Sert. - Series;
                                                              RUS=Свид. о пост. на учет - серия] }
    { 14721;  ;Stat. Acc. Sert. - No.;Code20      ;CaptionML=[ENU=Stat. Acc. Sert. - No.;
                                                              RUS=Свид. о пост. на учет - номер] }
    { 14722;  ;Stat. Acc. Sert. - Issue Date;Date ;CaptionML=[ENU=Stat. Acc. Sert. - Issue Date;
                                                              RUS=Свид. о пост. на учет - дата выдачи] }
    { 14723;  ;Stat. Acc. Sert. - Issue State;Text50;
                                                   CaptionML=[ENU=Stat. Acc. Sert. - Issue State;
                                                              RUS=Свид. о пост. на учет - кем выдано] }
    { 14724;  ;Stat. Acc. Sert. - Issue Code;Code20;
                                                   CaptionML=[ENU=Stat. Acc. Sert. - Issue Code;
                                                              RUS=Свид. о пост. на учет - кем выдано код] }
    { 14725;  ;Representative Organization;Text30 ;CaptionML=[ENU=Representative Organization;
                                                              RUS=Организация-представитель] }
    { 14726;  ;Representative First Name;Text30   ;CaptionML=[ENU=Representative First Name;
                                                              RUS=Имя представителя] }
    { 14727;  ;Representative Middle Name;Text30  ;CaptionML=[ENU=Representative Middle Name;
                                                              RUS=Отчество представителя] }
    { 14728;  ;Representative Last Name;Text30    ;CaptionML=[ENU=Representative Last Name;
                                                              RUS=Фамилия представителя] }
    { 14729;  ;Representative Document;Text30     ;CaptionML=[ENU=Representative Document;
                                                              RUS=Документ представителя] }
    { 14730;  ;Import Curr. Exch. Rates;Boolean   ;CaptionML=[ENU=Import Curr. Exch. Rates;
                                                              RUS=Импорт валютных курсов] }
    { 14731;  ;Import Conflict Resolution;Option  ;CaptionML=[ENU=Import Conflict Resolution;
                                                              RUS=Разрешение конфликтов при импорте];
                                                   OptionCaptionML=[ENU=Replace,Skip,Prompt;
                                                                    RUS=Заменить,Пропустить,Запросить];
                                                   OptionString=Replace,Skip,Prompt }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000 : Record 225;
      Text000@1001 : TextConst 'ENU=The number that you entered may not be a valid International Bank Account Number (IBAN). Do you want to continue?;RUS=Введенный номер может не являться действительным международным номером банковского счета (IBAN). Продолжить?';
      Text001@1002 : TextConst 'ENU=File Location for IC files;RUS=Местоположение файлов МФ';
      Text002@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;RUS=Прежде чем использовать Online Map, необходимо заполнить окно настройки Online Map.\См. раздел справки "Настройка Online Map".';
      NoPaymentInfoQst@1005 : TextConst '@@@="%1 = Company Information";ENU=No payment information is provided in %1. Do you want to update it now?;RUS=%1 не содержит сведений о платеже. Обновить его сейчас.';
      NoPaymentInfoMsg@1004 : TextConst 'ENU=No payment information is provided in %1. Review the report.;RUS=%1 не содержит сведений о платеже. Просмотрите отчет.';
      BankDir@1470001 : Record 12409;
      StdRepMgt@1470000 : Codeunit 12401;
      Text14900@1210000 : TextConst 'ENU=Currency %1 exchange rate in company %2 on %3 already exists. Do you want to replace it?;RUS=Курс валюты %1 для организации %2 на %3 уже существует. Заменить его?';
      GLNCheckDigitErr@1006 : TextConst 'ENU=The %1 is not valid.;RUS=%1 недопустим.';
      DevBetaModeTxt@1007 : TextConst '@@@={Locked};ENU=DEV_BETA;RUS=DEV_BETA';

    PROCEDURE CheckIBAN@1(IBANCode@1000 : Code[100]);
    VAR
      Modulus97@1001 : Integer;
      I@1002 : Integer;
    BEGIN
      IF IBANCode = '' THEN
        EXIT;
      IBANCode := DELCHR(IBANCode);
      Modulus97 := 97;
      IF (STRLEN(IBANCode) <= 5) OR (STRLEN(IBANCode) > 34) THEN
        IBANError;
      ConvertIBAN(IBANCode);
      WHILE STRLEN(IBANCode) > 6 DO
        IBANCode := CalcModulus(COPYSTR(IBANCode,1,6),Modulus97) + COPYSTR(IBANCode,7);
      EVALUATE(I,IBANCode);
      IF (I MOD Modulus97) <> 1 THEN
        IBANError;
    END;

    LOCAL PROCEDURE ConvertIBAN@4(VAR IBANCode@1000 : Code[100]);
    VAR
      I@1002 : Integer;
    BEGIN
      IBANCode := COPYSTR(IBANCode,5) + COPYSTR(IBANCode,1,4);
      I := 0;
      WHILE I < STRLEN(IBANCode) DO BEGIN
        I := I + 1;
        IF ConvertLetter(IBANCode,COPYSTR(IBANCode,I,1),I) THEN
          I := 0;
      END;
    END;

    LOCAL PROCEDURE CalcModulus@3(Number@1000 : Code[10];Modulus97@1001 : Integer) : Code[10];
    VAR
      I@1002 : Integer;
    BEGIN
      EVALUATE(I,Number);
      I := I MOD Modulus97;
      IF I = 0 THEN
        EXIT('');
      EXIT(FORMAT(I));
    END;

    LOCAL PROCEDURE ConvertLetter@5(VAR IBANCode@1000 : Code[100];Letter@1001 : Code[1];LetterPlace@1002 : Integer) : Boolean;
    VAR
      Letter2@1003 : Code[2];
    BEGIN
      IF (Letter >= 'A') AND (Letter <= 'Z') THEN BEGIN
        CASE Letter OF
          'A':
            Letter2 := '10';
          'B':
            Letter2 := '11';
          'C':
            Letter2 := '12';
          'D':
            Letter2 := '13';
          'E':
            Letter2 := '14';
          'F':
            Letter2 := '15';
          'G':
            Letter2 := '16';
          'H':
            Letter2 := '17';
          'I':
            Letter2 := '18';
          'J':
            Letter2 := '19';
          'K':
            Letter2 := '20';
          'L':
            Letter2 := '21';
          'M':
            Letter2 := '22';
          'N':
            Letter2 := '23';
          'O':
            Letter2 := '24';
          'P':
            Letter2 := '25';
          'Q':
            Letter2 := '26';
          'R':
            Letter2 := '27';
          'S':
            Letter2 := '28';
          'T':
            Letter2 := '29';
          'U':
            Letter2 := '30';
          'V':
            Letter2 := '31';
          'W':
            Letter2 := '32';
          'X':
            Letter2 := '33';
          'Y':
            Letter2 := '34';
          'Z':
            Letter2 := '35';
        END;
        IF LetterPlace = 1 THEN
          IBANCode := Letter2 + COPYSTR(IBANCode,2)
        ELSE BEGIN
          IF LetterPlace = STRLEN(IBANCode) THEN
            IBANCode := COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2
          ELSE
            IBANCode :=
              COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2 + COPYSTR(IBANCode,LetterPlace + 1);
        END;
        EXIT(TRUE);
      END;
      IF (Letter >= '0') AND (Letter <= '9') THEN
        EXIT(FALSE);

      IBANError;
    END;

    LOCAL PROCEDURE IBANError@12();
    BEGIN
      IF NOT CONFIRM(Text000) THEN
        ERROR('');
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Company Information",GETPOSITION)
      ELSE
        MESSAGE(Text002);
    END;

    LOCAL PROCEDURE IsPaymentInfoAvailble@10() : Boolean;
    BEGIN
      EXIT(
        (("Giro No." + IBAN + "Bank Name" + "Bank Branch No." + "Bank Account No." + "SWIFT Code") <> '') OR
        "Allow Blank Payment Info.");
    END;

    PROCEDURE GetRegistrationNumber@14() : Text;
    BEGIN
      EXIT("Registration No.");
    END;

    PROCEDURE GetRegistrationNumberLbl@15() : Text;
    BEGIN
      EXIT(FIELDCAPTION("Registration No."));
    END;

    PROCEDURE GetVATRegistrationNumber@13() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    PROCEDURE GetVATRegistrationNumberLbl@11() : Text;
    BEGIN
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    PROCEDURE GetLegalOffice@16() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE GetLegalOfficeLbl@17() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE GetCustomGiro@20() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE GetCustomGiroLbl@19() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE VerifyAndSetPaymentInfo@6();
    VAR
      CompanyInformationPage@1000 : Page 1;
    BEGIN
      GET;
      IF IsPaymentInfoAvailble THEN
        EXIT;
      IF CONFIRM(NoPaymentInfoQst,TRUE,TABLECAPTION) THEN BEGIN
        CompanyInformationPage.SETRECORD(Rec);
        CompanyInformationPage.EDITABLE(TRUE);
        IF CompanyInformationPage.RUNMODAL = ACTION::OK THEN
          CompanyInformationPage.GETRECORD(Rec);
      END;
      IF NOT IsPaymentInfoAvailble THEN
        MESSAGE(NoPaymentInfoMsg,TABLECAPTION);
    END;

    PROCEDURE GetSystemIndicator@8(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    BEGIN
      Style := "System Indicator Style";
      CASE "System Indicator" OF
        "System Indicator"::None:
          Text := '';
        "System Indicator"::"Custom Text":
          Text := "Custom System Indicator Text";
        "System Indicator"::"Company Information":
          Text := Name;
        "System Indicator"::Company:
          Text := COMPANYNAME;
        "System Indicator"::Database:
          Text := GetDatabaseIndicatorText(FALSE);
        "System Indicator"::"Company+Database":
          Text := GetDatabaseIndicatorText(TRUE);
      END
    END;

    LOCAL PROCEDURE GetDatabaseIndicatorText@9(IncludeCompany@1003 : Boolean) : Text[250];
    VAR
      ActiveSession@1000 : Record 2000000110;
      Text@1002 : Text[1024];
    BEGIN
      ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
      ActiveSession.SETRANGE("Session ID",SESSIONID);
      ActiveSession.FINDFIRST;
      Text := ActiveSession."Database Name" + ' - ' + ActiveSession."Server Computer Name";
      IF IncludeCompany THEN
        Text := COMPANYNAME + ' - ' + Text;
      IF STRLEN(Text) > 250 THEN
        EXIT(COPYSTR(Text,1,247) + '...');
      EXIT(Text)
    END;

    PROCEDURE IsNeedToReplaceCurrExchRate@1210000(CurrencyCode@1210000 : Code[10];ExchRateDate@1210001 : Date;CompName@1210002 : Text[30]) : Boolean;
    BEGIN
      CASE "Import Conflict Resolution" OF
        "Import Conflict Resolution"::Skip:
          EXIT(FALSE);

        "Import Conflict Resolution"::Replace:
          EXIT(TRUE);

        "Import Conflict Resolution"::Prompt:
          EXIT(CONFIRM(Text14900,TRUE,CurrencyCode,CompName,ExchRateDate));
      END;
    END;

    PROCEDURE GetCountryRegionCode@2(CountryRegionCode@1000 : Code[10]) : Code[10];
    BEGIN
      CASE CountryRegionCode OF
        '',"Country/Region Code":
          EXIT("Country/Region Code");
        ELSE
          EXIT(CountryRegionCode);
      END;
    END;

    PROCEDURE GetDevBetaModeTxt@18() : Text[250];
    BEGIN
      EXIT(DevBetaModeTxt);
    END;

    BEGIN
    END.
  }
}

