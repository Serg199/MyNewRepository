OBJECT Codeunit 50072 Trans. One Event Upload
{
  OBJECT-PROPERTIES
  {
    Date=17.01.17;
    Time=14:45:38;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=50063;
    OnRun=VAR
            Buffer3@1101495001 : Record 50168;
            Buffer2@1101495002 : Record 50168;
            Buffer@1101495003 : Record 50168;
            EntryType@1101495000 : 'Remove,Repost';
            Buffer4@1101495005 : Record 50168;
            Buffer5@1101495004 : Record 50168;
          BEGIN
            RecID := "Record ID";
            IF RecID.TABLENO = 0 THEN
              ERROR(Text001);

            RecRef.OPEN(RecID.TABLENO,FALSE,"Company No.");
            RecRef.GET("Record ID");
            RecRef.SETTABLE(Buffer2);

            Buffer.GET(Buffer2."Entry No.");

            //проверка на новые версии документа
            Buffer3.RESET;
            Buffer3.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
            Buffer3.SETRANGE("Id External System",Buffer."Id External System");
            Buffer3.SETRANGE(Status,Buffer3.Status::New);
            Buffer3.SETRANGE("Not Translate",FALSE);
            Buffer3.SETRANGE("Document ID",Buffer."Document ID");
            Buffer3.SETFILTER("Entry No.",'>%1',Buffer."Entry No.");
            IF NOT Buffer3.ISEMPTY THEN BEGIN
              Buffer.Status := Buffer.Status::"Canceled Automatic";
              Buffer."Export Cons. Source Code" := Processor;
              Buffer."Export Consolidation Register" := "Cons. Register";
              Buffer."Time Complete" := CURRENTDATETIME;
              Buffer.MODIFY;
              EXIT;
            END;

            //NC NCS-2172 > DP
            IsFutureReverse :=FALSE;
            IF (DealEventCode2.GET(Buffer."Event Code") AND DealEventCode2."Cancel Future Events") THEN BEGIN
              IsFutureReverse := TRUE;
              //проверка на новые версии документа
              Buffer3.RESET;
              Buffer3.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
              Buffer3.SETRANGE("Id External System",Buffer."Id External System");
              Buffer3.SETRANGE(Status,Buffer3.Status::New);
              Buffer3.SETRANGE("Not Translate",FALSE);
              Buffer3.SETRANGE("Deal ID",Buffer."Deal ID");
              Buffer3.SETRANGE("Event Code",Buffer."Event Code");
            //op2172.3 >  Buffer3.SETRANGE("Trade Date",Buffer."Trade Date");

              //NC NCS-2172.2 > DP
              Buffer3.SETRANGE("Execution Type",Buffer."Execution Type");
              Buffer3.SETFILTER("ID Message",'<>%1',Buffer."ID Message");
              //NC NCS-2172.2 < DP

              Buffer3.SETFILTER("Entry No.",'>%1',Buffer."Entry No.");
              IF NOT Buffer3.ISEMPTY THEN BEGIN

                //NC NCS-2172.2 > DP
                Buffer4.RESET;
                Buffer4.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
                Buffer4.SETRANGE("Id External System",Buffer."Id External System");
                Buffer4.SETRANGE("External Deal Type",Buffer."External Deal Type");
                Buffer4.SETRANGE("Event Code",Buffer."Event Code");
                Buffer4.SETRANGE("Execution Type",Buffer."Execution Type");
                Buffer4.SETRANGE("Deal between Book",Buffer."Deal between Book");
                Buffer4.SETRANGE("Deal ID",Buffer."Deal ID");
                Buffer4.SETRANGE("ID Message",Buffer."ID Message");
                Buffer4.SETRANGE(Status,Buffer4.Status::New);
                IF Buffer4.FIND('-') THEN REPEAT
                    Buffer5.GET(Buffer4."Entry No.");
                    Buffer5.Status := Buffer5.Status::"Canceled Automatic";
                    Buffer5."Export Cons. Source Code" := Processor;
                    Buffer5."Export Consolidation Register" := "Cons. Register";
                    Buffer5."Time Complete" := CURRENTDATETIME;
                    Buffer5.MODIFY;
                UNTIL Buffer4.NEXT = 0;
                {
                Buffer.Status := Buffer.Status::"Canceled Automatic";
                Buffer."Export Cons. Source Code" := Processor;
                Buffer."Export Consolidation Register" := "Cons. Register";
                Buffer."Time Complete" := CURRENTDATETIME;
                Buffer.MODIFY;
                }
                //op2172.3 >
                Buffer4.RESET;
                Buffer4.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
                Buffer4.SETRANGE("Id External System",Buffer."Id External System");
                Buffer4.SETRANGE("External Deal Type",Buffer."External Deal Type");
                Buffer4.SETRANGE("Event Code",Buffer."Event Code");
                Buffer4.SETRANGE("Execution Type",Buffer."Execution Type");
                Buffer4.SETRANGE("Deal between Book",Buffer."Deal between Book");
                Buffer4.SETRANGE("Deal ID",Buffer."Deal ID");
                Buffer4.SETFILTER("Entry No.",'<%1',Buffer."Entry No.");
                Buffer4.SETRANGE(Status,Buffer4.Status::New);
                IF Buffer4.FIND('-') THEN REPEAT
                    Buffer5.GET(Buffer4."Entry No.");
                    Buffer5.Status := Buffer5.Status::"Canceled Automatic";
                    Buffer5."Export Cons. Source Code" := Processor;
                    Buffer5."Export Consolidation Register" := "Cons. Register";
                    Buffer5."Time Complete" := CURRENTDATETIME;
                    Buffer5.MODIFY;
                UNTIL Buffer4.NEXT = 0;
                //op2172.3 <
                //NC NCS-2172.2 < DP

                EXIT;
              END;
            END;
            //NC NCS-2172 < DP

            GLSetup.GET;
            //GLSetup.TESTFIELD("Additional Reporting Currency");
            GLSetup.TESTFIELD("Allow Posting From");
            GLSetup.TESTFIELD("Allow Posting To");
            ConsolidationSetup.GET;
            ConsolidationSetup.TESTFIELD("Remote Consolidation Source",FALSE);
            ConsolidationSetup.TESTFIELD("Gen. Jnl. Template");
            ConsolidationSetup.TESTFIELD("Counterparty Dim Code");
            ConsolidationSetup.TESTFIELD("IC Dimension Code");
            ConsolidationSource.GET(Processor);
            ConsolidationSource.TESTFIELD("Gen. Journal Batch");
            ConsolidationSource.TESTFIELD("Removed Journal Batch");
            ConsolidationSource.TESTFIELD("Reposted Journal Batch"); //NC S1967 PCH
            ConsolidationSetup.TESTFIELD("Exception G/L Account No.");
            ConsolidationSetup.TESTFIELD("Fin. Instrument Dimension Code");
            ConsolidationSetup.TESTFIELD("Exception Batch Name");

            //NC NCS-1373.2 > DP
            MovingDataSetup.GET;
            ConsolidationSetup.TESTFIELD("BOOK Mapping Code");
            //NC NCS-1373.2 < DP

            SourceCodeSetup.GET;
            SourceCodeSetup.TESTFIELD("Accounting Engine");

            //NC Серии номеров для фин. журналов
            ConsolidationSource.TESTFIELD("Source  No. Series");
            IF NoSeriesRec.GET(ConsolidationSource."Source  No. Series") THEN BEGIN
              NoSerManag.SetNoSeriesLineFilter(NoSeriesLine1,ConsolidationSource."Source  No. Series",0D);
              CLEAR(NoSeriesLine1);
              CLEAR(NoSerManag);
            END;

            //NC S1498 > PCH
            Log.StartCounter(-8);
            //NC S1498 < PCH
            ConsolidationMgt.SetGlobal;

            IF NOT Buffer."Not Translate" THEN BEGIN
                IF Buffer.Type = Buffer.Type::New THEN BEGIN  // новый

                  IsError := NewOperation(Buffer,Rec);

                END ELSE IF Buffer.Type = Buffer.Type::Delete THEN BEGIN  // Удаление

                 IsError := DeleteOperation(EntryType::Remove,Buffer,Rec);

                END ELSE IF Buffer.Type = Buffer.Type::Modify THEN BEGIN  // изменение

                 IsError := NewOperation(Buffer,Rec);

                 IF NOT IsError THEN
                   IsError := DeleteOperation(EntryType::Repost,Buffer,Rec);

                END;
            END ELSE BEGIN
              IsError := FALSE;
            END;


            IF IsError THEN BEGIN
              Buffer2.GET(Buffer."Entry No.");
              Buffer2."Error in Import" := TRUE;
              Buffer2.MODIFY;
            END ELSE BEGIN
              Buffer2.GET(Buffer."Entry No.");
              Buffer2.Status := Buffer2.Status::"Processing Complete";
              Buffer2."Export Cons. Source Code" := Processor;
              Buffer2."Export Consolidation Register" := "Cons. Register";
              Buffer2."Time Complete" := CURRENTDATETIME;
              Buffer2.MODIFY;
            END;

            ConsolidationSource."Last Consolidation Date" := TODAY;
            ConsolidationSource."Last Consolidation Time" := TIME;
            ConsolidationSource.MODIFY;

            //NC S1498 > PCH
            Log.StartCounter(8);
            //NC S1498 < PCH
          END;

  }
  CODE
  {
    VAR
      GLSetup@1101495000 : Record 98;
      ConsolidationSetup@1101495001 : Record 50000;
      ConsolidationSource@1101495002 : Record 50001;
      SourceCodeSetup@1101495003 : Record 242;
      NoSeriesRec@1101495004 : Record 308;
      NoSerManag@1101495005 : Codeunit 396;
      NoSeriesLine1@1101495006 : Record 309;
      ConsolidationMgt@1101495009 : Codeunit 50000;
      RecID@1101495010 : RecordID;
      RecRef@1101495011 : RecordRef;
      Text001@1101495012 : TextConst 'ENU=Wrong identifier to record;RUS=Неправильный идентификатор записи';
      Text010@1101495017 : TextConst 'ENU="There is no mapping for G/L Account ";RUS="Для счета "';
      Text011@1101495016 : TextConst 'ENU=.;RUS=" не задан соответствующий счет в МСФО"';
      Text012@1101495043 : TextConst 'ENU="There is no mapping for value ";RUS="Для значения "';
      Text013@1101495042 : TextConst 'ENU=" of Dimension ";RUS=" измерения "';
      Text014@1101495041 : TextConst 'ENU=.;RUS=" не задано преобразование."';
      Text004@1101495060 : TextConst 'ENU=Operation is not poised on %1;RUS=Операция не балансирует на %1';
      Text016@1101495022 : TextConst 'ENU="G/L Account ";RUS="Счет "';
      Text017@1101495021 : TextConst 'ENU=" does not exist in the chart of accounts.";RUS=" отсутствует в плане счетов МСФО."';
      Text019@1101495044 : TextConst 'ENU=" there is no required dimension ";RUS=" нет обязательного измерения "';
      Text020@1101495037 : TextConst 'ENU="For Entry on G/L Account ";RUS="На операции по счету "';
      IsGlobalError@1101495018 : Boolean;
      IsError@1101495032 : Boolean;
      ErrMessage@1101495019 : Text[250];
      ErrorJournal@1101495020 : Record 50023;
      Text021@1101495045 : TextConst 'ENU=" with value ";RUS=" со значением "';
      Text022@1101495029 : TextConst 'ENU="Dimension ";RUS="Для измерения "';
      Text023@1101495030 : TextConst 'ENU=" value ";RUS=" нет значения "';
      Text024@1101495031 : TextConst 'ENU=" does no exist in NAV.";RUS=" в справочнике NAV."';
      Text025@1101495028 : TextConst 'ENU="Dimension ";RUS="Измерение "';
      Text026@1101495034 : TextConst 'RUS=" значение "';
      Text027@1101495035 : TextConst 'ENU=" is blocked in NAV.";RUS=" блокировано в справочнике NAV."';
      Text028@1101495048 : TextConst 'ENU=" Dimension ";RUS=" Измерение "';
      Text029@1101495047 : TextConst 'ENU=" is not allowed for posting.";RUS=" не разрешено для учета."';
      Text030@1101495015 : TextConst 'ENU=" in correspondence with account ";RUS=" в корреспонденции со счетом "';
      Text032@1101495033 : TextConst 'ENU=" Value Type must be Standart.";RUS=" Тип Значения должен быть Стандартный."';
      Text033@1101495046 : TextConst 'ENU="For G/L Account ";RUS="Для счета "';
      Text034@1101495027 : TextConst 'ENU="For value ";RUS="Для значения "';
      Text035@1101495023 : TextConst 'ENU=Account Type for G/L Account %1 must be Posting.;RUS=Тип Счета %1 должен быть Учетный.';
      Text041@1101495024 : TextConst 'ENU=G/L Account %1 is blocked in NAV.;RUS=Фин. Счет %1 блокирован в NAV.';
      Text042@1101495026 : TextConst 'ENU=Dimension %1 is blocked in NAV.;RUS=Измерение %1 блокировано в NAV.';
      Text043@1101495025 : TextConst 'ENU=Dimension %1 does not exist in NAV.;RUS=Измерение %1 не существует в NAV.';
      ConsType@1101495039 : 'Buffer,Navision';
      OperType@1101495038 : 'Normal,Repost';
      CloseOperation@1101495040 : Boolean;
      CurrExchRate@1101495036 : Record 330;
      Text044@1101495049 : TextConst 'ENU=On the operation did not state the Amount or Quantity.;RUS=По операции не указана Сумма или Количество.';
      CountDim@1101495050 : Integer;
      Text045@1101495054 : TextConst 'RUS=Документ %1 не балансирует на %2';
      GLEntry@1101495053 : Record 17;
      ChangeLogMgt@1101495052 : Codeunit 423;
      CountGL@1101495051 : Integer;
      TextEDTC02@1101495055 : TextConst 'ENU=In the Buffer NAV submitted incomplete data. Please enter %1. Record not processed.;RUS=В Буфере NAV переданы не полные данные. Не заполнено поле %1. Запись не обработана.';
      GV@1101495013 : Codeunit 50033;
      TextEDTC02_@1101495014 : TextConst 'ENU=For %1 %2, %3 %4, %5 %6, %7 %8 not defined template entries.;RUS=Для %1 %2, %3 %4, %5 %6, %7 %8 не задан шаблон проводок.';
      TextEDTC18@1101495056 : TextConst 'ENU=For %1 %2 and %3 %4 previous event is not permitted %5 %6.;RUS=Для %1 %2 и %3 %4 не разрешено предыдущее событие %5 %6.';
      TextEDTC19@1101495057 : TextConst 'ENU=Line %1 Goto statement does not exist.;RUS=Строка %1 инструкции Goto не существует.';
      DimensionMgt@1101495058 : Codeunit 408;
      TextEDTC20@1101495059 : TextConst 'ENU=When processing operation is a conflict of dimensions. %1;RUS=При обработке операции есть конфликт измерений. %1';
      TextEDTC21@1101495061 : TextConst 'ENU=For the removal/change %1 not found the original operation.;RUS=Для операции удаления/изменения %1 не найдена исходная операция.';
      MovingDataSetup@1101495062 : Record 50064;
      Log@1101495063 : Codeunit 50014;
      DealEvent2@1101495007 : Record 50169;
      IsFutureReverse@1101495064 : Boolean;
      DealEventCode2@1101495008 : Record 50139;

    PROCEDURE NewOperation@1101495014(VAR Buffer@1101495000 : TEMPORARY Record 50168;VAR JobProcStatus@1101495001 : TEMPORARY Record 50063) isErr : Boolean;
    VAR
      TMPDimCheck@1101495003 : TEMPORARY Record 348;
      TMPDimCheckNeedMapp@1101495002 : TEMPORARY Record 348;
      TempMapping@1101495005 : TEMPORARY Record 50022;
      OneMapping@1101495004 : Boolean;
      GLEntryTemp@1101495006 : TEMPORARY Record 17;
      LEDimTemp@1101495008 : TEMPORARY Record 355;
      GenJournalBatchTemp@1101495022 : TEMPORARY Record 81;
      JournalBatch@1101495021 : Code[20];
      DimValue@1101495020 : Record 349;
      DimMappingSel@1101495019 : Record 50031;
      EventTemplate@1101495018 : Record 50170;
      AllowedPrevEvents@1101495017 : Record 50150;
      isExit@1101495016 : Boolean;
      retTempl@1101495015 : Integer;
      GenJnlLineTemp@1101495014 : TEMPORARY Record 81;
      DimGenJnlLineTemp@1101495013 : TEMPORARY Record 356;
      JournalTemplateName@1101495012 : Code[20];
      JournalBatchName@1101495011 : Code[20];
      LineNo@1101495010 : Integer;
      CurrentBalance@1101495009 : Decimal;
      Buffer2@1101495023 : Record 50168;
      GenJournalLine@1101495026 : Record 81;
      JournalLineDimension@1101495025 : Record 356;
      DocumentNo@1101495027 : Code[20];
      VendorAgr@1101495028 : Record 14901;
      CustomerAgr@1101495029 : Record 14902;
      Deal@1101495030 : Record 50037;
      TempMapping2@1101495031 : TEMPORARY Record 50022;
      DimMappingSel2@1101495032 : Record 50031;
      JournalLineDimension2@1101495034 : Record 356;
      GLAcc@1101495035 : Record 15;
      Cust@1101495036 : Record 18;
      Vend@1101495037 : Record 23;
      BankAcc@1101495038 : Record 270;
      Buffer3@1101495007 : Record 50168;
      Buffer4@1101495042 : Record 50168;
      LEDimTemp3@1101495024 : TEMPORARY Record 355;
      TempMapping3@1101495039 : TEMPORARY Record 50022;
      TempMapping4@1101495033 : TEMPORARY Record 50022;
      ConditionsBufferTemp@1000000000 : TEMPORARY Record 382;
      EUFunctionsTemp@1101495040 : TEMPORARY Record 50200;
      SourceDate@1101495041 : Date;
    BEGIN
      //NC S1498 > PCH
      Log.StartCounter(-9);
      Log.StartCounter(-11);
      //NC S1498 < PCH

      GV.GetMapping(TempMapping,ConsolidationSource."Mapping Code",0,OneMapping);

      //ConsolidationMgt.CreateConsDimList(TMPDimCheck,ConsolidationSource,FALSE);  // измерения с источника

      //ConsolidationMgt.CreateConsDimList(TMPDimCheckNeedMapp,ConsolidationSource,TRUE); // измерения подлежащие мэппингу !!! НЕ НУЖНО

      IF NOT OneMapping THEN
        ConsolidationMgt.GetMapping(Buffer."Original Trade Date",TempMapping);

      GLEntryTemp.DELETEALL;
      LEDimTemp.DELETEALL;

      isErr := isErr OR CreateDimBuffer(Buffer,LEDimTemp,JobProcStatus);
      //NC S1498 > PCH
      Log.StartCounter(11);
      Log.StartCounter(-12);
      //NC S1498 < PCH

      //NC NCS-1373.2 > DP
      // мэппинг измерений BOOK
      GV.GetMapping2(TempMapping2,ConsolidationSetup."BOOK Mapping Code",0,OneMapping);
      IF NOT OneMapping THEN
        ConsolidationMgt.GetMapping(Buffer."Original Trade Date",TempMapping2);
      IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
        DimMappingSel2.SETRANGE("Mapping Code",TempMapping2.Code);
        IF GV.FIND_DimMappingSelection(DimMappingSel2) THEN REPEAT
          IF LEDimTemp.GET(17,Buffer."Entry No.",DimMappingSel2."Dimension Code") AND
             (LEDimTemp."Dim in Source" = '')
          THEN
            isErr := isErr OR CheckDimMapp(Buffer,LEDimTemp,ConsolidationSource,JobProcStatus."Cons. Register",
                                           DimMappingSel2."Save when Mapping",TempMapping2.Code,JobProcStatus."Line No.",TRUE);

        UNTIL GV.NEXT_DimMappingSelection(DimMappingSel2) = 0;
      END;
      //NC NCS-1373.2 < DP


      // проверка и мэппинг измерений
      IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
        DimMappingSel.SETRANGE("Mapping Code",TempMapping.Code);
        IF GV.FIND_DimMappingSelection(DimMappingSel) THEN REPEAT
          IF LEDimTemp.GET(17,Buffer."Entry No.",DimMappingSel."Dimension Code") AND
             ((LEDimTemp."Dim in Source" = '') OR
              (LEDimTemp."Dim in Source" = MovingDataSetup."BOOK Dimension Code"))
          THEN
            isErr := isErr OR CheckDimMapp(Buffer,LEDimTemp,ConsolidationSource,JobProcStatus."Cons. Register",
                                           DimMappingSel."Save when Mapping",TempMapping.Code,JobProcStatus."Line No.",FALSE);

        UNTIL GV.NEXT_DimMappingSelection(DimMappingSel) = 0;

      END;
      LEDimTemp.RESET;
      //NC S1498 > PCH
      Log.StartCounter(12);
      Log.StartCounter(-13);
      //NC S1498 < PCH

      // поиск схемы трансформации
      EventTemplate.RESET;
      EventTemplate.SETRANGE("Mapping Code",TempMapping.Code);
      EventTemplate.SETRANGE("Event Code",Buffer."Event Code");
      EventTemplate.SETRANGE("Deal Type",Buffer."External Deal Type");
      EventTemplate.SETRANGE("Settlement Type",Buffer."Settlement Type");
      EventTemplate.SETRANGE("Deal Between Books",Buffer."Deal between Book");

      //NCS2019 > AAP
      EventTemplate.SETRANGE("Company Name",COMPANYNAME);

      IF NOT GV.FIND_EventTempl2(EventTemplate) OR
         NOT DealEvent2.GET(Buffer."Event Code",Buffer."External Deal Type",Buffer."Settlement Type",Buffer."Deal between Book"
                             ,TempMapping.Code,COMPANYNAME)
      THEN BEGIN

        EventTemplate.SETRANGE("Company Name",'');

      //NCS2019 < AAP

        IF NOT GV.FIND_EventTempl2(EventTemplate) OR
           NOT DealEvent2.GET(Buffer."Event Code",Buffer."External Deal Type",
                              Buffer."Settlement Type",Buffer."Deal between Book"
        //NCS2019>>
                             ,TempMapping.Code,'')
        //NCS2019<<
        THEN BEGIN
          isErr := TRUE;
          IsGlobalError := TRUE;
          ErrorJournal.AddErrorBuferDealXML(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsolidationSource.Code,JobProcStatus."Cons. Register",'EDTC02',
                                     STRSUBSTNO(TextEDTC02_,Buffer.FIELDCAPTION("Event Code"),Buffer."Event Code",
                                                            Buffer.FIELDCAPTION("External Deal Type"),Buffer."External Deal Type",
                                                            Buffer.FIELDCAPTION("Settlement Type"),Buffer."Settlement Type",
                                                            Buffer.FIELDCAPTION("Deal between Book"),Buffer."Deal between Book"),
                                     COMPANYNAME,Buffer,JobProcStatus."Line No.");
        END;


      //NCS2019 > AAP
      END;
      //NCS2019 < AAP

      //проверка предыдущего события
      {
      AllowedPrevEvents.RESET;
      AllowedPrevEvents.SETRANGE("Deal Type",Buffer."Deal Type");
      AllowedPrevEvents.SETRANGE("Event Code",Buffer."Event Code");
      IF GV.FIND_AllowedPrevEvents(AllowedPrevEvents) THEN BEGIN
        Buffer2.RESET;
        Buffer2.SETRANGE("Export Cons. Source Code",Buffer."Export Cons. Source Code");
        Buffer2.SETRANGE("Deal Type",Buffer."Deal Type");
        Buffer2.SETRANGE("Deal No.",Buffer."Deal No.");
        Buffer2.SETRANGE(Removed, FALSE);
        Buffer2.SETRANGE("Remove Oper. No", 0);
        Buffer2.SETRANGE(Reposted, FALSE);
        Buffer2 := Buffer;
        IF Buffer2.NEXT(-1) <> 0 THEN
          IF NOT GV.GET_AllowedPrevEvents(AllowedPrevEvents,Buffer."Deal Type",Buffer."Event Code",Buffer2."Event Code") THEN BEGIN
            isErr := TRUE;
            IsGlobalError := TRUE;
            ErrorJournal.AddErrorBuferDealEntry(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,JobProcStatus."Cons. Register",'EDTC18',
                                       STRSUBSTNO(TextEDTC18,Buffer.FIELDCAPTION("Deal Type"),Buffer."Deal Type",
                                                             Buffer.FIELDCAPTION("Event Code"),Buffer."Event Code",
                                                             Buffer2."Deal Type",Buffer2."Event Code"),
                                       COMPANYNAME,Buffer,JobProcStatus."Line No.");
          END;
      END;
      }

      //NC S1498 > PCH
      Log.StartCounter(13);
      Log.StartCounter(-14);
      //NC S1498 < PCH
      //выполнение инструкций
      ConditionsBufferTemp.RESET;
      ConditionsBufferTemp.DELETEALL;
      //NC S1914 > PCH
      EUFunctionsTemp.RESET;
      EUFunctionsTemp.DELETEALL;
      //NC S1914 < PCH
      IF NOT isErr THEN BEGIN
        isExit := FALSE;
        REPEAT
          //NC S1914 > PCH
          //retTempl := EventTemplate.Run(0,0D,Buffer,LEDimTemp,GenJnlLineTemp,DimGenJnlLineTemp,ConditionsBufferTemp);
          //2208>
          EventTemplate.fn_TempEUFunc;
          //2208<
          retTempl := EventTemplate.Run(0,0D,Buffer,LEDimTemp,GenJnlLineTemp,DimGenJnlLineTemp,ConditionsBufferTemp,EUFunctionsTemp);
          //NC S1914 < PCH

          IF retTempl < 0 THEN
            isExit := TRUE
          ELSE IF retTempl = 0 THEN
            isExit := GV.NEXT_EventTempl2(EventTemplate) = 0;

        UNTIL isExit;
      END;

      //NC S1967 > PCH
      //IF DealEvent2."Reverse Previous Events" THEN BEGIN
      IF DealEvent2."Reverse Previous Events" = DealEvent2."Reverse Previous Events"::"Event" THEN BEGIN
      //NC S1967 < PCH
        Buffer3.RESET;
        Buffer3.SETCURRENTKEY("Id Legal Entity","Id External System",
                              "Event Code","External Deal Type","Deal between Book",
                              "Deal ID","Currency Code","Not Translate",
                              "Trade Date");
        Buffer3.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
        Buffer3.SETRANGE("Id External System",Buffer."Id External System");
        //NC S1967 > PCH
        IF DealEvent2."Reverse Event Code" <> '' THEN
          Buffer3.SETRANGE("Event Code",DealEvent2."Reverse Event Code")
        ELSE
        //NC S1967 < PCH
          Buffer3.SETRANGE("Event Code",Buffer."Event Code");
        Buffer3.SETRANGE("External Deal Type",Buffer."External Deal Type");
        Buffer3.SETRANGE("Deal between Book",Buffer."Deal between Book");
        Buffer3.SETRANGE("Deal ID",Buffer."Deal ID");
        Buffer3.SETRANGE("Payment Type",Buffer."Payment Type");
        Buffer3.SETRANGE("Payment SubType",Buffer."Payment SubType");
        //NC S1909 > PCH
        //Buffer3.SETRANGE("Trade Direction",Buffer."Trade Direction");
        //NC S1909 < PCH
        Buffer3.SETRANGE("Currency Code",Buffer."Currency Code");
        Buffer3.SETRANGE("Not Translate",FALSE);
        //NC S1914 > PCH
        IF Buffer."Deal between Book" THEN
          Buffer3.SETRANGE("Book left FO",Buffer."Book left FO");
        //NC S1914 < PCH

        //NC NCS-1939 > DP
        Buffer3.SETRANGE("Payment Due Date",Buffer."Payment Due Date");
        //NC NCS-1939 < DP

        Buffer3.SETFILTER("Trade Date",'<%1',Buffer."Trade Date");
        //NC S1967 > PCH
        Buffer3.SETFILTER(Status,'<>%1&<>%2',Buffer3.Status::"Canceled Manualy",Buffer3.Status::"Canceled Automatic");
        //NC S1967 < PCH
        IF Buffer3.FINDLAST THEN
        //NC S1967 > PCH
        IF Buffer3."Reversed Entry No." = 0 THEN BEGIN
        //NC S1967 < PCH

          //NC NCS-2358 > DP
          IF DealEvent2."Reverse Event Code" <> '' THEN BEGIN
            // поиск схемы трансформации
            EventTemplate.RESET;
            EventTemplate.SETRANGE("Mapping Code",TempMapping.Code);
            EventTemplate.SETRANGE("Event Code",Buffer3."Event Code");
            EventTemplate.SETRANGE("Deal Type",Buffer3."External Deal Type");
            EventTemplate.SETRANGE("Settlement Type",Buffer3."Settlement Type");
            EventTemplate.SETRANGE("Deal Between Books",Buffer3."Deal between Book");
            EventTemplate.SETRANGE("Company Name",COMPANYNAME);
            IF NOT GV.FIND_EventTempl2(EventTemplate) OR
              NOT DealEvent2.GET(Buffer3."Event Code",Buffer3."External Deal Type",Buffer3."Settlement Type",Buffer3."Deal between Book"
                                  ,TempMapping.Code,COMPANYNAME)
            THEN BEGIN
              EventTemplate.SETRANGE("Company Name",'');
              IF NOT GV.FIND_EventTempl2(EventTemplate) OR
                 NOT DealEvent2.GET(Buffer3."Event Code",Buffer3."External Deal Type",
                              Buffer3."Settlement Type",Buffer3."Deal between Book"
                                    ,TempMapping.Code,'')
              THEN BEGIN
                isErr := TRUE;
                IsGlobalError := TRUE;
                ErrorJournal.AddErrorBuferDealXML(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsolidationSource.Code,JobProcStatus."Cons. Register",'EDTC02',
                                     STRSUBSTNO(TextEDTC02_,Buffer3.FIELDCAPTION("Event Code"),Buffer3."Event Code",
                                                            Buffer3.FIELDCAPTION("External Deal Type"),Buffer3."External Deal Type",
                                                            Buffer3.FIELDCAPTION("Settlement Type"),Buffer3."Settlement Type",
                                                            Buffer3.FIELDCAPTION("Deal between Book"),Buffer3."Deal between Book"),
                                     COMPANYNAME,Buffer3,JobProcStatus."Line No.");
              END;
            END;
          END;
          //NC NCS-2358 < DP

          LEDimTemp3.RESET;
          LEDimTemp3.DELETEALL;
          isErr := isErr OR CreateDimBuffer(Buffer3,LEDimTemp3,JobProcStatus);

          // мэппинг измерений BOOK
          GV.GetMapping2(TempMapping4,ConsolidationSetup."BOOK Mapping Code",0,OneMapping);
          IF NOT OneMapping THEN
            ConsolidationMgt.GetMapping(Buffer3."Original Trade Date",TempMapping4);

          IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
            DimMappingSel2.SETRANGE("Mapping Code",TempMapping4.Code);
            IF GV.FIND_DimMappingSelection(DimMappingSel2) THEN REPEAT
              IF LEDimTemp3.GET(17,Buffer3."Entry No.",DimMappingSel2."Dimension Code") AND
                 (LEDimTemp3."Dim in Source" = '')
              THEN
                isErr := isErr OR CheckDimMapp(Buffer3,LEDimTemp3,ConsolidationSource,JobProcStatus."Cons. Register",
                                               DimMappingSel2."Save when Mapping",TempMapping4.Code,JobProcStatus."Line No.",TRUE);

            UNTIL GV.NEXT_DimMappingSelection(DimMappingSel2) = 0;
          END;

          // проверка и мэппинг измерений
          GV.GetMapping(TempMapping3,ConsolidationSource."Mapping Code",0,OneMapping);
          IF NOT OneMapping THEN
            ConsolidationMgt.GetMapping(Buffer3."Original Trade Date",TempMapping3);

          IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
            DimMappingSel.SETRANGE("Mapping Code",TempMapping3.Code);
            IF GV.FIND_DimMappingSelection(DimMappingSel) THEN REPEAT
              IF LEDimTemp3.GET(17,Buffer3."Entry No.",DimMappingSel."Dimension Code") AND
                 ((LEDimTemp3."Dim in Source" = '') OR
                  (LEDimTemp3."Dim in Source" = MovingDataSetup."BOOK Dimension Code"))
              THEN
                isErr := isErr OR CheckDimMapp(Buffer3,LEDimTemp3,ConsolidationSource,JobProcStatus."Cons. Register",
                                               DimMappingSel."Save when Mapping",TempMapping3.Code,JobProcStatus."Line No.",FALSE);

            UNTIL GV.NEXT_DimMappingSelection(DimMappingSel) = 0;

          END;
          LEDimTemp3.RESET;

          GV.FIND_EventTempl2(EventTemplate);
          //выполнение инструкций
          ConditionsBufferTemp.RESET;
          ConditionsBufferTemp.DELETEALL;
          //NC S1914 > PCH
          EUFunctionsTemp.RESET;
          EUFunctionsTemp.DELETEALL;
          //NC S1914 < PCH
          IF NOT isErr THEN BEGIN
            isExit := FALSE;
            REPEAT
              //NC S1914 > PCH
              //retTempl := EventTemplate.Run(1,Buffer."Trade Date",Buffer3,LEDimTemp3,GenJnlLineTemp,DimGenJnlLineTemp,
              //                              ConditionsBufferTemp);
              //2208>
              EventTemplate.fn_TempEUFunc;
              //2208<
              retTempl := EventTemplate.Run(1,Buffer."Trade Date",Buffer3,LEDimTemp3,GenJnlLineTemp,DimGenJnlLineTemp,
                                            ConditionsBufferTemp,EUFunctionsTemp);
              //NC S1914 < PCH
              IF retTempl < 0 THEN
                isExit := TRUE
              ELSE IF retTempl = 0 THEN
                isExit := GV.NEXT_EventTempl2(EventTemplate) = 0;

            UNTIL isExit;
          END;
          //NC S1967 > PCH
          Buffer4.GET(Buffer3."Entry No.");
          Buffer4."Reversed Entry No." := Buffer."Entry No.";
          Buffer4.MODIFY;
          //NC S1967 < PCH
        END;

      //NC S1967 > PCH
      END ELSE IF DealEvent2."Reverse Previous Events" = DealEvent2."Reverse Previous Events"::Message THEN BEGIN

        Buffer3.RESET;

        //NC NCS-2172.2 > DP
        IF NOT IsFutureReverse THEN
        //NC NCS-2172.2 > DP

        Buffer3.SETCURRENTKEY("Id Legal Entity","Id External System",
                              "Event Code","External Deal Type","Deal between Book",
                              "Deal ID","Currency Code","Not Translate",
                              "Trade Date");
        Buffer3.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
        Buffer3.SETRANGE("Id External System",Buffer."Id External System");
        Buffer3.SETRANGE("External Deal Type",Buffer."External Deal Type");
        Buffer3.SETRANGE("Deal between Book",Buffer."Deal between Book");
        //NC S1967 > PCH
        IF DealEvent2."Reverse Event Code" <> '' THEN
          Buffer3.SETRANGE("Event Code",DealEvent2."Reverse Event Code")
        ELSE
        //NC S1967 < PCH
          Buffer3.SETRANGE("Event Code",Buffer."Event Code");
        Buffer3.SETRANGE("Deal ID",Buffer."Deal ID");
        Buffer3.SETRANGE("Not Translate",FALSE);
        IF Buffer."Deal between Book" THEN
          Buffer3.SETRANGE("Book left FO",Buffer."Book left FO");

        //NC NCS-2172 > DP
        IF IsFutureReverse THEN BEGIN
          Buffer3.SETFILTER("ID Message",'<>%1',Buffer."ID Message");
          Buffer3.SETFILTER("Entry No.",'<%1',Buffer."Entry No.");
        END ELSE
        //NC NCS-2172 < DP

        Buffer3.SETFILTER("Trade Date",'<%1',Buffer."Trade Date");
        Buffer3.SETFILTER(Status,'<>%1&<>%2',Buffer3.Status::"Canceled Manualy",Buffer3.Status::"Canceled Automatic");

        IF Buffer3.FINDLAST THEN BEGIN
          Buffer4.RESET;
          Buffer4.SETCURRENTKEY("Id Legal Entity","Id External System",
                                "Event Code","External Deal Type","Deal between Book",
                                "Deal ID","Currency Code","Not Translate",
                                "Trade Date");
          Buffer4.SETRANGE("Id Legal Entity",Buffer3."Id Legal Entity");
          Buffer4.SETRANGE("Id External System",Buffer3."Id External System");
          Buffer4.SETRANGE("External Deal Type",Buffer3."External Deal Type");

          //NC NCS-2172 > DP
          IF IsFutureReverse THEN
            Buffer4.SETRANGE("Event Code",Buffer."Event Code");
          //NC NCS-2172 < DP

          Buffer4.SETRANGE("Deal between Book",Buffer3."Deal between Book");
          Buffer4.SETRANGE("Deal ID",Buffer3."Deal ID");
          Buffer4.SETRANGE("ID Message",Buffer3."ID Message");
          Buffer4.SETRANGE("Not Translate",FALSE);
          IF Buffer3."Deal between Book" THEN
            Buffer4.SETRANGE("Book left FO",Buffer3."Book left FO");
          Buffer4.SETFILTER("Reversed Entry No.",'%1',0);
          Buffer4.SETFILTER(Status,'<>%1&<>%2',Buffer4.Status::"Canceled Manualy",Buffer4.Status::"Canceled Automatic");
          IF Buffer4.FIND('-') THEN REPEAT

            //NC NCS-2172 > DP
            IF IsFutureReverse AND (Buffer4.Status=Buffer4.Status::New) THEN BEGIN
              Buffer4.Status := Buffer4.Status::"Canceled Automatic";
              Buffer4."Export Cons. Source Code" := ConsolidationSource.Code;
              Buffer4."Export Consolidation Register" := JobProcStatus."Cons. Register";
              Buffer4."Time Complete" := CURRENTDATETIME;
              Buffer4.MODIFY;
            END ELSE
            //NC NCS-2172 < DP

            isErr := isErr OR ReverseEvents(Buffer4,Buffer."Trade Date",GenJnlLineTemp,DimGenJnlLineTemp,JobProcStatus,Buffer);

          UNTIL Buffer4.NEXT = 0;

        END;

      //NC S1967 < PCH
      END;

      //NC S1498 > PCH
      Log.StartCounter(14);
      Log.StartCounter(-15);
      //NC S1498 < PCH
      IF GenJnlLineTemp.FINDSET THEN REPEAT
        DimGenJnlLineTemp.RESET;
        DimGenJnlLineTemp.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
        DimGenJnlLineTemp.SETRANGE("Journal Line No.",GenJnlLineTemp."Line No.");

        IF NOT CheckJnlLineDimValuePosting(DimGenJnlLineTemp,GenJnlLineTemp."Account Type",
                                           GenJnlLineTemp."Account No.",
                                           GenJnlLineTemp,Buffer,JobProcStatus) THEN
          isErr := TRUE;
      UNTIL GenJnlLineTemp.NEXT = 0;

      //NC S1498 > PCH
      Log.StartCounter(15);
      Log.StartCounter(-16);
      //NC S1498 < PCH

      IF NOT isErr THEN BEGIN
        GenJournalBatchTemp.DELETEALL;
        CurrentBalance := 0;

        IF GenJnlLineTemp.FINDSET THEN REPEAT
          //NC S1498 > PCH
          Log.StartCounter(-17);
          //NC S1498 < PCH
          DimGenJnlLineTemp.RESET;
          DimGenJnlLineTemp.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
          DimGenJnlLineTemp.SETRANGE("Journal Line No.",GenJnlLineTemp."Line No.");

          JournalTemplateName := ConsolidationSetup."Gen. Jnl. Template";
          JournalBatchName := ConsolidationSource."Gen. Journal Batch";
          // Если проводки красным сторно
          IF GenJnlLineTemp.Correction OR
             (GenJnlLineTemp."Debit Amount" < 0) OR (GenJnlLineTemp."Credit Amount" < 0) THEN
            JournalBatchName := ConsolidationSource."Removed Journal Batch";
          IF DocumentNo = '' THEN
            DocumentNo := NoSerManag.GetNextNo(ConsolidationSource."Source  No. Series",Buffer."Original Trade Date",TRUE);

          // сохранение диапазона добавленных строк журналов
          GenJournalBatchTemp.RESET;
          GenJournalBatchTemp.SETRANGE("Journal Template Name",JournalTemplateName);
          GenJournalBatchTemp.SETRANGE("Journal Batch Name",JournalBatchName);
          IF GenJournalBatchTemp.FINDFIRST THEN BEGIN
            GenJournalBatchTemp."Source Entry No." += 10; // послендняя добавленная строка
            GenJournalBatchTemp.MODIFY;
            LineNo := GenJournalBatchTemp."Source Entry No.";
          END ELSE BEGIN
            GenJournalLine.RESET;
            GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
            GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
            IF GenJournalLine.FINDLAST THEN
              LineNo := GenJournalLine."Line No." + 10
            ELSE
              LineNo := 10;

            GenJournalBatchTemp.INIT;
            GenJournalBatchTemp."Journal Template Name" := JournalTemplateName;
            GenJournalBatchTemp."Journal Batch Name" := JournalBatchName;
            GenJournalBatchTemp."Line No." := LineNo;  // первая добавленная строка
            GenJournalBatchTemp."Source Entry No." := LineNo; // послендняя добавленная строка
            GenJournalBatchTemp."Document No." := GenJnlLineTemp."Document No.";
            GenJournalBatchTemp.INSERT;
          END;



          GenJournalLine.INIT;
          GenJournalLine := GenJnlLineTemp;
          GenJournalLine."Journal Template Name" := JournalTemplateName;
          GenJournalLine."Journal Batch Name" := JournalBatchName;
          GenJournalLine."Line No." := LineNo;

          GenJournalLine."Document No." := DocumentNo;
          IF GenJnlLineTemp."Source Code" <> '' THEN
            GenJournalLine."Source Code" := GenJnlLineTemp."Source Code"
          ELSE
            GenJournalLine."Source Code" := SourceCodeSetup."Accounting Engine";
          IF GenJnlLineTemp."External Document No." <> '' THEN
            GenJournalLine."External Document No." := GenJnlLineTemp."External Document No.";

          //NC NCS-1939 > DP
          SourceDate := GenJournalLine."Posting Date";
          //NC NCS-1939 < DP

          IF GenJournalLine."Posting Date" < GLSetup."Allow Posting From" THEN
          //NC NCS-1939 > DP
          BEGIN
            GenJnlLineTemp."Source Historical Date" := SourceDate;
          //NC NCS-1939 < DP

            GenJournalLine."Posting Date" := GLSetup."Allow Posting From";

          //NC NCS-1939 > DP
          END;
          //NC NCS-1939 < DP

          IF GenJournalLine."Posting Date" < GLSetup."Allow Transformation From" THEN
          //NC NCS-1939 > DP
          BEGIN
            GenJnlLineTemp."Source Historical Date" := SourceDate;
          //NC NCS-1939 < DP

            GenJournalLine."Posting Date" := GLSetup."Allow Transformation From";

          //NC NCS-1939 > DP
          END;
          //NC NCS-1939 < DP


          //NC NCS-622.2 > DP
          GenJournalLine."Currency Code" := ConvertCurrencyCode(GenJnlLineTemp."Currency Code");
          //NC NCS-622.2 < DP

          //NC S1498 > PCH
          //GenJournalLine.VALIDATE("Posting Date");
          GenJournalLine."Document Date" := GenJournalLine."Posting Date";
          //NC S1498 < PCH

          IF GenJnlLineTemp."Document Date" <> 0D THEN
            GenJournalLine."Document Date" := GenJnlLineTemp."Document Date";

          //NC S1498 > PCH
          //GenJournalLine.VALIDATE("Account No.");
          CASE GenJournalLine."Account Type" OF
            GenJournalLine."Account Type"::"G/L Account" :
              BEGIN
                GLAcc.GET(GenJournalLine."Account No.");
                GLAcc.TESTFIELD(Blocked,FALSE);
                GenJournalLine."Gen. Posting Type" := GLAcc."Gen. Posting Type";
                GenJournalLine."Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                GenJournalLine."Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                GenJournalLine."VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                GenJournalLine."VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
              END;
            GenJournalLine."Account Type"::Customer :
              BEGIN
                Cust.GET(GenJournalLine."Account No.");
                Cust.CheckBlockedCustOnJnls(Cust,GenJournalLine."Document Type", FALSE);
                GenJournalLine."Gen. Posting Type" := 0;
                GenJournalLine."Gen. Bus. Posting Group" := '';
                GenJournalLine."Gen. Prod. Posting Group" := '';
                GenJournalLine."VAT Bus. Posting Group" := '';
                GenJournalLine."VAT Prod. Posting Group" := '';
                GenJournalLine."Currency Code" := Cust."Currency Code";
                GenJournalLine."Posting Group" := Cust."Customer Posting Group";
              END;
            GenJournalLine."Account Type"::Vendor :
              BEGIN
                Vend.GET(GenJournalLine."Account No.");
                Vend.CheckBlockedVendOnJnls(Vend,GenJournalLine."Document Type",FALSE);
                GenJournalLine."Gen. Posting Type" := 0;
                GenJournalLine."Gen. Bus. Posting Group" := '';
                GenJournalLine."Gen. Prod. Posting Group" := '';
                GenJournalLine."VAT Bus. Posting Group" := '';
                GenJournalLine."VAT Prod. Posting Group" := '';
                GenJournalLine."Currency Code" := Vend."Currency Code";
                GenJournalLine."Posting Group" := Vend."Vendor Posting Group";
              END;
            GenJournalLine."Account Type"::"Bank Account" :
              BEGIN
                BankAcc.GET(GenJournalLine."Account No.");
                BankAcc.TESTFIELD(Blocked,FALSE);
                GenJournalLine."Gen. Posting Type" := 0;
                GenJournalLine."Gen. Bus. Posting Group" := '';
                GenJournalLine."Gen. Prod. Posting Group" := '';
                GenJournalLine."VAT Bus. Posting Group" := '';
                GenJournalLine."VAT Prod. Posting Group" := '';
                GenJournalLine."Currency Code" := BankAcc."Currency Code";
              END;
          END;
          //NC S1498 < PCH

          GenJournalLine.Description := GenJnlLineTemp.Description;
          GenJournalLine."Description 2" := GenJnlLineTemp."Description 2";

          //NC NSC-622.4 < DP
          //добавление карточки договора Договора


          DimGenJnlLineTemp.SETRANGE("Dimension Code",ConsolidationSetup."Deal Dimension Code");
          IF DimGenJnlLineTemp.FINDFIRST AND (DimGenJnlLineTemp."Dimension Value Code" = GenJournalLine."Agreement No.") THEN

          //NC NCS-622.5 > DP
          GenJournalLine."Currency Code" := ConvertCurrencyCode(GenJnlLineTemp."Currency Code");
          IF GenJnlLineTemp."Posting Group" <> '' THEN
            //NC S1498 > PCH
            //GenJournalLine.VALIDATE("Posting Group",GenJnlLineTemp."Posting Group");
            GenJournalLine."Posting Group" := GenJnlLineTemp."Posting Group";
            //NC S1498 < PCH
          //NC NCS-622.5 < DP


          IF (GenJournalLine."Account No." <> '') AND (GenJournalLine."Agreement No." <> '')


             {
             AND JournalLineDimension.GET(81, GenJournalLine."Journal Template Name",
                                      GenJournalLine."Journal Batch Name",
                                      GenJournalLine."Line No.",
                                      0,
                                      ConsolidationSetup."Deal Dimension Code") AND
             (JournalLineDimension."Dimension Value Code" = GenJournalLine."Agreement No.")
             }


          THEN BEGIN

            //NC NCS-1276 > DP
            MovingDataSetup.GET;
            IF Deal.GET(GenJournalLine."Agreement No.") THEN;
            //NC NCS-1276 < DP

            CASE GenJournalLine."Account Type" OF
              GenJournalLine."Account Type"::Customer :
                IF NOT CustomerAgr.GET(GenJournalLine."Account No.", GenJournalLine."Agreement No.") THEN BEGIN
                  CustomerAgr.INIT;
                  CustomerAgr."Customer No." := GenJournalLine."Account No.";
                  CustomerAgr."No." := DimGenJnlLineTemp."Dimension Value Code";
                  DimGenJnlLineTemp.CALCFIELDS("Dimension Value Name");
                  CustomerAgr."External Agreement No." := DimGenJnlLineTemp."Dimension Value Name";
                  CustomerAgr.Description := DimGenJnlLineTemp."Dimension Value Name";
                  CustomerAgr.Active := TRUE;
                  CustomerAgr."Customer Posting Group" := GenJournalLine."Posting Group";
                  CustomerAgr."Deal No." := DimGenJnlLineTemp."Dimension Value Code";
                  CustomerAgr."Currency Code" := GenJournalLine."Currency Code";
                  CustomerAgr."Agreement Type" := CustomerAgr."Agreement Type"::"1";
                  IF CustomerAgr.INSERT THEN;
                  //NC NCS-622.6 > PCH
                  AddDefDimForAgr(DATABASE::"Customer Agreement",GenJournalLine."Account No.",
                    GenJournalLine."Agreement No.",TempMapping.Code);
                  //NC NCS-622.6 > PCH


                END ELSE BEGIN
                  CustomerAgr.TESTFIELD(Active,TRUE);
                  CustomerAgr.TESTFIELD(Blocked,CustomerAgr.Blocked::" ");
                  //NC S1498 > PCH
                  GenJournalLine."Agreement No." := GenJnlLineTemp."Agreement No.";
                  GenJournalLine."Currency Code" := CustomerAgr."Currency Code";
                  GenJournalLine."Posting Group" := CustomerAgr."Customer Posting Group";
                  //NC S1498 < PCH
                END;
              GenJournalLine."Account Type"::Vendor :
                IF NOT VendorAgr.GET(GenJournalLine."Account No.", GenJournalLine."Agreement No.") THEN BEGIN
                  VendorAgr.INIT;
                  VendorAgr."Vendor No." := GenJournalLine."Account No.";
                  VendorAgr."No." := GenJournalLine."Agreement No.";
                  DimGenJnlLineTemp.CALCFIELDS("Dimension Value Name");
                  VendorAgr."External Agreement No." := DimGenJnlLineTemp."Dimension Value Name";
                  VendorAgr.Description := DimGenJnlLineTemp."Dimension Value Name";
                  VendorAgr.Active := TRUE;
                  VendorAgr."Vendor Posting Group" := GenJournalLine."Posting Group";
                  VendorAgr."Deal No." := DimGenJnlLineTemp."Dimension Value Code";
                  VendorAgr."Currency Code" := GenJournalLine."Currency Code";
                  VendorAgr."Agreement Type" := VendorAgr."Agreement Type"::"1";
                  IF VendorAgr.INSERT THEN;
                  //NC NCS-622.6 > PCH
                  AddDefDimForAgr(DATABASE::"Vendor Agreement", GenJournalLine."Account No.",
                    GenJournalLine."Agreement No.",TempMapping.Code);
                  //NC NCS-622.6 > PCH
                END ELSE BEGIN
                  VendorAgr.TESTFIELD(Active,TRUE);
                  VendorAgr.TESTFIELD(Blocked,VendorAgr.Blocked::" ");
                  //NC S1498 > PCH
                  GenJournalLine."Agreement No." := GenJnlLineTemp."Agreement No.";
                  GenJournalLine."Currency Code" := VendorAgr."Currency Code";
                  GenJournalLine."Posting Group" := VendorAgr."Vendor Posting Group";
                  //NC S1498 < PCH
                END;

            END;
          END;
          DimGenJnlLineTemp.SETRANGE("Dimension Code");
          //NC NSC-622.4 < DP

          //NC S1498 > PCH
          //IF GenJnlLineTemp."Agreement No." <> '' THEN
          //  GenJournalLine.VALIDATE("Agreement No.",GenJnlLineTemp."Agreement No.");
          //NC S1498 < PCH

          IF GenJnlLineTemp."Posting Group" <> '' THEN
          //NC S1498 > PCH
          //  GenJournalLine.VALIDATE("Posting Group",GenJnlLineTemp."Posting Group");
            GenJournalLine."Posting Group" := GenJnlLineTemp."Posting Group";
          //NC S1498 < PCH

          IF GenJnlLineTemp."Gen. Posting Type" <> 0 THEN
            GenJournalLine."Gen. Posting Type" := GenJnlLineTemp."Gen. Posting Type";
          IF GenJnlLineTemp."Gen. Bus. Posting Group" <> '' THEN
            GenJournalLine."Gen. Bus. Posting Group" := GenJnlLineTemp."Gen. Bus. Posting Group";
          IF GenJnlLineTemp."Gen. Prod. Posting Group" <> '' THEN
            GenJournalLine."Gen. Prod. Posting Group" := GenJnlLineTemp."Gen. Prod. Posting Group";
          IF GenJnlLineTemp."VAT Bus. Posting Group" <> '' THEN
            GenJournalLine."VAT Bus. Posting Group" := GenJnlLineTemp."VAT Bus. Posting Group";
          IF GenJnlLineTemp."VAT Prod. Posting Group" <> '' THEN
            GenJournalLine."VAT Prod. Posting Group" := GenJnlLineTemp."VAT Prod. Posting Group";

          //NC NCS-622.5 > DP
          GenJournalLine."Currency Code" := ConvertCurrencyCode(GenJnlLineTemp."Currency Code");
          //NC NCS-622.5 < DP

          //NC NCS-815 > DP
          GenJournalLine."Reversing Entry" := GenJnlLineTemp."Reversing Entry";
          GenJournalLine.VALIDATE("Currency Code");
          {
          GenJournalLine."Reversing Entry" := GenJnlLineTemp."Reversing Entry";
          }
          //NC NCS-815 > DP

          GenJournalLine.Correction := GenJnlLineTemp.Correction;
          IF GenJnlLineTemp.Amount <> 0 THEN
            GenJournalLine.VALIDATE(Amount,GenJnlLineTemp.Amount);

          IF GenJnlLineTemp."Amount (LCY)" <> 0 THEN
            GenJournalLine.VALIDATE("Amount (LCY)",GenJnlLineTemp."Amount (LCY)");

          IF GenJnlLineTemp."VAT Amount" <> 0 THEN
            GenJournalLine."VAT Amount" := GenJnlLineTemp."VAT Amount";

          IF GenJnlLineTemp."Due Date" <> 0D THEN
            GenJournalLine.VALIDATE("Due Date",GenJnlLineTemp."Due Date");

          IF ConsolidationSource."Business Unit Code" <> '' THEN
            GenJournalLine."Business Unit Code" := ConsolidationSource."Business Unit Code";

          IF GenJnlLineTemp."Financial Instrument No." <> '' THEN
            GenJournalLine."Financial Instrument No." := GenJnlLineTemp."Financial Instrument No.";

          GenJournalLine."Additional-Currency Posting" := GenJnlLineTemp."Additional-Currency Posting";

          GenJournalLine."Source Historical Date" := GenJnlLineTemp."Source Historical Date";
          GenJournalLine."Currency Index Entry" := GenJnlLineTemp."Currency Index Entry";
          GenJournalLine."Currency Index" := GenJnlLineTemp."Currency Index";

          GenJournalLine."Export Cons. Source Code" := JobProcStatus.Processor;
          GenJournalLine."Export Register No." := JobProcStatus."Cons. Register";
          GenJournalLine."Buffer Entry No." := Buffer."Entry No.";
          GenJournalLine."Source Entry No." := 0;
          GenJournalLine."External Document ID" := Buffer."Document ID";
          GenJournalLine."External System ID" := Buffer."Id External System";
          //GenJournalLine.Removed := Buffer.Removed;
          //GenJournalLine.Reposted := Buffer.Reposted;
          //GenJournalLine."Cons. Source Code" := Buffer."Cons. Source Code";
          //GenJournalLine."Register No." := Buffer."Consolidation Register";
          GenJournalLine."Transaction Type" := GenJournalLine."Transaction Type"::"1";

          GenJournalLine.INSERT;
          CurrentBalance := CurrentBalance + GenJournalLine."Balance (LCY)";

          //NC S1498 > PCH
          Log.StartCounter(17);
          Log.StartCounter(-18);
          //NC S1498 < PCH
          IF DimGenJnlLineTemp.FINDSET THEN REPEAT

            //NC S1498 > PCH
            {
            IF NOT JournalLineDimension.GET(DATABASE::"Gen. Journal Line",
                                      GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
                                      GenJournalLine."Line No.",0,DimGenJnlLineTemp."Dimension Code") THEN BEGIN
              JournalLineDimension := DimGenJnlLineTemp;
              JournalLineDimension."Journal Template Name"  := GenJournalLine."Journal Template Name";
              JournalLineDimension."Journal Batch Name"  := GenJournalLine."Journal Batch Name";
              JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
              JournalLineDimension.INSERT;

            //NC NCS-1276 > DP
            {
            END ELSE IF JournalLineDimension."Dimension Value Code" = ''
            }
            END ELSE IF (JournalLineDimension."Dimension Value Code" = '')
            OR (Deal."Deal Between Books" AND (DimGenJnlLineTemp."Dimension Code" IN
            [MovingDataSetup."BOOK Dimension Code", MovingDataSetup."PROFIT CENTER Dimension Code"]))
            //NC NCS-1276 < DP

            THEN BEGIN
              JournalLineDimension."Dimension Value Code" := DimGenJnlLineTemp."Dimension Value Code";
              JournalLineDimension.MODIFY;
            END;
            }
            JournalLineDimension := DimGenJnlLineTemp;
            JournalLineDimension."Journal Template Name"  := GenJournalLine."Journal Template Name";
            JournalLineDimension."Journal Batch Name"  := GenJournalLine."Journal Batch Name";
            JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
            JournalLineDimension.INSERT;
            IF (GenJournalLine."Financial Instrument No." = '') AND
               (MovingDataSetup."FI Dimension Code" = JournalLineDimension."Dimension Code") THEN
              GenJournalLine."Financial Instrument No." := JournalLineDimension."Dimension Value Code";
            //NC S1498 < PCH
            IF GLSetup."Global Dimension 1 Code" = JournalLineDimension."Dimension Code" THEN
              GenJournalLine."Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";
            IF GLSetup."Global Dimension 2 Code" = JournalLineDimension."Dimension Code" THEN
              GenJournalLine."Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";
          UNTIL DimGenJnlLineTemp.NEXT = 0;

          GenJournalLine.MODIFY;

          //NC NSC-622.3 > DP
          //добавление карточки договора Договора
          {
          IF (GenJournalLine."Account No." <> '') AND (GenJournalLine."Agreement No." <> '') AND
             JournalLineDimension.GET(81, GenJournalLine."Journal Template Name",
                                      GenJournalLine."Journal Batch Name",
                                      GenJournalLine."Line No.",
                                      0,
                                      ConsolidationSetup."Deal Dimension Code") AND
             (JournalLineDimension."Dimension Value Code" = GenJournalLine."Agreement No.") THEN BEGIN
            CASE GenJournalLine."Account Type" OF
              GenJournalLine."Account Type"::Customer :
                IF NOT CustomerAgr.GET(GenJournalLine."Account No.", GenJournalLine."Agreement No.") THEN BEGIN
                  CustomerAgr.INIT;
                  CustomerAgr."Customer No." := GenJournalLine."Account No.";
                  CustomerAgr."No." := JournalLineDimension."Dimension Value Code";
                  JournalLineDimension.CALCFIELDS("Dimension Value Name");
                  CustomerAgr."External Agreement No." := JournalLineDimension."Dimension Value Name";
                  CustomerAgr.Description := JournalLineDimension."Dimension Value Name";
                  CustomerAgr.Active := TRUE;
                  CustomerAgr."Customer Posting Group" := GenJournalLine."Posting Group";
                  CustomerAgr."Deal No." := JournalLineDimension."Dimension Value Code";
                  CustomerAgr."Currency Code" := GenJournalLine."Currency Code";
                  CustomerAgr."Agreement Type" := CustomerAgr."Agreement Type"::Trade;
                  IF CustomerAgr.INSERT THEN;
                END ELSE BEGIN
                  CustomerAgr.TESTFIELD(Active,TRUE);
                  CustomerAgr.TESTFIELD(Blocked,CustomerAgr.Blocked::" ");
                END;
              GenJournalLine."Account Type"::Vendor :
                IF NOT VendorAgr.GET(GenJournalLine."Account No.", GenJournalLine."Agreement No.") THEN BEGIN
                  VendorAgr.INIT;
                  VendorAgr."Vendor No." := GenJournalLine."Account No.";
                  VendorAgr."No." := GenJournalLine."Agreement No.";
                  JournalLineDimension.CALCFIELDS("Dimension Value Name");
                  VendorAgr."External Agreement No." := JournalLineDimension."Dimension Value Name";
                  VendorAgr.Description := JournalLineDimension."Dimension Value Name";
                  VendorAgr.Active := TRUE;
                  VendorAgr."Vendor Posting Group" := GenJournalLine."Posting Group";
                  VendorAgr."Deal No." := JournalLineDimension."Dimension Value Code";
                  VendorAgr."Currency Code" := GenJournalLine."Currency Code";
                  VendorAgr."Agreement Type" := VendorAgr."Agreement Type"::Trade;
                  IF VendorAgr.INSERT THEN;
                END ELSE BEGIN
                  VendorAgr.TESTFIELD(Active,TRUE);
                  VendorAgr.TESTFIELD(Blocked,VendorAgr.Blocked::" ");
                END;
            END;
          END;
          }
          //NC NSC-622.3 < DP

          //NC S1498 > PCH
          Log.StartCounter(18);
          //NC S1498 < PCH
        UNTIL GenJnlLineTemp.NEXT = 0;

        //NC S1498 > PCH
        Log.StartCounter(-19);
        //NC S1498 < PCH
        IF ABS(CurrentBalance) >= ABS(ConsolidationSource."Cons. Max Round. Amount") THEN

          ERROR(Text004,ABS(CurrentBalance))
        ELSE IF CurrentBalance <> 0 THEN BEGIN
          GenJournalBatchTemp.RESET;
          IF GenJournalBatchTemp.FINDFIRST THEN REPEAT
            InsertCorrectLine(GenJournalBatchTemp,GenJournalLine,JournalLineDimension);
          UNTIL GenJournalBatchTemp.NEXT = 0;
        END;
        //NC S1498 > PCH
        Log.StartCounter(19);
        //NC S1498 < PCH

      END;

      //NC S1498 > PCH
      Log.StartCounter(16);
      Log.StartCounter(9);
      //NC S1498 < PCH
    END;

    PROCEDURE CheckDimMapp@1000000032(Buffer@1210001 : Record 50168;VAR LedgDimensionTmp@1000000010 : TEMPORARY Record 355;ConsolidationSource@1000000009 : Record 50001;ConsSession@1210000 : Integer;SaveSourceDimValue@1000000001 : Boolean;MappingCode@1000000002 : Code[20];JobProcStatusLineNo@1101495001 : Integer;NoError@1101495004 : Boolean) IsErr : Boolean;
    VAR
      ConvDimensions@1000000008 : Record 50003;
      DimCode@1000000014 : Code[20];
      DimVal@1000000013 : Code[20];
      tmp@1210002 : Integer;
      lDim1Exist@1210007 : Boolean;
      lDim2Exist@1210006 : Boolean;
      lDim3Exist@1210005 : Boolean;
      ConsDimCode@1210004 : Code[20];
      ConsDimValue@1101495003 : Code[20];
      LedgDimension1@1210003 : Record 355;
      DimensionValue@1101495000 : Record 349;
      LedgDimensionTmp2@1101495002 : TEMPORARY Record 355;
    BEGIN
      IsErr := FALSE;
      DimCode := LedgDimensionTmp."Dimension Code";
      DimVal := LedgDimensionTmp."Dimension Value Code";

      IF ConsolidationSetup."Mapping Dimension Type"=ConsolidationSetup."Mapping Dimension Type"::"Combination-To-One" THEN BEGIN
        ConsDimCode :='';
        ConsDimValue := '';

        LedgDimensionTmp.RESET;
        LedgDimensionTmp.SETRANGE("Table ID", DATABASE::"G/L Entry");
        LedgDimensionTmp.SETRANGE("Entry No.", Buffer."Entry No.");

        ConvDimensions.RESET;
        ConvDimensions.SETRANGE("Mapping Code",MappingCode);
        ConvDimensions.SETRANGE("Source Dimension Code",DimCode);
        ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
        IF GV.FIND_DimMapping(ConvDimensions) THEN
          REPEAT
            //проверяем, есть ли строка, соответствующая исключению, в измерениях в данной операции

            IF ConsDimCode='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;

              WITH LedgDimensionTmp DO BEGIN
                IF ConvDimensions."Source Dimension Code" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code");
                  lDim1Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 2" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 2");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 3" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 3");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                END;
              END;
              IF (lDim1Exist AND lDim2Exist AND lDim3Exist) THEN BEGIN
                ConsDimCode := ConvDimensions."Receiver Dimension Code";
                ConsDimValue := ConvDimensions."Receiver Dimension Value Code";
              END
            END;
          UNTIL (GV.NEXT_DimMapping(ConvDimensions) = 0) OR (ConsDimCode <> '');
          IF ConsDimCode='' THEN BEGIN
            ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
            IsErr := TRUE;
            IsGlobalError := TRUE;
            IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
            ErrorJournal.AddErrorBufferDealXMLDimVal(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                       ErrMessage,COMPANYNAME,Buffer,DimensionValue,JobProcStatusLineNo);
          END ELSE BEGIN
            LedgDimensionTmp2 := LedgDimensionTmp;
            IF NOT SaveSourceDimValue THEN
              LedgDimensionTmp.DELETE;
            LedgDimensionTmp.INIT;
            LedgDimensionTmp."Table ID" := 17;
            LedgDimensionTmp."Entry No." := Buffer."Entry No.";
            LedgDimensionTmp."Dimension Code" := ConsDimCode;
            LedgDimensionTmp."Dimension Value Code" := ConsDimValue;
            LedgDimensionTmp."Dim in Source" := DimCode;
            LedgDimensionTmp."Dim Value Code in Source" := DimVal;
            IF NOT LedgDimensionTmp.INSERT THEN
              LedgDimensionTmp.MODIFY;
            LedgDimensionTmp := LedgDimensionTmp2;
          END;
      END ELSE BEGIN
        ConvDimensions.SETCURRENTKEY("Company Name","Source Dimension Code","Source Dimension Value Code");
        ConvDimensions.SETRANGE("Mapping Code",MappingCode);
        ConvDimensions.SETRANGE("Company Name",COMPANYNAME);
        ConvDimensions.SETRANGE("Source Dimension Code",DimCode);
        ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
        IF NOT GV.FIND_DimMapping(ConvDimensions) THEN BEGIN
          ConvDimensions.SETRANGE("Company Name",'');
          IF NOT GV.FIND_DimMapping(ConvDimensions) THEN BEGIN

            //NC NCS-1530 > DP
            //NC S1498 > PCH
            IF NOT NoError THEN BEGIN
            //NC S1498 < PCH
            //NC NCS-1530 < DP

              ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
              IsErr := TRUE;
              IsGlobalError := TRUE;
              IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
              ErrorJournal.AddErrorBufferDealXMLDimVal(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource.Code,ConsSession,'EDTC02',
                                         ErrMessage,COMPANYNAME,Buffer,DimensionValue,JobProcStatusLineNo);
            //NC NCS-1530 > DP
            //NC S1498 > PCH
            END;
            //NC S1498 < PCH
            //NC NCS-1530 < DP

          END ELSE BEGIN
            IF (ConvDimensions."Receiver Dimension Code" = '') OR (ConvDimensions."Receiver Dimension Value Code" = '') THEN BEGIN
              ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
              IsErr := TRUE;
              IsGlobalError := TRUE;
              IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
              ErrorJournal.AddErrorBufferDealXMLDimVal(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource.Code,ConsSession,'EDTC02',
                                         ErrMessage,COMPANYNAME,Buffer,DimensionValue,JobProcStatusLineNo);
            END ELSE BEGIN
              IF NOT DimensionValue.GET(ConvDimensions."Receiver Dimension Code",ConvDimensions."Receiver Dimension Value Code")
              THEN BEGIN
                IsGlobalError := TRUE;
                IsErr := TRUE;
                ErrMessage := Text022 + FORMAT(ConvDimensions."Receiver Dimension Code") + Text023 +
                              FORMAT(ConvDimensions."Receiver Dimension Value Code") + Text024;
                ErrorJournal.AddErrorBufferDealXMLDimMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::
      Error,
                                           ConsolidationSource.Code,ConsSession,'EDTC06',
                                           ErrMessage,COMPANYNAME,Buffer,ConvDimensions,JobProcStatusLineNo);

              END ELSE BEGIN
                  LedgDimensionTmp2 := LedgDimensionTmp;
                  IF NOT SaveSourceDimValue THEN
                    LedgDimensionTmp.DELETE;
                  LedgDimensionTmp.INIT;
                  LedgDimensionTmp."Table ID" := 17;
                  LedgDimensionTmp."Entry No." := Buffer."Entry No.";
                  LedgDimensionTmp."Dimension Code" := ConvDimensions."Receiver Dimension Code";
                  LedgDimensionTmp."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
                  LedgDimensionTmp."Dim in Source" := DimCode;
                  LedgDimensionTmp."Dim Value Code in Source" := DimVal;
                  IF NOT LedgDimensionTmp.INSERT THEN
                    LedgDimensionTmp.MODIFY;
                  LedgDimensionTmp := LedgDimensionTmp2;
              END;
            END;
          END;
        END ELSE BEGIN
          IF (ConvDimensions."Receiver Dimension Code" = '') OR (ConvDimensions."Receiver Dimension Value Code" = '') THEN BEGIN
            ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
            IsErr := TRUE;
            IsGlobalError := TRUE;
            IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
            ErrorJournal.AddErrorBufferDealXMLDimVal(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                       ErrMessage,COMPANYNAME,Buffer,DimensionValue,JobProcStatusLineNo);
              END ELSE BEGIN
            IF NOT DimensionValue.GET(ConvDimensions."Receiver Dimension Code",ConvDimensions."Receiver Dimension Value Code")
            THEN BEGIN
              IsGlobalError := TRUE;
              IsErr := TRUE;
              ErrMessage := Text022 + FORMAT(ConvDimensions."Receiver Dimension Code") + Text023 +
                            FORMAT(ConvDimensions."Receiver Dimension Value Code") + Text024;
              ErrorJournal.AddErrorBufferDealXMLDimMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource.Code,ConsSession,'EDTC06',
                                         ErrMessage,COMPANYNAME,Buffer,ConvDimensions,JobProcStatusLineNo);
            END ELSE BEGIN
                  LedgDimensionTmp2 := LedgDimensionTmp;
                  IF NOT SaveSourceDimValue THEN
                    LedgDimensionTmp.DELETE;
                  LedgDimensionTmp.INIT;
                  LedgDimensionTmp."Table ID" := 17;
                  LedgDimensionTmp."Entry No." := Buffer."Entry No.";
                  LedgDimensionTmp."Dimension Code" := ConvDimensions."Receiver Dimension Code";
                  LedgDimensionTmp."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
                  LedgDimensionTmp."Dim in Source" := DimCode;
                  LedgDimensionTmp."Dim Value Code in Source" := DimVal;
                  IF NOT LedgDimensionTmp.INSERT THEN
                    LedgDimensionTmp.MODIFY;
                  LedgDimensionTmp := LedgDimensionTmp2;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE ConvertCurrencyCode@1101495007(BufferCode@1210000 : Code[10]) : Code[10];
    VAR
      Currency@1210001 : Record 4;
    BEGIN
      IF BufferCode='' THEN EXIT(BufferCode);
      GLSetup.GET;
      IF GLSetup."LCY Code" = BufferCode THEN
        EXIT('');
      Currency.GET(BufferCode);
      EXIT(Currency.Code);
    END;

    PROCEDURE InsertCorrectLine@1101495012(VAR GenJournalLineTemp@1101495002 : TEMPORARY Record 81;VAR GenJournalLine@1101495001 : Record 81;VAR JournalLineDimension@1101495000 : Record 356);
    VAR
      DocBalanceAmount@1101495003 : Decimal;
    BEGIN
      GenJournalLineTemp.RESET;
      IF GenJournalLineTemp.FINDSET THEN REPEAT

        IF GenJournalLineTemp."Source Entry No." = 0 THEN
          GenJournalLineTemp."Source Entry No." := GenJournalLineTemp."Line No.";

        GenJournalLine.RESET;
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLineTemp."Journal Template Name");
        GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLineTemp."Journal Batch Name");
        GenJournalLine.SETRANGE("Line No.",GenJournalLineTemp."Line No.",GenJournalLineTemp."Source Entry No.");
        ConsolidationMgt.InsertRoundingCorrectionLines(ConsolidationSource.Code, GenJournalLine, JournalLineDimension);

        //Проверка баланса
        IF GenJournalLine.FINDFIRST THEN BEGIN
          GenJournalLine.SETFILTER("Line No.",'>=%1',GenJournalLineTemp."Line No.");
                                                       //т.к. могли добавиться проводки функцией вставки балансирующих строк
          GenJournalLine.SETRANGE("Document No.",GenJournalLineTemp."Document No.");
          DocBalanceAmount := 0;
          IF GenJournalLine.FINDSET THEN REPEAT
            DocBalanceAmount := DocBalanceAmount + GenJournalLine."Amount (LCY)";
          UNTIL GenJournalLine.NEXT = 0;

          IF DocBalanceAmount <> 0 THEN
            ERROR(Text045,GenJournalLine."Document No.",DocBalanceAmount);

        END;

      UNTIL GenJournalLineTemp.NEXT = 0;
    END;

    PROCEDURE CreateDimBuffer@1000000020(Buffer@1210000 : Record 50168;VAR LedgerEntryDimTmp@1210001 : TEMPORARY Record 355;JobProcStatus@1101495000 : Record 50063) isErr : Boolean;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      isErr := FALSE;

      IF Buffer."Deal between Book" THEN BEGIN
        IF Buffer."Book left BO" <> '' THEN
          InsertDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",Buffer."Entry No.",
                          MovingDataSetup."BOOK Dimension Code",Buffer."Book left BO")
        ELSE IF Buffer."Book left FO" <> '' THEN
          InsertDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",Buffer."Entry No.",
                          MovingDataSetup."BOOK Dimension Code",Buffer."Book left FO")
        ELSE BEGIN
          isErr := TRUE;
          ErrorJournal.AddErrorBuferDealXML(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsolidationSource.Code,JobProcStatus."Cons. Register",'EDTC02',
                                     STRSUBSTNO(TextEDTC02, Buffer.FIELDCAPTION("Book left BO")),
                                     COMPANYNAME,Buffer,JobProcStatus."Line No.");
        END;
      END ELSE BEGIN
        IF Buffer."Book left BO" <> '' THEN
          InsertDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",Buffer."Entry No.",
                          MovingDataSetup."BOOK Dimension Code",Buffer."Book left BO")
        ELSE IF Buffer."Book left FO" <> '' THEN
          InsertDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",Buffer."Entry No.",
                          MovingDataSetup."BOOK Dimension Code",Buffer."Book left FO")
        ELSE BEGIN
          isErr := TRUE;
          ErrorJournal.AddErrorBuferDealXML(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsolidationSource.Code,JobProcStatus."Cons. Register",'EDTC02',
                                     STRSUBSTNO(TextEDTC02, Buffer.FIELDCAPTION("Book left BO")),
                                     COMPANYNAME,Buffer,JobProcStatus."Line No.");
        END;
      END;
    END;

    PROCEDURE InsertDimBuffer@1000000018(VAR LedgerEntryDimTMP@1000000000 : TEMPORARY Record 355;TableNo@1000000001 : Integer;EntryNo@1000000002 : Integer;DimCode@1000000003 : Code[20];DimValue@1000000004 : Code[20]);
    VAR
      LinkedDim@1000000005 : Record 50016;
    BEGIN
      IF DimValue = '' THEN
        EXIT;
      LedgerEntryDimTMP.INIT;
      LedgerEntryDimTMP."Table ID" := TableNo;
      LedgerEntryDimTMP."Entry No." := EntryNo;
      LedgerEntryDimTMP."Dimension Code" := DimCode;
      LedgerEntryDimTMP."Dimension Value Code" := DimValue;
      IF NOT LedgerEntryDimTMP.INSERT THEN ;
    END;

    PROCEDURE CheckJnlLineDimValuePosting@1000000009(VAR JnlLineDimTemp@1000000017 : TEMPORARY Record 356;AccountType@1000000000 : Option;AccountNo@1000000001 : Code[20];VAR GenJnlLineLocal@1000000008 : Record 81;VAR Buffer@1000000003 : Record 50168;VAR JobProcStatus@1000000002 : Record 50063) retOK : Boolean;
    VAR
      TableID@1000000007 : ARRAY [10] OF Integer;
      AccNo@1000000006 : ARRAY [10] OF Code[20];
      CustPostingGroup@1000000005 : Record 92;
      VendPostingGroup@1000000004 : Record 93;
      BankAccount@1000000009 : Record 270;
      BankAccountPostingGroup@1000000010 : Record 277;
      FIPostingGroup@1000000011 : Record 50103;
      FILedgEntryTemp@1000000013 : TEMPORARY Record 50106;
      FIValueEntryTemp@1000000014 : TEMPORARY Record 50107;
      AmountFI@1000000015 : Decimal;
    BEGIN
      retOK := TRUE;

      TableID[1] := DimensionMgt.TypeToTableID1(AccountType);
      AccNo[1] := AccountNo;
      IF (TableID[1] <> 0) AND (AccNo[1] <> '') THEN
        IF NOT DimensionMgt.InsertObject(JnlLineDimTemp,TableID,AccNo) THEN BEGIN
          ErrorJournal.AddErrorBuferDealXML(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         JobProcStatus.Processor,JobProcStatus."Cons. Register",
                                         'EDTC20',STRSUBSTNO(TextEDTC20,DimensionMgt.GetDimValuePostingErr),
                                         COMPANYNAME,Buffer,JobProcStatus."Line No.");
          retOK := retOK AND FALSE;
        END;
      TableID[1] := 0;
      AccNo[1] := '';
      IF AccountNo <> '' THEN
        CASE AccountType OF
          GenJnlLineLocal."Account Type"::Customer :
            BEGIN
              CustPostingGroup.GET(GenJnlLineLocal."Posting Group");
              TableID[1] := DimensionMgt.TypeToTableID1(GenJnlLineLocal."Account Type"::"G/L Account");
              AccNo[1] := CustPostingGroup."Receivables Account";
            END;
          GenJnlLineLocal."Account Type"::Vendor :
            BEGIN
              VendPostingGroup.GET(GenJnlLineLocal."Posting Group");
              TableID[1] := DimensionMgt.TypeToTableID1(GenJnlLineLocal."Account Type"::"G/L Account");
              AccNo[1] := VendPostingGroup."Payables Account";
            END;
          GenJnlLineLocal."Account Type"::"Bank Account" : BEGIN
            BankAccount.GET(AccountNo);
            BankAccountPostingGroup.GET(BankAccount."Bank Acc. Posting Group");
            TableID[1] := DimensionMgt.TypeToTableID1(GenJnlLineLocal."Account Type"::"G/L Account");
            AccNo[1] := BankAccountPostingGroup."G/L Bank Account No.";
          END;
        END;
      IF (TableID[1] <> 0) AND (AccNo[1] <> '') THEN
        IF NOT DimensionMgt.InsertObject(JnlLineDimTemp,TableID,AccNo) THEN BEGIN
          ErrorJournal.AddErrorBuferDealXML(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         JobProcStatus.Processor,JobProcStatus."Cons. Register",
                                         'EDTC20',STRSUBSTNO(TextEDTC20,DimensionMgt.GetDimValuePostingErr),
                                         COMPANYNAME,Buffer,JobProcStatus."Line No.");
          retOK := retOK AND FALSE;
        END;
    END;

    PROCEDURE DeleteOperation@1000000003(EntryType@1000000004 : 'Remove,Repost';VAR BufferLocal@1000000001 : Record 50168;VAR JobProcStatus@1000000000 : Record 50063) isErr : Boolean;
    BEGIN
      //NC S1498 > PCH
      Log.StartCounter(-10);
      //NC S1498 < PCH
      {
      IF NOT BufferLocalOld.GET(BufferLocal."Cons. Source Code",BufferLocal."Source Operation No.") THEN BEGIN
        ErrorJournal.AddErrorBuferDealEntry(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       JobProcStatus.Processor,JobProcStatus."Cons. Register",
                                       'EDTC21',STRSUBSTNO(TextEDTC21,BufferLocal."Document ID"),
                                       COMPANYNAME,BufferLocal,JobProcStatus."Line No.");
        EXIT(TRUE);
      END;
      }
      isErr := NOT CreateCorrectionJnlLines(EntryType,BufferLocal,ConsolidationSource,JobProcStatus);
      //NC S1498 > PCH
      Log.StartCounter(10);
      //NC S1498 < PCH
    END;

    PROCEDURE CreateCorrectionJnlLines@1210017(EntryType@1000000003 : 'Remove,Repost';VAR BufferLocal@1210000 : Record 50168;ConsolidationSource@1210005 : Record 50001;VAR JobProcStatus@1000000005 : Record 50063) retOK : Boolean;
    VAR
      GLEntry@1210001 : Record 17;
      GLEntry2@1000000000 : Record 17;
      GenJnlLineDel@1101495002 : Record 81;
      GenJnlLineDel2@1101495003 : Record 81;
      ChangeLogMgt@1101495004 : Codeunit 423;
      RecRef@1101495005 : RecordRef;
      GenJnlLineDimDel@1101495006 : Record 356;
      GenJnlLineDimDel2@1101495007 : Record 356;
      GLBuff2Correct@1000000001 : Record 50168;
      DocumentNo@1000000004 : Code[20];
      CorrTemplate@1000000007 : Code[10];
      CorrBatch@1000000006 : Code[10];
    BEGIN
      retOK := TRUE;
      GenJnlLineDel.RESET;
      GenJnlLineDel.SETRANGE("External Document ID",BufferLocal."Document ID");
      GenJnlLineDel.SETFILTER("Buffer Entry No.",'<>%1',BufferLocal."Entry No.");  // кроме тех которые созданы для текущего события
      ChangeLogMgt.ClearTempChangeLogSetupTable;
      IF GenJnlLineDel.FINDSET THEN REPEAT
        GenJnlLineDel2.GET(GenJnlLineDel."Journal Template Name",GenJnlLineDel."Journal Batch Name",GenJnlLineDel."Line No.");
        RecRef.GETTABLE(GenJnlLineDel2);
        ChangeLogMgt.LogDeletion(RecRef);
        GenJnlLineDel2.DELETE;
        GenJnlLineDimDel.RESET;
        GenJnlLineDimDel.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
        GenJnlLineDimDel.SETRANGE("Journal Template Name",GenJnlLineDel."Journal Template Name");
        GenJnlLineDimDel.SETRANGE("Journal Batch Name",GenJnlLineDel."Journal Batch Name");
        GenJnlLineDimDel.SETRANGE("Journal Line No.",GenJnlLineDel."Line No.");
        IF GenJnlLineDimDel.FINDSET THEN REPEAT
          GenJnlLineDimDel2.GET(81, GenJnlLineDel."Journal Template Name", GenJnlLineDel."Journal Batch Name",
                                    GenJnlLineDel."Line No.",
                                    GenJnlLineDimDel."Allocation Line No.",
                                    GenJnlLineDimDel."Dimension Code");
          RecRef.GETTABLE(GenJnlLineDimDel2);
          ChangeLogMgt.LogDeletion(RecRef);
          GenJnlLineDimDel2.DELETE;
        UNTIL GenJnlLineDimDel.NEXT = 0;

      UNTIL GenJnlLineDel.NEXT = 0;
      GLEntry.SETRANGE("External Document ID",BufferLocal."Document ID");
      GLEntry.SETRANGE(Reposted,FALSE);
      GLEntry.SETRANGE(Removed,FALSE);
      GLEntry.SETRANGE(Reversed,FALSE);

      IF GLEntry.FINDSET THEN REPEAT
        IF DocumentNo = '' THEN
          DocumentNo := NoSerManag.GetNextNo(ConsolidationSource."Source  No. Series",BufferLocal."Original Trade Date",TRUE);
        ConsolidationMgt.CreateCorrectionLine(GLEntry, JobProcStatus."Cons. Register",ConsolidationSource,
                                              DocumentNo,CorrTemplate,CorrBatch, EntryType,BufferLocal."Entry No.");
      UNTIL GLEntry.NEXT = 0;
    END;

    PROCEDURE AddDefDimForAgr@1101495000(TableNo@1101495000 : Integer;SourceNo@1101495009 : Code[20];AgrNo@1101495001 : Code[20];MappCode@1101495008 : Code[20]);
    VAR
      DefDim@1101495004 : Record 50128;
      DefDim2@1101495006 : Record 352;
      Deal@1101495003 : Record 50037;
      FI@1101495002 : Record 50021;
      DimValue@1101495005 : Record 349;
      DimMapping@1101495007 : Record 50003;
    BEGIN
      //NC NCS-622.6 > PCH
      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("BOOK Dimension Code");
      MovingDataSetup.TESTFIELD("Customer Dimension Code");
      MovingDataSetup.TESTFIELD("PROFIT CENTER Dimension Code");
      MovingDataSetup.TESTFIELD("FI Dimension Code");
      MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
      MovingDataSetup.TESTFIELD("Deal Dimension Code");
      IF Deal.GET(AgrNo) THEN BEGIN
        IF DimValue.GET(MovingDataSetup."Deal Dimension Code",AgrNo) THEN BEGIN
          DefDim.INIT;
          DefDim."Table ID" := TableNo;
          DefDim."Source No." := SourceNo;
          DefDim."No." := AgrNo;
          DefDim."Dimension Code" := MovingDataSetup."Deal Dimension Code";
          DefDim."Dimension Value Code" := AgrNo;
          DefDim."Value Posting" := DefDim."Value Posting"::"Same Code";
          //NC NCS-622.10 > DP
          {
          IF DefDim.INSERT THEN;
          }
          IF DefDim.INSERT(TRUE) THEN;
          //NC NCS-622.10 DP
        END;


        IF (Deal."Customer No." <> '') AND DimValue.GET(MovingDataSetup."Customer Dimension Code",Deal."Customer No.") THEN BEGIN
          DefDim.INIT;
          DefDim."Table ID" := TableNo;
          DefDim."Source No." := SourceNo;
          DefDim."No." := AgrNo;
          DefDim."Dimension Code" := MovingDataSetup."Customer Dimension Code";

          //NC NCS-1500 > DP
          {
          DefDim."Dimension Value Code" := Deal."Customer No.";
          }
          DefDim."Dimension Value Code" := SourceNo;
          //NC NCS-1500 < DP

          //NC NCS-622.10 > DP
          {
          IF DefDim.INSERT THEN;
          }
          IF DefDim.INSERT(TRUE) THEN;
          //NC NCS-622.10 DP
        END;

        IF (Deal.Book <> '') AND DimValue.GET(MovingDataSetup."BOOK Dimension Code",Deal.Book) THEN BEGIN
          DefDim.INIT;
          DefDim."Table ID" := TableNo;
          DefDim."Source No." := SourceNo;
          DefDim."No." := AgrNo;
          DefDim."Dimension Code" := MovingDataSetup."BOOK Dimension Code";
          DefDim."Dimension Value Code" := Deal.Book;

          //NC NCS-622.10 > DP
          {
          IF DefDim.INSERT THEN;
          }
          IF DefDim.INSERT(TRUE) THEN;
          //NC NCS-622.10 DP

          DefDim.INIT;
          DefDim."Table ID" := TableNo;
          DefDim."Source No." := SourceNo;
          DefDim."No." := AgrNo;
          DefDim."Dimension Code" := MovingDataSetup."PROFIT CENTER Dimension Code";
          DefDim."Dimension Value Code" := '';

          DimMapping.RESET;
          DimMapping.SETRANGE("Mapping Code",MappCode);
          DimMapping.SETRANGE("Receiver Dimension Code",MovingDataSetup."PROFIT CENTER Dimension Code");
          DimMapping.SETFILTER("Receiver Dimension Value Code",'<>%1','');
          DimMapping.SETFILTER("Company Name",'%1',COMPANYNAME);

          //NC NCS-622.8 > PCH
          {
          IF GV.FIND_DimMapping(DimMapping) THEN REPEAT
            IF (DimMapping."Source Dimension Code" = MovingDataSetup."BOOK Dimension Code")
            AND (DimMapping."Source Dimension Value Code" <> '') THEN
              DefDim."Dimension Value Code" := DimMapping."Source Dimension Value Code";
            IF (DimMapping."Source Dimension Code 2" = MovingDataSetup."BOOK Dimension Code")
            AND (DimMapping."Source Dimension Value Code 2" <> '') THEN
              DefDim."Dimension Value Code" := DimMapping."Source Dimension Value Code 2";
            IF (DimMapping."Source Dimension Code 3" = MovingDataSetup."BOOK Dimension Code")
            AND (DimMapping."Source Dimension Value Code 3" <> '') THEN
              DefDim."Dimension Value Code" := DimMapping."Source Dimension Value Code 3";
          UNTIL (GV.NEXT_DimMapping(DimMapping) = 0) OR (DefDim."Dimension Value Code" <> '');

          IF DefDim."Dimension Value Code" = '' THEN BEGIN
            DimMapping.SETFILTER("Company Name",'%1','');
            IF GV.FIND_DimMapping(DimMapping) THEN REPEAT
              IF (DimMapping."Source Dimension Code" = MovingDataSetup."BOOK Dimension Code")
              AND (DimMapping."Source Dimension Value Code" <> '') THEN
                DefDim."Dimension Value Code" := DimMapping."Source Dimension Value Code";
              IF (DimMapping."Source Dimension Code 2" = MovingDataSetup."BOOK Dimension Code")
              AND (DimMapping."Source Dimension Value Code 2" <> '') THEN
                DefDim."Dimension Value Code" := DimMapping."Source Dimension Value Code 2";
              IF (DimMapping."Source Dimension Code 3" = MovingDataSetup."BOOK Dimension Code")
              AND (DimMapping."Source Dimension Value Code 3" <> '') THEN
                DefDim."Dimension Value Code" := DimMapping."Source Dimension Value Code 3";
            UNTIL (GV.NEXT_DimMapping(DimMapping) = 0) OR (DefDim."Dimension Value Code" <> '');
          END;
          }
          IF GV.FIND_DimMapping(DimMapping) THEN REPEAT
            IF (DimMapping."Source Dimension Code" = MovingDataSetup."BOOK Dimension Code")
              AND (DimMapping."Source Dimension Value Code" = Deal.Book) THEN
              DefDim."Dimension Value Code" := DimMapping."Receiver Dimension Value Code";
            IF (DimMapping."Source Dimension Code 2" = MovingDataSetup."BOOK Dimension Code")
              AND (DimMapping."Source Dimension Value Code 2" = Deal.Book) THEN
              DefDim."Dimension Value Code" := DimMapping."Receiver Dimension Value Code";
            IF (DimMapping."Source Dimension Code 3" = MovingDataSetup."BOOK Dimension Code")
              AND (DimMapping."Source Dimension Value Code 3" = Deal.Book) THEN
              DefDim."Dimension Value Code" := DimMapping."Receiver Dimension Value Code";
          UNTIL (GV.NEXT_DimMapping(DimMapping) = 0) OR (DefDim."Dimension Value Code" <> '');

          IF DefDim."Dimension Value Code" = '' THEN BEGIN
            DimMapping.SETFILTER("Company Name",'%1','');
            IF GV.FIND_DimMapping(DimMapping) THEN REPEAT
              IF (DimMapping."Source Dimension Code" = MovingDataSetup."BOOK Dimension Code")
                AND (DimMapping."Source Dimension Value Code" = Deal.Book) THEN
                DefDim."Dimension Value Code" := DimMapping."Receiver Dimension Value Code";
                IF (DimMapping."Source Dimension Code 2" = MovingDataSetup."BOOK Dimension Code")
                AND (DimMapping."Source Dimension Value Code 2" = Deal.Book) THEN
                   DefDim."Dimension Value Code" := DimMapping."Receiver Dimension Value Code";
                IF (DimMapping."Source Dimension Code 3" = MovingDataSetup."BOOK Dimension Code")
                AND (DimMapping."Source Dimension Value Code 3" = Deal.Book) THEN
                   DefDim."Dimension Value Code" := DimMapping."Receiver Dimension Value Code";
            UNTIL (GV.NEXT_DimMapping(DimMapping) = 0) OR (DefDim."Dimension Value Code" <> '');
         END;
         //NC NCS-622.8 > PCH

         IF DefDim."Dimension Value Code" <> '' THEN
          //NC NCS-622.10 > DP
          {
          IF DefDim.INSERT THEN;
          }
          IF DefDim.INSERT(TRUE) THEN;
          //NC NCS-622.10 DP



        END;

        IF (Deal."Financial instrument No." <> '') AND
        DimValue.GET(MovingDataSetup."FI Dimension Code",Deal."Financial instrument No.") THEN BEGIN
          DefDim.INIT;
          DefDim."Table ID" := TableNo;
          DefDim."Source No." := SourceNo;
          DefDim."No." := AgrNo;
          DefDim."Dimension Code" := MovingDataSetup."FI Dimension Code";
          DefDim."Dimension Value Code" := Deal."Financial instrument No.";
          //NC NCS-622.10 > DP
          {
          IF DefDim.INSERT THEN;
          }
          IF DefDim.INSERT(TRUE) THEN;
          //NC NCS-622.10 DP

          IF DefDim2.GET(DATABASE::"Financial Instrument",Deal."Financial instrument No.",
             MovingDataSetup."INC.TAX Dimension Code") THEN BEGIN
            DefDim.INIT;
            DefDim."Table ID" := TableNo;
            DefDim."Source No." := SourceNo;
            DefDim."No." := AgrNo;
            DefDim."Dimension Code" := MovingDataSetup."INC.TAX Dimension Code";
            DefDim."Dimension Value Code" := DefDim2."Dimension Value Code";
            //NC NCS-622.10 > DP
            {
            IF DefDim.INSERT THEN;
            }
            IF DefDim.INSERT(TRUE) THEN;
            //NC NCS-622.10 DP

          END;
        END;

      END;
      //NC NCS-622.6 < PCH
    END;

    PROCEDURE ReverseEvents@1101495011(VAR Buffer3@1101495001 : Record 50168;NewPostDate@1101495015 : Date;VAR GenJnlLineTemp@1101495014 : TEMPORARY Record 81;VAR DimGenJnlLineTemp@1101495010 : TEMPORARY Record 356;VAR JobProcStatus@1101495002 : TEMPORARY Record 50063;VAR SourceBuffer@1101495017 : Record 50168) isErr : Boolean;
    VAR
      retTempl@1101495013 : Integer;
      isExit@1101495012 : Boolean;
      EventTemplate2@1101495008 : Record 50170;
      TempMapping3@1101495006 : TEMPORARY Record 50022;
      TempMapping4@1101495003 : TEMPORARY Record 50022;
      DimMappingSel@1101495007 : Record 50031;
      DimMappingSel2@1101495005 : Record 50031;
      OneMapping@1101495004 : Boolean;
      LEDimTemp3@1101495000 : TEMPORARY Record 355;
      ConditionsBufferTemp@1101495009 : TEMPORARY Record 382;
      EUFunctionsTemp@1101495011 : TEMPORARY Record 50200;
      Buffer4@1101495016 : Record 50168;
    BEGIN
      //NC S1967 > PCH
      LEDimTemp3.RESET;
      LEDimTemp3.DELETEALL;
      isErr := isErr OR CreateDimBuffer(Buffer3,LEDimTemp3,JobProcStatus);

      // мэппинг измерений BOOK
      GV.GetMapping2(TempMapping4,ConsolidationSetup."BOOK Mapping Code",0,OneMapping);
      IF NOT OneMapping THEN
        ConsolidationMgt.GetMapping(Buffer3."Original Trade Date",TempMapping4);

      IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
        DimMappingSel2.SETRANGE("Mapping Code",TempMapping4.Code);
        IF GV.FIND_DimMappingSelection(DimMappingSel2) THEN REPEAT
          IF LEDimTemp3.GET(17,Buffer3."Entry No.",DimMappingSel2."Dimension Code") AND
             (LEDimTemp3."Dim in Source" = '')
          THEN
            isErr := isErr OR CheckDimMapp(Buffer3,LEDimTemp3,ConsolidationSource,JobProcStatus."Cons. Register",
                                           DimMappingSel2."Save when Mapping",TempMapping4.Code,JobProcStatus."Line No.",TRUE);

        UNTIL GV.NEXT_DimMappingSelection(DimMappingSel2) = 0;
      END;

      // проверка и мэппинг измерений
      GV.GetMapping(TempMapping3,ConsolidationSource."Mapping Code",0,OneMapping);
      IF NOT OneMapping THEN
        ConsolidationMgt.GetMapping(Buffer3."Original Trade Date",TempMapping3);

      IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
        DimMappingSel.SETRANGE("Mapping Code",TempMapping3.Code);
        IF GV.FIND_DimMappingSelection(DimMappingSel) THEN REPEAT
          IF LEDimTemp3.GET(17,Buffer3."Entry No.",DimMappingSel."Dimension Code") AND
             ((LEDimTemp3."Dim in Source" = '') OR
              (LEDimTemp3."Dim in Source" = MovingDataSetup."BOOK Dimension Code"))
          THEN
            isErr := isErr OR CheckDimMapp(Buffer3,LEDimTemp3,ConsolidationSource,JobProcStatus."Cons. Register",
                                           DimMappingSel."Save when Mapping",TempMapping3.Code,JobProcStatus."Line No.",FALSE);

        UNTIL GV.NEXT_DimMappingSelection(DimMappingSel) = 0;

      END;
      LEDimTemp3.RESET;

      // поиск схемы трансформации
      EventTemplate2.RESET;
      EventTemplate2.SETRANGE("Mapping Code",TempMapping3.Code);
      EventTemplate2.SETRANGE("Event Code",Buffer3."Event Code");
      EventTemplate2.SETRANGE("Deal Type",Buffer3."External Deal Type");
      EventTemplate2.SETRANGE("Settlement Type",Buffer3."Settlement Type");
      EventTemplate2.SETRANGE("Deal Between Books",Buffer3."Deal between Book");

      //NCS2019 > AAP
      EventTemplate2.SETRANGE("Company Name",COMPANYNAME);

      IF NOT GV.FIND_EventTempl2(EventTemplate2) OR
         NOT DealEvent2.GET(Buffer3."Event Code",Buffer3."External Deal Type",Buffer3."Settlement Type",Buffer3."Deal between Book"
                                  ,TempMapping3.Code,COMPANYNAME)
      THEN BEGIN

        EventTemplate2.SETRANGE("Company Name",'');

      //NCS2019 < AAP

        IF NOT GV.FIND_EventTempl2(EventTemplate2) OR
           NOT DealEvent2.GET(Buffer3."Event Code",Buffer3."External Deal Type",
                              Buffer3."Settlement Type",Buffer3."Deal between Book"
        //NCS2019>>
                                  ,TempMapping3.Code,'')
        //NCS2019<<
        THEN BEGIN
          isErr := TRUE;
          IsGlobalError := TRUE;
          ErrorJournal.AddErrorBuferDealXML(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsolidationSource.Code,JobProcStatus."Cons. Register",'EDTC02',
                                     STRSUBSTNO(TextEDTC02_,Buffer3.FIELDCAPTION("Event Code"),Buffer3."Event Code",
                                                            Buffer3.FIELDCAPTION("External Deal Type"),Buffer3."External Deal Type",
                                                            Buffer3.FIELDCAPTION("Settlement Type"),Buffer3."Settlement Type",
                                                            Buffer3.FIELDCAPTION("Deal between Book"),Buffer3."Deal between Book"),
                                     COMPANYNAME,Buffer3,JobProcStatus."Line No.");
        END;

      //NCS2019 > AAP
      END;
      //NCS2019 < AAP

      //выполнение инструкций
      ConditionsBufferTemp.RESET;
      ConditionsBufferTemp.DELETEALL;
      //NC S1914 > PCH
      EUFunctionsTemp.RESET;
      EUFunctionsTemp.DELETEALL;
      //NC S1914 < PCH
      IF NOT isErr THEN BEGIN
        isExit := FALSE;
        REPEAT
          //2208>
          EventTemplate2.fn_TempEUFunc;
          //2208<
          retTempl := EventTemplate2.Run(1,NewPostDate,Buffer3,LEDimTemp3,GenJnlLineTemp,DimGenJnlLineTemp,
                                        ConditionsBufferTemp,EUFunctionsTemp);
          IF retTempl < 0 THEN
            isExit := TRUE
          ELSE IF retTempl = 0 THEN
            isExit := GV.NEXT_EventTempl2(EventTemplate2) = 0;

        UNTIL isExit;
      END;

      Buffer4.GET(Buffer3."Entry No.");
      Buffer4."Reversed Entry No." := SourceBuffer."Entry No.";
      Buffer4.MODIFY;
      //NC S1967 < PCH
    END;

    BEGIN
    {
      NC S1753 PCH
      NC S1909 PCH убрал фильтр по "Trade Direction" при поиске сторнирования
      NC S1914 PCH
      NC NCS-1939 DP Изменен код функции NewOperation
      NC S1967 PCH
      NC S2019 AAP Изменены функции NewOperation, ReverseEvents.
      NC NCS-2172 DP Изменен код функции OnRun, NewOperation
      NC NCS-2172.2 DP Изменен код функции OnRun, NewOperation
      OP NCS-2172.3
      TDRANCS-2208 Modified NewOperation
      NC NCS-2358 DP Modified NewOperation
    }
    END.
  }
}

