OBJECT Table 50170 Event Upload Template
{
  OBJECT-PROPERTIES
  {
    Date=09.08.17;
    Time=18:06:27;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               SourceCodeSetup.GET;
               "Source Code" := SourceCodeSetup."Event Upload";
             END;

    OnDelete=VAR
               EventTemplateDim2@1101495000 : Record 50171;
             BEGIN
               EventTemplateDim2.RESET;
               EventTemplateDim2.SETRANGE("Mapping Code","Mapping Code");
               EventTemplateDim2.SETRANGE("Deal Type","Deal Type");
               EventTemplateDim2.SETRANGE("Event Code","Event Code");
               //NC S1967 > PCH
               //EventTemplateDim2.SETRANGE("Line No.", "Settlement Type");
               EventTemplateDim2.SETRANGE("Settlement Type", "Settlement Type");
               EventTemplateDim2.SETRANGE("Deal Between Books", "Deal Between Books");

               //NCS2019 > AAP
               EventTemplateDim2.SETRANGE("Company Name","Company Name");
               //NCS2019 < AAP

               EventTemplateDim2.SETRANGE("Line No.", "Line No.");
               //NC S1967 < PCH
               EventTemplateDim2.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Event Upload Template;
               RUS=Шаблон Загрузки Событий];
    LookupPageID=Page50245;
    DrillDownPageID=Page50245;
  }
  FIELDS
  {
    { 1   ;   ;Mapping Code        ;Code20        ;TableRelation=Mapping;
                                                   CaptionML=[ENU=Mapping Code;
                                                              RUS=Код Схемы Трансформации];
                                                   NotBlank=Yes;
                                                   Description=NCS-971 10->20 }
    { 5   ;   ;Event Code          ;Code20        ;TableRelation="Deal Event Code 2";
                                                   OnValidate=VAR
                                                                DealEventCode2@1101495000 : Record 50139;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Event Code;
                                                              RUS=Код События];
                                                   NotBlank=Yes }
    { 10  ;   ;Deal Type           ;Code20        ;TableRelation="External Deal Type";
                                                   CaptionML=[ENU=Deal Type;
                                                              RUS=Тип Сделки];
                                                   NotBlank=Yes }
    { 15  ;   ;Settlement Type     ;Option        ;CaptionML=[ENU=Settlement Type;
                                                              RUS=Порядок Расчетов];
                                                   OptionCaptionML=[ENU=" ,Deliverable,Non-Deliverable,Cash,Cash on Delivery,Auction";
                                                                    RUS=" ,Поставочный,Беспоставочный,Наличные,Наложенным платежом,Аукцион"];
                                                   OptionString=[ ,Deliverable,Non-Deliverable,Cash,Cash on Delivery,Auction] }
    { 20  ;   ;Deal Between Books  ;Boolean       ;CaptionML=[ENU=Deal Between Books;
                                                              RUS=Межбуковая Сделка] }
    { 23  ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company Name;
                                                              RUS=Фирма Название];
                                                   Description=NC S2019 AAP }
    { 25  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Строка Но.];
                                                   NotBlank=Yes }
    { 26  ;   ;Line Type           ;Option        ;OnValidate=VAR
                                                                recRef@1101495001 : RecordRef;
                                                                fldRef@1101495000 : FieldRef;
                                                                iField@1101495002 : Integer;
                                                              BEGIN
                                                                IF "Line Type" = "Line Type"::Condition THEN BEGIN
                                                                  recRef.GETTABLE(Rec);
                                                                  FOR iField := 1 TO recRef.FIELDCOUNT DO BEGIN
                                                                    fldRef := recRef.FIELDINDEX(iField);

                                                                    IF (fldRef.NUMBER >= 50000) THEN
                                                                      ClearFldRef(fldRef);

                                                                  END;
                                                                  recRef.SETTABLE(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Line Type;
                                                              RUS=Тип Строки];
                                                   OptionCaptionML=[ENU=Entry,Condition;
                                                                    RUS=Проводка,Условие];
                                                   OptionString=Entry,Condition }
    { 30  ;   ;Condition Field 1   ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Condition Field 1" := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Condition Field 1;
                                                              RUS=Условие Поле 1] }
    { 35  ;   ;Condition Type      ;Option        ;CaptionML=[ENU=Condition Type;
                                                              RUS=Условие Тип];
                                                   OptionCaptionML=[ENU="-,<,<=,=,>=,>,#";
                                                                    RUS="-,<,<=,=,>=,>,#"];
                                                   OptionString=-,<,<=,=,>=,>,# }
    { 40  ;   ;Condition Field 2   ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Condition Field 2" := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Condition Field 2;
                                                              RUS=Условие Поле 2] }
    { 45  ;   ;Link Condition Type ;Option        ;CaptionML=[ENU=Link Condition Type;
                                                              RUS=Связанное Условие Тип];
                                                   OptionCaptionML=[ENU=AND,OR;
                                                                    RUS=И,ИЛИ];
                                                   OptionString=AND,OR }
    { 50  ;   ;Link Condition Line No.;Integer    ;TableRelation="Event Upload Template"."Line No." WHERE (Mapping Code=FIELD(Mapping Code),
                                                                                                           Event Code=FIELD(Event Code),
                                                                                                           Deal Type=FIELD(Deal Type),
                                                                                                           Settlement Type=FIELD(Settlement Type),
                                                                                                           Deal Between Books=FIELD(Deal Between Books),
                                                                                                           Company Name=FIELD(Company Name));
                                                   OnValidate=BEGIN
                                                                Indentation := CalcIndentation;
                                                              END;

                                                   CaptionML=[ENU=Link Condition Line No.;
                                                              RUS=Связанное Условие Строка Но.];
                                                   Description=NC S2019 AAP }
    { 55  ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              RUS=Отступ] }
    { 50000;  ;Account Type        ;Option        ;CaptionML=[ENU=Account Type;
                                                              RUS=Тип Счета];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,FI;
                                                                    RUS=Фин. Счет,Клиент,Поставщик,Банк. Счет,ОС,МФ Партнер,ФИ];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,FI }
    { 50100;  ;Account No.         ;Text50        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Account Type=CONST(IC Partner)) "IC Partner"
                                                                 ELSE IF (Account Type=CONST(FI)) "Financial Instrument";
                                                   OnLookup=VAR
                                                              GLAccount@1101495000 : Record 15;
                                                              Customer@1101495001 : Record 18;
                                                              Vendor@1101495002 : Record 23;
                                                              FixedAsset@1101495003 : Record 5600;
                                                              BankAccount@1101495004 : Record 270;
                                                            BEGIN
                                                              CASE "Account Type" OF
                                                                "Account Type"::"G/L Account" :
                                                                  BEGIN
                                                                    IF GLAccount.GET("Account No.") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,GLAccount) THEN
                                                                      "Account No." := GLAccount."No.";
                                                                  END;
                                                                "Account Type"::Customer :
                                                                  BEGIN
                                                                    IF Customer.GET("Account No.") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,Customer) THEN
                                                                      "Account No." := Customer."No.";
                                                                  END;
                                                                "Account Type"::Vendor :
                                                                  BEGIN
                                                                    IF Vendor.GET("Account No.") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,Vendor) THEN
                                                                      "Account No." := Vendor."No.";
                                                                  END;
                                                                "Account Type"::"Fixed Asset" :
                                                                  BEGIN
                                                                    IF FixedAsset.GET("Account No.") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,FixedAsset) THEN
                                                                      "Account No." := FixedAsset."No.";
                                                                  END;
                                                                "Account Type"::"Bank Account" :
                                                                  BEGIN
                                                                    IF BankAccount.GET("Account No.") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,BankAccount) THEN
                                                                      "Account No." := BankAccount."No.";
                                                                  END;
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Account No.;
                                                              RUS=Счет Но.] }
    { 50200;  ;Posting Date        ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('DATE',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Posting Date" := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Posting Date;
                                                              RUS=Дата Учета] }
    { 50201;  ;Posting Date Formula;DateFormula   ;CaptionML=[ENU=Posting Date Formula;
                                                              RUS=Формула Даты Учета] }
    { 50300;  ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип Документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Оплата,Счет,Кредит Нота,Процент Нота,Памятка,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 50400;  ;Description         ;Text100       ;OnLookup=BEGIN
                                                              Description := Description + SelectField('',0); //NC S1935 добавлен параметр
                                                            END;

                                                   CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 50401;  ;Description 2       ;Text100       ;OnLookup=BEGIN
                                                              "Description 2" := "Description 2" + SelectField('',0); //NC S1935 добавлен параметр
                                                            END;

                                                   CaptionML=[ENU=Description 2;
                                                              RUS=Описание 2] }
    { 50500;  ;Currency Code       ;Text50        ;TableRelation=Currency;
                                                   OnLookup=BEGIN
                                                              SelFld := SelectField('CODE',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Currency Code" := SelFld;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=Код Валюты] }
    { 50599;  ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              RUS=Коррекция] }
    { 50600;  ;Sign                ;Option        ;CaptionML=[ENU=Sign;
                                                              RUS=Знак];
                                                   OptionCaptionML=[ENU=+,-;
                                                                    RUS=+,-];
                                                   OptionString=+,-;
                                                   AutoFormatType=1 }
    { 50701;  ;Amount              ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('DECIMAL',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                Amount := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Amount;
                                                              RUS=Сумма] }
    { 50800;  ;Posting Group       ;Text10        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "FA Posting Group"
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account Posting Group";
                                                   OnLookup=VAR
                                                              CustomerPostingGroup@1101495000 : Record 92;
                                                              VendorPostingGroup@1101495001 : Record 93;
                                                              FAPostingGroup@1101495002 : Record 5606;
                                                              BankAccountPostingGroup@1101495003 : Record 277;
                                                            BEGIN
                                                              CASE "Account Type" OF
                                                                "Account Type"::Customer :
                                                                  BEGIN
                                                                    IF CustomerPostingGroup.GET("Posting Group") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,CustomerPostingGroup) THEN
                                                                      "Posting Group" := CustomerPostingGroup.Code;
                                                                  END;
                                                                "Account Type"::Vendor :
                                                                  BEGIN
                                                                    IF VendorPostingGroup.GET("Posting Group") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,VendorPostingGroup) THEN
                                                                      "Posting Group" := VendorPostingGroup.Code;
                                                                  END;
                                                                "Account Type"::"Fixed Asset" :
                                                                  BEGIN
                                                                    IF FAPostingGroup.GET("Posting Group") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,FAPostingGroup) THEN
                                                                      "Posting Group" := FAPostingGroup.Code;
                                                                  END;
                                                                "Account Type"::"Bank Account" :
                                                                  BEGIN
                                                                    IF BankAccountPostingGroup.GET("Posting Group") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,BankAccountPostingGroup) THEN
                                                                      "Posting Group" := BankAccountPostingGroup.Code;
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting Group;
                                                              RUS=Учетная Группа];
                                                   Editable=Yes }
    { 50805;  ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              RUS=Код Источника] }
    { 50850;  ;Due Date            ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('DATE',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Due Date" := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Due Date;
                                                              RUS=Дата Оплаты] }
    { 50900;  ;Quantity            ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('DECIMAL',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                Quantity := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Quantity;
                                                              RUS=Кол-во] }
    { 50930;  ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                IF ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Gen. Posting Type");
                                                              END;

                                                   CaptionML=[ENU=Gen. Posting Type;
                                                              RUS=Общий Тип Учета];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    RUS=" ,Покупка,Продажа,Зачет"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 50931;  ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Bus. Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              RUS=Общая Бизнес Группа] }
    { 50932;  ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Prod. Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              RUS=Общая Товарная Группа] }
    { 50940;  ;Document Date       ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('DATE',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Document Date" := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Document Date;
                                                              RUS=Дата Документа] }
    { 50941;  ;External Document No.;Text50       ;OnLookup=BEGIN
                                                              SelFld := SelectField('CODE',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "External Document No." := SelFld;
                                                            END;

                                                   CaptionML=[ENU=External Document No.;
                                                              RUS=Внешний Документ Но.] }
    { 50945;  ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Bus. Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              RUS=НДС Бизнес Группа] }
    { 50946;  ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Prod. Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              RUS=НДС Товарная Группа] }
    { 50947;  ;Additional-Currency Posting;Option ;CaptionML=[ENU=Additional-Currency Posting;
                                                              RUS=ДОВ Учет];
                                                   OptionCaptionML=[ENU=None,Amount Only,Additional-Currency Amount Only;
                                                                    RUS=Нет,Только Сумма,Только Доп.-Вал. Сумма];
                                                   OptionString=None,Amount Only,Additional-Currency Amount Only }
    { 50950;  ;VAT Amount          ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('DECIMAL',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "VAT Amount" := SelFld;
                                                            END;

                                                   CaptionML=[ENU=VAT Amount;
                                                              RUS=Сумма НДС] }
    { 50990;  ;Reversing Entry     ;Boolean       ;CaptionML=[ENU=Reversing Entry;
                                                              RUS=Реверсная Операция] }
    { 51000;  ;Allow Zero-Amount Posting;Boolean  ;CaptionML=[ENU=Allow Zero-Amount Posting;
                                                              RUS=Разреш. Учет Нулевых Сумм];
                                                   Editable=Yes }
    { 51100;  ;Amount (LCY)        ;Text50        ;OnLookup=BEGIN
                                                              SelFld := SelectField('DECIMAL',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Amount (LCY)" := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Amount (LCY);
                                                              RUS=Сумма (ВУЧ)];
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,12411' }
    { 51300;  ;Agreement No.       ;Text50        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Agreement".No. WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Agreement".No. WHERE (Vendor No.=FIELD(Account No.));
                                                   OnLookup=VAR
                                                              Vendor@1101495002 : Record 23;
                                                              VendorAgreement@1101495000 : Record 14901;
                                                              Customer@1101495003 : Record 18;
                                                              CustomerAgreement@1101495001 : Record 14902;
                                                            BEGIN
                                                              CASE "Account Type" OF
                                                                "Account Type"::Customer :
                                                                  BEGIN
                                                                    IF Customer.GET("Account No.") THEN BEGIN
                                                                      CustomerAgreement.SETRANGE("Customer No.",Customer."No.");
                                                                      IF CustomerAgreement.GET(Customer."No.","Agreement No.") THEN ;
                                                                    END;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,CustomerAgreement) THEN
                                                                      "Agreement No." := CustomerAgreement."No.";
                                                                  END;
                                                                "Account Type"::Vendor :
                                                                  BEGIN
                                                                    IF Vendor.GET("Account No.") THEN
                                                                      VendorAgreement.SETRANGE("Vendor No.",Vendor."No.");
                                                                      IF VendorAgreement.GET(Vendor."No.","Agreement No.") THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,VendorAgreement) THEN
                                                                      "Agreement No." := VendorAgreement."No.";
                                                                  END;
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Agreement No.;
                                                              RUS=Договор Но.] }
    { 51400;  ;Source Historical Date;Text50      ;OnLookup=BEGIN
                                                              SelFld := SelectField('DATE',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Source Historical Date" := SelFld;
                                                            END;

                                                   CaptionML=[ENU=Source Historical Date;
                                                              RUS=Источник Историческая Дата] }
    { 51401;  ;Source Historical Date Formula;DateFormula;
                                                   CaptionML=[ENU=Source Historical Date Formula;
                                                              RUS=Формула Источник Историческая Дата] }
    { 51500;  ;Currency Index Entry;Boolean       ;CaptionML=[ENU=Currency Index Entry;
                                                              RUS=Операция Валютной Переоценки] }
    { 51501;  ;Currency Index      ;Text50        ;TableRelation=Currency;
                                                   OnLookup=BEGIN
                                                              SelFld := SelectField('CODE',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Currency Index" := SelFld;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Currency Index;
                                                              RUS=Переоцениваемая Валюта] }
    { 51600;  ;Financial Instrument No.;Text50    ;TableRelation="Financial Instrument".No.;
                                                   OnLookup=BEGIN
                                                              SelFld := SelectField('CODE',0); //NC S1935 добавлен параметр
                                                              IF SelFld <> '' THEN
                                                                "Financial Instrument No." := SelFld;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Financial Instrument No.;
                                                              RUS=Финансовый Инструмент Но.] }
    { 51610;  ;Unreversable        ;Boolean       ;CaptionML=[ENU=Unreversable;
                                                              RUS=Нереверсируемый] }
  }
  KEYS
  {
    {    ;Mapping Code,Event Code,Deal Type,Settlement Type,Deal Between Books,Company Name,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FunRecRef@1101495000 : Codeunit 50010;
      Text000@1101495002 : TextConst 'ENU=Processing instructions: %1.;RUS=Обработка инструкции: %1.';
      Text001@1101495001 : TextConst 'ENU=Fields ''%1'' is not in table %2.;RUS=Поля ''%1'' нет в таблице %2.';
      Text002@1101495003 : TextConst 'ENU=%1 must be of type %2.;RUS=%1 должен иметь тип %2.';
      Text003@1101495004 : TextConst 'ENU=%1 per instruction Goto does not work on the Data Set;RUS=%1 на инструкцию Goto не работает по Data Set';
      GV@1101495005 : Codeunit 50033;
      isTestMode@1101495006 : Boolean;
      Text006@1101495007 : TextConst 'ENU=The %1 option can only be used internally in the system.;RUS=Опция %1 может использоваться только системой.';
      SourceCodeSetup@1101495008 : Record 242;
      Text007@1101495009 : TextConst 'ENU=Agreement No. must specify the code for the Customer or Supplier;RUS=Код договора должен указываться для Клиента или Поставщика';
      LastFldType@1101495010 : Code[20];
      SelFld@1101495011 : Text[50];
      Text008@1101495013 : TextConst 'ENU=Line% 1 causes recursion.;RUS=Строка %1 вызывает рекурсию.';
      MovingDataSetup@1101495012 : Record 50064;
      DealEvent2@1101495014 : Record 50169;
      Text009@1101495015 : TextConst 'ENU="For the related deal %1 is not found event %2 = %3.";RUS="Для связанной сделки %1 не найдено событие с %2 = %3."';
      g_recDeal@1000000000 : Record 50037;
      gt_recEUFunctions@1000000001 : TEMPORARY Record 50200;
      g_recDim@1000000002 : Record 348;
      g_recDimValue@1000000003 : Record 349;

    PROCEDURE Run@1101495000(Mode@1101495001 : 'Normal,Reverse';NewPostDate@1101495002 : Date;VAR Buffer@1101495000 : TEMPORARY Record 50168;VAR DimTemp@1101495003 : TEMPORARY Record 480;VAR GenJnlLine@1101495004 : TEMPORARY Record 81;VAR ConditionsBufferTemp@1000000000 : TEMPORARY Record 382;VAR EUFunctionsTemp@1101495006 : TEMPORARY Record 50200) ret : Integer;
    BEGIN
      //NC NOS-26 SPA #TODO# -- для измерений временно исп. 480 - разобраться !!

      MovingDataSetup.GET;
      //NC S1909 > PCH
      //NCS2019 > AAP
      //DealEvent2.GET("Event Code","Deal Type","Settlement Type","Deal Between Books");
      DealEvent2.GET("Event Code","Deal Type","Settlement Type","Deal Between Books","Mapping Code","Company Name");
      //NCS2019 < AAP
      //NC S1909 < PCH

      ret := 0;
      IF isCondition(Buffer,DimTemp,ConditionsBufferTemp,EUFunctionsTemp) THEN BEGIN //NCS1914 PCH add EUFunctionsTemp
        IF "Line Type" = "Line Type"::Entry THEN
          //NC S1910 > PCH
          IF NOT ((Mode = Mode::Reverse) AND Unreversable) THEN
          //NC S1910 < PCH
            GenerateGenJnlLine(Mode,NewPostDate,Buffer,DimTemp,GenJnlLine,EUFunctionsTemp);
      //NCS1914 PCH add EUFunctionsTemp
      END ELSE IF isTestMode THEN
        //NC S1910 > PCH
        IF NOT ((Mode = Mode::Reverse) AND Unreversable) THEN
        //NC S1910 < PCH
          GenerateGenJnlLine(Mode,NewPostDate,Buffer,DimTemp,GenJnlLine,EUFunctionsTemp);
      //NCS1914 PCH add EUFunctionsTemp
    END;

    PROCEDURE isCondition@1101495005(VAR Buffer@1101495001 : TEMPORARY Record 50168;VAR DimTemp@1101495009 : TEMPORARY Record 480;VAR ConditionsBufferTemp@1000000000 : TEMPORARY Record 382;VAR EUFunctionsTemp@1101495012 : TEMPORARY Record 50200) retVal : Boolean;
    VAR
      recFld@1101495005 : Record 2000000041;
      recRef@1101495007 : RecordRef;
      fldValue1@1101495002 : Text[1024];
      x_fldValue1@1000000001 : Text[1024];
      fldRef1@1101495006 : FieldRef;
      fldValue2@1101495004 : Text[1024];
      fldRef2@1101495003 : FieldRef;
      v_dec1@1101495000 : Decimal;
      v_dec2@1101495008 : Decimal;
      v_date1@1101495011 : Date;
      v_date2@1101495010 : Date;
    BEGIN
      IF ConditionsBufferTemp.GET("Line No.") THEN
        EXIT(ConditionsBufferTemp.Open);

      IF ("Condition Field 1" = '') OR
         ("Condition Type" = "Condition Type"::"-") THEN BEGIN
        retVal := isLinkCondition(TRUE,Buffer,DimTemp,ConditionsBufferTemp,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp

        ConditionsBufferTemp."Entry No." := "Line No.";
        ConditionsBufferTemp.Open := retVal;
        ConditionsBufferTemp.INSERT;

        EXIT(retVal);
      END;
      //NC S1947 > PCH
      LastFldType := '';
      //NC S1947 < PCH

      recRef.GETTABLE(Rec);
      fldRef1 := recRef.FIELD(FIELDNO("Condition Field 1"));
      fldValue1 := ConvertToValue(Buffer,DimTemp,fldRef1,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp

      IF LastFldType IN ['INTEGER', 'OPTION', 'DECIMAL'] THEN BEGIN
        //TDRANCS-1914>
        x_fldValue1 := fldValue1;
        IF fldValue1 = '' THEN fldValue1 := '0';
        //TDRANCS-1914<
        IF NOT EVALUATE(v_dec1,fldValue1,9) THEN BEGIN
          recFld.Type := recFld.Type::Decimal;
          FIELDERROR("Condition Field 1",STRSUBSTNO(Text002,fldValue1,recFld.Type));
        END;
        //TDRANCS-1914>
        fldValue1 := x_fldValue1;
        //TDRANCS-1914<

        IF "Condition Field 2" = '' THEN
          v_dec2 := 0
        ELSE BEGIN
          fldRef2 := recRef.FIELD(FIELDNO("Condition Field 2"));
          fldValue2 := ConvertToValue(Buffer,DimTemp,fldRef2,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp

          IF NOT EVALUATE(v_dec2,fldValue2,9) THEN BEGIN
            recFld.Type := recFld.Type::Decimal;
            FIELDERROR("Condition Field 2",STRSUBSTNO(Text002,fldValue2,recFld.Type));
          END;
        END;

        CASE "Condition Type" OF
          "Condition Type"::"<" :  retVal := v_dec1 <  v_dec2;
          "Condition Type"::"<=" : retVal := v_dec1 <= v_dec2;
          "Condition Type"::"=" :  retVal := v_dec1  = v_dec2;
          "Condition Type"::">=" : retVal := v_dec1 >= v_dec2;
          "Condition Type"::">" :  retVal := v_dec1 >  v_dec2;
          "Condition Type"::"#" :  retVal := v_dec1 <> v_dec2;
        END;
      END ELSE IF LastFldType = 'DATE' THEN BEGIN

        //NC NCS-2451 > DP
        IF fldValue1 IN ['''', '0'] THEN
          v_date1 := 0D
        ELSE
        //NC NCS-2451 < DP

        IF NOT EVALUATE(v_date1,fldValue1,9) THEN BEGIN
          recFld.Type := recFld.Type::Date;
          FIELDERROR("Condition Field 1",STRSUBSTNO(Text002,fldValue1,recFld.Type));
        END;

        IF "Condition Field 2" IN ['''', '0'] THEN
          v_date2 := 0D
        ELSE BEGIN
          fldRef2 := recRef.FIELD(FIELDNO("Condition Field 2"));
          fldValue2 := ConvertToValue(Buffer,DimTemp,fldRef2,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp

          IF NOT EVALUATE(v_date2,fldValue2,9) THEN BEGIN
            recFld.Type := recFld.Type::Date;
            FIELDERROR("Condition Field 2",STRSUBSTNO(Text002,fldValue2,recFld.Type));
          END;
        END;

        CASE "Condition Type" OF
          "Condition Type"::"<" :  retVal := v_date1 <  v_date2;
          "Condition Type"::"<=" : retVal := v_date1 <= v_date2;
          "Condition Type"::"=" :  retVal := v_date1  = v_date2;
          "Condition Type"::">=" : retVal := v_date1 >= v_date2;
          "Condition Type"::">" :  retVal := v_date1 >  v_date2;
          "Condition Type"::"#" :  retVal := v_date1 <> v_date2;
        END;
      END ELSE BEGIN
        IF "Condition Field 2" = '' THEN
          fldValue2 := ''
        ELSE BEGIN
          fldRef2 := recRef.FIELD(FIELDNO("Condition Field 2"));
          fldValue2 := ConvertToValue(Buffer,DimTemp,fldRef2,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp
        END;

        CASE "Condition Type" OF
          "Condition Type"::"<" :  retVal := fldValue1 <  fldValue2;
          "Condition Type"::"<=" : retVal := fldValue1 <= fldValue2;
          "Condition Type"::"=" :  retVal := fldValue1  = fldValue2;
          "Condition Type"::">=" : retVal := fldValue1 >= fldValue2;
          "Condition Type"::">" :  retVal := fldValue1 >  fldValue2;
          "Condition Type"::"#" :  retVal := fldValue1 <> fldValue2;
        END;
      END;

      retVal := isLinkCondition(retVal,Buffer,DimTemp,ConditionsBufferTemp,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp

      ConditionsBufferTemp."Entry No." := "Line No.";
      ConditionsBufferTemp.Open := retVal;
      ConditionsBufferTemp.INSERT;

      EXIT(retVal);
    END;

    PROCEDURE isLinkCondition@1101495013(retVal@1101495002 : Boolean;VAR Buffer@1101495001 : TEMPORARY Record 50168;VAR DimTemp@1101495000 : TEMPORARY Record 480;VAR ConditionsBufferTemp@1000000000 : TEMPORARY Record 382;VAR EUFunctionsTemp@1101495004 : TEMPORARY Record 50200) retTotalVal : Boolean;
    VAR
      EventUploadTemplate@1101495003 : Record 50170;
    BEGIN
      IF ("Link Condition Line No." = 0) OR
         ("Link Condition Line No." = "Line No.") THEN
        EXIT(retVal);

      EventUploadTemplate := Rec;

      //NC NCS-2420 > DP
      EventUploadTemplate.fn_TempEUFunc;
      //NC NCS-2420 < DP

      IF GV.GET_EventTempl2(EventUploadTemplate,
                            "Mapping Code",
                            "Event Code",
                            "Deal Type",
                            "Settlement Type",
                            "Deal Between Books",
                            //NCS2019 > AAP
                            "Company Name",
                            //NCS2019 < AAP
                            "Link Condition Line No.")
      THEN
        CASE "Link Condition Type" OF
          "Link Condition Type"::"AND" : EXIT(retVal AND EventUploadTemplate.isCondition(Buffer,DimTemp,
                                                            ConditionsBufferTemp,EUFunctionsTemp)); //NCS1914 PCH add EUFunctionsTemp
          "Link Condition Type"::"OR" : EXIT(retVal OR EventUploadTemplate.isCondition(Buffer,DimTemp,
                                                          ConditionsBufferTemp,EUFunctionsTemp)); //NCS1914 PCH add EUFunctionsTemp
        END;

      EXIT(retVal);
    END;

    PROCEDURE ConvertToValue@1101495009(VAR Buffer@1101495001 : TEMPORARY Record 50168;VAR DimTemp@1101495017 : TEMPORARY Record 480;fldRefValue@1101495012 : FieldRef;VAR EUFunctionsTemp@1101495021 : TEMPORARY Record 50200) retValue : Text[1024];
    VAR
      FromPos@1101495005 : Integer;
      ToPos@1101495004 : Integer;
      i@1101495002 : Integer;
      RecRefBuffer@1101495006 : RecordRef;
      RecRefDeal@1101495003 : RecordRef;
      txtInstruction@1101495008 : Text[1024];
      txtInstruction2@1101495014 : Text[1024];
      FldNo@1101495009 : Integer;
      fldRef@1101495010 : FieldRef;
      txtValue@1101495011 : Text[100];
      Deal@1101495013 : Record 50037;
      Dim@1101495015 : Record 348;
      DimValue@1101495016 : Record 349;
      EUFunctions@1101495000 : Record 50200;
      FldType@1101495020 : Code[20];
      v_dec@1101495019 : Decimal;
      v_date@1101495018 : Date;
      v_str@1101495007 : Text[250];
    BEGIN
      FromPos := 0;
      ToPos := 0;

      RecRefBuffer.GETTABLE(Buffer);

      retValue := fldRefValue.VALUE;

      i:=1;
      WHILE (i<=STRLEN(retValue)) AND (0 < STRLEN(retValue)) DO BEGIN
        IF COPYSTR(retValue, i, 1) = '%' THEN
          IF (FromPos = 0) OR (FromPos < ToPos) THEN FromPos := i
          ELSE ToPos := i;
        IF ToPos > FromPos THEN BEGIN
          txtInstruction := UPPERCASE(COPYSTR(retValue, FromPos+1, ToPos-FromPos-1));
          CASE TRUE OF
            COPYSTR(txtInstruction,1,5) = 'DEAL.' :
              BEGIN
                //2208>
                IF g_recDeal."Deal ID" <> Buffer."Deal ID" THEN
                  g_recDeal.GET(Buffer."Deal ID");
                //Deal.GET(Buffer."Deal ID");
                //2208<
                RecRefDeal.GETTABLE(g_recDeal); //2208

                txtInstruction2 := COPYSTR(txtInstruction,6);
                FldNo := GV.GetFieldNoDeal(RecRefDeal,txtInstruction2);
                IF FldNo = 0 THEN
                  fldRefValue.FIELDERROR(STRSUBSTNO(Text001,txtInstruction,RecRefDeal.CAPTION));

                fldRef := RecRefDeal.FIELD(FldNo);
                txtValue := ConvertToScript(fldRef);
                StringReplace(retValue, FromPos, ToPos, txtValue);
              END;
            (COPYSTR(txtInstruction,1,4) = 'DIM.') :
              BEGIN
                txtInstruction2 := COPYSTR(txtInstruction,5);
                //2208>
                IF g_recDim.Code <> txtInstruction2 THEN
                  g_recDim.GET(txtInstruction2);
                //Dim.GET(txtInstruction2);
                //2208<
                IF DimTemp.GET(DATABASE::"G/L Entry",Buffer."Entry No.",g_recDim.Code) THEN BEGIN   //2208
                  //2208
                  //DimValue.GET(DimTemp."Dimension Code",DimTemp."Dimension Value Code");
                  IF NOT ((g_recDimValue."Dimension Code" = DimTemp."Dimension Code")
                        AND (g_recDimValue.Code = DimTemp."Dimension Value Code"))
                    THEN g_recDimValue.GET(DimTemp."Dimension Code",DimTemp."Dimension Value Code");
                  //2208
                  txtValue := DimTemp."Dimension Value Code";
                END ELSE
                  txtValue := '';

                IF txtValue = '' THEN
                  txtValue := ''
                ELSE
                  txtValue := txtValue;
                StringReplace(retValue, FromPos, ToPos, txtValue);
              END;
            //NC S1914 > PCH
            (STRLEN(txtInstruction) <= MAXSTRLEN(EUFunctions.Name)) AND
            //2208>
            //EUFunctions.GET(COPYSTR(txtInstruction,1,MAXSTRLEN(EUFunctions.Name))) :
              gt_recEUFunctions.GET(COPYSTR(txtInstruction,1,MAXSTRLEN(EUFunctions.Name))) :
            //2208<
              BEGIN
                IF EUFunctionsTemp.GET(txtInstruction) THEN BEGIN
                  //NC S1947 > PCH
                  FldType := EUFunctionsTemp.FldType;
                  LastFldType := FldType;
                  //NC S1947 < PCH
                  txtValue := EUFunctionsTemp.Value;

                END ELSE BEGIN
                  EUFunctions.GET(COPYSTR(txtInstruction,1,MAXSTRLEN(EUFunctions.Name))); //2208
                  FldType := CalcFunction(v_dec,v_date,v_str,Buffer,DimTemp,EUFunctions);

                  txtValue := ConvertToStr(FldType,v_dec,v_date,v_str);

                  EUFunctionsTemp := EUFunctions;
                  EUFunctionsTemp.Value := txtValue;
                  //NC S1947 > PCH
                  EUFunctionsTemp.FldType := FldType;
                  //NC S1947 < PCH
                  EUFunctionsTemp.INSERT;
                END;

                StringReplace(retValue, FromPos, ToPos, txtValue);
              END;
            //NC S1914 < PCH
            ELSE BEGIN
              FldNo := GV.GetFieldNoBuffer(RecRefBuffer,txtInstruction);
              IF FldNo = 0 THEN
                fldRefValue.FIELDERROR(STRSUBSTNO(Text001,txtInstruction,RecRefBuffer.CAPTION));

              fldRef := RecRefBuffer.FIELD(FldNo);
              txtValue := ConvertToScript(fldRef);
              StringReplace(retValue, FromPos, ToPos, txtValue);
            END
          END;
          FromPos:=0; ToPos :=0;
          IF STRPOS(retValue, '%') <> 0 THEN
            i := STRPOS(retValue, '%')-1
          ELSE
            i := STRLEN(retValue);
        END
        ELSE
          i+=1;
      END;
    END;

    PROCEDURE CalcFunction@1101495015(VAR v_dec@1101495011 : Decimal;VAR v_date@1101495010 : Date;VAR v_str@1101495009 : Text[250];VAR Buffer@1101495001 : TEMPORARY Record 50168;VAR DimTemp@1101495015 : TEMPORARY Record 480;VAR EUFunctions@1101495007 : TEMPORARY Record 50200) FldType : Code[20];
    VAR
      Deal1@1101495000 : Record 50037;
      Deal2@1101495002 : Record 50037;
      FI@1101495013 : Record 50021;
      isFindLinkDeal@1101495003 : Boolean;
      Buffer2@1101495004 : Record 50168;
      FldType2@1101495012 : Code[20];
      v_dec2@1101495008 : Decimal;
      v_date2@1101495006 : Date;
      v_str2@1101495005 : Text[250];
      is_Empty@1101495014 : Boolean;
    BEGIN
      //NC S1914 > PCH
      v_dec := 0;
      v_date := 0D;
      v_str := '';
      CASE EUFunctions."Fix Algoritm" OF
        EUFunctions."Fix Algoritm"::" " : ;
        EUFunctions."Fix Algoritm"::"Sum Part" : // сумма по событиям связанных сделок
          BEGIN
            Deal1.GET(Buffer."Deal ID");
            IF NOT GetLinkDeal(Deal1,Deal2) THEN
              //NC S1947 > PCH
              //EXIT('');
              EXIT('DECIMAL');
              //NC S1947 > PCH

            //NC S2008 > PCH
            Deal1.TESTFIELD("Settlement Date");
            Deal1.TESTFIELD("Maturity Date");
            //NC S2008 < PCH
            Buffer2.RESET;
            Buffer2.SETRANGE("Id External System",Buffer."Id External System");
            Buffer2.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
            Buffer2.SETRANGE("Event Code",Buffer."Event Code");
            Buffer2.SETRANGE("Deal ID",Deal2."Deal ID");
            Buffer2.SETRANGE("Currency Code",Buffer."Currency Code");
            Buffer2.SETRANGE("Trade Date",Buffer."Trade Date");
            //NC S1914.1 > PCH
            //IF NOT Buffer2.FINDLAST THEN
            //  ERROR(Text009,Deal2."Deal ID",Buffer.FIELDCAPTION("Trade Date"),Buffer."Trade Date");
            //NC S1914.1 < PCH

            FldType2 := CalcExpression(EUFunctions.Value,v_dec2,v_date2,v_str2,Buffer,DimTemp,Deal1,FI);
      // NC S1935 PCH Добавлен параметр
            IF FldType2 <> 'DECIMAL' THEN
              EUFunctions.FIELDERROR(Value,STRSUBSTNO(Text002,EUFunctions.Value,'DECIMAL'));
            v_dec += v_dec2;

            //NCS-2249 > AAP
            IF EUFunctions.Value2 <> '' THEN BEGIN
              FldType2 := CalcExpression(EUFunctions.Value2,v_dec2,v_date2,v_str2,Buffer,DimTemp,Deal1,FI);
              IF FldType2 <> 'DECIMAL' THEN
                EUFunctions.FIELDERROR(Value2,STRSUBSTNO(Text002,EUFunctions.Value2,'DECIMAL'));
              v_dec += v_dec2;
            END;
            //NCS-2249 < AAP

            //NC S1914.1 > PCH
            IF Buffer2.FINDLAST THEN BEGIN
            //NC S1914.1 < PCH
             FldType2 := CalcExpression(EUFunctions.Value,v_dec2,v_date2,v_str2,Buffer2,DimTemp,Deal2,FI);
      //NC S1935 PCH Добавлен параметр
             IF FldType2 <> 'DECIMAL' THEN
               EUFunctions.FIELDERROR(Value,STRSUBSTNO(Text002,EUFunctions.Value,'DECIMAL'));
             v_dec += v_dec2;
            //NC S1914.1 > PCH

              //NCS-2249 > AAP
              IF EUFunctions.Value2 <> '' THEN BEGIN
                FldType2 := CalcExpression(EUFunctions.Value2,v_dec2,v_date2,v_str2,Buffer2,DimTemp,Deal2,FI);
                IF FldType2 <> 'DECIMAL' THEN
                  EUFunctions.FIELDERROR(Value2,STRSUBSTNO(Text002,EUFunctions.Value2,'DECIMAL'));
                v_dec += v_dec2;
              END;
              //NCS-2249 < AAP

            //NC S2008 > PCH
            //END;
            END ELSE BEGIN
              IF ( (Deal1."Maturity Date" > Deal1."Settlement Date") AND (Deal1."Maturity Date" >= Buffer."Trade Date") ) OR
                 ( (Deal1."Maturity Date" < Deal1."Settlement Date") AND (Deal1."Settlement Date" >= Buffer."Trade Date") ) THEN
                ERROR(Text009,Deal2."Deal ID",Buffer.FIELDCAPTION("Trade Date"),Buffer."Trade Date");
            END;
            //NC S2008 < PCH
            //NC S1914.1 < PCH

            FldType := FldType2;
          END;
        EUFunctions."Fix Algoritm"::"Part Deal" : // связанная сделка
          BEGIN
            Deal1.GET(Buffer."Deal ID");
            IF NOT GetLinkDeal(Deal1,Deal2) THEN
              //NC S1947 > PCH
              //EXIT('');
              is_Empty := TRUE;
              //NC S1947 < PCH

            //NC S1914.2 > PCH
            IF NOT is_Empty THEN BEGIN  // проверка на дату пробития
              Buffer2.RESET;
              Buffer2.SETRANGE("Id External System",Buffer."Id External System");
              Buffer2.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
              Buffer2.SETFILTER("Deal ID",'%1|%2',Deal1."Deal ID",Deal2."Deal ID");
              Buffer2.SETRANGE("Event Code",'L');
              Buffer2.SETRANGE("Message Text",'mxContractEventIKNOCK');
              is_Empty := NOT Buffer2.FINDLAST;

              IF NOT is_Empty THEN
                is_Empty := Buffer."Trade Date" < Buffer2."Trade Date"; // значит пробитие еще не наступило
            END;
            //NC S1914.2 < PCH

            FldType := CalcExpression(EUFunctions.Value,v_dec,v_date,v_str,Buffer,DimTemp,Deal2,FI);//NC S1935 PCH Добавлен параметр

            //NC S1947 > PCH
            IF is_Empty THEN
              StrEmpty(FldType);
            //NC S1947 < PCH
          END;
        //NC S1935 > PCH
        EUFunctions."Fix Algoritm"::FI : // финансовый инструмент с карточки сделки
          BEGIN
            Deal1.GET(Buffer."Deal ID");
            FI.GET(Deal1."Financial instrument No.");

            FldType := CalcExpression(EUFunctions.Value,v_dec,v_date,v_str,Buffer,DimTemp,Deal2,FI);

          END;
        //NC S1935 < PCH
        //NC S1947 > PCH
        EUFunctions."Fix Algoritm"::"Sum ID Mess" : // расчет суммы по событиям с одинакомым Message ID
          BEGIN
            Deal1.GET(Buffer."Deal ID");

            FldType := 'DECIMAL';
            v_dec := 0;

            Buffer2.RESET;
            Buffer2.SETCURRENTKEY("Id Legal Entity","Id External System",
                                  "Event Code","External Deal Type","Deal between Book",
                                  "Deal ID","Currency Code","Not Translate",
                                  "Trade Date");
            Buffer2.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
            Buffer2.SETRANGE("Id External System",Buffer."Id External System");
            Buffer2.SETRANGE("Event Code",Buffer."Event Code");
            Buffer2.SETRANGE("Deal between Book",Buffer."Deal between Book");
            Buffer2.SETRANGE("External Deal Type",Buffer."External Deal Type");
            Buffer2.SETRANGE("Deal ID",Buffer."Deal ID");
            Buffer2.SETRANGE("ID Message",Buffer."ID Message");
            Buffer2.SETRANGE("Currency Code",Buffer."Currency Code");
            Buffer2.SETRANGE("Not Translate",FALSE);
            //NCS-2347 > AAP
            //IF Buffer."Deal between Book" THEN
            IF Buffer."Deal between Book" AND (NOT EUFunctions."Ignore Book") THEN
            //NCS-2347 < AAP
              Buffer2.SETRANGE("Book left FO",Buffer."Book left FO");
            Buffer2.SETRANGE("Payment Due Date",Buffer."Payment Due Date");
            Buffer2.SETRANGE("Trade Date",Buffer."Trade Date");

            IF Buffer2.FIND('-') THEN REPEAT

              FldType2 := CalcExpression(EUFunctions.Value,v_dec2,v_date2,v_str2,Buffer2,DimTemp,Deal1,FI);
              IF FldType2 <> 'DECIMAL' THEN
                EUFunctions.FIELDERROR(Value,STRSUBSTNO(Text002,EUFunctions.Value,'DECIMAL'));
              v_dec += v_dec2;

            UNTIL Buffer2.NEXT = 0;

          END;
        //NC S1947 < PCH

        //NCS-2043 > AAP
        EUFunctions."Fix Algoritm"::"Field Prev" : // поле из предыдущего события сделки
          BEGIN

            //NCS-2214 > DP
            CASE EUFunctions."Default Field Type" OF
              EUFunctions."Default Field Type"::TEXT :
                FldType := 'TEXT';
              EUFunctions."Default Field Type"::CODE :
                FldType := 'CODE';
              EUFunctions."Default Field Type"::INTEGER :
                FldType := 'INTEGER';
              EUFunctions."Default Field Type"::OPTION :
                FldType := 'OPTION';
              EUFunctions."Default Field Type"::DECIMAL :
                FldType := 'DECIMAL';
              EUFunctions."Default Field Type"::BOOLEAN :
                FldType := 'BOOLEAN';
              EUFunctions."Default Field Type"::DATE :
                FldType := 'DATE';
              EUFunctions."Default Field Type"::TIME :
                FldType := 'TIME';
              EUFunctions."Default Field Type"::DATETIME :
                FldType := 'DATETIME';
            END;
            //NCS-2214 < DP

            Deal1.GET(Buffer."Deal ID");
            FI.GET(Deal1."Financial instrument No.");

            Buffer2.RESET;
            Buffer2.SETFILTER("Entry No.",'<%1',Buffer."Entry No.");
            Buffer2.SETRANGE("Id External System",Buffer."Id External System");
            Buffer2.SETRANGE("Id Legal Entity",Buffer."Id Legal Entity");
            Buffer2.SETRANGE("Deal ID",Buffer."Deal ID");

            //NC NCS-2043.1 > DP
            {
            Buffer2.SETRANGE("Currency Code",Buffer."Currency Code");
            }
            //NC NCS-2043.1 < DP

            Buffer2.SETRANGE("Deal between Book",Buffer."Deal between Book");
            Buffer2.SETFILTER("Trade Date",'<=%1',Buffer."Trade Date");
            //NC NCS-2204 > DP
            {
            Buffer2.SETFILTER("Maturity Date",'<>%1',0D);
            }
            //NC NCS-2204 < DP
            Buffer2.SETFILTER(Status,'<>%1&<>%2',Buffer2.Status::"Canceled Manualy",Buffer2.Status::"Canceled Automatic");
            //NCS-2347 > AAP
            //IF Buffer."Deal between Book" THEN
            IF Buffer."Deal between Book" AND (NOT EUFunctions."Ignore Book") THEN
            //NCS-2347 < AAP
              Buffer2.SETRANGE("Book left FO",Buffer."Book left FO");

            IF EUFunctions."Event Code Filter" <> '' THEN BEGIN
              Buffer2.SETFILTER("Event Code",EUFunctions."Event Code Filter");
            END;

            IF EUFunctions."External Deal Type Filter" <> '' THEN BEGIN
              Buffer2.SETFILTER("External Deal Type",EUFunctions."External Deal Type Filter");
            END;

            IF Buffer2.FINDLAST THEN BEGIN

              //NC NCS-2204 > DP
              {
              FldType := CalcExpression(EUFunctions.Value,v_dec,v_date,v_str,Buffer,DimTemp,Deal1,FI);
              }
              FldType := CalcExpression(EUFunctions.Value,v_dec,v_date,v_str,Buffer2,DimTemp,Deal1,FI);
              //NC NCS-2204 < DP

            END;
          END;
        //NCS-2043 < AAP

        //NCS-2249 > AAP
      // NCS-2599 BMN 06.07.2017 >
      // EUFunctions."Fix Algoritm"::"7" :
       EUFunctions."Fix Algoritm"::"Sum Fields" :
      // NCS-2599 BMN 06.07.2017 <
          BEGIN
            FldType2 := CalcExpression(EUFunctions.Value,v_dec2,v_date2,v_str2,Buffer,DimTemp,Deal1,FI);
            IF FldType2 <> 'DECIMAL' THEN
              EUFunctions.FIELDERROR(Value,STRSUBSTNO(Text002,EUFunctions.Value,'DECIMAL'));
            v_dec += v_dec2;

            FldType2 := CalcExpression(EUFunctions.Value2,v_dec2,v_date2,v_str2,Buffer,DimTemp,Deal1,FI);
            IF FldType2 <> 'DECIMAL' THEN
              EUFunctions.FIELDERROR(Value2,STRSUBSTNO(Text002,EUFunctions.Value2,'DECIMAL'));
            v_dec += v_dec2;

            FldType := FldType2;
          END;
        //NCS-2249 < AAP
      END;
      //NC S1914 < PCH
    END;

    PROCEDURE CalcExpression@1101495045(txtExpression@1101495003 : Text[1024];VAR v_dec@1101495014 : Decimal;VAR v_date@1101495013 : Date;VAR v_str@1101495012 : Text[250];VAR Buffer@1101495001 : TEMPORARY Record 50168;VAR DimTemp@1101495000 : TEMPORARY Record 480;VAR Deal@1101495002 : TEMPORARY Record 50037;VAR FI@1101495015 : Record 50021) FldType : Code[20];
    VAR
      FromPos@1101495006 : Integer;
      ToPos@1101495005 : Integer;
      i@1101495004 : Integer;
      txtInstruction@1101495007 : Text[1024];
      left_FldType@1101495011 : Code[20];
      left_dec@1101495010 : Decimal;
      left_date@1101495009 : Date;
      left_str@1101495008 : Text[250];
    BEGIN
      //NC S1914 > PCH
      v_dec := 0;
      v_date := 0D;
      v_str := '';
      FromPos := 0;
      ToPos := 0;

      i:=1;
      WHILE (i<=STRLEN(txtExpression)) AND (0 < STRLEN(txtExpression)) DO BEGIN
        IF COPYSTR(txtExpression, i, 1) = '%' THEN
          IF (FromPos = 0) OR (FromPos < ToPos) THEN FromPos := i
          ELSE ToPos := i;
        IF ToPos > FromPos THEN BEGIN
          txtInstruction := UPPERCASE(COPYSTR(txtExpression, FromPos+1, ToPos-FromPos-1));

          left_FldType := GetField(txtInstruction,left_dec,left_date,left_str,Buffer,DimTemp,Deal,FI);//NC S1935 PCH Добавлен параметр

          v_dec := left_dec;
          v_date := left_date;
          v_str := left_str;
          EXIT(left_FldType);

          FromPos:=0; ToPos :=0;
          IF STRPOS(txtExpression, '%') <> 0 THEN
            i := STRPOS(txtExpression, '%')-1
          ELSE
            i := STRLEN(txtExpression);
        END
        ELSE
          i+=1;
      END;
      //NC S1914 < PCH
    END;

    PROCEDURE GetField@1101495059(txtInstruction@1101495003 : Text[1024];VAR v_dec@1101495012 : Decimal;VAR v_date@1101495011 : Date;VAR v_str@1101495010 : Text[250];VAR Buffer@1101495001 : TEMPORARY Record 50168;VAR DimTemp@1101495000 : TEMPORARY Record 480;VAR Deal@1101495002 : TEMPORARY Record 50037;VAR FI@1101495015 : Record 50021) FldType : Code[20];
    VAR
      RecRefBuffer@1101495008 : RecordRef;
      RecRefDeal@1101495007 : RecordRef;
      txtInstruction2@1101495006 : Text[1024];
      FldNo@1101495005 : Integer;
      fldRef@1101495004 : FieldRef;
      EUFunctions@1101495009 : Record 50200;
      Dim@1101495013 : Record 348;
      DimValue@1101495014 : Record 349;
      RecRefFI@1101495016 : RecordRef;
    BEGIN
      //NC S1914 > PCH
      CASE TRUE OF
        COPYSTR(txtInstruction,1,5) = 'DEAL.' :
          BEGIN
            RecRefDeal.GETTABLE(Deal);

            txtInstruction2 := COPYSTR(txtInstruction,6);
            FldNo := GV.GetFieldNoDeal(RecRefDeal,txtInstruction2);
            IF FldNo = 0 THEN
              ERROR(STRSUBSTNO(Text001,txtInstruction,RecRefDeal.CAPTION));

            fldRef := RecRefDeal.FIELD(FldNo);
            FldType := GetValue(fldRef,v_dec,v_date,v_str);

          END;
        //NC S1935 > PCH
        COPYSTR(txtInstruction,1,3) = 'FI.' :
          BEGIN
            RecRefFI.GETTABLE(FI);

            txtInstruction2 := COPYSTR(txtInstruction,4);
            FldNo := GV.GetFieldNoFI(RecRefFI,txtInstruction2);
            IF FldNo = 0 THEN
              ERROR(STRSUBSTNO(Text001,txtInstruction,RecRefFI.CAPTION));

            fldRef := RecRefFI.FIELD(FldNo);
            FldType := GetValue(fldRef,v_dec,v_date,v_str);

          END;
        //NC S1935 < PCH
        (COPYSTR(txtInstruction,1,4) = 'DIM.') :
          BEGIN
            txtInstruction2 := COPYSTR(txtInstruction,5);
            //2208>
            //Dim.GET(txtInstruction2);
            IF g_recDim.Code <> txtInstruction2 THEN
              g_recDim.GET(txtInstruction2);
            //2208<
            FldType := 'CODE';

            IF DimTemp.GET(DimTemp."Dimension Set ID",g_recDim.Code) THEN BEGIN
              DimValue.GET(DimTemp."Dimension Code",DimTemp."Dimension Value Code");
              v_str := DimTemp."Dimension Value Code";
            END ELSE
              v_str := '';

          END;
        (STRLEN(txtInstruction) <= MAXSTRLEN(EUFunctions.Name)) AND
        EUFunctions.GET(COPYSTR(txtInstruction,1,MAXSTRLEN(EUFunctions.Name))) :
          BEGIN
            FldType := CalcFunction(v_dec,v_date,v_str,Buffer,DimTemp,EUFunctions);
          END;
        ELSE BEGIN
          RecRefBuffer.GETTABLE(Buffer);
          FldNo := GV.GetFieldNoBuffer(RecRefBuffer,txtInstruction);

          IF FldNo = 0 THEN
            ERROR(STRSUBSTNO(Text001,txtInstruction,RecRefBuffer.CAPTION));

          fldRef := RecRefBuffer.FIELD(FldNo);

          FldType := GetValue(fldRef,v_dec,v_date,v_str);

        END;
      END;
      //NC S1914 < PCH
    END;

    PROCEDURE GetValue@1101495061(fldRef@1101495000 : FieldRef;VAR v_dec@1101495001 : Decimal;VAR v_date@1101495002 : Date;VAR v_str@1101495004 : Text[250]) FldType : Code[20];
    BEGIN
      //NC S1914 > PCH
      FldType := UPPERCASE(FORMAT(fldRef.TYPE));
      v_dec := 0;
      v_date := 0D;
      v_str := '';

      CASE FldType OF
        'TEXT', 'CODE' :
          BEGIN
            v_str := FORMAT(fldRef.VALUE);
          END;
        'INTEGER', 'OPTION', 'DECIMAL' :
          BEGIN
            v_dec := fldRef.VALUE;
          END;
        'BOOLEAN' :
          BEGIN
            IF fldRef.VALUE THEN
              v_dec := 1
            ELSE
              v_dec := 0;
          END;
        'DATE' :
          BEGIN
            v_date := fldRef.VALUE;
          END;
      END;
      //NC S1914 < PCH
    END;

    PROCEDURE ConvertToStr@1101495010(FldType@1101495000 : Code[20];VAR v_dec@1101495001 : Decimal;VAR v_date@1101495002 : Date;VAR v_str@1101495004 : Text[250]) txtValue : Text[100];
    BEGIN
      //NC S1914 > PCH
      txtValue := '';
      CASE FldType OF
        'TEXT', 'CODE' :
          BEGIN
            txtValue := v_str;
          END;
        'INTEGER', 'OPTION', 'DECIMAL','BOOLEAN' :
          BEGIN
            txtValue := FORMAT(v_dec,0,9);
          END;
        'DATE' :
          BEGIN
            IF v_date = 0D THEN
              txtValue := ''
            ELSE
              //NCS-2043 AAP>>
              //txtValue := FORMAT(v_dec,0,9);
              txtValue := FORMAT(v_date,0,9);
              //NCS-2043 AAP<<
          END;
      END;
      //NC S1935 > PCH
      LastFldType := UPPERCASE(FldType);
      //NC S1935 < PCH
      //NC S1914 < PCH
    END;

    PROCEDURE StringReplace@1000000007(VAR String@1000000000 : Text[100];FromPos@1000000001 : Integer;ToPos@1000000002 : Integer;Value@1000000003 : Text[100]);
    BEGIN
      String :=DELSTR(String, FromPos, ToPos-FromPos+1);
      String:=INSSTR(String, Value, FromPos);
    END;

    PROCEDURE ConvertToScript@1101495001(fldRefValue@1101495000 : FieldRef) retValue : Text[1024];
    BEGIN
      LastFldType := UPPERCASE(FORMAT(fldRefValue.TYPE));
      CASE LastFldType OF
        'TEXT', 'CODE' :
          BEGIN
            retValue := FORMAT(fldRefValue.VALUE);
          END;
        'INTEGER', 'OPTION' :
          BEGIN
            retValue := FORMAT(fldRefValue.VALUE,0,9);
          END;
        'DECIMAL' :
          BEGIN
            retValue := FORMAT(fldRefValue.VALUE,0,9);
          END;
        'BOOLEAN' :
          BEGIN
            IF fldRefValue.VALUE THEN
              retValue := '1'
            ELSE
              retValue := '0';
          END;
        'DATE' :
          BEGIN
            retValue := FORMAT(fldRefValue.VALUE,0,9);
            IF retValue = '' THEN
              retValue := ''
            ELSE
              retValue := retValue;
          END;
      END;
    END;

    PROCEDURE ClearFldRef@1101495007(VAR fldRefValue@1101495000 : FieldRef);
    BEGIN
      LastFldType := UPPERCASE(FORMAT(fldRefValue.TYPE));
      CASE LastFldType OF
        'TEXT', 'CODE' :
            fldRefValue.VALUE := '';
        'INTEGER', 'OPTION' :
            fldRefValue.VALUE := 0;
        'DECIMAL' :
            fldRefValue.VALUE := 0;
        'BOOLEAN' :
            fldRefValue.VALUE := FALSE;
        'DATE' :
            fldRefValue.VALUE := 0D;
        'TIME' :
            fldRefValue.VALUE := 0T;
      END;
    END;

    PROCEDURE StrEmpty@1101495017(FldType@1101495001 : Code[20]) txtValue : Text[100];
    BEGIN
      //NC S1947 > PCH
      CASE FldType OF
        'TEXT', 'CODE' :
            txtValue := '';
        'INTEGER', 'OPTION' :
            txtValue := '0';
        'DECIMAL' :
            txtValue := '0';
        'BOOLEAN' :
            txtValue := '0';
        'DATE' :
            txtValue := '';
        'TIME' :
            txtValue := '';
        ELSE
            txtValue := '';
      END;
      //NC S1947 < PCH
    END;

    PROCEDURE GenerateGenJnlLine@1101495011(Mode@1101495000 : 'Normal,Reverse';NewPostDate@1101495002 : Date;VAR Buffer@1101495003 : TEMPORARY Record 50168;VAR DimTemp@1101495001 : TEMPORARY Record 480;VAR GenJnlLine@1101495007 : TEMPORARY Record 81;VAR EUFunctionsTemp@1101495034 : TEMPORARY Record 50200);
    VAR
      iField@1101495004 : Integer;
      recRef@1101495005 : RecordRef;
      fldRef@1101495006 : FieldRef;
      LineNo@1101495008 : Integer;
      fldNoGenJnlLine@1101495011 : Integer;
      recRefGenJnlLine@1101495009 : RecordRef;
      fldRefGenJnlLine@1101495010 : FieldRef;
      fldValue@1101495012 : Text[1024];
      retInt@1101495015 : Integer;
      retDec@1101495016 : Decimal;
      retText@1101495017 : Text[100];
      retDate@1101495018 : Date;
      retBool@1101495019 : Boolean;
      EventTemplDim@1101495021 : Record 50171;
      recFld@1101495022 : Record 2000000041;
      AccNo@1101495023 : Code[20];
      CustPostingGroup@1101495024 : Record 92;
      VendPostingGroup@1101495025 : Record 93;
      BankAccount@1101495027 : Record 270;
      BankAccountPostingGroup@1101495026 : Record 277;
      DefDim@1101495028 : Record 352;
      VendorAgreement@1101495029 : Record 14901;
      CustAgreement@1101495030 : Record 14902;
      DefDimAdv@1101495031 : Record 50128;
      Customer@1101495032 : Record 18;
      Vendor@1101495033 : Record 23;
      HistPostDate@1101495013 : Date;
      LinkedDimensionValue@1101495014 : Record 50016;
      TempDimSetEntry@1101495020 : TEMPORARY Record 480;
      DimMgt@1101495035 : Codeunit 408;
    BEGIN
      LineNo := 10000;
      IF GenJnlLine.FINDLAST THEN
        LineNo := GenJnlLine."Line No." + 10000;

      recRef.GETTABLE(Rec);

      GenJnlLine.INIT;
      GenJnlLine."Journal Template Name" := '';
      GenJnlLine."Journal Batch Name" := '';
      GenJnlLine."Line No." := LineNo;
      recRefGenJnlLine.GETTABLE(GenJnlLine);

      FOR iField := 1 TO recRef.FIELDCOUNT DO BEGIN
        fldRef := recRef.FIELDINDEX(iField);

        IF (fldRef.NUMBER >= 50000) AND
           (DELCHR(FORMAT(fldRef.VALUE),'<>',' ') <> '') THEN BEGIN

          IF UPPERCASE(fldRef.NAME) IN['SIGN',
                                       'POSTING DATE FORMULA',
                                       //NC S1910 > PCH
                                       'UNREVERSABLE',
                                       //NC S1910 < PCH
                                       'SOURCE HISTORICAL DATE FORMULA'] THEN BEGIN
            ; //ничего неделаем
          END ELSE IF UPPERCASE(fldRef.NAME) = 'AMOUNT' THEN BEGIN
            fldValue := ConvertToValue(Buffer,DimTemp,fldRef,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp
            fldRefGenJnlLine := recRefGenJnlLine.FIELD(13);  //"Amount"

            IF NOT EVALUATE(retDec,fldValue,9) THEN
              fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,fldRefGenJnlLine.TYPE));
            IF Sign = Sign::"-" THEN
              retDec := -1.0 * retDec;
            fldRefGenJnlLine.VALUE(retDec);
          END ELSE IF UPPERCASE(fldRef.NAME) = 'AMOUNT (LCY)' THEN BEGIN
            fldValue := ConvertToValue(Buffer,DimTemp,fldRef,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp
            fldRefGenJnlLine := recRefGenJnlLine.FIELD(16);  //"Amount (LCY)"

            IF NOT EVALUATE(retDec,fldValue,9) THEN
              fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,fldRefGenJnlLine.TYPE));
            IF Sign = Sign::"-" THEN
              retDec := -1.0 * retDec;
            fldRefGenJnlLine.VALUE(retDec);
          END ELSE IF UPPERCASE(FORMAT(fldRef.TYPE)) <> 'TEXT' THEN BEGIN
            fldNoGenJnlLine := GV.GetFieldNoGenJnlLine(recRefGenJnlLine,fldRef.NAME,fldRef.NUMBER);
            fldRefGenJnlLine := recRefGenJnlLine.FIELD(fldNoGenJnlLine);

            fldRefGenJnlLine.VALUE(fldRef.VALUE);

          END ELSE BEGIN
            fldNoGenJnlLine := GV.GetFieldNoGenJnlLine(recRefGenJnlLine,fldRef.NAME,fldRef.NUMBER);
            fldRefGenJnlLine := recRefGenJnlLine.FIELD(fldNoGenJnlLine);

            fldValue := ConvertToValue(Buffer,DimTemp,fldRef,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp

            CASE UPPERCASE(FORMAT(fldRefGenJnlLine.TYPE)) OF
              'TEXT', 'CODE' :
                BEGIN
                  IF NOT EVALUATE(retText,fldValue) THEN
                    fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,fldRefGenJnlLine.TYPE));
                  fldRefGenJnlLine.VALUE(retText);
                END;
              'INTEGER', 'OPTION' :
                BEGIN
                  IF NOT EVALUATE(retInt,fldValue,9) THEN
                    fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,fldRefGenJnlLine.TYPE));
                  fldRefGenJnlLine.VALUE(retInt);
                END;
              'DECIMAL' :
                BEGIN
                  IF NOT EVALUATE(retDec,fldValue,9) THEN
                    fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,fldRefGenJnlLine.TYPE));
                  fldRefGenJnlLine.VALUE(retDec);
                END;
              'BOOLEAN' :
                BEGIN
                  IF NOT EVALUATE(retBool,fldValue) THEN
                    fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,fldRefGenJnlLine.TYPE));
                  fldRefGenJnlLine.VALUE(retBool);
                END;
              'DATE' :
                BEGIN
                  IF (fldValue = '') OR (fldValue = '0') THEN
                    retDate := 0D
                  ELSE IF NOT EVALUATE(retDate,fldValue,9) THEN
                    fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,fldRefGenJnlLine.TYPE));

                  CASE UPPERCASE(fldRef.NAME) OF
                    'POSTING DATE' :
                      IF (Mode = Mode::Reverse) AND
                         (NewPostDate <> 0D) THEN BEGIN

                        //NC NCS-2061 > DP
                        IF NOT DealEvent2."Reverse at Current FX Rate" THEN
                        //NC NCS-2061 < DP

                        HistPostDate := retDate;
                        retDate := NewPostDate
                      END ELSE IF (retDate <> 0D) AND
                         (FORMAT("Posting Date Formula") <> '') THEN
                        retDate := CALCDATE("Posting Date Formula",retDate);
                    'SOURCE HISTORICAL DATE' :
                      IF (retDate <> 0D) AND
                         (FORMAT("Source Historical Date Formula") <> '') THEN
                        retDate := CALCDATE("Source Historical Date Formula",retDate);
                  END;

                  fldRefGenJnlLine.VALUE(retDate);
                END;
            END;

          END;

        END;
      END;

      //recRefGenJnlLine.INSERT;
      recRefGenJnlLine.SETTABLE(GenJnlLine);

      IF (Mode = Mode::Reverse) THEN BEGIN
        GenJnlLine.Correction := NOT GenJnlLine.Correction;
        GenJnlLine.Amount := -1.0 * GenJnlLine.Amount;
        GenJnlLine."Amount (LCY)" := -1.0 * GenJnlLine."Amount (LCY)";
        //NC S1909 > PCH
        GenJnlLine.Description := COPYSTR(DealEvent2."Storno Prefix Descriptions" + GenJnlLine.Description,
                                          1,MAXSTRLEN(GenJnlLine.Description));
        //NC S1909 < PCH
        IF (HistPostDate <> 0D) THEN BEGIN
          GenJnlLine."Reversing Entry" := TRUE;
          GenJnlLine."Source Historical Date" := HistPostDate;
        END;
      END;
      GenJnlLine.INSERT;

      EventTemplDim.RESET;
      EventTemplDim.SETRANGE("Mapping Code","Mapping Code");
      EventTemplDim.SETRANGE("Event Code","Event Code");
      EventTemplDim.SETRANGE("Deal Type","Deal Type");
      EventTemplDim.SETRANGE("Settlement Type","Settlement Type");
      EventTemplDim.SETRANGE("Deal Between Books","Deal Between Books");

      //NCS2019 > AAP
      EventTemplDim.SETRANGE("Company Name","Company Name");
      //NCS2019 < AAP

      EventTemplDim.SETRANGE("Line No.","Line No.");
      //NC NOS-26 > SPA
      DimMgt.GetDimensionSet(TempDimSetEntry,0);
      //NC NOS-26 < SPA

      IF GV.FIND_EventTemplDim2(EventTemplDim) THEN REPEAT
        //NC NOS-26 > SPA
        {
        DimGenJnlLine.INIT;
        DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
        DimGenJnlLine."Journal Template Name" := '';
        DimGenJnlLine."Journal Batch Name" := '';
        DimGenJnlLine."Journal Line No." := LineNo;
        DimGenJnlLine."Allocation Line No." := 0;
        DimGenJnlLine."Dimension Code" := EventTemplDim."Dimension Code";
        IF DELCHR(EventTemplDim."Dimension Value Code",'<>',' ') <> '' THEN BEGIN
          recRef.GETTABLE(EventTemplDim);
          fldRef := recRef.FIELD(EventTemplDim.FIELDNO("Dimension Value Code"));
          fldValue := ConvertToValue(Buffer,DimTemp,fldRef,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp

          IF NOT EVALUATE(retText,FORMAT(fldValue)) THEN BEGIN
            recFld.Type := recFld.Type::OemCode;
            fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,recFld.Type));
          END;
          DimGenJnlLine."Dimension Value Code" := retText;

        END;
        DimGenJnlLine.INSERT;
        }
        TempDimSetEntry.INIT;
        TempDimSetEntry.VALIDATE("Dimension Code",EventTemplDim."Dimension Code");
        IF DELCHR(EventTemplDim."Dimension Value Code",'<>',' ') <> '' THEN BEGIN
          recRef.GETTABLE(EventTemplDim);
          fldRef := recRef.FIELD(EventTemplDim.FIELDNO("Dimension Value Code"));
          fldValue := ConvertToValue(Buffer,DimTemp,fldRef,EUFunctionsTemp); //NCS1914 PCH add EUFunctionsTemp

          IF NOT EVALUATE(retText,FORMAT(fldValue)) THEN BEGIN
            recFld.Type := recFld.Type::OemCode;
            fldRef.FIELDERROR(STRSUBSTNO(Text002,fldValue,recFld.Type));
          END;
          TempDimSetEntry.VALIDATE("Dimension Value Code",retText);
        END;
        TempDimSetEntry.INSERT;
        //NC NOS-26 < SPA
      UNTIL GV.NEXT_EventTemplDim2(EventTemplDim) = 0;

      //добавление связанного измерения для IC
      //NC NOS-26 > SPA
      {
      IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,MovingDataSetup."Customer Dimension Code") THEN BEGIN
        LinkedDimensionValue.SETRANGE("Dimension Code",MovingDataSetup."Customer Dimension Code");
        LinkedDimensionValue.SETRANGE("Dimension Value",DimGenJnlLine."Dimension Value Code");
        LinkedDimensionValue.SETFILTER(Blocked,'%1',FALSE);
        LinkedDimensionValue.SETFILTER("Value Selection",'%1',FALSE);
        LinkedDimensionValue.SETFILTER("Linked Dimension Value",'<>%1','');
        IF LinkedDimensionValue.FINDSET(FALSE,FALSE) THEN REPEAT
          DimGenJnlLine.INIT;
          DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
          DimGenJnlLine."Journal Template Name" := '';
          DimGenJnlLine."Journal Batch Name" := '';
          DimGenJnlLine."Journal Line No." := LineNo;
          DimGenJnlLine."Allocation Line No." := 0;
          DimGenJnlLine."Dimension Code" := LinkedDimensionValue."Linked Dimension Code";
          DimGenJnlLine."Dimension Value Code" := LinkedDimensionValue."Linked Dimension Value";
          IF DimGenJnlLine.INSERT THEN;
        UNTIL LinkedDimensionValue.NEXT=0;
      END;
      }
      IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",MovingDataSetup."Customer Dimension Code") THEN BEGIN
        LinkedDimensionValue.SETRANGE("Dimension Code",MovingDataSetup."Customer Dimension Code");
        LinkedDimensionValue.SETRANGE("Dimension Value",TempDimSetEntry."Dimension Value Code");
        LinkedDimensionValue.SETFILTER(Blocked,'%1',FALSE);
        LinkedDimensionValue.SETFILTER("Value Selection",'%1',FALSE);
        LinkedDimensionValue.SETFILTER("Linked Dimension Value",'<>%1','');
        IF LinkedDimensionValue.FINDSET(FALSE,FALSE) THEN REPEAT
          TempDimSetEntry.INIT;
          TempDimSetEntry.VALIDATE("Dimension Code",LinkedDimensionValue."Linked Dimension Code");
          IF NOT TempDimSetEntry.FIND THEN BEGIN
            TempDimSetEntry.VALIDATE("Dimension Value Code",LinkedDimensionValue."Linked Dimension Value");
            TempDimSetEntry.INSERT;
          END;
        UNTIL LinkedDimensionValue.NEXT=0;
      END;
      //NC NOS-26 < SPA
      //добавление измерений по умолчанию
      CASE GenJnlLine."Account Type" OF
        GenJnlLine."Account Type"::"G/L Account" :
          AccNo := GenJnlLine."Account No.";
        GenJnlLine."Account Type"::Customer :
          IF GenJnlLine."Posting Group" <> '' THEN BEGIN
            IF CustPostingGroup.GET(GenJnlLine."Posting Group") THEN
              AccNo := CustPostingGroup."Receivables Account";
          END ELSE IF (GenJnlLine."Account No." <> '') AND
                      (GenJnlLine."Agreement No." <> '') THEN BEGIN
            IF CustAgreement.GET(GenJnlLine."Account No.",GenJnlLine."Agreement No.") THEN
              IF CustPostingGroup.GET(CustAgreement."Customer Posting Group") THEN BEGIN
                GenJnlLine."Posting Group" := CustAgreement."Customer Posting Group";
                GenJnlLine.MODIFY;
                AccNo := CustPostingGroup."Receivables Account";
              END;
          END ELSE IF (GenJnlLine."Account No." <> '') THEN BEGIN
            IF Customer.GET(GenJnlLine."Account No.") THEN
              IF CustPostingGroup.GET(Customer."Customer Posting Group") THEN BEGIN
                GenJnlLine."Posting Group" := Customer."Customer Posting Group";
                GenJnlLine.MODIFY;
                AccNo := CustPostingGroup."Receivables Account";
              END;
          END;
        GenJnlLine."Account Type"::Vendor :
          IF GenJnlLine."Posting Group" <> '' THEN BEGIN
            IF VendPostingGroup.GET(GenJnlLine."Posting Group") THEN
              AccNo := VendPostingGroup."Payables Account";
          END ELSE IF (GenJnlLine."Account No." <> '') AND
                      (GenJnlLine."Agreement No." <> '') THEN BEGIN
            IF VendorAgreement.GET(GenJnlLine."Account No.",GenJnlLine."Agreement No.") THEN
              IF VendPostingGroup.GET(VendorAgreement."Vendor Posting Group") THEN BEGIN
                GenJnlLine."Posting Group" := VendorAgreement."Vendor Posting Group";
                GenJnlLine.MODIFY;
                AccNo := VendPostingGroup."Payables Account";
              END;
          END ELSE IF (GenJnlLine."Account No." <> '') THEN BEGIN
            IF Vendor.GET(GenJnlLine."Account No.") THEN
              IF VendPostingGroup.GET(Vendor."Vendor Posting Group") THEN BEGIN
                GenJnlLine."Posting Group" := Vendor."Vendor Posting Group";
                GenJnlLine.MODIFY;
                AccNo := VendPostingGroup."Payables Account";
              END;
          END;
        GenJnlLine."Account Type"::"Bank Account" :
          IF GenJnlLine."Posting Group" <> '' THEN BEGIN
            IF BankAccountPostingGroup.GET(GenJnlLine."Posting Group") THEN
              AccNo := BankAccountPostingGroup."G/L Bank Account No.";
          END ELSE IF GenJnlLine."Account No." <> '' THEN BEGIN
            IF BankAccount.GET(GenJnlLine."Account No.") AND
               BankAccountPostingGroup.GET(BankAccount."Bank Acc. Posting Group") THEN BEGIN
              AccNo := BankAccountPostingGroup."G/L Bank Account No.";
              GenJnlLine."Posting Group" := BankAccount."Bank Acc. Posting Group";
              GenJnlLine.MODIFY;
            END;
          END;
      END;
      IF AccNo <> '' THEN BEGIN
        DefDim.RESET;
        DefDim.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefDim.SETRANGE("No.",AccNo);
        DefDim.SETFILTER("Dimension Code",'<>%1','');
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code");
        IF DefDim.FINDSET THEN REPEAT
          //NC NOS-26 > SPA
          {
          IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,DefDim."Dimension Code") THEN BEGIN
            IF DimGenJnlLine."Dimension Value Code" = '' THEN BEGIN
              DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
              DimGenJnlLine.MODIFY;
            END;
          END ELSE BEGIN
            DimGenJnlLine.INIT;
            DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
            DimGenJnlLine."Journal Template Name" := '';
            DimGenJnlLine."Journal Batch Name" := '';
            DimGenJnlLine."Journal Line No." := LineNo;
            DimGenJnlLine."Allocation Line No." := 0;
            DimGenJnlLine."Dimension Code" := DefDim."Dimension Code";
            DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
            DimGenJnlLine.INSERT;
          END;
          }
          IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DefDim."Dimension Code") THEN BEGIN
            IF TempDimSetEntry."Dimension Value Code" = '' THEN BEGIN
              TempDimSetEntry.VALIDATE("Dimension Value Code",DefDim."Dimension Value Code");
              TempDimSetEntry.MODIFY;
            END;
          END ELSE BEGIN
            TempDimSetEntry.INIT;
            TempDimSetEntry.VALIDATE("Dimension Code",DefDim."Dimension Code");
            TempDimSetEntry.VALIDATE("Dimension Value Code",DefDim."Dimension Value Code");
            TempDimSetEntry.INSERT;
          END;
          //NC NOS-26 < SPA
        UNTIL DefDim.NEXT = 0;
      END;
      //добавление измерений по умолчанию для ФИ
      IF GenJnlLine."Financial Instrument No." <> '' THEN BEGIN
        DefDim.RESET;
        DefDim.SETRANGE("Table ID",DATABASE::"Financial Instrument");
        DefDim.SETRANGE("No.",GenJnlLine."Financial Instrument No.");
        DefDim.SETFILTER("Dimension Code",'<>%1','');
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code");
        IF DefDim.FINDSET THEN REPEAT
          //NC NOS-26 > SPA
          {
          IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,DefDim."Dimension Code") THEN BEGIN
            IF DimGenJnlLine."Dimension Value Code" = '' THEN BEGIN
              DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
              DimGenJnlLine.MODIFY;
            END;
          END ELSE BEGIN
            DimGenJnlLine.INIT;
            DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
            DimGenJnlLine."Journal Template Name" := '';
            DimGenJnlLine."Journal Batch Name" := '';
            DimGenJnlLine."Journal Line No." := LineNo;
            DimGenJnlLine."Allocation Line No." := 0;
            DimGenJnlLine."Dimension Code" := DefDim."Dimension Code";
            DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
            DimGenJnlLine.INSERT;
          END;
          }
          IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DefDim."Dimension Code") THEN BEGIN
            IF TempDimSetEntry."Dimension Value Code" = '' THEN BEGIN
              TempDimSetEntry.VALIDATE("Dimension Value Code",DefDim."Dimension Value Code");
              TempDimSetEntry.MODIFY;
            END;
          END ELSE BEGIN
            TempDimSetEntry.INIT;
            TempDimSetEntry.VALIDATE("Dimension Code",DefDim."Dimension Code");
            TempDimSetEntry.VALIDATE("Dimension Value Code",DefDim."Dimension Value Code");
            TempDimSetEntry.INSERT;
          END;
          //NC NOS-26 < SPA
        UNTIL DefDim.NEXT = 0;
      END;
      //добавление измерений по умолчанию для Договора
      IF (GenJnlLine."Account No." <> '') AND (GenJnlLine."Agreement No." <> '') THEN BEGIN
        //NC S1498 > PCH
        {
        DefDim.RESET;
        DefDim.SETRANGE("No.",GenJnlLine."Account No.");
        DefDim.SETFILTER("Dimension Code",'<>%1','');
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code");
        CASE GenJnlLine."Account Type" OF
          GenJnlLine."Account Type"::Customer :
            DefDim.SETRANGE("Table ID",DATABASE::"Customer Agreement");
          GenJnlLine."Account Type"::Vendor :
            DefDim.SETRANGE("Table ID",DATABASE::"Vendor Agreement");
          ELSE
            ERROR(Text007);
        END;
        IF DefDim.FINDSET THEN REPEAT
          IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,DefDim."Dimension Code") THEN BEGIN
            IF DimGenJnlLine."Dimension Value Code" = '' THEN BEGIN
              DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
              DimGenJnlLine.MODIFY;
            END;
          END ELSE BEGIN
            DimGenJnlLine.INIT;
            DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
            DimGenJnlLine."Journal Template Name" := '';
            DimGenJnlLine."Journal Batch Name" := '';
            DimGenJnlLine."Journal Line No." := LineNo;
            DimGenJnlLine."Allocation Line No." := 0;
            DimGenJnlLine."Dimension Code" := DefDim."Dimension Code";
            DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
            DimGenJnlLine.INSERT;
          END;
        UNTIL DefDim.NEXT = 0;
        }
        DefDimAdv.RESET;
        DefDimAdv.SETRANGE("No.",GenJnlLine."Account No.");
        DefDimAdv.SETFILTER("Dimension Code",'<>%1','');
        DefDimAdv.SETFILTER("Dimension Value Code",'<>%1','');
        DefDimAdv.SETFILTER("Value Posting",'%1|%2',DefDimAdv."Value Posting"::"Code Mandatory",DefDimAdv."Value Posting"::"Same Code");
        CASE GenJnlLine."Account Type" OF
          GenJnlLine."Account Type"::Customer :
            DefDimAdv.SETRANGE("Table ID",DATABASE::"Customer Agreement");
          GenJnlLine."Account Type"::Vendor :
            DefDimAdv.SETRANGE("Table ID",DATABASE::"Vendor Agreement");
          ELSE
            ERROR(Text007);
        END;
        IF DefDimAdv.FINDSET THEN REPEAT
          //NC NOS-26 > SPA
          {
          IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,DefDimAdv."Dimension Code") THEN BEGIN
            IF DimGenJnlLine."Dimension Value Code" = '' THEN BEGIN
              DimGenJnlLine."Dimension Value Code" := DefDimAdv."Dimension Value Code";
              DimGenJnlLine.MODIFY;
            END;
          END ELSE BEGIN
            DimGenJnlLine.INIT;
            DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
            DimGenJnlLine."Journal Template Name" := '';
            DimGenJnlLine."Journal Batch Name" := '';
            DimGenJnlLine."Journal Line No." := LineNo;
            DimGenJnlLine."Allocation Line No." := 0;
            DimGenJnlLine."Dimension Code" := DefDimAdv."Dimension Code";
            DimGenJnlLine."Dimension Value Code" := DefDimAdv."Dimension Value Code";
            DimGenJnlLine.INSERT;
          END;
          }
          IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DefDimAdv."Dimension Code") THEN BEGIN
            IF TempDimSetEntry."Dimension Value Code" = '' THEN BEGIN
              TempDimSetEntry.VALIDATE("Dimension Value Code",DefDimAdv."Dimension Value Code");
              TempDimSetEntry.MODIFY;
            END;
          END ELSE BEGIN
            TempDimSetEntry.INIT;
            TempDimSetEntry.VALIDATE("Dimension Code",DefDimAdv."Dimension Code");
            TempDimSetEntry.VALIDATE("Dimension Value Code",DefDimAdv."Dimension Value Code");
            TempDimSetEntry.INSERT;
          END;
          //NC NOS-26 < SPA
        UNTIL DefDimAdv.NEXT = 0;
        //NC S1498 < PCH
      END;

      //NC NOS-26 > SPA
      DimMgt.UpdateGenJnlLineDim(GenJnlLine,DimMgt.GetDimensionSetID(TempDimSetEntry));
      GenJnlLine.MODIFY;
      //NC NOS-26 < SPA
    END;

    PROCEDURE SelectField@1101495002(FieldType@1101495002 : Code[30];SelectTable@1101495004 : Integer) retFldText : Text[50];
    VAR
      recField@1101495001 : Record 2000000041;
      fldRef@1101495003 : FieldRef;
    BEGIN
      //NC SPA #TODOD# Добавить страницу 50224
      {
      recField.RESET;
      //NC S1935 > PCH
      IF SelectTable <> 0 THEN
        recField.SETFILTER(TableNo,'%1',SelectTable)
      ELSE
      //NC S1935 < PCH
        recField.SETFILTER(TableNo,'%1|%2',DATABASE::"Buffer Deal Data from XML",DATABASE::Deal);

      FieldsForm.SETTABLEVIEW(recField);
      FieldsForm.LOOKUPMODE(TRUE);
      IF FieldsForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        FieldsForm.GETRECORD(recField);

        CASE FieldType OF
          'TEXT','CODE' :
            IF NOT (recField.Type IN [recField.Type::OemText,recField.Type::OemCode]) THEN
              ERROR(Text002,recField.FieldName,FieldType);
          'DECIMAL','INTEGER','OPTION' :
            IF NOT (recField.Type IN [recField.Type::Decimal,recField.Type::Integer,recField.Type::Option]) THEN
              ERROR(Text002,recField.FieldName,FieldType);
          'DATE' :
            IF NOT (recField.Type IN [recField.Type::Date]) THEN
              ERROR(Text002,recField.FieldName,FieldType);
          'TIME' :
            IF NOT (recField.Type IN [recField.Type::Time]) THEN
              ERROR(Text002,recField.FieldName,FieldType);
          'DATETIME' :
            IF NOT (recField.Type IN [recField.Type::DateTime]) THEN
              ERROR(Text002,recField.FieldName,FieldType);
          'BOOLEAN' :
            IF NOT (recField.Type IN [recField.Type::Boolean]) THEN
              ERROR(Text002,recField.FieldName,FieldType);
        END;

        IF recField.TableNo = DATABASE::Deal THEN
          retFldText := '%DEAL.' + recField.FieldName + '%'
        //NC S1935 > PCH
        ELSE IF recField.TableNo = DATABASE::"Financial Instrument" THEN
          retFldText := '%FI.' + recField.FieldName + '%'
        //NC S1935 < PCH
        ELSE
          retFldText := '%' + recField.FieldName + '%';
      END ELSE
        retFldText := '';
      }
    END;

    PROCEDURE SelectFunction@1101495008(FieldType@1101495002 : Code[30]) retFldText : Text[50];
    VAR
      EUFunctions@1101495001 : Record 50200;
      fldRef@1101495003 : FieldRef;
    BEGIN
      //NC SPA #TODOD# Добавить страницу 50104
      {
      //NC S1914 > PCH
      EUFunctions.RESET;

      EUFunctionsForm.SETTABLEVIEW(EUFunctions);
      EUFunctionsForm.LOOKUPMODE(TRUE);
      IF EUFunctionsForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EUFunctionsForm.GETRECORD(EUFunctions);

        retFldText := '%' + EUFunctions.Name + '%';
      END ELSE
        retFldText := '';

      //NC S1914 < PCH
      }
    END;

    PROCEDURE SelectDim@1101495003() retFldText : Text[50];
    VAR
      Dimension@1101495002 : Record 348;
      DimensionForm@1101495000 : Page 548;
    BEGIN
      Dimension.RESET;
      DimensionForm.SETTABLEVIEW(Dimension);
      DimensionForm.LOOKUPMODE(TRUE);
      IF DimensionForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimensionForm.GETRECORD(Dimension);
        retFldText := '%DIM.' + Dimension.Code + '%';
      END ELSE
        retFldText := '';
    END;

    PROCEDURE SetTestMode@1101495004(NewTestMode@1101495000 : Boolean);
    BEGIN
      isTestMode := NewTestMode;
    END;

    PROCEDURE ClearSym@1101495006(TxtIn@1101495000 : Text[1024]) TxtOut : Text[1024];
    BEGIN
      TxtOut := DELCHR(TxtIn,'<>',' ');
      WHILE 0 <> STRPOS(TxtOut, '  ') DO BEGIN
        TxtOut := DELSTR(TxtOut,STRPOS(TxtOut, '  '),1);
      END;
    END;

    PROCEDURE CalcIndentation@1101495012() Ind : Integer;
    VAR
      Arr_Ind@1101495000 : ARRAY [50] OF Integer;
      i@1101495001 : Integer;
      EUTempl@1101495002 : Record 50170;
      j@1101495003 : Integer;
    BEGIN
      Ind := 0;

      EUTempl := Rec;

      FOR i := 1 TO ARRAYLEN(Arr_Ind) DO BEGIN
        Arr_Ind[i] := EUTempl."Line No.";

        IF EUTempl."Link Condition Line No." = 0 THEN
          EXIT(Ind);

        //проверка на рекурсию
        FOR j := 1 TO i DO
          IF Arr_Ind[j] = EUTempl."Link Condition Line No." THEN
            ERROR(Text008,EUTempl."Line No.");

        //NCS2019 > AAP
        //EUTempl.GET("Mapping Code","Event Code","Deal Type","Settlement Type","Deal Between Books",
        //            EUTempl."Link Condition Line No.");
        EUTempl.GET("Mapping Code","Event Code","Deal Type","Settlement Type","Deal Between Books", "Company Name",
                    EUTempl."Link Condition Line No.");
        //NCS2019 < AAP
        Ind += 1;


      END;

      EXIT(Ind);
    END;

    PROCEDURE GetLinkDeal@1101495038(Deal1@1101495000 : Record 50037;VAR Deal2@1101495001 : Record 50037) isFindLinkDeal : Boolean;
    BEGIN
      //NC S1914 > PCH
      IF Deal1."Deal ID" <> Deal1.Number THEN BEGIN // ищем родительскую
        Deal2.RESET;
        Deal2.SETRANGE("Deal ID",Deal1.Number);
        Deal2.SETRANGE("Agreement No.",Deal1."Root Contract");
        IF Deal2.FINDFIRST THEN
          isFindLinkDeal := TRUE;
      END ELSE IF Deal1."Deal ID" = Deal1.Number THEN BEGIN // ищем дочернюю
        Deal2.RESET;
        Deal2.SETFILTER("Deal ID",'<>%1',Deal1."Deal ID");
        Deal2.SETRANGE(Number,Deal1.Number);
        Deal2.SETRANGE("Root Contract",Deal1."Agreement No.");
        IF Deal2.FINDFIRST THEN
          isFindLinkDeal := TRUE;
      END;
      EXIT(isFindLinkDeal);
      //NC S1914 < PCH
    END;

    PROCEDURE fn_TempEUFunc@1000000000();
    VAR
      l_recEUFunctions@1000000000 : Record 50200;
    BEGIN
      //2208>
      IF l_recEUFunctions.FINDSET(FALSE,FALSE) THEN REPEAT
        gt_recEUFunctions := l_recEUFunctions;
        IF gt_recEUFunctions.INSERT THEN;
      UNTIL l_recEUFunctions.NEXT = 0;
      //2208<
    END;

    BEGIN
    {
      NC S1753 PCH
      NC S1498 PCH оптимизация частично оставлена
      NC S1909 PCH
      NC S1910 PCH добавлено поле Unreversable
      NC S1914 PCH
      NC S1935 PCH
      NC S1947 PCH
      NC S1967 PCH
      NC S1914.1 PCH изменения при если не нашли связанную переоценку то ошибку не выдавать
      NC S1914.2 PCH проверка на дату пробития
      NC S2008 PCH
      NC S2043 AAP Добавлен расчет новой функции "Поле Предыдущей Записи"
      NC NCS-2043.1 DP Изменен триггер  CalcFunction
      NC NCS-2061 DP Изменена функция GenerateGenJnlLine
      NC S2019 Добавлено поле "Company Name". Поле включено в первичный ключ.
               Изменено свойство TableRelation поля "Link Condition Line No."
      NC NCS-2204 DP Изменена функция CalcFunction
      NC NCS-2214 DP Изменена функция CalcFunction
      BLD001
        NCS1753,S1909,S1910,1914,1935,1947,1967,1914.2,2008,2043.1
      TDRANCS-2208
      NC NCS-2347 AAP Изменена функция CalcFunction
      NC NCS-2420 DP Изменена функция isLinkCondition
      NC NCS-2451 DP Изменена функция isCondition
      NC NCS-2249 AAP Изменены функции CalcFunction, GetLinkDeal,
      NCS-2599 BMN 06.07.2017 CalcFunction() changed
    }
    END.
  }
}

