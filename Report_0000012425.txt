OBJECT Report 12425 Copy Pay Document
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Pay Document;
               RUS=Копирование платежного документа];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF EntryNo = 0 THEN
                    ERROR(Text000);

                  FromCheckLedgerEntry.GET(EntryNo);

                  WITH  GenJournalLine DO BEGIN
                    INIT;
                    "Journal Template Name" := xGenJournalLine."Journal Template Name";
                    "Journal Batch Name" := xGenJournalLine."Journal Batch Name";
                    xGenJournalLine.SETRANGE("Journal Template Name", xGenJournalLine."Journal Template Name");
                    xGenJournalLine.SETRANGE("Journal Batch Name", xGenJournalLine."Journal Batch Name");

                    IF xGenJournalLine.FIND('+') THEN
                      "Line No." := xGenJournalLine."Line No." + 10000
                    ELSE
                      "Line No." := 10000;

                    SetUpNewLine(xGenJournalLine, 0, TRUE);

                    VALIDATE("Account Type", FromCheckLedgerEntry."Bal. Account Type");
                    VALIDATE("Account No.", FromCheckLedgerEntry."Bal. Account No.");
                    VALIDATE("Document Type", FromCheckLedgerEntry."Document Type");
                    VALIDATE("Document No.", '');
                    VALIDATE(Description, FromCheckLedgerEntry.Description);

                    IF BankAccountLedgerEntry.GET(FromCheckLedgerEntry."Bank Account Ledger Entry No.") THEN
                      IF BankAccountLedgerEntry."Currency Code" <> "Currency Code" THEN
                        ERROR(Text001, "Currency Code", BankAccountLedgerEntry."Currency Code");

                    VALIDATE(Amount,-FromCheckLedgerEntry.Amount);
                    VALIDATE("Bank Payment Type",1);
                    VALIDATE("Beneficiary Bank Code",FromCheckLedgerEntry."Beneficiary Bank Code");
                    VALIDATE("Payment Purpose",FromCheckLedgerEntry."Payment Purpose");
                    VALIDATE("Cash Order Including",FromCheckLedgerEntry."Cash Order Including");
                    VALIDATE("Cash Order Supplement",FromCheckLedgerEntry."Cash Order Supplement");
                    VALIDATE("Payment Method",FromCheckLedgerEntry."Payment Method");
                    VALIDATE("Payment Date",FromCheckLedgerEntry."Payment Before Date");
                    VALIDATE("Payment Subsequence",FromCheckLedgerEntry."Payment Subsequence");
                    VALIDATE("Payment Code",FromCheckLedgerEntry."Payment Code");
                    VALIDATE("Payment Assignment",FromCheckLedgerEntry."Payment Assignment");
                    VALIDATE("Payment Type",FromCheckLedgerEntry."Payment Type");
                    INSERT;
                  END;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры] }

      { 11  ;2   ;Field     ;
                  CaptionML=[ENU=Document Type;
                             RUS=Тип документа];
                  OptionCaptionML=[ENU=Payment order,Ingoing order,Outgoing order;
                                   RUS=Платежное поручение,Приходный кассовый ордер,Расходный кассовый ордер];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocType;
                  OnValidate=BEGIN
                               EntryNo := 0;
                               CheckEntryNo;
                             END;
                              }

      { 9   ;2   ;Field     ;
                  CaptionML=[ENU=Entry No.;
                             RUS=Номер операции];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EntryNo;
                  OnValidate=BEGIN
                               CheckEntryNo;
                             END;

                  OnLookup=BEGIN
                             SelectEntryNo;
                           END;
                            }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Document No.;
                             RUS=Номер документа];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=FromCheckLedgerEntry."Document No.";
                  Editable=FALSE }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Description;
                             RUS=Описание];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=FromCheckLedgerEntry.Description;
                  Editable=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FromCheckLedgerEntry@1210005 : Record 272;
      GenJournalLine@1210004 : Record 81;
      xGenJournalLine@1210003 : Record 81;
      BankAccountLedgerEntry@1210002 : Record 271;
      DocType@1210001 : 'Payment order,Ingoing order,Outgoing order';
      EntryNo@1210000 : Integer;
      Text000@1210007 : TextConst 'ENU=Please enter Entry No.;RUS=Введите номер операции';
      Text001@1210006 : TextConst 'ENU=Currency Code mismatch: Bank Acc %1 not equal to Check Ledger Entry %2;RUS=Несоответствие кодов валют: банк. счет %1 не равен операции книги платежных документов %2';

    PROCEDURE CheckEntryNo@1();
    BEGIN
      IF EntryNo = 0 THEN
        FromCheckLedgerEntry.INIT
      ELSE
        IF EntryNo <> FromCheckLedgerEntry."Entry No." THEN
          FromCheckLedgerEntry.GET(EntryNo);
    END;

    PROCEDURE SelectEntryNo@2();
    BEGIN
      FromCheckLedgerEntry.FILTERGROUP(2);
      FromCheckLedgerEntry.RESET;
      FromCheckLedgerEntry.CALCFIELDS("Bank Account Type");
      CASE DocType OF
        0 : BEGIN
              FromCheckLedgerEntry.SETRANGE("Bank Account Type", 0);
              FromCheckLedgerEntry.SETFILTER(Amount, '<0');
            END;
        1 : BEGIN
              FromCheckLedgerEntry.SETRANGE("Bank Account Type", 1);
              FromCheckLedgerEntry.SETFILTER(Amount, '>0');
            END;
        2 : BEGIN
              FromCheckLedgerEntry.SETRANGE("Bank Account Type", 1);
              FromCheckLedgerEntry.SETFILTER(Amount, '<0');
            END;
        3 : BEGIN
              FromCheckLedgerEntry.SETRANGE("Bank Account Type", 0);
              FromCheckLedgerEntry.SETFILTER(Amount, '>0');
            END;
      END;
      FromCheckLedgerEntry.SETRANGE("Entry Status", 3);
      FromCheckLedgerEntry.FILTERGROUP(0);

      IF PAGE.RUNMODAL(0, FromCheckLedgerEntry) = ACTION::LookupOK THEN
        EntryNo := FromCheckLedgerEntry."Entry No.";

      CheckEntryNo;
    END;

    PROCEDURE SetJournalLine@3(VAR NewGenJournalLine@1210000 : Record 81);
    BEGIN
      xGenJournalLine := NewGenJournalLine;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

