OBJECT Table 179 Reversal Entry
{
  OBJECT-PROPERTIES
  {
    Date=04.05.17;
    Time=15:24:01;
    Modified=Yes;
    Version List=NAVW110.00.00.15601,NAVRU10.00.00.15601,NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Reversal Entry;
               RUS=Операция сторнирования];
    PasteIsValid=No;
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 2   ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              RUS=Тип операции];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Customer,Vendor,Bank Account,Fixed Asset,Maintenance,VAT,,,,Tax Difference,Value Entry,FI,Allocation G/L";
                                                                    RUS=" ,Счет ГК,Клиент,Поставщик,Банк. счет,ОС,Обслуживание,НДС,,,,Налог. разница,Операция стоимости,ФИ,Распределение"];
                                                   OptionString=[ ,G/L Account,Customer,Vendor,Bank Account,Fixed Asset,Maintenance,VAT,,,,Tax Difference,Value Entry,FI,Allocation G/L] }
    { 3   ;   ;Entry No.           ;Integer       ;TableRelation=IF (Entry Type=CONST(G/L Account)) "G/L Entry"
                                                                 ELSE IF (Entry Type=CONST(Customer)) "Cust. Ledger Entry"
                                                                 ELSE IF (Entry Type=CONST(Vendor)) "Vendor Ledger Entry"
                                                                 ELSE IF (Entry Type=CONST(Bank Account)) "Bank Account Ledger Entry"
                                                                 ELSE IF (Entry Type=CONST(Fixed Asset)) "FA Ledger Entry"
                                                                 ELSE IF (Entry Type=CONST(Maintenance)) "Maintenance Ledger Entry"
                                                                 ELSE IF (Entry Type=CONST(VAT)) "VAT Entry"
                                                                 ELSE IF (Entry Type=CONST(Value Entry)) "Value Entry";
                                                   CaptionML=[ENU=Entry No.;
                                                              RUS=Номер операции] }
    { 4   ;   ;G/L Register No.    ;Integer       ;TableRelation="G/L Register";
                                                   CaptionML=[ENU=G/L Register No.;
                                                              RUS=Номер регистра ГК] }
    { 5   ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              RUS=Код источника] }
    { 6   ;   ;Journal Batch Name  ;Code10        ;CaptionML=[ENU=Journal Batch Name;
                                                              RUS=Код раздела журнала] }
    { 7   ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              RUS=Номер транзакции] }
    { 8   ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              RUS=Тип источника];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,FI,,,,,Future Expense";
                                                                    RUS=" ,Клиент,Поставщик,Банковский счет,ОС,МФ Партнер,ФИ,,,,,Расходы будущих периодов"];
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,FI,,,,,Future Expense] }
    { 9   ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=[ENU=Source No.;
                                                              RUS=Номер источника] }
    { 10  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=Код валюты] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 12  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13  ;   ;Debit Amount        ;Decimal       ;CaptionML=[ENU=Debit Amount;
                                                              RUS=Сумма по дебету];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Credit Amount       ;Decimal       ;CaptionML=[ENU=Credit Amount;
                                                              RUS=Сумма по кредиту];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Amount (LCY)        ;Decimal       ;CaptionML=[ENU=Amount (LCY);
                                                              RUS=Сумма (руб.)];
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,179,15' }
    { 16  ;   ;Debit Amount (LCY)  ;Decimal       ;CaptionML=[ENU=Debit Amount (LCY);
                                                              RUS=Сумма по дебету (руб.)];
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,179,16' }
    { 17  ;   ;Credit Amount (LCY) ;Decimal       ;CaptionML=[ENU=Credit Amount (LCY);
                                                              RUS=Сумма по кредиту (руб.)];
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,179,17' }
    { 18  ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              RUS=Сумма НДС];
                                                   AutoFormatType=1 }
    { 19  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              RUS=Дата учета] }
    { 20  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Платеж,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 21  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 22  ;   ;Account No.         ;Code20        ;CaptionML=[ENU=Account No.;
                                                              RUS=Номер счета] }
    { 23  ;   ;Account Name        ;Text50        ;CaptionML=[ENU=Account Name;
                                                              RUS=Название счета] }
    { 25  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              RUS=Тип баланс. счета];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    RUS=Счет ГК,Клиент,Поставщик,Банковский счет,Основное средство,МФ Партнер];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 26  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              RUS=Номер баланс. счета] }
    { 27  ;   ;FA Posting Category ;Option        ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Category;
                                                              RUS=Категория учета ОС];
                                                   OptionCaptionML=[ENU=" ,Disposal,Bal. Disposal";
                                                                    RUS=" ,Реализация,Баланс. реализации"];
                                                   OptionString=[ ,Disposal,Bal. Disposal] }
    { 28  ;   ;FA Posting Type     ;Option        ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Type;
                                                              RUS=Тип учета ОС];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Proceeds on Disposal,Salvage Value,Gain/Loss,Book Value on Disposal";
                                                                    RUS=" ,Стоимость приобретения,Амортизация,Понижение стоимости,Повышение стоимости,Польз. метод 1,Польз. метод 2,Поступления от реализации,Ликвид. стоимость,Прибыль/убыток,Бал. стоимость при реализации"];
                                                   OptionString=[ ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Proceeds on Disposal,Salvage Value,Gain/Loss,Book Value on Disposal] }
    { 30  ;   ;Reversal Type       ;Option        ;CaptionML=[ENU=Reversal Type;
                                                              RUS=Тип сторнирования];
                                                   OptionCaptionML=[ENU=Transaction,Register;
                                                                    RUS=Транзакция,Регистр];
                                                   OptionString=Transaction,Register }
    { 12483;  ;Corrected Period Date;Date         ;CaptionML=[ENU=Corrected Period Date;
                                                              RUS=Дата корректируемого периода] }
    { 12490;  ;VAT Allocation      ;Boolean       ;CaptionML=[ENU=VAT Allocation;
                                                              RUS=Распределение НДС] }
    { 50001;  ;Alloc. G/L Register No.;Integer    ;TableRelation="G/L Register";
                                                   CaptionML=[ENU=Alloc. G/L Register No.;
                                                              RUS=Распред. Фин. Регистр Но.];
                                                   Description=NCNCS-1810 }
    { 50002;  ;G/L Register Filter ;Text250       ;Description=NCNCS-1820 }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
    {    ;Entry Type                               }
    {    ;Document No.,Posting Date,Entry Type,Entry No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record 98;
      TempReversalEntry@1001 : TEMPORARY Record 179;
      GLEntry@1007 : Record 17;
      CustLedgEntry@1006 : Record 21;
      VendLedgEntry@1005 : Record 25;
      BankAccLedgEntry@1004 : Record 271;
      VATEntry@1003 : Record 254;
      FALedgEntry@1002 : Record 5601;
      MaintenanceLedgEntry@1009 : Record 5625;
      ValueEntry@1210002 : Record 5802;
      GLItemLedgRelation@1210003 : Record 5823;
      GLReg@1008 : Record 45;
      Text000@1010 : TextConst 'ENU=You cannot reverse %1 No. %2 because the entry is either applied to an entry or has been changed by a batch job.;RUS=Нельзя сторнировать %1 номер %2, так как эта операция или применена к другой операции, или изменена пакетным заданием.';
      FAReg@1015 : Record 5617;
      TempGLReg@1210005 : TEMPORARY Record 45;
      GenJnlCheckLine@1011 : Codeunit 11;
      Text001@1012 : TextConst 'ENU=You cannot reverse %1 No. %2 because the posting date is not within the allowed posting period.;RUS=Нельзя сторнировать %1 номер %2, так как дата учета находится вне допустимого учетного периода.';
      AllowPostingFrom@1014 : Date;
      AllowPostingto@1013 : Date;
      Text002@1016 : TextConst 'ENU=You cannot reverse the transaction because it is out of balance.;RUS=Сторнирование транзакции невозможно, поскольку она дает ненулевое сальдо.';
      Text003@1017 : TextConst 'ENU=You cannot reverse %1 No. %2 because the entry has a related check ledger entry.;RUS=Нельзя сторнировать %1 номер %2, так как с этой операцией связана операция платежных документов.';
      Text004@1018 : TextConst 'ENU=You can only reverse entries that were posted from a journal.;RUS=Можно сторнировать только операции, учтенные из журнала.';
      Text005@1020 : TextConst 'ENU=You cannot reverse %1 No. %2 because the %3 is not within the allowed posting period.;RUS=Нельзя сторнировать %1 номер %2, так как %3 находится за пределами допустимого учетного периода.';
      Text006@1022 : TextConst 'ENU=You cannot reverse %1 No. %2 because the entry is closed.;RUS=Нельзя сторнировать %1 номер %2, так как эта операция закрыта.';
      Text007@1021 : TextConst 'ENU=You cannot reverse %1 No. %2 because the entry is included in a bank account reconciliation line. The bank reconciliation has not yet been posted.;RUS=Нельзя сторнировать %1 номер %2, так как эта операция включена в строку выверки банковского счета. Эта выверка еще не учтена.';
      Text008@1019 : TextConst 'ENU=You cannot reverse the transaction because the %1 has been sold.;RUS=Сторнирование транзакции невозможно, поскольку %1 уже продан.';
      MaxPostingDate@1024 : Date;
      Text009@1025 : TextConst 'ENU=The transaction cannot be reversed, because the %1 has been compressed or a %2 has been deleted.;RUS=Транзакцию нельзя отменить, так как выполнено сжатие %1 или удаление %2.';
      Text010@1023 : TextConst 'ENU=You cannot reverse %1 No. %2 because the register has already been involved in a reversal.;RUS=Нельзя сторнировать %1 номер %2, так как этот регистр уже вовлечен в сторнирование.';
      Text011@1026 : TextConst 'ENU=You cannot reverse %1 No. %2 because the entry has already been involved in a reversal.;RUS=Нельзя сторнировать %1 номер %2, так как эта операция уже вовлечена в сторнирование.';
      Text012@1028 : TextConst 'ENU=You cannot reverse register No. %1 because it contains customer or vendor ledger entries that have been posted and applied in the same transaction.\\You must reverse each transaction in register No. %1 separately.;RUS=Нельзя сторнировать регистр номер %1, так как он содержит операции книги клиентов или поставщиков, учтенные и примененные в одной и той же транзакции.\\Каждую транзакцию в регистре номер %1 необходимо сторнировать отдельно.';
      Text013@1039 : TextConst 'ENU=You cannot reverse %1 No. %2 because the entry has an associated Realized Gain/Loss entry.;RUS=Невозможно реверсировать %1 №%2, так как у операции имеется связанная операция реализованной прибыли/убытка.';
      HideDialog@1030 : Boolean;
      TaxDiffEntry@1470001 : Record 17306;
      Text1001@1470000 : TextConst 'ENU=You cannot reverse %1 No. %2 before reversing of %1 No. %3;RUS=Невозможно сторнировать %1 номер %2 до сторнирования %1 номер %3';
      Text1002@1210000 : TextConst 'ENU=You cannot reverse %1 No. %2 because %3 No. %4 exists. This invoice should be deleted before reversing.;RUS=Нельзя сторнировать %1 номер %2, так как существует %3 номер %4. Этот счет необходимо удалить перед сторнированием.';
      Text1003@1210001 : TextConst 'ENU=-AD;RUS=-СР';
      VATAllocOnCost@1210004 : Boolean;
      UnrealizedVATReverseErr@1027 : TextConst 'ENU=You cannot reverse %1 No. %2 because the entry has an associated Unrealized VAT Entry.;RUS=Невозможно реверсировать %1 №%2, так как у операции имеется связанная операция нереализованного НДС.';
      HideWarningDialogs@1029 : Boolean;
      Text50001@1101495004 : TextConst 'ENU=Reverse Selected Entries;RUS=Аннулировать выбранные операции';
      Text50002@1101495003 : TextConst 'ENU=Do you want to reverse the entries?;RUS=Аннулировать операции?';
      Text50003@1101495002 : TextConst 'ENU=The entries were successfully reversed.;RUS=Операции успешно аннулированы.';
      Text50004@1101495001 : TextConst 'ENU=To reverse these entries, the program will post correcting entries.;RUS=Чтобы аннулировать эти операции, программа проведет корректирующие операции.';
      Text50005@1101495000 : TextConst 'ENU=You cannot reverse the transaction because it is allocation entry. You should reverse allocation register.;RUS="Нельзя аннулировать транзакцию, поскольку она является частью распределения. Необходимо аннулировать регистр распределения. "';
      "MTF02 >"@1101495012 : Integer;
      FILedgEntry@1101495011 : Record 50106;
      FIValueEntry@1101495010 : Record 50107;
      FIValueEntryRelation@1101495009 : Record 50117;
      GLEntry2@1101495008 : Record 17;
      "MTF02 <"@1101495007 : Integer;
      AllocationCostGLEntry@1101495006 : Record 50012;
      AllocationRegister@1101495005 : Record 50029;

    PROCEDURE ReverseTransaction@8(TransactionNo@1000 : Integer);
    BEGIN
      ReverseEntries(TransactionNo,"Reversal Type"::Transaction);
    END;

    PROCEDURE ReverseRegister@9(RegisterNo@1000 : Integer);
    VAR
      GLReg@1001 : Record 45;
    BEGIN
      GLReg.GET(RegisterNo);
      IF GLReg.Reversed THEN
        ERROR(Text010,GLReg.TABLECAPTION,GLReg."No.");
      VATEntry.SETRANGE("Entry No.",GLReg."From VAT Entry No.",GLReg."To VAT Entry No.");
      VATEntry.SETRANGE("VAT Allocation Type",VATEntry."VAT Allocation Type"::Charge);
      VATAllocOnCost := NOT VATEntry.ISEMPTY;
      VATEntry.RESET;
      IF (GLReg."Journal Batch Name" = '') AND NOT VATAllocOnCost THEN
        TempReversalEntry.TestFieldError;

      ReverseEntries(RegisterNo,"Reversal Type"::Register);
    END;

    LOCAL PROCEDURE ReverseEntries@32(Number@1001 : Integer;RevType@1000 : 'Transaction,Register');
    VAR
      ReversalPost@1002 : Codeunit 179;
    BEGIN
      //NC NOS-26 SPA Добавил условие, т.к. будет ошибка при сторнировании регистра
      IF RevType = RevType::Transaction THEN BEGIN // NC NOS-26 SPA
        VATEntry.SETRANGE("Transaction No.",Number);
        VATEntry.SETRANGE("VAT Allocation Type",VATEntry."VAT Allocation Type"::Charge);
        IF NOT VATEntry.ISEMPTY THEN
          ERROR('');
        VATEntry.RESET;
      END; // NC NOS-26 < SPA

      InsertReversalEntry(Number,RevType);
      TempReversalEntry.SETCURRENTKEY("Document No.","Posting Date","Entry Type","Entry No.");
      IF NOT HideDialog THEN
        PAGE.RUNMODAL(PAGE::"Reverse Entries",TempReversalEntry)
      ELSE BEGIN
        ReversalPost.SetPrint(FALSE);
        ReversalPost.SetHideDialog(HideWarningDialogs);
        ReversalPost.RUN(TempReversalEntry);
      END;
      TempReversalEntry.DELETEALL;
    END;

    LOCAL PROCEDURE InsertReversalEntry@7(Number@1000 : Integer;RevType@1007 : 'Transaction,Register');
    VAR
      TempRevertTransactionNo@1005 : TEMPORARY Record 2000000026;
      NextLineNo@1008 : Integer;
      GLReg2@1210001 : Record 45;
      Completed@1210002 : Boolean;
      SourceCodeSetup@1210003 : Record 242;
    BEGIN
      GLSetup.GET;
      TempReversalEntry.DELETEALL;
      NextLineNo := 1;
      TempRevertTransactionNo.Number := Number;
      TempRevertTransactionNo.INSERT;
      IF VATAllocOnCost THEN BEGIN
        SourceCodeSetup.GET;
        Completed := FALSE;
        TempGLReg.DELETEALL;
        GLReg.GET(Number);
        GLReg2.GET(Number);
        REPEAT
          IF GLReg2.NEXT(-1) <> 0 THEN
            IF (GLReg2."Source Code" = SourceCodeSetup."Inventory Post Cost") AND
               (GLReg2."Creation Date" = GLReg."Creation Date") AND
               (GLReg2."User ID" = GLReg."User ID")
            THEN BEGIN
              TempGLReg := GLReg2;
              TempGLReg.INSERT;
            END ELSE
              Completed := TRUE;
        UNTIL Completed;
      END;

      SetReverseFilter(Number,RevType);

      InsertFromCustLedgEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
      InsertFromVendLedgEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
      InsertFromBankAccLedgEntry(Number,RevType,NextLineNo);
      InsertFromFALedgEntry(Number,RevType,NextLineNo);
      InsertFromMaintenanceLedgEntry(Number,RevType,NextLineNo);
      InsertFromFILedgEntry(TempRevertTransactionNo,Number,RevType,NextLineNo); // NC NOS-26 SPA
      InsertFromVATEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
      InsertFromGLEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
      InsertFromTaxDiffEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
      InsertFromAllocCostGLEntry(TempRevertTransactionNo,Number,RevType,NextLineNo); // NC NOS-26 SPA
      IF VATAllocOnCost THEN
        InsertFromVATAllocation(Number,RevType,NextLineNo);
      IF TempReversalEntry.FIND('-') THEN;
    END;

    PROCEDURE CheckEntries@14(IsVATAllocOnCost@1210000 : Boolean);
    VAR
      GLAcc@1001 : Record 15;
      DtldCustLedgEntry@1006 : Record 379;
      DtldVendLedgEntry@1007 : Record 380;
      DateComprReg@1000 : Record 87;
      BalanceCheckAmount@1012 : Decimal;
      BalanceCheckAddCurrAmount@1010 : Decimal;
    BEGIN
      DtldCustLedgEntry.LOCKTABLE;
      DtldVendLedgEntry.LOCKTABLE;
      GLEntry.LOCKTABLE;
      CustLedgEntry.LOCKTABLE;
      VendLedgEntry.LOCKTABLE;
      BankAccLedgEntry.LOCKTABLE;
      FALedgEntry.LOCKTABLE;
      MaintenanceLedgEntry.LOCKTABLE;
      ValueEntry.LOCKTABLE;
      VATEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      FAReg.LOCKTABLE;
      GLSetup.GET;
      MaxPostingDate := 0D;
      IF NOT GLEntry.FIND('-') THEN
        ERROR(Text009,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
        IF (GLEntry."Journal Batch Name" = '') AND NOT IsVATAllocOnCost THEN
          TestFieldError;
        REPEAT
          CheckGLAcc(GLEntry,BalanceCheckAmount,BalanceCheckAddCurrAmount);
        UNTIL GLEntry.NEXT = 0;
      END;
      IF (BalanceCheckAmount <> 0) OR (BalanceCheckAddCurrAmount <> 0) THEN
        ERROR(Text002);

      //NC NCS-1810 > DP
      IF AllocationCostGLEntry.FIND('-') THEN BEGIN
        REPEAT
          CheckGLAcc2(AllocationCostGLEntry,BalanceCheckAmount,BalanceCheckAddCurrAmount);
        UNTIL AllocationCostGLEntry.NEXT = 0;
      END;
      //NC NCS-1810 < DP

      IF CustLedgEntry.FIND('-') THEN
        REPEAT
          CheckCust(CustLedgEntry);
        UNTIL CustLedgEntry.NEXT = 0;

      IF VendLedgEntry.FIND('-') THEN
        REPEAT
          CheckVend(VendLedgEntry);
        UNTIL VendLedgEntry.NEXT = 0;

      IF BankAccLedgEntry.FIND('-') THEN
        REPEAT
          CheckBankAcc(BankAccLedgEntry);
        UNTIL BankAccLedgEntry.NEXT = 0;

      IF FALedgEntry.FIND('-') THEN
        REPEAT
          CheckFA(FALedgEntry);
        UNTIL FALedgEntry.NEXT = 0;

      IF MaintenanceLedgEntry.FIND('-') THEN
        REPEAT
          CheckMaintenance(MaintenanceLedgEntry);
        UNTIL MaintenanceLedgEntry.NEXT = 0;

      // MTF02 > II
      IF FILedgEntry.FIND('-') THEN
        REPEAT
          CheckFI(FILedgEntry);
        UNTIL FILedgEntry.NEXT = 0;
      // MTF02 < II

      IF VATEntry.FIND('-') THEN
        REPEAT
          CheckVAT(VATEntry);
        UNTIL VATEntry.NEXT = 0;

      IF IsVATAllocOnCost THEN
        IF ValueEntry.FIND('-') THEN
          REPEAT
            CheckItem(ValueEntry);
          UNTIL ValueEntry.NEXT = 0;

      DateComprReg.CheckMaxDateCompressed(MaxPostingDate,1);

      IF TaxDiffEntry.FIND('-') THEN
        REPEAT
          CheckTaxDiff(TaxDiffEntry);
        UNTIL TaxDiffEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckGLAcc@13(GLEntry@1000 : Record 17;VAR BalanceCheckAmount@1002 : Decimal;VAR BalanceCheckAddCurrAmount@1001 : Decimal);
    VAR
      GLAcc@1003 : Record 15;
      UserSetup@1101495000 : Record 91;
    BEGIN
      GLAcc.GET(GLEntry."G/L Account No.");
      CheckPostingDate(GLEntry."Posting Date",GLEntry.TABLECAPTION,GLEntry."Entry No.");
      GLAcc.TESTFIELD(Blocked,FALSE);
      GLEntry.TESTFIELD("Job No.",'');
      //NC MIFI02 > MP
      GLEntry.TESTFIELD("Eliminated by Entry No.",0);
      //NC MIFI02 < MP
      //NC MDR04 > MP
      IF NOT UserSetup.GET(USERID) THEN
        GLEntry.TESTFIELD("Transaction Type",GLEntry."Transaction Type"::Manual)
      ELSE
        IF NOT UserSetup."Data Admin" THEN
          GLEntry.TESTFIELD("Transaction Type",GLEntry."Transaction Type"::Manual);
      //NC MDR04 < MP
      IF GLEntry.Reversed THEN
        AlreadyReversedEntry(GLEntry.TABLECAPTION,GLEntry."Entry No.");
      BalanceCheckAmount := BalanceCheckAmount + GLEntry.Amount;
      IF GLSetup."Additional Reporting Currency" <> '' THEN
        BalanceCheckAddCurrAmount := BalanceCheckAddCurrAmount + GLEntry."Additional-Currency Amount";
    END;

    LOCAL PROCEDURE CheckCust@16(CustLedgEntry@1001 : Record 21);
    VAR
      Cust@1000 : Record 18;
    BEGIN
      Cust.GET(CustLedgEntry."Customer No.");
      CheckPostingDate(
        CustLedgEntry."Posting Date",CustLedgEntry.TABLECAPTION,CustLedgEntry."Entry No.");
      Cust.CheckBlockedCustOnJnls(Cust,CustLedgEntry."Document Type",FALSE);
      IF CustLedgEntry.Reversed THEN
        AlreadyReversedEntry(CustLedgEntry.TABLECAPTION,CustLedgEntry."Entry No.");
      CheckDtldCustLedgEntry(CustLedgEntry);
    END;

    LOCAL PROCEDURE CheckVend@17(VendLedgEntry@1001 : Record 25);
    VAR
      Vend@1000 : Record 23;
    BEGIN
      Vend.GET(VendLedgEntry."Vendor No.");
      CheckPostingDate(
        VendLedgEntry."Posting Date",VendLedgEntry.TABLECAPTION,VendLedgEntry."Entry No.");
      Vend.CheckBlockedVendOnJnls(Vend,VendLedgEntry."Document Type",FALSE);
      IF VendLedgEntry.Reversed THEN
        AlreadyReversedEntry(VendLedgEntry.TABLECAPTION,VendLedgEntry."Entry No.");
      CheckDtldVendLedgEntry(VendLedgEntry);
    END;

    LOCAL PROCEDURE CheckBankAcc@18(BankAccLedgEntry@1000 : Record 271);
    VAR
      BankAcc@1001 : Record 270;
      CheckLedgEntry@1002 : Record 272;
    BEGIN
      BankAcc.GET(BankAccLedgEntry."Bank Account No.");
      CheckPostingDate(
        BankAccLedgEntry."Posting Date",BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry."Entry No.");
      BankAcc.TESTFIELD(Blocked,FALSE);
      IF BankAccLedgEntry.Reversed THEN
        AlreadyReversedEntry(BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry."Entry No.");
      IF NOT BankAccLedgEntry.Open THEN
        ERROR(
          Text006,BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry."Entry No.");
      IF BankAccLedgEntry."Statement No." <> '' THEN
        ERROR(
          Text007,BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry."Entry No.");
      CheckLedgEntry.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
      IF NOT CheckLedgEntry.ISEMPTY THEN
        ERROR(
          Text003,BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE CheckFA@19(FALedgEntry@1000 : Record 5601);
    VAR
      FA@1001 : Record 5600;
      FADeprBook@1002 : Record 5612;
      DeprCalc@1003 : Codeunit 5616;
    BEGIN
      FA.GET(FALedgEntry."FA No.");
      CheckPostingDate(
        FALedgEntry."Posting Date",FALedgEntry.TABLECAPTION,FALedgEntry."Entry No.");
      CheckFAPostingDate(
        FALedgEntry."FA Posting Date",FALedgEntry.TABLECAPTION,FALedgEntry."Entry No.");
      FA.TESTFIELD(Blocked,FALSE);
      FA.TESTFIELD(Inactive,FALSE);
      IF FALedgEntry.Reversed THEN
        AlreadyReversedEntry(FALedgEntry.TABLECAPTION,FALedgEntry."Entry No.");
      FALedgEntry.TESTFIELD("Depreciation Book Code");
      FADeprBook.GET(FA."No.",FALedgEntry."Depreciation Book Code");
      IF FADeprBook."Disposal Date" <> 0D THEN
        ERROR(Text008,DeprCalc.FAName(FA,FALedgEntry."Depreciation Book Code"));
      FALedgEntry.TESTFIELD("G/L Entry No.");
      FALedgEntry.CheckRealizedVAT(FALedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE CheckMaintenance@20(MaintenanceLedgEntry@1000 : Record 5625);
    VAR
      FA@1001 : Record 5600;
      FADeprBook@1002 : Record 5612;
    BEGIN
      FA.GET(MaintenanceLedgEntry."FA No.");
      CheckPostingDate(
        MaintenanceLedgEntry."Posting Date",MaintenanceLedgEntry.TABLECAPTION,MaintenanceLedgEntry."Entry No.");
      CheckFAPostingDate(
        MaintenanceLedgEntry."FA Posting Date",MaintenanceLedgEntry.TABLECAPTION,MaintenanceLedgEntry."Entry No.");
      FA.TESTFIELD(Blocked,FALSE);
      FA.TESTFIELD(Inactive,FALSE);
      MaintenanceLedgEntry.TESTFIELD("Depreciation Book Code");
      IF MaintenanceLedgEntry.Reversed THEN
        AlreadyReversedEntry(MaintenanceLedgEntry.TABLECAPTION,MaintenanceLedgEntry."Entry No.");
      FADeprBook.GET(FA."No.",MaintenanceLedgEntry."Depreciation Book Code");
      MaintenanceLedgEntry.TESTFIELD("G/L Entry No.");
    END;

    LOCAL PROCEDURE CheckVAT@21(VATEntry@1000 : Record 254);
    VAR
      DtldCustLedgEntry@1210001 : Record 379;
      SalesInvoiceHeader@1210000 : Record 112;
    BEGIN
      CheckPostingDate(VATEntry."Posting Date",VATEntry.TABLECAPTION,VATEntry."Entry No.");
      IF VATEntry.Closed THEN
        ERROR(
          Text006,VATEntry.TABLECAPTION,VATEntry."Entry No.");
      IF VATEntry.Reversed THEN
        AlreadyReversedEntry(VATEntry.TABLECAPTION,VATEntry."Entry No.");
      IF VATEntry."Unrealized VAT Entry No." <> 0 THEN
        IF NOT VATEntry."Manual VAT Settlement" THEN
          ERROR(UnrealizedVATReverseError(VATEntry.TABLECAPTION,VATEntry."Entry No."));
    END;

    LOCAL PROCEDURE CheckDtldCustLedgEntry@2(CustLedgEntry@1000 : Record 21);
    VAR
      DtldCustLedgEntry@1001 : Record 379;
    BEGIN
      DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
      DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      DtldCustLedgEntry.SETFILTER("Entry Type",'<>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
      DtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
      IF NOT DtldCustLedgEntry.ISEMPTY THEN
        ERROR(ReversalErrorForChangedEntry(CustLedgEntry.TABLECAPTION,CustLedgEntry."Entry No."));

      DtldCustLedgEntry.RESET;
      DtldCustLedgEntry.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
      DtldCustLedgEntry.SETRANGE("Transaction No.",CustLedgEntry."Transaction No.");
      DtldCustLedgEntry.SETRANGE("Customer No.",CustLedgEntry."Customer No.");
      DtldCustLedgEntry.SETFILTER("Entry Type",'%1|%2',
        DtldCustLedgEntry."Entry Type"::"Realized Gain",DtldCustLedgEntry."Entry Type"::"Realized Loss");
      IF NOT DtldCustLedgEntry.ISEMPTY THEN
        ERROR(Text013,CustLedgEntry.TABLECAPTION,CustLedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE CheckDtldVendLedgEntry@28(VendLedgEntry@1000 : Record 25);
    VAR
      DtldVendLedgEntry@1001 : Record 380;
    BEGIN
      DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.","Entry Type");
      DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
      DtldVendLedgEntry.SETFILTER("Entry Type",'<>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
      DtldVendLedgEntry.SETRANGE(Unapplied,FALSE);
      IF NOT DtldVendLedgEntry.ISEMPTY THEN
        ERROR(ReversalErrorForChangedEntry(VendLedgEntry.TABLECAPTION,VendLedgEntry."Entry No."));

      DtldVendLedgEntry.RESET;
      DtldVendLedgEntry.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
      DtldVendLedgEntry.SETRANGE("Transaction No.",VendLedgEntry."Transaction No.");
      DtldVendLedgEntry.SETRANGE("Vendor No.",VendLedgEntry."Vendor No.");
      DtldVendLedgEntry.SETFILTER("Entry Type",'%1|%2',
        DtldVendLedgEntry."Entry Type"::"Realized Gain",DtldVendLedgEntry."Entry Type"::"Realized Loss");
      IF NOT DtldVendLedgEntry.ISEMPTY THEN
        ERROR(Text013,VendLedgEntry.TABLECAPTION,VendLedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE CheckItem@1210000(ValueEntry@1000 : Record 5802);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ValueEntry."Item No.");
      CheckPostingDate(ValueEntry."Posting Date",ValueEntry.TABLECAPTION,ValueEntry."Entry No.");
      Item.TESTFIELD(Blocked,FALSE);
      IF ValueEntry.Reversed THEN
        AlreadyReversedEntry(ValueEntry.TABLECAPTION,ValueEntry."Entry No.");
    END;

    PROCEDURE SetReverseFilter@1(Number@1001 : Integer;RevType@1000 : 'Transaction,Register');
    VAR
      FromTransactionNo@1470000 : Integer;
      FromValueEntryNo@1210001 : Integer;
      ToValueEntryNo@1210002 : Integer;
    BEGIN
      IF RevType = RevType::Transaction THEN BEGIN
        GLEntry.SETCURRENTKEY("Transaction No.");
        CustLedgEntry.SETCURRENTKEY("Transaction No.");
        VendLedgEntry.SETCURRENTKEY("Transaction No.");
        BankAccLedgEntry.SETCURRENTKEY("Transaction No.");
        FALedgEntry.SETCURRENTKEY("Transaction No.");
        MaintenanceLedgEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETCURRENTKEY("Transaction No.");
        GLEntry.SETRANGE("Transaction No.",Number);
        CustLedgEntry.SETRANGE("Transaction No.",Number);
        VendLedgEntry.SETRANGE("Transaction No.",Number);
        BankAccLedgEntry.SETRANGE("Transaction No.",Number);
        FALedgEntry.SETRANGE("Transaction No.",Number);
        MaintenanceLedgEntry.SETRANGE("Transaction No.",Number);
        VATEntry.SETRANGE("Transaction No.",Number);
        TaxDiffEntry.SETCURRENTKEY("Transaction No.");
        TaxDiffEntry.SETRANGE("Transaction No.",Number);
        ValueEntry.SETRANGE("Entry No.",0);
      //NC NCS-1810 > DP
        AllocationCostGLEntry.SETCURRENTKEY("Transaction No.");
        AllocationCostGLEntry.SETRANGE("Transaction No.",Number);
      //NC NCS-1810 < DP
      //NC MTF02 > II
        FILedgEntry.SETCURRENTKEY("Transaction No.");
        FILedgEntry.SETRANGE("Transaction No.",Number);
      //NC MTF02 < II
      END ELSE BEGIN
        GLReg.GET(Number);
        GLEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
        CustLedgEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
        VendLedgEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
        BankAccLedgEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
        FALedgEntry.SETCURRENTKEY("G/L Entry No.");
        FALedgEntry.SETRANGE("G/L Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
        MaintenanceLedgEntry.SETCURRENTKEY("G/L Entry No.");
        MaintenanceLedgEntry.SETRANGE("G/L Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
        VATEntry.SETRANGE("Entry No.",GLReg."From VAT Entry No.",GLReg."To VAT Entry No.");
        FromValueEntryNo := 0;
        ToValueEntryNo := 0;
        IF VATAllocOnCost THEN BEGIN
          GLItemLedgRelation.SETCURRENTKEY(GLItemLedgRelation."G/L Register No.");
          GLItemLedgRelation.SETRANGE("G/L Register No.",GLReg."No.");
          IF GLItemLedgRelation.FINDFIRST THEN
            FromValueEntryNo := GLItemLedgRelation."Value Entry No.";
          IF GLItemLedgRelation.FINDLAST THEN
            ToValueEntryNo := GLItemLedgRelation."Value Entry No.";
        END;
        ValueEntry.SETRANGE("Entry No.",FromValueEntryNo,ToValueEntryNo);
        TaxDiffEntry.SETCURRENTKEY("Transaction No.");
        IF NOT GLEntry.FIND('-') THEN
          FromTransactionNo := GLEntry."Transaction No." + 1
        ELSE BEGIN
          FromTransactionNo := GLEntry."Transaction No.";
          GLEntry.FIND('+')
        END;
        TaxDiffEntry.SETRANGE("Transaction No.",FromTransactionNo,GLEntry."Transaction No.");

      //NC NCS-1810 > DP
        AllocationCostGLEntry.SETCURRENTKEY("Transaction No.");
        IF NOT GLEntry.FIND('-') THEN
          FromTransactionNo := GLEntry."Transaction No." + 1
        ELSE BEGIN
          FromTransactionNo := GLEntry."Transaction No.";
          GLEntry.FIND('+')
        END;
        AllocationCostGLEntry.SETRANGE("Transaction No.",FromTransactionNo,GLEntry."Transaction No.");
      //NC NCS-1810 < DP

      //NC MTF02 > II
        FILedgEntry.SETCURRENTKEY("Entry No.");
        FILedgEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
      //NC MTF02 < II
      END;
    END;

    PROCEDURE CopyReverseFilters@15(VAR GLEntry2@1007 : Record 17;VAR CustLedgEntry2@1006 : Record 21;VAR VendLedgEntry2@1005 : Record 25;VAR BankAccLedgEntry2@1004 : Record 271;VAR VATEntry2@1003 : Record 254;VAR FALedgEntry2@1002 : Record 5601;VAR MaintenanceLedgEntry2@1001 : Record 5625;VAR TaxDiffEntry2@1470000 : Record 17306;VAR ValueEntry2@1210000 : Record 5802);
    BEGIN
      GLEntry2.COPY(GLEntry);
      CustLedgEntry2.COPY(CustLedgEntry);
      VendLedgEntry2.COPY(VendLedgEntry);
      BankAccLedgEntry2.COPY(BankAccLedgEntry);
      VATEntry2.COPY(VATEntry);
      FALedgEntry2.COPY(FALedgEntry);
      MaintenanceLedgEntry2.COPY(MaintenanceLedgEntry);
      TaxDiffEntry2.COPY(TaxDiffEntry);
      ValueEntry2.COPY(ValueEntry);
    END;

    PROCEDURE ShowGLEntries@22();
    BEGIN
      PAGE.RUN(0,GLEntry);
    END;

    PROCEDURE ShowCustLedgEntries@26();
    BEGIN
      PAGE.RUN(0,CustLedgEntry);
    END;

    PROCEDURE ShowVendLedgEntries@5();
    BEGIN
      PAGE.RUN(0,VendLedgEntry);
    END;

    PROCEDURE ShowBankAccLedgEntries@6();
    BEGIN
      PAGE.RUN(0,BankAccLedgEntry);
    END;

    PROCEDURE ShowFALedgEntries@10();
    BEGIN
      PAGE.RUN(0,FALedgEntry);
    END;

    PROCEDURE ShowMaintenanceLedgEntries@12();
    BEGIN
      PAGE.RUN(0,MaintenanceLedgEntry);
    END;

    PROCEDURE ShowVATEntries@11();
    BEGIN
      PAGE.RUN(0,VATEntry);
    END;

    PROCEDURE ShowValueEntries@1210001();
    BEGIN
      PAGE.RUN(0,ValueEntry);
    END;

    PROCEDURE Caption@3() : Text[250];
    VAR
      GLAcc@1000 : Record 15;
      GLEntry@1002 : Record 17;
      Cust@1001 : Record 18;
      CustLedgEntry@1003 : Record 21;
      Vend@1004 : Record 23;
      VendLedgEntry@1005 : Record 25;
      BankAcc@1006 : Record 270;
      BankAccLedgEntry@1007 : Record 271;
      FA@1008 : Record 5600;
      FALedgEntry@1009 : Record 5601;
      MaintenanceLedgEntry@1011 : Record 5625;
      VATEntry@1010 : Record 254;
      TaxDiffEntry0@1470000 : Record 17306;
      TaxDiff@1470001 : Record 17300;
      FI@1101495000 : Record 50021;
    BEGIN
      IF "Entry Type" = "Entry Type"::"G/L Account" THEN BEGIN
        IF GLEntry.GET("Entry No.") THEN;
        IF GLAcc.GET(GLEntry."G/L Account No.") THEN;
        EXIT(STRSUBSTNO('%1 %2 %3',GLAcc.TABLECAPTION,GLAcc."No.",GLAcc.Name));
      END;
      IF "Entry Type" = "Entry Type"::Customer THEN BEGIN
        IF CustLedgEntry.GET("Entry No.") THEN;
        IF Cust.GET(CustLedgEntry."Customer No.") THEN;
        EXIT(STRSUBSTNO('%1 %2 %3',Cust.TABLECAPTION,Cust."No.",Cust.Name));
      END;
      IF "Entry Type" = "Entry Type"::Vendor THEN BEGIN
        IF VendLedgEntry.GET("Entry No.") THEN;
        IF Vend.GET(VendLedgEntry."Vendor No.") THEN;
        EXIT(STRSUBSTNO('%1 %2 %3',Vend.TABLECAPTION,Vend."No.",Vend.Name));
      END;
      IF "Entry Type" = "Entry Type"::"Bank Account" THEN BEGIN
        IF BankAccLedgEntry.GET("Entry No.") THEN;
        IF BankAcc.GET(BankAccLedgEntry."Bank Account No.") THEN;
        EXIT(STRSUBSTNO('%1 %2 %3',BankAcc.TABLECAPTION,BankAcc."No.",BankAcc.Name));
      END;
      IF "Entry Type" = "Entry Type"::"Fixed Asset" THEN BEGIN
        IF FALedgEntry.GET("Entry No.") THEN;
        IF FA.GET(FALedgEntry."FA No.") THEN;
        EXIT(STRSUBSTNO('%1 %2 %3',FA.TABLECAPTION,FA."No.",FA.Description));
      END;
      IF "Entry Type" = "Entry Type"::Maintenance THEN BEGIN
        IF MaintenanceLedgEntry.GET("Entry No.") THEN;
        IF FA.GET(MaintenanceLedgEntry."FA No.") THEN;
        EXIT(STRSUBSTNO('%1 %2 %3',FA.TABLECAPTION,FA."No.",FA.Description));
      END;
      IF "Entry Type" = "Entry Type"::VAT THEN
        EXIT(STRSUBSTNO('%1',VATEntry.TABLECAPTION));
      IF "Entry Type" = "Entry Type"::"Tax Difference" THEN BEGIN
        IF TaxDiffEntry0.GET("Entry No.") THEN;
        IF TaxDiff.GET(TaxDiffEntry0."Tax Diff. Code") THEN;
        EXIT(STRSUBSTNO('%1 %2 %3',TaxDiff.TABLECAPTION,TaxDiff.Code,TaxDiff.Description));
      END;
      //NC MTF02 > II
      IF "Entry Type" = "Entry Type"::FI THEN BEGIN
        IF FILedgEntry.GET("Entry No.") THEN;
        IF FI.GET(FILedgEntry."FI No.") THEN;
        EXIT(STRSUBSTNO('%1 %2 %3',FI.TABLECAPTION,FI."No.",FI.Name));
      END;
      //NC MTF02 < II
    END;

    LOCAL PROCEDURE CheckPostingDate@23(PostingDate@1000 : Date;Caption@1002 : Text[50];EntryNo@1001 : Integer);
    BEGIN
      IF "Corrected Period Date" <> 0D THEN
        PostingDate := "Posting Date";
      IF GenJnlCheckLine.DateNotAllowed(PostingDate) THEN
        ERROR(Text001,Caption,EntryNo);
      IF PostingDate > MaxPostingDate THEN
        MaxPostingDate := PostingDate;
    END;

    LOCAL PROCEDURE CheckFAPostingDate@24(FAPostingDate@1000 : Date;Caption@1004 : Text[50];EntryNo@1003 : Integer);
    VAR
      UserSetup@1001 : Record 91;
      FASetup@1002 : Record 5603;
    BEGIN
      IF (AllowPostingFrom = 0D) AND (AllowPostingto = 0D) THEN BEGIN
        IF USERID <> '' THEN
          IF UserSetup.GET(USERID) THEN BEGIN
            AllowPostingFrom := UserSetup."Allow FA Posting From";
            AllowPostingto := UserSetup."Allow FA Posting To";
          END;
        IF (AllowPostingFrom = 0D) AND (AllowPostingto = 0D) THEN BEGIN
          FASetup.GET;
          AllowPostingFrom := FASetup."Allow FA Posting From";
          AllowPostingto := FASetup."Allow FA Posting To";
        END;
        IF AllowPostingto = 0D THEN
          AllowPostingto := 31129998D;
      END;
      IF (FAPostingDate < AllowPostingFrom) OR (FAPostingDate > AllowPostingto) THEN
        ERROR(Text005,Caption,EntryNo,FALedgEntry.FIELDCAPTION("FA Posting Date"));
      IF FAPostingDate > MaxPostingDate THEN
        MaxPostingDate := FAPostingDate;
    END;

    PROCEDURE TestFieldError@4();
    BEGIN
      ERROR(Text004);
    END;

    PROCEDURE AlreadyReversedEntry@29(Caption@1000 : Text[50];EntryNo@1001 : Integer);
    BEGIN
      ERROR(Text011,Caption,EntryNo);
    END;

    PROCEDURE VerifyReversalEntries@25(VAR ReversalEntry2@1000 : Record 179;Number@1002 : Integer;RevType@1001 : 'Transaction,Register') : Boolean;
    BEGIN
      InsertReversalEntry(Number,RevType);
      CLEAR(TempReversalEntry);
      CLEAR(ReversalEntry2);
      IF ReversalEntry2.FINDSET THEN
        REPEAT
          IF TempReversalEntry.NEXT = 0 THEN
            EXIT(FALSE);
          IF NOT TempReversalEntry.Equal(ReversalEntry2) THEN
            EXIT(FALSE);
        UNTIL ReversalEntry2.NEXT = 0;
      EXIT(TempReversalEntry.NEXT = 0);
    END;

    PROCEDURE Equal@27(ReversalEntry2@1000 : Record 179) : Boolean;
    BEGIN
      EXIT(
        ("Entry Type" = ReversalEntry2."Entry Type") AND
        ("Entry No." = ReversalEntry2."Entry No."));
    END;

    PROCEDURE ReversalErrorForChangedEntry@31(TableName@1000 : Text[50];EntryNo@1001 : Integer) : Text[1024];
    BEGIN
      EXIT(STRSUBSTNO(Text000,TableName,EntryNo));
    END;

    PROCEDURE SetHideDialog@30(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    LOCAL PROCEDURE CheckTaxDiff@1470000(TaxDiffEntry0@1001 : Record 17306);
    VAR
      TaxDiff@1470001 : Record 17300;
      TaxDiffEntry1@1470000 : Record 17306;
    BEGIN
      WITH TaxDiffEntry0 DO BEGIN
        TaxDiff.GET(TaxDiffEntry0."Tax Diff. Code");
        CheckPostingDate("Posting Date",TABLECAPTION,"Entry No.");
        IF Reversed THEN
          AlreadyReversedEntry(TABLECAPTION,"Entry No.");
        TaxDiffEntry1.SETCURRENTKEY("Tax Diff. Code","Source Type","Source No.");
        TaxDiffEntry1.SETRANGE("Tax Diff. Code","Tax Diff. Code");
        TaxDiffEntry1.SETRANGE("Source Type","Source Type");
        TaxDiffEntry1.SETRANGE("Source No.","Source No.");
        TaxDiffEntry1.SETFILTER("Entry No.",'>%1',"Entry No.");
        TaxDiffEntry1.SETRANGE(Reversed,FALSE);
        IF TaxDiffEntry1.FIND('+') THEN
          ERROR(Text1001,TABLECAPTION,"Entry No.",TaxDiffEntry1."Entry No.");
      END;
    END;

    PROCEDURE ShowTaxDiffEntries@1470012();
    BEGIN
      PAGE.RUN(0,TaxDiffEntry);
    END;

    PROCEDURE SetVATSettlReverseFilters@1470001(VATEntryNo@1470000 : Integer;FirstGLEntryNo@1470001 : Integer;LastGLEntryNo@1470002 : Integer);
    BEGIN
      VATEntry.SETRANGE("Entry No.",VATEntryNo);
      GLEntry.SETRANGE("Entry No.", FirstGLEntryNo,LastGLEntryNo);
      CustLedgEntry.SETRANGE("Entry No.",-1);
      VendLedgEntry.SETRANGE("Entry No.",-1);
      BankAccLedgEntry.SETRANGE("Entry No.",-1);
      FALedgEntry.SETCURRENTKEY("G/L Entry No.");
      FALedgEntry.SETRANGE("G/L Entry No.",-1);
      MaintenanceLedgEntry.SETCURRENTKEY("G/L Entry No.");
      MaintenanceLedgEntry.SETRANGE("G/L Entry No.",-1);
      TaxDiffEntry.SETCURRENTKEY("Transaction No.");
      TaxDiffEntry.SETRANGE("Transaction No.",-1);
    END;

    PROCEDURE VATAllocationExist@1210002(VAR VATEntry@1210000 : Record 254) : Boolean;
    VAR
      VATEntry2@1210001 : Record 254;
    BEGIN
      VATEntry2.COPYFILTERS(VATEntry);
      VATEntry2.SETRANGE("VAT Allocation Type",VATEntry2."VAT Allocation Type"::Charge);
      EXIT(NOT VATEntry2.ISEMPTY);
    END;

    PROCEDURE SetHideWarningDialogs@41();
    BEGIN
      HideDialog := TRUE;
      HideWarningDialogs := TRUE;
    END;

    LOCAL PROCEDURE UnrealizedVATReverseError@33(TableName@1001 : Text[50];EntryNo@1000 : Integer) : Text;
    BEGIN
      EXIT(STRSUBSTNO(UnrealizedVATReverseErr,TableName,EntryNo));
    END;

    LOCAL PROCEDURE InsertFromCustLedgEntry@34(VAR TempRevertTransactionNo@1006 : TEMPORARY Record 2000000026;Number@1001 : Integer;RevType@1002 : 'Transaction,Register';VAR NextLineNo@1003 : Integer);
    VAR
      Cust@1000 : Record 18;
      DtldCustLedgEntry@1004 : Record 379;
    BEGIN
      DtldCustLedgEntry.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
      DtldCustLedgEntry.SETFILTER(
        "Entry Type",'<>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
      IF CustLedgEntry.FINDSET THEN
        REPEAT
          DtldCustLedgEntry.SETRANGE("Transaction No.",CustLedgEntry."Transaction No.");
          DtldCustLedgEntry.SETRANGE("Customer No.",CustLedgEntry."Customer No.");
          IF (NOT DtldCustLedgEntry.ISEMPTY) AND (RevType = RevType::Register) THEN
            ERROR(Text012,Number);

          CLEAR(TempReversalEntry);
          IF RevType = RevType::Register THEN
            TempReversalEntry."G/L Register No." := Number;
          TempReversalEntry."Reversal Type" := RevType;
          TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::Customer;
          TempReversalEntry."Entry No." := CustLedgEntry."Entry No.";
          Cust.GET(CustLedgEntry."Customer No.");
          TempReversalEntry."Account No." := Cust."No.";
          TempReversalEntry."Account Name" := Cust.Name;
          TempReversalEntry."Posting Date" := CustLedgEntry."Posting Date";
          TempReversalEntry."Source Code" := CustLedgEntry."Source Code";
          TempReversalEntry."Journal Batch Name" := CustLedgEntry."Journal Batch Name";
          TempReversalEntry."Transaction No." := CustLedgEntry."Transaction No.";
          TempReversalEntry."Currency Code" := CustLedgEntry."Currency Code";
          TempReversalEntry.Description := CustLedgEntry.Description;
          CustLedgEntry.CALCFIELDS(Amount,"Debit Amount","Credit Amount",
            "Amount (LCY)","Debit Amount (LCY)","Credit Amount (LCY)");
          TempReversalEntry.Amount := CustLedgEntry.Amount;
          TempReversalEntry."Debit Amount" := CustLedgEntry."Debit Amount";
          TempReversalEntry."Credit Amount" := CustLedgEntry."Credit Amount";
          TempReversalEntry."Amount (LCY)" := CustLedgEntry."Amount (LCY)";
          TempReversalEntry."Debit Amount (LCY)" := CustLedgEntry."Debit Amount (LCY)";
          TempReversalEntry."Credit Amount (LCY)" := CustLedgEntry."Credit Amount (LCY)";
          TempReversalEntry."Document Type" := CustLedgEntry."Document Type";
          TempReversalEntry."Document No." := CustLedgEntry."Document No.";
          TempReversalEntry."Bal. Account Type" := CustLedgEntry."Bal. Account Type";
          TempReversalEntry."Bal. Account No." := CustLedgEntry."Bal. Account No.";
          TempReversalEntry."Line No." := NextLineNo;
          NextLineNo := NextLineNo + 1;
          TempReversalEntry.INSERT;

          DtldCustLedgEntry.SETRANGE(Unapplied,TRUE);
          IF DtldCustLedgEntry.FINDSET THEN
            REPEAT
              InsertCustTempRevertTransNo(TempRevertTransactionNo,DtldCustLedgEntry."Unapplied by Entry No.");
            UNTIL DtldCustLedgEntry.NEXT = 0;
          DtldCustLedgEntry.SETRANGE(Unapplied);
        UNTIL CustLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertFromVendLedgEntry@35(VAR TempRevertTransactionNo@1005 : TEMPORARY Record 2000000026;Number@1002 : Integer;RevType@1001 : 'Transaction,Register';VAR NextLineNo@1000 : Integer);
    VAR
      Vend@1003 : Record 23;
      DtldVendLedgEntry@1004 : Record 380;
    BEGIN
      DtldVendLedgEntry.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
      DtldVendLedgEntry.SETFILTER(
        "Entry Type",'<>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
      IF VendLedgEntry.FINDSET THEN
        REPEAT
          DtldVendLedgEntry.SETRANGE("Transaction No.",VendLedgEntry."Transaction No.");
          DtldVendLedgEntry.SETRANGE("Vendor No.",VendLedgEntry."Vendor No.");
          IF (NOT DtldVendLedgEntry.ISEMPTY) AND (RevType = RevType::Register) THEN
            ERROR(Text012,Number);

          CLEAR(TempReversalEntry);
          IF RevType = RevType::Register THEN
            TempReversalEntry."G/L Register No." := Number;
          TempReversalEntry."Reversal Type" := RevType;
          TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::Vendor;
          TempReversalEntry."Entry No." := VendLedgEntry."Entry No.";
          Vend.GET(VendLedgEntry."Vendor No.");
          TempReversalEntry."Account No." := Vend."No.";
          TempReversalEntry."Account Name" := Vend.Name;
          TempReversalEntry."Posting Date" := VendLedgEntry."Posting Date";
          TempReversalEntry."Source Code" := VendLedgEntry."Source Code";
          TempReversalEntry."Journal Batch Name" := VendLedgEntry."Journal Batch Name";
          TempReversalEntry."Transaction No." := VendLedgEntry."Transaction No.";
          TempReversalEntry."Currency Code" := VendLedgEntry."Currency Code";
          TempReversalEntry.Description := VendLedgEntry.Description;
          VendLedgEntry.CALCFIELDS(Amount,"Debit Amount","Credit Amount",
            "Amount (LCY)","Debit Amount (LCY)","Credit Amount (LCY)");
          TempReversalEntry.Amount := VendLedgEntry.Amount;
          TempReversalEntry."Debit Amount" := VendLedgEntry."Debit Amount";
          TempReversalEntry."Credit Amount" := VendLedgEntry."Credit Amount";
          TempReversalEntry."Amount (LCY)" := VendLedgEntry."Amount (LCY)";
          TempReversalEntry."Debit Amount (LCY)" := VendLedgEntry."Debit Amount (LCY)";
          TempReversalEntry."Credit Amount (LCY)" := VendLedgEntry."Credit Amount (LCY)";
          TempReversalEntry."Document Type" := VendLedgEntry."Document Type";
          TempReversalEntry."Document No." := VendLedgEntry."Document No.";
          TempReversalEntry."Bal. Account Type" := VendLedgEntry."Bal. Account Type";
          TempReversalEntry."Bal. Account No." := VendLedgEntry."Bal. Account No.";
          TempReversalEntry."Line No." := NextLineNo;
          NextLineNo := NextLineNo + 1;
          TempReversalEntry.INSERT;

          DtldVendLedgEntry.SETRANGE(Unapplied,TRUE);
          IF DtldVendLedgEntry.FINDSET THEN
            REPEAT
              InsertVendTempRevertTransNo(TempRevertTransactionNo,DtldVendLedgEntry."Unapplied by Entry No.");
            UNTIL DtldVendLedgEntry.NEXT = 0;
          DtldVendLedgEntry.SETRANGE(Unapplied);
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertFromBankAccLedgEntry@36(Number@1002 : Integer;RevType@1001 : 'Transaction,Register';VAR NextLineNo@1000 : Integer);
    VAR
      BankAcc@1003 : Record 270;
    BEGIN
      IF BankAccLedgEntry.FINDSET THEN
        REPEAT
          CLEAR(TempReversalEntry);
          IF RevType = RevType::Register THEN
            TempReversalEntry."G/L Register No." := Number;
          TempReversalEntry."Reversal Type" := RevType;
          TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::"Bank Account";
          TempReversalEntry."Entry No." := BankAccLedgEntry."Entry No.";
          BankAcc.GET(BankAccLedgEntry."Bank Account No.");
          TempReversalEntry."Account No." := BankAcc."No.";
          TempReversalEntry."Account Name" := BankAcc.Name;
          TempReversalEntry."Posting Date" := BankAccLedgEntry."Posting Date";
          TempReversalEntry."Source Code" := BankAccLedgEntry."Source Code";
          TempReversalEntry."Journal Batch Name" := BankAccLedgEntry."Journal Batch Name";
          TempReversalEntry."Transaction No." := BankAccLedgEntry."Transaction No.";
          TempReversalEntry."Currency Code" := BankAccLedgEntry."Currency Code";
          TempReversalEntry.Description := BankAccLedgEntry.Description;
          TempReversalEntry.Amount := BankAccLedgEntry.Amount;
          TempReversalEntry."Debit Amount" := BankAccLedgEntry."Debit Amount";
          TempReversalEntry."Credit Amount" := BankAccLedgEntry."Credit Amount";
          TempReversalEntry."Amount (LCY)" := BankAccLedgEntry."Amount (LCY)";
          TempReversalEntry."Debit Amount (LCY)" := BankAccLedgEntry."Debit Amount (LCY)";
          TempReversalEntry."Credit Amount (LCY)" := BankAccLedgEntry."Credit Amount (LCY)";
          TempReversalEntry."Document Type" := BankAccLedgEntry."Document Type";
          TempReversalEntry."Document No." := BankAccLedgEntry."Document No.";
          TempReversalEntry."Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
          TempReversalEntry."Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
          TempReversalEntry."Line No." := NextLineNo;
          NextLineNo := NextLineNo + 1;
          TempReversalEntry.INSERT;
        UNTIL BankAccLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertFromFALedgEntry@37(Number@1002 : Integer;RevType@1001 : 'Transaction,Register';VAR NextLineNo@1000 : Integer);
    VAR
      FA@1003 : Record 5600;
    BEGIN
      IF FALedgEntry.FINDSET THEN
        REPEAT
          CLEAR(TempReversalEntry);
          IF RevType = RevType::Register THEN
            TempReversalEntry."G/L Register No." := Number;
          TempReversalEntry."Reversal Type" := RevType;
          TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::"Fixed Asset";
          TempReversalEntry."Entry No." := FALedgEntry."Entry No.";
          FA.GET(FALedgEntry."FA No.");
          TempReversalEntry."Account No." := FA."No.";
          TempReversalEntry."Account Name" := FA.Description;
          TempReversalEntry."Posting Date" := FALedgEntry."Posting Date";
          TempReversalEntry."FA Posting Category" := FALedgEntry."FA Posting Category";
          TempReversalEntry."FA Posting Type" := FALedgEntry."FA Posting Type" + 1;
          TempReversalEntry."Source Code" := FALedgEntry."Source Code";
          TempReversalEntry."Journal Batch Name" := FALedgEntry."Journal Batch Name";
          TempReversalEntry."Transaction No." := FALedgEntry."Transaction No.";
          TempReversalEntry.Description := FALedgEntry.Description;
          TempReversalEntry."Amount (LCY)" := FALedgEntry.Amount;
          TempReversalEntry."Debit Amount (LCY)" := FALedgEntry."Debit Amount";
          TempReversalEntry."Credit Amount (LCY)" := FALedgEntry."Credit Amount";
          TempReversalEntry."VAT Amount" := FALedgEntry."VAT Amount";
          TempReversalEntry."Document Type" := FALedgEntry."Document Type";
          TempReversalEntry."Document No." := FALedgEntry."Document No.";
          TempReversalEntry."Bal. Account Type" := FALedgEntry."Bal. Account Type";
          TempReversalEntry."Bal. Account No." := FALedgEntry."Bal. Account No.";
          IF FALedgEntry."FA Posting Type" <> FALedgEntry."FA Posting Type"::"Salvage Value" THEN BEGIN
            TempReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            TempReversalEntry.INSERT;
          END;
        UNTIL FALedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertFromMaintenanceLedgEntry@38(Number@1002 : Integer;RevType@1001 : 'Transaction,Register';VAR NextLineNo@1000 : Integer);
    VAR
      FA@1003 : Record 5600;
    BEGIN
      IF MaintenanceLedgEntry.FINDSET THEN
        REPEAT
          CLEAR(TempReversalEntry);
          IF RevType = RevType::Register THEN
            TempReversalEntry."G/L Register No." := Number;
          TempReversalEntry."Reversal Type" := RevType;
          TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::Maintenance;
          TempReversalEntry."Entry No." := MaintenanceLedgEntry."Entry No.";
          FA.GET(MaintenanceLedgEntry."FA No.");
          TempReversalEntry."Account No." := FA."No.";
          TempReversalEntry."Account Name" := FA.Description;
          TempReversalEntry."Posting Date" := MaintenanceLedgEntry."Posting Date";
          TempReversalEntry."Source Code" := MaintenanceLedgEntry."Source Code";
          TempReversalEntry."Journal Batch Name" := MaintenanceLedgEntry."Journal Batch Name";
          TempReversalEntry."Transaction No." := MaintenanceLedgEntry."Transaction No.";
          TempReversalEntry.Description := MaintenanceLedgEntry.Description;
          TempReversalEntry."Amount (LCY)" := MaintenanceLedgEntry.Amount;
          TempReversalEntry."Debit Amount (LCY)" := MaintenanceLedgEntry."Debit Amount";
          TempReversalEntry."Credit Amount (LCY)" := MaintenanceLedgEntry."Credit Amount";
          TempReversalEntry."VAT Amount" := MaintenanceLedgEntry."VAT Amount";
          TempReversalEntry."Document Type" := MaintenanceLedgEntry."Document Type";
          TempReversalEntry."Document No." := MaintenanceLedgEntry."Document No.";
          TempReversalEntry."Bal. Account Type" := MaintenanceLedgEntry."Bal. Account Type";
          TempReversalEntry."Bal. Account No." := MaintenanceLedgEntry."Bal. Account No.";
          TempReversalEntry."Line No." := NextLineNo;
          NextLineNo := NextLineNo + 1;
          TempReversalEntry.INSERT;
        UNTIL MaintenanceLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertFromVATEntry@39(VAR TempRevertTransactionNo@1004 : TEMPORARY Record 2000000026;Number@1002 : Integer;RevType@1001 : 'Transaction,Register';VAR NextLineNo@1000 : Integer);
    BEGIN
      TempRevertTransactionNo.FINDSET;
      REPEAT
        IF RevType = RevType::Transaction THEN
          VATEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
        IF VATEntry.FINDSET THEN
          REPEAT
            CLEAR(TempReversalEntry);
            IF RevType = RevType::Register THEN
              TempReversalEntry."G/L Register No." := Number;
            TempReversalEntry."Reversal Type" := RevType;
            TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::VAT;
            TempReversalEntry."Entry No." := VATEntry."Entry No.";
            TempReversalEntry."Posting Date" := VATEntry."Posting Date";
            TempReversalEntry."Source Code" := VATEntry."Source Code";
            TempReversalEntry."Transaction No." := VATEntry."Transaction No.";
            TempReversalEntry.Amount := VATEntry.Amount;
            TempReversalEntry."Amount (LCY)" := VATEntry.Amount;
            TempReversalEntry."Document Type" := VATEntry."Document Type";
            TempReversalEntry."Document No." := VATEntry."Document No.";
            TempReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            TempReversalEntry.INSERT;
          UNTIL VATEntry.NEXT = 0;
      UNTIL TempRevertTransactionNo.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertFromGLEntry@40(VAR TempRevertTransactionNo@1005 : TEMPORARY Record 2000000026;Number@1002 : Integer;RevType@1001 : 'Transaction,Register';VAR NextLineNo@1000 : Integer);
    VAR
      GLAcc@1004 : Record 15;
    BEGIN
      TempRevertTransactionNo.FINDSET;
      REPEAT
        IF RevType = RevType::Transaction THEN
          GLEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
        IF GLEntry.FINDSET THEN
          REPEAT
            CLEAR(TempReversalEntry);
            IF RevType = RevType::Register THEN
              TempReversalEntry."G/L Register No." := Number;
            TempReversalEntry."Reversal Type" := RevType;
            TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::"G/L Account";
            TempReversalEntry."Entry No." := GLEntry."Entry No.";
            IF NOT GLAcc.GET(GLEntry."G/L Account No.") THEN
              ERROR(Text009,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
            TempReversalEntry."Account No." := GLAcc."No.";
            TempReversalEntry."Account Name" := GLAcc.Name;
            TempReversalEntry."Posting Date" := GLEntry."Posting Date";
            TempReversalEntry."Source Code" := GLEntry."Source Code";
            TempReversalEntry."Journal Batch Name" := GLEntry."Journal Batch Name";
            TempReversalEntry."Transaction No." := GLEntry."Transaction No.";
            TempReversalEntry."Source Type" := GLEntry."Source Type";
            TempReversalEntry."Source No." := GLEntry."Source No.";
            TempReversalEntry.Description := GLEntry.Description;
            TempReversalEntry."Amount (LCY)" := GLEntry.Amount;
            TempReversalEntry."Debit Amount (LCY)" := GLEntry."Debit Amount";
            TempReversalEntry."Credit Amount (LCY)" := GLEntry."Credit Amount";
            TempReversalEntry."VAT Amount" := GLEntry."VAT Amount";
            TempReversalEntry."Document Type" := GLEntry."Document Type";
            TempReversalEntry."Document No." := GLEntry."Document No.";
            TempReversalEntry."Bal. Account Type" := GLEntry."Bal. Account Type";
            TempReversalEntry."Bal. Account No." := GLEntry."Bal. Account No.";
            TempReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            TempReversalEntry.INSERT;
          UNTIL GLEntry.NEXT = 0;
      UNTIL TempRevertTransactionNo.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertFromTaxDiffEntry@1210008(VAR TempRevertTransactionNo@1210003 : TEMPORARY Record 2000000026;Number@1210002 : Integer;RevType@1210001 : 'Transaction,Register';VAR NextLineNo@1210000 : Integer);
    VAR
      TaxDiff@1210004 : Record 17300;
    BEGIN
      TempRevertTransactionNo.FINDSET;
      REPEAT
        IF RevType = RevType::Transaction THEN
          TaxDiffEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
        IF TaxDiffEntry.FINDSET THEN
          REPEAT
            CLEAR(TempReversalEntry);
            IF RevType = RevType::Register THEN
              TempReversalEntry."G/L Register No." := Number;
            TempReversalEntry."Reversal Type" := RevType;
            TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::"Tax Difference";
            TempReversalEntry."Entry No." := TaxDiffEntry."Entry No.";
            IF NOT TaxDiff.GET(TaxDiffEntry."Tax Diff. Code") THEN
              ERROR(Text009,TaxDiffEntry.TABLECAPTION,TaxDiff.TABLECAPTION);
            TempReversalEntry."Account No." := TaxDiff.Code;
            TempReversalEntry."Account Name" := COPYSTR(TaxDiff.Description,1,MAXSTRLEN(TempReversalEntry."Account Name"));
            TempReversalEntry."Posting Date" := TaxDiffEntry."Posting Date";
            TempReversalEntry."Source Code" := TaxDiffEntry."Source Code";
            TempReversalEntry."Journal Batch Name" := TaxDiffEntry."Journal Batch Name";
            TempReversalEntry."Transaction No." := TaxDiffEntry."Transaction No.";
            CASE TaxDiffEntry."Source Type" OF
              TaxDiffEntry."Source Type"::"Future Expense":
                TempReversalEntry."Source Type" := TempReversalEntry."Source Type"::"Future Expense";
            END;
            TempReversalEntry."Source No." := TaxDiffEntry."Source No.";
            TempReversalEntry.Description := TaxDiffEntry.Description;
            TempReversalEntry."Amount (LCY)" := TaxDiffEntry."Tax Amount";
            TempReversalEntry."Debit Amount (LCY)" := TaxDiffEntry."Asset Tax Amount";
            TempReversalEntry."Credit Amount (LCY)" := TaxDiffEntry."Liability Tax Amount";
            TempReversalEntry."VAT Amount" := TaxDiffEntry."Disposal Tax Amount";
            TempReversalEntry."Document No." := TaxDiffEntry."Document No.";
            TempReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            TempReversalEntry.INSERT;
          UNTIL TaxDiffEntry.NEXT(1) = 0;
      UNTIL TempRevertTransactionNo.NEXT = 0;
    END;

    PROCEDURE InsertFromVATAllocation@1210012(Number@1210003 : Integer;RevType@1210002 : 'Transaction,Register';VAR NextLineNo@1210001 : Integer);
    VAR
      GLAcc@1210004 : Record 15;
      Item@1210006 : Record 27;
      FromValueEntryNo@1210000 : Integer;
      ToValueEntryNo@1210005 : Integer;
    BEGIN
      FromValueEntryNo := 0;
      IF TempGLReg.FINDSET THEN
        REPEAT
          GLEntry.SETRANGE("Entry No.",TempGLReg."From Entry No.",TempGLReg."To Entry No.");
          IF GLEntry.FINDSET THEN
            REPEAT
              CLEAR(TempReversalEntry);
              IF RevType = RevType::Register THEN
                TempReversalEntry."G/L Register No." := TempGLReg."No.";
              TempReversalEntry."Reversal Type" := RevType;
              TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::"G/L Account";
              TempReversalEntry."Entry No." := GLEntry."Entry No.";
              IF NOT GLAcc.GET(GLEntry."G/L Account No.") THEN
                ERROR(Text009,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
              TempReversalEntry."Account No." := GLAcc."No.";
              TempReversalEntry."Account Name" := GLAcc.Name;
              TempReversalEntry."Posting Date" := GLEntry."Posting Date";
              TempReversalEntry."Source Code" := GLEntry."Source Code";
              TempReversalEntry."Journal Batch Name" := GLEntry."Journal Batch Name";
              TempReversalEntry."Transaction No." := GLEntry."Transaction No.";
              TempReversalEntry."Source Type" := GLEntry."Source Type";
              TempReversalEntry."Source No." := GLEntry."Source No.";
              TempReversalEntry.Description := GLEntry.Description;
              TempReversalEntry."Amount (LCY)" := GLEntry.Amount;
              TempReversalEntry."Debit Amount (LCY)" := GLEntry."Debit Amount";
              TempReversalEntry."Credit Amount (LCY)" := GLEntry."Credit Amount";
              TempReversalEntry."VAT Amount" := GLEntry."VAT Amount";
              TempReversalEntry."Document Type" := GLEntry."Document Type";
              TempReversalEntry."Document No." := GLEntry."Document No.";
              TempReversalEntry."Bal. Account Type" := GLEntry."Bal. Account Type";
              TempReversalEntry."Bal. Account No." := GLEntry."Bal. Account No.";
              TempReversalEntry."Line No." := NextLineNo;
              TempReversalEntry."VAT Allocation" := VATAllocOnCost;
              NextLineNo := NextLineNo + 1;
              TempReversalEntry.INSERT;

              IF GLEntry.Amount > 0 THEN BEGIN
                GLItemLedgRelation.RESET;
                GLItemLedgRelation.SETRANGE("G/L Entry No.",GLEntry."Entry No.");
                IF GLItemLedgRelation.FINDFIRST THEN BEGIN
                  CLEAR(TempReversalEntry);
                  ValueEntry.GET(GLItemLedgRelation."Value Entry No.");
                  IF FromValueEntryNo = 0 THEN
                    FromValueEntryNo := ValueEntry."Entry No.";
                  ToValueEntryNo := ValueEntry."Entry No.";
                  IF RevType = RevType::Register THEN
                    TempReversalEntry."G/L Register No." := TempGLReg."No.";
                  TempReversalEntry."Reversal Type" := RevType;
                  TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::"Value Entry";
                  TempReversalEntry."Entry No." := ValueEntry."Entry No.";
                  Item.GET(ValueEntry."Item No.");
                  TempReversalEntry."Account No." := Item."No.";
                  TempReversalEntry."Account Name" := Item.Description;
                  TempReversalEntry."Posting Date" := ValueEntry."Posting Date";
                  TempReversalEntry."Source Code" := ValueEntry."Source Code";
                  TempReversalEntry."Journal Batch Name" := ValueEntry."Journal Batch Name";
                  TempReversalEntry."Transaction No." := GLEntry."Transaction No.";
                  TempReversalEntry."Document Type" := GLEntry."Document Type";
                  TempReversalEntry."Document No." := GLEntry."Document No.";
                  TempReversalEntry.Description := ValueEntry.Description;
                  TempReversalEntry."Amount (LCY)" := ValueEntry."Cost Posted to G/L";
                  IF (TempReversalEntry."Amount (LCY)" > 0) XOR ValueEntry."Red Storno" THEN
                    TempReversalEntry."Debit Amount (LCY)" := TempReversalEntry."Amount (LCY)"
                  ELSE
                    TempReversalEntry."Credit Amount (LCY)" := TempReversalEntry."Amount (LCY)";
                  TempReversalEntry."Line No." := NextLineNo;
                  NextLineNo := NextLineNo + 1;
                  TempReversalEntry.INSERT;
                END;
              END;
            UNTIL GLEntry.NEXT = 0;
        UNTIL TempGLReg.NEXT = 0;
      ValueEntry.SETRANGE("Entry No.",FromValueEntryNo,ToValueEntryNo);
    END;

    LOCAL PROCEDURE InsertFromFILedgEntry@1101495024(VAR TempRevertTransactionNo@1101495003 : TEMPORARY Record 2000000026;Number@1101495002 : Integer;RevType@1101495001 : 'Transaction,Register';VAR NextLineNo@1101495000 : Integer);
    BEGIN
      // MTF02 > II
      IF FILedgEntry.FIND('-') THEN
        REPEAT
          CLEAR(TempReversalEntry);
          IF RevType = RevType::Register THEN
            TempReversalEntry."G/L Register No." := Number;
          TempReversalEntry."Reversal Type" := RevType;
          TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::FI;
          TempReversalEntry."Entry No." :=  FILedgEntry."Entry No.";
      //    FI.GET(FILedgEntry."FI No.");
          TempReversalEntry."Account No." := FILedgEntry."FI No.";
      //    ReversalEntry."Account Name" := FI.Name;
          TempReversalEntry."Posting Date" := FILedgEntry."Posting Date";
      //    ReversalEntry."FA Posting Category" := FALedgEntry."FA Posting Category";
      //    ReversalEntry."FA Posting Type" := FALedgEntry."FA Posting Type";
          TempReversalEntry."Source Code" := FILedgEntry."Source Code";
          TempReversalEntry."Journal Batch Name" := FILedgEntry."Journal Batch Name";
          TempReversalEntry."Transaction No." := FILedgEntry."Transaction No.";
          TempReversalEntry.Description := FILedgEntry.Description;
          FILedgEntry.CALCFIELDS(Amount);
          TempReversalEntry."Amount (LCY)" := FILedgEntry.Amount;
      //    ReversalEntry."Debit Amount (LCY)" := FILedgEntry."Debit Amount";
      //    ReversalEntry."Credit Amount (LCY)" := FILedgEntry."Credit Amount";
      //    ReversalEntry."VAT Amount" := FILedgEntry."VAT Amount";
      //    ReversalEntry."Document Type" := FALedgEntry."Document Type";
          TempReversalEntry."Document No." := FILedgEntry."Document No.";
      //    ReversalEntry."Bal. Account Type" := FILedgEntry."Bal. Account Type";
      //    ReversalEntry."Bal. Account No." := FILedgEntry."Bal. Account No.";
      //    IF FALedgEntry."FA Posting Type" <> FALedgEntry."FA Posting Type"::"Salvage Value" THEN BEGIN
          TempReversalEntry."Line No." := NextLineNo;
          NextLineNo := NextLineNo + 1;
          TempReversalEntry.INSERT;
      //    END;

          FIValueEntry.SETRANGE("FI Ledger Entry No.", FILedgEntry."Entry No.");
          IF FIValueEntry.FIND('-') THEN REPEAT
            FIValueEntryRelation.SETRANGE("FI Value Entry No.", FIValueEntry."Entry No.");
            IF FIValueEntryRelation.FIND('-') THEN REPEAT
              IF GLEntry2.GET(FIValueEntryRelation."G/L Entry No.") THEN BEGIN
                GLEntry2.TESTFIELD(Reversed, FALSE);
                TempRevertTransactionNo.Number := GLEntry2."Transaction No.";
                IF TempRevertTransactionNo.INSERT THEN;
              END;
            UNTIL FIValueEntryRelation.NEXT = 0;
          UNTIL FIValueEntry.NEXT = 0;
        UNTIL FILedgEntry.NEXT = 0;
      // MTF02 < II
    END;

    LOCAL PROCEDURE InsertFromAllocCostGLEntry@1101495027(VAR TempRevertTransactionNo@1101495003 : TEMPORARY Record 2000000026;Number@1101495002 : Integer;RevType@1101495001 : 'Transaction,Register';VAR NextLineNo@1101495000 : Integer);
    VAR
      GLAcc@1101495004 : Record 15;
    BEGIN
      //NC NCS-1810 > DP
      TempRevertTransactionNo.FINDSET;
      REPEAT
        IF RevType = RevType::Transaction THEN
          AllocationCostGLEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
        IF AllocationCostGLEntry.FIND('-') THEN
          REPEAT
            CLEAR(TempReversalEntry);
            IF (AllocationCostGLEntry."FA Entry Type"=AllocationCostGLEntry."FA Entry Type"::" ") THEN
                ERROR(Text50005);
            IF RevType = RevType::Register THEN BEGIN
              TempReversalEntry."G/L Register No." := Number;
              AllocationRegister.SETFILTER("From Entry No.",'<=%1',AllocationCostGLEntry."Entry No.");
              AllocationRegister.SETFILTER("To Entry No.",'>=%1',AllocationCostGLEntry."Entry No.");
              IF AllocationRegister.FINDLAST THEN
                TempReversalEntry."Alloc. G/L Register No." :=AllocationRegister."No.";
            END;
            TempReversalEntry."Reversal Type" := RevType;
            TempReversalEntry."Entry Type" := TempReversalEntry."Entry Type"::"Allocation G/L";
            TempReversalEntry."Entry No." :=  AllocationCostGLEntry."Entry No.";
            IF NOT GLAcc.GET(AllocationCostGLEntry."G/L Account No.") THEN
              ERROR(Text009,AllocationCostGLEntry.TABLECAPTION,GLAcc.TABLECAPTION);

            TempReversalEntry."Account No." := GLAcc."No.";
            TempReversalEntry."Account Name" := GLAcc.Name;
            TempReversalEntry."Posting Date" := AllocationCostGLEntry."Posting Date";
            TempReversalEntry."Source Code" := AllocationCostGLEntry."Source Code";
            TempReversalEntry."Journal Batch Name" := AllocationCostGLEntry."Journal Batch Name";
            TempReversalEntry."Transaction No." := AllocationCostGLEntry."Transaction No.";
            TempReversalEntry."Source Type" := AllocationCostGLEntry."Source Type";
            TempReversalEntry."Source No." := AllocationCostGLEntry."Source No.";
            TempReversalEntry.Description := COPYSTR(AllocationCostGLEntry.Description,1,MAXSTRLEN(TempReversalEntry.Description));
            TempReversalEntry."Amount (LCY)" := AllocationCostGLEntry.Amount;
            TempReversalEntry."Debit Amount (LCY)" := AllocationCostGLEntry."Debit Amount";
            TempReversalEntry."Credit Amount (LCY)" := AllocationCostGLEntry."Credit Amount";
            TempReversalEntry."VAT Amount" := AllocationCostGLEntry."VAT Amount";
            TempReversalEntry."Document Type" := AllocationCostGLEntry."Document Type";
            TempReversalEntry."Document No." := AllocationCostGLEntry."Document No.";
            TempReversalEntry."Bal. Account Type" := AllocationCostGLEntry."Bal. Account Type";
            TempReversalEntry."Bal. Account No." := AllocationCostGLEntry."Bal. Account No.";
            TempReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            TempReversalEntry.INSERT;
          UNTIL AllocationCostGLEntry.NEXT = 0;
      UNTIL TempRevertTransactionNo.NEXT = 0;
      //NC NCS-1810 < DP
    END;

    LOCAL PROCEDURE InsertCustTempRevertTransNo@44(VAR TempRevertTransactionNo@1000 : TEMPORARY Record 2000000026;CustLedgEntryNo@1001 : Integer);
    VAR
      DtldCustLedgEntry@1002 : Record 379;
    BEGIN
      DtldCustLedgEntry.GET(CustLedgEntryNo);
      IF DtldCustLedgEntry."Transaction No." <> 0 THEN BEGIN
        TempRevertTransactionNo.Number := DtldCustLedgEntry."Transaction No.";
        IF TempRevertTransactionNo.INSERT THEN;
      END;
    END;

    LOCAL PROCEDURE InsertVendTempRevertTransNo@45(VAR TempRevertTransactionNo@1000 : TEMPORARY Record 2000000026;VendLedgEntryNo@1001 : Integer);
    VAR
      DtldVendLedgEntry@1002 : Record 380;
    BEGIN
      DtldVendLedgEntry.GET(VendLedgEntryNo);
      IF DtldVendLedgEntry."Transaction No." <> 0 THEN BEGIN
        TempRevertTransactionNo.Number := DtldVendLedgEntry."Transaction No.";
        IF TempRevertTransactionNo.INSERT THEN;
      END;
    END;

    PROCEDURE "NCF>"@1000000001();
    BEGIN
    END;

    PROCEDURE ShowFILedgEntries@1000000002();
    BEGIN
      // MTF02 > II
      PAGE.RUN(0,FILedgEntry);
      // MTF02 < II
    END;

    LOCAL PROCEDURE CheckFI@1000000006(FILedgEntry@1000 : Record 50106);
    VAR
      FI@1001 : Record 50021;
    BEGIN
      // MTF02 > II
      FI.GET(FILedgEntry."FI No.");
      CheckPostingDate(
        FILedgEntry."Posting Date",FILedgEntry.TABLECAPTION,FILedgEntry."Entry No.");
      IF FILedgEntry.Reversed THEN
        AlreadyReversedEntry(FILedgEntry.TABLECAPTION,FILedgEntry."Entry No.");

      //FILedgEntry.TESTFIELD("Entry No.");
      // MTF02 < II
    END;

    PROCEDURE CopyFILedgerEntryFilters@1000000000(VAR FILedgEntry2@1000000000 : Record 50106);
    BEGIN
      // MTF02 > II
      FILedgEntry2.COPY(FILedgEntry);
      // MTF02 < II
    END;

    PROCEDURE SetGLEntry@1101495001(VAR GLEntry1@1101495000 : TEMPORARY Record 17);
    VAR
      GenJnlPostReverse@1101495005 : Codeunit 17;
      ReversalPost@1101495002 : Codeunit 179;
      ReversalEntry1@1101495004 : TEMPORARY Record 179;
      Txt@1101495001 : Text[1024];
    BEGIN
      //NC OAM42 > DP
      Txt := Text50004 + '\' + Text50002;
      IF CONFIRM(Txt,FALSE) THEN BEGIN
      IF GLEntry1.FINDSET THEN
        REPEAT
          TempReversalEntry.DELETEALL;
          ReversalEntry1.DELETEALL;
          InsertReversalEntry(GLEntry1."Transaction No.",0);
          TempReversalEntry.SETCURRENTKEY("Document No.","Posting Date","Entry Type","Entry No.");
          TempReversalEntry.FIND('-');
          ReversalEntry1 := TempReversalEntry;
          ReversalEntry1.SetReverseFilter(GLEntry1."Transaction No.",0);
          //ReversalEntry1.CheckEntries;
          ReversalEntry1.CheckEntries(FALSE); // NC NOS-26 SPA

          //GenJnlPostLine.Reverse(ReversalEntry1,TempReversalEntry);
          GenJnlPostReverse.Reverse(ReversalEntry1,TempReversalEntry); // NC NOS-26 SPA
          CLEAR(TempReversalEntry);
          CLEAR(ReversalEntry1);
          CLEAR(GenJnlPostReverse);
        UNTIL GLEntry1.NEXT=0;
        MESSAGE(Text50003);
      END;
      //NC OAM42 < DP
    END;

    LOCAL PROCEDURE CheckGLAcc2@1101495006(GLEntry@1000 : Record 50012;VAR BalanceCheckAmount@1002 : Decimal;VAR BalanceCheckAddCurrAmount@1001 : Decimal);
    VAR
      GLAcc@1003 : Record 15;
      "NCV>"@1000000000 : Integer;
      UserSetup@1000000001 : Record 91;
    BEGIN
      //NC NCS-1810 > DP
      GLAcc.GET(GLEntry."G/L Account No.");
      CheckPostingDate(
        GLEntry."Posting Date",GLEntry.TABLECAPTION,GLEntry."Entry No.");
      GLAcc.TESTFIELD(Blocked,FALSE);
      GLEntry.TESTFIELD("Job No.",'');
      IF GLEntry.Reversed THEN
        AlreadyReversedEntry(GLEntry.TABLECAPTION,GLEntry."Entry No.");
      BalanceCheckAmount := BalanceCheckAmount + GLEntry.Amount;
      IF GLSetup."Additional Reporting Currency" <> '' THEN
        BalanceCheckAddCurrAmount := BalanceCheckAddCurrAmount + GLEntry."Additional-Currency Amount";
      //NC NCS-1810 < DP
    END;

    PROCEDURE CopyFilters2@1101495000(VAR AllocationCostGLEntry2@1000000000 : Record 50012);
    BEGIN
      //NC NCS-1810 > DP
      AllocationCostGLEntry2.COPY(AllocationCostGLEntry);
      //NC NCS-1810 < DP
    END;

    PROCEDURE ReverseRegisters@1101495003(RegisterFilter@1000 : Text[250]) : Boolean;
    VAR
      GLReg@1001 : Record 45;
      Posted@1101495000 : Boolean;
      AllocationCostGLEntry@1101495001 : Record 50012;
    BEGIN
      //NC NCS-1820 > DP
      //InsertReversalEntries(RegisterFilter,1);
      InsertReversalEntries2(RegisterFilter,1); // NC NOS-26 SPA

      TempReversalEntry.SETCURRENTKEY("Document No.","Posting Date","Entry Type","Entry No.");
      PAGE.RUNMODAL(PAGE::"Reverse Entries",TempReversalEntry);

      //NC NCS-1820.4 > DP
      Posted := FALSE;
      TempReversalEntry.SETRANGE("Entry Type",TempReversalEntry."Entry Type"::"Allocation G/L");
      IF TempReversalEntry.FINDFIRST THEN BEGIN
        AllocationCostGLEntry.SETCURRENTKEY(AllocationCostGLEntry."Reversed Entry No.");
        AllocationCostGLEntry.SETRANGE("Reversed Entry No.",TempReversalEntry."Entry No.");
        Posted := AllocationCostGLEntry.FINDFIRST;
      END;
      TempReversalEntry.RESET;
      {
      Posted := (ReversalEntry.COUNT = 0);
      }
      //NC NCS-1820.4 < DP

      TempReversalEntry.DELETEALL;
      EXIT(Posted);
      //NC NCS-1820 < DP
    END;

    LOCAL PROCEDURE InsertReversalEntries@1101495005(NumberFilter@1000 : Text[250];RevType@1007 : 'Transaction,Register');
    VAR
      GLAcc@1001 : Record 15;
      Cust@1002 : Record 18;
      Vend@1003 : Record 23;
      DtldCustLedgEntry@1011 : Record 379;
      DtldVendLedgEntry@1010 : Record 380;
      BankAcc@1006 : Record 270;
      FA@1004 : Record 5600;
      NextLineNo@1008 : Integer;
      TaxDiff@1000000002 : Record 17300;
      Numb@1101495000 : Record 2000000026;
    BEGIN
      //NC NOS-26 SPA Commented
      {
      //NC NCS-1820 > DP
      GLSetup.GET;
      TempReversalEntry.DELETEALL;
      PostApplied := FALSE;
      NextLineNo := 1;
      RevertTransactionNo.RESET;
      RevertTransactionNo.DELETEALL;

      Numb.SETFILTER(Number,NumberFilter);
      IF Numb.FINDSET THEN
        REPEAT
          RevertTransactionNo.Number := Numb.Number;
          RevertTransactionNo.INSERT;
        UNTIL Numb.NEXT = 0;

      IF RevertTransactionNo.FINDSET THEN REPEAT
        SetReverseFilter(RevertTransactionNo.Number,RevType);

        IF CustLedgEntry.FIND('-') THEN
          REPEAT
            CLEAR(ReversalEntry);
            IF RevType = RevType::Register THEN BEGIN
              ReversalEntry."G/L Register No." := RevertTransactionNo.Number;
              ReversalEntry."G/L Register Filter" := NumberFilter;
            END;
            ReversalEntry."Reversal Type" := RevType;
            ReversalEntry."Entry Type" := ReversalEntry."Entry Type"::Customer;
            ReversalEntry."Entry No." :=  CustLedgEntry."Entry No.";
            Cust.GET(CustLedgEntry."Customer No.");
            ReversalEntry."Account No." := Cust."No.";
            ReversalEntry."Account Name" := Cust.Name;
            ReversalEntry."Posting Date" := CustLedgEntry."Posting Date";
            ReversalEntry."Source Code" := CustLedgEntry."Source Code";
            ReversalEntry."Journal Batch Name" := CustLedgEntry."Journal Batch Name";
            ReversalEntry."Transaction No." := CustLedgEntry."Transaction No.";
            ReversalEntry."Currency Code" := CustLedgEntry."Currency Code";
            ReversalEntry.Description := CustLedgEntry.Description;
            CustLedgEntry.CALCFIELDS(Amount,"Debit Amount","Credit Amount",
              "Amount (LCY)","Debit Amount (LCY)","Credit Amount (LCY)");
            ReversalEntry.Amount := CustLedgEntry.Amount;
            ReversalEntry."Debit Amount" := CustLedgEntry."Debit Amount";
            ReversalEntry."Credit Amount" := CustLedgEntry."Credit Amount";
            ReversalEntry."Amount (LCY)" := CustLedgEntry."Amount (LCY)";
            ReversalEntry."Debit Amount (LCY)" := CustLedgEntry."Debit Amount (LCY)";
            ReversalEntry."Credit Amount (LCY)" := CustLedgEntry."Credit Amount (LCY)";
            ReversalEntry."Document Type" := CustLedgEntry."Document Type";
            ReversalEntry."Document No." := CustLedgEntry."Document No.";
            ReversalEntry."Bal. Account Type" := CustLedgEntry."Bal. Account Type";
            ReversalEntry."Bal. Account No." := CustLedgEntry."Bal. Account No.";
            ReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            ReversalEntry.INSERT;

            DtldCustLedgEntry.INIT;
            DtldCustLedgEntry.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
            DtldCustLedgEntry.SETRANGE(DtldCustLedgEntry."Transaction No.",CustLedgEntry."Transaction No.");
            DtldCustLedgEntry.SETRANGE(DtldCustLedgEntry."Customer No.",CustLedgEntry."Customer No.");
            DtldCustLedgEntry.SETFILTER(
              DtldCustLedgEntry."Entry Type",'<>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
            IF DtldCustLedgEntry.FIND('-') THEN BEGIN
              PostApplied := TRUE;
            END;

          UNTIL CustLedgEntry.NEXT = 0;

        IF VendLedgEntry.FIND('-') THEN
          REPEAT
            CLEAR(ReversalEntry);
            IF RevType = RevType::Register THEN BEGIN
              ReversalEntry."G/L Register No." := RevertTransactionNo.Number;
              ReversalEntry."G/L Register Filter" := NumberFilter;
            END;
            ReversalEntry."Reversal Type" := RevType;
            ReversalEntry."Entry Type" := ReversalEntry."Entry Type"::Vendor;
            ReversalEntry."Entry No." :=  VendLedgEntry."Entry No.";
            Vend.GET(VendLedgEntry."Vendor No.");
            ReversalEntry."Account No." := Vend."No.";
            ReversalEntry."Account Name" := Vend.Name;
            ReversalEntry."Posting Date" := VendLedgEntry."Posting Date";
            ReversalEntry."Source Code" := VendLedgEntry."Source Code";
            ReversalEntry."Journal Batch Name" := VendLedgEntry."Journal Batch Name";
            ReversalEntry."Transaction No." := VendLedgEntry."Transaction No.";
            ReversalEntry."Currency Code" := VendLedgEntry."Currency Code";
            ReversalEntry.Description := VendLedgEntry.Description;
            VendLedgEntry.CALCFIELDS(Amount,"Debit Amount","Credit Amount",
              "Amount (LCY)","Debit Amount (LCY)","Credit Amount (LCY)");
            ReversalEntry.Amount := VendLedgEntry.Amount;
            ReversalEntry."Debit Amount" := VendLedgEntry."Debit Amount";
            ReversalEntry."Credit Amount" := VendLedgEntry."Credit Amount";
            ReversalEntry."Amount (LCY)" := VendLedgEntry."Amount (LCY)";
            ReversalEntry."Debit Amount (LCY)" := VendLedgEntry."Debit Amount (LCY)";
            ReversalEntry."Credit Amount (LCY)" := VendLedgEntry."Credit Amount (LCY)";
            ReversalEntry."Document Type" := VendLedgEntry."Document Type";
            ReversalEntry."Document No." := VendLedgEntry."Document No.";
            ReversalEntry."Bal. Account Type" := VendLedgEntry."Bal. Account Type";
            ReversalEntry."Bal. Account No." := VendLedgEntry."Bal. Account No.";
            ReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            ReversalEntry.INSERT;

            DtldVendLedgEntry.INIT;
            DtldVendLedgEntry.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
            DtldVendLedgEntry.SETRANGE(DtldVendLedgEntry."Transaction No.",VendLedgEntry."Transaction No.");
            DtldVendLedgEntry.SETRANGE(DtldVendLedgEntry."Vendor No.",VendLedgEntry."Vendor No.");
            DtldVendLedgEntry.SETFILTER(
              DtldVendLedgEntry."Entry Type",'<>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
            IF DtldVendLedgEntry.FIND('-') THEN
              PostApplied := TRUE;

          UNTIL VendLedgEntry.NEXT = 0;

        IF BankAccLedgEntry.FIND('-') THEN
          REPEAT
            CLEAR(ReversalEntry);
            IF RevType = RevType::Register THEN BEGIN
              ReversalEntry."G/L Register No." := RevertTransactionNo.Number;
              ReversalEntry."G/L Register Filter" := NumberFilter;
            END;
            ReversalEntry."Reversal Type" := RevType;
            ReversalEntry."Entry Type" := ReversalEntry."Entry Type"::"Bank Account";
            ReversalEntry."Entry No." :=  BankAccLedgEntry."Entry No.";
            BankAcc.GET(BankAccLedgEntry."Bank Account No.");
            ReversalEntry."Account No." := BankAcc."No.";
            ReversalEntry."Account Name" := BankAcc.Name;
            ReversalEntry."Posting Date" := BankAccLedgEntry."Posting Date";
            ReversalEntry."Source Code" := BankAccLedgEntry."Source Code";
            ReversalEntry."Journal Batch Name" := BankAccLedgEntry."Journal Batch Name";
            ReversalEntry."Transaction No." := BankAccLedgEntry."Transaction No.";
            ReversalEntry."Currency Code" := BankAccLedgEntry."Currency Code";
            ReversalEntry.Description := BankAccLedgEntry.Description;
            ReversalEntry.Amount := BankAccLedgEntry.Amount;
            ReversalEntry."Debit Amount" := BankAccLedgEntry."Debit Amount";
            ReversalEntry."Credit Amount" := BankAccLedgEntry."Credit Amount";
            ReversalEntry."Amount (LCY)" := BankAccLedgEntry."Amount (LCY)";
            ReversalEntry."Debit Amount (LCY)" := BankAccLedgEntry."Debit Amount (LCY)";
            ReversalEntry."Credit Amount (LCY)" := BankAccLedgEntry."Credit Amount (LCY)";
            ReversalEntry."Document Type" := BankAccLedgEntry."Document Type";
            ReversalEntry."Document No." := BankAccLedgEntry."Document No.";
            ReversalEntry."Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
            ReversalEntry."Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
            ReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            ReversalEntry.INSERT;
          UNTIL BankAccLedgEntry.NEXT = 0;

        IF FALedgEntry.FIND('-') THEN
          REPEAT
            CLEAR(ReversalEntry);
            IF RevType = RevType::Register THEN BEGIN
              ReversalEntry."G/L Register No." := RevertTransactionNo.Number;
              ReversalEntry."G/L Register Filter" := NumberFilter;
            END;
            ReversalEntry."Reversal Type" := RevType;
            ReversalEntry."Entry Type" := ReversalEntry."Entry Type"::"Fixed Asset";
            ReversalEntry."Entry No." :=  FALedgEntry."Entry No.";
            FA.GET(FALedgEntry."FA No.");
            ReversalEntry."Account No." := FA."No.";
            ReversalEntry."Account Name" := FA.Description;
            ReversalEntry."Posting Date" := FALedgEntry."Posting Date";
            ReversalEntry."FA Posting Category" := FALedgEntry."FA Posting Category";
            ReversalEntry."FA Posting Type" := FALedgEntry."FA Posting Type";
            ReversalEntry."Source Code" := FALedgEntry."Source Code";
            ReversalEntry."Journal Batch Name" := FALedgEntry."Journal Batch Name";
            ReversalEntry."Transaction No." := FALedgEntry."Transaction No.";
            ReversalEntry.Description := FALedgEntry.Description;
            ReversalEntry."Amount (LCY)" := FALedgEntry.Amount;
            ReversalEntry."Debit Amount (LCY)" := FALedgEntry."Debit Amount";
            ReversalEntry."Credit Amount (LCY)" := FALedgEntry."Credit Amount";
            ReversalEntry."VAT Amount" := FALedgEntry."VAT Amount";
            ReversalEntry."Document Type" := FALedgEntry."Document Type";
            ReversalEntry."Document No." := FALedgEntry."Document No.";
            ReversalEntry."Bal. Account Type" := FALedgEntry."Bal. Account Type";
            ReversalEntry."Bal. Account No." := FALedgEntry."Bal. Account No.";
            IF FALedgEntry."FA Posting Type" <> FALedgEntry."FA Posting Type"::"Salvage Value" THEN BEGIN
              ReversalEntry."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 1;
              ReversalEntry.INSERT;
            END;
          UNTIL FALedgEntry.NEXT = 0;

        IF MaintenanceLedgEntry.FIND('-') THEN
          REPEAT
            CLEAR(ReversalEntry);
            IF RevType = RevType::Register THEN BEGIN
              ReversalEntry."G/L Register No." := RevertTransactionNo.Number;
              ReversalEntry."G/L Register Filter" := NumberFilter;
            END;
            ReversalEntry."Reversal Type" := RevType;
            ReversalEntry."Entry Type" := ReversalEntry."Entry Type"::Maintenance;
            ReversalEntry."Entry No." :=  MaintenanceLedgEntry."Entry No.";
            FA.GET(MaintenanceLedgEntry."FA No.");
            ReversalEntry."Account No." := FA."No.";
            ReversalEntry."Account Name" := FA.Description;
            ReversalEntry."Posting Date" := MaintenanceLedgEntry."Posting Date";
            ReversalEntry."Source Code" := MaintenanceLedgEntry."Source Code";
            ReversalEntry."Journal Batch Name" := MaintenanceLedgEntry."Journal Batch Name";
            ReversalEntry."Transaction No." := MaintenanceLedgEntry."Transaction No.";
            ReversalEntry.Description := MaintenanceLedgEntry.Description;
            ReversalEntry."Amount (LCY)" := MaintenanceLedgEntry.Amount;
            ReversalEntry."Debit Amount (LCY)" := MaintenanceLedgEntry."Debit Amount";
            ReversalEntry."Credit Amount (LCY)" := MaintenanceLedgEntry."Credit Amount";
            ReversalEntry."VAT Amount" := MaintenanceLedgEntry."VAT Amount";
            ReversalEntry."Document Type" := MaintenanceLedgEntry."Document Type";
            ReversalEntry."Document No." := MaintenanceLedgEntry."Document No.";
            ReversalEntry."Bal. Account Type" := MaintenanceLedgEntry."Bal. Account Type";
            ReversalEntry."Bal. Account No." := MaintenanceLedgEntry."Bal. Account No.";
            ReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            ReversalEntry.INSERT;
          UNTIL MaintenanceLedgEntry.NEXT = 0;

        IF RevType = RevType::Transaction THEN BEGIN
        END ELSE IF RevType = RevType::Register THEN BEGIN
          IF PostApplied THEN
            ERROR(Text012,RevertTransactionNo.Number);
        END;

          IF RevType = RevType::Transaction THEN
            GLEntry.SETRANGE("Transaction No.",RevertTransactionNo.Number);
          IF GLEntry.FIND('-') THEN
            REPEAT
              CLEAR(ReversalEntry);
              IF RevType = RevType::Register THEN BEGIN
                ReversalEntry."G/L Register No." := RevertTransactionNo.Number;
                ReversalEntry."G/L Register Filter" := NumberFilter;
              END;
              ReversalEntry."Reversal Type" := RevType;
              ReversalEntry."Entry Type" := ReversalEntry."Entry Type"::"G/L Account";
              ReversalEntry."Entry No." :=  GLEntry."Entry No.";
              IF NOT GLAcc.GET(GLEntry."G/L Account No.") THEN
                ERROR(Text009,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
              ReversalEntry."Account No." := GLAcc."No.";
              ReversalEntry."Account Name" := GLAcc.Name;
              ReversalEntry."Posting Date" := GLEntry."Posting Date";
              ReversalEntry."Source Code" := GLEntry."Source Code";
              ReversalEntry."Journal Batch Name" := GLEntry."Journal Batch Name";
              ReversalEntry."Transaction No." := GLEntry."Transaction No.";
              ReversalEntry."Source Type" := GLEntry."Source Type";
              ReversalEntry."Source No." := GLEntry."Source No.";
              ReversalEntry.Description := GLEntry.Description;
              ReversalEntry."Amount (LCY)" := GLEntry.Amount;
              ReversalEntry."Debit Amount (LCY)" := GLEntry."Debit Amount";
              ReversalEntry."Credit Amount (LCY)" := GLEntry."Credit Amount";
              ReversalEntry."VAT Amount" := GLEntry."VAT Amount";
              ReversalEntry."Document Type" := GLEntry."Document Type";
              ReversalEntry."Document No." := GLEntry."Document No.";
              ReversalEntry."Bal. Account Type" := GLEntry."Bal. Account Type";
              ReversalEntry."Bal. Account No." := GLEntry."Bal. Account No.";
              ReversalEntry."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 1;
              ReversalEntry.INSERT;
            UNTIL GLEntry.NEXT = 0;

      //NC NCS-1810 > DP
        IF RevType = RevType::Transaction THEN
          AllocationCostGLEntry.SETRANGE("Transaction No.",RevertTransactionNo.Number);
        IF AllocationCostGLEntry.FIND('-') THEN
          REPEAT
            CLEAR(ReversalEntry);
            IF RevType = RevType::Register THEN BEGIN
              ReversalEntry."G/L Register No." := RevertTransactionNo.Number;
              ReversalEntry."G/L Register Filter" := NumberFilter;
              AllocationRegister.SETFILTER("From Entry No.",'<=%1',AllocationCostGLEntry."Entry No.");
              AllocationRegister.SETFILTER("To Entry No.",'>=%1',AllocationCostGLEntry."Entry No.");
              IF AllocationRegister.FINDLAST THEN
                ReversalEntry."Alloc. G/L Register No." :=AllocationRegister."No.";
            END;
            ReversalEntry."Reversal Type" := RevType;
            ReversalEntry."Entry Type" := ReversalEntry."Entry Type"::"Allocation G/L";
            ReversalEntry."Entry No." :=  AllocationCostGLEntry."Entry No.";
            IF NOT GLAcc.GET(AllocationCostGLEntry."G/L Account No.") THEN
              ERROR(Text009,AllocationCostGLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
            ReversalEntry."Account No." := GLAcc."No.";
            ReversalEntry."Account Name" := GLAcc.Name;
            ReversalEntry."Posting Date" := AllocationCostGLEntry."Posting Date";
            ReversalEntry."Source Code" := AllocationCostGLEntry."Source Code";
            ReversalEntry."Journal Batch Name" := AllocationCostGLEntry."Journal Batch Name";
            ReversalEntry."Transaction No." := AllocationCostGLEntry."Transaction No.";
            ReversalEntry."Source Type" := AllocationCostGLEntry."Source Type";
            ReversalEntry."Source No." := AllocationCostGLEntry."Source No.";
            ReversalEntry.Description := COPYSTR(AllocationCostGLEntry.Description,1,MAXSTRLEN(ReversalEntry.Description));
            ReversalEntry."Amount (LCY)" := AllocationCostGLEntry.Amount;
            ReversalEntry."Debit Amount (LCY)" := AllocationCostGLEntry."Debit Amount";
            ReversalEntry."Credit Amount (LCY)" := AllocationCostGLEntry."Credit Amount";
            ReversalEntry."VAT Amount" := AllocationCostGLEntry."VAT Amount";
            ReversalEntry."Document Type" := AllocationCostGLEntry."Document Type";
            ReversalEntry."Document No." := AllocationCostGLEntry."Document No.";
            ReversalEntry."Bal. Account Type" := AllocationCostGLEntry."Bal. Account Type";
            ReversalEntry."Bal. Account No." := AllocationCostGLEntry."Bal. Account No.";
            ReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            ReversalEntry.INSERT;
          UNTIL AllocationCostGLEntry.NEXT = 0;
      //NC NCS-1810 < DP

        IF TaxDiffEntry.FIND('-') THEN
          REPEAT
            CLEAR(ReversalEntry);
            IF RevType = RevType::Register THEN BEGIN
              ReversalEntry."G/L Register No." := RevertTransactionNo.Number;
              ReversalEntry."G/L Register Filter" := NumberFilter;
            END;
            ReversalEntry."Reversal Type" := RevType;
            ReversalEntry."Entry Type" := ReversalEntry."Entry Type"::"Tax Difference";
            ReversalEntry."Entry No." :=  TaxDiffEntry."Entry No.";
            IF NOT TaxDiff.GET(TaxDiffEntry."Tax Diff. Code") THEN
              ERROR(Text009,TaxDiffEntry.TABLECAPTION,TaxDiff.TABLECAPTION);
            ReversalEntry."Account No." := TaxDiff.Code;
            ReversalEntry."Account Name" := COPYSTR(TaxDiff.Description,1,MAXSTRLEN(ReversalEntry."Account Name"));
            ReversalEntry."Posting Date" := TaxDiffEntry."Posting Date";
            ReversalEntry."Source Code" := TaxDiffEntry."Source Code";
            ReversalEntry."Journal Batch Name" := TaxDiffEntry."Journal Batch Name";
            ReversalEntry."Transaction No." := TaxDiffEntry."Transaction No.";
            CASE TaxDiffEntry."Source Type" OF
              TaxDiffEntry."Source Type"::"Future Expense":
                ReversalEntry."Source Type" := ReversalEntry."Source Type"::"Future Expense";
            END;
            ReversalEntry."Source No." := TaxDiffEntry."Source No.";
            ReversalEntry.Description := TaxDiffEntry.Description;
            ReversalEntry."Amount (LCY)" := TaxDiffEntry."Tax Amount";
            ReversalEntry."Debit Amount (LCY)" := TaxDiffEntry."Asset Tax Amount";
            ReversalEntry."Credit Amount (LCY)" := TaxDiffEntry."Liability Tax Amount";
            ReversalEntry."VAT Amount" := TaxDiffEntry."Disposal Tax Amount";
            ReversalEntry."Document No." := TaxDiffEntry."Document No.";
            ReversalEntry."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            ReversalEntry.INSERT;
          UNTIL TaxDiffEntry.NEXT(1) = 0;

      UNTIL RevertTransactionNo.NEXT = 0;

      SetReverseFilters(NumberFilter,RevType);

      IF ReversalEntry.FIND('-') THEN;
      //NC NCS-1820 < DP
      }
    END;

    PROCEDURE SetReverseFilters@1101495004(NumberFilter@1001 : Text[250];RevType@1000 : 'Transaction,Register');
    VAR
      FromTransactionNo@1470000 : Integer;
      EntryNoFilter@1101495000 : Text[1000];
      VATEntryNoFilter@1101495001 : Text[1000];
    BEGIN
      //NC NCS-1820 > DP
      IF RevType = RevType::Transaction THEN BEGIN
        GLEntry.SETCURRENTKEY("Transaction No.");
        CustLedgEntry.SETCURRENTKEY("Transaction No.");
        VendLedgEntry.SETCURRENTKEY("Transaction No.");
        BankAccLedgEntry.SETCURRENTKEY("Transaction No.");
        FALedgEntry.SETCURRENTKEY("Transaction No.");
        MaintenanceLedgEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETCURRENTKEY("Transaction No.");
        GLEntry.SETFILTER("Transaction No.",NumberFilter);
        CustLedgEntry.SETFILTER("Transaction No.",NumberFilter);
        VendLedgEntry.SETFILTER("Transaction No.",NumberFilter);
        BankAccLedgEntry.SETFILTER("Transaction No.",NumberFilter);
        FALedgEntry.SETFILTER("Transaction No.",NumberFilter);
        MaintenanceLedgEntry.SETFILTER("Transaction No.",NumberFilter);
        VATEntry.SETFILTER("Transaction No.",NumberFilter);
        TaxDiffEntry.SETCURRENTKEY("Transaction No.");
        TaxDiffEntry.SETFILTER("Transaction No.",NumberFilter);
      END ELSE BEGIN
        GLReg.SETFILTER("No.",NumberFilter);
        EntryNoFilter := '';
        VATEntryNoFilter := '';
        IF GLReg.FINDSET THEN BEGIN
          REPEAT
            EntryNoFilter := EntryNoFilter + FORMAT(GLReg."From Entry No.") + '..' +
                             FORMAT(GLReg."To Entry No.") + '|';
            VATEntryNoFilter := EntryNoFilter + FORMAT(GLReg."From VAT Entry No.") + '..' +
                                FORMAT(GLReg."To VAT Entry No.") + '|';
          UNTIL GLReg.NEXT = 0;
          EntryNoFilter := COPYSTR(EntryNoFilter,1,STRLEN(EntryNoFilter) - 1);
          VATEntryNoFilter := COPYSTR(VATEntryNoFilter,1,STRLEN(VATEntryNoFilter) - 1);
        END;

        GLEntry.SETFILTER("Entry No.",EntryNoFilter);
        CustLedgEntry.SETFILTER("Entry No.",EntryNoFilter);
        VendLedgEntry.SETFILTER("Entry No.",EntryNoFilter);
        BankAccLedgEntry.SETFILTER("Entry No.",EntryNoFilter);
        FALedgEntry.SETCURRENTKEY("G/L Entry No.");
        FALedgEntry.SETFILTER("G/L Entry No.",EntryNoFilter);
        MaintenanceLedgEntry.SETCURRENTKEY("G/L Entry No.");
        MaintenanceLedgEntry.SETFILTER("G/L Entry No.",EntryNoFilter);
        VATEntry.SETFILTER("Entry No.",VATEntryNoFilter);

        TaxDiffEntry.SETCURRENTKEY("Transaction No.");
        IF NOT GLEntry.FIND('-') THEN
          FromTransactionNo := GLEntry."Transaction No." + 1
        ELSE BEGIN
          FromTransactionNo := GLEntry."Transaction No.";
          GLEntry.FIND('+')
        END;
        TaxDiffEntry.SETRANGE("Transaction No.",FromTransactionNo,GLEntry."Transaction No.");
      END;
      //NC NCS-1820 < DP
    END;

    LOCAL PROCEDURE InsertReversalEntries2@1101495008(NumberFilter@1101495001 : Text[250];RevType@1101495000 : 'Transaction,Register');
    VAR
      TempRevertTransactionNo@1005 : TEMPORARY Record 2000000026;
      TempRevertTransactionNo2@1101495003 : TEMPORARY Record 2000000026;
      NextLineNo@1008 : Integer;
      GLReg2@1210001 : Record 45;
      Completed@1210002 : Boolean;
      SourceCodeSetup@1210003 : Record 242;
      Numb@1101495002 : Record 2000000026;
    BEGIN
      //NC NOS-26 > SPA
      GLSetup.GET;
      TempReversalEntry.DELETEALL;
      NextLineNo := 1;

      Numb.SETFILTER(Number,NumberFilter);
      IF Numb.FINDSET THEN
        REPEAT
          TempRevertTransactionNo.Number := Numb.Number;
          TempRevertTransactionNo.INSERT;

          TempRevertTransactionNo2.Number := Numb.Number;
          TempRevertTransactionNo2.INSERT;
        UNTIL Numb.NEXT = 0;

      IF TempRevertTransactionNo.FINDSET THEN REPEAT
        SetReverseFilter(TempRevertTransactionNo.Number,RevType);

        InsertFromCustLedgEntry(TempRevertTransactionNo2,TempRevertTransactionNo.Number,RevType,NextLineNo);
        InsertFromVendLedgEntry(TempRevertTransactionNo2,TempRevertTransactionNo.Number,RevType,NextLineNo);
        InsertFromBankAccLedgEntry(TempRevertTransactionNo.Number,RevType,NextLineNo);
        InsertFromFALedgEntry(TempRevertTransactionNo.Number,RevType,NextLineNo);
        InsertFromMaintenanceLedgEntry(TempRevertTransactionNo.Number,RevType,NextLineNo);
        InsertFromFILedgEntry(TempRevertTransactionNo2,TempRevertTransactionNo.Number,RevType,NextLineNo);
      UNTIL TempRevertTransactionNo.NEXT = 0;

      InsertFromVATEntry(TempRevertTransactionNo2,TempRevertTransactionNo.Number,RevType,NextLineNo);
      InsertFromGLEntry(TempRevertTransactionNo2,TempRevertTransactionNo.Number,RevType,NextLineNo);
      InsertFromTaxDiffEntry(TempRevertTransactionNo2,TempRevertTransactionNo.Number,RevType,NextLineNo);
      InsertFromAllocCostGLEntry(TempRevertTransactionNo2,TempRevertTransactionNo.Number,RevType,NextLineNo);

      SetReverseFilters(NumberFilter,RevType);

      IF TempReversalEntry.FIND('-') THEN;
      //NC NOS-26 < SPA
    END;

    BEGIN
    {
      NC MIFI02 MP Доработано аннулирование операций элиминирования
      NC MTF02 II Исправлено поле "Entry Type"
      NC MTF02 II Исправлен код
      NC OAM22 DP Изменено свойство Caption Class полей ..(LCY)
      NC MTF02 AKU Добавлен Option (6) = FI для поля Source Type
      NC NCS-1810 DP Добавлено поле "Alloc. G/L Register No."
                     Изменены функции InsertReversalEntry, CheckEntries
                     Добавлены функции CheckGLAcc2, CopyFilters2

      NC NCS-1820 DP Добавлено поле "G/L Register Filter"
                     Добавлены функции ReverseRegisters, InsertReversalEntries, SetReverseFilters
      NC NCS-1820.4 DP Изменена функция ReverseRegisters
      --------------------------------------
      NC MIG2017 SPA Миграция на новую версию
    }
    END.
  }
}

