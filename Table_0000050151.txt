OBJECT Table 50151 Event Handling Template
{
  OBJECT-PROPERTIES
  {
    Date=07.07.17;
    Time=10:32:27;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               SourceCodeSetup.GET;
               "Source Code" := SourceCodeSetup."Accounting Engine";
             END;

    OnDelete=VAR
               EventTemplateDim@1101495000 : Record 50152;
             BEGIN
               EventTemplateDim.RESET;
               EventTemplateDim.SETRANGE("Mapping Code","Mapping Code");
               EventTemplateDim.SETRANGE("Deal Type","Deal Type");
               EventTemplateDim.SETRANGE("Event Code","Event Code");
               EventTemplateDim.SETRANGE("Line No.", "Line No.");
               EventTemplateDim.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Event Handling Template;
               RUS=Шаблон Обработки Событий];
    LookupPageID=Page50217;
    DrillDownPageID=Page50217;
  }
  FIELDS
  {
    { 1   ;   ;Mapping Code        ;Code20        ;TableRelation=Mapping;
                                                   CaptionML=[ENU=Mapping Code;
                                                              RUS=Код Схемы Трансформации];
                                                   NotBlank=Yes;
                                                   Description=NCS-971 10->20 }
    { 5   ;   ;Deal Type           ;Code20        ;TableRelation="Deal Type";
                                                   CaptionML=[ENU=Deal Type;
                                                              RUS=Тип Сделки];
                                                   NotBlank=Yes }
    { 10  ;   ;Event Code          ;Code20        ;TableRelation="Deal Event Code";
                                                   CaptionML=[ENU=Event Code;
                                                              RUS=Код События];
                                                   NotBlank=Yes }
    { 15  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Строка Но.];
                                                   NotBlank=Yes }
    { 20  ;   ;Processing Data Sets;Boolean       ;CaptionML=[ENU=Processing Data Sets;
                                                              RUS=Обработка по Наборам Данных] }
    { 25  ;   ;Condition           ;Text250       ;OnLookup=BEGIN
                                                              Condition := Condition + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Condition;
                                                              RUS=Условие] }
    { 30  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              RUS=Тип];
                                                   OptionCaptionML=[ENU=Entry,Goto,Error,Rem;
                                                                    RUS=Проводка,Переход,Ошибка,Комментарий];
                                                   OptionString=Entry,Goto,Error,Rem }
    { 35  ;   ;Goto Line No.       ;Integer       ;TableRelation=IF (Type=CONST(Goto)) "Event Handling Template"."Line No." WHERE (Mapping Code=FIELD(Mapping Code),
                                                                                                                                   Deal Type=FIELD(Deal Type),
                                                                                                                                   Event Code=FIELD(Event Code));
                                                   CaptionML=[ENU=Goto Line No.;
                                                              RUS=Переход Строка Но.] }
    { 50000;  ;Account Type        ;Option        ;CaptionML=[ENU=Account Type;
                                                              RUS=Тип Счета];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,FI;
                                                                    RUS=Фин. Счет,Клиент,Поставщик,Банк. Счет,ОС,МФ Партнер,ФИ];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,FI }
    { 50100;  ;Account No.         ;Text100       ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Account Type=CONST(IC Partner)) "IC Partner"
                                                                 ELSE IF (Account Type=CONST(FI)) "Financial Instrument";
                                                   OnValidate=VAR
                                                                AccountNo@1000000000 : Code[20];
                                                                TableID@1000000002 : Integer;
                                                                CustomerPostingGroup@1000000003 : Record 92;
                                                                VendorPostingGroup@1000000004 : Record 93;
                                                                BankAccountPG@1000000001 : Record 277;
                                                                DefaultDimension@1000000006 : Record 352;
                                                              BEGIN
                                                              END;

                                                   OnLookup=VAR
                                                              GLAccount@1101495000 : Record 15;
                                                              Customer@1101495001 : Record 18;
                                                              Vendor@1101495002 : Record 23;
                                                              FixedAsset@1101495003 : Record 5600;
                                                              BankAccount@1101495004 : Record 270;
                                                            BEGIN
                                                              CASE "Account Type" OF
                                                                "Account Type"::"G/L Account" :
                                                                  BEGIN
                                                                    IF GLAccount.GET(DELCHR("Account No.",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,GLAccount) THEN
                                                                      "Account No." := '"' + GLAccount."No." + '"';
                                                                  END;
                                                                "Account Type"::Customer :
                                                                  BEGIN
                                                                    IF Customer.GET(DELCHR("Account No.",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,Customer) THEN
                                                                      "Account No." := '"' + Customer."No." + '"';
                                                                  END;
                                                                "Account Type"::Vendor :
                                                                  BEGIN
                                                                    IF Vendor.GET(DELCHR("Account No.",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,Vendor) THEN
                                                                      "Account No." := '"' + Vendor."No." + '"';
                                                                  END;
                                                                "Account Type"::"Fixed Asset" :
                                                                  BEGIN
                                                                    IF FixedAsset.GET(DELCHR("Account No.",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,FixedAsset) THEN
                                                                      "Account No." := '"' + FixedAsset."No." + '"';
                                                                  END;
                                                                "Account Type"::"Bank Account" :
                                                                  BEGIN
                                                                    IF BankAccount.GET(DELCHR("Account No.",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,BankAccount) THEN
                                                                      "Account No." := '"' + BankAccount."No." + '"';
                                                                  END;
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Account No.;
                                                              RUS=Счет Но.] }
    { 50200;  ;Posting Date        ;Text100       ;OnLookup=BEGIN
                                                              "Posting Date" := "Posting Date" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Posting Date;
                                                              RUS=Дата Учета] }
    { 50300;  ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип Документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Оплата,Счет,Кредит Нота,Процент Нота,Памятка,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 50400;  ;Description         ;Text100       ;OnLookup=BEGIN
                                                              Description := Description + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 50401;  ;Description 2       ;Text100       ;OnLookup=BEGIN
                                                              "Description 2" := "Description 2" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Description 2;
                                                              RUS=Описание 2] }
    { 50500;  ;Currency Code       ;Text100       ;TableRelation=Currency;
                                                   OnLookup=BEGIN
                                                              "Currency Code" := "Currency Code" + SelectField();
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=Код Валюты] }
    { 50600;  ;Debit Amount        ;Text250       ;OnLookup=BEGIN
                                                              "Debit Amount" := "Debit Amount" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Debit Amount;
                                                              RUS=Дебет Сумма];
                                                   Description=NCS-1428.4 DP 100->250;
                                                   AutoFormatType=1 }
    { 50700;  ;Credit Amount       ;Text250       ;OnLookup=BEGIN
                                                              "Credit Amount" := "Credit Amount" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Credit Amount;
                                                              RUS=Кредит Сумма];
                                                   Description=NCS-1428.4 DP 100->250;
                                                   AutoFormatType=1 }
    { 50800;  ;Posting Group       ;Text100       ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "FA Posting Group"
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account Posting Group";
                                                   OnValidate=VAR
                                                                AccountNo@1000000000 : Code[20];
                                                                TableID@1000000004 : Integer;
                                                                CustomerPostingGroup@1000000001 : Record 92;
                                                                VendorPostingGroup@1000000002 : Record 93;
                                                                BankAccountPG@1000000003 : Record 277;
                                                                DefaultDimension@1000000006 : Record 352;
                                                              BEGIN
                                                              END;

                                                   OnLookup=VAR
                                                              CustomerPostingGroup@1101495000 : Record 92;
                                                              VendorPostingGroup@1101495001 : Record 93;
                                                              FAPostingGroup@1101495002 : Record 5606;
                                                              BankAccountPostingGroup@1101495003 : Record 277;
                                                            BEGIN
                                                              CASE "Account Type" OF
                                                                "Account Type"::Customer :
                                                                  BEGIN
                                                                    IF CustomerPostingGroup.GET(DELCHR("Posting Group",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,CustomerPostingGroup) THEN
                                                                      "Posting Group" := '"' + CustomerPostingGroup.Code + '"';
                                                                  END;
                                                                "Account Type"::Vendor :
                                                                  BEGIN
                                                                    IF VendorPostingGroup.GET(DELCHR("Posting Group",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,VendorPostingGroup) THEN
                                                                      "Posting Group" := '"' + VendorPostingGroup.Code + '"';
                                                                  END;
                                                                "Account Type"::"Fixed Asset" :
                                                                  BEGIN
                                                                    IF FAPostingGroup.GET(DELCHR("Posting Group",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,FAPostingGroup) THEN
                                                                      "Posting Group" := '"' + FAPostingGroup.Code + '"';
                                                                  END;
                                                                "Account Type"::"Bank Account" :
                                                                  BEGIN
                                                                    IF BankAccountPostingGroup.GET(DELCHR("Posting Group",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,BankAccountPostingGroup) THEN
                                                                      "Posting Group" := '"' + BankAccountPostingGroup.Code + '"';
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting Group;
                                                              RUS=Учетная Группа];
                                                   Editable=Yes }
    { 50805;  ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              RUS=Код Источника] }
    { 50850;  ;Due Date            ;Text100       ;OnLookup=BEGIN
                                                              "Due Date" := "Due Date" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Due Date;
                                                              RUS=Дата Оплаты] }
    { 50900;  ;Quantity            ;Text100       ;OnLookup=BEGIN
                                                              Quantity := Quantity + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Quantity;
                                                              RUS=Кол-во] }
    { 50930;  ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                IF ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Gen. Posting Type");
                                                              END;

                                                   CaptionML=[ENU=Gen. Posting Type;
                                                              RUS=Общий Тип Учета];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    RUS=" ,Покупка,Продажа,Зачет"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 50931;  ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Bus. Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              RUS=Общая Бизнес Группа] }
    { 50932;  ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Prod. Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              RUS=Общая Товарная Группа] }
    { 50940;  ;Document Date       ;Text100       ;OnLookup=BEGIN
                                                              "Document Date" := "Document Date" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Document Date;
                                                              RUS=Дата Документа] }
    { 50941;  ;External Document No.;Text100      ;OnLookup=BEGIN
                                                              "External Document No." := "External Document No." + SelectField();
                                                            END;

                                                   CaptionML=[ENU=External Document No.;
                                                              RUS=Внешний Документ Но.] }
    { 50945;  ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Bus. Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              RUS=НДС Бизнес Группа] }
    { 50946;  ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Prod. Posting Group",'');
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              RUS=НДС Товарная Группа] }
    { 50947;  ;Additional-Currency Posting;Option ;CaptionML=[ENU=Additional-Currency Posting;
                                                              RUS=ДОВ Учет];
                                                   OptionCaptionML=[ENU=None,Amount Only,Additional-Currency Amount Only;
                                                                    RUS=Нет,Только Сумма,Только Доп.-Вал. Сумма];
                                                   OptionString=None,Amount Only,Additional-Currency Amount Only }
    { 50950;  ;VAT Amount          ;Text100       ;OnLookup=BEGIN
                                                              "VAT Amount" := "VAT Amount" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=VAT Amount;
                                                              RUS=Сумма НДС] }
    { 50990;  ;Reversing Entry     ;Boolean       ;CaptionML=[ENU=Reversing Entry;
                                                              RUS=Реверсная Операция] }
    { 51000;  ;Allow Zero-Amount Posting;Boolean  ;CaptionML=[ENU=Allow Zero-Amount Posting;
                                                              RUS=Разреш. Учет Нулевых Сумм];
                                                   Editable=Yes }
    { 51100;  ;Debit Amount (LCY)  ;Text100       ;OnLookup=BEGIN
                                                              "Debit Amount (LCY)" := "Debit Amount (LCY)" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              RUS=Дебет Сумма (ВУЧ)];
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,12411' }
    { 51200;  ;Credit Amount (LCY) ;Text100       ;OnLookup=BEGIN
                                                              "Credit Amount (LCY)" := "Credit Amount (LCY)" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              RUS=Кредит Сумма (ВУЧ)];
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,12412' }
    { 51300;  ;Agreement No.       ;Text100       ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Agreement".No. WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Agreement".No. WHERE (Vendor No.=FIELD(Account No.));
                                                   OnLookup=VAR
                                                              Vendor@1101495002 : Record 23;
                                                              VendorAgreement@1101495000 : Record 14901;
                                                              Customer@1101495003 : Record 18;
                                                              CustomerAgreement@1101495001 : Record 14902;
                                                            BEGIN
                                                              CASE "Account Type" OF
                                                                "Account Type"::Customer :
                                                                  BEGIN
                                                                    IF Customer.GET(DELCHR("Account No.",'<>','"')) THEN BEGIN
                                                                      CustomerAgreement.SETRANGE("Customer No.",Customer."No.");
                                                                      IF CustomerAgreement.GET(Customer."No.",DELCHR("Agreement No.",'<>','"')) THEN ;
                                                                    END;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,CustomerAgreement) THEN
                                                                      "Agreement No." := '"' + CustomerAgreement."No." + '"';
                                                                  END;
                                                                "Account Type"::Vendor :
                                                                  BEGIN
                                                                    IF Vendor.GET(DELCHR("Account No.",'<>','"')) THEN
                                                                      VendorAgreement.SETRANGE("Vendor No.",Vendor."No.");
                                                                      IF VendorAgreement.GET(Vendor."No.",DELCHR("Agreement No.",'<>','"')) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,VendorAgreement) THEN
                                                                      "Agreement No." := '"' + VendorAgreement."No." + '"';
                                                                  END;
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Agreement No.;
                                                              RUS=Договор Но.] }
    { 51400;  ;Source Historical Date;Text100     ;OnLookup=BEGIN
                                                              "Source Historical Date" := "Source Historical Date" + SelectField();
                                                            END;

                                                   CaptionML=[ENU=Source Historical Date;
                                                              RUS=Источник Историческая Дата] }
    { 51500;  ;Currency Index Entry;Boolean       ;CaptionML=[ENU=Currency Index Entry;
                                                              RUS=Операция Валютной Переоценки] }
    { 51501;  ;Currency Index      ;Text100       ;TableRelation=Currency;
                                                   OnLookup=BEGIN
                                                              "Currency Index" := "Currency Index" + SelectField();
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Currency Index;
                                                              RUS=Переоцениваемая Валюта] }
    { 51600;  ;Financial Instrument No.;Text100   ;TableRelation="Financial Instrument".No.;
                                                   OnLookup=BEGIN
                                                              "Financial Instrument No." := "Financial Instrument No." + SelectField();
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Financial Instrument No.;
                                                              RUS=Финансовый Инструмент Но.] }
  }
  KEYS
  {
    {    ;Mapping Code,Deal Type,Event Code,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FunRecRef@1101495000 : Codeunit 50010;
      Text000@1101495002 : TextConst 'ENU=Processing instructions: %1.;RUS=Обработка инструкции: %1.';
      Text001@1101495001 : TextConst 'ENU=Fields ''%1'' is not in table %2.;RUS=Поля ''%1'' нет в таблице %2.';
      Text002@1101495003 : TextConst 'ENU=%1 must be of type %2.;RUS=%1 должен иметь тип %2.';
      Text003@1101495004 : TextConst 'ENU=%1 per instruction Goto does not work on the Data Set;RUS=%1 на инструкцию Goto не работает по Data Set';
      GV@1101495005 : Codeunit 50033;
      isTestMode@1101495006 : Boolean;
      Text006@1101495007 : TextConst 'ENU=The %1 option can only be used internally in the system.;RUS=Опция %1 может использоваться только системой.';
      SourceCodeSetup@1101495008 : Record 242;
      Text007@1101495009 : TextConst 'ENU=Agreement No. must specify the code for the Customer or Supplier;RUS=Код договора должен указываться для Клиента или Поставщика';
      MovingDataSetup@1101495013 : Record 50064;

    PROCEDURE Run@1101495000(VAR Buffer@1101495000 : TEMPORARY Record 50155;VAR BufferDataSet@1101495001 : TEMPORARY Record 50156;VAR GenJnlLine@1101495004 : TEMPORARY Record 81) ret : Integer;
    BEGIN
      //NC NCS-1812 > DP
      MovingDataSetup.GET;
      //NC NCS-1812 < DP
      ret := 0;
      CASE Type OF
        Type::Goto :
          BEGIN
            TESTFIELD("Processing Data Sets",FALSE);
            IF isCondition(Buffer,BufferDataSet) THEN
              EXIT("Goto Line No.")
            ELSE
              EXIT(0);
          END;
        Type::Error :
          BEGIN
            IF "Processing Data Sets" THEN BEGIN
              BufferDataSet.FINDSET;
              REPEAT
                IF isCondition(Buffer,BufferDataSet) THEN BEGIN
                  GenerateError(Buffer,BufferDataSet);
                  EXIT(-1);
                END;
              UNTIL BufferDataSet.NEXT = 0;
            END ELSE
              IF isCondition(Buffer,BufferDataSet) THEN BEGIN
                GenerateError(Buffer,BufferDataSet);
                EXIT(-1);
              END;

            EXIT(0);
          END;
        Type::Entry :
          BEGIN
            IF "Processing Data Sets" THEN BEGIN
              BufferDataSet.FINDSET;
              REPEAT
                IF isCondition(Buffer,BufferDataSet) THEN
                  GenerateGenJnlLine(Buffer,BufferDataSet,GenJnlLine);
              UNTIL BufferDataSet.NEXT = 0;
            END ELSE
              IF isCondition(Buffer,BufferDataSet) THEN
                GenerateGenJnlLine(Buffer,BufferDataSet,GenJnlLine);
          END;
        Type::Rem :
          EXIT(0);
      END;
    END;

    PROCEDURE isCondition@1101495005(VAR Buffer@1101495001 : TEMPORARY Record 50155;VAR BufferDataSet@1101495000 : TEMPORARY Record 50156) : Boolean;
    VAR
      fldValue@1101495002 : Text[1024];
      MSScriptControl@1101495003 : Automation "{0E59F1D2-1FBE-11D0-8FF2-00A0D10038BC} 1.0:{0E59F1D5-1FBE-11D0-8FF2-00A0D10038BC}:'Microsoft Script Control 1.0'.ScriptControl";
      scriptVal@1101495004 : Variant;
      recFld@1101495005 : Record 2000000041;
      recRef@1101495007 : RecordRef;
      fldRef@1101495006 : FieldRef;
    BEGIN
      IF Condition = '' THEN
        EXIT(TRUE);
      recRef.GETTABLE(Rec);
      fldRef := recRef.FIELD(FIELDNO(Condition));
      fldValue := ConvertToValue(Buffer,BufferDataSet,fldRef);
      CREATE(MSScriptControl,FALSE,TRUE);
      MSScriptControl.Language('VBScript');
      //!!!
      //MESSAGE(Condition+'=>'+FORMAT(fldValue));

      scriptVal := MSScriptControl.Eval(fldValue);
      CLEAR(MSScriptControl);
      IF NOT scriptVal.ISBOOLEAN THEN BEGIN
        recFld.Type := recFld.Type::Boolean;
        FIELDERROR(Condition,STRSUBSTNO(Text002,fldValue,recFld.Type));
      END;
      EXIT(scriptVal);
    END;

    PROCEDURE GenerateError@1101495008(VAR Buffer@1101495003 : TEMPORARY Record 50155;VAR BufferDataSet@1101495002 : TEMPORARY Record 50156);
    VAR
      MSScriptControl@1101495004 : Automation "{0E59F1D2-1FBE-11D0-8FF2-00A0D10038BC} 1.0:{0E59F1D5-1FBE-11D0-8FF2-00A0D10038BC}:'Microsoft Script Control 1.0'.ScriptControl";
      retText1@1101495006 : Text[1024];
      retText2@1101495005 : Text[1024];
      recRef@1101495007 : RecordRef;
      fldRef@1101495008 : FieldRef;
      fldValue@1101495011 : Text[1024];
      scriptVal@1101495010 : Variant;
      recFld@1101495009 : Record 2000000041;
    BEGIN
      //MIGR
      {
      // ГЕНЕРАЦИЯ ОШИБКИ ПО Description + Description 2
      CREATE(MSScriptControl);
      MSScriptControl.Language('VBScript');

      retText1 := '';
      retText2 := '';
      recRef.GETTABLE(Rec);
      IF DELCHR(Description,'<>',' ') <> '' THEN BEGIN
        fldRef := recRef.FIELD(FIELDNO(Description));
        fldValue := ConvertToValue(Buffer,BufferDataSet,Dim1Temp,Dim2Temp,fldRef);
      //!!!
      //MESSAGE(Condition+'=>'+FORMAT(fldValue));
         scriptVal := MSScriptControl.Eval(fldValue);

        IF NOT EVALUATE(retText1,FORMAT(scriptVal)) THEN BEGIN
          recFld.Type := recFld.Type::OemText;
          fldRef.FIELDERROR(STRSUBSTNO(Text002,scriptVal,recFld.Type));
        END;
      END;

      IF DELCHR("Description 2",'<>',' ') <> '' THEN BEGIN
        fldRef := recRef.FIELD(FIELDNO("Description 2"));
        fldValue := ConvertToValue(Buffer,BufferDataSet,Dim1Temp,Dim2Temp,fldRef);
        //!!!
      //    MESSAGE(Condition+'=>'+FORMAT(fldValue));
        scriptVal := MSScriptControl.Eval(fldValue);

        IF NOT EVALUATE(retText2,FORMAT(scriptVal)) THEN BEGIN
          recFld.Type := recFld.Type::OemText;
          fldRef.FIELDERROR(STRSUBSTNO(Text002,scriptVal,recFld.Type));
        END;
      END;
      CLEAR(MSScriptControl);
      IF NOT isTestMode THEN
        ERROR(retText1 + retText2);
        }
    END;

    PROCEDURE ConvertToValue@1101495009(VAR Buffer@1101495001 : TEMPORARY Record 50155;VAR BufferDataSet@1101495000 : TEMPORARY Record 50156;fldRefValue@1101495012 : FieldRef) retValue : Text[1024];
    VAR
      FromPos@1101495005 : Integer;
      ToPos@1101495004 : Integer;
      i@1101495002 : Integer;
      RecRefBuffer@1101495006 : RecordRef;
      RecRefDataSet@1101495007 : RecordRef;
      RecRefDeal@1101495003 : RecordRef;
      txtInstruction@1101495008 : Text[1024];
      txtInstruction2@1101495014 : Text[1024];
      FldNo@1101495009 : Integer;
      fldRef@1101495010 : FieldRef;
      txtValue@1101495011 : Text[100];
      Deal@1101495013 : Record 50037;
      Dim@1101495015 : Record 348;
      DimValue@1101495016 : Record 349;
      btemp@1101495019 : Boolean;
      stemp@1101495020 : Text[250];
    BEGIN
      //MIGR
      {
      FromPos := 0;
      ToPos := 0;

      RecRefBuffer.GETTABLE(Buffer);
      RecRefDataSet.GETTABLE(BufferDataSet);

      retValue := fldRefValue.VALUE;
      //!!!
      //btemp := STRPOS(retValue,'DS.Undi')>0;
      //stemp :=retValue;
      //IF btemp THEN MESSAGE(retValue);

      i:=1;
      WHILE (i<=STRLEN(retValue)) DO BEGIN
        IF COPYSTR(retValue, i, 1) = '%' THEN
          IF (FromPos = 0) OR (FromPos < ToPos) THEN FromPos := i
          ELSE ToPos := i;
          IF ToPos > FromPos THEN BEGIN
            txtInstruction := UPPERCASE(COPYSTR(retValue, FromPos+1, ToPos-FromPos-1));
            CASE TRUE OF
              COPYSTR(txtInstruction,1,3) = 'DS.' :
                BEGIN
                IF Type = Type::Goto THEN
                  fldRefValue.FIELDERROR(STRSUBSTNO(Text003,txtInstruction));
                TESTFIELD("Processing Data Sets",TRUE);

                txtInstruction2 := COPYSTR(txtInstruction,4);
                FldNo := FunRecRef.GetFieldNo(RecRefDataSet,txtInstruction2);
                IF FldNo <> 0 THEN
                  fldRef := RecRefDataSet.FIELD(FldNo);

                IF FldNo = 0 THEN BEGIN
                  FldNo := FunRecRef.GetFieldNo(RecRefBuffer,txtInstruction2);
                  IF FldNo <> 0 THEN
                    fldRef := RecRefBuffer.FIELD(FldNo);
                END;

                IF FldNo = 0 THEN
                  fldRefValue.FIELDERROR(STRSUBSTNO(Text001,txtInstruction,RecRefBuffer.CAPTION));

                txtValue := ConvertToScript(fldRef);
                StringReplace(retValue, FromPos, ToPos, txtValue);

                END;
              COPYSTR(txtInstruction,1,5) = 'DEAL.' :
                BEGIN
                  Deal.GET(Buffer."Deal No.");
                  RecRefDeal.GETTABLE(Deal);

                  txtInstruction2 := COPYSTR(txtInstruction,6);
                  FldNo := FunRecRef.GetFieldNo(RecRefDeal,txtInstruction2);
                  IF FldNo = 0 THEN
                    fldRefValue.FIELDERROR(STRSUBSTNO(Text001,txtInstruction,RecRefDeal.CAPTION));

                  fldRef := RecRefDeal.FIELD(FldNo);
                  txtValue := ConvertToScript(fldRef);
                  StringReplace(retValue, FromPos, ToPos, txtValue);
                END;
              (COPYSTR(txtInstruction,1,5) = 'DIM1.') OR
              (COPYSTR(txtInstruction,1,5) = 'DIM2.') :
                BEGIN
                  txtInstruction2 := COPYSTR(txtInstruction,6);
                  Dim.GET(txtInstruction2);
                  IF COPYSTR(txtInstruction,1,5) = 'DIM1.' THEN BEGIN
                    IF Dim1Temp.GET(DATABASE::"G/L Entry",Buffer."Entry No.",Dim.Code) THEN BEGIN
                      DimValue.GET(Dim1Temp."Dimension Code",Dim1Temp."Dimension Value Code");
                      txtValue := Dim1Temp."Dimension Value Code";
                    END ELSE
                      txtValue := '';
                  END ELSE BEGIN
                    IF Dim2Temp.GET(DATABASE::"G/L Entry",Buffer."Entry No.",Dim.Code) THEN BEGIN
                      DimValue.GET(Dim2Temp."Dimension Code",Dim2Temp."Dimension Value Code");
                      txtValue := Dim2Temp."Dimension Value Code";
                    END ELSE
                      txtValue := '';
                  END;

                  IF txtValue = '' THEN
                    txtValue := '""'
                  ELSE
                    txtValue := '"' + txtValue + '"';
                  StringReplace(retValue, FromPos, ToPos, txtValue);
                END;
              ELSE BEGIN
                FldNo := FunRecRef.GetFieldNo(RecRefBuffer,txtInstruction);
                IF FldNo = 0 THEN
                  fldRefValue.FIELDERROR(STRSUBSTNO(Text001,txtInstruction,RecRefBuffer.CAPTION));

                fldRef := RecRefBuffer.FIELD(FldNo);
                txtValue := ConvertToScript(fldRef);
                StringReplace(retValue, FromPos, ToPos, txtValue);
              END
            END;
            FromPos:=0; ToPos :=0;
            IF STRPOS(retValue, '%') <> 0 THEN
              i := STRPOS(retValue, '%')-1
            ELSE
              i := STRLEN(retValue);
          END
          ELSE
            i+=1;
      END;

      //!!!
      //IF btemp AND (STRPOS(retValue,'DS.Undi')>0) THEN
      // ERROR('#>'+txtInstruction+'/'+txtInstruction2+'='+txtValue)
      }
    END;

    PROCEDURE StringReplace@1000000007(VAR String@1000000000 : Text[100];FromPos@1000000001 : Integer;ToPos@1000000002 : Integer;Value@1000000003 : Text[100]);
    BEGIN
      String :=DELSTR(String, FromPos, ToPos-FromPos+1);
      String:=INSSTR(String, Value, FromPos);
    END;

    PROCEDURE ConvertToScript@1101495001(fldRefValue@1101495000 : FieldRef) retValue : Text[1024];
    BEGIN
      CASE UPPERCASE(FORMAT(fldRefValue.TYPE)) OF
        'TEXT', 'CODE' :
          BEGIN
            retValue := '"' + FORMAT(fldRefValue.VALUE) + '"';
          END;
        'INTEGER', 'OPTION' :
          BEGIN
            //NC NCS-803.1 > RD
            {
            retValue := FORMAT(fldRefValue.VALUE,0,1);
            }
            retValue := FORMAT(fldRefValue.VALUE,0,9);
            //NC NCS-803.1 < RD
          END;
        'DECIMAL' :
          BEGIN
            //NC NCS-803.1 > RD
            {
            retValue := FORMAT(fldRefValue.VALUE,0,1);
            }
            retValue := FORMAT(fldRefValue.VALUE,0,9);
            //NC NCS-803.1 < RD
          END;
        'BOOLEAN' :
          BEGIN
            IF fldRefValue.VALUE THEN
              retValue := 'TRUE'
            ELSE
              retValue := 'FALSE';
          END;
        'DATE' :
          BEGIN
            retValue := FORMAT(fldRefValue.VALUE,0,9);
            IF retValue = '' THEN
              retValue := '0'

            ELSE
              retValue := '#' + retValue + '#';
          END;
      END;
    END;

    PROCEDURE GenerateGenJnlLine@1101495011(VAR Buffer@1101495003 : TEMPORARY Record 50155;VAR BufferDataSet@1101495002 : TEMPORARY Record 50156;VAR GenJnlLine@1101495007 : TEMPORARY Record 81);
    VAR
      iField@1101495004 : Integer;
      recRef@1101495005 : RecordRef;
      fldRef@1101495006 : FieldRef;
      LineNo@1101495008 : Integer;
      fldNoGenJnlLine@1101495011 : Integer;
      recRefGenJnlLine@1101495009 : RecordRef;
      fldRefGenJnlLine@1101495010 : FieldRef;
      fldValue@1101495012 : Text[1024];
      MSScriptControl@1101495014 : Automation "{0E59F1D2-1FBE-11D0-8FF2-00A0D10038BC} 1.0:{0E59F1D5-1FBE-11D0-8FF2-00A0D10038BC}:'Microsoft Script Control 1.0'.ScriptControl";
      scriptVal@1101495013 : Variant;
      retInt@1101495015 : Integer;
      retDec@1101495016 : Decimal;
      retText@1101495017 : Text[100];
      retDate@1101495018 : Date;
      retBool@1101495019 : Boolean;
      EventTemplDim@1101495021 : Record 50152;
      recFld@1101495022 : Record 2000000041;
      AccNo@1101495023 : Code[20];
      CustPostingGroup@1101495024 : Record 92;
      VendPostingGroup@1101495025 : Record 93;
      BankAccount@1101495027 : Record 270;
      BankAccountPostingGroup@1101495026 : Record 277;
      DefDim@1101495028 : Record 352;
      VendorAgreement@1101495029 : Record 14901;
      CustAgreement@1101495030 : Record 14902;
      DefDimAdv@1101495031 : Record 50128;
      Customer@1101495032 : Record 18;
      Vendor@1101495033 : Record 23;
      LinkedDimensionValue@1101495034 : Record 50016;
    BEGIN
      //MIGR
      {
      LineNo := 10000;
      IF GenJnlLine.FINDLAST THEN
        LineNo := GenJnlLine."Line No." + 10000;

      CREATE(MSScriptControl);
      MSScriptControl.Language('VBScript');

      recRef.GETTABLE(Rec);

      GenJnlLine.INIT;
      GenJnlLine."Journal Template Name" := '';
      GenJnlLine."Journal Batch Name" := '';
      GenJnlLine."Line No." := LineNo;
      recRefGenJnlLine.GETTABLE(GenJnlLine);

      FOR iField := 1 TO recRef.FIELDCOUNT DO BEGIN
        fldRef := recRef.FIELDINDEX(iField);
        IF (fldRef.NUMBER >= 50000) AND
           (UPPERCASE(FORMAT(fldRef.TYPE)) <> 'TEXT') THEN BEGIN
          fldNoGenJnlLine := FunRecRef.GetFieldNo(recRefGenJnlLine,fldRef.NAME);
          fldRefGenJnlLine := recRefGenJnlLine.FIELD(fldNoGenJnlLine);

          fldRefGenJnlLine.VALUE(fldRef.VALUE);

        END ELSE IF (fldRef.NUMBER >= 50000) AND
           (DELCHR(FORMAT(fldRef.VALUE),'<>',' ') <> '') THEN BEGIN
          fldNoGenJnlLine := FunRecRef.GetFieldNo(recRefGenJnlLine,fldRef.NAME);
          fldRefGenJnlLine := recRefGenJnlLine.FIELD(fldNoGenJnlLine);

          fldValue := ConvertToValue(Buffer,BufferDataSet,Dim1Temp,Dim2Temp,fldRef);
        //!!!
         // MESSAGE(Condition+'=>'+FORMAT(fldValue));

          scriptVal := MSScriptControl.Eval(fldValue);

          CASE UPPERCASE(FORMAT(fldRefGenJnlLine.TYPE)) OF
            'TEXT', 'CODE' :
              BEGIN
                IF NOT EVALUATE(retText,FORMAT(scriptVal)) THEN
                  fldRef.FIELDERROR(STRSUBSTNO(Text002,scriptVal,fldRefGenJnlLine.TYPE));
                fldRefGenJnlLine.VALUE(retText);
              END;
            'INTEGER', 'OPTION' :
              BEGIN
                IF NOT EVALUATE(retInt,FORMAT(scriptVal)) THEN
                  fldRef.FIELDERROR(STRSUBSTNO(Text002,scriptVal,fldRefGenJnlLine.TYPE));
                fldRefGenJnlLine.VALUE(retInt);
              END;
            'DECIMAL' :
              BEGIN
                IF NOT EVALUATE(retDec,FORMAT(scriptVal)) THEN
                  fldRef.FIELDERROR(STRSUBSTNO(Text002,scriptVal,fldRefGenJnlLine.TYPE));
                fldRefGenJnlLine.VALUE(retDec);
              END;
            'BOOLEAN' :
              BEGIN
                IF NOT EVALUATE(retBool,FORMAT(scriptVal)) THEN
                  fldRef.FIELDERROR(STRSUBSTNO(Text002,scriptVal,fldRefGenJnlLine.TYPE));
                fldRefGenJnlLine.VALUE(retBool);
              END;
            'DATE' :
              BEGIN
                retText := FORMAT(scriptVal);
                IF (retText = '') OR (retText = '0') THEN
                  retDate := 0D
                ELSE IF NOT EVALUATE(retDate,retText) THEN
                  fldRef.FIELDERROR(STRSUBSTNO(Text002,scriptVal,fldRefGenJnlLine.TYPE));
                fldRefGenJnlLine.VALUE(retDate);
              END;
          END;

        END;
      END;

      recRefGenJnlLine.INSERT;
      recRefGenJnlLine.SETTABLE(GenJnlLine);

      EventTemplDim.RESET;
      EventTemplDim.SETRANGE("Mapping Code","Mapping Code");
      EventTemplDim.SETRANGE("Deal Type","Deal Type");
      EventTemplDim.SETRANGE("Event Code","Event Code");
      EventTemplDim.SETRANGE("Line No.","Line No.");
      IF GV.FIND_EventTemplDim(EventTemplDim) THEN REPEAT
        DimGenJnlLine.INIT;
        DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
        DimGenJnlLine."Journal Template Name" := '';
        DimGenJnlLine."Journal Batch Name" := '';
        DimGenJnlLine."Journal Line No." := LineNo;
        DimGenJnlLine."Allocation Line No." := 0;
        DimGenJnlLine."Dimension Code" := EventTemplDim."Dimension Code";
        IF DELCHR(EventTemplDim."Dimension Value Code",'<>',' ') <> '' THEN BEGIN
          recRef.GETTABLE(EventTemplDim);
          fldRef := recRef.FIELD(EventTemplDim.FIELDNO("Dimension Value Code"));
          fldValue := ConvertToValue(Buffer,BufferDataSet,Dim1Temp,Dim2Temp,fldRef);
        //!!!
        //  MESSAGE(Condition+'=>'+FORMAT(fldValue));

          scriptVal := MSScriptControl.Eval(fldValue);

          IF NOT EVALUATE(retText,FORMAT(scriptVal)) THEN BEGIN
            recFld.Type := recFld.Type::OemCode;
            fldRef.FIELDERROR(STRSUBSTNO(Text002,scriptVal,recFld.Type));
          END;
          DimGenJnlLine."Dimension Value Code" := retText;

        END;
        DimGenJnlLine.INSERT;
      UNTIL GV.NEXT_EventTemplDim(EventTemplDim) = 0;

      //NC NCS-1812 > DP
      IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,MovingDataSetup."Customer Dimension Code") THEN BEGIN
        LinkedDimensionValue.SETRANGE("Dimension Code",MovingDataSetup."Customer Dimension Code");
        LinkedDimensionValue.SETRANGE("Dimension Value",DimGenJnlLine."Dimension Value Code");
        LinkedDimensionValue.SETFILTER(Blocked,'%1',FALSE);
        LinkedDimensionValue.SETFILTER("Value Selection",'%1',FALSE);
        IF LinkedDimensionValue.FINDSET(FALSE,FALSE) THEN REPEAT
          IF LinkedDimensionValue."Linked Dimension Value"<>'' THEN BEGIN
            DimGenJnlLine.INIT;
            DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
            DimGenJnlLine."Journal Template Name" := '';
            DimGenJnlLine."Journal Batch Name" := '';
            DimGenJnlLine."Journal Line No." := LineNo;
            DimGenJnlLine."Allocation Line No." := 0;
            DimGenJnlLine."Dimension Code" := LinkedDimensionValue."Linked Dimension Code";
            DimGenJnlLine."Dimension Value Code" := LinkedDimensionValue."Linked Dimension Value";
            IF DimGenJnlLine.INSERT THEN;
          END;
        UNTIL LinkedDimensionValue.NEXT=0;
      END;
      //NC NCS-1812 < DP

      //добавление измерений по умолчанию
      CASE GenJnlLine."Account Type" OF
        GenJnlLine."Account Type"::"G/L Account" :
          AccNo := GenJnlLine."Account No.";
        GenJnlLine."Account Type"::Customer :
          IF CustPostingGroup.GET(GenJnlLine."Posting Group") THEN
            AccNo := CustPostingGroup."Receivables Account";
        GenJnlLine."Account Type"::Vendor :
          IF VendPostingGroup.GET(GenJnlLine."Posting Group") THEN
            AccNo := VendPostingGroup."Payables Account";
        GenJnlLine."Account Type"::"Bank Account" :
          IF BankAccount.GET(GenJnlLine."Account No.") AND
             BankAccountPostingGroup.GET(BankAccount."Bank Acc. Posting Group") THEN
            AccNo := BankAccountPostingGroup."G/L Bank Account No.";
      END;
      IF AccNo <> '' THEN BEGIN
        DefDim.RESET;
        DefDim.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefDim.SETRANGE("No.",AccNo);
        DefDim.SETFILTER("Dimension Code",'<>%1','');
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        DefDim.SETFILTER("Value Posting",'',DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code");
        IF DefDim.FINDSET THEN REPEAT
          IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,DefDim."Dimension Code") THEN BEGIN
            IF DimGenJnlLine."Dimension Value Code" = '' THEN BEGIN
              DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
              DimGenJnlLine.MODIFY;
            END;
          END ELSE BEGIN
            DimGenJnlLine.INIT;
            DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
            DimGenJnlLine."Journal Template Name" := '';
            DimGenJnlLine."Journal Batch Name" := '';
            DimGenJnlLine."Journal Line No." := LineNo;
            DimGenJnlLine."Allocation Line No." := 0;
            DimGenJnlLine."Dimension Code" := DefDim."Dimension Code";
            DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
            DimGenJnlLine.INSERT;
          END;
        UNTIL DefDim.NEXT = 0;
      END;
      //добавление измерений по умолчанию для ФИ
      IF GenJnlLine."Financial Instrument No." <> '' THEN BEGIN
        DefDim.RESET;
        DefDim.SETRANGE("Table ID",DATABASE::"Financial Instrument");
        DefDim.SETRANGE("No.",GenJnlLine."Financial Instrument No.");
        DefDim.SETFILTER("Dimension Code",'<>%1','');
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        DefDim.SETFILTER("Value Posting",'',DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code");
        IF DefDim.FINDSET THEN REPEAT
          IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,DefDim."Dimension Code") THEN BEGIN
            IF DimGenJnlLine."Dimension Value Code" = '' THEN BEGIN
              DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
              DimGenJnlLine.MODIFY;
            END;
          END ELSE BEGIN
            DimGenJnlLine.INIT;
            DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
            DimGenJnlLine."Journal Template Name" := '';
            DimGenJnlLine."Journal Batch Name" := '';
            DimGenJnlLine."Journal Line No." := LineNo;
            DimGenJnlLine."Allocation Line No." := 0;
            DimGenJnlLine."Dimension Code" := DefDim."Dimension Code";
            DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
            DimGenJnlLine.INSERT;
          END;
        UNTIL DefDim.NEXT = 0;
      END;
      //добавление измерений по умолчанию для Договора
      IF (GenJnlLine."Account No." <> '') AND (GenJnlLine."Agreement No." <> '') THEN BEGIN
        DefDim.RESET;
        DefDim.SETRANGE("No.",GenJnlLine."Account No.");
        DefDim.SETFILTER("Dimension Code",'<>%1','');
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        DefDim.SETFILTER("Value Posting",'',DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code");
        CASE GenJnlLine."Account Type" OF
          GenJnlLine."Account Type"::Customer :
            DefDim.SETRANGE("Table ID",DATABASE::"Customer Agreement");
          GenJnlLine."Account Type"::Vendor :
            DefDim.SETRANGE("Table ID",DATABASE::"Vendor Agreement");
          ELSE
            ERROR(Text007);
        END;
        IF DefDim.FINDSET THEN REPEAT
          IF DimGenJnlLine.GET(DATABASE::"Gen. Journal Line",'','',LineNo,0,DefDim."Dimension Code") THEN BEGIN
            IF DimGenJnlLine."Dimension Value Code" = '' THEN BEGIN
              DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
              DimGenJnlLine.MODIFY;
            END;
          END ELSE BEGIN
            DimGenJnlLine.INIT;
            DimGenJnlLine."Table ID" := DATABASE::"Gen. Journal Line";
            DimGenJnlLine."Journal Template Name" := '';
            DimGenJnlLine."Journal Batch Name" := '';
            DimGenJnlLine."Journal Line No." := LineNo;
            DimGenJnlLine."Allocation Line No." := 0;
            DimGenJnlLine."Dimension Code" := DefDim."Dimension Code";
            DimGenJnlLine."Dimension Value Code" := DefDim."Dimension Value Code";
            DimGenJnlLine.INSERT;
          END;
        UNTIL DefDim.NEXT = 0;
      END;

      CLEAR(MSScriptControl);
      }
    END;

    PROCEDURE SelectField@1101495002() retFldText : Text[50];
    VAR
      recField@1101495001 : Record 2000000041;
      FieldsForm@1101495000 : Page 50224;
    BEGIN
      recField.RESET;
      recField.SETFILTER(TableNo,'%1|%2|%3',DATABASE::"Buffer Deal Entry",DATABASE::"Buffer Deal Data Set",DATABASE::Deal);

      FieldsForm.SETTABLEVIEW(recField);
      FieldsForm.LOOKUPMODE(TRUE);
      IF FieldsForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        FieldsForm.GETRECORD(recField);
        CASE recField.TableNo OF
          DATABASE::"Buffer Deal Entry" :
            IF STRPOS(UPPERCASE(recField.FieldName),'DIMENSION') <> 0 THEN
              retFldText := SelectDim()
            ELSE
              retFldText := '%' + recField.FieldName + '%';
          DATABASE::"Buffer Deal Data Set" : retFldText := '%DS.' + recField.FieldName + '%';
          DATABASE::Deal : retFldText := '%DEAL.' + recField.FieldName + '%';
        END;
      END ELSE
        retFldText := '';
    END;

    PROCEDURE SelectDim@1101495003() retFldText : Text[50];
    VAR
      Dimension@1101495002 : Record 348;
      DimensionForm@1101495000 : Page 548;
    BEGIN
      Dimension.RESET;
      DimensionForm.SETTABLEVIEW(Dimension);
      DimensionForm.LOOKUPMODE(TRUE);
      IF DimensionForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimensionForm.GETRECORD(Dimension);
        retFldText := '%DIM1.' + Dimension.Code + '%';
      END ELSE
        retFldText := '';
    END;

    PROCEDURE SetTestMode@1101495004(NewTestMode@1101495000 : Boolean);
    BEGIN
      isTestMode := NewTestMode;
    END;

    BEGIN
    {
      NC S622 PCH
      NC SB Внесены изменения в функцию ConvertToValue: For->While + коррекция поведения счетчика (i)
      NC NCS-803.1 Внесены изменения для корректной работы при различных региональных настройках
      NC NCS-971 DP Изменена размерность поля "Mapping Code"
      NC NCS-1373.4 DP Изменена размерность переменной txtValue(50->100) в функции ConvertToValue
      TDRANCS-1373.4
        Modified func StringReplace
          pv_var String Text[50] -> Text[100]
          p_var Value  Text[30] -> Text[100]

      NC NCS-1428.4 DP Изменены размерности полей "Debit Amount", "Credit Amount" (100->250)
      NC NCS-1812 DP Изменены функции GenerateGenJnlLine, Run
    }
    END.
  }
}

