OBJECT Codeunit 11 Gen. Jnl.-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=21.06.17;
    Time=14:47:47;
    Modified=Yes;
    Version List=NAVW110.00.00.15052,NAVRU10.00.00.15052,NOS-26;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 252=rimd;
    OnRun=BEGIN
            GLSetup.GET;
            RunCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=can only be a closing date for G/L entries;RUS=может быть только датой закрытия для операций ГК';
      Text001@1001 : TextConst 'ENU=is not within your range of allowed posting dates;RUS=находится за пределами разрешенного диапазона дат учета';
      Text002@1002 : TextConst 'ENU=%1 or %2 must be G/L Account or Bank Account.;RUS=%1 или %2 должен быть счетом ГК или банковским счетом.';
      Text003@1003 : TextConst 'ENU=must have the same sign as %1;RUS=должно иметь такой же знак, как %1';
      Text004@1004 : TextConst 'ENU=You must not specify %1 when %2 is %3.;RUS=Нельзя определять %1, когда %2 равно %3.';
      Text005@1005 : TextConst 'ENU=%1 + %2 must be %3.;RUS=%1 + %2 должно быть %3.';
      Text006@1006 : TextConst 'ENU=%1 + %2 must be -%3.;RUS=%1 + %2 должно быть -%3.';
      Text007@1007 : TextConst 'ENU=must be positive;RUS=должно быть положительным';
      Text008@1008 : TextConst 'ENU=must be negative;RUS=должно быть отрицательным';
      Text009@1009 : TextConst 'ENU=must have a different sign than %1;RUS=должен иметь знак, отличный от %1';
      Text010@1010 : TextConst 'ENU=%1 %2 and %3 %4 is not allowed.;RUS=%1 %2 и %3 %4 не допускаются.';
      Text011@1011 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5;RUS=Комбинация измерений, использованная в %1 %2, %3, %4, заблокирована. %5';
      Text012@1012 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5;RUS=Измерение, использованное в %1 %2, %3, %4, вызвало ошибку. %5';
      GLSetup@1014 : Record 98;
      UserSetup@1015 : Record 91;
      GenJnlTemplate@1020 : Record 80;
      CostAccSetup@1024 : Record 1108;
      DimMgt@1017 : Codeunit 408;
      CostAccMgt@1023 : Codeunit 1100;
      AllowPostingFrom@1018 : Date;
      AllowPostingTo@1019 : Date;
      GenJnlTemplateFound@1021 : Boolean;
      OverrideDimErr@1022 : Boolean;
      SalesDocAlreadyExistsErr@1026 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Sales %1 %2 already exists.;RUS=Продажа %1 %2 уже существует.';
      PurchDocAlreadyExistsErr@1025 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists.;RUS=Покупка %1 %2 уже существует.';
      Text12400@1210001 : TextConst 'ENU=Include in Other VAT Entry and Additional VAT Ledger List are forbidden together.;RUS=Одновременное включение в другую операцию НДС и в дополнительный список книг покупок и продаж запрещено.';
      Text12401@1210002 : TextConst 'ENU=is not within agreement range of allowed posting dates.;RUS=находится за пределами договорного разрешенного диапазона дат учета.';
      IsBatchMode@1016 : Boolean;
      Text50001@1101495002 : TextConst 'ENU=Value of Dimension %2 should be %3 for Journal Line %1. Do you want to post?;RUS=В строке Фин. Журнала %1 значение измерения %2 должно быть %3. Продолжить учет?';
      Text50002@1101495001 : TextConst 'ENU="Not Consolidate should be Yes for the Business Unit Code %2 in the Line No. %1. ";RUS=В строке Фин.Журнала %1 указан неконсолидируемый филиал %2. Признак "Не консолидировать" должен быть установлен.';
      Text50003@1101495000 : TextConst 'ENU=Line No. %1 can''t be posted with Currency Code %2 which is a Local Currency, use empty value for the Currency Code field.;RUS=Строка Но. %1 не может быть учтена с Валюта Код %2, так как она является локальной валютой, укажите "пусто" вместо кода валюты.';
      SkipDimCombCheck@1101495003 : Boolean;
      GenJnlBatch@1101495004 : Record 232;

    PROCEDURE RunCheck@4(VAR GenJnlLine@1000 : Record 81);
    VAR
      ICGLAcount@1008 : Record 410;
      "NCV >"@1101495009 : Integer;
      GenJnlBatch@1101495008 : Record 232;
      lrec_BusinessUnit@1101495000 : Record 220;
    BEGIN
      //NC MDC02 > MP
      GLSetup.GET;
      //NC MDC02 < MP
      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;

        IF NOT GenJnlTemplateFound THEN BEGIN
          IF GenJnlTemplate.GET("Journal Template Name") THEN;
          GenJnlTemplateFound := TRUE;
        END;

        //NC PIF001 > DP
        GenJnlLine.TESTFIELD(GenJnlLine."Cons. Register Error Entry No.",0);
        //NC PIF001 < DP
        //NC MIFI02 > MP
        IF Elimination AND ("Eliminated Entry No." = 0) THEN
          FIELDERROR("Eliminated Entry No.");
        //NC MIFI02 < MP
        //NC MDC02 > MP
        IF GLSetup."Business Unit Code Mandatory" THEN
          TESTFIELD("Business Unit Code");
        //NC MDC02 < MP
        //NC PIF001 > DP 27.02.07 Запрет учета строк исключающей корреспонденции
        IF "Except Correspondence" THEN
          FIELDERROR("Except Correspondence");
        //NC PIF001 < DP 27.02.07
        //NC PIF001 > DP 26.03.07
        IF GenJnlBatch.GET("Journal Template Name","Journal Batch Name") AND
          GenJnlBatch."Reason Code Required"
        THEN
          TESTFIELD("Reason Code");
        //NC PIF001 < DP 26.03.07

        //NC NCS-1108.5 > DP
        IF GenJnlBatch."Check Printed" THEN
          TESTFIELD("Check Printed");
        //NC NCS-1108.5 < DP

        //NCS-2068 AAP >
        IF "Business Unit Code" <> '' THEN BEGIN
          lrec_BusinessUnit.GET("Business Unit Code");
          IF NOT "Not Consolidate" AND
             lrec_BusinessUnit."Not Transfer to Cons. Company" AND
             GUIALLOWED
          THEN BEGIN
            ERROR(Text50002,"Line No.","Business Unit Code");
          END;
        END;
        //NCS-2068 AAP <

        //NC NCS-2248 > DP
        IF ("Currency Code" = GLSetup."LCY Code") AND NOT "Currency Index Entry" AND GUIALLOWED THEN
            ERROR(Text50003,"Line No.","Currency Code");
        //NC NCS-2248 < DP
        CheckDates(GenJnlLine);

        TESTFIELD("Document No.");

        IF ("Account Type" IN
            ["Account Type"::Customer,
             "Account Type"::Vendor,
             "Account Type"::"Fixed Asset",
             "Account Type"::"IC Partner"]) AND
           ("Bal. Account Type" IN
            ["Bal. Account Type"::Customer,
             "Bal. Account Type"::Vendor,
             "Bal. Account Type"::"Fixed Asset",
             "Bal. Account Type"::"IC Partner"])
        THEN
          ERROR(
            Text002,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));

        IF "Bal. Account No." = '' THEN
          TESTFIELD("Account No.");

        //TDRANCS-1394>   G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,FI
        IF GUIALLOWED THEN BEGIN
          IF ("Account Type" <> "Account Type"::"G/L Account")
              OR ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
          THEN
            TESTFIELD("Currency Index Entry",FALSE);
        END;
        //TDRANCS-1394<

        IF NeedCheckZeroAmount AND NOT (IsRecurring AND IsBatchMode) THEN
          TESTFIELD(Amount);

        IF ((Amount < 0) XOR ("Amount (LCY)" < 0)) AND (Amount <> 0) AND ("Amount (LCY)" <> 0) THEN
          FIELDERROR("Amount (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));

        IF ("Account Type" = "Account Type"::"G/L Account") AND
           ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
        THEN
          TESTFIELD("Applies-to Doc. No.",'');

        IF ("Recurring Method" IN
            ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
           ("Currency Code" <> '')
        THEN
          ERROR(
            Text004,
            FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

        IF "Account Type" = "Account Type"::Customer THEN
          CheckCustAgrmt(GenJnlLine,"Account No.");

        IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN
          CheckCustAgrmt(GenJnlLine,"Bal. Account No.");

        IF "Account Type" = "Account Type"::Vendor THEN
          CheckVendAgrmt(GenJnlLine,"Account No.");

        IF "Bal. Account Type" = "Bal. Account Type"::Vendor THEN
          CheckVendAgrmt(GenJnlLine,"Bal. Account No.");

        IF "Account No." <> '' THEN
          CheckAccountNo(GenJnlLine);

        IF "Bal. Account No." <> '' THEN
          CheckBalAccountNo(GenJnlLine);

        IF "IC Partner G/L Acc. No." <> '' THEN
          IF ICGLAcount.GET("IC Partner G/L Acc. No.") THEN
            ICGLAcount.TESTFIELD(Blocked,FALSE);

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           (("Document Type" <> "Document Type"::Invoice) AND
            (NOT
             (("Document Type" = "Document Type"::"Credit Memo") AND
              CalcPmtDiscOnCrMemos("Payment Terms Code"))))
        THEN BEGIN
          TESTFIELD("Pmt. Discount Date",0D);
          TESTFIELD("Payment Discount %",0);
        END;

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           ("Applies-to Doc. No." <> '')
        THEN
          TESTFIELD("Applies-to ID",'');

        IF ("Account Type" <> "Account Type"::"Bank Account") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
        THEN
          TESTFIELD("Bank Payment Type","Bank Payment Type"::" ");

        IF ("Account Type" = "Account Type"::"Fixed Asset") OR
           ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
        THEN
          CODEUNIT.RUN(CODEUNIT::"FA Jnl.-Check Line",GenJnlLine);

        IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
        THEN BEGIN
          TESTFIELD("Depreciation Book Code",'');
          TESTFIELD("FA Posting Type",0);
        END;

        IF NOT OverrideDimErr THEN
          CheckDimensions(GenJnlLine);

         IF "Additional VAT Ledger Sheet" THEN
           TESTFIELD("Corrected Document Date");

         IF "Additional VAT Ledger Sheet" AND "Include In Other VAT Ledger" THEN
           ERROR(Text12400);

         IF "Export Status" IN ["Export Status"::New, "Export Status"::Exported] THEN
           FIELDERROR("Export Status");
      END;

      IF CostAccSetup.GET THEN
        CostAccMgt.CheckValidCCAndCOInGLEntry(GenJnlLine."Dimension Set ID");

      OnAfterCheckGenJnlLine(GenJnlLine);
    END;

    LOCAL PROCEDURE CalcPmtDiscOnCrMemos@9(PaymentTermsCode@1000 : Code[10]) : Boolean;
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      IF PaymentTermsCode <> '' THEN BEGIN
        PaymentTerms.GET(PaymentTermsCode);
        EXIT(PaymentTerms."Calc. Pmt. Disc. on Cr. Memos");
      END;
    END;

    PROCEDURE DateNotAllowed@1(PostingDate@1000 : Date) : Boolean;
    BEGIN
      IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
        IF USERID <> '' THEN
          IF UserSetup.GET(USERID) THEN BEGIN
            AllowPostingFrom := UserSetup."Allow Posting From";
            AllowPostingTo := UserSetup."Allow Posting To";
          END;
        IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
          GLSetup.GET;
          AllowPostingFrom := GLSetup."Allow Posting From";
          AllowPostingTo := GLSetup."Allow Posting To";
        END;
        IF AllowPostingTo = 0D THEN
          AllowPostingTo := DMY2DATE(31,12,9999);
      END;
      EXIT((PostingDate < AllowPostingFrom) OR (PostingDate > AllowPostingTo));
    END;

    PROCEDURE ErrorIfPositiveAmt@2(GenJnlLine@1000 : Record 81);
    BEGIN
      IF GenJnlLine.Amount > 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text008);
    END;

    PROCEDURE ErrorIfNegativeAmt@3(GenJnlLine@1000 : Record 81);
    BEGIN
      IF GenJnlLine.Amount < 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text007);
    END;

    PROCEDURE SetOverDimErr@5();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    LOCAL PROCEDURE CheckDates@14(GenJnlLine@1000 : Record 81);
    VAR
      AccountingPeriod@1001 : Record 50;
    BEGIN
      WITH GenJnlLine DO BEGIN
        TESTFIELD("Posting Date");
        IF "Posting Date" <> NORMALDATE("Posting Date") THEN BEGIN
          IF ("Account Type" <> "Account Type"::"G/L Account") OR
             ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
          THEN
            FIELDERROR("Posting Date",Text000);
          AccountingPeriod.GET(NORMALDATE("Posting Date") + 1);
          AccountingPeriod.TESTFIELD("New Fiscal Year",TRUE);
          AccountingPeriod.TESTFIELD("Date Locked",TRUE);
        END;

        IF DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text001);

        IF "Document Date" <> 0D THEN
          IF ("Document Date" <> NORMALDATE("Document Date")) AND
             (("Account Type" <> "Account Type"::"G/L Account") OR
              ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account"))
          THEN
            FIELDERROR("Document Date",Text000);
      END;
    END;

    LOCAL PROCEDURE CheckAccountNo@10(GenJnlLine@1000 : Record 81);
    VAR
      ICPartner@1001 : Record 413;
      Cust@1210000 : Record 18;
      GLAccFIReq@1101495000 : Record 15;
      l_cuGenJnlCheckLine@1101495001 : Codeunit 11;
      l_Text001@1101495002 : TextConst 'ENU="For %1 = %2 posting does not allowed by date %3. Check setup %4.";RUS="Для %1 = %2 не разрешен учет датой %3. Проверьте настройку %4."';
      l_recVATBusPostGr@1101495003 : Record 323;
      l_recVATProdPostGr@1101495004 : Record 324;
    BEGIN
      WITH GenJnlLine DO
        CASE "Account Type" OF
          "Account Type"::"G/L Account":
            BEGIN
              IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                 ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
              THEN
                TESTFIELD("Gen. Posting Type");
              IF ("Gen. Posting Type" <> "Gen. Posting Type"::" ") AND
                 ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
              THEN BEGIN
                IF "VAT Amount" + "VAT Base Amount" <> Amount THEN
                  ERROR(
                    Text005,FIELDCAPTION("VAT Amount"),FIELDCAPTION("VAT Base Amount"),
                    FIELDCAPTION(Amount));
                IF "Currency Code" <> '' THEN
                  IF "VAT Amount (LCY)" + "VAT Base Amount (LCY)" <> "Amount (LCY)" THEN
                    ERROR(
                      Text005,FIELDCAPTION("VAT Amount (LCY)"),
                      FIELDCAPTION("VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
              END;
              //NC PIF010 > MP
              GLAccFIReq.GET("Account No.");

              IF GLAccFIReq."FI Required" THEN BEGIN
                TESTFIELD("Financial Instrument No.");
                //NC MDP02 > MP
                GLAccFIReq.TESTFIELD("Account Type",GLAccFIReq."Account Type"::Posting);
                //NC MTF02 > AKU
                {
                GLAccFIReq.TESTFIELD("Direct Posting",TRUE);
                }
                //NC MTF02 < AKU
                GLAccFIReq.TESTFIELD(Blocked,FALSE);
              END;
              //NC MDP02 < MP
              //NC PIF010 < MP

              //TDRANCS-875 >
              IF "Source Historical Date" = 0D THEN BEGIN
                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Posting Date",0,"VAT Bus. Posting Group")
                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Bus. Posting Group"),
                              "VAT Bus. Posting Group","Posting Date",l_recVATBusPostGr.TABLECAPTION);
                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Posting Date",1,"VAT Prod. Posting Group")
                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Prod. Posting Group"),
                              "VAT Prod. Posting Group","Posting Date",l_recVATProdPostGr.TABLECAPTION);
              END ELSE BEGIN
                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Source Historical Date",0,"VAT Bus. Posting Group")
                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Bus. Posting Group"),
                              "VAT Bus. Posting Group","Source Historical Date",l_recVATBusPostGr.TABLECAPTION);
                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Source Historical Date",1,"VAT Prod. Posting Group")
                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Prod. Posting Group"),
                              "VAT Prod. Posting Group","Source Historical Date",l_recVATProdPostGr.TABLECAPTION);
              END;
              //TDRANCS-875 <
            END;
          "Account Type"::Customer,"Account Type"::Vendor:
            BEGIN
              TESTFIELD("Gen. Posting Type",0);
              TESTFIELD("Gen. Bus. Posting Group",'');
              TESTFIELD("Gen. Prod. Posting Group",'');
              TESTFIELD("VAT Bus. Posting Group",'');
              TESTFIELD("VAT Prod. Posting Group",'');

              IF GLSetup."Enable Russian Accounting" AND
                 ("Document Type" = "Document Type"::Payment) AND Prepayment
              THEN BEGIN
                TESTFIELD("Applies-to Doc. Type",0);
                TESTFIELD("Applies-to Doc. No.",'');
              END;

              IF (("Account Type" = "Account Type"::Customer) AND
                  ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase)) OR
                 (("Account Type" = "Account Type"::Vendor) AND
                  ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Sale))
              THEN
                ERROR(
                  STRSUBSTNO(
                    Text010,
                    FIELDCAPTION("Account Type"),"Account Type",
                    FIELDCAPTION("Bal. Gen. Posting Type"),"Bal. Gen. Posting Type"));

              CheckDocType(GenJnlLine);

              IF NOT "System-Created Entry" AND
                 (((Amount < 0) XOR ("Sales/Purch. (LCY)" < 0)) AND (Amount <> 0) AND ("Sales/Purch. (LCY)" <> 0))
              THEN
                FIELDERROR("Sales/Purch. (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));
              TESTFIELD("Job No.",'');

              CheckICPartner("Account Type","Account No.","Document Type");

              IF "Account Type" = "Account Type"::Customer THEN
                IF Cust.GET("Account No.") THEN BEGIN
                  IF GLSetup."Enable Russian Accounting" THEN
                    IF Prepayment AND ("Prepayment Status" = "Prepayment Status"::" ") AND NOT "System-Created Entry" THEN
                      Cust.CheckPrepaymentDocNo(GenJnlLine,TRUE)
                END;
            END;
          "Account Type"::"Bank Account":
            BEGIN
              TESTFIELD("Gen. Posting Type",0);
              TESTFIELD("Gen. Bus. Posting Group",'');
              TESTFIELD("Gen. Prod. Posting Group",'');
              TESTFIELD("VAT Bus. Posting Group",'');
              TESTFIELD("VAT Prod. Posting Group",'');
              TESTFIELD("Job No.",'');
              IF (Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                CheckPrinted(GenJnlLine);
            END;
          "Account Type"::"IC Partner":
            BEGIN
              ICPartner.GET("Account No.");
              ICPartner.CheckICPartner;
              IF "Journal Template Name" <> '' THEN
                IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                  FIELDERROR("Account Type");
            END;
        END;
    END;

    LOCAL PROCEDURE CheckBalAccountNo@13(GenJnlLine@1000 : Record 81);
    VAR
      ICPartner@1001 : Record 413;
      GLAccFIReq@1101495003 : Record 15;
      l_cuGenJnlCheckLine@1101495002 : Codeunit 11;
      l_recVATBusPostGr@1101495001 : Record 323;
      l_recVATProdPostGr@1101495000 : Record 324;
      l_Text001@1101495004 : TextConst 'ENU="For %1 = %2 posting does not allowed by date %3. Check setup %4.";RUS="Для %1 = %2 не разрешен учет датой %3. Проверьте настройку %4."';
    BEGIN
      WITH GenJnlLine DO
        CASE "Bal. Account Type" OF
          "Bal. Account Type"::"G/L Account":
            BEGIN
              IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                 ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
              THEN
                TESTFIELD("Bal. Gen. Posting Type");
              IF ("Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::" ") AND
                 ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
              THEN BEGIN
                IF "Bal. VAT Amount" + "Bal. VAT Base Amount" <> -Amount THEN
                  ERROR(
                    Text006,FIELDCAPTION("Bal. VAT Amount"),FIELDCAPTION("Bal. VAT Base Amount"),
                    FIELDCAPTION(Amount));
                IF "Currency Code" <> '' THEN
                  IF "Bal. VAT Amount (LCY)" + "Bal. VAT Base Amount (LCY)" <> -"Amount (LCY)" THEN
                    ERROR(
                      Text006,FIELDCAPTION("Bal. VAT Amount (LCY)"),
                      FIELDCAPTION("Bal. VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
              END;

              //NC PIF010 > MP
              GLAccFIReq.GET("Bal. Account No.");
              IF GLAccFIReq."FI Required" THEN
              //NC NCS-1964 > DP
              IF NOT GenJnlLine."System-Created Entry" THEN BEGIN
              //NC NCS-1964 > DP
                TESTFIELD("Financial Instrument No.");
              //NC MDP02 > MP
              GLAccFIReq.TESTFIELD("Account Type",GLAccFIReq."Account Type"::Posting);
      // NC MIO-11 > AES
      //          GLAccFIReq.TESTFIELD("Direct Posting",TRUE);
              IF NOT GLSetup.IsGLAccountingOnly THEN
                GLAccFIReq.TESTFIELD("Direct Posting",TRUE);
      // NC MIO-11 < AES
              GLAccFIReq.TESTFIELD(Blocked,FALSE);
              //NC MDP02 < MP
              //NC PIF010 < MP

              //NC NCS-1964 > DP
              END;
              //NC NCS-1964 > DP

              //TDRANCS-875 >
              IF "Source Historical Date" = 0D THEN BEGIN
                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Posting Date",0,"VAT Bus. Posting Group")
                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Bus. Posting Group"),
                              "VAT Bus. Posting Group","Posting Date",l_recVATBusPostGr.TABLECAPTION);
                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Posting Date",1,"VAT Prod. Posting Group")
                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Prod. Posting Group"),
                              "VAT Prod. Posting Group","Posting Date",l_recVATProdPostGr.TABLECAPTION);
              END ELSE BEGIN
                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Source Historical Date",0,"VAT Bus. Posting Group")
                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Bus. Posting Group"),
                              "VAT Bus. Posting Group","Source Historical Date",l_recVATBusPostGr.TABLECAPTION);
                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Source Historical Date",1,"VAT Prod. Posting Group")
                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Prod. Posting Group"),
                              "VAT Prod. Posting Group","Source Historical Date",l_recVATProdPostGr.TABLECAPTION);
              END;
              //TDRANCS-875 <
            END;
          "Bal. Account Type"::Customer,"Bal. Account Type"::Vendor:
            BEGIN
              TESTFIELD("Bal. Gen. Posting Type",0);
              TESTFIELD("Bal. Gen. Bus. Posting Group",'');
              TESTFIELD("Bal. Gen. Prod. Posting Group",'');
              TESTFIELD("Bal. VAT Bus. Posting Group",'');
              TESTFIELD("Bal. VAT Prod. Posting Group",'');

              IF (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                  ("Gen. Posting Type" = "Gen. Posting Type"::Purchase)) OR
                 (("Bal. Account Type" = "Bal. Account Type"::Vendor) AND
                  ("Gen. Posting Type" = "Gen. Posting Type"::Sale))
              THEN
                ERROR(
                  STRSUBSTNO(
                    Text010,
                    FIELDCAPTION("Bal. Account Type"),"Bal. Account Type",
                    FIELDCAPTION("Gen. Posting Type"),"Gen. Posting Type"));

              CheckBalDocType(GenJnlLine);

              IF ((Amount > 0) XOR ("Sales/Purch. (LCY)" < 0)) AND (Amount <> 0) AND ("Sales/Purch. (LCY)" <> 0) THEN
                FIELDERROR("Sales/Purch. (LCY)",STRSUBSTNO(Text009,FIELDCAPTION(Amount)));
              TESTFIELD("Job No.",'');

              CheckICPartner("Bal. Account Type","Bal. Account No.","Document Type");
            END;
          "Bal. Account Type"::"Bank Account":
            BEGIN
              TESTFIELD("Bal. Gen. Posting Type",0);
              TESTFIELD("Bal. Gen. Bus. Posting Group",'');
              TESTFIELD("Bal. Gen. Prod. Posting Group",'');
              TESTFIELD("Bal. VAT Bus. Posting Group",'');
              TESTFIELD("Bal. VAT Prod. Posting Group",'');
              IF (Amount > 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                CheckPrinted(GenJnlLine);
            END;
          "Bal. Account Type"::"IC Partner":
            BEGIN
              ICPartner.GET("Bal. Account No.");
              ICPartner.CheckICPartner;
              IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                FIELDERROR("Bal. Account Type");
            END;
        END;
    END;

    PROCEDURE CheckSalesDocNoIsNotUsed@115(DocType@1000 : Option;DocNo@1001 : Code[20]);
    VAR
      OldCustLedgEntry@1002 : Record 21;
    BEGIN
      OldCustLedgEntry.SETRANGE("Document No.",DocNo);
      OldCustLedgEntry.SETRANGE("Document Type",DocType);
      IF OldCustLedgEntry.FINDFIRST THEN
        ERROR(SalesDocAlreadyExistsErr,OldCustLedgEntry."Document Type",DocNo);
    END;

    PROCEDURE CheckPurchDocNoIsNotUsed@107(DocType@1000 : Option;DocNo@1002 : Code[20]);
    VAR
      OldVendLedgEntry@1001 : Record 25;
    BEGIN
      OldVendLedgEntry.SETRANGE("Document No.",DocNo);
      OldVendLedgEntry.SETRANGE("Document Type",DocType);
      IF OldVendLedgEntry.FINDFIRST THEN
        ERROR(PurchDocAlreadyExistsErr,OldVendLedgEntry."Document Type",DocNo);
    END;

    PROCEDURE CheckDateAllowed@1470000(VAR GenJnlLine1@1470000 : Record 81);
    BEGIN
      IF DateNotAllowed(GenJnlLine1."Posting Date") THEN
        GenJnlLine1.FIELDERROR("Posting Date",Text001);
    END;

    PROCEDURE CheckCustAgrmt@1210004(GenJnlLine2@1210001 : Record 81;CustNo@1210003 : Code[20]);
    VAR
      Cust@1210000 : Record 18;
      CustAgrmt@1210002 : Record 14902;
    BEGIN
      Cust.GET(CustNo);
      CASE Cust."Agreement Posting" OF
        Cust."Agreement Posting"::Mandatory:
          BEGIN
            GenJnlLine2.TESTFIELD("Agreement No.");
            CustAgrmt.GET(Cust."No.",GenJnlLine2."Agreement No.");
            IF (CustAgrmt."Starting Date" <> 0D) AND
              (CustAgrmt."Starting Date" > GenJnlLine2."Posting Date")
            THEN
              GenJnlLine2.FIELDERROR("Posting Date",Text12401);

            //NC MLN02.1 > DP
            IF CustAgrmt."Agreement Type" = CustAgrmt."Agreement Type"::Loans THEN

            //NC NCS-979 > DP
            BEGIN
              GenJnlLine2.TESTFIELD("Amount Type");
            //NC NCS-979 < DP

              GenJnlLine2.TESTFIELD("Agreement Condition No.");
            //NC MLN02.1 < DP

            //NC NCS-1148 > DP
              IF NOT CheckAmtTypeDimension(GenJnlLine2) THEN
                ERROR('');
            //NC NCS-1148 < DP

            //NC NCS-979 > DP
            END;
            //NC NCS-979 < DP
          END;
        Cust."Agreement Posting"::"No Agreement":
          GenJnlLine2.TESTFIELD("Agreement No.",'');
      END;
    END;

    PROCEDURE CheckVendAgrmt@1210000(GenJnlLine2@1210001 : Record 81;VendNo@1210003 : Code[20]);
    VAR
      Vend@1210000 : Record 23;
      VendAgrmt@1210002 : Record 14901;
    BEGIN
      Vend.GET(VendNo);
      CASE Vend."Agreement Posting" OF
        Vend."Agreement Posting"::Mandatory:
          BEGIN
            GenJnlLine2.TESTFIELD("Agreement No.");
            VendAgrmt.GET(Vend."No.",GenJnlLine2."Agreement No.");
            IF (VendAgrmt."Starting Date" <> 0D) AND
              (VendAgrmt."Starting Date" > GenJnlLine2."Posting Date")
            THEN
              GenJnlLine2.FIELDERROR("Posting Date",Text12401);

            //NC MLN02.1 > DP
            IF VendAgrmt."Agreement Type" = VendAgrmt."Agreement Type"::Loans THEN

            //NC NCS-979 > DP
            BEGIN
              GenJnlLine2.TESTFIELD("Amount Type");
            //NC NCS-979 < DP

              GenJnlLine2.TESTFIELD("Agreement Condition No.");
            //NC MLN02.1 < DP

            //NC NCS-1148 > DP
              IF NOT CheckAmtTypeDimension(GenJnlLine2) THEN
                ERROR('');
            //NC NCS-1148 < DP

            //NC NCS-979 > DP
            END;
            //NC NCS-979 < DP
          END;
        Vend."Agreement Posting"::"No Agreement":
          GenJnlLine2.TESTFIELD("Agreement No.",'');
      END;
    END;

    LOCAL PROCEDURE CheckPrinted@1210001(GenJnlLine@1210000 : Record 81);
    VAR
      BankAccount@1210001 : Record 270;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          BankAccount.GET("Bal. Account No.");
          IF (BankAccount."Account Type" = BankAccount."Account Type"::"Cash Account") THEN
            TESTFIELD("Check Printed",TRUE);
        END ELSE
          TESTFIELD("Check Printed",TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckDocType@7(GenJnlLine@1001 : Record 81);
    VAR
      IsPayment@1000 : Boolean;
    BEGIN
      WITH GenJnlLine DO
        IF "Document Type" <> 0 THEN BEGIN
          IsPayment := "Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"];
          IF IsPayment XOR (("Account Type" = "Account Type"::Customer) OR IsVendorPaymentToCrMemo(GenJnlLine)) THEN
            ErrorIfNegativeAmt(GenJnlLine)
          ELSE
            ErrorIfPositiveAmt(GenJnlLine);
        END;
    END;

    LOCAL PROCEDURE CheckBalDocType@19(GenJnlLine@1000 : Record 81);
    VAR
      IsPayment@1001 : Boolean;
    BEGIN
      WITH GenJnlLine DO
        IF "Document Type" <> 0 THEN BEGIN
          IsPayment := "Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"];
          IF IsPayment = ("Bal. Account Type" = "Bal. Account Type"::Customer) THEN
            ErrorIfNegativeAmt(GenJnlLine)
          ELSE
            ErrorIfPositiveAmt(GenJnlLine);
        END;
    END;

    LOCAL PROCEDURE CheckICPartner@11(AccountType@1004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';AccountNo@1000 : Code[20];DocumentType@1005 : Option);
    VAR
      Customer@1001 : Record 18;
      Vendor@1002 : Record 23;
      ICPartner@1003 : Record 413;
    BEGIN
      CASE AccountType OF
        AccountType::Customer:
          IF Customer.GET(AccountNo) THEN BEGIN
            Customer.CheckBlockedCustOnJnls(Customer,DocumentType,TRUE);
            IF (Customer."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
               ICPartner.GET(Customer."IC Partner Code")
            THEN
              ICPartner.CheckICPartnerIndirect(FORMAT(AccountType),AccountNo);
          END;
        AccountType::Vendor:
          IF Vendor.GET(AccountNo) THEN BEGIN
            Vendor.CheckBlockedVendOnJnls(Vendor,DocumentType,TRUE);
            IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
               ICPartner.GET(Vendor."IC Partner Code")
            THEN
              ICPartner.CheckICPartnerIndirect(FORMAT(AccountType),AccountNo);
          END;
      END;
    END;

    LOCAL PROCEDURE CheckDimensions@12(GenJnlLine@1000 : Record 81);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1001 : ARRAY [10] OF Code[20];
      l_intTableID@1101495001 : ARRAY [10] OF Integer;
      l_codeNo@1101495000 : ARRAY [10] OF Code[20];
    BEGIN
      WITH GenJnlLine DO BEGIN
        //NC NOS-26 > SPA
        IF NOT SkipDimCombCheck THEN
        //NC NOS-26 < SPA
          IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
            ThrowGenJnlLineError(GenJnlLine,Text011,DimMgt.GetDimCombErr);

        TableID[1] := DimMgt.TypeToTableID1("Account Type");
        No[1] := "Account No.";
        TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
        No[2] := "Bal. Account No.";
        TableID[3] := DATABASE::Job;
        No[3] := "Job No.";
        TableID[4] := DATABASE::"Salesperson/Purchaser";
        No[4] := "Salespers./Purch. Code";
        TableID[5] := DATABASE::Campaign;
        No[5] := "Campaign No.";
        //TDRANCS-1071> commented
        //IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN
        IF NOT DimMgt.fn_CheckJnlLineDimValuePosting(TableID,No,"Dimension Set ID","Posting Date") THEN
        //TDRANCS-1071<
          ThrowGenJnlLineError(GenJnlLine,Text012,DimMgt.GetDimValuePostingErr);

        //NC NOS-26 > SPA
        IF NOT DimMgt.fn_CheckGlobalDim("Dimension Set ID",GenJnlLine) THEN
          ThrowGenJnlLineError(GenJnlLine,Text012,DimMgt.GetDimValuePostingErr);

        IF "Account Type" = "Account Type"::"G/L Account" THEN
          IF NOT DimMgt.fn_CheckRealCounterparty("Dimension Set ID", "Account No.") THEN
            ThrowGenJnlLineError(GenJnlLine,Text012,DimMgt.GetDimValuePostingErr);

        IF "Transaction Type" = "Transaction Type"::Manual THEN
          IF NOT DimMgt.fn_CheckDimForManualJnlBatch("Dimension Set ID") THEN
            ThrowGenJnlLineError(GenJnlLine,Text012,DimMgt.GetDimValuePostingErr);
        //NC NOS-26 < SPA

        //TDRANCS-1806>
        IF (TableID[1] = DATABASE::Customer) OR (TableID[1] = DATABASE::Vendor) THEN BEGIN
          IF TableID[1] = DATABASE::Customer THEN
            l_intTableID[1] := DATABASE::"Customer Agreement"
          ELSE
            l_intTableID[1] := DATABASE::"Vendor Agreement";
          l_codeNo[1] := "Agreement No.";
          IF NOT DimMgt.fn_CheckAgrDimValuePosting(l_intTableID,No[1],l_codeNo,"Dimension Set ID") THEN
            ThrowGenJnlLineError(GenJnlLine,Text012,DimMgt.GetDimValuePostingErr);
        END;
        //TDRANCS-1806<
      END;
    END;

    LOCAL PROCEDURE IsVendorPaymentToCrMemo@26(GenJournalLine@1002 : Record 81) : Boolean;
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF ("Account Type" = "Account Type"::Vendor) AND
           ("Document Type" = "Document Type"::Payment) AND
           ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
           ("Applies-to Doc. No." <> '')
        THEN BEGIN
          GenJournalTemplate.GET("Journal Template Name");
          EXIT(GenJournalTemplate.Type = GenJournalTemplate.Type::Payments);
        END;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE ThrowGenJnlLineError@8(GenJournalLine@1000 : Record 81;ErrorTemplate@1001 : Text;ErrorText@1002 : Text);
    BEGIN
      WITH GenJournalLine DO
        IF "Line No." <> 0 THEN
          ERROR(
            ErrorTemplate,
            TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
            ErrorText);
      ERROR(ErrorText);
    END;

    PROCEDURE SetBatchMode@30(NewBatchMode@1000 : Boolean);
    BEGIN
      IsBatchMode := NewBatchMode;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckGenJnlLine@6(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    PROCEDURE fn_VATDateNotAllowed@1000000000(p_datePosting@1000 : Date;p_optVATGroup@1000000000 : 'Business,Product';p_codeVatGroup@1000000001 : Code[10]) : Boolean;
    VAR
      l_recVATBusPostGr@1000000004 : Record 323;
      l_recVATProdPostGr@1000000005 : Record 324;
      l_dateAllowPostingFrom@1000000002 : Date;
      l_dateAllowPostingTo@1000000003 : Date;
    BEGIN
      //TDRANCS-875 >
      IF p_datePosting = 0D
        THEN EXIT(FALSE);
      CASE p_optVATGroup OF
        p_optVATGroup::Business: BEGIN
          IF NOT l_recVATBusPostGr.GET(p_codeVatGroup)
            THEN EXIT(FALSE);
          l_dateAllowPostingFrom := l_recVATBusPostGr."From Date";
          l_dateAllowPostingTo := l_recVATBusPostGr."To Date";
        END;
        p_optVATGroup::Product: BEGIN
          IF NOT l_recVATProdPostGr.GET(p_codeVatGroup)
            THEN EXIT(FALSE);
          l_dateAllowPostingFrom := l_recVATProdPostGr."From Date";
          l_dateAllowPostingTo := l_recVATProdPostGr."To Date";
        END;
        ELSE
          EXIT(FALSE);
      END;

      IF l_dateAllowPostingTo = 0D THEN
        l_dateAllowPostingTo := 31129999D;

      EXIT((p_datePosting < l_dateAllowPostingFrom) OR (p_datePosting > l_dateAllowPostingTo));
    END;

    PROCEDURE CheckAmtTypeDimension@1101495000(GenJnlLine2@1101495002 : Record 81) : Boolean;
    VAR
      MovingDataSetup@1101495001 : Record 50064;
      DimensionSetEntry@1101495000 : Record 480;
      IsAmtTypeDimension@1101495003 : Boolean;
    BEGIN
      //NC NCS-1268 > DP
      IF GenJnlLine2."Amount Type" IN [GenJnlLine2."Amount Type"::Reserve,
                                       GenJnlLine2."Amount Type"::"Reserve%"]
      THEN
        EXIT(TRUE);
      //NC NCS-1268 < DP

      //NC NCS-1148 > DP
      IsAmtTypeDimension := FALSE;

      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("Body/Percentage Dimension Code");
      MovingDataSetup.TESTFIELD("Body Dimension Value");
      MovingDataSetup.TESTFIELD("Percentage Dimencion Value");

      //NC NOS-26 > SPA
      IF DimensionSetEntry.GET(GenJnlLine2."Dimension Set ID", MovingDataSetup."Body/Percentage Dimension Code") THEN BEGIN
      {
      IF JnlLineDim.GET(81,
                        GenJnlLine2."Journal Template Name",
                        GenJnlLine2."Journal Batch Name",
                        GenJnlLine2."Line No.",
                        0,
                        MovingDataSetup."Body/Percentage Dimension Code")
      THEN BEGIN
      }
      //NC NOS-26 < SPA
        IF GenJnlLine2."Amount Type"=GenJnlLine2."Amount Type"::Principal THEN BEGIN
          //IF JnlLineDim."Dimension Value Code"<>MovingDataSetup."Body Dimension Value" THEN BEGIN
          IF DimensionSetEntry."Dimension Value Code" <> MovingDataSetup."Body Dimension Value" THEN BEGIN // NC NOS-26 SPA
            IF CONFIRM(Text50001,IsAmtTypeDimension,GenJnlLine2."Line No.",
                MovingDataSetup."Body/Percentage Dimension Code",
                MovingDataSetup."Body Dimension Value")
            THEN
              IsAmtTypeDimension := TRUE;
          END ELSE
            IsAmtTypeDimension := TRUE;
        END ELSE
          IF GenJnlLine2."Amount Type"=GenJnlLine2."Amount Type"::Interest THEN BEGIN
            //IF (JnlLineDim."Dimension Value Code"<>MovingDataSetup."Percentage Dimencion Value") THEN BEGIN
            IF DimensionSetEntry."Dimension Value Code" <> MovingDataSetup."Percentage Dimencion Value" THEN BEGIN // NC NOS-26 SPA
              IF CONFIRM(Text50001,IsAmtTypeDimension,GenJnlLine2."Line No.",
                  MovingDataSetup."Body/Percentage Dimension Code",
                  MovingDataSetup."Percentage Dimencion Value")
              THEN
                IsAmtTypeDimension := TRUE;
            END ELSE
              IsAmtTypeDimension := TRUE;
          END;
      END ELSE
        //TDRANCS-1913>
        IF (GenJnlLine2.Amount <> 0) OR (GenJnlLine2."Amount (LCY)" <> 0) THEN BEGIN
        //TDRANCS-1913<
          IF GenJnlLine2."Amount Type"=GenJnlLine2."Amount Type"::Principal THEN BEGIN
            IF CONFIRM(Text50001,IsAmtTypeDimension,
              GenJnlLine2."Line No.",
              MovingDataSetup."Body/Percentage Dimension Code",
              MovingDataSetup."Body Dimension Value")
            THEN
               IsAmtTypeDimension := TRUE;
          END ELSE
            IF GenJnlLine2."Amount Type"=GenJnlLine2."Amount Type"::Interest THEN BEGIN
              IF CONFIRM(Text50001,IsAmtTypeDimension,
                  GenJnlLine2."Line No.",
                  MovingDataSetup."Body/Percentage Dimension Code",
                  MovingDataSetup."Percentage Dimencion Value")
              THEN
                IsAmtTypeDimension := TRUE;
            END;
        //TDRANCS-1913>
        END ELSE
          IsAmtTypeDimension := TRUE;
        //TDRANCS-1913<
      EXIT(IsAmtTypeDimension);
      //NC NCS-1148 < DP
    END;

    PROCEDURE CheckForSkippingDimComb@1101495001();
    VAR
      DimensionCombination@1101495000 : Record 350;
    BEGIN
      //NC NOS-26 > SPA
      SkipDimCombCheck := DimensionCombination.ISEMPTY;
      //NC NOS-26 < SPA
    END;

    PROCEDURE SetGenJnlBatch@1101495004(GenJournalBatch@1101495000 : Record 232);
    BEGIN
      //NC NOS-26 > SPA
      GenJnlBatch := GenJournalBatch;
      //NC NOS-26 < SPA
    END;

    BEGIN
    {
      NC PIF001 DL Добавлена проверка на RunCheck
      NC MP 27.02.07 RunCheck Добавлена проверка что раздел не для исключения
      NC MP 26.03.07 RunCheck Добавлена проверка указания Кода Причины
      NC MDC02 MP Обработка Код Филиала Обязателен
      NC MDP02 MP Для целей частичного учета журнала изменения в коде
      NC MTF02 II Исправлен код
      NC MLN02.1 DP Контроль заполнения Условие Договора для Кредитов
      NC MTF02 AKU Отключил условие "Direct Posting" = TRUE, если  "FI Required" = TRUE
      TDRANCS-875 > check Posting Date for VAT
        Add function fn_VATDateNotAllowed
        Modify RunCheck
      NC NCS-979 DP Контроль заполнения типа суммы для Кредитов
      TDRA create BLD001
        NAVW15.00,NAVRU5.00.01.03,NCPIF001,MDC02,MDP02,MIFI02,MTF02
      TDRANCS-1071,BLD001,TDNCS-875,NCS-979,
        Modified RunCheck
      NC NCS-1108.5 DP Контроль при учете чека, что он распечатан
      NC NCS-1148 DP Проверка соответствия типа суммы и аналитики AC.COMP
      NC NCS-1268 DP Изменена функция CheckAmtTypeDimension
      NC MIO-11 AES:
        Измененные триггеры:
          OnRun
      TDRANCS-1394>
        Modified RunCheck
      TDRAMIO-41>
        Deleted MIO-34
      NC NCS-1964 DP Изменен триггер RunCheck
      TDRANCS-1913 modified CheckAmtTypeDimension
      NCS-2068 AAP Проверка признака "Не консолидировать"
      TDRANCS-1806 Modified RunCheck
      NC NCS-2248 DP Modified RunCheck
      NCS-2360 ORM variable FIJnlCheckLine renamed to FIGLJnlCheckLine
      ------------------------
      NC NOS-26 SPA Миграция на новую версию
      NC NOS-26 ENK Change functions:   ErrorIfPositiveAmt() Local =No
                                          ErrorIfNegativeAmt() Local =No
    }
    END.
  }
}

