OBJECT Table 17457 Payroll Status
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payroll Status;
               RUS=Статус зарплаты];
  }
  FIELDS
  {
    { 1   ;   ;Period Code         ;Code10        ;TableRelation="Payroll Period";
                                                   CaptionML=[ENU=Period Code;
                                                              RUS=Код периода] }
    { 2   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Employee No.;
                                                              RUS=Код сотрудника] }
    { 6   ;   ;Payroll Status      ;Option        ;CaptionML=[ENU=Payroll Status;
                                                              RUS=Статус зарплаты];
                                                   OptionCaptionML=[ENU=" ,Calculated,Posted,Paid";
                                                                    RUS=" ,Рассчитана,Учтена,Выплачена"];
                                                   OptionString=[ ,Calculated,Posted,Paid] }
    { 7   ;   ;Advance Status      ;Option        ;CaptionML=[ENU=Advance Status;
                                                              RUS=Статус аванса];
                                                   OptionCaptionML=[ENU=" ,Calculated,Posted,Paid";
                                                                    RUS=" ,Рассчитана,Учтена,Выплачена"];
                                                   OptionString=[ ,Calculated,Posted,Paid] }
    { 8   ;   ;Tax Status          ;Option        ;CaptionML=[ENU=Tax Status;
                                                              RUS=Налоговый статус];
                                                   OptionCaptionML=[ENU=" ,Calculated,Posted,Paid";
                                                                    RUS=" ,Рассчитана,Учтена,Выплачена"];
                                                   OptionString=[ ,Calculated,Posted,Paid] }
    { 10  ;   ;Wages               ;Decimal       ;CaptionML=[ENU=Wages;
                                                              RUS=Начисления];
                                                   Editable=No }
    { 11  ;   ;Bonuses             ;Decimal       ;CaptionML=[ENU=Bonuses;
                                                              RUS=Премии];
                                                   Editable=No }
    { 12  ;   ;Deductions          ;Decimal       ;CaptionML=[ENU=Deductions;
                                                              RUS=Вычеты];
                                                   Editable=No }
    { 13  ;   ;Tax Deductions      ;Decimal       ;CaptionML=[ENU=Tax Deductions;
                                                              RUS=Налоговые вычеты];
                                                   Editable=No }
    { 14  ;   ;Income Tax Base     ;Decimal       ;CaptionML=[ENU=Income Tax Base;
                                                              RUS=База НДФЛ];
                                                   Editable=No }
    { 15  ;   ;Income Tax Amount   ;Decimal       ;CaptionML=[ENU=Income Tax Amount;
                                                              RUS=Сумма НДФЛ] }
    { 16  ;   ;FSS Contributions   ;Decimal       ;CaptionML=[ENU=FSS Contributions;
                                                              RUS=Взносы в ФСС] }
    { 17  ;   ;FSS Injury Contributions;Decimal   ;CaptionML=[ENU=FSS Injury Contributions;
                                                              RUS=Взносы в ФСС по травматизму] }
    { 18  ;   ;Territorial FMI Contributions;Decimal;
                                                   CaptionML=[ENU=Territorial FMI Contributions;
                                                              RUS=Взносы в террит. ФОМС] }
    { 19  ;   ;Federal FMI Contributions;Decimal  ;CaptionML=[ENU=Federal FMI Contributions;
                                                              RUS=Взносы в федер. ФОМС] }
    { 20  ;   ;PF Accum. Part Contributions;Decimal;
                                                   CaptionML=[ENU=PF Accum. Part Contributions;
                                                              RUS=Взносы в накоп. часть ПФ] }
    { 21  ;   ;PF Insur. Part Contributions;Decimal;
                                                   CaptionML=[ENU=PF Insur. Part Contributions;
                                                              RUS=Взносы в страх. часть ПФ] }
    { 30  ;   ;Posted Wages        ;Decimal       ;CaptionML=[ENU=Posted Wages;
                                                              RUS=Учтенные начисления];
                                                   Editable=No }
    { 31  ;   ;Posted Bonuses      ;Decimal       ;CaptionML=[ENU=Posted Bonuses;
                                                              RUS=Учтенные премии];
                                                   Editable=No }
    { 32  ;   ;Posted Deductions   ;Decimal       ;CaptionML=[ENU=Posted Deductions;
                                                              RUS=Учтенные вычеты];
                                                   Editable=No }
    { 33  ;   ;Posted Tax Deductions;Decimal      ;CaptionML=[ENU=Posted Tax Deductions;
                                                              RUS=Учт. налоговые вычеты];
                                                   Editable=No }
    { 34  ;   ;Posted Income Tax Base;Decimal     ;CaptionML=[ENU=Posted Income Tax Base;
                                                              RUS=Учт. база НДФЛ];
                                                   Editable=No }
    { 35  ;   ;Posted Income Tax Amount;Decimal   ;CaptionML=[ENU=Posted Income Tax Amount;
                                                              RUS=Учт. сумма НДФЛ] }
    { 36  ;   ;Posted FSS Contributions;Decimal   ;CaptionML=[ENU=Posted FSS Contributions;
                                                              RUS=Учтенные взносы в ФСС] }
    { 37  ;   ;Posted FSS Injury Contrib.;Decimal ;CaptionML=[ENU=Posted FSS Injury Contrib.;
                                                              RUS=Учтенные взносы в ФСС по травматизму] }
    { 38  ;   ;Posted Territ. FMI Contrib.;Decimal;CaptionML=[ENU=Posted Territ. FMI Contrib.;
                                                              RUS=Учт. взносы в террит. ФОМС] }
    { 39  ;   ;Posted Federal FMI Contrib.;Decimal;CaptionML=[ENU=Posted Federal FMI Contrib.;
                                                              RUS=Учтенные взносы в федер. ФОМС] }
    { 40  ;   ;Posted PF Accum. Part Contrib.;Decimal;
                                                   CaptionML=[ENU=Posted PF Accum. Part Contrib.;
                                                              RUS=Учт. взносы в накоп. часть ПФ] }
    { 41  ;   ;Posted PF Insur. Part Contrib.;Decimal;
                                                   CaptionML=[ENU=Posted PF Insur. Part Contrib.;
                                                              RUS=Учт. взносы в страх. часть ПФ] }
  }
  KEYS
  {
    {    ;Period Code,Employee No.                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PayrollPeriod@1210006 : Record 17426;
      HumanResSetup@1210008 : Record 5218;
      PayrollDocCalculate@1210007 : Codeunit 17404;

    PROCEDURE UpdateCalculated@1210002(VAR PayrollStatus@1210005 : Record 17457);
    BEGIN
      PayrollPeriod.GET("Period Code");

      HumanResSetup.GET;

      WITH PayrollStatus DO BEGIN
        IF HumanResSetup."Wages Element Code" <> '' THEN
          Wages :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."Wages Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Bonus Element Code" <> '' THEN
          Bonuses :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."Bonus Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Deductions Element Code" <> '' THEN
          "Tax Deductions" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."Deductions Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Tax Deductions Element Code" <> '' THEN
          "Tax Deductions" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."Tax Deductions Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Income Tax Element Code" <> '' THEN
          "Income Tax Amount" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."Income Tax Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."FSI Element Code" <> '' THEN
          "FSS Contributions" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."FSI Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."FSI Injury Element Code" <> '' THEN
          "FSS Injury Contributions" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."FSI Injury Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Territorial FMI Element Code" <> '' THEN
          "Territorial FMI Contributions" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."Territorial FMI Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Federal FMI Element Code" <> '' THEN
          "Federal FMI Contributions" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."Federal FMI Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."PF Accum. Part Element Code" <> '' THEN
          "PF Accum. Part Contributions" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."PF Accum. Part Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."PF Insur. Part Element Code" <> '' THEN
          "PF Insur. Part Contributions" :=
            PayrollDocCalculate.CalcElementByPayrollDocs(
              HumanResSetup."PF Insur. Part Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');
      END;
    END;

    PROCEDURE UpdatePosted@1210000(VAR PayrollStatus@1210000 : Record 17457);
    BEGIN
      PayrollPeriod.GET("Period Code");

      HumanResSetup.GET;
      WITH PayrollStatus DO BEGIN
        IF HumanResSetup."Wages Element Code" <> '' THEN
          "Posted Wages" :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."Wages Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Bonus Element Code" <> '' THEN
          "Posted Bonuses" :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."Bonus Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Deductions Element Code" <> '' THEN
          "Posted Deductions" :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."Deductions Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Tax Deductions Element Code" <> '' THEN
          "Posted Tax Deductions" :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."Tax Deductions Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Income Tax Element Code" <> '' THEN
          "Posted Income Tax Amount" :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."Income Tax Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."FSI Element Code" <> '' THEN
          "Posted FSS Contributions" :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."FSI Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."FSI Injury Element Code" <> '' THEN
          "Posted FSS Injury Contrib." :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."FSI Injury Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Territorial FMI Element Code" <> '' THEN
          "Posted Territ. FMI Contrib." :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."Territorial FMI Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."Federal FMI Element Code" <> '' THEN
          "Posted Federal FMI Contrib." :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."Federal FMI Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."PF Accum. Part Element Code" <> '' THEN
          "Posted PF Accum. Part Contrib." :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."PF Accum. Part Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');

        IF HumanResSetup."PF Insur. Part Element Code" <> '' THEN
          "Posted PF Insur. Part Contrib." :=
            PayrollDocCalculate.CalcElementByPostedEntries(
              HumanResSetup."PF Insur. Part Element Code","Employee No.",
              PayrollPeriod."Starting Date",PayrollPeriod."Ending Date",'');
      END;
    END;

    PROCEDURE CheckPayrollStatus@1210001(PeriodCode@1210000 : Code[10];EmployeeNo@1210001 : Code[20]);
    VAR
      PayrollStatus@1210002 : Record 17457;
    BEGIN
      PayrollStatus.GET(PeriodCode,EmployeeNo);
      IF PayrollStatus."Payroll Status" <> PayrollStatus."Payroll Status"::" " THEN
        PayrollStatus.FIELDERROR("Payroll Status");
    END;

    PROCEDURE HasSalaryIndexation@1210003(VAR IndexationFactor@1210000 : Decimal) : Boolean;
    VAR
      LaborContractLine@1210004 : Record 17361;
    BEGIN
      IF FindSalaryIndexation(LaborContractLine) THEN BEGIN
        IndexationFactor := CalcIndexationFactor(LaborContractLine);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindSalaryIndexation@1210004(VAR LaborContractLine@1210003 : Record 17361) : Boolean;
    VAR
      LaborContract@1210005 : Record 17360;
      LaborContractTerms@1210004 : Record 17362;
    BEGIN
      PayrollPeriod.GET("Period Code");
      HumanResSetup.GET;
      LaborContract.SETRANGE("Employee No.","Employee No.");
      IF NOT LaborContract.FINDFIRST THEN
        EXIT(FALSE);

      LaborContractLine.SETRANGE("Contract No.",LaborContract."No.");
      LaborContractLine.SETRANGE(Status,LaborContractLine.Status::Approved);
      LaborContractLine.SETRANGE("Starting Date",PayrollPeriod."Starting Date",PayrollPeriod."Ending Date");
      IF NOT LaborContractLine.FINDLAST THEN
        EXIT(FALSE);
      IF LaborContractLine."Operation Type" <> LaborContractLine."Operation Type"::Transfer THEN
        EXIT(FALSE);

      LaborContractTerms.SETRANGE("Labor Contract No.",LaborContractLine."Contract No.");
      LaborContractTerms.SETRANGE("Operation Type",LaborContractLine."Operation Type");
      LaborContractTerms.SETRANGE("Supplement No.",LaborContractLine."Supplement No.");
      LaborContractTerms.SETRANGE("Line Type",LaborContractTerms."Line Type"::"Payroll Element");
      LaborContractTerms.SETFILTER("Element Code",'%1|%2|%3',HumanResSetup."Element Code Salary Days",
        HumanResSetup."Element Code Salary Hours",HumanResSetup."Element Code Salary Amount");
      IF NOT LaborContractTerms.FINDFIRST THEN
        EXIT(FALSE);

      EXIT(LaborContractTerms."Salary Indexation");
    END;

    LOCAL PROCEDURE CalcIndexationFactor@1210009(VAR LaborContractLine@1210002 : Record 17361) : Decimal;
    VAR
      OldPosition@1210001 : Record 17370;
      NewPosition@1210000 : Record 17370;
    BEGIN
      NewPosition.GET(LaborContractLine."Position No.");
      LaborContractLine.SETRANGE("Starting Date");
      LaborContractLine.NEXT(-1);
      OldPosition.GET(LaborContractLine."Position No.");
      EXIT(1 + (NewPosition."Base Salary" - OldPosition."Base Salary") / OldPosition."Base Salary");
    END;

    BEGIN
    END.
  }
}

