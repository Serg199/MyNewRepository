OBJECT Page 26558 Stat. Report Requisites
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Stat. Report Requisites;
               RUS=Показатели регламентного отчета];
    SourceTable=Table26559;
    DelayedInsert=Yes;
    SourceTableView=SORTING(Report Code,Requisites Group Name,Table Code,Sequence No.);
    DataCaptionFields=Requisites Group Name;
    PageType=List;
    OnClosePage=BEGIN
                  IF NOT ISNULL(XlWrkBk) THEN BEGIN
                    IF NOT ISNULL(XlApp) THEN
                      IF XlApp.Visible THEN BEGIN
                        CLEAR(XlWrkBk);
                        CLEAR(XlWrkBk);
                      END;

                    IF NOT ISNULL(XlApp) THEN BEGIN
                      XlApp.Quit;
                      CLEAR(XlApp);
                    END;
                  END;
                END;

    OnAfterGetRecord=BEGIN
                       NameOnFormat;
                     END;

    OnInsertRecord=VAR
                     StatReportRequisite@1210001 : Record 26559;
                     SequenceNo@1210000 : Integer;
                   BEGIN
                     StatReportRequisite.SETCURRENTKEY("Report Code","Requisites Group Name","Table Code","Sequence No.");
                     StatReportRequisite.SETRANGE("Report Code","Report Code");
                     StatReportRequisite.SETRANGE("Requisites Group Name","Requisites Group Name");

                     IF BelowxRec THEN BEGIN
                       IF StatReportRequisite.FIND('+') THEN;
                       "Sequence No." := StatReportRequisite."Sequence No." + 1;
                     END ELSE BEGIN
                       SequenceNo := xRec."Sequence No.";

                       StatReportRequisite.SETFILTER("Sequence No.",'%1..',SequenceNo);
                       IF StatReportRequisite.FIND('+') THEN
                         REPEAT
                           StatReportRequisite."Sequence No." := StatReportRequisite."Sequence No." + 1;
                           StatReportRequisite.MODIFY;
                         UNTIL StatReportRequisite.NEXT(-1) = 0;
                       "Sequence No." := SequenceNo;
                     END;
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1210037 ;1   ;ActionGroup;
                      CaptionML=[ENU=&Requisite;
                                 RUS=&Показатель] }
      { 1210038 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+E;
                      CaptionML=[ENU=Expression Lines;
                                 RUS=Строки выражения];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=AdjustItemCost;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 RequisiteExpressionLine@1210001 : Record 26560;
                                 RequisiteExpressionLines@1210000 : Page 26559;
                               BEGIN
                                 TESTFIELD("Source Type","Source Type"::Expression);
                                 RequisiteExpressionLine.FILTERGROUP(2);
                                 RequisiteExpressionLine.SETRANGE("Report Code","Report Code");
                                 RequisiteExpressionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
                                 RequisiteExpressionLine.SETRANGE("Base Requisite Name",Name);
                                 RequisiteExpressionLine.FILTERGROUP(0);
                                 RequisiteExpressionLines.SETTABLEVIEW(RequisiteExpressionLine);
                                 RequisiteExpressionLines.RUNMODAL;
                               END;
                                }
      { 1210039 ;2   ;Action    ;
                      CaptionML=[ENU=Condition Lines;
                                 RUS=Строки условий];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=CheckRulesSyntax;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 RequisiteConditionLine@1210001 : Record 26561;
                                 RequisiteConditionLines@1210000 : Page 26560;
                               BEGIN
                                 TESTFIELD("Export Type","Export Type"::"Conditionally Required");
                                 RequisiteConditionLine.FILTERGROUP(2);
                                 RequisiteConditionLine.SETRANGE("Report Code","Report Code");
                                 RequisiteConditionLine.SETRANGE("Base Requisites Group Name","Requisites Group Name");
                                 RequisiteConditionLine.SETRANGE("Base Requisite Name",Name);
                                 RequisiteConditionLine.FILTERGROUP(0);
                                 RequisiteConditionLines.SETTABLEVIEW(RequisiteConditionLine);
                                 RequisiteConditionLines.RUNMODAL;
                               END;
                                }
      { 1210040 ;2   ;Action    ;
                      CaptionML=[ENU=Option Lines;
                                 RUS=Строки параметров];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Reconcile;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 RequisiteOptionLine@1210001 : Record 26558;
                                 RequisiteOptionLines@1210000 : Page 26557;
                               BEGIN
                                 TESTFIELD("Excel Mapping Type","Excel Mapping Type"::Option);
                                 RequisiteOptionLine.FILTERGROUP(2);
                                 RequisiteOptionLine.SETRANGE("Report Code","Report Code");
                                 RequisiteOptionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
                                 RequisiteOptionLine.SETRANGE("Requisite Name",Name);
                                 RequisiteOptionLine.FILTERGROUP(0);
                                 RequisiteOptionLines.SETTABLEVIEW(RequisiteOptionLine);
                                 RequisiteOptionLines.RUNMODAL;
                               END;
                                }
      { 1210012 ;2   ;Action    ;
                      CaptionML=[ENU=Compound Requisite Lines;
                                 RUS=Строки составного показателя];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ExplodeBOM;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 RequisiteExpressionLine@1210001 : Record 26560;
                                 CompoundRequisiteLines@1210000 : Page 26565;
                               BEGIN
                                 TESTFIELD("Source Type","Source Type"::"Compound Requisite");
                                 RequisiteExpressionLine.FILTERGROUP(2);
                                 RequisiteExpressionLine.SETRANGE("Report Code","Report Code");
                                 RequisiteExpressionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
                                 RequisiteExpressionLine.SETRANGE("Base Requisite Name",Name);
                                 RequisiteExpressionLine.FILTERGROUP(0);
                                 CompoundRequisiteLines.SETTABLEVIEW(RequisiteExpressionLine);
                                 CompoundRequisiteLines.RUNMODAL;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210013 ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 RUS=Фун&кции];
                      Image=Action }
      { 1210017 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+W;
                      CaptionML=[ENU=Move Up;
                                 RUS=Сдвинуть вверх];
                      ApplicationArea=#Basic,#Suite;
                      Image=MoveUp;
                      OnAction=BEGIN
                                 MoveUp;
                               END;
                                }
      { 1210018 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+S;
                      CaptionML=[ENU=Move Down;
                                 RUS=Сдвинуть вниз];
                      ApplicationArea=#Basic,#Suite;
                      Image=MoveDown;
                      OnAction=BEGIN
                                 MoveDown;
                               END;
                                }
      { 1210042 ;2   ;Separator  }
      { 1210043 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+O;
                      CaptionML=[ENU=Open Excel Template;
                                 RUS=Открыть шаблон Excel];
                      ApplicationArea=#Basic,#Suite;
                      Image=Excel;
                      OnAction=BEGIN
                                 OpenTemplate;
                               END;
                                }
      { 1210044 ;2   ;Action    ;
                      CaptionML=[ENU=Apply Selection;
                                 RUS=Применить выбор];
                      ApplicationArea=#Basic,#Suite;
                      Image=Apply;
                      OnAction=BEGIN
                                 ApplySelection;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210000;1;Group     ;
                GroupType=Repeater }

    { 1210001;2;Field     ;
                ToolTipML=[ENU=Specifies the name of the statutory report requisite.;
                           RUS=Определяет имя показателя регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Name }

    { 1210003;2;Field     ;
                ToolTipML=[ENU=Specifies the report code description for the statutory report requisite.;
                           RUS=Определяет описание кода отчета для показателя регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description }

    { 1210035;2;Field     ;
                ToolTipML=[ENU=Specifies the data type associated with the statutory report requisite.;
                           RUS=Определяет тип данных, связанный с показателем регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Data Type" }

    { 1210005;2;Field     ;
                ToolTipML=[ENU=Specifies the source type for the statutory report requisite.;
                           RUS=Определяет тип источника для показателя регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Source Type";
                OnValidate=VAR
                             RequisiteExpressionLine@1210001 : Record 26560;
                           BEGIN
                             IF "Source Type" <> xRec."Source Type" THEN BEGIN
                               IF xRec."Source Type" = xRec."Source Type"::"Inserted Requisite" THEN
                                 "Column Link No." := 0;

                               IF NOT ("Source Type" IN ["Source Type"::"Table Data","Source Type"::"Individual Requisite"]) THEN
                                 IF "Excel Mapping Type" = "Excel Mapping Type"::Option THEN
                                   FIELDERROR("Excel Mapping Type");

                               CASE xRec."Source Type" OF
                                 xRec."Source Type"::Expression:
                                   BEGIN
                                     RequisiteExpressionLine.RESET;
                                     RequisiteExpressionLine.SETRANGE("Report Code","Report Code");
                                     RequisiteExpressionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
                                     RequisiteExpressionLine.SETRANGE("Base Requisite Name",Name);
                                     IF RequisiteExpressionLine.FINDFIRST THEN
                                       IF CONFIRM(Text008) THEN BEGIN
                                         RequisiteExpressionLine.DELETEALL;
                                         Value := '';
                                       END ELSE
                                         ERROR('');
                                     Value := '';
                                   END;
                                 xRec."Source Type"::"Compound Requisite":
                                   BEGIN
                                     RequisiteExpressionLine.RESET;
                                     RequisiteExpressionLine.SETRANGE("Report Code","Report Code");
                                     RequisiteExpressionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
                                     RequisiteExpressionLine.SETRANGE("Base Requisite Name",Name);
                                     IF RequisiteExpressionLine.FINDFIRST THEN
                                       IF CONFIRM(Text012) THEN
                                         RequisiteExpressionLine.DELETEALL
                                       ELSE
                                         ERROR('');
                                   END;
                                 xRec."Source Type"::"Individual Requisite":
                                   "Column Link No." := 0;
                               END;

                               IF "Source Type" <> "Source Type"::Constant THEN
                                 Value := '';
                             END;

                             CASE "Source Type" OF
                               "Source Type"::Expression,
                               "Source Type"::Constant,
                               "Source Type"::"Individual Requisite":
                                 "Column Link No." := 0;
                               "Source Type"::"Inserted Requisite":
                                 "Column Link No." := -10000;
                             END;
                           END;
                            }

    { 1210007;2;Field     ;
                ToolTipML=[ENU=Specifies the value for the statutory report requisite.;
                           RUS=Определяет значение показателя регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Value }

    { 1210024;2;Field     ;
                ToolTipML=[ENU=Specifies the export type associated with the statutory report requisite.;
                           RUS=Определяет тип экспорта, связанный с показателем регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Export Type" }

    { 1210034;2;Field     ;
                ToolTipML=[ENU=Specifies the empty value of the statutory report requisite.;
                           RUS=Определяет пустое значение показателя регламентного отчета.];
                SourceExpr="Empty Value";
                Visible=FALSE }

    { 1210032;2;Field     ;
                ToolTipML=[ENU=Specifies if the statutory report requisite is in a Microsoft Excel format only.;
                           RUS=Определяет, имеет ли показатель регламентного отчета только формат Microsoft Excel.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Excel Only" }

    { 1210045;2;Field     ;
                ToolTipML=[ENU=Specifies the amounts unit of measure scaling associated with the statutory report requisite.;
                           RUS=Определяет масштабирование единиц измерения сумм, связанное с показателем регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="OKEI Scaling" }

    { 1210014;2;Field     ;
                ToolTipML=[ENU=Specifies the Microsoft Excel mapping type associated with the statutory report requisite.;
                           RUS=Определяет тип сопоставления Microsoft Excel, связанный с показателем регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Excel Mapping Type" }

    { 1210016;2;Field     ;
                ToolTipML=[ENU=Specifies the Microsoft Excel cell name associated with the statutory report requisite.;
                           RUS=Определяет имя ячейки Microsoft Excel, связанное с показателем регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Excel Cell Name" }

    { 1210020;2;Field     ;
                ToolTipML=[ENU=Specifies the second Microsoft Excel cell name associated with the statutory report requisite.;
                           RUS=Определяет второе имя ячейки Microsoft Excel, связанное с показателем регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Excel Second Cell Name" }

    { 1210022;2;Field     ;
                ToolTipML=[ENU=Specifies the cells quantity for the statutory report requisite.;
                           RUS=Определяет количество ячеек для показателя регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Cells Quantity" }

    { 1210030;2;Field     ;
                ToolTipML=[ENU=Specifies the table code for the statutory report requisite.;
                           RUS=Определяет код таблицы для показателя регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Code" }

    { 1210026;2;Field     ;
                ToolTipML=[ENU=Specifies the row link number associated with the statutory report requisite.;
                           RUS=Определяет ссылочный номер строки, связанный с показателем регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Row Link No.";
                OnLookup=BEGIN
                           LookupRow;
                         END;
                          }

    { 1210028;2;Field     ;
                ToolTipML=[ENU=Specifies the column link number associated with the statutory report requisite.;
                           RUS=Определяет ссылочный номер столбца, связанный с показателем регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Column Link No.";
                OnLookup=BEGIN
                           LookupColumn;
                         END;
                          }

    { 1210046;2;Field     ;
                ToolTipML=[ENU=Specifies a scalable table row template associated with the statutory report requisite.;
                           RUS=Определяет шаблон строки расширяемой таблицы, связанный с показателем регламентного отчета.];
                SourceExpr="Scalable Table Row Template";
                Visible=FALSE }

  }
  CODE
  {
    VAR
      StatutoryReport@1210003 : Record 26550;
      StatReportRequisitesGroup@1210004 : Record 26557;
      FormatVersion@1210008 : Record 26573;
      BLOBRef@1210012 : TEMPORARY Record 99008535;
      ExcelMgt@1210011 : Codeunit 12416;
      FileMgt@1210006 : Codeunit 419;
      XlApp@1210015 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1210014 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorkbookClass" RUNONCLIENT;
      XlWrkSht@1210013 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      Text001@1210007 : TextConst 'ENU=Excel template is already opened.;RUS=Шаблон Excel уже открыт.';
      Text008@1210010 : TextConst 'ENU=All related expression lines will be deleted. Proceed?;RUS=Все связанные строки выражения будут удалены. Продолжить?';
      Text012@1210009 : TextConst 'ENU=All related compound Requisite lines will be deleted. Proceed?;RUS=Все связанные строки составного показателя будут удалены. Продолжить?';
      XlRange@1210001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      XlHelper@1210000 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;

    PROCEDURE MoveUp@1210000();
    VAR
      UpperRequisite@1210000 : Record 26559;
      SequenceNo@1210001 : Integer;
    BEGIN
      UpperRequisite.SETCURRENTKEY("Report Code","Requisites Group Name","Table Code","Sequence No.");
      UpperRequisite.SETRANGE("Report Code","Report Code");
      UpperRequisite.SETRANGE("Table Code","Table Code");
      UpperRequisite.SETRANGE("Requisites Group Name","Requisites Group Name");
      UpperRequisite.SETFILTER("Sequence No.",'..%1',"Sequence No." - 1);
      IF UpperRequisite.FINDLAST THEN BEGIN
        SequenceNo := UpperRequisite."Sequence No.";
        UpperRequisite."Sequence No." := "Sequence No.";
        UpperRequisite.MODIFY;

        "Sequence No." := SequenceNo;
        MODIFY;
      END;
    END;

    PROCEDURE MoveDown@1210008();
    VAR
      LowerRequisite@1210002 : Record 26559;
      SequenceNo@1210001 : Integer;
    BEGIN
      LowerRequisite.SETCURRENTKEY("Report Code","Requisites Group Name","Table Code","Sequence No.");
      LowerRequisite.SETRANGE("Report Code","Report Code");
      LowerRequisite.SETRANGE("Table Code","Table Code");
      LowerRequisite.SETRANGE("Requisites Group Name","Requisites Group Name");
      LowerRequisite.SETFILTER("Sequence No.",'%1..',"Sequence No." + 1);
      IF LowerRequisite.FINDFIRST THEN BEGIN
        SequenceNo := LowerRequisite."Sequence No.";
        LowerRequisite."Sequence No." := "Sequence No.";
        LowerRequisite.MODIFY;

        "Sequence No." := SequenceNo;
        MODIFY;
      END;
    END;

    PROCEDURE OpenTemplate@1210006();
    VAR
      FileName@1210000 : Text[250];
      EndOfLoop@1210001 : Integer;
      i@1210002 : Integer;
      Found@1210003 : Boolean;
    BEGIN
      StatutoryReport.CheckServiceTier;
      StatutoryReport.GET("Report Code");
      StatutoryReport.TESTFIELD("Format Version Code");
      FormatVersion.GET(StatutoryReport."Format Version Code");
      FormatVersion.TESTFIELD("Excel File Name");
      StatReportRequisitesGroup.GET("Report Code","Requisites Group Name");

      IF NOT ISNULL(XlApp) THEN
        IF NOT XlApp.Visible THEN
          CLEAR(XlApp)
        ELSE
          ERROR(Text001);

      FormatVersion.CALCFIELDS("Report Template");
      BLOBRef.Blob := FormatVersion."Report Template";
      FileName := FileMgt.BLOBExport(BLOBRef,FormatVersion."Excel File Name",FALSE);

      XlApp := XlApp.ApplicationClass;
      XlHelper.CallOpen(XlApp,FileName);
      XlWrkBk := XlApp.ActiveWorkbook;

      i := 1;
      EndOfLoop := XlWrkBk.Worksheets.Count;
      WHILE (i <= EndOfLoop) AND (NOT Found) DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(i);

        IF XlWrkSht.Name = StatReportRequisitesGroup."Excel Sheet Name" THEN BEGIN
          Found := TRUE;
          XlWrkSht.Activate;
        END;

        i := i + 1;
      END;

      XlApp.Visible(TRUE);
      XlApp.UserControl(TRUE);
      XlWrkBk.Activate;
    END;

    PROCEDURE ApplySelection@1210007();
    VAR
      SelectedAddress@1210000 : Text[30];
      FirstColumnName@1210002 : Code[10];
      LastColumnName@1210003 : Code[10];
      FirstRowName@1210004 : Code[10];
      LastRowName@1210005 : Code[10];
      FirstRowNo@1210001 : Integer;
      LastRowNo@1210006 : Integer;
    BEGIN
      StatutoryReport.CheckServiceTier;
      IF NOT ISNULL(XlApp) THEN BEGIN
        XlRange := XlApp.Selection;
        XlWrkSht := XlApp.ActiveSheet;

        SelectedAddress := FORMAT(XlRange.Address);

        ExcelMgt.ParseSelectionAddress(SelectedAddress,FirstColumnName,LastColumnName,FirstRowName,LastRowName);

        EVALUATE(FirstRowNo,FirstRowName);
        EVALUATE(LastRowNo,LastRowName);

        CASE GetSelectionType(FirstColumnName,LastColumnName,FirstRowName,LastRowName) OF
          0:
            BEGIN
              // single sell
              "Excel Mapping Type" := "Excel Mapping Type"::Cell;
              "Excel Cell Name" := FirstColumnName + FirstRowName;
              "Excel Second Cell Name" := '';
              MODIFY;
            END;
          1:
            // single row
            ParseRow(FirstColumnName,LastColumnName,FirstRowName,LastRowName);
          2:
            // single column
            ParseColumn(FirstColumnName,LastColumnName,FirstRowName,LastRowName);
        END;
      END;
    END;

    PROCEDURE ParseRow@1210014(FirstColumnName@1210001 : Code[10];LastColumnName@1210002 : Code[10];FirstRowName@1210017 : Code[10];LastRowName@1210016 : Code[10]);
    VAR
      CurrColumnName@1210013 : Code[10];
      FirstColumnNo@1210004 : Integer;
      LastColumnNo@1210005 : Integer;
      CellCounter@1210011 : Integer;
      i@1210006 : Integer;
      MergedCells@1210014 : Boolean;
      Address@1210015 : Text[30];
    BEGIN
      FirstColumnNo := ExcelMgt.ColNameToInt(FirstColumnName);
      LastColumnNo := ExcelMgt.ColNameToInt(LastColumnName);

      // several cells
      "Excel Mapping Type" := "Excel Mapping Type"::"Several Cells";

      FOR i := FirstColumnNo TO LastColumnNo DO BEGIN
        CurrColumnName := ExcelMgt.ColumnNo2Name(i);
        CellCounter := CellCounter + 1;

        CASE CellCounter OF
          1:
            "Excel Cell Name" := CurrColumnName + FirstRowName;
          2:
            "Excel Second Cell Name" := CurrColumnName + FirstRowName;
        END;

        MergedCells := XlWrkSht.Range(CurrColumnName + FirstRowName).MergeCells;
        IF MergedCells THEN BEGIN
          Address := XlWrkSht.Range(CurrColumnName + FirstRowName).MergeArea.Address;
          ExcelMgt.ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
          i := ExcelMgt.ColNameToInt(LastColumnName);
        END;
      END;

      "Cells Quantity" := CellCounter;
      MODIFY;
    END;

    PROCEDURE ParseColumn@1210018(FirstColumnName@1210001 : Code[10];LastColumnName@1210002 : Code[10];FirstRowName@1210017 : Code[10];LastRowName@1210016 : Code[10]);
    VAR
      CurrRowName@1210013 : Code[10];
      FirstRowNo@1210004 : Integer;
      LastRowNo@1210005 : Integer;
      CellCounter@1210011 : Integer;
      i@1210006 : Integer;
      MergedCells@1210014 : Boolean;
      Address@1210015 : Text[30];
    BEGIN
      FirstRowNo := ExcelMgt.CellName2RowNo(FirstRowName);
      LastRowNo := ExcelMgt.CellName2RowNo(LastRowName);

      // several cells
      "Excel Mapping Type" := "Excel Mapping Type"::"Several Cells";

      FOR i := FirstRowNo TO LastRowNo DO BEGIN
        CurrRowName := FORMAT(i);
        CellCounter := CellCounter + 1;

        CASE CellCounter OF
          1:
            "Excel Cell Name" := FirstColumnName + CurrRowName;
          2:
            "Excel Second Cell Name" := FirstColumnName + CurrRowName;
        END;

        MergedCells := XlWrkSht.Range(FirstColumnName + CurrRowName).MergeCells;
        IF MergedCells THEN BEGIN
          Address := XlWrkSht.Range(FirstColumnName + CurrRowName).MergeArea.Address;
          ExcelMgt.ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
          i := ExcelMgt.CellName2RowNo(LastRowName);
        END;
      END;

      "Cells Quantity" := CellCounter;
      MODIFY;
    END;

    PROCEDURE CheckBorders@1210017(CellName@1210000 : Code[10]) : Boolean;
    VAR
      LineStyleRight@1210004 : Integer;
      LineStyleLeft@1210003 : Integer;
      LineStyleTop@1210002 : Integer;
      LineStyleBottom@1210001 : Integer;
    BEGIN
      XlRange := XlWrkSht.Range(CellName);

      LineStyleLeft := XlRange.Borders.Item(7).LineStyle;
      LineStyleTop := XlRange.Borders.Item(8).LineStyle;
      LineStyleBottom := XlRange.Borders.Item(9).LineStyle;
      LineStyleRight := XlRange.Borders.Item(10).LineStyle;

      EXIT(
        (LineStyleRight <> -4142) AND
        (LineStyleLeft <> -4142) AND
        (LineStyleTop <> -4142) AND
        (LineStyleBottom <> -4142));
    END;

    PROCEDURE GetSelectionType@1210022(FirstColumnName@1210003 : Code[10];LastColumnName@1210000 : Code[10];FirstRowName@1210001 : Code[10];LastRowName@1210009 : Code[10]) : Integer;
    VAR
      Address@1210002 : Text[30];
      MergedCells@1210004 : Boolean;
      CellFirstColumnName@1210008 : Code[10];
      CellLastColumnName@1210007 : Code[10];
      CellFirstRowName@1210006 : Code[10];
      CellLastRowName@1210005 : Code[10];
    BEGIN
      MergedCells := XlWrkSht.Range(FirstColumnName + FirstRowName).MergeCells;
      IF MergedCells THEN BEGIN
        Address := XlWrkSht.Range(FirstColumnName + FirstRowName).MergeArea.Address;
        ExcelMgt.ParseSelectionAddress(Address,CellFirstColumnName,CellLastColumnName,CellFirstRowName,CellLastRowName);

        IF (LastRowName = CellLastRowName) AND (LastColumnName = CellLastColumnName) THEN
          EXIT(0);

        IF (LastRowName = CellLastRowName) AND (LastColumnName <> CellLastColumnName) THEN
          EXIT(1);

        IF (LastRowName <> CellLastRowName) AND (LastColumnName = CellLastColumnName) THEN
          EXIT(2);
      END ELSE
        EXIT(0);
    END;

    LOCAL PROCEDURE NameOnFormat@19039177();
    BEGIN
      IF ("Excel Cell Name" = '') AND ("Excel Mapping Type" <> "Excel Mapping Type"::Option) THEN;
    END;

    BEGIN
    END.
  }
}

