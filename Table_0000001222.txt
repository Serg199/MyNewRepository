OBJECT Table 1222 Data Exch. Def
{
  OBJECT-PROPERTIES
  {
    Date=24.11.16;
    Time=12:00:00;
    Version List=NAVW110.00.00.14199,NAVRU10.00.00.14199;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF Name = '' THEN
                 Name := Code;

               CheckPositivePayExportFileType;
             END;

    OnModify=BEGIN
               CheckPositivePayExportFileType;

               IF "Columns as Rows" THEN
                 TESTFIELD("Document Start Tag");
             END;

    OnDelete=VAR
               DataExchLineDef@1000 : Record 1227;
             BEGIN
               DataExchLineDef.SETRANGE("Data Exch. Def Code",Code);
               DataExchLineDef.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Data Exch. Def;
               RUS=Определение обмена данными];
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              RUS=Код];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              RUS=Название] }
    { 3   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              RUS=Тип];
                                                   OptionCaptionML=[ENU=Bank Statement Import,Payment Export,Payroll Import,Generic Import,Positive Pay Export;
                                                                    RUS=Импорт выписки с банковского счета,Экспорт платежей,Импорт зарплаты,Универсальный импорт,Экспорт Positive Pay];
                                                   OptionString=Bank Statement Import,Payment Export,Payroll Import,Generic Import,Positive Pay Export }
    { 4   ;   ;Reading/Writing XMLport;Integer    ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(XMLport));
                                                   CaptionML=[ENU=Reading/Writing XMLport;
                                                              RUS=Чтение/запись XMLport] }
    { 5   ;   ;Header Lines        ;Integer       ;CaptionML=[ENU=Header Lines;
                                                              RUS=Строки заголовка] }
    { 8   ;   ;Header Tag          ;Text250       ;CaptionML=[ENU=Header Tag;
                                                              RUS=Тег заголовка] }
    { 9   ;   ;Footer Tag          ;Text250       ;CaptionML=[ENU=Footer Tag;
                                                              RUS=Тег нижнего колонтитула] }
    { 10  ;   ;Column Separator    ;Option        ;InitValue=Comma;
                                                   CaptionML=[ENU=Column Separator;
                                                              RUS=Разделитель столбцов];
                                                   OptionCaptionML=[ENU=,Tab,Semicolon,Comma,Space,Equal;
                                                                    RUS=,Табуляция,Точка с запятой,Запятая,Пробел,Равно];
                                                   OptionString=,Tab,Semicolon,Comma,Space,Equal }
    { 11  ;   ;File Encoding       ;Option        ;InitValue=WINDOWS;
                                                   CaptionML=[ENU=File Encoding;
                                                              RUS=Кодировка файла];
                                                   OptionCaptionML=[ENU=MS-DOS,UTF-8,UTF-16,WINDOWS;
                                                                    RUS=MS-DOS,UTF-8,UTF-16,WINDOWS];
                                                   OptionString=MS-DOS,UTF-8,UTF-16,WINDOWS }
    { 13  ;   ;File Type           ;Option        ;CaptionML=[ENU=File Type;
                                                              RUS=Тип файла];
                                                   OptionCaptionML=[ENU=Xml,Variable Text,Fixed Text,Json;
                                                                    RUS=XML,Текст переменной длины,Фиксированный текст,Json];
                                                   OptionString=Xml,Variable Text,Fixed Text,Json }
    { 14  ;   ;Ext. Data Handling Codeunit;Integer;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Ext. Data Handling Codeunit;
                                                              RUS=Codeunit обработки внешних данных] }
    { 15  ;   ;Reading/Writing Codeunit;Integer   ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Reading/Writing Codeunit;
                                                              RUS=Codeunit чтения/записи] }
    { 16  ;   ;Validation Codeunit ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Validation Codeunit;
                                                              RUS=Codeunit проверки] }
    { 17  ;   ;Data Handling Codeunit;Integer     ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Data Handling Codeunit;
                                                              RUS=Codeunit обработки данных] }
    { 18  ;   ;User Feedback Codeunit;Integer     ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=User Feedback Codeunit;
                                                              RUS=Codeunit обратной связи с пользователем] }
    { 12400;  ;Columns as Rows     ;Boolean       ;CaptionML=[ENU=Columns as Rows;
                                                              RUS=Столбцы как строки] }
    { 12401;  ;Document Start Tag  ;Text250       ;CaptionML=[ENU=Document Start Tag;
                                                              RUS=Начальный тег документа] }
    { 12402;  ;Document End Tag    ;Text250       ;CaptionML=[ENU=Document End Tag;
                                                              RUS=Тег конца документа] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Type                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ColumnSeparatorMissingErr@1001 : TextConst 'ENU=Column separator is missing in the definition.;RUS=В определении отсутствует разделитель столбцов.';
      PositivePayFileTypeErr@1000 : TextConst 'ENU=The positive pay file that you are exporting must be of type Fixed Text or Variable Text.;RUS=Экспортируемый файл Positive Pay должен иметь тип "Фиксированный текст" или "Текст переменной длины".';

    PROCEDURE InsertRec@1(NewCode@1000 : Code[20];NewName@1001 : Text[100];NewType@1002 : Option;ProcessingXMLport@1003 : Integer;HeaderCount@1004 : Integer;HeaderTag@1005 : Text[250];FooterTag@1006 : Text[250]);
    BEGIN
      INIT;
      VALIDATE(Code,NewCode);
      VALIDATE(Name,NewName);
      VALIDATE(Type,NewType);
      VALIDATE("Reading/Writing XMLport",ProcessingXMLport);
      VALIDATE("Header Lines",HeaderCount);
      VALIDATE("Header Tag",HeaderTag);
      VALIDATE("Footer Tag",FooterTag);
      INSERT;
    END;

    PROCEDURE InsertRecForExport@4(NewCode@1000 : Code[20];NewName@1001 : Text[100];NewType@1002 : Option;ProcessingXMLport@1003 : Integer;FileType@1004 : Option);
    BEGIN
      INIT;
      VALIDATE(Code,NewCode);
      VALIDATE(Name,NewName);
      "File Type" := FileType;
      Type := NewType;
      VALIDATE("File Type",FileType);
      VALIDATE(Type,NewType);

      VALIDATE("Reading/Writing XMLport",ProcessingXMLport);
      INSERT;
    END;

    PROCEDURE ColumnSeparatorChar@3() : Text;
    VAR
      SeparatorChar@1000 : Text;
    BEGIN
      CASE "Column Separator" OF
        "Column Separator"::Tab:
          BEGIN
            SeparatorChar[1] := 9;
            EXIT(SeparatorChar);
          END;
        "Column Separator"::Semicolon:
          EXIT(';');
        "Column Separator"::Comma:
          EXIT(',');
        "Column Separator"::Space:
          EXIT(' ');
        "Column Separator"::Equal:
          EXIT('=');
        ELSE
          ERROR(ColumnSeparatorMissingErr)
      END
    END;

    PROCEDURE CheckEnableDisableIsNonXMLFileType@9() : Boolean;
    BEGIN
      EXIT(NOT ("File Type" IN ["File Type"::Xml,"File Type"::Json]))
    END;

    PROCEDURE CheckEnableDisableIsImportType@18() : Boolean;
    BEGIN
      IF Type IN [Type::"Payment Export",Type::"Positive Pay Export"] THEN
        EXIT(FALSE);
      EXIT(NOT ("File Type" IN ["File Type"::Xml,"File Type"::Json]))
    END;

    PROCEDURE CheckEnableDisableIsBankStatementImportType@15() : Boolean;
    BEGIN
      EXIT(Type = Type::"Bank Statement Import");
    END;

    PROCEDURE CheckEnableDisableDelimitedFileType@8() : Boolean;
    BEGIN
      EXIT("File Type" = "File Type"::"Variable Text");
    END;

    PROCEDURE PositivePayUpdateCodeunits@2() : Boolean;
    BEGIN
      IF Type = Type::"Positive Pay Export" THEN BEGIN
        "Validation Codeunit" := CODEUNIT::"Exp. Validation Pos. Pay";
        "Reading/Writing Codeunit" := CODEUNIT::"Exp. Writing Pos. Pay";
        "Reading/Writing XMLport" := XMLPORT::"Export Generic Fixed Width";
        "Ext. Data Handling Codeunit" := CODEUNIT::"Exp. External Data Pos. Pay";
        "User Feedback Codeunit" := CODEUNIT::"Exp. User Feedback Pos. Pay";
      END ELSE BEGIN
        "Validation Codeunit" := 0;
        "Reading/Writing Codeunit" := 0;
        "Reading/Writing XMLport" := 0;
        "Ext. Data Handling Codeunit" := 0;
        "User Feedback Codeunit" := 0;
      END;
      EXIT(Type = Type::"Positive Pay Export");
    END;

    PROCEDURE ProcessDataExchange@6(VAR DataExch@1000 : Record 1220);
    VAR
      DataExchLineDef@1003 : Record 1227;
      DataExchMapping@1002 : Record 1224;
    BEGIN
      IF "Data Handling Codeunit" <> 0 THEN
        CODEUNIT.RUN("Data Handling Codeunit",DataExch);

      DataExchLineDef.SETRANGE("Data Exch. Def Code",Code);
      DataExchLineDef.SETRANGE("Parent Code",'');
      DataExchLineDef.FINDSET;

      REPEAT
        DataExchMapping.SETRANGE("Data Exch. Def Code",DataExch."Data Exch. Def Code");
        DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
        DataExchMapping.FINDSET;

        REPEAT
          IF DataExchMapping."Pre-Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",DataExch);

          IF DataExchMapping."Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          IF DataExchMapping."Post-Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Post-Mapping Codeunit",DataExch);
        UNTIL DataExchMapping.NEXT = 0;
      UNTIL DataExchLineDef.NEXT = 0;
    END;

    LOCAL PROCEDURE IsFixedOrVariableText@20() : Boolean;
    BEGIN
      EXIT("File Type" IN ["File Type"::"Fixed Text","File Type"::"Variable Text"]);
    END;

    LOCAL PROCEDURE CheckPositivePayExportFileType@22();
    BEGIN
      IF Type <> Type::"Positive Pay Export" THEN
        EXIT;

      IF NOT IsFixedOrVariableText THEN
        ERROR(PositivePayFileTypeErr);
    END;

    BEGIN
    END.
  }
}

