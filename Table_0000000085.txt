OBJECT Table 85 Acc. Schedule Line
{
  OBJECT-PROPERTIES
  {
    Date=04.04.17;
    Time=12:06:47;
    Modified=Yes;
    Version List=NAVW110.00,NAVRU10.00,NOS-26;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF xRec."Line No." = 0 THEN
                 IF NOT AccSchedName.GET("Schedule Name") THEN BEGIN
                   AccSchedName.INIT;
                   AccSchedName.Name := "Schedule Name";
                   IF AccSchedName.Name = '' THEN
                     AccSchedName.Description := Text000;
                   AccSchedName.INSERT;
                 END;
             END;

    CaptionML=[ENU=Acc. Schedule Line;
               RUS=Строка финансового отчета];
  }
  FIELDS
  {
    { 1   ;   ;Schedule Name       ;Code10        ;TableRelation="Acc. Schedule Name";
                                                   CaptionML=[ENU=Schedule Name;
                                                              RUS=Код финансового отчета] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 3   ;   ;Row No.             ;Code20        ;CaptionML=[ENU=Row No.;
                                                              RUS=Номер ряда] }
    { 4   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 5   ;   ;Totaling            ;Text250       ;TableRelation=IF (Totaling Type=CONST(Posting Accounts)) "G/L Account"
                                                                 ELSE IF (Totaling Type=CONST(Total Accounts)) "G/L Account"
                                                                 ELSE IF (Totaling Type=CONST(Cash Flow Entry Accounts)) "Cash Flow Account"
                                                                 ELSE IF (Totaling Type=CONST(Cash Flow Total Accounts)) "Cash Flow Account"
                                                                 ELSE IF (Totaling Type=CONST(Cost Type)) "Cost Type"
                                                                 ELSE IF (Totaling Type=CONST(Cost Type Total)) "Cost Type"
                                                                 ELSE IF (Totaling Type=CONST(Custom)) "Acc. Schedule Extension";
                                                   OnValidate=VAR
                                                                Value@1210000 : Decimal;
                                                              BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      GLAcc.SETFILTER("No.",Totaling);
                                                                      GLAcc.CALCFIELDS(Balance);
                                                                    END;
                                                                  "Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent":
                                                                    BEGIN
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    END;
                                                                  "Totaling Type"::"Cost Type","Totaling Type"::"Cost Type Total":
                                                                    BEGIN
                                                                      CostType.SETFILTER("No.",Totaling);
                                                                      CostType.CALCFIELDS(Balance);
                                                                    END;
                                                                  "Totaling Type"::"Cash Flow Entry Accounts","Totaling Type"::"Cash Flow Total Accounts":
                                                                    BEGIN
                                                                      CFAccount.SETFILTER("No.",Totaling);
                                                                      CFAccount.CALCFIELDS(Amount);
                                                                    END;
                                                                  "Totaling Type"::Constant:
                                                                    IF Totaling <> '' THEN
                                                                      EVALUATE(Value,Totaling);
                                                                  "Totaling Type"::Custom:
                                                                    IF Totaling <> '' THEN
                                                                      AccScheduleExtension.GET(Totaling);
                                                                END;

                                                                IF NOT HasGLSetup THEN BEGIN
                                                                  GLSetup.GET;
                                                                  HasGLSetup := TRUE;
                                                                END;
                                                                IF GLSetup."Enable Russian Accounting" THEN BEGIN
                                                                  CLEAR(AccSchedManagement);
                                                                  IF "Totaling Type" <> "Totaling Type"::Custom THEN
                                                                    AccSchedManagement.ValidateFormula(Rec);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupTotaling;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Totaling;
                                                              RUS=Группировка] }
    { 6   ;   ;Totaling Type       ;Option        ;OnValidate=BEGIN
                                                                IF (xRec."Totaling Type" = "Totaling Type"::Formula) AND ("Totaling Type" <> "Totaling Type"::Formula) THEN
                                                                  Totaling := '';
                                                                IF "Totaling Type" <> "Totaling Type"::Custom THEN
                                                                  "Extension Source Table" := "Extension Source Table"::" ";
                                                                VALIDATE(Totaling);
                                                              END;

                                                   CaptionML=[ENU=Totaling Type;
                                                              RUS=Тип группировки];
                                                   OptionCaptionML=[ENU=Posting Accounts,Total Accounts,Formula,Constant,Custom,Set Base For Percent,Cost Type,Cost Type Total,Cash Flow Entry Accounts,Cash Flow Total Accounts;
                                                                    RUS=Учетные счета,Итоговые счета,Формула,Константа,Польз.,Заданная база для расчета процентов,Тип себестоимости,Итог типа себестоимости,Счета операций движения денежных средств,Счета итогов движения денежных средств];
                                                   OptionString=Posting Accounts,Total Accounts,Formula,Constant,Custom,Set Base For Percent,Cost Type,Cost Type Total,Cash Flow Entry Accounts,Cash Flow Total Accounts }
    { 7   ;   ;New Page            ;Boolean       ;CaptionML=[ENU=New Page;
                                                              RUS=Новая страница] }
    { 8   ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              RUS=Отступ] }
    { 11  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              RUS=Фильтр по дате] }
    { 12  ;   ;Dimension 1 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 1 Filter;
                                                              RUS=Фильтр измерения 1];
                                                   CaptionClass=GetCaptionClass(1) }
    { 13  ;   ;Dimension 2 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 2 Filter;
                                                              RUS=Фильтр измерения 2];
                                                   CaptionClass=GetCaptionClass(2) }
    { 14  ;   ;G/L Budget Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="G/L Budget Name";
                                                   CaptionML=[ENU=G/L Budget Filter;
                                                              RUS=Фильтр по бюджету ГК] }
    { 15  ;   ;Business Unit Filter;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Filter;
                                                              RUS=Фильтр по филиалу];
                                                   Description=NC MDM14 GM 10->20 }
    { 16  ;   ;Show                ;Option        ;CaptionML=[ENU=Show;
                                                              RUS=Показать];
                                                   OptionCaptionML=[ENU=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance;
                                                                    RUS=Да,Нет,Если есть ненулевой столбец,При положительном сальдо,При отрицательном сальдо];
                                                   OptionString=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance }
    { 17  ;   ;Dimension 3 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 3 Filter;
                                                              RUS=Фильтр измерения 3];
                                                   CaptionClass=GetCaptionClass(3) }
    { 18  ;   ;Dimension 4 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 4 Filter;
                                                              RUS=Фильтр измерения 4];
                                                   CaptionClass=GetCaptionClass(4) }
    { 19  ;   ;Dimension 1 Totaling;Text250       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 348=R;
                                                   CaptionML=[ENU=Dimension 1 Totaling;
                                                              RUS=Группировка измерения 1];
                                                   CaptionClass=GetCaptionClass(5) }
    { 20  ;   ;Dimension 2 Totaling;Text250       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 348=R;
                                                   CaptionML=[ENU=Dimension 2 Totaling;
                                                              RUS=Группировка измерения 2];
                                                   CaptionClass=GetCaptionClass(6) }
    { 21  ;   ;Dimension 3 Totaling;Text250       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 350=R;
                                                   CaptionML=[ENU=Dimension 3 Totaling;
                                                              RUS=Группировка измерения 3];
                                                   CaptionClass=GetCaptionClass(7) }
    { 22  ;   ;Dimension 4 Totaling;Text250       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 350=R;
                                                   CaptionML=[ENU=Dimension 4 Totaling;
                                                              RUS=Группировка измерения 4];
                                                   CaptionClass=GetCaptionClass(8) }
    { 23  ;   ;Bold                ;Boolean       ;CaptionML=[ENU=Bold;
                                                              RUS=Полужирный] }
    { 24  ;   ;Italic              ;Boolean       ;CaptionML=[ENU=Italic;
                                                              RUS=Курсив] }
    { 25  ;   ;Underline           ;Boolean       ;OnValidate=BEGIN
                                                                IF "Double Underline" AND Underline THEN BEGIN
                                                                  "Double Underline" := FALSE;
                                                                  MESSAGE(ForceUnderLineMsg,FIELDCAPTION("Double Underline"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Underline;
                                                              RUS=Подчеркивание] }
    { 26  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=[ENU=Show Opposite Sign;
                                                              RUS=Показать с против. знаком] }
    { 27  ;   ;Row Type            ;Option        ;CaptionML=[ENU=Row Type;
                                                              RUS=Тип строки];
                                                   OptionCaptionML=[ENU=Net Change,Balance at Date,Beginning Balance;
                                                                    RUS=Оборот,Сальдо на дату,Начальное сальдо];
                                                   OptionString=Net Change,Balance at Date,Beginning Balance }
    { 28  ;   ;Amount Type         ;Option        ;CaptionML=[ENU=Amount Type;
                                                              RUS=Тип суммы];
                                                   OptionCaptionML=[ENU=Net Amount,Debit Amount,Credit Amount;
                                                                    RUS=Оборот,Сумма по дебету,Сумма по кредиту];
                                                   OptionString=Net Amount,Debit Amount,Credit Amount }
    { 30  ;   ;Double Underline    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Double Underline" AND Underline THEN BEGIN
                                                                  Underline := FALSE;
                                                                  MESSAGE(ForceUnderLineMsg,FIELDCAPTION(Underline));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Double Underline;
                                                              RUS=Двойное подчеркивание] }
    { 840 ;   ;Cash Flow Forecast Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Cash Flow Forecast";
                                                   CaptionML=[ENU=Cash Flow Forecast Filter;
                                                              RUS=Фильтр по прогнозу движения денежных средств] }
    { 1100;   ;Cost Center Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Center";
                                                   CaptionML=[ENU=Cost Center Filter;
                                                              RUS=Фильтр по центру затрат] }
    { 1101;   ;Cost Object Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Object";
                                                   CaptionML=[ENU=Cost Object Filter;
                                                              RUS=Фильтр по объекту затрат] }
    { 1102;   ;Cost Center Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Cost Center Totaling;
                                                              RUS=Группировка центров затрат] }
    { 1103;   ;Cost Object Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Cost Object Totaling;
                                                              RUS=Группировка объектов затрат] }
    { 1104;   ;Cost Budget Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Budget Name";
                                                   CaptionML=[ENU=Cost Budget Filter;
                                                              RUS=Фильтр по бюджету затрат] }
    { 12404;  ;Extension Source Table;Option      ;OnValidate=BEGIN
                                                                IF "Extension Source Table" <> xRec."Extension Source Table" THEN BEGIN
                                                                  IF "Extension Source Table" <> "Extension Source Table"::" " THEN
                                                                    TESTFIELD("Totaling Type","Totaling Type"::Custom);
                                                                  VALIDATE(Totaling,'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Extension Source Table;
                                                              RUS=Исходная таблица расширения];
                                                   OptionCaptionML=[ENU=" ,VAT Entry,Value Entry,Customer Entry,Vendor Entry";
                                                                    RUS=" ,Операция НДС,Операция стоимости,Операция клиента,Операция поставщика"];
                                                   OptionString=[ ,VAT Entry,Value Entry,Customer Entry,Vendor Entry] }
    { 12405;  ;Corr. Totaling      ;Code250       ;TableRelation="G/L Account";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Corr. Totaling;
                                                              RUS=Группировка корр.] }
    { 12406;  ;Dimension 1 Corr. Totaling;Text80  ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 1 Corr. Totaling;
                                                              RUS=Группировка корр. - измерение 1];
                                                   Description=NCS-1631, CaptionClass;
                                                   CaptionClass=GetCaptionClass(12405) }
    { 12407;  ;Dimension 2 Corr. Totaling;Text80  ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 2 Corr. Totaling;
                                                              RUS=Группировка корр. - измерение 2];
                                                   Description=NCS-1631, CaptionClass;
                                                   CaptionClass=GetCaptionClass(12406) }
    { 12408;  ;Corr. Dimension 1 Filter;Code20    ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Corr. Dimension 1 Filter;
                                                              RUS=Корр. - фильтр измерения 1];
                                                   Description=NCS-1631, CaptionClass;
                                                   CaptionClass=GetCaptionClass(12401) }
    { 12409;  ;Corr. Dimension 2 Filter;Code20    ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Corr. Dimension 2 Filter;
                                                              RUS=Корр. - фильтр измерения 2];
                                                   Description=NCS-1631, CaptionClass;
                                                   CaptionClass=GetCaptionClass(12402) }
    { 50010;  ;Dimension 3 Corr. Totaling;Text80  ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 3 Corr. Totaling;
                                                              RUS=Измерение 3 Корр. Группировка];
                                                   Description=NCS-1631;
                                                   CaptionClass=GetCaptionClass(12407) }
    { 50020;  ;Opposite Value      ;Boolean       ;CaptionML=[ENU=Opposite Value;
                                                              RUS=Сменить Знак];
                                                   Description=NCS-1631 }
    { 50030;  ;Corr. Dimension 3 Filter;Code20    ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Corr. Dimension 3 Filter;
                                                              RUS=Корр. Измерение 3 Фильтр];
                                                   Description=NCS-1631;
                                                   CaptionClass=GetCaptionClass(12403) }
    { 50050;  ;Column Ledger Entry Type;Option    ;CaptionML=[ENU=Ledger Entry Type;
                                                              RUS=Столбец Тип Учтенной Операции];
                                                   OptionCaptionML=[ENU=" ,Entries,Budget Entries,,,,,,Corr. Entries";
                                                                    RUS=" ,Операции,Операции бюджетирования,,,,,,Операции корресп."];
                                                   OptionString=[ ,Entries,Budget Entries,,,,,,Corr. Entries] }
    { 51001;  ;Business Unit Totaling;Text80      ;TableRelation="Business Unit";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Business Unit Totaling;
                                                              RUS=Филиал Группировка];
                                                   Description=NC PIF001 }
    { 52020;  ;Allocation Filter   ;Option        ;CaptionML=[ENU=Allocation Filter;
                                                              RUS=Распределение Фильтр];
                                                   OptionCaptionML=[ENU=All,OnlyGL,OnlyAlocGL;
                                                                    RUS=Все,Только ГК,Только Распределения];
                                                   OptionString=All,OnlyGL,OnlyAlocGL;
                                                   Description=NC PIF036 }
  }
  KEYS
  {
    {    ;Schedule Name,Line No.                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ForceUnderLineMsg@1022 : TextConst '@@@="%1= Field underline ";ENU=%1 will be set to false.;RUS=Параметр %1 будет установлен в значение false.';
      Text000@1000 : TextConst 'ENU=Default Schedule;RUS=Отчет по умолчанию';
      Text001@1001 : TextConst 'ENU=The parenthesis at position %1 is misplaced.;RUS=Пропущена скобка в позиции %1.';
      Text002@1002 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position %1.;RUS=Нельзя использовать два оператора подряд. Ошибка в позиции %1.';
      Text003@1003 : TextConst 'ENU=There is an operand missing after position %1.;RUS=Пропущен операнд после позиции %1.';
      Text004@1004 : TextConst 'ENU=There are more left parentheses than right parentheses.;RUS=Левых скобок больше, чем правых.';
      Text005@1005 : TextConst 'ENU=There are more right parentheses than left parentheses.;RUS=Правых скобок больше, чем левых.';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 1 Filter;RUS=1,6,,Фильтр измерения 1';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 2 Filter;RUS=1,6,,Фильтр измерения 2';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 3 Filter;RUS=1,6,,Фильтр измерения 3';
      Text009@1009 : TextConst 'ENU=1,6,,Dimension 4 Filter;RUS=1,6,,Фильтр измерения 4';
      Text010@1010 : TextConst 'ENU=,, Totaling;RUS=,, Группировка';
      Text011@1011 : TextConst 'ENU=1,5,,Dimension 1 Totaling;RUS=1,5,,Группировка по измерению 1';
      Text012@1012 : TextConst 'ENU=1,5,,Dimension 2 Totaling;RUS=1,5,,Группировка по измерению 2';
      Text013@1013 : TextConst 'ENU=1,5,,Dimension 3 Totaling;RUS=1,5,,Группировка по измерению 3';
      Text014@1014 : TextConst 'ENU=1,5,,Dimension 4 Totaling;RUS=1,5,,Группировка по измерению 4';
      AccSchedName@1015 : Record 84;
      GLAcc@1016 : Record 15;
      CFAccount@1841 : Record 841;
      AnalysisView@1017 : Record 363;
      GLSetup@1018 : Record 98;
      CostType@1021 : Record 1103;
      AccScheduleExtension@1210003 : Record 26584;
      GLCorrAnalysisView@1101495000 : Record 14940;
      HasGLSetup@1019 : Boolean;
      Text015@1020 : TextConst 'ENU=The %1 refers to %2 %3, which does not exist. The field %4 on table %5 has now been deleted.;RUS=%1 ссылается на несуществующий %2 %3. Поле %4 в таблице %5 было удалено.';
      DimMgt@1102601001 : Codeunit 408;
      DimValue@1102601000 : Record 349;
      AccSchedManagement@1470000 : Codeunit 8;
      Text12400@1210000 : TextConst 'ENU=,, Corr. Totaling;RUS=,, Группировка корр.';
      Text12401@1210002 : TextConst 'ENU=1,5,,Dimension 1 Corr. Totaling;RUS=1,5,,Группировка корр. - измерение 1';
      Text12402@1210001 : TextConst 'ENU=1,5,,Dimension 2 Corr. Totaling;RUS=1,5,,Группировка корр. - измерение 2';
      "NCT>"@1101495022 : TextConst;
      Text52001@1101495021 : TextConst 'ENU=Disaggreement of field %1 with Parent Account Schedule.;RUS=Несогласованность поля %1 с родительским отчетом.';
      Text52002@1101495020 : TextConst 'ENU=Disaggreement of field %1 with SubAccount Schedule %2 in Row %3.;RUS=Несогласованность поля %1 с дочерним отчетом %2, строка %3.';
      Text50001@1101495016 : TextConst 'ENU=1,6,,Debit Dimension 1 Filter;RUS=1,6,,Дебет Измерение 1 Фильтр';
      Text50002@1101495015 : TextConst 'ENU=1,6,,Debit Dimension 2 Filter;RUS=1,6,,Дебет Измерение 2 Фильтр';
      Text50003@1101495014 : TextConst 'ENU=1,6,,Debit Dimension 3 Filter;RUS=1,6,,Дебет Измерение 3 Фильтр';
      Text50004@1101495013 : TextConst 'ENU=1,6,,Debit Dimension 4 Filter;RUS=1,6,,Дебет Измерение 4 Фильтр';
      Text50005@1101495012 : TextConst 'ENU=1,5,,Debit Dimension 1 Totaling;RUS=1,5,,Дебет Измерение 1 Группировка';
      Text50006@1101495011 : TextConst 'ENU=1,5,,Debit Dimension 2 Totaling;RUS=1,5,,Дебет Измерение 2 Группировка';
      Text50007@1101495010 : TextConst 'ENU=1,5,,Debit Dimension 3 Totaling;RUS=1,5,,Дебет Измерение 3 Группировка';
      Text50008@1101495009 : TextConst 'ENU=1,5,,Debit Dimension 4 Totaling;RUS=1,5,,Дебет Измерение 4 Группировка';
      Text50011@1101495008 : TextConst 'ENU=1,6,,Credit Dimension 1 Filter;RUS=1,6,,Кредит Измерение 1 Корр. Фильтр';
      Text50012@1101495007 : TextConst 'ENU=1,6,,Credit Dimension 2 Filter;RUS=1,6,,Кредит Измерение 2 Корр. Фильтр';
      Text50013@1101495006 : TextConst 'ENU=1,6,,Credit Dimension 3 Filter;RUS=1,6,,Кредит Измерение 3 Корр. Фильтр';
      Text50014@1101495005 : TextConst 'ENU=1,6,,Credit Dimension 4 Filter;RUS=1,6,,Кредит Измерение 4  Корр. Фильтр';
      Text50015@1101495004 : TextConst 'ENU=1,5,,Credit Dimension 1 Totaling;RUS=1,5,,Кредит Измерение 1 Корр. Группировка';
      Text50016@1101495003 : TextConst 'ENU=1,5,,Credit Dimension 2 Totaling;RUS=1,5,,Кредит Измерение 2 Корр. Группировка';
      Text50017@1101495002 : TextConst 'ENU=1,5,,Credit Dimension 3 Totaling;RUS=1,5,,Кредит Измерение 3 Корр. Группировка';
      Text50018@1101495001 : TextConst 'ENU=1,5,,Credit Dimension 4 Totaling;RUS=1,5,,Кредит Измерение 4 Корр. Группировка';

    PROCEDURE LookUpDimFilter@57(DimNo@1000 : Integer;VAR Text@1001 : Text) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      GetAccSchedSetup;

      //NC NCS-1631 > DP
      IF AccSchedName."Analysis View Name" <> '' THEN
      //NC NCS-1631 < DP

      CASE DimNo OF
        1:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 1 Code");
        2:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 2 Code");
        3:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 3 Code");
        4:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 4 Code");
        12401:
          DimVal.SETRANGE("Dimension Code",GLSetup."Global Dimension 1 Code");
        12402:
          DimVal.SETRANGE("Dimension Code",GLSetup."Global Dimension 2 Code");
      END;

      //NC NCS-1631 > DP
      IF AccSchedName."G/L Corr. Analysis View Name" <> '' THEN BEGIN
        GLCorrAnalysisView.GET(AccSchedName."G/L Corr. Analysis View Name");
        CASE DimNo OF
          1:
             DimVal.SETRANGE("Dimension Code",GLCorrAnalysisView."Debit Dimension 1 Code");
          2:
            DimVal.SETRANGE("Dimension Code",GLCorrAnalysisView."Debit Dimension 2 Code");
          3:
            DimVal.SETRANGE("Dimension Code",GLCorrAnalysisView."Debit Dimension 3 Code");
          12401:
            DimVal.SETRANGE("Dimension Code",GLCorrAnalysisView."Credit Dimension 1 Code");
          12402:
            DimVal.SETRANGE("Dimension Code",GLCorrAnalysisView."Credit Dimension 2 Code");
          12407:
            DimVal.SETRANGE("Dimension Code",GLCorrAnalysisView."Credit Dimension 3 Code");
        END;
      END;
      //NC NCS-1631 < DP

      DimValList.LOOKUPMODE(TRUE);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    PROCEDURE CheckFormula@1(Formula@1000 : Code[250]);
    VAR
      i@1001 : Integer;
      ParenthesesLevel@1002 : Integer;
      HasOperator@1003 : Boolean;
    BEGIN
      ParenthesesLevel := 0;
      FOR i := 1 TO STRLEN(Formula) DO BEGIN
        IF Formula[i] = '(' THEN
          ParenthesesLevel := ParenthesesLevel + 1
        ELSE
          IF Formula[i] = ')' THEN
            ParenthesesLevel := ParenthesesLevel - 1;
        IF ParenthesesLevel < 0 THEN
          ERROR(Text001,i);
        IF Formula[i] IN ['+','-','*','/','^'] THEN BEGIN
          IF HasOperator THEN
            ERROR(Text002,i);

          HasOperator := TRUE;

          IF i = STRLEN(Formula) THEN
            ERROR(Text003,i);

          IF Formula[i + 1] = ')' THEN
            ERROR(Text003,i);
        END ELSE
          HasOperator := FALSE;
      END;
      IF ParenthesesLevel > 0 THEN
        ERROR(Text004);

      IF ParenthesesLevel < 0 THEN
        ERROR(Text005);
    END;

    LOCAL PROCEDURE GetCaptionClass@7(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      GetAccSchedSetup;

      //NC NCS-1631 > DP
      IF AccSchedName."Analysis View Name" <> '' THEN
      //NC NCS-1631 < DP

      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code");

            EXIT(Text006);
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code");

            EXIT(Text007);
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code");

            EXIT(Text008);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code");

            EXIT(Text009);
          END;
        5:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 1 Code" + Text010);

            EXIT(Text011);
          END;
        6:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 2 Code" + Text010);

            EXIT(Text012);
          END;
        7:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 3 Code" + Text010);

            EXIT(Text013);
          END;
        8:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 4 Code" + Text010);

            EXIT(Text014);
          END;
        12401:
          BEGIN
            IF GLSetup."Global Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + GLSetup."Global Dimension 1 Code" + Text12400)
            ELSE
              EXIT(Text12401);
          END;
        12402:
          BEGIN
            IF GLSetup."Global Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + GLSetup."Global Dimension 2 Code" + Text12400)
            ELSE
              EXIT(Text12402);
          END;
      END;

      //NC NCS-1631 > DP
      IF AccSchedName."G/L Corr. Analysis View Name"<>'' THEN
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + GLCorrAnalysisView."Debit Dimension 1 Code")
            ELSE
              EXIT(Text50001);
          END;
        2:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + GLCorrAnalysisView."Debit Dimension 2 Code")
            ELSE
              EXIT(Text50002);
          END;
        3:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + GLCorrAnalysisView."Debit Dimension 3 Code")
            ELSE
              EXIT(Text50003);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code")
            ELSE
              EXIT(Text009);
          END;

        5:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 1 Code" + Text010)
            ELSE
              EXIT(Text50005);
          END;
        6:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 2 Code" + Text010)
            ELSE
              EXIT(Text50006);
          END;
        7:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 3 Code" + Text010)
            ELSE
              EXIT(Text50007);
          END;
        8:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 4 Code" + Text010)
            ELSE
              EXIT(Text014);
          END;

        12401:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + GLCorrAnalysisView."Credit Dimension 1 Code")
            ELSE
              EXIT(Text50011);
          END;
        12402:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + GLCorrAnalysisView."Credit Dimension 2 Code")
            ELSE
              EXIT(Text50012);
          END;
        12403:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + GLCorrAnalysisView."Credit Dimension 3 Code")
            ELSE
              EXIT(Text50013);
          END;
        12405:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 1 Code" + Text12400)
            ELSE
              EXIT(Text50015);
          END;
        12406:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 2 Code" + Text12400)
            ELSE
              EXIT(Text50016);
          END;
        12407:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 3 Code" + Text12400)
            ELSE
              EXIT(Text50017);
          END;

      END;
      //NC NCS-1631 < DP
    END;

    LOCAL PROCEDURE GetAccSchedSetup@2();
    BEGIN
      IF "Schedule Name" <> AccSchedName.Name THEN
        AccSchedName.GET("Schedule Name");
      IF AccSchedName."Analysis View Name" <> '' THEN
        IF AccSchedName."Analysis View Name" <> AnalysisView.Code THEN
          IF NOT AnalysisView.GET(AccSchedName."Analysis View Name") THEN BEGIN
            MESSAGE(
              Text015,
              AccSchedName.TABLECAPTION,AnalysisView.TABLECAPTION,AccSchedName."Analysis View Name",
              AccSchedName.FIELDCAPTION("Analysis View Name"),AccSchedName.TABLECAPTION);
            AccSchedName."Analysis View Name" := '';
            AccSchedName.MODIFY;
          END;

      //NC NCS-1631 > DP
      IF AccSchedName."G/L Corr. Analysis View Name" <> '' THEN BEGIN
        IF AccSchedName."G/L Corr. Analysis View Name" <> GLCorrAnalysisView.Code THEN
          IF NOT GLCorrAnalysisView.GET(AccSchedName."G/L Corr. Analysis View Name") THEN BEGIN
            MESSAGE(
              Text015,
              AccSchedName.TABLECAPTION,GLCorrAnalysisView.TABLECAPTION,AccSchedName."G/L Corr. Analysis View Name",
              AccSchedName.FIELDCAPTION("G/L Corr. Analysis View Name"),AccSchedName.TABLECAPTION);
            AccSchedName."G/L Corr. Analysis View Name" := '';
            AccSchedName.MODIFY;
          END;
      END;
      {
      IF AccSchedName."Analysis View Name" = '' THEN BEGIN
      }
      IF (AccSchedName."Analysis View Name" = '') AND (AccSchedName."G/L Corr. Analysis View Name" = '') THEN BEGIN
      //NC NCS-1631 < DP
        IF NOT HasGLSetup THEN BEGIN
          GLSetup.GET;
          HasGLSetup := TRUE;
        END;
        CLEAR(AnalysisView);
        AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
        AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
      END;
    END;

    LOCAL PROCEDURE LookupTotaling@3();
    VAR
      GLAccList@1000 : Page 18;
      CostTypeList@1001 : Page 1124;
      CFAccList@1002 : Page 855;
    BEGIN
      CASE "Totaling Type" OF
        "Totaling Type"::"Posting Accounts",
        "Totaling Type"::"Total Accounts":
          BEGIN
            GLAccList.LOOKUPMODE(TRUE);
            IF GLAccList.RUNMODAL = ACTION::LookupOK THEN
              VALIDATE(Totaling,GLAccList.GetSelectionFilter);
          END;
        "Totaling Type"::"Cost Type",
        "Totaling Type"::"Cost Type Total":
          BEGIN
            CostTypeList.LOOKUPMODE(TRUE);
            IF CostTypeList.RUNMODAL = ACTION::LookupOK THEN
              VALIDATE(Totaling,CostTypeList.GetSelectionFilter);
          END;
        "Totaling Type"::"Cash Flow Entry Accounts",
        "Totaling Type"::"Cash Flow Total Accounts":
          BEGIN
            CFAccList.LOOKUPMODE(TRUE);
            IF CFAccList.RUNMODAL = ACTION::LookupOK THEN
              VALIDATE(Totaling,CFAccList.GetSelectionFilter);
          END;
      END;
    END;

    PROCEDURE LookupGLBudgetFilter@4(VAR Text@1000 : Text) : Boolean;
    VAR
      GLBudgetNames@1001 : Page 121;
    BEGIN
      GLBudgetNames.LOOKUPMODE(TRUE);
      IF GLBudgetNames.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := GLBudgetNames.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    PROCEDURE LookupCostBudgetFilter@5(VAR Text@1000 : Text) : Boolean;
    VAR
      CostBudgetNames@1001 : Page 1116;
    BEGIN
      CostBudgetNames.LOOKUPMODE(TRUE);
      IF CostBudgetNames.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := CostBudgetNames.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    PROCEDURE Indent@6();
    BEGIN
      IF Indentation < 10 THEN
        Indentation += 1;
    END;

    PROCEDURE Outdent@10();
    BEGIN
      IF Indentation > 0 THEN
        Indentation -= 1;
    END;

    BEGIN
    {
      NC PIF001 DP Добавлено поле "Business Unit Totaling"
      NC PIF001 MP Новое поля и ключ Par. Acc. Schedule Code,Par. Acc. Schedule Line No.
      NC MDM14 GM "Business Unit Filter" 10->20
      NC NCS-1631 DP Добавлены поля "Dimension 3 Corr. Totaling", "Corr. Dimension 3 Filter"
                     Изменены функции LookUpDimFilter, GetCaptionClass, GetAccSchedSetup
                     Изменен Caption Class полей "Dimension 1 Corr. Totaling", "Dimension 2 Corr. Totaling", "Corr. Dimension 1 Filter",
      NC NCS-1631.2 DP Добавлено поле "Column Ledger Entry Type"
    }
    END.
  }
}

