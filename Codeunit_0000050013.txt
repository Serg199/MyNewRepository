OBJECT Codeunit 50013 Load Element Reference
{
  OBJECT-PROPERTIES
  {
    Date=14.07.17;
    Time=12:15:02;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=50063;
    OnRun=VAR
            TextErr@1000000006 : Text[250];
            iFldDelay@1000000005 : Integer;
            FldRefDelay@1000000004 : FieldRef;
            varDelay@1000000003 : Boolean;
            iFldDelayTech@1000000002 : Integer;
            FldRefDelayTech@1000000001 : FieldRef;
            varDelayTech@1000000000 : Boolean;
          BEGIN
            RecID := "Record ID";
            IF RecID.TABLENO = 0 THEN
              ERROR(Text001);

            RecRefBuf.OPEN(RecID.TABLENO);
            RecRefBuf.GET("Record ID");

            GetReference("Company No.","Object No.",RefObjectNo);
            IF RefObjectNo[1] = 0 THEN
              ERROR(Text004,RecRefBuf.CAPTION);

            iFldStatus := TableCheckBlocked.GetFieldNo(RecRefBuf,'Status');
            IF iFldStatus = 0 THEN
              ERROR(Text003,RecRefBuf.CAPTION);
            FldRefStatus := RecRefBuf.FIELD(iFldStatus);

            iFldIdExtSystem := TableCheckBlocked.GetFieldNo(RecRefBuf,'Id External System');
            IF iFldIdExtSystem = 0 THEN
              ERROR(Text003,RecRefBuf.CAPTION);
            FldRefIdExtSystem := RecRefBuf.FIELD(iFldIdExtSystem);
            IF FORMAT(FldRefIdExtSystem.VALUE) = '' THEN
              TextErr += FldRefIdExtSystem.NAME + ',';
            //NC S1884 > PCH
            ExternalSystem.GET(FldRefIdExtSystem.VALUE);
            //NC S1884 < PCH

            iFldTimeCreation := TableCheckBlocked.GetFieldNo(RecRefBuf,'Time Creation');
            IF iFldTimeCreation = 0 THEN
              ERROR(Text003,RecRefBuf.CAPTION);
            FldRefTimeCreation := RecRefBuf.FIELD(iFldTimeCreation);
            IF FORMAT(FldRefTimeCreation.VALUE) = FORMAT(CREATEDATETIME(0D,0T)) THEN
              TextErr += FldRefTimeCreation.NAME + ',';

            IF TextErr <> '' THEN BEGIN
              ErrorJournal.AddError1("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                     '',0,
                                     'EDB02',STRSUBSTNO(TextEDB02,RecRefBuf.CAPTION,TextErr),COMPANYNAME,RecRefBuf,"Line No.");
              FldRefStatus.VALIDATE(BufferDeal.Status::"Processing Canceled");
              RecRefBuf.MODIFY(TRUE);
              EXIT;
            END;

            IF NOT ProcesType(RecRefBuf,Rec) THEN BEGIN

              iFldDelayTech := TableCheckBlocked.GetFieldNo(RecRefBuf,'Delay (Tech.)');
              IF iFldDelayTech = 0 THEN
                ERROR(Text003,RecRefBuf.CAPTION);
              FldRefDelayTech := RecRefBuf.FIELD(iFldDelayTech);
              varDelayTech := FldRefDelayTech.VALUE;

              IF varDelayTech THEN BEGIN  // ОТЛОЖЕНА
                iFldDelay := TableCheckBlocked.GetFieldNo(RecRefBuf,'Delay');
                IF iFldDelay = 0 THEN
                  ERROR(Text003,RecRefBuf.CAPTION);
                FldRefDelay := RecRefBuf.FIELD(iFldDelay);
                FldRefDelay.VALUE(TRUE);
                FldRefDelayTech.VALUE(FALSE);
                FldRefStatus.VALIDATE(BufferDeal.Status::New);
                RecRefBuf.MODIFY(TRUE);

              END ELSE BEGIN
                FldRefStatus.VALIDATE(BufferDeal.Status::"Processing Canceled");
                RecRefBuf.MODIFY(TRUE);
              END;
              EXIT;
            END ELSE BEGIN
              FldRefStatus.VALIDATE(BufferDeal.Status::"Processing Complete");
              RecRefBuf.MODIFY(TRUE);
            END;
          END;

  }
  CODE
  {
    VAR
      GLSetup@1000000008 : Record 98;
      MovingDataSetup@1000000033 : Record 50064;
      TableCheckBlocked@1000000034 : Codeunit 50010;
      ErrorJournal@1000000037 : Record 50023;
      RecRefBuf@1000000000 : RecordRef;
      RecID@1000000001 : RecordID;
      Text001@1000000002 : TextConst 'ENU=Wrong identifier to record;RUS=Неправильный идентификатор записи';
      FldRefStatus@1000000025 : FieldRef;
      FldRefTime@1000000026 : FieldRef;
      FldRefLastDate@1000000027 : FieldRef;
      iFldStatus@1000000030 : Integer;
      iFldTime@1000000029 : Integer;
      iFldLastDate@1000000028 : Integer;
      Text002@1000000031 : TextConst 'ENU=Non-directory %1;RUS=Не предусмотренный справочник %1';
      RefObjectNo@1000000032 : ARRAY [2] OF Integer;
      Text003@1000000036 : TextConst 'ENU=Incorrect structure buffer %1;RUS=Неправильная структура буфера %1';
      Text004@1000000035 : TextConst 'ENU=Buffer %1 is not given a handbook;RUS=Буферу %1 не задан соответствующий справочник';
      Text005@1101495007 : TextConst 'ENU=The value %1 must be defined %2;RUS=Величина %1 должна быть определена %2';
      Text006@1101495006 : TextConst 'ENU=The value of %1 could not be %2;RUS=Величина %1 не должна быть %2';
      Text007@1101495005 : TextConst 'ENU=The value %1 should be %2 %3;RUS=Величина %1 должна быть %2 %3';
      Text008@1000000009 : TextConst 'ENU=Rename;RUS=Переименование';
      TextEDB17@1101495008 : TextConst 'ENU=In the Buffer of Loading %1 submitted incomplete data. %2 Record not processed.;RUS=В Буфере Загрузки %1 переданы не полные данные. %2 Запись не обработана.';
      TextEDB18@1000000006 : TextConst 'ENU=Warning. In the Buffer of Loading %1 submitted incomplete data. %2;RUS=Предупреждение. В Буфере Загрузки %1 переданы не полные данные. %2';
      Text009@1101495009 : TextConst 'ENU=Can not find an element of the directory %1 with code %2.;RUS=Не найден элемент справочника %1 с кодом %2.';
      TextEDB15@1000000004 : TextConst 'ENU=In the Buffer of Loading %1 handed change %2, with the value %3 to %4.;RUS=В Буфере Загрузки %1 передано изменение %2, со значения %3 на %4.';
      TextEDB16@1000000005 : TextConst 'ENU=In the Buffer of Loading %1 dimension %2 with a code %3 is transferred. Such value of dimension is not present.;RUS=В Буфере Загрузки %1 передано измерение %2 с кодом %3. Такого значения измерения нет.';
      Text012@1101495011 : TextConst 'ENU=Came to the currency exchange rate %1 which is the account in the current database or non-existent currency code.;RUS=Пришел курс для валюты %1 которая является учетной в текущей БД или несуществующий код валюты.';
      TextEDB01@1000000007 : TextConst 'ENU=In the process of implementation %1 unclassified error occurred. %2 Processing stopped.;RUS=В процессе выполнения %1 возникла ошибка. %2 Обработка прекращена.';
      TextEDB02@1000000039 : TextConst 'ENU=In the Buffer of Loading %1 submitted incomplete data. Please enter %2. Record not processed.;RUS=В Буфере Загрузки %1 переданы не полные данные. Не заполнено поле %2. Запись не обработана.';
      TextEDB03@1000000040 : TextConst 'ENU="In the Buffer of Loading operations handed treatment of type %1 for the operation but the Entry No.= %2. In NAV is an operation with the UID and Operation No. Record not processed.";RUS="В Буфере Загрузки операций передан тип обработки %1 для операции Операция Но.=%2. В NAV есть операция с таким UID и Внутренним Но. Проводки. Действие было пропущено."';
      TextEDB04@1000000041 : TextConst 'ENU="In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. Record not processed.";RUS="В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. Действие было пропущено. "';
      TextEDB05@1000000042 : TextConst 'ENU="In the Buffer of Loading operations Entry No.= %1 zero-sum transaction in foreign currency accounting system.";RUS="В Буфере Загрузки операций Операция Но.=%1 нулевая сумма операции в учетной валюте внешней системы."';
      TextEDB06@1000000043 : TextConst 'ENU="In the Buffer of Loading operations Entry No.= %1 zero-sum in the original currency.";RUS="В Буфере Загрузки операций Операция Но.=%1 нулевая сумма в оригинальной валюте."';
      TextEDB07@1000000044 : TextConst 'ENU="In the Buffer of Loading of operations Operation No. = %1 the Debit or the Credit fin. account is not set.";RUS="В Буфере Загрузки операций Операция Но.=%1 не задан Дебет или Кредит фин. счет."';
      TextEDB08@1000000045 : TextConst 'ENU="Warning. In the Buffer of Loading of operations the type of processing %1 for operation No. = %2. In NAV there is no operation with such UID and Operation No.";RUS="Предупреждение. В Буфере Загрузки операций передан тип обработки %1 для операции Операция Но.=%2. В NAV нет операции с таким UID и Внутренним Но. Проводки."';
      TextEDB09@1000000046 : TextConst 'ENU="Warning. In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is an element of the directory with this code.";RUS="Предупреждение. В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. В NAV есть элемент справочника с таким кодом."';
      TextEDB10@1000000047 : TextConst 'ENU="In the Buffer of Loading operations handed treatment of type %1 for the operation but the Entry No. = %2. In NAV no operation with the UID and Operation No.";RUS="В Буфере Загрузки операций передан тип обработки %1 для операции Операция Но.=%2. В NAV нет операции с таким UID и Внутренним Но. Проводки."';
      TextEDB11@1000000048 : TextConst 'ENU="Warning. In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is no element with such a code book.";RUS="Предупреждение. В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. В NAV нет элемента справочника с таким кодом."';
      TextEDB12@1000000049 : TextConst 'ENU="In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is an element of the directory with this code. Record not processed.";RUS="В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. В NAV есть элемент справочника с таким кодом. Действие было пропущено. "';
      TextEDB13@1000000050 : TextConst 'ENU="In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is no element with such a code book. Record not processed.";RUS="В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. В NAV нет элемента справочника с таким кодом. Действие было пропущено. "';
      BufferDeal@1000000003 : Record 50036;
      iFldIdExtSystem@1101495000 : Integer;
      FldRefIdExtSystem@1101495001 : FieldRef;
      iFldTimeCreation@1101495003 : Integer;
      FldRefTimeCreation@1101495002 : FieldRef;
      TextEDB20@1000000010 : TextConst 'ENU=In load buffer directory %1 are transferred to rename, with the value of %2 %3 value. %4;RUS=В Буфере Загрузки справочника %1 передано передано переименование, со значения %2 на значение %3. %4';
      RenameRef@1000000011 : Codeunit 50029;
      ValueCancelRelation@1101495004 : Boolean;
      DealType@1101495010 : Record 50038;
      ExternalSystem@1000000012 : Record 50065;

    PROCEDURE GetReference@1000000000(CompanyNo@1000000002 : Text[30];BufObjectNo@1000000000 : Integer;VAR ObjectNo@1000000001 : ARRAY [2] OF Integer);
    VAR
      FASetup@1000000003 : Record 5603;
    BEGIN
      FASetup.CHANGECOMPANY(CompanyNo);
      FASetup.GET;
      ObjectNo[1] := 0;
      ObjectNo[2] := 0;

      CASE BufObjectNo OF
        DATABASE::"Buffer Customer" :
          ObjectNo[1] := DATABASE::Customer;
        //NC MTF01 > PCH
        DATABASE::"Buffer Vendor" :
          ObjectNo[1] := DATABASE::Vendor;
        //NC MTF01 < PCH
        DATABASE::"Buffer Customer Credit Rating" :
          ObjectNo[1] := DATABASE::"Customer Credit Rating";
        DATABASE::"Buffer Country/Region" :
          ObjectNo[1] := DATABASE::"Country/Region";
        DATABASE::"Buffer Industry Group" :
          ObjectNo[1] := DATABASE::"Industry Group";
        DATABASE::"Buffer Bank Account" :
          ObjectNo[1] := DATABASE::"Bank Account";
        DATABASE::"Buffer Financial Instrument" :
          ObjectNo[1] := DATABASE::"Financial Instrument";
        DATABASE::"Buffer Deal" :
          ObjectNo[1] := DATABASE::Deal;
        DATABASE::"Buffer Stock Exchange" :
          ObjectNo[1] := DATABASE::"Stock Exchange";
        DATABASE::"Buffer FA" :
          BEGIN
            ObjectNo[1] := DATABASE::"FA Catalog";
            IF FASetup."Automatic Loading FA" THEN
              ObjectNo[2] := DATABASE::"Fixed Asset";
          END;
        DATABASE::"Buffer Dimension Value" :
          ObjectNo[1] := DATABASE::"Dimension Value";
        DATABASE::"Buffer Currency Exchange Rate" :
          ObjectNo[1] := DATABASE::"Currency Exchange Rate";
        DATABASE::"Buffer FI Rates" :
          ObjectNo[1] := DATABASE::"FI Rates";
        DATABASE::"Buffer FI Value" :
          ObjectNo[1] := DATABASE::"FI Value";
      END;
    END;

    PROCEDURE GetReferenceList@1000000005(VAR TableNo@1000000001 : ARRAY [15] OF Integer);
    VAR
      FASetup@1000000003 : Record 5603;
    BEGIN
      TableNo[1] := DATABASE::"Buffer Dimension Value";
      TableNo[2] := DATABASE::"Buffer Country/Region";
      TableNo[3] := DATABASE::"Buffer Industry Group";
      TableNo[4] := DATABASE::"Buffer Stock Exchange";
      TableNo[5] := DATABASE::"Buffer Currency Exchange Rate";
      TableNo[6] := DATABASE::"Buffer Operation Closing";
      TableNo[7] := DATABASE::"Buffer Customer";
      TableNo[8] := DATABASE::"Buffer Customer Credit Rating";
      TableNo[9] := DATABASE::"Buffer Bank Account";
      TableNo[10] := DATABASE::"Buffer Financial Instrument";
      TableNo[11] := DATABASE::"Buffer FI Rates";
      TableNo[12] := DATABASE::"Buffer Deal";
      TableNo[13] := DATABASE::"Buffer FA";
      TableNo[14] := DATABASE::"Buffer FI Value";
      //NC MTF01 > PCH
      TableNo[15] := DATABASE::"Buffer Vendor";
      //NC MTF01 < PCH

      // TD BMN 19.05.2011 Доделать обработку TableNo[16] := DATABASE::"Buffer Linked Dimension";
    END;

    PROCEDURE ProcesType@1000000003(VAR RecRefBuffer@1000000000 : RecordRef;VAR JobProcStatus@1000000012 : TEMPORARY Record 50063) isOK : Boolean;
    VAR
      iFldType@1000000001 : Integer;
      RecFldType@1000000002 : FieldRef;
      ValueType@1000000003 : Integer;
      iFldStatus@1000000006 : Integer;
      FldRefStatus@1000000005 : FieldRef;
      iFldTimeCreation@1101495004 : Integer;
      RecFldTimeCreation@1101495003 : FieldRef;
      ValueTimeCreation@1101495002 : DateTime;
      i@1000000011 : Integer;
      RecRefReference@1000000007 : ARRAY [2] OF RecordRef;
      isFindOrig@1000000010 : ARRAY [2] OF Boolean;
      isFind@1000000008 : ARRAY [2] OF Boolean;
      StrPrimaryKeyInfo@1101495001 : Text[250];
      CodeError@1000000009 : Code[10];
      TextError@1101495000 : Text[250];
      RecProcStatus@1000000004 : TEMPORARY Record 50063;
      isDelay@1101495005 : Boolean;
      CodeFromID@1101495006 : Code[20];
      iFldCancelFIRelation@1101495007 : Integer;
      RecFldCancelFIRelation@1101495008 : FieldRef;
      Deal@1101495009 : Record 50037;
    BEGIN
      isOK := TRUE;
      MovingDataSetup.GET;
      iFldType := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Type');
      IF iFldType = 0 THEN
        ERROR(Text003,RecRefBuffer.CAPTION);
      RecFldType := RecRefBuffer.FIELD(iFldType);
      ValueType := RecFldType.VALUE;

      iFldTimeCreation := TableCheckBlocked.GetFieldNo(RecRefBuf,'Time Creation');
      IF iFldTimeCreation = 0 THEN
        ERROR(Text003,RecRefBuf.CAPTION);
      RecFldTimeCreation := RecRefBuf.FIELD(iFldTimeCreation);
      ValueTimeCreation := RecFldTimeCreation.VALUE;

      //NC NCS-1131 > DP
      ValueCancelRelation := FALSE;
      iFldCancelFIRelation := TableCheckBlocked.GetFieldNo(RecRefBuf,'Not Check FI');
      IF iFldCancelFIRelation<>0 THEN BEGIN
        RecFldCancelFIRelation := RecRefBuf.FIELD(iFldCancelFIRelation);
        ValueCancelRelation := RecFldCancelFIRelation.VALUE;
      END;
      //NC NCS-1131 < DP

      IF NOT TestRelation(2,RecRefBuffer,
                            RecRefBuffer.FIELD(TableCheckBlocked.GetFieldNo(RecRefBuffer,'Id External System')),'',CodeFromID,
                            JobProcStatus) THEN
        EXIT(FALSE);

      IF NOT AddReference(RecRefBuffer,FALSE,RecRefReference,isFind,StrPrimaryKeyInfo,JobProcStatus) THEN
        EXIT(FALSE);

      IF ValueType IN [BufferDeal.Type::New,BufferDeal.Type::Modify] THEN
        IF NOT RenameRef.TestRenameJournal(RecRefBuffer,RecRefReference,isFind,CodeError,TextError) THEN BEGIN
          CheckDelay(2,CodeError,TextError,RecRefBuffer,JobProcStatus);
          EXIT(FALSE);
        END;

      IF MovingDataSetup."Exact Processing Change" THEN
        CASE TRUE OF

          (ValueType = BufferDeal.Type::New) AND (NOT isFind[1]) :
            isOK := TRUE;

          (ValueType = BufferDeal.Type::New) AND (isFind[1]) :
            BEGIN
              CodeError := 'EDB12';
              TextError := STRSUBSTNO(TextEDB12,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := FALSE;
            END;

          (ValueType = BufferDeal.Type::Modify) AND (NOT isFind[1]) :
            BEGIN
              CodeError := 'EDB13';
              TextError := STRSUBSTNO(TextEDB13,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := FALSE;

              IF FORMAT(MovingDataSetup."Period Delays Modified") <> '' THEN
                IF CALCDATE(MovingDataSetup."Period Delays Modified",DT2DATE(ValueTimeCreation)) >= TODAY THEN
                  isDelay := TRUE;

            END;

          (ValueType = BufferDeal.Type::Modify) AND (isFind[1]) :
            isOK := TRUE;

          //NC NCS490 > PCH
          (ValueType = BufferDeal.Type::Delete) AND
          (RecRefBuffer.NUMBER IN [DATABASE::"Buffer Currency Exchange Rate"]) :
            //NC MIO-10.8 > PCH
            {
            IF isFind[1] THEN
              isOK := TRUE
            ELSE BEGIN
              CodeError := 'EDB13';
              TextError := STRSUBSTNO(TextEDB13,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := FALSE;
            END;
            }
            isOK := TRUE;
            //NC MIO-10.8 < PCH
          //NC NCS490 < PCH

          ValueType = BufferDeal.Type::Delete :
            BEGIN
              CodeError := 'EDB04';
              TextError := STRSUBSTNO(TextEDB04,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := FALSE;
            END;
          (ValueType = BufferDeal.Type::Rename) AND (NOT isFind[1]) :
            BEGIN
              CodeError := 'EDB13';
              TextError := STRSUBSTNO(TextEDB13,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := FALSE;
            END;
          (ValueType = BufferDeal.Type::Rename) AND (isFind[1]) :
            isOK := TRUE;
        END
      ELSE
        CASE TRUE OF

          (ValueType = BufferDeal.Type::New) AND (NOT isFind) :
            isOK := TRUE;

          (ValueType = BufferDeal.Type::New) AND (isFind[1]) :
            BEGIN
              CodeError := 'EDB09';
              TextError := STRSUBSTNO(TextEDB09,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := TRUE;
            END;

          (ValueType = BufferDeal.Type::Modify) AND (NOT isFind[1]) :
            BEGIN
              CodeError := 'EDB11';
              TextError := STRSUBSTNO(TextEDB11,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := TRUE;
            END;

          (ValueType = BufferDeal.Type::Modify) AND (isFind[1]) :
            isOK := TRUE;

          //NC NCS490 > PCH
          (ValueType = BufferDeal.Type::Delete) AND
          (RecRefBuffer.NUMBER IN [DATABASE::"Buffer Currency Exchange Rate"]) :
            //NC MIO-10.8 > PCH
            {
            IF isFind[1] THEN
              isOK := TRUE
            ELSE BEGIN
              CodeError := 'EDB13';
              TextError := STRSUBSTNO(TextEDB13,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := FALSE;
            END;
            }
            isOK := TRUE;
            //NC MIO-10.8 > PCH
          //NC NCS490 < PCH

          ValueType = BufferDeal.Type::Delete :
            BEGIN
              CodeError := 'EDB04';
              TextError := STRSUBSTNO(TextEDB04,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := FALSE;
            END;
          (ValueType = BufferDeal.Type::Rename) AND (NOT isFind[1]) :
            BEGIN
              CodeError := 'EDB13';
              TextError := STRSUBSTNO(TextEDB13,RecRefBuffer.CAPTION,SELECTSTR(ValueType+1,RecFldType.OPTIONCAPTION),
                                      RecRefReference[1].CAPTION,StrPrimaryKeyInfo);
              isOK := FALSE;
            END;
          (ValueType = BufferDeal.Type::Rename) AND (isFind[1]) :
            isOK := TRUE;
        END;

      COPYARRAY(isFindOrig,isFind,1);

      IF isOK THEN BEGIN
        IF TextError <> '' THEN BEGIN
          IF NOT isFind[1] THEN
            ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Warning,
                                   '',0,
                                   CodeError,TextError,COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.")
          ELSE
            ErrorJournal.AddError2(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Warning,
                                   '',0,
                                   CodeError,TextError,COMPANYNAME,RecRefBuffer,RecRefReference[1],JobProcStatus."Line No.")
        END;

        AddReference(RecRefBuffer,TRUE,RecRefReference,isFind,StrPrimaryKeyInfo,JobProcStatus);

        //NC NCS490 > PCH
        //IF ValueType <> BufferDeal.Type::Rename THEN BEGIN
        IF NOT (ValueType IN [BufferDeal.Type::Rename, BufferDeal.Type::Delete]) THEN BEGIN
        //NC NCS490 < PCH
          IF NOT ModifyReference(RecRefBuffer,RecRefReference,isFind,JobProcStatus) THEN BEGIN
            FOR i := 1 TO ARRAYLEN(isFind) DO
              IF NOT isFindOrig[i] AND isFind[i] THEN
                RecRefReference[i].DELETE(TRUE);
            EXIT(FALSE);
          END;
          IF NOT AddDimension(RecRefBuffer,RecRefReference,isFind,JobProcStatus) THEN BEGIN
            FOR i := 1 TO ARRAYLEN(isFind) DO
              IF NOT isFindOrig[i] AND isFind[i] THEN
                RecRefReference[i].DELETE(TRUE);
            EXIT(FALSE);
          END;

          //NC NCS-1559 > DP
          IF (RecRefBuffer.NUMBER = DATABASE::"Buffer Deal") THEN BEGIN
            RecRefReference[1].SETTABLE(Deal);
            IF  DealType.GET(Deal."Type Deal") AND DealType."Create Agreement" THEN
              Deal.CreateAgreement;

            //NC NCS-2181 > DP
            IF (Deal.Book<>'') AND (Deal."Book Rt."<>'') AND (Deal.Book<>Deal."Book Rt.") THEN
              Deal."Deal Between Books" := TRUE;
              Deal.MODIFY;
            //NC NCS-2181 < DP

          END;
          //NC NCS-1559 < DP

        END;

      END ELSE BEGIN
        IF NOT isFind[1] THEN BEGIN
          IF isDelay THEN
            CheckDelay(2,CodeError,TextError,RecRefBuffer,JobProcStatus)
          ELSE
            ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                   '',0,
                                   CodeError,TextError,COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
        END ELSE
          ErrorJournal.AddError2(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                 '',0,
                                 CodeError,TextError,COMPANYNAME,RecRefBuffer,RecRefReference[1],JobProcStatus."Line No.");
      END;
      EXIT(isOK);
    END;

    PROCEDURE AddReference@1000000024(RecRefBuffer@1000000000 : RecordRef;isAdd@1000000004 : Boolean;VAR RecRefReference@1000000002 : ARRAY [2] OF RecordRef;VAR isFind@1101495003 : ARRAY [2] OF Boolean;VAR StrPrimaryKeyInfo@1101495004 : Text[250];VAR JobProcStatus@1000000001 : TEMPORARY Record 50063) : Boolean;
    VAR
      FASetup@1000000003 : Record 5603;
      BufferCustomer@1000000026 : Record 50045;
      BufferVendor@1101495005 : Record 50118;
      BufferCustCrRating@1000000025 : Record 50046;
      BufferCountryRegion@1000000024 : Record 50059;
      BufferIndustryGroup@1000000023 : Record 50060;
      IndustryGroup@1101495000 : Record 5057;
      BufferCountry@1101495002 : Record 50059;
      Country@1101495001 : Record 9;
      Customer@1000000022 : Record 18;
      Vendor@1101495006 : Record 23;
      CustCrRating@1000000027 : Record 50047;
      FixedAsset@1000000021 : Record 5600;
      BufferFA@1000000020 : Record 50043;
      FACatalog@1000000019 : Record 50044;
      BufferDimValue@1000000018 : Record 50054;
      DimValue@1000000017 : Record 349;
      BufferBankAccount@1000000016 : Record 50053;
      BankAccount@1000000015 : Record 270;
      BufferFI@1000000014 : Record 50052;
      FI@1000000013 : Record 50021;
      BufferDeal@1000000012 : Record 50036;
      Deal@1000000011 : Record 50037;
      BufferStockExchange@1000000010 : Record 50041;
      StockExchange@1000000009 : Record 50042;
      BufferCurrExchRate@1000000008 : Record 50056;
      CurrExchRate@1000000007 : Record 330;
      BufferFIRates@1000000006 : Record 50057;
      FIRates@1000000005 : Record 50058;
      BufferFIValue@1000000029 : Record 50091;
      FIValue@1000000028 : Record 50090;
      RenameJournal@1000000030 : Record 50092;
      CodeError@1000000032 : Code[10];
      TextError@1000000031 : Text[250];
      Company@1000000033 : Record 2000000006;
      GLSetup1@1000000034 : Record 98;
      RelationalCurrency@1000000035 : Code[10];
      Currency@1000000036 : Record 4;
      CurrencyCode@1000000037 : Code[10];
      CM@1101495007 : Codeunit 50000;
      VendorAgreement@1101495011 : Record 14901;
      CustomerAgreement@1101495010 : Record 14902;
      LinkedDimensionValue@1101495009 : Record 50016;
      ConsSetup@1101495008 : Record 50000;
      CodeFromID@1101495012 : Code[20];
      DealType@1101495013 : Record 50038;
      l_RecRef@1000000038 : RecordRef;
      l_cuChangLogMgt@1000000039 : Codeunit 423;
    BEGIN
      FASetup.GET;
      isFind[1] := FALSE;
      isFind[2] := FALSE;
      StrPrimaryKeyInfo := '';

      CASE RecRefBuffer.NUMBER OF
        DATABASE::"Buffer Customer" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferCustomer);
            IF NOT TestVarText(0,RecRefBuffer,BufferCustomer.FIELDCAPTION("No."),BufferCustomer."No.",'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferCustomer."No.";

            //NC S547 > PCH
            IF BufferCustomer."Rec ID" <> '' THEN BEGIN
              Customer.RESET;
              Customer.SETRANGE("Rec ID",BufferCustomer."Rec ID");
              IF Customer.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF Customer.GET(BufferCustomer."No.") THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF Customer.GET(BufferCustomer."No.") THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            Customer.RESET;
            IF isFind[1] AND (BufferCustomer."Rec ID" <> '') THEN
              Customer."Rec ID" := BufferCustomer."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(Customer);

            IF BufferCustomer.Type = BufferCustomer.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferCustomer.FIELDCAPTION("No. New"),BufferCustomer."No. New",'',JobProcStatus) THEN
                EXIT(FALSE);

              //NC S547 > PCH
              //IF NOT RenameRef.TestCust(BufferCustomer."No.",BufferCustomer."No. New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestCust(BufferCustomer."No.",BufferCustomer."Rec ID",BufferCustomer."No. New",
                                        CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferCustomer."No. New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddCust(JobProcStatus."Company No.",BufferCustomer);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                Customer.INIT;
                Customer."No." := BufferCustomer."No.";
                //NC MTD002 > AIG
                Customer."Agreement Posting" := Customer."Agreement Posting"::Mandatory;
                //NC MTD002 < AIG
                //NC S547 > PCH
                Customer."Rec ID" := BufferCustomer."Rec ID";
                //NC S547 < PCH
                Customer.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(Customer);
              END;
              IF isAdd THEN BEGIN
                BufferCustomer.RESET;
                BufferCustomer.SETFILTER("Entry No.",'<%1',BufferCustomer."Entry No.");
                BufferCustomer.SETRANGE("No.",BufferCustomer."No.");
                BufferCustomer.SETRANGE(Status,BufferCustomer.Status::New);
                BufferCustomer.MODIFYALL(Status,BufferCustomer.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferCustomer."Rec ID" <> '' THEN BEGIN
                  BufferCustomer.SETRANGE("No.");
                  BufferCustomer.SETRANGE("Rec ID",BufferCustomer."Rec ID");
                  BufferCustomer.MODIFYALL(Status,BufferCustomer.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        //NC MTF01 > PCH
        DATABASE::"Buffer Vendor" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferVendor);
            IF NOT TestVarText(0,RecRefBuffer,BufferVendor.FIELDCAPTION("No."),BufferVendor."No.",'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferVendor."No.";

            //NC S547 > PCH
            IF BufferVendor."Rec ID" <> '' THEN BEGIN
              Vendor.RESET;
              Vendor.SETRANGE("Rec ID",BufferVendor."Rec ID");
              IF Vendor.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF Vendor.GET(BufferVendor."No.") THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF Vendor.GET(BufferVendor."No.") THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            Vendor.RESET;
            IF isFind[1] AND (BufferVendor."Rec ID" <> '') THEN
              Vendor."Rec ID" := BufferVendor."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(Vendor);

            IF BufferVendor.Type = BufferVendor.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferVendor.FIELDCAPTION("No. New"),BufferVendor."No. New",'',JobProcStatus) THEN
                EXIT(FALSE);

              //NC S547 > PCH
              //IF NOT RenameRef.TestVend(BufferVendor."No.",BufferVendor."No. New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestVend(BufferVendor."No.",BufferVendor."Rec ID",BufferVendor."No. New",
                                        CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferVendor."No. New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddVend(JobProcStatus."Company No.",BufferVendor);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                Vendor.INIT;
                Vendor."No." := BufferVendor."No.";
                //NC MTD002 > AIG
                Vendor."Agreement Posting" := Vendor."Agreement Posting"::Mandatory;
                //NC MTD002 < AIG
                //NC S547 > PCH
                Vendor."Rec ID" := BufferVendor."Rec ID";
                //NC S547 < PCH
                Vendor.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(Vendor);
              END;
              IF isAdd THEN BEGIN
                BufferVendor.RESET;
                BufferVendor.SETFILTER("Entry No.",'<%1',BufferVendor."Entry No.");
                BufferVendor.SETRANGE("No.",BufferVendor."No.");
                BufferVendor.SETRANGE(Status,BufferVendor.Status::New);
                BufferVendor.MODIFYALL(Status,BufferVendor.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferVendor."Rec ID" <> '' THEN BEGIN
                  BufferVendor.SETRANGE("No.");
                  BufferVendor.SETRANGE("Rec ID",BufferVendor."Rec ID");
                  BufferVendor.MODIFYALL(Status,BufferVendor.Status::"Canceled Automatic");
                END
                //NC S547 < PCH
              END;
            END;
          END;
        //NC MTF01 < PCH
        DATABASE::"Buffer Customer Credit Rating" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferCustCrRating);
            IF NOT TestVarText(0,RecRefBuffer,BufferCustCrRating.FIELDCAPTION("No."),BufferCustCrRating."No.",'',JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestRelation(0,RecRefBuffer,RecRefBuffer.FIELD(TableCheckBlocked.GetFieldNo(RecRefBuffer,'No.')),
                                BufferCustCrRating."No. ID",CodeFromID,JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestVarDate(0,RecRefBuffer,BufferCustCrRating.FIELDCAPTION("Start Date"),BufferCustCrRating."Start Date",'>',0D,
                               JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferCustCrRating."No." + ', ' + FORMAT(BufferCustCrRating."Start Date");

            //NC S547 > PCH
            //IF CustCrRating.GET(BufferCustCrRating."No.",BufferCustCrRating."Start Date") THEN
            IF CustCrRating.GET(CodeFromID,BufferCustCrRating."Start Date") THEN
            //NC S547 < PCH
              isFind[1] := TRUE;
            RecRefReference[1].GETTABLE(CustCrRating);

            IF BufferCustCrRating.Type = BufferCustomer.Type::Rename THEN BEGIN
              ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                     '',0,
                                     'EDB04',STRSUBSTNO(TextEDB04,RecRefBuffer.CAPTION,Text008,
                                                        RecRefReference[1].CAPTION,StrPrimaryKeyInfo),
                                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
              EXIT(FALSE);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                CustCrRating.INIT;
                //NC S547 > PCH
                //CustCrRating."No." := BufferCustCrRating."No.";
                CustCrRating."No." := CodeFromID;
                //NC S547 < PCH
                CustCrRating."Start Date" := BufferCustCrRating."Start Date";
                CustCrRating.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(CustCrRating);
              END;
              IF isAdd THEN BEGIN
                BufferCustCrRating.RESET;
                BufferCustCrRating.SETFILTER("Entry No.",'<%1',BufferCustCrRating."Entry No.");
                BufferCustCrRating.SETRANGE("No.",BufferCustCrRating."No.");
                BufferCustCrRating.SETRANGE("Start Date",BufferCustCrRating."Start Date");
                BufferCustCrRating.SETRANGE(Status,BufferCustCrRating.Status::New);
                BufferCustCrRating.MODIFYALL(Status,BufferCustCrRating.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferCustCrRating."No. ID" <> '' THEN BEGIN
                  BufferCustCrRating.SETRANGE("No.");
                  BufferCustCrRating.SETRANGE("No. ID",BufferCustCrRating."No. ID");
                  BufferCustCrRating.MODIFYALL(Status,BufferCustCrRating.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        DATABASE::"Buffer Country/Region" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferCountry);
            IF NOT TestVarText(0,RecRefBuffer,BufferCountry.FIELDCAPTION(Code),BufferCountry.Code,'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferCountry.Code;

            //NC S547 > PCH
            IF BufferCountry."Rec ID" <> '' THEN BEGIN
              Country.RESET;
              Country.SETRANGE("Rec ID",BufferCountry."Rec ID");
              IF Country.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF Country.GET(BufferCountry.Code) THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF Country.GET(BufferCountry.Code) THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            Country.RESET;
            IF isFind[1] AND (BufferCountry."Rec ID" <> '') THEN
              Country."Rec ID" := BufferCountry."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(Country);

            IF BufferCountry.Type = BufferCountry.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferCountry.FIELDCAPTION("Code New"),BufferCountry."Code New",'',JobProcStatus) THEN
                EXIT(FALSE);
              //NC S547 > PCH
              //IF NOT RenameRef.TestCountry(BufferCountry.Code,BufferCountry."Code New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestCountry(BufferCountry.Code,BufferCountry."Rec ID",BufferCountry."Code New",
                                           CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferCountry."Code New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddCountry(JobProcStatus."Company No.",BufferCountry);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                Country.INIT;
                Country.Code := BufferCountry.Code;
                //NC S547 > PCH
                Country."Rec ID" := BufferCountry."Rec ID";
                //NC S547 < PCH
                Country.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(Country);
              END;
              IF isAdd THEN BEGIN
                BufferCountry.RESET;
                BufferCountry.SETFILTER("Entry No.",'<%1',BufferCountry."Entry No.");
                BufferCountry.SETRANGE(Code,BufferCountry.Code);
                BufferCountry.SETRANGE(Status,BufferCountry.Status::New);
                BufferCountry.MODIFYALL(Status,BufferCountry.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferCountry."Rec ID" <> '' THEN BEGIN
                  BufferCountry.SETRANGE(Code);
                  BufferCountry.SETRANGE("Rec ID",BufferCountry."Rec ID");
                  BufferCountry.MODIFYALL(Status,BufferCountry.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        DATABASE::"Buffer Industry Group" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferIndustryGroup);
            IF NOT TestVarText(0,RecRefBuffer,BufferIndustryGroup.FIELDCAPTION(Code),BufferIndustryGroup.Code,'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferIndustryGroup.Code;

            //NC S547 > PCH
            IF BufferIndustryGroup."Rec ID" <> '' THEN BEGIN
              IndustryGroup.RESET;
              IndustryGroup.SETRANGE("Rec ID",BufferIndustryGroup."Rec ID");
              IF IndustryGroup.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF IndustryGroup.GET(BufferIndustryGroup.Code) THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF IndustryGroup.GET(BufferIndustryGroup.Code) THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            IndustryGroup.RESET;
            IF isFind[1] AND (BufferIndustryGroup."Rec ID" <> '') THEN
              IndustryGroup."Rec ID" := BufferIndustryGroup."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(IndustryGroup);

            IF BufferIndustryGroup.Type = BufferIndustryGroup.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferIndustryGroup.FIELDCAPTION("Code New"),
                                                BufferIndustryGroup."Code New",'',JobProcStatus) THEN
                EXIT(FALSE);
              //NC S547 > PCH
              //IF NOT RenameRef.TestIndustry(BufferIndustryGroup.Code,
              //                              BufferIndustryGroup."Code New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestIndustry(BufferIndustryGroup.Code,BufferIndustryGroup."Rec ID",BufferIndustryGroup."Code New",
                                            CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferIndustryGroup."Code New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddIndustry(JobProcStatus."Company No.",BufferIndustryGroup);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                IndustryGroup.INIT;
                IndustryGroup.Code := BufferIndustryGroup.Code;
                //NC S547 > PCH
                IndustryGroup."Rec ID" := BufferIndustryGroup."Rec ID";
                //NC S547 < PCH
                IndustryGroup.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(IndustryGroup);
              END;
              IF isAdd THEN BEGIN
                BufferIndustryGroup.RESET;
                BufferIndustryGroup.SETFILTER("Entry No.",'<%1',BufferIndustryGroup."Entry No.");
                BufferIndustryGroup.SETRANGE(Code,BufferIndustryGroup.Code);
                BufferIndustryGroup.SETRANGE(Status,BufferIndustryGroup.Status::New);
                BufferIndustryGroup.MODIFYALL(Status,BufferIndustryGroup.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferIndustryGroup."Rec ID" <> '' THEN BEGIN
                  BufferIndustryGroup.SETRANGE(Code);
                  BufferIndustryGroup.SETRANGE("Rec ID",BufferIndustryGroup."Rec ID");
                  BufferIndustryGroup.MODIFYALL(Status,BufferIndustryGroup.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        DATABASE::"Buffer Bank Account" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferBankAccount);
            IF NOT TestVarText(0,RecRefBuffer,BufferBankAccount.FIELDCAPTION("No."),BufferBankAccount."No.",'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferBankAccount."No.";

            //NC S547 > PCH
            IF BufferBankAccount."Rec ID" <> '' THEN BEGIN
              BankAccount.RESET;
              BankAccount.SETRANGE("Rec ID",BufferBankAccount."Rec ID");
              IF BankAccount.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF BankAccount.GET(BufferBankAccount."No.") THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF BankAccount.GET(BufferBankAccount."No.") THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            BankAccount.RESET;
            IF isFind[1] AND (BufferBankAccount."Rec ID" <> '') THEN
              BankAccount."Rec ID" := BufferBankAccount."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(BankAccount);

            IF BufferBankAccount.Type = BufferBankAccount.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferBankAccount.FIELDCAPTION("No. New"),
                                                BufferBankAccount."No. New",'',JobProcStatus) THEN
                EXIT(FALSE);
              //NC S547 > PCH
              //IF NOT RenameRef.TestBankAcc(BufferBankAccount."No.",BufferBankAccount."No. New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestBankAcc(BufferBankAccount."No.",BufferBankAccount."Rec ID",BufferBankAccount."No. New",
                                           CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferBankAccount."No. New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddBankAcc(JobProcStatus."Company No.",BufferBankAccount);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                BankAccount.INIT;
                BankAccount."No." := BufferBankAccount."No.";
                //NC S547 > PCH
                BankAccount."Rec ID" := BufferBankAccount."Rec ID";
                //NC S547 < PCH
                //TDRANCS-1165> commented
                //BankAccount.INSERT(TRUE);
                IF BankAccount.INSERT(TRUE) THEN BEGIN
                  l_RecRef.GETTABLE(BankAccount);
                  l_cuChangLogMgt.Notify(0,l_RecRef,l_RecRef);
                END;
                //TDRANCS-1165<
                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(BankAccount);
              END;
              IF isAdd THEN BEGIN
                BufferBankAccount.RESET;
                BufferBankAccount.SETFILTER("Entry No.",'<%1',BufferBankAccount."Entry No.");
                BufferBankAccount.SETRANGE("No.",BufferBankAccount."No.");
                BufferBankAccount.SETRANGE(Status,BufferBankAccount.Status::New);
                BufferBankAccount.MODIFYALL(Status,BufferBankAccount.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferBankAccount."Rec ID" <> '' THEN BEGIN
                  BufferBankAccount.SETRANGE("No.");
                  BufferBankAccount.SETRANGE("Rec ID",BufferBankAccount."Rec ID");
                  BufferBankAccount.MODIFYALL(Status,BufferBankAccount.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        DATABASE::"Buffer Financial Instrument" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferFI);
            IF NOT TestVarText(0,RecRefBuffer,BufferFI.FIELDCAPTION("No."),BufferFI."No.",'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferFI."No.";

            //NC S547 > PCH
            IF BufferFI."Rec ID" <> '' THEN BEGIN
              FI.RESET;
              FI.SETRANGE("Rec ID",BufferFI."Rec ID");
              IF FI.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF FI.GET(BufferFI."No.") THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF FI.GET(BufferFI."No.") THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            FI.RESET;
            IF isFind[1] AND (BufferFI."Rec ID" <> '') THEN
              FI."Rec ID" := BufferFI."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(FI);

            IF BufferFI.Type = BufferFI.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferFI.FIELDCAPTION("No. New"),BufferFI."No. New",'',JobProcStatus) THEN
                EXIT(FALSE);
              //NC S547 > PCH
              //IF NOT RenameRef.TestFI(BufferFI."No.",BufferFI."No. New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestFI(BufferFI."No.",BufferFI."Rec ID",BufferFI."No. New",
                                      CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferFI."No. New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddFI(JobProcStatus."Company No.",BufferFI);
            END ELSE BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferFI.FIELDCAPTION("Type FI"),BufferFI."Type FI",'',JobProcStatus) THEN
                EXIT(FALSE);
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                FI.INIT;
                FI."No." := BufferFI."No.";
                //NC S547 > PCH
                FI."Rec ID" := BufferFI."Rec ID";
                //NC S547 < PCH
                FI.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(FI);
              END;
              IF isAdd THEN BEGIN
                BufferFI.RESET;
                BufferFI.SETFILTER("Entry No.",'<%1',BufferFI."Entry No.");
                BufferFI.SETRANGE("No.",BufferFI."No.");
                BufferFI.SETRANGE(Status,BufferFI.Status::New);
                BufferFI.MODIFYALL(Status,BufferFI.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferFI."Rec ID" <> '' THEN BEGIN
                  BufferFI.SETRANGE("No.");
                  BufferFI.SETRANGE("Rec ID",BufferFI."Rec ID");
                  BufferFI.MODIFYALL(Status,BufferFI.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        DATABASE::"Buffer Deal" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferDeal);
            IF NOT TestVarText(0,RecRefBuffer,BufferDeal.FIELDCAPTION("Deal ID"),BufferDeal."Deal ID",'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferDeal."Deal ID";

            //NC S547 > PCH
            IF BufferDeal."Rec ID" <> '' THEN BEGIN
              Deal.RESET;
              Deal.SETRANGE("Rec ID",BufferDeal."Rec ID");
              IF Deal.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF Deal.GET(BufferDeal."Deal ID") THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF Deal.GET(BufferDeal."Deal ID") THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            Deal.RESET;
            IF isFind[1] AND (BufferDeal."Rec ID" <> '') THEN
              Deal."Rec ID" := BufferDeal."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(Deal);
            //NC MTD002 > AIG


            // NC SB Company.GET;
            {
            Company.RESET;
            Company.SETRANGE("Legal Entity Id", BufferDeal."Customer No.");
            IF Company.FINDFIRST THEN;

            IF BufferDeal."Trade Direction" = BufferDeal."Trade Direction"::Purchase THEN BEGIN
              CM.CreateVendorCard('', BufferDeal."Customer No.");
              //создаем договор
              VendorAgreement.CHANGECOMPANY(Company.Name);
              VendorAgreement.INIT;
              VendorAgreement."Vendor No." := BufferDeal."Customer No.";
              VendorAgreement."No." := BufferDeal."Deal ID";
              VendorAgreement."External Agreement No." := BufferDeal."Deal ID";
              VendorAgreement.Description := BufferDeal."Deal ID";
              VendorAgreement.Active := TRUE;
              VendorAgreement."Deal No." := BufferDeal."Deal ID";
              VendorAgreement."Currency Code" := BufferDeal.Currency;
              VendorAgreement."Agreement Type" := VendorAgreement."Agreement Type"::Trade;
              IF NOT VendorAgreement.INSERT(TRUE) THEN;

              //проверяем IC
              ConsSetup.GET;
              IF LinkedDimensionValue.GET(ConsSetup."Counterparty Dim Code",BufferDeal."Customer No.",ConsSetup."IC Dimension Code") THEN
              BEGIN
                Company.RESET;
                Company.SETRANGE("Legal Entity Id", BufferDeal."Company No.");
                IF Company.FINDFIRST THEN;

                CustomerAgreement.CHANGECOMPANY(Company.Name);
                CustomerAgreement.INIT;
                CustomerAgreement."Customer No." := BufferDeal."Company No.";
                CustomerAgreement."No." := BufferDeal."Deal ID";
                CustomerAgreement."External Agreement No." := BufferDeal."Deal ID";
                CustomerAgreement.Description := BufferDeal."Deal ID";
                CustomerAgreement.Active := TRUE;
                CustomerAgreement."Deal No." := BufferDeal."Deal ID";
                CustomerAgreement."Currency Code" := BufferDeal.Currency;
                CustomerAgreement."Agreement Type" := CustomerAgreement."Agreement Type"::Trade;
                IF NOT CustomerAgreement.INSERT(TRUE) THEN;
              END;
            END;
            IF BufferDeal."Trade Direction" = BufferDeal."Trade Direction"::Sale THEN BEGIN
              CustomerAgreement.CHANGECOMPANY(Company.Name);
              CustomerAgreement.INIT;
              CustomerAgreement."Customer No." := BufferDeal."Customer No.";
              CustomerAgreement."No." := BufferDeal."Deal ID";
              CustomerAgreement."External Agreement No." := BufferDeal."Deal ID";
              CustomerAgreement.Description := BufferDeal."Deal ID";
              CustomerAgreement.Active := TRUE;

              CustomerAgreement."Deal No." := BufferDeal."Deal ID";
              CustomerAgreement."Currency Code" := BufferDeal.Currency;
              CustomerAgreement."Agreement Type" := CustomerAgreement."Agreement Type"::Trade;
              IF NOT CustomerAgreement.INSERT(TRUE) THEN;

              //проверяем IC
              ConsSetup.GET;
              IF LinkedDimensionValue.GET(ConsSetup."Counterparty Dim Code",BufferDeal."Customer No.",ConsSetup."IC Dimension Code") THEN
              BEGIN
                Company.RESET;
                Company.SETRANGE("Legal Entity Id", BufferDeal."Company No.");
                IF Company.FINDFIRST THEN;

                VendorAgreement.CHANGECOMPANY(Company.Name);
                VendorAgreement.INIT;
                VendorAgreement."Vendor No." := BufferDeal."Company No.";
                VendorAgreement."No." := BufferDeal."Deal ID";
                VendorAgreement."External Agreement No." := BufferDeal."Deal ID";
                VendorAgreement.Description := BufferDeal."Deal ID";
                VendorAgreement.Active := TRUE;
                VendorAgreement."Deal No." := BufferDeal."Deal ID";
                VendorAgreement."Currency Code" := BufferDeal.Currency;
                VendorAgreement."Agreement Type" := VendorAgreement."Agreement Type"::Trade;
                IF NOT VendorAgreement.INSERT(TRUE) THEN;
              END;
            END;
            }
            //NC MTD002 < AIG


            IF BufferDeal.Type = BufferDeal.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferDeal.FIELDCAPTION("Deal ID New"),BufferDeal."Deal ID New",'',JobProcStatus) THEN
                EXIT(FALSE);
              //NC S547 > PCH
              //IF NOT RenameRef.TestDeal(BufferDeal."Deal ID",BufferDeal."Deal ID New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestDeal(BufferDeal."Deal ID",BufferDeal."Rec ID",BufferDeal."Deal ID New",
                                        CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferDeal."Deal ID New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddDeal(JobProcStatus."Company No.",BufferDeal);
            END ELSE BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferDeal.FIELDCAPTION("Type Deal"),BufferDeal."Type Deal",'',JobProcStatus) THEN
                EXIT(FALSE);
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                Deal.INIT;
                Deal."Deal ID" := BufferDeal."Deal ID";
                //NC S547 > PCH
                Deal."Rec ID" := BufferDeal."Rec ID";
                //NC S547 < PCH
                Deal.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(Deal);
              END;
              IF isAdd THEN BEGIN
                BufferDeal.RESET;
                BufferDeal.SETFILTER("Entry No.",'<%1',BufferDeal."Entry No.");
                BufferDeal.SETRANGE("Id Legal Entity",BufferDeal."Id Legal Entity");
                BufferDeal.SETRANGE("Deal ID",BufferDeal."Deal ID");
                BufferDeal.SETRANGE(Status,BufferDeal.Status::New);
                BufferDeal.MODIFYALL(Status,BufferDeal.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferDeal."Rec ID" <> '' THEN BEGIN
                  BufferDeal.SETRANGE("Deal ID");
                  BufferDeal.SETRANGE("Rec ID",BufferDeal."Rec ID");
                  BufferDeal.MODIFYALL(Status,BufferDeal.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;


            END;
          END;

        DATABASE::"Buffer Stock Exchange" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferStockExchange);
            IF NOT TestVarText(0,RecRefBuffer,BufferStockExchange.FIELDCAPTION(Code),BufferStockExchange.Code,'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferStockExchange.Code;

            //NC S547 > PCH
            IF BufferStockExchange."Rec ID" <> '' THEN BEGIN
              StockExchange.RESET;
              StockExchange.SETRANGE("Rec ID",BufferStockExchange."Rec ID");
              IF StockExchange.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF StockExchange.GET(BufferStockExchange.Code) THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF StockExchange.GET(BufferStockExchange.Code) THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            StockExchange.RESET;
            IF isFind[1] AND (BufferStockExchange."Rec ID" <> '') THEN
              StockExchange."Rec ID" := BufferStockExchange."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(StockExchange);

            IF BufferStockExchange.Type = BufferStockExchange.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferStockExchange.FIELDCAPTION("Code New"),
                                                BufferStockExchange."Code New",'',JobProcStatus) THEN
                EXIT(FALSE);
              //NC S547 > PCH
              //IF NOT RenameRef.TestStock(BufferStockExchange.Code,BufferStockExchange."Code New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestStock(BufferStockExchange.Code,BufferStockExchange."Rec ID",BufferStockExchange."Code New",
                                         CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferStockExchange."Code New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddStock(JobProcStatus."Company No.",BufferStockExchange);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                StockExchange.INIT;
                StockExchange.Code := BufferStockExchange.Code;
                //NC S547 > PCH
                StockExchange."Rec ID" := BufferStockExchange."Rec ID";
                //NC S547 < PCH
                StockExchange.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(StockExchange);
              END;
              IF isAdd THEN BEGIN
                BufferStockExchange.RESET;
                BufferStockExchange.SETFILTER("Entry No.",'<%1',BufferStockExchange."Entry No.");
                BufferStockExchange.SETRANGE(Code,BufferStockExchange.Code);
                BufferStockExchange.SETRANGE(Status,BufferStockExchange.Status::New);
                BufferStockExchange.MODIFYALL(Status,BufferStockExchange.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferStockExchange."Rec ID" <> '' THEN BEGIN
                  BufferStockExchange.SETRANGE(Code);
                  BufferStockExchange.SETRANGE("Rec ID",BufferStockExchange."Rec ID");
                  BufferStockExchange.MODIFYALL(Status,BufferStockExchange.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        DATABASE::"Buffer FA" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferFA);
            IF NOT TestVarText(0,RecRefBuffer,BufferFA.FIELDCAPTION("No."),BufferFA."No.",'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferFA."No.";

            //NC S547 > PCH
            IF BufferFA."Rec ID" <> '' THEN BEGIN
              FACatalog.RESET;
              FACatalog.SETRANGE("Rec ID",BufferFA."Rec ID");
              IF FACatalog.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF FACatalog.GET(BufferFA."No.") THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF FACatalog.GET(BufferFA."No.") THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            FACatalog.RESET;
            IF isFind[1] AND (BufferFA."Rec ID" <> '') THEN
              FACatalog."Rec ID" := BufferFA."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(FACatalog);

            IF BufferFA.Type = BufferCustomer.Type::Rename THEN BEGIN
              ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                     '',0,
                                     'EDB04',STRSUBSTNO(TextEDB04,RecRefBuffer.CAPTION,Text008,
                                                        RecRefReference[1].CAPTION,StrPrimaryKeyInfo),
                                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
              EXIT(FALSE);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                FACatalog.INIT;
                FACatalog."No." := BufferFA."No.";
                FACatalog."Type FA" := BufferFA."Type FA";
                FACatalog."Company No." := COMPANYNAME;
                //NC S547 > PCH
                FACatalog."Rec ID" := BufferFA."Rec ID";
                //NC S547 < PCH
                FACatalog.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(FACatalog);
              END;

              //NC S547 > PCH
             IF BufferFA."Rec ID" <> '' THEN BEGIN
                FixedAsset.RESET;
                FixedAsset.SETRANGE("Rec ID",BufferFA."Rec ID");
                IF FixedAsset.FINDFIRST THEN
                  isFind[2] := TRUE
                ELSE IF FixedAsset.GET(BufferFA."No.") THEN
                  isFind[2] := TRUE;
              END ELSE
              //NC S547 < PCH
                IF FixedAsset.GET(BufferFA."No.") THEN
                  isFind[2] := TRUE;
              //NC S547 > PCH
              FixedAsset.RESET;
              IF isFind[2] AND (BufferFA."Rec ID" <> '') THEN
                FixedAsset."Rec ID" := BufferFA."Rec ID";
              //NC S547 < PCH
              RecRefReference[2].GETTABLE(FixedAsset);

              IF isAdd AND (NOT isFind[2]) AND FASetup."Automatic Loading FA" THEN BEGIN
                FixedAsset.INIT;
                FixedAsset."No." := BufferFA."No.";
                FixedAsset."Inventory Number" := BufferFA."No.";
                FixedAsset."FA Type" := BufferFA."Type FA";
                //NC S547 > PCH
                FixedAsset."Rec ID" := BufferFA."Rec ID";
                //NC S547 < PCH
                FixedAsset.INSERT(TRUE);

                isFind[2] := TRUE;
                RecRefReference[2].GETTABLE(FixedAsset);
              END;
              IF isAdd THEN BEGIN
                BufferFA.RESET;
                BufferFA.SETFILTER("Entry No.",'<%1',BufferFA."Entry No.");
                BufferFA.SETRANGE("Id Legal Entity",BufferFA."Id Legal Entity");
                BufferFA.SETRANGE("No.",BufferFA."No.");
                BufferFA.SETRANGE(Status,BufferFA.Status::New);
                BufferFA.MODIFYALL(Status,BufferFA.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferFA."Rec ID" <> '' THEN BEGIN
                  BufferFA.SETRANGE("No.");
                  BufferFA.SETRANGE("Rec ID",BufferFA."Rec ID");
                  BufferFA.MODIFYALL(Status,BufferFA.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        DATABASE::"Buffer Dimension Value" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferDimValue);
            IF NOT TestVarText(0,RecRefBuffer,BufferDimValue.FIELDCAPTION("Dimension Code"),BufferDimValue."Dimension Code",'',
                               JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestRelation(0,RecRefBuffer,RecRefBuffer.FIELD(TableCheckBlocked.GetFieldNo(RecRefBuffer,'Dimension Code')),
                                '',CodeFromID,JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestVarText(0,RecRefBuffer,BufferDimValue.FIELDCAPTION(Code),BufferDimValue.Code,'',JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferDimValue."Dimension Code" + ', ' + BufferDimValue.Code;

            //NC S547 > PCH
            IF BufferDimValue."Rec ID" <> '' THEN BEGIN
              DimValue.RESET;
              DimValue.SETRANGE("Dimension Code",BufferDimValue."Dimension Code");
              DimValue.SETRANGE("Rec ID",BufferDimValue."Rec ID");
              IF DimValue.FINDFIRST THEN
                isFind[1] := TRUE
              ELSE IF DimValue.GET(BufferDimValue."Dimension Code",BufferDimValue.Code) THEN
                isFind[1] := TRUE;
            END ELSE
            //NC S547 < PCH
              IF DimValue.GET(BufferDimValue."Dimension Code",BufferDimValue.Code) THEN
                isFind[1] := TRUE;
            //NC S547 > PCH
            DimValue.RESET;
            IF isFind[1] AND (BufferDimValue."Rec ID" <> '') THEN
              DimValue."Rec ID" := BufferDimValue."Rec ID";
            //NC S547 < PCH
            RecRefReference[1].GETTABLE(DimValue);

            IF BufferDimValue.Type = BufferDimValue.Type::Rename THEN BEGIN
              IF NOT TestVarText(0,RecRefBuffer,BufferDimValue.FIELDCAPTION("Code New"),BufferDimValue."Code New",'',JobProcStatus) THEN
                EXIT(FALSE);
              //NC S547 > PCH
              //IF NOT RenameRef.TestDimValue(BufferDimValue."Dimension Code",BufferDimValue.Code,
              //                                                           BufferDimValue."Code New",CodeError,TextError,FALSE) THEN BEGIN
              IF NOT RenameRef.TestDimValue(BufferDimValue."Dimension Code",BufferDimValue.Code,BufferDimValue."Rec ID",
                                                                            BufferDimValue."Code New",
                                            CodeError,TextError,FALSE) THEN BEGIN
              //NC S547 < PCH
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                     '',0,
                     CodeError,STRSUBSTNO(TextEDB20,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,BufferDimValue."Code New",TextError),
                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              IF isAdd THEN
                RenameJournal.AddDimValue(JobProcStatus."Company No.",BufferDimValue);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                DimValue.INIT;
                DimValue."Dimension Code" := BufferDimValue."Dimension Code";
                DimValue.Code := BufferDimValue.Code;
                DimValue.Name := BufferDimValue.Name;
                DimValue.Blocked := BufferDimValue.Blocked;
                DimValue."Name 2" := BufferDimValue."Name 2";
                //NC S547 > PCH
                {
      // TD BMN 03.08.2011 Справочник измерений синхронизируется с MIS >
      //         IF BufferDimValue."Dimension Code" <> 'BOOK' THEN BEGIN
      // TD BMN 03.08.2011 <
                  DimValue."Parent Code" := BufferDimValue."Parent Code";
                }
                DimValue."Rec ID" := BufferDimValue."Rec ID";
                //NC S547 < PCH
                DimValue."Parent Dimension Code" := BufferDimValue."Parent Dimension Code";
                DimValue."Hierarchy Parent Code" := BufferDimValue."Hierarchy Parent Code";

      // TD BMN 24.07.2012 >
                IF BufferDimValue."Dimension Code" = 'COSTCENTER' THEN
                  DimValue."Global Dimension No." := 1;
                IF BufferDimValue."Dimension Code" = 'BOOK' THEN
                  DimValue."Global Dimension No." := 2;
      // TD BMN 24.07.2012 <

                DimValue.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(DimValue);
              END;
              IF isAdd THEN BEGIN
                BufferDimValue.RESET;
                BufferDimValue.SETFILTER("Entry No.",'<%1',BufferDimValue."Entry No.");
                BufferDimValue.SETRANGE("Dimension Code",BufferDimValue."Dimension Code");
                BufferDimValue.SETRANGE(Code,BufferDimValue.Code);
                BufferDimValue.SETRANGE(Status,BufferDimValue.Status::New);
                BufferDimValue.MODIFYALL(Status,BufferDimValue.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferDimValue."Rec ID" <> '' THEN BEGIN
                  BufferDimValue.SETRANGE(Code);
                  BufferDimValue.SETRANGE("Rec ID",BufferDimValue."Rec ID");
                  BufferDimValue.MODIFYALL(Status,BufferDimValue.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;

        DATABASE::"Buffer Currency Exchange Rate" :
          BEGIN
            //NC OAM46 > DP
            MovingDataSetup.GET;
            MovingDataSetup.TESTFIELD("Cross Currency Code");
            //NC OAM46 < DP
            RecRefBuffer.SETTABLE(BufferCurrExchRate);
            IF NOT TestVarText(0,RecRefBuffer,BufferCurrExchRate.FIELDCAPTION(Code),BufferCurrExchRate.Code,'',JobProcStatus) THEN
              EXIT(FALSE);
            IF ConvertCurrencyExch(BufferCurrExchRate.Code,BufferCurrExchRate."Exchange Rate Type") = 'ERROR' THEN BEGIN
              ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                     '',0,
                                     'EDB17',STRSUBSTNO(TextEDB17,RecRefBuffer.CAPTION,STRSUBSTNO(Text012,BufferCurrExchRate.Code)),
                                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
              EXIT(FALSE);
            END;
            IF NOT TestRelation(0,RecRefBuffer,RecRefBuffer.FIELD(TableCheckBlocked.GetFieldNo(RecRefBuffer,'Code')),
                                '',CodeFromID,JobProcStatus) THEN
              EXIT(FALSE);
            IF ConvertCurrencyExch(BufferCurrExchRate."Relational Currency Code",
                                   BufferCurrExchRate."Exchange Rate Type") = 'ERROR' THEN BEGIN
              ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                     '',0,
                                     'EDB17',STRSUBSTNO(TextEDB17,RecRefBuffer.CAPTION,
                                                        STRSUBSTNO(Text012,BufferCurrExchRate."Relational Currency Code")),
                                                        COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
              EXIT(FALSE);
            END;
            IF NOT TestVarDate(0,RecRefBuffer,BufferCurrExchRate.FIELDCAPTION(Date),BufferCurrExchRate.Date,'>',0D,JobProcStatus) THEN
              EXIT(FALSE);

            //NC NCS490 > PCH
            IF BufferCurrExchRate.Type <> BufferCustomer.Type::Delete THEN BEGIN
            //NC NCS490 < PCH
              IF NOT TestVarDec(0,RecRefBuffer,BufferCurrExchRate.FIELDCAPTION("Rate Amount"),BufferCurrExchRate."Rate Amount",'>',0,
                                JobProcStatus) THEN
                EXIT(FALSE);
              IF NOT TestVarDec(0,RecRefBuffer,BufferCurrExchRate.FIELDCAPTION("Relational Rate Amount"),
                                BufferCurrExchRate."Relational Rate Amount",'>',0,
                                JobProcStatus) THEN
                EXIT(FALSE);
            //NC NCS490 > PCH
            END;
            //NC NCS490 < PCH

            StrPrimaryKeyInfo := BufferCurrExchRate.Code + ', ' + FORMAT(BufferCurrExchRate.Date);

            //NC MIO-10.8 > PCH
            {
            IF CurrExchRate.GET(ConvertCurrencyExch(BufferCurrExchRate.Code,BufferCurrExchRate."Exchange Rate Type"),
                                BufferCurrExchRate.Date) THEN
            isFind[1] := TRUE;
            }
            //NC MIO-10.8 < PCH
            RecRefReference[1].GETTABLE(CurrExchRate);

            IF BufferCurrExchRate.Type = BufferCustomer.Type::Rename THEN BEGIN
              ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                     '',0,
                                     'EDB04',STRSUBSTNO(TextEDB04,RecRefBuffer.CAPTION,Text008,
                                                        RecRefReference[1].CAPTION,StrPrimaryKeyInfo),
                                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
              EXIT(FALSE);
            //NC NCS490 > PCH
            END ELSE IF BufferCurrExchRate.Type = BufferCustomer.Type::Delete THEN BEGIN
              //NC MIO-10.8 > PCH
              //IF isAdd AND isFind[1] THEN
              //  RecRefReference[1].DELETE(TRUE);
              Company.RESET;
              IF isAdd THEN
                IF Company.FINDSET THEN REPEAT
                  CurrExchRate.CHANGECOMPANY(Company.Name);
                  GLSetup1.CHANGECOMPANY(Company.Name);
                  GLSetup1.GET;

                  IF GLSetup1."LCY Code" = BufferCurrExchRate.Code THEN BEGIN
                    IF CurrExchRate.GET(ConvertCurrencyExch(BufferCurrExchRate."Relational Currency Code",
                                                            BufferCurrExchRate."Exchange Rate Type"),
                                        BufferCurrExchRate.Date) THEN
                    CurrExchRate.DELETE(TRUE);
                  END ELSE BEGIN
                    IF CurrExchRate.GET(ConvertCurrencyExch(BufferCurrExchRate.Code,BufferCurrExchRate."Exchange Rate Type"),
                                        BufferCurrExchRate.Date) THEN
                    CurrExchRate.DELETE(TRUE);
                  END;
                UNTIL Company.NEXT = 0;
              //NC MIO-10.8 < PCH
            //NC NCS490 < PCH
            END ELSE BEGIN
              //NC MIO-10.8 > PCH
              //IF isAdd AND (NOT isFind[1]) THEN BEGIN
              IF isAdd THEN BEGIN
              //NC MIO-10.8 < PCH
              //NC PIF033 > AIG
              Company.RESET;
              IF Company.FINDSET THEN
              REPEAT
                CurrExchRate.CHANGECOMPANY(Company.Name);
                GLSetup1.CHANGECOMPANY(Company.Name);
                GLSetup1.GET;
             {
                CurrExchRate.INIT;
                CurrExchRate."Currency Code" := ConvertCurrencyExch(BufferCurrExchRate.Code,BufferCurrExchRate."Exchange Rate Type");
                CurrExchRate."Starting Date" := BufferCurrExchRate.Date;
                CurrExchRate."Exchange Rate Amount" := BufferCurrExchRate."Rate Amount";
                CurrExchRate."Relational Exch. Rate Amount" := BufferCurrExchRate."Relational Rate Amount";
                CurrExchRate."Adjustment Exch. Rate Amount" := BufferCurrExchRate."Rate Amount";
                CurrExchRate."Relational Adjmt Exch Rate Amt" := BufferCurrExchRate."Relational Rate Amount";
                CurrExchRate."Relational Currency Code" := ConvertCurrencyExch(BufferCurrExchRate."Relational Currency Code",
                                                                               BufferCurrExchRate."Exchange Rate Type");
                CurrExchRate.INSERT(TRUE);
              }
                IF GLSetup1."LCY Code" = BufferCurrExchRate.Code THEN BEGIN
                  CurrExchRate.INIT;
                  CurrExchRate."Currency Code" := BufferCurrExchRate."Relational Currency Code";
                  CurrExchRate."Starting Date" := BufferCurrExchRate.Date;

                  CurrExchRate."Exchange Rate Amount" := BufferCurrExchRate."Relational Rate Amount";
                  CurrExchRate."Relational Exch. Rate Amount" := BufferCurrExchRate."Rate Amount";
                  CurrExchRate."Adjustment Exch. Rate Amount" := BufferCurrExchRate."Relational Rate Amount";
                  CurrExchRate."Relational Adjmt Exch Rate Amt" := BufferCurrExchRate."Rate Amount";

                  CurrExchRate."Relational Currency Code" := '';
                  CurrExchRate."System Create" := FALSE;
                  IF CurrExchRate.INSERT(TRUE) THEN;
                END ELSE BEGIN
                  CurrExchRate.INIT;
                  CurrExchRate."Currency Code" := BufferCurrExchRate.Code;
                  CurrExchRate."Starting Date" := BufferCurrExchRate.Date;

                  CurrExchRate."Exchange Rate Amount" := BufferCurrExchRate."Rate Amount";
                  CurrExchRate."Relational Exch. Rate Amount" := BufferCurrExchRate."Relational Rate Amount";
                  CurrExchRate."Adjustment Exch. Rate Amount" := BufferCurrExchRate."Rate Amount";
                  CurrExchRate."Relational Adjmt Exch Rate Amt" := BufferCurrExchRate."Relational Rate Amount";
                  CurrExchRate."System Create" := FALSE;
                  IF GLSetup1."LCY Code" = BufferCurrExchRate."Relational Currency Code" THEN
                    RelationalCurrency := ''
                  ELSE BEGIN
                    Currency.SETFILTER(Currency."Source Currency Code",'%1',BufferCurrExchRate."Relational Currency Code");
                    IF Currency.FINDFIRST THEN
                      RelationalCurrency := Currency.Code;
                  END;
                  CurrExchRate."Relational Currency Code" := RelationalCurrency;

                  //NC OAM46 > DP
                  IF (CurrExchRate."Relational Currency Code"=MovingDataSetup."Cross Currency Code")
                  OR  ((CurrExchRate."Relational Currency Code"='') AND (GLSetup1."LCY Code"=MovingDataSetup."Cross Currency Code"))
                  THEN
                  //NC OAM46 < DP

                  IF CurrExchRate.INSERT(TRUE) THEN;
                END;
              UNTIL Company.NEXT = 0;
              //NC PIF033 < AIG

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(CurrExchRate);
              END;
              IF isAdd THEN BEGIN
                BufferCurrExchRate.RESET;
                BufferCurrExchRate.SETFILTER("Entry No.",'<%1',BufferCurrExchRate."Entry No.");
                BufferCurrExchRate.SETRANGE(Code,BufferCurrExchRate.Code);
                BufferCurrExchRate.SETRANGE(Date,BufferCurrExchRate.Date);
                BufferCurrExchRate.SETRANGE(Status,BufferCurrExchRate.Status::New);
                BufferCurrExchRate.MODIFYALL(Status,BufferCurrExchRate.Status::"Canceled Automatic");
              END;
            END;
          END;

        DATABASE::"Buffer FI Rates" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferFIRates);
            IF NOT TestVarText(0,RecRefBuffer,BufferFIRates.FIELDCAPTION("No."),BufferFIRates."No.",'',JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestRelation(2,RecRefBuffer,RecRefBuffer.FIELD(TableCheckBlocked.GetFieldNo(RecRefBuffer,'No.')),
                                BufferFIRates."No. ID",CodeFromID,JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestVarDate(0,RecRefBuffer,BufferFIRates.FIELDCAPTION("Date Rate"),BufferFIRates."Date Rate",'>',0D,JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferFIRates."No." + ', ' + FORMAT(BufferFIRates."Date Rate");

            //NC S547 > PCH
            //IF FIRates.GET(BufferFIRates."No.",BufferFIRates."Date Rate") THEN
            IF FIRates.GET(CodeFromID,BufferFIRates."Date Rate") THEN
            //NC S547 < PCH
              isFind[1] := TRUE;
            RecRefReference[1].GETTABLE(FIRates);

            IF BufferFIRates.Type = BufferCustomer.Type::Rename THEN BEGIN
              ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                     '',0,
                                     'EDB04',STRSUBSTNO(TextEDB04,RecRefBuffer.CAPTION,Text008,
                                                        RecRefReference[1].CAPTION,StrPrimaryKeyInfo),
                                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
              EXIT(FALSE);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                FIRates.INIT;
                //NC S547 > PCH
                //FIRates."No." := BufferFIRates."No.";
                FIRates."No." := CodeFromID;
                //NC S547 < PCH
                FIRates."Date Rate" := BufferFIRates."Date Rate";
                FIRates.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(FIRates);
              END;
              IF isAdd THEN BEGIN
                BufferFIRates.RESET;
                BufferFIRates.SETFILTER("Entry No.",'<%1',BufferFIRates."Entry No.");
                BufferFIRates.SETRANGE("No.",BufferFIRates."No.");
                BufferFIRates.SETRANGE("Date Rate",BufferFIRates."Date Rate");
                BufferFIRates.SETRANGE(Status,BufferFIRates.Status::New);
                BufferFIRates.MODIFYALL(Status,BufferFIRates.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferFIRates."No. ID" <> '' THEN BEGIN
                  BufferFIRates.SETRANGE("No.");
                  BufferFIRates.SETRANGE("No. ID",BufferFIRates."No. ID");
                  BufferFIRates.MODIFYALL(Status,BufferFIRates.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;
        DATABASE::"Buffer FI Value" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferFIValue);
            IF NOT TestVarText(0,RecRefBuffer,BufferFIValue.FIELDCAPTION("FI No."),BufferFIValue."FI No.",'',JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestRelation(2,RecRefBuffer,RecRefBuffer.FIELD(TableCheckBlocked.GetFieldNo(RecRefBuffer,'FI No.')),
                   BufferFIValue."FI ID",CodeFromID,JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestVarDec(0,RecRefBuffer,BufferFIValue.FIELDCAPTION("Type Value"),
                              BufferFIValue."Type Value",'>',0,JobProcStatus) THEN
              EXIT(FALSE);
            IF NOT TestVarDate(0,RecRefBuffer,BufferFIValue.FIELDCAPTION("Start Date"),
                               BufferFIValue."Start Date",'>',0D,JobProcStatus) THEN
              EXIT(FALSE);
            StrPrimaryKeyInfo := BufferFIValue."FI No." + ', ' +
                                 FORMAT(BufferFIValue."Type Value") + ', ' +
                                 FORMAT(BufferFIValue."Start Date");

            //NC S547 > PCH
            //IF FIValue.GET(BufferFIValue."FI No.",BufferFIValue."Type Value",BufferFIValue."Start Date") THEN
            IF FIValue.GET(CodeFromID,BufferFIValue."Type Value",BufferFIValue."Start Date") THEN
            //NC S547 < PCH
              isFind[1] := TRUE;
            RecRefReference[1].GETTABLE(FIValue);

            IF BufferFIValue.Type = BufferCustomer.Type::Rename THEN BEGIN
              ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                     '',0,
                                     'EDB04',STRSUBSTNO(TextEDB04,RecRefBuffer.CAPTION,Text008,
                                                        RecRefReference[1].CAPTION,StrPrimaryKeyInfo),
                                     COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
              EXIT(FALSE);
            END ELSE BEGIN
              IF isAdd AND (NOT isFind[1]) THEN BEGIN
                FIValue.INIT;
                //NC S547 > PCH
                //FIValue."FI No." := BufferFIValue."FI No.";
                FIValue."FI No." := CodeFromID;
                //NC S547 < PCH
                FIValue."Type Value" := BufferFIValue."Type Value";
                FIValue."Start Date" := BufferFIValue."Start Date";
                FIValue.INSERT(TRUE);

                isFind[1] := TRUE;
                RecRefReference[1].GETTABLE(FIValue);
              END;
              IF isAdd THEN BEGIN
                BufferFIValue.RESET;
                BufferFIValue.SETFILTER("Entry No.",'<%1',BufferFIValue."Entry No.");
                BufferFIValue.SETRANGE("FI No.",BufferFIValue."FI No.");
                BufferFIValue.SETRANGE("Type Value",BufferFIValue."Type Value");
                BufferFIValue.SETRANGE("Start Date",BufferFIValue."Start Date");
                BufferFIValue.SETRANGE(Status,BufferFIValue.Status::New);
                BufferFIValue.MODIFYALL(Status,BufferFIValue.Status::"Canceled Automatic");
                //NC S547 > PCH
                IF BufferFIValue."FI ID" <> '' THEN BEGIN
                  BufferFIValue.SETRANGE("FI No.");
                  BufferFIValue.SETRANGE("FI ID",BufferFIValue."FI ID");
                  BufferFIValue.MODIFYALL(Status,BufferFIValue.Status::"Canceled Automatic");
                END;
                //NC S547 < PCH
              END;
            END;
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ModifyReference@1000000002(VAR RecRefBuffer@1000000001 : RecordRef;VAR RecRefReference@1101495001 : ARRAY [2] OF RecordRef;VAR isFind@1101495000 : ARRAY [2] OF Boolean;VAR JobProcStatus@1000000015 : TEMPORARY Record 50063) retOK : Boolean;
    VAR
      FASetup@1000000006 : Record 5603;
      FixedAsset@1000000013 : Record 5600;
      BufferFA@1000000012 : Record 50043;
      FACatalog@1000000011 : Record 50044;
      FALedgEntry@1000000014 : Record 5601;
      BufferDimValue@1000000010 : Record 50054;
      DimValue@1000000009 : Record 349;
      BufferCurrExchRate@1000000008 : Record 50056;
      CurrExchRate@1000000007 : Record 330;
      Company@1000000000 : Record 2000000006;
      GLSetup1@1000000002 : Record 98;
      Currency@1000000003 : Record 4;
      RelationalCurrency@1000000004 : Code[10];
      Deal@1101495002 : Record 50037;
      DimValue2@1101495003 : Record 349;
      CurrCode@1101495004 : Code[10];
      Vendor@1101495006 : Record 23;
      Customer@1101495005 : Record 18;
      MappingDealType@1000000005 : Record 50192;
    BEGIN

      FASetup.GET;

      CASE RecRefBuffer.NUMBER OF
        DATABASE::"Buffer FA" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferFA);
            RecRefReference[1].SETTABLE(FACatalog);

            IF BufferFA."Type FA" = BufferFA."Type FA"::FE THEN
              TestVarDec(1,RecRefBuffer,BufferFA.FIELDCAPTION("No of Depreciation Months"),
                                        BufferFA."No of Depreciation Months",'<>',0,JobProcStatus);

            IF NOT ModifyRefOnComFields(RecRefBuffer,RecRefReference,isFind,JobProcStatus) THEN
              EXIT(FALSE);

            IF isFind[2] THEN BEGIN
              RecRefReference[2].SETTABLE(FixedAsset);
              IF (BufferFA."Type FA" <> FixedAsset."FA Type") THEN BEGIN
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                       '',0,
                                       'EDB15',STRSUBSTNO(TextEDB15,RecRefBuffer.CAPTION,
                                                               BufferFA.FIELDCAPTION("Type FA"),
                                                               BufferFA."Type FA",
                                                               FixedAsset."FA Type"),
                                       COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              FALedgEntry.SETRANGE("FA No.",FixedAsset."No.");
              IF (BufferFA."FA Class Code" <> FixedAsset."FA Class Code") AND
                 NOT FALedgEntry.ISEMPTY THEN BEGIN
                ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                       '',0,
                                       'EDB15',STRSUBSTNO(TextEDB15,RecRefBuffer.CAPTION,
                                                               BufferFA.FIELDCAPTION("FA Class Code"),
                                                               BufferFA."FA Class Code",
                                                               FixedAsset."FA Class Code"),
                                       COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
                EXIT(FALSE);
              END;
              FixedAsset.VALIDATE("FA Class Code",BufferFA."FA Class Code");
              FixedAsset.VALIDATE(Description,COPYSTR(BufferFA.Name,1, MAXSTRLEN(FixedAsset.Description)));
              FixedAsset.VALIDATE("Description 2",
                                  COPYSTR(BufferFA.Name,MAXSTRLEN(FixedAsset.Description)+1,MAXSTRLEN(FixedAsset."Description 2")));
              //NC NCS-1662 > DP
              IF BufferFA."No of Depreciation Months"<>0 THEN
                FixedAsset.VALIDATE("Extern. No. of Deprec. Months",BufferFA."No of Depreciation Months");
              IF BufferFA."Depreciation Starting Date"<>0D THEN
                FixedAsset.VALIDATE("Extern. Deprec. Starting Date",BufferFA."Depreciation Starting Date");
              //NC NCS-1662 < DP
              FixedAsset.MODIFY(TRUE);
              RecRefReference[2].GETTABLE(FixedAsset);
            END;

          END;

        DATABASE::"Buffer Dimension Value" :
          BEGIN
            RecRefBuffer.SETTABLE(BufferDimValue);
            RecRefReference[1].SETTABLE(DimValue);

            DimValue.Name := BufferDimValue.Name;
            DimValue.Blocked := BufferDimValue.Blocked;
            DimValue."Name 2" := BufferDimValue."Name 2";
            IF BufferDimValue."Dimension Code" <> 'BOOK' THEN BEGIN
              //NC S547 > PCH
              IF BufferDimValue."Parent Code ID" <> '' THEN BEGIN
                DimValue2.RESET;
                IF DimValue."Parent Dimension Code" <> '' THEN
                  DimValue2.SETRANGE("Dimension Code",DimValue."Parent Dimension Code")
                ELSE
                  DimValue2.SETRANGE("Dimension Code",BufferDimValue."Dimension Code");
                DimValue2.SETRANGE("Rec ID",BufferDimValue."Parent Code ID");
                IF DimValue2.FINDFIRST THEN
                  DimValue."Parent Code" := DimValue2.Code
                ELSE
                  DimValue."Parent Code" := BufferDimValue."Parent Code";
              END ELSE
              //NC S547 < PCH
                DimValue."Parent Code" := BufferDimValue."Parent Code";
            END;
            DimValue.MODIFY(TRUE);
            RecRefReference[1].GETTABLE(DimValue);
          END;

        DATABASE::"Buffer Currency Exchange Rate" :
          BEGIN

          //NC OAM46 > DP
          MovingDataSetup.GET;
          MovingDataSetup.TESTFIELD("Cross Currency Code");
          //NC OAM46 < DP

          //NC PIF033 > AIG
            Company.RESET;
            IF Company.FINDSET THEN
            REPEAT
              GLSetup1.CHANGECOMPANY(Company.Name);
              GLSetup1.GET;
          //NC PIF033 < AIG
              RecRefBuffer.SETTABLE(BufferCurrExchRate);
              RecRefReference[1].SETTABLE(CurrExchRate);

              CurrExchRate.CHANGECOMPANY(Company.Name);
              //NC S1426 > PCH
              IF GLSetup1."LCY Code" = BufferCurrExchRate.Code THEN
                CurrCode := BufferCurrExchRate."Relational Currency Code"
              ELSE
                CurrCode := BufferCurrExchRate.Code;
              IF CurrExchRate.GET(CurrCode,BufferCurrExchRate.Date) THEN BEGIN
              //NC S1426 < PCH
          //NC PIF033 > AIG
          {
            CurrExchRate."Exchange Rate Amount" := BufferCurrExchRate."Rate Amount";
            CurrExchRate."Relational Exch. Rate Amount" := BufferCurrExchRate."Relational Rate Amount";
            CurrExchRate."Adjustment Exch. Rate Amount" := BufferCurrExchRate."Rate Amount";
            CurrExchRate."Relational Adjmt Exch Rate Amt" := BufferCurrExchRate."Relational Rate Amount";
          }
              IF GLSetup1."LCY Code" = BufferCurrExchRate.Code THEN BEGIN
                CurrExchRate."Currency Code" := BufferCurrExchRate."Relational Currency Code";
                CurrExchRate."Exchange Rate Amount" := BufferCurrExchRate."Relational Rate Amount";
                CurrExchRate."Relational Exch. Rate Amount" := BufferCurrExchRate."Rate Amount";
                CurrExchRate."Adjustment Exch. Rate Amount" := BufferCurrExchRate."Relational Rate Amount";
                CurrExchRate."Relational Adjmt Exch Rate Amt" := BufferCurrExchRate."Rate Amount";
                CurrExchRate."Relational Currency Code" := '';
              END ELSE BEGIN
                CurrExchRate."Currency Code" := BufferCurrExchRate.Code;
                CurrExchRate."Exchange Rate Amount" := BufferCurrExchRate."Rate Amount";
                CurrExchRate."Relational Exch. Rate Amount" := BufferCurrExchRate."Relational Rate Amount";
                CurrExchRate."Adjustment Exch. Rate Amount" := BufferCurrExchRate."Rate Amount";
                CurrExchRate."Relational Adjmt Exch Rate Amt" := BufferCurrExchRate."Relational Rate Amount";
                IF GLSetup1."LCY Code" = BufferCurrExchRate."Relational Currency Code" THEN
                  RelationalCurrency := ''
                ELSE BEGIN
                  Currency.SETFILTER(Currency."Source Currency Code",'%1',BufferCurrExchRate."Relational Currency Code");
                  IF Currency.FINDFIRST THEN
                    RelationalCurrency := Currency.Code;
                END;
                CurrExchRate."Relational Currency Code" := RelationalCurrency;
             END;

          //NC PIF033 < AIG
            CurrExchRate."System Create" := FALSE;

                  //NC OAM46 > DP
                  IF (CurrExchRate."Relational Currency Code"=MovingDataSetup."Cross Currency Code")
                  OR  ((CurrExchRate."Relational Currency Code"='') AND (GLSetup1."LCY Code"=MovingDataSetup."Cross Currency Code"))
                  //NC S1426 > PCH
                  OR (GLSetup1."LCY Code" = BufferCurrExchRate.Code)
                  //NC S1426 < PCH
                  THEN
                  //NC OAM46 < DP

              IF CurrExchRate.MODIFY(TRUE) THEN;
              RecRefReference[1].GETTABLE(CurrExchRate);
              //NC S1426 > PCH
              END;
              //NC S1426 < PCH
            //NC PIF033 < AIG
            UNTIL Company.NEXT = 0;
           //NC PIF033 > AIG

          END;

        ELSE BEGIN

          retOK := ModifyRefOnComFields(RecRefBuffer,RecRefReference,isFind,JobProcStatus);

          IF retOK AND (RecRefBuffer.NUMBER = DATABASE::"Buffer Deal") THEN BEGIN
            RecRefReference[1].SETTABLE(Deal);
            Deal.CopyUsingLE(Deal."Using LE1");
            Deal.CopyUsingLE(Deal."Using LE2");
            Deal.CopyUsingLE(Deal."Using LE3");
            //NC MTD002 > AIG
            Deal.CreateCounterparty;
            //NC MTD002 < AIG

            //NC NCS-1559 > DP
            {
            //NC NCS-1131 > DP
            IF DealType.GET(Deal."Type Deal") AND DealType."Create Agreement" THEN
              Deal.CreateAgreement;
            //NC NCS-1131 < DP
            }
            //NC NCS-1559 < DP
          END;

          EXIT(retOK);

        END;

      END;

      EXIT(TRUE);
    END;

    PROCEDURE ModifyRefOnComFields@1000000006(VAR RecRefBuffer@1000000003 : RecordRef;VAR RecRefReference@1000000002 : ARRAY [2] OF RecordRef;VAR isFind@1000000001 : ARRAY [2] OF Boolean;VAR JobProcStatus@1000000000 : TEMPORARY Record 50063) : Boolean;
    VAR
      ComFieldsSetup@1000000004 : Record 50055;
      FldRecFrom@1000000007 : FieldRef;
      FldRecTo@1000000006 : FieldRef;
      FldRecTo2@1000000005 : FieldRef;
      FldRecTo3@1000000009 : FieldRef;
      isTestRelation@1000000008 : Boolean;
      ID@1101495002 : Code[50];
      FldRecID@1101495001 : FieldRef;
      CodeFromID@1101495000 : Code[20];
      iFld@1000000010 : Integer;
    BEGIN

      ComFieldsSetup.SETRANGE("Table ID Buffer",RecRefBuffer.NUMBER);
      ComFieldsSetup.SETRANGE("Table ID",RecRefReference[1].NUMBER);
      ComFieldsSetup.SETFILTER("Field No. Buffer",'<>%1',0);
      ComFieldsSetup.SETFILTER("Field No.",'<>%1',0);
      ComFieldsSetup.SETRANGE(Block,FALSE);
      IF ComFieldsSetup.FINDSET THEN REPEAT

        //NC NCS-1131 > DP
        IF NOT (ValueCancelRelation AND ComFieldsSetup."Control By Buffer") THEN BEGIN
        //NC NCS-1131 < DP

        FldRecFrom := RecRefBuffer.FIELD(ComFieldsSetup."Field No. Buffer");


        IF NOT TestValue(RecRefBuffer,FldRecFrom,ComFieldsSetup."Check Fill Value",JobProcStatus) THEN
          EXIT(FALSE);
        //NC S547 > PCH
        ID := '';
        CodeFromID := '';
        IF ComFieldsSetup."Field No. Buffer ID" > 0 THEN BEGIN
          FldRecID := RecRefBuffer.FIELD(ComFieldsSetup."Field No. Buffer ID");
          ID := FldRecID.VALUE;
          // отключена проверка на обязательность ID на проводке
          //IF FORMAT(FldRecFrom.VALUE) <> '' THEN  // ID д.б. заполнено елси заполнен Code
          //  IF NOT TestValue(RecRefBuffer,FldRecID,ComFieldsSetup."Check Fill Value"::Error,JobProcStatus) THEN
          //    EXIT(FALSE);
        END;
        //NC S547 < PCH
        isTestRelation := TestRelation(ComFieldsSetup."Check Relation Value",RecRefBuffer,FldRecFrom,
                                       ID,CodeFromID,JobProcStatus);
        IF NOT isTestRelation AND
           (ComFieldsSetup."Check Relation Value" IN [ComFieldsSetup."Check Relation Value"::Error,
                                                      ComFieldsSetup."Check Relation Value"::Delay]) THEN
          EXIT(FALSE);

        FldRecTo := RecRefReference[1].FIELD(ComFieldsSetup."Field No.");
        IF ComFieldsSetup."Field No. 2" <> 0 THEN
          FldRecTo2 := RecRefReference[1].FIELD(ComFieldsSetup."Field No. 2");
        IF UPPERCASE(FORMAT(FldRecTo.TYPE)) IN ['TEXT','CODE'] THEN BEGIN
          IF FldRecTo.RELATION = DATABASE::Currency THEN
            ValidateField(isTestRelation,
                          FldRecTo,COPYSTR(FORMAT(ConvertCurrencyCode(FORMAT(FldRecFrom.VALUE))), 1, FldRecTo.LENGTH))
          ELSE
          //NC S1884 > PCH
          IF FldRecTo.RELATION = DATABASE::"Deal Type" THEN BEGIN
            iFld := TableCheckBlocked.GetFieldNo(RecRefReference[1],'Original Type Deal');
            IF iFld <> 0 THEN BEGIN
              FldRecTo3 := RecRefReference[1].FIELD(iFld);
              ValidateField(isTestRelation,
                            FldRecTo3,COPYSTR(FORMAT(FldRecFrom.VALUE), 1, FldRecTo.LENGTH))
            END;
            ValidateField(isTestRelation,
                          FldRecTo,COPYSTR(FORMAT(ConvertTypeDeal(FORMAT(FldRecFrom.VALUE))), 1, FldRecTo.LENGTH))
          END ELSE
          //NC S1884 < PCH
          //NC S547 > PCH
              IF (ID <> '') AND (CodeFromID <> '') THEN
            ValidateField(isTestRelation,
                          FldRecTo,COPYSTR(FORMAT(CodeFromID), 1, FldRecTo.LENGTH))
          ELSE
          //NC S547 < PCH
            ValidateField(isTestRelation,
                          FldRecTo,COPYSTR(FORMAT(FldRecFrom.VALUE), 1, FldRecTo.LENGTH));
          IF ComFieldsSetup."Field No. 2" <> 0 THEN
            ValidateField(isTestRelation,
                          FldRecTo2, COPYSTR(FORMAT(FldRecFrom.VALUE), FldRecTo.LENGTH+1, FldRecTo2.LENGTH));
        END ELSE
          FldRecTo.VALIDATE(FldRecFrom.VALUE);

        //NC NCS-1131 > DP
        END;
        //NC NCS-1131 < DP

      UNTIL ComFieldsSetup.NEXT = 0;
      RecRefReference[1].MODIFY(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE ValidateField@1000000016(isValidate@1000000003 : Boolean;VAR FldRec@1000000000 : FieldRef;Value@1000000001 : Text[250]);
    BEGIN
      IF isValidate THEN
        FldRec.VALIDATE(Value)
      ELSE
        FldRec.VALUE(Value);
    END;

    PROCEDURE AddDimension@1000000062(VAR RecRefBuffer@1000000001 : RecordRef;VAR RecRefReference@1101495001 : ARRAY [2] OF RecordRef;VAR isFind@1101495000 : ARRAY [2] OF Boolean;VAR JobProcStatus@1000000009 : TEMPORARY Record 50063) : Boolean;
    VAR
      MovingDataSetup@1000000007 : Record 50064;
      DefDim@1000000002 : Record 352;
      iFldBook@1000000003 : Integer;
      FldRefBook@1000000004 : FieldRef;
      iFldBook2@1000000008 : Integer;
      FldRefBook2@1000000000 : FieldRef;
      iFldProfitCenter@1000000006 : Integer;
      FldRefProfitCenter@1000000005 : FieldRef;
    BEGIN
      MovingDataSetup.GET;

      CASE RecRefBuffer.NUMBER OF
        DATABASE::"Buffer Deal",
        DATABASE::"Buffer Customer",
        //NC MTF01 > PCH
        DATABASE::"Buffer Vendor",
        //NC MTF01 < PCH
        DATABASE::"Buffer Financial Instrument",
        DATABASE::"Buffer Bank Account" :
          BEGIN
            //NC S547 > PCH
            //iFldBook := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Book');
            iFldBook := TableCheckBlocked.GetFieldNo(RecRefReference[1],'Book');
            //NC S547 < PCH
            IF iFldBook <> 0 THEN BEGIN
              //NC S547 > PCH
              //FldRefBook := RecRefBuffer.FIELD(iFldBook);
              FldRefBook := RecRefReference[1].FIELD(iFldBook);
              //NC S547 < PCH
              IF NOT CheckDim(RecRefBuffer, RecRefReference[1], MovingDataSetup."BOOK Dimension Code",
                                                                FORMAT(FldRefBook.VALUE),JobProcStatus) THEN
                EXIT(FALSE);
            END;
            //NC S547 > PCH
            //iFldBook2 := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Book Rt.');
            iFldBook2 := TableCheckBlocked.GetFieldNo(RecRefReference[1],'Book Rt.');
            //NC S547 < PCH
            IF iFldBook2 <> 0 THEN BEGIN
              //NC S547 > PCH
              //FldRefBook2 := RecRefBuffer.FIELD(iFldBook2);
              FldRefBook2 := RecRefReference[1].FIELD(iFldBook2);
              //NC S547 < PCH
              IF NOT CheckDim(RecRefBuffer, RecRefReference[1], MovingDataSetup."BOOK Dimension Code",
                                                                FORMAT(FldRefBook2.VALUE),JobProcStatus) THEN
                EXIT(FALSE);
            END;

            //NC S547 > PCH
            //iFldProfitCenter := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Profit Center');
            iFldProfitCenter := TableCheckBlocked.GetFieldNo(RecRefReference[1],'Profit Center');
            //NC S547 < PCH
            IF iFldProfitCenter <> 0 THEN BEGIN
              //NC S547 > PCH
              //FldRefProfitCenter := RecRefBuffer.FIELD(iFldProfitCenter);
              FldRefProfitCenter := RecRefReference[1].FIELD(iFldProfitCenter);
              //NC S547 < PCH
              IF NOT CheckDim(RecRefBuffer, RecRefReference[1], MovingDataSetup."PROFIT CENTER Dimension Code",
                                                                FORMAT(FldRefProfitCenter.VALUE),JobProcStatus) THEN
                EXIT(FALSE);
            END;
          END;
        DATABASE::"Buffer FA" :
          BEGIN
            IF isFind[1] THEN BEGIN
              //NC S547 > PCH
              //iFldBook := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Book');
              iFldBook := TableCheckBlocked.GetFieldNo(RecRefReference[1],'Book');
              //NC S547 < PCH
              IF iFldBook <> 0 THEN BEGIN
                //NC S547 > PCH
                //FldRefBook := RecRefBuffer.FIELD(iFldBook);
                FldRefBook := RecRefReference[1].FIELD(iFldBook);
                //NC S547 < PCH
                IF NOT CheckDim(RecRefBuffer, RecRefReference[1], MovingDataSetup."BOOK Dimension Code",
                                                                   FORMAT(FldRefBook.VALUE),JobProcStatus) THEN
                  EXIT(FALSE);
              END;

              //NC S547 > PCH
              //iFldProfitCenter := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Profit Center');
              iFldProfitCenter := TableCheckBlocked.GetFieldNo(RecRefReference[1],'Profit Center');
              //NC S547 < PCH
              IF iFldProfitCenter <> 0 THEN BEGIN
                //NC S547 > PCH
                //FldRefProfitCenter := RecRefBuffer.FIELD(iFldProfitCenter);
                FldRefProfitCenter := RecRefReference[1].FIELD(iFldProfitCenter);
                //NC S547 < PCH
                IF NOT CheckDim(RecRefBuffer, RecRefReference[1], MovingDataSetup."PROFIT CENTER Dimension Code",
                                                                   FORMAT(FldRefProfitCenter.VALUE),JobProcStatus) THEN
                  EXIT(FALSE);
              END;
            END;
            IF isFind[2] THEN BEGIN
              //NC S547 > PCH
              //iFldBook := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Book');
              iFldBook := TableCheckBlocked.GetFieldNo(RecRefReference[1],'Book');
              //NC S547 < PCH
              IF iFldBook <> 0 THEN BEGIN
                //NC S547 > PCH
                //FldRefBook := RecRefBuffer.FIELD(iFldBook);
                FldRefBook := RecRefReference[1].FIELD(iFldBook);
                //NC S547 < PCH
                IF NOT AddDefDim(RecRefBuffer, RecRefReference[2], MovingDataSetup."BOOK Dimension Code",
                                                                   FORMAT(FldRefBook.VALUE),JobProcStatus) THEN
                  EXIT(FALSE);
              END;

              //NC S547 > PCH
              //iFldProfitCenter := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Profit Center');
              iFldProfitCenter := TableCheckBlocked.GetFieldNo(RecRefReference[1],'Profit Center');
              //NC S547 < PCH
              IF iFldProfitCenter <> 0 THEN BEGIN
                //NC S547 > PCH
                //FldRefProfitCenter := RecRefBuffer.FIELD(iFldProfitCenter);
                FldRefProfitCenter := RecRefReference[1].FIELD(iFldProfitCenter);
                //NC S547 > PCH
                IF NOT AddDefDim(RecRefBuffer, RecRefReference[2], MovingDataSetup."PROFIT CENTER Dimension Code",
                                                                   FORMAT(FldRefProfitCenter.VALUE),JobProcStatus) THEN
                  EXIT(FALSE);
              END;
            END;
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AddDefDim@1000000078(VAR RecRefBuffer@1000000005 : RecordRef;VAR RecRefReference@1000000000 : RecordRef;DimCode@1000000002 : Code[20];DimValue@1000000001 : Code[20];VAR JobProcStatus@1000000006 : TEMPORARY Record 50063) : Boolean;
    VAR
      DimVal@1000000004 : Record 349;
      DefDim@1000000003 : Record 352;
    BEGIN
      IF DimValue = '' THEN
        EXIT(TRUE);

      IF NOT CheckDim(RecRefBuffer,RecRefReference,DimCode,DimValue,JobProcStatus) THEN
        EXIT(FALSE);

      DefDim."Table ID" := RecRefReference.NUMBER;
      DefDim."No." := TableCheckBlocked.GetPrimKeyValue(RecRefReference);
      DefDim."Dimension Code" := DimCode;
      DefDim."Dimension Value Code" := DimValue;
      DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
      IF NOT DefDim.INSERT(TRUE) THEN
        DefDim.MODIFY(TRUE);
      EXIT(TRUE);
    END;

    PROCEDURE CheckDim@1101495002(VAR RecRefBuffer@1000000005 : RecordRef;VAR RecRefReference@1000000000 : RecordRef;DimCode@1000000002 : Code[20];DimValue@1000000001 : Code[20];VAR JobProcStatus@1000000006 : TEMPORARY Record 50063) : Boolean;
    VAR
      DimVal@1000000004 : Record 349;
      DefDim@1000000003 : Record 352;
    BEGIN
      IF DimValue = '' THEN
        EXIT(TRUE);
      IF NOT DimVal.GET(DimCode,DimValue) THEN BEGIN
        ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                               '',0,
                               'EDB16',STRSUBSTNO(TextEDB16,RecRefBuffer.CAPTION,DimCode,DimValue),COMPANYNAME,RecRefBuffer,
                               JobProcStatus."Line No.");

        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TestRelation@1101495017(ErrorType@1000000000 : 'Error,Warning,Delay';VAR RecRef@1101495006 : RecordRef;FldRef@1101495000 : FieldRef;ID@1101495009 : Code[50];VAR CodeFromID@1101495008 : Code[20];VAR JobProcStatus@1000000004 : TEMPORARY Record 50063) : Boolean;
    VAR
      RecRefRelation@1101495001 : RecordRef;
      KeyRef@1101495002 : KeyRef;
      fldNo@1101495003 : Integer;
      FldRefRelation@1101495004 : FieldRef;
      isFindFiled@1101495005 : Boolean;
      ValueRel@1101495007 : Code[20];
      ErrCode@1000000002 : Code[10];
      TxtErr@1000000001 : Text[250];
      SubTxtErr@1000000003 : Text[250];
      FldNoRelationID@1101495012 : Integer;
      FldRefRelationID@1101495011 : FieldRef;
      FldRefDimCode@1101495010 : FieldRef;
    BEGIN
      IF ErrorType = ErrorType::Error THEN BEGIN
        ErrCode := 'EDB17';
        SubTxtErr := TextEDB17;
      END ELSE BEGIN
        ErrCode := 'EDB18';
        SubTxtErr := TextEDB18;
      END;
      //NC S547 > PCH
      CodeFromID := '';
      //NC S547 < PCH

      IF FORMAT(FldRef.VALUE) = '' THEN
        EXIT(TRUE);
      IF FldRef.RELATION = 0 THEN
        EXIT(TRUE);
      RecRefRelation.OPEN(FldRef.RELATION);
      ValueRel := FldRef.VALUE;
      //NC S547 > PCH
      CodeFromID := ValueRel;
      //NC S547 < PCH

      IF FldRef.RELATION = DATABASE::Currency THEN BEGIN
        ValueRel := ConvertCurrencyCode(ValueRel);
        IF ValueRel = 'ERROR' THEN BEGIN
          ValueRel := FldRef.VALUE;
          TxtErr := STRSUBSTNO(SubTxtErr,RecRef.CAPTION,STRSUBSTNO(Text009,RecRefRelation.CAPTION,ValueRel));
          IF ErrorType = ErrorType::Delay THEN
            CheckDelay(ErrorType,ErrCode,TxtErr,RecRef,JobProcStatus)
          ELSE
            ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                                   '',0,
                                   ErrCode,TxtErr,
                                   COMPANYNAME,RecRef,JobProcStatus."Line No.");
          EXIT(FALSE);
        END;
      END;

      //NC S1884 > PCH
      IF FldRef.RELATION = DATABASE::"Deal Type" THEN BEGIN
        ValueRel := ConvertTypeDeal(ValueRel);
      END;
      //NC S1884 < PCH

      IF ValueRel = '' THEN
        EXIT(TRUE);

      isFindFiled := FALSE;
      //NC S547 > PCH
      IF FldRef.RELATION = DATABASE::"Dimension Code Buffer" THEN BEGIN
        FldRefDimCode :=  RecRefRelation.FIELD(TableCheckBlocked.GetFieldNo(RecRefRelation,'Dimension Code'));
        CASE FldRef.NAME OF
          'Book' : FldRefDimCode.SETRANGE(MovingDataSetup."BOOK Dimension Code");
          'Book Rt.' : FldRefDimCode.SETRANGE(MovingDataSetup."BOOK Dimension Code");
          'Profit Center' : FldRefDimCode.SETRANGE(MovingDataSetup."PROFIT CENTER Dimension Code");
        END;
      END;

      IF ID <> '' THEN BEGIN
        FldNoRelationID := TableCheckBlocked.GetFieldNo(RecRefRelation,'Rec ID');
        IF FldNoRelationID > 0 THEN BEGIN
          FldRefRelationID := RecRefRelation.FIELD(FldNoRelationID);
          FldRefRelationID.SETRANGE(ID);
          IF RecRefRelation.FINDFIRST THEN BEGIN
            CodeFromID := TableCheckBlocked.GetPrimKeyValue(RecRefRelation);
            isFindFiled := TRUE;
          END ELSE
            FldRefRelationID.SETRANGE;
        END;
      END;
      IF NOT isFindFiled THEN BEGIN
      //NC S547 < PCH
        KeyRef := RecRefRelation.KEYINDEX(1);
        FOR fldNo := 1 TO KeyRef.FIELDCOUNT DO BEGIN
          FldRefRelation := KeyRef.FIELDINDEX(fldNo);
          IF isFindFiled THEN
            isFindFiled := isFindFiled // если фильтер уже наложен
          ELSE IF KeyRef.FIELDCOUNT = 1 THEN BEGIN
            FldRefRelation.SETRANGE(ValueRel);
            isFindFiled := TRUE;
          END ELSE IF UPPERCASE(FldRefRelation.NAME) IN ['NO.','CODE','DEAL ID', 'ID'] THEN BEGIN
            FldRefRelation.SETRANGE(ValueRel);
            isFindFiled := TRUE;
          END;
        END;
      //NC S547 > PCH
      END;
      //NC S547 < PCH

      IF isFindFiled THEN BEGIN
        IF RecRefRelation.ISEMPTY THEN
          TxtErr := STRSUBSTNO(SubTxtErr,RecRef.CAPTION,STRSUBSTNO(Text009,RecRefRelation.CAPTION,ValueRel));
      END ELSE BEGIN
        TxtErr := STRSUBSTNO(SubTxtErr,RecRef.CAPTION,STRSUBSTNO(Text009,RecRefRelation.CAPTION,ValueRel));
      END;

      IF TxtErr <> '' THEN BEGIN
        IF ErrorType = ErrorType::Delay THEN
          CheckDelay(ErrorType,ErrCode,TxtErr,RecRef,JobProcStatus)
        ELSE
          ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                                 '',0,
                                 ErrCode,TxtErr,
                                 COMPANYNAME,RecRef,JobProcStatus."Line No.");
      END;

      EXIT(TxtErr = '');
    END;

    PROCEDURE TestValue@1000000001(VAR RecRef@1000000001 : RecordRef;FldRef@1101495000 : FieldRef;CheckFillValue@1000000000 : ' ,Warning,Error,Delay';VAR JobProcStatus@1000000007 : TEMPORARY Record 50063) : Boolean;
    VAR
      ErrorType@1000000006 : 'Error,Warning,Delay';
      VarDec@1000000002 : Decimal;
      VarTime@1000000003 : Time;
      VarDate@1000000004 : Date;
      VarDateTime@1000000005 : DateTime;
    BEGIN
      CASE CheckFillValue OF
        CheckFillValue::" " :
          EXIT(TRUE);
        CheckFillValue::Warning :
          ErrorType := ErrorType::Warning;
        CheckFillValue::Error :
          ErrorType := ErrorType::Error;
        CheckFillValue::Delay :
          ErrorType := ErrorType::Delay;
      END;
      CASE UPPERCASE(FORMAT(FldRef.TYPE)) OF
        'TEXT', 'CODE' :
          EXIT(TestVarText(ErrorType,RecRef,FldRef.CAPTION,FORMAT(FldRef.VALUE),'',JobProcStatus));
        'INTEGER', 'DECIMAL', 'OPTION' :
          BEGIN
            EVALUATE(VarDec,FORMAT(FldRef.VALUE));
            EXIT(TestVarDec(ErrorType,RecRef,FldRef.CAPTION,VarDec,'<>',0,JobProcStatus));
          END;
        'DATE' :
          BEGIN
            EVALUATE(VarDate,FORMAT(FldRef.VALUE));
            EXIT(TestVarDate(ErrorType,RecRef,FldRef.CAPTION,VarDate,'<>',0D,JobProcStatus));
          END;
        'TIME' :
          BEGIN
            EVALUATE(VarTime,FORMAT(FldRef.VALUE));
            EXIT(TestVarTime(ErrorType,RecRef,FldRef.CAPTION,VarTime,'<>',0T,JobProcStatus));
          END;
        'DATETIME' :
          BEGIN
            EVALUATE(VarDateTime,FORMAT(FldRef.VALUE));
            EXIT(TestVarDateTime(ErrorType,RecRef,FldRef.CAPTION,VarDateTime,'<>',CREATEDATETIME(0D,0T),JobProcStatus));
          END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckDelay@1000000004(ErrorType@1000000012 : 'Error,Warning,Delay';ErrCode@1000000013 : Code[10];TxtErr@1000000011 : Text[250];VAR RecRefBuffer@1000000000 : RecordRef;VAR JobProcStatus@1000000015 : TEMPORARY Record 50063);
    VAR
      iFldDelay@1000000006 : Integer;
      FldRefDelay@1000000005 : FieldRef;
      varDelay@1000000007 : Boolean;
      iFldDelayTech@1000000004 : Integer;
      FldRefDelayTech@1000000003 : FieldRef;
      varDelayTech@1000000008 : Boolean;
      iFldDelayErrorLineNo@1000000002 : Integer;
      FldRefDelayErrorLineNo@1000000001 : FieldRef;
      varDelayErrorLineNo@1000000009 : Integer;
      ErrorJournal2@1000000010 : Record 50023;
      isAddMess@1000000014 : Boolean;
    BEGIN

      iFldDelay := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Delay');
      IF iFldDelay = 0 THEN
        ERROR(Text003,RecRefBuffer.CAPTION);
      FldRefDelay := RecRefBuffer.FIELD(iFldDelay);
      varDelay := FldRefDelay.VALUE;
      iFldDelayTech := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Delay (Tech.)');
      IF iFldDelayTech = 0 THEN
        ERROR(Text003,RecRefBuffer.CAPTION);
      FldRefDelayTech := RecRefBuffer.FIELD(iFldDelayTech);
      varDelayTech := FldRefDelayTech.VALUE;
      iFldDelayErrorLineNo := TableCheckBlocked.GetFieldNo(RecRefBuffer,'Delay Error Line No.');
      IF iFldDelayErrorLineNo = 0 THEN
        ERROR(Text003,RecRefBuffer.CAPTION);
      FldRefDelayErrorLineNo := RecRefBuffer.FIELD(iFldDelayErrorLineNo);
      varDelayErrorLineNo := FldRefDelayErrorLineNo.VALUE;

      FldRefDelayTech.VALUE(TRUE);

      IF NOT varDelay THEN BEGIN
        isAddMess := TRUE;
      END ELSE IF varDelay THEN BEGIN
        //NC NOS-26 > SPA
        {
        IF ErrorJournal2.GET(JobProcStatus."Company No.",ErrorJournal2."Error Group"::Load,varDelayErrorLineNo) THEN BEGIN
        }
        IF ErrorJournal2.GET(varDelayErrorLineNo) THEN BEGIN
        //NC NOS-26 < SPA
          IF TxtErr = ErrorJournal2.Description THEN
            isAddMess := FALSE
          ELSE
            isAddMess := TRUE;
        END ELSE
          isAddMess := TRUE;
      END;

      IF isAddMess THEN BEGIN
        ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                               '',0,
                               ErrCode,TxtErr,
                               COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");
        //NC NOS-26 > SPA
        //FldRefDelayErrorLineNo.VALUE(ErrorJournal."Line No.");
        FldRefDelayErrorLineNo.VALUE(ErrorJournal."Entry No.");
        //NC NOS-26 < SPA
      END;
    END;

    PROCEDURE TestVarText@1210001(ErrorType@1000000000 : 'Error,Warning,Delay';VAR RecRefBuffer@1101495000 : RecordRef;NameVar@1210003 : Text[250];Var@1210000 : Text[250];Value@1210001 : Text[250];VAR JobProcStatus@1000000002 : TEMPORARY Record 50063) : Boolean;
    VAR
      ErrCode@1000000001 : Code[10];
      TxtErr@1100066000 : Text[250];
    BEGIN
      IF ErrorType = ErrorType::Error THEN BEGIN
        ErrCode := 'EDB17';
        TxtErr := TextEDB17;
      END ELSE BEGIN
        ErrCode := 'EDB18';
        TxtErr := TextEDB18;
      END;
      IF ((Value = '')  AND ("Var" = '')) THEN BEGIN
        TxtErr := STRSUBSTNO(TxtErr,RecRefBuffer.CAPTION,STRSUBSTNO(Text005,NameVar,Value));

        IF ErrorType = ErrorType::Delay THEN
          CheckDelay(ErrorType,ErrCode,TxtErr,RecRefBuffer,JobProcStatus)
        ELSE
          ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                                 '',0,
                                 ErrCode,TxtErr,
                                 COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");

        EXIT(ErrorType = ErrorType::Warning);
      END ELSE IF ((Value <> '') AND (Value <> "Var")) THEN BEGIN

        ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                               '',0,
                               ErrCode,STRSUBSTNO(TxtErr,RecRefBuffer.CAPTION,STRSUBSTNO(Text006,NameVar,Value)),
                               COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");

        EXIT(ErrorType = ErrorType::Warning);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TestVarDec@1210005(ErrorType@1000000001 : 'Error,Warning,Delay';VAR RecRefBuffer@1101495000 : RecordRef;NameVar@1100066000 : Text[250];Var@1210000 : Decimal;Condition@1210006 : Code[2];Value@1210001 : Decimal;VAR JobProcStatus@1000000002 : TEMPORARY Record 50063) : Boolean;
    VAR
      IsCondition@1210007 : Boolean;
      ErrCode@1000000000 : Code[10];
      TxtErr@1100066001 : Text[250];
    BEGIN
      IF ErrorType = ErrorType::Error THEN BEGIN
        ErrCode := 'EDB17';
        TxtErr := TextEDB17;
      END ELSE BEGIN
        ErrCode := 'EDB18';
        TxtErr := TextEDB18;
      END;
      IsCondition := FALSE;
      CASE Condition OF
        '='  : IsCondition := ("Var" = Value);
        '>'  : IsCondition := ("Var" > Value);
        '>=' : IsCondition := ("Var" >= Value);
        '<'  : IsCondition := ("Var" < Value);
        '<=' : IsCondition := ("Var" <= Value);
        '<>' : IsCondition := ("Var" <> Value);
        ELSE   IsCondition := ("Var" = Value);
      END;

      IF NOT IsCondition THEN BEGIN

        ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                               '',0,
                               ErrCode,STRSUBSTNO(TxtErr,RecRefBuffer.CAPTION,STRSUBSTNO(Text007,NameVar,Condition,Value)),
                               COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");

        EXIT(ErrorType = ErrorType::Warning);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TestVarDate@1100066006(ErrorType@1000000000 : 'Error,Warning,Delay';VAR RecRefBuffer@1101495000 : RecordRef;NameVar@1100066000 : Text[250];Var@1210000 : Date;Condition@1210006 : Code[2];Value@1210001 : Date;VAR JobProcStatus@1000000002 : TEMPORARY Record 50063) : Boolean;
    VAR
      IsCondition@1210007 : Boolean;
      ErrCode@1000000001 : Code[10];
      TxtErr@1100066001 : Text[250];
    BEGIN
      IF ErrorType = ErrorType::Error THEN BEGIN
        ErrCode := 'EDB17';
        TxtErr := TextEDB17;
      END ELSE BEGIN
        ErrCode := 'EDB18';
        TxtErr := TextEDB18;
      END;
      IsCondition := FALSE;
      CASE Condition OF
        '='  : IsCondition := ("Var" = Value);
        '>'  : IsCondition := ("Var" > Value);
        '>=' : IsCondition := ("Var" >= Value);
        '<'  : IsCondition := ("Var" < Value);
        '<=' : IsCondition := ("Var" <= Value);
        '<>' : IsCondition := ("Var" <> Value);
        ELSE   IsCondition := ("Var" = Value);
      END;

      IF NOT IsCondition THEN BEGIN

        ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                               '',0,
                               ErrCode,STRSUBSTNO(TxtErr,RecRefBuffer.CAPTION,STRSUBSTNO(Text007,NameVar,Condition,Value)),
                               COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");

        EXIT(ErrorType = ErrorType::Warning);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TestVarTime@1100066011(ErrorType@1000000001 : 'Error,Warning,Delay';VAR RecRefBuffer@1101495000 : RecordRef;NameVar@1100066000 : Text[250];Var@1210000 : Time;Condition@1210006 : Code[2];Value@1210001 : Time;VAR JobProcStatus@1000000002 : TEMPORARY Record 50063) : Boolean;
    VAR
      IsCondition@1210007 : Boolean;
      ErrCode@1000000000 : Code[10];
      TxtErr@1100066001 : Text[250];
    BEGIN
      IF ErrorType = ErrorType::Error THEN BEGIN
        ErrCode := 'EDB17';
        TxtErr := TextEDB17;
      END ELSE BEGIN
        ErrCode := 'EDB18';
        TxtErr := TextEDB18;
      END;
      IsCondition := FALSE;
      CASE Condition OF
        '='  : IsCondition := ("Var" = Value);
        '>'  : IsCondition := ("Var" > Value);
        '>=' : IsCondition := ("Var" >= Value);
        '<'  : IsCondition := ("Var" < Value);
        '<=' : IsCondition := ("Var" <= Value);
        '<>' : IsCondition := ("Var" <> Value);
        ELSE   IsCondition := ("Var" = Value);
      END;

      IF NOT IsCondition THEN BEGIN

        ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                               '',0,
                               ErrCode,STRSUBSTNO(TxtErr,RecRefBuffer.CAPTION,STRSUBSTNO(Text007,NameVar,Condition,Value)),
                               COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");

        EXIT(ErrorType = ErrorType::Warning);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TestVarDateTime@1000000017(ErrorType@1000000001 : 'Error,Warning,Delay';VAR RecRefBuffer@1101495000 : RecordRef;NameVar@1100066000 : Text[250];Var@1210000 : DateTime;Condition@1210006 : Code[2];Value@1210001 : DateTime;VAR JobProcStatus@1000000002 : TEMPORARY Record 50063) : Boolean;
    VAR
      IsCondition@1210007 : Boolean;
      ErrCode@1000000000 : Code[10];
      TxtErr@1100066001 : Text[250];
    BEGIN
      IF ErrorType = ErrorType::Error THEN BEGIN
        ErrCode := 'EDB17';
        TxtErr := TextEDB17;
      END ELSE BEGIN
        ErrCode := 'EDB18';
        TxtErr := TextEDB18;
      END;
      IsCondition := FALSE;
      CASE Condition OF
        '='  : IsCondition := ("Var" = Value);
        '>'  : IsCondition := ("Var" > Value);
        '>=' : IsCondition := ("Var" >= Value);
        '<'  : IsCondition := ("Var" < Value);
        '<=' : IsCondition := ("Var" <= Value);
        '<>' : IsCondition := ("Var" <> Value);
        ELSE   IsCondition := ("Var" = Value);
      END;

      IF NOT IsCondition THEN BEGIN

        ErrorJournal.AddError1(JobProcStatus."Company No.",ErrorJournal."Error Group"::Load,ErrorType,
                               '',0,
                               ErrCode,STRSUBSTNO(TxtErr,RecRefBuffer.CAPTION,STRSUBSTNO(Text007,NameVar,Condition,Value)),
                               COMPANYNAME,RecRefBuffer,JobProcStatus."Line No.");

        EXIT(ErrorType = ErrorType::Warning);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ConvertCurrencyCode@1101495007(BufferCode@1210000 : Code[10]) : Code[10];
    VAR
      Currency@1210001 : Record 4;
    BEGIN
      IF BufferCode='' THEN EXIT('');
      GLSetup.GET;
      // NCSB IF GLSetup."LCY Code" = BufferCode THEN
      // NCSB   EXIT('');
      Currency.SETFILTER(Currency."Source Currency Code",'%1',BufferCode);
      IF Currency.FINDFIRST THEN
        EXIT(Currency.Code);
      EXIT('ERROR');
    END;

    PROCEDURE ConvertCurrencyExch@1101495000(CurrCode@1101495000 : Code[10];ExchType@1101495001 : 'Group,CB') ExchCurrCode : Code[10];
    VAR
      Currency@1101495002 : Record 4;
    BEGIN
      ExchCurrCode := ConvertCurrencyCode(CurrCode);
      IF ExchCurrCode = 'ERROR' THEN
        EXIT('ERROR');
      IF ExchType = ExchType::Group THEN
        EXIT(ExchCurrCode);
      IF ExchCurrCode = '' THEN
        EXIT('');
      Currency.GET(ExchCurrCode);
      Currency.TESTFIELD("Check Currency Code");
      Currency.GET(Currency."Check Currency Code");
      EXIT(Currency.Code);
    END;

    PROCEDURE ConvertTypeDeal@1000000007(TypeDeal@1000000000 : Code[20]) retTypeDeal : Code[20];
    VAR
      MappingDealType@1000000001 : Record 50192;
    BEGIN
      //NC S1884 > PCH
      IF MappingDealType.GET(TypeDeal) THEN BEGIN
        MappingDealType.TESTFIELD("Type Deal");
        retTypeDeal := MappingDealType."Type Deal";
      END ELSE
        retTypeDeal := TypeDeal;
      //NC S1884 < PCH
    END;

    BEGIN
    {
      NC MDB03 PCH Создан CU
      NC MTD002 AIG Изменение в коде
      ПАРАМЕТРЫ:
        "Record ID" - recordID записи
        "Company No." - фирма

      NC NCS490 PCH добавлено удаление курсов валют
      NC S547 PCH загрузка справочников по ID
      NC NCS-1131 DP Создание договора при загрузке сделки
      TDRANCS-1165>
        modified func AddReference
      NC S1426 PCH
      NC MIO-10.8 PCH удаление курсов валют (изменены функции ProcesType, AddReference)
      NC NCS-1559 DP Изменены функции ProcesType, ModifyReference
      NC NCS-1662 DP Изменена функция ModifyReference
      NC S1884 PCH мэппинг deal type
      NC NCS-2181 DP Изменена функция ProcesType
    }
    END.
  }
}

