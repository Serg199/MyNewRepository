OBJECT Codeunit 14961 Update Payroll Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=15.09.15;
    Time=12:00:00;
    Version List=NAVRU9.00;
  }
  PROPERTIES
  {
    TableNo=14965;
    Permissions=TableData 14965=rm,
                TableData 7153=r,
                TableData 14966=rimd,
                TableData 7156=rimd;
    OnRun=BEGIN
            IF Code <> '' THEN BEGIN
              InitLastEntryNo;
              LOCKTABLE;
              FIND;
              UpdateOne(Rec,"Last Entry No." < LastEntryNo - 1000);
            END;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to update %1 %2?;RUS=Обновить %1 %2?';
      Text005@1001 : TextConst 'ENU=Analysis View     #1############################\\;RUS=Аналитический отчет     #1############################\\';
      Text006@1002 : TextConst 'ENU=Updating table    #2############################\;RUS=Обновление таблицы      #2############################\';
      Text007@1003 : TextConst 'ENU=Speed: (Entries/s)#4########\;RUS=Быстродействие: (оп./с) #4########\';
      Text008@1004 : TextConst 'ENU=Average Speed     #5########;RUS=Средняя скорость        #5########';
      PayrollAnalysisView@1005 : Record 14965;
      PayrollAnalysisViewFilter@1210003 : Record 14967;
      PayrollLedgerEntry@1006 : Record 17418;
      PayrollAnalysisViewEntry@1008 : Record 14966;
      DimSetEntry@1210005 : Record 480;
      TempPayrollAnalysisViewEntry@1010 : TEMPORARY Record 14966;
      TempPayrollAnalysisViewFilter@1012 : TEMPORARY Record 14967;
      TempDimBuf@1013 : TEMPORARY Record 360;
      TempDimEntryBuffer@1210002 : TEMPORARY Record 373;
      FilterIsInitialized@1014 : Boolean;
      FiltersExist@1210004 : Boolean;
      LastEntryNoIsInitialized@1210001 : Boolean;
      LedgEntryDimEntryNo@1016 : Integer;
      LastEntryNo@1210000 : Integer;
      PrevPostingDate@1017 : Date;
      PrevCalculatedPostingDate@1018 : Date;
      NoOfEntries@1019 : Integer;
      Window@1020 : Dialog;
      ShowProgressWindow@1021 : Boolean;
      WinLastEntryNo@1022 : Integer;
      WinPrevEntryNo@1023 : Integer;
      WinUpdateCounter@1024 : Integer;
      WinTotalCounter@1025 : Integer;
      WinTime0@1026 : Time;
      WinTime1@1027 : Time;
      WinTime2@1028 : Time;
      Text009@1030 : TextConst 'ENU=#6############### @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\;RUS=#6###############       @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\';
      Text010@1031 : TextConst 'ENU=Summarizing;RUS=Суммирование';
      Text011@1032 : TextConst 'ENU=Updating Database;RUS=Обновление базы данных';

    LOCAL PROCEDURE InitLastEntryNo@20();
    BEGIN
      PayrollLedgerEntry.RESET;
      IF LastEntryNoIsInitialized THEN
        EXIT;
      LastEntryNoIsInitialized := TRUE;
      COMMIT;
      WITH PayrollLedgerEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          LastEntryNo := "Entry No.";
        COMMIT;
      END;
    END;

    PROCEDURE UpdateAll@15(DirectlyFromPosting@1001 : Boolean);
    VAR
      PayrollAnalysisView2@1002 : Record 14965;
    BEGIN
      PayrollAnalysisView2.SETRANGE(Blocked,FALSE);
      IF DirectlyFromPosting THEN
        PayrollAnalysisView2.SETRANGE("Update on Posting",TRUE);

      IF PayrollAnalysisView2.ISEMPTY THEN
        EXIT;

      InitLastEntryNo;

      IF DirectlyFromPosting THEN
        PayrollAnalysisView2.SETFILTER("Last Entry No.",'<%1',LastEntryNo);

      PayrollAnalysisView2.LOCKTABLE;
      IF PayrollAnalysisView2.FINDSET(TRUE,TRUE) THEN
        REPEAT
          UpdateOne(PayrollAnalysisView2,NOT DirectlyFromPosting AND (PayrollAnalysisView2."Last Entry No." < LastEntryNo - 1000));
        UNTIL PayrollAnalysisView2.NEXT = 0;
    END;

    PROCEDURE Update@23(VAR NewPayrollAnalysisView@1000 : Record 14965;ShowWindow@1002 : Boolean);
    BEGIN
      InitLastEntryNo;
      NewPayrollAnalysisView.LOCKTABLE;
      NewPayrollAnalysisView.FIND;
      UpdateOne(NewPayrollAnalysisView,ShowWindow);
    END;

    LOCAL PROCEDURE UpdateOne@11(VAR NewPayrollAnalysisView@1000 : Record 14965;ShowWindow@1002 : Boolean);
    BEGIN
      PayrollAnalysisView := NewPayrollAnalysisView;
      PayrollAnalysisView.TESTFIELD(Blocked,FALSE);
      ShowProgressWindow := ShowWindow;
      IF ShowProgressWindow THEN
        InitWindow;

      IF LastEntryNo > PayrollAnalysisView."Last Entry No." THEN BEGIN
        IF ShowProgressWindow THEN
          UpdateWindowHeader(DATABASE::"Payroll Analysis View Entry",PayrollLedgerEntry."Entry No.");
        UpdateEntries;
        PayrollAnalysisView."Last Entry No." := LastEntryNo;
        PayrollAnalysisView."Last Date Updated" := TODAY;
        PayrollAnalysisView.MODIFY;
      END;

      IF ShowProgressWindow THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateEntries@9();
    VAR
      PayrollAnalysisViewSourceQry@1210000 : Query 14960;
      EntryNo@1210001 : Integer;
    BEGIN
      FilterIsInitialized := FALSE;
      PayrollAnalysisViewSourceQry.SETRANGE(PayrollAnalysisViewCode,PayrollAnalysisView.Code);
      PayrollAnalysisViewSourceQry.SETRANGE(EntryNo,PayrollAnalysisView."Last Entry No." + 1,LastEntryNo);
      IF PayrollAnalysisView."Payroll Element Filter" <> '' THEN
        PayrollAnalysisViewSourceQry.SETFILTER(ElementCode,PayrollAnalysisView."Payroll Element Filter");
      IF PayrollAnalysisView."Employee Filter" <> '' THEN
        PayrollAnalysisViewSourceQry.SETFILTER(EmployeeNo,PayrollAnalysisView."Employee Filter");

      PayrollAnalysisViewSourceQry.OPEN;
      WHILE PayrollAnalysisViewSourceQry.READ DO BEGIN
        IF DimSetIDInFilter(PayrollAnalysisViewSourceQry.DimensionSetID,PayrollAnalysisView) THEN
          UpdateAnalysisViewEntry(
            PayrollAnalysisViewSourceQry.DimVal1,
            PayrollAnalysisViewSourceQry.DimVal2,
            PayrollAnalysisViewSourceQry.DimVal3,
            PayrollAnalysisViewSourceQry.DimVal4,
            PayrollAnalysisViewSourceQry.ElementCode,
            PayrollAnalysisViewSourceQry.UsePFAccumSystem,
            PayrollAnalysisViewSourceQry.EmployeeNo,
            PayrollAnalysisViewSourceQry.PostingDate,
            PayrollAnalysisViewSourceQry.CalcGroup,
            PayrollAnalysisViewSourceQry.PayrollAmount,
            PayrollAnalysisViewSourceQry.TaxableAmount);
        EntryNo := EntryNo + 1;
        IF ShowProgressWindow THEN
          UpdateWindowCounter(EntryNo);
      END;

      FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewEntry@3(DimValue1@1210003 : Code[20];DimValue2@1210002 : Code[20];DimValue3@1210001 : Code[20];DimValue4@1210000 : Code[20];ElementCode@1210006 : Code[20];UsePFAccumSystem@1210007 : Boolean;EmployeeNo@1210008 : Code[20];PostingDate@1210009 : Date;CalcGroup@1210010 : Code[10];PayrollAmount@1210004 : Decimal;TaxableAmount@1210005 : Decimal);
    VAR
      EntryNo@1005 : Integer;
    BEGIN
      IF PostingDate < PayrollAnalysisView."Starting Date" THEN BEGIN
        PostingDate := PayrollAnalysisView."Starting Date" - 1;
        EntryNo := 0;
      END ELSE BEGIN
        PostingDate := CalculatePeriodStart(PostingDate,PayrollAnalysisView."Date Compression");
        IF PostingDate < PayrollAnalysisView."Starting Date" THEN
          PostingDate := PayrollAnalysisView."Starting Date";
        IF PayrollAnalysisView."Date Compression" <> PayrollAnalysisView."Date Compression"::None THEN
          EntryNo := 0;
      END;
      TempPayrollAnalysisViewEntry.INIT;
      TempPayrollAnalysisViewEntry."Analysis View Code" := PayrollAnalysisView.Code;
      TempPayrollAnalysisViewEntry."Element Code" := ElementCode;
      TempPayrollAnalysisViewEntry."Use PF Accum. System" := UsePFAccumSystem;
      TempPayrollAnalysisViewEntry."Employee No." := EmployeeNo;
      TempPayrollAnalysisViewEntry."Element Group" := PayrollLedgerEntry."Element Group";
      TempPayrollAnalysisViewEntry."Org. Unit Code" := PayrollLedgerEntry."Org. Unit Code";
      TempPayrollAnalysisViewEntry."Payroll Element Type" := PayrollLedgerEntry."Element Type";
      TempPayrollAnalysisViewEntry."Posting Date" := PostingDate;
      TempPayrollAnalysisViewEntry."Calc Group" := CalcGroup;
      TempPayrollAnalysisViewEntry."Dimension 1 Value Code" := DimValue1;
      TempPayrollAnalysisViewEntry."Dimension 2 Value Code" := DimValue2;
      TempPayrollAnalysisViewEntry."Dimension 3 Value Code" := DimValue3;
      TempPayrollAnalysisViewEntry."Dimension 4 Value Code" := DimValue4;
      TempPayrollAnalysisViewEntry."Entry No." := EntryNo;

      IF TempPayrollAnalysisViewEntry.FIND THEN BEGIN
        AddValue(TempPayrollAnalysisViewEntry."Payroll Amount",PayrollAmount);
        AddValue(TempPayrollAnalysisViewEntry."Taxable Amount",TaxableAmount);
      END ELSE BEGIN
        TempPayrollAnalysisViewEntry."Payroll Amount" := PayrollAmount;
        TempPayrollAnalysisViewEntry."Taxable Amount" := TaxableAmount;
        TempPayrollAnalysisViewEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      END;
      IF NoOfEntries >= 10000 THEN
        FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record 50;
    BEGIN
      IF PostingDate = CLOSINGDATE(PostingDate) THEN
        EXIT(PostingDate);

      CASE DateCompression OF
        PayrollAnalysisView."Date Compression"::Week:
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        PayrollAnalysisView."Date Compression"::Month:
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        PayrollAnalysisView."Date Compression"::Quarter:
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        PayrollAnalysisView."Date Compression"::Year:
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        PayrollAnalysisView."Date Compression"::Period:
          BEGIN
            IF PostingDate <> PrevPostingDate THEN BEGIN
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              IF AccountingPeriod.FINDLAST THEN BEGIN
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              END ELSE
                PrevCalculatedPostingDate := PostingDate;
            END;
            PostingDate := PrevCalculatedPostingDate;
          END;
      END;
      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE FlushAnalysisViewEntry@5();
    BEGIN
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text011);
      IF TempPayrollAnalysisViewEntry.FINDSET THEN
        REPEAT
          PayrollAnalysisViewEntry.INIT;
          PayrollAnalysisViewEntry := TempPayrollAnalysisViewEntry;

          IF NOT PayrollAnalysisViewEntry.INSERT THEN BEGIN
            PayrollAnalysisViewEntry.FIND;
            AddValue(PayrollAnalysisViewEntry."Payroll Amount",TempPayrollAnalysisViewEntry."Payroll Amount");
            AddValue(PayrollAnalysisViewEntry."Taxable Amount",TempPayrollAnalysisViewEntry."Taxable Amount");
            PayrollAnalysisViewEntry.MODIFY;
          END;
        UNTIL TempPayrollAnalysisViewEntry.NEXT = 0;
      TempPayrollAnalysisViewEntry.DELETEALL;
      NoOfEntries := 0;
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE InitWindow@1();
    BEGIN
      Window.OPEN(
        Text005 +
        Text006 +
        Text009 +
        Text007 +
        Text008);
      Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE UpdateWindowCounter@7(EntryNo@1000 : Integer);
    BEGIN
      WinUpdateCounter := WinUpdateCounter + 1;
      WinTime2 := TIME;
      IF (WinTime2 > WinTime1 + 1000) OR (EntryNo = WinLastEntryNo) THEN BEGIN
        IF WinLastEntryNo <> 0 THEN
          Window.UPDATE(3,100 * (100 * EntryNo DIV WinLastEntryNo));
        WinPrevEntryNo := EntryNo;
        WinTotalCounter := WinTotalCounter + WinUpdateCounter;
        IF WinTime2 <> WinTime1 THEN
          Window.UPDATE(4,ROUND(WinUpdateCounter * (1000 / (WinTime2 - WinTime1)),1));
        IF WinTime2 <> WinTime0 THEN
          Window.UPDATE(5,ROUND(WinTotalCounter * (1000 / (WinTime2 - WinTime0)),1));
        WinTime1 := WinTime2;
        WinUpdateCounter := 0;
      END;
    END;

    LOCAL PROCEDURE UpdateWindowHeader@13(TableID@1000 : Integer;EntryNo@1001 : Integer);
    VAR
      Object@1002 : Record 2000000001;
    BEGIN
      WinLastEntryNo := EntryNo;
      WinPrevEntryNo := 0;
      WinTotalCounter := 0;
      Object.GET(Object.Type::Table,'',TableID);
      Window.UPDATE(1,PayrollAnalysisView.Code);
      Window.UPDATE(2,Object.Name);
      Window.UPDATE(3,0);
      Window.UPDATE(4,0);
      Window.UPDATE(5,0);
      WinTime0 := TIME;
      WinTime1 := WinTime0;
      WinTime2 := WinTime0;
    END;

    LOCAL PROCEDURE AddValue@19(VAR ToValue@1000 : Decimal;FromValue@1001 : Decimal);
    BEGIN
      ToValue := ToValue + FromValue;
    END;

    LOCAL PROCEDURE IsValueIncludedInFilter@1210001(DimValue@1002 : Code[20];DimFilter@1000 : Code[250]) : Boolean;
    BEGIN
      WITH TempDimBuf DO BEGIN
        RESET;
        DELETEALL;
        INIT;
        "Dimension Value Code" := DimValue;
        INSERT;
        SETFILTER("Dimension Value Code",DimFilter);
        EXIT(FINDFIRST);
      END;
    END;

    PROCEDURE DimSetIDInFilter@1210000(DimSetID@1000 : Integer;VAR PayrollAnalysisView@1002 : Record 14965) : Boolean;
    VAR
      InFilters@1001 : Boolean;
    BEGIN
      IF NOT FilterIsInitialized THEN BEGIN
        TempDimEntryBuffer.DELETEALL;
        FilterIsInitialized := TRUE;
        PayrollAnalysisViewFilter.SETRANGE("Analysis View Code",PayrollAnalysisView.Code);
        FiltersExist := NOT PayrollAnalysisViewFilter.ISEMPTY;
      END;
      IF NOT FiltersExist THEN
        EXIT(TRUE);

      IF TempDimEntryBuffer.GET(DimSetID) THEN  // cashed value?
        EXIT(TempDimEntryBuffer."Dimension Entry No." <> 0);

      InFilters := TRUE;
      IF PayrollAnalysisViewFilter.FINDSET THEN
        REPEAT
          IF DimSetEntry.GET(DimSetID,PayrollAnalysisViewFilter."Dimension Code") THEN
            InFilters :=
              InFilters AND IsValueIncludedInFilter(DimSetEntry."Dimension Value Code",PayrollAnalysisViewFilter."Dimension Value Filter")
          ELSE
            InFilters :=
              InFilters AND IsValueIncludedInFilter('',PayrollAnalysisViewFilter."Dimension Value Filter");
        UNTIL (PayrollAnalysisViewFilter.NEXT = 0) OR NOT InFilters;
      TempDimEntryBuffer."No." := DimSetID;
      IF InFilters THEN
        TempDimEntryBuffer."Dimension Entry No." := 1
      ELSE
        TempDimEntryBuffer."Dimension Entry No." := 0;
      TempDimEntryBuffer.INSERT;
      EXIT(InFilters);
    END;

    BEGIN
    END.
  }
}

