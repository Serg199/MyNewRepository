OBJECT Codeunit 50074 Universal Excel Importer
{
  OBJECT-PROPERTIES
  {
    Date=25.02.16;
    Time=14:40:48;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            t@1000000000 : Text[120];
            dat@1040000 : Date;
          BEGIN
             ImportData(0,'',1+2+128);
          END;

  }
  CODE
  {
    VAR
      PARAMDEF_TABLE@1000000022 : TextConst 'ENU=table';
      PARAMDEF_HEADER@1000000023 : TextConst 'ENU=TableHeader';
      PARAMDEF_IMPORTALL@1000000027 : TextConst 'ENU=ImportAll';
      PARAMDEF_COUNTER@1000000019 : TextConst 'ENU=Incr';
      PARAMDEF_COUNTER2@1000000028 : TextConst 'ENU=Count';
      PARAMDEF_CONSTANT@1000000020 : TextConst 'ENU=Const';
      PARAMDEF_COPY@1000000021 : TextConst 'ENU=Copy';
      PARAMDEF_SKIPTRIGGERS@1040001 : TextConst 'ENU=SkipTriggers';
      F_EXCLELSRC@1000000025 : TextConst 'ENU=E';
      F_PKEY@1000000024 : TextConst 'ENU=K';
      Text000@1000000001 : TextConst 'ENU=Open source file;PLK=Otw¢rz plik «r¢dˆowy z danymi';
      Text001@1000000000 : TextConst 'ENU=Import/update of data finished successfully;PLK=Import/aktualizacja danych zakoäczona pomy˜lnie';
      Text002@1000000004 : TextConst 'ENU=Importing...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;PLK=Wczytywanie rekord¢w...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@''';
      Text003@1000000005 : TextConst 'ENU=''No such option: %1'';PLK=Nieznana opcja: %1';
      Text004@1000000006 : TextConst 'ENU=The Excel worksheet %1 does not exist.;PLK=Arkusz programu Excel (%1) nie istnieje.';
      Text005@1000000003 : TextConst 'ENU=No header information in buffer row %1;PLK=Brak nagˆ¢wka w wierszu %1 bufora';
      Text006@1000000007 : TextConst 'ENU=''No required primary key field "%1" (%2) in user filter;PLK=Brak wymaganego pola klucza gˆ¢wnego "%1" (%2) w filtrze';
      Text007@1000000002 : TextConst 'ENU=Reading Excel worksheet...\\;PLK=Czytanie arkusza programu Excel...\\';
      Text008@1000000008 : TextConst 'ENU=Import stopped at user request;PLK=Import przerwany na ¾¥danie u¾ytkownika';
      Text009@1000000009 : TextConst 'ENU=''Select Import, Update, or both options'';PLK=Wybierz import, aktualizacj©, lub obie opcje importu';
      Text010@1000000010 : TextConst 'ENU=''No field mapping information in buffer'';PLK="Brak informacji o mapowaniu kolumn excela do p¢l tabeli w buforze "';
      Text011@1000000011 : TextConst 'ENU="Fields:\%1\were not imported. Fields type of\%2\can not be read form Excel.  ";PLK=Pola:\%1\nie zostaˆy zaimportowane. Typy danych:\%2\nie s¥ obsˆugiwane';
      XlWrkSht@1000000015 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      XlApp@1000000014 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      XlWrkBk@1000000013 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      warn@1000000012 : Boolean;
      Text012@1000000016 : TextConst 'ENU=No such table no: %1;PLK=Niepoprawny numer tabeli: %1';
      Text013@1000000017 : TextConst 'ENU=Intenal error: No primary key info in buffer table;PLK=Bˆ¥d wewn©trzny: brak informacji o kluczu gˆ¢wnym w tabeli buforowej';
      Text014@1000000018 : TextConst 'ENU="Error in format of data for BigInteger type field ";PLK=Bˆ©dny format pola typu ''BigInteger'': %1';
      EXCELBuffer@1040000 : Record 370;

    PROCEDURE ImportData@1(tableNo@1000000015 : Integer;columnFilter@1000000000 : Text[1024];importOptions@1000000003 : Integer) : Integer;
    VAR
      filename@1000000002 : Text[250];
      sheetName@1000000001 : Text[50];
    BEGIN
      filename :='';
      sheetName:='';
      EXIT(
        ImportDataFromFile(filename,sheetName,tableNo,0,columnFilter,importOptions)
        );
    END;

    PROCEDURE ImportDataFromFile@2(VAR fileName@1000000004 : Text[512];VAR sheetName@1000000003 : Text[50];tableNo@1000000001 : Integer;headerRow@1000000006 : Integer;columnList@1000000000 : Text[1024];ImporterOptions@1000000002 : Integer) : Integer;
    VAR
      fieldMapping@1000000009 : TEMPORARY Record 370;
      EXCELBuffer2@1040000 : Record 370;
      recRef@1000000017 : RecordRef;
      columnFilter@1000000008 : Text[1024];
      optInsert@1000000011 : Boolean;
      optUpdate@1000000012 : Boolean;
      optNoOnInsertTrigger@1000000014 : Boolean;
      optDelayedInsert@1000000013 : Boolean;
      statusWindow@1000000015 : Dialog;
      recordFound@1000000016 : Boolean;
      rowCount@1000000019 : Integer;
      lineCount@1000000018 : Integer;
      dataStart@1000000020 : Integer;
      dataEnd@1000000022 : Integer;
      newHeaderRow@1000000021 : Integer;
      searchByOption@1000000010 : 'FieldCaption,FieldName,FieldNo';
      validateOption@1000000023 : 'All,None,FileDefined';
      i@1000000007 : Integer;
    BEGIN
      IF ImporterOptions MOD 4 = 0 THEN
        ImporterOptions += 3; // import OR update

      IF SelectExcelSource(fileName,sheetName) < 0 THEN
        EXIT(-1);

      headerRow := readHeader(fileName,sheetName,headerRow,tableNo,ImporterOptions);

      IF NOT testTableNo(tableNo) THEN
        EXIT(-1);

      optInsert := testBit(0,ImporterOptions);
      optUpdate := testBit(1,ImporterOptions);

      CASE TRUE OF
        testBit(5,ImporterOptions) : searchByOption := searchByOption::FieldNo;
        testBit(4,ImporterOptions) : searchByOption := searchByOption::FieldName;
        ELSE                            searchByOption := searchByOption::FieldCaption;
      END;
      CASE TRUE OF
        testBit(7,ImporterOptions) : validateOption := validateOption::FileDefined;
        testBit(6,ImporterOptions) : validateOption := validateOption::None;
        ELSE                            validateOption := validateOption::All;
      END;

      generatePrimaryKeyInfo(tableNo,EXCELBuffer);
      checkUserColumnFilter(columnList,EXCELBuffer);
      generateFieldMapping(tableNo,columnList,headerRow,ImporterOptions);
      postProcessParams(headerRow);

      columnFilter := ChooseColumnsToImport(tableNo,columnList,ImporterOptions);

      readFieldMapping(fieldMapping,ImporterOptions,FieldMappingRowFiler);

      EXCELBuffer.SETFILTER("Row No.", '>%1',headerRow);
      ReadSelectedSheetArea(fileName,sheetName,STRSUBSTNO('>%1',headerRow),columnFilter);

      clearExcel;

      optInsert := testBit(0,ImporterOptions);
      optUpdate := testBit(1,ImporterOptions);
      optDelayedInsert := testBit(2,ImporterOptions);
      optNoOnInsertTrigger := testBit(8,ImporterOptions);

      EXCELBuffer.RESET;
      EXCELBuffer.SETFILTER("Row No.", '>%1', headerRow);
      rowCount  := EXCELBuffer."Row No.";

      statusWindow.OPEN(Text002);
      EXCELBuffer.FIND('-');

      REPEAT
        EXCELBuffer2 := EXCELBuffer;
        CLEAR(recRef);
        recRef.OPEN(tableNo);
        i := EXCELBuffer."Row No.";
        EXCELBuffer.SETRANGE("Row No.",i);
        statusWindow.UPDATE(1,ROUND(10000*i/rowCount,1));

        recRef.INIT;
        recordFound := findRecord(recRef,fieldMapping,searchByOption);

        IF optInsert AND NOT recordFound THEN BEGIN
          fillRecord(recRef, fieldMapping, searchByOption,NOT optDelayedInsert);
          IF optNoOnInsertTrigger THEN
            recRef.INSERT(FALSE)
          ELSE
            recRef.INSERT(TRUE);
        END;
        IF (optInsert AND NOT optDelayedInsert) OR (recordFound AND optUpdate) THEN BEGIN
          fillRecord(recRef, fieldMapping, searchByOption,FALSE);
          IF optNoOnInsertTrigger THEN
            recRef.MODIFY(FALSE)
          ELSE
            recRef.MODIFY(TRUE);
        END;
        lineCount += 1;

        EXCELBuffer := EXCELBuffer2;
        EXCELBuffer.FIND('+');
        EXCELBuffer.SETRANGE("Row No.");
        EXCELBuffer.FIND('=');
        recRef.CLOSE;
      UNTIL EXCELBuffer.NEXT = 0 ;

      statusWindow.CLOSE;
      generateWarning(fieldMapping);
      EXIT(lineCount);
    END;

    PROCEDURE PrimaryKeyInfoBeginRow@1000000032() : Integer;
    BEGIN
      EXIT(-999);
    END;

    PROCEDURE PrimaryKeyInfoEndRow@1000000033() : Integer;
    BEGIN
      EXIT(-900);
    END;

    PROCEDURE ConstantsAreaBeginRow@1000000006() : Integer;
    BEGIN
      EXIT(-809);
    END;

    PROCEDURE ConstantsAreaEndRow@1000000028() : Integer;
    BEGIN
      EXIT(-701);
    END;

    PROCEDURE FieldMapBeginRow@1000000036() : Integer;
    BEGIN
      EXIT(-700);
    END;

    PROCEDURE FieldMapEndRow@1000000038() : Integer;
    BEGIN
      EXIT(-1);
    END;

    PROCEDURE FieldMappingMaxRange@1000000000() : Integer;
    BEGIN
      EXIT(FieldMapEndRow);
    END;

    PROCEDURE FieldMappingMinRange@1000000019() : Integer;
    BEGIN
      EXIT(PrimaryKeyInfoBeginRow);
    END;

    LOCAL PROCEDURE FieldMappingRowFiler@1000000004() : Text[50];
    BEGIN
      EXIT(FORMAT(FieldMappingMinRange,0,2)+'..'+FORMAT(FieldMappingMaxRange,0,2));
    END;

    PROCEDURE getPARAMDEF_INCREMENT@1000000029() : Text[30];
    BEGIN
      EXIT(PARAMDEF_COUNTER);
    END;

    PROCEDURE getPARAMDEF_INCREMENT2@1000000049() : Text[30];
    BEGIN
      EXIT(PARAMDEF_COUNTER2);
    END;

    PROCEDURE getPARAMDEF_CONSTANT@1000000041() : Text[30];
    BEGIN
      EXIT(PARAMDEF_CONSTANT);
    END;

    PROCEDURE getPARAMDEF_COPY@1000000042() : Text[30];
    BEGIN
      EXIT(PARAMDEF_COPY);
    END;

    LOCAL PROCEDURE testTableNo@1000000002(VAR tableNo@1000000000 : Integer) : Boolean;
    VAR
      Object@1000000001 : Record 2000000001;
    BEGIN
      CASE TRUE OF
        tableNo > 0:
          IF NOT Object.GET(Object.Type::Table,'',tableNo) THEN BEGIN
            clearExcel;
            ERROR(Text012, tableNo)
          END ELSE
            EXIT(TRUE);
        tableNo = 0:
          BEGIN
            COMMIT;
            IF FORM.RUNMODAL(FORM::Page50266,Object) = ACTION::LookupOK THEN BEGIN
              tableNo := Object.ID;
              EXIT(TRUE);
            END ELSE BEGIN
              clearExcel;
              ERROR('');
            END;
          END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LeaveCharacters@1000000015(text@1000000000 : Text[512];charsToLeave@1000000001 : Text[255]) newText : Text[512];
    VAR
      l@1000000002 : Integer;
      t@1000000003 : Text[1];
    BEGIN
      l := STRLEN(text);
      WHILE l > 0 DO BEGIN
        t[1] := text[l];
        IF STRPOS(charsToLeave,t) > 0 THEN
          newText := t + newText;
        l-= 1;
      END;
      EXIT(newText);
    END;

    PROCEDURE testBit@1000000037(BitNo@1000000000 : Integer;value@1000000001 : Integer) retVal : Boolean;
    BEGIN
      // test if bit BitNo is set in word Value
      IF (BitNo >=0) AND (BitNo < 32) THEN
        EXIT (ROUND(value/POWER(2,BitNo),1,'<') MOD 2 > 0)
    END;

    PROCEDURE setBit@1000000056(BitNo@1000000001 : Integer;VAR value@1000000000 : Integer) retVal : Integer;
    BEGIN
      IF (BitNo >=0) AND (BitNo < 32) THEN
        IF NOT testBit(BitNo, value) THEN
          value += POWER(2,BitNo);
    END;

    PROCEDURE clearBit@1000000057() retVal : Integer;
    VAR
      BitNo@1000000001 : Integer;
      value@1000000000 : Integer;
    BEGIN
      IF (BitNo >=0) AND (BitNo < 32) THEN
        IF testBit(BitNo, value) THEN
          value -= POWER(2,BitNo);
    END;

    LOCAL PROCEDURE findFieldNoByCaption@1000000009(tableNo@1000000002 : Integer;fieldCaption@1000000001 : Text[100]) columnNo : Integer;
    VAR
      FieldList@1000000000 : Record 2000000041;
      fc@1000000003 : Code[100];
    BEGIN
      FieldList.RESET;
      FieldList.SETRANGE(TableNo, tableNo);
      fieldCaption := UPPERCASE(fieldCaption);

      FieldList.FIND('-');
      REPEAT
        fc := FieldList."Field Caption";
        //NC > PCH
        //IF fc = fieldCaption THEN
        IF (fc = fieldCaption) OR (UPPERCASE(FieldList.FieldName) = fieldCaption) THEN
        //NC < PCH
          EXIT (FieldList."No.");
      UNTIL FieldList.NEXT=0;

      EXIT(0);
    END;

    LOCAL PROCEDURE findFieldNoByName@1000000016(tableNo@1000000002 : Integer;fieldName@1000000001 : Text[40]) columnNo : Integer;
    VAR
      FieldList@1000000000 : Record 2000000041;
    BEGIN
      FieldList.RESET;
      FieldList.SETRANGE(TableNo, tableNo);
      fieldName := UPPERCASE(fieldName);

      FieldList.FIND('-');
      REPEAT
        IF UPPERCASE(FieldList.FieldName) = fieldName THEN
          EXIT (FieldList."No.");
      UNTIL FieldList.NEXT=0;

      EXIT(0);
    END;

    LOCAL PROCEDURE findTextInList@1000000020(list@1000000001 : Text[1024];textToSearchFor@1000000000 : Text[250];onlyFullMatch@1000000003 : Boolean) : Integer;
    VAR
      i@1000000002 : Integer;
      optionNo@1000000004 : Integer;
      beginOptionText@1000000006 : Integer;
      optionTextLen@1000000007 : Integer;
      optionListLen@1000000008 : Integer;
      textToSearchForLen@1000000009 : Integer;
      optionText@1000000005 : Text[250];
    BEGIN
      textToSearchFor := UPPERCASE(textToSearchFor);
      textToSearchForLen := STRLEN(textToSearchFor);

      optionListLen := STRLEN(list);

      beginOptionText := 1;
      i := 1;

      WHILE i < optionListLen DO BEGIN
        WHILE (i <= optionListLen) AND (list[i] <> ',') DO
          i += 1;
        optionTextLen := i - beginOptionText;
        optionText := COPYSTR(list,beginOptionText,optionTextLen);
        IF onlyFullMatch THEN BEGIN
          IF UPPERCASE(optionText) = textToSearchFor THEN
            EXIT(optionNo);
        END ELSE
          IF UPPERCASE(COPYSTR(optionText,1,textToSearchForLen)) = textToSearchFor THEN
            EXIT(optionNo);
        optionNo += 1;
        i += 1;
        beginOptionText := i;
      END;

      optionText := '';
      EXIT(-1);
    END;

    LOCAL PROCEDURE clearExcel@1000000010();
    BEGIN
      IF NOT ISCLEAR(XlApp) THEN BEGIN
        XlWrkBk.Close(FALSE);
        IF NOT ISCLEAR(XlWrkSht) THEN
          CLEAR(XlWrkSht);
        XlApp.Quit;
        CLEAR(XlApp);
      END;
    END;

    LOCAL PROCEDURE openExcelSheet@1000000008(fileName@1000000001 : Text[512];sheetName@1000000000 : Text[50];VAR XlWrkSht@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet");
    VAR
      XlWrkshts@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{000208D8-0000-0000-C000-000000000046}:Unknown Automation Server._Worksheet";
      i@1000000004 : Integer;
    BEGIN
      IF ISCLEAR(XlApp) THEN BEGIN
        IF NOT CREATE(XlApp,TRUE) THEN
          ERROR(Text000);
      END ELSE
       IF NOT ISCLEAR(XlWrkSht) THEN
         IF (XlWrkBk.FullName = UPPERCASE(fileName))
           AND (UPPERCASE(sheetName) = UPPERCASE(XlWrkSht.Name))
         THEN
           EXIT;

      XlApp.Workbooks._Open(fileName,TRUE);

      XlWrkBk := XlApp.ActiveWorkbook;
      i := XlWrkBk.Worksheets.Count;

      WHILE i > 0 DO BEGIN
        XlWrkshts := XlWrkBk.Worksheets.Item(i);
        IF UPPERCASE(sheetName) = UPPERCASE(XlWrkshts.Name) THEN
          i := 0;
        i -= 1;
      END;

      IF i < 0 THEN
        XlWrkSht := XlWrkBk.Worksheets.Item(sheetName)
      ELSE BEGIN
        XlWrkBk.Close(FALSE);
        XlApp.Quit;
        CLEAR(XlApp);
        ERROR(Text004,sheetName);
      END;
    END;

    PROCEDURE removeDigits@1000000045(inTxt@1000000001 : Text[500]) retVal : Text[512];
    VAR
      thousandsSeparator@1000000000 : Text[1];
    BEGIN
      thousandsSeparator := ' ';
      thousandsSeparator[1] := FORMAT(1000.0)[2];

      retVal := DELCHR(inTxt,'<=>','0123456789'+thousandsSeparator) ;
      EXIT(retVal)
    END;

    LOCAL PROCEDURE evaluateOption@1000000018(VAR fieldRef@1000000000 : FieldRef;optionText@1000000003 : Text[100];searchOption@1000000002 : 'FieldCaption,FieldName,FieldNo') : Integer;
    VAR
      optionNo@1000000001 : Integer;
      optionList@1000000004 : Text[1000];
    BEGIN

      CASE searchOption OF
        searchOption::FieldCaption: optionList := UPPERCASE(fieldRef.OPTIONCAPTION)
        ELSE                        optionList := UPPERCASE(fieldRef.OPTIONSTRING)
      END;

      optionNo := findTextInList(optionList,optionText,FALSE);

      IF optionNo >= 0 THEN
        EXIT(optionNo);

      optionList := removeDigits(optionText);
      IF optionList <> '' THEN
        EXIT(-1);

      EVALUATE(optionNo, optionText);
      EXIT(optionNo);
    END;

    LOCAL PROCEDURE SelectExcelSource@1000000001(VAR FileName@1000000000 : Text[100];VAR SheetName@1000000001 : Text[50]) : Integer;
    VAR
      DialogWindow@1000000003 : Codeunit 412;
    BEGIN
      IF (FileName = '' ) OR (NOT EXISTS(FileName)) THEN BEGIN
        FileName := DialogWindow.OpenFile(Text000, '', 2{=Excel}, '', 0{=Open});
        IF FileName = '' THEN
          EXIT (-1);
      END;

      IF SheetName = '' THEN
        SheetName := EXCELBuffer.SelectSheetsName(FileName);

      IF SheetName = '' THEN
        EXIT (-1);
    END;

    LOCAL PROCEDURE ReadSelectedSheetArea@1000000021(fileName@1000000008 : Text[512];sheetName@1000000007 : Text[50];rowList@1000000014 : Text[1024];columnList@1000000006 : Text[1024]) : Integer;
    VAR
      XlWrkshts@1000000010 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{000208D8-0000-0000-C000-000000000046}:Unknown Automation Server._Worksheet";
      XlRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      currRow@1000000005 : Integer;
      currCol@1000000003 : Integer;
      MaxRow@1000000004 : Integer;
      MaxCol@1000000002 : Integer;
      Window@1000000001 : Dialog;
      t@1000000015 : Text[100];
      row@1000000016 : Record 2000000026;
      col@1000000017 : Record 2000000026;
      cleanXLApp@1000000013 : Boolean;
      untilFirst@1000000019 : Boolean;
      firstFound@1000000022 : Boolean;
      rowCount@1000000020 : Integer;
      cellValue@1000000021 : Text[1024];
      lastRow@1000000023 : Integer;
      i@1000000024 : Integer;
      boolVal@1000000011 : Boolean;
    BEGIN
      // open Excel book

      openExcelSheet(fileName,sheetName,XlWrkSht);

      IF COPYSTR(rowList,1,1) = '-' THEN BEGIN
        untilFirst := TRUE;
        rowList := COPYSTR(rowList,2);
      END;

      IF rowList <> '' THEN BEGIN
        row.FILTERGROUP(8);
        row.SETFILTER(Number,rowList);
        row.FILTERGROUP(0);
      END;

      IF columnList <> '' THEN BEGIN
        col.FILTERGROUP(8);
        col.SETFILTER(Number,columnList);
        col.FILTERGROUP(0);
      END;

      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      WITH EXCELBuffer DO BEGIN
        DELETEALL;
        XlRange := XlWrkSht.Range(GetExcelReference(5)).SpecialCells(11);
        MaxRow := XlRange.Row;
        MaxCol := XlRange.Column;
        rowCount := 0;
        currRow := 1;
        REPEAT
          currCol := 1;
          row.SETRANGE(Number,currRow);
          IF (rowList = '') OR (row.FIND('-')) THEN BEGIN // row No. in filter
            REPEAT
              col.SETRANGE(Number,currCol);
              IF (columnList = '') OR (col.FIND('-')) THEN BEGIN // column No in filter
                INIT;
                VALIDATE("Row No.",currRow);
                VALIDATE("Column No.",currCol);
      //          cellValue := DELCHR(FORMAT(XlWrkSht.Range(xlColID + xlRowID).Value,0,2),'<>','  ');
                cellValue := DELCHR(FORMAT(XlWrkSht.Range(xlColID + xlRowID).Value),'<>','  ');
                IF cellValue <> '' THEN BEGIN
                   firstFound := TRUE;
                  "Cell Value as Text" := COPYSTR(cellValue,1,250);

                  cellValue := DELCHR(FORMAT(XlWrkSht.Range(xlColID + xlRowID).Value2,0,2),'<>','  ');
                  Formula := COPYSTR(cellValue,1,250);

                  boolVal := XlWrkSht.Range(xlColID + xlRowID).Font.Bold;   // Bold=yes -> Validate
                  Bold := boolVal;

                  boolVal := XlWrkSht.Range(xlColID + xlRowID).Font.Italic; // italic=yes -> skip reading (but import)
                  Italic := boolVal;                                        //

                  IF currRow <> lastRow THEN BEGIN
                    rowCount += 1;
                    lastRow := currRow;
                  END;
                  INSERT;
                END;
              END;
            currCol += 1;
            UNTIL currCol > MaxCol;
          END;
          currRow += 1;
          Window.UPDATE(1,ROUND(currRow / MaxRow * 10000,1));
        UNTIL (currRow > MaxRow) OR (untilFirst AND firstFound) ;
      END;

      Window.CLOSE;
      EXIT(currRow-1);
    END;

    LOCAL PROCEDURE checkUserColumnFilter@1000000024(ColumnFilter@1000000000 : Text[1024];VAR PKFieldList@1000000001 : Record 370) : Boolean;
    VAR
      t@1000000002 : Text[100];
      Field@1000000006 : Record 2000000041;
      Column@1000000004 : Record 2000000026;
    BEGIN

      PKFieldList.RESET;
      PKFieldList.SETRANGE("Row No.",PrimaryKeyInfoBeginRow,PrimaryKeyInfoEndRow);
      PKFieldList.SETRANGE("Column No.",0);
      IF NOT PKFieldList.FIND('-') THEN BEGIN
        clearExcel;
        ERROR(Text013);
      END;

      IF ColumnFilter = '' THEN
        EXIT(TRUE);

      Column.FILTERGROUP(8);
      Column.SETFILTER(Number,ColumnFilter);
      Column.FILTERGROUP(0);

      IF PKFieldList.FIND('-') THEN
        REPEAT
          Column.SETRANGE(Number, PKFieldList."Column No.");
          IF NOT Column.FIND('-') THEN BEGIN
            clearExcel;
            ERROR(Text006, PKFieldList.Formula, PKFieldList."Column No.");
          END;
        UNTIL PKFieldList.NEXT =0;

      PKFieldList.RESET;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ChooseColumnsToImport@1000000026(tableNo@1000000007 : Integer;ColFilter@1000000001 : Text[1024];VAR ImporterOptions@1000000000 : Integer) columnFilter : Text[1024];
    VAR
      i@1000000004 : Integer;
    BEGIN
      IF NOT testBit(31,ImporterOptions) THEN BEGIN   // d31=1 -> silent mode
        CLEAR(FieldMapDialog);
        COMMIT;

        FieldMapDialog.setParameters(tableNo,ImporterOptions,ColFilter);
        FieldMapDialog.LOOKUPMODE(TRUE);

        IF FieldMapDialog.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          clearExcel;
          CLEAR(FieldMapDialog);
          ERROR(Text008);
        END;

        ImporterOptions := FieldMapDialog.getOptions;
      END;

      columnFilter := buildFilterString();
    END;

    LOCAL PROCEDURE buildFilterString@1000000022() : Text[1024];
    VAR
      fieldMapping@1000000006 : TEMPORARY Record 370;
      FirstItem@1000000005 : Integer;
      LastItem@1000000004 : Integer;
      PrevItem@1040002 : Integer;
      CurrItem@1040001 : Integer;
      LatestItem@1040000 : Integer;
      SelectionFilter@1000000002 : Text[1024];
    BEGIN
      WITH EXCELBuffer DO BEGIN
        RESET;
        SETRANGE("Row No.", FieldMappingMinRange,FieldMappingMaxRange);
        SETRANGE(Italic,TRUE);   // now Italic=TRUE -> field importable
        // SETRANGE("Column No.",1,256);
        IF FIND('-') THEN
          REPEAT
            fieldMapping := EXCELBuffer;
            fieldMapping."Row No." := 0;
            IF NOT fieldMapping.INSERT THEN;
          UNTIL NEXT = 0;
        RESET;
      END;

      IF fieldMapping.FIND('-') THEN BEGIN
        FirstItem := fieldMapping."Column No.";
        PrevItem := FirstItem;
        REPEAT
          CurrItem := fieldMapping."Column No.";
          IF CurrItem - PrevItem > 1 THEN BEGIN
            IF PrevItem = FirstItem  THEN
              SelectionFilter := SelectionFilter + '|'+ FORMAT(FirstItem)
            ELSE
              SelectionFilter := SelectionFilter + '|'+ FORMAT(FirstItem) + '..' + FORMAT(PrevItem);
            FirstItem := CurrItem;
          END;
          PrevItem := CurrItem;
        UNTIL fieldMapping.NEXT = 0 ;

        IF PrevItem = FirstItem  THEN
          SelectionFilter := SelectionFilter + '|'+ FORMAT(FirstItem)
        ELSE
          SelectionFilter := SelectionFilter + '|'+ FORMAT(FirstItem) + '..' + FORMAT(CurrItem);
      END;

      IF SelectionFilter <> '' THEN
        SelectionFilter := COPYSTR(SelectionFilter,2);

      fieldMapping.RESET;
      fieldMapping.DELETEALL;
      CLEAR(fieldMapping);

      EXIT(SelectionFilter);
    END;

    LOCAL PROCEDURE findRecord@1000000027(VAR recRef@1000000000 : RecordRef;VAR fieldMapping@1000000004 : Record 370;searchOption@1000000001 : 'FieldCaption,FieldName,FieldNo') : Boolean;
    VAR
      fieldRef@1000000011 : FieldRef;
      cellFound@1000000005 : Boolean;
      cellValue@1000000012 : Text[262];
      cellValue2@1000000002 : Text[262];
      fieldNo@1000000007 : Integer;
      option@1000000008 : Integer;
      i_value@1000000023 : Integer;
      dec_value@1000000022 : Decimal;
      dat_value@1000000021 : Date;
      tim_value@1000000020 : Time;
      b_value@1000000019 : Boolean;
      bi_value@1000000018 : BigInteger;
      bin_value@1000000017 : Binary[200];
      dattim_value@1000000016 : DateTime;
      datform_value@1000000015 : DateFormula;
    BEGIN

      fieldMapping.RESET;
      fieldMapping.MODIFYALL(Italic,FALSE);
      fieldMapping.SETFILTER(Formula2,'<>%1',''); // only PrimaryKey
      fieldMapping.SETFILTER(Comment,'<>%1','');  // only mapped

      //fieldMapping.FIND('-');
      IF fieldMapping.FINDSET THEN
        REPEAT
          EVALUATE(fieldNo,fieldMapping.Comment);
          fieldRef := recRef.FIELD(fieldNo);
          IF fieldMapping."Column No." = 0 THEN BEGIN
            EXCELBuffer."Cell Value as Text"  := fieldMapping.Formula3;
            EXCELBuffer.Formula := fieldMapping.Formula3;
            cellFound := TRUE;
          END ELSE
            cellFound := EXCELBuffer.GET(EXCELBuffer."Row No.", fieldMapping."Column No.");
          IF cellFound THEN BEGIN
            cellValue  :=  EXCELBuffer."Cell Value as Text";
            cellValue2 :=  EXCELBuffer.Formula
          END;
          CASE fieldMapping.Formula4 OF // field.type
           'Text','Code':
              IF cellFound THEN BEGIN
                fieldRef.VALUE := COPYSTR(cellValue2,1,fieldRef.LENGTH);
              END ELSE
                fieldRef.VALUE := '';
           'Boolean':
                IF cellFound THEN
                  fieldRef.VALUE := calcBool(cellValue)
                ELSE
                  fieldRef.VALUE := FALSE;
           'Date':
              IF cellFound THEN BEGIN
                EVALUATE(dat_value, cellValue);
                fieldRef.VALUE := dat_value;
              END ;
           'Time':
              IF cellFound THEN BEGIN
                tim_value := calcTime(cellValue);
                fieldRef.VALUE := tim_value;
              END ;
           'DateFormula':
              IF cellFound THEN BEGIN
                EVALUATE(datform_value, cellValue);
                fieldRef.VALUE := datform_value;
              END ;
           'DateTime' :
              IF cellFound THEN BEGIN
                fieldRef.VALUE := calcDateTime(cellValue,cellValue2);
              END ;
           'BigInteger':
              IF cellFound THEN BEGIN
                EVALUATE(bi_value, cellValue);
                fieldRef.VALUE := bi_value;
              END ;
           'Integer':
              IF cellFound THEN BEGIN
                EVALUATE(i_value, cellValue);
                fieldRef.VALUE := i_value;
              END ;
           'Decimal':
              IF cellFound THEN BEGIN
                EVALUATE(dec_value, cellValue);
                fieldRef.VALUE := dec_value ;
              END ;
           'Option':
              IF cellFound THEN BEGIN
                option := evaluateOption(fieldRef,cellValue,searchOption);
                fieldRef.VALUE := option;
              END
          END;
        UNTIL fieldMapping.NEXT = 0;

      cellFound := recRef.FIND('=') ;

      EXIT (cellFound);
    END;

    LOCAL PROCEDURE fillRecord@1000000025(VAR recRef@1000000007 : RecordRef;VAR fieldMapping@1000000011 : Record 370;searchOption@1000000024 : 'FieldCaption,FieldName,FieldNo';InsertPKOnly@1000000013 : Boolean) : Boolean;
    VAR
      fieldRef@1000000010 : FieldRef;
      fieldNo@1000000009 : Integer;
      cellFound@1000000019 : Boolean;
      cellValue@1000000017 : Text[250];
      cellValue2@1000000023 : Text[250];
      t@1000000014 : Text[250];
      i_value@1000000006 : Integer;
      dec_value@1000000005 : Decimal;
      dat_value@1000000004 : Date;
      tim_value@1000000003 : Time;
      b_value@1000000002 : Boolean;
      bi_value@1000000001 : BigInteger;
      bin_value@1000000000 : Binary[200];
      dattim_value@1000000020 : DateTime;
      datform_value@1000000022 : DateFormula;
      i@1000000015 : Integer;
    BEGIN

      fieldMapping.RESET;
      fieldMapping.SETFILTER(Comment,'<>%1','');  // only mapped
      IF InsertPKOnly THEN
        fieldMapping.SETFILTER(Formula2,'<>%1',''); // only PrimaryKey
      fieldMapping.SETRANGE(Italic,FALSE);

      IF fieldMapping.FIND('-') THEN
      REPEAT
        IF fieldMapping."Column No." = 0 THEN BEGIN
          EXCELBuffer."Cell Value as Text" := fieldMapping.Formula3;
          EXCELBuffer.Formula := fieldMapping.Formula3;
          IF fieldMapping.Underline THEN BEGIN
            cellValue := INCSTR(fieldMapping.Formula3);
            IF cellValue <> '' THEN
              fieldMapping.Formula3 := cellValue;
          END;
          cellFound := TRUE;
        END ELSE
          cellFound := EXCELBuffer.GET(EXCELBuffer."Row No.", fieldMapping."Column No.");

        IF cellFound THEN BEGIN
          EVALUATE(fieldNo,fieldMapping.Comment);
          fieldRef := recRef.FIELD(fieldNo);
          fieldMapping.Italic := TRUE;
          fieldMapping.MODIFY;
          cellValue  := EXCELBuffer."Cell Value as Text";
          cellValue2 := EXCELBuffer.Formula;

          CASE FORMAT(fieldRef.TYPE) OF
           'Text','Code':
              BEGIN
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(COPYSTR(DELCHR(cellValue2,'<>',' '),1,fieldRef.LENGTH))
                ELSE
                  fieldRef.VALUE := COPYSTR(DELCHR(cellValue2,'<>',' '),1,fieldRef.LENGTH);
              END;
           'Option' :
              BEGIN
                i_value := evaluateOption(fieldRef,cellValue,searchOption);
                 IF i_value >= 0 THEN BEGIN
                   IF fieldMapping.Bold THEN
                     fieldRef.VALIDATE(i_value)
                   ELSE
                     fieldRef.VALUE := i_value;
                 END;
               END ;
           'Integer':
              BEGIN
                EVALUATE(i_value, cellValue);
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(i_value)
                ELSE
                  fieldRef.VALUE := i_value;
              END;
           'BigInteger':
              BEGIN
                bi_value := calcBigInt(cellValue);
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(bi_value)
                ELSE
                  fieldRef.VALUE := bi_value;
               END;
           'Decimal':
               BEGIN
                dec_value := calcDecimal(cellValue);
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(dec_value)
                ELSE
                  fieldRef.VALUE := dec_value;
               END;
           'Date':
              BEGIN
                EVALUATE(dat_value, cellValue);
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(dat_value)
                ELSE
                   fieldRef.VALUE := dat_value;
              END;
           'Time':
              BEGIN
                tim_value := calcTime(cellValue);
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(tim_value)
                ELSE
                  fieldRef.VALUE :=tim_value;
              END;
           'DateTime':
              BEGIN
                dattim_value := calcDateTime(cellValue,cellValue2);
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(dattim_value)
                ELSE
                  fieldRef.VALUE := dattim_value;
              END;
           'DateFormula':
              BEGIN
                EVALUATE(datform_value,cellValue);
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(datform_value)
                ELSE
                  fieldRef.VALUE := datform_value;
              END;
           'Boolean':
              BEGIN
                b_value := calcBool(cellValue);
                IF fieldMapping.Bold THEN
                  fieldRef.VALIDATE(b_value)
                ELSE
                  fieldRef.VALUE := b_value;
                END;
           ELSE BEGIN
               warn := TRUE;
               fieldMapping.NumberFormat :='warn';
               fieldMapping.MODIFY;
             END;
          END;
        END;
      UNTIL fieldMapping.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE calcBigInt@1000000005(txt@1000000000 : Code[50]) bi : BigInteger;
    VAR
      i@1000000001 : Integer;
      tBase@1000000002 : Text[50];
      tExp@1000000003 : Text[30];
      d@1000000004 : Decimal;
    BEGIN
      i := STRPOS(txt,'E');
      IF i > 0 THEN BEGIN
        tBase := COPYSTR(txt,1,i-1);
        tExp := COPYSTR(txt,i+1);
        i := 1;
        CASE tExp[1] OF
          '+': tExp := COPYSTR(tExp,2);
          '-': BEGIN clearExcel; ERROR(Text014,txt); END;
        END;
        EVALUATE(d,tExp);
        bi := POWER(10,i*d);
        EVALUATE(d,tBase);
        bi := d * bi;
        EXIT(bi);
      END;
      EVALUATE(bi,txt);
    END;

    LOCAL PROCEDURE calcDecimal@1000000011(txt@1000000000 : Code[50]) dec : Decimal;
    VAR
      i@1000000001 : Integer;
      tBase@1000000002 : Text[50];
      tExp@1000000003 : Text[30];
      d@1000000004 : Decimal;
    BEGIN
      i := STRPOS(txt,'E');
      IF i > 0 THEN BEGIN
        tBase := COPYSTR(txt,1,i-1);
        tExp := COPYSTR(txt,i+1);
        i := 1;
        CASE tExp[1] OF
          '+': tExp := COPYSTR(tExp,2);
          '-': BEGIN
              tExp := COPYSTR(tExp,2);
              i := -1;
            END;
        END;
        //NC > PCH
        //EVALUATE(d,tExp);
        IF NOT EVALUATE(d,tExp) THEN
         ERROR('%1 / %2',GETLASTERRORTEXT,txt);
        //NC > PCH
        dec := POWER(10,i*d);
        EVALUATE(d,tBase);
        dec := d * dec;
        EXIT(dec);
      END;
      EVALUATE(dec,txt);
    END;

    LOCAL PROCEDURE calcBool@1000000012(BoolText@1000000000 : Text[250]) : Boolean;
    VAR
      b@1000000001 : Boolean;
    BEGIN
      CASE LOWERCASE(BoolText) OF
        LOWERCASE(STRSUBSTNO('%1',TRUE)),'true','y','t','yes','1' : EXIT(TRUE);
        LOWERCASE(STRSUBSTNO('%1',FALSE)),'false','f','n','no','0': EXIT(FALSE);
      END;
      EVALUATE(b,BoolText);
      EXIT(b);
    END;

    LOCAL PROCEDURE calcDateTime@1000000023(DatTimText@1000000000 : Text[100];DatTimText2@1000000009 : Text[100]) : DateTime;
    VAR
      ts@1000000005 : Text[2];
      dt@1000000001 : DateTime;
      tim@1000000002 : Time;
      dat@1000000003 : Date;
      dec@1000000004 : Decimal;
      day@1000000006 : Integer;
      i@1000000007 : Integer;
      bi@1000000008 : BigInteger;
    BEGIN
      ts := '  ';
      ts[1] := FORMAT(1000.0)[2];


      EVALUATE(dat,DatTimText);

      DatTimText2 := DELCHR(DatTimText2,'<=>',ts);
      EVALUATE(dec,DatTimText2);
      i := ROUND(dec,1,'<');
      tim := 000000T;
      tim := tim + ROUND((dec-i)*(1000*60*60*24),1);

      dt := CREATEDATETIME(dat,tim);

      EXIT(dt);
    END;

    LOCAL PROCEDURE calcTime@1000000013(TimeText@1000000000 : Text[100]) : Time;
    VAR
      ts@1000000003 : Text[2];
      tim@1000000001 : Time;
      i@1000000002 : Integer;
      dec@1000000004 : Decimal;
    BEGIN
      ts := '  ';
      ts[1] := FORMAT(1000.0)[2];

      TimeText := DELCHR(TimeText,'<=>',ts);
      EVALUATE(dec,TimeText);
      i := ROUND(dec,1,'<');
      tim := 000000T;
      tim := tim + ROUND((dec-i)*(1000*60*60*24),1);
      EXIT(tim);
    END;

    LOCAL PROCEDURE readFieldMapping@1000000007(VAR fieldMapping@1000000000 : Record 370;VAR importerOptions@1000000006 : Integer;SourceRowsFilter@1000000002 : Text[50]);
    VAR
      keyFieldNo@1000000003 : Integer;
      Inserted@1000000007 : Boolean;
    BEGIN
      CLEAR(fieldMapping);
      fieldMapping.RESET;
      fieldMapping.DELETEALL;

      EXCELBuffer.RESET;
      EXCELBuffer.SETFILTER("Row No.",SourceRowsFilter);
      EXCELBuffer.SETRANGE(Italic,TRUE);

      IF EXCELBuffer.FIND('-') THEN
        REPEAT
          fieldMapping.INIT;
          fieldMapping := EXCELBuffer;
          IF EXCELBuffer.Formula2 <> '' THEN BEGIN
            EVALUATE(keyFieldNo, LeaveCharacters(EXCELBuffer.Formula2,'0123456789'));
            fieldMapping."Row No." := keyFieldNo + PrimaryKeyInfoBeginRow;
          END;
          fieldMapping.INSERT;
        UNTIL EXCELBuffer.NEXT = 0
      ELSE BEGIN
        clearExcel;
        ERROR(Text010);
      END;
    END;

    LOCAL PROCEDURE generateWarning@1000000040(VAR fieldMapping@1000000000 : Record 370);
    VAR
      FieldName@1000000001 : Text[512];
      FieldType@1000000002 : Text[512];
    BEGIN
      IF warn THEN BEGIN
        fieldMapping.RESET;
        fieldMapping.SETFILTER(NumberFormat,'>%1','');
        IF fieldMapping.FIND('-') THEN
        REPEAT
          FieldName := FieldName +fieldMapping.Formula4 +',';
          FieldType := FieldType +fieldMapping."Cell Value as Text" +',';
        UNTIL fieldMapping.NEXT =0;
        MESSAGE(Text011, FieldName, FieldType);
      END;
    END;

    PROCEDURE checkPrimaryKeyFieldNo@1000000030(tableNo@1000000000 : Integer;fieldNo@1000000001 : Integer) : Integer;
    VAR
      recRef@1000000005 : RecordRef;
      keyRef@1000000002 : KeyRef;
      fieldRef@1000000006 : FieldRef;
      keyCount@1000000003 : Integer;
    BEGIN
      recRef.OPEN(tableNo);
      keyRef := recRef.KEYINDEX(1);
      keyCount := keyRef.FIELDCOUNT;
      WHILE keyCount > 0 DO BEGIN
        fieldRef := keyRef.FIELDINDEX(keyCount);
        IF fieldRef.NUMBER = fieldNo THEN
          EXIT(keyCount);
        keyCount -= 1;
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE generatePrimaryKeyInfo@1000000017(tableNo@1000000002 : Integer;VAR primaryKeyFields@1000000000 : Record 370) : Integer;
    VAR
      recRef@1000000001 : RecordRef;
      keyRef@1000000007 : KeyRef;
      fieldRef@1000000011 : FieldRef;
      PKFieldCount@1000000004 : Integer;
      i@1000000005 : Integer;
    BEGIN
      recRef.OPEN(tableNo);

      keyRef := recRef.KEYINDEX(1);

      PKFieldCount := keyRef.FIELDCOUNT;

      FOR i := 1 TO PKFieldCount DO BEGIN
        fieldRef := keyRef.FIELDINDEX(i);
        primaryKeyFields.INIT;
        primaryKeyFields."Row No." := i + PrimaryKeyInfoBeginRow;
        primaryKeyFields."Column No." := 0;
        primaryKeyFields."Cell Value as Text" :='';// sssss fieldRef.CAPTION;
        primaryKeyFields.Comment   := FORMAT(fieldRef.NUMBER,0,2);
        primaryKeyFields.NumberFormat := F_PKEY;
        primaryKeyFields.Formula   := fieldRef.NAME;
        primaryKeyFields.Formula2  := 'KeyField'+FORMAT(i,0,2);
        primaryKeyFields.Formula4  := FORMAT(fieldRef.TYPE);
        primaryKeyFields.INSERT;
      END;

      recRef.CLOSE;
      EXIT(PKFieldCount);
    END;

    LOCAL PROCEDURE generateFieldMapping@1000000035(tableNo@1000000005 : Integer;columnFilter@1000000012 : Text[1024];headerRow@1000000006 : Integer;ImporterOptions@1000000011 : Integer) : Integer;
    VAR
      xlBuffer2@1000000002 : Record 370;
      field@1000000007 : Record 2000000041;
      ColumnHeader@1000000013 : Text[250];
      fieldNo@1000000003 : Integer;
      ColumnOrderNo@1000000008 : Integer;
      fieldsFound@1000000001 : Integer;
      i@1000000010 : Integer;
      newRowNo@1000000014 : Integer;
      searchOption@1000000009 : 'FieldCaption,FieldName,FieldNo';
      validateOption@1000000004 : 'All,None,FileDefined';
      row@1000000015 : Integer;
      col@1000000016 : Integer;
      importall@1000000017 : Boolean;
    BEGIN
      searchOption := ROUND(ImporterOptions/16,1,'<') MOD 4;  // same as ((ImporterOptions<<4) && 0x03)
      validateOption := ROUND(ImporterOptions/64,1,'<') MOD 4;// same as ((ImporterOptions<<6) && 0x03)
      importall := testBit(3,ImporterOptions);

      EXCELBuffer.RESET;
      IF columnFilter <>'' THEN
        EXCELBuffer.SETFILTER("Column No.",columnFilter);

      EXCELBuffer.SETFILTER("Row No.", '%1..%2|%3',ConstantsAreaBeginRow,ConstantsAreaEndRow,headerRow) ;
      IF EXCELBuffer.FIND('-') THEN BEGIN
        REPEAT
          ColumnHeader := EXCELBuffer."Cell Value as Text";
          CASE searchOption OF
            searchOption::FieldCaption: fieldNo := findFieldNoByCaption(tableNo, ColumnHeader);
            searchOption::FieldName:    fieldNo := findFieldNoByName(tableNo, ColumnHeader);
            searchOption::FieldNo:      EVALUATE(fieldNo,ColumnHeader);
            ELSE BEGIN
              clearExcel;
              ERROR(Text003, searchOption);
            END;
          END;
          CASE validateOption OF
            validateOption::All  : EXCELBuffer.Bold := TRUE;
            validateOption::None : EXCELBuffer.Bold := FALSE;
            validateOption::FileDefined:; // BOLDed header inside Excel decides
          END;
          IF fieldNo > 0 THEN BEGIN
            fieldsFound += 1;
            field.GET(tableNo,fieldNo);
            IF field.Class = field.Class::Normal THEN BEGIN // field importable
              IF EXCELBuffer.NumberFormat = '' THEN
                EXCELBuffer.NumberFormat := F_EXCLELSRC;
            END ELSE
              EXCELBuffer.NumberFormat := ''; // not importable
            IF importall THEN
              EXCELBuffer.Italic := TRUE
            ELSE
              EXCELBuffer.Italic := NOT EXCELBuffer.Italic   ;   // italic=1 -> skip import ;
            EXCELBuffer.Comment := FORMAT(fieldNo,0,2);    // maps to Field No
            EXCELBuffer.Formula := field.FieldName;        // maps to Field Name
            EXCELBuffer.Formula4 := FORMAT(field.Type);
          END ELSE BEGIN            // no destination found
            EXCELBuffer.Comment := '';
            EXCELBuffer.Formula := '';
            EXCELBuffer.NumberFormat := '';
            EXCELBuffer.Bold := FALSE;
            EXCELBuffer.Italic := FALSE;
          END;
          EXCELBuffer.MODIFY;
        UNTIL EXCELBuffer.NEXT = 0;
      END;

      EXCELBuffer.SETFILTER("Row No.", '%1',headerRow) ;
      IF EXCELBuffer.FIND('-') THEN BEGIN
        ColumnOrderNo := FieldMapBeginRow;
        newRowNo := ColumnOrderNo;
        REPEAT
          IF EXCELBuffer.Comment <>'' THEN BEGIN
            EVALUATE(fieldNo,EXCELBuffer.Comment);
            i := checkPrimaryKeyFieldNo(tableNo,fieldNo);
            IF i > 0 THEN BEGIN
              newRowNo := PrimaryKeyInfoBeginRow +i; // moves key columns to the PK area
              IF xlBuffer2.GET(newRowNo,0) THEN
                xlBuffer2.DELETE;
              EXCELBuffer.Formula2 := 'KeyField'+FORMAT(i,0,2) ;  // field in primary key
              EXCELBuffer.NumberFormat := F_PKEY;
              EXCELBuffer.Italic := TRUE;
            END;
          END;
          EXCELBuffer.RENAME(newRowNo, EXCELBuffer."Column No.");
          ColumnOrderNo += 5;
          newRowNo := ColumnOrderNo;
        UNTIL EXCELBuffer.NEXT = 0;
      END;

      EXCELBuffer.RESET;
      EXIT(fieldsFound);
    END;

    PROCEDURE renumberMappingData@1000000014(VAR xlBuffer@1000000000 : Record 370);
    VAR
      tempXlBuffer@1000000001 : TEMPORARY Record 370;
      span@1000000002 : Integer;
      i@1000000003 : Integer;
    BEGIN
      xlBuffer.RESET;
      xlBuffer.SETRANGE("Row No.", FieldMappingMinRange,FieldMappingMaxRange);
      xlBuffer.SETRANGE(Italic,TRUE);
      xlBuffer.SETRANGE("Column No.",0,256);

      span := xlBuffer.COUNT();
      span := ROUND(ABS(FieldMappingMaxRange - FieldMappingMinRange)/span,1,'<');

      i := FieldMappingMinRange;
      IF xlBuffer.FIND('-') THEN
        REPEAT
          tempXlBuffer := xlBuffer;
          tempXlBuffer."Row No." := i;
          i += span;
          IF NOT tempXlBuffer.INSERT THEN;
        UNTIL xlBuffer.NEXT = 0;

      xlBuffer.DELETEALL;

      IF tempXlBuffer.FIND('-') THEN
        REPEAT
          xlBuffer := tempXlBuffer;
          IF NOT xlBuffer.INSERT THEN;
        UNTIL tempXlBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE readHeader@1000000003(fileName@1000000002 : Text[512];sheetName@1000000001 : Text[50];headerRow@1000000007 : Integer;VAR tableNo@1000000000 : Integer;VAR ImporterOptions@1000000010 : Integer) : Integer;
    VAR
      xlBuffer2@1000000008 : Record 370;
      HeaderRowFilter@1000000004 : Code[40];
      newTableno@1000000005 : Integer;
      newHeaderRow@1000000006 : Integer;
      dataRangeFilter@1000000009 : Text[30];
    BEGIN
      EXCELBuffer.RESET;

      IF headerRow <= 0 THEN
        HeaderRowFilter := '-'
      ELSE
        HeaderRowFilter := '-' + FORMAT(headerRow,0,2)+'..';

      headerRow := ReadSelectedSheetArea(fileName,sheetName,HeaderRowFilter,'');
      EXCELBuffer.RESET;
      EXCELBuffer.SETRANGE("Row No.", headerRow);

      IF tableNo > 0 THEN BEGIN
        IF EXCELBuffer.FIND('-') THEN
          REPEAT
            xlBuffer2 := EXCELBuffer;
            xlBuffer2."Row No." := 0;
            xlBuffer2.INSERT;
          UNTIL EXCELBuffer.NEXT = 0;
          EXIT(headerRow);
      END;

      EXCELBuffer.SETRANGE("Row No.", headerRow);

      IF EXCELBuffer.FIND('-') THEN BEGIN
        IF readParameters(newTableno,newHeaderRow,EXCELBuffer,ImporterOptions) THEN BEGIN
          IF (tableNo<=0) AND (newTableno > 0) THEN
            tableNo := newTableno;
          IF newHeaderRow > 0 THEN
            headerRow := newHeaderRow-1;
          HeaderRowFilter := '-' + FORMAT(headerRow+1,0,2)+'..';
          headerRow := ReadSelectedSheetArea(fileName,sheetName,HeaderRowFilter,'');
        END;
      END;

      EXCELBuffer.RESET;
      EXCELBuffer.SETRANGE("Row No.", headerRow);
      IF EXCELBuffer.FIND('-') THEN
        REPEAT
          xlBuffer2 := EXCELBuffer;
          xlBuffer2."Row No." := 0;
          xlBuffer2.INSERT;
        UNTIL EXCELBuffer.NEXT = 0;

      EXIT(headerRow);
    END;

    LOCAL PROCEDURE readParameters@1000000031(VAR tableNo@1000000001 : Integer;VAR headerRow@1000000002 : Integer;VAR xlBuffer@1000000000 : Record 370;VAR ImporterOptions@1000000005 : Integer) paramOK : Boolean;
    VAR
      paramStr@1000000003 : Text[250];
      paramVal@1000000004 : Text[250];
    BEGIN
      xlBuffer.SETRANGE("Row No.", xlBuffer."Row No.");
      IF xlBuffer.FIND('-') THEN
        REPEAT
          paramStr := xlBuffer."Cell Value as Text";
          IF retrieveParamVal(paramStr,PARAMDEF_TABLE+':', paramVal) THEN BEGIN
            paramOK := paramOK OR EVALUATE(tableNo,paramVal);
          END;
          IF retrieveParamVal(paramStr,PARAMDEF_HEADER+':', paramVal) THEN BEGIN
            paramOK := paramOK OR EVALUATE(headerRow,paramVal);
          END;
          IF retrieveParamVal(paramStr,PARAMDEF_IMPORTALL, paramVal) THEN BEGIN
            paramOK := TRUE;
            setBit(3, ImporterOptions); // d3 = importall
          END;
          IF retrieveParamVal(paramStr,PARAMDEF_SKIPTRIGGERS, paramVal) THEN BEGIN
            paramOK := TRUE;
            setBit(8, ImporterOptions); // d8 = Skip OnIsert(TRUE)/OnModify(TRUE)
          END;

          WHILE retrieveParamVal(paramStr,PARAMDEF_CONSTANT+':', paramVal) DO BEGIN
            paramOK := paramOK OR addPredefinedValue(paramVal,0,tableNo);
          END;
          WHILE retrieveParamVal(paramStr,PARAMDEF_COUNTER+':', paramVal) DO BEGIN
            paramOK := paramOK OR addPredefinedValue(paramVal,1,tableNo);
          END;
          WHILE retrieveParamVal(paramStr,PARAMDEF_COPY+':', paramVal) DO BEGIN
            paramOK := paramOK OR addPredefinedValue(paramVal,2,tableNo);
          END;
        UNTIL xlBuffer.NEXT =0;
    END;

    LOCAL PROCEDURE retrieveParamVal@1000000034(VAR paramStr@1000000000 : Text[512];paramDef@1000000001 : Text[30];VAR ParamVal@1000000002 : Text[250]) : Boolean;
    VAR
      i@1000000003 : Integer;
      l@1000000004 : Integer;
      paramBuf@1000000006 : Text[250];
    BEGIN
      IF paramStr = '' THEN
        EXIT(FALSE);

      i := STRPOS(LOWERCASE(paramStr),LOWERCASE(paramDef));
      IF i = 0 THEN
        EXIT(FALSE);
      l := STRLEN(paramDef);
      paramBuf := COPYSTR(paramStr,i);
      paramStr := COPYSTR(paramStr,1,i-1);
      i := STRPOS(paramBuf,';');
      IF i = 0 THEN
        i := STRLEN(paramBuf)+1;
      ParamVal := COPYSTR(paramBuf,l+1,i-l-1);
      paramStr := paramStr + COPYSTR(paramBuf,i+1);
      EXIT(TRUE);
    END;

    PROCEDURE addPredefinedValue@1000000044(ParamStr@1000000002 : Text[250];MappingOption@1000000001 : 'Const,Incr,Copy';tableNo@1000000007 : Integer) : Boolean;
    VAR
      xlBuffer2@1000000006 : Record 370;
      i@1000000003 : Integer;
      paramVal@1000000005 : Text[512];
      paramDef@1000000004 : Text[30];
    BEGIN
      i := STRPOS(ParamStr,'=');
      IF i = 0 THEN
        EXIT(FALSE);

      paramDef := COPYSTR(ParamStr,1,i-1);
      paramVal := COPYSTR(ParamStr,i+1);

      IF (tableNo > 0) AND (removeDigits(paramDef) = '') THEN BEGIN // paramDef is a field number
        EVALUATE(i,paramDef);
        paramDef := getFieldNameByNo(tableNo,i);
      END;
      xlBuffer2 := EXCELBuffer;
      xlBuffer2.COPYFILTERS(EXCELBuffer);
      EXCELBuffer.RESET;
      EXCELBuffer.SETRANGE("Row No.",ConstantsAreaBeginRow,ConstantsAreaEndRow);
      IF EXCELBuffer.FIND('+') THEN
        i := EXCELBuffer."Row No." + 4
      ELSE
        i:= ConstantsAreaBeginRow +4;

      EXCELBuffer.INIT;
      EXCELBuffer."Row No." := i;
      EXCELBuffer."Column No." := 0;
      EXCELBuffer."Cell Value as Text" := paramDef; // field name in header
      EXCELBuffer.Formula3 := paramVal;             // field value

      CASE MappingOption OF
        MappingOption::Const: EXCELBuffer.NumberFormat := PARAMDEF_CONSTANT;
        MappingOption::Incr:  EXCELBuffer.NumberFormat := PARAMDEF_COUNTER;
        MappingOption::Copy:  EXCELBuffer.NumberFormat := PARAMDEF_COPY;
      END;

      EXCELBuffer.Bold := xlBuffer2.Bold;
      EXCELBuffer.Underline := MappingOption = MappingOption::Incr;
      EXCELBuffer.Italic    := MappingOption = MappingOption::Copy;

      IF MappingOption = MappingOption::Copy THEN
        EXCELBuffer."Column No." := -1;

      EXCELBuffer.INSERT;
      EXCELBuffer := xlBuffer2;
      EXCELBuffer.COPYFILTERS(xlBuffer2);
    END;

    PROCEDURE getFieldNameByNo@1000000050(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer) fName : Text[50];
    VAR
      recRef@1000000002 : RecordRef;
      fieldRef@1000000003 : FieldRef;
    BEGIN
      recRef.OPEN(TableNo);
      fieldRef := recRef.FIELD(FieldNo);
      EXIT(fieldRef.NAME);
    END;

    LOCAL PROCEDURE postProcessParams@1000000039(headerRow@1000000002 : Integer);
    VAR
      xlBuffer2@1000000001 : Record 370;
      xlBuffer3@1000000005 : Record 370;
      row@1000000003 : Integer;
      col@1000000004 : Integer;
      SearchAreaFilter@1000000006 : Text[80];
    BEGIN
      xlBuffer2 := EXCELBuffer;
      xlBuffer2.COPYFILTERS(EXCELBuffer);

      SearchAreaFilter := STRSUBSTNO('%1..%2',FORMAT(ConstantsAreaBeginRow,0,2),FORMAT(ConstantsAreaEndRow,0,2));

      EXCELBuffer.RESET;
      EXCELBuffer.SETFILTER("Row No.",'%1..%2|%3..%4',
        FieldMapBeginRow,FieldMapEndRow,PrimaryKeyInfoBeginRow,PrimaryKeyInfoEndRow);
      EXCELBuffer.SETRANGE("Column No.",1,255);

      IF EXCELBuffer.FIND('-') THEN
      REPEAT
        WHILE findSourceColumnNo(EXCELBuffer,SearchAreaFilter,EXCELBuffer."Cell Value as Text",TRUE,row,col) DO BEGIN
          xlBuffer3.GET(row,col);
          xlBuffer3.DELETE;
        END;
      UNTIL EXCELBuffer.NEXT = 0;

      EXCELBuffer.RESET;
      EXCELBuffer.SETFILTER("Row No.",'%1..%2',
        PrimaryKeyInfoBeginRow,PrimaryKeyInfoEndRow);
      EXCELBuffer.SETRANGE("Column No.",0);

      IF EXCELBuffer.FIND('-') THEN
      REPEAT
        WHILE findSourceColumnNo(EXCELBuffer,SearchAreaFilter,EXCELBuffer."Cell Value as Text",TRUE,row,col) DO BEGIN
          xlBuffer3 := EXCELBuffer;
          EXCELBuffer.GET(row,col);
          xlBuffer3.Formula3    := EXCELBuffer.Formula3;
          xlBuffer3.Bold        := EXCELBuffer.Bold;
          xlBuffer3.Underline   := EXCELBuffer.Underline;
          xlBuffer3.Italic      := TRUE;
          xlBuffer3.NumberFormat:= EXCELBuffer.NumberFormat;
          EXCELBuffer.DELETE;
          EXCELBuffer := xlBuffer3;
          EXCELBuffer.MODIFY;
          EXCELBuffer.RENAME(EXCELBuffer."Row No.",col);
        END;
      UNTIL EXCELBuffer.NEXT = 0;

      SearchAreaFilter := STRSUBSTNO('%1..%2',
        FORMAT(FieldMappingMinRange,0,2),FORMAT(FieldMappingMaxRange,0,2));

      EXCELBuffer.RESET;
      EXCELBuffer.SETRANGE("Column No.",-1); // copy defs
      IF EXCELBuffer.FIND('-') THEN
      REPEAT
        IF findSourceColumnNo(EXCELBuffer,SearchAreaFilter,EXCELBuffer.Formula3,TRUE,row,col) THEN BEGIN
          IF (EXCELBuffer."Row No." <> row) AND (EXCELBuffer."Column No." <> col) THEN BEGIN
            xlBuffer3 := EXCELBuffer; // target
            EXCELBuffer.GET(row,col); // source column
            EXCELBuffer.Italic      := TRUE;
            EXCELBuffer.MODIFY;
            xlBuffer3."Cell Value as Text" := EXCELBuffer."Cell Value as Text";
            xlBuffer3.NumberFormat := xlBuffer3.NumberFormat + ':' + EXCELBuffer.NumberFormat;
            xlBuffer3.Formula3 := EXCELBuffer.Formula3;
            xlBuffer3.Italic     := TRUE;
            col := EXCELBuffer."Column No.";
            EXCELBuffer := xlBuffer3;
            EXCELBuffer.MODIFY;
            EXCELBuffer.RENAME(EXCELBuffer."Row No.",col);
          END;
        END ELSE BEGIN
           EXCELBuffer.Italic      := FALSE;
           EXCELBuffer.MODIFY;
        END;
      UNTIL EXCELBuffer.NEXT = 0;

      EXCELBuffer := xlBuffer2;
      EXCELBuffer.COPYFILTERS(xlBuffer2);
    END;

    PROCEDURE findSourceColumnNo@1000000048(VAR xlBuffer@1000000000 : Record 370;SearchAreaRowFilter@1000000004 : Text[250];SourceColName@1000000001 : Text[250];fullMatch@1000000007 : Boolean;VAR Row@1000000005 : Integer;VAR Col@1000000006 : Integer) : Boolean;
    VAR
      xlBuffer2@1000000002 : Record 370;
      i@1000000003 : Integer;
    BEGIN
      SourceColName := LOWERCASE(SourceColName);

      xlBuffer2 := xlBuffer;
      xlBuffer2.COPYFILTERS(xlBuffer);
      xlBuffer.RESET;
      xlBuffer.SETFILTER("Row No.",SearchAreaRowFilter);

      IF xlBuffer.FIND('-') THEN
      REPEAT
        IF (fullMatch AND (LOWERCASE(xlBuffer."Cell Value as Text" ) = SourceColName))
          OR (NOT fullMatch AND ((LOWERCASE(COPYSTR(xlBuffer."Cell Value as Text",1,STRLEN(SourceColName)) ) = SourceColName)) )
        THEN BEGIN
          Row := xlBuffer."Row No.";
          Col := xlBuffer."Column No.";
          xlBuffer := xlBuffer2;
          xlBuffer.COPYFILTERS(xlBuffer2);
          EXIT(TRUE);
        END;
      UNTIL xlBuffer.NEXT = 0;

      xlBuffer := xlBuffer2;
      xlBuffer.COPYFILTERS(xlBuffer2);
    END;

    PROCEDURE activeMappingExists@1000000043(DestFieldFilter@1000000001 : Text[30];IsActive@1000000000 : Boolean;currRec@1000000003 : Record 370) retVal : Text[250];
    VAR
      tempFMap@1000000002 : Record 370;
    BEGIN
      tempFMap.RESET;
      tempFMap.SETRANGE(Comment,DestFieldFilter);
      IF IsActive THEN
        tempFMap.SETRANGE(Italic,TRUE);

      IF tempFMap.FIND('-') THEN
        REPEAT
         IF (tempFMap."Row No." <> currRec."Row No.")
           OR (tempFMap."Column No." <> currRec."Column No.")
         THEN BEGIN // another mapping found
           IF tempFMap."Cell Value as Text" <> '' THEN
             EXIT(tempFMap."Cell Value as Text");
            EXIT(Text006);
         END;
        UNTIL tempFMap.NEXT =0;

      EXIT('');
    END;

    PROCEDURE SourceFieldLookup@1040000(fname@1000000003 : Text[200];VAR SkipOnModify@1040001 : Boolean;VAR MappingLine@1040000 : Record 370) : Boolean;
    VAR
      SourceFields@1000000000 : TEMPORARY Record 370;
    BEGIN
      fname := LOWERCASE(fname);

      EXCELBuffer.RESET;
      EXCELBuffer.SETRANGE("Column No.",1,256);
      EXCELBuffer.SETRANGE("Row No.",0);
      IF fname <> '' THEN
        EXCELBuffer.SETFILTER("Cell Value as Text",'@'+fname+'*')
      ELSE
        EXCELBuffer.SETFILTER("Cell Value as Text",'<>%1','');

      IF NOT EXCELBuffer.FIND('-') THEN
        EXCELBuffer.SETFILTER("Cell Value as Text",'<>%1','')
      ELSE
        IF EXCELBuffer.NEXT = 0 THEN BEGIN
          MappingLine."Cell Value as Text" := EXCELBuffer."Cell Value as Text";
          MappingLine.Formula3 := '';
          MappingLine.Italic   := TRUE;
          MappingLine.MODIFY;
          SkipOnModify := TRUE;
          MappingLine.RENAME(MappingLine."Row No.", EXCELBuffer."Column No.");
          EXIT(TRUE);
        END;

      IF EXCELBuffer.FIND('-') THEN
        REPEAT
          IF NOT SourceFields.GET(0,EXCELBuffer."Column No.") THEN BEGIN
            SourceFields := EXCELBuffer;
            SourceFields."Row No." := 0;
            SourceFields.INSERT;
          END;
        UNTIL EXCELBuffer.NEXT = 0
      ELSE
        EXIT(FALSE);

      SourceFields.FIND('-');

      IF FORM.RUNMODAL(FORM::Page50267, SourceFields) = ACTION::LookupOK THEN BEGIN
        MappingLine."Cell Value as Text" := SourceFields."Cell Value as Text";
        MappingLine.Formula3 := '';
        MappingLine.Italic   := TRUE;
        MappingLine.MODIFY;
        SkipOnModify := TRUE;
        MappingLine.RENAME(MappingLine."Row No.", SourceFields."Column No.");
        EXIT(TRUE);
      END
    END;

    EVENT XlApp@1000000014::NewWorkbook@1565(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookOpen@1567(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookActivate@1568(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookDeactivate@1569(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookBeforeClose@1570(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookBeforeSave@1571(Wb@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookBeforePrint@1572(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookNewSheet@1573(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookAddinInstall@1574(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookAddinUninstall@1575(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1000000014::WindowResize@1554(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp@1000000014::WindowActivate@1556(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp@1000000014::WindowDeactivate@1557(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT XlApp@1000000014::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookPivotTableCloseConnect@2160(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookPivotTableOpenConnecti@2161(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookSync@2289(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookBeforeXmlImport@2290(Wb@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text[1024];IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookAfterXmlImport@2291(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookBeforeXmlExport@2292(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text[1024];VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1000000014::WorkbookAfterXmlExport@2293(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text[1024];Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::Open@1923();
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::Activate@304();
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::Deactivate@1530();
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::BeforeClose@1546(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::BeforeSave@1547(SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::BeforePrint@1549(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::NewSheet@1550(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::AddinInstall@1552();
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::AddinUninstall@1553();
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::WindowResize@1554(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::WindowActivate@1556(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::WindowDeactivate@1557(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::PivotTableCloseConnection@2158(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::PivotTableOpenConnection@2159(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::Sync@2266(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::BeforeXmlImport@2283(Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text[1024];IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::AfterXmlImport@2285(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::BeforeXmlExport@2287(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text[1024];VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1000000013::AfterXmlExport@2288(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text[1024];Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::SelectionChange@1543(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::BeforeDoubleClick@1537(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::BeforeRightClick@1534(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::Activate@304();
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::Deactivate@1530();
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::Calculate@279();
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::Change@1545(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::FollowHyperlink@1470(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT XlWrkSht@1000000015::PivotTableUpdate@2156(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    BEGIN
    {
      //
      // Universal Excel Importer
      // (c) 2006-2008 Slawek Guzek, sguzek@onet.pl
      //
      NC S1989 PCH ¯¥à¥­¥á¥­® ¢ ª«¨¥­â. ¤¨ ¯ §®­

      HOW TO USE IMPORTER INSIDE CODE

       There are 2 possible function calls -  3 parameter funcion call and 6 parameter function call.
       3 parameter funcion call provides minimum parameters and rely on user choices of file, and various options.

      ImportData(tableNo, columnFilter, importOptions) : Integer

        tableNo - destination table number. If set to 0 Importer tries to read table no
          from Excel File, from any cell from first non-emty row of imported worksheet.
          If doesn't find 'table:<destinationTableNo>' in a cell then asks user

        columnFilter - put here filter (in Navision syntax) which fields are allowed
          to import. Putting empty string here causes all fields are allowed. Importer
          don't allow to import data to flowfields or flowfilters, regardless of columnFilter
          value.
          When specifying filter remember to include primary key fields in it !

        importOptions - define Importer behaviour, tells Importer what to do with data


      ImportDataFromFile(VAR fileName, VAR sheetName,tableNo,headerRow,columnFilter,importOptions)

        fileName - put a TEXT VARIABLE here storing Excel file name to import. If variable
          is empty or file does not exist Importer asks for new file, and returns
          here selected filename.

        sheetName - put a TEXT VARIABLE here storing Excel worksheet to import. If variable
          is empty, or worksheet doesn't exist in Excel file, Importer allows user
          fo select one workheet among existing in file and returns user selection here

        tableNo - destination table number. Described in ImportData() function.

        headerRow - tells Importer where to find in Excel file row with field captions,
          names or numbers, or with parameters. The data to import is assumed to be
          in non empty rows below header.

        columnFilter - Described in ImportData() function.

        importOptions - define Importer behaviour, tells Importer what to do with data


      OPIONS THAT CAN BE SET PROGRAMATICALLY

      To set option programatically (during run-time) an integer value have to be passed to
      Importer function call. Some bits of the integer has assigned meaning,

       Allowed values are:

         d1 d0
         0  0 - illegal, Importer will change to 3 - Insert or Update
         0  1 (importOptions=1) - insert new records
         1  0 (importOptions=2) - update existing data
         1  1 (importOptions=3) - insert new or update data
           when inserting new records insert will be done just after filling primary
           key fields, then fills the rest and launches MODIFY

        d2=1 (importOptions=4) - Delayed insert.
          when inserting Importer inserts records after filling all fields
        d3=1 (importOptions=8) - import all
          imports all columne regardless of Excel Italic attribute in Excel header

        searching for fields in Excel header
         d5 d4
         0  0 - match Excel column header to Field Caption
         0  1 (importOptions=16) - match Excel column header to Field Name
         1  x (importOptions=32) - match Excel column header to Field No.

        use of VALIDATE trigger
         d7 d6
         0  0 - VALIDATE all by default
         0  1 (importOptions=64)  - Don't VALIDATE all by default
         1  x (importOptions=128) - VALIDATE according to header in Excel (Bold=VALIDATE)

         d8=1 (importOptions=256) - don't use INSERT(True)/Modify(True)

         d10=1 (importOptions=1024) - don't allow to change options
           user will not be allowed to change options (update,insert,OnInsert(True))

         d11=1 (importOptions=2048) - don't allow to change mapping
           user will not be allowed to add or change destination fields

         d12=1 (importOptions=4096) - don't allow to change validation
           user will not be allowed to choose whether to VALIDATE destination field or not

         d31=1 (importOptions=2147483648) - silent mode
           no questions, no field mapping dialog, just import based on parameters and excel settings

      HOW TO COMBINE VARIOUS OPTIONS ?

       Just add their decimal values. For example: if you want Importer to update only
       fields in destination table you need ImportOption=2, and if you've put field numbers
       as header row in Excel and wants Importer to try to match it using field numbers you
       will need to pass ImportOption=32. To have both option set just pass the sum of options'
       decimal values, importOption=34 (2+32)

       Usually put 0 here which mean Importer will try to match header assuming that
       it contains field captions IN CURRENT LANGUAGE, and insert new or update existing
       records in the destination table.

      WHAT OPTIONS CAN BE SET INSIDE EXCEL FILE ?

       Importer options can be set by specyfying parameter keywords with values in one or a few cells
       in single row, or by formating column headers. First non-empty row is considered as a config
       row if contains in any cell at least one recognizable parameter.

       If there is no recognizable parameters found the first nonempty row is then considered
       as the header row. Otherwise the next non-empty row is considered as header row, or one set
       by parameter

       Two options can be set by formatting cells in header row:

        BOLD - this tells importer to launch VALIDATE trigger on this field.
          This works if options passed to importer funcion call
          has bit 7 set (ImporterOption = 128)

        ITALIC - this tells importer to SKIP the field during import.
          This can be overrided by passing to importer funcion call
          integer with bit d3 set (ImporterOption = 8)

      Accepted parameters formats are:
        1. ParameterID:ParameterValue
        2. ParameterID:TargetField=ParameterValue
          - target field can be field name, or field number

      Acceptable excel parameters description:
        table:number
            - tells Importer the destination table number
          Example:
            table:27
        importall
            - has no additional parameter values, tells Importer to import all columns to which
              matching field will be found, and ignore Italic settings

        header:number
            - tell the importer the row number from where Importer starts to search for row
              interpreted as table header. All rows above given number are skipped, and can contain
              any data, fo example some comments, etc.
          Example:
             header:6 - importer skip all rows between current row and row number 5 inclusive,
                 and will start to search for header from row 6

        const:field_name=constant_value
            - field 'field_name' in every record will be filled with constant_value
          Example:
             const:description 2=My preset - if the destination table is set to one having field
                 'Description 2' (example Item - 27), field named 'Description 2' in every imported
                 line will be filled in with text 'My preset'
             const:5=My preset - in this case parameter Table:number has to be setup proir to instance
                 of const parameter. If destination table will be set to 27, then in every imported
                 record field number 5 ('Description 2' in case of table 27) will be filled in with
                 text 'My preset'

         counter:field_name=start_value
             - field 'field_name' in every record will be filled with value, starting with 'start_value'
               in first record, and incremented with every record inserted. Very usefull for reading into
               journal tables
            Example:
              counter:No.=IT0001 - when importing to table 27 field No. in first imported row will have
                IT0001 value, in second IT0001, and so on
              counter:1=IT0001 - in this case parameter Table:number has to be setup proir to instance
                of counter parameter. Then 1 is interpreted as field number of table set by parameter
                table:number

      Parameters can be passed on per cell, or combined in one or more cell, separated by semicolons.
         Example:
           1. cell A1-> table:27,  cell A2-> counter:No.=I0001, cell A3-> const:5=My preset
           2. cell A1-> table:27,  cell A3-> counter:No.=I0001;const:5=My preset

      Parameters are always read from first row containing any of recognizeable parameters, and only
      from this one single row (so-called 'config row'). Parameters are read from left cell to right
      and last read takes precedence before first. There no need to put parameters in
      consequtive cells. There can be another data put in config row - it will be ignored.
    }
    END.
  }
}

