OBJECT Table 17440 Timesheet Status
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               TESTFIELD(Status,Status::Open);

               PayrollPeriod.GET("Period Code");

               TimesheetLine.RESET;
               TimesheetLine.SETRANGE("Employee No.","Employee No.");
               TimesheetLine.SETRANGE(Date,PayrollPeriod."Starting Date",PayrollPeriod."Ending Date");
               TimesheetLine.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Timesheet Status;
               RUS=Статус табеля];
  }
  FIELDS
  {
    { 1   ;   ;Period Code         ;Code10        ;TableRelation="Payroll Period";
                                                   CaptionML=[ENU=Period Code;
                                                              RUS=Код периода] }
    { 2   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Employee No.;
                                                              RUS=Код сотрудника] }
    { 5   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Open,Released;
                                                                    RUS=Открыто,Выпущено];
                                                   OptionString=Open,Released }
    { 6   ;   ;Payroll Status      ;Option        ;CaptionML=[ENU=Payroll Status;
                                                              RUS=Статус зарплаты];
                                                   OptionCaptionML=[ENU=" ,Calculated,Posted,Paid";
                                                                    RUS=" ,Рассчитана,Учтена,Выплачена"];
                                                   OptionString=[ ,Calculated,Posted,Paid] }
    { 7   ;   ;Advance Status      ;Option        ;CaptionML=[ENU=Advance Status;
                                                              RUS=Статус аванса];
                                                   OptionCaptionML=[ENU=" ,Calculated,Posted,Paid";
                                                                    RUS=" ,Рассчитана,Учтена,Выплачена"];
                                                   OptionString=[ ,Calculated,Posted,Paid] }
    { 10  ;   ;Planned Work Days   ;Decimal       ;CaptionML=[ENU=Planned Work Days;
                                                              RUS=Плановые рабочие дни] }
    { 11  ;   ;Planned Work Hours  ;Decimal       ;CaptionML=[ENU=Planned Work Hours;
                                                              RUS=Плановые рабочие часы] }
    { 12  ;   ;Calendar Days       ;Decimal       ;CaptionML=[ENU=Calendar Days;
                                                              RUS=Календарные дни] }
    { 13  ;   ;Actual Work Days    ;Decimal       ;CaptionML=[ENU=Actual Work Days;
                                                              RUS=Фактические рабочие дни] }
    { 14  ;   ;Actual Work Hours   ;Decimal       ;CaptionML=[ENU=Actual Work Hours;
                                                              RUS=Фактические рабочие часы] }
    { 15  ;   ;Absence Work Days   ;Decimal       ;CaptionML=[ENU=Absence Work Days;
                                                              RUS=Рабочие дни отсутствия] }
    { 16  ;   ;Absence Hours       ;Decimal       ;CaptionML=[ENU=Absence Hours;
                                                              RUS=Часы отсутствия] }
    { 17  ;   ;Overtime Hours      ;Decimal       ;CaptionML=[ENU=Overtime Hours;
                                                              RUS=Сверхурочные часы] }
    { 18  ;   ;Holiday Work Days   ;Decimal       ;CaptionML=[ENU=Holiday Work Days;
                                                              RUS=Рабочие дни в праздники] }
    { 19  ;   ;Holiday Work Hours  ;Decimal       ;CaptionML=[ENU=Holiday Work Hours;
                                                              RUS=Рабочие часы в праздники] }
    { 20  ;   ;Absence Calendar Days;Decimal      ;CaptionML=[ENU=Absence Calendar Days;
                                                              RUS=Календ. дни отсутствия] }
    { 21  ;   ;Actual Calendar Days;Decimal       ;CaptionML=[ENU=Actual Calendar Days;
                                                              RUS=Фактические календарные дни] }
    { 22  ;   ;Planned Night Hours ;Decimal       ;CaptionML=[ENU=Planned Night Hours;
                                                              RUS=Плановые ночные часы] }
  }
  KEYS
  {
    {    ;Period Code,Employee No.                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PayrollPeriod@1210006 : Record 17426;
      PayrollLedgEntry@1210000 : Record 17418;
      PayrollDoc@1210001 : Record 17414;
      Text14800@1210002 : TextConst 'ENU=You cannot reopen because there are payroll ledger entries for this period.;RUS=Невозможно открыть, так как есть учтенные операции зарплаты за этот период.';
      Text14801@1210003 : TextConst 'ENU=You cannot reopen because there are payroll documents for this period.;RUS=Невозможно открыть, так как есть зарплатные документы за этот период.';
      EmployeeJobEntry@1210009 : Record 17363;
      TimesheetStatus@1210012 : Record 17440;
      TimesheetLine@1210007 : Record 17441;
      HumanResSetup@1210008 : Record 5218;
      CalendarMgt@1210004 : Codeunit 17430;
      TimesheetMgt@1210005 : Codeunit 17440;
      Text14802@1210010 : TextConst 'ENU=You should reopen Timesheet for %1 Period Code first.;RUS=Сначала следует повторно открыть табель для кода периода %1.';

    PROCEDURE Release@1210000();
    BEGIN
      IF Status = Status::Released THEN
        EXIT;

      TimesheetStatus.RESET;
      TimesheetStatus.SETRANGE("Employee No.","Employee No.");
      TimesheetStatus.SETFILTER("Period Code",'<%1',"Period Code");
      TimesheetStatus.SETRANGE(Status,TimesheetStatus.Status::Open);
      IF TimesheetStatus.FINDFIRST THEN
        TimesheetStatus.TESTFIELD(Status,TimesheetStatus.Status::Released);

      Calculate;

      Status := Status::Released;
      MODIFY;
    END;

    PROCEDURE Reopen@1210001();
    BEGIN
      IF Status = Status::Open THEN
        EXIT;

      PayrollLedgEntry.RESET;
      PayrollLedgEntry.SETCURRENTKEY("Employee No.");
      PayrollLedgEntry.SETRANGE("Employee No.","Employee No.");
      PayrollLedgEntry.SETRANGE("Period Code","Period Code");
      PayrollLedgEntry.SETRANGE(Reversed,FALSE);
      IF NOT PayrollLedgEntry.ISEMPTY THEN
        ERROR(Text14800);

      PayrollDoc.RESET;
      PayrollDoc.SETCURRENTKEY("Employee No.");
      PayrollDoc.SETRANGE("Employee No.","Employee No.");
      PayrollDoc.SETRANGE("Period Code","Period Code");
      IF NOT PayrollDoc.ISEMPTY THEN
        ERROR(Text14801);

      TimesheetStatus.RESET;
      TimesheetStatus.SETRANGE("Employee No.","Employee No.");
      TimesheetStatus.SETFILTER("Period Code",'>%1',"Period Code");
      TimesheetStatus.SETRANGE(Status,TimesheetStatus.Status::Released);
      IF TimesheetStatus.FINDLAST THEN
        ERROR(Text14802,"Period Code");

      Status := Status::Open;
      MODIFY;
    END;

    PROCEDURE Calculate@1210002();
    VAR
      StartDate@1210003 : Date;
      EndDate@1210004 : Date;
    BEGIN
      PayrollPeriod.GET("Period Code");

      HumanResSetup.GET;
      HumanResSetup.TESTFIELD("Work Time Group Code");
      HumanResSetup.TESTFIELD("Night Work Group Code");
      HumanResSetup.TESTFIELD("Overtime 1.5 Group Code");
      HumanResSetup.TESTFIELD("Overtime 2.0 Group Code");
      HumanResSetup.TESTFIELD("Weekend Work Group");
      HumanResSetup.TESTFIELD("Holiday Work Group");
      HumanResSetup.TESTFIELD("Absence Group Code");

      "Planned Work Days" := 0;
      "Planned Work Hours" := 0;
      "Calendar Days" := 0;
      "Actual Work Days" := 0;
      "Actual Work Hours" := 0;
      "Absence Calendar Days" := 0;
      "Absence Work Days" := 0;
      "Absence Hours" := 0;
      "Overtime Hours" := 0;
      "Holiday Work Days" := 0;
      "Holiday Work Hours" := 0;

      EmployeeJobEntry.RESET;
      EmployeeJobEntry.SETCURRENTKEY("Employee No.");
      EmployeeJobEntry.SETRANGE("Employee No.","Employee No.");
      EmployeeJobEntry.SETRANGE("Position Changed",TRUE);
      EmployeeJobEntry.SETRANGE("Starting Date",0D,PayrollPeriod."Ending Date");
      EmployeeJobEntry.SETFILTER("Ending Date",'%1|%2..',0D,PayrollPeriod."Starting Date");
      IF EmployeeJobEntry.FINDSET THEN
        REPEAT
          StartDate := PayrollPeriod.GetMinDate(PayrollPeriod,EmployeeJobEntry."Starting Date");
          EndDate := PayrollPeriod.GetMaxDate(PayrollPeriod,EmployeeJobEntry."Ending Date");
          "Calendar Days" +=
            CalendarMgt.GetPeriodInfo(
              EmployeeJobEntry."Calendar Code",StartDate,EndDate,1);
          "Planned Work Days" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Work Time Group Code",StartDate,EndDate,0);
          "Planned Work Hours" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Work Time Group Code",StartDate,EndDate,1);
          "Planned Night Hours" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Work Time Group Code",StartDate,EndDate,6);
          "Actual Work Days" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Work Time Group Code",StartDate,EndDate,2);
          "Actual Work Hours" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Work Time Group Code",StartDate,EndDate,3);
          "Overtime Hours" +=
            (TimesheetMgt.GetTimesheetInfo(
               "Employee No.",HumanResSetup."Overtime 1.5 Group Code",StartDate,EndDate,3) +
             TimesheetMgt.GetTimesheetInfo(
               "Employee No.",HumanResSetup."Overtime 2.0 Group Code",StartDate,EndDate,3));
          "Holiday Work Days" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Holiday Work Group",StartDate,EndDate,2);
          "Holiday Work Hours" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Holiday Work Group",StartDate,EndDate,3);
          "Absence Calendar Days" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Absence Group Code",StartDate,EndDate,2);
          "Actual Calendar Days" :=
            "Calendar Days" - "Absence Calendar Days";
          "Absence Work Days" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Absence Group Code",StartDate,EndDate,4);
          "Absence Hours" +=
            TimesheetMgt.GetTimesheetInfo(
              "Employee No.",HumanResSetup."Absence Group Code",StartDate,EndDate,3);
        UNTIL EmployeeJobEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

