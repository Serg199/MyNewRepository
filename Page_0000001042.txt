OBJECT Page 1042 Copy Job Planning Lines
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Job Planning Lines;
               RUS=Копировать строки планирования работ];
    PageType=StandardDialog;
    OnQueryClosePage=BEGIN
                       IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
                         ValidateUserInput;
                         CopyJob.SetCopyQuantity(CopyQuantity);
                         CopyJob.SetCopyJobPlanningLineType(PlanningLineType);
                         CopyJob.SetJobTaskDateRange(FromDate,ToDate);
                         CopyJob.CopyJobPlanningLines(SourceJobTask,TargetJobTask);
                         MESSAGE(Text001);
                       END
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 15  ;1   ;Group     ;
                CaptionML=[ENU=Copy from;
                           RUS=Копировать из] }

    { 11  ;2   ;Field     ;
                CaptionML=[ENU=Job No.;
                           RUS=Код работы];
                ToolTipML=[ENU=Specifies the job number.;
                           RUS=Определяет номер работы.];
                ApplicationArea=#Jobs;
                SourceExpr=SourceJobNo;
                TableRelation=Job;
                OnValidate=VAR
                             SourceJob@1001 : Record 167;
                           BEGIN
                             IF (SourceJobNo <> '') AND NOT SourceJob.GET(SourceJobNo) THEN
                               ERROR(Text003,SourceJob.TABLECAPTION,SourceJobNo);

                             SourceJobTaskNo := '';
                           END;
                            }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Job Task No.;
                           RUS=Номер рабочего задания];
                ToolTipML=[ENU=Specifies the job task number.;
                           RUS=Определяет номер рабочего задания.];
                ApplicationArea=#Jobs;
                SourceExpr=SourceJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record 1001;
                           BEGIN
                             IF (SourceJobTaskNo <> '') AND NOT JobTask.GET(SourceJobNo,SourceJobTaskNo) THEN
                               ERROR(Text003,JobTask.TABLECAPTION,SourceJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record 1001;
                         BEGIN
                           IF SourceJobNo <> '' THEN BEGIN
                             JobTask.SETRANGE("Job No.",SourceJobNo);
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               SourceJobTaskNo := JobTask."Job Task No.";
                           END;
                         END;
                          }

    { 2   ;2   ;Field     ;
                Name=Planning Line Type;
                CaptionML=[ENU=Incl. Planning Line Type;
                           RUS=Включ. строки планирования типа];
                ToolTipML=[ENU=Specifies how copy planning lines. Budget+Billable: All planning lines are copied. Budget: Only lines of type Budget or type Both Budget and Billable are copied. Billable: Only lines of type Billable or type Both Budget and Billable are copied.;
                           RUS=Определяет порядок копирования строк планирования. "Бюджет и к оплате": копируются все строки планирования. "Бюджет": копируются только строки типа "Бюджет" или "Бюджет и к оплате". "К оплате": копируются только строки типа "К оплате" или "Бюджет и к оплате".];
                OptionCaptionML=[ENU=Budget+Billable,Budget,Billable;
                                 RUS=Бюджет и к оплате,Бюджет,К оплате];
                ApplicationArea=#Jobs;
                SourceExpr=PlanningLineType }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Starting Date;
                           RUS=Дата начала];
                ToolTipML=[ENU=Specifies the date from which the report or batch job processes information.;
                           RUS=Определяет дату, начиная с которой информация будет обрабатываться отчетом или пакетным заданием.];
                ApplicationArea=#Jobs;
                SourceExpr=FromDate }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Ending Date;
                           RUS=Дата окончания];
                ToolTipML=[ENU=Specifies the date to which the report or batch job processes information.;
                           RUS=Определяет дату, до которой информация будет обрабатываться отчетом или пакетным заданием.];
                ApplicationArea=#Jobs;
                SourceExpr=ToDate }

    { 5   ;1   ;Group     ;
                CaptionML=[ENU=Copy to;
                           RUS=Копировать в] }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Job No.;
                           RUS=Код работы];
                ToolTipML=[ENU=Specifies the job number.;
                           RUS=Определяет номер работы.];
                ApplicationArea=#Jobs;
                SourceExpr=TargetJobNo;
                TableRelation=Job;
                OnValidate=VAR
                             TargetJob@1001 : Record 167;
                           BEGIN
                             IF (TargetJobNo <> '') AND NOT TargetJob.GET(TargetJobNo) THEN
                               ERROR(Text003,TargetJob.TABLECAPTION,TargetJobNo);

                             TargetJobTaskNo := '';
                           END;
                            }

    { 1   ;2   ;Field     ;
                CaptionML=[ENU=Job Task No.;
                           RUS=Номер рабочего задания];
                ToolTipML=[ENU=Specifies the job task number.;
                           RUS=Определяет номер рабочего задания.];
                ApplicationArea=#Jobs;
                SourceExpr=TargetJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record 1001;
                           BEGIN
                             IF (TargetJobTaskNo <> '') AND NOT JobTask.GET(TargetJobNo,TargetJobTaskNo) THEN
                               ERROR(Text003,JobTask.TABLECAPTION,TargetJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record 1001;
                         BEGIN
                           IF TargetJobNo <> '' THEN BEGIN
                             JobTask.SETRANGE("Job No.",TargetJobNo);
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               TargetJobTaskNo := JobTask."Job Task No.";
                           END;
                         END;
                          }

    { 6   ;1   ;Group     ;
                CaptionML=[ENU=Apply;
                           RUS=Применить] }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Copy Quantity;
                           RUS=Копировать количество];
                ToolTipML=[ENU=Specifies that the quantities will be copied to the new job.;
                           RUS=Указывает, что количества будут скопированы в новую работу.];
                ApplicationArea=#Jobs;
                SourceExpr=CopyQuantity }

  }
  CODE
  {
    VAR
      SourceJobTask@1003 : Record 1001;
      TargetJobTask@1000 : Record 1001;
      CopyJob@1012 : Codeunit 1006;
      SourceJobNo@1009 : Code[20];
      SourceJobTaskNo@1004 : Code[20];
      TargetJobNo@1008 : Code[20];
      TargetJobTaskNo@1001 : Code[20];
      Text001@1016 : TextConst 'ENU=The job was successfully copied.;RUS=Задание успешно скопировано.';
      Text003@1018 : TextConst '@@@=Job Task 1000 does not exist.;ENU=%1 %2 does not exist.;RUS=%1 %2 не существует.';
      PlanningLineType@1005 : 'Budget+Billable,Budget,Billable';
      FromDate@1007 : Date;
      ToDate@1006 : Date;
      CopyQuantity@1011 : Boolean;
      Text004@1015 : TextConst 'ENU=Provide a valid source %1.;RUS=Укажите действующий источник %1.';
      Text005@1002 : TextConst 'ENU=Provide a valid target %1.;RUS=Укажите действующую цель %1.';

    LOCAL PROCEDURE ValidateUserInput@1();
    VAR
      Job@1000 : Record 167;
    BEGIN
      IF SourceJobNo = '' THEN
        ERROR(Text004,Job.TABLECAPTION);
      IF (SourceJobTaskNo = '') OR NOT SourceJobTask.GET(SourceJobNo,SourceJobTaskNo) THEN
        ERROR(Text004,SourceJobTask.TABLECAPTION);

      IF TargetJobNo = '' THEN
        ERROR(Text005,Job.TABLECAPTION);
      IF (TargetJobTaskNo = '') OR NOT TargetJobTask.GET(TargetJobNo,TargetJobTaskNo) THEN
        ERROR(Text005,TargetJobTask.TABLECAPTION);
    END;

    PROCEDURE SetFromJobTask@3(SourceJobTask2@1000 : Record 1001);
    BEGIN
      SourceJobNo := SourceJobTask2."Job No.";
      SourceJobTask := SourceJobTask2;
      SourceJobTaskNo := SourceJobTask2."Job Task No.";
    END;

    PROCEDURE SetToJobTask@4(TargetJobTask2@1000 : Record 1001);
    BEGIN
      TargetJobNo := TargetJobTask2."Job No.";
      TargetJobTask := TargetJobTask2;
      TargetJobTaskNo := TargetJobTask2."Job Task No.";
    END;

    BEGIN
    END.
  }
}

