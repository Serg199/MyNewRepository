OBJECT Codeunit 14943 INV-17 Report Helper
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExcelReportBuilderManager@1210000 : Codeunit 14930;
      StdRepMgt@1210001 : Codeunit 12401;
      LocMgt@1210007 : Codeunit 12400;

    PROCEDURE InitReportTemplate@1210001(ReportID@1210001 : Integer);
    VAR
      InventorySetup@1210000 : Record 313;
    BEGIN
      InventorySetup.GET;
      CASE ReportID OF
        REPORT::"Invent. Act INV-17":
          BEGIN
            InventorySetup.TESTFIELD("INV-17 Template Code");
            ExcelReportBuilderManager.InitTemplate(InventorySetup."INV-17 Template Code");
          END;
        REPORT::"Supplement to INV-17":
          BEGIN
            InventorySetup.TESTFIELD("INV-17 Appendix Template Code");
            ExcelReportBuilderManager.InitTemplate(InventorySetup."INV-17 Appendix Template Code");
          END;
      END;
      ExcelReportBuilderManager.SetSheet('Sheet1');
    END;

    PROCEDURE FillHeader@1210000(DocumentNo@1210000 : Text;DocumentDate@1210002 : Text;ReasonDocNo@1210004 : Text;ReasonDocDate@1210005 : Text;InvDate@1210003 : Date);
    VAR
      CompanyInfo@1210001 : Record 79;
    BEGIN
      CompanyInfo.GET;
      ExcelReportBuilderManager.AddSection('REPORTHEADER');
      ExcelReportBuilderManager.AddDataToSection(
        'CompanyName',StdRepMgt.GetCompanyName);
      ExcelReportBuilderManager.AddDataToSection(
        'CodeOKPO',CompanyInfo."OKPO Code");

      ExcelReportBuilderManager.AddDataToSection('DocumentNum',DocumentNo);
      ExcelReportBuilderManager.AddDataToSection('Documentdate',DocumentDate);
      ExcelReportBuilderManager.AddDataToSection('ReasonDocumentNum',ReasonDocNo);
      ExcelReportBuilderManager.AddDataToSection('ReasonDocumentdate',ReasonDocDate);
      ExcelReportBuilderManager.AddDataToSection('Date',FORMAT(DATE2DMY(InvDate,1)));
      ExcelReportBuilderManager.AddDataToSection('MthName',LocMgt.Month2Text(InvDate));
      ExcelReportBuilderManager.AddDataToSection('Year',FORMAT(DATE2DMY(InvDate,1)));
    END;

    PROCEDURE FillAppndxHeader@1210005(DocumentNo@1210000 : Text;DocumentDate@1210002 : Date;InvDate@1210003 : Date);
    VAR
      CompanyInfo@1210001 : Record 79;
    BEGIN
      CompanyInfo.GET;
      ExcelReportBuilderManager.AddSection('REPORTHEADER');
      ExcelReportBuilderManager.AddDataToSection(
        'CompanyName',StdRepMgt.GetCompanyName);

      ExcelReportBuilderManager.AddDataToSection('DocumentNum',DocumentNo);
      ExcelReportBuilderManager.AddDataToSection('Date',FORMAT(DATE2DMY(DocumentDate,1)));
      ExcelReportBuilderManager.AddDataToSection('MthName',LocMgt.Month2Text(DocumentDate));
      ExcelReportBuilderManager.AddDataToSection('Year',FORMAT(DATE2DMY(DocumentDate,1)));
      ExcelReportBuilderManager.AddDataToSection('RptDate',FORMAT(DATE2DMY(InvDate,1)));
      ExcelReportBuilderManager.AddDataToSection('RptMthName',LocMgt.Month2Text(InvDate));
      ExcelReportBuilderManager.AddDataToSection('RptYear',FORMAT(DATE2DMY(InvDate,1)));
    END;

    PROCEDURE FillPartHeader@1210003(CategoryType@1210001 : Option);
    VAR
      InvActLine@1210000 : Record 14909;
    BEGIN
      CASE CategoryType OF
        InvActLine.Category::Debts:
          ExcelReportBuilderManager.AddSection('PART1HEADER');
        InvActLine.Category::Liabilities:
          BEGIN
            ExcelReportBuilderManager.AddPagebreak;
            ExcelReportBuilderManager.AddSection('PART2HEADER');
          END;
      END;
      FillPageHeader(CategoryType);
    END;

    PROCEDURE FillPageHeader@1210004(CategoryType@1210000 : Option);
    VAR
      InvActLine@1210001 : Record 14909;
    BEGIN
      CASE CategoryType OF
        InvActLine.Category::Debts:
          ExcelReportBuilderManager.AddSection('PART1PAGEHEADER');
        InvActLine.Category::Liabilities:
          ExcelReportBuilderManager.AddSection('PART2PAGEHEADER');
      END;
    END;

    PROCEDURE FillAppndxPageHeader@1210008();
    BEGIN
      ExcelReportBuilderManager.AddSection('PAGEHEADER');
    END;

    PROCEDURE FillLine@1210007(ContractorName@1210003 : Text;AccCode@1210004 : Text;BodyDetails@1210000 : ARRAY [4] OF Decimal;FooterDetails@1210002 : ARRAY [4] OF Decimal;CategoryType@1210001 : Option);
    BEGIN
      IF NOT ExcelReportBuilderManager.TryAddSectionWithPlaceForFooter('BODY','PARTFOOTER') THEN BEGIN
        FillPageFooter(FooterDetails);
        ExcelReportBuilderManager.AddPagebreak;
        FillPageHeader(CategoryType);
        ExcelReportBuilderManager.AddSection('BODY');
      END;

      ExcelReportBuilderManager.AddDataToSection('Name',ContractorName);
      ExcelReportBuilderManager.AddDataToSection('AccCode',AccCode);
      ExcelReportBuilderManager.AddDataToSection('Amount',FORMAT(BodyDetails[1]));
      ExcelReportBuilderManager.AddDataToSection('DebtAmount',FORMAT(BodyDetails[2]));
      ExcelReportBuilderManager.AddDataToSection('NonapprovedAmount',FORMAT(BodyDetails[3]));
      ExcelReportBuilderManager.AddDataToSection('HopelessAmount',FORMAT(BodyDetails[4]));
    END;

    PROCEDURE FillAppndxLine@1210009(LineNo@1210000 : Text;Name@1210001 : Text;Agreement@1210002 : Text;DebtDate@1210003 : Text;DebtAmount@1210004 : Text;CreditAmount@1210005 : Text;DocType@1210006 : Text;DocNo@1210007 : Text;DocDate@1210008 : Text);
    BEGIN
      ExcelReportBuilderManager.AddSection('BODY');

      ExcelReportBuilderManager.AddDataToSection('LineNo',LineNo);
      ExcelReportBuilderManager.AddDataToSection('Name',Name);
      ExcelReportBuilderManager.AddDataToSection('Agreement',Agreement);
      ExcelReportBuilderManager.AddDataToSection('DebtDate',DebtDate);
      ExcelReportBuilderManager.AddDataToSection('DebtAmountDe',DebtAmount);
      ExcelReportBuilderManager.AddDataToSection('DebtAmountCr',CreditAmount);
      ExcelReportBuilderManager.AddDataToSection('LineDocName',DocType);
      ExcelReportBuilderManager.AddDataToSection('LineDocNum',DocNo);
      ExcelReportBuilderManager.AddDataToSection('LineDocDate',DocDate);
    END;

    PROCEDURE FillPageFooter@1210012(FooterDetails@1210000 : ARRAY [6] OF Decimal);
    BEGIN
      ExcelReportBuilderManager.AddSection('PARTFOOTER');

      ExcelReportBuilderManager.AddDataToSection('TotalAmount',FORMAT(FooterDetails[1]));
      ExcelReportBuilderManager.AddDataToSection('TotalDebtAmount',FORMAT(FooterDetails[2]));
      ExcelReportBuilderManager.AddDataToSection('TotalNonapprovedAmount',FORMAT(FooterDetails[3]));
      ExcelReportBuilderManager.AddDataToSection('TotalHopelessAmount',FORMAT(FooterDetails[4]));
    END;

    PROCEDURE FillFooter@1210013(Chairman@1210000 : Text;ChairmanName@1210001 : Text;Member@1210002 : Text;MemberName@1210003 : Text;AdditionalMember@1210004 : Text;AdditionalMemberName@1210005 : Text);
    BEGIN
      ExcelReportBuilderManager.AddSection('REPORTFOOTER');

      ExcelReportBuilderManager.AddDataToSection('Chairman',Chairman);
      ExcelReportBuilderManager.AddDataToSection('ChairmanName',ChairmanName);
      ExcelReportBuilderManager.AddDataToSection('Member',Member);
      ExcelReportBuilderManager.AddDataToSection('MemberName',MemberName);

      ExcelReportBuilderManager.AddSection('ADDITIONALMEMBERSECTION');
      ExcelReportBuilderManager.AddDataToSection('AdditionalMember',AdditionalMember);
      ExcelReportBuilderManager.AddDataToSection('AdditionalMemberName',AdditionalMemberName);
      ExcelReportBuilderManager.AddPagebreak;
    END;

    PROCEDURE FillAppndxFooter@1210006(AccountantName@1210000 : Text);
    BEGIN
      ExcelReportBuilderManager.AddSection('REPORTFOOTER');
      ExcelReportBuilderManager.AddDataToSection('AccountantName',AccountantName);
      ExcelReportBuilderManager.AddPagebreak;
    END;

    PROCEDURE ExportData@1210002();
    BEGIN
      ExcelReportBuilderManager.ExportData;
    END;

    PROCEDURE ExportDataFile@1210010(FileName@1210000 : Text);
    BEGIN
      ExcelReportBuilderManager.ExportDataToClientFile(FileName);
    END;

    PROCEDURE CheckSignature@1470002(VAR DocSign@1470000 : Record 12420;ActNo@1210001 : Code[20];EmpType@1470001 : Integer);
    VAR
      DocSignMgt@1210000 : Codeunit 12420;
    BEGIN
      DocSignMgt.GetDocSign(
        DocSign,DATABASE::"Invent. Act Header",
        0,ActNo,EmpType,TRUE);
    END;

    BEGIN
    END.
  }
}

