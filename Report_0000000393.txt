OBJECT Report 393 Suggest Vendor Payments
{
  OBJECT-PROPERTIES
  {
    Date=03.07.17;
    Time=12:35:42;
    Modified=Yes;
    Version List=NAVW110.00,NAVRU10.00,NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Vendor Payments;
               RUS=Предлож. оплаты поставщикам];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CompanyInformation.GET;
                  VendorLedgEntryTemp.DELETEALL;
                  ShowPostingDateWarning := FALSE;

                  //NC NCS-1763 > DP
                  tmpVendPostingGroup.DELETEALL;
                  VendPostingGroup.SETRANGE("Payables Account",' 20801000');
                  IF VendPostingGroup.FINDSET THEN
                    REPEAT
                      tmpVendPostingGroup.INIT;
                      tmpVendPostingGroup.TRANSFERFIELDS(VendPostingGroup);
                      tmpVendPostingGroup.INSERT;
                    UNTIL VendPostingGroup.NEXT=0;
                  //NC NCS-1763 < DP
                END;

    OnPostReport=BEGIN
                   COMMIT;
                   IF NOT VendorLedgEntryTemp.ISEMPTY THEN
                     IF CONFIRM(Text024) THEN
                       PAGE.RUNMODAL(0,VendorLedgEntryTemp);
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.)
                                 WHERE(Blocked=FILTER(=' '));
               OnPreDataItem=BEGIN
                               IF LastDueDateToPayReq = 0D THEN
                                 ERROR(Text000);
                               IF (PostingDate = 0D) AND (NOT UseDueDateAsPostingDate) THEN
                                 ERROR(Text001);

                               BankPmtType := GenJnlLine2."Bank Payment Type";
                               BalAccType := GenJnlLine2."Bal. Account Type";
                               BalAccNo := GenJnlLine2."Bal. Account No.";
                               GenJnlLineInserted := FALSE;
                               SeveralCurrencies := FALSE;
                               MessageText := '';

                               IF ((BankPmtType = BankPmtType::" ") OR
                                   SummarizePerVend) AND
                                  (NextDocNo = '')
                               THEN
                                 ERROR(Text002);

                               IF ((BankPmtType = BankPmtType::"Manual Check") AND
                                   NOT SummarizePerVend AND
                                   NOT DocNoPerLine)
                               THEN
                                 ERROR(Text017,GenJnlLine2.FIELDCAPTION("Bank Payment Type"),SELECTSTR(BankPmtType + 1,Text023));

                               IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                                 IF NOT CONFIRM(Text003,FALSE,WORKDATE) THEN
                                   ERROR(Text005);

                               Vend2.COPYFILTERS(Vendor);

                               //NC NCS-1769.4 > DP
                               ConsSetup.GET;
                               {
                               //NC NCS-1769.3 > DP
                               SETRANGE("Relationship to the Group",FALSE);
                               //NC NCS-1769.3 > DP
                               }
                               //NC NCS-1769.4 < DP

                               OriginalAmtAvailable := AmountAvailable;
                               IF UsePriority THEN BEGIN
                                 SETCURRENTKEY(Priority);
                                 SETRANGE(Priority,1,2147483647);
                                 UsePriority := TRUE;
                               END;
                               Window.OPEN(Text006);

                               //NC NCS-1602.4 > USE
                               {
                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Suggest Vendor Payments");
                               }
                               GetSelectedDims;
                               //NC NCS-1602.4 < USE
                               //NC NCS-1602.2 > USE
                               {
                               SummarizePerDim := SelectedDim.FIND('-') AND SummarizePerVend;
                               }
                               SummarizePerDim := SummarizePerVend;
                               //NC NCS-1602.2 < USE

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=VAR
                                  lDefDim@1101495001 : Record 352;
                                  lLinkDim@1101495000 : Record 50016;
                                BEGIN
                                  CLEAR(VendorBalance);
                                  CALCFIELDS("Balance (LCY)");
                                  VendorBalance := "Balance (LCY)";

                                  //NC NCS-1763 > DP
                                  IF Vendor."Relationship to the Group" THEN
                                    CurrReport.SKIP;
                                  //NC NCS-1763 < DP

                                  //NC NCS-1769.4 > DP
                                  IF lDefDim.GET(DATABASE::Vendor,"No.",ConsSetup."Counterparty Dim Code") THEN
                                    IF lLinkDim.GET(lDefDim."Dimension Code",lDefDim."Dimension Value Code",ConsSetup."IC Dimension Code") THEN
                                    CurrReport.SKIP;
                                  //NC NCS-1769.4 < DP

                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  IF SummarizePerVend THEN
                                    TESTFIELD("VAT Agent",FALSE);
                                  Window.UPDATE(1,"No.");
                                  IF VendorBalance > 0 THEN BEGIN
                                    GetVendLedgEntries(TRUE,FALSE);
                                    GetVendLedgEntries(FALSE,FALSE);
                                    CheckAmounts(FALSE);
                                    ClearNegative;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF UsePriority AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  IF FIND('-') THEN
                                    REPEAT
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      IF VendorBalance > 0 THEN BEGIN
                                        Window.UPDATE(1,"No.");
                                        GetVendLedgEntries(TRUE,FALSE);
                                        GetVendLedgEntries(FALSE,FALSE);
                                        CheckAmounts(FALSE);
                                        ClearNegative;
                                      END;
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  Window2.OPEN(Text007);
                                  IF FIND('-') THEN
                                    REPEAT
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      Window2.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      IF VendorBalance > 0 THEN BEGIN
                                        GetVendLedgEntries(TRUE,TRUE);
                                        GetVendLedgEntries(FALSE,TRUE);
                                        CheckAmounts(TRUE);
                                        ClearNegative;
                                      END;
                                    UNTIL (NEXT = 0) OR StopPayments;
                                  Window2.CLOSE;
                                END ELSE
                                  IF FIND('-') THEN
                                    REPEAT
                                      ClearNegative;
                                    UNTIL NEXT = 0;

                                DimSetEntry.LOCKTABLE;
                                GenJnlLine.LOCKTABLE;
                                GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                                GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                                GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                IF GenJnlLine.FINDLAST THEN BEGIN
                                  LastLineNo := GenJnlLine."Line No.";
                                  GenJnlLine.INIT;
                                END;

                                Window2.OPEN(Text008);

                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window2.CLOSE;
                                Window.CLOSE;
                                IF NOT HideMessage THEN
                                  ShowMessage(MessageText);
                              END;

               ReqFilterFields=No.,Payment Method Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               SummarizePerDimTextEnable := TRUE;
               SkipExportedPayments := TRUE;
             END;

      OnOpenPage=BEGIN
                   LastDueDateToPayReq := WORKDATE;
                   PostingDate := WORKDATE;
                   ValidatePostingDate;
                   SetDefaults;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры];
                  GroupType=Group }

      { 4   ;2   ;Group     ;
                  CaptionML=[ENU=Find Payments;
                             RUS=Найти платежи];
                  GroupType=Group }

      { 1   ;3   ;Field     ;
                  Name=LastPaymentDate;
                  CaptionML=[ENU=Last Payment Date;
                             RUS=Дата последнего платежа];
                  ToolTipML=[ENU=Specifies the latest payment date that can appear on the vendor ledger entries to be included in the batch job. Only entries that have a due date or a payment discount date before or on this date will be included. If the payment date is earlier than the system date, a warning will be displayed.;
                             RUS=Определяет последнюю дату оплаты, которая может быть указана в операциях книги поставщиков, включаемых в пакетное задание. Будут включены только операции, крайний срок оплаты или дата скидки по оплате которых меньше или равны выбранной дате. Если дата оплаты более ранняя, чем системная дата, будет выведено предупреждение.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=LastDueDateToPayReq }

      { 2   ;3   ;Field     ;
                  Name=FindPaymentDiscounts;
                  CaptionML=[ENU=Find Payment Discounts;
                             RUS=Найти скидки оплаты];
                  ToolTipML=[ENU=Specifies if you want the batch job to include vendor ledger entries for which you can receive a payment discount.;
                             RUS=Указывает, что пакетное задание должно включать операции книги поставщиков, по которым можно получить скидки по оплате.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UsePaymentDisc;
                  Importance=Additional;
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               IF UsePaymentDisc AND UseDueDateAsPostingDate THEN
                                 ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 3   ;3   ;Field     ;
                  Name=UseVendorPriority;
                  CaptionML=[ENU=Use Vendor Priority;
                             RUS=Использовать приоритет поставщика];
                  ToolTipML=[ENU=Specifies if the Priority field on the vendor cards will determine in which order vendor entries are suggested for payment by the batch job. The batch job always prioritizes vendors for payment suggestions if you specify an available amount in the Available Amount (LCY) field.;
                             RUS=Указывает, что поле "Приоритет" в карточках поставщиков будет определять, операции по какому заказу будут предложены для оплаты при выполнении пакетного задания. Пакетное задание всегда отдает приоритет поставщикам для предложений по оплате, если в поле "Доступная сумма (руб.)" указана доступная сумма.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UsePriority;
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text011);
                             END;
                              }

      { 11  ;3   ;Field     ;
                  Name=Available Amount (LCY);
                  CaptionML=[ENU=Available Amount (LCY);
                             RUS=Доступная сумма (руб.)];
                  ToolTipML=[ENU=Specifies a maximum amount (in LCY) that is available for payments. The batch job will then create a payment suggestion on the basis of this amount and the Use Vendor Priority check box. It will only include vendor entries that can be paid fully.;
                             RUS=Определяет максимальную сумму в рублях, доступную для оплаты. Пакетное задание создаст предложение по оплате на основании этой суммы и состояния флажка "Использовать приоритет поставщика". В предложение будут включены только те операции поставщиков, которые могут быть оплачены в полном объеме.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AmountAvailable;
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF AmountAvailable <> 0 THEN
                                 UsePriority := TRUE;
                             END;
                              }

      { 13  ;3   ;Field     ;
                  Name=SkipExportedPayments;
                  CaptionML=[ENU=Skip Exported Payments;
                             RUS=Пропустить экспортированные платежи];
                  ToolTipML=[ENU=Specifies if you do not want the batch job to insert payment journal lines for documents for which payments have already been exported to a bank file.;
                             RUS=Указывает, что при выполнении пакетного задания не требуется вставлять строки журнала платежей для документов, для которых платежи уже были экспортированы в банковский файл.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SkipExportedPayments;
                  Importance=Additional }

      { 7   ;2   ;Group     ;
                  CaptionML=[ENU=Summarize Results;
                             RUS=Суммировать результаты];
                  GroupType=Group }

      { 6   ;3   ;Field     ;
                  Name=SummarizePerVendor;
                  CaptionML=[ENU=Summarize per Vendor;
                             RUS=Суммировать по поставщикам];
                  ToolTipML=[ENU=Specifies if you want the batch job to make one line per vendor for each currency in which the vendor has ledger entries. If, for example, a vendor uses two currencies, the batch job will create two lines in the payment journal for this vendor. The batch job then uses the Applies-to ID field when the journal lines are posted to apply the lines to vendor ledger entries. If you do not select this check box, then the batch job will make one line per invoice.;
                             RUS=Указывает, что пакетное задание должно создавать по одной строке на поставщика для каждой валюты, в которой имеются операции по этому поставщику. Например, если поставщик использует две валюты, пакетное задание создаст две строки для этого поставщика в журнале платежей. Затем пакетное задание будет использовать поле "Код применения" при применении строк журнала к операциям в книге поставщиков. Если этот флажок не установлен, то пакетное задание будет создавать только одну строку на каждый счет.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SummarizePerVend;
                  OnValidate=BEGIN
                               IF SummarizePerVend AND UseDueDateAsPostingDate THEN
                                 ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 17  ;3   ;Field     ;
                  Name=SummarizePerDimText;
                  CaptionML=[ENU=By Dimension;
                             RUS=По измерению];
                  ToolTipML=[ENU=Specifies the dimensions that you want the batch job to consider.;
                             RUS=Определяет измерения, которые должны быть учтены пакетным заданием.];
                  ApplicationArea=#Suite;
                  SourceExpr=SummarizePerDimText;
                  Importance=Additional;
                  Enabled=SummarizePerDimTextEnable;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 DimSelectionBuf@1001 : Record 368;
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Suggest Vendor Payments",SummarizePerDimText);
                               END;
                                }

      { 8   ;2   ;Group     ;
                  CaptionML=[ENU=Fill in Journal Lines;
                             RUS=Заполнить строки журнала];
                  GroupType=Group }

      { 5   ;3   ;Field     ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             RUS=Дата учета];
                  ToolTipML=[ENU=Specifies the date for the posting of this batch job. By default, the working date is entered, but you can change it.;
                             RUS=Определяет дату учета этого пакетного задания. По умолчанию в поле вводится рабочая дата, но ее можно изменить.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDate;
                  Importance=Promoted;
                  Editable=UseDueDateAsPostingDate = FALSE;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 16  ;3   ;Field     ;
                  Name=UseDueDateAsPostingDate;
                  CaptionML=[ENU=Calculate Posting Date from Applies-to-Doc. Due Date;
                             RUS=Рассчитать дату учета на основе срока оплаты примен. документа];
                  ToolTipML=[ENU=Specifies if the due date on the purchase invoice will be used as a basis to calculate the payment posting date.;
                             RUS=Указывает, что срок оплаты по счету покупки будет использоваться в качестве основы для расчета даты учета платежа.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UseDueDateAsPostingDate;
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF UseDueDateAsPostingDate AND (SummarizePerVend OR UsePaymentDisc) THEN
                                 ERROR(PmtDiscUnavailableErr);
                               IF NOT UseDueDateAsPostingDate THEN
                                 CLEAR(DueDateOffset);
                             END;
                              }

      { 15  ;3   ;Field     ;
                  Name=DueDateOffset;
                  CaptionML=[ENU=Applies-to-Doc. Due Date Offset;
                             RUS=Примен. смещения срока оплаты документа];
                  ToolTipML=[ENU=Specifies a period of time that will separate the payment posting date from the due date on the invoice. Example 1: To pay the invoice on the Friday in the week of the due date, enter CW-2D (current week minus two days). Example 2: To pay the invoice two days before the due date, enter -2D (minus two days).;
                             RUS=Определяет время, которое будет отделять дату учета платежа от срока оплаты счета. Пример 1: чтобы оплатить счет в пятницу недели, на которую приходится срок оплаты, введите CW-2D (текущая неделя минус два дня). Пример 2: чтобы оплатить счет за два дня до срока оплаты, введите -2D (минус два дня).];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DueDateOffset;
                  Importance=Additional;
                  Enabled=UseDueDateAsPostingDate;
                  Editable=UseDueDateAsPostingDate }

      { 9   ;3   ;Field     ;
                  Name=StartingDocumentNo;
                  CaptionML=[ENU=Starting Document No.;
                             RUS=Номер начального документа];
                  ToolTipML=[ENU=Specifies the next available number in the number series for the journal batch that is linked to the payment journal. When you run the batch job, this is the document number that appears on the first payment journal line. You can also fill in this field manually.;
                             RUS=Определяет следующий свободный номер в серии номеров для раздела журнала, который будет связан с журналом платежей. При выполнении пакетного задания этот номер документ отображается в первой строке журнала платежей. Это поле также можно заполнить вручную.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NextDocNo;
                  OnValidate=VAR
                               TextManagement@1000 : Codeunit 41;
                             BEGIN
                               IF NextDocNo <> '' THEN
                                 TextManagement.EvaluateIncStr(NextDocNo,StartingDocumentNoErr);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  Name=NewDocNoPerLine;
                  CaptionML=[ENU=New Doc. No. per Line;
                             RUS=Номер нового док. для строки];
                  ToolTipML=[ENU=Specifies if you want the batch job to fill in the payment journal lines with consecutive document numbers, starting with the document number specified in the Starting Document No. field.;
                             RUS=Указывает, что пакетное задание должно заполнить строки журнала платежей последовательными номерами документов начиная с номера, указанного в поле "Номер начального документа".];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocNoPerLine;
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text013);
                             END;
                              }

      { 10  ;3   ;Field     ;
                  Name=BalAccountType;
                  CaptionML=[ENU=Bal. Account Type;
                             RUS=Тип баланс. счета];
                  ToolTipML=[ENU=Specifies the balancing account type that payments on the payment journal are posted to.;
                             RUS=Определяет тип балансирующего счета, на котором учитываются платежи в журнале платежей.];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   RUS=Счет ГК,,,Банковский счет];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bal. Account Type";
                  Importance=Additional;
                  OnValidate=BEGIN
                               GenJnlLine2."Bal. Account No." := '';
                             END;
                              }

      { 12  ;3   ;Field     ;
                  Name=BalAccountNo;
                  CaptionML=[ENU=Bal. Account No.;
                             RUS=Номер баланс. счета];
                  ToolTipML=[ENU=Specifies the balancing account number that payments on the payment journal are posted to.;
                             RUS=Определяет номер балансирующего счета, на котором учитываются платежи в журнале платежей.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bal. Account No.";
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF GenJnlLine2."Bal. Account No." <> '' THEN
                                 CASE GenJnlLine2."Bal. Account Type" OF
                                   GenJnlLine2."Bal. Account Type"::"G/L Account":
                                     GLAcc.GET(GenJnlLine2."Bal. Account No.");
                                   GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                     ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                                   GenJnlLine2."Bal. Account Type"::"Bank Account":
                                     BankAcc.GET(GenJnlLine2."Bal. Account No.");
                                 END;
                             END;

                  OnLookup=BEGIN
                             CASE GenJnlLine2."Bal. Account Type" OF
                               GenJnlLine2."Bal. Account Type"::"G/L Account":
                                 IF PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := GLAcc."No.";
                               GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                 ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                               GenJnlLine2."Bal. Account Type"::"Bank Account":
                                 IF PAGE.RUNMODAL(0,BankAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := BankAcc."No.";
                             END;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  Name=BankPaymentType;
                  CaptionML=[ENU=Bank Payment Type;
                             RUS=Вид платежа];
                  ToolTipML=[ENU=Specifies the check type to be used, if you use Bank Account as the balancing account type.;
                             RUS=Определяет используемый тип платежных документов, если в качестве типа балансирующего счета выбран "Банковский счет".];
                  OptionCaptionML=[ENU=" ,Computer Check,Manual Check";
                                   RUS=" ,Компьютерный,Ручной"];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bank Payment Type";
                  Importance=Additional;
                  OnValidate=BEGIN
                               IF (GenJnlLine2."Bal. Account Type" <> GenJnlLine2."Bal. Account Type"::"Bank Account") AND
                                  (GenJnlLine2."Bank Payment Type" > 0)
                               THEN
                                 ERROR(
                                   Text010,
                                   GenJnlLine2.FIELDCAPTION("Bank Payment Type"),
                                   GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                             END;
                              }

      { 1210000;2;Field     ;
                  CaptionML=[ENU=Create VAT Agent Payment;
                             RUS=Создать оплату налогового агента];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CreateVATAgentPayment }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=In the Last Payment Date field, specify the last possible date that payments must be made.;RUS=В поле "Последняя дата платежа" укажите последнюю дату, на которую возможно осуществление платежа.';
      Text001@1001 : TextConst 'ENU=In the Posting Date field, specify the date that will be used as the posting date for the journal entries.;RUS=В поле даты разноски укажите дату, которая будет использоваться в качестве даты разноски для записей журнала';
      Text002@1002 : TextConst 'ENU=In the Starting Document No. field, specify the first document number to be used.;RUS=В поле "Номер начального документа" укажите номер первого документа, который будет использоваться.';
      Text003@1003 : TextConst '@@@=%1 is a date;ENU=The payment date is earlier than %1.\\Do you still want to run the batch job?;RUS=Дата платежа предшествует %1.\\Все равно выполнить пакетное задание?';
      Text005@1005 : TextConst 'ENU=The batch job was interrupted.;RUS=Пакетное задание прервано.';
      Text006@1006 : TextConst 'ENU=Processing vendors     #1##########;RUS=Обработка поставщиков                   #1##########';
      Text007@1007 : TextConst 'ENU=Processing vendors for payment discounts #1##########;RUS=Обработка поставщиков по скидкам оплаты #1##########';
      Text008@1008 : TextConst 'ENU=Inserting payment journal lines #1##########;RUS=Вставка строк журнала платежей          #1##########';
      Text009@1009 : TextConst 'ENU=%1 must be G/L Account or Bank Account.;RUS=%1 должен быть "Счет ГК" или "Банк. счет".';
      Text010@1010 : TextConst 'ENU=%1 must be filled only when %2 is Bank Account.;RUS=%1 должно быть заполнено только когда %2 равно "Банк. счет".';
      Text011@1011 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.;RUS=Использование приоритета поставщика необходимо активировать, если значение в поле "Наличная сумма" не равно 0.';
      Text013@1013 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available Amount (LCY) field is not 0.;RUS=Использование приоритета поставщика необходимо активировать, если значение в поле "Сумма наличных сумм (руб.)" не равно 0.';
      Text014@1014 : TextConst 'ENU=Payment to vendor %1;RUS=Оплата поставщику %1';
      Text015@1015 : TextConst 'ENU=Payment of %1 %2;RUS=Оплата %1 %2';
      Text017@1017 : TextConst '@@@="If Bank Payment Type = Computer Check and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";ENU="If %1 = %2 and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";RUS="Если %1 = %2, а поле ""Суммировать по поставщикам"" не выбрано,\ то следует выбрать ""Номер нового док. для строки""."';
      Text020@1020 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR.\ However, there are other open vendor ledger entries in currencies other than EUR.;ENU=You have only created suggested vendor payment lines for the %1 %2.\ However, there are other open vendor ledger entries in currencies other than %2.\\;RUS=Созданы только рекомендуемые строки платежей поставщикам для %1 %2.\ Однако имеются другие открытые операции по поставщикам в валютах, отличных от %2.\\';
      Text021@1021 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR\ There are no other open vendor ledger entries in other currencies.\\;ENU=You have only created suggested vendor payment lines for the %1 %2.\ There are no other open vendor ledger entries in other currencies.\\;RUS=Созданы только рекомендуемые строки платежей поставщикам для %1 %2.\ Открытые операции по поставщикам в других валютах отсутствуют.\\';
      Text022@1022 : TextConst 'ENU=You have created suggested vendor payment lines for all currencies.\\;RUS=Созданы строки предложенного платежа поставщику для всех валют.\\';
      Vend2@1023 : Record 23;
      GenJnlTemplate@1024 : Record 80;
      GenJnlBatch@1025 : Record 232;
      GenJnlLine@1026 : Record 81;
      DimSetEntry@1027 : Record 480;
      GenJnlLine2@1028 : Record 81;
      VendLedgEntry@1029 : Record 25;
      GLAcc@1030 : Record 15;
      BankAcc@1031 : Record 270;
      PayableVendLedgEntry@1032 : TEMPORARY Record 317;
      CompanyInformation@1062 : Record 79;
      TempPaymentBuffer@1033 : TEMPORARY Record 372;
      OldTempPaymentBuffer@1034 : TEMPORARY Record 372;
      SelectedDim@1035 : Record 369;
      VendorLedgEntryTemp@1102601000 : TEMPORARY Record 25;
      NoSeriesMgt@1036 : Codeunit 396;
      DimMgt@1038 : Codeunit 408;
      DimBufMgt@1018 : Codeunit 411;
      Window@1039 : Dialog;
      Window2@1004 : Dialog;
      UsePaymentDisc@1040 : Boolean;
      PostingDate@1041 : Date;
      LastDueDateToPayReq@1042 : Date;
      NextDocNo@1043 : Code[20];
      AmountAvailable@1044 : Decimal;
      OriginalAmtAvailable@1045 : Decimal;
      UsePriority@1046 : Boolean;
      SummarizePerVend@1047 : Boolean;
      SummarizePerDim@1048 : Boolean;
      SummarizePerDimText@1049 : Text[250];
      LastLineNo@1051 : Integer;
      NextEntryNo@1052 : Integer;
      DueDateOffset@1118 : DateFormula;
      UseDueDateAsPostingDate@1066 : Boolean;
      StopPayments@1053 : Boolean;
      DocNoPerLine@1054 : Boolean;
      BankPmtType@1055 : ' ,Computer Check,Manual Check';
      BalAccType@1056 : 'G/L Account,Customer,Vendor,Bank Account';
      BalAccNo@1057 : Code[20];
      MessageText@1058 : Text;
      GenJnlLineInserted@1059 : Boolean;
      SeveralCurrencies@1060 : Boolean;
      Text023@1061 : TextConst 'ENU=" ,Computer Check,Manual Check";RUS=" ,Компьютерный,Ручной"';
      Text024@1102601001 : TextConst 'ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the requested posting date. Do you want to see the entries?;RUS=Существует одна или несколько операций, для которых не сделано предложений по оплате, так как даты учета этих операций позже даты учета. Показать эти операции?';
      HideMessage@1210000 : Boolean;
      CreateVATAgentPayment@1210100 : Boolean;
      SummarizePerDimTextEnable@19039578 : Boolean INDATASET;
      Text025@1063 : TextConst 'ENU=The %1 with the number %2 has a %3 with the number %4.;RUS=%1 с номером %2 имеет %3 с номером %4.';
      ShowPostingDateWarning@1119 : Boolean;
      VendorBalance@1065 : Decimal;
      ReplacePostingDateMsg@1064 : TextConst 'ENU=For one or more entries, the requested posting date is before the work date.\\These posting dates will use the work date.;RUS=Для одной или нескольких записей запрошенная дата учета предшествует дате работы.\\Эти даты учета будут использовать дату работы.';
      PmtDiscUnavailableErr@1067 : TextConst 'ENU=You cannot use Find Payment Discounts or Summarize per Vendor together with Calculate Posting Date from Applies-to-Doc. Due Date, because the resulting posting date might not match the payment discount date.;RUS=Невозможно использовать функцию "Найти скидки оплаты" или "Суммировать по поставщикам" вместе с "Рассчитать дату учета на основе срока оплаты примен. документа", так как полученная дата учета может не совпадать с датой скидки по оплате.';
      SkipExportedPayments@1019 : Boolean;
      MessageToRecipientMsg@1068 : TextConst '@@@=%1 document type, %2 Document No.;ENU="Payment of %1 %2 ";RUS=Оплата %1 %2';
      StartingDocumentNoErr@1012 : TextConst 'ENU=Starting Document No.;RUS=Номер начального документа';
      ">NOS-26"@1101495000 : Integer;
      tmpVendPostingGroup@1101495001 : TEMPORARY Record 93;
      VendPostingGroup@1101495003 : Record 93;
      ConsSetup@1101495002 : Record 50000;
      VendPostGroup@1101495004 : Record 93;
      DefDim@1101495005 : Record 352;
      TempSelectedDim@1101495006 : TEMPORARY Record 369;
      GLSetup@1101495007 : Record 98;
      GlobalDim1ValueCodeG@1101495009 : Code[20];
      GlobalDim2ValueCodeG@1101495008 : Code[20];
      VendEntryEdit@1101495010 : Codeunit 113;
      ">>NOS-26"@1101495012 : TextConst;
      Text12402@1101495011 : TextConst 'ENU=Dimensions;RUS=Измерения';

    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlLine := NewGenJnlLine;

      //NC NCS-1602 > USE
      IF GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") THEN
        IF GenJnlBatch."Bal. Account No."<>'' THEN BEGIN
          GenJnlLine2."Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          GenJnlLine2."Bal. Account No." := GenJnlBatch."Bal. Account No.";
          //NC NCS-1602.6 > USE
          GenJnlLine2."Bank Payment Type":=GenJnlLine2."Bank Payment Type"::"Computer Check";
          //NC NCS-1602.6 < USE
        END;
      //NC NCS-1602 < USE
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      //NC NCS-1602 > USE
      IF (GenJnlLine2."Bal. Account Type"=GenJnlLine2."Bal. Account Type"::"Bank Account")
                AND BankAcc.GET(GenJnlLine2."Bal. Account No.") AND (BankAcc."Last Check No."<>'') THEN BEGIN
        NextDocNo:=INCSTR(BankAcc."Last Check No.");
        GenJnlLine2."Bank Payment Type":=GenJnlLine2."Bank Payment Type"::"Computer Check";
      END ELSE BEGIN
      //NC NCS-1602 < USE

      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;

      //NC NCS-1602 > USE
      END;
      //NC NCS-1602 < USE
    END;

    PROCEDURE InitializeRequest@3(LastPmtDate@1000 : Date;FindPmtDisc@1001 : Boolean;NewAvailableAmount@1002 : Decimal;NewSkipExportedPayments@1009 : Boolean;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerVend@1005 : Boolean;BalAccType@1006 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1007 : Code[20];BankPmtType@1008 : ' ,Computer Check,Manual Check');
    BEGIN
      LastDueDateToPayReq := LastPmtDate;
      UsePaymentDisc := FindPmtDisc;
      AmountAvailable := NewAvailableAmount;
      SkipExportedPayments := NewSkipExportedPayments;
      PostingDate := NewPostingDate;
      NextDocNo := NewStartDocNo;
      SummarizePerVend := NewSummarizePerVend;
      GenJnlLine2."Bal. Account Type" := BalAccType;
      GenJnlLine2."Bal. Account No." := BalAccNo;
      GenJnlLine2."Bank Payment Type" := BankPmtType;
    END;

    LOCAL PROCEDURE GetVendLedgEntries@13(Positive@1000 : Boolean;Future@1001 : Boolean);
    VAR
      DimensionSetEntry@1101495000 : Record 480;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETRANGE(Positive,Positive);
      VendLedgEntry.SETRANGE("Applies-to ID",'');
      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq + 1,DMY2DATE(31,12,9999));
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Remaining Pmt. Disc. Possible",'<>0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      IF SkipExportedPayments THEN
        VendLedgEntry.SETRANGE("Exported to Payment File",FALSE);
      VendLedgEntry.SETRANGE("On Hold",'');
      VendLedgEntry.SETFILTER("Currency Code",Vendor.GETFILTER("Currency Filter"));
      VendLedgEntry.SETFILTER("Global Dimension 1 Code",Vendor.GETFILTER("Global Dimension 1 Filter"));
      VendLedgEntry.SETFILTER("Global Dimension 2 Code",Vendor.GETFILTER("Global Dimension 2 Filter"));

      IF VendLedgEntry.FIND('-') THEN
        REPEAT
          //NC NCS-1763 > DP
          //NC NOS-26 > ENK
          {
          IF NOT (LEDimension.GET(25,VendLedgEntry."Entry No.",'ACCRUAL.TYPE') AND (LEDimension."Dimension Value Code"='ACCRUAL'))
          }
          IF NOT (DimSetEntry.GET(VendLedgEntry."Dimension Set ID", 'ACCRUAL.TYPE') AND (DimSetEntry."Dimension Value Code"='ACCRUAL'))
          //NC NOS-26 < ENK
         AND tmpVendPostingGroup.GET(VendLedgEntry."Vendor Posting Group")
         THEN BEGIN
         //NC NCS-1763 < DP
          Vend2.GET(VendLedgEntry."Vendor No.");
          IF NOT Vend2."VAT Agent" OR
            (Vend2."VAT Agent" AND
            (VendLedgEntry."Document Type" <> VendLedgEntry."Document Type"::"Credit Memo"))
          THEN
            SaveAmount;
          IF VendLedgEntry."Accepted Pmt. Disc. Tolerance" OR
             (VendLedgEntry."Accepted Payment Tolerance" <> 0)
          THEN BEGIN
            VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
            VendLedgEntry."Accepted Payment Tolerance" := 0;
            CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
          END;
        //NC NCS-1763 > DP
        END;
        //NC NCS-1763 < DP
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    VAR
      PaymentToleranceMgt@1000 : Codeunit 426;
    BEGIN
      WITH GenJnlLine DO BEGIN
        INIT;
        SetPostingDate(GenJnlLine,VendLedgEntry."Due Date",PostingDate);
        "Document Type" := "Document Type"::Payment;
        "Account Type" := "Account Type"::Vendor;
        Vend2.GET(VendLedgEntry."Vendor No.");
        Vend2.CheckBlockedVendOnJnls(Vend2,"Document Type",FALSE);
        Description := Vend2.Name;
        "Posting Group" := Vend2."Vendor Posting Group";
        "Salespers./Purch. Code" := Vend2."Purchaser Code";
        "Payment Terms Code" := Vend2."Payment Terms Code";
        VALIDATE("Bill-to/Pay-to No.","Account No.");
        VALIDATE("Sell-to/Buy-from No.","Account No.");
        "Gen. Posting Type" := 0;
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        VALIDATE("Payment Terms Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE) THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";
        IF Vend2."VAT Agent" THEN
          Amount := -GetVATAgentPmtAmount;
        VALIDATE(Amount);
      END;

      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Vendor.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenJnlLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenJnlLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      //NC NCS-1602 > USE
      PayableVendLedgEntry."Vendor Post. Group":=VendLedgEntry."Vendor Posting Group";
      PayableVendLedgEntry."Agreement No.":=VendLedgEntry."Agreement No.";
      //NC NCS-1602 < USE
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    LOCAL PROCEDURE CheckAmounts@10(Future@1000 : Boolean);
    VAR
      CurrencyBalance@1001 : Decimal;
      PrevCurrency@1002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);

      IF PayableVendLedgEntry.FIND('-') THEN BEGIN
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance > 0 THEN
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
        IF OriginalAmtAvailable > 0 THEN
          AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenJnlLines@2();
    VAR
      GenJnlLine1@1010 : Record 81;
      DimBuf@1002 : Record 360;
      Vendor@1001 : Record 23;
      RemainingAmtAvailable@1008 : Decimal;
    BEGIN
      TempPaymentBuffer.RESET;
      TempPaymentBuffer.DELETEALL;

      IF BalAccType = BalAccType::"Bank Account" THEN BEGIN
        CheckCurrencies(BalAccType,BalAccNo,PayableVendLedgEntry);
        SetBankAccCurrencyFilter(BalAccType,BalAccNo,PayableVendLedgEntry);
      END;

      IF OriginalAmtAvailable <> 0 THEN BEGIN
        RemainingAmtAvailable := OriginalAmtAvailable;
        RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
      END;
      IF PayableVendLedgEntry.FIND('-') THEN
        REPEAT
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          REPEAT
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            SetPostingDate(GenJnlLine1,VendLedgEntry."Due Date",PostingDate);
            IF VendLedgEntry."Posting Date" <= GenJnlLine1."Posting Date" THEN BEGIN
              TempPaymentBuffer."Vendor No." := VendLedgEntry."Vendor No.";
              TempPaymentBuffer."Currency Code" := VendLedgEntry."Currency Code";
              //NC NCS-1602 > USE
              TempPaymentBuffer."Vendor Post. Group":=VendLedgEntry."Vendor Posting Group";
              TempPaymentBuffer."Agreement No.":=VendLedgEntry."Agreement No.";
              //NC NCS-1602 < USE
              TempPaymentBuffer."Payment Method Code" := VendLedgEntry."Payment Method Code";
              TempPaymentBuffer."Creditor No." := VendLedgEntry."Creditor No.";
              TempPaymentBuffer."Payment Reference" := VendLedgEntry."Payment Reference";
              TempPaymentBuffer."Exported to Payment File" := VendLedgEntry."Exported to Payment File";
              TempPaymentBuffer."Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";

              SetTempPaymentBufferDims(DimBuf);

              VendLedgEntry.CALCFIELDS("Remaining Amount");

              IF SummarizePerVend THEN BEGIN
                TempPaymentBuffer."Vendor Ledg. Entry No." := 0;
                IF TempPaymentBuffer.FIND THEN BEGIN
                  TempPaymentBuffer.Amount := TempPaymentBuffer.Amount + PayableVendLedgEntry.Amount;
                  TempPaymentBuffer.MODIFY;
                END ELSE BEGIN
                  TempPaymentBuffer."Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                  Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                  TempPaymentBuffer.INSERT;
                END;
                VendLedgEntry."Applies-to ID" := TempPaymentBuffer."Document No.";
              END ELSE
                IF NOT IsEntryAlreadyApplied(GenJnlLine,VendLedgEntry) THEN BEGIN
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. Type" := VendLedgEntry."Document Type";
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. No." := VendLedgEntry."Document No.";
                  TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                  TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
                  TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
                  TempPaymentBuffer."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                  Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                  TempPaymentBuffer.INSERT;
                END;

              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END ELSE BEGIN
              VendorLedgEntryTemp := VendLedgEntry;
              VendorLedgEntryTemp.INSERT;
            END;

            PayableVendLedgEntry.DELETE;
            IF OriginalAmtAvailable <> 0 THEN BEGIN
              RemainingAmtAvailable := RemainingAmtAvailable - PayableVendLedgEntry."Amount (LCY)";
              RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
            END;

          UNTIL NOT PayableVendLedgEntry.FINDSET;
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Vendor No.");
        UNTIL NOT PayableVendLedgEntry.FIND('-');

      CLEAR(OldTempPaymentBuffer);
      TempPaymentBuffer.SETCURRENTKEY("Document No.");
      TempPaymentBuffer.SETFILTER(
        "Vendor Ledg. Entry Doc. Type",'<>%1&<>%2',TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Refund,
        TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Payment);
      IF TempPaymentBuffer.FIND('-') THEN
        REPEAT
          WITH GenJnlLine DO BEGIN
            //NC NCS-1602.9 > DP
            {
            //NC NCS-1602 > DP
            IF TempPaymentBuffer.Amount<>0 THEN BEGIN
            //NC NCS-1602 < DP
            }
            IF TempPaymentBuffer.Amount > 0 THEN BEGIN
            //NC NCS-1602.9 > DP
            INIT;
            Window2.UPDATE(1,TempPaymentBuffer."Vendor No.");
            LastLineNo := LastLineNo + 10000;
            "Line No." := LastLineNo;
            "Document Type" := "Document Type"::Payment;
            "Posting No. Series" := GenJnlBatch."Posting No. Series";
            IF SummarizePerVend THEN
              "Document No." := TempPaymentBuffer."Document No."
            ELSE
              IF DocNoPerLine THEN BEGIN
                IF TempPaymentBuffer.Amount < 0 THEN
                  "Document Type" := "Document Type"::Refund;

                "Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
              END ELSE
                IF (TempPaymentBuffer."Vendor No." = OldTempPaymentBuffer."Vendor No.") AND
                   (TempPaymentBuffer."Currency Code" = OldTempPaymentBuffer."Currency Code")
                THEN
                  "Document No." := OldTempPaymentBuffer."Document No."
                ELSE BEGIN
                  "Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  OldTempPaymentBuffer := TempPaymentBuffer;
                  OldTempPaymentBuffer."Document No." := "Document No.";
                END;
            "Account Type" := "Account Type"::Vendor;
            SetHideValidation(TRUE);
            ShowPostingDateWarning := ShowPostingDateWarning OR
              SetPostingDate(GenJnlLine,GetApplDueDate(TempPaymentBuffer."Vendor Ledg. Entry No."),PostingDate);
            VALIDATE("Account No.",TempPaymentBuffer."Vendor No.");
            Vendor.GET(TempPaymentBuffer."Vendor No.");
            IF (Vendor."Pay-to Vendor No." <> '') AND (Vendor."Pay-to Vendor No." <> "Account No.") THEN
              MESSAGE(Text025,Vendor.TABLECAPTION,Vendor."No.",Vendor.FIELDCAPTION("Pay-to Vendor No."),
                Vendor."Pay-to Vendor No.");
            "Bal. Account Type" := BalAccType;
            VALIDATE("Bal. Account No.",BalAccNo);
            VALIDATE("Currency Code",TempPaymentBuffer."Currency Code");
            "Message to Recipient" := GetMessageToRecipient(SummarizePerVend);
            "Bank Payment Type" := BankPmtType;
            IF SummarizePerVend THEN BEGIN
              "Applies-to ID" := "Document No.";
              Description := STRSUBSTNO(Text014,TempPaymentBuffer."Vendor No.");
            END ELSE
              Description :=
                STRSUBSTNO(
                  Text015,
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. Type",
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. No.");
            "Source Line No." := TempPaymentBuffer."Vendor Ledg. Entry No.";

            //NC NCS-1602 > DP
            "Posting Group" := TempPaymentBuffer."Vendor Post. Group";
            "Agreement No." := TempPaymentBuffer."Agreement No.";
            //NC NCS-1602 < DP

            //NC NOS-26 > ENK
            {
            "Shortcut Dimension 1 Code" := TempPaymentBuffer."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempPaymentBuffer."Global Dimension 2 Code";
            }
            "Dimension Set ID" := TempPaymentBuffer."Dimension Set ID";
            VALIDATE("Shortcut Dimension 1 Code", TempPaymentBuffer."Global Dimension 1 Code");
            VALIDATE("Shortcut Dimension 2 Code", TempPaymentBuffer."Global Dimension 2 Code");
            //NC NOS-26 < ENK
            "Source Code" := GenJnlTemplate."Source Code";
            "Reason Code" := GenJnlBatch."Reason Code";
            VALIDATE(Amount,TempPaymentBuffer.Amount);
            "Applies-to Doc. Type" := TempPaymentBuffer."Vendor Ledg. Entry Doc. Type";
            "Applies-to Doc. No." := TempPaymentBuffer."Vendor Ledg. Entry Doc. No.";
            "Payment Method Code" := TempPaymentBuffer."Payment Method Code";
            "Creditor No." := TempPaymentBuffer."Creditor No.";
            "Payment Reference" := TempPaymentBuffer."Payment Reference";
            "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
            "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";

            UpdateDimensions(GenJnlLine);
            INSERT;
            GenJnlLineInserted := TRUE;
            IF CreateVATAgentPayment THEN BEGIN
              Vend2.GET("Account No.");
              IF Vend2."VAT Agent" THEN BEGIN
                "Agreement No." := VendLedgEntry."Agreement No.";
                VALIDATE("Initial Document No.",VendLedgEntry."Document No.");
                IF Vend2."VAT Agent Type" = Vend2."VAT Agent Type"::"Non-resident" THEN
                  "External Document No." := NextDocNo
                ELSE
                  "External Document No." := "Document No.";
                MODIFY;
                MakeBudgetPmtJnlLine("Amount (LCY)");
              END;
            END;
            //NC NCS-1602.6 > USE
            {
            //NC NCS-1602 > DP
            END;
            //NC NCS-1602 < DP
            }
            END ELSE BEGIN
              VendLedgEntry.RESET;
              VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
              VendLedgEntry.SETRANGE("Vendor No.",TempPaymentBuffer."Vendor No.");
              VendLedgEntry.SETRANGE("Applies-to ID",TempPaymentBuffer."Document No.");
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.FINDFIRST THEN
                REPEAT
                  VendLedgEntry."Applies-to ID" := '';
                  VendEntryEdit.RUN(VendLedgEntry);
                UNTIL VendLedgEntry.NEXT=0;
            END;
            //NC NCS-1602.6 < USE
          END;
        UNTIL TempPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateDimensions@17(VAR GenJnlLine@1005 : Record 81);
    VAR
      DimBuf@1002 : Record 360;
      TempDimSetEntry@1001 : TEMPORARY Record 480;
      TempDimSetEntry2@1000 : TEMPORARY Record 480;
      DimVal@1004 : Record 349;
      NewDimensionID@1003 : Integer;
      DimSetIDArr@1006 : ARRAY [10] OF Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        NewDimensionID := "Dimension Set ID";
        IF SummarizePerVend THEN BEGIN
          DimBuf.RESET;
          DimBuf.DELETEALL;
          DimBufMgt.GetDimensions(TempPaymentBuffer."Dimension Entry No.",DimBuf);
          IF DimBuf.FINDSET THEN
            REPEAT
              DimVal.GET(DimBuf."Dimension Code",DimBuf."Dimension Value Code");
              TempDimSetEntry."Dimension Code" := DimBuf."Dimension Code";
              TempDimSetEntry."Dimension Value Code" := DimBuf."Dimension Value Code";
              TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
              TempDimSetEntry.INSERT;
            UNTIL DimBuf.NEXT = 0;
          NewDimensionID := DimMgt.GetDimensionSetID(TempDimSetEntry);
          "Dimension Set ID" := NewDimensionID;
        END;
        CreateDim(
          DimMgt.TypeToTableID1("Account Type"),"Account No.",
          DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
          DATABASE::Job,"Job No.",
          DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
          DATABASE::Campaign,"Campaign No.");
        IF NewDimensionID <> "Dimension Set ID" THEN BEGIN
          DimSetIDArr[1] := "Dimension Set ID";
          DimSetIDArr[2] := NewDimensionID;
          "Dimension Set ID" :=
            DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        END;

        IF SummarizePerVend THEN BEGIN
          DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
          IF AdjustAgainstSelectedDim(TempDimSetEntry,TempDimSetEntry2) THEN
            "Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry2);
          DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
            "Shortcut Dimension 2 Code");
        END;
      END;
    END;

    LOCAL PROCEDURE SetBankAccCurrencyFilter@11(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 317);
    VAR
      BankAcc@1003 : Record 270;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN
            TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code");

          //NC NCS-1602.8 > DP
          GLSetup.GET;
          IF (BankAcc."Currency Code" = '') OR
            (BankAcc."Currency Code" = GLSetup."LCY Code")
          THEN
            TmpPayableVendLedgEntry.SETFILTER("Currency Code",'%1','');
          //NC NCS-1602.8 < DP

        END;
    END;

    LOCAL PROCEDURE ShowMessage@15(Text@1000 : Text);
    BEGIN
      IF GenJnlLineInserted THEN BEGIN
        IF ShowPostingDateWarning THEN
          Text += ReplacePostingDateMsg;
        IF Text <> '' THEN
          MESSAGE(Text);
      END;
    END;

    LOCAL PROCEDURE CheckCurrencies@4(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 317);
    VAR
      BankAcc@1003 : Record 270;
      TmpPayableVendLedgEntry2@1004 : TEMPORARY Record 317;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN BEGIN
            TmpPayableVendLedgEntry2.RESET;
            TmpPayableVendLedgEntry2.DELETEALL;
            IF TmpPayableVendLedgEntry.FIND('-') THEN
              REPEAT
                TmpPayableVendLedgEntry2 := TmpPayableVendLedgEntry;
                TmpPayableVendLedgEntry2.INSERT;
              UNTIL TmpPayableVendLedgEntry.NEXT = 0;

            TmpPayableVendLedgEntry2.SETFILTER("Currency Code",'<>%1',BankAcc."Currency Code");
            SeveralCurrencies := SeveralCurrencies OR TmpPayableVendLedgEntry2.FINDFIRST;

            IF SeveralCurrencies THEN
              MessageText :=
                STRSUBSTNO(Text020,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code")
            ELSE
              MessageText :=
                STRSUBSTNO(Text021,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code");
          END ELSE
            MessageText := Text022;
        END;
    END;

    LOCAL PROCEDURE ClearNegative@8();
    VAR
      TempCurrency@1000 : TEMPORARY Record 4;
      PayableVendLedgEntry2@1001 : TEMPORARY Record 317;
      CurrencyBalance@1002 : Decimal;
    BEGIN
      CLEAR(PayableVendLedgEntry);
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");

      WHILE PayableVendLedgEntry.NEXT <> 0 DO BEGIN
        TempCurrency.Code := PayableVendLedgEntry."Currency Code";
        CurrencyBalance := 0;
        IF TempCurrency.INSERT THEN BEGIN
          PayableVendLedgEntry2 := PayableVendLedgEntry;
          PayableVendLedgEntry.SETRANGE("Currency Code",PayableVendLedgEntry."Currency Code");
          REPEAT
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          UNTIL PayableVendLedgEntry.NEXT = 0;
          IF CurrencyBalance < 0 THEN BEGIN
            PayableVendLedgEntry.DELETEALL;
            AmountAvailable += CurrencyBalance;
          END;
          PayableVendLedgEntry.SETRANGE("Currency Code");
          PayableVendLedgEntry := PayableVendLedgEntry2;
        END;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE DimCodeIsInDimBuf@1101(DimCode@1111 : Code[20];DimBuf@1112 : Record 360) : Boolean;
    BEGIN
      DimBuf.RESET;
      DimBuf.SETRANGE("Dimension Code",DimCode);
      EXIT(NOT DimBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE RemovePaymentsAboveLimit@5(VAR PayableVendLedgEntry@1000 : Record 317;RemainingAmtAvailable@1001 : Decimal);
    BEGIN
      PayableVendLedgEntry.SETFILTER("Amount (LCY)",'>%1',RemainingAmtAvailable);
      PayableVendLedgEntry.DELETEALL;
      PayableVendLedgEntry.SETRANGE("Amount (LCY)");
    END;

    LOCAL PROCEDURE InsertDimBuf@9(VAR DimBuf@1004 : Record 360;TableID@1000 : Integer;EntryNo@1001 : Integer;DimCode@1002 : Code[20];DimValue@1003 : Code[20]);
    BEGIN
      DimBuf.INIT;
      DimBuf."Table ID" := TableID;
      DimBuf."Entry No." := EntryNo;
      DimBuf."Dimension Code" := DimCode;

      //NC NCS-1602.4 > USE
      //NC NOS-26 > ENK
      IF TempSelectedDim.GET(USERID,3,REPORT::"Suggest Vendor Payments",'',DimBuf."Dimension Code") THEN BEGIN
        {
        TempDimBuf."Dimension Value Code":=TempSelectedDim."New Dimension Value Code"
        }
        //NC NOS-26 > ENK
        {
        TempDimBuf."Dimension Value Code":=TempSelectedDim."New Dimension Value Code";
        }
        DimBuf."Dimension Value Code":=TempSelectedDim."New Dimension Value Code";
        //NC NOS-26 < ENK
        IF GLSetup.GET THEN
          CASE DimBuf."Dimension Code" OF
            GLSetup."Global Dimension 1 Code": GlobalDim1ValueCodeG:=TempSelectedDim."New Dimension Value Code";
            GLSetup."Global Dimension 2 Code": GlobalDim2ValueCodeG:=TempSelectedDim."New Dimension Value Code";
          END;
      END
      //NC NCS-1602.5 < USE
      ELSE
      //NC NCS-1602.4 < USE

      DimBuf."Dimension Value Code" := DimValue;
      DimBuf.INSERT;
    END;

    LOCAL PROCEDURE GetMessageToRecipient@18(SummarizePerVend@1000 : Boolean) : Text[140];
    BEGIN
      IF SummarizePerVend THEN
        EXIT(CompanyInformation.Name);
      EXIT(
        STRSUBSTNO(
          MessageToRecipientMsg,
          TempPaymentBuffer."Vendor Ledg. Entry Doc. Type",
          TempPaymentBuffer."Applies-to Ext. Doc. No."));
    END;

    LOCAL PROCEDURE SetPostingDate@92(VAR GenJnlLine@1002 : Record 81;DueDate@1001 : Date;PostingDate@1000 : Date) : Boolean;
    BEGIN
      IF NOT UseDueDateAsPostingDate THEN BEGIN
        GenJnlLine.VALIDATE("Posting Date",PostingDate);
        EXIT(FALSE);
      END;

      IF DueDate = 0D THEN
        DueDate := GenJnlLine.GetAppliesToDocDueDate;
      EXIT(GenJnlLine.SetPostingDateAsDueDate(DueDate,DueDateOffset));
    END;

    LOCAL PROCEDURE GetApplDueDate@94(VendLedgEntryNo@1001 : Integer) : Date;
    VAR
      AppliedVendLedgEntry@1000 : Record 25;
    BEGIN
      IF AppliedVendLedgEntry.GET(VendLedgEntryNo) THEN
        EXIT(AppliedVendLedgEntry."Due Date");

      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE AdjustAgainstSelectedDim@16(VAR TempDimSetEntry@1000 : TEMPORARY Record 480;VAR TempDimSetEntry2@1003 : TEMPORARY Record 480) : Boolean;
    BEGIN
      IF SelectedDim.FINDSET THEN BEGIN
        REPEAT
          TempDimSetEntry.SETRANGE("Dimension Code",SelectedDim."Dimension Code");
          IF TempDimSetEntry.FINDFIRST THEN BEGIN
            TempDimSetEntry2.TRANSFERFIELDS(TempDimSetEntry,TRUE);
            TempDimSetEntry2.INSERT;
          END;
        UNTIL SelectedDim.NEXT = 0;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SetTempPaymentBufferDims@12(VAR DimBuf@1000 : Record 360);
    VAR
      GLSetup@1003 : Record 98;
      EntryNo@1001 : Integer;
      DefDimAdv@1101495000 : Record 50128;
    BEGIN
      IF SummarizePerDim THEN BEGIN
        //NC NCS-1602.5 > USE
        GlobalDim1ValueCodeG:='';
        GlobalDim2ValueCodeG:='';
        //NC NCS-1602.5 < USE
        //NC NOS-26 > ENK
        {
        TempDimBuf.RESET;
        TempDimBuf.DELETEALL;
        }
        DimBuf.RESET;
        DimBuf.DELETEALL;
        //NC NOS-26 < ENK
        //NC NCS-1602.2 > USE
        IF VendPostGroup.GET(VendLedgEntry."Vendor Posting Group") THEN BEGIN
          DefDim.SETRANGE("Table ID",DATABASE::"G/L Account");
          DefDim.SETRANGE("No.",VendPostGroup."Payables Account");
          IF DefDim.FINDFIRST THEN
          {
          IF SelectedDim.FIND('-') THEN
          }
          //NC NCS-1602.2 < USE
          REPEAT
            //NC NOS-26 > ENK
            {
            IF LedgEntryDim.GET(
            }
            IF DimSetEntry.GET(
            //NC NOS-26 < ENK
                //NC NCS-1602.2 > USE
                {
                VendLedgEntry."Dimension Set ID",SelectedDim."Dimension Code")
                }
                //NC NOS-26 > ENK
                {
                DATABASE::"Vendor Ledger Entry",VendLedgEntry."Entry No.",DefDim."Dimension Code")
                }
                VendLedgEntry."Dimension Set ID",DefDim."Dimension Code")
                //NC NOS-26 < ENK
                //NC NCS-1602.2 < USE
            THEN
              InsertDimBuf(DimBuf,DATABASE::"Dimension Buffer",0,DimSetEntry."Dimension Code",
                DimSetEntry."Dimension Value Code");
          //NC NCS-1602.2 > USE
          {
          UNTIL SelectedDim.NEXT = 0;
          }
          UNTIL DefDim.NEXT = 0;
        END;
        //NC NCS-1602.2 < USE
        //NC NCS-1602.3 > USE
        DefDim.RESET;
        DefDim.SETRANGE("Table ID",DATABASE::Vendor);
        DefDim.SETRANGE("No.",VendLedgEntry."Vendor No.");
        DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code");
        IF DefDim.FINDFIRST THEN
          REPEAT
            //NC NOS-26 > ENK
            {
            IF LedgEntryDim.GET(DATABASE::"Vendor Ledger Entry",VendLedgEntry."Entry No.",DefDim."Dimension Code") THEN BEGIN
              TempDimBuf."Table ID" := LedgEntryDim."Table ID";
              TempDimBuf."Dimension Code" := LedgEntryDim."Dimension Code";
            }
            IF DimSetEntry.GET(VendLedgEntry."Dimension Set ID", DefDim."Dimension Code") THEN BEGIN
              DimBuf."Table ID" := DATABASE::"Vendor Ledger Entry";
              DimBuf."Dimension Code" := DefDim."Dimension Code";
              //NC NCS-1602.4 > USE
              {
              IF TempSelectedDim.GET(USERID,3,REPORT::"Suggest Vendor Payments",'',TempDimBuf."Dimension Code") THEN
              }
              IF TempSelectedDim.GET(USERID,3,REPORT::"Suggest Vendor Payments",'',DimBuf."Dimension Code") THEN
              //NC NCS-1602.5 > USE
              {
                TempDimBuf."Dimension Value Code":=TempSelectedDim."New Dimension Value Code"
              }
              {
              BEGIN
                TempDimBuf."Dimension Value Code":=TempSelectedDim."New Dimension Value Code";
                IF GLSetup.GET THEN
                  CASE TempDimBuf."Dimension Code" OF
                    GLSetup."Global Dimension 1 Code": GlobalDim1ValueCode:=TempSelectedDim."New Dimension Value Code";
                    GLSetup."Global Dimension 2 Code": GlobalDim2ValueCode:=TempSelectedDim."New Dimension Value Code";
                  END;
              END
              }
              BEGIN
                DimBuf."Dimension Value Code":=TempSelectedDim."New Dimension Value Code";
                IF GLSetup.GET THEN
                  CASE DimBuf."Dimension Code" OF
                    GLSetup."Global Dimension 1 Code": GlobalDim1ValueCodeG:=TempSelectedDim."New Dimension Value Code";
                    GLSetup."Global Dimension 2 Code": GlobalDim2ValueCodeG:=TempSelectedDim."New Dimension Value Code";
                  END;
              END
              //NC NCS-1602.5 < USE
              ELSE
              //NC NCS-1602.4 < USE
              {
              TempDimBuf."Dimension Value Code" := LedgEntryDim."Dimension Value Code";
              IF TempDimBuf.INSERT THEN;
              }
              DimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
              IF DimBuf.INSERT THEN;
              //NC NOS-26 < ENK
            END;
          UNTIL DefDim.NEXT = 0;
          //NC NCS-1602.3 < USE

          //NC NCS-1769.2 > DP
          IF PayableVendLedgEntry."Agreement No."<>'' THEN BEGIN
            DefDimAdv.RESET;
            DefDimAdv.SETRANGE("Table ID",DATABASE::"Vendor Agreement");
            DefDimAdv.SETRANGE("Source No.",PayableVendLedgEntry."Vendor No.");
            DefDimAdv.SETRANGE("No.",PayableVendLedgEntry."Agreement No.");
            DefDimAdv.SETFILTER("Value Posting",'%1|%2',
                                  DefDim."Value Posting"::"Code Mandatory",
                                  DefDim."Value Posting"::"Same Code");
            IF DefDimAdv.FINDFIRST THEN
              REPEAT
                //NC NOS-26 > ENK
                {
                IF LedgEntryDim.GET(DATABASE::"Vendor Ledger Entry",VendLedgEntry."Entry No.",DefDimAdv."Dimension Code") THEN BEGIN
                  TempDimBuf."Table ID" := LedgEntryDim."Table ID";
                  TempDimBuf."Dimension Code" := LedgEntryDim."Dimension Code";
                  IF TempSelectedDim.GET(USERID,3,REPORT::"Suggest Vendor Payments",'',TempDimBuf."Dimension Code") THEN
                  BEGIN
                    TempDimBuf."Dimension Value Code":=TempSelectedDim."New Dimension Value Code";
                    IF GLSetup.GET THEN
                      CASE TempDimBuf."Dimension Code" OF
                        GLSetup."Global Dimension 1 Code": GlobalDim1ValueCodeG:=TempSelectedDim."New Dimension Value Code";
                        GLSetup."Global Dimension 2 Code": GlobalDim2ValueCodeG:=TempSelectedDim."New Dimension Value Code";
                      END;
                  END ELSE
                    TempDimBuf."Dimension Value Code" := LedgEntryDim."Dimension Value Code";
                  IF TempDimBuf.INSERT THEN;
                END;
              UNTIL DefDimAdv.NEXT = 0;
                }
                IF DimSetEntry.GET(VendLedgEntry."Dimension Set ID", DefDimAdv."Dimension Code") THEN BEGIN
                  DimBuf."Table ID" := DATABASE::"Vendor Ledger Entry";
                  DimBuf."Dimension Code" := DefDimAdv."Dimension Code";
                  IF TempSelectedDim.GET(USERID,3,REPORT::"Suggest Vendor Payments",'',DimBuf."Dimension Code") THEN BEGIN
                    DimBuf."Dimension Value Code":=TempSelectedDim."New Dimension Value Code";
                    IF GLSetup.GET THEN
                      CASE DimBuf."Dimension Code" OF
                        GLSetup."Global Dimension 1 Code": GlobalDim1ValueCodeG:=TempSelectedDim."New Dimension Value Code";
                        GLSetup."Global Dimension 2 Code": GlobalDim2ValueCodeG:=TempSelectedDim."New Dimension Value Code";
                      END;
                  END ELSE
                    DimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
                  IF DimBuf.INSERT THEN;
                END;
              UNTIL DefDimAdv.NEXT = 0;
          END;
          //NC NOS-26 < ENK
          //NC NCS-1769.2 < DP

        EntryNo := DimBufMgt.FindDimensions(DimBuf);
        IF EntryNo = 0 THEN
          EntryNo := DimBufMgt.InsertDimensions(DimBuf);
        TempPaymentBuffer."Dimension Entry No." := EntryNo;
        IF TempPaymentBuffer."Dimension Entry No." <> 0 THEN BEGIN
          GLSetup.GET;

          //NC NCS-1602.5 > USE
          IF GlobalDim1ValueCodeG <> '' THEN
            TempPaymentBuffer."Global Dimension 1 Code" := GlobalDim1ValueCodeG
          ELSE
          //NC NCS-1602.5 < USE

          IF DimCodeIsInDimBuf(GLSetup."Global Dimension 1 Code",DimBuf) THEN
            TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code"
          ELSE
            TempPaymentBuffer."Global Dimension 1 Code" := '';

          //NC NCS-1602.5 > USE
          IF GlobalDim2ValueCodeG <> '' THEN
            TempPaymentBuffer."Global Dimension 2 Code" := GlobalDim2ValueCodeG
          ELSE
          //NC NCS-1602.5 < USE

          IF DimCodeIsInDimBuf(GLSetup."Global Dimension 2 Code",DimBuf) THEN
            TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code"
          ELSE
            TempPaymentBuffer."Global Dimension 2 Code" := '';
        END ELSE BEGIN
          TempPaymentBuffer."Global Dimension 1 Code" := '';
          TempPaymentBuffer."Global Dimension 2 Code" := '';
        END;
        TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
      END ELSE BEGIN
        TempPaymentBuffer."Dimension Entry No." := 0;
        TempPaymentBuffer."Global Dimension 1 Code" := '';
        TempPaymentBuffer."Global Dimension 2 Code" := '';
        TempPaymentBuffer."Dimension Set ID" := 0;
      END;
    END;

    PROCEDURE SetHideMessage@1210000(NewHideMessage@1210000 : Boolean);
    BEGIN
      HideMessage := NewHideMessage;
    END;

    PROCEDURE GetVATAgentPmtAmount@1210003() : Decimal;
    VAR
      VendAgrmt@1210000 : Record 14901;
      VATPostingSetup@1210001 : Record 325;
      Currency@1210002 : Record 4;
      VendorFunds@1210003 : Boolean;
    BEGIN
      IF VendLedgEntry."Currency Code" <> '' THEN
        Currency.GET(VendLedgEntry."Currency Code")
      ELSE
        Currency.InitRoundingPrecision;

      IF VendLedgEntry."Agreement No." = '' THEN BEGIN
        VATPostingSetup.GET(Vend2."VAT Bus. Posting Group",Vend2."VAT Agent Prod. Posting Group");
        VendorFunds :=
          Vend2."VAT Payment Source Type" = Vend2."VAT Payment Source Type"::"Vendor Funds";
      END ELSE BEGIN
        VendAgrmt.GET(VendLedgEntry."Vendor No.",VendLedgEntry."Agreement No.");
        VATPostingSetup.GET(VendAgrmt."VAT Bus. Posting Group",VendAgrmt."VAT Agent Prod. Posting Group");
        VendorFunds :=
          VendAgrmt."VAT Payment Source Type" = VendAgrmt."VAT Payment Source Type"::"Vendor Funds";
      END;

      IF VendorFunds THEN
        EXIT(
          VendLedgEntry."Remaining Amount" -
          ROUND(
            VendLedgEntry."Remaining Amount" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
            Currency."Amount Rounding Precision",Currency.VATRoundingDirection));

      EXIT(VendLedgEntry."Remaining Amount");
    END;

    PROCEDURE MakeBudgetPmtJnlLine@1210100(VATAgentPmtAmount@1210004 : Decimal);
    VAR
      VendLedgEntry@1210000 : Record 25;
      VendAgrmt@1210001 : Record 14901;
      Vend@1210002 : Record 23;
      Currency@1210005 : Record 4;
      VATPostingSetup@1210006 : Record 325;
      AccountNo@1210003 : Code[20];
    BEGIN
      VendLedgEntry.GET(TempPaymentBuffer."Vendor Ledg. Entry No.");
      IF VendLedgEntry."Agreement No." <> '' THEN BEGIN
        VendAgrmt.GET(VendLedgEntry."Vendor No.",VendLedgEntry."Agreement No.");
        VATPostingSetup.GET(VendAgrmt."VAT Bus. Posting Group",VendAgrmt."VAT Agent Prod. Posting Group");
        AccountNo := VendAgrmt."Tax Authority No.";
      END ELSE BEGIN
        Vend.GET(VendLedgEntry."Vendor No.");
        VATPostingSetup.GET(Vend."VAT Bus. Posting Group",Vend."VAT Agent Prod. Posting Group");
        AccountNo := Vend."Tax Authority No.";
      END;

      Currency.InitRoundingPrecision;
      WITH GenJnlLine DO BEGIN
        INIT;
        Window.UPDATE(1,AccountNo);
        LastLineNo := LastLineNo + 10000;
        "Line No." := LastLineNo;
        VALIDATE("Posting Date",PostingDate);
        "Document Type" := "Document Type"::Payment;
        "Posting No. Series" := GenJnlBatch."Posting No. Series";
        "Document No." := NextDocNo;
        NextDocNo := INCSTR(NextDocNo);

        "Account Type" := "Account Type"::Vendor;
        VALIDATE("Account No.",AccountNo);
        "Bal. Account Type" := BalAccType;
        VALIDATE("Bal. Account No.",BalAccNo);
        VALIDATE("Currency Code",'');
        "Bank Payment Type" := BankPmtType;
        "Shortcut Dimension 1 Code" := TempPaymentBuffer."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := TempPaymentBuffer."Global Dimension 2 Code";
        "Source Code" := GenJnlTemplate."Source Code";
        "Reason Code" := GenJnlBatch."Reason Code";
        VALIDATE(
          Amount,
          ROUND(VATAgentPmtAmount * VATPostingSetup."VAT %" / 100,Currency."Amount Rounding Precision"));
        INSERT;
      END;
    END;

    PROCEDURE InitVATAgentPayment@1210001(NewCreateVATAgentPayment@1210000 : Boolean);
    BEGIN
      CreateVATAgentPayment := NewCreateVATAgentPayment;
    END;

    LOCAL PROCEDURE IsEntryAlreadyApplied@19(GenJnlLine3@1000 : Record 81;VendLedgEntry2@1001 : Record 25) : Boolean;
    VAR
      GenJnlLine4@1002 : Record 81;
    BEGIN
      GenJnlLine4.SETRANGE("Journal Template Name",GenJnlLine3."Journal Template Name");
      GenJnlLine4.SETRANGE("Journal Batch Name",GenJnlLine3."Journal Batch Name");
      GenJnlLine4.SETRANGE("Account Type",GenJnlLine4."Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Account No.",VendLedgEntry2."Vendor No.");
      GenJnlLine4.SETRANGE("Applies-to Doc. Type",VendLedgEntry2."Document Type");
      GenJnlLine4.SETRANGE("Applies-to Doc. No.",VendLedgEntry2."Document No.");
      EXIT(NOT GenJnlLine4.ISEMPTY);
    END;

    LOCAL PROCEDURE SetDefaults@14();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      GenJnlLine2."Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      GenJnlLine2."Bal. Account No." := GenJnlBatch."Bal. Account No.";
    END;

    LOCAL PROCEDURE ">>>NOS-26"@1101495008();
    BEGIN
    END;

    PROCEDURE GetSelectedDims@1101495009();
    VAR
      DimSelectionBuf@1101495000 : Record 368;
    BEGIN
      //NC NCS-1602.4 > USE
      TempSelectedDim.RESET;
      TempSelectedDim.DELETEALL;
      IF SummarizePerDimText <> '' THEN
        DimSelectionBuf.CompareDimText(3,REPORT::"Suggest Vendor Payments",'',SummarizePerDimText,Text12402);
      SelectedDim.GetSelectedDim(USERID,3,REPORT::"Suggest Vendor Payments",'',TempSelectedDim);
      TempSelectedDim.SETFILTER("New Dimension Value Code",'=%1','');
      TempSelectedDim.DELETEALL;
      TempSelectedDim.RESET;
      //NC NCS-1602.4 < USE
    END;

    BEGIN
    {
      NC NCS-1602 USE Изменены Триггеры Save Amounts, MakeGenJnlLines, SetGenJnlLine, ValidatePostingDate, изменены свойства Req.Form
      NC NCS-1602.2 USE Изменены Триггеры Vendor - OnPreDataItem, MakeGenJnlLines (для группировки по измерениям со счёта)
      NC NCS-1602.3 USE Изменен Триггер MakeGenJnlLines (измерения с карточки поставщика)
      NC NCS-1602.4 USE Добавлена функция GetSelectedDims, изменены триггеры MakeGenJnlLines (принудительное назначение измерений),
                                                                              и Vendor - OnAssistEdit
      NC NCS-1602.5 USE Изменена функция MakeGenJnlLines
      NC NCS-1602.6 USE Изменена функция MakeGenJnlLines, SetGenJnlLine
      NC NCS-1602.8 USE Изменена функция SetBankAccCurrencyFilter
      NC NCS-1602.9 DP Изменена функция MakeGenJnlLines
      NC NCS-1763 DP Изменены триггер Report - OnPreReport(), функция GetVendLedgEntries
      NC NCS-1769.2 DP Изменена функция MakeGenJnlLines
      NC NCS-1769.3 DP Изменен триггер Vendor - OnPreDataItem()
      NC NCS-1769.4 DP Изменены триггеры Vendor - OnPreDataItem(), Vendor - OnAfterGetRecord()
      -----
      NC NOS-26 ENK
        Change function: MakeGenJnlLines. Add validate for shortcut global dimensions.
    }
    END.
  }
  RDLDATA
  {
  }
}

