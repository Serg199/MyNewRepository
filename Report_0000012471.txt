OBJECT Report 12471 Shipment Request M-11
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Shipment Request M-11;
               RUS=Требование-накладная М-11];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  InventoryReportsHelper.InitM11Report;
                END;

    OnPostReport=BEGIN
                   IF FileName <> '' THEN
                     InventoryReportsHelper.ExportDataFile(FileName)
                   ELSE
                     InventoryReportsHelper.ExportData;
                 END;

  }
  DATASET
  {
    { 2957;    ;DataItem;                    ;
               DataItemTable=Table5740;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF GETFILTERS = '' THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  CopyFromTransferHeader("Transfer Header",LineBuffer);

                                  AuthorizedBy := "Transfer-from Contact";
                                  RequestedBy := "Transfer-to Contact";

                                  IF ReleasedByCode = '' THEN
                                    ReleasedByCode := GetEmployeeCode(DATABASE::"Transfer Header","No.",
                                        DocumentSignature."Employee Type"::ReleasedBy,"Transfer-from Code");

                                  IF ReceivedByCode = '' THEN
                                    ReceivedByCode := GetEmployeeCode(DATABASE::"Transfer Header","No.",
                                        DocumentSignature."Employee Type"::ReceivedBy,"Transfer-to Code");
                                END;
                                 }

    { 8280;    ;DataItem;                    ;
               DataItemTable=Table83;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Line No.);
               OnPreDataItem=BEGIN
                               IF GETFILTERS = '' THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  Location@1210000 : Record 14;
                                BEGIN
                                  CopyFromItemJournalLine("Item Journal Line",LineBuffer);

                                  IF Location.GET("New Location Code") THEN BEGIN
                                    IF ReceivedByCode = '' THEN
                                      ReceivedByCode := Location."Responsible Employee No.";
                                    RequestedBy := Location.Contact;
                                  END;

                                  IF Location.GET("Location Code") THEN BEGIN
                                    IF ReleasedByCode = '' THEN
                                      ReleasedByCode := Location."Responsible Employee No.";
                                    AuthorizedBy := Location.Contact;
                                  END;
                                END;
                                 }

    { 4354;    ;DataItem;                    ;
               DataItemTable=Table5746;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF GETFILTERS = '' THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  CopyFromTransferReceiptHeader("Transfer Receipt Header",LineBuffer);

                                  AuthorizedBy := "Transfer-from Contact";
                                  RequestedBy := "Transfer-to Contact";

                                  IF ReleasedByCode = '' THEN
                                    ReleasedByCode := GetEmployeeCode(DATABASE::"Transfer Receipt Header","No.",
                                        DocumentSignature."Employee Type"::ReleasedBy,"Transfer-from Code");

                                  IF ReceivedByCode = '' THEN
                                    ReceivedByCode := GetEmployeeCode(DATABASE::"Transfer Receipt Header","No.",
                                        DocumentSignature."Employee Type"::ReceivedBy,"Transfer-to Code");
                                END;
                                 }

    { 6030;    ;DataItem;                    ;
               DataItemTable=Table5744;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF GETFILTERS = '' THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  CopyFromTransferShipmentHeader("Transfer Shipment Header",LineBuffer);

                                  AuthorizedBy := "Transfer-from Contact";
                                  RequestedBy := "Transfer-to Contact";

                                  IF ReleasedByCode = '' THEN
                                    ReleasedByCode := GetEmployeeCode(DATABASE::"Transfer Shipment Header","No.",
                                        DocumentSignature."Employee Type"::ReleasedBy,"Transfer-from Code");

                                  IF ReceivedByCode = '' THEN
                                    ReceivedByCode := GetEmployeeCode(DATABASE::"Transfer Shipment Header","No.",
                                        DocumentSignature."Employee Type"::ReceivedBy,"Transfer-to Code");
                                END;
                                 }

    { 2278;    ;DataItem;HeaderLoop          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               HeaderBuffer.RESET;

                               CompanyInfo.GET;
                               SETRANGE(Number,1,HeaderBuffer.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    HeaderBuffer.FINDSET;
                                    FillReportHeader1;
                                  END ELSE
                                    HeaderBuffer.NEXT;

                                  CorrAcc := HeaderBuffer."Item No.";
                                  CorrAccDimValue := HeaderBuffer."Variant Code";
                                  UnitOfMeasure := HeaderBuffer."Location Code";

                                  Location.GET(LineBuffer."Location Code");
                                  OrgDepartFrom := Location.Name + Location."Name 2";

                                  Location.GET(LineBuffer."New Location Code");
                                  OrgDepartTo := Location.Name + Location."Name 2";

                                  FillBody1;
                                END;

               OnPostDataItem=BEGIN
                                FillReportHeader2;
                              END;
                               }

    { 2132;    ;DataItem;LineLoop            ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               LineBuffer.RESET;
                               SETRANGE(Number,1,LineCount);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    LineBuffer.FINDSET;
                                    InventoryReportsHelper.FillM11PageHeader;
                                  END ELSE
                                    LineBuffer.NEXT;

                                  FillBody;
                                END;

               OnPostDataItem=BEGIN
                                FillReportFooter;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры] }

      { 1210015;2;Field     ;
                  CaptionML=[ENU=Operation type code;
                             RUS=Код вида операции];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=OperationTypeCode }

      { 1210010;2;Field     ;
                  CaptionML=[ENU=Transfer-from activity category;
                             RUS=Отправитель: вид деятельности];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=TransferFromActivityCategory }

      { 1210013;2;Field     ;
                  CaptionML=[ENU=Transfer-to activity category;
                             RUS=Получатель: вид деятельности];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=TransferToActivityCategory }

      { 1210008;2;Field     ;
                  CaptionML=[ENU=Corr. Acc. Dimension Code;
                             RUS=Корр. счет: код аналит. учета];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=KindOperationCode;
                  TableRelation=Dimension;
                  OnLookup=VAR
                             DimensionTable@1210001 : Record 348;
                             DimensionListForm@1210002 : Page 548;
                           BEGIN
                             CLEAR(DimensionListForm);
                             DimensionListForm.LOOKUPMODE := TRUE;
                             IF DimensionListForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                               DimensionListForm.GETRECORD(DimensionTable);
                               KindOperationCode := DimensionTable.Code;
                             END;
                           END;
                            }

      { 1210006;2;Field     ;
                  CaptionML=[ENU=Passed by (Employee);
                             RUS=Кем передано (Подотчетное лицо)];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PassedByCode;
                  TableRelation=Employee }

      { 1210005;2;Field     ;
                  CaptionML=[ENU="Released by (Employee) ";
                             RUS="Отпустил (Сотрудник) "];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ReleasedByCode;
                  TableRelation=Employee }

      { 1210002;2;Field     ;
                  CaptionML=[ENU="Received by (Employee) ";
                             RUS="Получил (Сотрудник) "];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ReceivedByCode;
                  TableRelation=Employee }

      { 1210000;2;Field     ;
                  CaptionML=[ENU=Without amounts;
                             RUS=Без сумм];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=WithoutAmount }

      { 1210022;2;Field     ;
                  CaptionML=[ENU=Quantity - shipped;
                             RUS=Количество - отпущено];
                  OptionCaptionML=[ENU=Qty. to Ship,Qty. Shipped;
                                   RUS=Кол-во для отгрузки,Отгруженное кол-во];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=QuantityType }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Location@1210018 : Record 14;
      CompanyInfo@1210015 : Record 79;
      LineBuffer@1210012 : TEMPORARY Record 83;
      Item@1210009 : Record 27;
      HeaderBuffer@1210013 : TEMPORARY Record 5804;
      DocumentSignature@1210000 : Record 12420;
      DimSetEntry@1210024 : Record 480;
      StdRepMgt@1210023 : Codeunit 12401;
      InventoryReportsHelper@1210017 : Codeunit 14942;
      KindOperationCode@1210001 : Code[20];
      CorrAcc@1210020 : Code[20];
      CorrAccDimValue@1210021 : Code[20];
      UnitOfMeasure@1210022 : Code[10];
      PassedByCode@1210004 : Code[20];
      ReceivedByCode@1210003 : Code[20];
      ReleasedByCode@1210002 : Code[20];
      OperationTypeCode@1210014 : Text[30];
      RequestedBy@1210007 : Text[50];
      AuthorizedBy@1210008 : Text[50];
      TransferFromActivityCategory@1210026 : Text[50];
      TransferToActivityCategory@1210027 : Text[50];
      OrgDepartFrom@1210005 : Text[250];
      OrgDepartTo@1210011 : Text[250];
      FileName@1210019 : Text;
      WithoutAmount@1210006 : Boolean;
      QuantityType@1210010 : 'Qty. to Ship,Qty. Shipped';
      LineCount@1210016 : Integer;

    PROCEDURE GetEmployeeCode@1210027(TableID@1210003 : Integer;DocumentNo@1210002 : Code[20];EmployeeType@1210001 : Option;LocationCode@1210000 : Code[10]) EmployeeCode : Code[20];
    VAR
      Location@1210005 : Record 14;
      PostedDocumentSignature@1210004 : Record 12421;
      DocumentSignature@1210006 : Record 12420;
    BEGIN
      CASE TableID OF
        DATABASE::"Transfer Header":
          IF DocumentSignature.GET(TableID,0,DocumentNo,EmployeeType) THEN
            EXIT(DocumentSignature."Employee No.");
        DATABASE::"Transfer Shipment Header", DATABASE::"Transfer Receipt Header":
          IF PostedDocumentSignature.GET(TableID,0,DocumentNo,EmployeeType) THEN
            EXIT(PostedDocumentSignature."Employee No.");
      END;

      IF Location.GET(LocationCode) THEN
        EXIT(Location."Responsible Employee No.");

      EmployeeCode := '';
    END;

    PROCEDURE HeaderBufferInsert@1210063(DimensionCodeValue@1210000 : Code[20];UnitOfMeasure@1210001 : Code[10];InventoryAccount@1210002 : Code[20]);
    BEGIN
      HeaderBuffer.INIT;

      HeaderBuffer."Item No." := InventoryAccount;
      HeaderBuffer."Variant Code" := DimensionCodeValue;
      HeaderBuffer."Location Code" := UnitOfMeasure;

      IF HeaderBuffer.INSERT THEN;
    END;

    PROCEDURE CopyFromTransferHeader@1210099(TransferHeader@1210000 : Record 5740;VAR LineBuffer@1210001 : Record 83);
    VAR
      InventoryPostingSetup@1210002 : Record 5813;
      TransferLine@1210005 : Record 5741;
    BEGIN
      WITH TransferHeader DO BEGIN
        TransferLine.SETRANGE("Document No.","No.");
        TransferLine.SETRANGE("Derived From Line No.",0);
        LineCount := TransferLine.COUNT;

        IF TransferLine.FINDSET THEN
          REPEAT
            LineBuffer.INIT;
            LineBuffer."Line No." := TransferLine."Line No.";
            LineBuffer."Document No." := "No.";
            LineBuffer."Posting Date" := "Posting Date";
            LineBuffer."Location Code" := "Transfer-from Code";
            LineBuffer."New Location Code" := "Transfer-to Code";
            LineBuffer.Description := TransferLine.Description;
            LineBuffer."Item No." := TransferLine."Item No.";
            LineBuffer."Unit of Measure Code" := TransferLine."Unit of Measure Code";
            LineBuffer.Quantity := TransferLine.Quantity;

            IF QuantityType = 0 THEN
              LineBuffer."Invoiced Quantity" := TransferLine."Qty. to Ship"
            ELSE
              LineBuffer."Invoiced Quantity" := TransferLine."Quantity Shipped";

            Item.GET(TransferLine."Item No.");
            IF NOT WithoutAmount THEN
              LineBuffer."Unit Cost" := Item."Unit Cost";

            IF InventoryPostingSetup.GET("Transfer-to Code",Item."Inventory Posting Group") THEN
              LineBuffer."Shortcut Dimension 1 Code" := InventoryPostingSetup."Inventory Account";
            IF DimSetEntry.GET(TransferLine."Dimension Set ID",KindOperationCode) THEN
              LineBuffer."Shortcut Dimension 2 Code" := DimSetEntry."Dimension Value Code";

            InventoryPostingSetup.GET("Transfer-from Code",Item."Inventory Posting Group");
            HeaderBufferInsert(LineBuffer."Shortcut Dimension 2 Code",
              TransferLine."Unit of Measure",
              InventoryPostingSetup."Inventory Account");

            LineBuffer.INSERT;
          UNTIL TransferLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyFromItemJournalLine@1210106(VAR ItemJournalLine@1210000 : Record 83;VAR LineBuffer@1210001 : TEMPORARY Record 83);
    VAR
      InventoryPostingSetup@1210003 : Record 5813;
    BEGIN
      WITH ItemJournalLine DO BEGIN
        LineCount := COUNT;

        IF FINDSET THEN
          REPEAT
            LineBuffer.INIT;
            LineBuffer."Journal Template Name" := "Journal Template Name";
            LineBuffer."Journal Batch Name" := "Journal Batch Name";
            LineBuffer."Line No." := "Line No.";
            LineBuffer."Document No." := "Document No.";
            LineBuffer."Posting Date" := "Posting Date";
            LineBuffer."Location Code" := "Location Code";
            LineBuffer."New Location Code" := "New Location Code";
            LineBuffer.Description := Description;
            LineBuffer."Item No." := "Item No.";
            LineBuffer."Unit of Measure Code" := "Unit of Measure Code";
            LineBuffer.Quantity := Quantity;
            LineBuffer."Invoiced Quantity" := "Invoiced Quantity";

            IF NOT WithoutAmount THEN
              LineBuffer."Unit Cost" := "Unit Cost";

            Item.GET("Item No.");
            IF InventoryPostingSetup.GET("New Location Code",Item."Inventory Posting Group") THEN
              LineBuffer."Shortcut Dimension 1 Code" := InventoryPostingSetup."Inventory Account";
            IF DimSetEntry.GET("Dimension Set ID",KindOperationCode) THEN
              LineBuffer."Shortcut Dimension 2 Code" := DimSetEntry."Dimension Value Code";

            InventoryPostingSetup.GET("Location Code",Item."Inventory Posting Group");
            HeaderBufferInsert(LineBuffer."Shortcut Dimension 2 Code",
              "Unit of Measure Code",
              InventoryPostingSetup."Inventory Account");

            LineBuffer.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopyFromTransferReceiptHeader@1210009(TransferReceiptHeader@1210000 : Record 5746;VAR LineBuffer@1210001 : Record 83);
    VAR
      InventoryPostingSetup@1210006 : Record 5813;
      TransferReceiptLine@1210003 : Record 5747;
    BEGIN
      WITH TransferReceiptHeader DO BEGIN
        TransferReceiptLine.SETRANGE("Document No.","No.");
        LineCount := TransferReceiptLine.COUNT;

        IF TransferReceiptLine.FINDSET THEN
          REPEAT
            LineBuffer.INIT;
            LineBuffer."Line No." := TransferReceiptLine."Line No.";
            LineBuffer."Document No." := "No.";
            LineBuffer."Posting Date" := "Posting Date";
            LineBuffer."Location Code" := "Transfer-from Code";
            LineBuffer."New Location Code" := "Transfer-to Code";
            LineBuffer.Description := TransferReceiptLine.Description;
            LineBuffer."Item No." := TransferReceiptLine."Item No.";
            LineBuffer."Unit of Measure Code" := TransferReceiptLine."Unit of Measure Code";
            LineBuffer.Quantity := TransferReceiptLine.Quantity;
            LineBuffer."Invoiced Quantity" := TransferReceiptLine.Quantity;

            IF NOT WithoutAmount THEN
              LineBuffer."Unit Cost" := GetUnitCost(LineBuffer);

            Item.GET(LineBuffer."Item No.");
            IF InventoryPostingSetup.GET("Transfer-to Code",Item."Inventory Posting Group") THEN
              LineBuffer."Shortcut Dimension 1 Code" := InventoryPostingSetup."Inventory Account";
            IF DimSetEntry.GET(TransferReceiptLine."Dimension Set ID",KindOperationCode) THEN
              LineBuffer."Shortcut Dimension 2 Code" := DimSetEntry."Dimension Value Code";

            LineBuffer."Item Shpt. Entry No." := GetItemLedgerEntryNo(LineBuffer."Item No.",
                LineBuffer."Document No.",LineBuffer."Line No.");

            InventoryPostingSetup.GET("Transfer-from Code",Item."Inventory Posting Group");
            HeaderBufferInsert(LineBuffer."Shortcut Dimension 2 Code",
              TransferReceiptLine."Unit of Measure",
              InventoryPostingSetup."Inventory Account");

            LineBuffer.INSERT;
          UNTIL TransferReceiptLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyFromTransferShipmentHeader@1210018(TransferShipmentHeader@1210000 : Record 5744;VAR LineBuffer@1210001 : Record 83);
    VAR
      InventoryPostingSetup@1210005 : Record 5813;
      TransferShipmentLine@1210003 : Record 5745;
    BEGIN
      WITH TransferShipmentHeader DO BEGIN
        TransferShipmentLine.SETRANGE("Document No.","No.");
        LineCount := TransferShipmentLine.COUNT;

        IF TransferShipmentLine.FINDSET THEN
          REPEAT
            LineBuffer.INIT;
            LineBuffer."Line No." := TransferShipmentLine."Line No.";
            LineBuffer."Document No." := "No.";
            LineBuffer."Posting Date" := "Posting Date";
            LineBuffer."Location Code" := "Transfer-from Code";
            LineBuffer."New Location Code" := "Transfer-to Code";
            LineBuffer.Description := TransferShipmentLine.Description;
            LineBuffer."Item No." := TransferShipmentLine."Item No.";
            LineBuffer."Unit of Measure Code" := TransferShipmentLine."Unit of Measure Code";
            LineBuffer.Quantity := TransferShipmentLine.Quantity;
            LineBuffer."Invoiced Quantity" := TransferShipmentLine.Quantity;

            IF NOT WithoutAmount THEN
              LineBuffer."Unit Cost" := GetUnitCost(LineBuffer);

            Item.GET(LineBuffer."Item No.");
            IF InventoryPostingSetup.GET("Transfer-to Code",Item."Inventory Posting Group") THEN
              LineBuffer."Shortcut Dimension 1 Code" := InventoryPostingSetup."Inventory Account";
            IF DimSetEntry.GET(TransferShipmentLine."Dimension Set ID",KindOperationCode) THEN
              LineBuffer."Shortcut Dimension 2 Code" := DimSetEntry."Dimension Value Code";

            InventoryPostingSetup.GET("Transfer-from Code",Item."Inventory Posting Group");
            HeaderBufferInsert(LineBuffer."Shortcut Dimension 2 Code",
              TransferShipmentLine."Unit of Measure",
              InventoryPostingSetup."Inventory Account");

            LineBuffer.INSERT;
          UNTIL TransferShipmentLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetUnitCost@1210061(ItemJournalLine@1210000 : Record 83) UnitCost : Decimal;
    VAR
      ValueEntry@1210001 : Record 5802;
    BEGIN
      ValueEntry.SETCURRENTKEY("Item No.","Posting Date","Document No.","Document Line No.");

      ValueEntry.SETRANGE("Item No.",ItemJournalLine."Item No.");
      ValueEntry.SETRANGE("Posting Date",ItemJournalLine."Posting Date");
      ValueEntry.SETRANGE("Document No.",ItemJournalLine."Document No.");
      ValueEntry.SETRANGE("Document Line No.",ItemJournalLine."Line No.");

      IF ValueEntry.FINDFIRST THEN
        UnitCost := ValueEntry."Cost per Unit"
      ELSE
        UnitCost := 0;
    END;

    PROCEDURE GetItemLedgerEntryNo@1210071(ItemNo@1210000 : Code[20];DocumentNo@1210001 : Code[20];DocumentLineNo@1210002 : Integer) EntryNo : Integer;
    VAR
      ItemLedgerEntry@1210003 : Record 32;
    BEGIN
      ItemLedgerEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");

      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Document Line No.",DocumentLineNo);

      IF ItemLedgerEntry.FINDLAST THEN
        EntryNo := ItemLedgerEntry."Entry No."
      ELSE
        EntryNo := 0;
    END;

    PROCEDURE SetFileNameSilent@1210007(NewFileName@1210001 : Text);
    BEGIN
      FileName := NewFileName;
    END;

    PROCEDURE InitializeRequest@1210002(NewOperationTypeCode@1210000 : Text[30];NewTransferFromActivityCategory@1210002 : Text[50];NewTransferToActivityCategory@1210001 : Text[50];NewKindOperationCode@1210003 : Code[20];NewPassedByCode@1210006 : Code[20];NewReceivedByCode@1210005 : Code[20];NewReleasedByCode@1210004 : Code[20];NewWithoutAmount@1210007 : Boolean;NewQuantityType@1210008 : Option);
    BEGIN
      OperationTypeCode := NewOperationTypeCode;
      TransferFromActivityCategory := NewTransferFromActivityCategory;
      TransferToActivityCategory := NewTransferToActivityCategory;
      KindOperationCode := NewKindOperationCode;
      PassedByCode := NewPassedByCode;
      ReceivedByCode := NewReceivedByCode;
      ReleasedByCode := NewReleasedByCode;
      WithoutAmount := NewWithoutAmount;
      QuantityType := NewQuantityType;
    END;

    LOCAL PROCEDURE FillReportHeader1@1210000();
    VAR
      ReportHeaderArr@1210000 : ARRAY [12] OF Text;
    BEGIN
      ReportHeaderArr[1] := LineBuffer."Document No.";
      ReportHeaderArr[2] := StdRepMgt.GetCompanyName;
      ReportHeaderArr[3] := CompanyInfo."OKPO Code";

      InventoryReportsHelper.FillM11ReportHeader1(ReportHeaderArr);
    END;

    LOCAL PROCEDURE FillBody1@1210005();
    VAR
      Body1Arr@1210000 : ARRAY [9] OF Text;
    BEGIN
      Body1Arr[1] := FORMAT(LineBuffer."Posting Date");
      Body1Arr[2] := OperationTypeCode;
      Body1Arr[3] := OrgDepartFrom;
      Body1Arr[4] := TransferFromActivityCategory;
      Body1Arr[5] := OrgDepartTo;
      Body1Arr[6] := TransferToActivityCategory;
      Body1Arr[7] := CorrAcc;
      Body1Arr[8] := CorrAccDimValue;
      Body1Arr[9] := UnitOfMeasure;

      InventoryReportsHelper.FillM11Body1(Body1Arr);
    END;

    LOCAL PROCEDURE FillReportHeader2@1210001();
    VAR
      ReportHeaderArr@1210000 : ARRAY [3] OF Text;
    BEGIN
      ReportHeaderArr[1] := StdRepMgt.GetEmpName(PassedByCode);
      ReportHeaderArr[2] := RequestedBy;
      ReportHeaderArr[3] := AuthorizedBy;

      InventoryReportsHelper.FillM11ReportHeader2(ReportHeaderArr);
    END;

    LOCAL PROCEDURE FillBody@1210008();
    VAR
      BodyArr@1210000 : ARRAY [11] OF Text;
    BEGIN
      WITH LineBuffer DO BEGIN
        BodyArr[1] := "Shortcut Dimension 1 Code";
        BodyArr[2] := "Shortcut Dimension 2 Code";
        BodyArr[3] := Description;
        BodyArr[4] := "Item No.";
        BodyArr[5] := "Unit of Measure Code";
        BodyArr[6] := StdRepMgt.GetUoMDesc("Unit of Measure Code");
        BodyArr[7] := FORMAT(Quantity);
        BodyArr[8] := FORMAT("Invoiced Quantity");
        BodyArr[9] := FormatAmount("Unit Cost");
        BodyArr[10] := FormatAmount("Invoiced Quantity" * "Unit Cost");
        BodyArr[11] := FORMAT("Item Shpt. Entry No.");
      END;

      InventoryReportsHelper.FillM11Body(BodyArr);
    END;

    LOCAL PROCEDURE FillReportFooter@1210010();
    VAR
      ReportFooterArr@1210000 : ARRAY [4] OF Text;
    BEGIN
      ReportFooterArr[1] := StdRepMgt.GetEmpPosition(ReleasedByCode);
      ReportFooterArr[2] := StdRepMgt.GetEmpName(ReleasedByCode);
      ReportFooterArr[3] := StdRepMgt.GetEmpPosition(ReceivedByCode);
      ReportFooterArr[4] := StdRepMgt.GetEmpName(ReceivedByCode);

      InventoryReportsHelper.FillM11ReportFooter(ReportFooterArr);
    END;

    LOCAL PROCEDURE FormatAmount@1210024(Amount@1210000 : Decimal) : Text;
    BEGIN
      IF Amount = 0 THEN
        EXIT('');

      EXIT(StdRepMgt.FormatReportValue(Amount,2));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

