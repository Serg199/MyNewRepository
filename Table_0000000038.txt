OBJECT Table 38 Purchase Header
{
  OBJECT-PROPERTIES
  {
    Date=07.06.17;
    Time=16:33:42;
    Modified=Yes;
    Version List=NAVW110.00.00.15601,NAVRU10.00.00.15601,NOS-26;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnInsert=BEGIN
               IF NOT SkipInitialization THEN
                 InitInsert;

               IF GETFILTER("Buy-from Vendor No.") <> '' THEN
                 IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
                   VALIDATE("Buy-from Vendor No.",GETRANGEMIN("Buy-from Vendor No."));

               DocSignMgt.SetDefaults(DATABASE::"Purchase Header","Document Type","No.");
             END;

    OnModify=BEGIN
               UpdateVendorAddress;
             END;

    OnDelete=VAR
               PostPurchDelete@1000 : Codeunit 364;
             BEGIN
               IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                 ERROR(
                   Text023,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

               PostPurchDelete.DeleteHeader(
                 Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                 ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               DocSignMgt.DeleteDocSign(DATABASE::"Purchase Header","Document Type","No.");

               ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
               PurchLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               PurchLine.SETRANGE("Document Type","Document Type");
               PurchLine.SETRANGE("Document No.","No.");
               PurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
               DeletePurchaseLines;
               PurchLine.SETRANGE(Type);
               DeletePurchaseLines;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               IF (PurchRcptHeader."No." <> '') OR
                  (PurchInvHeader."No." <> '') OR
                  (PurchCrMemoHeader."No." <> '') OR
                  (ReturnShptHeader."No." <> '') OR
                  (PurchInvHeaderPrepmt."No." <> '') OR
                  (PurchCrMemoHeaderPrepmt."No." <> '')
               THEN
                 MESSAGE(PostedDocsToPrintCreatedMsg);
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Header;
               RUS=Заголовок покупки];
    LookupPageID=Page53;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    RUS=Предложение,Заказ,Счет,Кредит-нота,Общий заказ,Возврат];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                InitRecOnVendUpdate;
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Buy-from Vendor No." <> xRec."Buy-from Vendor No.") AND
                                                                   (xRec."Buy-from Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,BuyFromVendorTxt);
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromVendor("Buy-from Vendor No.",FIELDCAPTION("Buy-from Vendor No.")) THEN
                                                                      EXIT;

                                                                    CheckReceiptInfo(PurchLine,FALSE);
                                                                    CheckPrepmtInfo(PurchLine);
                                                                    CheckReturnInfo(PurchLine,FALSE);

                                                                    PurchLine.RESET;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF "Agreement No." <> '' THEN
                                                                  ERROR(Text12402,
                                                                    FIELDCAPTION("Buy-from Vendor No."),
                                                                    FIELDCAPTION("Agreement No."));

                                                                GetVend("Buy-from Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                //NC OAM27 > DP
                                                                {
                                                                Vend.TESTFIELD("Gen. Bus. Posting Group");
                                                                }
                                                                //NC OAM27 < DP
                                                                "Buy-from Vendor Name" := Vend.Name;
                                                                "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                CopyBuyFromVendorAddressFieldsFromVendor(Vend);
                                                                IF NOT SkipBuyFromContact THEN
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Vend."Tax Area Code";
                                                                "Tax Liable" := Vend."Tax Liable";
                                                                "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                "VAT Registration No." := Vend."VAT Registration No.";
                                                                VALIDATE("Lead Time Calculation",Vend."Lead Time Calculation");
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(1,Vend."Responsibility Center");
                                                                VALIDATE("Sell-to Customer No.",'');
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(1,Vend."Location Code","Responsibility Center"));

                                                                IF "Buy-from Vendor No." = xRec."Pay-to Vendor No." THEN
                                                                  IF ReceivedPurchLinesExist OR ReturnShipmentExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;

                                                                "Buy-from IC Partner Code" := Vend."IC Partner Code";
                                                                "Send IC Document" := ("Buy-from IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Vend."Pay-to Vendor No." <> '' THEN
                                                                  VALIDATE("Pay-to Vendor No.",Vend."Pay-to Vendor No.")
                                                                ELSE BEGIN
                                                                  IF "Buy-from Vendor No." = "Pay-to Vendor No." THEN
                                                                    SkipPayToContact := TRUE;
                                                                  VALIDATE("Pay-to Vendor No.","Buy-from Vendor No.");
                                                                  SkipPayToContact := FALSE;
                                                                END;
                                                                "Order Address Code" := '';

                                                                VALIDATE("Order Address Code");

                                                                IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(BuyFromVendorTxt);

                                                                IF NOT SkipBuyFromContact THEN
                                                                  UpdateBuyFromCont("Buy-from Vendor No.");

                                                                IF "Empl. Purchase" THEN
                                                                  "Vendor Invoice No." := "No.";

                                                                //NC TR053 > EB
                                                                IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") THEN
                                                                  IF "Document Type" = "Document Type"::Invoice THEN
                                                                    //NC TR053.1 > DP
                                                                    {
                                                                    "Posting Description" := "Buy-from Vendor No." + ' ' + "Buy-from Vendor Name";
                                                                    }
                                                                    "Posting Description" := COPYSTR("Buy-from Vendor No." + ' ' + "Buy-from Vendor Name",1,MAXSTRLEN("Posting Description"));
                                                                    //NC TR053.1 < DP
                                                                //NC TR053 < EB
                                                              END;

                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              RUS=Код поставщика] }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              RUS=Номер] }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,PayToVendorTxt);
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");

                                                                    CheckReceiptInfo(PurchLine,TRUE);
                                                                    CheckPrepmtInfo(PurchLine);
                                                                    CheckReturnInfo(PurchLine,TRUE);

                                                                    PurchLine.RESET;
                                                                  END ELSE
                                                                    "Pay-to Vendor No." := xRec."Pay-to Vendor No.";
                                                                END;

                                                                IF "Agreement No." <> '' THEN
                                                                  ERROR(Text12402,
                                                                    FIELDCAPTION("Pay-to Vendor No."),
                                                                    FIELDCAPTION("Agreement No."));

                                                                GetVend("Pay-to Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                //NC MTF01 > PCH
                                                                IF NOT AutoCreateDocument THEN
                                                                //NC MTF01 < PCH
                                                                //NC OAM27 > DP
                                                                {
                                                                Vend.TESTFIELD("Vendor Posting Group");
                                                                }
                                                                //NC OAM27 < DP
                                                                "Pay-to Name" := Vend.Name;
                                                                "Pay-to Name 2" := Vend."Name 2";
                                                                CopyPayToVendorAddressFieldsFromVendor(Vend);
                                                                IF NOT SkipPayToContact THEN
                                                                  "Pay-to Contact" := Vend.Contact;
                                                                "Payment Terms Code" := Vend."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Vend."Payment Terms Code";

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Vend."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Vend."Payment Method Code";

                                                                "Shipment Method Code" := Vend."Shipment Method Code";
                                                                "Vendor Posting Group" := Vend."Vendor Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                  "VAT Registration No." := Vend."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                END;
                                                                "Prices Including VAT" := Vend."Prices Including VAT";
                                                                "Currency Code" := Vend."Currency Code";
                                                                "Invoice Disc. Code" := Vend."Invoice Disc. Code";
                                                                "Language Code" := Vend."Language Code";
                                                                "Purchaser Code" := Vend."Purchaser Code";
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Creditor No.",Vend."Creditor No.");

                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  VALIDATE("Prepayment %",Vend."Prepayment %");

                                                                IF "Pay-to Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist THEN
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.")
                                                                THEN
                                                                  RecreatePurchLines(PayToVendorTxt);

                                                                IF NOT SkipPayToContact THEN
                                                                  UpdatePayToCont("Pay-to Vendor No.");

                                                                "Pay-to IC Partner Code" := Vend."IC Partner Code";
                                                              END;

                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              RUS=Код получателя оплаты];
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text50        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                Vendor@1000 : Record 23;
                                                              BEGIN
                                                                VALIDATE("Pay-to Vendor No.",Vendor.GetVendorNo("Pay-to Name"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Name;
                                                              RUS=Название получателя оплаты] }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=[ENU=Pay-to Name 2;
                                                              RUS=Название 2 получателя оплаты] }
    { 7   ;   ;Pay-to Address      ;Text50        ;CaptionML=[ENU=Pay-to Address;
                                                              RUS=Адрес получателя оплаты] }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;CaptionML=[ENU=Pay-to Address 2;
                                                              RUS=Адрес 2 получателя оплаты] }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to City;
                                                              RUS=Город получателя оплаты] }
    { 10  ;   ;Pay-to Contact      ;Text50        ;OnLookup=VAR
                                                              Contact@1000 : Record 5050;
                                                            BEGIN
                                                              LookupContact("Pay-to Vendor No.","Pay-to Contact No.",Contact);
                                                              IF PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK THEN
                                                                VALIDATE("Pay-to Contact No.",Contact."No.");
                                                            END;

                                                   CaptionML=[ENU=Pay-to Contact;
                                                              RUS=Контакт получателя оплаты] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              RUS=Ваша ссылка] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=VAR
                                                                ShipToAddr@1000 : Record 222;
                                                              BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                END;

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                  SetShipToAddress(
                                                                    ShipToAddr.Name,ShipToAddr."Name 2",ShipToAddr.Address,ShipToAddr."Address 2",
                                                                    ShipToAddr.City,ShipToAddr."Post Code",ShipToAddr.County,ShipToAddr."Country/Region Code");
                                                                  "Ship-to Contact" := ShipToAddr.Contact;
                                                                  "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                  IF ShipToAddr."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Sell-to Customer No.");
                                                                  Cust.GET("Sell-to Customer No.");
                                                                  SetShipToAddress(
                                                                    Cust.Name,Cust."Name 2",Cust.Address,Cust."Address 2",
                                                                    Cust.City,Cust."Post Code",Cust.County,Cust."Country/Region Code");
                                                                  "Ship-to Contact" := Cust.Contact;
                                                                  "Shipment Method Code" := Cust."Shipment Method Code";
                                                                  IF Cust."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",Cust."Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              RUS=Код получателя] }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              RUS=Название получателя] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              RUS=Название 2 получателя] }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              RUS=Адрес получателя] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              RUS=Адрес 2 получателя] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              RUS=Город получателя] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              RUS=Контакт получателя] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Order Date;
                                                              RUS=Дата заказа] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                SkipJobCurrFactorUpdate@1000 : Boolean;
                                                              BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                CheckCorrPostingDate;

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    SkipJobCurrFactorUpdate := NOT ConfirmUpdateCurrencyFactor;
                                                                END;

                                                                IF "Posting Date" <> xRec."Posting Date" THEN
                                                                  IF DeferralHeadersExist THEN
                                                                    ConfirmUpdateDeferralDate;

                                                                IF PurchLinesExist THEN
                                                                  JobUpdatePurchLines(SkipJobCurrFactorUpdate);
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              RUS=Дата учета] }
    { 21  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Expected Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              RUS=Ожидаемая дата поставки] }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=[ENU=Posting Description;
                                                              RUS=Описание учета] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF IsCreditDocType AND NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              RUS=Код условий платежа] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              RUS=Срок оплаты] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              RUS=Скидка оплаты (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              RUS=Дата скидки оплаты] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              RUS=Код метода поставки] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Buy-from Vendor No." = "Buy-from Vendor No.")
                                                                THEN
                                                                  MessageIfPurchLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              RUS=Код склада] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              RUS=Код ярлыка измерения 1];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              RUS=Код ярлыка измерения 2];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              RUS=Учетная группа поставщика];
                                                   Editable=Yes }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND (("Currency Code" = xRec."Currency Code") OR
                                                                   GLSetup."Enable Russian Accounting")
                                                                THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    IF PurchLinesExist THEN
                                                                      IF CONFIRM(ChangeCurrencyQst,FALSE,FIELDCAPTION("Currency Code")) THEN BEGIN
                                                                        SetHideValidationDialog(TRUE);
                                                                        RecreatePurchLines(FIELDCAPTION("Currency Code"));
                                                                        SetHideValidationDialog(FALSE);
                                                                      END ELSE
                                                                        ERROR(Text018,FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=Код валюты] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Currency Factor"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              RUS=Коэффициент курса валюты];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchLine@1000 : Record 39;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Direct Unit Cost",'<>%1',0);
                                                                  PurchLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF PurchLine.FIND('-') THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text025 +
                                                                          Text027,
                                                                          FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
                                                                        TRUE);
                                                                    PurchLine.SetPurchHeader(Rec);

                                                                    IF RecalculatePrice AND "Prices Including VAT" THEN
                                                                      PurchLine.MODIFYALL(Amount,0,TRUE);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");

                                                                    PurchLine.FINDSET;
                                                                    REPEAT
                                                                      PurchLine.TESTFIELD("Quantity Invoiced",0);
                                                                      PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        PurchLine."VAT Difference" := 0;
                                                                        PurchLine.UpdateAmounts;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" * (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" * (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" / (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" / (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      PurchLine.MODIFY;
                                                                    UNTIL PurchLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              RUS=Цены с учетом НДС] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              RUS=Код скидки по счету] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              RUS=Код языка] }
    { 43  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text042,FIELDCAPTION("Purchaser Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Purchaser Code;
                                                              RUS=Код менеджера] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              RUS=Класс заказа] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              RUS=Комментарий];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              RUS=Число напечатанных];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              RUS=На удержании] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              RUS=Примен. к док. - тип];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Платеж,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                              END;

                                                   OnLookup=VAR
                                                              GenJnlLine@1001 : Record 81;
                                                              GenJnlApply@1000 : Codeunit 225;
                                                              ApplyVendEntries@1002 : Page 233;
                                                            BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntry.SETRANGE(Open,TRUE);
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF VendLedgEntry.FINDFIRST THEN;
                                                                VendLedgEntry.SETRANGE("Document Type");
                                                                VendLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF VendLedgEntry.FINDFIRST THEN;
                                                                  VendLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF VendLedgEntry.FINDFIRST THEN;
                                                                    VendLedgEntry.SETRANGE(Positive);
                                                                  END;
                                                              ApplyVendEntries.SetPurch(Rec,VendLedgEntry,PurchHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                              ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                              ApplyVendEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",VendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
                                                                "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                              END;
                                                              CLEAR(ApplyVendEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              RUS=Примен. к док. - номер] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              RUS=Номер баланс. счета] }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Document Type=FIELD(Document Type),
                                                                                            Document No.=FIELD(No.),
                                                                                            Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=[ENU=Recalculate Invoice Disc.;
                                                              RUS=Перерассчитать скидку по счету];
                                                   Editable=No }
    { 57  ;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              RUS=Получить] }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              RUS=Счет] }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=[ENU=Print Posted Documents;
                                                              RUS=Печать разнесенных документов] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              RUS=Сумма с учетом НДС];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Receiving No.       ;Code20        ;CaptionML=[ENU=Receiving No.;
                                                              RUS=Номер приемки] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              RUS=Учетный номер] }
    { 64  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=[ENU=Last Receiving No.;
                                                              RUS=Номер последней приемки];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              RUS=Посл. учетный номер];
                                                   Editable=No }
    { 66  ;   ;Vendor Order No.    ;Code35        ;CaptionML=[ENU=Vendor Order No.;
                                                              RUS=Номер заказа поставщика] }
    { 67  ;   ;Vendor Shipment No. ;Code35        ;CaptionML=[ENU=Vendor Shipment No.;
                                                              RUS=Номер расх. накл. поставщика] }
    { 68  ;   ;Vendor Invoice No.  ;Code35        ;CaptionML=[ENU=Vendor Invoice No.;
                                                              RUS=Номер счета поставщика] }
    { 69  ;   ;Vendor Cr. Memo No. ;Code35        ;CaptionML=[ENU=Vendor Cr. Memo No.;
                                                              RUS=Номер кредит-ноты поставщика] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              RUS=ИНН] }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));

                                                                  PurchLine.SETRANGE("Sales Order Line No.");
                                                                  PurchLine.SETFILTER("Special Order Sales Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                END;

                                                                IF "Sell-to Customer No." = '' THEN
                                                                  VALIDATE("Location Code",UserSetupMgt.GetLocation(1,'',"Responsibility Center"))
                                                                ELSE
                                                                  VALIDATE("Ship-to Code",'');
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              RUS=Код клиента] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              RUS=Код причины] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group")
                                                                THEN BEGIN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreatePurchLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              RUS=Общая бизнес-группа] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Type"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              RUS=Тип транзакции] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transport Method"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              RUS=Метод перевозки] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              RUS=Код страны/региона уплаты НДС] }
    { 79  ;   ;Buy-from Vendor Name;Text50        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                Vendor@1000 : Record 23;
                                                              BEGIN
                                                                VALIDATE("Buy-from Vendor No.",Vendor.GetVendorNo("Buy-from Vendor Name"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Vendor Name;
                                                              RUS=Название поставщика] }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=[ENU=Buy-from Vendor Name 2;
                                                              RUS=Название 2 поставщика] }
    { 81  ;   ;Buy-from Address    ;Text50        ;OnValidate=BEGIN
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to Address"));
                                                              END;

                                                   CaptionML=[ENU=Buy-from Address;
                                                              RUS=Адрес поставщика] }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;OnValidate=BEGIN
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to Address 2"));
                                                              END;

                                                   CaptionML=[ENU=Buy-from Address 2;
                                                              RUS=Адрес 2 поставщика] }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to City"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from City;
                                                              RUS=Город поставщика] }
    { 84  ;   ;Buy-from Contact    ;Text50        ;OnLookup=VAR
                                                              Contact@1001 : Record 5050;
                                                            BEGIN
                                                              LookupContact("Buy-from Vendor No.","Buy-from Contact No.",Contact);
                                                              IF PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK THEN
                                                                VALIDATE("Buy-from Contact No.",Contact."No.");
                                                            END;

                                                   CaptionML=[ENU=Buy-from Contact;
                                                              RUS=Контакт поставщика] }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Post Code;
                                                              RUS=Индекс получателя оплаты] }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=[ENU=Pay-to County;
                                                              RUS=Район получателя оплаты] }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Pay-to Country/Region Code;
                                                              RUS=Код страны/региона получателя оплаты] }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to Post Code"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Post Code;
                                                              RUS=Индекс поставщика] }
    { 89  ;   ;Buy-from County     ;Text30        ;OnValidate=BEGIN
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to County"));
                                                              END;

                                                   CaptionML=[ENU=Buy-from County;
                                                              RUS=Район поставщика] }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to Country/Region Code"));
                                                              END;

                                                   CaptionML=[ENU=Buy-from Country/Region Code;
                                                              RUS=Код страны/региона поставщика] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              RUS=Индекс получателя] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              RUS=Район получателя] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              RUS=Код страны/региона получателя] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              RUS=Тип баланс. счета];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    RUS=Счет ГК,Банковский счет];
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=BEGIN
                                                                IF "Order Address Code" <> '' THEN BEGIN
                                                                  OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
                                                                  "Buy-from Vendor Name" := OrderAddr.Name;
                                                                  "Buy-from Vendor Name 2" := OrderAddr."Name 2";
                                                                  "Buy-from Address" := OrderAddr.Address;
                                                                  "Buy-from Address 2" := OrderAddr."Address 2";
                                                                  "Buy-from City" := OrderAddr.City;
                                                                  "Buy-from Contact" := OrderAddr.Contact;
                                                                  "Buy-from Post Code" := OrderAddr."Post Code";
                                                                  "Buy-from County" := OrderAddr.County;
                                                                  "Buy-from Country/Region Code" := OrderAddr."Country/Region Code";

                                                                  IF IsCreditDocType THEN BEGIN
                                                                    SetShipToAddress(
                                                                      OrderAddr.Name,OrderAddr."Name 2",OrderAddr.Address,OrderAddr."Address 2",
                                                                      OrderAddr.City,OrderAddr."Post Code",OrderAddr.County,OrderAddr."Country/Region Code");
                                                                    "Ship-to Contact" := OrderAddr.Contact;
                                                                  END
                                                                END ELSE BEGIN
                                                                  GetVend("Buy-from Vendor No.");
                                                                  "Buy-from Vendor Name" := Vend.Name;
                                                                  "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                  CopyPayToVendorAddressFieldsFromVendor(Vend);

                                                                  IF IsCreditDocType THEN BEGIN
                                                                    "Ship-to Name" := Vend.Name;
                                                                    "Ship-to Name 2" := Vend."Name 2";
                                                                    CopyShipToVendorAddressFieldsFromVendor(Vend);
                                                                    "Ship-to Contact" := Vend.Contact;
                                                                    "Shipment Method Code" := Vend."Shipment Method Code";
                                                                    IF Vend."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",Vend."Location Code");
                                                                  END
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Order Address Code;
                                                              RUS=Код адреса заказа] }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Entry Point"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Entry Point;
                                                              RUS=Пункт ввоза] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              RUS=Корректировка] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              RUS=Дата документа] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION(Area),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              RUS=Область] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Specification"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              RUS=Спецификация транзакции] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              RUS=Код способа оплаты] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              RUS=Серия номеров];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              RUS=Учетная серия номеров] }
    { 109 ;   ;Receiving No. Series;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Receiving No. Series;
                                                              RUS=Серия номеров приемки] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              RUS=Код налоговой области] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              RUS=Облагается налогом] }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=VAR
                                                                l_cuGenJnlCheckLine@1101495000 : Codeunit 11;
                                                                l_recVATBusPostGr@1101495001 : Record 323;
                                                                l_Text001@1101495002 : TextConst 'ENU="For %1 = %2 posting is not allow.";RUS="Для %1 = %2 не разрешен."';
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                //TDRANCS-875 >
                                                                IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Posting Date",0,"VAT Bus. Posting Group")
                                                                  THEN ERROR(l_Text001,FIELDCAPTION("VAT Bus. Posting Group"),
                                                                             "VAT Bus. Posting Group","Posting Date",l_recVATBusPostGr.TABLECAPTION);
                                                                //TDRANCS-875 <
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              RUS=НДС бизнес-группа] }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempVendLedgEntry@1000 : TEMPORARY Record 25;
                                                                VendEntrySetApplID@1001 : Codeunit 111;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
                                                                  VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  VendLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
                                                                  VendLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              RUS=Код применения] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed :=
                                                                      CONFIRM(
                                                                        Text007 +
                                                                        Text008,FALSE,
                                                                        FIELDCAPTION("VAT Base Discount %"),
                                                                        GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                        GLSetup.TABLECAPTION);
                                                                  IF NOT Confirmed THEN
                                                                    "VAT Base Discount %" := xRec."VAT Base Discount %";
                                                                END;

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                PurchLine.SETRANGE("Document Type","Document Type");
                                                                PurchLine.SETRANGE("Document No.","No.");
                                                                PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
                                                                PurchLine.SETFILTER(Quantity,'<>0');
                                                                PurchLine.LOCKTABLE;
                                                                IF PurchLine.FINDSET THEN BEGIN
                                                                  MODIFY;
                                                                  REPEAT
                                                                    PurchLine.UpdateAmounts;
                                                                    PurchLine.MODIFY;
                                                                  UNTIL PurchLine.NEXT = 0;
                                                                END;
                                                                PurchLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              RUS=База НДС - скидка (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    RUS=Открыто,Выпущено,Ожидает утверждения,Ожидает предоплаты];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              RUS=Расчет скидки по счету];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    RUS=Нет,%,Сумма];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              RUS=Значение скидки по счету];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  TESTFIELD("Buy-from IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              RUS=Отправить документ МФ] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              RUS=Статус МФ];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    RUS=Создано,В ожидании,Отправлено];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Buy-from IC Partner Code;Code20    ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Buy-from IC Partner Code;
                                                              RUS=Код МФ-партнера - поставщика];
                                                   Editable=No }
    { 126 ;   ;Pay-to IC Partner Code;Code20      ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Pay-to IC Partner Code;
                                                              RUS=Код МФ-партнера - покупателя];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              RUS=Направление МФ];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    RUS=Исходящие,Входящие];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              RUS=Номер предоплаты] }
    { 131 ;   ;Last Prepayment No. ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              RUS=Номер посл. предоплаты] }
    { 132 ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              RUS=Номер кредит-ноты предоплаты] }
    { 133 ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Purch. Cr. Memo Hdr.";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              RUS=Номер кредит-ноты последн. предопл.] }
    { 134 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              RUS=Предоплата (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              RUS=Серия номеров предоплаты] }
    { 136 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              RUS=Сжать предоплату] }
    { 137 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              RUS=Срок предоплаты] }
    { 138 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              RUS=Серия номеров кредит-нот предоплаты] }
    { 139 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              RUS=Описание учета предоплаты] }
    { 142 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              RUS=Дата скидки предоплаты] }
    { 143 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF IsCreditDocType AND NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              RUS=Код условий предоплаты] }
    { 144 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              RUS=Скидка предоплаты (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              RUS=Номер предложения];
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=[ENU=Job Queue Status;
                                                              RUS=Статус очереди работ];
                                                   OptionCaptionML=[ENU=" ,Scheduled for Posting,Error,Posting";
                                                                    RUS=" ,Запланировано для разноски,Ошибка,Разноска"];
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=[ENU=Job Queue Entry ID;
                                                              RUS=Код операции очереди работ];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;
                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetPurchDoc(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              RUS=Номер операции входящего документа] }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=[ENU=Creditor No.;
                                                              RUS=Номер кредитора];
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=BEGIN
                                                                IF "Payment Reference" <> '' THEN
                                                                  TESTFIELD("Creditor No.");
                                                              END;

                                                   CaptionML=[ENU=Payment Reference;
                                                              RUS=Ссылка на оплату];
                                                   Numeric=Yes }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              RUS=Код набора измерений];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                                 Document Type=FIELD(Document Type)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              RUS=Сумма скидки по счету];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Purchase Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              RUS=Кол-во архивных версий];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              RUS=Вхождения номера документа] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              RUS=Код кампании] }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1000 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Buy-from Contact No." <> xRec."Buy-from Contact No.") AND
                                                                   (xRec."Buy-from Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Buy-from Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromContact("Buy-from Contact No.","Buy-from Vendor No.",FIELDCAPTION("Buy-from Contact No.")) THEN
                                                                      EXIT
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Buy-from Vendor No." <> '') AND ("Buy-from Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Buy-from Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Buy-from Vendor No.");
                                                                END;

                                                                UpdateBuyFromVend("Buy-from Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Buy-from Contact No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Buy-from Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Buy-from Contact No.;
                                                              RUS=Код контакта поставщика] }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Pay-to Contact No." <> xRec."Pay-to Contact No.") AND
                                                                   (xRec."Pay-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Pay-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromContact("Pay-to Contact No.","Pay-to Vendor No.",FIELDCAPTION("Pay-to Contact No.")) THEN
                                                                      EXIT
                                                                  END ELSE BEGIN
                                                                    "Pay-to Contact No." := xRec."Pay-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Pay-to Vendor No." <> '') AND ("Pay-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Pay-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Pay-to Vendor No.");
                                                                END;

                                                                UpdatePayToVend("Pay-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusinessRelation@1001 : Record 5054;
                                                            BEGIN
                                                              IF "Pay-to Vendor No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Pay-to Contact No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Pay-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Pay-to Contact No.;
                                                              RUS=Код контакта получателя оплаты] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(1,'',"Responsibility Center");
                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreatePurchLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              RUS=Центр ответственности] }
    { 5752;   ;Completely Received ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Purchase Line"."Completely Received" WHERE (Document Type=FIELD(Document Type),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Type=FILTER(<>' '),
                                                                                                                Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Received;
                                                              RUS=Получено полностью];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Posting from Whse. Ref.;
                                                              RUS=Кол-во обработок склада] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              RUS=Фильтр по складу] }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text034,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Requested Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              RUS=Требуемая дата приемки] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> xRec."Promised Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Promised Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              RUS=Обещанная дата поставки] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Lead Time Calculation" <> xRec."Lead Time Calculation" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Lead Time Calculation"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              RUS=Расчет времени подготовки заказа] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Inbound Whse. Handling Time" <> xRec."Inbound Whse. Handling Time" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Inbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              RUS=Время вход. обработки на складе] }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              RUS=Фильтр по дате] }
    { 5800;   ;Vendor Authorization No.;Code35    ;CaptionML=[ENU=Vendor Authorization No.;
                                                              RUS=Код авторизации поставщика] }
    { 5801;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              RUS=Номер возвр. расх. накладной] }
    { 5802;   ;Return Shipment No. Series;Code10  ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Shipment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series");
                                                                END;
                                                                TESTFIELD("Return Shipment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series") THEN
                                                                  VALIDATE("Return Shipment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Shipment No. Series;
                                                              RUS=Серия номеров возвр. расх. накладных] }
    { 5803;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              RUS=Отгрузить] }
    { 5804;   ;Last Return Shipment No.;Code20    ;TableRelation="Return Shipment Header";
                                                   CaptionML=[ENU=Last Return Shipment No.;
                                                              RUS=Номер последней возвр. расх. накладной];
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(1,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text049,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              RUS=Код исполнителя] }
    { 9001;   ;Pending Approvals   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Table ID=CONST(38),
                                                                                             Document Type=FIELD(Document Type),
                                                                                             Document No.=FIELD(No.),
                                                                                             Status=FILTER(Open|Created)));
                                                   CaptionML=[ENU=Pending Approvals;
                                                              RUS=Ожидают утверждения] }
    { 12400;  ;Empl. Purchase      ;Boolean       ;CaptionML=[ENU=Empl. Purchase;
                                                              RUS=Подотчет] }
    { 12401;  ;Advance Purpose     ;Text30        ;OnValidate=BEGIN
                                                                "Posting Description" := "Advance Purpose" +' ('+ "Pay-to Vendor No."+' )';
                                                              END;

                                                   CaptionML=[ENU=Advance Purpose;
                                                              RUS=Назначение аванса] }
    { 12402;  ;Remaining/Overdraft Doc. No.;Code20;OnValidate=BEGIN
                                                                IF "Remaining/Overdraft Doc. No." = '' THEN
                                                                  EXIT;
                                                                VendLedgEntry.RESET;
                                                                VendLedgEntry.SETCURRENTKEY("Vendor No.");
                                                                VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                VendLedgEntry.SETRANGE("Document No.","Remaining/Overdraft Doc. No.");
                                                                IF NOT VendLedgEntry.FIND('-') THEN
                                                                  ERROR(Text12400,"Remaining/Overdraft Doc. No.","Pay-to Vendor No.");
                                                              END;

                                                   OnLookup=VAR
                                                              VendLedgEntries@1000000000 : Page 29;
                                                            BEGIN
                                                              VendLedgEntry.RESET;
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntries.SETTABLEVIEW(VendLedgEntry);
                                                              VendLedgEntries.LOOKUPMODE(TRUE);
                                                              IF VendLedgEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                VendLedgEntries.GETRECORD(VendLedgEntry);
                                                                "Remaining/Overdraft Doc. No." := VendLedgEntry."Document No.";
                                                              END;
                                                              CLEAR(VendLedgEntries);
                                                            END;

                                                   CaptionML=[ENU=Remaining/Overdraft Doc. No.;
                                                              RUS=Номер документа остатка/перерасхода] }
    { 12403;  ;Prepmt. Diff. Appln. Entry No.;Integer;
                                                   CaptionML=[ENU=Prepmt. Diff. Appln. Entry No.;
                                                              RUS=Ном. операции примен. для предоплаты разн.];
                                                   Editable=No }
    { 12404;  ;Prepmt. Diff.       ;Boolean       ;CaptionML=[ENU=Prepmt. Diff.;
                                                              RUS=Разница по предоплате];
                                                   Editable=No }
    { 12437;  ;No. of Documents    ;Integer       ;CaptionML=[ENU=No. of Documents;
                                                              RUS=Кол-во документов] }
    { 12438;  ;No. of Pages        ;Integer       ;CaptionML=[ENU=No. of Pages;
                                                              RUS=Кол-во страниц] }
    { 12440;  ;Corrective Document ;Boolean       ;OnValidate=BEGIN
                                                                IF ("Document Type" <> "Document Type"::Invoice) AND
                                                                   ("Document Type" <> "Document Type"::"Credit Memo")
                                                                THEN
                                                                  FIELDERROR("Document Type");
                                                              END;

                                                   CaptionML=[ENU=Corrective Document;
                                                              RUS=Корректирующий документ] }
    { 12441;  ;Corrected Doc. Type ;Option        ;OnValidate=BEGIN
                                                                IF "Corrected Doc. Type" <> xRec."Corrected Doc. Type" THEN BEGIN
                                                                  PurchLine.RESET;
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(Text018,FIELDCAPTION("Corrected Doc. Type"));
                                                                  VALIDATE("Corrected Doc. No.",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Corrected Doc. Type;
                                                              RUS=Тип скорректированного док.];
                                                   OptionCaptionML=[ENU=" ,Invoice,Credit Memo";
                                                                    RUS=" ,Счет,Кредит-нота"];
                                                   OptionString=[ ,Invoice,Credit Memo] }
    { 12442;  ;Corrected Doc. No.  ;Code20        ;TableRelation=IF (Corrected Doc. Type=CONST(Invoice)) "Purch. Inv. Header" WHERE (Buy-from Vendor No.=FIELD(Buy-from Vendor No.))
                                                                 ELSE IF (Corrected Doc. Type=CONST(Credit Memo)) "Purch. Cr. Memo Hdr." WHERE (Buy-from Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                PurchInvHeader@1210000 : Record 122;
                                                                PurchCrMemoHeader@1210001 : Record 124;
                                                              BEGIN
                                                                IF ("Corrected Doc. No." <> xRec."Corrected Doc. No.") THEN BEGIN
                                                                  PurchLine.RESET;
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(Text018,FIELDCAPTION("Corrected Doc. No."));
                                                                  IF "Corrected Doc. No." = '' THEN BEGIN
                                                                    "Original Doc. Type" := "Original Doc. Type"::" ";
                                                                    "Original Doc. No." := '';
                                                                  END ELSE BEGIN
                                                                    CASE "Corrected Doc. Type" OF
                                                                      "Corrected Doc. Type"::Invoice:
                                                                        BEGIN
                                                                          PurchInvHeader.GET("Corrected Doc. No.");
                                                                          TESTFIELD("Currency Code",PurchInvHeader."Currency Code");
                                                                          TESTFIELD("Prices Including VAT",PurchInvHeader."Prices Including VAT");
                                                                          TESTFIELD("Agreement No.",PurchInvHeader."Agreement No.");
                                                                          IF ("Posting Date" <> 0D) AND ("Posting Date" < PurchInvHeader."Posting Date") THEN
                                                                            ERROR(Text12405,"Posting Date",PurchInvHeader."Posting Date");
                                                                          IF PurchInvHeader."Corrective Document" THEN BEGIN
                                                                            "Original Doc. Type" := PurchInvHeader."Original Doc. Type";
                                                                            "Original Doc. No." := PurchInvHeader."Original Doc. No.";
                                                                          END ELSE BEGIN
                                                                            "Original Doc. Type" := "Original Doc. Type"::Invoice;
                                                                            "Original Doc. No." := "Corrected Doc. No.";
                                                                          END;
                                                                        END;
                                                                      "Corrected Doc. Type"::"Credit Memo":
                                                                        BEGIN
                                                                          PurchCrMemoHeader.GET("Corrected Doc. No.");
                                                                          TESTFIELD("Currency Code",PurchCrMemoHeader."Currency Code");
                                                                          TESTFIELD("Prices Including VAT",PurchCrMemoHeader."Prices Including VAT");
                                                                          TESTFIELD("Agreement No.",PurchCrMemoHeader."Agreement No.");
                                                                          IF ("Posting Date" <> 0D) AND ("Posting Date" < PurchCrMemoHeader."Posting Date") THEN
                                                                            ERROR(Text12405,"Posting Date",PurchCrMemoHeader."Posting Date");
                                                                          IF PurchCrMemoHeader."Corrective Document" THEN BEGIN
                                                                            "Original Doc. Type" := PurchCrMemoHeader."Original Doc. Type";
                                                                            "Original Doc. No." := PurchCrMemoHeader."Original Doc. No.";
                                                                          END ELSE BEGIN
                                                                            "Original Doc. Type" := "Original Doc. Type"::"Credit Memo";
                                                                            "Original Doc. No." := "Corrected Doc. No.";
                                                                          END;
                                                                        END;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Corrected Doc. No.;
                                                              RUS=Номер скорректированного док.] }
    { 12443;  ;Original Doc. Type  ;Option        ;CaptionML=[ENU=Original Doc. Type;
                                                              RUS=Тип исходного док.];
                                                   OptionCaptionML=[ENU=" ,Invoice,Credit Memo";
                                                                    RUS=" ,Счет,Кредит-нота"];
                                                   OptionString=[ ,Invoice,Credit Memo] }
    { 12444;  ;Original Doc. No.   ;Code20        ;CaptionML=[ENU=Original Doc. No.;
                                                              RUS=Номер исходного док.] }
    { 12445;  ;VAT Entry Type      ;Code15        ;OnValidate=VAR
                                                                VATEntryType@1210000 : Record 14949;
                                                              BEGIN
                                                                VATEntryType.ValidateSetOfVATEntryCodes("VAT Entry Type");
                                                              END;

                                                   OnLookup=VAR
                                                              VATEntryType@1210000 : Record 14949;
                                                            BEGIN
                                                              VATEntryType.LookupSetOfVATEntryCodes("VAT Entry Type");
                                                            END;

                                                   CaptionML=[ENU=VAT Entry Type;
                                                              RUS=Тип операции НДС] }
    { 12446;  ;Corrective Doc. Type;Option        ;OnValidate=BEGIN
                                                                IF "Corrective Doc. Type" <> "Corrective Doc. Type"::" " THEN
                                                                  CheckCorrectiveDocument;
                                                              END;

                                                   CaptionML=[ENU=Corrective Doc. Type;
                                                              RUS=Тип корректирующего док.];
                                                   OptionCaptionML=[ENU=" ,Correction,Revision";
                                                                    RUS=" ,Коррекция,Редакция"];
                                                   OptionString=[ ,Correction,Revision] }
    { 12447;  ;Revision No.        ;Code20        ;OnValidate=BEGIN
                                                                IF "Revision No." <> '' THEN
                                                                  CheckCorrectiveDocument;
                                                              END;

                                                   CaptionML=[ENU=Revision No.;
                                                              RUS=Номер редакции] }
    { 12470;  ;Vendor Receipts No. ;Code20        ;OnValidate=BEGIN
                                                                "Vendor Shipment No." := "Vendor Receipts No.";
                                                              END;

                                                   CaptionML=[ENU=Vendor Receipts No.;
                                                              RUS=Номер накладной поставщика] }
    { 12471;  ;Vendor Receipts Date;Date          ;CaptionML=[ENU=Vendor Receipts Date;
                                                              RUS=Дата накладной поставщика] }
    { 12472;  ;Vendor VAT Invoice Date;Date       ;OnValidate=BEGIN
                                                                IF "Additional VAT Ledger Sheet" THEN
                                                                  EXIT;

                                                                IF ("Vendor VAT Invoice Rcvd Date" <> 0D) AND ("Vendor VAT Invoice Date" <> 0D) AND
                                                                   ("Vendor VAT Invoice Rcvd Date" < "Vendor VAT Invoice Date") THEN
                                                                  ERROR(Text12401,FIELDCAPTION("Vendor VAT Invoice Rcvd Date"),FIELDCAPTION("Vendor VAT Invoice Date"));
                                                              END;

                                                   CaptionML=[ENU=Vendor VAT Invoice Date;
                                                              RUS=Дата счета-фактуры поставщика] }
    { 12473;  ;Vendor VAT Invoice Rcvd Date;Date  ;OnValidate=BEGIN
                                                                IF "Additional VAT Ledger Sheet" THEN
                                                                  EXIT;

                                                                IF ("Vendor VAT Invoice Rcvd Date" <> 0D) AND ("Vendor VAT Invoice Date" <> 0D) AND
                                                                   ("Vendor VAT Invoice Rcvd Date" < "Vendor VAT Invoice Date") THEN
                                                                  ERROR(Text12401,FIELDCAPTION("Vendor VAT Invoice Rcvd Date"),FIELDCAPTION("Vendor VAT Invoice Date"));
                                                              END;

                                                   CaptionML=[ENU=Vendor VAT Invoice Rcvd Date;
                                                              RUS=Дата получения счета-фактуры поставщика] }
    { 12474;  ;Vendor VAT Invoice No.;Code30      ;CaptionML=[ENU=Vendor VAT Invoice No.;
                                                              RUS=Номер счета-фактуры поставщика] }
    { 12480;  ;Outstanding Amount (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount (LCY)" WHERE (Document Type=FIELD(Document Type),
                                                                                                                     Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Outstanding Amount (LCY);
                                                              RUS=Баланс Сумма (ВУЧ)];
                                                   Description=OAM22,NOS-26;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,38,12480' }
    { 12485;  ;Orig. Invoice No.   ;Code20        ;CaptionML=[ENU=Orig. Invoice No.;
                                                              RUS=Номер исходного счета];
                                                   Editable=No }
    { 12486;  ;Include In Sales VAT Ledger;Boolean;OnValidate=BEGIN
                                                                TESTFIELD("Additional VAT Ledger Sheet", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Include In Sales VAT Ledger;
                                                              RUS=Включить в НДС книгу продаж] }
    { 12490;  ;Agreement No.       ;Code20        ;TableRelation="Vendor Agreement".No. WHERE (Vendor No.=FIELD(Pay-to Vendor No.),
                                                                                               Active=CONST(Yes));
                                                   OnValidate=VAR
                                                                OldDimSetID@1210000 : Integer;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF (xRec."Agreement No." <> "Agreement No.") THEN BEGIN
                                                                  IF ("Agreement No." <> '') THEN BEGIN
                                                                    CheckCorrAgreementNo;
                                                                    IF HideValidationDialog OR (xRec."Agreement No." = '') THEN
                                                                      Confirmed := TRUE
                                                                    ELSE
                                                                      Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Agreement No."));
                                                                    IF Confirmed THEN BEGIN
                                                                      PurchLine.SETRANGE("Document Type","Document Type");
                                                                      PurchLine.SETRANGE("Document No.","No.");
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.SETFILTER("Quantity Received",'<>0')
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                          PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                          PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                        END;
                                                                      IF PurchLine.FINDFIRST THEN
                                                                        IF "Document Type" = "Document Type"::Order THEN
                                                                          PurchLine.TESTFIELD("Quantity Received",0)
                                                                        ELSE
                                                                          PurchLine.TESTFIELD("Receipt No.",'');

                                                                      PurchLine.SETRANGE("Receipt No.");
                                                                      PurchLine.SETRANGE("Quantity Received");
                                                                      PurchLine.SETRANGE("Buy-from Vendor No.");

                                                                      IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                        PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                        IF PurchLine.FIND('-') THEN
                                                                          PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                        PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                      END;

                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                          PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                          PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                        END;
                                                                      IF PurchLine.FINDFIRST THEN
                                                                        IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                          PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                        ELSE
                                                                          PurchLine.TESTFIELD("Return Shipment No.",'');
                                                                      PurchLine.RESET;

                                                                      VendAgr.GET("Pay-to Vendor No.","Agreement No.");
                                                                      VendAgr.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                      VendAgr.TESTFIELD("Gen. Bus. Posting Group");
                                                                      IF "Posting Date" <> 0D THEN BEGIN
                                                                        IF VendAgr."Starting Date" > "Posting Date" THEN
                                                                          ERROR(Text12404,
                                                                            VendAgr.FIELDCAPTION("Starting Date"),
                                                                            FIELDCAPTION("Posting Date"));
                                                                        //NC OAM32 > AIG
                                                                        {
                                                                        IF VendAgr."Expire Date" < "Posting Date" THEN
                                                                        }
                                                                        IF (VendAgr."Expire Date" < "Posting Date") AND (VendAgr."Expire Date" = 0D) THEN
                                                                        //NC OAM32 < AIG
                                                                          ERROR(Text12403,
                                                                            VendAgr.FIELDCAPTION("Expire Date"),
                                                                            FIELDCAPTION("Posting Date"));
                                                                      END ELSE BEGIN
                                                                        IF VendAgr."Starting Date" > "Document Date" THEN
                                                                          ERROR(Text12404,
                                                                            VendAgr.FIELDCAPTION("Starting Date"),
                                                                            FIELDCAPTION("Document Date"));
                                                                        IF VendAgr."Expire Date" < "Document Date" THEN
                                                                          ERROR(Text12403,
                                                                            VendAgr.FIELDCAPTION("Expire Date"),
                                                                            FIELDCAPTION("Document Date"));
                                                                      END;

                                                                      IF "Gen. Bus. Posting Group" <> VendAgr."Gen. Bus. Posting Group" THEN
                                                                        VALIDATE("Gen. Bus. Posting Group",VendAgr."Gen. Bus. Posting Group");
                                                                      IF "VAT Bus. Posting Group" <> VendAgr."VAT Bus. Posting Group" THEN
                                                                        VALIDATE("VAT Bus. Posting Group",VendAgr."VAT Bus. Posting Group");
                                                                      IF "Vendor Posting Group" <> VendAgr."Vendor Posting Group" THEN
                                                                        VALIDATE("Vendor Posting Group",VendAgr."Vendor Posting Group");

                                                                      IF "Responsibility Center" <> VendAgr."Responsibility Center" THEN
                                                                        VALIDATE("Responsibility Center",UserSetupMgt.GetRespCenter(1,VendAgr."Responsibility Center"));
                                                                      IF "Location Code" <> VendAgr."Location Code" THEN
                                                                        VALIDATE("Location Code",UserSetupMgt.GetLocation(1,VendAgr."Location Code","Responsibility Center"));

                                                                      IF "Currency Code" <> VendAgr."Currency Code" THEN
                                                                        VALIDATE("Currency Code",VendAgr."Currency Code");
                                                                      IF "Language Code" <> VendAgr."Language Code" THEN
                                                                        VALIDATE("Language Code",VendAgr."Language Code");
                                                                      IF "Payment Terms Code" <> VendAgr."Payment Terms Code" THEN
                                                                        VALIDATE("Payment Terms Code",VendAgr."Payment Terms Code");
                                                                      IF "Purchaser Code" <> VendAgr."Purchaser Code" THEN
                                                                        VALIDATE("Purchaser Code",VendAgr."Purchaser Code");
                                                                      IF "Payment Method Code" <> VendAgr."Payment Method Code" THEN
                                                                        VALIDATE("Payment Method Code",VendAgr."Payment Method Code");
                                                                      IF "Prices Including VAT" <> VendAgr."Prices Including VAT" THEN
                                                                        VALIDATE("Prices Including VAT",VendAgr."Prices Including VAT");
                                                                      VALIDATE("External Agreement No.",VendAgr."External Agreement No.");

                                                                      IF (xRec."Currency Code" <> "Currency Code") OR
                                                                         (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                         (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                      THEN
                                                                        RecreatePurchLines(FIELDCAPTION("Agreement No."));

                                                                      OldDimSetID := "Dimension Set ID";
                                                                      //NC OAM31 > PCH
                                                                      {
                                                                      "Dimension Set ID" :=
                                                                        VendAgr.GetDefaultDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                      }
                                                                      //NC NOS-26 > SPA
                                                                      "Dimension Set ID" :=
                                                                        VendAgr.GetDefaultAdvDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                      //NC NOS-26 < SPA
                                                                      //NC OAM31 < PCH
                                                                      UpdateAllLineDim("Dimension Set ID",OldDimSetID);

                                                                      UpdatePurchLines(FIELDCAPTION("Agreement No."),CurrFieldNo <> 0);
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    HideValidationDialog := TRUE;
                                                                    VALIDATE("Pay-to Vendor No.");
                                                                  END;
                                                                END ELSE
                                                                  "Agreement No." := xRec."Agreement No.";
                                                              END;

                                                   CaptionML=[ENU=Agreement No.;
                                                              RUS=Номер договора] }
    { 12491;  ;External Agreement No.;Text30      ;CaptionML=[ENU=External Agreement No.;
                                                              RUS=Номер внешнего договора] }
    { 12498;  ;Additional VAT Ledger Sheet;Boolean;OnValidate=BEGIN
                                                                TESTFIELD("Include In Sales VAT Ledger", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Additional VAT Ledger Sheet;
                                                              RUS=Дополнительный лист книги НДС] }
    { 12499;  ;Corrected Document Date;Date       ;CaptionML=[ENU=Corrected Document Date;
                                                              RUS=Дата скорректированного документа] }
    { 50000;  ;Preview             ;Boolean       ;CaptionML=[ENU=Post Preview;
                                                              RUS=Учет Предпросмотр] }
    { 50001;  ;Buffer Entry No.    ;Integer       ;TableRelation="Cons. Data Buffer"."Entry No." WHERE (Cons. Source Code=FIELD(Cons. Source Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buffer Entry No.;
                                                              RUS=Буфер Операция Но.];
                                                   Description=NC MTF01 PCH }
    { 50002;  ;Cons. Source Code   ;Code20        ;TableRelation="Consolidation Source";
                                                   CaptionML=[ENU=Cons. Source Code;
                                                              RUS=Источник Консолидации];
                                                   Description=NC MTF01 PCH }
    { 50006;  ;Business Unit Code  ;Code20        ;TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Code;
                                                              RUS=Код Филиала];
                                                   Description=NC MTF01 PCH }
    { 50122;  ;Transaction Type in Gen. Jrnl.;Option;
                                                   CaptionML=[ENU=Transaction Type in Gen. Jrnl.;
                                                              RUS=Тип Транзакции для Фин. Журнала];
                                                   OptionCaptionML=[ENU=Manual,Automatic;
                                                                    RUS=Ручная,Автоматическая];
                                                   OptionString=Manual,Automatic;
                                                   Description=NC MTF01 PCH }
    { 50123;  ;Not Consolidate     ;Boolean       ;CaptionML=[ENU=Not Consolidate;
                                                              RUS=Не Консолидировать];
                                                   Description=NC MTF01 PCH }
    { 54990;  ;External System ID  ;Code2         ;TableRelation="External System";
                                                   CaptionML=[ENU=External System ID;
                                                              RUS=Внешняя Система ID];
                                                   Description=NC MTF01 PCH }
    { 55000;  ;Export Cons. Source Code;Code20    ;TableRelation="Consolidation Source";
                                                   CaptionML=[ENU=Consolidation Source Code;
                                                              RUS=Код Выгрузки];
                                                   Description=NC MTF01 PCH }
    { 55001;  ;Source Entry No.    ;Integer       ;CaptionML=[ENU=Source Entry No.;
                                                              RUS=Источник Операция Но.];
                                                   Description=NC MTF01 PCH }
    { 55003;  ;Register No.        ;Integer       ;TableRelation="Consolidation Register".No.;
                                                   CaptionML=[ENU=Register No.;
                                                              RUS=Регистр Но.];
                                                   Description=NC MTF01 PCH }
    { 55005;  ;Export Register No. ;Integer       ;TableRelation="Consolidation Register".No.;
                                                   CaptionML=[ENU=Export Register No.;
                                                              RUS=Регистр Выгрузки Но.];
                                                   Description=NC MTF01 PCH }
    { 55012;  ;External Document ID;Code50        ;CaptionML=[ENU=External Document ID;
                                                              RUS=Внешний Документ ID];
                                                   Description=NC MTF01 PCH;
                                                   Editable=No }
    { 55014;  ;External Operation No;Integer      ;CaptionML=[ENU=External Operation No.;
                                                              RUS=Внешняя Операция Но.];
                                                   Description=NC MTF01 PCH;
                                                   Editable=No }
    { 55029;  ;Reposted            ;Boolean       ;CaptionML=[ENU=Reposted;
                                                              RUS=Изменено];
                                                   Description=NC MTF01 PCH }
    { 55030;  ;Removed             ;Boolean       ;CaptionML=[ENU=Removed;
                                                              RUS=Удалено];
                                                   Description=NC MTF01 PCH }
    { 55109;  ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              RUS=Описание 2];
                                                   Description=NC MTF01 PCH }
    { 55125;  ;Linked Document Type;Option        ;CaptionML=[ENU=Linked Document Type.;
                                                              RUS=Связанный Тип Документа];
                                                   OptionString=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo;
                                                   Description=NC MTF01 PCH }
    { 55126;  ;Linked Document No. ;Code20        ;CaptionML=[ENU=Linked Document No.;
                                                              RUS=Связанный Документ Но.];
                                                   Description=NC MTF01 PCH }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Pay-to Vendor No.          }
    {    ;Buy-from Vendor No.                      }
    {    ;Incoming Document Entry No.              }
    {    ;Document Date                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;RUS=Нельзя переименовать %1.';
      ConfirmChangeQst@1004 : TextConst '@@@="%1 = a Field Caption like Currency Code";ENU=Do you want to change %1?;RUS=Изменить %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;RUS=Сброс %1 невозможен, поскольку в документе есть одна или несколько строк.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more sales orders.;RUS=Нельзя изменить %1, поскольку этот заказ связан с заказами на продажу.';
      Text007@1007 : TextConst 'ENU=%1 is greater than %2 in the %3 table.\;RUS=%1 больше %2 в таблице %3.\';
      Text008@1008 : TextConst 'ENU=Confirm change?;RUS=Подтверждаете изменение?';
      Text009@1009 : TextConst '@@@="%1 = Document No.";ENU=Deleting this document will cause a gap in the number series for receipts. An empty receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?;RUS=Удаление этого документа создаст пропуск в номерной серии приходных накладных. Для заполнения этого пропуска в номерной серии будет создана пустая приходная накладная %1.\\Продолжить?';
      Text012@1012 : TextConst '@@@="%1 = Document No.";ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;RUS=Удаление этого документа создаст пропуск в номерной серии учтенных счетов. Для заполнения этого пропуска в номерной серии будет создан пустой учтенный счет %1.\\Продолжить?';
      Text014@1014 : TextConst '@@@="%1 = Document No.";ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;RUS=Удаление этого документа создаст пропуск в номерной серии учтенных кредит-нот. Для заполнения этого пропуска в номерной серии будет создана пустая учтенная кредит-нота %1.\\Продолжить?';
      Text016@1016 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\;RUS=Если изменить %1, существующие строки покупки будут удалены, а новые строки покупки, основанные на новой информации в заголовке, будут созданы.\\';
      Text018@1017 : TextConst 'ENU=You must delete the existing purchase lines before you can change %1.;RUS=Перед тем как изменять %1, необходимо удалить существующие строки покупки.';
      Text019@1018 : TextConst 'ENU=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.\;RUS=%1 изменено в заголовке покупки, но не изменено в существующих строках покупки.\';
      Text020@1019 : TextConst 'ENU=You must update the existing purchase lines manually.;RUS=Необходимо вручную обновить существующие строки покупки.';
      Text021@1020 : TextConst 'ENU=The change may affect the exchange rate used on the price calculation of the purchase lines.;RUS=Изменения могут отразиться на валютном курсе, использованном при расчете цен в строках покупки.';
      Text022@1021 : TextConst 'ENU=Do you want to update the exchange rate?;RUS=Обновить курс валюты?';
      Text023@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;RUS=Удаление документа невозможно. Вам разрешена обработка только из %1 %2.';
      Text025@1024 : TextConst 'ENU="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. ";RUS="Поле %1 изменено. Обратите внимание, что пересчет НДС может привести к различиям в копейках, поэтому суммы необходимо впоследствии проверить. "';
      Text027@1026 : TextConst 'ENU=Do you want to update the %2 field on the lines to reflect the new value of %1?;RUS=Обновить поле %2 в строках в соответствии с новым значением %1?';
      Text028@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;RUS=Вам разрешена работа только из %1 %2.';
      Text029@1028 : TextConst '@@@="%1 = Document No.";ENU=Deleting this document will cause a gap in the number series for return shipments. An empty return shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?;RUS=Удаление этого документа создаст пропуск в номерной серии возвратных расходных накладных. Для заполнения этого пропуска в номерной серии будет создана пустая возвратная расходная накладная %1.\\Продолжить?';
      Text032@1031 : TextConst 'ENU=You have modified %1.\\;RUS=Вы изменили %1\\';
      Text033@1032 : TextConst 'ENU=Do you want to update the lines?;RUS=Обновить строки?';
      PurchSetup@1033 : Record 312;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      PurchLine@1036 : Record 39;
      xPurchLine@1080 : Record 39;
      VendLedgEntry@1037 : Record 25;
      Vend@1038 : Record 23;
      PaymentTerms@1039 : Record 3;
      PaymentMethod@1040 : Record 289;
      CurrExchRate@1041 : Record 330;
      PurchHeader@1042 : Record 38;
      PurchCommentLine@1043 : Record 43;
      Cust@1045 : Record 18;
      CompanyInfo@1046 : Record 79;
      PostCode@1047 : Record 225;
      OrderAddr@1048 : Record 224;
      BankAcc@1049 : Record 270;
      PurchRcptHeader@1050 : Record 120;
      PurchInvHeader@1051 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1053 : Record 6650;
      PurchInvHeaderPrepmt@1090 : Record 122;
      PurchCrMemoHeaderPrepmt@1089 : Record 124;
      GenBusPostingGrp@1054 : Record 250;
      RespCenter@1056 : Record 5714;
      Location@1057 : Record 14;
      WhseRequest@1058 : Record 5765;
      InvtSetup@1059 : Record 313;
      VendAgr@1210001 : Record 14901;
      NoSeriesMgt@1060 : Codeunit 396;
      DimMgt@1065 : Codeunit 408;
      ApprovalsMgmt@1082 : Codeunit 1535;
      UserSetupMgt@1066 : Codeunit 5700;
      DocSignMgt@1210002 : Codeunit 12420;
      CurrencyDate@1069 : Date;
      HideValidationDialog@1070 : Boolean;
      Confirmed@1071 : Boolean;
      Text034@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;RUS=Нельзя изменить %1, когда заполнено %2.';
      Text037@1076 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3.;RUS=Контакт %1 %2 не связан с поставщиком %3.';
      Text038@1075 : TextConst 'ENU=Contact %1 %2 is related to a different company than vendor %3.;RUS=Контакт %1 %2 относится к организации, отличной от организации поставщика %3.';
      Text039@1077 : TextConst 'ENU=Contact %1 %2 is not related to a vendor.;RUS=Контакт %1 %2 не связан с поставщиком.';
      SkipBuyFromContact@1030 : Boolean;
      SkipPayToContact@1078 : Boolean;
      Text040@1079 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";RUS="Нельзя изменить поле %1, поскольку %2 %3 имеет %4 = %5, а %6 уже присвоен %7 %8."';
      Text042@1084 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;RUS=Чтобы изменить %1, необходимо отменить процедуру утверждения.';
      Text045@1086 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;RUS=Удаление этого документа создаст пропуск в номерной серии счетов на предоплату. Для заполнения этого пропуска в номерной серии будет создан пустой счет на предоплату %1.\\Продолжить?';
      Text046@1087 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;RUS=Удаление этого документа создаст пропуск в номерной серии кредит-нот предоплаты. Для заполнения этого пропуска в номерной серии будет создана пустая кредит-нота предоплаты %1.\\Продолжить?';
      Text049@1092 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;RUS=%1 настроен на обработку только от %2 %3.';
      Text050@1067 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?;RUS=Для этого заказа имеются резервирования. Эти резервирования будут отменены, если данное изменение вызовет конфликт дат.\\Продолжить?';
      Text051@1025 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;RUS=Вы, возможно, изменили измерение.\\Обновить строки?';
      Text052@1091 : TextConst 'ENU=The %1 field on the purchase order %2 must be the same as on sales order %3.;RUS=Поле %1 в заказе на покупку %2 должно иметь то же значение, что и в заказе на продажу %3.';
      UpdateDocumentDate@1120 : Boolean;
      Text053@1095 : TextConst 'ENU=There are unposted prepayment amounts on the document of type %1 with the number %2.;RUS=Для документа типа %1 с номером %2 существуют необработанные авансовые суммы.';
      Text054@1096 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.;RUS=С документом типа %1 с номером %2 связаны неоплаченные авансовые накладные.';
      DeferralLineQst@1055 : TextConst '@@@="%1=The posting date on the document.";ENU=You have changed the %1 on the purchase header, do you want to update the deferral schedules for the lines with this date?;RUS=Вы изменили %1 в заголовке покупки. Обновить планы РБП для строк с этой датой?';
      ChangeCurrencyQst@1073 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created. You may need to update the price information manually.\\Do you want to change %1?;RUS=В случае изменения %1 существующие строки покупки будут удалены, и будут созданы новые строки покупки, основанные на новых сведениях из заголовка. Может потребоваться обновить сведения о цене вручную.\\Изменить %1?';
      Text12400@1210000 : TextConst 'ENU=Document No. %1 does not exist for Vendor No. %2.;RUS=Номер документа %1 не существует для кода поставщика %2.';
      Text12401@1470000 : TextConst 'ENU=%1 cannot be less then %2;RUS=%1 не может быть меньше %2';
      Text12402@1210003 : TextConst 'ENU=You can not update %1 while %2 is not blank.;RUS=Нельзя изменить %1, пока %2 не является пустым.';
      Text12403@1210004 : TextConst 'ENU=Agreement %1 should be no earlier than %2.;RUS=Договор %1 должен быть заключен не ранее %2.';
      Text12404@1210005 : TextConst 'ENU=Agreement %1 should be no later than %2.;RUS=Договор %1 должен быть заключен не позже %2.';
      Text12405@1210006 : TextConst 'ENU=Posting Date %1 should be no earlier than %2.;RUS=Дата учета %1 не может быть ранее %2.';
      PostedDocsToPrintCreatedMsg@1083 : TextConst 'ENU=One or more related posted documents have been generated during deletion to fill gaps in the posting number series. You can view or print the documents from the respective document archive.;RUS=Один или несколько связанных учтенных документов были созданы в процессе удаления для заполнения пропусков в серии учетных номеров. Просмотреть или распечатать документы можно из соответствующего архива документов.';
      BuyFromVendorTxt@1010 : TextConst 'ENU=Buy-from Vendor;RUS=Поставщик (продавец)';
      PayToVendorTxt@1011 : TextConst 'ENU=Pay-to Vendor;RUS=Получатель оплаты';
      DocumentNotPostedClosePageQst@1013 : TextConst 'ENU=The document has not been posted.\Are you sure you want to exit?;RUS=Этот документ еще не учтен.\Вы действительно хотите выйти?';
      DocTxt@1000 : TextConst 'ENU=Purchase Order;RUS=Заказ на покупку';
      AutoCreateDocument@1101495000 : Boolean;

    LOCAL PROCEDURE InitInsert@41();
    BEGIN
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;

      InitRecord;
    END;

    LOCAL PROCEDURE SkipInitialization@42() : Boolean;
    BEGIN
      IF "No." = '' THEN
        EXIT(FALSE);

      IF "Buy-from Vendor No." = '' THEN
        EXIT(FALSE);

      IF xRec."Document Type" <> "Document Type" THEN
        EXIT(FALSE);

      IF GETFILTER("Buy-from Vendor No.") <> '' THEN
        IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
          IF "Buy-from Vendor No." = GETRANGEMIN("Buy-from Vendor No.") THEN
            EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE InitRecord@10();
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      PurchSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",PurchSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",PurchSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Invoice Nos." = PurchSetup."Posted Invoice Nos.")
            THEN BEGIN
              IF "Empl. Purchase" = FALSE THEN
                "Posting No. Series" := "No. Series"
              ELSE
                "Posting No. Series" := PurchSetup."Advance Statement Nos."
            END ELSE
              IF "Posting No. Series" = '' THEN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            IF PurchSetup."Receipt on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
            "Include In Sales VAT Ledger" := TRUE;
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Credit Memo Nos." = PurchSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            IF PurchSetup."Return Shipment on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
          END;
      END;

      IF "Document Type" IN
         ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Return Order","Document Type"::Quote]
      THEN
        "Order Date" := WORKDATE;

      IF "Document Type" = "Document Type"::Invoice THEN
        "Expected Receipt Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Sell-to Customer No.",'');

      IF IsCreditDocType THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      IF InvtSetup.GET THEN
        "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";

      "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
      "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");
    END;

    LOCAL PROCEDURE InitNoSeries@52();
    BEGIN
      IF xRec."Receiving No." <> '' THEN BEGIN
        "Receiving No. Series" := xRec."Receiving No. Series";
        "Receiving No." := xRec."Receiving No.";
      END;
      IF xRec."Posting No." <> '' THEN BEGIN
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      END;
      IF xRec."Return Shipment No." <> '' THEN BEGIN
        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
        "Return Shipment No." := xRec."Return Shipment No.";
      END;
      IF xRec."Prepayment No." <> '' THEN BEGIN
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      END;
      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      END;
    END;

    PROCEDURE AssistEdit@2(OldPurchHeader@1000 : Record 38) : Boolean;
    BEGIN
      PurchSetup.GET;
      TestNoSeries;
      IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldPurchHeader."No. Series","No. Series") THEN BEGIN
        PurchSetup.GET;
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6();
    BEGIN
      PurchSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote:
          PurchSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          PurchSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            IF "Empl. Purchase" THEN
              PurchSetup.TESTFIELD("Advance Statement Nos.")
            ELSE BEGIN
              PurchSetup.TESTFIELD("Invoice Nos.");
              PurchSetup.TESTFIELD("Posted Invoice Nos.");
            END;
          END;
        "Document Type"::"Return Order":
          PurchSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            PurchSetup.TESTFIELD("Credit Memo Nos.");
            PurchSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          PurchSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PurchSetup."Quote Nos.");
        "Document Type"::Order:
          EXIT(PurchSetup."Order Nos.");
        "Document Type"::Invoice:
          IF "Empl. Purchase" THEN
            EXIT(PurchSetup."Advance Statement Nos.")
          ELSE
            EXIT(PurchSetup."Invoice Nos.");
        "Document Type"::"Return Order":
          EXIT(PurchSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          EXIT(PurchSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(PurchSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF IsCreditDocType THEN
        EXIT(PurchSetup."Posted Credit Memo Nos.");
      EXIT(PurchSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@37() : Code[10];
    BEGIN
      IF IsCreditDocType THEN
        EXIT(PurchSetup."Posted Prepmt. Cr. Memo Nos.");
      EXIT(PurchSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text040,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      IF PurchRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(Text009,TRUE,PurchRcptHeader."No.")
        THEN
          EXIT;
      IF PurchInvHeader."No." <> '' THEN
        IF NOT CONFIRM(Text012,TRUE,PurchInvHeader."No.")
        THEN
          EXIT;
      IF PurchCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(Text014,TRUE,PurchCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnShptHeader."No." <> '' THEN
        IF NOT CONFIRM(Text029,TRUE,ReturnShptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(Text045,TRUE,PurchInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(Text046,TRUE,PurchCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetVend@1(VendNo@1000 : Code[20]);
    BEGIN
      IF VendNo <> Vend."No." THEN
        Vend.GET(VendNo);
    END;

    PROCEDURE PurchLinesExist@3() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE RecreatePurchLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      TempPurchLine@1001 : TEMPORARY Record 39;
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 5805;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      CopyDocMgt@1008 : Codeunit 6620;
      TransferExtendedText@1009 : Codeunit 378;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF PurchLinesExist THEN BEGIN
        IF HideValidationDialog THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text016 +
              ConfirmChangeQst,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          PurchLine.LOCKTABLE;
          ItemChargeAssgntPurch.LOCKTABLE;
          MODIFY;

          PurchLine.RESET;
          PurchLine.SETRANGE("Document Type","Document Type");
          PurchLine.SETRANGE("Document No.","No.");
          IF PurchLine.FINDSET THEN BEGIN
            REPEAT
              PurchLine.TESTFIELD("Quantity Received",0);
              PurchLine.TESTFIELD("Quantity Invoiced",0);
              PurchLine.TESTFIELD("Return Qty. Shipped",0);
              PurchLine.CALCFIELDS("Reserved Qty. (Base)");
              PurchLine.TESTFIELD("Reserved Qty. (Base)",0);
              PurchLine.TESTFIELD("Receipt No.",'');
              PurchLine.TESTFIELD("Return Shipment No.",'');
              PurchLine.TESTFIELD("Blanket Order No.",'');
              IF PurchLine."Drop Shipment" OR PurchLine."Special Order" THEN BEGIN
                CASE TRUE OF
                  PurchLine."Drop Shipment":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Sales Order No.");
                  PurchLine."Special Order":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Special Order Sales No.");
                END;
                TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
                TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
              END;

              PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              TempPurchLine := PurchLine;
              IF PurchLine.Nonstock THEN BEGIN
                PurchLine.Nonstock := FALSE;
                PurchLine.MODIFY;
              END;
              TempPurchLine.INSERT;
            UNTIL PurchLine.NEXT = 0;

            ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntPurch.INIT;
                TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
                TempItemChargeAssgntPurch.INSERT;
              UNTIL ItemChargeAssgntPurch.NEXT = 0;
              ItemChargeAssgntPurch.DELETEALL;
            END;

            PurchLine.DELETEALL(TRUE);

            PurchLine.INIT;
            PurchLine."Line No." := 0;
            TempPurchLine.FINDSET;
            ExtendedTextAdded := FALSE;
            REPEAT
              IF TempPurchLine."Attached to Line No." = 0 THEN BEGIN
                PurchLine.INIT;
                PurchLine."Line No." := PurchLine."Line No." + 10000;
                PurchLine.VALIDATE(Type,TempPurchLine.Type);
                IF TempPurchLine."No." = '' THEN BEGIN
                  PurchLine.VALIDATE(Description,TempPurchLine.Description);
                  PurchLine.VALIDATE("Description 2",TempPurchLine."Description 2");
                END ELSE BEGIN
                  PurchLine.VALIDATE("No.",TempPurchLine."No.");
                  IF PurchLine.Type <> PurchLine.Type::" " THEN
                    CASE TRUE OF
                      TempPurchLine."Drop Shipment":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            TempPurchLine."Sales Order No.",
                            TempPurchLine."Sales Order Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Drop Shipment" := TempPurchLine."Drop Shipment";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Sales Order No." := TempPurchLine."Sales Order No.";
                          PurchLine."Sales Order Line No." := TempPurchLine."Sales Order Line No.";
                          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
                          PurchLine.VALIDATE("Inbound Whse. Handling Time");

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Purchase Order No." := PurchLine."Document No.";
                          SalesLine."Purch. Order Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      TempPurchLine."Special Order":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            TempPurchLine."Special Order Sales No.",
                            TempPurchLine."Special Order Sales Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Special Order" := TempPurchLine."Special Order";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Special Order Sales No." := TempPurchLine."Special Order Sales No.";
                          PurchLine."Special Order Sales Line No." := TempPurchLine."Special Order Sales Line No.";

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Special Order Purchase No." := PurchLine."Document No.";
                          SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      ELSE BEGIN
                        PurchLine.VALIDATE("Unit of Measure Code",TempPurchLine."Unit of Measure Code");
                        PurchLine.VALIDATE("Variant Code",TempPurchLine."Variant Code");
                        PurchLine."Prod. Order No." := TempPurchLine."Prod. Order No.";
                        IF PurchLine."Prod. Order No." <> '' THEN BEGIN
                          PurchLine.Description := TempPurchLine.Description;
                          PurchLine.VALIDATE("VAT Prod. Posting Group",TempPurchLine."VAT Prod. Posting Group");
                          PurchLine.VALIDATE("Gen. Prod. Posting Group",TempPurchLine."Gen. Prod. Posting Group");
                          PurchLine.VALIDATE("Expected Receipt Date",TempPurchLine."Expected Receipt Date");
                          PurchLine.VALIDATE("Requested Receipt Date",TempPurchLine."Requested Receipt Date");
                          PurchLine.VALIDATE("Qty. per Unit of Measure",TempPurchLine."Qty. per Unit of Measure");
                        END;
                        IF (TempPurchLine."Job No." <> '') AND (TempPurchLine."Job Task No." <> '') THEN BEGIN
                          PurchLine.VALIDATE("Job No.",TempPurchLine."Job No.");
                          PurchLine.VALIDATE("Job Task No.",TempPurchLine."Job Task No.");
                          PurchLine."Job Line Type" := TempPurchLine."Job Line Type";
                        END;
                        IF TempPurchLine.Quantity <> 0 THEN
                          PurchLine.VALIDATE(Quantity,TempPurchLine.Quantity);
                        IF ("Currency Code" = xRec."Currency Code") AND (PurchLine."Direct Unit Cost" = 0) THEN
                          PurchLine.VALIDATE("Direct Unit Cost",TempPurchLine."Direct Unit Cost");
                        PurchLine."Routing No." := TempPurchLine."Routing No.";
                        PurchLine."Routing Reference No." := TempPurchLine."Routing Reference No.";
                        PurchLine."Operation No." := TempPurchLine."Operation No.";
                        PurchLine."Work Center No." := TempPurchLine."Work Center No.";
                        PurchLine."Prod. Order Line No." := TempPurchLine."Prod. Order Line No.";
                        PurchLine."Overhead Rate" := TempPurchLine."Overhead Rate";
                      END;
                    END;
                END;

                PurchLine.INSERT;
                ExtendedTextAdded := FALSE;

                IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
                  ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",TempPurchLine."Document Type");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",TempPurchLine."Document No.");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",TempPurchLine."Line No.");
                  IF TempItemChargeAssgntPurch.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntPurch.MARK THEN BEGIN
                        TempItemChargeAssgntPurch."Applies-to Doc. Line No." := PurchLine."Line No.";
                        TempItemChargeAssgntPurch.Description := PurchLine.Description;
                        TempItemChargeAssgntPurch.MODIFY;
                        TempItemChargeAssgntPurch.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                END;
                IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := PurchLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
                  TransferExtendedText.InsertPurchExtText(PurchLine);
                  PurchLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
            UNTIL TempPurchLine.NEXT = 0;

            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            TempPurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
            IF TempPurchLine.FINDSET THEN
              REPEAT
                TempItemChargeAssgntPurch.SETRANGE("Document Line No.",TempPurchLine."Line No.");
                IF TempItemChargeAssgntPurch.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntPurch.INIT;
                    ItemChargeAssgntPurch := TempItemChargeAssgntPurch;
                    ItemChargeAssgntPurch."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntPurch.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntPurch.INSERT;
                  UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL TempPurchLine.NEXT = 0;

            TempPurchLine.SETRANGE(Type);
            TempPurchLine.DELETEALL;
            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            TempItemChargeAssgntPurch.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text018,ChangedFieldName);
      END;
    END;

    LOCAL PROCEDURE MessageIfPurchLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text020,
          ChangedFieldName);
    END;

    LOCAL PROCEDURE PriceMessageIfPurchLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text021,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13() : Boolean;
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text022,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
      EXIT(Confirmed);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE UpdatePurchLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      PurchLineReserve@1003 : Codeunit 99000834;
      Question@1002 : Text[250];
    BEGIN
      IF NOT PurchLinesExist THEN
        EXIT;

      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text032 +
            Text033,ChangedFieldName);
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldName OF
              FIELDCAPTION("Expected Receipt Date"),
              FIELDCAPTION("Requested Receipt Date"),
              FIELDCAPTION("Promised Receipt Date"),
              FIELDCAPTION("Lead Time Calculation"),
              FIELDCAPTION("Inbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;

      PurchLine.LOCKTABLE;
      MODIFY;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          xPurchLine := PurchLine;
          CASE ChangedFieldName OF
            FIELDCAPTION("Expected Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");
            FIELDCAPTION("Currency Factor"):
              IF PurchLine.Type <> PurchLine.Type::" " THEN
                PurchLine.VALIDATE("Direct Unit Cost");
            FIELDCAPTION("Transaction Type"):
              PurchLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              PurchLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Entry Point"):
              PurchLine.VALIDATE("Entry Point","Entry Point");
            FIELDCAPTION(Area):
              PurchLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              PurchLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Requested Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Requested Receipt Date","Requested Receipt Date");
            FIELDCAPTION("Prepayment %"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Promised Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Promised Receipt Date","Promised Receipt Date");
            FIELDCAPTION("Lead Time Calculation"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Lead Time Calculation","Lead Time Calculation");
            FIELDCAPTION("Inbound Whse. Handling Time"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
            PurchLine.FIELDCAPTION("Deferral Code"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Deferral Code");
            FIELDCAPTION("Agreement No."):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Agreement No.","Agreement No.");
          END;
          PurchLine.MODIFY(TRUE);
          PurchLineReserve.VerifyChange(PurchLine,xPurchLine);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@31();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForPurchHeader(Rec) THEN
        IF NOT CONFIRM(Text050,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1008 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND PurchLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ReceivedPurchLinesExist@20() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Quantity Received",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnShipmentExist@5800() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@21();
    BEGIN
      IF IsCreditDocType THEN
        EXIT;

      IF ("Location Code" <> '') AND Location.GET("Location Code") AND ("Sell-to Customer No." = '') THEN BEGIN
        SetShipToAddress(
          Location.Name,Location."Name 2",Location.Address,Location."Address 2",
          Location.City,Location."Post Code",Location.County,Location."Country/Region Code");
        "Ship-to Contact" := Location.Contact;
      END;

      IF ("Location Code" = '') AND ("Sell-to Customer No." = '') THEN BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        SetShipToAddress(
          CompanyInfo."Ship-to Name",CompanyInfo."Ship-to Name 2",CompanyInfo."Ship-to Address",CompanyInfo."Ship-to Address 2",
          CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
          CompanyInfo."Ship-to Country/Region Code");
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
    END;

    LOCAL PROCEDURE DeletePurchaseLines@17();
    VAR
      ReservMgt@1000 : Codeunit 99000845;
    BEGIN
      IF PurchLine.FINDSET THEN BEGIN
        ReservMgt.DeleteDocumentReservation(DATABASE::"Purchase Line","Document Type","No.",HideValidationDialog);
        REPEAT
          PurchLine.SuspendStatusCheck(TRUE);
          PurchLine.DELETE(TRUE);
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntPurchFilter@22(VAR TempItemChargeAssgntPurch@1000 : TEMPORARY Record 5805);
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
    END;

    LOCAL PROCEDURE CheckReceiptInfo@70(VAR PurchLine@1000 : Record 39;PayTo@1001 : Boolean);
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN
        PurchLine.SETFILTER("Quantity Received",'<>0')
      ELSE
        IF "Document Type" = "Document Type"::Invoice THEN BEGIN
          IF NOT PayTo THEN
            PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
          PurchLine.SETFILTER("Receipt No.",'<>%1','');
        END;

      IF PurchLine.FINDFIRST THEN
        IF "Document Type" = "Document Type"::Order THEN
          PurchLine.TESTFIELD("Quantity Received",0)
        ELSE
          PurchLine.TESTFIELD("Receipt No.",'');
      PurchLine.SETRANGE("Receipt No.");
      PurchLine.SETRANGE("Quantity Received");
      IF NOT PayTo THEN
        PurchLine.SETRANGE("Buy-from Vendor No.");
    END;

    LOCAL PROCEDURE CheckPrepmtInfo@119(VAR PurchLine@1000 : Record 39);
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
        IF PurchLine.FIND('-') THEN
          PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
        PurchLine.SETRANGE("Prepmt. Amt. Inv.");
      END;
    END;

    LOCAL PROCEDURE CheckReturnInfo@121(VAR PurchLine@1000 : Record 39;PayTo@1001 : Boolean);
    BEGIN
      IF "Document Type" = "Document Type"::"Return Order" THEN
        PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
      ELSE
        IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
          IF NOT PayTo THEN
            PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
          PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
        END;

      IF PurchLine.FINDFIRST THEN
        IF "Document Type" = "Document Type"::"Return Order" THEN
          PurchLine.TESTFIELD("Return Qty. Shipped",0)
        ELSE
          PurchLine.TESTFIELD("Return Shipment No.",'');
    END;

    LOCAL PROCEDURE UpdateBuyFromCont@24(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1004 : Record 23;
      OfficeContact@1001 : Record 5050;
      OfficeMgt@1002 : Codeunit 1630;
    BEGIN
      IF OfficeMgt.GetContact(OfficeContact,VendorNo) THEN BEGIN
        SetHideValidationDialog(TRUE);
        UpdateBuyFromVend(OfficeContact."No.");
        SetHideValidationDialog(FALSE);
      END ELSE
        IF Vend.GET(VendorNo) THEN BEGIN
          IF Vend."Primary Contact No." <> '' THEN
            "Buy-from Contact No." := Vend."Primary Contact No."
          ELSE BEGIN
            ContBusRel.RESET;
            ContBusRel.SETCURRENTKEY("Link to Table","No.");
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
            ContBusRel.SETRANGE("No.","Buy-from Vendor No.");
            IF ContBusRel.FINDFIRST THEN
              "Buy-from Contact No." := ContBusRel."Contact No."
            ELSE
              "Buy-from Contact No." := '';
          END;
          "Buy-from Contact" := Vend.Contact;
        END;
    END;

    LOCAL PROCEDURE UpdatePayToCont@27(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1001 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Pay-to Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Pay-to Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Pay-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Pay-to Contact No." := '';
        END;
        "Pay-to Contact" := Vend.Contact;
      END;
    END;

    LOCAL PROCEDURE UpdateBuyFromVend@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Vend@1006 : Record 23;
      Cont@1005 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Buy-from Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Buy-from Contact" := Cont.Name
        ELSE
          IF Vend.GET("Buy-from Vendor No.") THEN
            "Buy-from Contact" := Vend.Contact
          ELSE
            "Buy-from Contact" := ''
      END ELSE BEGIN
        "Buy-from Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Buy-from Vendor No." <> '') AND
           ("Buy-from Vendor No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Buy-from Vendor No.");
        IF "Buy-from Vendor No." = '' THEN BEGIN
          SkipBuyFromContact := TRUE;
          VALIDATE("Buy-from Vendor No.",ContBusinessRelation."No.");
          SkipBuyFromContact := FALSE;
        END;
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);

      IF ("Buy-from Vendor No." = "Pay-to Vendor No.") OR
         ("Pay-to Vendor No." = '')
      THEN
        VALIDATE("Pay-to Contact No.","Buy-from Contact No.");
    END;

    LOCAL PROCEDURE UpdatePayToVend@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Vend@1004 : Record 23;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Pay-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Pay-to Contact" := Cont.Name
        ELSE
          IF Vend.GET("Pay-to Vendor No.") THEN
            "Pay-to Contact" := Vend.Contact
          ELSE
            "Pay-to Contact" := '';
      END ELSE BEGIN
        "Pay-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Pay-to Vendor No." = '' THEN BEGIN
          SkipPayToContact := TRUE;
          VALIDATE("Pay-to Vendor No.",ContBusinessRelation."No.");
          SkipPayToContact := FALSE;
        END ELSE
          IF "Pay-to Vendor No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Pay-to Vendor No.");
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.SetObjectFrom(Rec); // NC NOS-26 SPA
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
      ReceivedShippedItemLineDimChangeConfirmed@1003 : Boolean;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text051) THEN
        EXIT;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.LOCKTABLE;
      IF PurchLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(PurchLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PurchLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PurchLine."Dimension Set ID" := NewDimSetID;

            IF NOT HideValidationDialog AND GUIALLOWED THEN
              VerifyReceivedShippedItemLineDimChange(ReceivedShippedItemLineDimChangeConfirmed);

            DimMgt.UpdateGlobalDimFromDimSetID(
              PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
            PurchLine.MODIFY;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyReceivedShippedItemLineDimChange@71(VAR ReceivedShippedItemLineDimChangeConfirmed@1000 : Boolean);
    BEGIN
      IF PurchLine.IsReceivedShippedItemDimChanged THEN
        IF NOT ReceivedShippedItemLineDimChangeConfirmed THEN
          ReceivedShippedItemLineDimChangeConfirmed := PurchLine.ConfirmReceivedShippedItemDimChange;
    END;

    PROCEDURE SetAmountToApply@18(AppliesToDocNo@1000 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF VendLedgEntry.FINDFIRST THEN BEGIN
        IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          VendLedgEntry.CALCFIELDS("Remaining Amount");
          VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
        END ELSE
          VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Accepted Payment Tolerance" := 0;
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      END;
    END;

    PROCEDURE SetShipToForSpecOrder@23();
    BEGIN
      IF Location.GET("Location Code") THEN BEGIN
        "Ship-to Code" := '';
        SetShipToAddress(
          Location.Name,Location."Name 2",Location.Address,Location."Address 2",
          Location.City,Location."Post Code",Location.County,Location."Country/Region Code");
        "Ship-to Contact" := Location.Contact;
        "Location Code" := Location.Code;
      END ELSE BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        SetShipToAddress(
          CompanyInfo."Ship-to Name",CompanyInfo."Ship-to Name 2",CompanyInfo."Ship-to Address",CompanyInfo."Ship-to Address 2",
          CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
          CompanyInfo."Ship-to Country/Region Code");
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        "Location Code" := '';
      END;
    END;

    LOCAL PROCEDURE JobUpdatePurchLines@28(SkipJobCurrFactorUpdate@1000 : Boolean);
    BEGIN
      WITH PurchLine DO BEGIN
        SETFILTER("Job No.",'<>%1','');
        SETFILTER("Job Task No.",'<>%1','');
        LOCKTABLE;
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          SetPurchHeader(Rec);
          REPEAT
            IF NOT SkipJobCurrFactorUpdate THEN
              JobSetCurrencyFactor;
            CreateTempJobJnlLine(FALSE);
            UpdateJobPrices;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END
    END;

    PROCEDURE GetPstdDocLinesToRevere@47();
    VAR
      PurchPostedDocLines@1002 : Page 5855;
    BEGIN
      GetVend("Buy-from Vendor No.");
      PurchPostedDocLines.SetToPurchHeader(Rec);
      PurchPostedDocLines.SETRECORD(Vend);
      PurchPostedDocLines.LOOKUPMODE := TRUE;
      IF PurchPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        PurchPostedDocLines.CopyLineToDoc;

      CLEAR(PurchPostedDocLines);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetPurchasesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      PurchaseInvDisc@1000 : Codeunit 70;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN
        PurchaseInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE AddShipToAddress@46(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine2@1002 : Record 39;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine2.RESET;
        PurchLine2.SETRANGE("Document Type","Document Type"::Order);
        PurchLine2.SETRANGE("Document No.","No.");
        IF NOT PurchLine2.ISEMPTY THEN BEGIN
          IF "Ship-to Name" <> SalesHeader."Ship-to Name" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> SalesHeader."Ship-to Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> SalesHeader."Ship-to Address" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> SalesHeader."Ship-to Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> SalesHeader."Ship-to Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> SalesHeader."Ship-to City" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> SalesHeader."Ship-to Contact" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE BEGIN
          // no purchase line exists
          "Ship-to Name" := SalesHeader."Ship-to Name";
          "Ship-to Name 2" := SalesHeader."Ship-to Name 2";
          "Ship-to Address" := SalesHeader."Ship-to Address";
          "Ship-to Address 2" := SalesHeader."Ship-to Address 2";
          "Ship-to Post Code" := SalesHeader."Ship-to Post Code";
          "Ship-to City" := SalesHeader."Ship-to City";
          "Ship-to Contact" := SalesHeader."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE DropShptOrderExists@48(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine2@1001 : Record 37;
    BEGIN
      // returns TRUE if sales is either Drop Shipment of Special Order
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type"::Order);
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE("Drop Shipment",TRUE);
      EXIT(NOT SalesLine2.ISEMPTY);
    END;

    PROCEDURE SpecialOrderExists@81(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine3@1001 : Record 37;
    BEGIN
      SalesLine3.RESET;
      SalesLine3.SETRANGE("Document Type",SalesLine3."Document Type"::Order);
      SalesLine3.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine3.SETRANGE("Special Order",TRUE);
      EXIT(NOT SalesLine3.ISEMPTY);
    END;

    PROCEDURE QtyToReceiveIsZero@30() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Qty. to Receive",'<>0');
      EXIT(PurchLine.ISEMPTY);
    END;

    LOCAL PROCEDURE IsApprovedForPosting@50() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckPurch(Rec) THEN BEGIN
        IF PrepaymentMgt.TestPurchasePrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text053,"Document Type","No."));
        IF PrepaymentMgt.TestPurchasePayment(Rec) THEN
          IF NOT CONFIRM(STRSUBSTNO(Text054,"Document Type","No."),TRUE) THEN
            EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@51() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckPurch(Rec) THEN BEGIN
        IF PrepaymentMgt.TestPurchasePrepayment(Rec) THEN
          EXIT(FALSE);
        IF PrepaymentMgt.TestPurchasePayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsTotalValid@36() : Boolean;
    VAR
      IncomingDocument@1002 : Record 130;
      PurchaseLine@1001 : Record 39;
      TempTotalPurchaseLine@1000 : TEMPORARY Record 39;
      DocumentTotals@1003 : Codeunit 57;
      VATAmount@1004 : Decimal;
    BEGIN
      IF NOT IncomingDocument.GET("Incoming Document Entry No.") THEN
        EXIT(TRUE);

      IF IncomingDocument."Amount Incl. VAT" = 0 THEN
        EXIT(TRUE);

      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      IF NOT PurchaseLine.FINDFIRST THEN
        EXIT(TRUE);

      IF IncomingDocument."Currency Code" <> PurchaseLine."Currency Code" THEN
        EXIT(TRUE);

      TempTotalPurchaseLine.INIT;
      DocumentTotals.PurchaseCalculateTotalsWithInvoiceRounding(PurchaseLine,VATAmount,TempTotalPurchaseLine);

      EXIT(IncomingDocument."Amount Incl. VAT" = TempTotalPurchaseLine."Amount Including VAT");
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@33();
    VAR
      PurchasePostViaJobQueue@1000 : Codeunit 98;
    BEGIN
      PurchasePostViaJobQueue.CancelQueueEntry(Rec);
    END;

    PROCEDURE AddSpecialOrderToAddress@80(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine3@1003 : Record 39;
      LocationCode@1004 : Record 14;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine3.RESET;
        PurchLine3.SETRANGE("Document Type","Document Type"::Order);
        PurchLine3.SETRANGE("Document No.","No.");
        IF NOT PurchLine3.ISEMPTY THEN BEGIN
          LocationCode.GET("Location Code");
          IF "Ship-to Name" <> LocationCode.Name THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> LocationCode."Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> LocationCode.Address THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> LocationCode."Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> LocationCode."Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> LocationCode.City THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> LocationCode.Contact THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE
          SetShipToForSpecOrder;
      END;
    END;

    PROCEDURE RecalculatePurchLines@1470000(TargetAmount@1470000 : Decimal);
    VAR
      PurchLine@1470001 : Record 39;
      CalcAmount@1470002 : Decimal;
      Part@1470003 : Decimal;
      PurchLine1@1470004 : Record 39;
    BEGIN
      CALCFIELDS("Amount Including VAT");
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF PurchLine.FIND('-') THEN BEGIN
        CalcAmount := 0;
        REPEAT
          IF (PurchLine.Type > 0) AND (PurchLine."No." <> '') THEN BEGIN
            Part := PurchLine."Amount Including VAT" / "Amount Including VAT";
            PurchLine.VALIDATE("Direct Unit Cost",ROUND(Part * TargetAmount));
            PurchLine.VALIDATE("Amount Including VAT",PurchLine."Direct Unit Cost");
            PurchLine.MODIFY;

            PurchLine1 := PurchLine;
            CalcAmount := CalcAmount + PurchLine."Direct Unit Cost";
          END;
        UNTIL PurchLine.NEXT = 0;
        IF (CalcAmount <> TargetAmount) AND (CalcAmount <> 0) THEN BEGIN
          PurchLine1.VALIDATE("Direct Unit Cost",PurchLine1."Direct Unit Cost" + TargetAmount - CalcAmount);
          PurchLine1.MODIFY;
        END;
      END;
    END;

    PROCEDURE ShowAttorneyLetters@1210000();
    VAR
      LetterOfAttorney@1210000 : Record 14905;
      LetterOfAttorneyList@1210001 : Page 14906;
    BEGIN
      LetterOfAttorney.FILTERGROUP(2);
      LetterOfAttorney.SETRANGE("Source Document Type","Document Type" + 1);
      LetterOfAttorney.SETRANGE("Source Document No.","No.");
      LetterOfAttorney.FILTERGROUP(0);
      LetterOfAttorneyList.SETTABLEVIEW(LetterOfAttorney);
      LetterOfAttorneyList.RUNMODAL;
    END;

    PROCEDURE CreateAttorneyLetter@1210001();
    VAR
      LetterOfAttorney@1210001 : Record 14905;
      LetterOfAttorneyCard@1210000 : Page 14905;
    BEGIN
      LetterOfAttorney.INIT;
      LetterOfAttorney."Source Document Type" := "Document Type" + 1;
      LetterOfAttorney."Source Document No." := "No.";
      LetterOfAttorney.INSERT(TRUE);

      LetterOfAttorney.FILTERGROUP(2);
      LetterOfAttorney.SETRANGE("Source Document Type","Document Type" + 1);
      LetterOfAttorney.SETRANGE("Source Document No.","No.");
      LetterOfAttorney.FILTERGROUP(0);
      LetterOfAttorneyCard.SetSourceDocument("Document Type","No.");
      LetterOfAttorneyCard.SETTABLEVIEW(LetterOfAttorney);
      LetterOfAttorneyCard.SETRECORD(LetterOfAttorney);
      LetterOfAttorneyCard.RUN;
    END;

    PROCEDURE CheckCorrPostingDate@1210003();
    VAR
      PurchInvHeader@1210000 : Record 122;
      PurchCrMemoHeader@1210001 : Record 124;
    BEGIN
      IF "Corrected Doc. No." <> '' THEN
        CASE "Corrected Doc. Type" OF
          "Corrected Doc. Type"::Invoice:
            BEGIN
              PurchInvHeader.GET("Corrected Doc. No.");
              IF ("Posting Date" <> 0D) AND ("Posting Date" < PurchInvHeader."Posting Date") THEN
                ERROR(Text12405,"Posting Date",PurchInvHeader."Posting Date");
            END;
          "Corrected Doc. Type"::"Credit Memo":
            BEGIN
              PurchCrMemoHeader.GET("Corrected Doc. No.");
              IF ("Posting Date" <> 0D) AND ("Posting Date" < PurchCrMemoHeader."Posting Date") THEN
                ERROR(Text12405,"Posting Date",PurchCrMemoHeader."Posting Date");
            END;
        END;
    END;

    PROCEDURE CheckCorrAgreementNo@1210002();
    VAR
      PurchInvHeader@1210000 : Record 122;
      PurchCrMemoHeader@1210001 : Record 124;
    BEGIN
      IF "Corrected Doc. No." <> '' THEN
        CASE "Corrected Doc. Type" OF
          "Corrected Doc. Type"::Invoice:
            BEGIN
              PurchInvHeader.GET("Corrected Doc. No.");
              TESTFIELD("Agreement No.",PurchInvHeader."Agreement No.");
            END;
          "Corrected Doc. Type"::"Credit Memo":
            BEGIN
              PurchCrMemoHeader.GET("Corrected Doc. No.");
              TESTFIELD("Agreement No.",PurchCrMemoHeader."Agreement No.");
            END;
        END;
    END;

    PROCEDURE CheckCorrectiveDocument@1210004();
    BEGIN
      TESTFIELD("Corrective Document");
    END;

    LOCAL PROCEDURE InitRecOnVendUpdate@39();
    BEGIN
      IF NOT SkipInitialization THEN
        InitInsert;
    END;

    PROCEDURE InvoicedLineExists@56() : Boolean;
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
      PurchLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT PurchLine.ISEMPTY);
    END;

    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@44();
    VAR
      PurchaseLine@1001 : Record 39;
      TempPurchaseLine@1002 : TEMPORARY Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      PurchaseLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          CollectParamsInBufferForCreateDimSet(TempPurchaseLine,PurchaseLine);
        UNTIL PurchaseLine.NEXT = 0;
      TempPurchaseLine.RESET;
      TempPurchaseLine.MARKEDONLY(FALSE);
      IF TempPurchaseLine.FINDSET THEN
        REPEAT
          PurchaseLine.CreateDim(DATABASE::"G/L Account",TempPurchaseLine."No.",
            DATABASE::Job,TempPurchaseLine."Job No.",
            DATABASE::"Responsibility Center",TempPurchaseLine."Responsibility Center",
            DATABASE::"Work Center",TempPurchaseLine."Work Center No.");
        UNTIL TempPurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@49(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39);
    VAR
      GenPostingSetup@1002 : Record 252;
      DefaultDimension@1003 : Record 352;
    BEGIN
      TempPurchaseLine.SETRANGE("Gen. Bus. Posting Group",PurchaseLine."Gen. Bus. Posting Group");
      TempPurchaseLine.SETRANGE("Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      IF NOT TempPurchaseLine.FINDFIRST THEN BEGIN
        GenPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
        GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup."Purch. Prepayments Account");
        InsertTempPurchaseLineInBuffer(TempPurchaseLine,PurchaseLine,
          GenPostingSetup."Purch. Prepayments Account",DefaultDimension.ISEMPTY);
      END ELSE
        IF NOT TempPurchaseLine.MARK THEN BEGIN
          TempPurchaseLine.SETRANGE("Job No.",PurchaseLine."Job No.");
          TempPurchaseLine.SETRANGE("Responsibility Center",PurchaseLine."Responsibility Center");
          TempPurchaseLine.SETRANGE("Work Center No.",PurchaseLine."Work Center No.");
          IF TempPurchaseLine.ISEMPTY THEN
            InsertTempPurchaseLineInBuffer(TempPurchaseLine,PurchaseLine,TempPurchaseLine."No.",FALSE)
        END;
    END;

    LOCAL PROCEDURE InsertTempPurchaseLineInBuffer@35(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39;AccountNo@1002 : Code[20];DefaultDimenstionsNotExist@1003 : Boolean);
    BEGIN
      TempPurchaseLine.INIT;
      TempPurchaseLine."Line No." := PurchaseLine."Line No.";
      TempPurchaseLine."No." := AccountNo;
      TempPurchaseLine."Job No." := PurchaseLine."Job No.";
      TempPurchaseLine."Responsibility Center" := PurchaseLine."Responsibility Center";
      TempPurchaseLine."Work Center No." := PurchaseLine."Work Center No.";
      TempPurchaseLine."Gen. Bus. Posting Group" := PurchaseLine."Gen. Bus. Posting Group";
      TempPurchaseLine."Gen. Prod. Posting Group" := PurchaseLine."Gen. Prod. Posting Group";
      TempPurchaseLine.MARK := DefaultDimenstionsNotExist;
      TempPurchaseLine.INSERT;
    END;

    PROCEDURE OpenPurchaseOrderStatistics@60();
    BEGIN
      CalcInvDiscForHeader;
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Purchase Order Statistics",Rec);
    END;

    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PAGE::"Purchase Quote");
        "Document Type"::Order:
          EXIT(PAGE::"Purchase Order");
        "Document Type"::Invoice:
          EXIT(PAGE::"Purchase Invoice");
        "Document Type"::"Credit Memo":
          EXIT(PAGE::"Purchase Credit Memo");
        "Document Type"::"Blanket Order":
          EXIT(PAGE::"Blanket Purchase Order");
        "Document Type"::"Return Order":
          EXIT(PAGE::"Purchase Return Order");
      END;
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckPurchasePostRestrictions@54();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckPurchaseReleaseRestrictions@55();
    BEGIN
    END;

    PROCEDURE SetStatus@53(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    PROCEDURE TriggerOnAfterPostPurchaseDoc@116(VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    VAR
      PurchPost@1000 : Codeunit 90;
    BEGIN
      PurchPost.OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcpHdrNo,RetShptHdrNo,PurchInvHdrNo,PurchCrMemoHdrNo);
    END;

    PROCEDURE DeferralHeadersExist@38() : Boolean;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralUtilities@1001 : Codeunit 1720;
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      EXIT(NOT DeferralHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(DeferralLineQst,FALSE,FIELDCAPTION("Posting Date"));
      IF Confirmed THEN
        UpdatePurchLines(PurchLine.FIELDCAPTION("Deferral Code"),FALSE);
    END;

    PROCEDURE IsCreditDocType@110() : Boolean;
    BEGIN
      EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    PROCEDURE SetBuyFromVendorFromFilter@186();
    VAR
      BuyFromVendorNo@1000 : Code[20];
    BEGIN
      BuyFromVendorNo := GetFilterVendNo;
      IF BuyFromVendorNo = '' THEN BEGIN
        FILTERGROUP(2);
        BuyFromVendorNo := GetFilterVendNo;
        FILTERGROUP(0);
      END;
      IF BuyFromVendorNo <> '' THEN
        VALIDATE("Buy-from Vendor No.",BuyFromVendorNo);
    END;

    PROCEDURE CopyBuyFromVendorFilter@59();
    VAR
      BuyFromVendorFilter@1000 : Text;
    BEGIN
      BuyFromVendorFilter := GETFILTER("Buy-from Vendor No.");
      IF BuyFromVendorFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETFILTER("Buy-from Vendor No.",BuyFromVendorFilter);
        FILTERGROUP(0)
      END;
    END;

    LOCAL PROCEDURE GetFilterVendNo@64() : Code[20];
    BEGIN
      IF GETFILTER("Buy-from Vendor No.") <> '' THEN
        IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
          EXIT(GETRANGEMAX("Buy-from Vendor No."));
    END;

    LOCAL PROCEDURE UpdateVendorAddress@89();
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      IF Vendor.GET("Buy-from Vendor No.") THEN
        IF NOT Vendor.HasAddress THEN
          CopyBuyFromVendorAddressFieldsFromPurchaseDocument(Vendor);

      IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN
        IF Vendor.GET("Pay-to Vendor No.") THEN
          IF NOT Vendor.HasAddress THEN
            CopyPayToVendorAddressFieldsFromPurchaseDocument(Vendor);
    END;

    LOCAL PROCEDURE CopyBuyFromVendorAddressFieldsFromPurchaseDocument@91(VAR Vendor@1000 : Record 23);
    BEGIN
      Vendor.Address := "Buy-from Address";
      Vendor."Address 2" := "Buy-from Address 2";
      Vendor.City := "Buy-from City";
      Vendor.Contact := "Buy-from Contact";
      Vendor."Country/Region Code" := "Buy-from Country/Region Code";
      Vendor.County := "Buy-from County";
      Vendor."Post Code" := "Buy-from Post Code";
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CopyPayToVendorAddressFieldsFromPurchaseDocument@92(VAR Vendor@1000 : Record 23);
    BEGIN
      Vendor.Address := "Pay-to Address";
      Vendor."Address 2" := "Pay-to Address 2";
      Vendor.City := "Pay-to City";
      Vendor.Contact := "Pay-to Contact";
      Vendor."Country/Region Code" := "Pay-to Country/Region Code";
      Vendor.County := "Pay-to County";
      Vendor."Post Code" := "Pay-to Post Code";
      Vendor.MODIFY(TRUE);
    END;

    PROCEDURE HasBuyFromAddress@65() : Boolean;
    BEGIN
      CASE TRUE OF
        "Buy-from Address" <> '':
          EXIT(TRUE);
        "Buy-from Address 2" <> '':
          EXIT(TRUE);
        "Buy-from City" <> '':
          EXIT(TRUE);
        "Buy-from Country/Region Code" <> '':
          EXIT(TRUE);
        "Buy-from County" <> '':
          EXIT(TRUE);
        "Buy-from Post Code" <> '':
          EXIT(TRUE);
        "Buy-from Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE HasShipToAddress@103() : Boolean;
    BEGIN
      CASE TRUE OF
        "Ship-to Address" <> '':
          EXIT(TRUE);
        "Ship-to Address 2" <> '':
          EXIT(TRUE);
        "Ship-to City" <> '':
          EXIT(TRUE);
        "Ship-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Ship-to County" <> '':
          EXIT(TRUE);
        "Ship-to Post Code" <> '':
          EXIT(TRUE);
        "Ship-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE HasPayToAddress@66() : Boolean;
    BEGIN
      CASE TRUE OF
        "Pay-to Address" <> '':
          EXIT(TRUE);
        "Pay-to Address 2" <> '':
          EXIT(TRUE);
        "Pay-to City" <> '':
          EXIT(TRUE);
        "Pay-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Pay-to County" <> '':
          EXIT(TRUE);
        "Pay-to Post Code" <> '':
          EXIT(TRUE);
        "Pay-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CopyBuyFromVendorAddressFieldsFromVendor@62(VAR BuyFromVendor@1000 : Record 23);
    BEGIN
      IF BuyFromVendorIsReplaced OR ShouldCopyAddressFromBuyFromVendor(BuyFromVendor) THEN BEGIN
        "Buy-from Address" := BuyFromVendor.Address;
        "Buy-from Address 2" := BuyFromVendor."Address 2";
        "Buy-from City" := BuyFromVendor.City;
        "Buy-from Post Code" := BuyFromVendor."Post Code";
        "Buy-from County" := BuyFromVendor.County;
        "Buy-from Country/Region Code" := BuyFromVendor."Country/Region Code";
      END;
    END;

    LOCAL PROCEDURE CopyShipToVendorAddressFieldsFromVendor@98(VAR BuyFromVendor@1000 : Record 23);
    BEGIN
      IF BuyFromVendorIsReplaced OR ShouldCopyAddressFromBuyFromVendor(BuyFromVendor) THEN BEGIN
        "Ship-to Address" := BuyFromVendor.Address;
        "Ship-to Address 2" := BuyFromVendor."Address 2";
        "Ship-to City" := BuyFromVendor.City;
        "Ship-to Post Code" := BuyFromVendor."Post Code";
        "Ship-to County" := BuyFromVendor.County;
        VALIDATE("Ship-to Country/Region Code",BuyFromVendor."Country/Region Code");
      END;
    END;

    LOCAL PROCEDURE CopyPayToVendorAddressFieldsFromVendor@63(VAR PayToVendor@1000 : Record 23);
    BEGIN
      IF PayToVendorIsReplaced OR ShouldCopyAddressFromPayToVendor(PayToVendor) THEN BEGIN
        "Pay-to Address" := PayToVendor.Address;
        "Pay-to Address 2" := PayToVendor."Address 2";
        "Pay-to City" := PayToVendor.City;
        "Pay-to Post Code" := PayToVendor."Post Code";
        "Pay-to County" := PayToVendor.County;
        "Pay-to Country/Region Code" := PayToVendor."Country/Region Code";
      END;
    END;

    LOCAL PROCEDURE SetShipToAddress@117(ShipToName@1000 : Text[50];ShipToName2@1001 : Text[50];ShipToAddress@1002 : Text[50];ShipToAddress2@1003 : Text[50];ShipToCity@1004 : Text[30];ShipToPostCode@1005 : Code[20];ShipToCounty@1006 : Text[30];ShipToCountryRegionCode@1007 : Code[10]);
    BEGIN
      "Ship-to Name" := ShipToName;
      "Ship-to Name 2" := ShipToName2;
      "Ship-to Address" := ShipToAddress;
      "Ship-to Address 2" := ShipToAddress2;
      "Ship-to City" := ShipToCity;
      "Ship-to Post Code" := ShipToPostCode;
      "Ship-to County" := ShipToCounty;
      "Ship-to Country/Region Code" := ShipToCountryRegionCode;
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromBuyFromVendor@101(BuyFromVendor@1000 : Record 23) : Boolean;
    BEGIN
      EXIT((NOT HasBuyFromAddress) AND BuyFromVendor.HasAddress);
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromPayToVendor@102(PayToVendor@1000 : Record 23) : Boolean;
    BEGIN
      EXIT((NOT HasPayToAddress) AND PayToVendor.HasAddress);
    END;

    LOCAL PROCEDURE BuyFromVendorIsReplaced@96() : Boolean;
    BEGIN
      EXIT((xRec."Buy-from Vendor No." <> '') AND (xRec."Buy-from Vendor No." <> "Buy-from Vendor No."));
    END;

    LOCAL PROCEDURE PayToVendorIsReplaced@97() : Boolean;
    BEGIN
      EXIT((xRec."Pay-to Vendor No." <> '') AND (xRec."Pay-to Vendor No." <> "Pay-to Vendor No."));
    END;

    LOCAL PROCEDURE UpdatePayToAddressFromBuyFromAddress@61(FieldNumber@1000 : Integer);
    BEGIN
      IF ("Order Address Code" = '') AND PayToAddressEqualsOldBuyFromAddress THEN
        CASE FieldNumber OF
          FIELDNO("Pay-to Address"):
            IF xRec."Buy-from Address" = "Pay-to Address" THEN
              "Pay-to Address" := "Buy-from Address";
          FIELDNO("Pay-to Address 2"):
            IF xRec."Buy-from Address 2" = "Pay-to Address 2" THEN
              "Pay-to Address 2" := "Buy-from Address 2";
          FIELDNO("Pay-to City"), FIELDNO("Pay-to Post Code"):
            BEGIN
              IF xRec."Buy-from City" = "Pay-to City" THEN
                "Pay-to City" := "Buy-from City";
              IF xRec."Buy-from Post Code" = "Pay-to Post Code" THEN
                "Pay-to Post Code" := "Buy-from Post Code";
              IF xRec."Buy-from County" = "Pay-to County" THEN
                "Pay-to County" := "Buy-from County";
              IF xRec."Buy-from Country/Region Code" = "Pay-to Country/Region Code" THEN
                "Pay-to Country/Region Code" := "Buy-from Country/Region Code";
            END;
          FIELDNO("Pay-to County"):
            IF xRec."Buy-from County" = "Pay-to County" THEN
              "Pay-to County" := "Buy-from County";
          FIELDNO("Pay-to Country/Region Code"):
            IF  xRec."Buy-from Country/Region Code" = "Pay-to Country/Region Code" THEN
              "Pay-to Country/Region Code" := "Buy-from Country/Region Code";
        END;
    END;

    LOCAL PROCEDURE PayToAddressEqualsOldBuyFromAddress@67() : Boolean;
    BEGIN
      IF (xRec."Buy-from Address" = "Pay-to Address") AND
         (xRec."Buy-from Address 2" = "Pay-to Address 2") AND
         (xRec."Buy-from City" = "Pay-to City") AND
         (xRec."Buy-from County" = "Pay-to County") AND
         (xRec."Buy-from Post Code" = "Pay-to Post Code") AND
         (xRec."Buy-from Country/Region Code" = "Pay-to Country/Region Code")
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE ConfirmCloseUnposted@104() : Boolean;
    VAR
      InstructionMgt@1000 : Codeunit 1330;
    BEGIN
      IF PurchLinesExist THEN
        EXIT(InstructionMgt.ShowConfirm(DocumentNotPostedClosePageQst,InstructionMgt.QueryPostOnCloseCode));
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE InitFromVendor@68(VendorNo@1000 : Code[20];VendorCaption@1001 : Text) : Boolean;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF VendorNo = '' THEN BEGIN
        IF NOT PurchLine.ISEMPTY THEN
          ERROR(Text005,VendorCaption);
        INIT;
        PurchSetup.GET;
        "No. Series" := xRec."No. Series";
        InitRecord;
        InitNoSeries;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitFromContact@69(ContactNo@1000 : Code[20];VendorNo@1001 : Code[20];ContactCaption@1002 : Text) : Boolean;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF (ContactNo = '') AND (VendorNo = '') THEN BEGIN
        IF NOT PurchLine.ISEMPTY THEN
          ERROR(Text005,ContactCaption);
        INIT;
        PurchSetup.GET;
        "No. Series" := xRec."No. Series";
        InitRecord;
        InitNoSeries;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE LookupContact@122(VendorNo@1000 : Code[20];ContactNo@1003 : Code[20];VAR Contact@1001 : Record 5050);
    VAR
      ContactBusinessRelation@1002 : Record 5054;
    BEGIN
      ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
      ContactBusinessRelation.SETRANGE("No.",VendorNo);
      IF ContactBusinessRelation.FINDFIRST THEN
        Contact.SETRANGE("Company No.",ContactBusinessRelation."Contact No.")
      ELSE
        Contact.SETRANGE("Company No.",'');
      IF ContactNo <> '' THEN
        IF Contact.GET(ContactNo) THEN ;
    END;

    PROCEDURE SendRecords@75();
    VAR
      DocumentSendingProfile@1000 : Record 60;
      DummyReportSelections@1001 : Record 77;
    BEGIN
      DocumentSendingProfile.SendVendorRecords(
        DummyReportSelections.Usage::PO,Rec,DocTxt,"Buy-from Vendor No.","No.",
        FIELDNO("Buy-from Vendor No."),FIELDNO("No."));
    END;

    PROCEDURE PrintRecords@74(ShowRequestForm@1002 : Boolean);
    VAR
      DocumentSendingProfile@1001 : Record 60;
      DummyReportSelections@1000 : Record 77;
    BEGIN
      DocumentSendingProfile.TrySendToPrinterVendor(
        DummyReportSelections.Usage::PO,Rec,"Buy-from Vendor No.",ShowRequestForm);
    END;

    PROCEDURE SendProfile@73(VAR DocumentSendingProfile@1000 : Record 60);
    VAR
      DummyReportSelections@1001 : Record 77;
    BEGIN
      DocumentSendingProfile.SendVendor(
        DummyReportSelections.Usage::PO,Rec,"No.","Buy-from Vendor No.",
        DocTxt,FIELDNO("Buy-from Vendor No."),FIELDNO("No."));
    END;

    PROCEDURE BatchConfirmUpdateDeferralDate@78(VAR BatchConfirm@1000 : ' ,Skip,Update';ReplacePostingDate@1001 : Boolean;PostingDateReq@1002 : Date);
    BEGIN
      IF (NOT ReplacePostingDate) OR (PostingDateReq = "Posting Date") OR (BatchConfirm = BatchConfirm::Skip) THEN
        EXIT;

      IF NOT DeferralHeadersExist THEN
        EXIT;

      "Posting Date" := PostingDateReq;
      CASE BatchConfirm OF
        BatchConfirm::" ":
          BEGIN
            ConfirmUpdateDeferralDate;
            IF Confirmed THEN
              BatchConfirm := BatchConfirm::Update
            ELSE
              BatchConfirm := BatchConfirm::Skip;
          END;
        BatchConfirm::Update:
          UpdatePurchLines(PurchLine.FIELDCAPTION("Deferral Code"),FALSE);
      END;
      COMMIT;
    END;

    LOCAL PROCEDURE "NCF>"@1101495004();
    BEGIN
    END;

    LOCAL PROCEDURE SetAutoCreateDocument@1101495005(NewAutoCreateDocument@1101495000 : Boolean);
    BEGIN
      //NC MTF01 > PCH
      AutoCreateDocument := NewAutoCreateDocument;
      //NC MTF01 < PCH
    END;

    BEGIN
    {
      NC TR266 EB "Vendor Posting Group" editable = true
      NC TR053 EB Добавлен код по обновлению Description
      NC TR272 DP Added field Preview
      NC MTF01 PCH добавлены поля для консолидации
      NC OAM22 DP Изменено свойство Caption Class полей ..(LCY)
      NC OAM27 DP Снят контроль на наличие учетых групп в карточке
      NC OAM31 PCH Перевод измерений по договрам по умолчанию на таблицу Default Dimension Advanced
      NC OAM32 AIG Если срок договора не указан, то договор считается бессрочным
      TDRA > Create Build001 NAVW15.00.01,NAVRU5.00.01.03,NCTR266,TR053,TR272,MTF01,OAM22,OAM27,OAM31,OAM32
      TDRANCS-875 >
        Modify OnValidate "VAT Bus. Posting Group" (check date)
      -----
      NC NOS-26 SPA
      NC NOS-26 ENK
    }
    END.
  }
}

