OBJECT Page 9807 User Card
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=User Card;
               RUS=Карта пользователя];
    SourceTable=Table2000000120;
    DataCaptionExpr="Full Name";
    DelayedInsert=Yes;
    PageType=Card;
    OnInit=BEGIN
             DeployedToAzure := IdentityManagement.IsAzure;
           END;

    OnOpenPage=VAR
                 PermissionManager@1000 : Codeunit 9002;
               BEGIN
                 SoftwareAsAService := PermissionManager.SoftwareAsAService;

                 HideExternalUsers;

                 IsWindowsClient := (CURRENTCLIENTTYPE = CLIENTTYPE::Windows);
               END;

    OnAfterGetRecord=VAR
                       PermissionManager@1000 : Codeunit 9002;
                     BEGIN
                       WindowsUserName := IdentityManagement.UserName("Windows Security ID");

                       TESTFIELD("User Name");

                       Password := IdentityManagement.GetMaskedNavPassword("User Security ID");
                       ACSStatus := IdentityManagement.GetACSStatus("User Security ID");
                       WebServiceExpiryDate := IdentityManagement.GetWebServiceExpiryDate("User Security ID");
                       AuthenticationStatus := IdentityManagement.GetAuthenticationStatus("User Security ID");
                       HasExchangeIdentifier := "Exchange Identifier" <> '';
                       InitialState := State;

                       IF NOT ISNULLGUID("Application ID") THEN
                         ApplicationID := "Application ID";

                       IF PermissionManager.SoftwareAsAService AND (USERID <> "User Name") THEN BEGIN
                         AllowChangeWebServiceAccessKey := FALSE;
                         WebServiceID := '*************************************';
                       END ELSE BEGIN
                         AllowChangeWebServiceAccessKey := TRUE;
                         WebServiceID := IdentityManagement.GetWebServicesKey("User Security ID");
                       END;
                     END;

    OnNewRecord=VAR
                  PermissionManager@1001 : Codeunit 9002;
                BEGIN
                  IF PermissionManager.SoftwareAsAService THEN
                    ERROR(CannotCreateUsersErr);
                  WindowsUserName := '';
                  Password := '';
                  "Change Password" := FALSE;
                  WebServiceID := '';
                  CLEAR(WebServiceExpiryDate);
                END;

    OnInsertRecord=BEGIN
                     "User Security ID" := CREATEGUID;
                     TESTFIELD("User Name");
                   END;

    OnModifyRecord=BEGIN
                     TESTFIELD("User Name");
                   END;

    OnDeleteRecord=BEGIN
                     IF SoftwareAsAService THEN
                       ERROR(CannotDeleteUsersErr)
                   END;

    OnQueryClosePage=BEGIN
                       IF "User Name" <> '' THEN
                         EXIT(ValidateAuthentication);
                     END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=Authentication;
                                 RUS=Проверка подлинности] }
      { 21      ;2   ;Action    ;
                      Name=AcsSetup;
                      CaptionML=[ENU=&ACS Setup;
                                 RUS=Настройка &ACS];
                      ToolTipML=[ENU=Set up Access Control Service authentication, such as generating an authentication key that the user can use to connect to Azure.;
                                 RUS=Настройка проверки подлинности для службы управления доступом, например для подключения к Azure можно генерировать ключ проверки подлинности.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=NOT SoftwareAsAService;
                      PromotedIsBig=Yes;
                      Image=ServiceSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditACSStatus;
                               END;
                                }
      { 24      ;2   ;Action    ;
                      Name=ChangePassword;
                      CaptionML=[ENU=Change &Password;
                                 RUS=Изменить &пароль];
                      ToolTipML=[ENU=Change the user's password if the user connects using password authentication.;
                                 RUS=Изменение пароля пользователя, если для подключения применяется проверка подлинности на основе пароля.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=NOT SoftwareAsAService;
                      PromotedIsBig=Yes;
                      Image=EncryptionKeys;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditNavPassword;
                               END;
                                }
      { 20      ;2   ;Action    ;
                      Name=ChangeWebServiceAccessKey;
                      CaptionML=[ENU=Change &Web Service Key;
                                 RUS=Изменить ключ &веб-службы];
                      ToolTipML=[ENU=Set up the key that web services use to access your data, and then specify the key on the user card for the relevant user accounts.;
                                 RUS=Настройка ключа, который веб-служба использует для доступа к вашим данным, и указание этого ключа в карточках соответствующих пользователей.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=AllowChangeWebServiceAccessKey;
                      PromotedIsBig=Yes;
                      Image=ServiceCode;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditWebServiceID;
                               END;
                                }
      { 35      ;2   ;Action    ;
                      Name=DeleteExchangeIdentifier;
                      CaptionML=[ENU=Delete Exchange Identifier Mapping;
                                 RUS=Удалить сопоставление идентификаторов Exchange];
                      ToolTipML=[ENU=Delete the document exchange mapping for the current user.;
                                 RUS=Удаление сопоставления обмена документами для текущего пользователя.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasExchangeIdentifier;
                      Image=DeleteXML;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(ConfirmRemoveExchangeIdentifierQst) THEN
                                   EXIT;

                                 CLEAR("Exchange Identifier");
                                 MODIFY(TRUE);
                                 HasExchangeIdentifier := FALSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=[ENU=General;
                           RUS=Общее];
                GroupType=Group }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=User Security ID;
                           RUS=Код безопасности пользователя];
                ToolTipML=[ENU=Specifies an ID that uniquely identifies the user. This value is generated automatically and should not be changed.;
                           RUS=Определяет код, который уникальным образом идентифицирует пользователя. Значение формируется автоматически и не может быть изменено.];
                SourceExpr="User Security ID";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the user's name. If the user is required to present credentials when starting the client, this is the name that the user must present.;
                           RUS=Определяет имя пользователя. Если пользователю нужно указать учетные данные при запуске клиента, это имя, которое пользователь должен ввести.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User Name";
                Importance=Promoted;
                OnValidate=BEGIN
                             IF xRec."User Name" <> "User Name" THEN
                               ValidateUserName;
                           END;
                            }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the full name of the user.;
                           RUS=Определяет полное имя пользователя.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Full Name";
                Editable=NOT SoftwareAsAService }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of license that applies to the user.;
                           RUS=Определяет тип лицензии, которая применяется к пользователю.];
                ApplicationArea=#All;
                SourceExpr="License Type";
                Visible=NOT SoftwareAsAService }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the user's login is enabled.;
                           RUS=Указывает, включен ли вход пользователя.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=State;
                Importance=Promoted }

    { 13  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a date past which the user will no longer be authorized to log on to the Windows client.;
                           RUS=Определяет дату, после которой пользователю больше не будет разрешен вход в клиент Windows.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Expiry Date";
                Visible=NOT SoftwareAsAService }

    { 29  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the user's email address.;
                           RUS=Определяет адрес электронной почты пользователя.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Contact Email" }

    { 11  ;1   ;Group     ;
                Name=Windows Authentication;
                CaptionML=[ENU=Windows Authentication;
                           RUS=Аутентификация Windows];
                Visible=(NOT DeployedToAzure) AND (NOT SoftwareAsAService);
                GroupType=Group }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the Windows Security ID of the user. This is only relevant for Windows authentication.;
                           RUS=Определяет код безопасности Windows для пользователя. Поле относится только к случаю, когда используется проверка подлинности Windows.];
                SourceExpr="Windows Security ID";
                Visible=FALSE }

    { 38  ;2   ;Field     ;
                Name=Windows User Name;
                AssistEdit=No;
                CaptionML=[ENU=Windows User Name;
                           RUS=Имя пользователя Windows];
                ToolTipML=[ENU=Specifies the name of a valid Active Directory user, using the format domain\username.;
                           RUS=Определяет имя зарегистрированного пользователя Active Directory в формате домен\имя_пользователя.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WindowsUserName;
                Importance=Promoted;
                Visible=NOT IsWindowsClient;
                OnValidate=BEGIN
                             ValidateWindowsUserName;
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=Windows User Name Desktop;
                AssistEdit=Yes;
                CaptionML=[ENU=Windows User Name;
                           RUS=Имя пользователя Windows];
                ToolTipML=[ENU=Specifies the name of a valid Active Directory user, using the format domain\username.;
                           RUS=Определяет имя зарегистрированного пользователя Active Directory в формате домен\имя_пользователя.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WindowsUserName;
                Importance=Promoted;
                Visible=IsWindowsClient;
                OnValidate=BEGIN
                             ValidateWindowsUserName;
                           END;

                OnAssistEdit=VAR
                               DSOP@1000 : DotNet "'Microsoft.Dynamics.Nav.Management.DSObjectPickerWrapper, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Management.DSObjectPicker.DSObjectPickerWrapper" RUNONCLIENT;
                               result@1001 : Text;
                             BEGIN
                               DSOP := DSOP.DSObjectPickerWrapper;
                               result := DSOP.InvokeDialogAndReturnSid;
                               IF result <> '' THEN BEGIN
                                 "Windows Security ID" := result;
                                 ValidateSid;
                                 WindowsUserName := IdentityManagement.UserName("Windows Security ID");
                                 SetUserName;
                               END;
                             END;
                              }

    { 31  ;1   ;Group     ;
                Name=ACS Authentication;
                CaptionML=[ENU=Access Control Service Authentication;
                           RUS=Проверка подлинности службы управления доступом];
                Visible=NOT SoftwareAsAService;
                GroupType=Group }

    { 22  ;2   ;Field     ;
                DrillDown=No;
                AssistEdit=Yes;
                CaptionML=[ENU=ACS Access Status;
                           RUS=Статус доступа к ACS];
                ToolTipML=[ENU=Specifies the user's status for ACS authentication. When you start creating a user, the status is Disabled. After you create a user, the status changes to Pending. After the user logs on successfully, the status changes to Enabled.;
                           RUS=Определяет статус пользователя при проверке подлинности ACS. При начале создания пользователя он имеет статус "Отключено". После создания пользователя статус меняется на "В ожидании". После успешного входа пользователя статус меняется на "Включено".];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ACSStatus;
                Importance=Promoted;
                Visible=NOT SoftwareAsAService;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditACSStatus;
                             END;
                              }

    { 15  ;1   ;Group     ;
                Name=NAV Password Authentication;
                CaptionML=[ENU=Microsoft Dynamics NAV Password Authentication;
                           RUS=Проверка подлинности пароля Microsoft Dynamics NAV];
                Visible=NOT SoftwareAsAService;
                GroupType=Group }

    { 25  ;2   ;Field     ;
                ExtendedDatatype=Masked;
                AssistEdit=Yes;
                CaptionML=[ENU=Password;
                           RUS=Пароль];
                ToolTipML=[ENU=Specifies an initial password for the user. To sign in to the client, the user must provide the name that is specified in the User Name field and this password.;
                           RUS=Определяет начальный пароль пользователя. Чтобы войти в клиент, пользователь должен указать имя, заданное в поле "Имя пользователя" и этот пароль.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Password;
                Importance=Standard;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditNavPassword;
                             END;
                              }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=User must change password at next login;
                           RUS=Пользователь должен изменить пароль при следующем входе в систему];
                ToolTipML=[ENU=Specifies if the user will be prompted to change the password at next login.;
                           RUS=Определяет, будет ли пользователю предложено сменить пароль при следующем входе в систему.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Change Password" }

    { 19  ;1   ;Group     ;
                Name=Web Service Access;
                CaptionML=[ENU=Web Service Access;
                           RUS=Доступ к веб-службе];
                GroupType=Group }

    { 23  ;2   ;Field     ;
                AssistEdit=Yes;
                CaptionML=[ENU=Web Service Access Key;
                           RUS=Ключ доступа к веб-службе];
                ToolTipML=[ENU=Specifies a generated key that Dynamics NAV web service applications can use to authenticate to Dynamics NAV services. Choose the AssistEdit button to generate a key.;
                           RUS=Определяет сгенерированный ключ приложений веб-службы Dynamics NAV, используемый для проверки подлинности в службах Dynamics NAV. Чтобы сгенерировать ключ, нажмите кнопку AssistEdit.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WebServiceID;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditWebServiceID;
                             END;
                              }

    { 30  ;2   ;Field     ;
                CaptionML=[ENU=Web Service Expiry Date;
                           RUS=Дата окончания срока действия веб-службы];
                ToolTipML=[ENU=Specifies an expiration date for the web services access key.;
                           RUS=Определяет дату окончания срока действия ключа доступа к веб-службам.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WebServiceExpiryDate;
                Importance=Promoted;
                Editable=FALSE }

    { 27  ;1   ;Group     ;
                Name=Office 365 Authentication;
                CaptionML=[@@@="{Locked=""Office 365""}";
                           ENU=Office 365 Authentication;
                           RUS=Проверка подлинности Office 365];
                GroupType=Group }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the Microsoft account that this user signs into Office 365 or SharePoint Online with.;
                           RUS=Определяет учетную запись Microsoft, с которой пользователь входит в Office 365 и SharePoint Online.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Authentication Email";
                Editable=NOT SoftwareAsAService;
                OnValidate=BEGIN
                             IdentityManagement.SetAuthenticationEmail("User Security ID","Authentication Email");
                             CurrPage.SAVERECORD;
                             AuthenticationStatus := IdentityManagement.GetAuthenticationStatus("User Security ID");
                           END;
                            }

    { 36  ;2   ;Field     ;
                Name=ApplicationID;
                CaptionML=[ENU=Application ID;
                           RUS=Код приложения];
                ToolTipML=[ENU=Specifies the client ID of the Microsoft Azure Active Directory application when authenticating web-service calls. This field is only relevant when the Dynamics NAV user is used for web services.;
                           RUS=Определяет код клиента приложения Microsoft Azure Active Directory при проверке подлинности обращений к веб-службе. Это поле имеет смысл только в тех случаях, когда обращение к веб-службам осуществляется от имени пользователя Dynamics NAV.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplicationID;
                OnValidate=BEGIN
                             IF ApplicationID = '' THEN
                               CLEAR("Application ID")
                             ELSE
                               "Application ID" := ApplicationID
                           END;
                            }

    { 34  ;2   ;Field     ;
                Name=MappedToExchangeIdentifier;
                CaptionML=[ENU=Mapped To Exchange Identifier;
                           RUS=Сопоставлено с идентификатором Exchange];
                ToolTipML=[ENU=Specifies whether the user is mapped to a Microsoft Exchange identifier, which enables the user to access Dynamics NAV from Exchange applications (such as Outlook) without having to sign-in.;
                           RUS=Указывает, сопоставлен ли пользователь идентификатору Microsoft Exchange, который позволяет обращаться к Dynamics NAV из приложений Exchange (например, из Outlook) без необходимости повторного входа.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=HasExchangeIdentifier;
                Editable=FALSE;
                Style=StandardAccent;
                StyleExpr=TRUE }

    { 32  ;2   ;Field     ;
                Name=AuthenticationStatus;
                CaptionML=[ENU=Authentication Status;
                           RUS=Статус проверки подлинности];
                ToolTipML=[ENU=Specifies the user's status for Office 365 authentication. When you start to create a user, the status is Disabled. After you specify an authentication email address for the user, the status changes to Inactive. After the user logs on successfully, the status changes to Active.;
                           RUS=Определяет статус пользователя при проверке подлинности Office 365. При начале создания пользователя он имеет статус "Отключено". После указания адреса электронной почты для проверки подлинности пользователя статус меняется на "Неактивно". После успешного входа пользователя статус меняется на "Активно".];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AuthenticationStatus;
                Editable=FALSE }

    { 33  ;1   ;Part      ;
                Name=UserGroups;
                CaptionML=[ENU=User Groups;
                           RUS=Группы пользователей];
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User Security ID=FIELD(User Security ID);
                PagePartID=Page9833;
                PartType=Page }

    { 14  ;1   ;Part      ;
                Name=Permissions;
                CaptionML=[ENU=User Permission Sets;
                           RUS=Наборы разрешений пользователя];
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User Security ID=FIELD(User Security ID);
                PagePartID=Page9801;
                PartType=Page }

    { 16  ;    ;Container ;
                ContainerType=FactBoxArea }

    { 17  ;1   ;Part      ;
                PartType=System;
                SystemPartID=Notes }

    { 18  ;1   ;Part      ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      UserSecID@1007 : Record 2000000120;
      IdentityManagement@1011 : Codeunit 9801;
      WindowsUserName@1000 : Text[208];
      Text001@1003 : TextConst 'ENU=The account %1 is not a valid Windows account.;RUS=Учетная запись %1 не является допустимой учетной записью Windows.';
      Text002@1002 : TextConst 'ENU=The account %1 already exists.;RUS=Счет %1 уже существует.';
      Text003@1001 : TextConst 'ENU=The account %1 is not allowed.;RUS=Учетная запись %1 является недопустимой.';
      Password@1006 : Text[80];
      ACSStatus@1008 : 'Disabled,Pending,Registered,Unknown';
      WebServiceID@1009 : Text[80];
      Confirm001Qst@1010 : TextConst 'ENU=The current Web Service Access Key will not be valid after editing. All clients that use it have to be updated. Do you want to continue?;RUS=Текущий ключ доступа к веб-службе станет недействителен после редактирования. Потребуется обновить все клиенты, использующие его. Продолжить?';
      WebServiceExpiryDate@1012 : DateTime;
      Confirm002Qst@1013 : TextConst 'ENU=You have not completed all necessary fields for the Credential Type that this client is currently using. The user will not be able to log in unless you provide a value in the %1 field. Are you sure that you want to close the window?;RUS=Заполнены не все обязательные поля для типа учетных данных, в настоящее время используемого этим клиентом. Пользователь не сможет выполнить вход в систему, если в поле %1 не будет указано значение. Вы действительно хотите закрыть окно?';
      DeployedToAzure@1014 : Boolean INDATASET;
      Confirm003Qst@1005 : TextConst 'ENU=The user will not be able to sign in unless you change the state to Enabled. Are you sure that you want to close the page?;RUS=Пользователь не сможет выполнить вход в систему, если не изменить состояние на "Включено". Вы действительно хотите закрыть страницу?';
      HasExchangeIdentifier@1016 : Boolean;
      AuthenticationStatus@1004 : 'Disabled,Inactive,Active';
      Confirm004Qst@1015 : TextConst 'ENU=The user will not be able to sign in because no authentication data was provided. Are you sure that you want to close the page?;RUS=Пользователь не сможет выполнить вход в систему, так как данные проверки подлинности не указаны. Вы действительно хотите закрыть страницу?';
      ConfirmRemoveExchangeIdentifierQst@1017 : TextConst 'ENU=If you delete the Exchange Identifier Mapping, the user will no longer automatically be signed in when they use Exchange applications.\Do you want to continue?;RUS=После удаления сопоставления идентификаторов Exchange пользователь уже не будет автоматически входить в систему при использовании приложений Exchange.\Продолжить?';
      SoftwareAsAService@1018 : Boolean;
      ApplicationID@1019 : Text;
      CannotCreateUsersErr@1020 : TextConst 'ENU=You cannot add users on this page. Administrators can add users in the Office 365 administration portal.;RUS=Вы не можете добавлять пользователей на этой странице. Администраторы могут добавлять пользователей на портале администрирования Office 365.';
      AllowChangeWebServiceAccessKey@1021 : Boolean;
      IsWindowsClient@1024 : Boolean;
      CannotDeleteUsersErr@1022 : TextConst 'ENU=You cannot delete users on this page. Administrators can delete users in the Office 365 administration portal.;RUS=Вы не можете удалять пользователей на этой странице. Администраторы могут удалять пользователей на портале администрирования Office 365.';
      InitialState@1023 : Option;

    LOCAL PROCEDURE ValidateSid@1();
    VAR
      User@1000 : Record 2000000120;
    BEGIN
      IF "Windows Security ID" = '' THEN
        ERROR(Text001,"User Name");

      IF ("Windows Security ID" = 'S-1-1-0') OR ("Windows Security ID" = 'S-1-5-7') OR ("Windows Security ID" = 'S-1-5-32-544') THEN
        ERROR(Text003,IdentityManagement.UserName("Windows Security ID"));

      User.SETFILTER("Windows Security ID","Windows Security ID");
      User.SETFILTER("User Security ID",'<>%1',"User Security ID");
      IF NOT User.ISEMPTY THEN
        ERROR(Text002,WindowsUserName);
    END;

    LOCAL PROCEDURE ValidateAuthentication@7() : Boolean;
    VAR
      ValidationField@1000 : Text;
    BEGIN
      UserSecID.RESET;
      IF (UserSecID.COUNT = 1) OR (USERSECURITYID = "User Security ID") THEN BEGIN
        IF IdentityManagement.IsWindowsAuthentication AND ("Windows Security ID" = '') THEN
          ValidationField := 'Windows User Name';

        IF IdentityManagement.IsUserNamePasswordAuthentication AND (Password = '') THEN
          ValidationField := 'Password';

        IF IdentityManagement.IsAccessControlServiceAuthentication AND (ACSStatus = 0) AND (AuthenticationStatus = 0) THEN
          ValidationField := 'ACSStatus / AuthenticationStatus';

        IF ValidationField <> '' THEN
          EXIT(CONFIRM(Confirm002Qst,FALSE,ValidationField));
      END ELSE BEGIN
        IF ("Windows Security ID" = '') AND (Password = '') AND (ACSStatus = 0) AND (AuthenticationStatus = 0) THEN
          EXIT(CONFIRM(Confirm004Qst,FALSE));
      END;

      IF (InitialState = State::Enabled) AND (State = State::Disabled) THEN
        EXIT(CONFIRM(Confirm003Qst,FALSE));

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateUserName@3();
    VAR
      UserMgt@1000 : Codeunit 418;
    BEGIN
      UserMgt.ValidateUserName(Rec,xRec,WindowsUserName);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE EditWebServiceID@6();
    VAR
      PermissionManager@1001 : Codeunit 9002;
      SetWebServiceAccessKey@1000 : Page 9812;
    BEGIN
      IF PermissionManager.SoftwareAsAService AND (USERSECURITYID <> "User Security ID") THEN
        EXIT;

      TESTFIELD("User Name");

      IF CONFIRM(Confirm001Qst) THEN BEGIN
        UserSecID.SETCURRENTKEY("User Security ID");
        UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
        SetWebServiceAccessKey.SETRECORD(UserSecID);
        SetWebServiceAccessKey.SETTABLEVIEW(UserSecID);
        IF SetWebServiceAccessKey.RUNMODAL = ACTION::OK THEN
          CurrPage.UPDATE;
      END;
    END;

    LOCAL PROCEDURE EditNavPassword@8();
    VAR
      SetPassword@1000 : Page 9810;
    BEGIN
      TESTFIELD("User Name");

      CurrPage.SAVERECORD;
      COMMIT;

      UserSecID.SETCURRENTKEY("User Security ID");
      UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
      SetPassword.SETRECORD(UserSecID);
      SetPassword.SETTABLEVIEW(UserSecID);
      IF SetPassword.RUNMODAL = ACTION::OK THEN
        CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE EditACSStatus@9();
    VAR
      UserACSSetup@1000 : Page 9811;
    BEGIN
      TESTFIELD("User Name");

      UserSecID.SETCURRENTKEY("User Security ID");
      UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
      UserACSSetup.SETRECORD(UserSecID);
      UserACSSetup.SETTABLEVIEW(UserSecID);
      IF UserACSSetup.RUNMODAL = ACTION::OK THEN
        CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SetUserName@4();
    BEGIN
      "User Name" := WindowsUserName;
      ValidateUserName;
    END;

    LOCAL PROCEDURE HideExternalUsers@2();
    VAR
      PermissionManager@1001 : Codeunit 9002;
      OriginalFilterGroup@1000 : Integer;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT;

      OriginalFilterGroup := FILTERGROUP;
      FILTERGROUP := 2;
      SETFILTER("License Type",'<>%1',"License Type"::"External User");
      FILTERGROUP := OriginalFilterGroup;
    END;

    LOCAL PROCEDURE ValidateWindowsUserName@5();
    VAR
      UserSID@1001 : Text;
    BEGIN
      IF WindowsUserName = '' THEN
        "Windows Security ID" := ''
      ELSE BEGIN
        UserSID := SID(WindowsUserName);
        WindowsUserName := IdentityManagement.UserName(UserSID);
        IF WindowsUserName <> '' THEN BEGIN
          "Windows Security ID" := UserSID;
          ValidateSid;
          SetUserName;
        END ELSE
          ERROR(Text001,WindowsUserName);
      END;
    END;

    BEGIN
    END.
  }
}

