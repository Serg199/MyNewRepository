OBJECT Codeunit 17460 Personified Accounting Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15.09.15;
    Time=12:00:00;
    Version List=NAVRU9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1210000 : Record 79;
      HRSetup@1210006 : Record 5218;
      LocalMgt@1210004 : Codeunit 12400;
      LocalReportMgt@1210001 : Codeunit 12401;
      ExcelMgt@1210005 : Codeunit 12416;
      PayrollAnalysisReportMgt@1210019 : Codeunit 14960;
      XMLCurrNode@1210003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1210002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Text001@1210007 : TextConst 'ENU=Export data to Excel\ @1@@@@@@@@@@@@@;RUS=Экспорт данных в Excel\ @1@@@@@@@@@@@@@';
      Text002@1210008 : TextConst 'ENU=Export;RUS=Экспорт';
      Text003@1210009 : TextConst 'ENU=All Files (*.*)|*.*;RUS=Все Файлы (*.*)|*.*';
      Text004@1210011 : TextConst 'ENU=%1 must be the first day of the month.;RUS=%1 должно быть первым днем месяца.';
      Text005@1210013 : TextConst 'ENU=%1 must be the first day of the quarter.;RUS=%1 должно быть первым днем квартала.';
      Text006@1210012 : TextConst 'ENU=%1 must be the last day of the month.;RUS=%1 должно быть последним днем месяца.';
      Text007@1210014 : TextConst 'ENU=%1 must be the last day of the quarter.;RUS=%1 должна быть последним днем квартала.';
      Text008@1210015 : TextConst 'ENU=%1 must be filled in.;RUS=%1 должно быть заполнено.';
      Text009@1210017 : TextConst 'ENU=Period Starting Date;RUS=Дата начала периода';
      Text010@1210016 : TextConst 'ENU=Period Ending Date;RUS=Дата окончания периода';
      Text011@1210018 : TextConst 'ENU=Creation Date;RUS=Дата создания';
      Text013@1210020 : TextConst 'ENU=%1 cannot be greater then %2.;RUS=%1 не может быть больше %2.';
      Text014@121000 : TextConst 'ENU=%1 must be defined for person %2.;RUS=Необходимо определить %1 для физического лица %2.';
      AddressType@121001 : 'Permanent,Registration,Birthplace,Other';
      Text015@121002 : TextConst 'ENU=Registration address;RUS=Адрес регистрации';
      Text016@121003 : TextConst 'ENU="Birthplace address ";RUS="Адрес места рождения "';
      HRSetupRead@121004 : Boolean;
      CONTRACTTxt@1210010 : TextConst '@@@={Locked};ENU=CONTRACT;RUS=CONTRACT';
      ContractType1Txt@1210021 : TextConst '@@@={Locked};ENU=LABOR;RUS=LABOR';
      ContractType2Txt@1210022 : TextConst '@@@={Locked};ENU=CIVIL;RUS=CIVIL';
      LineTypeTxt@1210023 : TextConst '@@@={Locked};ENU=LineType;RUS=LineType';
      LineNumberTxt@1210044 : TextConst '@@@={Locked};ENU=LineNumber;RUS=LineNumber';
      MonthTxt@1210024 : TextConst '@@@={Locked};ENU=Month;RUS=Month';
      ITOGTxt@1210025 : TextConst '@@@={Locked};ENU=ITOG;RUS=ITOG';
      ITOGOTxt@1210027 : TextConst '@@@={Locked};ENU=ITOGO;RUS=ITOGO';
      MESCTxt@1210026 : TextConst '@@@={Locked};ENU=MESC;RUS=MESC';
      DocumentTypeTxt@1210028 : TextConst '@@@={Locked};ENU=DocumentType;RUS=DocumentType';
      QuantityTxt@1210029 : TextConst '@@@={Locked};ENU=Quantity;RUS=Quantity';
      CategoryCodeTxt@1210030 : TextConst '@@@={Locked};ENU=CategoryCode;RUS=CategoryCode';
      ContractTypeTxt@1210031 : TextConst '@@@={Locked};ENU=ContractType;RUS=ContractType';
      ReportingPeriodTxt@1210045 : TextConst '@@@={Locked};ENU=ReportingPeriod;RUS=ReportingPeriod';
      ReportingYearTxt@1210032 : TextConst '@@@={Locked};ENU=ReportingYear;RUS=ReportingYear';
      DocumentCollectionTxt@1210033 : TextConst '@@@={Locked};ENU=DocumentCollection;RUS=DocumentCollection';
      DocumentPresenceTxt@1210034 : TextConst '@@@={Locked};ENU=DocumentPresence;RUS=DocumentPresence';
      NumberInPackTxt@1210035 : TextConst '@@@={Locked};ENU=NumberInPack;RUS=NumberInPack';
      CreationDateTxt@1210036 : TextConst '@@@={Locked};ENU=CreationDate;RUS=CreationDate';
      CreationDateAsOfTxt@1210075 : TextConst '@@@={Locked};ENU=CreationDateAsOf;RUS=CreationDateAsOf';
      PackNumberTxt@1210037 : TextConst '@@@={Locked};ENU=PackNumber;RUS=PackNumber';
      PrimaryTxt@1210038 : TextConst '@@@={Locked};ENU=Primary;RUS=Primary';
      FormTypeTxt@1210039 : TextConst '@@@={Locked};ENU=FormType;RUS=FormType';
      RegistrationNumberTxt@1210040 : TextConst '@@@={Locked};ENU=RegistrationNumber;RUS=RegistrationNumber';
      InsuranceNumberTxt@1210041 : TextConst '@@@={Locked};ENU=InsuranceNumber;RUS=InsuranceNumber';
      TaxNumberTxt@1210070 : TextConst '@@@={Locked};ENU=TaxNumberTxt;RUS=TaxNumberTxt';
      ShortNameTxt@1210042 : TextConst '@@@={Locked};ENU=ShortName;RUS=ShortName';
      FillDateTxt@1210043 : TextConst '@@@={Locked};ENU=FillDate;RUS=FillDate';
      QuarterTxt@1210046 : TextConst '@@@={Locked};ENU=Quarter;RUS=Quarter';
      YearTxt@1210047 : TextConst '@@@={Locked};ENU=Year;RUS=Year';
      MaleTxt@1210048 : TextConst '@@@={Locked};ENU=M;RUS=M';
      FemaleTxt@1210049 : TextConst '@@@={Locked};ENU=F;RUS=F';
      FilePFRTxt@1210050 : TextConst '@@@={Locked};ENU=FilePFR;RUS=FilePFR';
      FileNameTxt@1210051 : TextConst '@@@={Locked};ENU=FileName;RUS=FileName';
      PackContentTxt@1210052 : TextConst '@@@={Locked};ENU=PACK CONTENT;RUS=PACK CONTENT';
      PackContentTypeTxt@1210053 : TextConst '@@@={Locked};ENU=PackContentType;RUS=PackContentType';
      IncomingContentTxt@1210054 : TextConst '@@@={Locked};ENU=INCOMING_CONTENT;RUS=INCOMING_CONTENT';
      IncomingDocumentPackTxt@1210055 : TextConst '@@@={Locked};ENU=IncomingDocumentPack;RUS=IncomingDocumentPack';
      PartOfFileTxt@1210056 : TextConst '@@@={Locked};ENU=Part of file;RUS=Part of file';
      SurroundingTxt@1210057 : TextConst '@@@={Locked};ENU=Surrounding;RUS=Surrounding';
      StageTxt@1210058 : TextConst '@@@={Locked};ENU=Stage;RUS=Stage';
      BeforeProcessingTxt@1210059 : TextConst '@@@={Locked};ENU=Before Processing;RUS=Before Processing';
      AnketaIPTxt@1210060 : TextConst '@@@={Locked};ENU=ANKETA_IP;RUS=ANKETA_IP';
      FileHeaderTxt@1210061 : TextConst '@@@={Locked};ENU=FileHeader;RUS=FileHeader';
      FileTypeTxt@1210063 : TextConst '@@@={Locked};ENU=FileType;RUS=FileType';
      FormatVersionTxt@1210062 : TextConst '@@@={Locked};ENU=FormatVersion;RUS=FormatVersion';
      GenderTxt@1210064 : TextConst '@@@={Locked};ENU=Gender;RUS=Gender';
      DataPreparationProgramTxt@1210065 : TextConst '@@@={Locked};ENU=DataPreparationProgram;RUS=DataPreparationProgram';
      ProgramNameTxt@1210066 : TextConst '@@@={Locked};ENU=ProgramName;RUS=ProgramName';
      VersionTxt@1210067 : TextConst '@@@={Locked};ENU=Version;RUS=Version';
      DataSourceTxt@1210068 : TextConst '@@@={Locked};ENU=DataSourceTxt;RUS=DataSourceTxt';
      INSURERTxt@1210069 : TextConst '@@@={Locked};ENU=INSURER;RUS=INSURER';
      TotalContributionToInsuredTxt@1210071 : TextConst '@@@={Locked};ENU=TotalContributionToInsured;RUS=TotalContributionToInsured';
      TotalContributionToAccumulatedTxt@1210072 : TextConst '@@@={Locked};ENU=TotalContributionToAccumulated;RUS=TotalContributionToAccumulated';
      AccruedTxt@1210073 : TextConst '@@@={Locked};ENU=Accrued;RUS=Accrued';
      PaidTxt@1210074 : TextConst '@@@={Locked};ENU=Paid;RUS=Paid';
      NameTxt@1210076 : TextConst '@@@={Locked};ENU=Name;RUS=Name';
      FromToTxt@1210077 : TextConst '@@@={Locked};ENU=from %1 to %2;RUS=from %1 to %2';
      INNTxt@1210078 : TextConst '@@@={Locked};ENU=INN;RUS=INN';
      KPPTxt@1210079 : TextConst '@@@={Locked};ENU=KPP;RUS=KPP';
      FIOTxt@1210080 : TextConst '@@@={Locked};ENU=FIO;RUS=FIO';
      LastNameTxt@1210081 : TextConst '@@@={Locked};ENU=LastName;RUS=LastName';
      FirstNameTxt@1210082 : TextConst '@@@={Locked};ENU=FirstName;RUS=FirstName';
      MiddleNameTxt@1210083 : TextConst '@@@={Locked};ENU=MiddleName;RUS=MiddleName';
      AbbreviationTxt@1210084 : TextConst '@@@={Locked};ENU=Abbreviation;RUS=Abbreviation';
      AddressTypeTxt@1210085 : TextConst '@@@={Locked};ENU=AddressType;RUS=AddressType';
      InformationTypeTxt@1210086 : TextConst '@@@={Locked};ENU=InformationType;RUS=InformationType';
      ORIGINALTxt@1210087 : TextConst '@@@={Locked};ENU=ORIGINAL;RUS=ORIGINAL';
      CORRECTIVETxt@1210088 : TextConst '@@@={Locked};ENU=CORRECTIVE;RUS=CORRECTIVE';
      CANCELLATIONTxt@1210089 : TextConst '@@@={Locked};ENU=CANCELLATION;RUS=CANCELLATION';
      RUSSIANTxt@1210090 : TextConst '@@@={Locked};ENU=RUSSIAN;RUS=RUSSIAN';
      PostCodeTxt@1210091 : TextConst '@@@={Locked};ENU=PostCode;RUS=PostCode';
      RussianAddressTxt@1210092 : TextConst '@@@={Locked};ENU=RussianAddress;RUS=RussianAddress';
      AddressConditionTxt@1210093 : TextConst '@@@={Locked};ENU=AddressCondition;RUS=AddressCondition';
      VALIDTxt@1210094 : TextConst '@@@={Locked};ENU=VALID;RUS=VALID';
      RegionTxt@1210095 : TextConst '@@@={Locked};ENU=Region;RUS=Region';
      CountyTxt@1210096 : TextConst '@@@={Locked};ENU=County;RUS=County';
      CityTxt@1210097 : TextConst '@@@={Locked};ENU=City;RUS=City';
      StreetTxt@1210098 : TextConst '@@@={Locked};ENU=Street;RUS=Street';
      HouseTxt@1210099 : TextConst '@@@={Locked};ENU=House;RUS=House';
      BlockTxt@1210100 : TextConst '@@@={Locked};ENU=Block;RUS=Block';
      FlatTxt@1210101 : TextConst '@@@={Locked};ENU=Flat;RUS=Flat';
      HTxt@1210102 : TextConst '@@@={Locked};ENU=H;RUS=H';
      BLCKTxt@1210103 : TextConst '@@@={Locked};ENU=BLCK;RUS=BLCK';
      FLTxt@1210104 : TextConst '@@@={Locked};ENU=FL;RUS=FL';
      FOREIGNTxt@1210105 : TextConst '@@@={Locked};ENU=FOREIGN;RUS=FOREIGN';
      ForeignAddressTxt@1210106 : TextConst '@@@={Locked};ENU=ForeignAddress;RUS=ForeignAddress';
      CountryCodeTxt@1210107 : TextConst '@@@={Locked};ENU=CountryCode;RUS=CountryCode';
      CountryNameTxt@1210108 : TextConst '@@@={Locked};ENU=CountryName;RUS=CountryName';
      AddressTxt@1210109 : TextConst '@@@={Locked};ENU=Address;RUS=Address';
      GeographicalNameTxt@1210110 : TextConst '@@@={Locked};ENU=GeographicalName;RUS=GeographicalName';
      NumberTxt@1210111 : TextConst '@@@={Locked};ENU=Number;RUS=Number';
      LocalityTxt@1210112 : TextConst '@@@={Locked};ENU=Locality;RUS=Locality';
      StagePeriodTxt@1210113 : TextConst '@@@={Locked};ENU=StagePeriod;RUS=StagePeriod';
      PeriodStartDateTxt@1210114 : TextConst '@@@={Locked};ENU=PeriodStartDate;RUS=PeriodStartDate';
      PeriodEndDateTxt@1210115 : TextConst '@@@={Locked};ENU=PeriodEndDate;RUS=PeriodEndDate';
      BirthDateTxt@1210116 : TextConst '@@@={Locked};ENU=BirthDate;RUS=BirthDate';
      BirthPlaceTxt@1210117 : TextConst '@@@={Locked};ENU=BirthPlace;RUS=BirthPlace';
      BirthPlaceTypeTxt@1210118 : TextConst '@@@={Locked};ENU=BirthPlaceType;RUS=BirthPlaceType';
      BirthCityTxt@1210119 : TextConst '@@@={Locked};ENU=BirthCity;RUS=BirthCity';
      BirthRegionTxt@1210120 : TextConst '@@@={Locked};ENU=BirthRegion;RUS=BirthRegion';
      BirthCountyTxt@1210121 : TextConst '@@@={Locked};ENU=BirthCounty;RUS=BirthCounty';
      CitizenshipTxt@1210122 : TextConst '@@@={Locked};ENU=Citizenship;RUS=Citizenship';
      RegistrationAddressTxt@1210123 : TextConst '@@@={Locked};ENU=RegistrationAddress;RUS=RegistrationAddress';
      ActualAddressTxt@1210124 : TextConst '@@@={Locked};ENU=ActualAddress;RUS=ActualAddress';
      PhoneTxt@1210125 : TextConst '@@@={Locked};ENU=Phone;RUS=Phone';
      STANDARDTxt@1210126 : TextConst '@@@={Locked};ENU=STANDARD;RUS=STANDARD';
      SPECIALTxt@1210127 : TextConst '@@@={Locked};ENU=SPECIAL;RUS=SPECIAL';
      AnketaDataTxt@1210128 : TextConst '@@@={Locked};ENU=AnketaData;RUS=AnketaData';
      CompanyNameTxt@1210129 : TextConst '@@@={Locked};ENU=CompanyName;RUS=CompanyName';
      FormTxt@1210130 : TextConst '@@@={Locked};ENU=Form;RUS=Form';
      PackCreatorTxt@1210131 : TextConst '@@@={Locked};ENU=PackCreator;RUS=PackCreator';
      CodEGRIPTxt@1210132 : TextConst '@@@={Locked};ENU=CodEGRIP;RUS=CodEGRIP';
      CodEGRULTxt@1210133 : TextConst '@@@={Locked};ENU=CodEGRUL;RUS=CodEGRUL';
      EXTERNALTxt@1210134 : TextConst '@@@={Locked};ENU=EXTERNAL;RUS=EXTERNAL';
      AddressIPTxt@1210135 : TextConst '@@@={Locked};ENU=AddressIP;RUS=AddressIP';
      SPV1TitleTxt@1210136 : TextConst '@@@={Locked};ENU=SPV1Title;RUS=SPV1Title';
      SPV1Txt@1210137 : TextConst '@@@={Locked};ENU=SPV-1;RUS=SPV-1';
      SZV62TitleTxt@1210138 : TextConst '@@@={Locked};ENU=SZV62Title;RUS=SZV62Title';
      SZV62Txt@1210139 : TextConst '@@@={Locked};ENU=SZV-6-2;RUS=SZV-6-2';
      SZV63TitleTxt@1210140 : TextConst '@@@={Locked};ENU=SZV63Title;RUS=SZV63Title';
      SZV64TitleTxt@1210141 : TextConst '@@@={Locked};ENU=SZV64Title;RUS=SZV64Title';
      IncomingList1Txt@1210142 : TextConst '@@@={Locked};ENU=IncomingList1;RUS=IncomingList1';
      IncomingList2Txt@1210143 : TextConst '@@@={Locked};ENU=IncomingList2;RUS=IncomingList2';
      IncomingList3Txt@1210144 : TextConst '@@@={Locked};ENU=IncomingList3;RUS=IncomingList3';
      DocumentType1Txt@1210145 : TextConst '@@@={Locked};ENU=DocumentType1;RUS=DocumentType1';
      DocumentType2Txt@1210146 : TextConst '@@@={Locked};ENU=DocumentType2;RUS=DocumentType2';
      DocumentType3Txt@1210147 : TextConst '@@@={Locked};ENU=DocumentType3;RUS=DocumentType3';
      ConfirmationDocumentTxt@1210148 : TextConst '@@@={Locked};ENU=ConfirmationDocument;RUS=ConfirmationDocument';
      ConfirmationDocumentTypeTxt@1210149 : TextConst '@@@={Locked};ENU=ConfirmationDocumentType;RUS=ConfirmationDocumentType';
      ConfirmationDocumentNameTxt@1210151 : TextConst '@@@={Locked};ENU=ConfirmationDocumentName;RUS=ConfirmationDocumentName';
      ConfirmationDocumentNumberTxt@1210154 : TextConst '@@@={Locked};ENU=ConfirmationDocumentNumber;RUS=ConfirmationDocumentNumber';
      DocumentTxt@1210150 : TextConst '@@@={Locked};ENU=Document;RUS=Document';
      SeriaRomanDigitsTxt@1210152 : TextConst '@@@={Locked};ENU=SeriaRomanDigits;RUS=SeriaRomanDigits';
      SeriaRussianLettersTxt@1210153 : TextConst '@@@={Locked};ENU=SeriaRussianLetters;RUS=SeriaRussianLetters';
      IssueDateTxt@1210155 : TextConst '@@@={Locked};ENU=IssueDate;RUS=IssueDate';
      IssueAuthorityTxt@1210156 : TextConst '@@@={Locked};ENU=IssueAuthority;RUS=IssueAuthority';
      SpecialConditionsTxt@1210157 : TextConst '@@@={Locked};ENU=SpecialConditions;RUS=SpecialConditions';
      BenefitsQuantityTxt@1210158 : TextConst '@@@={Locked};ENU=BenefitsQuantity;RUS=BenefitsQuantity';
      BenefitsYearsTxt@1210159 : TextConst '@@@={Locked};ENU=BenefitsYears;RUS=BenefitsYears';
      BonusAmountTxt@1210160 : TextConst '@@@={Locked};ENU=BonusAmount;RUS=BonusAmount';
      TotalPaidAmountTxt@1210161 : TextConst '@@@={Locked};ENU=TotalPaidAmount;RUS=TotalPaidAmount';
      PaidAmountAccruedInsuranceContributionsTxt@1210162 : TextConst '@@@={Locked};ENU=PaidAmountAccruedInsuranceContributions;RUS=PaidAmountAccruedInsuranceContributions';
      PaidAmountAccruedInsuranceContributionsLessTxt@1210165 : TextConst '@@@={Locked};ENU=PaidAmountAccruedInsuranceContributionsLess;RUS=PaidAmountAccruedInsuranceContributionsLess';
      PaidAmountAccruedInsuranceContributionsMoreTxt@1210166 : TextConst '@@@={Locked};ENU=PaidAmountAccruedInsuranceContributionsMore;RUS=PaidAmountAccruedInsuranceContributionsMore';
      PACKTOTALTxt@1210163 : TextConst '@@@={Locked};ENU=PACK TOTAL;RUS=PACK TOTAL';
      BonusAmount64Txt@1210164 : TextConst '@@@={Locked};ENU=BonusAmount64;RUS=BonusAmount64';
      SpecialBonusAmountTxt@1210167 : TextConst '@@@={Locked};ENU=SpecialBonusAmount;RUS=SpecialBonusAmount';
      SpecialPaidAmount271Txt@1210168 : TextConst '@@@={Locked};ENU=SpecialPaidAmount271;RUS=SpecialPaidAmount271';
      SpecialPaidAmount27218Txt@1210169 : TextConst '@@@={Locked};ENU=SpecialPaidAmount27218;RUS=SpecialPaidAmount27218';
      TerritorialConditionsTxt@1210170 : TextConst '@@@={Locked};ENU=TerritorialConditions;RUS=TerritorialConditions';
      SpecialLaborConditionsTxt@1210171 : TextConst '@@@={Locked};ENU=SpecialLaborConditions;RUS=SpecialLaborConditions';
      CountableServiceReasonTxt@1210172 : TextConst '@@@={Locked};ENU=CountableServiceReason;RUS=CountableServiceReason';
      MaternityLeaveTxt@1210173 : TextConst '@@@={Locked};ENU=MaternityLeave;RUS=MaternityLeave';
      LongServiceTxt@1210174 : TextConst '@@@={Locked};ENU=LongService;RUS=LongService';
      TestMode@1210175 : Boolean;

    PROCEDURE ADV1toXML@1210067(VAR Employee@1210005 : Record 5200;FillingDate@1210004 : Date;CompanyPackNo@1210007 : Integer;DepartmentNo@1210006 : Integer;DepartmentPackNo@1210001 : Integer);
    VAR
      XmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Counter@1210002 : Integer;
      FileName@1210003 : Text;
    BEGIN
      GetHRSetup;
      Counter := 1;

      CheckEmployees(Employee);

      FileName := GetXMLFileName(TODAY,CompanyPackNo,DepartmentNo,DepartmentPackNo);

      CreateXMLDoc(XmlDoc,XMLCurrNode);
      XMLAddComplexElement(FilePFRTxt);
      XMLAddSimpleElement(FileNameTxt,FileName);
      AddFileHeader;
      XMLAddComplexElement(IncomingDocumentPackTxt);
      XMLAddAttribute(XMLCurrNode,SurroundingTxt,PartOfFileTxt);
      XMLAddAttribute(XMLCurrNode,StageTxt,BeforeProcessingTxt);
      XMLAddComplexElement(IncomingContentTxt);
      XMLAddSimpleElement(NumberInPackTxt,FORMAT(Counter));
      XMLAddSimpleElement(PackContentTypeTxt,PackContentTxt);
      AddCompanyInfo;
      XMLAddComplexElement(PackNumberTxt);
      XMLAddSimpleElement(PrimaryTxt,FORMAT(CompanyPackNo));
      XMLBackToParent;
      XMLAddComplexElement(DocumentCollectionTxt);
      XMLAddSimpleElement(QuantityTxt,'1');
      XMLAddComplexElement(DocumentPresenceTxt);
      XMLAddSimpleElement(DocumentTypeTxt,AnketaIPTxt);
      XMLAddSimpleElement(QuantityTxt,FORMAT(Employee.COUNT));
      XMLBackToParent;
      XMLBackToParent;
      XMLAddSimpleElement(CreationDateTxt,FormatDate(FillingDate));
      XMLBackToParent;
      IF Employee.FINDSET THEN
        REPEAT
          Counter += 1;
          AddEmployeeForm(Counter,Employee,FillingDate);
        UNTIL Employee.NEXT = 0;

      IF NOT TestMode THEN
        SaveXMLFile(XmlDoc,FileName);
    END;

    PROCEDURE ADV1toExcel@1210011(VAR Employee@1210000 : Record 5200;FillingDate@1210013 : Date);
    VAR
      CountryRegion@1210005 : Record 9;
      AlternativeAddress@1210004 : Record 5201;
      RegAlternativeAddress@1210008 : Record 5201;
      PermAlternativeAddress@1210009 : Record 5201;
      ExcelTemplate@1210002 : Record 14919;
      PersonDocument@1210006 : Record 17352;
      Window@1210010 : Dialog;
      FileName@1210001 : Text;
      TemplateSheetName@1210003 : Text[30];
      DocumentName@1210007 : Text[100];
      FullAddress@1210012 : Text[1024];
      Counter@1210011 : Integer;
    BEGIN
      CompanyInfo.GET;

      CheckEmployees(Employee);

      GetHRSetup;
      HRSetup.TESTFIELD("ADV-1 Template Code");
      FileName := ExcelTemplate.OpenTemplate(HRSetup."ADV-1 Template Code");
      ExcelMgt.OpenBook(FileName);
      TemplateSheetName := 'Sheet1';
      ExcelMgt.OpenSheet(TemplateSheetName);

      Window.OPEN(Text001);

      IF Employee.FINDSET THEN
        REPEAT
          Counter += 1;
          Window.UPDATE(1,ROUND(Counter / Employee.COUNT * 10000,1));
          ExcelMgt.CopySheet(TemplateSheetName,TemplateSheetName,Employee."No.");
          ExcelMgt.OpenSheet(Employee."No.");
          FillExcelRow('J8',25,Employee."Last Name");
          FillExcelRow('J10',25,Employee."First Name");
          FillExcelRow('J12',25,Employee."Middle Name");
          CASE Employee.Gender OF
            Employee.Gender::Male:
              ExcelMgt.FillCell('J14',MaleTxt);
            Employee.Gender::Female:
              ExcelMgt.FillCell('J14',FemaleTxt);
          END;
          FillADV1Date('K16',Employee."Birth Date");
          GetAddressByType(Employee."Person No.",AddressType::Birthplace,AlternativeAddress);
          IF (AlternativeAddress.City = '') AND (AlternativeAddress.Area = '') THEN
            FillExcelRow('P19',21,AlternativeAddress.Region)
          ELSE BEGIN
            FillExcelRow('P19',21,AlternativeAddress.City);
            FillExcelRow('P21',21,AlternativeAddress.Area);
            FillExcelRow('P23',21,AlternativeAddress.Region);
          END;
          IF CountryRegion.GET(AlternativeAddress."Country/Region Code") THEN
            FillExcelRow('P25',21,CountryRegion.Name);
          FillExcelRow('P27',21,GetCitizenship(Employee."Person No."));

          GetAddressByType(Employee."Person No.",AddressType::Registration,RegAlternativeAddress);
          FillExcelRow('N31',6,RegAlternativeAddress."Post Code");
          FullAddress := RegAlternativeAddress.GetFullAddress(FALSE);
          FillExcelRow('X31',13,COPYSTR(FullAddress,1,13));
          FillExcelRow('N33',23,COPYSTR(FullAddress,14,23));
          FillExcelRow('N35',23,COPYSTR(FullAddress,37,23));

          GetAddressByType(Employee."Person No.",AddressType::Permanent,PermAlternativeAddress);
          IF RegAlternativeAddress.GetFullAddress(TRUE) <>
             PermAlternativeAddress.GetFullAddress(TRUE)
          THEN BEGIN
            FillExcelRow('N37',6,PermAlternativeAddress."Post Code");
            FullAddress := PermAlternativeAddress.GetFullAddress(FALSE);
            FillExcelRow('X37',13,COPYSTR(FullAddress,1,13));
            FillExcelRow('N39',23,COPYSTR(FullAddress,14,23));
            FillExcelRow('N41',23,COPYSTR(FullAddress,37,23));
            IF (Employee."Phone No." = '') AND (Employee."Mobile Phone No." <> '') THEN
              FillExcelRow('N45',23,Employee."Mobile Phone No.")
            ELSE
              FillExcelRow('N45',23,Employee."Phone No.");
          END;

          GetIdentifyDoc(Employee."Person No.",PersonDocument,DocumentName);
          FillExcelRow('J50',25,DocumentName);

          FillExcelRow('J54',19,PersonDocument."Document Series" + ' ' + PersonDocument."Document No.");
          FillADV1Date('K56',PersonDocument."Issue Date");
          FillExcelRow('J58',25,COPYSTR(PersonDocument."Issue Authority",1,25));
          FillExcelRow('J60',25,COPYSTR(PersonDocument."Issue Authority",26,25));
          FillADV1Date('B65',FillingDate);
        UNTIL Employee.NEXT = 0;

      IF TestMode THEN
        ExcelMgt.QuitXlApp
      ELSE BEGIN
        ExcelMgt.DeleteSheet(TemplateSheetName);
        ExcelMgt.GiveUserControl;
      END;
    END;

    PROCEDURE SVFormToExcel@1210073(FormType@1210015 : 'SPV_1,SZV_6_1,SZV_6_2,SZV_6_3,SZV_6_4';VAR Employee@1210000 : Record 5200;StartDate@1210006 : Date;EndDate@1210005 : Date;CreationDate@1210009 : Date;InfoType@1210012 : 'Initial,Corrective,Cancel';AnalysisReportName@121003 : Code[10];CorrectionYear@121002 : Integer);
    VAR
      TempPersonMedicalInfoDisability@1210022 : TEMPORARY Record 17353;
      TempEmployeeWithDisability@1210021 : TEMPORARY Record 5200;
      TempEmployeeWithoutDisability@1210020 : TEMPORARY Record 5200;
      ExcelTemplate@1210002 : Record 14919;
      Person@1210004 : Record 17350;
      Window@1210010 : Dialog;
      FileName@1210001 : Text;
      TemplateSheetName@1210003 : Text[30];
      AdditionalSheetName@1210018 : Text[30];
      Counter@1210011 : Integer;
      DisabilityPeriodBufferCounter@1210017 : Integer;
      SZV6_2SheetCreated@1210016 : Boolean;
      CategoryType@1210008 : 'WithoutDisability,WithDisability';
      EmployeePeriodStartDate@121001 : Date;
      EmployeePeriodEndDate@121000 : Date;
    BEGIN
      IF Employee.ISEMPTY THEN
        EXIT;

      CompanyInfo.GET;
      FileName := ExcelTemplate.OpenTemplate(GetExcelTemplate(FormType));
      ExcelMgt.OpenBook(FileName);
      ExcelMgt.OpenSheetByNumber(1);
      TemplateSheetName := ExcelMgt.GetSheetName;

      Window.OPEN(Text001);

      CASE FormType OF
        FormType::SPV_1,FormType::SZV_6_1,FormType::SZV_6_3,FormType::SZV_6_4:
          BEGIN
            IF Employee.FINDSET THEN
              REPEAT
                Person.GET(Employee."Person No.");

                Counter += 1;
                Window.UPDATE(1,ROUND(Counter / Employee.COUNT * 10000,1));
                ExcelMgt.CopySheet(TemplateSheetName,TemplateSheetName,Employee."No.");
                ExcelMgt.OpenSheet(Employee."No.");

                IF (InfoType <> InfoType::Initial) AND (FormType = FormType::SZV_6_3) THEN BEGIN
                  EmployeePeriodStartDate := DMY2DATE(1,1,CorrectionYear);
                  EmployeePeriodEndDate := DMY2DATE(31,12,CorrectionYear);
                END ELSE BEGIN
                  EmployeePeriodStartDate := StartDate;
                  EmployeePeriodEndDate := EndDate;
                END;

                FitPeriodToLaborContract(Employee,EmployeePeriodStartDate,EmployeePeriodEndDate);
                GetDisabilityPeriods(Employee,EmployeePeriodStartDate,EmployeePeriodEndDate,TempPersonMedicalInfoDisability);
                DisabilityPeriodBufferCounter := 0;
                TempPersonMedicalInfoDisability.FINDSET;
                REPEAT
                  DisabilityPeriodBufferCounter += 1;
                  IF DisabilityPeriodBufferCounter > 1 THEN BEGIN
                    AdditionalSheetName := Employee."No." + ' (' + FORMAT(DisabilityPeriodBufferCounter) + ')';
                    ExcelMgt.CopySheet(TemplateSheetName,TemplateSheetName,AdditionalSheetName);
                    ExcelMgt.OpenSheet(AdditionalSheetName);
                  END;

                  CASE FormType OF
                    FormType::SPV_1:
                      FillSPV1Sheet(
                        Employee,TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date",
                        CreationDate,InfoType,TempPersonMedicalInfoDisability."Disability Group");
                    FormType::SZV_6_1:
                      FillSZV6_1Sheet(
                        Employee,TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date",
                        InfoType,TempPersonMedicalInfoDisability."Disability Group");
                    FormType::SZV_6_3:
                      FillSZV6_3Sheet(
                        Employee,TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date",
                        InfoType,TempPersonMedicalInfoDisability."Disability Group",AnalysisReportName);
                    FormType::SZV_6_4:
                      FillSZV6_4Sheet(
                        Employee,EmployeePeriodStartDate,EmployeePeriodEndDate,
                        TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date",
                        InfoType,TempPersonMedicalInfoDisability."Disability Group",AnalysisReportName);
                  END;
                UNTIL TempPersonMedicalInfoDisability.NEXT = 0;
              UNTIL Employee.NEXT = 0;
            IF NOT TestMode THEN
              ExcelMgt.DeleteSheet(TemplateSheetName);
          END;
        FormType::SZV_6_2:
          BEGIN
            GetDisabilityBuffers(
              Employee,StartDate,EndDate,TempPersonMedicalInfoDisability,TempEmployeeWithDisability,TempEmployeeWithoutDisability);

            IF TempEmployeeWithoutDisability.COUNT > 0 THEN BEGIN
              IF TempEmployeeWithDisability.COUNT > 0 THEN
                ExcelMgt.CopySheet(TemplateSheetName,TemplateSheetName,'Sheet2');
              SZV6_2SheetCreated := TRUE;
              FillSZV6_2Sheet(
                TempEmployeeWithoutDisability,TempPersonMedicalInfoDisability,
                StartDate,EndDate,InfoType,CategoryType::WithoutDisability);
            END;

            IF TempEmployeeWithDisability.COUNT > 0 THEN BEGIN
              IF SZV6_2SheetCreated THEN
                ExcelMgt.OpenSheet('Sheet2');
              FillSZV6_2Sheet(
                TempEmployeeWithDisability,TempPersonMedicalInfoDisability,
                StartDate,EndDate,InfoType,CategoryType::WithDisability);
            END;
          END;
      END;
      IF TestMode THEN
        ExcelMgt.QuitXlApp
      ELSE
        ExcelMgt.GiveUserControl;
    END;

    LOCAL PROCEDURE FillSPV1Sheet@1210049(Employee@1210000 : Record 5200;StartDate@1210006 : Date;EndDate@1210005 : Date;CreationDate@1210009 : Date;InfoType@1210012 : 'Initial,Corrective,Cancel';CategoryType@1210015 : Option);
    BEGIN
      FillSVCompanyInfo('DI3','AO7','AD8','H9','AU9');
      FillSVHeader(CategoryType,InfoType,'AU10','DA7','DA9','DA11');

      IF InfoType <> InfoType::Cancel THEN BEGIN
        FillSPV1Date('AA11',CreationDate);
        FillSVHeaderQuarterInfo(EndDate,'N15','AI15','BB15','BM15','X16');
        FillSVPersonShortInfo(Employee."Person No.",'B22','Q22');

        CalcAndFillInsAndAccumAmounts(Employee."No.",StartDate,EndDate,'AR22','BP22','CM22','DK22');
        FillExperienceBuffer(
          Employee."No.",StartDate,EndDate,26,12,
          'B','I','Y','AO','BB','BR','CI','CZ','DQ');
      END;
    END;

    LOCAL PROCEDURE FillSZV6_1Sheet@1210055(VAR Employee@1210000 : Record 5200;StartDate@1210006 : Date;EndDate@1210005 : Date;InfoType@1210012 : 'Initial,Corrective,Cancel';CategoryType@1210008 : Option);
    BEGIN
      FillSVCompanyInfo('DI3','AO7','AD8','H9','AU9');
      FillSVHeader(CategoryType,InfoType,'AU10','T18','D21','D23');
      FillSVHeaderPeriodInfo(
        InfoType,EndDate,
        'M14','AH14','BA14','BL14','CW14',
        'BQ21','CL21','DE21','DP21','BE23');

      IF InfoType <> InfoType::Cancel THEN BEGIN
        FillSVPersonShortInfo(Employee."Person No.",'AC28','B28');
        FillSVPersonAddress(Employee."Person No.",'AR28');

        CalcAndFillInsAndAccumAmounts(Employee."No.",StartDate,EndDate,'BR28','CI28','CZ28','DQ28');
        FillExperienceBuffer(
          Employee."No.",StartDate,EndDate,32,12,
          'B','I','Y','AO','BB','BR','CI','CZ','DQ');
      END;
    END;

    LOCAL PROCEDURE FillSZV6_2Sheet@1210057(VAR Employee@1210000 : Record 5200;VAR TempPersonMedicalInfoDisability@1210009 : TEMPORARY Record 17353;StartDate@1210002 : Date;EndDate@1210005 : Date;InfoType@1210012 : 'Initial,Corrective,Cancel';CategoryType@1210017 : 'WithoutDisability,WithDisability');
    VAR
      Person@1210004 : Record 17350;
      Window@1210010 : Dialog;
      RowNo@1210013 : Integer;
      i@1210014 : Integer;
      j@1210001 : Integer;
      InsurAmount@1210007 : Decimal;
      AccumAmount@1210003 : Decimal;
      TotalInsurAmount@1210016 : Decimal;
      TotalAccumAmount@1210011 : Decimal;
    BEGIN
      FillSVCompanyInfo('EZ3','AO8','AU10','H9','AU9');
      FillSVHeader(CategoryType,InfoType,'AU11','T14','B16','B19');
      FillSVHeaderPeriodInfo(
        InfoType,EndDate,
        'DM7','EH7','FA7','FK7','DC8',
        'BQ17','CL17','DE17','DP17','ET17');

      IF InfoType <> InfoType::Cancel THEN BEGIN
        ExcelMgt.FillCell('EB10',FORMAT(Employee.COUNT));

        Window.OPEN(Text001);
        RowNo := 24;
        IF Employee.FINDSET THEN
          REPEAT
            i += 1;
            Window.UPDATE(1,ROUND(i / Employee.COUNT * 10000,1));
            Person.GET(Employee."Person No.");
            TempPersonMedicalInfoDisability.RESET;
            TempPersonMedicalInfoDisability.SETRANGE("Employee No.",Employee."No.");
            TempPersonMedicalInfoDisability.SETRANGE("Disability Group",CategoryType);
            TempPersonMedicalInfoDisability.FINDSET;
            j := 0;
            REPEAT
              j += 1;
              IF (i <> Employee.COUNT) OR (j <> TempPersonMedicalInfoDisability.COUNT) THEN
                ExcelMgt.CopyRow(RowNo);
              ExcelMgt.FillCell('B' + FORMAT(RowNo),FORMAT(i));
              FillSVPersonShortInfo(Person."No.",'AR' + FORMAT(RowNo),'I' + FORMAT(RowNo));
              FillSVPersonAddress(Employee."Person No.",'BN' + FORMAT(RowNo));

              CalcInsAndAccumAmounts(InsurAmount,AccumAmount,Employee."No.",StartDate,EndDate);
              FillInsAndAccumAmounts(InsurAmount,AccumAmount,
                'CJ' + FORMAT(RowNo),'CY' + FORMAT(RowNo),'DN' + FORMAT(RowNo),'EC' + FORMAT(RowNo));

              TotalInsurAmount += InsurAmount;
              TotalAccumAmount += AccumAmount;
              ExcelMgt.FillCellWithFormat('ER' + FORMAT(RowNo),FormatDate(TempPersonMedicalInfoDisability."Starting Date"),'@');
              ExcelMgt.FillCellWithFormat('FH' + FORMAT(RowNo),FormatDate(TempPersonMedicalInfoDisability."Ending Date"),'@');
              RowNo += 1;
            UNTIL TempPersonMedicalInfoDisability.NEXT = 0;
          UNTIL Employee.NEXT = 0;

        IF i > 0 THEN
          FillInsAndAccumAmounts(
            TotalInsurAmount,TotalAccumAmount,
            'CJ' + FORMAT(RowNo),'CY' + FORMAT(RowNo),'DN' + FORMAT(RowNo),'EC' + FORMAT(RowNo));
      END;
    END;

    LOCAL PROCEDURE FillSZV6_3Sheet@121005(VAR Employee@1210000 : Record 5200;StartDate@1210006 : Date;EndDate@1210005 : Date;InfoType@1210012 : 'Initial,Corrective,Cancel';CategoryType@1210008 : Option;AnalysisReportName@121006 : Code[10]);
    VAR
      DirectorEmployee@121001 : Record 5200;
    BEGIN
      FillSVCompanyInfo('CP4','COMPANY_PFR_ID','COMPANY_NAME_SHORT','COMPANY_INN','COMPANY_KPP');
      FillSVHeader(CategoryType,InfoType,'INS_PERSON_CATEGORY_ID','DOC_TYPE_ORIGIN','DOC_TYPE_CORRECT','DOC_TYPE_CANCEL');
      FillSVPersonInfo(Employee."Person No.",'EMPLNAME_LAST','EMPLNAME_FIRST','EMPLNAME_MIDDLE','EMPL_PFR_ID');
      FillSVContractInfo(Employee."Contract No.",'AGREEMENT_LABOR','AGREEMENT_CIVIL');
      ExcelMgt.FillCell('REPORTED_YEAR',FORMAT(DATE2DMY(StartDate,3)));

      FillSZV6_3SalaryAmounts(Employee."No.",AnalysisReportName,StartDate,EndDate);

      IF DirectorEmployee.GET(CompanyInfo."Director No.") THEN BEGIN
        ExcelMgt.FillCell('SIGN_OCCUPATION',DirectorEmployee.GetJobTitleName);
        ExcelMgt.FillCell('SIGN_NAME',DirectorEmployee.GetNameInitials);
        ExcelMgt.FillCell('SIGN_DATE',FORMAT(WORKDATE));
      END;
    END;

    LOCAL PROCEDURE FillSZV6_4Sheet@1210015(VAR Employee@1210006 : Record 5200;PeriodStartDate@1170000000 : Date;PeriodEndDate@1170000001 : Date;StartDate@1210005 : Date;EndDate@1210004 : Date;InfoType@1210003 : 'Initial,Corrective,Cancel';CategoryType@1210002 : Option;AnalysisReportName@1210001 : Code[10]);
    BEGIN
      FillSVCompanyInfo('CP5','AJ16','AH18','I20','BA20');
      FillSVHeader(CategoryType,InfoType,'AO22','R31','B34','B36');
      FillSVHeaderPeriodInfo(InfoType,PeriodEndDate,'M28','AD28','AS28','BB28','CF28','BG34','BX34','CM34','AF36','CG36');
      FillSVPersonInfo(Employee."Person No.",'M45','H46','M47','U48');
      FillSVContractInfo(Employee."Contract No.",'B42','U42');

      FillSZV6_4MonthAmounts(Employee."No.",AnalysisReportName,PeriodStartDate,StartDate,EndDate);
      CalcAndFillSZV6_4InsAndSaveAmt(AnalysisReportName,Employee."No.",StartDate,EndDate);
      FillExperienceBuffer(Employee."No.",StartDate,EndDate,77,1,'A','F','R','AD','AP','BC','BP','CD','CQ');
    END;

    LOCAL PROCEDURE FillSZV6_3SalaryAmounts@121009(EmployeeNo@121008 : Code[20];TemplName@121007 : Code[10];StartDate@121006 : Date;EndDate@121004 : Date);
    VAR
      TotalFundAmount@1210001 : Decimal;
      TotalInsAmount@121000 : Decimal;
      Month@121002 : Integer;
      YearForAmounts@121005 : Integer;
    BEGIN
      IF DATE2DMY(StartDate,2) = DATE2DMY(EndDate,2) THEN
        CalcAndFillSZV6_3Amounts(
          TotalFundAmount,TotalInsAmount,EmployeeNo,TemplName,StartDate,EndDate)
      ELSE BEGIN
        YearForAmounts := DATE2DMY(StartDate,3);
        CalcAndFillSZV6_3Amounts(
          TotalFundAmount,TotalInsAmount,
          EmployeeNo,TemplName,StartDate,CALCDATE('<+CM>',StartDate));

        FOR Month := DATE2DMY(StartDate,2) + 1 TO DATE2DMY(EndDate,2) - 1 DO
          CalcAndFillSZV6_3Amounts(
            TotalFundAmount,TotalInsAmount,EmployeeNo,TemplName,
            DMY2DATE(1,Month,YearForAmounts),DMY2DATE(1,Month + 1,YearForAmounts) - 1);

        CalcAndFillSZV6_3Amounts(
          TotalFundAmount,TotalInsAmount,EmployeeNo,TemplName,
          DMY2DATE(1,Month + 1,YearForAmounts),EndDate);
      END;

      ExcelMgt.FillCell('FUND_SUM',FORMAT(TotalFundAmount));
      ExcelMgt.FillCell('BASE_SUM',FORMAT(TotalInsAmount));
    END;

    LOCAL PROCEDURE FillSZV6_3FundAndInsAmounts@1210066(InsAmount@1210002 : Decimal;AccumAmount@1210001 : Decimal;Month@121006 : Integer);
    BEGIN
      IF InsAmount <> 0 THEN
        ExcelMgt.FillCell(
          'FUND_' + FORMAT(Month,0,'<Integer,2><Filler Character,0>'),
          FORMAT(InsAmount));
      IF AccumAmount <> 0 THEN
        ExcelMgt.FillCell(
          'BASE_' + FORMAT(Month,0,'<Integer,2><Filler Character,0>'),
          FORMAT(AccumAmount));
    END;

    LOCAL PROCEDURE FillSZV6_4MonthAmounts@1210053(EmployeeNo@1210015 : Code[20];TemplName@1210014 : Code[10];PeriodStartDate@1210013 : Date;StartDate@1210012 : Date;EndDate@1210001 : Date);
    VAR
      CurrentMonth@1210007 : Date;
      StartDateAdd@1210008 : Date;
      EndDateAdd@1210009 : Date;
      i@1210006 : Integer;
      Table1RowNo@1210005 : Integer;
      Table2RowNo@1210004 : Integer;
      RowCount@1210003 : Integer;
      IsZeroAmounts@1210000 : Boolean;
    BEGIN
      Table1RowNo := 54;
      Table2RowNo := 62;

      FillSZV6_4MonthGroup(
        Table1RowNo,Table2RowNo,FALSE,EmployeeNo,TemplName,StartDate,EndDate);

      CurrentMonth := PeriodStartDate;
      RowCount := 3;
      FOR i := 1 TO RowCount DO BEGIN
        IsZeroAmounts := NOT CalcDatesIntersection(
            StartDateAdd,EndDateAdd,StartDate,EndDate,CurrentMonth,CALCDATE('<CM>',CurrentMonth));
        FillSZV6_4MonthGroup(
          Table1RowNo + i,Table2RowNo + i,IsZeroAmounts,EmployeeNo,TemplName,StartDateAdd,EndDateAdd);

        IF i < RowCount THEN
          CurrentMonth := CALCDATE('<1M>',CurrentMonth);
      END;
    END;

    LOCAL PROCEDURE FillSZV6_4MonthGroup@1170000006(Table1RowNo@1170000000 : Integer;Table2RowNo@1170000001 : Integer;IsZeroAmounts@1170000004 : Boolean;EmployeeNo@1210005 : Code[20];TemplName@1210006 : Code[10];StartDate@1210007 : Date;EndDate@1210008 : Date);
    VAR
      BonusAmount@1210000 : Decimal;
      InsAmount@1210001 : Decimal;
      InsOverAmount@1210002 : Decimal;
      Special1Amount@1210003 : Decimal;
      Special2Amount@1210004 : Decimal;
    BEGIN
      IF NOT IsZeroAmounts THEN BEGIN
        CalcSZV6_4BonusAndInsAmounts(
          BonusAmount,InsAmount,InsOverAmount,TemplName,EmployeeNo,StartDate,EndDate);
        CalcSZV6_4SpecialCondAmounts(Special1Amount,Special2Amount,TemplName,EmployeeNo,StartDate,EndDate);
      END;

      ExcelMgt.FillCell('Z' + FORMAT(Table1RowNo),FORMAT(BonusAmount));
      ExcelMgt.FillCell('AU' + FORMAT(Table1RowNo),FORMAT(InsAmount));
      ExcelMgt.FillCell('BZ' + FORMAT(Table1RowNo),FORMAT(InsOverAmount));
      ExcelMgt.FillCell('Z' + FORMAT(Table2RowNo),FORMAT(Special1Amount));
      ExcelMgt.FillCell('BO' + FORMAT(Table2RowNo),FORMAT(Special2Amount));
    END;

    LOCAL PROCEDURE FillSVCompanyInfo@1210061(OKPOCellText@1210001 : Text[30];PFRegNoCellText@1210002 : Text[30];CompNameCellText@1210003 : Text[30];VATRegNoCellText@1210004 : Text[30];KPPCodeCellText@1210005 : Text[30]);
    BEGIN
      ExcelMgt.FillCell(OKPOCellText,CompanyInfo."OKPO Code");
      ExcelMgt.FillCell(PFRegNoCellText,CompanyInfo."Pension Fund Registration No.");
      ExcelMgt.FillCell(CompNameCellText,CompanyInfo.Name);
      ExcelMgt.FillCell(VATRegNoCellText,CompanyInfo."VAT Registration No.");
      ExcelMgt.FillCell(KPPCodeCellText,CompanyInfo."KPP Code");
    END;

    LOCAL PROCEDURE FillSVHeader@1210068(CategoryType@1210004 : Option;InfoType@1210000 : 'Initial,Corrective,Cancel';CategoryCellText@1210005 : Text[30];InitialCellText@1210001 : Text[30];CorrCellText@1210002 : Text[30];CancelCellText@1210003 : Text[30]);
    BEGIN
      ExcelMgt.FillCell(CategoryCellText,GetCategoryCode(CategoryType));
      CASE InfoType OF
        InfoType::Initial:
          FillCellXChar(InitialCellText);
        InfoType::Corrective:
          FillCellXChar(CorrCellText);
        InfoType::Cancel:
          FillCellXChar(CancelCellText);
      END;
    END;

    LOCAL PROCEDURE FillSVHeaderPeriodInfo@1210071(InfoType@1210000 : 'Initial,Corrective,Cancel';PeriodEndDate@1210001 : Date;InitialFirstCellText@1210002 : Text[30];InitialSecondCellText@1210003 : Text[30];InitialThirdCellText@1210004 : Text[30];InitialFourthCellText@1210005 : Text[30];InitialYearCellText@1210010 : Text[30];CorrFirstCellText@1210009 : Text[30];CorrSecondCellText@1210008 : Text[30];CorrThirdCellText@1210007 : Text[30];CorrFourthCellText@1210006 : Text[30];CorrYearCellText@1210011 : Text[30]);
    BEGIN
      CASE InfoType OF
        InfoType::Initial:
          FillSVHeaderQuarterInfo(
            PeriodEndDate,InitialFirstCellText,InitialSecondCellText,
            InitialThirdCellText,InitialFourthCellText,InitialYearCellText);
        InfoType::Corrective,InfoType::Cancel:
          FillSVHeaderQuarterInfo(
            PeriodEndDate,CorrFirstCellText,CorrSecondCellText,
            CorrThirdCellText,CorrFourthCellText,CorrYearCellText);
      END;
    END;

    LOCAL PROCEDURE FillSVHeaderQuarterInfo@1210078(PeriodEndDate@1210001 : Date;FirstCellText@1210002 : Text[30];SecondCellText@1210003 : Text[30];ThirdCellText@1210004 : Text[30];FourthCellText@1210005 : Text[30];YearCellText@1210010 : Text[30]);
    BEGIN
      CASE DATE2DMY(PeriodEndDate,2) OF
        3:
          FillCellXChar(FirstCellText);
        6:
          FillCellXChar(SecondCellText);
        9:
          FillCellXChar(ThirdCellText);
        12:
          FillCellXChar(FourthCellText);
      END;
      ExcelMgt.FillCell(YearCellText,FORMAT(DATE2DMY(PeriodEndDate,3)));
    END;

    LOCAL PROCEDURE FillSVPersonInfo@1210081(PersonNo@1210000 : Code[20];LastNameCellText@1210002 : Text[30];FirstNameCellText@1210003 : Text[30];MiddleNameCellText@1210004 : Text[30];SocialCellText@1210005 : Text[30]);
    VAR
      Person@1210001 : Record 17350;
    BEGIN
      WITH Person DO BEGIN
        GET(PersonNo);
        ExcelMgt.FillCell(LastNameCellText,"Last Name");
        ExcelMgt.FillCell(FirstNameCellText,"First Name");
        ExcelMgt.FillCell(MiddleNameCellText,"Middle Name");
        ExcelMgt.FillCell(SocialCellText,"Social Security No.");
      END;
    END;

    LOCAL PROCEDURE FillSVPersonShortInfo@1210065(PersonNo@1210000 : Code[20];SocialCellText@1210001 : Text[30];NameCellText@1210002 : Text[30]);
    VAR
      Person@1210003 : Record 17350;
    BEGIN
      WITH Person DO BEGIN
        GET(PersonNo);
        ExcelMgt.FillCell(SocialCellText,"Social Security No.");
        ExcelMgt.FillCell(NameCellText,"Full Name");
      END;
    END;

    LOCAL PROCEDURE FillSVPersonAddress@1210074(PersonNo@1210000 : Code[20];CellText@1210002 : Text[30]);
    VAR
      AlternativeAddress@1210001 : Record 5201;
    BEGIN
      GetAddressByType(PersonNo,AddressType::Registration,AlternativeAddress);
      ExcelMgt.FillCell(CellText,AlternativeAddress.GetFullAddress(TRUE));
    END;

    LOCAL PROCEDURE FillSVContractInfo@1210075(EmplContractNo@1210000 : Code[20];LaborCellText@1210002 : Text[30];CivilCellText@1210003 : Text[30]);
    VAR
      LaborContract@1210001 : Record 17360;
    BEGIN
      IF LaborContract.GET(EmplContractNo) THEN
        CASE LaborContract."Contract Type" OF
          LaborContract."Contract Type"::"Labor Contract":
            FillCellXChar(LaborCellText);
          LaborContract."Contract Type"::"Civil Contract":
            FillCellXChar(CivilCellText);
        END;
    END;

    LOCAL PROCEDURE FillExperienceBuffer@1210056(EmployeeNo@1210004 : Code[20];StartDate@1210005 : Date;EndDate@1210006 : Date;RowNo@1210007 : Integer;RowCount@1210008 : Integer;CellText1@1210009 : Text[30];CellText2@1210010 : Text[30];CellText3@1210012 : Text[30];CellText4@1210011 : Text[30];CellText5@1210014 : Text[30];CellText6@1210013 : Text[30];CellText7@1210016 : Text[30];CellText8@1210015 : Text[30];CellText9@1210017 : Text[30]);
    VAR
      ExperienceBuffer@1210002 : TEMPORARY Record 17361;
      i@1210000 : Integer;
    BEGIN
      CreateExperienceBuffer(ExperienceBuffer,EmployeeNo,StartDate,EndDate);
      IF ExperienceBuffer.FINDSET THEN BEGIN
        REPEAT
          i += 1;
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText1,RowNo),FORMAT(i));
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText2,RowNo),FormatDate(ExperienceBuffer."Starting Date"));
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText3,RowNo),FormatDate(ExperienceBuffer."Ending Date"));
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText4,RowNo),ExperienceBuffer."Territorial Conditions");
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText5,RowNo),ExperienceBuffer."Special Conditions");
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText6,RowNo),ExperienceBuffer."Record of Service Reason");
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText7,RowNo),ExperienceBuffer."Record of Service Additional");
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText8,RowNo),ExperienceBuffer."Service Years Reason");
          ExcelMgt.FillCell(STRSUBSTNO('%1%2',CellText9,RowNo),ExperienceBuffer."Service Years Additional");
          RowNo += 1;
          IF (i > RowCount) AND (i < ExperienceBuffer.COUNT) THEN
            ExcelMgt.CopyRow(RowNo - 1);
        UNTIL ExperienceBuffer.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillCellXChar@1210072(CellText@1210000 : Text[30]);
    BEGIN
      ExcelMgt.FillCell(CellText,'X');
    END;

    PROCEDURE SVFormToXML@1210060(FormType@1210019 : 'SPV_1,SZV_6_1,SZV_6_2,SZV_6_3,SZV_6_4';VAR Employee@1210005 : Record 5200;StartDate@1210006 : Date;EndDate@1210001 : Date;CreationDate@1210009 : Date;InfoType@1210007 : 'Initial,Corrective,Cancel';VAR CompanyPackNo@1210014 : Integer;DepartmentNo@1210004 : Integer;DepartmentPackNo@1210003 : Integer;TemplateName@121001 : Code[10];CorrectionYear@121000 : Integer);
    VAR
      DisabilityPeriodBuffer@1210008 : TEMPORARY Record 17353;
      EmpWithDisabilityBuffer@1210018 : TEMPORARY Record 5200;
      EmpWithoutDisabilityBuffer@1210017 : TEMPORARY Record 5200;
      EmpWithDisabLaborBuffer@1210002 : TEMPORARY Record 5200;
      EmpWithoutDisabLaborBuffer@1210000 : TEMPORARY Record 5200;
      EmpWithDisabCivilBuffer@1210011 : TEMPORARY Record 5200;
      EmpWithoutDisabCivilBuffer@1210010 : TEMPORARY Record 5200;
    BEGIN
      GetHRSetup;
      HRSetup.TESTFIELD("TAX PF INS Element Code");
      HRSetup.TESTFIELD("TAX PF SAV Element Code");

      IF (FormType = FormType::SZV_6_3) AND (InfoType <> InfoType::Initial) THEN
        GetDisabilityBuffers(
          Employee,
          DMY2DATE(1,1,CorrectionYear),
          DMY2DATE(31,12,CorrectionYear),
          DisabilityPeriodBuffer,
          EmpWithDisabilityBuffer,
          EmpWithoutDisabilityBuffer)
      ELSE
        GetDisabilityBuffers(Employee,StartDate,EndDate,DisabilityPeriodBuffer,EmpWithDisabilityBuffer,EmpWithoutDisabilityBuffer);

      IF FormType = FormType::SZV_6_4 THEN BEGIN
        CreateDisabLaborAndCivilBuffer(EmpWithoutDisabilityBuffer,EmpWithoutDisabLaborBuffer,EmpWithoutDisabCivilBuffer);
        CreateDisabLaborAndCivilBuffer(EmpWithDisabilityBuffer,EmpWithDisabLaborBuffer,EmpWithDisabCivilBuffer);
        SVFormDisabilityGroupToXML(
          DisabilityPeriodBuffer,EmpWithDisabLaborBuffer,EmpWithoutDisabLaborBuffer,
          FormType,StartDate,EndDate,CreationDate,InfoType,CompanyPackNo,
          DepartmentNo,DepartmentPackNo,TemplateName);
        SVFormDisabilityGroupToXML(
          DisabilityPeriodBuffer,EmpWithDisabCivilBuffer,EmpWithoutDisabCivilBuffer,
          FormType,StartDate,EndDate,CreationDate,InfoType,CompanyPackNo,
          DepartmentNo,DepartmentPackNo,TemplateName);
      END ELSE
        SVFormDisabilityGroupToXML(
          DisabilityPeriodBuffer,EmpWithDisabilityBuffer,EmpWithoutDisabilityBuffer,
          FormType,StartDate,EndDate,CreationDate,InfoType,CompanyPackNo,
          DepartmentNo,DepartmentPackNo,TemplateName);
    END;

    LOCAL PROCEDURE SVFormDisabilityGroupToXML@1210028(VAR DisabilityPeriodBuffer@1210008 : TEMPORARY Record 17353;VAR EmpWithDisabilityBuffer@1210002 : TEMPORARY Record 5200;VAR EmpWithoutDisabilityBuffer@1210000 : TEMPORARY Record 5200;FormType@1210019 : 'SPV_1,SZV_6_1,SZV_6_2,SZV_6_3,SZV_6_4';StartDate@1210006 : Date;EndDate@1210001 : Date;CreationDate@1210009 : Date;InfoType@1210007 : 'Initial,Corrective,Cancel';VAR CompanyPackNo@1210014 : Integer;DepartmentNo@1210004 : Integer;DepartmentPackNo@1210003 : Integer;TemplateName@121001 : Code[10]);
    VAR
      CategoryType@1210016 : 'WithoutDisability,WithDisability';
    BEGIN
      IF NOT EmpWithoutDisabilityBuffer.ISEMPTY THEN BEGIN
        CreateSVFormXML(
          FormType,EmpWithoutDisabilityBuffer,DisabilityPeriodBuffer,StartDate,EndDate,CreationDate,
          InfoType,CompanyPackNo,DepartmentNo,DepartmentPackNo,CategoryType::WithoutDisability,TemplateName);
        CompanyPackNo += 1;
      END;

      IF NOT EmpWithDisabilityBuffer.ISEMPTY THEN BEGIN
        CreateSVFormXML(
          FormType,EmpWithDisabilityBuffer,DisabilityPeriodBuffer,StartDate,EndDate,CreationDate,
          InfoType,CompanyPackNo,DepartmentNo,DepartmentPackNo,CategoryType::WithDisability,TemplateName);
        CompanyPackNo += 1;
      END;
    END;

    LOCAL PROCEDURE CreateDisabLaborAndCivilBuffer@1210089(VAR EmplBuffer@1210003 : TEMPORARY Record 5200;VAR EmplLaborBuffer@1210001 : TEMPORARY Record 5200;VAR EmplCivilBuffer@1210000 : TEMPORARY Record 5200);
    VAR
      LaborContract@1210002 : Record 17360;
    BEGIN
      IF EmplBuffer.FINDSET THEN
        REPEAT
          IF LaborContract.GET(EmplBuffer."Contract No.") THEN
            IF LaborContract."Contract Type" = LaborContract."Contract Type"::"Labor Contract" THEN BEGIN
              EmplLaborBuffer.COPY(EmplBuffer);
              EmplLaborBuffer.INSERT;
            END ELSE BEGIN
              EmplCivilBuffer.COPY(EmplBuffer);
              EmplCivilBuffer.INSERT;
            END;
        UNTIL EmplBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateSVFormXML@1210058(FormType@1210017 : 'SPV_1,SZV_6_1,SZV_6_2,SZV_6_3,SZV_6_4';VAR Employee@1210005 : Record 5200;VAR TempPersonMedicalInfoDisability@1210016 : TEMPORARY Record 17353;StartDate@1210006 : Date;EndDate@1210001 : Date;CreationDate@1210009 : Date;InfoType@1210007 : 'Initial,Corrective,Cancel';CompanyPackNo@1210014 : Integer;DepartmentNo@1210004 : Integer;DepartmentPackNo@1210003 : Integer;CategoryType@1210008 : 'WithoutDisability,WithDisability';TemplateName@121001 : Code[10]);
    VAR
      XmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Counter@1210002 : Integer;
      DocCounter@1210024 : Integer;
      InsurAmount@1210011 : Decimal;
      AccumAmount@1210010 : Decimal;
      SZV6_4BonusAmount@1210018 : Decimal;
      SZV6_4InsAmount@1210019 : Decimal;
      SZV6_4InsOverAmount@1210020 : Decimal;
      TotalInsurAmount@1210013 : Decimal;
      TotalAccumAmount@1210012 : Decimal;
      SZV6_4TotalBonusAmount@1210023 : Decimal;
      SZV6_4TotalInsAmount@1210022 : Decimal;
      SZV6_4TotalInsOverAmount@1210021 : Decimal;
      FileName@1210015 : Text[250];
    BEGIN
      FileName := GetXMLFileName(StartDate,CompanyPackNo,DepartmentNo,DepartmentPackNo);
      Counter := 1;

      CreateXMLDoc(XmlDoc,XMLCurrNode);
      XMLAddComplexElement(FilePFRTxt);
      XMLAddSimpleElement(FileNameTxt,FileName);
      AddFileHeader;
      XMLAddComplexElement(IncomingDocumentPackTxt);
      XMLAddAttribute(XMLCurrNode,SurroundingTxt,PartOfFileTxt);
      XMLAddAttribute(XMLCurrNode,StageTxt,BeforeProcessingTxt);

      IF Employee.FINDSET THEN
        REPEAT
          TempPersonMedicalInfoDisability.RESET;
          TempPersonMedicalInfoDisability.SETRANGE("Employee No.",Employee."No.");
          TempPersonMedicalInfoDisability.SETRANGE("Disability Group",CategoryType);
          IF TempPersonMedicalInfoDisability.FINDSET THEN
            REPEAT
              CASE FormType OF
                FormType::SPV_1,FormType::SZV_6_1,FormType::SZV_6_2:
                  CalcInsAndAccumAmounts(
                    InsurAmount,AccumAmount,Employee."No.",
                    TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date");
                FormType::SZV_6_3:
                  CalcTotalEmployeeSalaryAmount(
                    AccumAmount,InsurAmount,Employee."No.",TemplateName,
                    TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date");
                FormType::SZV_6_4:
                  BEGIN
                    CalcSZV6_4BonusAndInsAmounts(
                      SZV6_4BonusAmount,SZV6_4InsAmount,SZV6_4InsOverAmount,TemplateName,Employee."No.",
                      TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date");
                    CalcSZV6_4InsAndAccumAmounts(
                      InsurAmount,AccumAmount,TemplateName,Employee."No.",
                      TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date");
                    SZV6_4TotalBonusAmount += SZV6_4BonusAmount;
                    SZV6_4TotalInsAmount += SZV6_4InsAmount;
                    SZV6_4TotalInsOverAmount += SZV6_4InsOverAmount;
                  END;
              END;
              TotalInsurAmount += InsurAmount;
              TotalAccumAmount += AccumAmount;
              DocCounter += 1;
            UNTIL TempPersonMedicalInfoDisability.NEXT = 0;
        UNTIL Employee.NEXT = 0;

      AddIncomingListInfo(
        FormType,Counter,DocCounter,CompanyPackNo,Employee,CreationDate,StartDate,EndDate,
        InfoType,SZV6_4TotalBonusAmount,SZV6_4TotalInsAmount,SZV6_4TotalInsOverAmount,
        TotalInsurAmount,TotalAccumAmount,CategoryType);

      IF Employee.FINDSET THEN
        REPEAT
          Counter += 1;
          TempPersonMedicalInfoDisability.RESET;
          TempPersonMedicalInfoDisability.SETRANGE("Employee No.",Employee."No.");
          TempPersonMedicalInfoDisability.SETRANGE("Disability Group",CategoryType);
          IF TempPersonMedicalInfoDisability.FINDSET THEN
            REPEAT
              CASE FormType OF
                FormType::SPV_1:
                  AddEmplContribAndPeriodsSPV1(
                    Counter,Employee,StartDate,EndDate,
                    TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date",
                    CreationDate,InfoType,CategoryType);
                FormType::SZV_6_1,FormType::SZV_6_2:
                  AddEmplContribAndPeriodsSZV62(
                    Counter,Employee,StartDate,EndDate,
                    TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date",
                    CreationDate,InfoType,CategoryType);
                FormType::SZV_6_3:
                  AddEmplContribAndPeriodsSZV63(
                    Counter,Employee,
                    TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date",
                    CreationDate,InfoType,CategoryType,TemplateName);
                FormType::SZV_6_4:
                  AddEmplContribAndPeriodsSZV64(
                    Counter,Employee,StartDate,
                    TempPersonMedicalInfoDisability."Starting Date",TempPersonMedicalInfoDisability."Ending Date",
                    CreationDate,InfoType,CategoryType,TemplateName);
              END;
            UNTIL TempPersonMedicalInfoDisability.NEXT = 0;
        UNTIL Employee.NEXT = 0;

      IF NOT TestMode THEN
        SaveXMLFile(XmlDoc,FileName);
    END;

    LOCAL PROCEDURE CreateXMLDoc@1210010(VAR XmlDoc@1210005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ProcInstr@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction");
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;
      ProcInstr := XmlDoc.CreateProcessingInstruction('xml',' version="1.0" encoding="windows-1251"');
      XmlDoc.AppendChild(ProcInstr);
    END;

    LOCAL PROCEDURE SaveXMLFile@1210036(VAR XmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";FileName@1210000 : Text[250]);
    VAR
      TempBlob@1210004 : TEMPORARY Record 99008535;
      OutStr@1210003 : OutStream;
      InStr@1210002 : InStream;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XmlDoc.Save(OutStr);
      TempBlob.Blob.CREATEINSTREAM(InStr);
      DOWNLOADFROMSTREAM(InStr,Text002,'',Text003,FileName);
    END;

    LOCAL PROCEDURE AddFileHeader@1210013();
    BEGIN
      XMLAddComplexElement(FileHeaderTxt);
      XMLAddSimpleElement(FormatVersionTxt,'07.00');
      XMLAddSimpleElement(FileTypeTxt,EXTERNALTxt);
      XMLAddComplexElement(DataPreparationProgramTxt);
      XMLAddSimpleElement(ProgramNameTxt,'MICROSOFT DYNAMICS NAV');
      XMLAddSimpleElement(VersionTxt,'2016');
      XMLBackToParent;
      XMLAddSimpleElement(DataSourceTxt,INSURERTxt);
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddCompanyInfo@1210020();
    BEGIN
      CompanyInfo.GET;
      XMLAddComplexElement(PackCreatorTxt);
      AddCompanyTaxNumberInfo;
      XMLAddSimpleElement(CodEGRIPTxt,'');
      XMLAddSimpleElement(CodEGRULTxt,CompanyInfo."OGRN Code");
      XMLAddSimpleElement(FormTxt,CompanyInfo."Form of Ownership");
      XMLAddSimpleElement(CompanyNameTxt,LocalReportMgt.GetCompanyName);
      XMLAddSimpleElement(ShortNameTxt,CompanyInfo.Name);
      XMLAddSimpleElement(RegistrationNumberTxt,CompanyInfo."Pension Fund Registration No.");
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddEmployeeForm@1210017(Counter@1210000 : Integer;Employee@1210001 : Record 5200;FillingDate@1210003 : Date);
    VAR
      AlternativeAddress@1210002 : Record 5201;
      Person@1210004 : Record 17350;
    BEGIN
      XMLAddComplexElement(AnketaIPTxt);
      XMLAddSimpleElement(NumberInPackTxt,FORMAT(Counter));
      XMLAddComplexElement(AnketaDataTxt);
      AddEmployeeNameInfo(Employee);
      CASE Employee.Gender OF
        Employee.Gender::Male:
          XMLAddSimpleElement(GenderTxt,MaleTxt);
        Employee.Gender::Female:
          XMLAddSimpleElement(GenderTxt,FemaleTxt);
      END;
      XMLAddSimpleElement(BirthDateTxt,FormatDate(Employee."Birth Date"));
      GetAddressByType(Employee."Person No.",AddressType::Birthplace,AlternativeAddress);
      XMLAddComplexElement(BirthPlaceTxt);
      Person.GET(Employee."Person No.");
      CASE Person."Birthplace Type" OF
        Person."Birthplace Type"::Standard:
          XMLAddSimpleElement(BirthPlaceTypeTxt,STANDARDTxt);
        Person."Birthplace Type"::Special:
          XMLAddSimpleElement(BirthPlaceTypeTxt,SPECIALTxt);
      END;
      XMLAddSimpleElement(BirthCityTxt,AlternativeAddress.City);
      XMLAddSimpleElement(BirthCountyTxt,AlternativeAddress.Area);
      XMLAddSimpleElement(BirthRegionTxt,AlternativeAddress.Region);
      XMLBackToParent;
      XMLAddSimpleElement(CitizenshipTxt,GetCitizenship(Employee."Person No."));
      AddAddressInfo(RegistrationAddressTxt,Employee."Person No.",AddressType::Registration);
      AddAddressInfo(ActualAddressTxt,Employee."Person No.",AddressType::Permanent);
      IF (Employee."Phone No." = '') AND (Employee."Mobile Phone No." <> '') THEN
        XMLAddSimpleElement(PhoneTxt,Employee."Mobile Phone No.")
      ELSE
        XMLAddSimpleElement(PhoneTxt,Employee."Phone No.");
      XMLBackToParent;
      AddEmployeeDocumentInfo(Employee."Person No.");
      XMLAddSimpleElement(FillDateTxt,FormatDate(FillingDate));
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddEmplContribAndPeriodsSPV1@1210032(Counter@1210000 : Integer;Employee@1210001 : Record 5200;StartDate@1210004 : Date;EndDate@1210003 : Date;EmployeePeriodStartDate@1210012 : Date;EmployeePeriodEndDate@1210011 : Date;CreationDate@1210010 : Date;InfoType@1210005 : 'Initial,Corrective,Cancel';CategoryType@1210013 : 'WithoutDisability,WithDisability');
    VAR
      Person@1210002 : Record 17350;
      InsurAmount@1210007 : Decimal;
      AccumAmount@1210006 : Decimal;
    BEGIN
      Person.GET(Employee."Person No.");
      XMLAddComplexElement(SPV1TitleTxt);
      AddEmplContribPeriodsHeader(Counter,Employee,StartDate,EndDate,InfoType,SPV1Txt,CategoryType);
      CalcInsAndAccumAmounts(InsurAmount,AccumAmount,Employee."No.",EmployeePeriodStartDate,EmployeePeriodEndDate);
      AddInsAndAccumAmountInfo(InsurAmount,AccumAmount);
      XMLAddSimpleElement(FillDateTxt,FormatDate(CreationDate));
      XMLAddSimpleElement(CreationDateAsOfTxt,FormatDate(CreationDate));
      AddEmplExpBuffer(Employee."No.",EmployeePeriodStartDate,EmployeePeriodEndDate);

      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddEmplContribAndPeriodsSZV62@1210034(Counter@1210000 : Integer;Employee@1210001 : Record 5200;StartDate@1210004 : Date;EndDate@1210003 : Date;EmployeePeriodStartDate@1210010 : Date;EmployeePeriodEndDate@1210009 : Date;CreationDate@1210008 : Date;InfoType@1210005 : 'Initial,Corrective,Cancel';CategoryType@1210011 : 'WithoutDisability,WithDisability');
    VAR
      Person@1210002 : Record 17350;
      InsurAmount@1210007 : Decimal;
      AccumAmount@1210006 : Decimal;
    BEGIN
      Person.GET(Employee."Person No.");
      XMLAddComplexElement(SZV62TitleTxt);
      AddEmplContribPeriodsHeader(Counter,Employee,StartDate,EndDate,InfoType,SZV62Txt,CategoryType);
      AddAddressInfo(AddressIPTxt,Employee."Person No.",AddressType::Registration);

      CalcInsAndAccumAmounts(InsurAmount,AccumAmount,Employee."No.",StartDate,EndDate);
      AddInsAndAccumAmountInfo(InsurAmount,AccumAmount);
      XMLAddSimpleElement(FillDateTxt,FormatDate(CreationDate));
      AddEmplExpBuffer(Employee."No.",EmployeePeriodStartDate,EmployeePeriodEndDate);

      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddEmplContribAndPeriodsSZV63@121007(Counter@1210000 : Integer;Employee@1210001 : Record 5200;EmployeePeriodStartDate@1210012 : Date;EmployeePeriodEndDate@1210011 : Date;CreationDate@1210008 : Date;InfoType@1210005 : 'Initial,Corrective,Cancel';CategoryType@121002 : 'WithoutDisability,WithDisability';TemplName@121005 : Code[10]);
    VAR
      Month@1210010 : Integer;
      TotalAmount@121001 : Decimal;
      TotalInsAmount@121004 : Decimal;
      AmountType@121006 : 'Month,Total,OverallTotal';
      PeriodStartDate@1210013 : Date;
      PeriodEndDate@1210014 : Date;
    BEGIN
      XMLAddComplexElement(SZV63TitleTxt);
      AddEmplContribPeriodsSZV63Hdr(
        Counter,Employee,DATE2DMY(EmployeePeriodEndDate,3),InfoType,CategoryType,CreationDate);

      PeriodStartDate := EmployeePeriodStartDate;
      FOR Month := DATE2DMY(EmployeePeriodStartDate,2) TO DATE2DMY(EmployeePeriodEndDate,2) DO BEGIN
        IF Month = DATE2DMY(EmployeePeriodEndDate,2) THEN
          PeriodEndDate := EmployeePeriodEndDate
        ELSE
          PeriodEndDate := CALCDATE('<CM>',PeriodStartDate);
        AddSZV63MonthAmountNode(
          TotalAmount,TotalInsAmount,Employee."No.",TemplName,PeriodStartDate,PeriodEndDate);
        PeriodStartDate := CALCDATE('<1M-CM>',PeriodStartDate);
      END;

      AddBonusAmountInfo(AmountType::Total,TotalAmount,TotalInsAmount,0);

      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddEmplContribAndPeriodsSZV64@1210031(Counter@1210000 : Integer;Employee@1210001 : Record 5200;PeriodStartDate@1210002 : Date;StartDate@1210012 : Date;EndDate@1210011 : Date;CreationDate@1210008 : Date;InfoType@1210005 : 'Initial,Corrective,Cancel';CategoryType@121002 : 'WithoutDisability,WithDisability';TemplName@121005 : Code[10]);
    VAR
      CurrentMonth@1210010 : Date;
      StartDateAdd@1210014 : Date;
      EndDateAdd@1210013 : Date;
      MonthCount@1210015 : Integer;
      i@1210016 : Integer;
      InsurAmount@1210007 : Decimal;
      AccumAmount@1210009 : Decimal;
    BEGIN
      XMLAddComplexElement(SZV64TitleTxt);
      AddEmplContribPeriodsSZV64Hdr(
        Counter,Employee,PeriodStartDate,InfoType,CategoryType,CreationDate);

      AddSZV64MonthAmountNode(TRUE,TemplName,Employee."No.",StartDate,EndDate);

      CurrentMonth := PeriodStartDate;
      MonthCount := 3;
      FOR i := 1 TO MonthCount DO BEGIN
        IF CalcDatesIntersection(
             StartDateAdd,EndDateAdd,StartDate,EndDate,
             CurrentMonth,CALCDATE('<CM>',CurrentMonth))
        THEN
          AddSZV64MonthAmountNode(FALSE,TemplName,Employee."No.",StartDateAdd,EndDateAdd);
        IF i < MonthCount THEN
          CurrentMonth := CALCDATE('<1M>',CurrentMonth);
      END;

      CalcSZV6_4InsAndAccumAmounts(
        InsurAmount,AccumAmount,TemplName,Employee."No.",
        StartDate,EndDate);
      AddInsAndAccumAmountInfo(InsurAmount,AccumAmount);

      AddEmplExpBuffer(Employee."No.",StartDate,EndDate);

      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddSZV63MonthAmountNode@121017(VAR TotalAmount@121005 : Decimal;VAR TotalInsAmount@121004 : Decimal;EmployeeNo@121003 : Code[20];TemplateName@121002 : Code[10];StartDate@121001 : Date;EndDate@121000 : Date);
    VAR
      Amount@121007 : Decimal;
      InsAmount@121006 : Decimal;
      AmountType@121008 : 'Month,Total,OverallTotal';
    BEGIN
      GetSZV6Amounts(
        Amount,InsAmount,TotalAmount,TotalInsAmount,EmployeeNo,TemplateName,StartDate,EndDate);
      IF (Amount <> 0) OR (InsAmount <> 0) THEN
        AddBonusAmountInfo(AmountType::Month,Amount,InsAmount,DATE2DMY(StartDate,2));
    END;

    LOCAL PROCEDURE GetSZV6Amounts@121016(VAR Amount@121000 : Decimal;VAR InsAmount@121001 : Decimal;VAR TotalAmount@121006 : Decimal;VAR TotalInsAmount@121007 : Decimal;EmployeeNo@121002 : Code[20];TemplateName@121003 : Code[10];StartDate@121004 : Date;EndDate@121005 : Date);
    BEGIN
      CalcTotalEmployeeSalaryAmount(Amount,InsAmount,EmployeeNo,TemplateName,StartDate,EndDate);
      TotalAmount += Amount;
      TotalInsAmount += InsAmount;
    END;

    LOCAL PROCEDURE AddSZV64MonthAmountNode@1210087(IsMonth@1210000 : Boolean;TemplName@1210002 : Code[10];EmployeeNo@1210001 : Code[20];StartDate@1210012 : Date;EndDate@1210011 : Date);
    VAR
      BonusAmount@121001 : Decimal;
      InsAmount@121004 : Decimal;
      InsOverAmount@1210003 : Decimal;
      Special1Amount@1210004 : Decimal;
      Special2Amount@1210006 : Decimal;
    BEGIN
      CalcSZV6_4BonusAndInsAmounts(
        BonusAmount,InsAmount,InsOverAmount,TemplName,EmployeeNo,StartDate,EndDate);
      CalcSZV6_4SpecialCondAmounts(Special1Amount,Special2Amount,TemplName,EmployeeNo,StartDate,EndDate);
      AddBonusAmountInfo6_4(IsMonth,DATE2DMY(EndDate,2),BonusAmount,InsAmount,InsOverAmount);
      AddSpecialConditionsAmounts(IsMonth,DATE2DMY(EndDate,2),Special1Amount,Special2Amount);
    END;

    LOCAL PROCEDURE AddEmplContribPeriodsHeader@1210051(Counter@1210000 : Integer;Employee@1210002 : Record 5200;StartDate@1210004 : Date;EndDate@1210003 : Date;InfoType@1210005 : 'Initial,Corrective,Cancel';FormType@1210006 : Text[30];CategoryType@1210007 : 'WithoutDisability,WithDisability');
    VAR
      Person@1210001 : Record 17350;
    BEGIN
      Person.GET(Employee."Person No.");
      XMLAddSimpleElement(NumberInPackTxt,FORMAT(Counter));
      XMLAddSimpleElement(FormTypeTxt,FormType);
      AddInfoType(InfoType);
      XMLAddSimpleElement(RegistrationNumberTxt,CompanyInfo."Pension Fund Registration No.");
      XMLAddSimpleElement(ShortNameTxt,CompanyInfo.Name);
      AddCompanyTaxNumberInfo;
      XMLAddSimpleElement(CategoryCodeTxt,GetCategoryCode(CategoryType));
      AddPeriodInfo(StartDate,EndDate);
      XMLAddSimpleElement(InsuranceNumberTxt,Person."Social Security No.");
      AddEmployeeNameInfo(Employee);
    END;

    LOCAL PROCEDURE AddEmplContribPeriodsSZV63Hdr@121012(Counter@1210000 : Integer;Employee@1210002 : Record 5200;Year@121000 : Integer;InfoType@1210005 : 'Initial,Corrective,Cancel';CategoryType@1210007 : 'WithoutDisability,WithDisability';CreationDate@121001 : Date);
    VAR
      Person@1210001 : Record 17350;
    BEGIN
      Person.GET(Employee."Person No.");
      XMLAddSimpleElement(NumberInPackTxt,FORMAT(Counter));
      AddInfoType(InfoType);
      XMLAddSimpleElement(InsuranceNumberTxt,Person."Social Security No.");
      AddEmployeeNameInfo(Employee);
      XMLAddSimpleElement(RegistrationNumberTxt,CompanyInfo."Pension Fund Registration No.");
      XMLAddSimpleElement(ShortNameTxt,CompanyInfo.Name);
      AddCompanyTaxNumberInfo;
      XMLAddSimpleElement(CategoryCodeTxt,GetCategoryCode(CategoryType));

      XMLAddSimpleElement(ContractTypeTxt,GetContractType(Employee));

      XMLAddSimpleElement(ReportingYearTxt,FORMAT(Year));
      XMLAddSimpleElement(FillDateTxt,FormatDate(CreationDate));
    END;

    LOCAL PROCEDURE AddEmplContribPeriodsSZV64Hdr@1210070(Counter@1210000 : Integer;Employee@1210002 : Record 5200;PeriodStartDate@121000 : Date;InfoType@1210005 : 'Initial,Corrective,Cancel';CategoryType@1210007 : 'WithoutDisability,WithDisability';CreationDate@121001 : Date);
    VAR
      Person@1210001 : Record 17350;
    BEGIN
      Person.GET(Employee."Person No.");
      XMLAddSimpleElement(NumberInPackTxt,FORMAT(Counter));
      AddInfoType(InfoType);
      XMLAddSimpleElement(RegistrationNumberTxt,CompanyInfo."Pension Fund Registration No.");
      XMLAddSimpleElement(ShortNameTxt,CompanyInfo.Name);
      AddCompanyTaxNumberInfo;
      XMLAddSimpleElement(CategoryCodeTxt,GetCategoryCode(CategoryType));
      AddPeriodInfo(PeriodStartDate,CALCDATE('<+2M+CM>',PeriodStartDate));
      XMLAddSimpleElement(InsuranceNumberTxt,Person."Social Security No.");
      AddEmployeeNameInfo(Employee);
      XMLAddSimpleElement(ContractTypeTxt,GetContractType(Employee));
      XMLAddSimpleElement(FillDateTxt,FormatDate(CreationDate));
      XMLAddSimpleElement(CreationDateAsOfTxt,FormatDate(CreationDate));
    END;

    LOCAL PROCEDURE AddEmplExpBuffer@1210080(EmployeeNo@1210002 : Code[20];StartDate@121000 : Date;EndDate@1210003 : Date);
    VAR
      ExperienceBuffer@1210001 : TEMPORARY Record 17361;
      i@1210004 : Integer;
    BEGIN
      CreateExperienceBuffer(ExperienceBuffer,EmployeeNo,StartDate,EndDate);
      IF ExperienceBuffer.FINDSET THEN
        REPEAT
          i += 1;
          XMLAddComplexElement(StagePeriodTxt);
          XMLAddSimpleElement(LineNumberTxt,FORMAT(i));
          XMLAddSimpleElement(PeriodStartDateTxt,FormatDate(ExperienceBuffer."Starting Date"));
          XMLAddSimpleElement(PeriodEndDateTxt,FormatDate(ExperienceBuffer."Ending Date"));
          XMLBackToParent;
        UNTIL ExperienceBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE AddPeriodInfo@1210012(StartDate@1210000 : Date;EndDate@1210001 : Date);
    BEGIN
      XMLAddComplexElement(ReportingPeriodTxt);
      CASE DATE2DMY(EndDate,2) OF
        3:
          XMLAddSimpleElement(QuarterTxt,'1');
        6:
          XMLAddSimpleElement(QuarterTxt,'2');
        9:
          XMLAddSimpleElement(QuarterTxt,'3');
        12:
          XMLAddSimpleElement(QuarterTxt,'4');
      END;
      XMLAddSimpleElement(YearTxt,FORMAT(DATE2DMY(StartDate,3)));
      XMLAddSimpleElement(NameTxt,STRSUBSTNO(FromToTxt,FormatDate(StartDate),FormatDate(EndDate)));
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddInsAndAccumAmountInfo@1210026(InsAmount@1210000 : Decimal;AccumAmount@1210001 : Decimal);
    BEGIN
      XMLAddComplexElement(TotalContributionToInsuredTxt);
      XMLAddSimpleElement(AccruedTxt,FORMAT(InsAmount,0,9));
      XMLAddSimpleElement(PaidTxt,FORMAT(InsAmount,0,9));
      XMLBackToParent;
      XMLAddComplexElement(TotalContributionToAccumulatedTxt);
      XMLAddSimpleElement(AccruedTxt,FORMAT(AccumAmount,0,9));
      XMLAddSimpleElement(PaidTxt,FORMAT(AccumAmount,0,9));
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddCompanyTaxNumberInfo@1210035();
    BEGIN
      XMLAddComplexElement(TaxNumberTxt);
      XMLAddSimpleElement(INNTxt,CompanyInfo."VAT Registration No.");
      XMLAddSimpleElement(KPPTxt,CompanyInfo."KPP Code");
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddEmployeeNameInfo@1210040(Employee@1210000 : Record 5200);
    BEGIN
      XMLAddComplexElement(FIOTxt);
      XMLAddSimpleElement(LastNameTxt,Employee."Last Name");
      XMLAddSimpleElement(FirstNameTxt,Employee."First Name");
      XMLAddSimpleElement(MiddleNameTxt,Employee."Middle Name");
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddIncomingListInfo@1210029(FormType@121000 : 'SPV_1,SZV_6_1,SZV_6_2,SZV_6_3,SZV_6_4';Counter@1210000 : Integer;DocCounter@1210012 : Integer;PackNumber@1210001 : Integer;VAR Employee@1210002 : Record 5200;CreationDate@1210003 : Date;StartDate@1210004 : Date;EndDate@1210005 : Date;InfoType@1210010 : 'Initial,Corrective,Cancel';SZV6_4TotalBonusAmount@1210011 : Decimal;SZV6_4TotalInsAmount@1210009 : Decimal;SZV6_4TotalInsOverAmount@1210008 : Decimal;InsurAmount@1210007 : Decimal;AccumAmount@1210006 : Decimal;CategoryType@1170000002 : 'WithoutDisability,WithDisability');
    VAR
      AmountType@121004 : 'Month,Total,OverallTotal';
    BEGIN
      CASE FormType OF
        FormType::SPV_1,FormType::SZV_6_1,FormType::SZV_6_2:
          XMLAddComplexElement(IncomingList1Txt);
        FormType::SZV_6_3:
          XMLAddComplexElement(IncomingList2Txt);
        FormType::SZV_6_4:
          XMLAddComplexElement(IncomingList3Txt);
      END;

      XMLAddSimpleElement(NumberInPackTxt,FORMAT(Counter));
      XMLAddSimpleElement(PackContentTypeTxt,PackContentTxt);
      AddCompanyInfo;
      XMLAddComplexElement(PackNumberTxt);
      XMLAddSimpleElement(PrimaryTxt,FORMAT(PackNumber));
      XMLBackToParent;
      XMLAddComplexElement(DocumentCollectionTxt);
      XMLAddSimpleElement(QuantityTxt,'1');
      XMLAddComplexElement(DocumentPresenceTxt);

      CASE FormType OF
        FormType::SPV_1,FormType::SZV_6_1,FormType::SZV_6_2:
          XMLAddSimpleElement(DocumentTypeTxt,DocumentType1Txt);
        FormType::SZV_6_3:
          XMLAddSimpleElement(DocumentTypeTxt,DocumentType2Txt);
        FormType::SZV_6_4:
          XMLAddSimpleElement(DocumentTypeTxt,DocumentType3Txt);
      END;

      XMLAddSimpleElement(QuantityTxt,FORMAT(DocCounter));
      XMLBackToParent;
      XMLBackToParent;
      XMLAddSimpleElement(CreationDateTxt,FormatDate(CreationDate));
      AddInfoType(InfoType);
      XMLAddSimpleElement(CategoryCodeTxt,GetCategoryCode(CategoryType));

      CASE FormType OF
        FormType::SPV_1,FormType::SZV_6_1,FormType::SZV_6_2:
          BEGIN
            AddPeriodInfo(StartDate,EndDate);
            AddInsAndAccumAmountInfo(InsurAmount,AccumAmount);
          END;
        FormType::SZV_6_3:
          BEGIN
            XMLAddSimpleElement(ContractTypeTxt,GetContractType(Employee));
            XMLAddSimpleElement(ReportingYearTxt,FORMAT(DATE2DMY(EndDate,3)));
            AddBonusAmountInfo(AmountType::OverallTotal,AccumAmount,InsurAmount,0);
          END;
        FormType::SZV_6_4:
          BEGIN
            AddPeriodInfo(StartDate,EndDate);
            XMLAddSimpleElement(ContractTypeTxt,GetContractType(Employee));
            AddBonusAmountInfo6_4(
              TRUE,0,SZV6_4TotalBonusAmount,SZV6_4TotalInsAmount,SZV6_4TotalInsOverAmount);
            AddInsAndAccumAmountInfo(InsurAmount,AccumAmount);
          END;
      END;
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddInfoType@1210048(InfoType@1210000 : 'Initial,Corrective,Cancel');
    BEGIN
      CASE InfoType OF
        InfoType::Initial:
          XMLAddSimpleElement(InformationTypeTxt,ORIGINALTxt);
        InfoType::Corrective:
          XMLAddSimpleElement(InformationTypeTxt,CORRECTIVETxt);
        InfoType::Cancel:
          XMLAddSimpleElement(InformationTypeTxt,CANCELLATIONTxt);
      END;
    END;

    LOCAL PROCEDURE AddAddressInfo@1210009(AddressElementName@1210004 : Text;PersonNo@1210000 : Code[20];AddrType@1210001 : 'Permanent,Registration,Birthplace,Other');
    VAR
      AlternativeAddress@1210002 : Record 5201;
      CountryRegion@1210003 : Record 9;
    BEGIN
      IF GetAddressByType(PersonNo,AddrType,AlternativeAddress) THEN BEGIN
        XMLAddComplexElement(AddressElementName);

        IF AlternativeAddress."Country/Region Code" = HRSetup."Local Country/Region Code" THEN BEGIN
          XMLAddSimpleElement(AddressTypeTxt,RUSSIANTxt);
          XMLAddSimpleElement(PostCodeTxt,AlternativeAddress."Post Code");
          XMLAddComplexElement(RussianAddressTxt);
          XMLAddSimpleElement(AddressConditionTxt,VALIDTxt);
          AddAddrNamePart(RegionTxt,AlternativeAddress.Region,AlternativeAddress."Region Category");
          AddAddrNamePart(CountyTxt,AlternativeAddress.Area,AlternativeAddress."Area Category");
          AddAddrNamePart(CityTxt,AlternativeAddress.City,AlternativeAddress."City Category");
          AddAddrNamePart(LocalityTxt,AlternativeAddress.Locality,AlternativeAddress."Locality Category");
          AddAddrNamePart(StreetTxt,AlternativeAddress.Street,AlternativeAddress."Street Category");
          IF AlternativeAddress.House <> '' THEN
            AddAddrNumberPart(HouseTxt,HTxt,AlternativeAddress.House)
          ELSE
            AddAddrNumberPart(HouseTxt,'','');
          IF AlternativeAddress.Building <> '' THEN
            AddAddrNumberPart(BlockTxt,BLCKTxt,AlternativeAddress.Building)
          ELSE
            AddAddrNumberPart(BlockTxt,'','');
          IF AlternativeAddress.Apartment <> '' THEN
            AddAddrNumberPart(FlatTxt,FLTxt,AlternativeAddress.Apartment)
          ELSE
            AddAddrNumberPart(FlatTxt,'','');
          XMLBackToParent;
        END ELSE BEGIN
          XMLAddSimpleElement(AddressTypeTxt,FOREIGNTxt);
          XMLAddSimpleElement(PostCodeTxt,AlternativeAddress."Post Code");
          XMLAddComplexElement(ForeignAddressTxt);
          XMLAddSimpleElement(CountryCodeTxt,AlternativeAddress.County);
          IF CountryRegion.GET(AlternativeAddress.County) THEN;
          XMLAddSimpleElement(CountryNameTxt,CountryRegion.Name);
          XMLAddSimpleElement(AddressTxt,AlternativeAddress.Address);
          XMLBackToParent;
        END;
        XMLBackToParent;
      END;
    END;

    LOCAL PROCEDURE AddAddrNamePart@1210008(TagName@1210003 : Text;AddressPartValue@1210000 : Text;Abbreviation@1210001 : Text);
    BEGIN
      XMLAddComplexElement(TagName);
      XMLAddSimpleElement(GeographicalNameTxt,AddressPartValue);
      XMLAddSimpleElement(AbbreviationTxt,Abbreviation);
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddAddrNumberPart@1210014(TagName@1210003 : Text;Abbreviation@1210004 : Text;Number@1210005 : Text);
    BEGIN
      XMLAddComplexElement(TagName);
      XMLAddSimpleElement(AbbreviationTxt,Abbreviation);
      XMLAddSimpleElement(NumberTxt,Number);
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddEmployeeDocumentInfo@1210016(PersonNo@1210000 : Code[20]);
    VAR
      PersonDocument@1210001 : Record 17352;
      DocumentName@1210002 : Text[100];
      DocumentTypeDesc@1210003 : Code[14];
    BEGIN
      GetIdentifyDoc(PersonNo,PersonDocument,DocumentName);
      XMLAddComplexElement(ConfirmationDocumentTxt);
      CASE PersonDocument."Document Type" OF
        '1':
          DocumentTypeDesc := 'ПАСПОРТ';
        '2':
          DocumentTypeDesc := 'ЗГПАСПОРТ';
        '3':
          DocumentTypeDesc := 'СВИД О РОЖД';
        '4':
          DocumentTypeDesc := 'УДОСТ ОФИЦЕРА';
        '5':
          DocumentTypeDesc := 'СПРАВКА ОБ ОСВ';
        '6':
          DocumentTypeDesc := 'ПАСПОРТ МОРФЛТ';
        '7':
          DocumentTypeDesc := 'ВОЕННЫЙ БИЛЕТ';
        '9':
          DocumentTypeDesc := 'ДИППАСПОРТ РФ';
        '10':
          DocumentTypeDesc := 'ИНПАСПОРТ';
        '11':
          DocumentTypeDesc := 'СВИД БЕЖЕНЦА';
        '12':
          DocumentTypeDesc := 'ВИД НА ЖИТЕЛЬ';
        '13':
          DocumentTypeDesc := 'УДОСТ БЕЖЕНЦА';
        '14':
          DocumentTypeDesc := 'ВРЕМ УДОСТ';
        '21':
          DocumentTypeDesc := 'ПАСПОРТ РОССИИ';
        '22':
          DocumentTypeDesc := 'ЗГПАСПОРТ РФ';
        '26':
          DocumentTypeDesc := 'ПАСПОРТ МОРЯКА';
        '27':
          DocumentTypeDesc := 'ВОЕН БИЛЕТ ОЗ';
        '91':
          DocumentTypeDesc := 'ПРОЧЕЕ';
      END;
      IF PersonDocument."Document Type" = '91' THEN
        DocumentName := ''
      ELSE
        DocumentName := DocumentTypeDesc;

      XMLAddSimpleElement(ConfirmationDocumentTypeTxt,DocumentTypeDesc);
      XMLAddComplexElement(DocumentTxt);
      XMLAddSimpleElement(ConfirmationDocumentNameTxt,DocumentName);
      XMLAddSimpleElement(SeriaRomanDigitsTxt,COPYSTR(PersonDocument."Document Series",1,2));
      XMLAddSimpleElement(SeriaRussianLettersTxt,COPYSTR(PersonDocument."Document Series",3,2));
      XMLAddSimpleElement(ConfirmationDocumentNumberTxt,PersonDocument."Document No.");
      XMLAddSimpleElement(IssueDateTxt,FormatDate(PersonDocument."Issue Date"));
      XMLAddSimpleElement(IssueAuthorityTxt,PersonDocument."Issue Authority");
      XMLBackToParent;
      XMLBackToParent;
    END;

    PROCEDURE AddFavourableExperiencePart@1210007(VAR LaborContractLineBuffer@1210000 : TEMPORARY Record 17361);
    VAR
      GeneralDirectory@1210001 : Record 17359;
    BEGIN
      WITH LaborContractLineBuffer DO
        IF HasSpecialWorkConditions THEN BEGIN
          XMLAddSimpleElement(BenefitsQuantityTxt,'1');
          XMLAddComplexElement(BenefitsYearsTxt);
          XMLAddSimpleElement(LineNumberTxt,'1');
          XMLAddComplexElement(SpecialConditionsTxt);
          AddCalculationFeature("Territorial Conditions",GeneralDirectory.Type::"Territor. Condition");
          AddCalculationFeature("Special Conditions",GeneralDirectory.Type::"Special Work Condition");
          AddCalculationFeature("Record of Service Reason",GeneralDirectory.Type::"Countable Service Reason");
          AddCalculationFeature("Record of Service Additional",GeneralDirectory.Type::"Countable Service Addition");
          XMLBackToParent;
          XMLBackToParent;
        END;
    END;

    LOCAL PROCEDURE AddCalculationFeature@1210052(GeneralDirectoryCode@1210000 : Code[20];GeneralDirectoryType@1210002 : Option);
    VAR
      GeneralDirectory@1210001 : Record 17359;
    BEGIN
      IF GeneralDirectoryCode <> '' THEN
        WITH GeneralDirectory DO BEGIN
          SETRANGE(Code,GeneralDirectoryCode);
          SETRANGE(Type,GeneralDirectoryType);
          FINDFIRST;
          CASE "XML Element Type" OF
            "XML Element Type"::"Territorial Conditions":
              BEGIN
                XMLAddComplexElement(TerritorialConditionsTxt);
                XMLAddSimpleElement('ОснованиеТУ',GeneralDirectoryCode);
                XMLBackToParent;
              END;
            "XML Element Type"::"Special Conditions":
              BEGIN
                XMLAddComplexElement(SpecialLaborConditionsTxt);
                XMLAddSimpleElement('ОснованиеОУТ',GeneralDirectoryCode);
                XMLBackToParent;
              END;
            "XML Element Type"::"Countable Service Reason":
              BEGIN
                XMLAddComplexElement(CountableServiceReasonTxt);
                XMLAddSimpleElement('ОснованиеИС',GeneralDirectoryCode);
                XMLBackToParent;
              END;
            "XML Element Type"::"Maternity Leave":
              XMLAddSimpleElement(MaternityLeaveTxt,GeneralDirectoryCode);
            "XML Element Type"::"Long Service":
              BEGIN
                XMLAddComplexElement(LongServiceTxt);
                XMLAddSimpleElement('ОснованиеВЛ',GeneralDirectoryCode);
                XMLBackToParent;
              END;
          END;
        END;
    END;

    LOCAL PROCEDURE AddBonusAmountInfo@121013(AmountType@121003 : 'Month,Total,OverallTotal';Amount@121000 : Decimal;InsAmount@121001 : Decimal;Month@121002 : Integer);
    BEGIN
      XMLAddComplexElement(BonusAmountTxt);
      CASE AmountType OF
        AmountType::Month:
          BEGIN
            XMLAddSimpleElement(LineTypeTxt,MonthTxt);
            XMLAddSimpleElement(MonthTxt,FORMAT(Month));
          END;
        AmountType::Total:
          XMLAddSimpleElement(LineTypeTxt,ITOGOTxt);
        AmountType::OverallTotal:
          XMLAddSimpleElement(LineTypeTxt,PACKTOTALTxt);
      END;

      XMLAddSimpleElement(TotalPaidAmountTxt,FORMAT(Amount,0,9));
      XMLAddSimpleElement(PaidAmountAccruedInsuranceContributionsTxt,FORMAT(InsAmount,0,9));

      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddBonusAmountInfo6_4@1210001(IsTotal@121003 : Boolean;Month@1210000 : Integer;BonusAmount@121000 : Decimal;InsAmount@121001 : Decimal;InsOverAmount@121002 : Decimal);
    BEGIN
      XMLAddComplexElement(BonusAmount64Txt);
      IF IsTotal THEN
        XMLAddSimpleElement(LineTypeTxt,ITOGTxt)
      ELSE BEGIN
        XMLAddSimpleElement(LineTypeTxt,MESCTxt);
        XMLAddSimpleElement(MonthTxt,FORMAT(Month));
      END;
      XMLAddSimpleElement(TotalPaidAmountTxt,FORMAT(BonusAmount,0,9));
      XMLAddSimpleElement(PaidAmountAccruedInsuranceContributionsLessTxt,FORMAT(InsAmount,0,9));
      XMLAddSimpleElement(PaidAmountAccruedInsuranceContributionsMoreTxt,FORMAT(InsOverAmount,0,9));
      XMLBackToParent;
    END;

    LOCAL PROCEDURE AddSpecialConditionsAmounts@1210086(IsTotal@121003 : Boolean;Month@1210000 : Integer;Amount1@121000 : Decimal;Amount2@121001 : Decimal);
    BEGIN
      XMLAddComplexElement(SpecialBonusAmountTxt);
      IF IsTotal THEN
        XMLAddSimpleElement(LineTypeTxt,ITOGTxt)
      ELSE BEGIN
        XMLAddSimpleElement(LineTypeTxt,MESCTxt);
        XMLAddSimpleElement(MonthTxt,FORMAT(Month));
      END;
      XMLAddSimpleElement(SpecialPaidAmount271Txt,FORMAT(Amount1,0,9));
      XMLAddSimpleElement(SpecialPaidAmount27218Txt,FORMAT(Amount2,0,9));
      XMLBackToParent;
    END;

    LOCAL PROCEDURE XMLAddElement@1(VAR XMLNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1210001 : Text;NodeText@1210002 : Text;NameSpace@1210003 : Text;VAR CreatedXMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") ExitStatus@1000 : Integer;
    VAR
      NewChildNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeType@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeType";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode(XmlNodeType.Element,NodeName,NameSpace);

      IF ISNULL(NewChildNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF NodeText <> '' THEN
        NewChildNode.InnerText := NodeText;

      IF XMLNode.NodeType.Equals(XmlNodeType.ProcessingInstruction) THEN
        CreatedXMLNode := XMLNode.OwnerDocument.AppendChild(NewChildNode)
      ELSE BEGIN
        XMLNode.AppendChild(NewChildNode);
        CreatedXMLNode := NewChildNode;
      END;

      ExitStatus := 0;
    END;

    LOCAL PROCEDURE XMLAddAttribute@2(VAR XMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1210001 : Text;NodeValue@1210000 : Text) ExitStatus@1000 : Integer;
    VAR
      XMLNewAttributeNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLNewAttributeNode := XMLNode.OwnerDocument.CreateAttribute(Name);

      IF ISNULL(XMLNewAttributeNode) THEN BEGIN
        ExitStatus := 60;
        EXIT(ExitStatus)
      END;

      IF NodeValue <> '' THEN
        XMLNewAttributeNode.Value := NodeValue;

      XMLNode.Attributes.SetNamedItem(XMLNewAttributeNode);
    END;

    LOCAL PROCEDURE XMLAddSimpleElement@1210000(NodeName@1210002 : Text;NodeText@1210001 : Text);
    BEGIN
      XMLAddElement(XMLCurrNode,NodeName,UPPERCASE(NodeText),'',XMLNewChild);
    END;

    LOCAL PROCEDURE XMLAddComplexElement@1210003(NodeName@1210000 : Text);
    BEGIN
      XMLAddElement(XMLCurrNode,NodeName,'','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
    END;

    LOCAL PROCEDURE XMLBackToParent@1210005();
    BEGIN
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE CalcAndFillSZV6_3Amounts@121008(VAR TotalFundAmount@1210000 : Decimal;VAR TotalInsAmount@1210001 : Decimal;EmployeeNo@121006 : Code[20];TemplName@121004 : Code[10];StartDate@121000 : Date;EndDate@121001 : Date);
    VAR
      FundAmount@1210003 : Decimal;
      InsAmount@1210002 : Decimal;
    BEGIN
      CalcTotalEmployeeSalaryAmount(FundAmount,InsAmount,EmployeeNo,TemplName,StartDate,EndDate);
      FillSZV6_3FundAndInsAmounts(FundAmount,InsAmount,DATE2DMY(StartDate,2));
      TotalFundAmount += FundAmount;
      TotalInsAmount += InsAmount;
    END;

    LOCAL PROCEDURE CalcAndFillInsAndAccumAmounts@1210050(EmployeeNo@1210000 : Code[20];StartDate@1210001 : Date;EndDate@1210002 : Date;InsurCalcCellName@1210004 : Text[30];InsurPaidCellName@1210003 : Text[30];AccumCalcCellName@1210006 : Text[30];AccumPaidCellName@1210005 : Text[30]);
    VAR
      InsurAmount@1210008 : Decimal;
      AccumAmount@1210007 : Decimal;
    BEGIN
      CalcInsAndAccumAmounts(InsurAmount,AccumAmount,EmployeeNo,StartDate,EndDate);
      FillInsAndAccumAmounts(
        InsurAmount,AccumAmount,InsurCalcCellName,InsurPaidCellName,AccumCalcCellName,AccumPaidCellName);
    END;

    LOCAL PROCEDURE CalcAndFillSZV6_4InsAndSaveAmt@1210038(TemplName@1210000 : Code[10];EmployeeNo@1210001 : Code[20];StartDate@1210003 : Date;EndDate@1210002 : Date);
    VAR
      InsAmount@1210004 : Decimal;
      AccumAmount@1210005 : Decimal;
    BEGIN
      CalcSZV6_4InsAndAccumAmounts(InsAmount,AccumAmount,TemplName,EmployeeNo,StartDate,EndDate);
      FillInsAndAccumAmounts(InsAmount,AccumAmount,'A71','AB71','BC71','CD71');
    END;

    LOCAL PROCEDURE CalcInsAndAccumAmounts@1210043(VAR InsurAmount@1210004 : Decimal;VAR AccumAmount@1210003 : Decimal;EmployeeNo@1210000 : Code[20];StartDate@1210001 : Date;EndDate@1210002 : Date);
    VAR
      Employee@1210005 : Record 5200;
    BEGIN
      WITH Employee DO BEGIN
        SETRANGE("Employee No. Filter",EmployeeNo);
        SETRANGE("Date Filter",StartDate,EndDate);
        SETRANGE("Element Code Filter",HRSetup."TAX PF INS Element Code");
        CALCFIELDS("Payroll Amount");
        InsurAmount := -"Payroll Amount";

        SETRANGE("Element Code Filter",HRSetup."TAX PF SAV Element Code");
        CALCFIELDS("Payroll Amount");
        AccumAmount := -"Payroll Amount";
      END;
    END;

    LOCAL PROCEDURE CalcSZV6_4BonusAndInsAmounts@1210079(VAR BonusAmount@1210000 : Decimal;VAR InsAmount@1210001 : Decimal;VAR InsOverAmount@1210002 : Decimal;TemplName@1210005 : Code[10];EmployeeNo@1210006 : Code[20];StartDate@1210007 : Date;EndDate@1210008 : Date);
    VAR
      PayrollAnalysisLine@1210004 : Record 14962;
      PayrollAnalysisColumn@1210003 : Record 14964;
    BEGIN
      IF NOT CalcSZV6_4Amounts(
           PayrollAnalysisLine,PayrollAnalysisColumn,
           TemplName,EmployeeNo,StartDate,EndDate)
      THEN
        EXIT;

      BonusAmount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
      PayrollAnalysisLine.NEXT;
      InsAmount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
      PayrollAnalysisLine.NEXT;
      InsOverAmount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
    END;

    LOCAL PROCEDURE CalcSZV6_4SpecialCondAmounts@1210083(VAR Special1Amount@1210000 : Decimal;VAR Special2Amount@1210001 : Decimal;TemplName@1210005 : Code[10];EmployeeNo@1210006 : Code[20];StartDate@1210007 : Date;EndDate@1210008 : Date);
    VAR
      PayrollAnalysisLine@1210004 : Record 14962;
      PayrollAnalysisColumn@1210003 : Record 14964;
    BEGIN
      IF NOT CalcSZV6_4Amounts(
           PayrollAnalysisLine,PayrollAnalysisColumn,
           TemplName,EmployeeNo,StartDate,EndDate)
      THEN
        EXIT;

      PayrollAnalysisLine.NEXT(3);
      Special1Amount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
      PayrollAnalysisLine.NEXT;
      Special2Amount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
    END;

    LOCAL PROCEDURE CalcSZV6_4InsAndAccumAmounts@1210054(VAR InsAmount@1210000 : Decimal;VAR AccumAmount@1210001 : Decimal;TemplName@1210005 : Code[10];EmployeeNo@1210006 : Code[20];StartDate@1210007 : Date;EndDate@1210008 : Date);
    VAR
      PayrollAnalysisLine@1210004 : Record 14962;
      PayrollAnalysisColumn@1210003 : Record 14964;
    BEGIN
      IF NOT CalcSZV6_4Amounts(
           PayrollAnalysisLine,PayrollAnalysisColumn,
           TemplName,EmployeeNo,StartDate,EndDate)
      THEN
        EXIT;

      PayrollAnalysisLine.NEXT(5);
      InsAmount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
      PayrollAnalysisLine.NEXT;
      AccumAmount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
    END;

    LOCAL PROCEDURE CalcSZV6_4Amounts@1210084(VAR PayrollAnalysisLine@1210003 : Record 14962;VAR PayrollAnalysisColumn@1210002 : Record 14964;TemplName@1210005 : Code[10];EmployeeNo@1210006 : Code[20];StartDate@1210007 : Date;EndDate@1210008 : Date) : Boolean;
    BEGIN
      PayrollAnalysisLine.SETRANGE("Analysis Line Template Name",TemplName);
      PayrollAnalysisLine.SETRANGE("Employee Filter",EmployeeNo);
      PayrollAnalysisLine.SETRANGE("Date Filter",StartDate,EndDate);
      IF NOT PayrollAnalysisLine.FINDSET THEN
        EXIT(FALSE);
      IF PayrollAnalysisLine.COUNT < 7 THEN
        EXIT(FALSE);
      PayrollAnalysisColumn.SETRANGE("Analysis Column Template",TemplName);
      IF NOT PayrollAnalysisColumn.FINDSET THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillInsAndAccumAmounts@1210021(InsurAmount@1210001 : Decimal;AccumAmount@1210000 : Decimal;InsurCalcCellName@1210004 : Text[30];InsurPaidCellName@1210003 : Text[30];AccumCalcCellName@1210006 : Text[30];AccumPaidCellName@1210005 : Text[30]);
    BEGIN
      ExcelMgt.FillCell(InsurCalcCellName,FormatDecimal(InsurAmount));
      ExcelMgt.FillCell(InsurPaidCellName,FormatDecimal(InsurAmount));
      ExcelMgt.FillCell(AccumCalcCellName,FormatDecimal(AccumAmount));
      ExcelMgt.FillCell(AccumPaidCellName,FormatDecimal(AccumAmount));
    END;

    LOCAL PROCEDURE CalcDatesIntersection@1170000003(VAR ResultStartDate@1170000004 : Date;VAR ResultEndDate@1170000005 : Date;StartDate1@1170000000 : Date;EndDate1@1170000001 : Date;StartDate2@1170000002 : Date;EndDate2@1170000003 : Date) : Boolean;
    BEGIN
      IF (StartDate1 > EndDate2) OR (EndDate1 < StartDate2) THEN
        EXIT(FALSE);
      IF StartDate1 > StartDate2 THEN
        ResultStartDate := StartDate1
      ELSE
        ResultStartDate := StartDate2;
      IF EndDate1 < EndDate2 THEN
        ResultEndDate := EndDate1
      ELSE
        ResultEndDate := EndDate2;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAddressByType@1210030(PersonNo@1210000 : Code[20];AddrType@1210001 : 'Permanent,Registration,Birthplace,Other';VAR AlternativeAddress@1210002 : Record 5201) : Boolean;
    BEGIN
      WITH AlternativeAddress DO BEGIN
        INIT;
        SETCURRENTKEY("Person No.","Address Type","Valid from Date");
        SETRANGE("Person No.",PersonNo);
        SETRANGE("Address Type",AddrType);
        EXIT(FINDLAST);
      END;
    END;

    LOCAL PROCEDURE GetIdentifyDoc@1210023(PersonNo@1210001 : Code[20];VAR PersonDocument@1210000 : Record 17352;VAR DocumentName@1210003 : Text[100]);
    VAR
      Person@1210002 : Record 17350;
      TaxpayerDocumentType@1210004 : Record 12429;
    BEGIN
      Person.GET(PersonNo);
      Person.TESTFIELD("Identity Document Type");
      TaxpayerDocumentType.GET(Person."Identity Document Type");
      DocumentName := TaxpayerDocumentType."Document Name";
      PersonDocument.SETRANGE("Person No.",PersonNo);
      PersonDocument.SETRANGE("Document Type",Person."Identity Document Type");
      IF PersonDocument.FINDLAST THEN;
    END;

    LOCAL PROCEDURE GetCitizenship@1210019(PersonNo@1210000 : Code[20]) : Text[30];
    VAR
      Person@1210001 : Record 17350;
      CountryRegion@1210002 : Record 9;
    BEGIN
      Person.GET(PersonNo);
      IF (Person.Citizenship = '3') AND (Person."Citizenship Country/Region" <> '') THEN BEGIN
        CountryRegion.GET(Person."Citizenship Country/Region");
        EXIT(CountryRegion.Name);
      END;

      EXIT('');
    END;

    LOCAL PROCEDURE FillExcelRow@1210004(CellName@1210000 : Text[30];CellsQty@1210001 : Integer;Value@1210002 : Text[250]);
    BEGIN
      ExcelMgt.FillCellsGroup2(CellName,CellsQty,1,UPPERCASE(Value),' ',1);
    END;

    LOCAL PROCEDURE FillADV1Date@1210006(CellName@1210000 : Code[10];Date@1210001 : Date);
    BEGIN
      FillExcelRow(CellName,2,FORMAT(DATE2DMY(Date,1)));
      CellName := ExcelMgt.GetNextColumn(ExcelMgt.CellName2ColumnName(CellName),3) + FORMAT(ExcelMgt.CellName2RowNo(CellName));
      FillExcelRow(CellName,8,LocalMgt.Month2Text(Date));
      CellName := ExcelMgt.GetNextColumn(ExcelMgt.CellName2ColumnName(CellName),9) + FORMAT(ExcelMgt.CellName2RowNo(CellName));
      FillExcelRow(CellName,4,FORMAT(DATE2DMY(Date,3)));
    END;

    LOCAL PROCEDURE FillSPV1Date@1210024(CellName@1210000 : Code[10];Date@1210001 : Date);
    BEGIN
      ExcelMgt.FillCell(CellName,FORMAT(DATE2DMY(Date,1)));
      CellName := ExcelMgt.GetNextColumn(ExcelMgt.CellName2ColumnName(CellName),8) + FORMAT(ExcelMgt.CellName2RowNo(CellName));
      ExcelMgt.FillCell(CellName,LocalMgt.Month2Text(Date));
      CellName := ExcelMgt.GetNextColumn(ExcelMgt.CellName2ColumnName(CellName),20) + FORMAT(ExcelMgt.CellName2RowNo(CellName));
      ExcelMgt.FillCell(CellName,FORMAT(DATE2DMY(Date,3)));
    END;

    LOCAL PROCEDURE FormatDecimal@1210064(Amount@1210000 : Decimal) : Text[30];
    BEGIN
      EXIT(FORMAT(Amount,0,1));
    END;

    PROCEDURE GetSZVType@1210022(Employee@1210000 : Record 5200;StartDate@1210001 : Date;EndDate@1210002 : Date) : Integer;
    VAR
      EmployeeAbsenceEntry@1210003 : Record 17389;
      TimeActivity@1210004 : Record 5206;
      LaborContract@1210005 : Record 17360;
      LaborContractLine@121000 : Record 17361;
      SZVType@1210006 : 'SZV-6-1,SZV-6-2';
    BEGIN
      EmployeeAbsenceEntry.SETRANGE("Employee No.",Employee."No.");
      EmployeeAbsenceEntry.SETFILTER("Start Date",'..%1',EndDate);
      EmployeeAbsenceEntry.SETFILTER("End Date",'%1..',StartDate);
      EmployeeAbsenceEntry.SETRANGE("Entry Type",EmployeeAbsenceEntry."Entry Type"::Usage);
      IF EmployeeAbsenceEntry.FINDSET THEN
        REPEAT
          TimeActivity.GET(EmployeeAbsenceEntry."Time Activity Code");
          IF TimeActivity."PF Reporting Absence Code" <> '' THEN
            EXIT(SZVType::"SZV-6-1");
        UNTIL EmployeeAbsenceEntry.NEXT = 0;

      FilterLaborContract(LaborContract,Employee."No.",StartDate,EndDate);
      LaborContract.SETRANGE("Contract Type",LaborContract."Contract Type"::"Civil Contract");
      LaborContract.SETRANGE(Status,LaborContract.Status::Approved);
      IF LaborContract.FINDFIRST THEN
        EXIT(SZVType::"SZV-6-1");

      LaborContract.SETRANGE("Contract Type",LaborContract."Contract Type"::"Labor Contract");
      IF LaborContract.FINDFIRST THEN BEGIN
        LaborContractLine.SETRANGE("Contract No.",LaborContract."No.");
        LaborContractLine.SETRANGE(Status,LaborContractLine.Status::Approved);
        LaborContractLine.SETFILTER("Starting Date",'..%1',EndDate);
        LaborContractLine.SETFILTER("Ending Date",'..%1|%2',EndDate,0D);
        IF LaborContractLine.FINDSET THEN
          REPEAT
            IF LaborContractLine.HasSpecialWorkConditions THEN
              EXIT(SZVType::"SZV-6-1");
          UNTIL LaborContractLine.NEXT = 0;
      END;

      EXIT(SZVType::"SZV-6-2");
    END;

    LOCAL PROCEDURE GetXMLFileName@1210025(StartDate@1210000 : Date;CompanyPackNo@1210001 : Integer;DepartmentNo@1210002 : Integer;DepartmentPackNo@1210003 : Integer) : Text;
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD("Pension Fund Registration No.");
      EXIT(
        'PFR-700-' +
        'Y-' + FORMAT(StartDate,0,'<Year4>') +
        '-ORG-' + CompanyInfo."Pension Fund Registration No." +
        '-DCK-' + FormatNumber(CompanyPackNo,5) +
        '-DPT-' + FormatNumber(DepartmentNo,6) +
        '-DCK-' + FormatNumber(DepartmentPackNo,5) + '.XML'
        );
    END;

    LOCAL PROCEDURE GetExcelTemplate@1210018(FormType@1210000 : 'SPV_1,SZV_6_1,SZV_6_2,SZV_6_3,SZV_6_4') : Code[10];
    BEGIN
      GetHRSetup;
      CASE FormType OF
        FormType::SPV_1:
          BEGIN
            HRSetup.TESTFIELD("SPV-1 Template Code");
            EXIT(HRSetup."SPV-1 Template Code");
          END;
        FormType::SZV_6_1:
          BEGIN
            HRSetup.TESTFIELD("SZV-6-1 Template Code");
            EXIT(HRSetup."SZV-6-1 Template Code");
          END;
        FormType::SZV_6_2:
          BEGIN
            HRSetup.TESTFIELD("SZV-6-2 Template Code");
            EXIT(HRSetup."SZV-6-2 Template Code");
          END;
        FormType::SZV_6_3:
          BEGIN
            HRSetup.TESTFIELD("SZV-6-3 Template Code");
            EXIT(HRSetup."SZV-6-3 Template Code");
          END;
        FormType::SZV_6_4:
          BEGIN
            HRSetup.TESTFIELD("SZV-6-4 Template Code");
            EXIT(HRSetup."SZV-6-4 Template Code");
          END;
      END;
    END;

    LOCAL PROCEDURE FormatNumber@1210039(Number@1210000 : Integer;StrLength@1210001 : Integer) : Text[30];
    BEGIN
      EXIT(PADSTR('',StrLength - STRLEN(FORMAT(Number)),'0') + FORMAT(Number));
    END;

    LOCAL PROCEDURE FormatDate@1210002(Date@1210000 : Date) : Text[30];
    BEGIN
      EXIT(FORMAT(Date,0,'<Day,2>.<Month,2>.<Year4>'));
    END;

    LOCAL PROCEDURE CheckEmptyDate@1210041(Date@1210000 : Date;Name@1210001 : Text[30]);
    BEGIN
      IF Date = 0D THEN
        ERROR(Text008,Name);
    END;

    PROCEDURE CheckStartDate@1210037(StartDate@1210000 : Date);
    BEGIN
      CheckEmptyDate(StartDate,Text009);

      IF DATE2DMY(StartDate,1) <> 1 THEN
        ERROR(Text004,Text009);

      IF NOT (DATE2DMY(StartDate,2) IN [1,4,7,10]) THEN
        ERROR(Text005,Text009);
    END;

    PROCEDURE CheckEndDate@1210042(EndDate@1210000 : Date);
    BEGIN
      CheckEmptyDate(EndDate,Text010);

      IF DATE2DMY(CALCDATE('<+1D>',EndDate),1) <> 1 THEN
        ERROR(Text006,Text010);

      IF NOT (DATE2DMY(EndDate,2) IN [3,6,9,12]) THEN
        ERROR(Text007,Text010);
    END;

    PROCEDURE CalcEndDate@1210047(StartDate@1210000 : Date) : Date;
    BEGIN
      EXIT(CALCDATE('<+3M-1D>',StartDate));
    END;

    PROCEDURE CheckData@1210033(FormType@1210000 : 'SPV,SZV';ExportType@1210005 : 'Excel,XML';StartDate@1210004 : Date;EndDate@1210003 : Date;CreationDate@1210002 : Date);
    BEGIN
      CheckStartDate(StartDate);
      CheckEndDate(EndDate);

      IF StartDate > EndDate THEN
        ERROR(Text013,Text009,Text010);

      IF NOT ((FormType = FormType::SZV) AND (ExportType = ExportType::XML)) THEN
        CheckEmptyDate(CreationDate,Text011);

      IF StartDate > CreationDate THEN
        ERROR(Text013,Text009,Text011);
    END;

    PROCEDURE CreateExperienceBuffer@1210044(VAR ExperienceBuffer@1210005 : Record 17361;EmployeeNo@1210002 : Code[20];StartDate@1210003 : Date;EndDate@1210004 : Date);
    VAR
      EmployeeAbsenceEntry@1210007 : Record 17389;
      TimeActivity@1210006 : Record 5206;
      LaborContract@1210001 : Record 17360;
      LaborContractLine@1210000 : Record 17361;
    BEGIN
      FilterLaborContract(LaborContract,EmployeeNo,StartDate,EndDate);
      LaborContract.SETRANGE("Contract Type",LaborContract."Contract Type"::"Labor Contract");
      IF LaborContract.FINDFIRST THEN BEGIN
        LaborContractLine.SETRANGE("Contract No.",LaborContract."No.");
        LaborContractLine.SETRANGE(Status,LaborContractLine.Status::Approved);
        LaborContractLine.SETFILTER("Starting Date",'..%1',EndDate);
        LaborContractLine.SETFILTER("Ending Date",'..%1|%2',EndDate,0D);
        LaborContractLine.FINDSET;
        REPEAT
          IF LaborContract.Status = LaborContract.Status::Closed THEN
            LaborContractLine."Ending Date" := LaborContract."Ending Date";
          AddPeriod(ExperienceBuffer,LaborContractLine,StartDate,EndDate);
        UNTIL LaborContractLine.NEXT = 0;
      END;

      LaborContract.SETRANGE("Contract Type",LaborContract."Contract Type"::"Civil Contract");
      IF LaborContract.FINDFIRST THEN BEGIN
        LaborContractLine.INIT;
        LaborContractLine."Starting Date" := LaborContract."Starting Date";
        LaborContractLine."Ending Date" := LaborContract."Ending Date";
        LaborContractLine."Record of Service Additional" := CONTRACTTxt;
        AddPeriod(ExperienceBuffer,LaborContractLine,StartDate,EndDate);
      END;

      EmployeeAbsenceEntry.SETRANGE("Employee No.",EmployeeNo);
      EmployeeAbsenceEntry.SETFILTER("Start Date",'..%1',EndDate);
      EmployeeAbsenceEntry.SETFILTER("End Date",'%1..',StartDate);
      EmployeeAbsenceEntry.SETRANGE("Entry Type",EmployeeAbsenceEntry."Entry Type"::Usage);
      IF EmployeeAbsenceEntry.FINDSET THEN
        REPEAT
          TimeActivity.GET(EmployeeAbsenceEntry."Time Activity Code");
          IF TimeActivity."PF Reporting Absence Code" <> '' THEN BEGIN
            LaborContractLine.INIT;
            LaborContractLine."Starting Date" := EmployeeAbsenceEntry."Start Date";
            LaborContractLine."Ending Date" := EmployeeAbsenceEntry."End Date";
            LaborContractLine."Record of Service Additional" := TimeActivity."PF Reporting Absence Code";
            AddPeriod(ExperienceBuffer,LaborContractLine,StartDate,EndDate);
          END;
        UNTIL EmployeeAbsenceEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE AddPeriod@1210059(VAR ExperienceBuffer@1210000 : Record 17361;Period@1210001 : Record 17361;StartDate@1210005 : Date;EndDate@1210004 : Date);
    VAR
      NewExperienceBuffer@1210003 : TEMPORARY Record 17361;
    BEGIN
      IF Period."Starting Date" < StartDate THEN
        Period."Starting Date" := StartDate;

      IF (Period."Ending Date" > EndDate) OR (Period."Ending Date" = 0D) THEN
        Period."Ending Date" := EndDate;

      Period."Contract No." := '';
      Period."Operation Type" := 0;

      ExperienceBuffer.RESET;
      IF ExperienceBuffer.FINDSET THEN
        REPEAT
          // if there is no periods intersection
          IF (ExperienceBuffer."Ending Date" < Period."Starting Date") OR
             (ExperienceBuffer."Starting Date" > Period."Ending Date")
          THEN BEGIN
            NewExperienceBuffer := ExperienceBuffer;
            NewExperienceBuffer.INSERT;
          END ELSE
            // if labor conditions are the same
            IF CheckPeriodsConditions(ExperienceBuffer,Period) THEN BEGIN
              NewExperienceBuffer := ExperienceBuffer;
              NewExperienceBuffer.INSERT;
            END ELSE
              // otherwise add periods
              CASE TRUE OF
                // new period is the same with old one
                (ExperienceBuffer."Starting Date" = Period."Starting Date") AND
                (ExperienceBuffer."Ending Date" = Period."Ending Date"):
                  BEGIN
                    // change old period data to new period's
                    NewExperienceBuffer := ExperienceBuffer;
                    CopyPeriodSpecialConditions(Period,NewExperienceBuffer);
                    NewExperienceBuffer.INSERT;
                  END;
                // new period is earler than old one
                (ExperienceBuffer."Starting Date" = Period."Starting Date") AND
                (ExperienceBuffer."Ending Date" <> Period."Ending Date"):
                  BEGIN
                    // first is new period
                    NewExperienceBuffer := Period;
                    NewExperienceBuffer."Supplement No." := FormatDateSupplement(Period."Starting Date");
                    NewExperienceBuffer.INSERT;
                    // next is rest of old period
                    NewExperienceBuffer := ExperienceBuffer;
                    NewExperienceBuffer."Starting Date" := Period."Ending Date" + 1;
                    NewExperienceBuffer."Supplement No." := FormatDateSupplement(NewExperienceBuffer."Starting Date");
                    NewExperienceBuffer.INSERT;
                  END;
                // new period is inside the old one
                (ExperienceBuffer."Starting Date" <> Period."Starting Date") AND
                (ExperienceBuffer."Ending Date" <> Period."Ending Date"):
                  BEGIN
                    // first is a beginnig part of old period
                    NewExperienceBuffer := ExperienceBuffer;
                    NewExperienceBuffer."Ending Date" := Period."Starting Date" - 1;
                    NewExperienceBuffer.INSERT;

                    // second - whole new period
                    NewExperienceBuffer."Starting Date" := Period."Starting Date";
                    NewExperienceBuffer."Supplement No." := FormatDateSupplement(NewExperienceBuffer."Starting Date");
                    NewExperienceBuffer."Ending Date" := Period."Ending Date";
                    CopyPeriodSpecialConditions(Period,NewExperienceBuffer);
                    NewExperienceBuffer.INSERT;

                    // thirt - rest of the old period
                    NewExperienceBuffer := ExperienceBuffer;
                    NewExperienceBuffer."Starting Date" := Period."Ending Date" + 1;
                    NewExperienceBuffer."Supplement No." := FormatDateSupplement(NewExperienceBuffer."Starting Date");
                    NewExperienceBuffer.INSERT;
                  END;
                // new period is later than old one
                (ExperienceBuffer."Starting Date" <> Period."Starting Date") AND
                (ExperienceBuffer."Ending Date" = Period."Ending Date"):
                  BEGIN
                    // first is a beginning part of the old period
                    NewExperienceBuffer := ExperienceBuffer;
                    NewExperienceBuffer."Ending Date" := Period."Starting Date" - 1;
                    NewExperienceBuffer.INSERT;
                    // second is a new period
                    NewExperienceBuffer."Starting Date" := Period."Starting Date";
                    NewExperienceBuffer."Supplement No." := FormatDateSupplement(NewExperienceBuffer."Starting Date");
                    NewExperienceBuffer."Ending Date" := Period."Ending Date";
                    CopyPeriodSpecialConditions(Period,NewExperienceBuffer);
                    NewExperienceBuffer.INSERT;
                  END;
              END;
        UNTIL ExperienceBuffer.NEXT = 0
      ELSE BEGIN
        NewExperienceBuffer."Starting Date" := Period."Starting Date";
        NewExperienceBuffer."Supplement No." := FormatDateSupplement(NewExperienceBuffer."Starting Date");
        NewExperienceBuffer."Ending Date" := Period."Ending Date";
        CopyPeriodSpecialConditions(Period,NewExperienceBuffer);
        NewExperienceBuffer.INSERT;
      END;

      ExperienceBuffer.RESET;
      ExperienceBuffer.DELETEALL;

      IF NewExperienceBuffer.FINDSET THEN
        REPEAT
          ExperienceBuffer := NewExperienceBuffer;
          ExperienceBuffer.INSERT;
        UNTIL NewExperienceBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyPeriodSpecialConditions@1210027(PeriodFrom@1210000 : Record 17361;VAR PeriodTo@1210001 : Record 17361);
    BEGIN
      WITH PeriodTo DO BEGIN
        "Territorial Conditions" := PeriodFrom."Territorial Conditions";
        "Special Conditions" := PeriodFrom."Special Conditions";
        "Record of Service Reason" := PeriodFrom."Record of Service Reason";
        "Record of Service Additional" := PeriodFrom."Record of Service Additional";
        "Service Years Reason" := PeriodFrom."Service Years Reason";
        "Service Years Additional" := PeriodFrom."Service Years Additional";
      END;
    END;

    LOCAL PROCEDURE CheckPeriodsConditions@1210063(ExperienceBuffer@1210000 : Record 17361;Period@1210001 : Record 17361) : Boolean;
    BEGIN
      EXIT(
        (ExperienceBuffer."Territorial Conditions" = Period."Territorial Conditions") AND
        (ExperienceBuffer."Special Conditions" = Period."Special Conditions") AND
        (ExperienceBuffer."Record of Service Reason" = Period."Record of Service Reason") AND
        (ExperienceBuffer."Record of Service Additional" = Period."Record of Service Additional") AND
        (ExperienceBuffer."Service Years Reason" = Period."Service Years Reason") AND
        (ExperienceBuffer."Service Years Additional" = Period."Service Years Additional"));
    END;

    LOCAL PROCEDURE FormatDateSupplement@1210077(Date@1210000 : Date) : Code[10];
    BEGIN
      EXIT(FORMAT(Date,0,'<year4><month,2><Filler Character,0><day,2><Filler Character,0>'));
    END;

    LOCAL PROCEDURE GetDisabilityPeriods@1210045(Employee@1210000 : Record 5200;StartDate@1210001 : Date;EndDate@1210002 : Date;VAR TempPersonMedicalInfoDisability@1210009 : TEMPORARY Record 17353);
    VAR
      PersonMedicalInfo@1210005 : Record 17353;
      PeriodStartDate@1210007 : Date;
      PeriodEndDate@1210006 : Date;
      TempDate@1210003 : Date;
    BEGIN
      TempPersonMedicalInfoDisability.RESET;
      TempPersonMedicalInfoDisability.DELETEALL;

      PersonMedicalInfo.SETRANGE("Person No.",Employee."Person No.");
      PersonMedicalInfo.SETRANGE(Type,PersonMedicalInfo.Type::Disability);
      PersonMedicalInfo.SETFILTER("Disability Group",'>0');
      PersonMedicalInfo.SETFILTER("Starting Date",'..%1',EndDate);
      PersonMedicalInfo.SETFILTER("Ending Date",'%1..|%2',StartDate,0D);
      IF PersonMedicalInfo.FINDSET THEN BEGIN
        REPEAT
          IF PersonMedicalInfo."Starting Date" < StartDate THEN
            PeriodStartDate := StartDate
          ELSE
            PeriodStartDate := PersonMedicalInfo."Starting Date";

          IF (PersonMedicalInfo."Ending Date" = 0D) OR
             (PersonMedicalInfo."Ending Date" > EndDate)
          THEN
            PeriodEndDate := EndDate
          ELSE
            PeriodEndDate := PersonMedicalInfo."Ending Date";

          IF TempPersonMedicalInfoDisability.FINDLAST AND
             (TempPersonMedicalInfoDisability."Disability Group" <> TempPersonMedicalInfoDisability."Disability Group"::" ")
          THEN BEGIN
            IF TempPersonMedicalInfoDisability."Ending Date" < PeriodStartDate
            THEN BEGIN
              TempDate := TempPersonMedicalInfoDisability."Ending Date";
              TempPersonMedicalInfoDisability.INIT;
              TempPersonMedicalInfoDisability."Starting Date" := CALCDATE('<+1D>',TempDate);
              TempPersonMedicalInfoDisability."Ending Date" := CALCDATE('<-1D>',PeriodStartDate);
              TempPersonMedicalInfoDisability.INSERT;
              TempPersonMedicalInfoDisability.INIT;
              TempPersonMedicalInfoDisability."Starting Date" := PeriodStartDate;
              TempPersonMedicalInfoDisability."Ending Date" := PeriodEndDate;
              TempPersonMedicalInfoDisability."Disability Group" := TempPersonMedicalInfoDisability."Disability Group"::"1";
              TempPersonMedicalInfoDisability.INSERT;
            END ELSE BEGIN
              TempPersonMedicalInfoDisability."Ending Date" := PeriodEndDate;
              TempPersonMedicalInfoDisability.MODIFY;
            END;
          END ELSE BEGIN
            TempPersonMedicalInfoDisability.INIT;
            TempPersonMedicalInfoDisability."Starting Date" := PeriodStartDate;
            TempPersonMedicalInfoDisability."Ending Date" := PeriodEndDate;
            TempPersonMedicalInfoDisability."Disability Group" := TempPersonMedicalInfoDisability."Disability Group"::"1";
            TempPersonMedicalInfoDisability.INSERT;
          END;
        UNTIL PersonMedicalInfo.NEXT = 0;

        IF PeriodEndDate < EndDate THEN BEGIN
          TempPersonMedicalInfoDisability.INIT;
          TempPersonMedicalInfoDisability."Starting Date" := PeriodEndDate + 1;
          TempPersonMedicalInfoDisability."Ending Date" := EndDate;
          TempPersonMedicalInfoDisability.INSERT;
        END;
      END ELSE BEGIN
        TempPersonMedicalInfoDisability.INIT;
        TempPersonMedicalInfoDisability."Starting Date" := StartDate;
        TempPersonMedicalInfoDisability."Ending Date" := EndDate;
        TempPersonMedicalInfoDisability.INSERT;
      END;

      IF TempPersonMedicalInfoDisability.FINDFIRST THEN
        IF (TempPersonMedicalInfoDisability."Disability Group" <> TempPersonMedicalInfoDisability."Disability Group"::" ") AND
           (TempPersonMedicalInfoDisability."Starting Date" > StartDate)
        THEN BEGIN
          PeriodEndDate := TempPersonMedicalInfoDisability."Starting Date" - 1;
          TempPersonMedicalInfoDisability.INIT;
          TempPersonMedicalInfoDisability."Starting Date" := StartDate;
          TempPersonMedicalInfoDisability."Ending Date" := PeriodEndDate;
          TempPersonMedicalInfoDisability.INSERT;
        END;
    END;

    LOCAL PROCEDURE GetDisabilityBuffers@1210062(VAR Employee@1210000 : Record 5200;StartDate@1210001 : Date;EndDate@1210002 : Date;VAR TempPersonMedicalInfoDisability@1210009 : TEMPORARY Record 17353;VAR TempEmployeeWithDisability@1210003 : TEMPORARY Record 5200;VAR TempEmployeeWithoutDisability@1210004 : TEMPORARY Record 5200);
    VAR
      TempPersonMedicalInfoPeriod@1210010 : TEMPORARY Record 17353;
      WithDisabilityPeriod@1210008 : Boolean;
      WithoutDisabilityPeriod@1210011 : Boolean;
      EmployeePeriodStartDate@121000 : Date;
      EmployeePeriodEndDate@121001 : Date;
    BEGIN
      TempPersonMedicalInfoDisability.RESET;
      TempPersonMedicalInfoDisability.DELETEALL;

      IF Employee.FINDSET THEN
        REPEAT
          WithDisabilityPeriod := FALSE;
          WithoutDisabilityPeriod := FALSE;
          EmployeePeriodStartDate := StartDate;
          EmployeePeriodEndDate := EndDate;

          FitPeriodToLaborContract(Employee,EmployeePeriodStartDate,EmployeePeriodEndDate);
          GetDisabilityPeriods(Employee,EmployeePeriodStartDate,EmployeePeriodEndDate,TempPersonMedicalInfoPeriod);

          IF TempPersonMedicalInfoPeriod.FINDSET THEN
            REPEAT
              TempPersonMedicalInfoDisability := TempPersonMedicalInfoPeriod;
              TempPersonMedicalInfoDisability."Person No." := Employee."No."; // for case when 2 employees per person
              TempPersonMedicalInfoDisability."Employee No." := Employee."No.";
              TempPersonMedicalInfoDisability.INSERT;

              IF TempPersonMedicalInfoPeriod."Disability Group" =
                 TempPersonMedicalInfoPeriod."Disability Group"::" "
              THEN
                WithoutDisabilityPeriod := TRUE
              ELSE
                WithDisabilityPeriod := TRUE;
            UNTIL TempPersonMedicalInfoPeriod.NEXT = 0;

          IF WithDisabilityPeriod THEN BEGIN
            TempEmployeeWithDisability := Employee;
            TempEmployeeWithDisability.INSERT;
          END;

          IF WithoutDisabilityPeriod THEN BEGIN
            TempEmployeeWithoutDisability := Employee;
            TempEmployeeWithoutDisability.INSERT;
          END;
        UNTIL Employee.NEXT = 0;
    END;

    LOCAL PROCEDURE GetCategoryCode@1210069(CategoryType@1210002 : Option) : Code[10];
    VAR
      PersonMedicalInfo@1210000 : Record 17353;
    BEGIN
      CASE CategoryType OF
        PersonMedicalInfo."Disability Group"::" ":
          EXIT('НР');
        ELSE
          EXIT('ОЗОИ');
      END;
    END;

    LOCAL PROCEDURE GetContractType@121019(Employee@1210002 : Record 5200) : Code[20];
    VAR
      LaborContract@121000 : Record 17360;
    BEGIN
      IF LaborContract.GET(Employee."Contract No.") THEN
        CASE LaborContract."Contract Type" OF
          LaborContract."Contract Type"::"Labor Contract":
            EXIT(ContractType1Txt);
          LaborContract."Contract Type"::"Civil Contract":
            EXIT(ContractType2Txt);
        END;
    END;

    LOCAL PROCEDURE CheckEmployees@121000(VAR Employee@121000 : Record 5200);
    VAR
      Person@121001 : Record 17350;
      PersonDocument@121002 : Record 17352;
      TaxpayerDocumentType@121003 : Record 12429;
      CountryRegion@121005 : Record 9;
      AlternativeAddress@121004 : Record 5201;
    BEGIN
      IF Employee.FINDSET THEN
        REPEAT
          Employee.TESTFIELD(Gender);
          Employee.TESTFIELD("Person No.");
          Person.GET(Employee."Person No.");
          Person.TESTFIELD(Citizenship);
          IF Person.Citizenship = '3' THEN BEGIN
            Person.TESTFIELD("Citizenship Country/Region");
            CountryRegion.GET(Person."Citizenship Country/Region");
          END;
          Person.TESTFIELD("Identity Document Type");
          TaxpayerDocumentType.GET(Person."Identity Document Type");
          PersonDocument.SETRANGE("Person No.",Person."No.");
          PersonDocument.SETRANGE("Document Type",Person."Identity Document Type");
          PersonDocument.FINDLAST;
          PersonDocument.TESTFIELD("Document No.");
          PersonDocument.TESTFIELD("Issue Authority");
          PersonDocument.TESTFIELD("Issue Date");
          IF NOT GetAddressByType(Person."No.",AddressType::Registration,AlternativeAddress) THEN
            ERROR(Text014,Text015,Person."No.");
          IF Person."Birthplace Type" = Person."Birthplace Type"::Standard THEN
            IF NOT GetAddressByType(Person."No.",AddressType::Birthplace,AlternativeAddress) THEN
              ERROR(Text014,Text016,Person."No.");
        UNTIL Employee.NEXT = 0;
    END;

    LOCAL PROCEDURE GetHRSetup@121003();
    BEGIN
      IF NOT HRSetupRead THEN
        HRSetup.GET;
      HRSetupRead := TRUE;
    END;

    PROCEDURE CheckEmployeeLaborContract@121001(Employee@121000 : Record 5200;StartDate@121001 : Date;EndDate@121002 : Date) : Boolean;
    VAR
      LaborContract@121003 : Record 17360;
    BEGIN
      FilterLaborContract(LaborContract,Employee."No.",StartDate,EndDate);
      EXIT(LaborContract.FINDFIRST);
    END;

    LOCAL PROCEDURE FitPeriodToLaborContract@121004(Employee@121000 : Record 5200;VAR StartDate@121001 : Date;VAR EndDate@121002 : Date);
    VAR
      LaborContract@121003 : Record 17360;
    BEGIN
      FilterLaborContract(LaborContract,Employee."No.",StartDate,EndDate);
      IF LaborContract.FINDFIRST THEN BEGIN
        IF LaborContract."Starting Date" > StartDate THEN
          StartDate := LaborContract."Starting Date";
        IF (LaborContract."Ending Date" <> 0D) AND (LaborContract."Ending Date" < EndDate) THEN
          EndDate := LaborContract."Ending Date";
      END;
    END;

    LOCAL PROCEDURE FilterLaborContract@121002(VAR LaborContract@121000 : Record 17360;EmployeeNo@121003 : Code[20];StartDate@121002 : Date;EndDate@121001 : Date);
    BEGIN
      LaborContract.SETRANGE("Employee No.",EmployeeNo);
      LaborContract.SETFILTER("Starting Date",'..%1',EndDate);
      LaborContract.SETFILTER("Ending Date",'%1..|%2',StartDate,0D);
    END;

    LOCAL PROCEDURE CalcTotalEmployeeSalaryAmount@121014(VAR FundAmount@1210000 : Decimal;VAR InsAmount@1210001 : Decimal;EmployeeNo@121002 : Code[20];TemplName@121001 : Code[10];StartDate@121000 : Date;EndDate@121007 : Date);
    VAR
      PayrollAnalysisLine@121005 : Record 14962;
      PayrollAnalysisColumn@121004 : Record 14964;
    BEGIN
      // This block is hardcoded against analytical report with 2 lines
      PayrollAnalysisLine.SETRANGE("Analysis Line Template Name",TemplName);
      PayrollAnalysisLine.SETRANGE("Employee Filter",EmployeeNo);
      PayrollAnalysisLine.SETRANGE("Date Filter",StartDate,EndDate);
      PayrollAnalysisColumn.SETRANGE("Analysis Column Template",TemplName);

      IF NOT PayrollAnalysisColumn.FINDFIRST THEN
        EXIT;
      IF NOT PayrollAnalysisLine.FINDSET THEN
        EXIT;
      IF PayrollAnalysisLine.COUNT < 2 THEN
        EXIT;

      FundAmount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
      PayrollAnalysisLine.NEXT;
      InsAmount := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
    END;

    PROCEDURE SetTestMode@1210046(NewTestMode@1210000 : Boolean);
    BEGIN
      TestMode := NewTestMode;
    END;

    BEGIN
    END.
  }
}

