OBJECT Codeunit 14939 Torg-16 Document Helper
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExcelReportBuilderMgr@1210006 : Codeunit 14930;
      StdRepMgt@1210005 : Codeunit 12401;
      LocMgt@1210004 : Codeunit 12400;
      TotalAmount@1210000 : Decimal;

    PROCEDURE InitReportTemplate@1210001();
    VAR
      InventorySetup@1210000 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.TESTFIELD("TORG-16 Template Code");
      ExcelReportBuilderMgr.InitTemplate(InventorySetup."TORG-16 Template Code");
      ExcelReportBuilderMgr.SetSheet('Sheet1');
    END;

    PROCEDURE FillHeader@1210000(DocNo@1210000 : Code[20];DocDate@1210005 : Date;LocationCode@1210008 : Code[10];OrderNo@1210007 : Text;OrderDate@1210006 : Date;OperationType@1210003 : Text);
    VAR
      CompanyInfo@1210001 : Record 79;
      Location@1210002 : Record 14;
      LocationName@1210004 : Text;
    BEGIN
      ExcelReportBuilderMgr.AddSection('REPORTHEADER');

      CompanyInfo.GET;
      ExcelReportBuilderMgr.AddDataToSection('CompanyName',StdRepMgt.GetCompanyName);

      IF Location.GET(LocationCode) THEN
        LocationName := Location.Name + Location."Name 2"
      ELSE
        LocationName := '';
      ExcelReportBuilderMgr.AddDataToSection('Department',LocationName);
      ExcelReportBuilderMgr.AddDataToSection('OKPO',CompanyInfo."OKPO Code");
      ExcelReportBuilderMgr.AddDataToSection('OrderNum',OrderNo);
      ExcelReportBuilderMgr.AddDataToSection('OrderDate',FORMAT(OrderDate,0,1));
      ExcelReportBuilderMgr.AddDataToSection('OperationType',OperationType);
      ExcelReportBuilderMgr.AddDataToSection('DocumentNum',DocNo);
      ExcelReportBuilderMgr.AddDataToSection('DocumentDate',FORMAT(DocDate,0,1));

      CLEAR(TotalAmount);
    END;

    PROCEDURE FillHeaderSignatures@1210005(Member@1210000 : ARRAY [5,2] OF Text);
    BEGIN
      ExcelReportBuilderMgr.AddDataToSection('BossTitle',Member[5,1]);
      ExcelReportBuilderMgr.AddDataToSection('BossName',Member[5,2]);
    END;

    PROCEDURE FillPageHeader@1210004();
    BEGIN
      ExcelReportBuilderMgr.AddSection('PAGEHEADER');
    END;

    PROCEDURE FillPageHeader2@1210010();
    BEGIN
      ExcelReportBuilderMgr.AddSection('PAGEHEADER2');
    END;

    PROCEDURE FillPageFooter@1210012();
    BEGIN
      ExcelReportBuilderMgr.AddSection('PAGEFOOTER');
    END;

    PROCEDURE FillFooter@1210013(WriteOffSource@1210001 : Text;Member@1210002 : ARRAY [5,2] OF Text);
    BEGIN
      IF NOT ExcelReportBuilderMgr.TryAddSection('REPORTFOOTER2') THEN BEGIN
        ExcelReportBuilderMgr.AddPagebreak;
        ExcelReportBuilderMgr.AddSection('REPORTFOOTER2');
      END;
      ExcelReportBuilderMgr.AddDataToSection('TotalAmount',StdRepMgt.FormatReportValue(TotalAmount,3));
      ExcelReportBuilderMgr.AddDataToSection('AmountRTxt1',LocMgt.Integer2Text(TotalAmount DIV 1,1,'','',''));
      ExcelReportBuilderMgr.AddDataToSection('AmountCTxt',FORMAT((TotalAmount - TotalAmount DIV 1) * 100));
      ExcelReportBuilderMgr.AddDataToSection('ChairmanTitle',Member[1,1]);
      ExcelReportBuilderMgr.AddDataToSection('ChairmanName',Member[1,2]);
      ExcelReportBuilderMgr.AddDataToSection('MemberTitle1',Member[2,1]);
      ExcelReportBuilderMgr.AddDataToSection('MemberName1',Member[2,2]);
      ExcelReportBuilderMgr.AddDataToSection('MemberTitle2',Member[3,1]);
      ExcelReportBuilderMgr.AddDataToSection('MemberName2',Member[3,2]);
      ExcelReportBuilderMgr.AddDataToSection('InChargeTitle',Member[4,1]);
      ExcelReportBuilderMgr.AddDataToSection('InChargeName',Member[4,2]);
      ExcelReportBuilderMgr.AddDataToSection('AccountName',WriteOffSource);

      ExcelReportBuilderMgr.AddPagebreak;
    END;

    PROCEDURE FillWriteOffReasonBody@1210003(AppliesToEntry@1210005 : Integer;ReasonCodeValue@1210006 : Code[10];ItemDocDate@1210004 : Date);
    VAR
      ItemLedgEntry@1210007 : Record 32;
      ReasonCode@1210008 : Record 231;
      ReceiptDate@1210003 : Date;
      ReceiptDocNo@1210002 : Code[20];
      Reason@1210001 : Code[10];
      ReasonDesc@1210000 : Text[50];
    BEGIN
      IF NOT ExcelReportBuilderMgr.TryAddSection('BODY') THEN BEGIN
        ExcelReportBuilderMgr.AddPagebreak;
        ExcelReportBuilderMgr.AddSection('BODY');
      END;

      IF ItemLedgEntry.GET(AppliesToEntry) THEN BEGIN
        ReceiptDate := ItemLedgEntry."Posting Date";
        ReceiptDocNo := ItemLedgEntry."Document No.";
      END ELSE BEGIN
        ReceiptDate := 0D;
        ReceiptDocNo := '';
      END;

      IF ReasonCode.GET(ReasonCodeValue) THEN BEGIN
        Reason := ReasonCode.Code;
        ReasonDesc := ReasonCode.Description;
      END ELSE BEGIN
        Reason := '';
        ReasonDesc := '';
      END;

      ExcelReportBuilderMgr.AddDataToSection('DeliveryDate',FORMAT(ReceiptDate,0,1));
      ExcelReportBuilderMgr.AddDataToSection('WriteOffDate',FORMAT(ItemDocDate,0,1));
      ExcelReportBuilderMgr.AddDataToSection('InvoiceId',ReceiptDocNo);
      ExcelReportBuilderMgr.AddDataToSection('InvoiceDate',FORMAT(ReceiptDate,0,1));
      ExcelReportBuilderMgr.AddDataToSection('ScrapName',ReasonDesc);
      ExcelReportBuilderMgr.AddDataToSection('ScrapId',Reason);
    END;

    PROCEDURE FillItemLedgerLine@1210011(ItemNo@1210001 : Code[10];UnitOfMeasureCode@1210002 : Code[10];ItemDocLine@1210003 : Record 12453);
    VAR
      Amount@1210008 : Decimal;
      ItemDescription@1210005 : Text;
      UnitOfMeasureCodeDesc@1210004 : Text;
      OKEICode@1210000 : Code[3];
    BEGIN
      IF NOT ExcelReportBuilderMgr.TryAddSection('BODY2') THEN BEGIN
        ExcelReportBuilderMgr.AddPagebreak;
        ExcelReportBuilderMgr.AddSection('BODY2');
      END;

      ItemDescription := GetItemDescription(ItemNo);
      GetUOMOKEICode(UnitOfMeasureCode,UnitOfMeasureCodeDesc,OKEICode);

      WITH ItemDocLine DO BEGIN
        Amount := ROUND(Quantity * "Unit Cost");
        TotalAmount += Amount;
        ExcelReportBuilderMgr.AddDataToSection('ItemName',ItemDescription);
        ExcelReportBuilderMgr.AddDataToSection('ItemId',"Item No.");
        ExcelReportBuilderMgr.AddDataToSection('BOMUnitId',UnitOfMeasureCodeDesc);
        ExcelReportBuilderMgr.AddDataToSection('CodeOkei',OKEICode);
        ExcelReportBuilderMgr.AddDataToSection('QtyMultiples',FORMAT(Quantity));
        ExcelReportBuilderMgr.AddDataToSection('Weight',FORMAT("Net Weight"));
        ExcelReportBuilderMgr.AddDataToSection('GrossWeight',StdRepMgt.FormatReportValue("Net Weight" * Quantity,3));
        ExcelReportBuilderMgr.AddDataToSection('PriceUnit',FORMAT("Unit Amount"));
        ExcelReportBuilderMgr.AddDataToSection('LineAmount',StdRepMgt.FormatReportValue(Amount,2));
        ExcelReportBuilderMgr.AddDataToSection('Remark',FORMAT(Description));
      END;
    END;

    PROCEDURE FillItemShptLine@1210002(ItemNo@1210001 : Code[10];UnitOfMeasureCode@1210002 : Code[10];ItemShptLine@1210003 : Record 12455);
    VAR
      Amount@1210008 : Decimal;
      ItemDescription@1210005 : Text;
      UnitOfMeasureCodeDesc@1210004 : Text;
      OKEICode@1210000 : Code[3];
    BEGIN
      IF NOT ExcelReportBuilderMgr.TryAddSection('BODY2') THEN BEGIN
        ExcelReportBuilderMgr.AddPagebreak;
        ExcelReportBuilderMgr.AddSection('BODY2');
      END;

      ItemDescription := GetItemDescription(ItemNo);
      GetUOMOKEICode(UnitOfMeasureCode,UnitOfMeasureCodeDesc,OKEICode);
      Amount := ItemShptLine.Amount;
      WITH ItemShptLine DO BEGIN
        TotalAmount += Amount;
        ExcelReportBuilderMgr.AddDataToSection('ItemName',ItemDescription);
        ExcelReportBuilderMgr.AddDataToSection('ItemId',"Item No.");
        ExcelReportBuilderMgr.AddDataToSection('BOMUnitId',UnitOfMeasureCodeDesc);
        ExcelReportBuilderMgr.AddDataToSection('CodeOkei',OKEICode);
        ExcelReportBuilderMgr.AddDataToSection('QtyMultiples',FORMAT(Quantity));
        ExcelReportBuilderMgr.AddDataToSection('Weight',FORMAT("Net Weight"));
        ExcelReportBuilderMgr.AddDataToSection('GrossWeight',StdRepMgt.FormatReportValue("Net Weight" * Quantity,3));
        ExcelReportBuilderMgr.AddDataToSection('PriceUnit',FORMAT("Unit Amount"));
        ExcelReportBuilderMgr.AddDataToSection('LineAmount',StdRepMgt.FormatReportValue(Amount,3));
        ExcelReportBuilderMgr.AddDataToSection('Remark',FORMAT(Description));
      END;
    END;

    PROCEDURE InitSecondSheet@1210009();
    VAR
      SheetName@1210000 : Text;
    BEGIN
      SheetName := 'Sheet2';
      ExcelReportBuilderMgr.SetSheet(SheetName);
    END;

    PROCEDURE ExportDataFile@1210014(FileName@1210000 : Text);
    BEGIN
      ExcelReportBuilderMgr.ExportDataToClientFile(FileName);
    END;

    PROCEDURE GetItemDescription@1210016(ItemNo@1210000 : Code[10]) : Text;
    VAR
      Item@1210001 : Record 27;
    BEGIN
      IF Item.GET(ItemNo) THEN
        EXIT(Item.Description);
      EXIT('');
    END;

    PROCEDURE GetUOMOKEICode@1210021(UnitOfMeasureCode@1210000 : Code[10];VAR UnitOfMeasureCodeDesc@1210002 : Text;VAR OKEICode@1210003 : Code[3]);
    VAR
      UnitOfMeasure@1210001 : Record 204;
    BEGIN
      IF UnitOfMeasure.GET(UnitOfMeasureCode) THEN BEGIN
        UnitOfMeasureCodeDesc := UnitOfMeasure.Description;
        OKEICode := UnitOfMeasure."OKEI Code";
      END ELSE BEGIN
        UnitOfMeasureCodeDesc := '';
        OKEICode := '';
      END;
    END;

    PROCEDURE ExportData@1210015();
    BEGIN
      ExcelReportBuilderMgr.ExportData;
    END;

    BEGIN
    END.
  }
}

