OBJECT Codeunit 14933 Waybill 1-T Report Helper
{
  OBJECT-PROPERTIES
  {
    Date=15.09.15;
    Time=12:00:00;
    Version List=NAVRU9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExcelReportBuilderMgr@1210000 : Codeunit 14930;

    PROCEDURE InitWaybillReportTmpl@1210002();
    VAR
      InventorySetup@1210000 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.TESTFIELD("Waybill 1-T Template Code");
      InitReportTemplate(InventorySetup."Waybill 1-T Template Code");
    END;

    PROCEDURE SetMainSheet@1210011();
    BEGIN
      SetSheet('Sheet1');
    END;

    PROCEDURE SetSheet@1210008(SheetName@1210001 : Text);
    BEGIN
      ExcelReportBuilderMgr.SetSheet(SheetName);
    END;

    PROCEDURE ExportData@1210000();
    BEGIN
      ExcelReportBuilderMgr.ExportData;
    END;

    PROCEDURE ExportDataFile@1210009(FileName@1210000 : Text);
    BEGIN
      ExcelReportBuilderMgr.ExportDataToClientFile(FileName);
    END;

    LOCAL PROCEDURE InitReportTemplate@1210001(TemplateCode@1210000 : Code[10]);
    BEGIN
      ExcelReportBuilderMgr.InitTemplate(TemplateCode);
    END;

    PROCEDURE FillProlog@1210007(HeaderValue@1210000 : ARRAY [8] OF Text);
    BEGIN
      ExcelReportBuilderMgr.AddSection('PROLOG');

      ExcelReportBuilderMgr.AddDataToSection('DocNum',HeaderValue[1]);
      ExcelReportBuilderMgr.AddDataToSection('DocDate',HeaderValue[2]);
      ExcelReportBuilderMgr.AddDataToSection('ConsignorOKPO',HeaderValue[3]);
      ExcelReportBuilderMgr.AddDataToSection('ConsigneeOKPO',HeaderValue[4]);
      ExcelReportBuilderMgr.AddDataToSection('CustomerOKPO',HeaderValue[5]);
      ExcelReportBuilderMgr.AddDataToSection('ConsignorAddress',HeaderValue[6]);
      ExcelReportBuilderMgr.AddDataToSection('ConsigneeAddress',HeaderValue[7]);
      ExcelReportBuilderMgr.AddDataToSection('CustomerBankAddress',HeaderValue[8]);

      ExcelReportBuilderMgr.AddSection('HEADER');
    END;

    PROCEDURE FillBody@1210003(LineValue@1210000 : ARRAY [9] OF Text);
    BEGIN
      IF NOT ExcelReportBuilderMgr.TryAddSection('BODY') THEN BEGIN
        ExcelReportBuilderMgr.AddPagebreak;
        ExcelReportBuilderMgr.AddSection('HEADER');
        ExcelReportBuilderMgr.AddSection('BODY');
      END;

      ExcelReportBuilderMgr.AddDataToSection('ItemId',LineValue[1]);
      ExcelReportBuilderMgr.AddDataToSection('Qty',LineValue[2]);
      ExcelReportBuilderMgr.AddDataToSection('Price',LineValue[3]);
      ExcelReportBuilderMgr.AddDataToSection('ItemName',LineValue[4]);
      ExcelReportBuilderMgr.AddDataToSection('Unit',LineValue[5]);
      ExcelReportBuilderMgr.AddDataToSection('Packing',LineValue[6]);
      ExcelReportBuilderMgr.AddDataToSection('Places',LineValue[7]);
      ExcelReportBuilderMgr.AddDataToSection('Weight',LineValue[8]);
      ExcelReportBuilderMgr.AddDataToSection('Amount',LineValue[9]);
    END;

    PROCEDURE FinalizeReport@1210004(FooterValue@1210000 : ARRAY [12] OF Text);
    BEGIN
      FillReportFooter(FooterValue);
      ExcelReportBuilderMgr.AddPagebreak;
    END;

    LOCAL PROCEDURE FillReportFooter@1210006(FooterValue@1210000 : ARRAY [12] OF Text);
    BEGIN
      IF NOT ExcelReportBuilderMgr.TryAddSection('FOOTER') THEN BEGIN
        ExcelReportBuilderMgr.AddPagebreak;
        ExcelReportBuilderMgr.AddSection('FOOTER');
      END;

      ExcelReportBuilderMgr.AddDataToSection('PageCount',GetProlongPageCount);
      ExcelReportBuilderMgr.AddDataToSection('RowCount',FooterValue[1]);
      ExcelReportBuilderMgr.AddDataToSection('RowCountEx',FooterValue[2]);
      ExcelReportBuilderMgr.AddDataToSection('TotalAmountVAT',FooterValue[3]);
      ExcelReportBuilderMgr.AddDataToSection('TotalGrossWeight',FooterValue[4]);
      ExcelReportBuilderMgr.AddDataToSection('ApplCount',FooterValue[5]);
      ExcelReportBuilderMgr.AddDataToSection('AttorneyId',FooterValue[6]);
      ExcelReportBuilderMgr.AddDataToSection('TotalAmountVATEx',FooterValue[7]);
      ExcelReportBuilderMgr.AddDataToSection('AcceptorName',FooterValue[8]);
      ExcelReportBuilderMgr.AddDataToSection('PostingDate',FooterValue[9]);
      ExcelReportBuilderMgr.AddDataToSection('ManagerName',FooterValue[10]);
      ExcelReportBuilderMgr.AddDataToSection('Accountant',FooterValue[11]);
      ExcelReportBuilderMgr.AddDataToSection('SupplierName',FooterValue[12]);
    END;

    PROCEDURE FillBackSide@1210010(BackSideVaue@1210000 : Text);
    BEGIN
      SetSheet('Sheet2');
      ExcelReportBuilderMgr.AddSection('PAGE2');
      ExcelReportBuilderMgr.AddDataToSection('DocNum_2',BackSideVaue);
    END;

    PROCEDURE TransferLineDescrValues@1210023(VAR LineValues@1210000 : ARRAY [9] OF Text;LineDescription@1210005 : Text);
    VAR
      I@1210004 : Integer;
    BEGIN
      FOR I := 1 TO 3 DO
        LineValues[I] := '';

      LineValues[4] := LineDescription;

      FOR I := 5 TO 9 DO
        LineValues[I] := '';
    END;

    LOCAL PROCEDURE GetProlongPageCount@1210005() : Text;
    VAR
      LocMgt@1210001 : Codeunit 12400;
      PageCount@1210000 : Integer;
    BEGIN
      PageCount := ExcelReportBuilderMgr.GetLastPageNo;
      IF PageCount = 1 THEN
        EXIT('');

      EXIT(LocMgt.Integer2Text(PageCount - 1,1,'','',''));
    END;

    BEGIN
    END.
  }
}

