OBJECT Page 2106 O365 Item Card
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Item;
               RUS=Товар];
    SourceTable=Table27;
    PageType=Card;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Item,History,Special Prices & Discounts,Approve,Request Approval,Details;
                                RUS=Создать,Обработать,Отчет,Товар,История,Специальные цены и скидки,Утвердить,Запросить утверждение,Сведения];
    OnInit=BEGIN
             InitControls
           END;

    OnOpenPage=BEGIN
                 EnableControls
               END;

    OnAfterGetRecord=BEGIN
                       EnableControls
                     END;

    OnNewRecord=BEGIN
                  OnNewRec
                END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Item;
                CaptionML=[ENU=Item;
                           RUS=Товар];
                GroupType=Group }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the item.;
                           RUS=Определяет описание товара.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                ShowMandatory=TRUE }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether this item is a service or an inventory item.;
                           RUS=Указывает, является товар сервисным или складским.];
                SourceExpr=Type;
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Unit of Measure;
                           RUS=Единица измерения];
                ToolTipML=[ENU=Specifies the unit in which the item is held in inventory.;
                           RUS=Определяет единицу измерения, применяемую при учете товаров в запасах.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Base Unit of Measure";
                Importance=Promoted;
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                             GET("No.");
                           END;

                ShowMandatory=TRUE }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the price for one unit of the item, in LCY.;
                           RUS=Определяет цену единицы товара в рублях.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Unit Price";
                Importance=Promoted;
                Editable=PriceEditable }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the cost per unit of the item.;
                           RUS=Определяет себестоимость единицы товара.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Unit Cost";
                Visible=FALSE }

    { 171 ;1   ;Group     ;
                Name=InventoryGrp;
                CaptionML=[ENU=Inventory;
                           RUS=Запасы];
                Visible=FALSE;
                GroupType=Group }

    { 14  ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies how many units, such as pieces, boxes, or cans, of the item are in inventory.;
                           RUS=Определяет, сколько единиц измерения, например штук, коробок или банок, товара имеется в запасах.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Inventory;
                OnAssistEdit=BEGIN
                               MODIFY(TRUE);
                               COMMIT;
                               IF PAGE.RUNMODAL(PAGE::"Adjust Inventory",Rec) = ACTION::LookupOK THEN
                                 FIND;
                               CurrPage.UPDATE
                             END;
                              }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how many units of the item are allocated to sales orders, meaning listed on outstanding sales orders lines.;
                           RUS=Определяет, сколько единиц товара, распределено в заказах на продажу, т. е. перечислено в строках незавершенных заказов на продажу.];
                SourceExpr="Qty. on Sales Order" }

    { 113 ;2   ;Field     ;
                Name=StockoutWarningDefaultYes;
                CaptionML=[ENU=Stockout Warning;
                           RUS=Предупреждение о дефиците запасов];
                ToolTipML=[ENU=Specifies if a warning is displayed when you enter a quantity on a sales document that brings the item's inventory below zero.;
                           RUS=Определяет, отображается ли предупреждение при вводе в документ продажи количества, которое снижает уровень запасов товара до значения ниже нуля.];
                OptionCaptionML=[ENU=Default (Yes),No,Yes;
                                 RUS=По умолчанию (Да),Нет,Да];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Stockout Warning";
                Visible=ShowStockoutWarningDefaultYes }

    { 115 ;2   ;Field     ;
                Name=StockoutWarningDefaultNo;
                CaptionML=[ENU=Stockout Warning;
                           RUS=Предупреждение о дефиците запасов];
                ToolTipML=[ENU=Specifies if a warning is displayed when you enter a quantity on a sales document that brings the item's inventory below zero.;
                           RUS=Определяет, отображается ли предупреждение при вводе в документ продажи количества, которое снижает уровень запасов товара до значения ниже нуля.];
                OptionCaptionML=[ENU=Default (No),No,Yes;
                                 RUS=По умолчанию (Нет),Нет,Да];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Stockout Warning";
                Visible=ShowStockoutWarningDefaultNo }

    { 169 ;1   ;Group     ;
                Name=Price & Posting;
                CaptionML=[ENU=Price & Posting;
                           RUS=Цена и учет];
                Visible=FALSE;
                GroupType=Group }

    { 181 ;2   ;Field     ;
                CaptionML=[ENU=Special Prices & Discounts;
                           RUS=Специальные цены и скидки];
                ToolTipML=[ENU=Specifies special prices and line discounts for the item.;
                           RUS=Определяет специальные цены и скидки по строке для товара.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SpecialPricesAndDiscountsTxt;
                Importance=Promoted;
                Editable=FALSE;
                OnDrillDown=VAR
                              SalesPrice@1001 : Record 7002;
                              SalesLineDiscount@1002 : Record 7004;
                              SalesPriceAndLineDiscounts@1000 : Page 1345;
                            BEGIN
                              IF SpecialPricesAndDiscountsTxt = ViewOrChangeExistingTxt THEN BEGIN
                                SalesPriceAndLineDiscounts.InitPage(TRUE);
                                SalesPriceAndLineDiscounts.LoadItem(Rec);
                                SalesPriceAndLineDiscounts.RUNMODAL;
                                EXIT;
                              END;

                              CASE STRMENU(STRSUBSTNO('%1,%2',CreateNewSpecialPriceTxt,CreateNewSpecialDiscountTxt),1,'') OF
                                1:
                                  BEGIN
                                    SalesPrice.SETRANGE("Item No.","No.");
                                    PAGE.RUNMODAL(PAGE::"Sales Prices",SalesPrice);
                                  END;
                                2:
                                  BEGIN
                                    SalesLineDiscount.SETRANGE(Type,SalesLineDiscount.Type::Item);
                                    SalesLineDiscount.SETRANGE(Code,"No.");
                                    PAGE.RUNMODAL(PAGE::"Sales Line Discounts",SalesLineDiscount);
                                  END;
                              END;
                            END;
                             }

    { 36  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the profit margin you want to sell the item at.;
                           RUS=Определяет прибыль, с которой планируется продать товар.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=2:2;
                SourceExpr="Profit %";
                Editable=ProfitEditable }

    { 1905885101;1;Group  ;
                CaptionML=[ENU=Invoicing;
                           RUS=Счет];
                Visible=FALSE;
                GroupType=Group }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the unit cost that is used as a standard measure.;
                           RUS=Определяет себестоимость единицы, которая используется в качестве стандартного измерения.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Standard Cost";
                Importance=Standard;
                Enabled=StandardCostEnable;
                OnDrillDown=VAR
                              ShowAvgCalcItem@1000 : Codeunit 5803;
                            BEGIN
                              ShowAvgCalcItem.DrillDownAvgCostAdjmtPoint(Rec)
                            END;
                             }

    { 73  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the unit of measure code used when you sell the item.;
                           RUS=Определяет код единицы измерения, используемый при продаже товара.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sales Unit of Measure" }

    { 7   ;1   ;Group     ;
                Name=Tax Information;
                CaptionML=[ENU=Tax Information;
                           RUS=Сведения о налоге];
                GroupType=Group }

    { 8   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Tax Group Code" }

  }
  CODE
  {
    VAR
      ShowStockoutWarningDefaultYes@1006 : Boolean;
      ShowStockoutWarningDefaultNo@1004 : Boolean;
      StandardCostEnable@19016419 : Boolean INDATASET;
      ProfitEditable@1017 : Boolean;
      PriceEditable@1018 : Boolean;
      SpecialPricesAndDiscountsTxt@1019 : Text;
      CreateNewTxt@1020 : TextConst 'ENU=Create New...;RUS=Создать...';
      ViewOrChangeExistingTxt@1021 : TextConst 'ENU=View or Change Existing...;RUS=Просмотреть или изменить существующие...';
      CreateNewSpecialPriceTxt@1023 : TextConst 'ENU=Create New Special Price...;RUS=Создать новую специальную цену...';
      CreateNewSpecialDiscountTxt@1024 : TextConst 'ENU=Create New Special Discount...;RUS=Создать новую специальную скидку...';

    LOCAL PROCEDURE EnableControls@6();
    BEGIN
      ProfitEditable := "Price/Profit Calculation" <> "Price/Profit Calculation"::"Profit=Price-Cost";
      PriceEditable := "Price/Profit Calculation" <> "Price/Profit Calculation"::"Price=Cost+Profit";

      EnableCostingControls;

      EnableShowStockOutWarning;

      EnableShowShowEnforcePositivInventory;

      UpdateSpecialPricesAndDiscountsTxt;
    END;

    LOCAL PROCEDURE OnNewRec@16();
    VAR
      ItemTemplate@1001 : Record 1301;
      Item@1002 : Record 27;
      DocumentNoVisibility@1000 : Codeunit 1400;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        EnableControls;
        IF "No." = '' THEN BEGIN
          IF NOT DocumentNoVisibility.ItemNoSeriesIsDefault THEN
            EXIT;

          IF NOT ItemTemplate.NewItemFromTemplate(Item) THEN BEGIN
            CurrPage.CLOSE;
            EXIT;
          END;
        END;

        Rec := Item;
        InitDefaultValues;
        EnableControls;
        Item := Rec;

        CurrPage.CLOSE;
        PAGE.RUN(PAGE::"O365 Item Card",Item);
      END;
    END;

    LOCAL PROCEDURE EnableShowStockOutWarning@4();
    VAR
      SalesSetup@1000 : Record 311;
    BEGIN
      SalesSetup.GET;
      ShowStockoutWarningDefaultYes := SalesSetup."Stockout Warning";
      ShowStockoutWarningDefaultNo := NOT ShowStockoutWarningDefaultYes;

      EnableShowShowEnforcePositivInventory
    END;

    LOCAL PROCEDURE EnableShowShowEnforcePositivInventory@2();
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
    END;

    LOCAL PROCEDURE EnableCostingControls@3();
    BEGIN
      StandardCostEnable := "Costing Method" = "Costing Method"::Standard;
    END;

    LOCAL PROCEDURE InitControls@12();
    BEGIN
      StandardCostEnable := TRUE;
    END;

    LOCAL PROCEDURE UpdateSpecialPricesAndDiscountsTxt@7();
    VAR
      TempSalesPriceAndLineDiscBuff@1000 : TEMPORARY Record 1304;
    BEGIN
      SpecialPricesAndDiscountsTxt := CreateNewTxt;
      TempSalesPriceAndLineDiscBuff.LoadDataForItem(Rec);
      IF NOT TempSalesPriceAndLineDiscBuff.ISEMPTY THEN
        SpecialPricesAndDiscountsTxt := ViewOrChangeExistingTxt;
    END;

    LOCAL PROCEDURE InitDefaultValues@15();
    VAR
      UnitOfMeasure@1000 : Record 204;
      GenProductPostingGroup@1005 : Record 251;
      VATProductPostingGroup@1004 : Record 324;
      UnitOfMeasureDefaultCode@1002 : Code[10];
    BEGIN
      UnitOfMeasureDefaultCode := 'PCS';
      UnitOfMeasure.SETRANGE(Code,UnitOfMeasureDefaultCode);

      IF NOT UnitOfMeasure.ISEMPTY THEN
        "Base Unit of Measure" := UnitOfMeasureDefaultCode;

      Type := Type::Service;
      "Costing Method" := "Costing Method"::FIFO;

      IF GenProductPostingGroup.FINDFIRST THEN
        "Gen. Prod. Posting Group" := GenProductPostingGroup.Code;

      IF VATProductPostingGroup.FINDFIRST THEN
        "VAT Prod. Posting Group" := VATProductPostingGroup.Code;
    END;

    BEGIN
    END.
  }
}

