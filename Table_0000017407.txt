OBJECT Table 17407 Payroll Calculation Line
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               PayrollElementExpr.RESET;
               PayrollElementExpr.SETRANGE("Element Code","Element Code");
               PayrollElementExpr.SETRANGE("Period Code","Period Code");
               PayrollElementExpr.SETRANGE("Calculation Line No.","Line No.");
               PayrollElementExpr.DELETEALL(TRUE);

               PayrollElementVariable.RESET;
               PayrollElementVariable.SETRANGE("Element Code","Element Code");
               PayrollElementVariable.SETRANGE("Period Code","Period Code");
               PayrollElementVariable.SETRANGE(Variable,Variable);
               PayrollElementVariable.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Payroll Calculation Line;
               RUS=Строка расчета зарплаты];
    LookupPageID=Page17408;
  }
  FIELDS
  {
    { 1   ;   ;Function Code       ;Text30        ;TableRelation="Payroll Calculation Function";
                                                   CaptionML=[ENU=Function Code;
                                                              RUS=Код функции] }
    { 2   ;   ;Element Code        ;Code20        ;TableRelation="Payroll Element";
                                                   CaptionML=[ENU=Element Code;
                                                              RUS=Код элемента] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки];
                                                   Editable=No }
    { 4   ;   ;Period Code         ;Code10        ;TableRelation="Payroll Period";
                                                   CaptionML=[ENU=Period Code;
                                                              RUS=Код периода];
                                                   Editable=No }
    { 5   ;   ;Range Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Range Type" <> xRec."Range Type" THEN
                                                                  "Range Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Range Type;
                                                              RUS=Тип диапазона];
                                                   OptionCaptionML=[ENU=" ,Deduction,Tax Deduction,Exclusion,Deduct. Benefit,Tax Abatement,Limit + Tax %,Frequency,Coordination,Increase Salary,Quantity";
                                                                    RUS=" ,Удержание,Налоговый вычет,Исключение,Удерж. вычет,Налог. скидка,Лимит и налог. ставка,Частота,Увязка,Умножение ставки,Кол-во"];
                                                   OptionString=[ ,Deduction,Tax Deduction,Exclusion,Deduct. Benefit,Tax Abatement,Limit + Tax %,Frequency,Coordination,Increase Salary,Quantity] }
    { 6   ;   ;Range Code          ;Text20        ;OnValidate=BEGIN
                                                                PayrollRangeHeader.RESET;
                                                                PayrollRangeHeader.SETRANGE("Element Code","Element Code");
                                                                PayrollRangeHeader.SETFILTER("Period Code",'..%1',"Period Code");
                                                                IF "Range Type" <> 0 THEN
                                                                  PayrollRangeHeader.SETRANGE("Range Type","Range Type");
                                                                PayrollRangeHeader.SETFILTER(Code,"Range Code");
                                                                PayrollRangeHeader.FINDLAST;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PayrollRangeHeader.RESET;
                                                              PayrollRangeHeader.SETRANGE("Element Code","Element Code");
                                                              PayrollRangeHeader.SETFILTER("Period Code",'..%1',"Period Code");
                                                              IF "Range Type" <> 0 THEN
                                                                PayrollRangeHeader.SETRANGE("Range Type","Range Type");
                                                              IF PAGE.RUNMODAL(0,PayrollRangeHeader) = ACTION::LookupOK THEN BEGIN
                                                                "Range Type" := PayrollRangeHeader."Range Type";
                                                                "Range Code" := PayrollRangeHeader.Code;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Range Code;
                                                              RUS=Код диапазона] }
    { 7   ;   ;Base Amount Code    ;Code10        ;TableRelation="Payroll Base Amount".Code WHERE (Element Code=FIELD(Element Code));
                                                   OnValidate=BEGIN
                                                                IF "Base Amount Code" <> '' THEN
                                                                  TESTFIELD("Function Code");
                                                              END;

                                                   CaptionML=[ENU=Base Amount Code;
                                                              RUS=Код базовой суммы] }
    { 8   ;   ;Time Activity Group ;Code20        ;TableRelation="Time Activity Group";
                                                   OnValidate=BEGIN
                                                                IF "Time Activity Group" <> '' THEN
                                                                  TESTFIELD("Function Code");
                                                              END;

                                                   CaptionML=[ENU=Time Activity Group;
                                                              RUS=Группа временных активностей] }
    { 9   ;   ;Variable            ;Text30        ;OnValidate=BEGIN
                                                                IF (Variable <> '') AND (NOT PayrollElementVariable.GET("Element Code","Period Code",Variable)) THEN BEGIN
                                                                  PayrollElementVariable.INIT;
                                                                  PayrollElementVariable."Element Code" := "Element Code";
                                                                  PayrollElementVariable."Period Code" := "Period Code";
                                                                  PayrollElementVariable.Variable := Variable;
                                                                  PayrollElementVariable.INSERT;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PayrollElementVariable.RESET;
                                                              PayrollElementVariable.SETRANGE("Element Code","Element Code");
                                                              PayrollElementVariable.SETRANGE("Period Code","Period Code");
                                                              IF PAGE.RUNMODAL(0,PayrollElementVariable) = ACTION::LookupOK THEN
                                                                VALIDATE(Variable,PayrollElementVariable.Variable);
                                                            END;

                                                   CaptionML=[ENU=Variable;
                                                              RUS=Переменная] }
    { 10  ;   ;Structured          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Payroll Element Expression" WHERE (Element Code=FIELD(Element Code),
                                                                                                         Period Code=FIELD(Period Code),
                                                                                                         Calculation Line No.=FIELD(Line No.),
                                                                                                         Level=CONST(0),
                                                                                                         Parent Line No.=CONST(0)));
                                                   CaptionML=[ENU=Structured;
                                                              RUS=Структурировано];
                                                   Editable=No }
    { 11  ;   ;Expression          ;Text250       ;OnValidate=VAR
                                                                LinesFound@1210000 : Boolean;
                                                              BEGIN
                                                                IF Expression <> '' THEN
                                                                  TESTFIELD("Function Code",'');

                                                                ExprMgt.CheckParenthesis(Expression);

                                                                CALCFIELDS(Structured);
                                                                IF Structured THEN
                                                                  ERROR(Text002);

                                                                IF Expression <> '' THEN BEGIN
                                                                  LinesFound := FALSE;
                                                                  PayrollCalculationLine.RESET;
                                                                  IF PayrollCalculationLine.FINDSET THEN
                                                                    REPEAT
                                                                      IF PayrollCalculationLine.Expression = Expression THEN BEGIN
                                                                        PayrollCalculationLine.CALCFIELDS(Structured);
                                                                        IF PayrollCalculationLine.Structured THEN BEGIN
                                                                          LinesFound := TRUE;
                                                                          PayrollElementExpr.RESET;
                                                                          PayrollElementExpr.SETRANGE("Element Code",PayrollCalculationLine."Element Code");
                                                                          PayrollElementExpr.SETRANGE("Calculation Line No.",PayrollCalculationLine."Line No.");
                                                                          IF PayrollElementExpr.FINDSET THEN
                                                                            REPEAT
                                                                              PayrollElementExpr2 := PayrollElementExpr;
                                                                              PayrollElementExpr2."Element Code" := "Element Code";
                                                                              PayrollElementExpr2."Calculation Line No." := "Line No.";
                                                                              PayrollElementExpr2.INSERT;
                                                                            UNTIL PayrollElementExpr.NEXT = 0;
                                                                        END;
                                                                      END;
                                                                    UNTIL LinesFound OR (PayrollCalculationLine.NEXT = 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Expression;
                                                              RUS=Выражение] }
    { 13  ;   ;Result Field No.    ;Integer       ;TableRelation=Field.No. WHERE (TableNo=CONST(17415),
                                                                                  Class=CONST(Normal),
                                                                                  Type=FILTER(Decimal));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Result Field Name");
                                                              END;

                                                   OnLookup=VAR
                                                              PayrollDocLine@1210002 : Record 17415;
                                                              Field@1210000 : Record 2000000041;
                                                              Fields@1210001 : Page 7702;
                                                            BEGIN
                                                              Field.SETRANGE(TableNo,DATABASE::"Payroll Document Line");
                                                              Field.SETRANGE(Type,Field.Type::Decimal);
                                                              Field.SETRANGE(Class,Field.Class::Normal);
                                                              Field.SETFILTER("No.",'%1|%2|%3|%4',
                                                                PayrollDocLine.FIELDNO("Payroll Amount"),
                                                                PayrollDocLine.FIELDNO("Taxable Amount"),
                                                                PayrollDocLine.FIELDNO("Corr. Amount"),
                                                                PayrollDocLine.FIELDNO("AE Daily Earnings"));
                                                              Fields.SETTABLEVIEW(Field);
                                                              Fields.LOOKUPMODE := TRUE;
                                                              IF Fields.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                Fields.GETRECORD(Field);
                                                                VALIDATE("Result Field No.",Field."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Result Field No.;
                                                              RUS=Номер поля результата] }
    { 14  ;   ;Result Field Name   ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=CONST(17415),
                                                                                             No.=FIELD(Result Field No.)));
                                                   CaptionML=[ENU=Result Field Name;
                                                              RUS=Имя поля результата];
                                                   Editable=No }
    { 15  ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              RUS=Отступ];
                                                   Editable=No }
    { 16  ;   ;AE Setup Code       ;Code10        ;TableRelation="AE Calculation Setup"."Setup Code" WHERE (Type=CONST(Calculation));
                                                   CaptionML=[ENU=AE Setup Code;
                                                              RUS=Код настройки СЗ] }
    { 19  ;   ;Result Flag         ;Option        ;CaptionML=[ENU=Result Flag;
                                                              RUS=Флаг результата];
                                                   OptionCaptionML=[ENU=" ,Exception,Stop";
                                                                    RUS=" ,Исключение,Остановка"];
                                                   OptionString=[ ,Exception,Stop] }
    { 20  ;   ;Statement 1         ;Option        ;OnValidate=BEGIN
                                                                IF "Statement 1" <> 0 THEN
                                                                  TESTFIELD("Function Code",'');
                                                              END;

                                                   CaptionML=[ENU=Statement 1;
                                                              RUS=Утверждение 1];
                                                   OptionCaptionML=[ENU=" ,IF,THEN,ELSE,ENDIF";
                                                                    RUS=" ,IF,THEN,ELSE,ENDIF"];
                                                   OptionString=[ ,IF,THEN,ELSE,ENDIF] }
    { 21  ;   ;Statement 2         ;Option        ;OnValidate=BEGIN
                                                                IF "Statement 2" <> 0 THEN
                                                                  TESTFIELD("Function Code",'');
                                                              END;

                                                   CaptionML=[ENU=Statement 2;
                                                              RUS=Утверждение 2];
                                                   OptionCaptionML=[ENU=" ,MIN,MAX,ABS,GOTO,STOP";
                                                                    RUS=" ,MIN,MAX,ABS,GOTO,STOP"];
                                                   OptionString=[ ,MIN,MAX,ABS,GOTO,STOP] }
    { 22  ;   ;IF Level            ;Integer       ;CaptionML=[ENU=IF Level;
                                                              RUS=Уровень IF] }
    { 25  ;   ;Label               ;Text10        ;CaptionML=[ENU=Label;
                                                              RUS=Метка] }
    { 30  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 58  ;   ;Rounding Precision  ;Decimal       ;CaptionML=[ENU=Rounding Precision;
                                                              RUS=Точность округления];
                                                   AutoFormatType=1 }
    { 59  ;   ;Rounding Type       ;Option        ;CaptionML=[ENU=Rounding Type;
                                                              RUS=Тип округления];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    RUS=Ближайшее,Большее,Меньшее];
                                                   OptionString=Nearest,Up,Down }
  }
  KEYS
  {
    {    ;Element Code,Period Code,Line No.       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PayrollCalculationLine@1210000 : Record 17407;
      PayrollElementExpr@1210005 : Record 17422;
      PayrollElementExpr2@1210001 : Record 17422;
      PayrollElementVariable@1210002 : Record 17421;
      PayrollRangeHeader@1210004 : Record 17410;
      ExprMgt@1210006 : Codeunit 17414;
      Text001@1210003 : TextConst 'ENU="DOC.%1 = ";RUS="ДОК.%1 = "';
      Text002@1210007 : TextConst 'ENU=Use AssistEdit to edit structured expression.;RUS=Используйте кнопку AssistEdit для редактирования структурированного выражения.';

    PROCEDURE ExprAssistEdit@1210002();
    VAR
      PayrollCalculationLines@1210000 : Page 17408;
      PayrollExprEditor@1210001 : Page 17436;
    BEGIN
      TESTFIELD("Line No.");

      IF "Statement 2" = "Statement 2"::GOTO THEN BEGIN // label
        PayrollCalculationLine.RESET;
        PayrollCalculationLine.FILTERGROUP(2);
        PayrollCalculationLine.SETRANGE("Element Code","Element Code");
        PayrollCalculationLine.SETRANGE("Period Code","Period Code");
        PayrollCalculationLine.SETFILTER(Label,'<>%1','');
        PayrollCalculationLine.FILTERGROUP(0);

        PayrollCalculationLines.SETTABLEVIEW(PayrollCalculationLine);
        PayrollCalculationLines.LOOKUPMODE(TRUE);
        PayrollCalculationLines.EDITABLE(FALSE);
        IF PayrollCalculationLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
          PayrollCalculationLines.GETRECORD(PayrollCalculationLine);
          Expression := PayrollCalculationLine.Label;
        END;
      END ELSE BEGIN
        PayrollElementExpr.RESET;
        PayrollElementExpr.FILTERGROUP(2);
        PayrollElementExpr.SETRANGE("Element Code","Element Code");
        PayrollElementExpr.SETRANGE("Period Code","Period Code");
        PayrollElementExpr.SETRANGE("Calculation Line No.","Line No.");
        PayrollElementExpr.SETRANGE(Level,0);
        PayrollElementExpr.SETRANGE("Parent Line No.",0);
        PayrollElementExpr.FILTERGROUP(0);

        PayrollExprEditor.SETTABLEVIEW(PayrollElementExpr);
        PayrollExprEditor.SetFromCalcLine(Rec);
        PayrollExprEditor.RUNMODAL;
        CLEAR(PayrollExprEditor);

        Expression := '';
        IF PayrollElementExpr.FINDSET THEN
          REPEAT
            Expression := Expression +
              ExprMgt.FormatElementStatement(PayrollElementExpr);
          UNTIL PayrollElementExpr.NEXT = 0;

        Expression := DELCHR(Expression,'>',' ');
      END;
    END;

    PROCEDURE ShowCodeLine@1210000() LineText : Text[1024];
    BEGIN
      LineText := '';
      IF Label <> '' THEN
        LineText := LineText + FORMAT(Label) + ': ';
      IF Variable <> '' THEN
        LineText := LineText + FORMAT(Variable) + ' = ';
      IF "Result Field No." <> 0 THEN BEGIN
        CALCFIELDS("Result Field Name");
        LineText := LineText +
          STRSUBSTNO(Text001,"Result Field Name");
      END;
      IF "Statement 1" <> 0 THEN
        LineText := LineText + FORMAT("Statement 1") + ' ';
      IF "Statement 2" <> 0 THEN
        LineText := LineText + FORMAT("Statement 2") + ' ';
      IF Expression <> '' THEN
        LineText := LineText + FORMAT(Expression) + ' ';
      IF "Function Code" <> '' THEN
        LineText := LineText + FORMAT("Function Code");

      IF ("Base Amount Code" <> '') OR ("Time Activity Group" <> '') OR ("Range Code" <> '') THEN
        LineText := LineText + '( ';
      IF "Base Amount Code" <> '' THEN
        LineText := LineText + FORMAT("Base Amount Code");
      IF "Time Activity Group" <> '' THEN BEGIN
        IF "Base Amount Code" <> '' THEN
          LineText := LineText + ' ; ' + FORMAT("Time Activity Group")
        ELSE
          LineText := LineText + FORMAT("Time Activity Group");
      END;
      IF "Range Code" <> '' THEN BEGIN
        IF "Time Activity Group" <> '' THEN
          LineText := LineText + ' ; ' + FORMAT("Range Code")
        ELSE
          LineText := LineText + FORMAT("Range Code");
      END;
      IF ("Base Amount Code" <> '') OR ("Time Activity Group" <> '') OR ("Range Code" <> '') THEN
        LineText := LineText + ' )';

      EXIT(LineText);
    END;

    BEGIN
    END.
  }
}

