OBJECT Codeunit 50085 Internal Events Handler
{
  OBJECT-PROPERTIES
  {
    Date=24.07.17;
    Time=18:00:42;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd,
                TableData 18=rimd,
                TableData 21=rimd,
                TableData 23=rimd,
                TableData 25=rimd,
                TableData 349=rimd,
                TableData 352=rimd,
                TableData 379=rimd,
                TableData 380=rimd,
                TableData 14901=rimd,
                TableData 14902=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    LOCAL PROCEDURE "// Table [Currency]"@1101495038();
    BEGIN
    END;

    [EventSubscriber(Table,4,OnAfterValidateEvent,"RU Bank Code")]
    LOCAL PROCEDURE OnAfterValidateRUBankCurrency@1101495039(VAR Rec@1101495000 : Record 4;VAR xRec@1101495001 : Record 4;CurrFieldNo@1101495002 : Integer);
    BEGIN
      //NC NOS-26 > SPA
      Rec.Import := (Rec."RU Bank Code" <> '');
      //NC NOS-26 < SPA
    END;

    LOCAL PROCEDURE "// Table [Country/Region]"@1101495046();
    BEGIN
    END;

    [EventSubscriber(Table,9,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameCountryRegion@1101495047(VAR Rec@1101495000 : Record 9;VAR xRec@1101495001 : Record 9;RunTrigger@1101495002 : Boolean);
    VAR
      RenameRef@1101495005 : Codeunit 50029;
      ErrorCode@1101495004 : Code[10];
      ErrorText@1101495003 : Text[250];
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      //NC MDB03 > PCH
      //NC S547 > PCH
      //IF NOT RenameRef.TestCountry(xRec.Code,Code,ErrorCode,ErrorText,TRUE) THEN
      IF NOT RenameRef.TestCountry(xRec.Code,'',Rec.Code,ErrorCode,ErrorText,TRUE) THEN
      //NC S547 < PCH
        ERROR(ErrorText);
      //NC MDB03 < PCH
    END;

    LOCAL PROCEDURE "// Table [Customer]"@1101495001();
    BEGIN
    END;

    [EventSubscriber(Table,18,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertCustomer@1101495000(VAR Rec@1101495000 : Record 18;RunTrigger@1101495001 : Boolean);
    VAR
      SalesSetup@1101495002 : Record 311;
      ConsSetup@1101495004 : Record 50000;
      Segment@1101495003 : Record 50190;
      MovingDataSetup@1101495007 : Record 50064;
      DimValue@1101495006 : Record 349;
      DefDim@1101495005 : Record 352;
      CustAgr@1101495009 : Record 14902;
      DimMgt@1101495008 : Codeunit 408;
      Text12400@1101495010 : TextConst 'ENU=No agreement;RUS=Без договора';
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC NOS-26 > SPA
        CustAgr.INIT;
        CustAgr."Customer No." := "No.";
        CustAgr."No." := '';
        CustAgr.Description := Text12400;
        IF CustAgr.INSERT THEN;
        //NC NOS-26 < SPA

        SalesSetup.GET;
        // TDRANCS-1030 >
        "Agreement Posting" := SalesSetup."Agreement Posting";
        // TDRANCS-1030 <

        //NC S1883 > PCH
        ConsSetup.GET;
        ConsSetup.TESTFIELD("Segment Code");
        IF "Segment Code" = '' THEN BEGIN
          Segment.GET(ConsSetup."Segment Code");
          IF Segment."Is General" THEN
            "Segment Code" := ''
          ELSE
            "Segment Code" := ConsSetup."Segment Code";
        END;
        //NC S1883 < PCH

        //NC MDB01 > PCH
        MovingDataSetup.GET;
        //NC NOS-26 > SPA
        IF NOT DimValue.GET(MovingDataSetup."Customer Dimension Code","No.") THEN BEGIN
        //NC NOS-26 < SPA
          DimValue."Dimension Code" := MovingDataSetup."Customer Dimension Code";
          DimValue.Code := "No.";
        //NC NOS-26 > SPA
        END;
        //NC NOS-26 < SPA
        DimValue.Name := Name;
        DimValue."Name 2" := "Name 2";
        //NC S547 > PCH
        DimValue."Rec ID" := "Rec ID";
        //NC S547 < PCH
        //NC S1883 > PCH
        DimValue."Segment Code" := "Segment Code";
        //NC S1883 < PCH
        IF NOT DimValue.INSERT(TRUE) THEN
          DimValue.MODIFY(TRUE);
        //NC MDB01 < PCH
        //NC MDC04 > MP
        //NC NOS-26 > SPA
        IF NOT DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code","No.") THEN BEGIN
        //NC NOS-26 < SPA
          DimValue."Dimension Code" := MovingDataSetup."Real Counterparty Dim. Code";
          DimValue.Code := "No.";
        //NC NOS-26 > SPA
        END;
        //NC NOS-26 < SPA
        DimValue.Name := Name;
        DimValue."Name 2" := "Name 2";
        //NC S547 > PCH
        DimValue."Rec ID" := "Rec ID";
        //NC S547 < PCH
        //NC S1883 > PCH
        DimValue."Segment Code" := "Segment Code";
        //NC S1883 < PCH
        IF NOT DimValue.INSERT(TRUE) THEN
          DimValue.MODIFY(TRUE);
        //NC MDC04 < MP

        //NC OAM02 > DP
        DefDim."Table ID" := DATABASE::Customer;
        DefDim."No." := "No.";
        DefDim."Dimension Code" := MovingDataSetup."Customer Dimension Code";
        DefDim."Dimension Value Code" := "No.";
        DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
        IF NOT DefDim.INSERT(TRUE) THEN
          DefDim.MODIFY(TRUE);
        //NC OAM02 < DP

        //NC NOS-26 > SPA
        DimMgt.UpdateDefaultDim(
          DATABASE::Customer,"No.",
          "Global Dimension 1 Code","Global Dimension 2 Code");
        //NC NOS-26 < SPA
      END;
    END;

    [EventSubscriber(Table,18,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyCustomer@1101495004(VAR Rec@1101495000 : Record 18;VAR xRec@1101495001 : Record 18;RunTrigger@1101495002 : Boolean);
    VAR
      oldCustomer@1101495003 : Record 18;
      MovingDataSetup@1101495006 : Record 50064;
      DimValue@1101495005 : Record 349;
      VendorRec@1101495004 : Record 23;
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN

        //NC MDB01 > PCH
        //NC MTD04 > RD
        //oldCustomer.GET("No.");
        IF (Name <> xRec.Name) OR
          //NC S547 > PCH
          (("Rec ID" <> '') AND ("Rec ID" <> xRec."Rec ID")) OR
          //NC S547 < PCH
          ("Name 2" <> xRec."Name 2")
        THEN BEGIN

        //NC S547 > PCH вернул старое условие, см. выше
        {
        IF (Name <> xRec.Name) OR
          ("Name 2" <> xRec."Name 2") THEN BEGIN
        }
        //NC S547 < PCH

          //NC MTD04 < RD
          MovingDataSetup.GET;
          //NC NOS-26 > SPA
          IF NOT DimValue.GET(MovingDataSetup."Customer Dimension Code","No.") THEN BEGIN
          //NC NOS-26 < SPA
            DimValue."Dimension Code" := MovingDataSetup."Customer Dimension Code";
            DimValue.Code := "No.";
          //NC NOS-26 > SPA
          END;
          //NC NOS-26 < SPA
          DimValue.Name := Name;
          DimValue."Name 2" := "Name 2";
          //NC S547 > PCH
          DimValue."Rec ID" := "Rec ID";
          //NC S547 < PCH
          //NC S1883 > PCH
          DimValue."Segment Code" := "Segment Code";
          //NC S1883 < PCH
          IF NOT DimValue.INSERT(TRUE) THEN
            DimValue.MODIFY(TRUE);

          //NC MDC04 > MP
          //NC NOS-26 > SPA
          IF NOT DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code","No.") THEN BEGIN
          //NC NOS-26 < SPA
            DimValue."Dimension Code" := MovingDataSetup."Real Counterparty Dim. Code";
            DimValue.Code := "No.";
          //NC NOS-26 > SPA
          END;
          //NC NOS-26 < SPA
          DimValue.Name := Name;
          DimValue."Name 2" := "Name 2";
          //NC S547 > PCH
          DimValue."Rec ID" := "Rec ID";
          //NC S547 < PCH
          //NC S1883 > PCH
          DimValue."Segment Code" := "Segment Code";
          //NC S1883 < PCH
          IF NOT DimValue.INSERT(TRUE) THEN
            DimValue.MODIFY(TRUE);
          //NC MDC04 < MP
        END;
        //NC MDB01 < PCH

        //NC MTD04 > RD
        IF VendorRec.GET("No.") THEN
          IF (VendorRec.Name <> Name) OR
              //NC S547 > PCH
              (("Rec ID" <> '') AND ("Rec ID" <> VendorRec."Rec ID")) OR
              //NC S547 < PCH
              (VendorRec."Name 2" <> "Name 2")
          THEN BEGIN
            VendorRec."No." := "No.";
            VendorRec.Name := Name;
            VendorRec."Name 2" := "Name 2";
            //NC S547 > PCH
            VendorRec."Rec ID" := "Rec ID";
            //NC S547 < PCH
          // NC SB  IF NOT VendorRec.INSERT(TRUE) THEN
          // NC SB    VendorRec.MODIFY(TRUE);
              VendorRec.MODIFY;
          END;
        //NC MTD04 <RD

      END;
    END;

    [EventSubscriber(Table,18,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteCustomer@1101495007(VAR Rec@1101495000 : Record 18;RunTrigger@1101495001 : Boolean);
    VAR
      MovingDataSetup@1101495003 : Record 50064;
      DimValue@1101495002 : Record 349;
      Company@1101495005 : Record 2000000006;
      CustAgreement@1101495004 : Record 14902;
      VendorRec@1101495006 : Record 23;
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC MDB01 > PCH
        MovingDataSetup.GET;
        IF DimValue.GET(MovingDataSetup."Customer Dimension Code","No.") THEN
        //NC MTD04 > RD
          IF NOT VendorRec.GET("No.") THEN
        //NC MTD04 < RD
          DimValue.DELETE(TRUE);
        //NC MDB01 < PCH

        //NC MDC04 > MP
        IF DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code","No.") THEN
        //NC MTD04 > RD
          IF NOT VendorRec.GET("No.") THEN
        //NC MTD04 < RD
          DimValue.DELETE(TRUE);
        //NC MDC04 < MP

        //NC OAM023 > DP
        Company.RESET;
        IF Company.FINDSET THEN
          REPEAT
            CustAgreement.CHANGECOMPANY(Company.Name);
            CustAgreement.SETRANGE("Customer No.","No.");
            CustAgreement.DELETEALL(TRUE);
          UNTIL Company.NEXT = 0;
        //NC OAM023 < DP
      END;
    END;

    [EventSubscriber(Table,18,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameCustomer@1101495010(VAR Rec@1101495000 : Record 18;VAR xRec@1101495001 : Record 18;RunTrigger@1101495002 : Boolean);
    VAR
      RenameRef@1101495005 : Codeunit 50029;
      ErrorCode@1101495004 : Code[10];
      ErrorText@1101495003 : Text[250];
      MovingDataSetup@1101495007 : Record 50064;
      DimValue@1101495006 : Record 349;
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC MDB03 > PCH
        //NC S547 > PCH
        //IF NOT RenameRef.TestCust(xRec."No.","No.",ErrorCode,ErrorText,TRUE) THEN
        IF NOT RenameRef.TestCust(xRec."No.",'',"No.",ErrorCode,ErrorText,TRUE) THEN
        //NC S547 < PCH
          ERROR(ErrorText);
        //NC MDB03 < PCH
        //NC MDB01 > PCH
        MovingDataSetup.GET;
        DimValue.SetDoNotTestRename(TRUE);
        IF DimValue.GET(MovingDataSetup."Customer Dimension Code", xRec."No.") THEN
          DimValue.RENAME(MovingDataSetup."Customer Dimension Code","No.");
        //NC MDB01 < PCH
        //NC MDC04 > MP
        IF DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code", xRec."No.") THEN
          DimValue.RENAME(MovingDataSetup."Real Counterparty Dim. Code","No.");
        //NC MDC04 < MP

        //NC MTD04 > RD
        {
        IF VendorRec.GET(xRec."No.") THEN
          VendorRec.RENAME("No.")
        }
        //NC MTD04 < RD
      END;
    END;

    LOCAL PROCEDURE "// Table [Customer Ledger Entry]"@1101495002();
    BEGIN
    END;

    [EventSubscriber(Table,21,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteCustLedgerEntry@1101495003(VAR Rec@1101495000 : Record 21;RunTrigger@1101495001 : Boolean);
    VAR
      DtldCLE@1101495003 : Record 379;
      DtldCLE1@1101495002 : Record 379;
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      DtldCLE.SETRANGE("Cust. Ledger Entry No.", Rec."Entry No.");
      IF DtldCLE.FIND('-') THEN
        REPEAT
          IF DtldCLE1.GET(DtldCLE."Entry No.") THEN BEGIN
            DtldCLE1.SetDeleteStatus;
            DtldCLE1.DELETE(TRUE);
          END;
        UNTIL DtldCLE.NEXT = 0;
    END;

    LOCAL PROCEDURE "// Table [Vendor]"@1101495021();
    BEGIN
    END;

    [EventSubscriber(Table,23,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertVendor@1101495022(VAR Rec@1101495000 : Record 23;RunTrigger@1101495001 : Boolean);
    VAR
      PurchSetup@1101495012 : Record 312;
      VendPostGroup@1101495004 : Record 93;
      DefDim2@1101495003 : Record 352;
      MovingDataSetup@1101495011 : Record 50064;
      DimValue@1101495010 : Record 349;
      DefDim@1101495009 : Record 352;
      CustomerRec@1101495008 : Record 18;
      ConsSetup@1101495006 : Record 50000;
      Segment@1101495005 : Record 50190;
      VendAgr@1101495007 : Record 14901;
      DimMgt@1101495002 : Codeunit 408;
      Text12400@1101495013 : TextConst 'ENU=No agreement;RUS=Без договора';
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC NOS-26 > SPA
        VendAgr.INIT;
        VendAgr."Vendor No." := "No.";
        VendAgr."No." := '';
        VendAgr.Description := Text12400;
        IF VendAgr.INSERT THEN;
        //NC NOS-26 < SPA

        PurchSetup.GET;
        // TDRANCS-1030 >
        IF "Vendor Type" = "Vendor Type"::Vendor THEN
          "Agreement Posting" := PurchSetup."Agreement Posting";
        // TDRANCS-1030 <

        //NC S1883 > PCH
        ConsSetup.GET;
        ConsSetup.TESTFIELD("Segment Code");
        IF "Segment Code" = '' THEN BEGIN
          Segment.GET(ConsSetup."Segment Code");
          IF Segment."Is General" THEN
            "Segment Code" := ''
          ELSE
            "Segment Code" := ConsSetup."Segment Code";
        END;
        //NC S1883 < PCH

        //NC NCS-1600 > USE
        IF PurchSetup."Use Default Posting Group" THEN
        IF "Vendor Posting Group"='' THEN BEGIN
          VendPostGroup.SETRANGE(Default,TRUE);
          IF VendPostGroup.FINDFIRST THEN BEGIN
            "Vendor Posting Group":=VendPostGroup.Code;
            DefDim2.SETRANGE("Table ID", DATABASE::"Vendor Posting Group");
            DefDim2.SETRANGE("No.", VendPostGroup.Code);
            DefDim2.SETFILTER("Dimension Value Code", '<>%1', '');
            IF DefDim2.FINDSET THEN
              REPEAT
                DefDim."Table ID" := DATABASE::Vendor;
                DefDim."No." := "No.";
                DefDim."Dimension Code" := DefDim2."Dimension Code";
                DefDim."Dimension Value Code" := DefDim2."Dimension Value Code";
                DefDim."Value Posting" := DefDim2."Value Posting";
                IF NOT DefDim.INSERT(TRUE) THEN
                  DefDim.MODIFY(TRUE);
              UNTIL DefDim2.NEXT=0;
          END;
        END;
        //NC NCS-1600 < USE

        //NC MTD04 > RD
        MovingDataSetup.GET;
        //NC NOS-26 > SPA
        IF NOT DimValue.GET(MovingDataSetup."Customer Dimension Code","No.") THEN BEGIN
        //NC NOS-26 < SPA
          DimValue."Dimension Code" := MovingDataSetup."Customer Dimension Code";
          DimValue.Code := "No.";
        //NC NOS-26 > SPA
        END;
        //NC NOS-26 < SPA
        DimValue.Name := Name;
        DimValue."Name 2" := "Name 2";
        //NC S547 > PCH
        DimValue."Rec ID" := "Rec ID";
        //NC S547 < PCH
        //NC S1883 > PCH
        DimValue."Segment Code" := "Segment Code";
        //NC S1883 < PCH
        IF NOT DimValue.INSERT(TRUE) THEN
          DimValue.MODIFY(TRUE);
        //NC MTD04 < RD

        //NC MDC04 > MP
        //NC NOS-26 > SPA
        IF NOT DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code","No.") THEN BEGIN
        //NC NOS-26 < SPA
          DimValue."Dimension Code" := MovingDataSetup."Real Counterparty Dim. Code";
          DimValue.Code := "No.";
        //NC NOS-26 > SPA
        END;
        //NC NOS-26 < SPA
        DimValue.Name := Name;
        DimValue."Name 2" := "Name 2";
        //NC S547 > PCH
        DimValue."Rec ID" := "Rec ID";
        //NC S547 < PCH
        //NC S1883 > PCH
        DimValue."Segment Code" := "Segment Code";
        //NC S1883 < PCH
        IF NOT DimValue.INSERT(TRUE) THEN
          DimValue.MODIFY(TRUE);
        //NC MDC04 < MP

        //NC OAM02 > DP
        DefDim."Table ID" := DATABASE::Vendor;
        DefDim."No." := "No.";
        DefDim."Dimension Code" := MovingDataSetup."Customer Dimension Code";
        DefDim."Dimension Value Code" := "No.";
        DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
        IF NOT DefDim.INSERT(TRUE) THEN
          DefDim.MODIFY(TRUE);
        //NC OAM02 < DP

        //NC NOS-26 > SPA Повторное обновление измерений на карточке поставщика
        DimMgt.UpdateDefaultDim(
          DATABASE::Vendor,"No.",
          "Global Dimension 1 Code",
          "Global Dimension 2 Code");
        //NC NOS-26 < SPA
      END;
    END;

    [EventSubscriber(Table,23,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyVendor@1101495026(VAR Rec@1101495000 : Record 23;VAR xRec@1101495001 : Record 23;RunTrigger@1101495002 : Boolean);
    VAR
      MovingDataSetup@1101495005 : Record 50064;
      DimValue@1101495004 : Record 349;
      CustomerRec@1101495003 : Record 18;
      oldVendor@1101495006 : Record 23;
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC MTD04 > RD
        IF (Name <> xRec.Name) OR
           ("Name 2" <> xRec."Name 2")
        THEN BEGIN
          MovingDataSetup.GET;
          //NC NOS-26 > SPA
          IF NOT DimValue.GET(MovingDataSetup."Customer Dimension Code","No.") THEN BEGIN
          //NC NOS-26 < SPA
            DimValue."Dimension Code" := MovingDataSetup."Customer Dimension Code";
            DimValue.Code := "No.";
          //NC NOS-26 > SPA
          END;
          //NC NOS-26 < SPA
          DimValue.Name := Name;
          DimValue."Name 2" := "Name 2";
          //NC S1883 > PCH
          DimValue."Segment Code" := "Segment Code";
          //NC S1883 < PCH
          IF NOT DimValue.INSERT(TRUE) THEN
            DimValue.MODIFY(TRUE);
          //NC MDC04 > MP
          //NC NOS-26 > SPA
          IF NOT DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code","No.") THEN BEGIN
          //NC NOS-26 < SPA
            DimValue."Dimension Code" := MovingDataSetup."Real Counterparty Dim. Code";
            DimValue.Code := "No.";
          //NC NOS-26 > SPA
          END;
          //NC NOS-26 < SPA
          DimValue.Name := Name;
          DimValue."Name 2" := "Name 2";
          //NC S1883 > PCH
          DimValue."Segment Code" := "Segment Code";
          //NC S1883 < PCH
          IF NOT DimValue.INSERT(TRUE) THEN
            DimValue.MODIFY(TRUE);
          //NC MDC04 < MP
        END;

        //NC S547 > PCH
        oldVendor.GET("No.");
        IF ("Rec ID" <> '') AND ("Rec ID" <> xRec."Rec ID") THEN BEGIN
          MovingDataSetup.GET;
          IF DimValue.GET(MovingDataSetup."Customer Dimension Code","No.") THEN BEGIN
            DimValue."Rec ID" := "Rec ID";
            DimValue.MODIFY;
          END;
          IF DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code") THEN BEGIN
            DimValue."Rec ID" := "Rec ID";
            DimValue.MODIFY;
          END;
        END;
        //NC S547 < PCH

        IF CustomerRec.GET("No.") THEN
          IF (CustomerRec.Name <> Name) OR
             //NC S547 > PCH
             (("Rec ID" <> '') AND ("Rec ID" <> CustomerRec."Rec ID")) OR
             //NC S547 < PCH
             (CustomerRec."Name 2" <> "Name 2")
          THEN BEGIN
            CustomerRec."No." := "No.";
            CustomerRec.Name := Name;
            CustomerRec."Name 2" := "Name 2";
            //NC S547 > PCH
            CustomerRec."Rec ID" := "Rec ID";
            //NC S547 < PCH
          // NC SB  IF NOT CustomerRec.INSERT(TRUE) THEN
          // NC SB    CustomerRec.MODIFY(TRUE);
            CustomerRec.MODIFY;
          END;
      END;
      //NC MTD04 < RD
    END;

    [EventSubscriber(Table,23,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteVendor@1101495030(VAR Rec@1101495000 : Record 23;RunTrigger@1101495001 : Boolean);
    VAR
      MovingDataSetup@1101495003 : Record 50064;
      DimValue@1101495002 : Record 349;
      VendAgreement@1101495005 : Record 14901;
      Company@1101495004 : Record 2000000006;
      CustomerRec@1101495006 : Record 18;
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC MTD04 > RD
        MovingDataSetup.GET;
        IF DimValue.GET(MovingDataSetup."Customer Dimension Code","No.") THEN
          IF NOT CustomerRec.GET("No.") THEN
            DimValue.DELETE(TRUE);
        //NC MTD04 < RD
        //NC MDC04 > MP
        IF DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code","No.") THEN
        //NC MTD04 > RD
          IF NOT CustomerRec.GET("No.") THEN
        //NC MTD04 < RD
          DimValue.DELETE(TRUE);
        //NC MDC04 < MP

        //NC OAM023 > DP
        Company.RESET;
        IF Company.FINDSET THEN
          REPEAT
            VendAgreement.CHANGECOMPANY(Company.Name);
            VendAgreement.SETRANGE("Vendor No.","No.");
            VendAgreement.DELETEALL(TRUE);
          UNTIL Company.NEXT = 0;
        //NC OAM023 < DP
      END;
    END;

    [EventSubscriber(Table,23,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameVendor@1101495033(VAR Rec@1101495000 : Record 23;VAR xRec@1101495001 : Record 23;RunTrigger@1101495002 : Boolean);
    VAR
      MovingDataSetup@1101495004 : Record 50064;
      DimValue@1101495003 : Record 349;
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC MTD04 > RD
        MovingDataSetup.GET;
        DimValue.SetDoNotTestRename(TRUE);
        IF DimValue.GET(MovingDataSetup."Customer Dimension Code",xRec."No.") THEN
          DimValue.RENAME(MovingDataSetup."Customer Dimension Code","No.");
        //NC MTD04 < RD
        //NC MDC04 > MP
        IF DimValue.GET(MovingDataSetup."Real Counterparty Dim. Code",xRec."No.") THEN
          DimValue.RENAME(MovingDataSetup."Real Counterparty Dim. Code","No.");
        //NC MDC04 < MP
      END;
    END;

    LOCAL PROCEDURE "// Table [Vendor Ledger Entry]"@1101495023();
    BEGIN
    END;

    [EventSubscriber(Table,25,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteVendLedgerEntry@1101495024(VAR Rec@1101495000 : Record 25;RunTrigger@1101495001 : Boolean);
    VAR
      DtldVLE@1101495003 : Record 380;
      DtldVLE1@1101495002 : Record 380;
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC OAM038 > DP
        DtldVLE.RESET;
        DtldVLE.SETRANGE(DtldVLE."Vendor Ledger Entry No.","Entry No.");
        IF DtldVLE.FINDSET(TRUE,TRUE) THEN
          REPEAT
            IF DtldVLE1.GET(DtldVLE."Entry No.") THEN BEGIN
             // DtldVLE1.SetDeleteStatus;
              DtldVLE1.DELETE(TRUE);
            END;
          UNTIL DtldVLE.NEXT=0;
        //NC OAM038 < DP
      END;
    END;

    [EventSubscriber(Table,93,OnAfterValidateEvent,"Payables Account")]
    LOCAL PROCEDURE OnAfterValidatePayablesAccount@1101495032(VAR Rec@1101495000 : Record 93;VAR xRec@1101495001 : Record 93;CurrFieldNo@1101495002 : Integer);
    VAR
      GLAcc@1101495003 : Record 15;
    BEGIN
      IF Rec."Payables Account" = '' THEN
        EXIT;

      GLAcc.GET(Rec."Payables Account");
      Rec.Description := GLAcc.Name;
    END;

    LOCAL PROCEDURE "// Table [Accounting Period]"@1101495042();
    BEGIN
    END;

    [EventSubscriber(Table,50,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertAccountPeriod@1101495043(VAR Rec@1101495000 : Record 50;RunTrigger@1101495001 : Boolean);
    VAR
      SMTPMail@1101495002 : Codeunit 400;
      TextRecipients@1101495004 : TextConst 'RUS="yana_sergeeva@sberbank-cib.ru;elena_sychuk@sberbank-cib.ru;artemy_maryin@sberbank-cib.ru;konstantin_kuznetsov@sberbank-cib.ru;Vladislav_Yusupov@sberbank-cib.ru"';
      TextSubject@1101495003 : TextConst 'RUS="NY: Создана запись в т. ""Учетный Период"", в компании "';
      Database@1101495005 : Record 2000000048;
    BEGIN
      IF NOT RunTrigger THEN
        EXIT;

      Database.SETRANGE("My Database", TRUE);
      Database.FINDFIRST;
      IF Database."Database Name" <> 'NAV-NY' THEN
        EXIT;
      SMTPMail.fn_MailSend(TextRecipients,
        TextSubject + COMPANYNAME,
        'User: ' + USERID + ', ' +
        'DB: '+ Database."Database Name" + ', ' +
        'Company: '+ COMPANYNAME  + ', ' +
        'Starting Date: ' + FORMAT(Rec."Starting Date"));
    END;

    LOCAL PROCEDURE "// Table [Customer Posting Group]"@1101495005();
    BEGIN
    END;

    [EventSubscriber(Table,92,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteCustPostGroup@1101495006(VAR Rec@1101495000 : Record 92;RunTrigger@1101495001 : Boolean);
    VAR
      lCustomer@1101495005 : Record 18;
      lCustAgreement@1101495004 : Record 14902;
      lGLAccount@1101495003 : Record 15;
      lCompany@1101495002 : Record 2000000006;
      Text50001@1101495006 : TextConst 'ENU=Posting Group %1 is used in List of %2, %3 %4, %5 %6;RUS=Учетная группа %1 используется в списке %2, %3 %4, %5 %6';
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC NCS-964 > DP
        lCustomer.RESET;
        lCustomer.SETCURRENTKEY("Customer Posting Group");
        lCustomer.SETRANGE("Customer Posting Group",Code);
        IF lCustomer.FINDFIRST THEN
          ERROR(Text50001,Code,lCustomer.TABLECAPTION, lCustomer.FIELDCAPTION("No."),lCustomer."No.");

        //NC NCS-964.1 > DP
        IF lCompany.FINDSET THEN
        REPEAT
          lCustAgreement.CHANGECOMPANY(lCompany.Name);
        //NC NCS-964.1 < DP

          lCustAgreement.RESET;
          lCustAgreement.SETCURRENTKEY(
            "Agreement Type","Currency Code","Customer Posting Group","Customer No.","No.");
          lCustAgreement.SETRANGE("Customer Posting Group",Code);
          IF lCustAgreement.FINDFIRST THEN
            ERROR(Text50001,Code,lCustAgreement.TABLECAPTION,
              lCustAgreement.FIELDCAPTION("Customer No."),
              lCustAgreement."Customer No.",
              lCustAgreement.FIELDCAPTION("No."),
              lCustAgreement."No.");

        //NC NCS-964.1 > DP
        UNTIL lCompany.NEXT=0;
        //NC NCS-964.1 < DP

        lGLAccount.RESET;
        lGLAccount.SETRANGE("Source Posting Group",Code);
        IF lGLAccount.FINDFIRST THEN
          ERROR(Text50001,Code,lGLAccount.TABLECAPTION, lGLAccount.FIELDCAPTION("No."), lGLAccount."No.");
         //NC NCS-964 < DP
       END;
    END;

    [EventSubscriber(Table,92,OnAfterValidateEvent,"Receivables Account")]
    LOCAL PROCEDURE OnAfterValidateReceivblsAcc@1101495008(VAR Rec@1101495000 : Record 92;VAR xRec@1101495001 : Record 92;CurrFieldNo@1101495002 : Integer);
    VAR
      GLAccount@1101495003 : Record 15;
    BEGIN
      //NC NOS-26 > SPA
      IF Rec."Receivables Account" = '' THEN
        EXIT;

      GLAccount.GET(Rec."Receivables Account");
      Rec.Description := GLAccount.Name;
      //NC NOS-26 < SPA
    END;

    LOCAL PROCEDURE "// Table [Vendor Posting Group]"@1101495025();
    BEGIN
    END;

    [EventSubscriber(Table,93,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteVendPostingGroup@1101495027(VAR Rec@1101495000 : Record 93;RunTrigger@1101495001 : Boolean);
    VAR
      lVendor@1101495005 : Record 23;
      lVendAgreement@1101495004 : Record 14901;
      lGLAccount@1101495003 : Record 15;
      lCompany@1101495002 : Record 2000000006;
      Text50001@1101495006 : TextConst 'ENU=Posting Group %1 is used in List of %2, %3 %4, %5 %6;RUS=Учетная группа %1 используется в списке %2, %3 %4, %5 %6';
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      WITH Rec DO BEGIN
        //NC NCS-964 > DP
        lVendor.RESET;
        lVendor.SETCURRENTKEY("Vendor Posting Group");
        lVendor.SETRANGE("Vendor Posting Group",Code);
        IF lVendor.FINDFIRST THEN
          ERROR(Text50001,Code,lVendor.TABLECAPTION, lVendor.FIELDCAPTION("No."),lVendor."No.");

        //NC NCS-964.1 > DP
        IF lCompany.FINDSET THEN
        REPEAT
          lVendAgreement.CHANGECOMPANY(lCompany.Name);
        //NC NCS-964.1 < DP

          lVendAgreement.RESET;
          lVendAgreement.SETCURRENTKEY(
            "Agreement Type","Currency Code","Vendor Posting Group","Vendor No.","No.");
          lVendAgreement.SETRANGE("Vendor Posting Group",Code);
          IF lVendAgreement.FINDFIRST THEN
            ERROR(Text50001,Code,lVendAgreement.TABLECAPTION,
          lVendAgreement.FIELDCAPTION("Vendor No."),
          lVendAgreement."Vendor No.",
          lVendAgreement.FIELDCAPTION("No."),
          lVendAgreement."No.");

        //NC NCS-964.1 > DP
        UNTIL lCompany.NEXT=0;
        //NC NCS-964.1 < DP

        lGLAccount.RESET;
        lGLAccount.SETRANGE("Source Posting Group",Code);
        IF lGLAccount.FINDFIRST THEN
          ERROR(Text50001,Code,lGLAccount.TABLECAPTION, lGLAccount.FIELDCAPTION("No."), lGLAccount."No.");
         //NC NCS-964 < DP
      END;
    END;

    LOCAL PROCEDURE "// Table [General Ledger Setup]"@1101495044();
    BEGIN
    END;

    [EventSubscriber(Table,98,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyGeneralLedgerSetup@1101495045(VAR Rec@1101495000 : Record 98;VAR xRec@1101495001 : Record 98;RunTrigger@1101495002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE "// Table [Detailed Customer Ledger Entry]"@1101495017();
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterDeleteDtldCustLedgerEntryEvent@1101495019(VAR Rec@1101495000 : Record 379;IsFromCLE@1101495001 : Boolean);
    BEGIN
    END;

    [EventSubscriber(Codeunit,50085,OnAfterDeleteDtldCustLedgerEntryEvent)]
    LOCAL PROCEDURE OnAfterDeleteDtldCustLedgerEntry@1101495018(VAR Rec@1101495000 : Record 379;IsFromCLE@1101495001 : Boolean);
    VAR
      CLE@1101495003 : Record 21;
      GLEntry@1101495002 : Record 17;
    BEGIN
      WITH Rec DO BEGIN
        //NC OAM38 > DP
        IF "Entry Type" IN ["Entry Type"::Application, "Entry Type"::"Correction of Remaining Amount"] THEN BEGIN
           IF CLE.GET("Cust. Ledger Entry No.") THEN BEGIN
             IF NOT IsFromCLE THEN BEGIN
               CLE.Open := TRUE;
               CLE."Closed by Entry No." :=0;
               CLE."Closed at Date" := 0D;
               CLE."Closed by Amount" :=0;
               CLE."Closed by Amount (LCY)" :=0;
               CLE."Closed by Currency Code" :='';
               CLE."Closed by Currency Amount" :=0;
               IF CLE.MODIFY THEN;
             END;
           END;

           CLE.RESET;
           CLE.SETRANGE("Transaction No.","Transaction No.");
           IF NOT CLE.FINDFIRST THEN BEGIN
             GLEntry.RESET;
             GLEntry.SETRANGE("Transaction No.","Transaction No.");
             GLEntry.SETRANGE("Document No.","Document No.");
             GLEntry.DELETEALL(TRUE);
           END;

        END;
        IF "Entry Type" IN
            ["Entry Type"::"Unrealized Loss",
             "Entry Type"::"Unrealized Gain",
             "Entry Type"::"Realized Loss",
             "Entry Type"::"Realized Gain"] THEN BEGIN

           CLE.RESET;
           CLE.SETRANGE("Transaction No.","Transaction No.");
           IF NOT CLE.FINDFIRST THEN BEGIN
             GLEntry.RESET;
             GLEntry.SETRANGE("Transaction No.","Transaction No.");
             GLEntry.SETRANGE("Document No.","Document No.");
             GLEntry.DELETEALL(TRUE);
           END;
        END;
        //NC OAM38 < DP
      END;
    END;

    LOCAL PROCEDURE "// Table [Detailed Vendor Ledger Entry]"@1101495028();
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterDeleteDtldVendLedgerEntryEvent@1101495029(VAR Rec@1101495000 : Record 380;IsFromVLE@1101495001 : Boolean);
    BEGIN
    END;

    [EventSubscriber(Codeunit,50085,OnAfterDeleteDtldVendLedgerEntryEvent)]
    LOCAL PROCEDURE OnAfterDeleteDtldVendLedgerEntry@1101495034(VAR Rec@1101495000 : Record 380;IsFromVLE@1101495001 : Boolean);
    VAR
      VLE@1101495003 : Record 25;
      GLEntry@1101495002 : Record 17;
    BEGIN
      WITH Rec DO BEGIN
        //NC OAM38 > DP
        IF "Entry Type" IN ["Entry Type"::Application, "Entry Type"::"Correction of Remaining Amount"] THEN BEGIN
           IF VLE.GET("Vendor Ledger Entry No.") THEN BEGIN
             IF NOT IsFromVLE THEN BEGIN
               VLE.Open := TRUE;
               VLE."Closed by Entry No." :=0;
               VLE."Closed at Date" := 0D;
               VLE."Closed by Amount" :=0;
               VLE."Closed by Amount (LCY)" :=0;
               VLE."Closed by Currency Code" :='';
               VLE."Closed by Currency Amount" :=0;
               IF VLE.MODIFY THEN;
             END;
           END;


           VLE.RESET;
           VLE.SETRANGE("Transaction No.","Transaction No.");
           IF NOT VLE.FINDFIRST THEN BEGIN
             GLEntry.RESET;
             GLEntry.SETRANGE("Transaction No.","Transaction No.");
             GLEntry.SETRANGE("Document No.","Document No.");
             GLEntry.DELETEALL(TRUE);
           END;

        END;
        IF "Entry Type" IN
            ["Entry Type"::"Unrealized Loss",
             "Entry Type"::"Unrealized Gain",
             "Entry Type"::"Realized Loss",
             "Entry Type"::"Realized Gain"] THEN BEGIN

           VLE.RESET;
           VLE.SETRANGE("Transaction No.","Transaction No.");
           IF NOT VLE.FINDFIRST THEN BEGIN
             GLEntry.RESET;
             GLEntry.SETRANGE("Transaction No.","Transaction No.");
             GLEntry.SETRANGE("Document No.","Document No.");
             GLEntry.DELETEALL(TRUE);
           END;

        END;
        //NC OAM38 < DP
      END;
    END;

    LOCAL PROCEDURE "// Table Industry Group"@1101495048();
    BEGIN
    END;

    [EventSubscriber(Table,5057,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameIndustryGroup@1101495051(VAR Rec@1101495000 : Record 5057;VAR xRec@1101495001 : Record 5057;RunTrigger@1101495002 : Boolean);
    VAR
      RenameRef@1101495005 : Codeunit 50029;
      ErrorCode@1101495004 : Code[10];
      ErrorText@1101495003 : Text[250];
    BEGIN
      //NC NOS-26 > SPA
      IF NOT RunTrigger THEN
        EXIT;
      //NC NOS-26 < SPA

      //NC MDB03 > PCH
      //NC S547 > PCH
      //IF NOT RenameRef.TestIndustry(xRec.Code,Code,ErrorCode,ErrorText,TRUE) THEN
      IF NOT RenameRef.TestIndustry(xRec.Code,'',Rec.Code,ErrorCode,ErrorText,TRUE) THEN
      //NC S547 < PCH
        ERROR(ErrorText);
      //NC MDB03 < PCH
    END;

    LOCAL PROCEDURE "// Page [Customer Card]"@1101495009();
    BEGIN
    END;

    [EventSubscriber(Page,21,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPageCustomerCard@1101495011(VAR Rec@1101495000 : Record 18);
    VAR
      ConsSetup@1101495001 : Record 50000;
      Segment@1101495002 : Record 50190;
    BEGIN
      WITH Rec DO BEGIN
        //NC S1883 > PCH
        ConsSetup.GET;
        ConsSetup.TESTFIELD("Segment Code");
        Segment.GET(ConsSetup."Segment Code");
        FILTERGROUP(2);
        IF Segment."Is General" THEN
          SETFILTER("Segment Code",'')
        ELSE
          SETFILTER("Segment Code",'=%1|=%2','',ConsSetup."Segment Code");
        FILTERGROUP(0);
        //NC S1883 < PCH
      END;
    END;

    [EventSubscriber(Page,21,OnModifyRecordEvent)]
    LOCAL PROCEDURE OnModifyRecordCustomerCard@1101495012(VAR Rec@1101495000 : Record 18;VAR xRec@1101495001 : Record 18;VAR AllowModify@1101495002 : Boolean);
    VAR
      RecordRefVar@1101495005 : RecordRef;
      xRecordRefVar@1101495004 : RecordRef;
      ComFieldsSetup@1101495003 : Record 50055;
    BEGIN
      IF NOT AllowModify THEN
        EXIT;

      //NC MDB05 > GM
      RecordRefVar.GETTABLE(Rec);
      xRecordRefVar.GETTABLE(xRec);
      ComFieldsSetup.CheckEditableFields(RecordRefVar, xRecordRefVar);
      //NC MDB05 < GM
    END;

    LOCAL PROCEDURE "// Page [Customer List]"@1101495013();
    BEGIN
    END;

    [EventSubscriber(Page,22,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPageCustomerList@1101495014(VAR Rec@1101495000 : Record 18);
    VAR
      ConsSetup@1101495002 : Record 50000;
      Segment@1101495001 : Record 50190;
    BEGIN
      WITH Rec DO BEGIN
        //NC S1883 > PCH
        ConsSetup.GET;
        ConsSetup.TESTFIELD("Segment Code");
        Segment.GET(ConsSetup."Segment Code");
        FILTERGROUP(2);
        IF Segment."Is General" THEN
          SETFILTER("Segment Code",'')
        ELSE
          SETFILTER("Segment Code",'=%1|=%2','',ConsSetup."Segment Code");
        FILTERGROUP(0);
        //NC S1883 < PCH
      END;
    END;

    LOCAL PROCEDURE "// Page [Customer Posting Groups]"@1101495015();
    BEGIN
    END;

    [Integration]
    PROCEDURE OnOpenPageCustPostingGroupsEvent@1101495020(VAR Rec@1101495001 : Record 92;LookupMode@1101495000 : Boolean);
    BEGIN
    END;

    [EventSubscriber(Codeunit,50085,OnOpenPageCustPostingGroupsEvent)]
    LOCAL PROCEDURE OnOpenPageCustPostingGroups@1101495016(VAR Rec@1101495000 : Record 92;LookupMode@1101495001 : Boolean);
    VAR
      ConsSetup@1101495003 : Record 50000;
      Segment@1101495002 : Record 50190;
    BEGIN
      WITH Rec DO BEGIN
        //NC S1883 > PCH
        //IF CustomerPostingGroups.LOOKUPMODE THEN BEGIN
        IF LookupMode THEN BEGIN
          ConsSetup.GET;
          ConsSetup.TESTFIELD("Segment Code");
          Segment.GET(ConsSetup."Segment Code");
          FILTERGROUP(2);
          IF Segment."Is General" THEN
            SETFILTER("Segment Code",'')
          ELSE
            SETFILTER("Segment Code",'=%1|=%2','',ConsSetup."Segment Code");
          FILTERGROUP(0);
        END;
        //NC S1883 < PCH
      END;
    END;

    LOCAL PROCEDURE "// Page [Vendor Card]"@1101495036();
    BEGIN
    END;

    [EventSubscriber(Page,26,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPageVendorCard@1101495037(VAR Rec@1101495000 : Record 23);
    VAR
      ConsSetup@1101495002 : Record 50000;
      Segment@1101495001 : Record 50190;
    BEGIN
      WITH Rec DO BEGIN
        //NC S1883 > PCH
        ConsSetup.GET;
        ConsSetup.TESTFIELD("Segment Code");
        Segment.GET(ConsSetup."Segment Code");
        FILTERGROUP(2);
        IF Segment."Is General" THEN
          SETFILTER("Segment Code",'')
        ELSE
          SETFILTER("Segment Code",'=%1|=%2','',ConsSetup."Segment Code");
        FILTERGROUP(0);
        //NC S1883 < PCH
      END;
    END;

    LOCAL PROCEDURE "// Page [Vendor List]"@1101495031();
    BEGIN
    END;

    [EventSubscriber(Page,27,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPageVendorList@1101495035(VAR Rec@1101495000 : Record 23);
    VAR
      ConsSetup@1101495002 : Record 50000;
      Segment@1101495001 : Record 50190;
    BEGIN
      WITH Rec DO BEGIN
        //NC S1883 > PCH
        ConsSetup.GET;
        ConsSetup.TESTFIELD("Segment Code");
        Segment.GET(ConsSetup."Segment Code");
        FILTERGROUP(2);
        IF Segment."Is General" THEN
          SETFILTER("Segment Code",'')
        ELSE
          SETFILTER("Segment Code",'=%1|=%2','',ConsSetup."Segment Code");
        FILTERGROUP(0);
        //NC S1883 < PCH
      END;
    END;

    LOCAL PROCEDURE "// Page [Chart of Accounts]"@1101495040();
    BEGIN
    END;

    [EventSubscriber(Page,16,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPageChartOfAccounts@1101495041(VAR Rec@1101495000 : Record 15);
    BEGIN
      //TDRANCS-2184>
      Rec.fn_SetPermissionFilter;
      //TDRANCS-2184<
    END;

    LOCAL PROCEDURE "// Page [General Ledger Setup]"@1101495049();
    BEGIN
    END;

    [EventSubscriber(Page,118,OnClosePageEvent)]
    LOCAL PROCEDURE OnClosePageGEnLedgerSetup@1101495050(VAR Rec@1101495000 : Record 98);
    VAR
      MAIL@1101495002 : Codeunit 400;
      DB@1101495001 : Record 2000000048;
      g_recMovDS@1101495003 : Record 50064;
    BEGIN
      //TDRANCS-2424>
      IF g_recMovDS.GET THEN;
      IF g_recMovDS."Notification Off" THEN
        EXIT;
      //TDRANCS-2424<

      // TD BMN 21.01.2013 NCS-833 >
      WITH Rec DO BEGIN
        IF ABS("Allow Posting To" - "Allow Posting From") > 31 THEN BEGIN
          DB.SETRANGE("My Database", TRUE);
          DB.FINDFIRST;
          MAIL.CreateMessage('NAV-NOTIFICATION'
                           ,'NAV-NOTIFICATION@sberbank-cib.ru'
                           ,'nav_admin@sberbank-cib.ru;maria_burova@sberbank-cib.ru;yulia_molyanova@sberbank-cib.ru;' +
                            'yana_sergeeva@sberbank-cib.ru;liudmila_sharoyko@sberbank-cib.ru;vladimir_andreev@sberbank-cib.ru;'+
                            'GROUP_MIS@sberbank-cib.ru'
                           ,'OFFSHORES: период учета в компании '+ COMPANYNAME
                           ,'Пользователь ' + USERID + ' установил в БД '+ DB."Database Name" +
                            ' разрешенный период учета для компании '+ COMPANYNAME +
                            ': c ' + FORMAT("Allow Posting From") + ' по ' + FORMAT("Allow Posting To")
                           ,TRUE);
         //MAIL.Send();
         IF MAIL.TrySend() THEN; // NC NOS-26 SPA
        END;
      END;

      // TD BMN 21.01.2013 NCS-833 <
    END;

    BEGIN
    {
      NC NOS-26 SPA Создан CU для обработки входящих событий
         Функции-подписчики (EventSubsriber) на события указываются как локальные
         Функции-публикаторы (Publisher) событий указываются как глобальные, чтобы иметь возможность вызвать их из целевого объекта
    }
    END.
  }
}

