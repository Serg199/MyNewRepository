OBJECT Report 17430 Export Form 2-NDFL to XML
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Form 2-NDFL to XML;
               RUS=Экспорт формы 2-НДФЛ в XML];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 2091;    ;DataItem;PersonIncomeHeader  ;
               DataItemTable=Table17392;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF NOT FINDSET THEN
                                 ERROR(NoDataMsg);

                               CompanyInfo.GET;
                               HRSetup.GET;

                               IF CreateRegister THEN
                                 HRSetup.TESTFIELD("NDFL Register Template Code");

                               XMLDoc := XMLDoc.XmlDocument;
                               XMLExcelReportsMgt.CreateXMLDoc(XMLDoc,'windows-1251',RootNode,FileTxt);
                               XMLExcelReportsMgt.AddAttribute(RootNode,'xmlns:xsi','http://www.w3.org/2001/XMLSchema-instance');
                               XMLExcelReportsMgt.AddAttribute(RootNode,VersProgTxt,COPYSTR(ApplMgt.ApplicationVersion,1,40));
                               XMLExcelReportsMgt.AddAttribute(RootNode,VersFormTxt,'5.02');
                               XMLExcelReportsMgt.AddAttribute(RootNode,IDFileTxt,IDFile);

                               XMLExcelReportsMgt.AddSubNode(RootNode,CurrNode[1],SvRekvTxt);
                               IF CompanyInfo."Separated Org. Unit" THEN
                                 XMLExcelReportsMgt.AddAttribute(CurrNode[1],OKATOTxt,CurrOKATO)
                               ELSE
                                 XMLExcelReportsMgt.AddAttribute(CurrNode[1],OKATOTxt,CompanyInfo."OKATO Code");
                               XMLExcelReportsMgt.AddAttribute(CurrNode[1],ReportYearTxt,FORMAT(Year));
                               XMLExcelReportsMgt.AddAttribute(CurrNode[1],PriznakFTxt,'1');
                               XMLExcelReportsMgt.AddSubNode(CurrNode[1],CurrNode[2],SvULTxt);
                               XMLExcelReportsMgt.AddAttribute(CurrNode[2],INNULTxt,CompanyInfo."VAT Registration No.");
                               IF CompanyInfo."Separated Org. Unit" THEN
                                 XMLExcelReportsMgt.AddAttribute(CurrNode[2],KPPTxt,CurrKPP)
                               ELSE
                                 XMLExcelReportsMgt.AddAttribute(CurrNode[2],KPPTxt,CompanyInfo."KPP Code");

                               DocumentIdentificator := '00000000';
                             END;

               OnAfterGetRecord=VAR
                                  AddressPresent@1210000 : Boolean;
                                  AddressRegPresent@1210001 : Boolean;
                                BEGIN
                                  DirectoryStartDate := DMY2DATE(1,1,Year);
                                  DirectoryEndDate := CALCDATE('<+CY>',DMY2DATE(1,12,Year));

                                  Person.GET("Person No.");
                                  Employee.SETRANGE("Person No.",Person."No.");
                                  IF NOT Employee.FINDFIRST THEN
                                    CurrReport.BREAK;

                                  DocumentIdentificator := INCSTR(DocumentIdentificator);

                                  XMLExcelReportsMgt.AddSubNode(RootNode,CurrNode[1],DocumentTxt);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[1],KNDTxt,'1151078');
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[1],DateDocTxt,FORMAT(DocumentDate,0,'<Day,2>.<Month,2>.<Year4>'));
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[1],ReportYearTxt,FORMAT(Year));
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[1],NomSprTxt,DocumentIdentificator);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[1],PriznakTxt,'1');
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[1],KodNOTxt,HRSetup."Tax Inspection Code");

                                  XMLExcelReportsMgt.AddSubNode(CurrNode[1],CurrNode[2],SvNATxt);
                                  IF CompanyInfo."Separated Org. Unit" THEN
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[2],OKATOTxt,CurrOKATO)
                                  ELSE
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[2],OKATOTxt,CompanyInfo."OKATO Code");
                                  XMLExcelReportsMgt.AddSubNode(CurrNode[2],CurrNode[3],SvNAULTxt);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],OrgNameTxt,LocalReportMgt.GetCompanyName);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],INNULTxt,CompanyInfo."VAT Registration No.");
                                  IF CompanyInfo."Separated Org. Unit" THEN
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[3],KPPTxt,CurrKPP)
                                  ELSE
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[3],KPPTxt,CompanyInfo."KPP Code");

                                  XMLExcelReportsMgt.AddSubNode(CurrNode[1],CurrNode[2],ReceiverTxt);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[2],INNFLTxt,Person."VAT Registration No.");
                                  IF Person."Non-Resident" THEN
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[2],StatusTxt,'2')
                                  ELSE
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[2],StatusTxt,'1');
                                  IF Person."Birth Date" <> 0D THEN
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[2],BirthDateTxt,FORMAT(Person."Birth Date",0,'<Day,2>.<Month,2>.<Year4>'))
                                  ELSE
                                    ERROR(
                                      STRSUBSTNO(FieldShouldNotBeEmptyErr,
                                        Person.FIELDCAPTION("Birth Date"),Person.TABLECAPTION,
                                        Person.FIELDCAPTION("No."),Person."No."));
                                  IF Person.Citizenship <> '' THEN BEGIN
                                    Country.GET(Person."Citizenship Country/Region");
                                    Country.TESTFIELD("Local Country/Region Code");
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[2],CitizTxt,Country."Local Country/Region Code");
                                  END ELSE
                                    ERROR(
                                      STRSUBSTNO(FieldShouldNotBeEmptyErr,
                                        Person.FIELDCAPTION(Citizenship),Person.TABLECAPTION,
                                        Person.FIELDCAPTION("No."),Person."No."));

                                  XMLExcelReportsMgt.AddSubNode(CurrNode[2],CurrNode[3],FIOTxt);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],LastNameTxt,Person."Last Name");
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],FirstNameTxt,Person."First Name");
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],MiddleNameTxt,Person."Middle Name");
                                  XMLExcelReportsMgt.AddSubNode(CurrNode[2],CurrNode[3],UdLichFLTxt);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],KodUdLichTxt,Person."Identity Document Type");

                                  Person.GetIdentityDoc(DirectoryEndDate,PersonalDoc);
                                  IF PersonalDoc."Document Type" = '21' THEN
                                    XMLExcelReportsMgt.AddAttribute(
                                      CurrNode[3],SerNomDocTxt,
                                      COPYSTR(PersonalDoc."Document Series",1,2) + ' ' + COPYSTR(PersonalDoc."Document Series",2,2) + ' ' + PersonalDoc.
                                      "Document No.")
                                  ELSE
                                    XMLExcelReportsMgt.AddAttribute(
                                      CurrNode[3],SerNomDocTxt,PersonalDoc."Document Series" + ' ' + PersonalDoc."Document No.");

                                  AddressPresent := FALSE;

                                  AltAddr.RESET;
                                  AltAddr.SETRANGE("Person No.",Person."No.");
                                  AltAddr.SETRANGE("Address Type",AltAddr."Address Type"::Registration);
                                  IF (NOT AltAddr.FINDLAST) AND (NOT Person."Non-Resident") THEN
                                    ERROR(RegistrationAddressErr);

                                  AddressPresent := TRUE;
                                  XMLExcelReportsMgt.AddSubNode(CurrNode[2],CurrNode[3],AdrMZRFTxt);
                                  IF AltAddr."Post Code" <> '' THEN
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[3],PostCodeTxt,AltAddr."Post Code")
                                  ELSE
                                    ERROR(
                                      STRSUBSTNO(FieldShouldNotBeEmptyErr,
                                        AltAddr.FIELDCAPTION("Post Code"),AltAddr.TABLECAPTION,
                                        Person.FIELDCAPTION("No."),Person."No."));

                                  IF AltAddr."KLADR Code" <> '' THEN BEGIN
                                    IF AltAddr."Region Code" <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],RegionCodeTxt,COPYSTR(AltAddr."Region Code",1,2))
                                    ELSE
                                      ERROR(
                                        STRSUBSTNO(FieldShouldNotBeEmptyErr,
                                          AltAddr.FIELDCAPTION(Region),AltAddr.TABLECAPTION,
                                          Person.FIELDCAPTION("No."),Person."No."));
                                    IF AltAddr.Area <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],CountyTxt,AltAddr.Area + ' ' + AltAddr."Area Category");
                                    IF AltAddr.City <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],CityTxt,AltAddr.City + ' ' + AltAddr."City Category");
                                    IF AltAddr.Locality <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],LocalityTxt,AltAddr.Locality + ' ' + AltAddr."Locality Category");
                                    IF AltAddr.Street <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],StreetTxt,AltAddr.Street + ' ' + AltAddr."Street Category");
                                    IF AltAddr.House <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],HouseTxt,AltAddr.House);
                                    IF AltAddr.Building <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],BlockTxt,AltAddr.Building);
                                    IF AltAddr.Apartment <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],FlatTxt,AltAddr.Apartment);
                                    AddressRegPresent := TRUE;
                                  END ELSE
                                    ERROR(
                                      STRSUBSTNO(FieldShouldNotBeEmptyErr,
                                        AltAddr.FIELDCAPTION("KLADR Code"),AltAddr.TABLECAPTION,
                                        Person.FIELDCAPTION("No."),Person."No."));

                                  IF (Person.Citizenship <> CompanyInfo."Country/Region Code") AND (NOT AddressRegPresent) THEN BEGIN
                                    AltAddr.RESET;
                                    AltAddr.SETRANGE("Person No.",Person."No.");
                                    AltAddr.SETRANGE("Address Type",AltAddr."Address Type"::Permanent);
                                    IF (NOT AltAddr.FINDLAST) AND (NOT AddressPresent) THEN
                                      ERROR(PermanentAddressErr,Person."No.");

                                    XMLExcelReportsMgt.AddSubNode(CurrNode[2],CurrNode[3],AdrINOTxt);
                                    IF AltAddr."Country/Region Code" <> '' THEN BEGIN
                                      Country.GET(AltAddr."Country/Region Code");
                                      Country.TESTFIELD("Local Country/Region Code");
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],KodStrTxt,Country."Local Country/Region Code");
                                    END ELSE
                                      ERROR(
                                        STRSUBSTNO(FieldShouldNotBeEmptyErr,
                                          AltAddr.FIELDCAPTION("Country/Region Code"),AltAddr.TABLECAPTION,
                                          Person.FIELDCAPTION("No."),Person."No."));
                                    IF AltAddr.Address <> '' THEN
                                      XMLExcelReportsMgt.AddAttribute(
                                        CurrNode[3],AdrTextTxt,AltAddr.Address)
                                    ELSE
                                      ERROR(
                                        STRSUBSTNO(FieldShouldNotBeEmptyErr,
                                          AltAddr.FIELDCAPTION(Address),AltAddr.TABLECAPTION,
                                          Person.FIELDCAPTION("No."),Person."No."));
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF ServerFileName = '' THEN
                                  ServerFileName := FileMgt.ServerTempFileName('xml');
                                XMLDoc.Save(ServerFileName);
                                CLEAR(XMLDoc);

                                IF NOT TestMode THEN BEGIN
                                  FileMgt.DownloadToFile(ServerFileName,FileName);
                                  MESSAGE(Text006);
                                END;

                                IF CreateRegister THEN
                                  CreateNDFLRegister;
                              END;

               ReqFilterFields=No.,Year }

    { 8573;1   ;DataItem;TaxIterator         ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnAfterGetRecord=BEGIN
                                  IF Number > 4 THEN
                                    CurrReport.BREAK;

                                  CASE Number OF
                                    1:
                                      PersentTax := PersentTax::"13";
                                    2:
                                      PersentTax := PersentTax::"30";
                                    3:
                                      PersentTax := PersentTax::"9";
                                    4:
                                      PersentTax := PersentTax::"35";
                                  END;

                                  IF NOT Person."Non-Resident" AND (PersentTax = PersentTax::"30") THEN
                                    CurrReport.SKIP;

                                  BaseAmount := GetTotalTaxableIncomeForTax(PersonIncomeHeader,PersentTax);
                                  TaxAmount := GetTotalTaxDeduction(PersonIncomeHeader,PersentTax);
                                  AccruedAmount := GetTotalAccruedAmountForTax(PersonIncomeHeader,PersentTax);
                                  PaidToPersonAmount := GetTotalPaidToPersonForTax(PersonIncomeHeader,PersentTax);

                                  IF (BaseAmount = 0) AND (TaxAmount = 0) AND (AccruedAmount = 0) AND (PaidToPersonAmount = 0) THEN
                                    CurrReport.SKIP;

                                  XMLExcelReportsMgt.AddSubNode(CurrNode[1],CurrNode[2],IncomeTxt);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[2],RateTxt,FORMAT(PersentTax));

                                  ExportEmpIncRegToExcel.AddEmployee(Employee."No.",DocumentIdentificator);
                                END;
                                 }

    { 3544;2   ;DataItem;PersonIncomeEntry1  ;
               DataItemTable=Table17398;
               DataItemTableView=SORTING(Person Income No.,Person Income Line No.,Line No.)
                                 WHERE(Entry Type=CONST(Taxable Income),
                                       Tax Code=FILTER(<>''),
                                       Advance Payment=CONST(No));
               OnPreDataItem=BEGIN
                               SETRANGE("Person Income No.",PersonIncomeHeader."No.");
                               SETRANGE("Person No.",PersonIncomeHeader."Person No.");
                               CASE PersentTax OF
                                 PersentTax::"13":
                                   SETRANGE("Tax %","Tax %"::"13");
                                 PersentTax::"30":
                                   SETRANGE("Tax %","Tax %"::"30");
                                 PersentTax::"9":
                                   SETRANGE("Tax %","Tax %"::"9");
                                 PersentTax::"35":
                                   SETRANGE("Tax %","Tax %"::"35");
                               END;

                               TempPersonIncomeEntry.RESET;
                               TempPersonIncomeEntry.SETRANGE("Person Income No.",PersonIncomeHeader."No.");
                               TempPersonIncomeEntry.SETRANGE("Person No.",PersonIncomeHeader."Person No.");

                               XMLExcelReportsMgt.AddSubNode(CurrNode[2],CurrNode[3],IncDedTxt);
                             END;

               OnAfterGetRecord=BEGIN
                                  TempPersonIncomeEntry.SETRANGE("Period Code","Period Code");
                                  TempPersonIncomeEntry.SETRANGE("Tax Code","Tax Code");
                                  IF TempPersonIncomeEntry.FINDFIRST THEN BEGIN
                                    TempPersonIncomeEntry.Base += Base;
                                    TempPersonIncomeEntry.MODIFY;
                                  END ELSE BEGIN
                                    TempPersonIncomeEntry := PersonIncomeEntry1;
                                    TempPersonIncomeEntry.INSERT;
                                  END;
                                END;

               OnPostDataItem=VAR
                                TaxDeductCode@1210000 : Code[10];
                                TaxDeductAmount@1210001 : Decimal;
                              BEGIN
                                WITH TempPersonIncomeEntry DO BEGIN
                                  RESET;
                                  IF FINDSET THEN
                                    REPEAT
                                      XMLExcelReportsMgt.AddSubNode(CurrNode[3],CurrNode[4],SvSumIncTxt);
                                      XMLExcelReportsMgt.AddAttribute(CurrNode[4],MonthTxt,CreateMonthText(GetPeriodCode("Period Code")));
                                      XMLExcelReportsMgt.AddAttribute(CurrNode[4],IncomeCodeTxt,"Tax Code");
                                      XMLExcelReportsMgt.AddAttribute(CurrNode[4],IncomeAmtTxt,DecimalToText(Base));
                                      TaxDeductCode := GetLastPayrollDirDeductCode("Tax Code","Posting Date");
                                      IF TaxDeductCode <> '' THEN BEGIN
                                        TaxDeductAmount := GetTotalDeductAmount(TaxDeductCode,"Period Code");
                                        IF TaxDeductAmount <> 0 THEN BEGIN
                                          XMLExcelReportsMgt.AddSubNode(CurrNode[4],CurrNode[5],SvSumDedTxt);
                                          XMLExcelReportsMgt.AddAttribute(CurrNode[5],DeductCodeTxt,TaxDeductCode);
                                          XMLExcelReportsMgt.AddAttribute(CurrNode[5],DeductAmtTxt,DecimalToText(TaxDeductAmount));
                                        END;
                                      END;
                                    UNTIL NEXT = 0;
                                  DELETEALL;
                                END;
                              END;
                               }

    { 6476;2   ;DataItem;                    ;
               DataItemTable=Table17398;
               DataItemTableView=SORTING(Person Income No.,Person Income Line No.,Line No.)
                                 WHERE(Entry Type=CONST(Tax Deduction),
                                       Interim=CONST(No),
                                       Tax Deduction Code=FILTER(<>''));
               OnPreDataItem=BEGIN
                               NonLinkedDeductDirectoryFilter := '';

                               IF PersentTax <> PersentTax::"13" THEN
                                 CurrReport.BREAK;

                               SETRANGE("Person Income No.",PersonIncomeHeader."No.");
                               SETRANGE("Person No.",PersonIncomeHeader."Person No.");
                             END;

               OnAfterGetRecord=BEGIN
                                  PayrollDirectory.RESET;
                                  PayrollDirectory.SETRANGE(Type,PayrollDirectory.Type::Income);
                                  PayrollDirectory.SETRANGE("Tax Deduction Code","Tax Deduction Code");
                                  PayrollDirectory.SETFILTER("Starting Date",'..%1',DirectoryStartDate);

                                  IF NOT PayrollDirectory.FINDLAST THEN
                                    AddToFilter(NonLinkedDeductDirectoryFilter,"Tax Deduction Code");
                                END;

               OnPostDataItem=BEGIN
                                IF NonLinkedDeductDirectoryFilter <> '' THEN
                                  XMLExcelReportsMgt.AddSubNode(CurrNode[2],CurrNode[3],TaxDedSSITxt);
                              END;
                               }

    { 4033;2   ;DataItem;PayrollDirectoryStandart;
               DataItemTable=Table17425;
               DataItemTableView=SORTING(Type,Code,Starting Date)
                                 WHERE(Type=FILTER(Tax Deduction));
               OnPreDataItem=BEGIN
                               IF NonLinkedDeductDirectoryFilter = '' THEN
                                 CurrReport.BREAK;

                               SETFILTER("Starting Date",'..%1',DirectoryStartDate);
                               SETFILTER(Code,NonLinkedDeductDirectoryFilter);
                             END;
                              }

    { 2592;3   ;DataItem;PersonIncomeEntry2  ;
               DataItemTable=Table17398;
               DataItemTableView=SORTING(Person Income No.,Person Income Line No.,Line No.)
                                 WHERE(Entry Type=CONST(Tax Deduction),
                                       Interim=CONST(No),
                                       Tax Deduction Code=FILTER(<>''));
               OnPreDataItem=BEGIN
                               SETRANGE("Person Income No.",PersonIncomeHeader."No.");

                               TaxDeductAmount := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  TaxDeductAmount := TaxDeductAmount + "Tax Deduction Amount";
                                END;

               OnPostDataItem=BEGIN
                                IF TaxDeductAmount <> 0 THEN BEGIN
                                  PersonTaxDeduction.RESET;
                                  PersonTaxDeduction.SETRANGE("Person No.","Person No.");
                                  PersonTaxDeduction.SETRANGE(Year,PersonIncomeHeader.Year);
                                  PersonTaxDeduction.SETRANGE("Deduction Code",PayrollDirectoryStandart.Code);
                                  IF PersonTaxDeduction.FINDFIRST THEN BEGIN
                                    PersonTaxDeduction.CALCSUMS("Deduction Amount");
                                    TaxDeductAmount := TaxDeductAmount + PersonTaxDeduction."Deduction Amount";
                                  END;

                                  XMLExcelReportsMgt.AddSubNode(CurrNode[3],CurrNode[4],PrevDedSSITxt);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[4],DeductCodeTxt,PayrollDirectoryStandart.Code);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[4],DeductAmtTxt,DecimalToText(-TaxDeductAmount));
                                END;
                              END;

               DataItemLink=Tax Deduction Code=FIELD(Code) }

    { 9072;2   ;DataItem;PayrollDirectoryNonStandart;
               DataItemTable=Table17425;
               DataItemTableView=SORTING(Type,Code,Starting Date)
                                 WHERE(Type=FILTER(Tax Deduction),
                                       Tax Deduction Type=FILTER(<>Standart));
               OnPreDataItem=BEGIN
                               IF NonLinkedDeductDirectoryFilter = '' THEN
                                 CurrReport.BREAK;

                               SETFILTER("Starting Date",'..%1',DirectoryStartDate);
                             END;
                              }

    { 6913;3   ;DataItem;PropertyDeductEntries;
               DataItemTable=Table17398;
               DataItemTableView=SORTING(Person Income No.,Person Income Line No.,Line No.)
                                 WHERE(Entry Type=CONST(Tax Deduction),
                                       Interim=CONST(No),
                                       Tax Deduction Code=FILTER(<>''));
               OnPreDataItem=BEGIN
                               SETRANGE("Person Income No.",PersonIncomeHeader."No.");
                               TaxDeductAmount := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  TaxDeductAmount := TaxDeductAmount + "Tax Deduction Amount";
                                END;

               OnPostDataItem=VAR
                                ExternalDocNoMaxStrLen@1210000 : Integer;
                                ExtDocIssuedByMaxStrLen@1210001 : Integer;
                              BEGIN
                                IF TaxDeductAmount > 0 THEN BEGIN
                                  PersonTaxDeduction.RESET;
                                  PersonTaxDeduction.SETRANGE("Document No.",PersonIncomeHeader."No.");
                                  PersonTaxDeduction.SETRANGE("Person No.",PersonIncomeHeader."Person No.");
                                  PersonTaxDeduction.SETRANGE("Deduction Code",PayrollDirectoryNonStandart.Code);
                                  IF PersonTaxDeduction.FINDFIRST THEN BEGIN
                                    PersonTaxDeduction.CALCSUMS("Deduction Amount");
                                    TaxDeductAmount := TaxDeductAmount + PersonTaxDeduction."Deduction Amount";
                                  END;
                                  IF TaxDeductAmount <> 0 THEN BEGIN
                                    PayrollElement.RESET;
                                    PayrollElement.SETCURRENTKEY("Directory Code");
                                    PayrollElement.SETRANGE("Directory Code",PayrollDirectoryNonStandart.Code);
                                    IF PayrollElement.FINDSET THEN
                                      REPEAT
                                        EmplLedgEntry.RESET;
                                        EmplLedgEntry.SETCURRENTKEY("Employee No.");
                                        EmplLedgEntry.SETRANGE("Employee No.",Employee."No.");
                                        EmplLedgEntry.SETRANGE("Element Code",PayrollElement.Code);
                                        EmplLedgEntry.SETRANGE("Action Starting Date",DirectoryStartDate,DirectoryEndDate);
                                        EmplLedgEntry.SETFILTER("External Document No.",'<>%1','');
                                        EmplLedgEntry.SETFILTER("External Document Date",'<>%1',0D);
                                        EmplLedgEntry.SETFILTER("External Document Issued By",'<>%1','');

                                        IF EmplLedgEntry.FINDLAST THEN BEGIN
                                          ExternalDocNoMaxStrLen := 20;
                                          IF STRLEN(EmplLedgEntry."External Document No.") > ExternalDocNoMaxStrLen THEN
                                            ERROR(
                                              STRSUBSTNO(
                                                StringExceedsMaxLenErr,EmplLedgEntry.FIELDCAPTION("External Document No."),
                                                EmplLedgEntry."Entry No.",ExternalDocNoMaxStrLen,Person."No."));

                                          ExtDocIssuedByMaxStrLen := 4;
                                          IF STRLEN(EmplLedgEntry."External Document Issued By") > ExtDocIssuedByMaxStrLen THEN
                                            ERROR(
                                              STRSUBSTNO(
                                                StringExceedsMaxLenErr,EmplLedgEntry.FIELDCAPTION("External Document Issued By"),
                                                EmplLedgEntry."Entry No.",ExtDocIssuedByMaxStrLen,Person."No."));

                                          XMLExcelReportsMgt.AddSubNode(CurrNode[3],CurrNode[4],NotifPropDedTxt);
                                          XMLExcelReportsMgt.AddAttribute(CurrNode[4],NotifNumberTxt,EmplLedgEntry."External Document No.");
                                          XMLExcelReportsMgt.AddAttribute(CurrNode[4],NotifDateTxt,
                                            FORMAT(EmplLedgEntry."External Document Date",0,'<Day,2>.<Month,2>.<Year4>'));
                                          XMLExcelReportsMgt.AddAttribute(CurrNode[4],IFNSNotifTxt,EmplLedgEntry."External Document Issued By")
                                        END;
                                      UNTIL PayrollElement.NEXT = 0;
                                  END;
                                END;
                              END;

               DataItemLink=Tax Deduction Code=FIELD(Code) }

    { 8184;2   ;DataItem;EarningsFooter      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  XMLExcelReportsMgt.AddSubNode(CurrNode[2],CurrNode[3],SGDNalPerTxt);
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],IncSumTotTxt,DecimalToText(BaseAmount));
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],TaxBaseTxt,DecimalToText(BaseAmount - TaxAmount));
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],TaxCalcTxt,ROUND(AccruedAmount,1));
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],TaxNotHeldTxt,ROUND(PaidToPersonAmount,1));
                                  XMLExcelReportsMgt.AddAttribute(CurrNode[3],TaxPaidTxt,ROUND(GetTotalPaidToBudgetForTax(PersonIncomeHeader,PersentTax),1));
                                  IF PaidToPersonAmount - AccruedAmount > 0 THEN BEGIN
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[3],TaxHeldAboveTxt,ROUND(PaidToPersonAmount - AccruedAmount,1));
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[3],TaxHeldTxt,0);
                                  END ELSE BEGIN
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[3],TaxHeldAboveTxt,0);
                                    XMLExcelReportsMgt.AddAttribute(CurrNode[3],TaxHeldTxt,ROUND(AccruedAmount - PaidToPersonAmount,1));
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   CompanyInfo.GET;
                   HRSetup.GET;
                   NoGUID := CREATEGUID;
                   HRSetup.TESTFIELD("Tax Inspection Code");
                   CompanyInfo.TESTFIELD("VAT Registration No.");
                   CompanyInfo.TESTFIELD("KPP Code");
                   NoGUIDText := COPYSTR(FORMAT(NoGUID),2,STRLEN(FORMAT(NoGUID)) - 2);
                   IDFile :=
                     'NO_NDFL2' + '_' + HRSetup."Tax Inspection Code" + '_' + HRSetup."Tax Inspection Code" + '_' +
                     CompanyInfo."VAT Registration No." + CompanyInfo."KPP Code" + '_' +
                     FORMAT(TODAY,0,'<Year4><Month,2><Day,2>') + '_' + NoGUIDText;
                   FileName := IDFile + '.xml';

                   DocumentDate := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры] }

      { 1210000;2;Field     ;
                  CaptionML=[ENU=Document Date;
                             RUS=Дата документа];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocumentDate }

      { 1470107;2;Field     ;
                  CaptionML=[ENU=File Name;
                             RUS=Имя файла];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=FileName;
                  OnAssistEdit=BEGIN
                                 FileName := FileMgt.SaveFileDialog(Text002,'.xml','');
                               END;
                                }

      { 1210001;2;Field     ;
                  CaptionML=[ENU=Create Register;
                             RUS=Создать регистр];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CreateRegister }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoDataMsg@1470158 : TextConst 'ENU="No person income data available. ";RUS="Данные о личном доходе недоступны. "';
      Text002@1470058 : TextConst 'ENU=Export file as;RUS=Экспорт файла как';
      RegistrationAddressErr@1470051 : TextConst '@@@="%1 = Person No.";ENU=Registration address is missing for person %1.;RUS=Aдрес регистрации для физ. лица %1 отсутствует.';
      PermanentAddressErr@1210028 : TextConst '@@@="%1 = Person No.";ENU=Permanent address is missing for person %1.;RUS=Постоянный адрес для физ. лица %1 отсутствует.';
      Text006@1470044 : TextConst 'ENU=XML file created.;RUS=Файл XML создан.';
      CompanyInfo@1470039 : Record 79;
      HRSetup@1470038 : Record 5218;
      Person@1210001 : Record 17350;
      PayrollDirectory@1470034 : Record 17425;
      EmplLedgEntry@1210003 : Record 17413;
      AltAddr@1470026 : Record 5201;
      PersonalDoc@1210000 : Record 17352;
      PersonTaxDeduction@1210013 : Record 17395;
      Employee@1210016 : Record 5200;
      Country@1210014 : Record 9;
      PayrollElement@1210022 : Record 17400;
      TempPersonIncomeEntry@1210026 : TEMPORARY Record 17398;
      FileMgt@1470024 : Codeunit 419;
      XMLExcelReportsMgt@1210004 : Codeunit 12408;
      LocalReportMgt@1210015 : Codeunit 12401;
      ApplMgt@1210025 : Codeunit 1;
      ExportEmpIncRegToExcel@1210035 : Codeunit 17373;
      XMLDoc@1210019 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      CurrNode@1210018 : ARRAY [6] OF DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1210017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ServerFileName@1210095 : Text;
      FileName@1470017 : Text[250];
      IDFile@1470100 : Text[240];
      DirectoryStartDate@1470012 : Date;
      DirectoryEndDate@1470011 : Date;
      PersentTax@1470008 : '13,30,35,9';
      DocumentIdentificator@1470006 : Text[10];
      NoGUID@1470005 : GUID;
      NoGUIDText@1470002 : Text[40];
      NotNumberLine@1470001 : Code[10];
      NotNumber@1470000 : Integer;
      CurrOKATO@1470104 : Code[11];
      CurrKPP@1470103 : Code[10];
      TaxDeductAmount@1210012 : Decimal;
      DocumentDate@1210024 : Date;
      FieldShouldNotBeEmptyErr@1210027 : TextConst '@@@="%1 = Field Name, %2 = Table Name, %3 = Person, %4 = Person No.";ENU=Field %1 in table %2 for %3 %4 should not be empty.;RUS=Поле %1 в таблице %2 для %3 %4 не должно быть пустым.';
      NonLinkedDeductDirectoryFilter@1210020 : Text[1024];
      StringExceedsMaxLenErr@1210021 : TextConst '@@@="%1 = DOcument No., %2 = Entry No, %3 = Length, %4 = Person No.";ENU=%1 in Employee Ledger Entry No.: %2 exceeds %3 characters in realty deduction entry for person %4.;RUS=%1 в операции книги сотрудников номер %2 превышает %3 символов в операции вычета по недвижимости для физ. лица %4.';
      BaseAmount@1210032 : Decimal;
      TaxAmount@1210031 : Decimal;
      AccruedAmount@1210030 : Decimal;
      PaidToPersonAmount@1210023 : Decimal;
      CreateRegister@1210029 : Boolean;
      VersProgTxt@1210002 : TextConst '@@@={Locked};ENU=VersProg;RUS=VersProg';
      VersFormTxt@1210005 : TextConst 'ENU=VersForm;RUS=ВерсФорм';
      IDFileTxt@1210006 : TextConst 'ENU=IDFile;RUS=IDFile';
      OKATOTxt@1210007 : TextConst '@@@={Locked};ENU=OKATO;RUS=OKATO';
      SvRekvTxt@1210008 : TextConst 'ENU=SvRekv;RUS=SvRekv';
      ReportYearTxt@1210009 : TextConst 'ENU=ReportYear;RUS=ReportYear';
      FileTxt@1210010 : TextConst 'ENU=File;RUS=Файл';
      PriznakTxt@1210043 : TextConst 'ENU=Priznak;RUS=Priznak';
      PriznakFTxt@1210011 : TextConst 'ENU=PriznakF;RUS=PriznakF';
      INNULTxt@1210033 : TextConst '@@@={Locked};ENU=INNUL;RUS=INNUL';
      INNFLTxt@1210034 : TextConst '@@@={Locked};ENU=INNFL;RUS=INNFL';
      StatusTxt@1210036 : TextConst 'ENU=Status;RUS=Статус';
      KPPTxt@1210037 : TextConst '@@@={Locked};ENU=KPP;RUS=KPP';
      SvULTxt@1210038 : TextConst 'ENU=SvUL;RUS=SvUL';
      DocumentTxt@1210039 : TextConst 'ENU=Document;RUS=Документ';
      KNDTxt@1210040 : TextConst '@@@={Locked};ENU=KND;RUS=KND';
      DateDocTxt@1210041 : TextConst 'ENU=DateDoc;RUS=DateDoc';
      NomSprTxt@1210042 : TextConst 'ENU=NomSpr;RUS=NomSpr';
      KodNOTxt@1210044 : TextConst 'ENU=KodNO;RUS=KodNO';
      SvNATxt@1210045 : TextConst 'ENU=SvNA;RUS=SvNA';
      SvNAULTxt@1210046 : TextConst 'ENU=SvNAUL;RUS=SvNAUL';
      OrgNameTxt@1210047 : TextConst 'ENU=OrgName;RUS=OrgName';
      ReceiverTxt@1210048 : TextConst 'ENU=Receiver;RUS=Получатель';
      BirthDateTxt@1210049 : TextConst 'ENU=BirthDate;RUS=BirthDate';
      CitizTxt@1210050 : TextConst 'ENU=Citiz;RUS=Citiz';
      FIOTxt@1210051 : TextConst '@@@={Locked};ENU=FIO;RUS=FIO';
      FirstNameTxt@1210052 : TextConst 'ENU=FirstName;RUS=FirstName';
      MiddleNameTxt@1210053 : TextConst 'ENU=MiddleName;RUS=MiddleName';
      LastNameTxt@1210054 : TextConst 'ENU=LastName;RUS=LastName';
      UdLichFLTxt@1210055 : TextConst 'ENU=UdLichFL;RUS=UdLichFL';
      KodUdLichTxt@1210056 : TextConst 'ENU=KodUdLich;RUS=KodUdLich';
      SerNomDocTxt@1210057 : TextConst 'ENU=SerNomDoc;RUS=SerNomDoc';
      AdrMZRFTxt@1210058 : TextConst 'ENU=AdrMZRF;RUS=AdrMZRF';
      PostCodeTxt@1210059 : TextConst 'ENU=PostCode;RUS=PostCode';
      RegionCodeTxt@1210060 : TextConst 'ENU=RegionCode;RUS=RegionCode';
      CountyTxt@1210062 : TextConst 'ENU=County;RUS=Район';
      CityTxt@1210063 : TextConst 'ENU=City;RUS=Город';
      LocalityTxt@1210064 : TextConst 'ENU=Locality;RUS=Населенный пункт';
      StreetTxt@1210065 : TextConst 'ENU=Street;RUS=Улица';
      HouseTxt@1210061 : TextConst 'ENU=House;RUS=Дом';
      BlockTxt@1210066 : TextConst 'ENU=Block;RUS=Квартал';
      FlatTxt@1210067 : TextConst 'ENU=Flat;RUS=Квартира';
      AdrINOTxt@1210068 : TextConst 'ENU=AdrINO;RUS=AdrINO';
      KodStrTxt@1210069 : TextConst 'ENU=KodStr;RUS=KodStr';
      AdrTextTxt@1210070 : TextConst 'ENU=AdrText;RUS=AdrText';
      IncomeTxt@1210071 : TextConst 'ENU=Income;RUS=Доход';
      RateTxt@1210072 : TextConst 'ENU=Rate;RUS=Ставка';
      IncDedTxt@1210073 : TextConst 'ENU=IncDed;RUS=IncDed';
      SvSumIncTxt@1210074 : TextConst 'ENU=SvSumInc;RUS=SvSumInc';
      MonthTxt@1210075 : TextConst 'ENU=Month;RUS=Месяц';
      IncomeCodeTxt@1210076 : TextConst 'ENU=IncomeCode;RUS=IncomeCode';
      IncomeAmtTxt@1210077 : TextConst 'ENU=IncomeAmt;RUS=IncomeAmt';
      SvSumDedTxt@1210080 : TextConst 'ENU=SvSumDed;RUS=SvSumDed';
      DeductCodeTxt@1210079 : TextConst 'ENU=DeductCode;RUS=DeductCode';
      DeductAmtTxt@1210078 : TextConst 'ENU=DeductAmt;RUS=DeductAmt';
      TaxDedSSITxt@1210081 : TextConst 'ENU=TaxDedSSI;RUS=TaxDedSSI';
      PrevDedSSITxt@1210082 : TextConst 'ENU=PrevDedSSI;RUS=PrevDedSSI';
      NotifPropDedTxt@1210083 : TextConst 'ENU=NotifPropDed;RUS=NotifPropDed';
      NotifNumberTxt@1210084 : TextConst 'ENU=NotifNumber;RUS=NotifNumber';
      NotifDateTxt@1210085 : TextConst 'ENU=NotifDate;RUS=NotifDate';
      IFNSNotifTxt@1210086 : TextConst 'ENU=IFNSNotif;RUS=IFNSNotif';
      SGDNalPerTxt@1210087 : TextConst 'ENU=SGDNalPer;RUS=SGDNalPer';
      IncSumTotTxt@1210088 : TextConst 'ENU=IncSumTot;RUS=IncSumTot';
      TaxBaseTxt@1210089 : TextConst 'ENU=TaxBase;RUS=TaxBase';
      TaxCalcTxt@1210090 : TextConst 'ENU=TaxCalc;RUS=TaxCalc';
      TaxNotHeldTxt@1210091 : TextConst 'ENU=TaxNotHeld;RUS=TaxNotHeld';
      TaxPaidTxt@1210092 : TextConst 'ENU=TaxPaid;RUS=TaxPaid';
      TaxHeldTxt@1210093 : TextConst 'ENU=TaxHeld;RUS=TaxHeld';
      TaxHeldAboveTxt@1210094 : TextConst 'ENU=TaxHeldAbove;RUS=TaxHeldAbove';
      TestMode@1210096 : Boolean;

    LOCAL PROCEDURE CreateMonthText@1470007(MonthNo@1470000 : Integer) MonthText : Text[30];
    BEGIN
      IF MonthNo < 10 THEN
        MonthText := '0' + FORMAT(MonthNo)
      ELSE
        MonthText := FORMAT(MonthNo);
    END;

    LOCAL PROCEDURE DecimalToText@1470010(TransferNumber@1210000 : Decimal) : Text[30];
    BEGIN
      TransferNumber := ROUND(TransferNumber,0.01,'=');
      NotNumberLine := DELCHR(FORMAT(TransferNumber,0,'<Integer><Decimals,3>'),'<=>','0123456789.,');
      NotNumber := STRPOS(FORMAT(TransferNumber),NotNumberLine);
      IF (NotNumber <> 0) AND (NotNumberLine <> FORMAT(TransferNumber)) THEN
        EXIT(DELSTR(FORMAT(TransferNumber),NotNumber,STRLEN(NotNumberLine)));

      EXIT(CONVERTSTR(FORMAT(TransferNumber,0,'<Integer><Decimals,3>'),',','.'));
    END;

    LOCAL PROCEDURE GetPeriodCode@1210055(PeriodCode@1210000 : Code[10]) : Integer;
    VAR
      PayrollPeriod@1210001 : Record 17426;
    BEGIN
      PayrollPeriod.GET(PeriodCode);
      EXIT(DATE2DMY(PayrollPeriod."Starting Date",2));
    END;

    LOCAL PROCEDURE GetTotalTaxableIncomeForTax@1210005(PersonIncomeHeader@1210000 : Record 17392;TaxPersent@1210001 : '13,30,35,9') TotalBaseAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Taxable Income");
        SETFILTER("Tax Code",'<>%1','');
        SETRANGE("Advance Payment",FALSE);
        CASE TaxPersent OF
          TaxPersent::"13":
            SETRANGE("Tax %","Tax %"::"13");
          TaxPersent::"30":
            SETRANGE("Tax %","Tax %"::"30");
          TaxPersent::"9":
            SETRANGE("Tax %","Tax %"::"9");
          TaxPersent::"35":
            SETRANGE("Tax %","Tax %"::"35");
        END;
        IF FINDSET THEN
          REPEAT
            TotalBaseAmount += Base;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTotalTaxDeduction@1210017(PersonIncomeHeader@1210003 : Record 17392;TaxPersent@1210000 : '13,30,35,9') TotalTaxDeductionAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
      PayrollDirectory@1210001 : Record 17425;
      TaxDeductionsFilter@1210004 : Text[1024];
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Tax Deduction");
        SETFILTER("Tax Deduction Code",'<>%1','');
        IF FINDSET THEN
          REPEAT
            PayrollDirectory.SETRANGE("Tax Deduction Code","Tax Deduction Code");
            PayrollDirectory.SETRANGE(Type,PayrollDirectory.Type::Income);
            PayrollDirectory.SETFILTER("Starting Date",'..%1',"Posting Date");
            IF PayrollDirectory.FINDLAST THEN
              CASE TaxPersent OF
                TaxPersent::"13":
                  IF PayrollDirectory."Income Tax Percent" = PayrollDirectory."Income Tax Percent"::"13" THEN
                    AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
                TaxPersent::"9":
                  IF PayrollDirectory."Income Tax Percent" = PayrollDirectory."Income Tax Percent"::"9" THEN
                    AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
                TaxPersent::"35":
                  IF PayrollDirectory."Income Tax Percent" = PayrollDirectory."Income Tax Percent"::"35" THEN
                    AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
                TaxPersent::"30":
                  IF PayrollDirectory."Income Tax Percent" = PayrollDirectory."Income Tax Percent"::"30" THEN
                    AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
              END
            ELSE
              IF TaxPersent = TaxPersent::"13" THEN // not linked added to total in 13% case
                AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
          UNTIL NEXT = 0;

        IF TaxDeductionsFilter = '' THEN
          EXIT(0);

        RESET;
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Tax Deduction");
        SETFILTER("Tax Deduction Code",TaxDeductionsFilter);
        IF FINDSET THEN
          REPEAT
            TotalTaxDeductionAmount += "Tax Deduction Amount";
          UNTIL NEXT = 0;
      END
    END;

    LOCAL PROCEDURE GetTotalAccruedAmountForTax@1210025(PersonIncomeHeader@1210001 : Record 17392;TaxPersent@1210000 : '13,30,35,9') TotalAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Accrued Income Tax");
        SETRANGE(Interim,FALSE);

        CASE TaxPersent OF
          TaxPersent::"13":
            SETRANGE("Tax %","Tax %"::"13");
          TaxPersent::"30":
            SETRANGE("Tax %","Tax %"::"30");
          TaxPersent::"9":
            SETRANGE("Tax %","Tax %"::"9");
          TaxPersent::"35":
            SETRANGE("Tax %","Tax %"::"35");
        END;
        IF FINDSET THEN
          REPEAT
            TotalAmount += Amount;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTotalPaidToPersonForTax@1210000(PersonIncomeHeader@1210001 : Record 17392;TaxPersent@1210000 : '13,30,35,9') TotalAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Paid Taxable Income");

        CASE TaxPersent OF
          TaxPersent::"13":
            SETRANGE("Tax %","Tax %"::"13");
          TaxPersent::"30":
            SETRANGE("Tax %","Tax %"::"30");
          TaxPersent::"9":
            SETRANGE("Tax %","Tax %"::"9");
          TaxPersent::"35":
            SETRANGE("Tax %","Tax %"::"35");
        END;
        IF FINDSET THEN
          REPEAT
            TotalAmount += Base;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTotalPaidToBudgetForTax@1210001(PersonIncomeHeader@1210001 : Record 17392;TaxPersent@1210000 : '13,30,35,9') TotalAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Paid Income Tax");

        CASE TaxPersent OF
          TaxPersent::"13":
            SETRANGE("Tax %","Tax %"::"13");
          TaxPersent::"30":
            SETRANGE("Tax %","Tax %"::"30");
          TaxPersent::"9":
            SETRANGE("Tax %","Tax %"::"9");
          TaxPersent::"35":
            SETRANGE("Tax %","Tax %"::"35");
        END;
        IF FINDSET THEN
          REPEAT
            TotalAmount += Amount;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetLastPayrollDirDeductCode@1210004(PayrollCode@1210000 : Code[10];StartDate@1210002 : Date) : Code[10];
    VAR
      PayrollDirectory@1210001 : Record 17425;
    BEGIN
      PayrollDirectory.SETRANGE(Type,PayrollDirectory.Type::Income);
      PayrollDirectory.SETRANGE(Code,PayrollCode);
      PayrollDirectory.SETFILTER("Starting Date",'..%1',StartDate);

      IF PayrollDirectory.FINDLAST THEN
        EXIT(PayrollDirectory."Tax Deduction Code");
    END;

    LOCAL PROCEDURE GetTotalDeductAmount@1210002(TaxDeductCode@1210000 : Code[10];PeriodCode@1210001 : Code[10]) TotalAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Tax Deduction");
        SETRANGE("Tax Deduction Code",TaxDeductCode);
        SETRANGE("Period Code",PeriodCode);
        IF FINDSET THEN
          REPEAT
            TotalAmount += "Tax Deduction Amount";
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddToFilter@1210013(VAR Filter@1210000 : Text[1024];AdditionToFilter@1210001 : Text[30]);
    BEGIN
      IF Filter = '' THEN
        Filter := AdditionToFilter
      ELSE
        Filter += '|' + AdditionToFilter;
    END;

    LOCAL PROCEDURE CreateNDFLRegister@1210104();
    VAR
      HumanResourcesSetup@1210001 : Record 5218;
    BEGIN
      HumanResourcesSetup.GET;

      IF NOT ExportEmpIncRegToExcel.BufferIsEmpty THEN BEGIN
        ExportEmpIncRegToExcel.SetParameters(
          FileName,
          CompanyInfo.Name + CompanyInfo."Name 2",
          CompanyInfo."VAT Registration No.",
          CompanyInfo."OKATO Code",
          '',
          TODAY,
          HumanResourcesSetup."Tax Inspection Code",
          PersonIncomeHeader.Year,
          1);
        ExportEmpIncRegToExcel.ExportRegisterToExcel;
      END;
    END;

    PROCEDURE SetFileName@1210006(NewFileName@1210000 : Text);
    BEGIN
      ServerFileName := NewFileName;
      TestMode := TRUE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

