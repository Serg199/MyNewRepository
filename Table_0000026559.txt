OBJECT Table 26559 Stat. Report Requisite
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               UpdateEmptyValue;
             END;

    OnDelete=BEGIN
               CheckExistentReportData;

               RequisiteExpressionLine.RESET;
               RequisiteExpressionLine.SETRANGE("Report Code","Report Code");
               RequisiteExpressionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
               RequisiteExpressionLine.SETRANGE("Base Requisite Name",Name);
               IF RequisiteExpressionLine.FINDFIRST THEN
                 RequisiteExpressionLine.DELETEALL;

               RequisiteConditionLine.RESET;
               RequisiteConditionLine.SETRANGE("Report Code","Report Code");
               RequisiteConditionLine.SETRANGE("Base Requisites Group Name","Requisites Group Name");
               RequisiteConditionLine.SETRANGE("Base Requisite Name",Name);
               IF RequisiteConditionLine.FINDFIRST THEN
                 RequisiteConditionLine.DELETEALL;

               RequisiteOptionLine.RESET;
               RequisiteOptionLine.SETRANGE("Report Code","Report Code");
               RequisiteOptionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
               RequisiteOptionLine.SETRANGE("Requisite Name",Name);
               IF RequisiteOptionLine.FINDFIRST THEN
                 RequisiteOptionLine.DELETEALL;
             END;

    CaptionML=[ENU=Stat. Report Requisite;
               RUS=Показатель регламентного отчета];
    LookupPageID=Page26558;
    DrillDownPageID=Page26558;
  }
  FIELDS
  {
    { 1   ;   ;Report Code         ;Code20        ;TableRelation="Statutory Report";
                                                   CaptionML=[ENU=Report Code;
                                                              RUS=Код отчета] }
    { 3   ;   ;Requisites Group Name;Text30       ;TableRelation="Stat. Report Requisites Group".Name WHERE (Report Code=FIELD(Report Code));
                                                   CaptionML=[ENU=Requisites Group Name;
                                                              RUS=Имя группы показателей] }
    { 5   ;   ;Name                ;Text30        ;CaptionML=[ENU=Name;
                                                              RUS=Название];
                                                   NotBlank=Yes }
    { 6   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 7   ;   ;Data Type           ;Option        ;OnValidate=BEGIN
                                                                UpdateEmptyValue;
                                                              END;

                                                   CaptionML=[ENU=Data Type;
                                                              RUS=Тип данных];
                                                   OptionCaptionML=[ENU=Text,Code,Integer,Decimal,Date;
                                                                    RUS=Текст,Код,Целое,Десятичное,Дата];
                                                   OptionString=Text,Code,Integer,Decimal,Date }
    { 10  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              RUS=Тип источника];
                                                   OptionCaptionML=[ENU=Expression,Constant,Table Data,Individual Requisite,Inserted Requisite,Compound Requisite;
                                                                    RUS=Выражение,Константа,Данные таблицы,Индивидуальный показатель,Вписываемый показатель,Составной показатель];
                                                   OptionString=Expression,Constant,Table Data,Individual Requisite,Inserted Requisite,Compound Requisite }
    { 12  ;   ;Sequence No.        ;Integer       ;CaptionML=[ENU=Sequence No.;
                                                              RUS=Порядковый номер] }
    { 15  ;   ;Excel Only          ;Boolean       ;OnValidate=BEGIN
                                                                IF "Excel Only" THEN
                                                                  IF "Export Type" = "Export Type"::Set THEN
                                                                    FIELDERROR("Export Type");
                                                              END;

                                                   CaptionML=[ENU=Excel Only;
                                                              RUS=Только Excel] }
    { 20  ;   ;Value               ;Text250       ;OnValidate=BEGIN
                                                                IF Value <> '' THEN
                                                                  TESTFIELD("Source Type","Source Type"::Constant);
                                                              END;

                                                   CaptionML=[ENU=Value;
                                                              RUS=Значение] }
    { 23  ;   ;Empty Value         ;Text10        ;CaptionML=[ENU=Empty Value;
                                                              RUS=Пустое значение] }
    { 24  ;   ;Table Code          ;Code20        ;TableRelation="Statutory Report Table".Code WHERE (Report Code=FIELD(Report Code));
                                                   OnValidate=BEGIN
                                                                IF "Table Code" <> xRec."Table Code" THEN BEGIN
                                                                  "Row Link No." := 0;
                                                                  "Column Link No." := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Table Code;
                                                              RUS=Код таблицы] }
    { 25  ;   ;Row Link No.        ;Integer       ;OnValidate=BEGIN
                                                                IF NOT ("Source Type" IN ["Source Type"::"Table Data","Source Type"::"Individual Requisite","Source Type"::"Inserted Requisite"])
                                                                THEN
                                                                  FIELDERROR("Source Type");
                                                              END;

                                                   CaptionML=[ENU=Row Link No.;
                                                              RUS=Номер связанной строки] }
    { 26  ;   ;Column Link No.     ;Integer       ;OnValidate=BEGIN
                                                                IF "Column Link No." <> 0 THEN BEGIN
                                                                  TESTFIELD("Table Code");
                                                                  TESTFIELD("Source Type","Source Type"::"Table Data");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Column Link No.;
                                                              RUS=Номер связанного столбца] }
    { 30  ;   ;Excel Mapping Type  ;Option        ;OnValidate=BEGIN
                                                                IF "Excel Mapping Type" <> xRec."Excel Mapping Type" THEN
                                                                  IF xRec."Excel Mapping Type" = xRec."Excel Mapping Type"::Option THEN BEGIN
                                                                    RequisiteOptionLine.RESET;
                                                                    RequisiteOptionLine.SETRANGE("Report Code","Report Code");
                                                                    RequisiteOptionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
                                                                    RequisiteOptionLine.SETRANGE("Requisite Name",Name);
                                                                    IF RequisiteOptionLine.FINDFIRST THEN
                                                                      IF CONFIRM(Text010) THEN
                                                                        RequisiteOptionLine.DELETEALL(TRUE)
                                                                      ELSE
                                                                        ERROR('');
                                                                  END;

                                                                IF "Excel Mapping Type" <> "Excel Mapping Type"::"Several Cells" THEN BEGIN
                                                                  "Excel Second Cell Name" := '';
                                                                  "Cells Quantity" := 0;
                                                                END;

                                                                IF "Excel Mapping Type" = "Excel Mapping Type"::Option THEN BEGIN
                                                                  "Excel Cell Name" := '';

                                                                  IF NOT ("Source Type" IN ["Source Type"::"Table Data","Source Type"::"Individual Requisite"]) THEN
                                                                    FIELDERROR("Source Type");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excel Mapping Type;
                                                              RUS=Тип соответствия Excel];
                                                   OptionCaptionML=[ENU=Cell,Several Cells,Option;
                                                                    RUS=Ячейка,Несколько ячеек,Параметр];
                                                   OptionString=Cell,Several Cells,Option }
    { 31  ;   ;Excel Cell Name     ;Code10        ;OnValidate=BEGIN
                                                                IF "Excel Mapping Type" = "Excel Mapping Type"::Option THEN
                                                                  FIELDERROR("Excel Mapping Type");

                                                                IF "Excel Mapping Type" = "Excel Mapping Type"::"Several Cells" THEN
                                                                  IF "Excel Cell Name" = "Excel Second Cell Name" THEN
                                                                    ERROR(Text002,FIELDCAPTION("Excel Cell Name"),FIELDCAPTION("Excel Second Cell Name"),
                                                                      GetRecordDescription);

                                                                CheckCellsName;
                                                              END;

                                                   CaptionML=[ENU=Excel Cell Name;
                                                              RUS=Имя ячейки Excel] }
    { 32  ;   ;Excel Second Cell Name;Code10      ;OnValidate=BEGIN
                                                                IF "Excel Mapping Type" = "Excel Mapping Type"::Option THEN
                                                                  FIELDERROR("Excel Mapping Type");

                                                                IF "Excel Second Cell Name" <> '' THEN
                                                                  TESTFIELD("Excel Mapping Type","Excel Mapping Type"::"Several Cells");

                                                                IF "Excel Cell Name" = "Excel Second Cell Name" THEN
                                                                  ERROR(Text002,FIELDCAPTION("Excel Cell Name"),FIELDCAPTION("Excel Second Cell Name"),
                                                                    GetRecordDescription);

                                                                CheckCellsName;
                                                              END;

                                                   CaptionML=[ENU=Excel Second Cell Name;
                                                              RUS=Имя второй ячейки Excel] }
    { 33  ;   ;Cells Quantity      ;Integer       ;OnValidate=BEGIN
                                                                IF "Excel Mapping Type" = "Excel Mapping Type"::Option THEN
                                                                  FIELDERROR("Excel Mapping Type");

                                                                IF "Cells Quantity" <> 0 THEN
                                                                  TESTFIELD("Excel Mapping Type","Excel Mapping Type"::"Several Cells");
                                                              END;

                                                   CaptionML=[ENU=Cells Quantity;
                                                              RUS=Количество ячеек] }
    { 34  ;   ;Export Type         ;Option        ;OnValidate=BEGIN
                                                                IF "Export Type" = "Export Type"::Set THEN
                                                                  TESTFIELD("Excel Only",FALSE);

                                                                IF "Export Type" <> xRec."Export Type" THEN BEGIN
                                                                  IF xRec."Export Type" = xRec."Export Type"::"Conditionally Required" THEN BEGIN
                                                                    RequisiteConditionLine.RESET;
                                                                    RequisiteConditionLine.SETRANGE("Report Code","Report Code");
                                                                    RequisiteConditionLine.SETRANGE("Base Requisites Group Name","Requisites Group Name");
                                                                    RequisiteConditionLine.SETRANGE("Base Requisite Name",Name);
                                                                    IF RequisiteConditionLine.FINDFIRST THEN
                                                                      IF CONFIRM(Text011) THEN
                                                                        RequisiteConditionLine.DELETEALL(TRUE)
                                                                      ELSE
                                                                        ERROR('');
                                                                  END;

                                                                  UpdateEmptyValue;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Export Type;
                                                              RUS=Тип экспорта];
                                                   OptionCaptionML=[ENU=Required,Non-required,Conditionally Required,Set;
                                                                    RUS=Обязательный,Необязательный,Условно-обязательный,Предписанный];
                                                   OptionString=Required,Non-required,Conditionally Required,Set }
    { 35  ;   ;Scalable Table Row Template;Boolean;CaptionML=[ENU=Scalable Table Row Template;
                                                              RUS=Шаблон строки расширяемой таблицы] }
    { 41  ;   ;OKEI Scaling        ;Boolean       ;CaptionML=[ENU=OKEI Scaling;
                                                              RUS=Масштабирование ОКЕИ] }
  }
  KEYS
  {
    {    ;Report Code,Requisites Group Name,Name  ;Clustered=Yes }
    {    ;Report Code,Requisites Group Name,Table Code,Sequence No. }
    {    ;Report Code,Table Code,Row Link No.,Column Link No. }
    {    ;Sequence No.                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RequisiteOptionLine@1210009 : Record 26558;
      RequisiteExpressionLine@1210000 : Record 26560;
      RequisiteConditionLine@1210010 : Record 26561;
      StatutoryReportDataValue@1210001 : Record 26564;
      StatutoryReportTable@1210002 : Record 26552;
      Text001@1210003 : TextConst 'ENU=You must specify %1 in %2.;RUS=Необходимо указать %1 в %2.';
      Text002@1210004 : TextConst 'ENU=%1 can not be equal to %2 in %3.;RUS=%1 не может быть равно %2 в %3.';
      Text003@1210005 : TextConst 'ENU=%1 and %2 must be in the same row or column.;RUS=%1 и %2 должны находиться в одной строке или в одном столбце';
      Text004@1210006 : TextConst 'ENU=Please specify a decimal.;RUS=Укажите десятичное число.';
      Text005@1210007 : TextConst 'ENU=''%1'' is not a valid date.;RUS=''%1'' не является допустимой датой.';
      Text006@1210008 : TextConst 'ENU=''%1'' can not be formated to %2 for %3.;RUS=''%1'' нельзя отформатировать как %2 для %3.';
      Text007@1210011 : TextConst 'ENU=Report %1 contains data referred to the %2.;RUS=Отчет %1 содержит данные, ссылающиеся на %2.';
      Text010@1210014 : TextConst 'ENU=All related option lines will be deleted. Proceed?;RUS=Все связанные строки параметров будут удалены. Продолжить?';
      Text011@1210015 : TextConst 'ENU=All related condition lines will be deleted. Proceed?;RUS=Все связанные строки условий будут удалены. Продолжить?';
      ExcelMgt@1210017 : Codeunit 12416;

    PROCEDURE UpdateRequisiteValue@1210000(ChangedRequisiteExpressionLine@1210001 : Record 26560;DeleteRecord@1210002 : Boolean);
    BEGIN
      TESTFIELD("Source Type","Source Type"::Expression);
      Value := '';
      RequisiteExpressionLine.SETRANGE("Report Code","Report Code");
      RequisiteExpressionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
      RequisiteExpressionLine.SETRANGE("Base Requisite Name",Name);
      IF RequisiteExpressionLine.FINDSET THEN
        REPEAT
          IF RequisiteExpressionLine."Line No." <> ChangedRequisiteExpressionLine."Line No." THEN
            Value := Value + RequisiteExpressionLine."String Before" +
              RequisiteExpressionLine.Value + RequisiteExpressionLine."String After"
          ELSE
            IF NOT DeleteRecord THEN
              Value := Value + ChangedRequisiteExpressionLine."String Before" +
                ChangedRequisiteExpressionLine.Value + ChangedRequisiteExpressionLine."String After";
        UNTIL RequisiteExpressionLine.NEXT = 0;
    END;

    PROCEDURE FormatValue@1210008(FormatType@1210000 : 'File,Excel';ValueToFormat@1210005 : Text[250];VAR FormattedValue@1210003 : Text[250];VAR ErrorMessage@1210004 : Text[250]) : Boolean;
    VAR
      CodeValue@1210006 : Code[250];
      IntegerValue@1210007 : Integer;
      DecimalValue@1210001 : Decimal;
      DateValue@1210002 : Date;
    BEGIN
      IF ValueToFormat = "Empty Value" THEN BEGIN
        FormattedValue := ValueToFormat;
        EXIT(TRUE);
      END;

      CASE "Data Type" OF
        "Data Type"::Text:
          FormattedValue := UPPERCASE(ValueToFormat);
        "Data Type"::Code:
          BEGIN
            CodeValue := ValueToFormat;
            FormattedValue := CodeValue;
          END;
        "Data Type"::Integer:
          BEGIN
            ValueToFormat := DELCHR(ValueToFormat,'<>',' ');
            IF ValueToFormat = '' THEN BEGIN
              FormattedValue := '';
              EXIT(TRUE);
            END;
            IF NOT EVALUATE(IntegerValue,ValueToFormat) THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text006,ValueToFormat,"Data Type",GetRecordDescription);
              EXIT(FALSE);
            END;

            FormattedValue := FORMAT(IntegerValue);
          END;
        "Data Type"::Decimal:
          BEGIN
            ValueToFormat := DELCHR(ValueToFormat,'<>',' ');
            IF IsValueEmpty(ValueToFormat) THEN BEGIN
              FormattedValue := '';
              EXIT(TRUE);
            END;
            IF NOT EVALUATE(DecimalValue,ValueToFormat) THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text006,ValueToFormat,"Data Type",GetRecordDescription);
              EXIT(FALSE);
            END;
            DecimalValue := ROUND(DecimalValue,0.0000000000001);

            CASE FormatType OF
              FormatType::File:
                FormattedValue := FORMAT(DecimalValue,0,9);
              FormatType::Excel:
                FormattedValue := FORMAT(DecimalValue,0,1);
            END;
          END;
        "Data Type"::Date:
          BEGIN
            ValueToFormat := DELCHR(ValueToFormat,'<>',' ');
            IF NOT EVALUATE(DateValue,ValueToFormat) THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text006,ValueToFormat,"Data Type",GetRecordDescription);
              EXIT(FALSE);
            END;
            FormattedValue := FORMAT(DateValue,0,'<Day,2>.<Month,2>.<Year4>');
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetValue@1210001(DataHeaderNo@1210000 : Code[20];TableName@1210001 : Code[20];ExcelSheetName@1210003 : Text[30];ExportLogEntryNo@1210005 : Code[20];VAR RequisiteValue@1210004 : Text[250]) Recalculate : Boolean;
    VAR
      StatReportRequisite@1210007 : Record 26559;
      ErrorMessage@1210002 : Text[250];
    BEGIN
      RequisiteValue := '';
      CASE "Source Type" OF
        "Source Type"::Expression:
          BEGIN
            Value := '';
            RequisiteExpressionLine.SETRANGE("Report Code","Report Code");
            RequisiteExpressionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
            RequisiteExpressionLine.SETRANGE("Base Requisite Name",Name);
            IF RequisiteExpressionLine.FINDSET THEN
              REPEAT
                Value := Value + RequisiteExpressionLine."String Before" +
                  RequisiteExpressionLine.GetReferenceValue(DataHeaderNo,ExportLogEntryNo) + RequisiteExpressionLine."String After";
                IF RequisiteExpressionLine."Table ID" = DATABASE::"Statutory Report Data Header" THEN
                  IF RequisiteExpressionLine."Field ID" IN [32,33] THEN
                    Recalculate := TRUE;
              UNTIL RequisiteExpressionLine.NEXT = 0;
          END;
        "Source Type"::"Table Data",
        "Source Type"::"Individual Requisite",
        "Source Type"::"Inserted Requisite":
          IF StatutoryReportDataValue.GET(DataHeaderNo,"Report Code",
               TableName,ExcelSheetName,"Row Link No.","Column Link No.")
          THEN
            Value := StatutoryReportDataValue.Value;
        "Source Type"::"Compound Requisite":
          BEGIN
            Value := '';
            RequisiteExpressionLine.SETRANGE("Report Code","Report Code");
            RequisiteExpressionLine.SETRANGE("Requisites Group Name","Requisites Group Name");
            RequisiteExpressionLine.SETRANGE("Base Requisite Name",Name);
            IF RequisiteExpressionLine.FINDSET THEN
              REPEAT
                IF StatReportRequisite.GET("Report Code","Requisites Group Name",RequisiteExpressionLine."Requisite Name") THEN BEGIN
                  StatReportRequisite.GetValue(DataHeaderNo,TableName,ExcelSheetName,ExportLogEntryNo,RequisiteValue);
                  Value := Value + RequisiteExpressionLine."String Before" + RequisiteValue + RequisiteExpressionLine."String After";
                END;
              UNTIL RequisiteExpressionLine.NEXT = 0;
          END;
      END;

      IF Value <> '' THEN
        IF NOT FormatValue(1,Value,RequisiteValue,ErrorMessage) THEN
          ERROR(ErrorMessage);
    END;

    PROCEDURE ExportToExcel@1210002(VAR XlWrkSht@1210005 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;RequisiteValue@1210004 : Text[250];VAR ErrorMessage@1210009 : Text[250];ExcelCellName@1210000 : Code[10]) : Boolean;
    VAR
      RequisiteOption@1210001 : Record 26558;
      CurrCellName@1210007 : Code[10];
      FirstColumnName@1210013 : Code[10];
      SecondColumnName@1210014 : Code[10];
      FirstCellRowNo@1210011 : Integer;
      SecondCellRowNo@1210012 : Integer;
      i@1210003 : Integer;
    BEGIN
      CASE "Excel Mapping Type" OF
        "Excel Mapping Type"::Cell:
          BEGIN
            IF ExcelCellName = '' THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Excel Cell Name"),GetRecordDescription);
              EXIT(FALSE);
            END;
            XlWrkSht.Range(ExcelCellName).Value := RequisiteValue;
          END;
        "Excel Mapping Type"::Option:
          BEGIN
            RequisiteOption.SETRANGE("Report Code","Report Code");
            RequisiteOption.SETRANGE("Requisites Group Name","Requisites Group Name");
            RequisiteOption.SETRANGE("Requisite Name",Name);
            RequisiteOption.SETRANGE("Requisite Option Value",RequisiteValue);
            IF RequisiteOption.FINDFIRST THEN BEGIN
              IF RequisiteOption."Excel Cell Name" = '' THEN BEGIN
                ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Excel Cell Name"),RequisiteOption.GetRecordDescription);
                EXIT(FALSE);
              END;
              XlWrkSht.Range(RequisiteOption."Excel Cell Name").Value := RequisiteOption."Excel Cell Value";
            END;
          END;
        "Excel Mapping Type"::"Several Cells":
          BEGIN
            IF "Excel Second Cell Name" = '' THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Excel Second Cell Name"),GetRecordDescription);
              EXIT(FALSE);
            END;
            IF "Cells Quantity" = 0 THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Cells Quantity"),GetRecordDescription);
              EXIT(FALSE);
            END;

            IF "Cells Quantity" > STRLEN(RequisiteValue) THEN
              RequisiteValue := PADSTR('',"Cells Quantity" - STRLEN(RequisiteValue),' ') + RequisiteValue;

            FirstCellRowNo := ExcelMgt.CellName2RowNo("Excel Cell Name");
            SecondCellRowNo := ExcelMgt.CellName2RowNo("Excel Second Cell Name");
            FirstColumnName := ExcelMgt.CellName2ColumnName("Excel Cell Name");
            SecondColumnName := ExcelMgt.CellName2ColumnName("Excel Second Cell Name");

            CurrCellName := "Excel Cell Name";
            IF FirstCellRowNo = SecondCellRowNo THEN BEGIN
              FOR i := 1 TO "Cells Quantity" DO BEGIN
                IF RequisiteValue[i] <> ' ' THEN
                  XlWrkSht.Range(CurrCellName).Value := FORMAT(RequisiteValue[i]);

                CurrCellName := GetNextCellHoriz(XlWrkSht,CurrCellName);
              END;
            END ELSE
              IF FirstColumnName = FirstColumnName THEN
                FOR i := 1 TO "Cells Quantity" DO BEGIN
                  IF RequisiteValue[i] <> ' ' THEN
                    XlWrkSht.Range(CurrCellName).Value := FORMAT(RequisiteValue[i]);
                  CurrCellName := GetNextCellVert(XlWrkSht,CurrCellName);
                END;
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ImportFromExcel@1210006(VAR XlWrkSht@1210006 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;VAR RequisiteValue@1210004 : Text[250];VAR ErrorMessage@1210009 : Text[250];ExcelCellName@1210000 : Code[10]) : Boolean;
    VAR
      RequisiteOption@1210016 : Record 26558;
      StatutoryReportTable@1210017 : Record 26552;
      CurrCellName@1210007 : Code[10];
      FirstColumnName@1210013 : Code[10];
      SecondColumnName@1210014 : Code[10];
      FirstCellRowNo@1210011 : Integer;
      SecondCellRowNo@1210012 : Integer;
      i@1210003 : Integer;
      OptionValue@1210015 : Text[30];
      OptionFound@1210005 : Boolean;
      VerticalTable@1210018 : Boolean;
      DecimalValue@1210001 : Decimal;
    BEGIN
      CASE "Excel Mapping Type" OF
        "Excel Mapping Type"::Cell:
          BEGIN
            IF ExcelCellName = '' THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Excel Cell Name"),GetRecordDescription);
              EXIT(FALSE);
            END;
            RequisiteValue := FORMAT(XlWrkSht.Range(ExcelCellName).Value);
          END;
        "Excel Mapping Type"::Option:
          BEGIN
            RequisiteOption.SETRANGE("Report Code","Report Code");
            RequisiteOption.SETRANGE("Requisites Group Name","Requisites Group Name");
            RequisiteOption.SETRANGE("Requisite Name",Name);
            IF RequisiteOption.FINDSET THEN BEGIN
              REPEAT
                IF RequisiteOption."Excel Cell Name" = '' THEN BEGIN
                  ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Excel Cell Name"),RequisiteOption.GetRecordDescription);
                  EXIT(FALSE);
                END;
                OptionValue := FORMAT(XlWrkSht.Range(RequisiteOption."Excel Cell Name").Value);
                OptionFound := OptionValue = RequisiteOption."Excel Cell Value";
                IF OptionFound THEN
                  RequisiteValue := RequisiteOption."Requisite Option Value";
              UNTIL (RequisiteOption.NEXT = 0) OR OptionFound;
              IF NOT OptionFound THEN
                RequisiteValue := '';
            END;
          END;
        "Excel Mapping Type"::"Several Cells":
          BEGIN
            IF "Excel Cell Name" = '' THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Excel Cell Name"),GetRecordDescription);
              EXIT(FALSE);
            END;
            IF "Excel Second Cell Name" = '' THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Excel Second Cell Name"),GetRecordDescription);
              EXIT(FALSE);
            END;
            IF "Cells Quantity" = 0 THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text001,FIELDCAPTION("Cells Quantity"),GetRecordDescription);
              EXIT(FALSE);
            END;

            IF "Table Code" <> '' THEN BEGIN
              StatutoryReportTable.GET("Report Code","Table Code");
              VerticalTable := StatutoryReportTable."Vertical Table";
            END;

            IF VerticalTable THEN BEGIN
              FirstCellRowNo := ExcelMgt.CellName2RowNo(ExcelCellName);
              SecondCellRowNo := ExcelMgt.CellName2RowNo(ExcelCellName);
              FirstColumnName := ExcelMgt.CellName2ColumnName("Excel Cell Name");
              SecondColumnName := ExcelMgt.CellName2ColumnName("Excel Second Cell Name");
            END ELSE BEGIN
              FirstCellRowNo := ExcelMgt.CellName2RowNo("Excel Cell Name");
              SecondCellRowNo := ExcelMgt.CellName2RowNo("Excel Second Cell Name");
              FirstColumnName := ExcelMgt.CellName2ColumnName("Excel Cell Name");
              SecondColumnName := ExcelMgt.CellName2ColumnName("Excel Second Cell Name");
            END;

            IF FirstCellRowNo = SecondCellRowNo THEN BEGIN
              IF VerticalTable THEN
                CurrCellName := ExcelCellName
              ELSE
                CurrCellName := "Excel Cell Name";

              FOR i := 1 TO "Cells Quantity" DO BEGIN
                RequisiteValue := RequisiteValue + FORMAT(XlWrkSht.Range(CurrCellName).Value);
                CurrCellName := GetNextCellHoriz(XlWrkSht,CurrCellName);
              END;
            END ELSE
              IF FirstColumnName = FirstColumnName THEN
                FOR i := 1 TO "Cells Quantity" DO BEGIN
                  RequisiteValue := RequisiteValue + FORMAT(XlWrkSht.Range(CurrCellName).Value);
                  CurrCellName := GetNextCellVert(XlWrkSht,CurrCellName);
                END;

            RequisiteValue := DELCHR(RequisiteValue,'<>',' ');
          END;
      END;

      // special processing of Set Requisites
      IF "Export Type" = "Export Type"::Set THEN BEGIN
        IF "Data Type" = "Data Type"::Decimal THEN
          IF EVALUATE(DecimalValue,RequisiteValue) THEN
            IF DecimalValue = 0 THEN
              RequisiteValue := '';
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetRecordDescription@1210003() : Text[250];
    BEGIN
      EXIT(STRSUBSTNO('%1 %2=''%3'', %4=''%5'', %6=''%7''',TABLECAPTION,
          FIELDCAPTION("Report Code"),"Report Code",
          FIELDCAPTION("Requisites Group Name"),"Requisites Group Name",
          FIELDCAPTION(Name),Name));
    END;

    PROCEDURE CheckCellsName@1210004();
    BEGIN
      IF "Excel Mapping Type" = "Excel Mapping Type"::"Several Cells" THEN
        IF ("Excel Cell Name" <> '') AND ("Excel Second Cell Name" <> '') THEN
          IF (ExcelMgt.CellName2RowNo("Excel Cell Name") <> ExcelMgt.CellName2RowNo("Excel Second Cell Name")) AND
             (ExcelMgt.CellName2ColumnName("Excel Cell Name") <> ExcelMgt.CellName2ColumnName("Excel Second Cell Name"))
          THEN
            ERROR(Text003,FIELDCAPTION("Excel Cell Name"),FIELDCAPTION("Excel Second Cell Name"));
    END;

    PROCEDURE CopyRequisite@1210005(ReportFromCode@1210001 : Code[20];GroupFromName@1210000 : Text[30];RequisiteFromName@1210002 : Text[30]);
    VAR
      RequisiteExpressionLine@1210003 : Record 26560;
      RequisiteExpressionLineFrom@1210004 : Record 26560;
      RequisiteOptionLine@1210006 : Record 26558;
      RequisiteOptionLineFrom@1210005 : Record 26558;
      RequisiteConditionLine@1210008 : Record 26561;
      RequisiteConditionLineFrom@1210007 : Record 26561;
    BEGIN
      RequisiteExpressionLineFrom.SETRANGE("Report Code",ReportFromCode);
      RequisiteExpressionLineFrom.SETRANGE("Requisites Group Name",GroupFromName);
      RequisiteExpressionLineFrom.SETRANGE("Base Requisite Name",RequisiteFromName);
      IF RequisiteExpressionLineFrom.FINDSET THEN
        REPEAT
          RequisiteExpressionLine := RequisiteExpressionLineFrom;
          RequisiteExpressionLine."Report Code" := "Report Code";
          RequisiteExpressionLine.INSERT;
        UNTIL RequisiteExpressionLineFrom.NEXT = 0;

      RequisiteOptionLineFrom.SETRANGE("Report Code",ReportFromCode);
      RequisiteOptionLineFrom.SETRANGE("Requisites Group Name",GroupFromName);
      RequisiteOptionLineFrom.SETRANGE("Requisite Name",RequisiteFromName);
      IF RequisiteOptionLineFrom.FINDSET THEN
        REPEAT
          RequisiteOptionLine := RequisiteOptionLineFrom;
          RequisiteOptionLine."Report Code" := "Report Code";
          RequisiteOptionLine.INSERT;
        UNTIL RequisiteOptionLineFrom.NEXT = 0;

      RequisiteConditionLineFrom.SETRANGE("Report Code",ReportFromCode);
      RequisiteConditionLineFrom.SETRANGE("Base Requisites Group Name",GroupFromName);
      RequisiteConditionLineFrom.SETRANGE("Base Requisite Name",RequisiteFromName);
      IF RequisiteConditionLineFrom.FINDSET THEN
        REPEAT
          RequisiteConditionLine := RequisiteConditionLineFrom;
          RequisiteConditionLine."Report Code" := "Report Code";
          RequisiteConditionLine.INSERT;
        UNTIL RequisiteConditionLineFrom.NEXT = 0;
    END;

    PROCEDURE LookupRow@1210007();
    VAR
      StatReportTableRow@1210000 : Record 26553;
      TableIndividualRequisite@1210001 : Record 26556;
      ReportTableRows@1210002 : Page 26553;
      TableIndividualRequisites@1210003 : Page 26555;
    BEGIN
      IF NOT ("Source Type" IN ["Source Type"::"Table Data","Source Type"::"Individual Requisite","Source Type"::"Inserted Requisite"])
      THEN
        FIELDERROR("Source Type");

      TESTFIELD("Table Code");

      CASE "Source Type" OF
        "Source Type"::"Table Data",
        "Source Type"::"Inserted Requisite":
          BEGIN
            ReportTableRows.EDITABLE := FALSE;
            ReportTableRows.LOOKUPMODE := TRUE;
            StatReportTableRow.SETRANGE("Report Code","Report Code");
            StatReportTableRow.SETRANGE("Table Code","Table Code");
            ReportTableRows.SETTABLEVIEW(StatReportTableRow);
            IF "Row Link No." <> 0 THEN BEGIN
              StatReportTableRow.GET("Report Code","Table Code","Row Link No.");
              ReportTableRows.SETRECORD(StatReportTableRow);
            END;
            IF ReportTableRows.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ReportTableRows.GETRECORD(StatReportTableRow);
              "Row Link No." := StatReportTableRow."Line No.";
            END;
          END;
        "Source Type"::"Individual Requisite":
          BEGIN
            TableIndividualRequisites.EDITABLE := FALSE;
            TableIndividualRequisites.LOOKUPMODE := TRUE;
            TableIndividualRequisite.SETRANGE("Report Code","Report Code");
            TableIndividualRequisite.SETRANGE("Table Code","Table Code");
            TableIndividualRequisites.SETTABLEVIEW(TableIndividualRequisite);
            IF "Row Link No." <> 0 THEN
              IF NOT TableIndividualRequisite.GET("Report Code","Table Code","Row Link No.") THEN BEGIN
                "Row Link No." := 0;
                MODIFY;
                COMMIT;
              END ELSE
                TableIndividualRequisites.SETRECORD(TableIndividualRequisite);
            IF TableIndividualRequisites.RUNMODAL = ACTION::LookupOK THEN BEGIN
              TableIndividualRequisites.GETRECORD(TableIndividualRequisite);
              "Row Link No." := TableIndividualRequisite."Line No.";
            END;
          END;
      END;
    END;

    PROCEDURE LookupColumn@1210013();
    VAR
      StatReportTableColumn@1210001 : Record 26554;
      ReportTableColumns@1210000 : Page 26554;
    BEGIN
      TESTFIELD("Table Code");

      CASE "Source Type" OF
        "Source Type"::Expression,
        "Source Type"::Constant,
        "Source Type"::"Individual Requisite",
        "Source Type"::"Compound Requisite",
        "Source Type"::"Inserted Requisite":
          TESTFIELD("Source Type","Source Type"::"Table Data");
        "Source Type"::"Table Data":
          BEGIN
            StatReportTableColumn.SETRANGE("Report Code","Report Code");
            StatReportTableColumn.SETRANGE("Table Code","Table Code");
            ReportTableColumns.SETTABLEVIEW(StatReportTableColumn);
            IF "Column Link No." <> 0 THEN BEGIN
              StatReportTableColumn.GET("Report Code","Table Code","Column Link No.");
              ReportTableColumns.SETRECORD(StatReportTableColumn);
            END;
            ReportTableColumns.EDITABLE := FALSE;
            ReportTableColumns.LOOKUPMODE := TRUE;
            IF ReportTableColumns.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ReportTableColumns.GETRECORD(StatReportTableColumn);
              "Column Link No." := StatReportTableColumn."Line No.";
            END;
          END;
      END;
    END;

    PROCEDURE ValidateValueDataType@1210009(TextValue@1210000 : Text[250]);
    VAR
      DecimalValue@1210001 : Decimal;
      DateValue@1210002 : Date;
    BEGIN
      CASE "Data Type" OF
        "Data Type"::Decimal:
          IF NOT EVALUATE(DecimalValue,TextValue) THEN
            ERROR(Text004);
        "Data Type"::Date:
          IF NOT EVALUATE(DateValue,TextValue) THEN
            ERROR(Text005,TextValue);
      END;
    END;

    PROCEDURE UpdateEmptyValue@1210011();
    BEGIN
      IF "Export Type" IN ["Export Type"::Required,"Export Type"::"Conditionally Required"] THEN BEGIN
        CASE "Data Type" OF
          "Data Type"::Text:
            "Empty Value" := '-';
          "Data Type"::Integer,
          "Data Type"::Decimal:
            "Empty Value" := '0';
          "Data Type"::Date:
            "Empty Value" := '00.00.0000';
        END;
      END ELSE
        "Empty Value" := '';
    END;

    PROCEDURE CheckExistentReportData@1210012();
    VAR
      StatutoryReportDataValue@1210000 : Record 26564;
    BEGIN
      IF "Table Code" <> '' THEN BEGIN
        StatutoryReportDataValue.SETRANGE("Report Code","Report Code");
        StatutoryReportDataValue.SETRANGE("Table Code","Table Code");
        StatutoryReportDataValue.SETRANGE("Row No.","Row Link No.");
        StatutoryReportDataValue.SETRANGE("Column No.","Column Link No.");
        IF StatutoryReportDataValue.FINDFIRST THEN
          ERROR(Text007,"Report Code",GetRecordDescription);
      END;
    END;

    PROCEDURE IsValueEmpty@1210016(AnalyzedValue@1210000 : Text[250]) : Boolean;
    VAR
      Symbol@1210001 : Char;
    BEGIN
      IF AnalyzedValue = '' THEN
        EXIT(TRUE);

      IF STRLEN(AnalyzedValue) = 1 THEN BEGIN
        Symbol := AnalyzedValue[1];
        // if symbol is x, X or russian analog
        IF Symbol IN [120,88,229,149] THEN BEGIN
          // only for Requisites of scalable tables
          IF "Table Code" <> '' THEN
            IF StatutoryReportTable.GET("Report Code","Table Code") THEN
              EXIT(StatutoryReportTable."Scalable Table");
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetNextCellHoriz@1210018(VAR XlWrkSht@1210008 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;CellName@1210002 : Text[30]) : Text[30];
    VAR
      FirstColumnName@1210006 : Code[10];
      LastColumnName@1210005 : Code[10];
      FirstRowName@1210004 : Code[10];
      LastRowName@1210003 : Code[10];
      MergedCells@1210001 : Boolean;
      Address@1210000 : Text[30];
    BEGIN
      MergedCells := XlWrkSht.Range(CellName).MergeCells;
      IF MergedCells THEN BEGIN
        Address := XlWrkSht.Range(CellName).MergeArea.Address;
        ExcelMgt.ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
        EXIT(ExcelMgt.GetNextColumn(LastColumnName,1) + FirstRowName);
      END;

      EXIT(ExcelMgt.GetNextColumn(ExcelMgt.CellName2ColumnName(CellName),1) + FORMAT(ExcelMgt.CellName2RowNo(CellName)));
    END;

    PROCEDURE GetNextCellVert@1210014(VAR XlWrkSht@1210008 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;CellName@1210002 : Text[30]) : Text[30];
    VAR
      FirstColumnName@1210006 : Code[10];
      LastColumnName@1210005 : Code[10];
      FirstRowName@1210004 : Code[10];
      LastRowName@1210003 : Code[10];
      MergedCells@1210001 : Boolean;
      Address@1210000 : Text[30];
    BEGIN
      MergedCells := XlWrkSht.Range(CellName).MergeCells;
      IF MergedCells THEN BEGIN
        Address := XlWrkSht.Range(CellName).MergeArea.Address;
        ExcelMgt.ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
        EXIT(FirstColumnName + INCSTR(LastRowName));
      END;

      EXIT(ExcelMgt.CellName2ColumnName(CellName) + FORMAT(ExcelMgt.CellName2RowNo(CellName) + 1));
    END;

    BEGIN
    END.
  }
}

