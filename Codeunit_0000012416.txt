OBJECT Codeunit 12416 Excel Management
{
  OBJECT-PROPERTIES
  {
    Date=27.06.17;
    Time=11:38:29;
    Modified=Yes;
    Version List=NAVRU10.00,NOS-26;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XlApp@1210015 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1210014 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorkbookClass" RUNONCLIENT;
      XlHelper@1210013 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      XlWrkSht@1210012 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      XlWrkshts@1210011 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheets" RUNONCLIENT;
      XlRange@1210002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      EmptyFileNameErr@1210006 : TextConst 'ENU=You must specify the File Name.;RUS=Необходимо указать имя файла.';
      ExcelNotFoundErr@1210008 : TextConst 'ENU=Excel not found.;RUS=Excel не установлен.';
      WorksheetNotFoundErr@1210009 : TextConst 'ENU=The Excel worksheet %1 does not exist.;RUS=Лист Excel %1 не существует.';
      XlPlatformTypeTok@1210000 : TextConst '@@@={Locked};ENU="Microsoft.Office.Interop.Excel.XlPlatform, Microsoft.Office.Interop.Excel, Version=12.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c";RUS="Microsoft.Office.Interop.Excel.XlPlatform, Microsoft.Office.Interop.Excel, Version=12.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c"';
      XlReferenceStyleTok@1210005 : TextConst 'ENU="Microsoft.Office.Interop.Excel.XlReferenceStyle, Microsoft.Office.Interop.Excel, Version=12.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c";RUS="Microsoft.Office.Interop.Excel.XlReferenceStyle, Microsoft.Office.Interop.Excel, Version=12.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c"';
      XlWindowsTok@1210007 : TextConst '@@@={Locked};ENU=xlWindows;RUS=xlWindows';
      XlSelection@1210001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      XlDeleteShiftDirection@1210003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlDeleteShiftDirection" RUNONCLIENT;
      XlA1Tok@1210004 : TextConst '@@@={Locked};ENU=xlA1;RUS=xlA1';
      XlDeleteShiftDirection1@1210010 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlReferenceStyle" RUNONCLIENT;
      TypeMissing@1210016 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Helper" RUNONCLIENT;

    PROCEDURE OpenBook@1210000(FileName@1210000 : Text);
    BEGIN
      IF FileName = '' THEN
        ERROR(EmptyFileNameErr);

      XlApp := XlApp.ApplicationClass;
      IF ISNULL(XlApp) THEN
        ERROR(ExcelNotFoundErr);

      XlHelper.CallOpen(XlApp,FileName);
      XlWrkBk := XlApp.ActiveWorkbook;
    END;

    PROCEDURE CloseBook@1210032(SaveChanges@1210000 : Boolean);
    BEGIN
      IF SaveChanges THEN
        XlWrkBk.Save;
      QuitXlApp;
    END;

    PROCEDURE CreateBook@1();
    BEGIN
      XlApp := XlApp.ApplicationClass;
      IF ISNULL(XlApp) THEN
        ERROR(ExcelNotFoundErr);
      XlApp.Visible(FALSE);
      XlWrkBk := XlApp.Workbooks.Add(TypeMissing.GetMissingValue);
      XlWrkSht := XlWrkBk.Worksheets.Item(1);
    END;

    PROCEDURE OpenSheet@1210003(SheetName@1210000 : Text[30]);
    VAR
      i@1210001 : Integer;
      EndOfLoop@1210003 : Integer;
      Found@1210002 : Boolean;
    BEGIN
      i := 1;
      EndOfLoop := XlWrkBk.Worksheets.Count;
      WHILE (i <= EndOfLoop) AND (NOT Found) DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(i);
        IF SheetName = XlWrkSht.Name THEN
          Found := TRUE;
        i := i + 1;
      END;
      IF Found THEN
        XlWrkSht := XlWrkBk.Worksheets.Item(SheetName)
      ELSE
        ErrorExcelProcessing(STRSUBSTNO(WorksheetNotFoundErr,SheetName));
    END;

    PROCEDURE OpenSheetByNumber@1210009(SheetNo@1210000 : Integer);
    VAR
      SheetsQty@1210001 : Integer;
    BEGIN
      SheetsQty := XlWrkBk.Worksheets.Count;
      IF SheetsQty < SheetNo THEN
        ErrorExcelProcessing(STRSUBSTNO(WorksheetNotFoundErr,SheetNo));
      XlWrkSht := XlWrkBk.Worksheets.Item(SheetNo);
    END;

    PROCEDURE FillCell@1210002(CellName@1210000 : Text;CellValueAsText@1210001 : Text);
    BEGIN
      XlWrkSht.Range(CellName).Value := CellValueAsText;
    END;

    PROCEDURE FillCellWithFormat@1000000000(CellName@1210000 : Text[30];CellValueAsText@1210001 : Text[1024];CellFormat@1000000000 : Text[30]);
    BEGIN
      XlWrkSht.Range(CellName).NumberFormat := CellFormat;
      XlWrkSht.Range(CellName).Value := CellValueAsText;
    END;

    PROCEDURE FillCellsGroup@1210004(Name@1210000 : Text[30];Value@1210001 : Text[30];Len@1210004 : Integer;Align@1210002 : 'Right,Left';EmptyValue@1210007 : Text[1]);
    VAR
      K@1210003 : Integer;
      Diff@1210005 : Integer;
    BEGIN
      Diff := Len - STRLEN(Value);
      IF Diff < 0 THEN
        Diff := 0;
      IF Diff = 0 THEN
        FOR K := 1 TO Len DO
          XlWrkSht.Range(Name + FORMAT(K)).Value := COPYSTR(Value,K,1)
      ELSE
        FOR K := 1 TO Len DO
          CASE Align OF
            Align::Right:
              IF K <= Diff THEN
                XlWrkSht.Range(Name + FORMAT(K)).Value := EmptyValue
              ELSE
                XlWrkSht.Range(Name + FORMAT(K)).Value := COPYSTR(Value,K - Diff,1);
            Align::Left:
              IF K > Len - Diff THEN
                XlWrkSht.Range(Name + FORMAT(K)).Value := EmptyValue
              ELSE
                XlWrkSht.Range(Name + FORMAT(K)).Value := COPYSTR(Value,K,1);
          END;
    END;

    PROCEDURE FillCellsGroup2@1210041(ExceCellName@1210000 : Text[30];HorizCellsQty@1210001 : Integer;VertCellsQty@1210004 : Integer;Value@1210002 : Text[250];EmptyCellValue@1210007 : Text[1];Align@1210011 : 'Right,Left');
    VAR
      CurrCellName@1210009 : Text[30];
      NextRowFirstCellName@1210008 : Text[30];
      GroupType@1210010 : 'Row,Column,Area';
      CellsQty@1210006 : Integer;
      index@1210012 : Integer;
      i@1210005 : Integer;
      j@1210003 : Integer;
    BEGIN
      IF (HorizCellsQty = 1) AND (VertCellsQty = 1) THEN
        FillCell(ExceCellName,Value);

      CASE TRUE OF
        (HorizCellsQty > 1) AND (VertCellsQty = 1):
          GroupType := GroupType::Row;
        (HorizCellsQty = 1) AND (VertCellsQty > 1):
          GroupType := GroupType::Column;
        (HorizCellsQty > 1) AND (VertCellsQty > 1):
          GroupType := GroupType::Area;
      END;

      CellsQty := HorizCellsQty * VertCellsQty;
      CurrCellName := ExceCellName;

      IF CellsQty > STRLEN(Value) THEN
        CASE Align OF
          Align::Right:
            Value := PADSTR('',CellsQty - STRLEN(Value),EmptyCellValue) + Value;
          Align::Left:
            Value := Value + PADSTR('',CellsQty - STRLEN(Value),EmptyCellValue);
        END;

      CASE GroupType OF
        GroupType::Row:
          FOR i := 1 TO CellsQty DO BEGIN
            IF NOT IsEmptySymbol(FORMAT(Value[i])) THEN
              XlWrkSht.Range(CurrCellName).Value := FORMAT(Value[i]);
            CurrCellName := GetNextCellHoriz(XlWrkSht,CurrCellName);
          END;
        GroupType::Column:
          FOR i := 1 TO CellsQty DO BEGIN
            IF NOT IsEmptySymbol(FORMAT(Value[i])) THEN
              XlWrkSht.Range(CurrCellName).Value := FORMAT(Value[i]);
            CurrCellName := GetNextCellVert(XlWrkSht,CurrCellName);
          END;
        GroupType::Area:
          FOR j := 1 TO VertCellsQty DO BEGIN
            IF j > 1 THEN BEGIN
              NextRowFirstCellName :=
                CellName2ColumnName(ExceCellName) +
                FORMAT(CellName2RowNo(CurrCellName));

              REPEAT
                NextRowFirstCellName := GetNextCellVert(XlWrkSht,NextRowFirstCellName);
              UNTIL CheckBorders(XlWrkSht,NextRowFirstCellName);

              CurrCellName := NextRowFirstCellName;
            END;

            FOR i := 1 TO HorizCellsQty DO BEGIN
              index := i + (j - 1) * HorizCellsQty;
              IF NOT IsEmptySymbol(FORMAT(Value[index])) THEN
                XlWrkSht.Range(CurrCellName).Value := FORMAT(Value[index]);
              CurrCellName := GetNextCellHoriz(XlWrkSht,CurrCellName);
            END;
          END;
      END;
    END;

    PROCEDURE FormatCell_Bold@1210029(CellName@1210000 : Text[30];Bold@1210001 : Boolean);
    BEGIN
      XlWrkSht.Range(CellName).Font.Bold := Bold;
    END;

    PROCEDURE FormatCell_Indent@1210030(CellName@1210000 : Text[30];Indent@1210003 : Integer);
    BEGIN
      XlWrkSht.Range(CellName).IndentLevel := Indent;
    END;

    PROCEDURE FormatCell_WrapText@1210036(CellName@1210000 : Text[30];WrapText@1210001 : Boolean);
    BEGIN
      XlWrkSht.Range(CellName).WrapText := WrapText;
    END;

    PROCEDURE FormatCellOutsideBorders@1210040(CellName@1210001 : Text[30];XlBorderWeight@1210000 : 'Hairline,Thin,Medium,Thick');
    VAR
      XlBorderIndex@1210002 : 'Left,Right,Top,Bottom';
    BEGIN
      FormatCellBorder(CellName,XlBorderIndex::Left,XlBorderWeight);
      FormatCellBorder(CellName,XlBorderIndex::Right,XlBorderWeight);
      FormatCellBorder(CellName,XlBorderIndex::Top,XlBorderWeight);
      FormatCellBorder(CellName,XlBorderIndex::Bottom,XlBorderWeight);
    END;

    PROCEDURE FormatCellBorder@1210033(CellName@1210000 : Text[30];XlBorderIndex@1210001 : 'Left,Right,Top,Bottom';XlBorderWeight@1210002 : 'Hairline,Thin,Medium,Thick');
    BEGIN
      XlWrkSht.Range(CellName).Borders.Item(GetBorderIndex(XlBorderIndex)).Weight := GetBorderWeight(XlBorderWeight);
    END;

    PROCEDURE ErrorExcelProcessing@1210001(ErrorMessage@1210000 : Text[250]);
    BEGIN
      QuitXlApp;
      ERROR(ErrorMessage);
    END;

    PROCEDURE GiveUserControl@3();
    BEGIN
      XlApp.Visible(TRUE);
      XlApp.UserControl(TRUE);
      CLEAR(XlApp);
    END;

    PROCEDURE CopySheet@1210005(Source@1210000 : Text[30];Before@1210001 : Text[30];NewName@1210005 : Text[30]);
    VAR
      LocXlWorksheets@1210002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      BeforeXlWorksheets@1210006 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
    BEGIN
      LocXlWorksheets := XlWrkBk.Worksheets.Item(Source);
      XlApp.CutCopyMode := 0;
      BeforeXlWorksheets := XlWrkBk.Worksheets.Item(Before);
      LocXlWorksheets.Copy(BeforeXlWorksheets,TypeMissing.GetMissingValue);
      LocXlWorksheets := XlWrkBk.Worksheets.Item(Source + ' (2)');
      LocXlWorksheets.Name := NewName;
      CLEAR(LocXlWorksheets);
    END;

    PROCEDURE CopySheetTo@1210138(Source@1210002 : Text[30];DestStart@1210001 : Text[30];DestEnd@1210005 : Text[30]);
    BEGIN
      XlSelection := XlWrkSht.Range(Source);
      XlApp.CutCopyMode := 0;
      XlRange := XlWrkSht.Range(STRSUBSTNO('%1:%2',DestStart,DestEnd));
      XlSelection.Copy(XlRange);
      XlApp.CutCopyMode(0);
    END;

    PROCEDURE CopyRow@1210006(RowNo@1210000 : Integer);
    BEGIN
      XlSelection := XlWrkSht.Range(STRSUBSTNO('%1:%1',RowNo));
      XlSelection.Copy(TypeMissing.GetMissingValue);
      XlRange := XlWrkSht.Range(STRSUBSTNO('%1:%1',RowNo + 1));
      XlRange.Insert(TypeMissing.GetMissingValue,TypeMissing.GetMissingValue);
      XlApp.CutCopyMode(0);
    END;

    PROCEDURE CopyRowsTo@1210024(FirstRowNo@1210000 : Integer;LastRowNo@1210002 : Integer;DestRowNo@1210001 : Integer);
    BEGIN
      XlSelection := XlWrkSht.Range(STRSUBSTNO('%1:%2',FirstRowNo,LastRowNo));
      XlRange := XlWrkSht.Range(STRSUBSTNO('%1:%1',DestRowNo));
      XlSelection.Copy(XlRange);
      XlApp.CutCopyMode(0);
    END;

    PROCEDURE DeleteSheet@1210007(SheetName@1210000 : Text[30]);
    BEGIN
      XlApp.DisplayAlerts(FALSE);
      OpenSheet(SheetName);
      XlWrkSht.Delete;
    END;

    PROCEDURE DeleteRows@1210027(FirstRowNo@1210000 : Integer;LastRowNo@1210001 : Integer);
    BEGIN
      XlSelection := XlWrkSht.Range(STRSUBSTNO('%1:%2',FirstRowNo,LastRowNo));
      XlSelection.Delete(XlDeleteShiftDirection.xlShiftUp);
    END;

    PROCEDURE GetSheetsCount@1210008() : Integer;
    BEGIN
      EXIT(XlWrkBk.Worksheets.Count);
    END;

    PROCEDURE GetSheetName@1210010() : Text[30];
    BEGIN
      EXIT(XlWrkSht.Name);
    END;

    PROCEDURE SetSheetName@1210013(NewSheetName@1210000 : Text[30]);
    BEGIN
      XlWrkSht.Name := NewSheetName;
    END;

    PROCEDURE ColumnNo2Name@1210012(ColumnNo@1210000 : Integer) : Text[10];
    VAR
      ExcelBuffer@1210005 : Record 370;
    BEGIN
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      EXIT(ExcelBuffer.xlColID);
    END;

    PROCEDURE CellName2RowNo@1210019(Str@1210000 : Code[10]) Number : Integer;
    VAR
      i@1210001 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(Str) DO BEGIN
        IF Str[i] IN ['1','2','3','4','5','6','7','8','9','0'] THEN
          IF EVALUATE(Number,COPYSTR(Str,i)) THEN
            EXIT;
      END;
    END;

    PROCEDURE CellName2ColumnName@1210026(Str@1210000 : Code[10]) : Code[10];
    VAR
      i@1210001 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(Str) DO BEGIN
        IF Str[i] IN ['1','2','3','4','5','6','7','8','9','0'] THEN
          EXIT(COPYSTR(Str,1,i - 1));
      END;
    END;

    PROCEDURE GetNextColumn@1210018(ColName@1210000 : Code[10];Step@1210001 : Integer) : Code[10];
    BEGIN
      EXIT(ColumnNo2Name(ColNameToInt(ColName) + Step));
    END;

    PROCEDURE ColNameToInt@1210014(ColName@1210000 : Code[10]) ColumnNumber : Integer;
    VAR
      i@1210001 : Integer;
    BEGIN
      FOR i := STRLEN(ColName) DOWNTO 1 DO
        ColumnNumber := ColumnNumber + (ColName[i] - 64) * POWER(26,STRLEN(ColName) - i);
    END;

    PROCEDURE ParseSelectionAddress@1210015(Address@1210000 : Text[30];VAR FirstColumnName@1210004 : Code[10];VAR LastColumnName@1210003 : Code[10];VAR FirstRowName@1210002 : Code[10];VAR LastRowName@1210001 : Code[10]);
    VAR
      i@1210006 : Integer;
    BEGIN
      i := STRPOS(Address,':');

      IF i <> 0 THEN BEGIN
        ParseCellAddress(COPYSTR(Address,1,i - 1),FirstColumnName,FirstRowName);
        ParseCellAddress(COPYSTR(Address,i + 1),LastColumnName,LastRowName);
      END ELSE BEGIN
        ParseCellAddress(Address,FirstColumnName,FirstRowName);
        LastColumnName := FirstColumnName;
        LastRowName := FirstRowName;
      END;
    END;

    PROCEDURE ParseCellAddress@1210020(Address@1210000 : Text[30];VAR ColumnName@1210004 : Code[10];VAR RowName@1210003 : Code[10]);
    VAR
      i@1210006 : Integer;
    BEGIN
      i := STRPOS(Address,'$');
      Address := COPYSTR(Address,i + 1);
      i := STRPOS(Address,'$');
      ColumnName := COPYSTR(Address,1,i - 1);
      RowName := COPYSTR(Address,i + 1);
    END;

    PROCEDURE GetNextCellHoriz@1210021(VAR XlWrkSht@1210008 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;CellName@1210002 : Text[30]) : Text[30];
    VAR
      FirstColumnName@1210006 : Code[10];
      LastColumnName@1210005 : Code[10];
      FirstRowName@1210004 : Code[10];
      LastRowName@1210003 : Code[10];
      MergedCells@1210001 : Boolean;
      Address@1210000 : Text[30];
    BEGIN
      MergedCells := XlWrkSht.Range(CellName).MergeCells;
      IF MergedCells THEN BEGIN
        Address := XlWrkSht.Range(CellName).MergeArea.Address;
        ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
        EXIT(GetNextColumn(LastColumnName,1) + FirstRowName);
      END;
      EXIT(GetNextColumn(CellName2ColumnName(CellName),1) + FORMAT(CellName2RowNo(CellName)));
    END;

    PROCEDURE GetNextCellHoriz2@1210038(CellName@1210002 : Text[30]) : Text[30];
    BEGIN
      EXIT(GetNextCellHoriz(XlWrkSht,CellName));
    END;

    PROCEDURE GetNextCellVert@1210016(VAR XlWrkSht@1210008 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;CellName@1210002 : Text[30]) : Text[30];
    VAR
      FirstColumnName@1210006 : Code[10];
      LastColumnName@1210005 : Code[10];
      FirstRowName@1210004 : Code[10];
      LastRowName@1210003 : Code[10];
      MergedCells@1210001 : Boolean;
      Address@1210000 : Text[30];
    BEGIN
      MergedCells := XlWrkSht.Range(CellName).MergeCells;
      IF MergedCells THEN BEGIN
        Address := XlWrkSht.Range(CellName).MergeArea.Address;
        ParseSelectionAddress(Address,FirstColumnName,LastColumnName,FirstRowName,LastRowName);
        EXIT(FirstColumnName + INCSTR(LastRowName));
      END;
      EXIT(CellName2ColumnName(CellName) + FORMAT(CellName2RowNo(CellName) + 1));
    END;

    PROCEDURE SetColumnSize@1210122(CellName@1210001 : Text[30];Size@1210000 : Integer);
    BEGIN
      XlRange := XlWrkSht.Range(CellName);
      XlRange.ColumnWidth := Size;
    END;

    PROCEDURE BoldRow@1210228(RowNo@1210000 : Integer);
    BEGIN
      XlSelection := XlWrkSht.Range(STRSUBSTNO('%1:%1',RowNo));
      XlSelection.Select;
      XlSelection.Font.Bold := TRUE;
    END;

    PROCEDURE MergeCells@1210022(StartingCell@1210001 : Text[30];EndingCell@1210000 : Text[30]);
    BEGIN
      XlWrkSht.Range(StartingCell,EndingCell).Merge(TRUE);
    END;

    PROCEDURE ClearRow@1210028(RowNo@1210000 : Integer);
    BEGIN
      XlWrkSht.Range(STRSUBSTNO('%1:%1',RowNo)).ClearContents;
    END;

    LOCAL PROCEDURE GetBorderIndex@1210035(XlBorderIndex@1210000 : 'Left,Right,Top,Bottom') : Integer;
    BEGIN
      CASE XlBorderIndex OF
        XlBorderIndex::Left:
          EXIT(7);
        XlBorderIndex::Right:
          EXIT(10);
        XlBorderIndex::Top:
          EXIT(8);
        XlBorderIndex::Bottom:
          EXIT(9);
      END;
    END;

    LOCAL PROCEDURE GetBorderWeight@1210037(XlBorderWeight@1210001 : 'Hairline,Thin,Medium,Thick') : Integer;
    BEGIN
      CASE XlBorderWeight OF
        XlBorderWeight::Hairline:
          EXIT(1);
        XlBorderWeight::Thin:
          EXIT(2);
        XlBorderWeight::Medium:
          EXIT(-4138);
        XlBorderWeight::Thick:
          EXIT(4);
      END;
    END;

    PROCEDURE SetCellNumberFormat@1210034(CellName@1210001 : Text[30];NumberFormat@1210000 : Text[30]);
    BEGIN
      XlWrkSht.Range(CellName).NumberFormat := NumberFormat;
    END;

    PROCEDURE IsEmptySymbol@1210048(ElementCharecter@1210000 : Text[1]) : Boolean;
    BEGIN
      IF ElementCharecter IN ['',' '] THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckBorders@1210055(VAR XlWrkSht@1210007 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;CellName@1210000 : Text[30]) : Boolean;
    VAR
      XlRange@1210005 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      LineStyleRight@1210004 : Integer;
      LineStyleLeft@1210003 : Integer;
      LineStyleTop@1210002 : Integer;
      LineStyleBottom@1210001 : Integer;
    BEGIN
      XlRange := XlWrkSht.Range(CellName);

      LineStyleLeft := XlRange.Borders.Item(7).LineStyle;
      LineStyleTop := XlRange.Borders.Item(8).LineStyle;
      LineStyleBottom := XlRange.Borders.Item(9).LineStyle;
      LineStyleRight := XlRange.Borders.Item(10).LineStyle;

      EXIT(
        (LineStyleRight <> -4142) AND
        (LineStyleLeft <> -4142) AND
        (LineStyleTop <> -4142) AND
        (LineStyleBottom <> -4142));
    END;

    LOCAL PROCEDURE EnumToInt@20(TypeName@1210001 : Text;EnumValue@1210000 : Text) : Integer;
    VAR
      Type@1210004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      Enum@1210003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Enum";
      Convert@1210002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      EXIT(
        Convert.ToInt32(
          Enum.Parse(
            Type.GetType(TypeName,TRUE,TRUE),
            EnumValue)));
    END;

    PROCEDURE GetXReferenceStyleXlA1Id@1210044() : Integer;
    BEGIN
      EXIT(EnumToInt(XlReferenceStyleTok,XlA1Tok));
    END;

    PROCEDURE BLOBImportSilent@1210043(VAR TempBlob@1210000 : Record 99008535;ClientFileName@1210001 : Text);
    VAR
      FileMgt@1210007 : Codeunit 419;
      NVInStream@1210002 : InStream;
      NVOutStream@1210003 : OutStream;
      UploadResult@1210004 : Boolean;
      ServerFileName@1210005 : Text;
      ServerFile@1210006 : File;
    BEGIN
      ServerFileName := FileMgt.UploadFileSilent(ClientFileName);
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(NVInStream);
      TempBlob.Blob.CREATEOUTSTREAM(NVOutStream);
      COPYSTREAM(NVOutStream,NVInStream);
    END;

    PROCEDURE SaveWrkBook@1210011(FileName@1210000 : Text);
    BEGIN
      XlWrkBk.SaveCopyAs(FileName);
    END;

    PROCEDURE QuitXlApp@1210023();
    BEGIN
      CLEAR(XlRange);
      CLEAR(XlWrkSht);
      CLEAR(XlWrkshts);
      IF NOT ISNULL(XlWrkBk) THEN BEGIN
        XlWrkBk.Close(FALSE,TypeMissing.GetMissingValue,TypeMissing.GetMissingValue);
        CLEAR(XlWrkBk);
      END;
      XlHelper.CallQuit(XlApp);
      CLEAR(XlApp);
    END;

    PROCEDURE ConvertToOpenXML@1101495004(FileName@1101495000 : Text) : Text;
    VAR
      FileMgt@1101495002 : Codeunit 419;
      TempFileName@1101495001 : Text;
      XlFileFormat@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlFileFormat" RUNONCLIENT;
    BEGIN
      // NC NOS-26 > SPA
      // конвертация старого формата файла в OpenXML
      OpenBook(FileName);
      TempFileName := FileMgt.ClientTempFileName('xlsx');
      XlHelper.CallSaveAsFormat(XlWrkBk,TempFileName,XlFileFormat.xlOpenXMLWorkbook);
      CloseBook(FALSE);
      EXIT(TempFileName);
      // NC NOS-26 < SPA
    END;

    PROCEDURE GetFirstSheetName@1101495001() : Text[250];
    BEGIN
      // NCS-1924 > ORM
      OpenSheetByNumber(1);
      EXIT(XlWrkSht.Name);
      // NCS-1924 < ORM
    END;

    PROCEDURE CloseExcel@1101495000();
    BEGIN
      // NCS-1924 > ORM
      // NC NOS-26 > AAP
      //XlWrkBk.Close(FALSE);
      XlWrkBk.Close(FALSE,TypeMissing.GetMissingValue,TypeMissing.GetMissingValue);
      // NC NOS-26 < AAP
      XlApp.Quit;
      CLEAR(XlApp);
      // NCS-1924 < ORM
    END;

    BEGIN
    {
      NC NOS-26 SPA
      NCS-1924 ORM Добавлены функции GetFirstSheetName, CloseExcel
      NC NOS-26 AAP Изменена функция CloseExcel
    }
    END.
  }
}

