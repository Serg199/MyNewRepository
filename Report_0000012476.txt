OBJECT Report 12476 Item Card M-17
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Item Card M-17;
               RUS=Карточка учета материалов M-17];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  InventorySetup@1210000 : Record 313;
                BEGIN
                  InventorySetup.GET;
                  InventorySetup.TESTFIELD("Item Card M-17 Template Code");
                  ExcelReportBuilderMgr.InitTemplate(InventorySetup."Item Card M-17 Template Code");
                  ExcelReportBuilderMgr.SetSheet('Sheet1');
                END;

    OnPostReport=BEGIN
                   IF FileName <> '' THEN
                     ExcelReportBuilderMgr.ExportDataToClientFile(FileName)
                   ELSE
                     ExcelReportBuilderMgr.ExportData;
                 END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               OnPreDataItem=BEGIN
                               CompanyInfo.GET;
                               IF GETFILTER("Location Filter") <> '' THEN
                                 Location.GET(GETFILTER("Location Filter"));
                             END;

               OnAfterGetRecord=BEGIN
                                  ExcelReportBuilderMgr.AddSection('REPORTHEADER');
                                  ExcelReportBuilderMgr.AddDataToSection('ItemId',"No.");
                                  ExcelReportBuilderMgr.AddDataToSection('CompanyName',StdRepMgt.GetCompanyName);
                                  ExcelReportBuilderMgr.AddDataToSection('DepartmentName',Location.Name);
                                  ExcelReportBuilderMgr.AddDataToSection('OKPO',CompanyInfo."OKPO Code");
                                  ExcelReportBuilderMgr.AddDataToSection('DateOfCreation',FORMAT(WORKDATE));

                                  ExcelReportBuilderMgr.AddDataToSection('OrgUnitName',StdRepMgt.GetEmpDepartment(Location."Responsible Employee No."));
                                  ExcelReportBuilderMgr.AddDataToSection('InventLocation',Location.Code);
                                  ExcelReportBuilderMgr.AddDataToSection('ShelfNo',"Shelf No.");
                                  ExcelReportBuilderMgr.AddDataToSection('UnitVolume',FORMAT("Unit Volume"));
                                  ExcelReportBuilderMgr.AddDataToSection('InventoryNo',"No.");
                                  ExcelReportBuilderMgr.AddDataToSection('UnitCode',"Base Unit of Measure");
                                  ExcelReportBuilderMgr.AddDataToSection('UnitId',StdRepMgt.GetUoMDesc("Base Unit of Measure"));
                                  ExcelReportBuilderMgr.AddDataToSection('Price',FORMAT("Unit Price"));
                                  ExcelReportBuilderMgr.AddDataToSection('Vendor',"Vendor No.");
                                  ExcelReportBuilderMgr.AddDataToSection('ItemName',Item.Description + Item."Description 2");
                                END;

               ReqFilterFields=No.,Location Filter }

    { 8951;1   ;DataItem;                    ;
               DataItemTable=Table12474;
               DataItemTableView=SORTING(Item Type);
               OnAfterGetRecord=BEGIN
                                  CALCFIELDS(Name);

                                  ExcelReportBuilderMgr.AddSection('PMETALBODY');
                                  ExcelReportBuilderMgr.AddDataToSection('PMetalName',Name);
                                  ExcelReportBuilderMgr.AddDataToSection('PMetalKind',Kind);
                                  ExcelReportBuilderMgr.AddDataToSection('PMetalNo',"Nomenclature No.");
                                  ExcelReportBuilderMgr.AddDataToSection('PMetalUnitCode',"Unit of Measure Code");
                                  ExcelReportBuilderMgr.AddDataToSection('PMetalUnitID',StdRepMgt.GetUoMDesc("Unit of Measure Code"));
                                  ExcelReportBuilderMgr.AddDataToSection('PMetalQty',FORMAT(Quantity));
                                  ExcelReportBuilderMgr.AddDataToSection('PMetalDocNo',"Document No.");
                                END;

               DataItemLink=No.=FIELD(No.) }

    { 7209;1   ;DataItem;                    ;
               DataItemTable=Table32;
               DataItemTableView=SORTING(Entry No.);
               OnPreDataItem=BEGIN
                               RemainingQty := 0;

                               ExcelReportBuilderMgr.AddSection('PAGEHEADER');
                             END;

               OnAfterGetRecord=BEGIN
                                  RecipientSender := '';

                                  CASE "Source Type" OF
                                    "Source Type"::Vendor:
                                      IF Vend.GET("Source No.") THEN
                                        RecipientSender := Vend.Name + Vend."Name 2";
                                    "Source Type"::Customer:
                                      IF Cust.GET("Source No.") THEN
                                        RecipientSender := Cust.Name + Cust."Name 2";
                                    "Source Type"::Item:
                                      IF Location."Responsible Employee No." <> '' THEN
                                        RecipientSender := StdRepMgt.GetEmpName(Location."Responsible Employee No.");
                                  END;

                                  IF Quantity > 0 THEN BEGIN
                                    Income := Quantity;
                                    Outcome := 0;
                                  END ELSE BEGIN
                                    Income := 0;
                                    Outcome := -Quantity;
                                  END;

                                  IF IsRedStorno THEN BEGIN
                                    Quantity := Income;
                                    Income := -Outcome;
                                    Outcome := -Quantity;
                                  END;

                                  RemainingQty := RemainingQty + Income - Outcome;

                                  IF NOT ExcelReportBuilderMgr.TryAddSectionWithPlaceForFooter('BODY','REPORTFOOTER') THEN BEGIN
                                    ExcelReportBuilderMgr.AddPagebreak;
                                    ExcelReportBuilderMgr.AddSection('PAGEHEADER');
                                    ExcelReportBuilderMgr.AddSection('BODY');
                                  END;

                                  ExcelReportBuilderMgr.AddDataToSection('DatePhysical',FORMAT("Posting Date"));
                                  ExcelReportBuilderMgr.AddDataToSection('DocumentNum',"Document No.");
                                  ExcelReportBuilderMgr.AddDataToSection('TransCounter',FORMAT("Entry No."));
                                  ExcelReportBuilderMgr.AddDataToSection('Description',RecipientSender);
                                  ExcelReportBuilderMgr.AddDataToSection('TransUnitId',"Unit of Measure Code");
                                  ExcelReportBuilderMgr.AddDataToSection('ReceiptQty',FORMAT(Income));
                                  ExcelReportBuilderMgr.AddDataToSection('IssueQty',FORMAT(Outcome));
                                  ExcelReportBuilderMgr.AddDataToSection('Remainder',FORMAT(RemainingQty));
                                END;

               DataItemLink=Item No.=FIELD(No.),
                            Location Code=FIELD(Location Filter) }

    { 6341;1   ;DataItem;DocFooter           ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               SETRANGE(Number,1);
                             END;

               OnAfterGetRecord=BEGIN
                                  ExcelReportBuilderMgr.AddSection('REPORTFOOTER');
                                  ExcelReportBuilderMgr.AddDataToSection('DayFooter',FORMAT(WORKDATE,0,'<Day,2>'));
                                  ExcelReportBuilderMgr.AddDataToSection('MonthFooter',FORMAT(LocMgt.Month2Text(WORKDATE)));
                                  ExcelReportBuilderMgr.AddDataToSection('YearFooter',FORMAT(WORKDATE,0,'<Year>'));
                                  ExcelReportBuilderMgr.AddPagebreak;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CompanyInfo@1210000 : Record 79;
      Location@1210002 : Record 14;
      Vend@1210004 : Record 23;
      Cust@1210005 : Record 18;
      LocMgt@1210008 : Codeunit 12400;
      StdRepMgt@1210001 : Codeunit 12401;
      ExcelReportBuilderMgr@1210003 : Codeunit 14930;
      RecipientSender@1210014 : Text[250];
      FileName@1210009 : Text;
      RemainingQty@1210017 : Decimal;
      Income@1210006 : Decimal;
      Outcome@1210007 : Decimal;

    PROCEDURE SetFileNameSilent@1210007(NewFileName@1210001 : Text);
    BEGIN
      FileName := NewFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

