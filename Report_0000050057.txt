OBJECT Report 50057 Upload 1-80-CURR from Excel
{
  OBJECT-PROPERTIES
  {
    Date=07.08.17;
    Time=18:31:28;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Journal Line Import from Excel;
               RUS=Импорт 1-80-CURR from Excel];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   g_recGLSetup.GET;
                   g_intFirstRow := 2;
                   g_txtSymb := COPYSTR(FORMAT(1000.0),2,1);
                   g_intCounter := 0;
                   g_intLineNo := 0;
                   g_boolMappingForBook := TRUE;
                   g_codeMappingForBook := 'DIASOFT_ALL';
                   g_codeBookCorresp := 'RUGM RAT-MM-FX-DUMMY';
                   g_codeCostCorresp := '1010108001';  //Ticket#2014071010001557
                 END;

    OnPreReport=BEGIN
                  IF g_codeTemplate = '' THEN
                    ERROR(g_Text008);
                  IF g_codeBatch = '' THEN
                    ERROR(g_Text009);
                  IF g_boolReverse AND (g_dateReverse = 0D) THEN
                    ERROR(g_Text011);

                  g_recCompany.SETRANGE("Company Type",g_recCompany."Company Type"::Consolidation);
                  g_recCompany.FINDFIRST;
                  g_recBUfromCons.CHANGECOMPANY(g_recCompany.Name);

                  g_recGenJnLine.RESET;
                  g_recGenJnLine.SETRANGE("Journal Template Name",g_codeTemplate);
                  g_recGenJnLine.SETRANGE("Journal Batch Name",g_codeBatch);

                  IF g_recGenJnLine.FINDLAST THEN
                    g_intLineNo := g_recGenJnLine."Line No.";
                  g_intLineNo += 10000;

                  g_recGenJnlBatch.SETRANGE("Journal Template Name", g_codeTemplate);
                  g_recGenJnlBatch.SETRANGE(Name, g_codeBatch);
                  IF g_recGenJnlBatch.FINDFIRST THEN
                    g_codePostNoSer := g_recGenJnlBatch."Posting No. Series";

                  IF g_boolMappingForBook THEN
                    IF g_codeMappingForBook = '' THEN
                      ERROR(g_Text010);

                  //IF fn_OpenBook(FileMgt.UploadFileSilent(GetConvertedFileName),g_txtSheetName) THEN
                  IF fn_OpenBook(GetConvertedFileName,g_txtSheetName) THEN
                    fn_ReadSheet;
                END;

    OnPostReport=BEGIN
                   //NC NOS-26 > SPA
                   CLEAR(XlRange);
                   CLEAR(XlWrkSht);
                   CLEAR(XlWrkshts);
                   XlWrkBk.Close(FALSE,TypeMissing.GetMissingValue,TypeMissing.GetMissingValue);
                   CLEAR(XlWrkBk);
                   XlHelper.CallQuit(XlApp);
                   CLEAR(XlApp);
                   //NC NOS-26 < SPA
                   MESSAGE('Загружено %1 операций', g_intCounter);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1101495000;;Container;
                  ContainerType=ContentArea }

      { 1101495001;1;Group  ;
                  CaptionML=[ENU=Import from;
                             RUS=Импорт из];
                  GroupType=Group }

      { 1101495003;2;Field  ;
                  Lookup=Yes;
                  CaptionML=[ENU=Workbook File Name;
                             RUS=Рабочий Лист Имя Файла];
                  SourceExpr=g_txtFileName;
                  OnLookup=BEGIN
                             g_txtFileName := FileMgt.OpenFileDialog(ImportHeader,'.xlsx','');
                           END;
                            }

      { 1101495004;2;Field  ;
                  Lookup=Yes;
                  CaptionML=[ENU=Worksheet Name;
                             RUS=Рабочий Лист Название];
                  SourceExpr=g_txtSheetName;
                  OnLookup=VAR
                             ExcelBuffer@1101495000 : Record 370;
                           BEGIN
                             IF g_txtFileName = '' THEN
                               ERROR(EmptyFileNameErr);

                             g_txtSheetName := ExcelBuffer.SelectSheetsName(FileMgt.UploadFileSilent(GetConvertedFileName));
                           END;
                            }

      { 1101495002;1;Group  ;
                  CaptionML=[ENU=Import to;
                             RUS=Импорт в];
                  GroupType=Group }

      { 1101495005;2;Field  ;
                  CaptionML=[ENU=Journal Template;
                             RUS=Фин. Журнал Шаблон];
                  SourceExpr=g_codeTemplate;
                  OnValidate=BEGIN
                               g_codeBatch := '';
                             END;

                  OnLookup=BEGIN
                             g_recGenJnlTmplt.RESET;

                             g_recGenJnlTmplt.FILTERGROUP(250);
                             g_recGenJnlTmplt.SETRANGE(Recurring, FALSE);
                             g_recGenJnlTmplt.FILTERGROUP(0);

                             IF PAGE.RUNMODAL(PAGE::"General Journal Templates",g_recGenJnlTmplt) = ACTION::LookupOK THEN
                               g_codeTemplate := g_recGenJnlTmplt.Name
                             ELSE
                               g_codeTemplate := '';
                           END;
                            }

      { 1101495006;2;Field  ;
                  CaptionML=[ENU=Journal Batch;
                             RUS=Фмн. Журнал Раздел];
                  SourceExpr=g_codeBatch;
                  OnValidate=BEGIN
                               g_recGenJnlBatch.GET(g_codeTemplate, g_codeBatch);
                             END;

                  OnLookup=BEGIN
                             g_recGenJnlBatch.FILTERGROUP(250);
                             g_recGenJnlBatch.SETRANGE("Journal Template Name",g_codeTemplate);
                             g_recGenJnlBatch.FILTERGROUP(0);
                             IF PAGE.RUNMODAL(PAGE::"General Journal Batches",g_recGenJnlBatch) = ACTION::LookupOK THEN
                               g_codeBatch := g_recGenJnlBatch.Name;
                           END;
                            }

      { 1101495007;2;Field  ;
                  CaptionML=[ENU=First String for Analyse;
                             RUS=Первая Импортируемая Строка];
                  SourceExpr=g_intFirstRow }

      { 1101495008;1;Field  ;
                  CaptionML=[ENU=Use Mapping  BOOK -> COSTCENTER;
                             RUS=Использовать Мэппинг BOOK -> COSTCENTER];
                  SourceExpr=g_boolMappingForBook }

      { 1101495009;1;Field  ;
                  CaptionML=[ENU=Mapping for  BOOK -> COSTCENTER;
                             RUS=Мэппинг для BOOK -> COSTCENTER];
                  SourceExpr=g_codeMappingForBook;
                  TableRelation=Mapping;
                  Editable=g_boolMappingForBook }

      { 1101495010;1;Field  ;
                  CaptionML=[ENU=BOOK Correspondent;
                             RUS=BOOK Корреспондент];
                  SourceExpr=g_codeBookCorresp;
                  TableRelation="Dimension Value".Code WHERE (Dimension Code=FILTER(BOOK)) }

      { 1101495011;1;Field  ;
                  CaptionML=[ENU=COSTCENTER Correspondent;
                             RUS=COSTCENTER Корреспондент];
                  SourceExpr=g_codeCostCorresp;
                  TableRelation="Dimension Value".Code WHERE (Dimension Code=FILTER(COSTCENTER)) }

      { 1101495012;1;Field  ;
                  CaptionML=[ENU=Add Reverse;
                             RUS=Добавить Реверс];
                  SourceExpr=g_boolReverse }

      { 1101495013;1;Field  ;
                  CaptionML=[ENU=Date of Reverse;
                             RUS=Дата Реверса];
                  SourceExpr=g_dateReverse;
                  Editable=g_boolReverse }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      XlApp@1101495063 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1101495062 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorkbookClass" RUNONCLIENT;
      XlWrkSht@1101495061 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      XlWrkshts@1101495060 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheets" RUNONCLIENT;
      XlRange@1101495059 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      TypeMissing@1101495058 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Helper" RUNONCLIENT;
      XlHelper@1101495057 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      CultureInfo@1101495068 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo" RUNONCLIENT;
      Thread@1101495064 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Threading.Thread" RUNONCLIENT;
      gt_recExcelBuf@1101495042 : TEMPORARY Record 370;
      g_recGenJnLine@1101495041 : Record 81;
      g_recGLSetup@1101495039 : Record 98;
      g_recGenJnlTmplt@1101495038 : Record 80;
      g_recGenJnlBatch@1101495037 : Record 232;
      g_recCompany@1101495036 : Record 2000000006;
      g_recBUfromCons@1101495035 : Record 220;
      g_recGLAccount@1101495034 : Record 15;
      g_recBU@1101495033 : Record 220;
      TempDimSetEntry@1101495032 : TEMPORARY Record 480;
      DimMgt@1101495040 : Codeunit 408;
      FileMgt@1101495055 : Codeunit 419;
      g_intFirstRow@1101495031 : Integer;
      g_intLineNo@1101495030 : Integer;
      g_intCounter@1101495029 : Integer;
      g_intLineNoRev@1101495028 : Integer;
      g_decAmount@1101495027 : Decimal;
      g_txtFileName@1101495026 : Text[250];
      g_txtSheetName@1101495025 : Text[250];
      g_txtSymb@1101495024 : Text[1];
      ConvertedFileName@1101495056 : Text;
      g_codeBatch@1101495023 : Code[10];
      g_codeTemplate@1101495022 : Code[10];
      g_codePostNoSer@1101495021 : Code[20];
      g_codeDocNo@1101495020 : Code[20];
      g_codeCounterparty@1101495019 : Code[20];
      g_codeGroup@1101495018 : Code[10];
      g_codeCurrency@1101495017 : Code[10];
      g_codeDeal@1101495016 : Code[20];
      g_codeBook@1101495015 : Code[20];
      g_codeCostcenter@1101495014 : Code[20];
      g_codeLE@1101495013 : Code[15];
      g_codeAccNo@1101495012 : Code[20];
      g_codeBalAccNo@1101495011 : Code[20];
      g_codeFI@1101495010 : Code[20];
      g_codeMappingForBook@1101495009 : Code[20];
      g_codeBookCorresp@1101495008 : Code[20];
      g_codeCostCorresp@1101495007 : Code[20];
      g_ParamsSet@1101495006 : Boolean;
      g_boolConsJnlCleared@1101495005 : Boolean;
      g_boolJnlCleared@1101495004 : Boolean;
      g_boolMappingForBook@1101495003 : Boolean INDATASET;
      g_boolReverse@1101495002 : Boolean INDATASET;
      g_boolInserted@1101495001 : Boolean;
      g_dateReverse@1101495000 : Date;
      g_Text001@1101495054 : TextConst 'RUS=Импорт Файл Excel';
      g_Text002@1101495053 : TextConst 'ENU=Excel not found.;RUS=Excel не установлен.';
      g_Text003@1101495052 : TextConst 'ENU=You must enter a file name.;RUS=Вы должны ввести имя файла.';
      g_Text004@1101495051 : TextConst 'ENU=You must enter an Excel worksheet name.;RUS=Вы должны ввести имя листа Excel.';
      g_Text005@1101495050 : TextConst 'ENU=The file %1 does not exist.;RUS=Файл %1 не существует.';
      g_Text006@1101495049 : TextConst 'ENU=The Excel worksheet %1 does not exist.;RUS=Лист Excel %1 не существует.';
      g_Text007@1101495048 : TextConst 'ENU=Reading Excel worksheet...\\;RUS=Чтение листа Excel...\\';
      g_Text008@1101495047 : TextConst 'ENU=You must enter a Journal Template.;RUS=Вы должны задать Фин. Журнал Шаблон.';
      g_Text009@1101495046 : TextConst 'ENU=You must enter a Journal Batch.;RUS=Вы должны задать Фин. Журнал Раздел.';
      g_Text010@1101495045 : TextConst 'ENU=Set the Mapping for BOOK -> COSTCENTER.;RUS=Необходимо задать Мэппинг для BOOK -> COSTCENTER.';
      g_Text011@1101495044 : TextConst 'RUS=Необходимо задать Дату Реверса.';
      g_TextErrorCOST@1101495043 : TextConst 'ENU=NOT FOUND COSTCENTER for BOOK %1 in mapping.;RUS=НЕ НАЙДЕН COSTCENTER для BOOK %1 в мэппинге.';
      InvalidParameterErr@1101495067 : TextConst 'ENU=Necessary to use temporary table the adding dimensions for.;RUS=Для добавления измерений необходимо использовать временную таблицу.';
      ImportHeader@1101495066 : TextConst 'ENU=Select Excel file for import.;RUS=Выберите файл Excel для загрузки.';
      EmptyFileNameErr@1101495065 : TextConst 'ENU=File name is not defined.;RUS=Имя файла не задано.';

    PROCEDURE fn_OpenBook@1000000002(FileName@1000000001 : Text[250];SheetName@1000000000 : Text[250]) : Boolean;
    VAR
      l_int@1000000004 : Integer;
      l_intEndOfLoop@1000000003 : Integer;
      l_boolFound@1000000002 : Boolean;
    BEGIN
      IF FileName = '' THEN
        ERROR(g_Text003);

      //NC NOS-26 > SPA
      CultureInfo := CultureInfo.CultureInfo('en-US');
      Thread.CurrentThread.CurrentCulture(CultureInfo);
      //NC NOS-26 < SPA
      XlApp := XlApp.ApplicationClass;
      IF ISNULL(XlApp) THEN
        ERROR(g_Text002);

      XlHelper.CallOpen(XlApp,FileName);
      XlWrkBk := XlApp.ActiveWorkbook;

      l_int := 1;
      l_intEndOfLoop := XlWrkBk.Worksheets.Count;
      WHILE (l_int <= l_intEndOfLoop) AND (NOT l_boolFound) DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(l_int);
        IF SheetName = XlWrkSht.Name THEN
          l_boolFound := TRUE;
        l_int := l_int + 1;
      END;
      IF l_boolFound THEN
        XlWrkSht := XlWrkBk.Worksheets.Item(SheetName)
      ELSE
        MESSAGE(g_Text006,SheetName);

      EXIT(l_boolFound);
    END;

    PROCEDURE fn_ReadSheet@1000000003();
    VAR
      l_inti@1000000005 : Integer;
      l_intj@1000000004 : Integer;
      l_intMaxi@1000000003 : Integer;
      l_intMaxj@1000000002 : Integer;
      l_dlgWindow@1000000001 : Dialog;
      l_char@1000000000 : Char;
    BEGIN
      l_dlgWindow.OPEN(
        g_Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@\');
      l_dlgWindow.UPDATE(1,0);

      XlWrkSht.Range('A:BZ').EntireColumn.Hidden := FALSE;
      XlRange := XlWrkSht.Range('A1').SpecialCells(11, TypeMissing.GetMissingValue);

      g_intCounter := 0;
      l_intMaxi := XlRange.Row;
      g_intLineNoRev := XlRange.Row * 2 * 10000 + g_intLineNo;
      l_intMaxj := XlRange.Column;
      l_inti := g_intFirstRow;
      REPEAT
        l_intj := 1;
        g_recGenJnLine.INIT;
        REPEAT
          fn_FillJournal(l_inti,l_intj);
          l_intj := l_intj + 1;
        UNTIL l_intj > l_intMaxj;
        //NC NOS-26 > SPA
        DimMgt.UpdateGlobalDimFromDimSetID(
          g_recGenJnLine."Dimension Set ID",
          g_recGenJnLine."Shortcut Dimension 1 Code",
          g_recGenJnLine."Shortcut Dimension 2 Code");
        //NC NOS-26 < SPA
        IF g_boolReverse AND g_boolInserted THEN
          fn_InsertReverseLine(g_recGenJnLine);

        // Insert corresponding Line >
        IF g_boolInserted THEN
          fn_InsertCorrJournLine(g_recGenJnLine);
        // Insert corresponding Line <

        l_inti := l_inti + 1;
        l_dlgWindow.UPDATE(1,ROUND(l_inti / l_intMaxi * 10000,1));
      UNTIL l_inti > l_intMaxi;
      l_dlgWindow.CLOSE;
    END;

    LOCAL PROCEDURE fn_FillJournal@1000000000(p_intRow@1000000000 : Integer;VAR pv_intCol@1000000001 : Integer);
    VAR
      l_dec@1000000002 : Decimal;
    BEGIN
      CASE pv_intCol OF
        1: BEGIN
          g_recGenJnLine."Journal Template Name" := g_codeTemplate;
          g_recGenJnLine."Journal Batch Name" := g_codeBatch;
          g_recGenJnLine."Line No." := g_intLineNo;
          g_recGenJnLine.VALIDATE("Posting No. Series",g_codePostNoSer);
          EVALUATE(g_recGenJnLine."Posting Date", FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
          g_recGenJnLine.VALIDATE("Posting Date", g_recGenJnLine."Posting Date");
        END;
        2:
          g_recGenJnLine.VALIDATE("Document No.",FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        3: BEGIN
          IF FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value) <> '' THEN BEGIN
            EVALUATE(g_recGenJnLine.Correction,FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            g_recGenJnLine.VALIDATE(Correction,g_recGenJnLine.Correction);
          END;
        END;
        4: BEGIN
          g_recGenJnLine.VALIDATE("Account Type",0);
          g_recGenJnLine."Account No." := FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value);
          g_recGenJnLine."Account No." := DELCHR(g_recGenJnLine."Account No.",'=',g_txtSymb);
          g_recGenJnLine.VALIDATE("Account No.",g_recGenJnLine."Account No.");
        END;
        5:
          g_recGenJnLine.Description := FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value);
        6: BEGIN
          IF FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value) <> '' THEN
            IF FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value) <> g_recGLSetup."LCY Code" THEN
              g_recGenJnLine.VALIDATE("Currency Code", FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        END;
        7: BEGIN
          IF FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value) <> '' THEN BEGIN
            EVALUATE(g_recGenJnLine.Quantity, FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            g_recGenJnLine.VALIDATE(Quantity,g_recGenJnLine.Quantity);
          END;
        END;
        8: BEGIN
          IF FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value) <> '' THEN BEGIN
            EVALUATE(g_recGenJnLine.Amount,FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            g_recGenJnLine.VALIDATE(Amount,g_recGenJnLine.Amount);
          END;
        END;
        9: BEGIN
          IF FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value) <> '' THEN BEGIN
            EVALUATE(g_recGenJnLine."Amount (LCY)",FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            IF (g_recGenJnLine."Amount (LCY)" <> 0) THEN
              IF g_recGenJnLine.Amount <> 0 THEN
                g_recGenJnLine.VALIDATE("Amount (LCY)",ROUND(g_recGenJnLine."Amount (LCY)",0.01))
              ELSE BEGIN
                g_recGenJnLine."Amount (LCY)" := ROUND(g_recGenJnLine."Amount (LCY)",0.01);
                g_recGenJnLine."Currency Index Entry" := TRUE;
                g_recGenJnLine."Currency Index" := g_recGenJnLine."Currency Code";
                g_recGenJnLine."Allow Zero-Amount Posting" := TRUE;
              END;
          END;
        END;
        10: BEGIN
          g_recGenJnLine."Business Unit Code" := FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value);
          g_recGenJnLine."Business Unit Code" := DELCHR(g_recGenJnLine."Business Unit Code",'<','*');
          g_recBUfromCons.SETRANGE(Code,g_recGenJnLine."Business Unit Code");
          IF g_recBUfromCons.FINDFIRST AND (g_recBUfromCons."Company Name" = COMPANYNAME) THEN BEGIN
            //TDRANCS-2080>
            //g_recGenJnLine."Business Unit Code" := '';
            IF g_recGLSetup."Use Bus.Unit for Separ. Trans." AND
                  (g_recGLSetup."Default Business Unit Code" <> '') THEN
              g_recGenJnLine."Business Unit Code" := g_recGLSetup."Default Business Unit Code";
            //TDRANCS-2080<
            g_recGenJnLine.INSERT;
            g_intCounter += 1;  // Счетчик загруженных операций
            g_intLineNo += 10000;
            g_boolInserted := TRUE;
          END ELSE BEGIN
            g_boolInserted := FALSE;
            pv_intCol := 1000000;
          END;
        END;
        11:
          g_codeCostcenter :=
            DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'=',g_txtSymb);
        12: BEGIN
          IF EVALUATE(l_dec,FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value)) THEN
            g_codeBook :=
              DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'=',g_txtSymb)
          ELSE
            g_codeBook := FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value);
          g_codeBook := CONVERTSTR(g_codeBook,'*','#');
          IF (g_codeCostcenter = '') AND (g_boolMappingForBook) THEN BEGIN
            g_codeCostcenter := fn_FindCostCenter(g_codeBook);
            IF g_codeCostcenter = COPYSTR(g_TextErrorCOST,1,20) THEN
              g_codeCostcenter := '';
          END;

        END;
        13:
          fn_InsertJournLineDim(g_recGenJnLine,
                                'AC.COMP',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        14:
          fn_InsertJournLineDim(g_recGenJnLine,
                                'ACCRUAL.TYPE',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        15: BEGIN
          IF EVALUATE(l_dec,FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value)) THEN
            fn_InsertJournLineDim(g_recGenJnLine,
                                'BANK.ACC',
                                DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'=',g_txtSymb))
          ELSE
            fn_InsertJournLineDim(g_recGenJnLine,
                                'BANK.ACC',
                                DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'<',''''));
        END;
        16:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'CAPITAL.MOVE',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        17:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'CIP',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        18:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'COMMISSIONS',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        19:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'COUNTERPARTY',
                                DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'<',''''));
        20:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'COUNTERPARTY.REAL',
                                 DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'<',''''));
        21:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'CURRENCY',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        22: BEGIN
          IF EVALUATE(l_dec,FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value)) THEN
            fn_InsertJournLineDim(g_recGenJnLine,
                                'DEAL',
                                DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'=',g_txtSymb))
          ELSE
            fn_InsertJournLineDim(g_recGenJnLine,
                                'DEAL',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        END;
        23:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'DESK',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        24:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'DF.EXPENSE',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        25:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'EXP.OP',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        26:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'FA',
                                DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'<',''''));
        27:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'FA.OPERTYPE',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        28: BEGIN
          IF EVALUATE(l_dec,FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value)) THEN
            g_recGenJnLine."Financial Instrument No." :=
              DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'=',g_txtSymb)
          ELSE
            g_recGenJnLine."Financial Instrument No." := FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value);
          g_recGenJnLine.VALIDATE("Financial Instrument No.",g_recGenJnLine."Financial Instrument No.");
        END;
        29:
            fn_InsertJournLineDim(g_recGenJnLine,
                               'FXACC.CT',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        30:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'FXACC.DT',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        31:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'GW.OPERTYPE',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        32:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'IC',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        33:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'PROJECT',
                                DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'<',''''));
        34:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'PROV.MOVEMENTS',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        35:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'PROVISIONS',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        36: BEGIN
            fn_InsertJournLineDim(g_recGenJnLine,
                                'REVAL.TYPE',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            fn_InsertJournLineDim(g_recGenJnLine,
                                'BOOK',
                                g_codeBook);             // оставлено здесь для старых шаблонов
            fn_InsertJournLineDim(g_recGenJnLine,
                                'COSTCENTER',
                                g_codeCostcenter); // вставка костов и буков должна быть в последней строке
        END;
        37:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'TAX.JUR',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        38:
            fn_InsertJournLineDim(g_recGenJnLine,
                                'TAX.OTHER',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
        39: BEGIN
          IF EVALUATE(l_dec,FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value)) THEN
            g_recGenJnLine."Local G/L Account" :=
              DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'=',g_txtSymb)
          ELSE
            g_recGenJnLine."Local G/L Account" :=
              DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'<','''');
          g_recGenJnLine.MODIFY;
            fn_InsertJournLineDim(g_recGenJnLine,
                                'BOOK',
                                g_codeBook);
            fn_InsertJournLineDim(g_recGenJnLine,
                               'COSTCENTER',
                                g_codeCostcenter);
        END;
        40: BEGIN
            fn_InsertJournLineDim(g_recGenJnLine,
                                'RECONC.TYPE',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            fn_InsertJournLineDim(g_recGenJnLine,
                                'BOOK',
                                g_codeBook);
            fn_InsertJournLineDim(g_recGenJnLine,
                                'COSTCENTER',
                                g_codeCostcenter);
        END;
        41: BEGIN
        {
          IF EVALUATE(l_dec,FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value)) THEN
            g_recGenJnLine."Source G/L Account No." :=
              DELCHR(FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value),'=',g_txtSymb)
          ELSE
            g_recGenJnLine."Source G/L Account No." := FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value);
        }
        END;
        42: BEGIN
          IF FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value) <> '' THEN BEGIN
            EVALUATE(g_recGenJnLine."Not Translate",FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            g_recGenJnLine.VALIDATE("Not Translate",g_recGenJnLine."Not Translate");
          END;
        END;
        43: BEGIN
          IF FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value) <> '' THEN BEGIN
            EVALUATE(g_recGenJnLine."Allow Zero-Amount Posting",
              FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            g_recGenJnLine.VALIDATE("Allow Zero-Amount Posting",g_recGenJnLine."Allow Zero-Amount Posting");
          END;
          g_recGenJnLine.MODIFY;
            fn_InsertJournLineDim(g_recGenJnLine,
                                'BOOK',
                                g_codeBook);
            fn_InsertJournLineDim(g_recGenJnLine,
                               'COSTCENTER',
                                g_codeCostcenter);
        END;
        44: BEGIN
            fn_InsertJournLineDim(g_recGenJnLine,
                                'FUND.STATUS',
                                FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value));
            fn_InsertJournLineDim(g_recGenJnLine,
                                'BOOK',
                                g_codeBook);
            fn_InsertJournLineDim(g_recGenJnLine,
                                'COSTCENTER',
                                g_codeCostcenter);
        END;
        45: BEGIN
          g_recGenJnLine."Bal. Account No." := FORMAT(XlWrkSht.Range(fn_GetColumn(pv_intCol) + fn_GetRow(p_intRow)).Value);
          g_recGenJnLine."Bal. Account No." := DELCHR(g_recGenJnLine."Bal. Account No.",'=',g_txtSymb);
          IF NOT g_recGLAccount.GET(g_recGenJnLine."Bal. Account No.") THEN
            g_recGenJnLine."Bal. Account No." := ''
          ELSE BEGIN
            g_recGenJnLine.MODIFY;
            g_recGenJnLine.UpdateLineBalance;
            g_recGenJnLine.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE fn_SetParam@1000000009(p_codeTemplate@1000000000 : Code[10];p_codeBatch@1000000001 : Code[10]);
    BEGIN
      g_codeBatch := p_codeBatch;
      g_codeTemplate := p_codeTemplate;
      g_ParamsSet := TRUE;
    END;

    LOCAL PROCEDURE fn_GetRow@1000000001(p_intRow@1000000000 : Integer) : Text[10];
    BEGIN
      EXIT(FORMAT(p_intRow));
    END;

    LOCAL PROCEDURE fn_GetColumn@1000000004(p_intColNo@1000000000 : Integer) r_txtxlColID : Text[30];
    VAR
      l_intx@1000000003 : Integer;
      l_inti@1000000002 : Integer;
      l_char@1000000001 : Char;
      Buffer@1101495000 : TEMPORARY Record 370;
    BEGIN
      //NC NOS-26 > SPA
      {
      l_intx := p_intColNo - 1;
      l_char := 65 + l_intx MOD 26;
      r_txtxlColID[10] := l_char;
      l_inti := 10;
      WHILE l_intx > 25 DO BEGIN
        l_intx := l_intx DIV 26;
        l_inti := l_inti - 1;
        l_char := 64 + l_intx MOD 26;
        r_txtxlColID[l_inti] := l_char;
      END;
      FOR l_intx := l_inti TO 10 DO
        r_txtxlColID[1+l_intx-l_inti] := r_txtxlColID[l_intx];
      }
      Buffer.VALIDATE("Column No.",p_intColNo);
      EXIT(Buffer.xlColID);
      //NC NOS-26 < SPA
    END;

    PROCEDURE fn_InsertJournLineDim@1000000015(VAR GenJournalLine@1101495000 : Record 81;DimCode@1101495001 : Code[20];DimValueCode@1101495002 : Code[20]);
    VAR
      DimSetID@1101495003 : Integer;
    BEGIN
      //NC NOS-26 > SPA
      IF DimValueCode <> '' THEN BEGIN
        IF NOT TempDimSetEntry.ISTEMPORARY THEN
          ERROR(InvalidParameterErr);

        DimSetID := GenJournalLine."Dimension Set ID";

        IF DimSetID <> 0 THEN
          DimMgt.GetDimensionSet(TempDimSetEntry, DimSetID);

        IF TempDimSetEntry.GET(DimSetID, DimCode) THEN
          TempDimSetEntry.DELETE;

        TempDimSetEntry.INIT;
        TempDimSetEntry.VALIDATE("Dimension Code", DimCode);
        TempDimSetEntry.VALIDATE("Dimension Value Code", DimValueCode);
        TempDimSetEntry.SetObject(GenJournalLine);
        TempDimSetEntry.INSERT(TRUE);

        DimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
        IF DimSetID <> GenJournalLine."Dimension Set ID" THEN BEGIN
          GenJournalLine."Dimension Set ID" := DimSetID;
          DimMgt.UpdateGenJnlLineDim(GenJournalLine, DimSetID);
          GenJournalLine.MODIFY;
        END;
      END;
      //NC NOS-26 < SPA
      {
      IF p_codeDimValueCode <> '' THEN BEGIN
        g_recJnLineDim.SETRANGE(g_recJnLineDim."Table ID", p_intTableID);
        g_recJnLineDim.SETRANGE("Journal Template Name", p_codeJnlTmplt);
        g_recJnLineDim.SETRANGE("Journal Batch Name", p_codeJnlBatch);
        g_recJnLineDim.SETRANGE("Journal Line No.", p_intLine);
        g_recJnLineDim.SETRANGE("Allocation Line No.", p_intAllocLine);
        g_recJnLineDim.SETRANGE("Dimension Code", p_codeDimCode);
        IF g_recJnLineDim.FIND('-') THEN BEGIN
          g_recJnLineDim.VALIDATE("Dimension Value Code",p_codeDimValueCode);
          g_recJnLineDim.MODIFY(TRUE);
        END ELSE BEGIN
          g_recJnLineDim.INIT;
          g_recJnLineDim.VALIDATE("Table ID", p_intTableID);
          g_recJnLineDim.VALIDATE("Journal Template Name", p_codeJnlTmplt);
          g_recJnLineDim.VALIDATE("Journal Batch Name", p_codeJnlBatch);
          g_recJnLineDim.VALIDATE("Journal Line No.", p_intLine);
          g_recJnLineDim.VALIDATE("Allocation Line No.", p_intAllocLine);
          g_recJnLineDim.VALIDATE("Dimension Code", p_codeDimCode);
          g_recJnLineDim.VALIDATE("Dimension Value Code", p_codeDimValueCode);
          g_recJnLineDim.INSERT(TRUE);
        END;
      END;
      }
    END;

    PROCEDURE fn_SetControls@1000000007();
    BEGIN
      {
      IF NOT g_ParamsSet THEN BEGIN
        g_codeTemplate := '';
        g_codeBatch := '';
      END
      ELSE BEGIN
        RequestOptionsForm.Field_codeTemplate.ENABLED(FALSE);
        RequestOptionsForm.Field_codeBatch.ENABLED(FALSE);
      END;
      }
    END;

    LOCAL PROCEDURE fn_FindCostCenter@1000000032(p_codeBOOK@1000000000 : Code[20]) r_codeCostCenter : Code[20];
    VAR
      l_recDimMapping@1000000001 : Record 50003;
    BEGIN
      l_recDimMapping.SETRANGE("Mapping Code",g_codeMappingForBook);
      l_recDimMapping.SETRANGE("Source Dimension Code",'BOOK');
      l_recDimMapping.SETRANGE("Source Dimension Value Code",p_codeBOOK);
      l_recDimMapping.SETRANGE("Receiver Dimension Code",'COSTCENTER');

      IF l_recDimMapping.FINDFIRST THEN
        r_codeCostCenter := l_recDimMapping."Receiver Dimension Value Code"
      ELSE
        r_codeCostCenter := COPYSTR(g_TextErrorCOST,1,20);
    END;

    PROCEDURE fn_InsertCorrJournLine@1000000006(p_recGenJnLine@1000000000 : Record 81);
    VAR
      l_recGenJnlLine@1000000001 : Record 81;
    BEGIN
      l_recGenJnlLine.COPY(p_recGenJnLine);
      l_recGenJnlLine."Line No." := g_intLineNo;
      l_recGenJnlLine."Shortcut Dimension 1 Code" := '';
      l_recGenJnlLine."Shortcut Dimension 2 Code" := '';

      {
      IF g_recGLSetup."Global Dimension 1 Code" = 'COSTCENTER' THEN
        l_recGenJnlLine."Shortcut Dimension 1 Code" := g_codeCostCorresp
      ELSE
        l_recGenJnlLine."Shortcut Dimension 1 Code" := '';
      IF g_recGLSetup."Global Dimension 2 Code" = 'BOOK' THEN
        l_recGenJnlLine."Shortcut Dimension 2 Code" := g_codeBookCorresp
      ELSE
        l_recGenJnlLine."Shortcut Dimension 2 Code" := '';
      }

      l_recGenJnlLine.VALIDATE(Amount, - p_recGenJnLine.Amount);
      l_recGenJnlLine."Dimension Set ID" := p_recGenJnLine."Dimension Set ID"; // NC NOS-26 SPA
      l_recGenJnlLine.INSERT;
      g_intCounter += 1;  // Счетчик загруженных операций
      g_intLineNo += 10000;

      IF p_recGenJnLine."Financial Instrument No." <> '' THEN
        l_recGenJnlLine.VALIDATE("Financial Instrument No.",p_recGenJnLine."Financial Instrument No.");

      fn_InsertJournLineDim(l_recGenJnlLine,
                            'BOOK',
                             g_codeBookCorresp);
      fn_InsertJournLineDim(l_recGenJnlLine,
                            'COSTCENTER',
                             g_codeCostCorresp);
      {
      l_recJnLineDim.SETRANGE(l_recJnLineDim."Table ID",DATABASE::"Gen. Journal Line");
      l_recJnLineDim.SETFILTER("Dimension Code",'<>%1&<>%2','BOOK','COSTCENTER');
      l_recJnLineDim.SETRANGE("Journal Template Name", p_recGenJnLine."Journal Template Name");
      l_recJnLineDim.SETRANGE("Journal Batch Name", p_recGenJnLine."Journal Batch Name");
      l_recJnLineDim.SETRANGE("Journal Line No.", p_recGenJnLine."Line No.");
      l_recJnLineDim.SETRANGE("Allocation Line No.", 0);
      IF l_recJnLineDim.FINDSET THEN REPEAT
        fn_InsertJournLineDim(DATABASE::"Gen. Journal Line",
                              l_recGenJnlLine."Journal Template Name",
                              l_recGenJnlLine."Journal Batch Name",
                              l_recGenJnlLine."Line No.",
                              0,
                              l_recJnLineDim."Dimension Code",
                              l_recJnLineDim."Dimension Value Code");
      UNTIL l_recJnLineDim.NEXT = 0;
      }
      //NC NOS-26 < SPA
      DimMgt.UpdateGlobalDimFromDimSetID(
        l_recGenJnlLine."Dimension Set ID",
        l_recGenJnlLine."Shortcut Dimension 1 Code",
        l_recGenJnlLine."Shortcut Dimension 2 Code");
      //NC NOS-26 < SPA
      IF g_boolReverse AND g_boolInserted THEN
        fn_InsertReverseLine(l_recGenJnlLine);
    END;

    PROCEDURE fn_InsertReverseLine@1000000005(p_recGenJnLine@1000000000 : Record 81);
    VAR
      l_recGenJnlLine@1000000001 : Record 81;
    BEGIN
      l_recGenJnlLine.COPY(p_recGenJnLine);
      l_recGenJnlLine."Line No." := g_intLineNoRev;
      l_recGenJnlLine.VALIDATE(Amount, - p_recGenJnLine.Amount);
      l_recGenJnlLine.VALIDATE(Quantity,- p_recGenJnLine.Quantity);
      l_recGenJnlLine."Source Historical Date" := l_recGenJnlLine."Posting Date";
      {
      IF g_dateReverse = 0D THEN
        l_recGenJnlLine."Posting Date" := CALCDATE('<1D>',l_recGenJnlLine."Posting Date")
      ELSE
      }

      l_recGenJnlLine."Posting Date" := g_dateReverse;

      IF p_recGenJnLine."Financial Instrument No." <> '' THEN
        l_recGenJnlLine.VALIDATE("Financial Instrument No.",p_recGenJnLine."Financial Instrument No.");

      l_recGenJnlLine."Dimension Set ID" := p_recGenJnLine."Dimension Set ID"; // NC NOS-26 SPA
      l_recGenJnlLine.INSERT;
      g_intCounter += 1;  // Счетчик загруженных операций
      g_intLineNoRev += 10000;
      {
      l_recJnLineDim.SETRANGE(l_recJnLineDim."Table ID",DATABASE::"Gen. Journal Line");
      l_recJnLineDim.SETRANGE("Journal Template Name", p_recGenJnLine."Journal Template Name");
      l_recJnLineDim.SETRANGE("Journal Batch Name", p_recGenJnLine."Journal Batch Name");
      l_recJnLineDim.SETRANGE("Journal Line No.", p_recGenJnLine."Line No.");
      l_recJnLineDim.SETRANGE("Allocation Line No.", 0);
      IF l_recJnLineDim.FINDSET THEN REPEAT
        fn_InsertJournLineDim(DATABASE::"Gen. Journal Line",
                              l_recGenJnlLine."Journal Template Name",
                              l_recGenJnlLine."Journal Batch Name",
                              l_recGenJnlLine."Line No.",
                              0,
                              l_recJnLineDim."Dimension Code",
                              l_recJnLineDim."Dimension Value Code");

      UNTIL l_recJnLineDim.NEXT = 0;
      }
    END;

    LOCAL PROCEDURE GetConvertedFileName@1101495001() : Text;
    VAR
      ExcelMgt@1101495000 : Codeunit 12416;
    BEGIN
      // если исходный файл в новом формате, то использовать его
      IF FileMgt.GetExtension(g_txtFileName) = 'xlsx' THEN
        EXIT(g_txtFileName);

      // если файл уже был конвертирован, то вернуть имя конвертированного файла
      IF ConvertedFileName <> '' THEN
        EXIT(ConvertedFileName);

      // конвертировать файл в новый формат
      ConvertedFileName := ExcelMgt.ConvertToOpenXML(g_txtFileName);
      EXIT(ConvertedFileName);
    END;

    EVENT XlWrkSht@1101495061::SelectionChange@165(Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::BeforeDoubleClick@166(Target@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::BeforeRightClick@167(Target@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::DocEvents_Event_Activate@168();
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::Deactivate@169();
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::DocEvents_Event_Calculate@170();
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::Change@171(Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::FollowHyperlink@172(Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Hyperlink");
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::PivotTableUpdate@173(Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::PivotTableAfterValueChange@174(TargetPivotTable@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";TargetRange@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::PivotTableBeforeAllocateChanges@175(TargetPivotTable@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495002 : Integer;ValueChangeEnd@1101495001 : Integer;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::PivotTableBeforeCommitChanges@176(TargetPivotTable@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495002 : Integer;ValueChangeEnd@1101495001 : Integer;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::PivotTableBeforeDiscardChanges@177(TargetPivotTable@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495001 : Integer;ValueChangeEnd@1101495000 : Integer);
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::PivotTableChangeSync@178(Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::LensGalleryRenderComplete@179();
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::TableUpdate@180(Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.TableObject");
    BEGIN
    END;

    EVENT XlWrkSht@1101495061::BeforeDelete@181();
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::Open@299();
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::WorkbookEvents_Event_Activate@300();
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::Deactivate@301();
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::BeforeClose@302(VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::BeforeSave@303(SaveAsUI@1101495001 : Boolean;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::BeforePrint@304(VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::NewSheet@305(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::AddinInstall@306();
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::AddinUninstall@307();
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::WindowResize@308(Wn@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::WindowActivate@309(Wn@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::WindowDeactivate@310(Wn@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetSelectionChange@311(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetBeforeDoubleClick@312(Sh@1101495002 : Variant;Target@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetBeforeRightClick@313(Sh@1101495002 : Variant;Target@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetActivate@314(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetDeactivate@315(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetCalculate@316(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetChange@317(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetFollowHyperlink@318(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Hyperlink");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetPivotTableUpdate@319(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::PivotTableCloseConnection@320(Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::PivotTableOpenConnection@321(Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::WorkbookEvents_Event_Sync@322(SyncEventType@1101495000 : DotNet "'office, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Core.MsoSyncEventType");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::BeforeXmlImport@323(Map@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1101495002 : Text;IsRefresh@1101495001 : Boolean;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::AfterXmlImport@324(Map@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";IsRefresh@1101495001 : Boolean;Result@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlXmlImportResult");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::BeforeXmlExport@325(Map@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1101495001 : Text;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::AfterXmlExport@326(Map@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1101495001 : Text;Result@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlXmlExportResult");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::RowsetComplete@327(Description@1101495002 : Text;Sheet@1101495001 : Text;Success@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetPivotTableAfterValueChange@328(Sh@1101495002 : Variant;TargetPivotTable@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";TargetRange@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetPivotTableBeforeAllocateChanges@329(Sh@1101495004 : Variant;TargetPivotTable@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495002 : Integer;ValueChangeEnd@1101495001 : Integer;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetPivotTableBeforeCommitChanges@330(Sh@1101495004 : Variant;TargetPivotTable@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495002 : Integer;ValueChangeEnd@1101495001 : Integer;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetPivotTableBeforeDiscardChanges@331(Sh@1101495003 : Variant;TargetPivotTable@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495001 : Integer;ValueChangeEnd@1101495000 : Integer);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetPivotTableChangeSync@332(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::AfterSave@333(Success@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::NewChart@334(Ch@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetLensGalleryRenderComplete@335(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetTableUpdate@336(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.TableObject");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::ModelChange@337(Changes@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ModelChanges");
    BEGIN
    END;

    EVENT XlWrkBk@1101495062::SheetBeforeDelete@338(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1101495063::AppEvents_Event_NewWorkbook@424(Wb@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetSelectionChange@425(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetBeforeDoubleClick@426(Sh@1101495002 : Variant;Target@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetBeforeRightClick@427(Sh@1101495002 : Variant;Target@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetActivate@428(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetDeactivate@429(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetCalculate@430(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetChange@431(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookOpen@432(Wb@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookActivate@433(Wb@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookDeactivate@434(Wb@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookBeforeClose@435(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookBeforeSave@436(Wb@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";SaveAsUI@1101495001 : Boolean;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookBeforePrint@437(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookNewSheet@438(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookAddinInstall@439(Wb@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookAddinUninstall@440(Wb@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1101495063::WindowResize@441(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlApp@1101495063::WindowActivate@442(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlApp@1101495063::WindowDeactivate@443(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetFollowHyperlink@444(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Hyperlink");
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetPivotTableUpdate@445(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookPivotTableCloseConnection@446(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookPivotTableOpenConnection@447(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookSync@448(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";SyncEventType@1101495000 : DotNet "'office, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Core.MsoSyncEventType");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookBeforeXmlImport@449(Wb@1101495004 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1101495002 : Text;IsRefresh@1101495001 : Boolean;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookAfterXmlImport@450(Wb@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";IsRefresh@1101495001 : Boolean;Result@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlXmlImportResult");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookBeforeXmlExport@451(Wb@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1101495001 : Text;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookAfterXmlExport@452(Wb@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1101495001 : Text;Result@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlXmlExportResult");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookRowsetComplete@453(Wb@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Description@1101495002 : Text;Sheet@1101495001 : Text;Success@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::AfterCalculate@454();
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetPivotTableAfterValueChange@455(Sh@1101495002 : Variant;TargetPivotTable@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";TargetRange@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetPivotTableBeforeAllocateChanges@456(Sh@1101495004 : Variant;TargetPivotTable@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495002 : Integer;ValueChangeEnd@1101495001 : Integer;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetPivotTableBeforeCommitChanges@457(Sh@1101495004 : Variant;TargetPivotTable@1101495003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495002 : Integer;ValueChangeEnd@1101495001 : Integer;VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetPivotTableBeforeDiscardChanges@458(Sh@1101495003 : Variant;TargetPivotTable@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1101495001 : Integer;ValueChangeEnd@1101495000 : Integer);
    BEGIN
    END;

    EVENT XlApp@1101495063::ProtectedViewWindowOpen@459(Pvw@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp@1101495063::ProtectedViewWindowBeforeEdit@460(Pvw@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::ProtectedViewWindowBeforeClose@461(Pvw@1101495002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow";Reason@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlProtectedViewCloseReason";VAR Cancel@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::ProtectedViewWindowResize@462(Pvw@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp@1101495063::ProtectedViewWindowActivate@463(Pvw@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp@1101495063::ProtectedViewWindowDeactivate@464(Pvw@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookAfterSave@465(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Success@1101495000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookNewChart@466(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Ch@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart");
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetLensGalleryRenderComplete@467(Sh@1101495000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetTableUpdate@468(Sh@1101495001 : Variant;Target@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.TableObject");
    BEGIN
    END;

    EVENT XlApp@1101495063::WorkbookModelChange@469(Wb@1101495001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Changes@1101495000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ModelChanges");
    BEGIN
    END;

    EVENT XlApp@1101495063::SheetBeforeDelete@470(Sh@1101495000 : Variant);
    BEGIN
    END;

    BEGIN
    {
      TDRANCS-1256
      TDRANCS-2080> Modified fn_FillJournal - added BU
      ------------------------
      NC NOS-26 SPA Перенос на новую версию
    }
    END.
  }
  RDLDATA
  {
  }
}

