OBJECT Table 26550 Statutory Report
{
  OBJECT-PROPERTIES
  {
    Date=10.04.17;
    Time=13:32:26;
    Modified=Yes;
    Version List=NAVRU10.00,NCNOS-26;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               StatutoryReportSetup.GET;
               IF NOT Header THEN BEGIN
                 IF "Company Address Code" = '' THEN
                   "Company Address Code" := StatutoryReportSetup."Default Comp. Addr. Code";
                 IF "Company Address Language Code" = '' THEN
                   "Company Address Language Code" := StatutoryReportSetup."Default Comp. Addr. Lang. Code";
               END;
             END;

    OnDelete=VAR
               StatutoryReportTable@1210000 : Record 26552;
               StatReportRequisitesGroup@1210001 : Record 26557;
               StatutoryReportDataHeader@1210002 : Record 26563;
               XMLElementLine@1470000 : Record 26570;
               StatReportExcelSheet@1210003 : Record 26562;
             BEGIN
               StatutoryReportTable.SETRANGE("Report Code",Code);
               IF StatutoryReportTable.FINDFIRST THEN
                 StatutoryReportTable.DELETEALL(TRUE);

               StatReportRequisitesGroup.SETRANGE("Report Code",Code);
               IF StatReportRequisitesGroup.FINDFIRST THEN
                 StatReportRequisitesGroup.DELETEALL(TRUE);

               StatutoryReportDataHeader.SETRANGE("Report Code",Code);
               IF StatutoryReportDataHeader.FINDFIRST THEN
                 StatutoryReportDataHeader.DELETEALL(TRUE);

               XMLElementLine.SETRANGE("Report Code",Code);
               IF NOT XMLElementLine.ISEMPTY THEN
                 XMLElementLine.DELETEALL(TRUE);

               StatReportExcelSheet.SETRANGE("Report Code",Code);
               StatReportExcelSheet.SETRANGE("Report Data No.",'');
               StatReportExcelSheet.DELETEALL;
             END;

    CaptionML=[ENU=Statutory Report;
               RUS=Регламентный отчет];
    LookupPageID=Page26550;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              RUS=Код];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 5   ;   ;Group Code          ;Code20        ;TableRelation="Statutory Report Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Header,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Group Code;
                                                              RUS=Код группы] }
    { 6   ;   ;Format Version Code ;Code20        ;TableRelation="Format Version";
                                                   OnValidate=VAR
                                                                StatutoryReportDataHeader@1210000 : Record 26563;
                                                              BEGIN
                                                                TESTFIELD(Header,FALSE);
                                                                IF "Format Version Code" <> xRec."Format Version Code" THEN BEGIN
                                                                  StatutoryReportDataHeader.SETRANGE("Report Code",Code);
                                                                  IF NOT StatutoryReportDataHeader.ISEMPTY THEN
                                                                    ERROR(Text030,
                                                                      FIELDCAPTION("Format Version Code"),
                                                                      TABLECAPTION,
                                                                      Code);

                                                                  IF "Format Version Code" <> '' THEN BEGIN
                                                                    TESTFIELD(Code);
                                                                    FormatVersion.GET("Format Version Code");
                                                                    FormatVersion.TESTFIELD("Excel File Name");
                                                                    IF FormatVersion."XML Schema File Name" = '' THEN
                                                                      MESSAGE(Text027,FormatVersion.GetRecDescription);
                                                                    Description := FormatVersion."Report Description";
                                                                    "Report Type" := FormatVersion."Report Type";
                                                                    "Starting Date" := FormatVersion."Usage Starting Date";
                                                                    "Ending Date" := FormatVersion."Usage Ending Date";
                                                                    ImportExcelSheetNames;
                                                                    IF ConfirmImportXMLSchema THEN
                                                                      ImportXMLSchema;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Format Version Code;
                                                              RUS=Код версии формата] }
    { 9   ;   ;Sequence No.        ;Integer       ;CaptionML=[ENU=Sequence No.;
                                                              RUS=Порядковый номер] }
    { 10  ;   ;Excel File Name     ;Text250       ;CaptionML=[ENU=Excel File Name;
                                                              RUS=Имя файла Excel] }
    { 12  ;   ;Report Template     ;BLOB          ;CaptionML=[ENU=Report Template;
                                                              RUS=Шаблон отчета] }
    { 13  ;   ;Sender No.          ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Header,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Sender No.;
                                                              RUS=Код отправителя] }
    { 14  ;   ;Report Type         ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Header,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Report Type;
                                                              RUS=Тип отчета];
                                                   OptionCaptionML=[ENU=" ,Tax,Accounting";
                                                                    RUS=" ,Налоговый,Бухгалтерский"];
                                                   OptionString=[ ,Tax,Accounting] }
    { 15  ;   ;Active              ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Header,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Active;
                                                              RUS=Активно] }
    { 16  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Header,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              RUS=Дата окончания] }
    { 17  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              RUS=Дата начала] }
    { 20  ;   ;Recipient Tax Authority Code;Code20;TableRelation=Vendor.No. WHERE (Vendor Type=CONST(Tax Authority));
                                                   OnValidate=BEGIN
                                                                IF "Recipient Tax Authority Code" <> '' THEN BEGIN
                                                                  Vendor.GET("Recipient Tax Authority Code");
                                                                  "Recipient Tax Authority SONO" := COPYSTR(Vendor."VAT Registration No.",1,4);
                                                                END ELSE
                                                                  "Recipient Tax Authority SONO" := '';
                                                              END;

                                                   CaptionML=[ENU=Recipient Tax Authority Code;
                                                              RUS=Код налогового органа получателя] }
    { 21  ;   ;Recipient Tax Authority SONO;Code4 ;CaptionML=[ENU=Recipient Tax Authority SONO;
                                                              RUS=СОНО налогового органа получателя] }
    { 22  ;   ;Admin. Tax Authority Code;Code20   ;TableRelation=Vendor.No. WHERE (Vendor Type=CONST(Tax Authority));
                                                   OnValidate=BEGIN
                                                                IF "Admin. Tax Authority Code" <> '' THEN BEGIN
                                                                  Vendor.GET("Admin. Tax Authority Code");
                                                                  "Admin. Tax Authority SONO" := COPYSTR(Vendor."VAT Registration No.",1,4);
                                                                END ELSE
                                                                  "Admin. Tax Authority SONO" := '';
                                                              END;

                                                   CaptionML=[ENU=Admin. Tax Authority Code;
                                                              RUS=Код налогового органа админ. единицы] }
    { 23  ;   ;Admin. Tax Authority SONO;Code4    ;CaptionML=[ENU=Admin. Tax Authority SONO;
                                                              RUS=СОНО налогового органа админ. единицы] }
    { 25  ;   ;Header              ;Boolean       ;OnValidate=BEGIN
                                                                IF "Format Version Code" <> '' THEN
                                                                  ERROR(Text031,
                                                                    FIELDCAPTION(Header),
                                                                    Header,
                                                                    FIELDCAPTION("Format Version Code"));

                                                                IF Header THEN BEGIN
                                                                  "Group Code" := '';
                                                                  "Format Version Code" := '';
                                                                  "Sender No." := '';
                                                                  "Report Type" := "Report Type"::" ";
                                                                  Active := FALSE;
                                                                  "Ending Date" := 0D;
                                                                  "Company Address Code" := '';
                                                                  "Company Address Language Code" := '';
                                                                  "Uppercase Text Excel Format" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Header;
                                                              RUS=Заголовок] }
    { 26  ;   ;Company Address Code;Code10        ;TableRelation="Company Address".Code WHERE (Address Type=CONST(Legal));
                                                   OnValidate=BEGIN
                                                                IF "Company Address Code" <> xRec."Company Address Code" THEN BEGIN
                                                                  "Company Address Language Code" := '';
                                                                  IF "Company Address Code" <> '' THEN
                                                                    TESTFIELD(Header,FALSE);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CLEAR(CompanyAddressList);
                                                              IF CompanyAddress.GET("Company Address Code","Company Address Language Code") THEN
                                                                CompanyAddressList.SETRECORD(CompanyAddress);

                                                              CompanyAddressList.LOOKUPMODE := TRUE;
                                                              IF CompanyAddressList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                CompanyAddressList.GETRECORD(CompanyAddress);
                                                                IF ("Company Address Code" <> CompanyAddress.Code) OR
                                                                   ("Company Address Language Code" <> CompanyAddress."Language Code")
                                                                THEN
                                                                  TESTFIELD(Header,FALSE);
                                                                "Company Address Code" := CompanyAddress.Code;
                                                                "Company Address Language Code" := CompanyAddress."Language Code";
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Company Address Code;
                                                              RUS=Код адреса организации] }
    { 27  ;   ;Company Address Language Code;Code10;
                                                   TableRelation="Company Address"."Language Code" WHERE (Code=FIELD(Company Address Code),
                                                                                                          Address Type=CONST(Legal));
                                                   OnValidate=BEGIN
                                                                IF ("Company Address Language Code" <> xRec."Company Address Language Code") AND
                                                                   ("Company Address Language Code" <> '')
                                                                THEN
                                                                  TESTFIELD(Header,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Company Address Language Code;
                                                              RUS=Код языка адреса организации] }
    { 28  ;   ;Uppercase Text Excel Format;Boolean;OnValidate=BEGIN
                                                                IF "Uppercase Text Excel Format" THEN
                                                                  TESTFIELD(Header,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Uppercase Text Excel Format;
                                                              RUS=Форм.в Excel текст загл.букв.] }
    { 29  ;   ;Uppercase Text XML Format;Boolean  ;OnValidate=BEGIN
                                                                IF "Uppercase Text XML Format" THEN
                                                                  TESTFIELD(Header,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Uppercase Text XML Format;
                                                              RUS=Форм.в XML текст загл.букв.] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Sequence No.                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1210007 : TextConst 'ENU=Excel not found.;RUS=Excel не установлен.';
      Vendor@1210035 : Record 23;
      StatutoryReportSetup@1210041 : Record 26569;
      FormatVersion@1210001 : Record 26573;
      CompanyAddress@1210003 : Record 12425;
      BLOBRef@1210006 : TEMPORARY Record 99008535;
      CompanyAddressList@1210002 : Page 12493;
      FileMgt@1210004 : Codeunit 419;
      XlApp@1210017 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1210016 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorkbookClass" RUNONCLIENT;
      XlHelper@1210012 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      XlWrkSht@1000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      XlWrkshts@1003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheets";
      RootNode@1210020 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Text003@1210005 : TextConst 'ENU=Tables for %1 already exist and will be deleted. Do you want to continue?;RUS=Таблицы для %1 уже существуют и будут удалены. Продолжить?';
      Text007@1210010 : TextConst 'ENU=You must specify File Name.;RUS=Необходимо указать имя файла.';
      Text008@1210011 : TextConst 'ENU=Stat. Report Requisites Groups for Report %1 already exist and will be deleted. Do you want to continue?;RUS=Группы показателей регламентного отчета для отчета %1 уже существуют и будут удалены. Продолжить?';
      Text010@1210013 : TextConst 'ENU=Import data from Excel...;RUS=Импорт данных из Excel...';
      Text011@1210014 : TextConst 'ENU=You must specify Statutury Report Code.;RUS=Необходимо указать код регламентного отчета.';
      i@1210023 : Integer;
      EndOfLoop@1210024 : Integer;
      SequenceNo@1210031 : Integer;
      LineNo@1210032 : Integer;
      Text020@1210029 : TextConst 'ENU=XML Parser Error:\;RUS=Ошибка средства синтаксического анализа XML:\';
      Text023@1210026 : TextConst 'ENU=File %1 is not a XML schema.;RUS=Файл %1 не является XML схемой.';
      Text024@1210025 : TextConst 'ENU=Parent node for "%1" is not instantiated.;RUS=Не создан экземпляр родительского узла для "%1".';
      Text025@1210021 : TextConst 'ENU=The "%1" node could not be found as a child node for the "%2" node.;RUS=Узел "%1" как дочерний для узла "%2" не обнаружен.';
      Text026@1210033 : TextConst 'ENU=The existent XML schema will be deleted. Do you want to continue?;RUS=Существующая XML схема будет удалена. Продолжить?';
      Text027@1210034 : TextConst 'ENU=%1 does not contain XML schema.;RUS=%1 не содержит XML схемы.';
      Text028@1210036 : TextConst 'ENU=The existent Excel template settings will be deleted. Do you want to continue?;RUS=Существующие настройки шаблона Excel будут удалены. Продолжить?';
      Text029@1210037 : TextConst 'ENU=XML Element Lines for Report %1 already exist and will be deleted. Do you want to continue?;RUS=Строки XML элемента для отчета %1 уже существуют и будут удалены. Продолжить?';
      Text030@1210038 : TextConst 'ENU=%1 cannot be changed because %2 %3 contains report data.;RUS=Невозможно изменить %1, поскольку %2 %3 содержит данные отчета.';
      Text031@1210039 : TextConst 'ENU=%1 cannot be %2 because %3 is not empty.;RUS=%1 не может быть %2, поскольку %3 не является пустым.';
      Text032@1210008 : TextConst 'ENU=This function is allowed for classic client only.;RUS=Использование этой функции допускается только в клиенте Classic.';
      CurrInsCategoryCode@1210000 : Code[2];
      Exception@1210015 : ' ,RSV1 Section 2';

    PROCEDURE ExportReportData@1210004(ReportDataNo@1210007 : Code[20];StartDate@1210016 : Date;EndDate@1210017 : Date;FileName@1210018 : Text[250];DataSource@1210000 : 'Database,Excel');
    BEGIN
      CASE DataSource OF
        DataSource::Database:
          CalculateDataFromIntSource(ReportDataNo,StartDate,EndDate);
        DataSource::Excel:
          ImportDataFromExcel(ReportDataNo,FileName);
      END;
    END;

    PROCEDURE CalculateDataFromIntSource@1210017(DataHeaderNo@1210003 : Code[20];StartDate@1210007 : Date;EndDate@1210002 : Date) : Boolean;
    VAR
      StatutoryReportTable@1210000 : Record 26552;
      StatReportTableRow@1210005 : Record 26553;
      StatReportTableColumn@1210004 : Record 26554;
      TableIndividualRequisite@1210015 : Record 26556;
      StatReportExcelSheet@1210006 : Record 26562;
    BEGIN
      StatutoryReportTable.SETRANGE("Report Code",Code);
      IF StatutoryReportTable.FINDSET THEN BEGIN
        REPEAT
          IF StatutoryReportTable.Exception > 0 THEN
            ProcessExceptions(StatutoryReportTable,DataHeaderNo,StartDate,EndDate)
          ELSE BEGIN
            StatReportExcelSheet."Report Code" := Code;
            StatReportExcelSheet."Table Code" := StatutoryReportTable.Code;
            StatReportExcelSheet."Report Data No." := DataHeaderNo;
            StatReportExcelSheet."Sheet Name" := StatutoryReportTable."Excel Sheet Name";
            IF NOT StatReportExcelSheet.FIND THEN
              StatReportExcelSheet.INSERT(TRUE);

            IF StatutoryReportTable."Int. Source Type" <> StatutoryReportTable."Int. Source Type"::" " THEN BEGIN
              StatReportTableRow.SETRANGE("Report Code",Code);
              StatReportTableRow.SETRANGE("Table Code",StatutoryReportTable.Code);
              StatReportTableColumn.SETRANGE("Report Code",Code);
              StatReportTableColumn.SETRANGE("Table Code",StatutoryReportTable.Code);

              IF StatReportTableRow.FINDSET THEN
                REPEAT
                  IF StatReportTableColumn.FINDSET THEN
                    REPEAT
                      CreateCellFromIntSource(
                        DataHeaderNo,
                        Code,
                        StatutoryReportTable.Code,
                        StatReportTableRow."Line No.",
                        StatReportTableColumn."Line No.",
                        StartDate,
                        EndDate,
                        StatReportExcelSheet."Sheet Name");
                    UNTIL StatReportTableColumn.NEXT = 0;
                UNTIL StatReportTableRow.NEXT = 0;

              TableIndividualRequisite.SETRANGE("Report Code",Code);
              TableIndividualRequisite.SETRANGE("Table Code",StatutoryReportTable.Code);
              IF TableIndividualRequisite.FINDSET THEN
                REPEAT
                  CreateCellFromIntSource(
                    DataHeaderNo,
                    Code,
                    StatutoryReportTable.Code,
                    TableIndividualRequisite."Line No.",
                    0,
                    StartDate,
                    EndDate,
                    StatReportExcelSheet."Sheet Name");
                UNTIL TableIndividualRequisite.NEXT = 0;
            END;
          END;
        UNTIL StatutoryReportTable.NEXT = 0;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ProcessExceptions@1170000000(StatutoryReportTable@1170000000 : Record 26552;DataHeaderNo@1210003 : Code[20];StartDate@1210007 : Date;EndDate@1210002 : Date);
    BEGIN
      CASE StatutoryReportTable.Exception OF
        StatutoryReportTable.Exception::"RSV1 Section 2":
          Exception_RSV1_2012_Section2(StatutoryReportTable,DataHeaderNo,StartDate,EndDate);
      END;
    END;

    PROCEDURE Exception_RSV1_2012_Section2@1170000004(StatutoryReportTable@1170000000 : Record 26552;DataHeaderNo@1210003 : Code[20];StartDate@1210007 : Date;EndDate@1210002 : Date);
    VAR
      StatReportTableRow@1210005 : Record 26553;
      StatReportTableColumn@1210004 : Record 26554;
      TableIndividualRequisite@1210015 : Record 26556;
      StatReportExcelSheet@1210006 : Record 26562;
      StatutoryReportDataValue@1170000001 : Record 26564;
    BEGIN
      Exception := Exception::"RSV1 Section 2";

      Create_RSV1_2012_Sec2_Sheet(StatutoryReportTable,DataHeaderNo,StartDate,EndDate,'01');
      Create_RSV1_2012_Sec2_Sheet(StatutoryReportTable,DataHeaderNo,StartDate,EndDate,'03');

      Exception := Exception::" ";
    END;

    PROCEDURE Create_RSV1_2012_Sec2_Sheet@1170000003(StatutoryReportTable@1170000000 : Record 26552;DataHeaderNo@1210003 : Code[20];StartDate@1210007 : Date;EndDate@1210002 : Date;InsuranceFeeCategoryCode@1170000002 : Code[2]);
    VAR
      StatReportTableRow@1210005 : Record 26553;
      StatReportTableColumn@1210004 : Record 26554;
      TableIndividualRequisite@1210015 : Record 26556;
      StatReportExcelSheet@1210006 : Record 26562;
      StatutoryReportDataValue@1170000001 : Record 26564;
    BEGIN
      CurrInsCategoryCode := InsuranceFeeCategoryCode;

      StatReportExcelSheet."Report Code" := Code;
      StatReportExcelSheet."Table Code" := StatutoryReportTable.Code;
      StatReportExcelSheet."Report Data No." := DataHeaderNo;
      StatReportExcelSheet."Parent Sheet Name" := StatutoryReportTable."Excel Sheet Name";
      StatReportExcelSheet."New Page" := TRUE;
      CASE InsuranceFeeCategoryCode OF
        '01':
          BEGIN
            StatReportExcelSheet."Sheet Name" := StatutoryReportTable."Excel Sheet Name";
            StatReportExcelSheet."Sequence No." := 1;
          END;
        '03':
          BEGIN
            StatReportExcelSheet."Sequence No." := 1;
            StatReportExcelSheet."Sheet Name" := StatutoryReportTable."Excel Sheet Name" + ' (2)';
          END;
      END;
      IF NOT StatReportExcelSheet.FIND THEN
        StatReportExcelSheet.INSERT(TRUE);

      StatutoryReportTable.TESTFIELD("Int. Source Type",StatutoryReportTable."Int. Source Type"::"Payroll Analysis Report");
      StatReportTableRow.SETRANGE("Report Code",Code);
      StatReportTableRow.SETRANGE("Table Code",StatutoryReportTable.Code);
      StatReportTableColumn.SETRANGE("Report Code",Code);
      StatReportTableColumn.SETRANGE("Table Code",StatutoryReportTable.Code);

      IF StatReportTableRow.FINDSET THEN
        REPEAT
          IF StatReportTableColumn.FINDSET THEN
            REPEAT
              CreateCellFromIntSource(
                DataHeaderNo,
                Code,
                StatutoryReportTable.Code,
                StatReportTableRow."Line No.",
                StatReportTableColumn."Line No.",
                StartDate,
                EndDate,
                StatReportExcelSheet."Sheet Name");
            UNTIL StatReportTableColumn.NEXT = 0;
        UNTIL StatReportTableRow.NEXT = 0;

      TableIndividualRequisite.SETRANGE("Report Code",Code);
      TableIndividualRequisite.SETRANGE("Table Code",StatutoryReportTable.Code);
      IF TableIndividualRequisite.FINDFIRST THEN BEGIN
          StatutoryReportDataValue.AddValue(
          DataHeaderNo,
          Code,
          StatutoryReportTable.Code,
          StatReportExcelSheet."Sheet Name",
          TableIndividualRequisite."Line No.",
          0,
          InsuranceFeeCategoryCode);
      END;

      StatutoryReportTable.UpdatePageIndicReqValue(DataHeaderNo,StatReportExcelSheet."Sheet Name",StatReportExcelSheet);
    END;

    PROCEDURE CreateCellFromIntSource@1210020(DataHeaderNo@1210005 : Code[20];ReportCode@1210001 : Code[20];TableCode@1210002 : Code[20];RowNo@1210003 : Integer;ColumnNo@1210004 : Integer;StartDate@1210017 : Date;EndDate@1210016 : Date;SheetName@1210015 : Text[30]);
    VAR
      AccScheduleName@1210011 : Record 84;
      AccScheduleLine@1210010 : Record 85;
      ColumnLayout@1210009 : Record 334;
      PayrollAnalysisReportName@1210012 : Record 14960;
      PayrollAnalysisLine@1210018 : Record 14962;
      PayrollAnalysisColumn@1210019 : Record 14964;
      TaxRegisterAccumulation@1210008 : Record 17208;
      TaxCalcAccumulation@1210007 : Record 17314;
      StatutoryReportDataValue@1210014 : Record 26564;
      StatReportTableMapping@1210000 : Record 26587;
      AccSchedManagement@1210013 : Codeunit 8;
      PayrollAnalysisReportMgt@1210020 : Codeunit 14960;
      CellValue@1210006 : Decimal;
    BEGIN
      IF StatReportTableMapping.GET(
           ReportCode,
           TableCode,
           RowNo,
           ColumnNo)
      THEN
        IF StatReportTableMapping."Int. Source No." <> '' THEN BEGIN
          CASE StatReportTableMapping."Int. Source Type" OF
            StatReportTableMapping."Int. Source Type"::"Acc. Schedule":
              BEGIN
                AccScheduleName.GET(StatReportTableMapping."Int. Source No.");
                AccScheduleName.TESTFIELD("Default Column Layout");
                AccScheduleLine.GET(
                  StatReportTableMapping."Int. Source No.",
                  StatReportTableMapping."Internal Source Row No.");
                AccScheduleLine.SETFILTER("Date Filter",'%1..%2',StartDate,EndDate);
                ColumnLayout.GET(
                  AccScheduleName."Default Column Layout",
                  StatReportTableMapping."Internal Source Column No.");

                //NC NOS-26 > SPA
                //CellValue := AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,FALSE);
                CellValue := AccSchedManagement.CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE,0);
                //NC NOS-26 < SPA
              END;
            StatReportTableMapping."Int. Source Type"::"Tax Register":
              BEGIN
                TaxRegisterAccumulation.SETRANGE("Section Code",StatReportTableMapping."Int. Source Section Code");
                TaxRegisterAccumulation.SETRANGE("Tax Register No.",StatReportTableMapping."Int. Source No.");
                TaxRegisterAccumulation.SETFILTER("Starting Date",'%1..',StartDate);
                TaxRegisterAccumulation.SETFILTER("Ending Date",'..%1',EndDate);
                TaxRegisterAccumulation.SETRANGE("Template Line No.",StatReportTableMapping."Internal Source Row No.");
                IF TaxRegisterAccumulation.FINDLAST THEN
                  CellValue := TaxRegisterAccumulation.Amount;
              END;
            StatReportTableMapping."Int. Source Type"::"Tax Difference":
              BEGIN
                TaxCalcAccumulation.SETRANGE("Section Code",StatReportTableMapping."Int. Source Section Code");
                TaxCalcAccumulation.SETRANGE("Register No.",StatReportTableMapping."Int. Source No.");
                TaxCalcAccumulation.SETFILTER("Starting Date",'%1..',StartDate);
                TaxCalcAccumulation.SETFILTER("Ending Date",'..%1',EndDate);
                TaxCalcAccumulation.SETRANGE("Template Line No.",StatReportTableMapping."Internal Source Row No.");
                IF TaxCalcAccumulation.FINDLAST THEN
                  CellValue := TaxCalcAccumulation.Amount;
              END;
            StatReportTableMapping."Int. Source Type"::"Payroll Analysis Report":
              BEGIN
                PayrollAnalysisReportName.GET(StatReportTableMapping."Int. Source No.");
                PayrollAnalysisReportName.TESTFIELD("Analysis Line Template Name");
                PayrollAnalysisReportName.TESTFIELD("Analysis Column Template Name");
                PayrollAnalysisLine.GET(
                  PayrollAnalysisReportName."Analysis Line Template Name",
                  StatReportTableMapping."Internal Source Row No.");
                PayrollAnalysisLine.SETFILTER("Date Filter",'%1..%2',StartDate,EndDate);
                PayrollAnalysisColumn.GET(
                  PayrollAnalysisReportName."Analysis Column Template Name",
                  StatReportTableMapping."Internal Source Column No.");

                IF Exception = Exception::"RSV1 Section 2" THEN
                  PayrollAnalysisLine.SETRANGE("Insurance Fee Category Filter",CurrInsCategoryCode);

                CellValue := PayrollAnalysisReportMgt.CalcCell(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
              END;
          END;

          CellValue := AdjustByOKEI(
              DataHeaderNo,
              TableCode,
              RowNo,
              ColumnNo,
              CellValue);

          StatutoryReportDataValue.AddValue(
            DataHeaderNo,
            ReportCode,
            TableCode,
            SheetName,
            RowNo,
            ColumnNo,
            FORMAT(CellValue));
        END;
    END;

    PROCEDURE ImportDataFromExcel@1210003(DataHeaderNo@1210011 : Code[20];FileName@1210009 : Text[250]);
    VAR
      StatutoryReportTable@1210015 : Record 26552;
      SectionCellNameBuffer@1210004 : TEMPORARY Record 26568;
      StatReportRequisitesGroup@1210003 : Record 26557;
      StatReportExcelSheet@1210013 : Record 26562;
      Window@1210001 : Dialog;
      SectionName@1210002 : Text[250];
      ErrorMessage@1210010 : Text[250];
    BEGIN
      Window.OPEN(Text010);

      IF FileName = '' THEN
        ERROR(Text007);

      FillSectionCellNameBuffer(SectionCellNameBuffer);

      XlApp := XlApp.ApplicationClass;
      IF ISNULL(XlApp) THEN
        ERROR(Text000);

      XlHelper.CallOpen(XlApp,FileName);
      XlWrkBk := XlApp.ActiveWorkbook;

      i := 1;
      EndOfLoop := XlWrkBk.Worksheets.Count;
      WHILE i <= EndOfLoop DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(i);

        StatutoryReportTable.RESET;
        StatutoryReportTable.SETRANGE("Report Code",Code);
        StatutoryReportTable.SETRANGE("Excel Sheet Name",XlWrkSht.Name);
        IF StatutoryReportTable.FINDSET THEN
          REPEAT
            IF NOT StatutoryReportTable.ImportExcelSheet(DataHeaderNo,XlWrkSht,XlWrkSht.Name,ErrorMessage) THEN
              ErrorExcelProcessing(ErrorMessage);
          UNTIL StatutoryReportTable.NEXT = 0
        ELSE BEGIN
          SectionName := FindSectionName(SectionCellNameBuffer);
          IF SectionName <> '' THEN BEGIN
            StatutoryReportTable.SETRANGE("Excel Sheet Name");
            StatutoryReportTable.SETRANGE("Page Indication Text",SectionName);
            IF StatutoryReportTable.FINDSET THEN
              REPEAT
                IF StatutoryReportTable.CheckTableIdentText(XlWrkSht) THEN
                  IF NOT StatutoryReportTable.ImportExcelSheet(DataHeaderNo,XlWrkSht,XlWrkSht.Name,ErrorMessage) THEN
                    ErrorExcelProcessing(ErrorMessage);
              UNTIL StatutoryReportTable.NEXT = 0;
          END;
        END;

        i := i + 1;
      END;

      StatutoryReportTable.SETRANGE("Report Code",Code);
      StatReportExcelSheet.SETRANGE("Report Code",Code);
      StatReportExcelSheet.SETRANGE("Report Data No.",DataHeaderNo);
      StatReportRequisitesGroup.SETRANGE("Report Code",Code);
      IF StatReportRequisitesGroup.FINDSET THEN
        REPEAT
          IF StatReportRequisitesGroup."Excel Sheet Name" <> '' THEN BEGIN
            StatReportExcelSheet.SETRANGE("Parent Sheet Name",StatReportRequisitesGroup."Excel Sheet Name");
            IF NOT StatReportExcelSheet.FINDFIRST THEN BEGIN
              StatutoryReportTable.SETRANGE("Excel Sheet Name",StatReportRequisitesGroup."Excel Sheet Name");
              IF StatutoryReportTable.FINDSET THEN
                REPEAT
                  StatReportExcelSheet.INIT;
                  StatReportExcelSheet."Report Code" := Code;
                  StatReportExcelSheet."Report Data No." := DataHeaderNo;
                  StatReportExcelSheet."Table Code" := StatutoryReportTable.Code;
                  StatReportExcelSheet."Sheet Name" := StatReportRequisitesGroup."Excel Sheet Name";
                  StatReportExcelSheet."Parent Sheet Name" := StatReportRequisitesGroup."Excel Sheet Name";
                  StatReportExcelSheet."Sequence No." := 1;
                  StatReportExcelSheet."New Page" := TRUE;
                  StatReportExcelSheet.INSERT;
                UNTIL StatutoryReportTable.NEXT = 0;
            END;
          END;
        UNTIL StatReportRequisitesGroup.NEXT = 0;

      CLEAR(XlWrkSht);
      CLEAR(XlWrkBk);
      XlApp.Quit;
      CLEAR(XlApp);
      Window.CLOSE;
    END;

    PROCEDURE CopyReport@1210002();
    VAR
      StatutoryReport@1210006 : Record 26550;
      StatutoryReportTable@1210002 : Record 26552;
      StatutoryReportTableFrom@1210005 : Record 26552;
      StatReportRequisitesGroup@1210003 : Record 26557;
      StatReportRequisitesGroupFrom@1210004 : Record 26557;
      XMLElementLine@1210007 : Record 26570;
      XMLElementLineFrom@1210008 : Record 26570;
      StatReportTableMapping@1210009 : Record 26587;
      StatReportTableMappingFrom@1210010 : Record 26587;
      CopyReportStructure@1210000 : Page 26572;
      CopyReportFromCode@1210001 : Code[20];
    BEGIN
      CopyReportStructure.SetParameters(Code);
      IF CopyReportStructure.RUNMODAL <> ACTION::OK THEN
        EXIT;

      CopyReportStructure.GetParameters(CopyReportFromCode);
      IF CopyReportFromCode = '' THEN
        ERROR(Text011);

      StatutoryReportTable.SETRANGE("Report Code",Code);
      IF NOT StatutoryReportTable.ISEMPTY THEN
        IF CONFIRM(Text003,FALSE,Code) THEN
          StatutoryReportTable.DELETEALL(TRUE)
        ELSE
          ERROR('');

      StatReportRequisitesGroup.SETRANGE("Report Code",Code);
      IF NOT StatReportRequisitesGroup.ISEMPTY THEN
        IF CONFIRM(Text008,FALSE,Code) THEN
          StatReportRequisitesGroup.DELETEALL(TRUE)
        ELSE
          ERROR('');

      XMLElementLine.SETRANGE("Report Code",Code);
      IF NOT XMLElementLine.ISEMPTY THEN
        IF CONFIRM(Text029,FALSE,Code) THEN
          XMLElementLine.DELETEALL(TRUE)
        ELSE
          ERROR('');

      StatutoryReport.GET(CopyReportFromCode);
      "Format Version Code" := StatutoryReport."Format Version Code";
      Description := StatutoryReport.Description;
      "Group Code" := StatutoryReport."Group Code";
      "Sender No." := StatutoryReport."Sender No.";
      "Report Type" := StatutoryReport."Report Type";
      Active := StatutoryReport.Active;
      "Ending Date" := StatutoryReport."Ending Date";
      "Starting Date" := StatutoryReport."Starting Date";
      "Recipient Tax Authority Code" := StatutoryReport."Recipient Tax Authority Code";
      "Recipient Tax Authority SONO" := StatutoryReport."Recipient Tax Authority SONO";
      "Admin. Tax Authority Code" := StatutoryReport."Admin. Tax Authority Code";
      "Admin. Tax Authority SONO" := StatutoryReport."Admin. Tax Authority SONO";
      Header := StatutoryReport.Header;
      MODIFY;

      StatutoryReportTableFrom.SETRANGE("Report Code",CopyReportFromCode);
      IF StatutoryReportTableFrom.FINDSET THEN
        REPEAT
          StatutoryReportTable := StatutoryReportTableFrom;
          StatutoryReportTable."Report Code" := Code;
          StatutoryReportTable.INSERT;
          StatutoryReportTable.CopyTableStructure(CopyReportFromCode,StatutoryReportTableFrom.Code);
        UNTIL StatutoryReportTableFrom.NEXT = 0;

      StatReportRequisitesGroupFrom.SETRANGE("Report Code",CopyReportFromCode);
      IF StatReportRequisitesGroupFrom.FINDSET THEN
        REPEAT
          StatReportRequisitesGroup := StatReportRequisitesGroupFrom;
          StatReportRequisitesGroup."Report Code" := Code;
          StatReportRequisitesGroup.INSERT;
          StatReportRequisitesGroup.CopyRequisitesGroup(CopyReportFromCode,StatReportRequisitesGroupFrom.Name);
        UNTIL StatReportRequisitesGroupFrom.NEXT = 0;

      XMLElementLineFrom.SETRANGE("Report Code",CopyReportFromCode);
      IF XMLElementLineFrom.FINDSET THEN
        REPEAT
          XMLElementLine := XMLElementLineFrom;
          XMLElementLine."Report Code" := Code;
          XMLElementLine.INSERT;
          XMLElementLine.CopyElement(CopyReportFromCode);
        UNTIL XMLElementLineFrom.NEXT = 0;

      StatReportTableMappingFrom.SETRANGE("Report Code",CopyReportFromCode);
      IF StatReportTableMappingFrom.FINDSET THEN
        REPEAT
          StatReportTableMapping := StatReportTableMappingFrom;
          StatReportTableMapping."Report Code" := Code;
          StatReportTableMapping.INSERT;
        UNTIL StatReportTableMappingFrom.NEXT = 0;
    END;

    PROCEDURE ErrorExcelProcessing@1210000(ErrorMessage@1210002 : Text[250]);
    BEGIN
      CLEAR(XlWrkSht);
      CLEAR(XlWrkBk);
      XlApp.Quit;
      CLEAR(XlApp);
      ERROR(ErrorMessage);
    END;

    PROCEDURE FillSectionCellNameBuffer@1210005(VAR SectionCellNameBuffer@1210000 : Record 26568);
    VAR
      StatutoryReportTable@1210001 : Record 26552;
      EntryNo@1210002 : Integer;
    BEGIN
      StatutoryReportTable.SETRANGE("Report Code",Code);
      IF StatutoryReportTable.FINDSET THEN
        REPEAT
          IF StatutoryReportTable."Scalable Table" OR StatutoryReportTable."Multipage Table" THEN BEGIN
            StatutoryReportTable.TESTFIELD("Page Indic. Excel Cell Name");
            SectionCellNameBuffer.SETRANGE("Section Excel Cell Name",StatutoryReportTable."Page Indic. Excel Cell Name");
            IF NOT SectionCellNameBuffer.FINDFIRST THEN BEGIN
              EntryNo := EntryNo + 1;
              SectionCellNameBuffer."Entry No." := EntryNo;
              SectionCellNameBuffer."Section Excel Cell Name" := StatutoryReportTable."Page Indic. Excel Cell Name";
              SectionCellNameBuffer.INSERT;
            END;
          END;
        UNTIL StatutoryReportTable.NEXT = 0;

      SectionCellNameBuffer.RESET;
    END;

    PROCEDURE FindSectionName@1210009(VAR SectionCellNameBuffer@1210000 : Record 26568) SectionName : Text[250];
    VAR
      StatutoryReportTable@1210001 : Record 26552;
    BEGIN
      SectionCellNameBuffer.RESET;
      StatutoryReportTable.SETRANGE("Report Code",Code);
      IF SectionCellNameBuffer.FINDSET THEN
        REPEAT
          SectionName := COPYSTR(FORMAT(XlWrkSht.Range(SectionCellNameBuffer."Section Excel Cell Name").Value),1,MAXSTRLEN(SectionName))
            ;
          IF SectionName <> '' THEN BEGIN
            StatutoryReportTable.SETRANGE("Page Indication Text",SectionName);
            IF StatutoryReportTable.FINDFIRST THEN
              EXIT;
          END;
        UNTIL SectionCellNameBuffer.NEXT = 0;
    END;

    PROCEDURE ImportExcelSheetNames@1210006();
    VAR
      StatReportExcelSheet@1210001 : Record 26562;
      SheetName@1210000 : Text[250];
      FileName@1470000 : Text[1024];
    BEGIN
      FormatVersion.GET("Format Version Code");
      IF FormatVersion."Excel File Name" = '' THEN
        EXIT;

      FormatVersion.CALCFIELDS("Report Template");
      BLOBRef.Blob := FormatVersion."Report Template";
      FileName := FileMgt.BLOBExport(BLOBRef,FileMgt.ClientTempFileName('xls'),FALSE);

      IF FileName = '' THEN
        EXIT;

      XlApp := XlApp.ApplicationClass;
      IF ISNULL(XlApp) THEN
        ERROR(Text000);

      StatReportExcelSheet.SETRANGE("Report Code",Code);
      StatReportExcelSheet.SETRANGE("Report Data No.",'');
      IF NOT StatReportExcelSheet.ISEMPTY THEN
        IF NOT CONFIRM(Text028,FALSE) THEN
          ERROR('');
      StatReportExcelSheet.DELETEALL;

      XlHelper.CallOpen(XlApp,FileName);
      XlWrkBk := XlApp.ActiveWorkbook;
      i := 1;
      EndOfLoop := XlWrkBk.Worksheets.Count;
      WHILE i <= EndOfLoop DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(i);
        SheetName := XlWrkSht.Name;

        IF SheetName <> '' THEN BEGIN
          StatReportExcelSheet."Report Code" := Code;
          StatReportExcelSheet."Report Data No." := '';
          StatReportExcelSheet."Sequence No." := i;
          StatReportExcelSheet."Sheet Name" := SheetName;
          StatReportExcelSheet.INSERT;
        END;

        i := i + 1;
      END;
      CLEAR(XlWrkSht);
      CLEAR(XlWrkBk);
      XlApp.Quit;
      CLEAR(XlApp);
    END;

    PROCEDURE LookupExcelSheetNames@1210008(VAR ExcelSheetName@1210002 : Text[250]);
    VAR
      StatReportExcelSheet@1210001 : Record 26562;
      SelectExcelSheetName@1210000 : Page 26579;
    BEGIN
      StatReportExcelSheet.FILTERGROUP(2);
      StatReportExcelSheet.SETRANGE("Report Code",Code);
      StatReportExcelSheet.SETRANGE("Report Data No.",'');
      StatReportExcelSheet.FILTERGROUP(0);
      IF ExcelSheetName <> '' THEN BEGIN
        StatReportExcelSheet.SETRANGE("Sheet Name",ExcelSheetName);
        IF StatReportExcelSheet.FINDFIRST THEN;
        StatReportExcelSheet.SETRANGE("Sheet Name");
        SelectExcelSheetName.SETRECORD(StatReportExcelSheet);
      END;
      SelectExcelSheetName.SETTABLEVIEW(StatReportExcelSheet);
      SelectExcelSheetName.LOOKUPMODE := TRUE;
      IF SelectExcelSheetName.RUNMODAL = ACTION::LookupOK THEN BEGIN
        SelectExcelSheetName.GETRECORD(StatReportExcelSheet);
        ExcelSheetName := StatReportExcelSheet."Sheet Name";
      END;
    END;

    PROCEDURE ImportXMLSchema@1210025();
    VAR
      XMLElementLine@1210000 : Record 26570;
      FormatVersion@1210001 : Record 26573;
      XMLDOMManagement@1210003 : Codeunit 6224;
      XmlDoc@1210002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      NodeList@1210006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InStr@1210004 : InStream;
      FileName@1210008 : Text[250];
    BEGIN
      FormatVersion.GET("Format Version Code");
      IF FormatVersion."XML Schema File Name" = '' THEN
        EXIT;

      XMLElementLine.SETRANGE("Report Code",Code);
      XMLElementLine.DELETEALL;

      FormatVersion.CALCFIELDS("XML Schema");
      BLOBRef.Blob := FormatVersion."XML Schema";
      FileName := FileMgt.BLOBExport(BLOBRef,FileMgt.ClientTempFileName('xml'),FALSE);

      IF FileName = '' THEN
        EXIT;

      BLOBRef.Blob.CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XmlDoc);

      RootNode := XmlDoc.DocumentElement;
      IF ExtractPrefix(RootNode.Name) <> 'schema' THEN
        ERROR(Text023,FileName);

      NodeList := RootNode.ChildNodes;
      i := 0;
      REPEAT
        ChildNode := NodeList.Item(i);
        i += 1;
      UNTIL (i = NodeList.Count) OR (ExtractPrefix(ChildNode.Name) = 'element');

      ParseNode(ChildNode,0,0,FALSE);
    END;

    PROCEDURE ParseNode@1210015(Node@1210007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ParentEntryNo@1210005 : Integer;IndentNo@1210006 : Integer;Choice@1470000 : Boolean);
    VAR
      NodeList@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ElementName@1210004 : Text[150];
      TypeName@1210008 : Text[100];
      RefName@1210011 : Text[100];
      i@1210002 : Integer;
      EntryNo@1210010 : Integer;
      ChoiceNode@1470001 : Boolean;
      ElementType@1210009 : 'Complex,Simple';
    BEGIN
      CASE ExtractPrefix(Node.Name) OF
        'element':
          BEGIN
            IF GetAttribute(Node,'name',ElementName) THEN BEGIN
              ElementType := GetElementType(Node);

              EntryNo := AddSchemaLine(
                  Node,
                  ParentEntryNo,
                  ElementName,
                  ElementType,
                  IndentNo,
                  Choice);

              IF GetAttribute(Node,'type',TypeName) AND (ElementType = ElementType::Complex) THEN
                ParseType(TypeName,EntryNo,IndentNo,Choice);
            END;

            IF GetAttribute(Node,'ref',RefName) THEN
              ParseRef(RefName,ParentEntryNo,IndentNo - 1);
          END;
        'attribute':
          IF GetAttribute(Node,'name',ElementName) THEN
            EntryNo := AddSchemaLine(
                Node,
                ParentEntryNo,
                ElementName,
                2,
                IndentNo,
                Choice);
        'choice':
          ChoiceNode := TRUE;
      END;

      IF ElementName <> '' THEN BEGIN
        ParentEntryNo := EntryNo;
        IndentNo := IndentNo + 1;
      END;

      NodeList := Node.ChildNodes;
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        ChildNode := NodeList.Item(i);
        ParseNode(ChildNode,ParentEntryNo,IndentNo,ChoiceNode);
      END;
    END;

    PROCEDURE ParseType@1210037(TypeName@1210001 : Text[100];ParentEntryNo@1210005 : Integer;IndentNo@1210006 : Integer;Choice@1470000 : Boolean);
    VAR
      NodeList@1210007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ElementName@1210004 : Text[150];
      i@1210002 : Integer;
    BEGIN
      NodeList := RootNode.ChildNodes;
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        ChildNode := NodeList.Item(i);
        IF ExtractPrefix(ChildNode.Name) IN ['complexType','simpleType'] THEN
          IF GetAttribute(ChildNode,'name',ElementName) THEN
            IF ElementName = TypeName THEN
              CASE ExtractPrefix(ChildNode.Name) OF
                'complexType':
                  ParseNode(ChildNode,ParentEntryNo,IndentNo + 1,FALSE);
                'simpleType':
                  AddSchemaLine(
                    ChildNode,
                    ParentEntryNo,
                    ElementName,
                    1,
                    IndentNo,
                    Choice);
              END;
      END;
    END;

    PROCEDURE ParseRef@1210010(RefName@1210001 : Text[100];ParentEntryNo@1210005 : Integer;IndentNo@1210006 : Integer);
    VAR
      NodeList@1210008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ElementName@1210004 : Text[150];
      i@1210002 : Integer;
    BEGIN
      NodeList := RootNode.ChildNodes;
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        ChildNode := NodeList.Item(i);
        IF ExtractPrefix(ChildNode.Name) = 'element' THEN
          IF GetAttribute(ChildNode,'name',ElementName) THEN
            IF ElementName = RefName THEN
              ParseNode(ChildNode,ParentEntryNo,IndentNo + 1,FALSE);
      END;
    END;

    PROCEDURE AddSchemaLine@1210011(Node@1210009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ParentEntryNo@1210001 : Integer;ElementName@1210002 : Text[150];ElementType@1210003 : 'Complex,Simple,Attribute';IndentNo@1210004 : Integer;Choice@1470000 : Boolean) : Integer;
    VAR
      XMLElementLine@1210007 : Record 26570;
      ParentXMLElementLine@1210000 : Record 26570;
      TypeName@1210013 : Text[100];
      Use@1210006 : Text[100];
      DataType@1210008 : ' ,Text,Integer,Decimal,Date';
      FractionDigits@1210014 : Integer;
    BEGIN
      LineNo := LineNo + 10000;

      XMLElementLine."Report Code" := Code;
      XMLElementLine."Line No." := LineNo;
      XMLElementLine."Parent Line No." := ParentEntryNo;
      IF ParentXMLElementLine.GET(Code,ParentEntryNo) THEN
        XMLElementLine."Parent Element Name" := ParentXMLElementLine."Element Name";
      XMLElementLine."Element Name" := ElementName;
      XMLElementLine."Element Type" := ElementType;
      IF ElementType IN [ElementType::Simple,ElementType::Attribute] THEN
        XMLElementLine."Link Type" := XMLElementLine."Link Type"::Value;
      XMLElementLine.Indentation := IndentNo;
      XMLElementLine."Sequence No." := SequenceNo;
      XMLElementLine.Description := GetNodeDescription(Node);
      XMLElementLine.Choice := Choice;
      IF GetAttribute(Node,'use',Use) THEN BEGIN
        CASE Use OF
          'required':
            XMLElementLine."Export Type" := XMLElementLine."Export Type"::Required;
          'optional':
            XMLElementLine."Export Type" := XMLElementLine."Export Type"::Optional;
        END;
      END ELSE
        XMLElementLine."Export Type" := XMLElementLine."Export Type"::Optional;

      IF ElementType IN [ElementType::Simple,ElementType::Attribute] THEN
        // look for the type in the current node
        IF GetNodeType(Node,DataType,FractionDigits) THEN
          XMLElementLine."Data Type" := DataType
        ELSE
          IF GetAttribute(Node,'type',TypeName) THEN BEGIN
            // look through the list of simple types
            IF GetNodeType2(TypeName,DataType,FractionDigits) THEN
              XMLElementLine."Data Type" := DataType;
          END;
      XMLElementLine."Fraction Digits" := FractionDigits;
      XMLElementLine.INSERT;

      SequenceNo := SequenceNo + 1;

      EXIT(XMLElementLine."Line No.");
    END;

    PROCEDURE GetNodeDescription@1210007(Node@1210004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Text[250];
    VAR
      NodeList@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AnnotationNode@1210007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1210002 : Integer;
    BEGIN
      NodeList := Node.ChildNodes;
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        ChildNode := NodeList.Item(i);
        IF ExtractPrefix(ChildNode.Name) = 'annotation' THEN BEGIN
          AnnotationNode := ChildNode.FirstChild;
          IF NOT ISNULL(AnnotationNode) THEN
            EXIT(COPYSTR(AnnotationNode.InnerText,1,MAXSTRLEN(Description)));
        END;
      END;
    END;

    PROCEDURE GetNodeType@1210013(Node@1210005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR DataType@1210009 : ' ,Text,Integer,Decimal,Date';VAR FractionDigits@1210006 : Integer) : Boolean;
    VAR
      NodeList@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ElementName@1210004 : Text[150];
      ElementType@1210010 : Text[100];
      Base@1210008 : Text[100];
      i@1210002 : Integer;
    BEGIN
      IF GetAttribute(Node,'name',ElementName) THEN
        IF ElementName = 'я┐╜я┐╜таТя┐╜я┐╜' THEN BEGIN
          DataType := DataType::Date;
          EXIT(TRUE);
        END;

      IF GetAttribute(Node,'type',ElementType) THEN
        IF ExtractPrefix(ElementType) IN ['gYear','restriction','string'] THEN BEGIN
          DataType := DataType::Text;
          EXIT(TRUE);
        END;

      NodeList := Node.ChildNodes;
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        ChildNode := NodeList.Item(i);
        IF ExtractPrefix(ChildNode.Name) = 'restriction' THEN BEGIN
          IF GetAttribute(ChildNode,'base',Base) THEN
            CASE ExtractPrefix(Base) OF
              'string',
              'gYear':
                BEGIN
                  DataType := DataType::Text;
                  EXIT(TRUE);
                END;
              'integer',
              'unsignedLong',
              'positiveInteger':
                BEGIN
                  DataType := DataType::Integer;
                  EXIT(TRUE);
                END;
              'decimal':
                BEGIN
                  DataType := DataType::Decimal;
                  IF GetFractionDigits(ChildNode,FractionDigits) THEN
                    EXIT(TRUE);
                END;
              ELSE
                // look through the list of simple types
                IF GetNodeType2(Base,DataType,FractionDigits) THEN
                  EXIT(TRUE);
            END;
        END ELSE
          IF GetNodeType(ChildNode,DataType,FractionDigits) THEN
            EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetNodeType2@1210016(TypeName@1210010 : Text[100];VAR DataType@1210009 : ' ,Text,Integer,Decimal,Date';VAR FractionDigits@1210006 : Integer) : Boolean;
    VAR
      NodeList@1210004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ChildNodeName@1210011 : Text[100];
      i@1210002 : Integer;
    BEGIN
      NodeList := RootNode.ChildNodes;
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        ChildNode := NodeList.Item(i);
        IF ExtractPrefix(ChildNode.Name) = 'simpleType' THEN
          IF GetAttribute(ChildNode,'name',ChildNodeName) THEN
            IF ChildNodeName = TypeName THEN
              IF GetNodeType(ChildNode,DataType,FractionDigits) THEN
                EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetFractionDigits@1210014(Node@1210004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR FractionDigits@1210009 : Integer) : Boolean;
    VAR
      NodeList@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Value@1210008 : Text[100];
      i@1210002 : Integer;
    BEGIN
      NodeList := Node.ChildNodes;
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        ChildNode := NodeList.Item(i);
        IF ExtractPrefix(ChildNode.Name) = 'fractionDigits' THEN
          IF GetAttribute(ChildNode,'value',Value) THEN BEGIN
            IF EVALUATE(FractionDigits,Value) THEN
              EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetAttribute@7(VAR XMLNode@1210002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttributeName@1000 : Text[250];VAR AttributeValue@1003 : Text[250]) : Boolean;
    VAR
      XMLAttribute@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      XMLAttribute := XMLNode.SelectSingleNode(STRSUBSTNO('@%1',AttributeName));

      IF ISNULL(XMLAttribute) THEN
        EXIT(FALSE);

      AttributeValue := XMLAttribute.Value;
      EXIT(TRUE);
    END;

    PROCEDURE IsXML@1210012() : Boolean;
    BEGIN
      FormatVersion.GET("Format Version Code");
      EXIT(FormatVersion."XML Schema File Name" <> '');
    END;

    PROCEDURE AdjustByOKEI@1210021(DataHeaderNo@1210002 : Code[20];TableCode@1210006 : Code[20];RowNo@1210007 : Integer;ColumnNo@1210008 : Integer;Amount@1210001 : Decimal) : Decimal;
    VAR
      StatutoryReportDataHeader@1210000 : Record 26563;
      StatReportRequisite@1210003 : Record 26559;
      XMLElementLine@1210004 : Record 26570;
      OKEIScaling@1210005 : Boolean;
    BEGIN
      StatutoryReportDataHeader.GET(DataHeaderNo);

      IF IsXML THEN BEGIN
        XMLElementLine.SETCURRENTKEY("Report Code","Table Code","Row Link No.","Column Link No.");
        XMLElementLine.SETRANGE("Report Code",Code);
        XMLElementLine.SETRANGE("Table Code",TableCode);
        XMLElementLine.SETRANGE("Row Link No.",RowNo);
        XMLElementLine.SETRANGE("Column Link No.",ColumnNo);
        IF XMLElementLine.FINDFIRST THEN
          OKEIScaling := XMLElementLine."OKEI Scaling";
      END ELSE BEGIN
        StatReportRequisite.SETCURRENTKEY("Report Code","Table Code","Row Link No.","Column Link No.");
        StatReportRequisite.SETRANGE("Report Code",Code);
        StatReportRequisite.SETRANGE("Table Code",TableCode);
        StatReportRequisite.SETRANGE("Row Link No.",RowNo);
        StatReportRequisite.SETRANGE("Column Link No.",ColumnNo);
        IF StatReportRequisite.FINDFIRST THEN
          OKEIScaling := StatReportRequisite."OKEI Scaling";
      END;

      IF OKEIScaling THEN
        CASE StatutoryReportDataHeader.OKEI OF
          '383':
            EXIT(ROUND(Amount,1));
          '384':
            EXIT(ROUND(Amount / 1000,1));
          '385':
            EXIT(ROUND(Amount / 1000000,1));
        END;

      EXIT(Amount);
    END;

    PROCEDURE CheckServiceTier@1210001();
    BEGIN
      ERROR(Text032);
    END;

    PROCEDURE GetElementType@1210018(Node@1210007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Integer;
    VAR
      NodeList@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChildNode@1210008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ElementName@1210004 : Text[150];
      TypeName@1210002 : Text[100];
      i@1210003 : Integer;
      ElementType@1210000 : 'Complex,Simple';
    BEGIN
      IF GetAttribute(Node,'type',TypeName) THEN BEGIN
        NodeList := RootNode.ChildNodes;
        FOR i := 0 TO NodeList.Count - 1 DO BEGIN
          ChildNode := NodeList.Item(i);
          IF ExtractPrefix(ChildNode.Name) IN ['complexType','simpleType'] THEN
            IF GetAttribute(ChildNode,'name',ElementName) THEN
              IF ElementName = TypeName THEN
                CASE ExtractPrefix(ChildNode.Name) OF
                  'complexType':
                    EXIT(ElementType::Complex);
                  'simpleType':
                    EXIT(ElementType::Simple);
                END;
        END;
      END ELSE BEGIN
        NodeList := Node.ChildNodes;
        FOR i := 0 TO NodeList.Count - 1 DO BEGIN
          ChildNode := NodeList.Item(i);
          IF ExtractPrefix(ChildNode.Name) IN ['complexType','simpleType'] THEN
            CASE ExtractPrefix(ChildNode.Name) OF
              'complexType':
                EXIT(ElementType::Complex);
              'simpleType':
                EXIT(ElementType::Simple);
            END;
        END;
      END;

      EXIT(ElementType::Simple);
    END;

    PROCEDURE ExtractPrefix@1210023(ElementName@1210000 : Text[150]) : Text[100];
    BEGIN
      IF COPYSTR(LOWERCASE(ElementName),1,3) = 'xs:' THEN
        EXIT(COPYSTR(ElementName,4));
      IF COPYSTR(LOWERCASE(ElementName),1,4) = 'xsd:' THEN
        EXIT(COPYSTR(ElementName,5));

      EXIT(ElementName);
    END;

    LOCAL PROCEDURE ConfirmImportXMLSchema@1210019() : Boolean;
    VAR
      XMLElementLine@1210000 : Record 26570;
    BEGIN
      XMLElementLine.SETRANGE("Report Code",Code);
      IF NOT XMLElementLine.ISEMPTY THEN
        EXIT(CONFIRM(Text026,FALSE));

      EXIT(TRUE);
    END;

    BEGIN
    {
      NC NOS-26 SPA Изменения
    }
    END.
  }
}

