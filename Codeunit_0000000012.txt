OBJECT Codeunit 12 Gen. Jnl.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=16.08.17;
    Time=16:46:19;
    Modified=Yes;
    Version List=NAVW110.00.00.15601,NAVRU10.00.00.15601,NOS-26;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 17=imd,
                TableData 21=imd,
                TableData 25=imd,
                TableData 45=imd,
                TableData 253=rimd,
                TableData 254=imd,
                TableData 271=imd,
                TableData 272=imd,
                TableData 379=imd,
                TableData 380=imd,
                TableData 1053=rim,
                TableData 5601=rimd,
                TableData 5617=imd,
                TableData 5625=rimd,
                TableData 17302=imd,
                TableData 17306=rimd;
    OnRun=BEGIN
            GetGLSetup;
            RunWithCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      NeedsRoundingErr@1000 : TextConst 'ENU=%1 needs to be rounded;RUS=%1 необходимо округлить';
      PurchaseAlreadyExistsErr@1003 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists for this vendor.;RUS=Покупка %1 %2 уже существует для этого поставщика.';
      BankPaymentTypeMustNotBeFilledErr@1004 : TextConst 'ENU=Bank Payment Type must not be filled if Currency Code is different in Gen. Journal Line and Bank Account.;RUS=Тип банковского платежа не должен быть заполнен, если код валюты в строке финансового журнала и в банковском счете различаются.';
      DocNoMustBeEnteredErr@1005 : TextConst 'ENU=Document No. must be entered when Bank Payment Type is %1.;RUS=Для типа банковского платежа "%1" должен быть введен номер документа.';
      CheckAlreadyExistsErr@1006 : TextConst 'ENU=Check %1 already exists for this Bank Account.;RUS=Платежный документ %1 уже существует для этого банковского счета.';
      GLSetup@1009 : Record 98;
      GlobalGLEntry@1014 : Record 17;
      TempGLEntryBuf@1010 : TEMPORARY Record 17;
      TempGLEntryVAT@1016 : TEMPORARY Record 17;
      GLReg@1029 : Record 45;
      AddCurrency@1033 : Record 4;
      CurrExchRate@1035 : Record 330;
      VATEntry@1038 : Record 254;
      TaxDetail@1046 : Record 322;
      UnrealizedCustLedgEntry@1084 : Record 21;
      UnrealizedVendLedgEntry@1085 : Record 25;
      GLEntryVATEntryLink@1087 : Record 253;
      TempVATEntry@1088 : TEMPORARY Record 254;
      InitialCVLedgEntryBuf@1210003 : Record 382;
      VATEntryToRealize@1210006 : Record 254;
      GlobalGenJournalLine@1101495038 : Record 81;
      GenJnlCheckLine@1001 : Codeunit 11;
      PaymentToleranceMgt@1002 : Codeunit 426;
      PrepmtDiffMgt@1210002 : Codeunit 12412;
      DeferralUtilities@1031 : Codeunit 1720;
      DeferralDocType@1039 : 'Purchase,Sales,G/L';
      LastDocType@1025 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';
      AddCurrencyCode@1117 : Code[10];
      GLSourceCode@1040 : Code[10];
      LastDocNo@1023 : Code[20];
      FiscalYearStartDate@1011 : Date;
      CurrencyDate@1020 : Date;
      LastDate@1021 : Date;
      BalanceCheckAmount@1056 : Decimal;
      BalanceCheckAmount2@1057 : Decimal;
      BalanceCheckAddCurrAmount@1058 : Decimal;
      BalanceCheckAddCurrAmount2@1059 : Decimal;
      CurrentBalance@1060 : Decimal;
      TotalAddCurrAmount@1062 : Decimal;
      TotalAmount@1063 : Decimal;
      UnrealizedRemainingAmountCust@1086 : Decimal;
      UnrealizedRemainingAmountVend@1074 : Decimal;
      AmountRoundingPrecision@1012 : Decimal;
      AddCurrGLEntryVATAmt@1017 : Decimal;
      CurrencyFactor@1019 : Decimal;
      FirstEntryNo@1042 : Integer;
      NextEntryNo@1022 : Integer;
      NextVATEntryNo@1064 : Integer;
      FirstNewVATEntryNo@1065 : Integer;
      NextTransactionNo@1066 : Integer;
      NextConnectionNo@1067 : Integer;
      NextCheckEntryNo@1028 : Integer;
      InsertedTempGLEntryVAT@1027 : Integer;
      GLEntryNo@1026 : Integer;
      UseCurrFactorOnly@1078 : Boolean;
      NonAddCurrCodeOccured@1079 : Boolean;
      FADimAlreadyChecked@1080 : Boolean;
      ResidualRoundingErr@1008 : TextConst 'ENU=Residual caused by rounding of %1;RUS=Остаток, вызванный округлением %1';
      DimensionUsedErr@1007 : TextConst '@@@=Comment;ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5.;RUS=Измерение, использованное в %1 %2, %3, %4, вызвало ошибку. %5.';
      OverrideDimErr@1018 : Boolean;
      JobLine@1036 : Boolean;
      CheckUnrealizedCust@1082 : Boolean;
      CheckUnrealizedVend@1083 : Boolean;
      GLSetupRead@1015 : Boolean;
      TransVATAccNo@1470014 : Code[20];
      MustNotBeAfterErr@1470006 : TextConst 'ENU=Posting date must not be after %1 in %2 entry no. %3.;RUS=Дата учета не должна идти после %1 в операции %2 номер %3.';
      MultipleEntriesApplnErr@1470005 : TextConst 'ENU=Only application of one entry to several entries is allowed in Russian version.;RUS=В русскоязычной версии разрешено только применение одной операции к нескольким операциям.';
      CheckApplnDateCustErr@1470004 : TextConst 'ENU="Check Application Date is not possible for Customer %1 if Application Method = Apply to Oldest.";RUS=Контроль даты применения невозможен для клиента %1, если выбран метод применения "Применить к самым старым".';
      CheckApplnDateVendErr@1470003 : TextConst 'ENU="Check Application Date is not possible for Vendor %1 if Application Method = Apply to Oldest.";RUS=Контроль даты применения невозможен для поставщика %1, если выбран метод применения "Применить к самым старым".';
      PrepmtCorrectionErr@1470007 : TextConst 'ENU=Correction must be No in prepayment.;RUS=Корректировка в предоплате должна иметь значение "Нет".';
      ThisIsSpecialRun@1470013 : Boolean;
      FirstGLEntryNo@1470011 : Integer;
      ApplnInDiffCurrencyErr@1470018 : TextConst 'ENU=Application of %1 with currency code %2 to %3 with currency code %4 is not allowed.;RUS="Применение %1 с кодом валюты = %2 к %3 с кодом валюты = %4 запрещено."';
      ApplnPrepmtOnlyErr@1470028 : TextConst 'ENU=Application is valid with Document Type Prepayment only.;RUS=Применение действительно только для документов с типом "Предоплата".';
      PostedTaxDiffReverseErr@1470000 : TextConst 'ENU=Posted Tax Difference already exists for transaction no. %1. You should reverse these entries before unapply operation.;RUS=Учтенная налоговая разница уже существует для транзакции номер %1. Необходимо сторнировать эти операции до отмены операции.';
      PostedTaxDiffAlreadyExistErr@1210001 : TextConst 'ENU=Posted Tax Difference already exists for transaction no. %1.;RUS=Учтенная налоговая разница уже существует для транзакции номер %1.';
      AgreementMustBeErr@1210021 : TextConst 'ENU=Agreement must be %1 in document no. %2.;RUS=Договор должен быть %1 в документе номер %2.';
      FinVoidedCheck@1210004 : Boolean;
      PreviewMode@1210005 : Boolean;
      VATAgentVATPayment@1210008 : Boolean;
      VATAgentVATPmtAmount@1210009 : Decimal;
      IsVendBackPrepmt@1210007 : Boolean;
      InvalidPostingDateErr@1034 : TextConst '@@@="%1=The date passed in for the posting date.";ENU=%1 is not within the range of posting dates for your company.;RUS=%1 не входит в диапазон дат учета для вашей компании.';
      DescriptionMustNotBeBlankErr@1030 : TextConst '@@@=%1: Field Omit Default Descr. in Jnl., %2 G/L Account No, %3 Description;ENU=When %1 is selected for %2, %3 must have a value.;RUS=Если для %2 выбран вариант %1, требуется значение %3.';
      NoDeferralScheduleErr@1037 : TextConst '@@@="%1=The line number of the general ledger transaction, %2=The Deferral Template Code";ENU=You must create a deferral schedule if a deferral template is selected. Line: %1, Deferral Template: %2.;RUS=В случае выбора шаблона РБП необходимо создать план РБП. Строка: %1, шаблон РБП: %2.';
      ZeroDeferralAmtErr@1041 : TextConst '@@@="%1=The line number of the general ledger transaction, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.;RUS=Суммы РБП не могут равняться 0. Строка: %1, шаблон РБП: %2.';
      IsGLRegInserted@1013 : Boolean;
      "NCC>"@1101495014 : TextConst;
      Text55001@1101495013 : TextConst 'ENU=Application between Posting Group %1 and Posting Group %2 is impossible.;RUS=Применение операции с Учетной Группой %1 к операции с Учетной Группой %2 невозможно.';
      Text55002@1101495012 : TextConst 'ENU=The negative balance for Debit Type Account No. %1 is impossible;RUS=Для активного счета %1 недопустим отрицательный баланс';
      Text55003@1101495011 : TextConst 'ENU=The positive balance for Credit Type Account No. %1 is impossible;RUS=Для пассивного счета %1 недопустим положительный баланс';
      Text55004@1101495010 : TextConst 'ENU=Account No. %1 is blocked for user %2;RUS=Операции по фин. счету %1 запрещены для пользователя %2';
      Text55005@1101495009 : TextConst 'ENU=User %1 is not authorized to post operations with the sum exceeding %2;RUS=Пользователю %1 заперещено учитывать операции с суммой, превышающей %2';
      Text50105@1101495008 : TextConst 'ENU=Amount %1 %2 is more than Agreement Amount %3 %4. Continue?;RUS=Сумма документа %1 %2 превышает сумму остатка по договору %3 %4. Продолжить?';
      Text50106@1101495007 : TextConst 'ENU=Interest %1 %2 %3 %4 was posted G/L Entry No. %5;RUS=Начисление процентов %1 %2 %3 %4 уже учтено. Фин. Операция %5';
      Text50107@1101495006 : TextConst 'ENU=Interest %1 %2 %3 %4 was already reversed.;RUS=Начисление процентов %1 %2 %3 %4 уже аннулированно.';
      Text50108@1101495005 : TextConst 'ENU="Corr. ";RUS="Корр. "';
      Text50109@1101495004 : TextConst 'ENU=Coupons;RUS=Купоны';
      Text50110@1101495003 : TextConst 'ENU=Realised exchange diff.;RUS=Реализованная курсовая разница';
      Text50111@1101495002 : TextConst 'ENU=Realised exchange diff. REVERSAL;RUS=Реализованная курсовая разница СТОРНО';
      Text50112@1101495001 : TextConst 'ENU=Cost of sales;RUS=Себестоимость продажи';
      EmptySourceAccountErr@1101495000 : TextConst 'ENU=External account is not found for G/L account %1.';
      "NCV>"@1101495037 : Integer;
      SelectedDim@1101495036 : Record 369;
      TempSelectedDimPos@1101495035 : TEMPORARY Record 369;
      TempSelectedDimNeg@1101495034 : TEMPORARY Record 369;
      SavedNewCVDocNo@1101495033 : Code[20];
      SavedDocNo@1101495032 : Code[20];
      FIGLJnlPostLine@1101495031 : Codeunit 50039;
      FIGLPostBuf@1101495030 : TEMPORARY Record 50108;
      NextFIValueEntryNo@1101495029 : Integer;
      FICalcAvgCost@1101495028 : Codeunit 50042;
      GenJnlLineForFI@1101495027 : TEMPORARY Record 81;
      GenJnlLineForCoupon@1101495025 : TEMPORARY Record 81;
      GenJnlLineForCorr@1101495024 : TEMPORARY Record 81;
      ReverseChargeVATOrigAmount@1101495023 : Decimal;
      FISetup@1101495022 : Record 50100;
      MovingDataSetup@1101495021 : Record 50064;
      IsGLSetupFound@1101495020 : Boolean;
      GLEntryExtension@1101495019 : Record 50180;
      GLEntryExtensionTmp@1101495018 : TEMPORARY Record 50180;
      GlobalVariables@1101495017 : Codeunit 50033;
      tmpVATGL@1101495016 : TEMPORARY Record 17;
      DimMgt@1101495015 : Codeunit 408;
      GlobalDimensionSetID@1101495026 : Integer;

    PROCEDURE GetGLReg@10(VAR NewGLReg@1000 : Record 45);
    BEGIN
      NewGLReg := GLReg;
    END;

    PROCEDURE RunWithCheck@45(VAR GenJnlLine2@1000 : Record 81) : Integer;
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
      GlobalGenJournalLine := GenJnlLine; // NC NOS-26 SPA
      Code(GenJnlLine,TRUE);
      GenJnlLine2 := GenJnlLine;
      EXIT(GLEntryNo);
    END;

    PROCEDURE RunWithoutCheck@21(VAR GenJnlLine2@1000 : Record 81) : Integer;
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
      GlobalGenJournalLine := GenJnlLine; // NC NOS-26 SPA
      Code(GenJnlLine,FALSE);
      GenJnlLine2 := GenJnlLine;
      EXIT(GLEntryNo);
    END;

    LOCAL PROCEDURE Code@9(VAR GenJnlLine@1003 : Record 81;CheckLine@1000 : Boolean);
    VAR
      Balancing@1002 : Boolean;
      CurrCode@1101495007 : Code[10];
      DimValue@1101495006 : Record 349;
      FIAmountLCY@1101495005 : Decimal;
      FIAmountFCY@1101495004 : Decimal;
      FI@1101495003 : Record 50021;
      CurrExchRate@1101495002 : Record 330;
      DefDimCompType@1101495001 : Record 352;
      LegalEntity@1101495000 : Record 2000000006;
      TempDimSetEntry@1101495008 : TEMPORARY Record 480;
      Currency@1101495009 : Record 4;
    BEGIN
      GetGLSourceCode;

      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN BEGIN
          InitLastDocDate(GenJnlLine);
          EXIT;
        END;

        //NC MDTA01 > MP
        GLSetup.GET;

        //TDRANCS-2001>
        IF "Currency Code" = GLSetup."LCY Code" THEN
          "Currency Code" := '';
        //TDRANCS-2001<

        IF GLSetup."Add Currency Dim. at Posting" THEN BEGIN
          CurrCode := '';
          IF "Currency Index" <> '' THEN
            Currency.GET("Currency Index")
          ELSE
            IF "Currency Code" <> '' THEN
              Currency.GET("Currency Code")
            ELSE
              CurrCode := GLSetup."LCY Currency Dimension Value";
          IF CurrCode = '' THEN BEGIN
            Currency.TESTFIELD("Currency Dimension Value");
            CurrCode := Currency."Currency Dimension Value";
          END;

          IF DimValue.GET(GLSetup."Currency Dimension Code", CurrCode) THEN BEGIN
            //NC NOS-26 > SPA
            IF GenJnlLine."Dimension Set ID" <> 0 THEN
              DimMgt.GetDimensionSet(TempDimSetEntry, GenJnlLine."Dimension Set ID");
            TempDimSetEntry."Dimension Code" := GLSetup."Currency Dimension Code";
            IF TempDimSetEntry.FIND THEN
              TempDimSetEntry.DELETE;
            TempDimSetEntry.VALIDATE("Dimension Value Code", CurrCode);
            TempDimSetEntry.SetObject(GlobalGenJournalLine);
            TempDimSetEntry.INSERT(TRUE);
            DimMgt.UpdateGenJnlLineDim(GenJnlLine, DimMgt.GetDimensionSetID(TempDimSetEntry));
            GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
            //NC NOS-26 < SPA
          END;
        END;
        //NC MDTA01 < MP
        IF CheckLine THEN BEGIN
          IF OverrideDimErr THEN
            GenJnlCheckLine.SetOverDimErr;
          GenJnlCheckLine.RunCheck(GenJnlLine);
        END;

        AmountRoundingPrecision := InitAmounts(GenJnlLine);

        IF "Bill-to/Pay-to No." = '' THEN
          CASE TRUE OF
            "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Account No.";
            "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Bal. Account No.";
          END;
        IF "Document Date" = 0D THEN
          "Document Date" := "Posting Date";
        IF "Due Date" = 0D THEN
          "Due Date" := "Posting Date";

        JobLine := ("Job No." <> '');

        IF "Prepmt. Diff." THEN BEGIN
          "Document Type" := InitialCVLedgEntryBuf."Document Type";
          "Document No." := InitialCVLedgEntryBuf."Document No.";
        END;

        VATAgentVATPayment := IsVATAgentVATPayment(GenJnlLine);

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        IF "Account No." <> '' THEN BEGIN
          IF ("Bal. Account No." <> '') AND
             (NOT "System-Created Entry") AND
             ("Account Type" IN
              ["Account Type"::Customer,
               "Account Type"::Vendor,
               "Account Type"::"Fixed Asset"])
          THEN BEGIN
            CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);
            Balancing := TRUE;
          END;

          PostGenJnlLine(GenJnlLine,Balancing);
        END;

        IF "Bal. Account No." <> '' THEN BEGIN
          CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);
          PostGenJnlLine(GenJnlLine,NOT Balancing);
        END;

        IF GLSetup."Enable Russian Tax Accounting" AND ("Tax. Diff. Dtld. Entry No." <> 0) THEN
          UpdateTaxDiff(GenJnlLine);

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        IF "Account No." <> '' THEN
          IF "Account Type" IN
             ["Account Type"::"G/L Account","Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"]
          THEN
            IF ("Deferral Code" <> '') AND ("Source Code" = GLSourceCode) THEN BEGIN
              // Once posting has completed, move the deferral schedule over to Posted Deferral Schedule
              IF NOT Balancing THEN
                CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);
              DeferralUtilities.CreateScheduleFromGL(GenJnlLine,FirstEntryNo);
            END;

        FinishPosting(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE PostGenJnlLine@47(VAR GenJnlLine@1000 : Record 81;Balancing@1001 : Boolean);
    BEGIN
      WITH GenJnlLine DO
        CASE "Account Type" OF
          "Account Type"::"G/L Account":
            PostGLAcc(GenJnlLine,Balancing);
          "Account Type"::Customer:
            PostCust(GenJnlLine,Balancing);
          "Account Type"::Vendor:
            PostVend(GenJnlLine,Balancing);
          "Account Type"::"Bank Account":
            PostBankAcc(GenJnlLine,Balancing);
          "Account Type"::"Fixed Asset":
            PostFixedAsset(GenJnlLine);
          "Account Type"::"IC Partner":
            PostICPartner(GenJnlLine);
        END;
    END;

    LOCAL PROCEDURE InitAmounts@186(VAR GenJnlLine@1000 : Record 81) : Decimal;
    VAR
      Currency@1001 : Record 4;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Currency Code" = '' THEN BEGIN
          Currency.InitRoundingPrecision;
          "Amount (LCY)" := Amount;
          "VAT Amount (LCY)" := "VAT Amount";
          "VAT Base Amount (LCY)" := "VAT Base Amount";
        END ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          IF NOT "System-Created Entry" THEN BEGIN
            "Source Currency Code" := "Currency Code";
            "Source Currency Amount" := Amount;
            "Source Curr. VAT Base Amount" := "VAT Base Amount";
            "Source Curr. VAT Amount" := "VAT Amount";
          END;
        END;
        IF "Additional-Currency Posting" = "Additional-Currency Posting"::None THEN BEGIN
          IF Amount <> ROUND(Amount,Currency."Amount Rounding Precision") THEN
            FIELDERROR(
              Amount,
              STRSUBSTNO(NeedsRoundingErr,Amount));
          IF "Amount (LCY)" <> ROUND("Amount (LCY)") THEN
            FIELDERROR(
              "Amount (LCY)",
              STRSUBSTNO(NeedsRoundingErr,"Amount (LCY)"));
        END;
        EXIT(Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE InitLastDocDate@23(GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        LastDocType := "Document Type";
        LastDocNo := "Document No.";
        LastDate := "Posting Date";
      END;
    END;

    LOCAL PROCEDURE InitVAT@33(VAR GenJnlLine@1001 : Record 81;VAR GLEntry@1002 : Record 17;VAR VATPostingSetup@1003 : Record 325);
    VAR
      LCYCurrency@1000 : Record 4;
      GenPostingSetup@1210000 : Record 252;
      SalesTaxCalculate@1004 : Codeunit 398;
    BEGIN
      LCYCurrency.InitRoundingPrecision;
      WITH GenJnlLine DO
        IF "Gen. Posting Type" <> 0 THEN BEGIN // None
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type");
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
                CASE "VAT Calculation Type" OF
                  "VAT Calculation Type"::"Normal VAT": BEGIN
                    //NC OFA020.1 > DP
                    ReverseChargeVATOrigAmount := 0;
                    //NC OFA020.1 < DP

                    IF "VAT Difference" <> 0 THEN BEGIN
                      GLEntry.Amount := "VAT Base Amount (LCY)";
                      GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      GLEntry."Additional-Currency Amount" := "Source Curr. VAT Base Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    END ELSE BEGIN
                      GLEntry."VAT Amount" :=
                        ROUND(
                          "Amount (LCY)" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                          LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                      GLEntry.Amount := "Amount (LCY)" - GLEntry."VAT Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt :=
                          ROUND(
                            "Source Currency Amount" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                            AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                      GLEntry."Additional-Currency Amount" := "Source Currency Amount" - AddCurrGLEntryVATAmt;
                    END;
                  END;
                  "VAT Calculation Type"::"Reverse Charge VAT":
                    CASE "Gen. Posting Type" OF
                      "Gen. Posting Type"::Purchase: BEGIN
                        //NC OFA020.1 > DP
                        ReverseChargeVATOrigAmount := ROUND(GenJnlLine.Amount * VATPostingSetup."VAT %" / 100);
                        //NC OFA020.1 < DP

                        IF "VAT Difference" <> 0 THEN BEGIN
                          GLEntry."VAT Amount" := "VAT Amount (LCY)";
                          IF "Source Currency Code" = AddCurrencyCode THEN
                            AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                          ELSE
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        END ELSE BEGIN
                          GLEntry."VAT Amount" :=
                            ROUND(
                              GLEntry.Amount * VATPostingSetup."VAT %" / 100,
                              LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                          IF "Source Currency Code" = AddCurrencyCode THEN
                            AddCurrGLEntryVATAmt :=
                              ROUND(
                                GLEntry."Additional-Currency Amount" * VATPostingSetup."VAT %" / 100,
                                AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                          ELSE
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        END;
                      END;
                      "Gen. Posting Type"::Sale:
                        BEGIN
                          //NC OFA020.1 > DP
                          ReverseChargeVATOrigAmount := 0;
                          //NC OFA020.1 < DP
                          GLEntry."VAT Amount" := 0;
                          AddCurrGLEntryVATAmt := 0;
                        END;
                    END;
                  "VAT Calculation Type"::"Full VAT":
                    BEGIN
                      //NC OFA020.1 > DP
                      ReverseChargeVATOrigAmount := 0;
                      //NC OFA020.1 < DP
                      CASE "Gen. Posting Type" OF
                        "Gen. Posting Type"::Sale:
                          BEGIN
                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                          END;
                        "Gen. Posting Type"::Purchase:
                          BEGIN
                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                          END;
                      END;
                      GLEntry.Amount := 0;
                      GLEntry."Additional-Currency Amount" := 0;
                      GLEntry."VAT Amount" := "Amount (LCY)";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Currency Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr("Amount (LCY)");
                    END;
                  "VAT Calculation Type"::"Sales Tax":
                    BEGIN
                      //NC OFA020.1 > DP
                      ReverseChargeVATOrigAmount := 0;
                      //NC OFA020.1 < DP
                      IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                         "Use Tax"
                      THEN BEGIN
                        GLEntry."VAT Amount" :=
                          ROUND(
                            SalesTaxCalculate.CalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry.Amount := "Amount (LCY)";
                      END ELSE BEGIN
                        GLEntry.Amount :=
                          ROUND(
                            SalesTaxCalculate.ReverseCalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      END;
                      GLEntry."Additional-Currency Amount" := "Source Currency Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    END;
                END;
              END;
            "VAT Posting"::"Manual VAT Entry": BEGIN
              //NC OFA020.1 > DP
              ReverseChargeVATOrigAmount := 0;
              //NC OFA020.1 < DP
              //NC NCS-900 > DP
              IF ("VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT") THEN
                ReverseChargeVATOrigAmount := GenJnlLine."VAT Amount";
              //NC NCS-900 <0 DP
              IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN BEGIN
                GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
                GLEntry."VAT Amount" := "VAT Amount (LCY)";
                IF "Source Currency Code" = AddCurrencyCode THEN
                  AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                ELSE
                  AddCurrGLEntryVATAmt := CalcLCYToAddCurr("VAT Amount (LCY)");
              END;
            END;
          END;
          IF GLSetup."Enable Russian Accounting" THEN
            IF ("Gen. Posting Type" <> "Gen. Posting Type"::Sale) OR
               ("VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT") OR
               (VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::" ")
            THEN
              TransVATAccNo := ''
            ELSE BEGIN
              IF (GLEntry."G/L Account No." = '') AND ("Gen. Posting Type" = "Gen. Posting Type"::Sale) THEN
                IF VATPostingSetup."Trans. VAT Type" <> VATPostingSetup."Trans. VAT Type"::" " THEN
                  VATPostingSetup.TESTFIELD("Trans. VAT Account");
              IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN BEGIN
                IF VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax" THEN BEGIN
                  GLEntry.Amount := "Amount (LCY)";
                  GLEntry."Additional-Currency Amount" := "Source Currency Amount";
                END;
                IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                  VATPostingSetup.TESTFIELD("Trans. VAT Account");
                  GLEntry."G/L Account No." := VATPostingSetup."Trans. VAT Account";
                END;
              END ELSE BEGIN
                IF VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax" THEN BEGIN
                  GLEntry.Amount += GLEntry."VAT Amount";
                  GLEntry."Additional-Currency Amount" += AddCurrGLEntryVATAmt;
                END;
                IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                  GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                  GenPostingSetup.TESTFIELD("Sales Full Tax VAT Account");
                  GLEntry."G/L Account No." := GenPostingSetup."Sales Full Tax VAT Account";
                END;
              END;
              IF VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::" " THEN
                TransVATAccNo := ''
              ELSE
                IF VATPostingSetup."Trans. VAT Account" <> '' THEN
                  TransVATAccNo := VATPostingSetup."Trans. VAT Account"
                ELSE
                  TransVATAccNo := GLEntry."G/L Account No.";
            END;
        END;
      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(GLEntry.Amount,GLEntry."Additional-Currency Amount",GLEntry."Additional-Currency Amount",TRUE,GenJnlLine,
        GLEntry); //NC NOS-26 SPA
    END;

    LOCAL PROCEDURE PostVAT@34(GenJnlLine@1010 : Record 81;VAR GLEntry@1015 : Record 17;VATPostingSetup@1012 : Record 325);
    VAR
      TaxDetail2@1008 : Record 322;
      TaxJurisdiction@1210001 : Record 320;
      SalesTaxCalculate@1013 : Codeunit 398;
      VATAmount@1000 : Decimal;
      VATAmount2@1003 : Decimal;
      VATBase@1001 : Decimal;
      VATBase2@1004 : Decimal;
      SrcCurrVATAmount@1002 : Decimal;
      SrcCurrVATBase@1009 : Decimal;
      SrcCurrSalesTaxBaseAmount@1005 : Decimal;
      RemSrcCurrVATAmount@1007 : Decimal;
      SalesTaxBaseAmount@1014 : Decimal;
      TaxDetailFound@1006 : Boolean;
      TransVATGLEntryAccNo@1210000 : Code[20];
    BEGIN
      WITH GenJnlLine DO
        // Post VAT
        // VAT for VAT entry
        CASE "VAT Calculation Type" OF
          "VAT Calculation Type"::"Normal VAT",
          "VAT Calculation Type"::"Reverse Charge VAT",
          "VAT Calculation Type"::"Full VAT":
            BEGIN
              IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN
                "VAT Base Amount (LCY)" := GLEntry.Amount;
              IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN
                AddCurrGLEntryVATAmt := "Source Curr. VAT Amount";
              InsertVAT(
                GenJnlLine,VATPostingSetup,
                GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                GLEntry."Additional-Currency Amount",AddCurrGLEntryVATAmt,"Source Curr. VAT Base Amount");
              NextConnectionNo := NextConnectionNo + 1;
            END;
          "VAT Calculation Type"::"Sales Tax":
            BEGIN
              CASE "VAT Posting" OF
                "VAT Posting"::"Automatic VAT Entry":
                  SalesTaxBaseAmount := GLEntry.Amount;
                "VAT Posting"::"Manual VAT Entry":
                  SalesTaxBaseAmount := "VAT Base Amount (LCY)";
              END;
              IF ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") AND
                 ("Gen. Posting Type" = "Gen. Posting Type"::Settlement)
              THEN
                InsertVAT(
                  GenJnlLine,VATPostingSetup,
                  GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                  "Source Curr. VAT Base Amount","Source Curr. VAT Amount","Source Curr. VAT Base Amount")
              ELSE BEGIN
                CLEAR(SalesTaxCalculate);
                SalesTaxCalculate.InitSalesTaxLines(
                  "Tax Area Code","Tax Group Code","Tax Liable",
                  SalesTaxBaseAmount,Quantity,"Posting Date",GLEntry."VAT Amount");
                SrcCurrVATAmount := 0;
                SrcCurrSalesTaxBaseAmount := CalcLCYToAddCurr(SalesTaxBaseAmount);
                RemSrcCurrVATAmount := AddCurrGLEntryVATAmt;
                TaxDetailFound := FALSE;
                IF GLSetup."Enable Russian Accounting" THEN
                  TransVATGLEntryAccNo := TransVATAccNo;
                WHILE SalesTaxCalculate.GetSalesTaxLine(TaxDetail2,VATAmount,VATBase) DO BEGIN
                  RemSrcCurrVATAmount := RemSrcCurrVATAmount - SrcCurrVATAmount;
                  IF TaxDetailFound THEN
                    InsertVAT(
                      GenJnlLine,VATPostingSetup,
                      SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                      SrcCurrSalesTaxBaseAmount,SrcCurrVATAmount,SrcCurrVATBase);
                  TaxDetailFound := TRUE;
                  TaxDetail := TaxDetail2;
                  VATAmount2 := VATAmount;
                  VATBase2 := VATBase;
                  SrcCurrVATAmount := CalcLCYToAddCurr(VATAmount);
                  SrcCurrVATBase := CalcLCYToAddCurr(VATBase);
                  IF GLSetup."Enable Russian Accounting" THEN
                    IF "Gen. Posting Type" = "Gen. Posting Type"::Sale THEN
                      IF VATPostingSetup."Trans. VAT Type" <> VATPostingSetup."Trans. VAT Type"::" " THEN BEGIN
                        TaxJurisdiction.GET(TaxDetail."Tax Jurisdiction Code");
                        TaxJurisdiction.TESTFIELD("Trans. VAT Type",VATPostingSetup."Trans. VAT Type");
                        IF TaxJurisdiction."Trans. VAT Account" <> '' THEN
                          TransVATAccNo := TaxJurisdiction."Trans. VAT Account"
                        ELSE
                          TransVATAccNo := TransVATGLEntryAccNo;
                      END;
                END;
                IF TaxDetailFound THEN
                  InsertVAT(
                    GenJnlLine,VATPostingSetup,
                    SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                    SrcCurrSalesTaxBaseAmount,RemSrcCurrVATAmount,SrcCurrVATBase);
                InsertSummarizedVAT(GenJnlLine,VATPostingSetup);
              END;
            END;
        END;
      IF GLSetup."Enable Russian Accounting" THEN
        TransVATAccNo := '';
    END;

    LOCAL PROCEDURE InsertVAT@30(GenJnlLine@1015 : Record 81;VATPostingSetup@1018 : Record 325;GLEntryAmount@1000 : Decimal;GLEntryVATAmount@1001 : Decimal;GLEntryBaseAmount@1002 : Decimal;SrcCurrCode@1004 : Code[10];SrcCurrGLEntryAmt@1005 : Decimal;SrcCurrGLEntryVATAmt@1006 : Decimal;SrcCurrGLEntryBaseAmt@1007 : Decimal);
    VAR
      TaxJurisdiction@1003 : Record 320;
      GLEntry@1210002 : Record 17;
      FA@1210000 : Record 5600;
      VATAmount@1008 : Decimal;
      VATBase@1009 : Decimal;
      SrcCurrVATAmount@1011 : Decimal;
      SrcCurrVATBase@1012 : Decimal;
      VATDifferenceLCY@1013 : Decimal;
      SrcCurrVATDifference@1014 : Decimal;
      UnrealizedVAT@1019 : Boolean;
      SavGLAccountNo@1210001 : Code[20];
      VATOriginalAmount@1101495000 : Decimal;
    BEGIN
      WITH GenJnlLine DO BEGIN
        // Post VAT
        // VAT for VAT entry
        VATEntry.INIT;
        VATEntry.CopyFromGenJnlLine(GenJnlLine);
        VATEntry."Entry No." := NextVATEntryNo;
        VATEntry."EU Service" := VATPostingSetup."EU Service";
        VATEntry."Transaction No." := NextTransactionNo;
        VATEntry."Sales Tax Connection No." := NextConnectionNo;
        IF GLSetup."Enable Russian Accounting" THEN
          IF Prepayment AND ("VAT Calculation Type" = "VAT Calculation Type"::"Full VAT") THEN BEGIN
            TESTFIELD("Initial Entry No.");
            VATEntry."CV Ledg. Entry No." := "Initial Entry No.";
            GLEntryBaseAmount := "Advance VAT Base Amount";
          END;

        IF "VAT Difference" = 0 THEN
          VATDifferenceLCY := 0
        ELSE
          IF "Currency Code" = '' THEN
            VATDifferenceLCY := "VAT Difference"
          ELSE
            VATDifferenceLCY :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  "Posting Date","Currency Code","VAT Difference",
                  CurrExchRate.ExchangeRate("Posting Date","Currency Code")));

        IF ("Account Type" = "Account Type"::"Fixed Asset") AND ("Object Type" <> "Object Type"::"G/L Account") THEN BEGIN
          "Account Type" := "Object Type";
          "Account No." := "Object No."
        END;

        IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN BEGIN
          IF TaxDetail."Tax Jurisdiction Code" <> '' THEN
            TaxJurisdiction.GET(TaxDetail."Tax Jurisdiction Code");
          IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN BEGIN
            VATEntry."Tax Group Used" := TaxDetail."Tax Group Code";
            VATEntry."Tax Type" := TaxDetail."Tax Type";
            VATEntry."Tax on Tax" := TaxDetail."Calculate Tax on Tax";
          END;
          VATEntry."Tax Jurisdiction Code" := TaxDetail."Tax Jurisdiction Code";
        END;

        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
            VATEntry."Tax Invoice Amount Type" := TaxJurisdiction."Sales Tax Amount Type"
          ELSE
            VATEntry."Tax Invoice Amount Type" := VATPostingSetup."Tax Invoice Amount Type";
          VATEntry."Manual VAT Settlement" := VATPostingSetup."Manual VAT Settlement";
          IF VATEntry."Object Type" = VATEntry."Object Type"::"Fixed Asset" THEN
            IF FA.GET(VATEntry."Object No.") THEN
              CASE FA."FA Type" OF
                FA."FA Type"::"Fixed Assets":
                  VATEntry."VAT Settlement Type" := VATEntry."VAT Settlement Type"::"by Act";
                FA."FA Type"::"Future Expense":
                  VATEntry."VAT Settlement Type" := VATEntry."VAT Settlement Type"::"Future Expenses";
              END;
        END;

        IF AddCurrencyCode <> '' THEN
          IF AddCurrencyCode <> SrcCurrCode THEN BEGIN
            SrcCurrGLEntryAmt := ExchangeAmtLCYToFCY2(GLEntryAmount);
            SrcCurrGLEntryVATAmt := ExchangeAmtLCYToFCY2(GLEntryVATAmount);
            SrcCurrGLEntryBaseAmt := ExchangeAmtLCYToFCY2(GLEntryBaseAmount);
            SrcCurrVATDifference := ExchangeAmtLCYToFCY2(VATDifferenceLCY);
          END ELSE
            SrcCurrVATDifference := "VAT Difference";

        UnrealizedVAT :=
          (((VATPostingSetup."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT"])) OR
           ((TaxJurisdiction."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Sales Tax"]))) AND
          IsNotPayment("Document Type");
        IF GLSetup."Prepayment Unrealized VAT" AND NOT GLSetup."Unrealized VAT" AND
           (VATPostingSetup."Unrealized VAT Type" > 0)
        THEN
          UnrealizedVAT := Prepayment;

        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          UnrealizedVAT := UnrealizedVAT OR
            (VATPostingSetup."Unrealized VAT Type" > 0) AND Prepayment AND
            ("Document Type" = "Document Type"::Payment);
          UnrealizedVAT :=
            UnrealizedVAT OR
            ((VATPostingSetup."Unrealized VAT Type" > 0) AND VATAgentVATPayment);
        END;

        // VAT for VAT entry
        IF "Gen. Posting Type" <> 0 THEN BEGIN
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                VATAmount := GLEntryVATAmount;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
                IF GLSetup."Enable Russian Accounting" THEN
                  IF ("Gen. Posting Type" = "Gen. Posting Type"::Sale) AND
                     (VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax") AND
                     ("VAT Calculation Type" <> "VAT Calculation Type"::"Sales Tax")
                  THEN BEGIN
                    VATBase := VATBase - VATAmount;
                    SrcCurrVATBase := SrcCurrVATBase - SrcCurrVATAmount;
                  END;
              END;
            "VAT Posting"::"Manual VAT Entry":
              BEGIN
                IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN BEGIN
                  VATAmount := GLEntryAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                  VATEntry.Closed := TRUE;
                END ELSE BEGIN
                  VATAmount := GLEntryVATAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                END;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
          END;

          IF UnrealizedVAT THEN BEGIN
            VATEntry.Amount := 0;
            VATEntry.Base := 0;
            VATEntry."Unrealized Amount" := VATAmount;
            VATEntry."Unrealized Base" := VATBase;
            VATEntry."Remaining Unrealized Amount" := VATEntry."Unrealized Amount";
            VATEntry."Remaining Unrealized Base" := VATEntry."Unrealized Base";
          END ELSE BEGIN
            VATEntry.Amount := VATAmount;
            VATEntry.Base := VATBase;
            VATEntry."Unrealized Amount" := 0;
            VATEntry."Unrealized Base" := 0;
            VATEntry."Remaining Unrealized Amount" := 0;
            VATEntry."Remaining Unrealized Base" := 0;
          END;

          IF AddCurrencyCode = '' THEN BEGIN
            VATEntry."Additional-Currency Base" := 0;
            VATEntry."Additional-Currency Amount" := 0;
            VATEntry."Add.-Currency Unrealized Amt." := 0;
            VATEntry."Add.-Currency Unrealized Base" := 0;
          END ELSE
            IF UnrealizedVAT THEN BEGIN
              VATEntry."Additional-Currency Base" := 0;
              VATEntry."Additional-Currency Amount" := 0;
              VATEntry."Add.-Currency Unrealized Base" := SrcCurrVATBase;
              VATEntry."Add.-Currency Unrealized Amt." := SrcCurrVATAmount;
            END ELSE BEGIN
              VATEntry."Additional-Currency Base" := SrcCurrVATBase;
              VATEntry."Additional-Currency Amount" := SrcCurrVATAmount;
              VATEntry."Add.-Currency Unrealized Base" := 0;
              VATEntry."Add.-Currency Unrealized Amt." := 0;
            END;
          VATEntry."Add.-Curr. Rem. Unreal. Amount" := VATEntry."Add.-Currency Unrealized Amt.";
          VATEntry."Add.-Curr. Rem. Unreal. Base" := VATEntry."Add.-Currency Unrealized Base";
          VATEntry."VAT Difference" := VATDifferenceLCY;
          VATEntry."Add.-Curr. VAT Difference" := SrcCurrVATDifference;
          IF GLSetup."Enable Russian Accounting" THEN BEGIN
            VATEntry.Positive := VATEntry.Amount > 0;
            VATEntry."Additional VAT Ledger Sheet" := "Additional VAT Ledger Sheet";
            VATEntry."Corrected Document Date" := "Corrected Document Date";
            VATEntry."Include In Other VAT Ledger" := "Include In Other VAT Ledger";
            VATEntry."Prepmt. Diff." := "Prepmt. Diff.";
            VATEntry."Document Line No." := "Document Line No.";
            IF VATEntry."Prepmt. Diff." THEN
              IF UnrealizedVAT THEN
                VATEntry."Initial VAT Transaction No." := InitialCVLedgEntryBuf."Transaction No."
              ELSE
                VATEntry."Initial VAT Transaction No." := InitialCVLedgEntryBuf."Entry No.";
            VATEntry."VAT Agent" := VATAgentVATPayment;
            VATEntry."Corrective Doc. Type" := GenJnlLine."Corrective Doc. Type";
          END;
          VATEntry.INSERT(TRUE);
          GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
          NextVATEntryNo := NextVATEntryNo + 1;
        END;

        IF GLSetup."Enable Russian Accounting" AND "Prepmt. Diff." AND UnrealizedVAT THEN
          PostPrepmtDiffRealizedVAT(GenJnlLine,VATEntry);

        // VAT for G/L entry/entries
        IF (GLEntryVATAmount <> 0) OR
           ((SrcCurrGLEntryVATAmt <> 0) AND (SrcCurrCode = AddCurrencyCode))
        THEN
        BEGIN // NC NOS-26 SPA
          CASE "Gen. Posting Type" OF
            "Gen. Posting Type"::Purchase:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  IF NOT GLSetup."Enable Russian Accounting" THEN
                    //NC NOS-26 > SPA
                    {
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE)
                    }
                    BEGIN
                      InitGLEntry(GenJnlLine,GLEntry,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          VATOriginalAmount :=
                              CurrExchRate.ExchangeAmtFCYToFCY(
                                "Posting Date","Currency Code",
                                GLSetup."Tax Currency Code","VAT Amount");
                          GLEntry."Original Amount" := VATOriginalAmount;
                        END;
                      END;
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;

                      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    END
                    //NC NOS-26 < SPA
                  ELSE
                    IF UnrealizedVAT THEN BEGIN
                      VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                      IF VATAgentVATPayment THEN BEGIN
                        InitGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup."Purch. VAT Unreal. Account",
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                        //NC NOS-26 > SPA
                        GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                        GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                        IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                          IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                            GLEntry."Original Currency Code" := '';
                            GLEntry."Original Amount" := GLEntryVATAmount;
                          END ELSE BEGIN
                            GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                            VATOriginalAmount :=
                                CurrExchRate.ExchangeAmtFCYToFCY(
                                  "Posting Date","Currency Code",
                                  GLSetup."Tax Currency Code","VAT Amount");
                            GLEntry."Original Amount" := VATOriginalAmount;
                          END;
                        END;
                        IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                          ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                        THEN BEGIN
                          GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                          GLEntry."Original Credit Amount" := 0;
                        END ELSE BEGIN
                          GLEntry."Original Debit Amount" := 0;
                          GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                        END;
                        //NC NOS-26 < SPA

                        InsertRUGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup."Purchase VAT Account",TRUE,TRUE,FALSE);
                      END ELSE
                        //NC NOS-26 > SPA
                        // функция разбита на составляющие : InitGLEntry + InsertGLEntry
                        {
                        CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                        }
                        InitGLEntry(GenJnlLine,GLEntry,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                        //NC OAM20.1 > DP
                        GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                        GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                        //NC NCS-2296 > DP
                        IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                          IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                            GLEntry."Original Currency Code" := '';
                            GLEntry."Original Amount" := GLEntryVATAmount;
                          END ELSE BEGIN
                            GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                            VATOriginalAmount :=
                               CurrExchRate.ExchangeAmtFCYToFCY(
                                 "Posting Date","Currency Code",
                                 GLSetup."Tax Currency Code","VAT Amount");
                            GLEntry."Original Amount" := VATOriginalAmount;
                          END;
                        END;
                        //NC NCS-2296 < DP
                        IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                          ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                        THEN BEGIN
                          GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                          GLEntry."Original Credit Amount" := 0;
                        END ELSE BEGIN
                          GLEntry."Original Debit Amount" := 0;
                          GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                        END;
                        //NC OAM20.1 < DP

                        InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                        //NC NOS-26 < SPA
                    END ELSE BEGIN
                      IF VATPostingSetup."Trans. VAT Account" <> '' THEN BEGIN
                        //NC NOS-26 > SPA
                        // функция разбита на составляющие : InitGLEntry + InsertGLEntry
                        {
                        CreateGLEntry(GenJnlLine,VATPostingSetup."Trans. VAT Account",
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                        }
                        InitGLEntry(GenJnlLine,GLEntry,VATPostingSetup."Trans. VAT Account",
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                        //NC OAM20.1 > DP
                        GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                        GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                        //NC NCS-2296 > DP
                        IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                          IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                            GLEntry."Original Currency Code" := '';
                            GLEntry."Original Amount" := GLEntryVATAmount;
                          END ELSE BEGIN
                            GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                            VATOriginalAmount :=
                               CurrExchRate.ExchangeAmtFCYToFCY(
                                 "Posting Date","Currency Code",
                                 GLSetup."Tax Currency Code","VAT Amount");
                             GLEntry."Original Amount" := VATOriginalAmount;
                          END;
                        END;
                        //NC NCS-2296 < DP
                        IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                          ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                        THEN BEGIN
                          GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                          GLEntry."Original Credit Amount" := 0;
                        END ELSE BEGIN
                          GLEntry."Original Debit Amount" := 0;
                          GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                        END;
                        //NC OAM20.1 < DP
                        InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                        {
                        CreateGLEntryBalAcc(GenJnlLine,VATPostingSetup."Trans. VAT Account",
                          -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,0,VATPostingSetup."Purchase VAT Account");
                        }
                        InitGLEntry(GenJnlLine,GLEntry,VATPostingSetup."Trans. VAT Account",
                          -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                        GLEntry."Bal. Account Type" := 0;
                        GLEntry."Bal. Account No." := VATPostingSetup."Purchase VAT Account";

                        //NC OAM20.1 > DP
                        GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                        GLEntry."Original Amount" := -GenJnlLine."VAT Amount";
                        //NC NCS-2296 > DP
                        IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                          IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                            GLEntry."Original Currency Code" := '';
                            GLEntry."Original Amount" := -GLEntryVATAmount;
                          END ELSE BEGIN
                            GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                            GLEntry."Original Amount" := -VATOriginalAmount;
                          END;
                        END;
                        //NC NCS-2296 < DP
                        IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                          ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                        THEN BEGIN
                          GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                          GLEntry."Original Credit Amount" := 0;
                        END ELSE BEGIN
                          GLEntry."Original Debit Amount" := 0;
                          GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                        END;
                        //NC OAM20.1 < DP
                        InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                        //NC NOS-26 < SPA
                      END;
                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                      InitGLEntry(GenJnlLine,GLEntry,
                        VATPostingSetup."Purchase VAT Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      IF VATPostingSetup."Trans. VAT Account" <> '' THEN
                        GLEntry."Bal. Account No." := VATPostingSetup."Trans. VAT Account";

                      //NC OAM20.1 > DP
                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                      //NC NCS-2296 > DP
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          VATOriginalAmount :=
                             CurrExchRate.ExchangeAmtFCYToFCY(
                               "Posting Date","Currency Code",
                               GLSetup."Tax Currency Code","VAT Amount");
                           GLEntry."Original Amount" := VATOriginalAmount;
                        END;
                      END;
                      //NC NCS-2296 < DP
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;
                      //NC OAM20.1 < DP

                      IF VATAgentVATPayment THEN BEGIN
                        InitGLEntry(GenJnlLine,GLEntry,
                          GetPayablesAccountNo(GenJnlLine),
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                        //NC NOS-26 > SPA
                        GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                        GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                        IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                          IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                            GLEntry."Original Currency Code" := '';
                            GLEntry."Original Amount" := GLEntryVATAmount;
                          END ELSE BEGIN
                            GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                            VATOriginalAmount :=
                                CurrExchRate.ExchangeAmtFCYToFCY(
                                  "Posting Date","Currency Code",
                                  GLSetup."Tax Currency Code","VAT Amount");
                            GLEntry."Original Amount" := VATOriginalAmount;
                          END;
                        END;
                        IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                          ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                        THEN BEGIN
                          GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                          GLEntry."Original Credit Amount" := 0;
                        END ELSE BEGIN
                          GLEntry."Original Debit Amount" := 0;
                          GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                        END;
                        //NC NOS-26 < SPA

                        InsertRUGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup."Purchase VAT Account",TRUE,TRUE,FALSE);
                      END ELSE
                        InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    END;
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  IF NOT GLSetup."Enable Russian Accounting" THEN BEGIN
                    //NC NOS-26 > SPA
                    // функции разбиты на составляющие : InitGLEntry + InsertGLEntry
                    {
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                      -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);
                    }
                    InitGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                    GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                    GLEntry."Original Amount" := ReverseChargeVATOrigAmount;
                    IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                      IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                        GLEntry."Original Currency Code" := '';
                        GLEntry."Original Amount" := GLEntryVATAmount;
                      END ELSE BEGIN
                        GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                        VATOriginalAmount :=
                            CurrExchRate.ExchangeAmtFCYToFCY(
                              "Posting Date","Currency Code",
                              GLSetup."Tax Currency Code","VAT Amount");
                        GLEntry."Original Amount" := VATOriginalAmount;
                      END;
                    END;
                    IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                      ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                    THEN BEGIN
                      GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                      GLEntry."Original Credit Amount" := 0;
                    END ELSE BEGIN
                      GLEntry."Original Debit Amount" := 0;
                      GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                    END;
                    InsertGLEntry(GenJnlLine,GLEntry,TRUE);

                    InitGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                          -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);

                    GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                    GLEntry."Original Amount" := -ReverseChargeVATOrigAmount;
                    IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                      IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                        GLEntry."Original Currency Code" := '';
                        GLEntry."Original Amount" := -GLEntryVATAmount;
                      END ELSE BEGIN
                        GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                        GLEntry."Original Amount" := -VATOriginalAmount;
                      END;
                    END;
                    IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                      ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                    THEN BEGIN
                      GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                      GLEntry."Original Credit Amount" := 0;
                    END ELSE BEGIN
                      GLEntry."Original Debit Amount" := 0;
                      GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                    END;
                    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    //NC NOS-26 < SPA
                  END ELSE
                    IF UnrealizedVAT THEN BEGIN
                      //NC NOS-26 > SPA
                      // функции разбиты на составляющие : InitGLEntry + InsertGLEntry
                      {
                      CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                      CreateGLEntry(GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);
                      }
                      InitGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                      //NC OAM20.1 > DP
                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := ReverseChargeVATOrigAmount;
                      //NC NCS-2296 > DP
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          VATOriginalAmount :=
                            CurrExchRate.ExchangeAmtFCYToFCY(
                              "Posting Date","Currency Code",
                              GLSetup."Tax Currency Code",ReverseChargeVATOrigAmount);
                          GLEntry."Original Amount" := VATOriginalAmount;
                        END;
                      END;
                      //NC NCS-2296 < DP
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;
                      //NC OAM20.1 < DP
                      InsertGLEntry(GenJnlLine,GLEntry,TRUE);

                      InitGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                          -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);

                      //NC OAM20.1 > DP
                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := -ReverseChargeVATOrigAmount;
                      //NC NCS-2296 > DP
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := -GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          GLEntry."Original Amount" := -VATOriginalAmount;
                        END;
                      END;
                      //NC NCS-2296 < DP
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;
                      //NC OAM20.1 < DP
                      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                      //NC NOS-26 < SPA
                    END ELSE BEGIN
                      //NC NOS-26 > SPA
                      // функции разбиты на составляющие : InitGLEntry + InsertGLEntry
                      {
                      CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                      CreateGLEntry(GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);
                      }
                      InitGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                          GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                      //NC OAM20.1 > DP
                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" :=  ReverseChargeVATOrigAmount;
                      //NC NCS-2296 > DP
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          VATOriginalAmount :=
                            CurrExchRate.ExchangeAmtFCYToFCY(
                              "Posting Date","Currency Code",
                              GLSetup."Tax Currency Code",ReverseChargeVATOrigAmount);
                          GLEntry."Original Amount" := VATOriginalAmount;
                        END;
                      END;
                      //NC NCS-2296 < DP

                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;
                      //NC OAM20.1 < DP
                      InsertGLEntry(GenJnlLine,GLEntry,TRUE);

                      InitGLEntry(GenJnlLine,GLEntry,
                          VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                          -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);

                      //NC OAM20.1 > DP
                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := -ReverseChargeVATOrigAmount;
                      //NC NCS-2296 > DP
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := -GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          GLEntry."Original Amount" := -VATOriginalAmount;
                        END;
                      END;
                      //NC NCS-2296 < DP
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;
                      //NC OAM20.1 < DP
                      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                      //NC NOS-26 < SPA
                    END;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  IF "Use Tax" THEN BEGIN
                    //NC NOS-26 > SPA
                    // функция разбита на составляющие : InitGLEntry + InsertGLEntry
                    {
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,
                      VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                    }
                    InitGLEntry(GenJnlLine,GLEntry,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                    //NC OAM20.1 > DP
                    GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                    GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                    //NC NCS-2296 > DP
                    IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                      IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                        GLEntry."Original Currency Code" := '';
                        GLEntry."Original Amount" := GLEntryVATAmount;
                      END ELSE BEGIN
                        GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                        VATOriginalAmount :=
                          CurrExchRate.ExchangeAmtFCYToFCY(
                             "Posting Date","Currency Code",
                             GLSetup."Tax Currency Code","VAT Amount");
                        GLEntry."Original Amount" := VATOriginalAmount;
                      END;
                    END;
                    //NC NCS-2296 < DP
                    IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                      ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                    THEN BEGIN
                      GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                      GLEntry."Original Credit Amount" := 0;
                    END ELSE BEGIN
                      GLEntry."Original Debit Amount" := 0;
                      GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                    END;
                    //NC OAM20.1 < DP
                    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry,
                      VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");

                    // функция разбита на составляющие : InitGLEntry + SummarizeVAT
                    {
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetRevChargeAccount(UnrealizedVAT),'',
                      -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,
                      VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                    }
                    InitGLEntry(GenJnlLine,GLEntry,TaxJurisdiction.GetRevChargeAccount(UnrealizedVAT),-GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);

                    //NC OAM20.1 > DP
                    GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                    GLEntry."Original Amount" := -GenJnlLine."VAT Amount";
                    //NC NCS-2296 > DP
                    IF GLSetup."Tax Currency Code" <>'' THEN BEGIN
                      IF GLSetup."Tax Currency Code"=GLSetup."LCY Code" THEN BEGIN
                        GLEntry."Original Currency Code" := '';
                        GLEntry."Original Amount" := -GLEntryVATAmount;
                      END ELSE BEGIN
                        GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                        GLEntry."Original Amount" := -VATOriginalAmount;
                      END;
                    END;
                    //NC NCS-2296 < DP
                    IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                      ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                    THEN BEGIN
                      GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                      GLEntry."Original Credit Amount" := 0;
                    END ELSE BEGIN
                      GLEntry."Original Debit Amount" := 0;
                      GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                    END;
                    //NC OAM20.1 < DP
                    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry,
                      VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                    //NC NOS-26 < SPA
                  END ELSE
                    //NC NOS-26 > SPA
                    // функция разбита на составляющие : InitGLEntry + SummarizeVAT
                    {
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,
                      VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                    }
                    BEGIN
                      InitGLEntry(GenJnlLine,GLEntry,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                      //NC OAM20.1 > DP
                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                      //NC NCS-2296 > DP
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          VATOriginalAmount :=
                            CurrExchRate.ExchangeAmtFCYToFCY(
                              "Posting Date","Currency Code",
                              GLSetup."Tax Currency Code","VAT Amount");
                         GLEntry."Original Amount" := VATOriginalAmount;
                        END;
                      END;
                      //NC NCS-2296 < DP
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;
                      //NC OAM20.1 < DP

                      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry,
                        VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                    END;
                    //NC NOS-26 < SPA
              END;
            "Gen. Posting Type"::Sale:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  IF NOT GLSetup."Enable Russian Accounting" THEN
                    //NC NOS-26 > SPA
                    // функция разбита на составляющие : InitGLEntry + InsertGLEntry
                    {
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetSalesAccount(UnrealizedVAT),
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE)
                    }
                    BEGIN
                      InitGLEntry(GenJnlLine,GLEntry,VATPostingSetup.GetSalesAccount(UnrealizedVAT),GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          VATOriginalAmount :=
                            CurrExchRate.ExchangeAmtFCYToFCY(
                              "Posting Date","Currency Code",
                              GLSetup."Tax Currency Code","VAT Amount");
                          GLEntry."Original Amount" := VATOriginalAmount;
                        END;
                      END;
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;

                      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    END
                    //NC NOS-26 < SPA
                  ELSE BEGIN
                    IF VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount & Tax" THEN
                      //NC NOS-26 > SPA
                      // функция разбита на составляющие : InitGLEntry + InsertGLEntry
                      {
                      CreateGLEntry(GenJnlLine,TransVATAccNo,
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                      }
                      BEGIN
                        InitGLEntry(GenJnlLine,GLEntry,TransVATAccNo,GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                        //NC OAM20.1 > DP
                        GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                        GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                        //NC NCS-2296 > DP
                        IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                          IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                            GLEntry."Original Currency Code" := '';
                            GLEntry."Original Amount" := GLEntryVATAmount;
                          END ELSE BEGIN
                            GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                            VATOriginalAmount :=
                              CurrExchRate.ExchangeAmtFCYToFCY(
                                "Posting Date","Currency Code",
                                GLSetup."Tax Currency Code","VAT Amount");
                            GLEntry."Original Amount" := VATOriginalAmount;
                          END;
                        END;
                        //NC NCS-2296 < DP
                        IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                          ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                        THEN BEGIN
                          GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                          GLEntry."Original Credit Amount" := 0;
                        END ELSE BEGIN
                          GLEntry."Original Debit Amount" := 0;
                          GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                        END;
                        //NC OAM20.1 < DP
                        InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                      END;
                      //NC NOS-26 < SPA
                    IF UnrealizedVAT THEN BEGIN
                      VATPostingSetup.TESTFIELD("Sales VAT Unreal. Account");
                      InitGLEntry(GenJnlLine,GLEntry,
                        VATPostingSetup."Sales VAT Unreal. Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END ELSE BEGIN
                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                      InitGLEntry(GenJnlLine,GLEntry,
                        VATPostingSetup."Sales VAT Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END;

                    //NC OAM20.1 > DP
                    GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                    GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                    //NC NCS-2296 > DP
                    IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                      IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                        GLEntry."Original Currency Code" := '';
                        GLEntry."Original Amount" := GLEntryVATAmount;
                      END ELSE BEGIN
                        GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                        VATOriginalAmount :=
                          CurrExchRate.ExchangeAmtFCYToFCY(
                            "Posting Date","Currency Code",
                            GLSetup."Tax Currency Code","VAT Amount");
                        GLEntry."Original Amount" := VATOriginalAmount;
                      END;
                    END;
                    //NC NCS-2296 < DP
                    IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                      ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                    THEN BEGIN
                      GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                      GLEntry."Original Credit Amount" := 0;
                    END ELSE BEGIN
                      GLEntry."Original Debit Amount" := 0;
                      GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                    END;
                    //NC OAM20.1 < DP
                    InsertRUGLEntry(GenJnlLine,GLEntry,
                      TransVATAccNo,TransVATAccNo <> '',TRUE,FALSE);
                  END;
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  ;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  IF NOT GLSetup."Enable Russian Accounting" THEN
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetSalesAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,FALSE)
                  ELSE BEGIN
                    IF TaxJurisdiction."Trans. VAT Type" = TaxJurisdiction."Trans. VAT Type"::"Amount & Tax" THEN BEGIN
                      InitGLEntry(GenJnlLine,GLEntry,
                        TransVATAccNo,GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

                      //NC OAM20.1 > DP
                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                      //NC NCS-2296 > DP
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := GLEntryVATAmount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          VATOriginalAmount :=
                            CurrExchRate.ExchangeAmtFCYToFCY(
                              "Posting Date","Currency Code",
                              GLSetup."Tax Currency Code","VAT Amount");
                          GLEntry."Original Amount" := VATOriginalAmount;
                        END;
                      END;
                      //NC NCS-2296 < DP
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;
                      //NC OAA020.1 < DP

                      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry,FALSE);
                    END;
                    IF UnrealizedVAT THEN BEGIN
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
                      InitGLEntry(GenJnlLine,GLEntry,
                        TaxJurisdiction."Unreal. Tax Acc. (Sales)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END ELSE BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                      InitGLEntry(GenJnlLine,GLEntry,
                        TaxJurisdiction."Tax Account (Sales)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END;
                    GLEntry."Bal. Account No." := TransVATAccNo;

                    //NC OAM20.1 > DP
                    GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                    GLEntry."Original Amount" := GenJnlLine."VAT Amount";
                    //NC NCS-2296 > DP
                    IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                      IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                        GLEntry."Original Currency Code" := '';
                        GLEntry."Original Amount" := GLEntryVATAmount;
                      END ELSE BEGIN
                        GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                        VATOriginalAmount :=
                          CurrExchRate.ExchangeAmtFCYToFCY(
                            "Posting Date","Currency Code",
                            GLSetup."Tax Currency Code","VAT Amount");
                        GLEntry."Original Amount" := VATOriginalAmount;
                      END;
                    END;
                    //NC NCS-2296 < DP
                    IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                      ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                    THEN BEGIN
                      GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                      GLEntry."Original Credit Amount" := 0;
                    END ELSE BEGIN
                      GLEntry."Original Debit Amount" := 0;
                      GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                    END;
                    //NC OAM20.1 < DP

                    IF VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount & Tax" THEN BEGIN
                      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry,FALSE);
                      SavGLAccountNo := GLEntry."G/L Account No.";
                      InitGLEntry(GenJnlLine,GLEntry,
                        TransVATAccNo,-GLEntry.Amount,-GLEntry."Additional-Currency Amount",TRUE,TRUE);
                      GLEntry."Bal. Account No." := SavGLAccountNo;

                      //NC OAM20.1 > DP
                      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
                      GLEntry."Original Amount" := -GenJnlLine."VAT Amount";
                      //NC NCS-2296 > DP
                      IF GLSetup."Tax Currency Code" <> '' THEN BEGIN
                        IF GLSetup."Tax Currency Code" = GLSetup."LCY Code" THEN BEGIN
                          GLEntry."Original Currency Code" := '';
                          GLEntry."Original Amount" := -GLEntry.Amount;
                        END ELSE BEGIN
                          GLEntry."Original Currency Code" := GLSetup."Tax Currency Code";
                          VATOriginalAmount :=
                            CurrExchRate.ExchangeAmtFCYToFCY(
                              "Posting Date","Currency Code",
                              GLSetup."Tax Currency Code","VAT Amount");
                          GLEntry."Original Amount" := -VATOriginalAmount;
                        END;
                      END;
                      //NC NCS-2296 < DP
                      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                        ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
                      THEN BEGIN
                        GLEntry."Original Debit Amount" := GLEntry."Original Amount";
                        GLEntry."Original Credit Amount" := 0;
                      END ELSE BEGIN
                        GLEntry."Original Debit Amount" := 0;
                        GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
                      END;
                      //NC OAM20.1 < DP
                    END;
                    SummarizeVAT(
                      GLSetup."Summarize G/L Entries",GLEntry,
                      VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                  END;
              END;
          END;
          //NC NCS-2296 > DP
          tmpVATGL.INIT;
          tmpVATGL."Entry No." := GLEntry."Entry No.";
          tmpVATGL."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
          tmpVATGL.INSERT;
          //NC NCS-2296 < DP
        END;
      END;
    END;

    LOCAL PROCEDURE SummarizeVAT@31(SummarizeGLEntries@1000 : Boolean;GLEntry@1001 : Record 17;TransVATTypeIsAmountPlusTax@1210000 : Boolean);
    VAR
      InsertedTempVAT@1004 : Boolean;
    BEGIN
      InsertedTempVAT := FALSE;
      IF SummarizeGLEntries THEN
        IF TempGLEntryVAT.FINDSET THEN
          REPEAT
            IF (TempGLEntryVAT."G/L Account No." = GLEntry."G/L Account No.") AND
               (TempGLEntryVAT."Bal. Account No." = GLEntry."Bal. Account No.")
            THEN BEGIN
              TempGLEntryVAT.Amount := TempGLEntryVAT.Amount + GLEntry.Amount;
              TempGLEntryVAT."Additional-Currency Amount" :=
                TempGLEntryVAT."Additional-Currency Amount" + GLEntry."Additional-Currency Amount";
              TempGLEntryVAT.MODIFY;
              InsertedTempVAT := TRUE;
            END;
          UNTIL (TempGLEntryVAT.NEXT = 0) OR InsertedTempVAT;
      IF NOT InsertedTempVAT OR NOT SummarizeGLEntries THEN BEGIN
        TempGLEntryVAT := GLEntry;
        TempGLEntryVAT."Entry No." :=
          TempGLEntryVAT."Entry No." + InsertedTempGLEntryVAT;
        TempGLEntryVAT.INSERT;
        InsertedTempGLEntryVAT := InsertedTempGLEntryVAT + 1;
        IF GLSetup."Enable Russian Accounting" THEN
          IF (TransVATAccNo <> '') AND TransVATTypeIsAmountPlusTax THEN
            InsertedTempGLEntryVAT := InsertedTempGLEntryVAT + 1;
      END;
    END;

    LOCAL PROCEDURE InsertSummarizedVAT@37(GenJnlLine@1000 : Record 81;VATPostingSetup@1210001 : Record 325);
    BEGIN
      IF TempGLEntryVAT.FINDSET THEN BEGIN
        REPEAT
          IF NOT GLSetup."Enable Russian Accounting" THEN
            InsertGLEntry(GenJnlLine,TempGLEntryVAT,TRUE)
          ELSE
            IF (TransVATAccNo <> '') AND
               (VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax")
            THEN
              InsertRUGLEntry(GenJnlLine,TempGLEntryVAT,TempGLEntryVAT."Bal. Account No.",TRUE,TRUE,FALSE)
            ELSE
              InsertGLEntry(GenJnlLine,TempGLEntryVAT,TRUE)
        UNTIL TempGLEntryVAT.NEXT = 0;
        TempGLEntryVAT.DELETEALL;
        InsertedTempGLEntryVAT := 0;
      END;
      NextConnectionNo := NextConnectionNo + 1;
    END;

    LOCAL PROCEDURE PostGLAcc@11(GenJnlLine@1001 : Record 81;Balancing@1004 : Boolean);
    VAR
      GLAcc@1000 : Record 15;
      GLEntry@1002 : Record 17;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      WITH GenJnlLine DO BEGIN
        GLAcc.GET("Account No.");
        // G/L entry
        InitGLEntry(GenJnlLine,GLEntry,
          "Account No.","Amount (LCY)",
          "Source Currency Amount",TRUE,"System-Created Entry");

      // NC MIO-11 > AES
      //  IF NOT "System-Created Entry" THEN
        IF NOT "System-Created Entry" AND
           NOT GLSetup.IsGLAccountingOnly
      // NC MIO-11 < AES
        THEN
          IF "Posting Date" = NORMALDATE("Posting Date") THEN
            GLAcc.TESTFIELD("Direct Posting",TRUE);
        IF GLAcc."Omit Default Descr. in Jnl." THEN
          IF DELCHR(Description,'=',' ') = '' THEN
            ERROR(
              DescriptionMustNotBeBlankErr,
              GLAcc.FIELDCAPTION("Omit Default Descr. in Jnl."),
              GLAcc."No.",
              FIELDCAPTION(Description));
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        GLEntry."No. Series" := "Posting No. Series";
        IF "Additional-Currency Posting" =
           "Additional-Currency Posting"::"Additional-Currency Amount Only"
        THEN BEGIN
          GLEntry."Additional-Currency Amount" := Amount;
          GLEntry.Amount := 0;
        END;
        // Store Entry No. to global variable for return:
        GLEntryNo := GLEntry."Entry No.";

        //NC PIF001 > DP
        IF (GenJnlLine."Analysis View Budget Code" <> '') AND
           (GenJnlLine."Analysis View Budget Entry No." > 0)
        THEN
          SetGLEntryNo(GenJnlLine, GLEntry);
        //NC PIF001 < DP

        InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
        InsertGLEntry(GenJnlLine,GLEntry,TRUE);
        PostJob(GenJnlLine,GLEntry);
        PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
        DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
        //NC NOS-26 > SPA
        IF "Transaction Type" <> "Transaction Type"::Automatic THEN
        //NC NOS-26 < SPA
          OnMoveGenJournalLine(GLEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostCust@12(VAR GenJnlLine@1007 : Record 81;Balancing@1010 : Boolean);
    VAR
      LineFeeNoteOnReportHist@1008 : Record 1053;
      Cust@1005 : Record 18;
      CustPostingGr@1006 : Record 92;
      CustLedgEntry@1000 : Record 21;
      CVLedgEntryBuf@1002 : Record 382;
      TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldCustLedgEntry@1004 : Record 379;
      CustAgreement@1101495000 : Record 14902;
      ReceivablesAccount@1009 : Code[20];
      DtldLedgEntryInserted@1001 : Boolean;
      TempDimSetEntry@1101495001 : TEMPORARY Record 480;
    BEGIN
      WITH GenJnlLine DO BEGIN
        Cust.GET("Account No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        END;
        CustPostingGr.GET("Posting Group");
        ReceivablesAccount := CustPostingGr.GetReceivablesAccount;

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        InitCustLedgEntry(GenJnlLine,CustLedgEntry);
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          IF "Prepayment Status" <> "Prepayment Status"::" " THEN BEGIN
            CustLedgEntry."Prepayment Document No." := "Prepayment Document No.";
            LastDocType := "Document Type"::Payment;
            LastDocNo := CustLedgEntry."Prepayment Document No.";
          END;
          CustLedgEntry.VALIDATE("Prepmt. Diff. Appln. Entry No.","Prepmt. Diff. Appln. Entry No.");
          NextEntryNo := NextEntryNo + 1;

          //NC MLN03 > EB
          CustLedgEntry."Agreement Condition No." := "Agreement Condition No.";
          CustLedgEntry."Amount Type" := "Amount Type";
          //NC MLN03 < EB
          //NC TR277 > DP
          IF "Agreement No."<>'' THEN BEGIN
            CustAgreement.GET(CustLedgEntry."Customer No.",CustLedgEntry."Agreement No.");
            CustAgreement.TESTFIELD(Blocked,CustAgreement.Blocked::" ");
            //NC MLN04 > DP
            IF CustAgreement."Agreement Type" = CustAgreement."Agreement Type"::Loans THEN
            //NC MLN09.4 > DP
            BEGIN
            //NC MLN09.4 < DP
              CheckLoanAgreementAmount(GenJnlLine);
            //NC MLN04 < DP
            //NC MLN09.4 > DP
              UpdateCVAgreementDetail(0,CustLedgEntry."Customer No.",
                                         CustLedgEntry."Agreement No.",
                                         CustLedgEntry."Agreement Condition No.",
                                         CustLedgEntry."Posting Date",
                                         FALSE,
                                         CustLedgEntry."Document Type"
          //NC MLN09.5 > DP
                                        ,GenJnlLine."Change Condition Block Status"
          //NC MLN09.5 < DP
                                      );
            END;
            //NC MLN09.4 < DP
          END;
          //NC TR277 < DP
          //NC MLN09 > DP
          IF "Amount Type" = "Amount Type"::Interest THEN BEGIN
            UpdateCVAgreementSchedule(0,CustLedgEntry."Customer No.",
                                         CustLedgEntry."Agreement No.",
                                         CustLedgEntry."Agreement Condition No.",
                                         CustLedgEntry."Posting Date",
                                         CustLedgEntry."Entry No.",
                                       FALSE);
             CustLedgEntry."Interest Calc. No. of Days" := "Interest Calc. No. of Days";
             //NC APCOC-56 > DP
             CustLedgEntry."Interest Accrual" := "Interest Accrual";
             //NC APCOC-56 < DP
          END;
          //NC MLN09 < DP

          //NC MLN09.3 > DP
          IF GenJnlLine."Change Condition Block Status" THEN
             CustLedgEntry."Change Condition Block Status" := TRUE;
          //NC MLN09.3 > DP
        END;

        IF NOT Cust."Block Payment Tolerance" THEN
          CalcPmtTolerancePossible(
            GenJnlLine,CustLedgEntry."Pmt. Discount Date",CustLedgEntry."Pmt. Disc. Tolerance Date",
            CustLedgEntry."Max. Payment Tolerance");

        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := CustLedgEntry."Entry No.";
        TempDtldCVLedgEntryBuf."Agreement No." := CustLedgEntry."Agreement No.";
        //NC MLN03 > EB
        TempDtldCVLedgEntryBuf."Agreement Condition No." := CustLedgEntry."Agreement Condition No.";
        TempDtldCVLedgEntryBuf."Amount Type" := CustLedgEntry."Amount Type";
        //NC MLN03 < EB
        //NC APCOC-56 > DP
        TempDtldCVLedgEntryBuf."Interest Accrual" := CustLedgEntry."Interest Accrual";
        //NC APCOC-56 < DP
        CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);

        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Original Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Original Currency Factor" := 1;
        CVLedgEntryBuf."Adjusted Currency Factor" := CVLedgEntryBuf."Original Currency Factor";

        // Check the document no.
        IF ("Recurring Method" = 0) AND NOT "Prepmt. Diff." THEN
          IF IsNotPayment("Document Type") THEN BEGIN
            GenJnlCheckLine.CheckSalesDocNoIsNotUsed("Document Type","Document No.");
            IF CustLedgEntry."Prepmt. Diff. Cust. Entry No." = 0 THEN
              CheckSalesExtDocNo(GenJnlLine);
          END;

        // Post application
        IF NOT "Prepmt. Diff." THEN
          ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust);

        // Post customer entry
        CustLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Applies-to Doc. No." := '';
        IF GLSetup."Enable Russian Accounting" AND "Prepmt. Diff." THEN
          SetCVLedgEntryForVAT(NextTransactionNo,InitialCVLedgEntryBuf."Entry No.")
        ELSE
          BEGIN
            CustLedgEntry.INSERT(TRUE);

            //TDRAAPCOC-129>
            DimMgt.GetDimensionSet(TempDimSetEntry,GenJnlLine."Dimension Set ID");
            IF NOT TempDimSetEntry.ISEMPTY THEN
              IF NOT Prepayment THEN
                fn_InsertDefDimValueFromAcc(CustPostingGr."Receivables Account",TempDimSetEntry) //NC NOS-26
              ELSE
                fn_InsertDefDimValueFromAcc(CustPostingGr."Prepayment Account",TempDimSetEntry); //NC NOS-26
            //TDRAAPCOC-129<

            //TDRAMIO-41.1>
            IF NOT TempDimSetEntry.ISEMPTY THEN
              IF NOT Prepayment THEN
                fn_InsertRealCounterparty(CustPostingGr."Receivables Account",TempDimSetEntry) //NC NOS-26
              ELSE
                fn_InsertRealCounterparty(CustPostingGr."Prepayment Account",TempDimSetEntry); //NC NOS-26
            //TDRAMIO-41.1<

            //TDRANCS-1533>
            IF NOT TempDimSetEntry.ISEMPTY THEN
              fn_InsertLegalEntityDimValue(TempDimSetEntry); //NC NOS-26
            //TDRANCS-1533<
            CustLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
            DimMgt.UpdateGlobalDimFromDimSetID(CustLedgEntry."Dimension Set ID",
              CustLedgEntry."Global Dimension 1 Code",
              CustLedgEntry."Global Dimension 2 Code");
            CustLedgEntry.MODIFY(TRUE);
          END;
        //NC NOS-26 < SPA

        // Post detailed customer entries
        DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,TRUE);

        // Post Reminder Terms - Note About Line Fee on Report
        LineFeeNoteOnReportHist.Save(CustLedgEntry);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);

        IF GLSetup."Enable Russian Accounting" AND NOT "Prepmt. Diff." THEN
          SetCVLedgEntryForVAT(NextTransactionNo,CustLedgEntry."Entry No.");

        DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
        //NC NOS-26 > SPA
        IF "Transaction Type" <> "Transaction Type"::Automatic THEN
        //NC NOS-26 < SPA
          OnMoveGenJournalLine(CustLedgEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostVend@13(GenJnlLine@1007 : Record 81;Balancing@1009 : Boolean);
    VAR
      Vend@1005 : Record 23;
      VendPostingGr@1006 : Record 93;
      VendLedgEntry@1000 : Record 25;
      VendAgreement@1210001 : Record 14901;
      CVLedgEntryBuf@1002 : Record 382;
      TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldVendLedgEntry@1004 : Record 380;
      VendorFunds@1210000 : Boolean;
      PayablesAccount@1008 : Code[20];
      DtldLedgEntryInserted@1001 : Boolean;
      TempDimSetEntry@1101495000 : TEMPORARY Record 480;
    BEGIN
      WITH GenJnlLine DO BEGIN
        Vend.GET("Account No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        PayablesAccount := VendPostingGr.GetPayablesAccount;

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        //NC TR189 > DP
        CheckAgreementAmount(GenJnlLine);
        //NC TR189 < DP

        InitVendLedgEntry(GenJnlLine,VendLedgEntry);
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          VendLedgEntry.VALIDATE("Prepmt. Diff. Appln. Entry No.","Prepmt. Diff. Appln. Entry No.");
          IF "Prepmt. Diff. Appln. Entry No." <> 0 THEN BEGIN
            VendLedgEntry."Vendor VAT Invoice No." := "Document No.";
            VendLedgEntry."Vendor VAT Invoice Date" := "Posting Date";
            VendLedgEntry."Vendor VAT Invoice Rcvd Date" := "Posting Date";
          END;
          NextEntryNo += 1;

          //NC MLN03 > EB
          VendLedgEntry."Agreement Condition No." := "Agreement Condition No.";
          VendLedgEntry."Amount Type" := "Amount Type";
          //NC MLN03 < EB
          //NC OCPM01.2 > DP
          //VendLedgEntry."Text 1" := GenJnlLine."Text 1"; //NC NOS-26 SPA ?? нет поля #TODO#
          //NC OCPM01.2 < DP
          //NC TR277 > DP
          IF "Agreement No."<>'' THEN BEGIN
            VendAgreement.GET(VendLedgEntry."Vendor No.",VendLedgEntry."Agreement No.");
            VendAgreement.TESTFIELD(Blocked,VendAgreement.Blocked::" ");
            //NC MLN04 > DP
            IF VendAgreement."Agreement Type" = VendAgreement."Agreement Type"::Loans THEN

            //NC MLN09.4 > DP
            BEGIN
            //NC MLN09.4 < DP

              CheckLoanAgreementAmount(GenJnlLine);
            //NC MLN04 < DP

            //NC MLN09.4 > DP
              UpdateCVAgreementDetail(1,VendLedgEntry."Vendor No.",
                                         VendLedgEntry."Agreement No.",
                                         VendLedgEntry."Agreement Condition No.",
                                         VendLedgEntry."Posting Date",
                                         FALSE,
                                         VendLedgEntry."Document Type"
            //NC MLN09.5 > DP
                                        ,GenJnlLine."Change Condition Block Status"
            //NC MLN09.5 < DP

                                         );
            END;
            //NC MLN09.4 < DP
          END;
          //NC TR277 < DP

          //NC MLN09 > DP
          IF "Amount Type" = "Amount Type"::Interest THEN BEGIN
             UpdateCVAgreementSchedule(1,VendLedgEntry."Vendor No.",
                                         VendLedgEntry."Agreement No.",
                                         VendLedgEntry."Agreement Condition No.",
                                         VendLedgEntry."Posting Date",
                                         VendLedgEntry."Entry No.",
                                         FALSE);
            VendLedgEntry."Interest Calc. No. of Days" := "Interest Calc. No. of Days";
            //NC APCOC-56 > DP
            VendLedgEntry."Interest Accrual" := "Interest Accrual";
            //NC APCOC-56 < DP
          END;
          //NC MLN09 < DP
          //NC MLN09.3 > DP
          IF "Change Condition Block Status" THEN
             VendLedgEntry."Change Condition Block Status" := TRUE;
          //NC MLN09.3 > DP
        END;

        IF NOT Vend."Block Payment Tolerance" THEN
          CalcPmtTolerancePossible(
            GenJnlLine,VendLedgEntry."Pmt. Discount Date",VendLedgEntry."Pmt. Disc. Tolerance Date",
            VendLedgEntry."Max. Payment Tolerance");

        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := VendLedgEntry."Entry No.";
        TempDtldCVLedgEntryBuf."Agreement No." := VendLedgEntry."Agreement No.";
        //NC MLN03 > EB
        TempDtldCVLedgEntryBuf."Agreement Condition No." := VendLedgEntry."Agreement Condition No.";
        TempDtldCVLedgEntryBuf."Amount Type" := VendLedgEntry."Amount Type";
        //NC MLN03 < EB
        //NC APCOC-56 > DP
        TempDtldCVLedgEntryBuf."Interest Accrual" := VendLedgEntry."Interest Accrual";
        //NC APCOC-56 < DP
        CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);

        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Adjusted Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Adjusted Currency Factor" := 1;
        CVLedgEntryBuf."Original Currency Factor" := CVLedgEntryBuf."Adjusted Currency Factor";

        // Check the document no.
        IF ("Recurring Method" = 0) AND NOT "Prepmt. Diff." THEN
          //NC NOS-26 > SPA
          //IF IsNotPayment("Document Type") THEN BEGIN
          //NC OAM35 > DP
          IF ("Document Type" IN
             ["Document Type"::Invoice,
             "Document Type"::"Credit Memo",
             "Document Type"::"Finance Charge Memo",
             "Document Type"::Reminder])
             AND (Vend."Vendor Type" = Vend."Vendor Type"::Vendor)
             //NC OAM35 < DP
          THEN BEGIN
          //NC NOS-26 < SPA
            GenJnlCheckLine.CheckPurchDocNoIsNotUsed("Document Type","Document No.");
            CheckPurchExtDocNo(GenJnlLine,VendLedgEntry."Prepmt. Diff. Vend. Entry No." <> 0);
          END;

        // Post application
        IF NOT "Prepmt. Diff." THEN
          ApplyVendLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend,VendPostingGr);

        // Post vendor entry
        VendLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Applies-to Doc. Type" := VendLedgEntry."Applies-to Doc. Type"::" ";
        VendLedgEntry."Applies-to Doc. No." := '';
        IF GLSetup."Enable Russian Accounting" AND "Prepmt. Diff." THEN
          SetCVLedgEntryForVAT(NextTransactionNo,InitialCVLedgEntryBuf."Entry No.")
        ELSE
          IF NOT VendPostingGr."Skip Posting" THEN
          BEGIN // NC NOS-26 SPA
            VendLedgEntry.INSERT(TRUE);
          //NC NOS-26 > SPA

            //TDRAAPCOC-129>
            DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
            IF NOT TempDimSetEntry.ISEMPTY THEN
              IF NOT Prepayment THEN
                fn_InsertDefDimValueFromAcc(VendPostingGr."Payables Account",TempDimSetEntry)
              ELSE
                fn_InsertDefDimValueFromAcc(VendPostingGr."Prepayment Account",TempDimSetEntry);
            //TDRAAPCOC-129<

            //TDRAMIO-41.1>
            IF NOT TempDimSetEntry.ISEMPTY THEN
              IF NOT Prepayment THEN
                fn_InsertRealCounterparty(VendPostingGr."Payables Account",TempDimSetEntry)
              ELSE
                fn_InsertRealCounterparty(VendPostingGr."Prepayment Account",TempDimSetEntry);
            //TDRAMIO-41.1<

            //TDRANCS-1533>
            IF NOT TempDimSetEntry.ISEMPTY THEN
              fn_InsertLegalEntityDimValue(TempDimSetEntry);
            //TDRANCS-1533<

            VendLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
            DimMgt.UpdateGlobalDimFromDimSetID(VendLedgEntry."Dimension Set ID",
              VendLedgEntry."Global Dimension 1 Code",
              VendLedgEntry."Global Dimension 2 Code");
            VendLedgEntry.MODIFY(TRUE);
          END;
          //NC NOS-26 < SPA

        // Post detailed vendor entries
        DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,TRUE);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);

        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          IF NOT "Prepmt. Diff." AND NOT VendPostingGr."Skip Posting" THEN
            SetCVLedgEntryForVAT(NextTransactionNo,VendLedgEntry."Entry No.");

          IF VATAgentVATPayment THEN BEGIN
            IF VendLedgEntry."Agreement No." <> '' THEN BEGIN
              VendAgreement.GET(VendLedgEntry."Vendor No.",VendLedgEntry."Agreement No.");
              VendorFunds :=
                VendAgreement."VAT Payment Source Type" = VendAgreement."VAT Payment Source Type"::"Vendor Funds";
            END ELSE
              VendorFunds := Vend."VAT Payment Source Type" = Vend."VAT Payment Source Type"::"Vendor Funds";
            IF VendorFunds THEN BEGIN
              NextEntryNo := NextEntryNo - 1;
              UpdateVATAgentVendLedgEntry(VendLedgEntry);
              InitVATAgentDtldVendLedgEntry(GenJnlLine,VendLedgEntry,DtldVendLedgEntry);
              DtldVendLedgEntry.UpdateDebitCredit(Correction);
              VendLedgEntry.INSERT;
              DtldVendLedgEntry.INSERT;
              NextEntryNo := NextEntryNo + 1;
            END;
          END;
        END;
        DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
        //NC NOS-26 > SPA
        IF "Transaction Type" <> "Transaction Type"::Automatic THEN
        //NC NOS-26 < SPA
          OnMoveGenJournalLine(VendLedgEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostBankAcc@14(GenJnlLine@1005 : Record 81;Balancing@1006 : Boolean);
    VAR
      BankAcc@1000 : Record 270;
      BankAccLedgEntry@1004 : Record 271;
      CheckLedgEntry@1003 : Record 272;
      CheckLedgEntry2@1002 : Record 272;
      BankAccPostingGr@1001 : Record 277;
      Cust@1210004 : Record 18;
      Vend@1210005 : Record 23;
      StdRepMgt@1210002 : Codeunit 12401;
      PayerCode@1210031 : ARRAY [5] OF Code[20];
      BeneficiaryCode@1210026 : ARRAY [5] OF Code[20];
      PayerText@1210013 : ARRAY [6] OF Text[100];
      BeneficiaryText@1210008 : ARRAY [6] OF Text[130];
      DocAmount@1210003 : Decimal;
      CodeIndex@1210001 : ',VATRegNo,BIC,CorrAccNo,BankAccNo,KPP';
      TextIndex@1210000 : ',Name,Name2,Bank,Bank2,City,Branch';
      "NCV>"@1101495002 : Integer;
      PostingGrFound@1101495001 : Boolean;
      TempDimSetEntry@1101495003 : TEMPORARY Record 480;
      "NCV<"@1101495000 : Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        BankAcc.GET("Account No.");
        BankAcc.TESTFIELD(Blocked,FALSE);
        IF "Currency Code" = '' THEN
          BankAcc.TESTFIELD("Currency Code",'')
        ELSE
          IF BankAcc."Currency Code" <> '' THEN
            TESTFIELD("Currency Code",BankAcc."Currency Code");

        //NC MTD02 > AIG update_reliase!
        PostingGrFound := FALSE;
        IF "Posting Group" <> '' THEN
          IF (("Bal. Account No." = '') OR GenJnlLine."Currency Index Entry") AND BankAccPostingGr.GET("Posting Group") THEN
            PostingGrFound := TRUE;
        IF NOT PostingGrFound THEN BEGIN
        //NC MTD02 < AIG update_reliase!
          BankAcc.TESTFIELD("Bank Acc. Posting Group");
          BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");
        //NC MTD02 > AIG
        END;
        //NC MTD02 < AIG

        BankAccLedgEntry.LOCKTABLE;

        InitBankAccLedgEntry(GenJnlLine,BankAccLedgEntry);

        //NC MTD02 > AIG
        {
        BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group";
        }

        //NC MTD02.1 > DP
        {
        IF "Posting Group" = '' THEN
        }
        IF ("Posting Group" = '') OR NOT PostingGrFound THEN
        //NC MTD02.1 > DP
          BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group"
        ELSE
          BankAccLedgEntry."Bank Acc. Posting Group" := "Posting Group";
        //NC MTD02 < AIG
        BankAccLedgEntry."Currency Code" := BankAcc."Currency Code";
        //NC MTD02 > AIG update_reliase!
        BankAccLedgEntry."External System ID" := "External System ID";
        //NC MTD02 < AIG update_reliase!
        IF BankAcc."Currency Code" <> '' THEN
          BankAccLedgEntry.Amount := Amount
        ELSE
          BankAccLedgEntry.Amount := "Amount (LCY)";
        BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)";
        BankAccLedgEntry.Open := Amount <> 0;
        BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
        BankAccLedgEntry.Positive := Amount > 0;
        BankAccLedgEntry.UpdateDebitCredit(Correction);
        BankAccLedgEntry."Bal. Account Type" := "Bal. Account Type";
        BankAccLedgEntry."Bal. Account No." := "Bal. Account No.";
        BankAccLedgEntry."Agreement No." := "Agreement No.";
        BankAccLedgEntry.INSERT(TRUE);

        DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID"); // NC NOS-26
        //TDRAAPCOC-129>
        IF NOT TempDimSetEntry.ISEMPTY THEN
          fn_InsertDefDimValueFromAcc(BankAccPostingGr."G/L Bank Account No.",TempDimSetEntry);
        //TDRAAPCOC-129<

        //TDRAMIO-41.1>
        IF NOT TempDimSetEntry.ISEMPTY THEN
          fn_InsertRealCounterparty(BankAccPostingGr."G/L Bank Account No.",TempDimSetEntry);
        //TDRAMIO-41.1<

        //TDRANCS-1533>
        IF NOT TempDimSetEntry.ISEMPTY THEN
          fn_InsertLegalEntityDimValue(TempDimSetEntry);
        //TDRANCS-1533<

        //NC NOS-26 > SPA
        BankAccLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
        DimMgt.UpdateGlobalDimFromDimSetID(BankAccLedgEntry."Dimension Set ID",
          BankAccLedgEntry."Global Dimension 1 Code",
          BankAccLedgEntry."Global Dimension 2 Code");
        BankAccLedgEntry.MODIFY(TRUE);
        //NC NOS-26 < SPA

        IF CheckLedgerEntryIsNeeded(BankAcc,GenJnlLine)
        THEN BEGIN
          IF BankAcc."Currency Code" <> "Currency Code" THEN
            ERROR(BankPaymentTypeMustNotBeFilledErr);
          CASE "Bank Payment Type" OF
            "Bank Payment Type"::"Computer Check":
              BEGIN
                TESTFIELD("Check Printed",TRUE);
                CheckLedgEntry.LOCKTABLE;
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Printed);
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                IF CheckLedgEntry.FINDSET THEN
                  REPEAT
                    CheckLedgEntry2 := CheckLedgEntry;
                    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Posted;
                    CheckLedgEntry2."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                    CheckLedgEntry2."Check Date" := "Document Date";
                    CheckLedgEntry2."Posting Date" := "Posting Date";
                    CheckLedgEntry2.MODIFY;
                  UNTIL CheckLedgEntry.NEXT = 0;
              END;
            "Bank Payment Type"::"Manual Check":
              BEGIN
                IF "Document No." = '' THEN
                  ERROR(DocNoMustBeEnteredErr,"Bank Payment Type");
                CheckLedgEntry.RESET;
                IF NextCheckEntryNo = 0 THEN BEGIN
                  CheckLedgEntry.LOCKTABLE;
                  IF CheckLedgEntry.FINDLAST THEN
                    NextCheckEntryNo := CheckLedgEntry."Entry No." + 1
                  ELSE
                    NextCheckEntryNo := 1;
                END;

                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETFILTER(
                  "Entry Status",'%1|%2|%3',
                  CheckLedgEntry."Entry Status"::Printed,
                  CheckLedgEntry."Entry Status"::Posted,
                  CheckLedgEntry."Entry Status"::"Financially Voided");
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                IF NOT CheckLedgEntry.ISEMPTY THEN
                  ERROR(CheckAlreadyExistsErr,"Document No.");

                IF NOT GLSetup."Enable Russian Accounting" THEN BEGIN
                  InitCheckLedgEntry(BankAccLedgEntry,CheckLedgEntry);
                  IF BankAcc."Currency Code" <> '' THEN
                    CheckLedgEntry.Amount := -Amount
                  ELSE
                    CheckLedgEntry.Amount := -"Amount (LCY)";
                END ELSE BEGIN
                  CheckLedgEntry.INIT;
                  CheckLedgEntry.CopyFromBankAccLedgEntry(BankAccLedgEntry);
                  CheckLedgEntry."Entry No." := NextCheckEntryNo;
                  CheckLedgEntry."Check Date" := "Document Date";
                  CheckLedgEntry."Beneficiary Bank Code" := "Beneficiary Bank Code";
                  CheckLedgEntry."Payment Purpose" := "Payment Purpose";
                  CheckLedgEntry."Cash Order Including" := "Cash Order Including";
                  CheckLedgEntry."Cash Order Supplement" := "Cash Order Supplement";
                  CheckLedgEntry."Payment Method" := "Payment Method";
                  CheckLedgEntry."Payment Before Date" := "Payment Date";
                  CheckLedgEntry."Payment Subsequence" := "Payment Subsequence";
                  CheckLedgEntry."Payment Code" := "Payment Code";
                  CheckLedgEntry."Payment Assignment" := "Payment Assignment";
                  CheckLedgEntry."Payment Type" := "Payment Type";

                  IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
                    StdRepMgt.CheckAttributes(GenJnlLine,DocAmount,
                      PayerCode,PayerText,BeneficiaryCode,BeneficiaryText);

                  CheckLedgEntry."Payer BIC" := PayerCode[CodeIndex::BIC];
                  CheckLedgEntry."Payer Corr. Account No." := PayerCode[CodeIndex::CorrAccNo];
                  CheckLedgEntry."Payer Bank Account No." := PayerCode[CodeIndex::BankAccNo];
                  CheckLedgEntry."Payer Name" :=
                    COPYSTR(PayerText[TextIndex::Name],1,MAXSTRLEN(CheckLedgEntry."Payer Name"));
                  CheckLedgEntry."Payer Bank" :=
                    COPYSTR(PayerText[TextIndex::Bank],1,MAXSTRLEN(CheckLedgEntry."Payer Bank"));
                  CheckLedgEntry."Payer VAT Reg. No." := PayerCode[CodeIndex::VATRegNo];
                  CheckLedgEntry."Payer KPP" := PayerCode[CodeIndex::KPP];
                  CheckLedgEntry."Beneficiary BIC" := BeneficiaryCode[CodeIndex::BIC];
                  CheckLedgEntry."Beneficiary Corr. Acc. No." := BeneficiaryCode[CodeIndex::CorrAccNo];
                  CheckLedgEntry."Beneficiary Bank Acc. No." := BeneficiaryCode[CodeIndex::BankAccNo];
                  CheckLedgEntry."Beneficiary Name" :=
                    COPYSTR(BeneficiaryText[TextIndex::Name],1,MAXSTRLEN(CheckLedgEntry."Beneficiary Name"));
                  CheckLedgEntry."Beneficiary VAT Reg No." := BeneficiaryCode[CodeIndex::VATRegNo];
                  CheckLedgEntry."Beneficiary KPP" := BeneficiaryCode[CodeIndex::KPP];
                  CheckLedgEntry.Amount := Amount;
                  CheckLedgEntry.Positive := (Amount > 0);
                  IF ((CheckLedgEntry.Amount > 0) AND (NOT Correction)) OR
                     ((CheckLedgEntry.Amount < 0) AND Correction)
                  THEN
                    CheckLedgEntry."Debit Amount" := CheckLedgEntry.Amount
                  ELSE
                    CheckLedgEntry."Credit Amount" := -CheckLedgEntry.Amount;
                  CheckLedgEntry.KBK := KBK;
                  CheckLedgEntry.OKATO := OKATO;
                  CheckLedgEntry."Period Code" := "Period Code";
                  CheckLedgEntry."Payment Reason Code" := "Payment Reason Code";
                  CheckLedgEntry."Reason Document No." := "Reason Document No.";
                  CheckLedgEntry."Reason Document Type" := "Reason Document Type";
                  CheckLedgEntry."Reason Document Date" := "Reason Document Date";
                  CheckLedgEntry."Tax Payment Type" := "Tax Payment Type";
                  CheckLedgEntry."Tax Period" := "Tax Period";
                  CheckLedgEntry."Taxpayer Status" := "Taxpayer Status";
                  //NC OAM29 > DP
                  CheckLedgEntry."Posting Group" := "Posting Group";
                  {
                  CASE CheckLedgEntry."Bal. Account Type" OF
                    CheckLedgEntry."Bal. Account Type"::Customer:
                      BEGIN
                        Cust.GET(CheckLedgEntry."Bal. Account No.");
                        Cust.TESTFIELD("Customer Posting Group");
                        CheckLedgEntry."Posting Group" := Cust."Customer Posting Group";
                      END;
                    CheckLedgEntry."Bal. Account Type"::Vendor:
                      BEGIN
                        Vend.GET(CheckLedgEntry."Bal. Account No.");
                        Vend.TESTFIELD("Vendor Posting Group");
                        CheckLedgEntry."Posting Group" := Vend."Vendor Posting Group";
                      END;
                  END;
                  }
                  //NC OAM29 > DP
                END;
                CheckLedgEntry."Bank Payment Type" := CheckLedgEntry."Bank Payment Type"::"Manual Check";
                CheckLedgEntry.INSERT(TRUE);
                NextCheckEntryNo := NextCheckEntryNo + 1;
              END;
          END;
        END;

        BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
        CreateGLEntryBalAcc(
          GenJnlLine,BankAccPostingGr."G/L Bank Account No.","Amount (LCY)","Source Currency Amount",
          "Bal. Account Type","Bal. Account No.");
        DeferralPosting("Deferral Code","Source Code",BankAccPostingGr."G/L Bank Account No.",GenJnlLine,Balancing);
        //NC NOS-26 > SPA
        IF "Transaction Type" <> "Transaction Type"::Automatic THEN
        //NC NOS-26 < SPA
          OnMoveGenJournalLine(BankAccLedgEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostFixedAsset@29(GenJnlLine@1009 : Record 81);
    VAR
      GLEntry@1010 : Record 17;
      GLEntry2@1000 : Record 17;
      TempFAGLPostBuf@1001 : TEMPORARY Record 5637;
      FAGLPostBuf@1011 : Record 5637;
      VATPostingSetup@1012 : Record 325;
      FAJnlPostLine@1013 : Codeunit 5632;
      FAAutomaticEntry@1003 : Codeunit 5607;
      ShortcutDim1Code@1004 : Code[20];
      ShortcutDim2Code@1005 : Code[20];
      Correction2@1006 : Boolean;
      NetDisposalNo@1007 : Integer;
      DimensionSetID@1008 : Integer;
      VATEntryGLEntryNo@1002 : Integer;
      "NCV>"@1101495002 : Integer;
      FALedgerEntryRec@1101495001 : Record 5601;
      DepreciationBook@1101495000 : Record 5611;
    BEGIN
      WITH GenJnlLine DO BEGIN
        InitGLEntry(GenJnlLine,GLEntry,'',"Amount (LCY)","Source Currency Amount",TRUE,"System-Created Entry");
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        //NC PIF050 > MP
        IF (GenJnlLine."Analysis View Budget Code" <> '') AND
           (GenJnlLine."Analysis View Budget Entry No." > 0)
        THEN
          SetGLEntryNo(GenJnlLine, GLEntry);
        //NC PIF050 < MP
        InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
        GLEntry2 := GLEntry;
        FAJnlPostLine.GenJnlPostLine(
          GenJnlLine,GLEntry2.Amount,GLEntry2."VAT Amount",NextTransactionNo,NextEntryNo,GLReg."No.");
        ShortcutDim1Code := "Shortcut Dimension 1 Code";
        ShortcutDim2Code := "Shortcut Dimension 2 Code";
        DimensionSetID := "Dimension Set ID";
        Correction2 := Correction;
      END;
      WITH TempFAGLPostBuf DO
        IF FAJnlPostLine.FindFirstGLAcc(TempFAGLPostBuf) THEN
          REPEAT
            GenJnlLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
            GenJnlLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
            GenJnlLine."Dimension Set ID" := "Dimension Set ID";
            GenJnlLine.Correction := Correction;
            FADimAlreadyChecked := "FA Posting Group" <> '';
            CheckDimValueForDisposal(GenJnlLine,"Account No.");
            IF "Original General Journal Line" THEN
              InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,GLEntry2."Additional-Currency Amount",TRUE,TRUE)
            ELSE BEGIN
              CheckNonAddCurrCodeOccurred('');
              InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,0,FALSE,TRUE);
            END;
            FADimAlreadyChecked := FALSE;
            GLEntry.CopyPostingGroupsFromGLEntry(GLEntry2);
            GLEntry."VAT Amount" := GLEntry2."VAT Amount";
            GLEntry."Bal. Account Type" := GLEntry2."Bal. Account Type";
            GLEntry."Bal. Account No." := GLEntry2."Bal. Account No.";
            GLEntry."FA Entry Type" := "FA Entry Type";
            GLEntry."FA Entry No." := "FA Entry No.";
            IF GenJnlLine."Bal. Account No." <> '' THEN BEGIN
              GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
              GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
            END;
            IF "Net Disposal" THEN
              NetDisposalNo := NetDisposalNo + 1
            ELSE
              NetDisposalNo := 0;
            IF "Automatic Entry" AND NOT "Net Disposal" THEN
              FAAutomaticEntry.AdjustGLEntry(GLEntry);
            IF NetDisposalNo > 1 THEN
              GLEntry."VAT Amount" := 0;
            IF "FA Posting Group" <> '' THEN BEGIN
              FAGLPostBuf := TempFAGLPostBuf;
              FAGLPostBuf."Entry No." := NextEntryNo;
              FAGLPostBuf.INSERT;
            END;
            InsertGLEntry(GenJnlLine,GLEntry,TRUE);

            //NC PIF001 > DP
            FALedgerEntryRec.SETCURRENTKEY("G/L Entry No.");
            FALedgerEntryRec.SETRANGE("G/L Entry No.",GLEntry."Entry No.");
            IF FALedgerEntryRec.FIND('-') AND
               (FALedgerEntryRec."FA Posting Category" = FALedgerEntryRec."FA Posting Category"::" ") AND
               (FALedgerEntryRec."FA Posting Type" = FALedgerEntryRec."FA Posting Type"::"Acquisition Cost")
               //NC PIF001 > DP
               {
               AND (NOT FALedgerEntryRec."Reclassification Entry")
               }
               //NC PIF001 < DP
            THEN
              REPEAT
              //NC PIF001 > DP
              {
                IF FALedgerEntryRec.Amount > 0 THEN BEGIN
              }
                DepreciationBook.GET(FALedgerEntryRec."Depreciation Book Code");
                IF DepreciationBook."Insert Add-Curr. Amount to FAL" THEN BEGIN
              //NC PIF001 < DP
                    FALedgerEntryRec."Additional-Currency Amount" := GLEntry."Additional-Currency Amount";
                    FALedgerEntryRec.MODIFY;
                END;
              UNTIL FALedgerEntryRec.NEXT = 0;
            //NC PIF001 < DP

            IF (VATEntryGLEntryNo = 0) AND (GLEntry."Gen. Posting Type" <> GLEntry."Gen. Posting Type"::" ") THEN
              VATEntryGLEntryNo := GLEntry."Entry No.";
          UNTIL FAJnlPostLine.GetNextGLAcc(TempFAGLPostBuf) = 0;
      GenJnlLine."Shortcut Dimension 1 Code" := ShortcutDim1Code;
      GenJnlLine."Shortcut Dimension 2 Code" := ShortcutDim2Code;
      GenJnlLine."Dimension Set ID" := DimensionSetID;
      GenJnlLine.Correction := Correction2;
      GLEntry := GLEntry2;
      IF VATEntryGLEntryNo = 0 THEN
        VATEntryGLEntryNo := GLEntry."Entry No.";
      TempGLEntryBuf."Entry No." := VATEntryGLEntryNo; // Used later in InsertVAT(): GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.")
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);

      FAJnlPostLine.UpdateRegNo(GLReg."No.");
      //NC NOS-26 > SPA
      IF GenJnlLine."Transaction Type" <> GenJnlLine."Transaction Type"::Automatic THEN
      //NC NOS-26 < SPA
        GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID);
    END;

    LOCAL PROCEDURE PostICPartner@63(GenJnlLine@1002 : Record 81);
    VAR
      ICPartner@1001 : Record 413;
      AccountNo@1000 : Code[20];
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Account No." <> ICPartner.Code THEN
          ICPartner.GET("Account No.");
        IF ("Document Type" = "Document Type"::"Credit Memo") XOR (Amount > 0) THEN BEGIN
          ICPartner.TESTFIELD("Receivables Account");
          AccountNo := ICPartner."Receivables Account";
        END ELSE BEGIN
          ICPartner.TESTFIELD("Payables Account");
          AccountNo := ICPartner."Payables Account";
        END;

        CreateGLEntryBalAcc(
          GenJnlLine,AccountNo,"Amount (LCY)","Source Currency Amount",
          "Bal. Account Type","Bal. Account No.");
      END;
    END;

    LOCAL PROCEDURE PostJob@78(GenJnlLine@1000 : Record 81;GLEntry@1002 : Record 17);
    VAR
      JobPostLine@1001 : Codeunit 1001;
    BEGIN
      IF JobLine THEN BEGIN
        JobLine := FALSE;
        JobPostLine.PostGenJnlLine(GenJnlLine,GLEntry);
      END;
    END;

    PROCEDURE StartPosting@24(GenJnlLine@1001 : Record 81);
    VAR
      GenJnlTemplate@1000 : Record 80;
      AccountingPeriod@1002 : Record 50;
      DtldCustLedgEntry@1101495001 : Record 379;
      DtldVendLedgEntry@1101495000 : Record 380;
    BEGIN
      OnBeforePostGenJnlLine(GenJnlLine);

      WITH GenJnlLine DO BEGIN
        GlobalGLEntry.LOCKTABLE;
        IF GlobalGLEntry.FINDLAST THEN BEGIN
          NextEntryNo := GlobalGLEntry."Entry No." + 1;
          NextTransactionNo := GlobalGLEntry."Transaction No." + 1;
        END ELSE BEGIN
          NextEntryNo := 1;
          NextTransactionNo := 1;
        END;

        //NC MIO-59 > DP
        {
        IF NOT IsGLSetupFound THEN BEGIN
          GLSetup.GET;
          IsGLSetupFound := TRUE;
        END;
        }
        GetGLSetup; //NC NOS-26
        //NC MIO-59 < DP

        //NC MIO-28.1 > DP
        IF (GenJnlLine."Posting Date" >= GLSetup."Not Post FX G/L from Date") AND
          (GLSetup."Not Post FX G/L from Date" <> 0D)
        THEN BEGIN
        //NC MIO-28.1 < DP
        // NC MIO-28 > AES
          //NC MIO-59 > DP
          DtldCustLedgEntry.LOCKTABLE;
          //NC MIO-59 < DP
          //NC S1585 > PCH
          //DtldCustLedgEntry.SETCURRENTKEY("Transaction No.");
          //DtldCustLedgEntry.ASCENDING;
          //NC S1585 < PCH
          IF DtldCustLedgEntry.FINDLAST THEN
            //NC MIO-28.2 > DP
            {
            IF DtldCustLedgEntry."Transaction No." >= NextTransactionNo THEN;
            }
            IF DtldCustLedgEntry."Transaction No." >= NextTransactionNo THEN
            //NC MIO-28.2 < DP
              NextTransactionNo := DtldCustLedgEntry."Transaction No." + 1;

          //NC MIO-59 > DP
          DtldVendLedgEntry.LOCKTABLE;
          //NC MIO-59 < DP
          //NC S1585 > PCH
          //DtldVendLedgEntry.SETCURRENTKEY("Transaction No.");
          //DtldVendLedgEntry.ASCENDING;
          //NC S1585 < PCH
          IF DtldVendLedgEntry.FINDLAST THEN
            IF DtldVendLedgEntry."Transaction No." >= NextTransactionNo THEN
              NextTransactionNo := DtldVendLedgEntry."Transaction No." + 1;
        // NC MIO-28 < AES

        //NC MIO-28.1 > DP
        END;
        //NC MIO-28.1 < DP

        InitLastDocDate(GenJnlLine);
        CurrentBalance := 0;

        AccountingPeriod.RESET;
        AccountingPeriod.SETCURRENTKEY(Closed);
        AccountingPeriod.SETRANGE(Closed,FALSE);
        AccountingPeriod.FINDFIRST;
        FiscalYearStartDate := AccountingPeriod."Starting Date";

        GetGLSetup;

        IF NOT GenJnlTemplate.GET("Journal Template Name") THEN
          GenJnlTemplate.INIT;

        VATEntry.LOCKTABLE;
        IF VATEntry.FINDLAST THEN
          NextVATEntryNo := VATEntry."Entry No." + 1
        ELSE
          NextVATEntryNo := 1;
        NextConnectionNo := 1;
        FirstNewVATEntryNo := NextVATEntryNo;

        GLReg.LOCKTABLE;
        IF GLReg.FINDLAST THEN
          GLReg."No." := GLReg."No." + 1
        ELSE
          GLReg."No." := 1;
        GLReg.INIT;
        GLReg."From Entry No." := NextEntryNo;
        GLReg."From VAT Entry No." := NextVATEntryNo;
        GLReg."Creation Date" := TODAY;
        GLReg."Source Code" := "Source Code";
        GLReg."Journal Batch Name" := "Journal Batch Name";
        GLReg."User ID" := USERID;
        IsGLRegInserted := FALSE;

        OnAfterInitGLRegister(GLReg,GenJnlLine);

        GetCurrencyExchRate(GenJnlLine);
        TempGLEntryBuf.DELETEALL;
        // NCS-1880 > ORM
        GLEntryExtensionTmp.DELETEALL;
        // NCS-1880 < ORM
        //NC NCS-2296 > DP
        tmpVATGL.DELETEALL;
        //NC NCS-2296 < DP
        CalculateCurrentBalance(
          "Account No.","Bal. Account No.",IncludeVATAmount,"Amount (LCY)","VAT Amount");

        IF GLSetup."Enable Russian Accounting" THEN
          PrepmtDiffMgt.Init;
      END;
    END;

    PROCEDURE ContinuePosting@155(GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF ((LastDocType <> "Document Type") OR (LastDocNo <> "Document No.") OR
            (LastDate <> "Posting Date") OR ((CurrentBalance = 0) AND (TotalAddCurrAmount = 0)) AND NOT "System-Created Entry") AND
           NOT ThisIsSpecialRun
        THEN BEGIN
          CheckPostUnrealizedVAT(GenJnlLine,FALSE);
          NextTransactionNo := NextTransactionNo + 1;
          InitLastDocDate(GenJnlLine);
          FirstNewVATEntryNo := NextVATEntryNo;
        END;

        GetCurrencyExchRate(GenJnlLine);
        TempGLEntryBuf.DELETEALL;
        // NCS-1880 > ORM
        GLEntryExtensionTmp.DELETEALL;
        // NCS-1880 < ORM
        //NC NCS-2296 > DP
        tmpVATGL.DELETEALL;
        //NC NCS-2296 < DP
        CalculateCurrentBalance(
          "Account No.","Bal. Account No.",IncludeVATAmount,"Amount (LCY)","VAT Amount");

        IF GLSetup."Enable Russian Accounting" THEN
          PrepmtDiffMgt.Init;
      END;
    END;

    PROCEDURE FinishPosting@25(GenJnlLine@1210000 : Record 81);
    VAR
      CostAccSetup@1003 : Record 1108;
      CorrGLEntry@1210001 : Record 17;
      SourceCodeSetup@1210002 : Record 242;
      TransferGlEntriesToCA@1004 : Codeunit 1105;
      CorrespManagement@1210005 : Codeunit 12404;
      HandleVATAllocDim@1210006 : Boolean;
      BalAccNo@1210007 : Code[20];
      IsTransactionConsistent@1000 : Boolean;
      DimensionSetUpdated@1101495000 : Boolean;
      TempDimSetEntry@1101495001 : TEMPORARY Record 480;
    BEGIN
      IsTransactionConsistent :=
        (BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
        (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0);

      IF TempGLEntryBuf.FINDSET THEN BEGIN
        SourceCodeSetup.GET;
        REPEAT
          GlobalGLEntry := TempGLEntryBuf;
          IF AddCurrencyCode = '' THEN BEGIN
            GlobalGLEntry."Additional-Currency Amount" := 0;
            GlobalGLEntry."Add.-Currency Debit Amount" := 0;
            GlobalGLEntry."Add.-Currency Credit Amount" := 0;
          END;
          IF GenJnlLine."Source Code" <> SourceCodeSetup.Reversal THEN
            //NC OAM20 > DP
            IF TempGLEntryBuf."Agreement No." = '' THEN
            //NC OAM20 < DP
              GlobalGLEntry."Agreement No." := GenJnlLine."Agreement No.";

          //NC OAM20 > DP
          IF (GlobalGLEntry."Original Amount" = 0) AND
             (NOT GlobalGLEntry."Null Original Amount")
          THEN BEGIN
            //NC MIO-85.2 > DP
            IF GenJnlLine."Currency Index Entry" AND
               (NOT GenJnlLine."Prepmt. Diff.")
            //NC MIO-85.2 < DP
            THEN BEGIN
              GlobalGLEntry."Original Currency Code" := GenJnlLine."Currency Index";
              GlobalGLEntry."Original Amount" := 0;
            END ELSE BEGIN
              IF GlobalGLEntry."Reversed Entry No." = 0 THEN
                GlobalGLEntry."Original Currency Code" := GenJnlLine."Currency Code";
              CASE GenJnlLine."Gen. Posting Type" OF
                GenJnlLine."Gen. Posting Type"::Sale: BEGIN
                  IF GenJnlLine."VAT Base Amount" <> GenJnlLine.Amount THEN BEGIN
                    //NC NCS-1152 > DP
                    IF GlobalGLEntry.Amount = 0 THEN
                      GlobalGLEntry."Original Amount" := GenJnlLine.Amount - GenJnlLine."VAT Amount"
                    ELSE
                      IF GlobalGLEntry.Amount > 0 THEN
                    //NC NCS-1152 < DP
                        GlobalGLEntry."Original Amount" := ABS(GenJnlLine.Amount - GenJnlLine."VAT Amount")
                      ELSE
                        GlobalGLEntry."Original Amount" := -ABS(GenJnlLine.Amount - GenJnlLine."VAT Amount");
                  END ELSE BEGIN
                    //NC NCS-1152 > DP
                    IF GlobalGLEntry.Amount = 0 THEN
                      GlobalGLEntry."Original Amount" := GenJnlLine.Amount
                    ELSE
                      IF GlobalGLEntry.Amount > 0 THEN
                    //NC NCS-1152 < DP
                        GlobalGLEntry."Original Amount" := ABS(GenJnlLine.Amount)
                      ELSE
                        GlobalGLEntry."Original Amount" := -ABS(GenJnlLine.Amount);
                    END;
                END;

                GenJnlLine."Gen. Posting Type"::Purchase:
                BEGIN
                  IF GenJnlLine."VAT Base Amount" = GenJnlLine.Amount THEN BEGIN
                    //NC NCS-1152.1 > DP
                    IF GlobalGLEntry.Amount = 0 THEN
                      GlobalGLEntry."Original Amount" := GenJnlLine.Amount
                    ELSE
                      IF GlobalGLEntry.Amount > 0 THEN
                    //NC NCS-1152.1 < DP
                        GlobalGLEntry."Original Amount" := ABS(GenJnlLine.Amount)
                      ELSE
                        GlobalGLEntry."Original Amount" := -ABS(GenJnlLine.Amount);
                  END ELSE BEGIN
                    //NC NCS-1152.1 > DP
                    IF GlobalGLEntry.Amount = 0 THEN
                      GlobalGLEntry."Original Amount" := GenJnlLine.Amount - GenJnlLine."VAT Amount"
                    ELSE
                      IF GlobalGLEntry.Amount > 0 THEN
                    //NC NCS-1152.1 < DP
                        GlobalGLEntry."Original Amount" := ABS(GenJnlLine.Amount - GenJnlLine."VAT Amount")
                      ELSE
                        GlobalGLEntry."Original Amount" := -ABS(GenJnlLine.Amount - GenJnlLine."VAT Amount");
                  END;
                END;

                ELSE
                  IF (GlobalGLEntry."Original Currency Code" = '') AND (GenJnlLine.Amount = 0) AND (GenJnlLine."VAT Amount" = 0) THEN BEGIN
                    GlobalGLEntry."Original Amount" := GlobalGLEntry.Amount;
                  END ELSE BEGIN
                    //NC NCS-1152.1 > DP
                    IF GlobalGLEntry.Amount = 0 THEN
                      GlobalGLEntry."Original Amount" := GenJnlLine.Amount - GenJnlLine."VAT Amount"
                    ELSE
                      IF GlobalGLEntry.Amount > 0 THEN
                    //NC NCS-1152.1 < DP
                        GlobalGLEntry."Original Amount" := ABS(GenJnlLine.Amount - GenJnlLine."VAT Amount")
                      ELSE
                        GlobalGLEntry."Original Amount" := -ABS(GenJnlLine.Amount - GenJnlLine."VAT Amount");
                  END;
              END;
              IF (GlobalGLEntry.Amount = 0) AND (GlobalGLEntry."Original Currency Code" = '') THEN
                GlobalGLEntry."Original Amount" := 0;
            END;

            //NC NCS-1152.2 > DP
            IF (GlobalGLEntry.Amount = 0) AND (GlobalGLEntry."Original Amount" <> 0) THEN BEGIN
              IF ((GlobalGLEntry."Original Amount" > 0) AND (NOT GenJnlLine.Correction)) OR
                ((GlobalGLEntry."Original Amount" < 0) AND GenJnlLine.Correction)
              THEN BEGIN
                GlobalGLEntry."Original Debit Amount" := GlobalGLEntry."Original Amount";
                GlobalGLEntry."Original Credit Amount" := 0;
              END ELSE BEGIN
                GlobalGLEntry."Original Debit Amount" := 0;
                GlobalGLEntry."Original Credit Amount" := -GlobalGLEntry."Original Amount";
              END;
            END ELSE
            //NC NCS-1152.2 < DP
              IF ((GlobalGLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
                  ((GlobalGLEntry.Amount < 0) AND GenJnlLine.Correction)
              THEN BEGIN
                GlobalGLEntry."Original Debit Amount" := GlobalGLEntry."Original Amount";
                GlobalGLEntry."Original Credit Amount" := 0;
              END ELSE BEGIN
                GlobalGLEntry."Original Debit Amount" := 0;
                GlobalGLEntry."Original Credit Amount" := -GlobalGLEntry."Original Amount";
              END;
          END;

          // NC NOS-26 >
          DimMgt.GetDimensionSet(TempDimSetEntry,GenJnlLine."Dimension Set ID");
          IF NOT TempDimSetEntry.ISEMPTY THEN
            fn_InsertDefDimValueFromAcc(GlobalGLEntry."G/L Account No.",TempDimSetEntry);
          //NC MIR2017 <

          //TDRAMIO-41>
          IF NOT TempDimSetEntry.ISEMPTY THEN
            fn_InsertRealCounterparty(GlobalGLEntry."G/L Account No.",TempDimSetEntry);
          //TDRAMIO-41<

          //TDRANCS-1533>
          IF NOT TempDimSetEntry.ISEMPTY THEN
            fn_InsertLegalEntityDimValue(TempDimSetEntry);
          //TDRANCS-1533<

          //NC NOS-26 > SPA
          GenJnlLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
          //NC NOS-26 < SPA

          //NC NOS-26 > SPA
          //NC NCS-2296 > DP
          IF tmpVATGL.GET(GlobalGLEntry."Entry No.") THEN BEGIN
            tmpVATGL."Dimension Set ID" := GenJnlLine."Dimension Set ID";
            fn_InsertVATDimValue(tmpVATGL,TempDimSetEntry);
            GlobalGLEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
          END ELSE
          //NC NCS-2296 < DP
            GlobalGLEntry."Dimension Set ID" := GenJnlLine."Dimension Set ID";

          // Гарантия того, что глобальные измерения на строке будут указаны правильно
          DimMgt.UpdateGlobalDimFromDimSetID(GlobalGLEntry."Dimension Set ID",
            GlobalGLEntry."Global Dimension 1 Code",
            GlobalGLEntry."Global Dimension 2 Code");
          //NC NOS-26 < SPA

          // NCS-1897 > ORM
          IF GLSetup."Create Export Mapping" THEN BEGIN
            FillSourceGLAccountNo(GlobalGLEntry);
            IF GLSetup."Disable Post.With No Ext.Mpng." AND (GlobalGLEntry."Source G/L Account No." = '') THEN
              ERROR(EmptySourceAccountErr,GlobalGLEntry."G/L Account No.");
          END;
          // NCS-1897 < ORM

          GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;
          GlobalGLEntry.INSERT(TRUE);
          IF GLSetup."Enable Russian Accounting" THEN
            IF (FirstGLEntryNo = 0) OR (FirstGLEntryNo > GlobalGLEntry."Entry No.") THEN
              FirstGLEntryNo := GlobalGLEntry."Entry No.";
          OnAfterInsertGlobalGLEntry(GlobalGLEntry);
        UNTIL TempGLEntryBuf.NEXT = 0;

        GLReg."To VAT Entry No." := NextVATEntryNo - 1;
        GLReg."To Entry No." := GlobalGLEntry."Entry No.";
        IF IsTransactionConsistent THEN
          IF IsGLRegInserted THEN
            GLReg.MODIFY
          ELSE BEGIN
            GLReg.INSERT;
            IsGLRegInserted := TRUE;
          END;
      END;
      GlobalGLEntry.CONSISTENT(IsTransactionConsistent);

      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        IF IsTransactionConsistent THEN BEGIN
          IF GLSetup."Automatic G/L Correspondence" AND (FirstGLEntryNo <> 0) THEN BEGIN
            CorrGLEntry.SETRANGE("Entry No.",FirstGLEntryNo,GlobalGLEntry."Entry No.");
            CorrespManagement.CreateCorrespEntries(CorrGLEntry);
            FirstGLEntryNo := 0;
          END;
          PrepmtDiffMgt.PrepmtDiffProcessing(FALSE,PreviewMode);
        END;

        IF (GenJnlLine."Source Type" = GenJnlLine."Source Type"::"Bank Account") AND (GenJnlLine."Source No." <> '') THEN
          BalAccNo := GenJnlLine."Source No."
        ELSE
          BalAccNo := GenJnlLine."Bal. Account No.";

        PostFuturePeriodVacation(GenJnlLine);
      END;

      IF CostAccSetup.GET THEN
        IF CostAccSetup."Auto Transfer from G/L" THEN
          TransferGlEntriesToCA.GetGLEntries;

      FirstEntryNo := 0;

      //NC NOS-26 > SPA
      GlobalDimensionSetID := 0;
      CLEAR(GlobalGenJournalLine);
      //NC NOS-26 < SPA
    END;

    LOCAL PROCEDURE PostUnrealizedVAT@64(GenJnlLine@1000 : Record 81);
    BEGIN
      IF CheckUnrealizedCust THEN BEGIN
        CustUnrealizedVAT(GenJnlLine,UnrealizedCustLedgEntry,UnrealizedRemainingAmountCust,0,0,0);
        CheckUnrealizedCust := FALSE;
      END;
      IF CheckUnrealizedVend THEN BEGIN
        VendUnrealizedVAT(GenJnlLine,UnrealizedVendLedgEntry,UnrealizedRemainingAmountVend,0,0,0,0);
        CheckUnrealizedVend := FALSE;
      END;
    END;

    LOCAL PROCEDURE CheckPostUnrealizedVAT@41(GenJnlLine@1000 : Record 81;CheckCurrentBalance@1001 : Boolean);
    BEGIN
      IF CheckCurrentBalance AND (CurrentBalance = 0) OR NOT CheckCurrentBalance THEN
        PostUnrealizedVAT(GenJnlLine)
    END;

    LOCAL PROCEDURE InitGLEntry@3(GenJnlLine@1008 : Record 81;VAR GLEntry@1009 : Record 17;GLAccNo@1000 : Code[20];Amount@1001 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1003 : Boolean;SystemCreatedEntry@1004 : Boolean);
    VAR
      GLAcc@1007 : Record 15;
      "NCV>"@1101495004 : Integer;
      GLEntryCor@1101495003 : Record 17;
      GenJnlBatch2@1101495002 : Record 232;
      locBU@1101495001 : Record 220;
      locExtSystem@1101495000 : Record 50065;
    BEGIN
      // NC MIO-28 > AES
      IF GenJnlLine."Not G/L Post" THEN BEGIN
        GLEntry.INIT;
        EXIT;
      END;
      // NC MIO-28 < AES

      IF GLAccNo <> '' THEN BEGIN
        GLAcc.GET(GLAccNo);
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);

        // Check the Value Posting field on the G/L Account if it is not checked already in Codeunit 11
        IF (NOT
            ((GLAccNo = GenJnlLine."Account No.") AND
             (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account")) OR
            ((GLAccNo = GenJnlLine."Bal. Account No.") AND
             (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"G/L Account"))) AND
           NOT FADimAlreadyChecked
        THEN
          CheckGLAccDimError(GenJnlLine,GLAccNo,
            TRUE); // NC NOS-26 SPA
      END;

      GLEntry.INIT;
      GLEntry.CopyFromGenJnlLine(GenJnlLine);
      //TDRANCS-2173>
      //fn_UpdateGlobalDimForSameCode(GlobalDimensionSetID,GLEntry);
      //TDRANCS-2173<
      GLEntry."Entry No." := NextEntryNo;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry."G/L Account No." := GLAccNo;
      GLEntry."System-Created Entry" := SystemCreatedEntry;
      GLEntry.Amount := Amount;
      //NC MMTM05 > AG
      GLEntry.Reverse := GenJnlLine."Reversing Entry";
      //NC MMTM05 < AG
      //NC PIF001 > DP
      GLEntry."External Document Type" := GenJnlLine."External Document Type";
      GLEntry."External Document ID" := GenJnlLine."External Document ID";
      GLEntry."External Document Date" := GenJnlLine."External Document Date";
      GLEntry."External Operation No" := GenJnlLine."External Operation No";
      GLEntry."FA Operation" := GenJnlLine."FA Operation";
      GLEntry."Special Correspondense" := GenJnlLine."Special Correspondense";
      GLEntry."Buffer Entry No." :=  GenJnlLine."Buffer Entry No.";
      GLEntry."Cons. Source Code" := GenJnlLine."Cons. Source Code";
      GLEntry."Register No." := GenJnlLine."Register No.";
      GLEntry."Export Cons. Source Code" := GenJnlLine."Export Cons. Source Code";
      GLEntry."Export Register No." := GenJnlLine."Export Register No.";
      GLEntry."Source Posting Date" := GenJnlLine."Begining Date";
      GLEntry."Ending Date" := GenJnlLine."Ending Date";
      GLEntry."Original Currency Code" := GenJnlLine."Currency Code";
      GLEntry."Original Currency Factor" := GenJnlLine."Currency Factor";
      //NC MDR01 > MP
      GLEntry.Reposted := GenJnlLine.Reposted;
      GLEntry.Removed := GenJnlLine.Removed;
      IF GenJnlLine."Linked G/L Entry No." <> 0 THEN BEGIN
        IF GLEntryCor.GET(GenJnlLine."Linked G/L Entry No.") THEN BEGIN
          GLEntryCor.Reposted := GenJnlLine.Reposted;
          GLEntryCor.Removed := GenJnlLine.Removed;
          IF GLEntryCor."Reversed by Entry No." = 0 THEN BEGIN
            GLEntryCor."Reversed by Entry No." := NextEntryNo;
            GLEntry."Reversed Entry No." := GenJnlLine."Linked G/L Entry No.";
          END;
          GLEntryCor.MODIFY;
        END;
      END;
      //NC MDR01 < MP
      //NC PIF001 > DP
      IF GenJnlLine."Source Historical Date" <> 0D THEN
        GLEntry."Historical Date" := GenJnlLine."Source Historical Date"
      ELSE
        GLEntry."Historical Date" := GenJnlLine."Posting Date";
      //NC PIF001 < DP
      //NC PIF010 > MP
      GLEntry."Local G/L Account" := GenJnlLine."Local G/L Account";
      GLEntry."Financial Instrument No." := GenJnlLine."Financial Instrument No.";
      GLEntry."Debit Quantity" := GenJnlLine."Debit Quantity";
      GLEntry."Credit Quantity" := GenJnlLine."Credit Quantity";
      GLEntry."Transaction Type" := GenJnlLine."Transaction Type";
      //NC PIF010 < MP
      IF GenJnlLine."Currency Index Entry" THEN BEGIN
        GLEntry."Original Currency Code" := GenJnlLine."Currency Index";
        GLEntry."Original Debit Amount" := 0;
        GLEntry."Original Credit Amount" := 0;
        GLEntry."Original Amount" := 0;
      END;
      //NC PIF001 < DP
      //NC MBD01 > MP
      GLEntry."Due Date" := GenJnlLine."Due Date";
      GLEntry."Balance Entry" := GenJnlLine."Balance Entry";
      //NC MBD01 < MP
      //NC PIF001 > DP
      GLEntry."Description 2" := GenJnlLine."Description 2";
      //NC PIF01 < DP
      //NC MIFI02 > MP
      IF GenJnlLine.Elimination THEN BEGIN
        GLEntry.Elimination := TRUE;
        GLEntry."Eliminated Entry No." := GenJnlLine."Eliminated Entry No.";
        IF GLEntryCor.GET(GenJnlLine."Eliminated Entry No.") THEN BEGIN
          GLEntryCor."Eliminated by Entry No." := GLEntry."Entry No.";
          GLEntryCor.MODIFY;
        END;
      END;
      //NC MIFI02 < MP
      //NC MDP01 > MP
      GLEntry."Not Consolidate" := GenJnlLine."Not Consolidate";
      GLEntry."External System ID" := GenJnlLine."External System ID";
      //NC MBD30 > DP
      IF GenJnlLine."Original System ID"='' THEN
        GLEntry."Original System ID" := GenJnlLine."External System ID"
      ELSE
        GLEntry."Original System ID" := GenJnlLine."Original System ID";
      //NC MBD30 < DP
      IF GenJnlBatch2.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") THEN
        IF GenJnlBatch2."Not Consolidate" THEN
          GLEntry."Not Consolidate" := TRUE;
      GLEntry."Due Date" := GenJnlLine."Due Date";
      //NC MDP01 < MP
      //NC APCOC-92 DP
      GLEntry."Not Translate" := GenJnlLine."Not Translate";
      //NC APCOC-92 DP
      //NC APCOC-117 > RD
      GLEntry."Not Translate IFRS" := GenJnlLine."Not Translate IFRS";
      //NC APCOC-117 < RD

      //NC NCS-2166 > DP
      IF locExtSystem.GET(GLEntry."External System ID") THEN BEGIN
        IF locExtSystem."Not Translate" THEN
          GLEntry."Not Translate" := locExtSystem."Not Translate";
        IF locExtSystem."Not Translate IFRS" THEN
          GLEntry."Not Translate IFRS" := locExtSystem."Not Translate IFRS";
      END;
      //NC NCS-2166 < DP

      //NC MIO-61 > DP
      GLEntry."Source Entry No." := GenJnlLine."Source Entry No.";
      //GLEntry."Source User ID" := GenJnlLine."Source User ID"; //commented TDRA
      GLEntry."Source G/L Account No." := GenJnlLine."Source G/L Account No."; //TDRANCS-1715
      //NC MIO-61 < DP
      //NC NCS-2413 > DP
      GLEntry."Source Posting Date" := GenJnlLine."Posting Date";
      //NC NCS-2413 < DP
      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(Amount,AmountAddCurr,GLEntry."Additional-Currency Amount",UseAmountAddCurr,GenJnlLine,
          GLEntry); //NC NOS-26 SPA
    END;

    LOCAL PROCEDURE InitGLEntryVAT@113(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];BalAccNo@1008 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;UseAmtAddCurr@1007 : Boolean;TransVATTypeIsAmountPlusTax@1210000 : Boolean);
    VAR
      GLEntry@1005 : Record 17;
    BEGIN
      IF UseAmtAddCurr THEN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE)
      ELSE BEGIN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
        GLEntry."Bal. Account No." := BalAccNo;
      END;
      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry,TransVATTypeIsAmountPlusTax);
    END;

    LOCAL PROCEDURE InitGLEntryVATCopy@116(GenJnlLine@1001 : Record 81;AccNo@1003 : Code[20];BalAccNo@1007 : Code[20];Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal;VATEntry@1008 : Record 254;TransVATTypeIsAmountPlusTax@1210000 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."Bal. Account No." := BalAccNo;
      GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry,TransVATTypeIsAmountPlusTax);
    END;

    PROCEDURE InsertGLEntry@2(GenJnlLine@1001 : Record 81;GLEntry@1002 : Record 17;CalcAddCurrResiduals@1000 : Boolean);
    BEGIN
      // NC MIO-28 > AES
      IF GenJnlLine."Not G/L Post" THEN
        EXIT;
      // NC MIO-28 < AES

      WITH GLEntry DO BEGIN
        TESTFIELD("G/L Account No.");

        IF Amount <> ROUND(Amount) THEN
          FIELDERROR(
            Amount,
            STRSUBSTNO(NeedsRoundingErr,Amount));

        UpdateCheckAmounts(
          "Posting Date",Amount,"Additional-Currency Amount",
          BalanceCheckAmount,BalanceCheckAmount2,BalanceCheckAddCurrAmount,BalanceCheckAddCurrAmount2);

        UpdateDebitCredit(GenJnlLine.Correction);
      END;

      //NC MDM06.1 > MP
      GLEntry."Posted Time" := CREATEDATETIME(WORKDATE, TIME);
      //NC MDM06.1 < MP

      //NC TR219 > EB
      CheckAccount(GLEntry);
      //NC TR219 < EB

      //NC TR217 > DP
      CheckUserAccounts(GLEntry);
      //NC TR217 < DP

      //NC TR220 > DP
      CheckAmount(GLEntry);
      //NC TR220 < DP
      TempGLEntryBuf := GLEntry;

      OnBeforeInsertGLEntryBuffer(TempGLEntryBuf,GenJnlLine);

      TempGLEntryBuf.INSERT;

      //NC TR221 > DP
      SetClosePeriod(TempGLEntryBuf);
      //NC TR221 < DP

      // NCS-1880 > ORM
      InsertGLEntryExtension(TempGLEntryBuf, GenJnlLine);
      // NCS-1880 < ORM

      IF FirstEntryNo = 0 THEN
        FirstEntryNo := TempGLEntryBuf."Entry No.";
      NextEntryNo := NextEntryNo + 1;

      IF CalcAddCurrResiduals THEN
        HandleAddCurrResidualGLEntry(GenJnlLine,GLEntry.Amount,GLEntry."Additional-Currency Amount");
    END;

    LOCAL PROCEDURE CreateGLEntry@112(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1006 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      IF UseAmountAddCurr THEN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE)
      ELSE BEGIN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
      END;
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE CreateGLEntryRU@1210010(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1006 : Boolean;BalAccountNo@1210003 : Code[20];IgnoreGLSetup@1210002 : Boolean;CalcAddCurrResiduals@1210001 : Boolean;RUCorrection@1210000 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      IF UseAmountAddCurr THEN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE)
      ELSE BEGIN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
      END;
      InsertRUGLEntry(GenJnlLine,GLEntry,BalAccountNo,IgnoreGLSetup,CalcAddCurrResiduals,RUCorrection);
    END;

    LOCAL PROCEDURE CreateGLEntryBalAcc@126(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;BalAccType@1008 : Option;BalAccNo@1007 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE);
      GLEntry."Bal. Account Type" := BalAccType;
      GLEntry."Bal. Account No." := BalAccNo;
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      //NC NOS-26 > SPA
      IF GenJnlLine."Transaction Type" <> GenJnlLine."Transaction Type"::Automatic THEN
      //NC NOS-26 < SPA
        GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID);
    END;

    LOCAL PROCEDURE CreateGLEntryGainLoss@26(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;UseAmountAddCurr@1006 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,UseAmountAddCurr,TRUE);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE CreateGLEntryVAT@117(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record 383);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryVATRU@1210026(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record 383;BalAccountNo@1210003 : Code[20];IgnoreGLSetup@1210002 : Boolean;CalcAddCurrResiduals@1210001 : Boolean;RUCorrection@1210000 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      InsertRUGLEntry(GenJnlLine,GLEntry,BalAccountNo,IgnoreGLSetup,CalcAddCurrResiduals,RUCorrection);
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,GenJnlLine."Gen. Posting Type");
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryVATCollectAdj@110(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record 383;VAR AdjAmount@1007 : ARRAY [4] OF Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      CollectAdjustment(AdjAmount,GLEntry.Amount,GLEntry."Additional-Currency Amount");
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryVATCollectAdjRU@1210024(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record 383;VAR AdjAmount@1007 : ARRAY [4] OF Decimal;BalAccountNo@1210003 : Code[20];IgnoreGLSetup@1210002 : Boolean;CalcAddCurrResiduals@1210001 : Boolean;RUCorrection@1210000 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertRUGLEntry(GenJnlLine,GLEntry,BalAccountNo,IgnoreGLSetup,CalcAddCurrResiduals,RUCorrection);
      CollectAdjustment(AdjAmount,GLEntry.Amount,GLEntry."Additional-Currency Amount");
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryFromVATEntry@22(GenJnlLine@1000 : Record 81;VATAccNo@1002 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1004 : Decimal;VATEntry@1005 : Record 254);
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,VATAccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE UpdateCheckAmounts@98(PostingDate@1000 : Date;Amount@1005 : Decimal;AddCurrAmount@1006 : Decimal;VAR BalanceCheckAmount@1001 : Decimal;VAR BalanceCheckAmount2@1002 : Decimal;VAR BalanceCheckAddCurrAmount@1003 : Decimal;VAR BalanceCheckAddCurrAmount2@1004 : Decimal);
    BEGIN
      IF PostingDate = NORMALDATE(PostingDate) THEN BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + Amount * ((PostingDate - 01010000D) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + Amount * ((PostingDate - 01010000D) MOD 98 + 1);
      END ELSE BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + Amount * ((NORMALDATE(PostingDate) - 01010000D + 50) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + Amount * ((NORMALDATE(PostingDate) - 01010000D + 50) MOD 98 + 1);
      END;

      IF AddCurrencyCode <> '' THEN
        IF PostingDate = NORMALDATE(PostingDate) THEN BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount + AddCurrAmount * ((PostingDate - 01010000D) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 + AddCurrAmount * ((PostingDate - 01010000D) MOD 98 + 1);
        END ELSE BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount +
            AddCurrAmount * ((NORMALDATE(PostingDate) - 01010000D + 50) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 +
            AddCurrAmount * ((NORMALDATE(PostingDate) - 01010000D + 50) MOD 98 + 1);
        END
      ELSE BEGIN
        BalanceCheckAddCurrAmount := 0;
        BalanceCheckAddCurrAmount2 := 0;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscPossible@71(GenJnlLine@1000 : Record 81;VAR CVLedgEntryBuf@1001 : Record 382);
    BEGIN
      WITH GenJnlLine DO
        IF "Amount (LCY)" <> 0 THEN BEGIN
          IF (CVLedgEntryBuf."Pmt. Discount Date" >= CVLedgEntryBuf."Posting Date") OR
             (CVLedgEntryBuf."Pmt. Discount Date" = 0D)
          THEN BEGIN
            IF GLSetup."Pmt. Disc. Excl. VAT" THEN BEGIN
              IF "Sales/Purch. (LCY)" = 0 THEN
                CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
                  ("Amount (LCY)" + TotalVATAmountOnJnlLines(GenJnlLine)) * Amount / "Amount (LCY)"
              ELSE
                CVLedgEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
            END ELSE
              CVLedgEntryBuf."Original Pmt. Disc. Possible" := Amount;
            CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
              ROUND(
                CVLedgEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,AmountRoundingPrecision);
          END;
          CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        END;
    END;

    LOCAL PROCEDURE CalcPmtTolerancePossible@72(GenJnlLine@1003 : Record 81;PmtDiscountDate@1001 : Date;VAR PmtDiscToleranceDate@1002 : Date;VAR MaxPaymentTolerance@1000 : Decimal);
    BEGIN
      WITH GenJnlLine DO
        IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
          IF PmtDiscountDate <> 0D THEN
            PmtDiscToleranceDate :=
              CALCDATE(GLSetup."Payment Discount Grace Period",PmtDiscountDate)
          ELSE
            PmtDiscToleranceDate := PmtDiscountDate;

          CASE "Account Type" OF
            "Account Type"::Customer:
              PaymentToleranceMgt.CalcMaxPmtTolerance(
                "Document Type","Currency Code",Amount,"Amount (LCY)",1,MaxPaymentTolerance);
            "Account Type"::Vendor:
              PaymentToleranceMgt.CalcMaxPmtTolerance(
                "Document Type","Currency Code",Amount,"Amount (LCY)",-1,MaxPaymentTolerance);
          END;
        END;
    END;

    LOCAL PROCEDURE CalcPmtTolerance@61(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;VAR PmtTolAmtToBeApplied@1012 : Decimal;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtTol@1011 : Decimal;
      PmtTolLCY@1010 : Decimal;
      PmtTolAddCurr@1009 : Decimal;
    BEGIN
      IF OldCVLedgEntryBuf2."Accepted Payment Tolerance" = 0 THEN
        EXIT;

      PmtTol := -OldCVLedgEntryBuf2."Accepted Payment Tolerance";
      PmtTolAmtToBeApplied := PmtTolAmtToBeApplied + PmtTol;
      PmtTolLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtTol) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";

      OldCVLedgEntryBuf."Accepted Payment Tolerance" := 0;
      OldCVLedgEntryBuf."Pmt. Tolerance (LCY)" := -PmtTolLCY;

      IF NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode THEN
        PmtTolAddCurr := PmtTol
      ELSE
        PmtTolAddCurr := CalcLCYToAddCurr(PmtTolLCY);

      IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtTolLCY <> 0) THEN
        CalcPmtDiscIfAdjVAT(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolLCY,PmtTolAddCurr,
          NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)");

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance",PmtTol,PmtTolLCY,PmtTolAddCurr,0,0,0);
    END;

    LOCAL PROCEDURE CalcPmtDisc@50(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR DtldCVLedgEntryBuf@1003 : Record 383;GenJnlLine@1004 : Record 81;PmtTolAmtToBeApplied@1012 : Decimal;ApplnRoundingPrecision@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer);
    VAR
      PmtDisc@1009 : Decimal;
      PmtDiscLCY@1010 : Decimal;
      PmtDiscAddCurr@1011 : Decimal;
      MinimalPossibleLiability@1014 : Decimal;
      PaymentExceedsLiability@1005 : Boolean;
      ToleratedPaymentExceedsLiability@1013 : Boolean;
    BEGIN
      MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
      PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
      ToleratedPaymentExceedsLiability := ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;

      IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE) AND
          ((OldCVLedgEntryBuf2."Amount to Apply" = 0) OR PaymentExceedsLiability) OR
          (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
           (OldCVLedgEntryBuf2."Amount to Apply" <> 0) AND PaymentExceedsLiability AND ToleratedPaymentExceedsLiability))
      THEN BEGIN
        PmtDisc := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
        PmtDiscLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
          NewCVLedgEntryBuf."Original Amt. (LCY)";

        OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;

        IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
          PmtDiscAddCurr := PmtDisc
        ELSE
          PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
           (PmtDiscLCY <> 0)
        THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscLCY,PmtDiscAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)");

        DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
          GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
          DtldCVLedgEntryBuf."Entry Type"::"Payment Discount",PmtDisc,PmtDiscLCY,PmtDiscAddCurr,0,0,0);
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscIfAdjVAT@49(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;VAR PmtDiscLCY2@1005 : Decimal;VAR PmtDiscAddCurr2@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer;EntryType@1009 : Integer);
    VAR
      VATEntry2@1011 : Record 254;
      VATPostingSetup@1012 : Record 325;
      TaxJurisdiction@1013 : Record 320;
      DtldCVLedgEntryBuf2@1015 : Record 383;
      OriginalAmountAddCurr@1016 : Decimal;
      PmtDiscRounding@1017 : Decimal;
      PmtDiscRoundingAddCurr@1018 : Decimal;
      PmtDiscFactorLCY@1019 : Decimal;
      PmtDiscFactorAddCurr@1020 : Decimal;
      VATBase@1021 : Decimal;
      VATBaseAddCurr@1022 : Decimal;
      VATAmount@1023 : Decimal;
      VATAmountAddCurr@1024 : Decimal;
      TotalVATAmount@1025 : Decimal;
      LastConnectionNo@1026 : Integer;
      VATEntryModifier@1027 : Integer;
    BEGIN
      IF OldCVLedgEntryBuf."Original Amt. (LCY)" = 0 THEN
        EXIT;

      IF (AddCurrencyCode = '') OR (AddCurrencyCode = OldCVLedgEntryBuf."Currency Code") THEN
        OriginalAmountAddCurr := OldCVLedgEntryBuf.Amount
      ELSE
        OriginalAmountAddCurr := CalcLCYToAddCurr(OldCVLedgEntryBuf."Original Amt. (LCY)");

      PmtDiscRounding := PmtDiscLCY2;
      PmtDiscFactorLCY := PmtDiscLCY2 / OldCVLedgEntryBuf."Original Amt. (LCY)";
      IF OriginalAmountAddCurr <> 0 THEN
        PmtDiscFactorAddCurr := PmtDiscAddCurr2 / OriginalAmountAddCurr
      ELSE
        PmtDiscFactorAddCurr := 0;
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      IF OldCVLedgEntryBuf."Transaction No." = NextTransactionNo THEN
        VATEntry2.SETRANGE("Entry No.",0,FirstNewVATEntryNo - 1);
      IF VATEntry2.FINDSET THEN BEGIN
        TotalVATAmount := 0;
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATEntry2."VAT Calculation Type" =
             VATEntry2."VAT Calculation Type"::"Sales Tax"
          THEN BEGIN
            TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
            VATPostingSetup."Adjust for Payment Discount" :=
              TaxJurisdiction."Adjust for Payment Discount";
          END;
          IF VATPostingSetup."Adjust for Payment Discount" THEN BEGIN
            IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
              IF LastConnectionNo <> 0 THEN BEGIN
                DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
                DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
                InsertSummarizedVAT(GenJnlLine,VATPostingSetup);
              END;

              CalcPmtDiscVATBases(VATEntry2,VATBase,VATBaseAddCurr);

              PmtDiscRounding := PmtDiscRounding + VATBase * PmtDiscFactorLCY;
              VATBase := ROUND(PmtDiscRounding - PmtDiscLCY2);
              PmtDiscLCY2 := PmtDiscLCY2 + VATBase;

              PmtDiscRoundingAddCurr := PmtDiscRoundingAddCurr + VATBaseAddCurr * PmtDiscFactorAddCurr;
              VATBaseAddCurr := ROUND(CalcLCYToAddCurr(VATBase),AddCurrency."Amount Rounding Precision");
              PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATBaseAddCurr;

              DtldCVLedgEntryBuf2.INIT;
              DtldCVLedgEntryBuf2."Posting Date" := GenJnlLine."Posting Date";
              DtldCVLedgEntryBuf2."Document Type" := GenJnlLine."Document Type";
              DtldCVLedgEntryBuf2."Document No." := GenJnlLine."Document No.";
              DtldCVLedgEntryBuf2.Amount := 0;
              DtldCVLedgEntryBuf2."Amount (LCY)" := -VATBase;
              DtldCVLedgEntryBuf2."Entry Type" := EntryType;
              CASE EntryType OF
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  VATEntryModifier := 0;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  VATEntryModifier := 1000000;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  VATEntryModifier := 2000000;
              END;
              DtldCVLedgEntryBuf2.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
              // The total payment discount in currency is posted on the entry made in
              // the function CalcPmtDisc.
              DtldCVLedgEntryBuf2."User ID" := USERID;
              DtldCVLedgEntryBuf2."Additional-Currency Amount" := -VATBaseAddCurr;
              DtldCVLedgEntryBuf2.CopyPostingGroupsFromVATEntry(VATEntry2);
              TotalVATAmount := 0;
              LastConnectionNo := VATEntry2."Sales Tax Connection No.";
            END;

            CalcPmtDiscVATAmounts(
              VATEntry2,VATBase,VATBaseAddCurr,VATAmount,VATAmountAddCurr,
              PmtDiscRounding,PmtDiscFactorLCY,PmtDiscLCY2,PmtDiscAddCurr2);

            TotalVATAmount := TotalVATAmount + VATAmount;

            IF (PmtDiscAddCurr2 <> 0) AND (PmtDiscLCY2 = 0) THEN BEGIN
              VATAmountAddCurr := VATAmountAddCurr - PmtDiscAddCurr2;
              PmtDiscAddCurr2 := 0;
            END;

            // Post VAT
            // VAT for VAT entry
            IF VATEntry2.Type <> 0 THEN
              InsertPmtDiscVATForVATEntry(
                GenJnlLine,TempVATEntry,VATEntry2,VATEntryModifier,
                VATAmount,VATAmountAddCurr,VATBase,VATBaseAddCurr,
                PmtDiscFactorLCY,PmtDiscFactorAddCurr);

            // VAT for G/L entry/entries
            InsertPmtDiscVATForGLEntry(
              GenJnlLine,DtldCVLedgEntryBuf,NewCVLedgEntryBuf,VATEntry2,
              VATPostingSetup,TaxJurisdiction,EntryType,VATAmount,VATAmountAddCurr,OldCVLedgEntryBuf);
          END;
        UNTIL VATEntry2.NEXT = 0;

        IF LastConnectionNo <> 0 THEN BEGIN
          DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
          DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
          DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
          InsertSummarizedVAT(GenJnlLine,VATPostingSetup);
        END;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscTolerance@60(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtDiscTol@1011 : Decimal;
      PmtDiscTolLCY@1010 : Decimal;
      PmtDiscTolAddCurr@1009 : Decimal;
    BEGIN
      IF NOT OldCVLedgEntryBuf2."Accepted Pmt. Disc. Tolerance" THEN
        EXIT;

      PmtDiscTol := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
      PmtDiscTolLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";

      OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscTolLCY;

      IF NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode THEN
        PmtDiscTolAddCurr := PmtDiscTol
      ELSE
        PmtDiscTolAddCurr := CalcLCYToAddCurr(PmtDiscTolLCY);

      IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtDiscTolLCY <> 0) THEN
        CalcPmtDiscIfAdjVAT(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscTolLCY,PmtDiscTolAddCurr,
          NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)");

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance",PmtDiscTol,PmtDiscTolLCY,PmtDiscTolAddCurr,0,0,0);
    END;

    LOCAL PROCEDURE CalcPmtDiscVATBases@118(VATEntry2@1001 : Record 254;VAR VATBase@1002 : Decimal;VAR VATBaseAddCurr@1003 : Decimal);
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      CASE VATEntry2."VAT Calculation Type" OF
        VATEntry2."VAT Calculation Type"::"Normal VAT",
        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
        VATEntry2."VAT Calculation Type"::"Full VAT":
          BEGIN
            VATBase :=
              VATEntry2.Base + VATEntry2."Unrealized Base";
            VATBaseAddCurr :=
              VATEntry2."Additional-Currency Base" +
              VATEntry2."Add.-Currency Unrealized Base";
          END;
        VATEntry2."VAT Calculation Type"::"Sales Tax":
          BEGIN
            VATEntry.RESET;
            VATEntry.SETCURRENTKEY("Transaction No.");
            VATEntry.SETRANGE("Transaction No.",VATEntry2."Transaction No.");
            VATEntry.SETRANGE("Sales Tax Connection No.",VATEntry2."Sales Tax Connection No.");
            VATEntry := VATEntry2;
            REPEAT
              IF VATEntry.Base < 0 THEN
                VATEntry.SETFILTER(Base,'>%1',VATEntry.Base)
              ELSE
                VATEntry.SETFILTER(Base,'<%1',VATEntry.Base);
            UNTIL NOT VATEntry.FINDLAST;
            VATEntry.RESET;
            VATBase :=
              VATEntry.Base + VATEntry."Unrealized Base";
            VATBaseAddCurr :=
              VATEntry."Additional-Currency Base" +
              VATEntry."Add.-Currency Unrealized Base";
          END;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscVATAmounts@129(VATEntry2@1000 : Record 254;VATBase@1001 : Decimal;VATBaseAddCurr@1007 : Decimal;VAR VATAmount@1002 : Decimal;VAR VATAmountAddCurr@1003 : Decimal;VAR PmtDiscRounding@1004 : Decimal;PmtDiscFactorLCY@1005 : Decimal;VAR PmtDiscLCY2@1006 : Decimal;VAR PmtDiscAddCurr2@1008 : Decimal);
    BEGIN
      CASE VATEntry2."VAT Calculation Type" OF
        VATEntry2."VAT Calculation Type"::"Normal VAT",
        VATEntry2."VAT Calculation Type"::"Full VAT":
          IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
             (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
          THEN BEGIN
            IF (VATBase = 0) AND
               (VATEntry2."VAT Calculation Type" <> VATEntry2."VAT Calculation Type"::"Full VAT")
            THEN
              VATAmount := 0
            ELSE BEGIN
              PmtDiscRounding :=
                PmtDiscRounding +
                (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
              VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
              PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
            END;
            IF (VATBaseAddCurr = 0) AND
               (VATEntry2."VAT Calculation Type" <> VATEntry2."VAT Calculation Type"::"Full VAT")
            THEN
              VATAmountAddCurr := 0
            ELSE BEGIN
              VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
              PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
            END;
          END ELSE BEGIN
            VATAmount := 0;
            VATAmountAddCurr := 0;
          END;
        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
          BEGIN
            VATAmount :=
              ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
            VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
          END;
        VATEntry2."VAT Calculation Type"::"Sales Tax":
          IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
            VATAmount :=
              ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
            VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
          END ELSE
            IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
               (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
            THEN BEGIN
              IF VATBase = 0 THEN
                VATAmount := 0
              ELSE BEGIN
                PmtDiscRounding :=
                  PmtDiscRounding +
                  (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
                VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
                PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
              END;

              IF VATBaseAddCurr = 0 THEN
                VATAmountAddCurr := 0
              ELSE BEGIN
                VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
                PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
              END;
            END ELSE BEGIN
              VATAmount := 0;
              VATAmountAddCurr := 0;
            END;
      END;
    END;

    LOCAL PROCEDURE InsertPmtDiscVATForVATEntry@43(GenJnlLine@1000 : Record 81;VAR TempVATEntry@1001 : TEMPORARY Record 254;VATEntry2@1004 : Record 254;VATEntryModifier@1002 : Integer;VATAmount@1005 : Decimal;VATAmountAddCurr@1006 : Decimal;VATBase@1007 : Decimal;VATBaseAddCurr@1008 : Decimal;PmtDiscFactorLCY@1009 : Decimal;PmtDiscFactorAddCurr@1010 : Decimal);
    VAR
      TempVATEntryNo@1003 : Integer;
    BEGIN
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Entry No.",VATEntryModifier,VATEntryModifier + 999999);
      IF TempVATEntry.FINDLAST THEN
        TempVATEntryNo := TempVATEntry."Entry No." + 1
      ELSE
        TempVATEntryNo := VATEntryModifier + 1;
      TempVATEntry := VATEntry2;
      TempVATEntry."Entry No." := TempVATEntryNo;
      TempVATEntry."Posting Date" := GenJnlLine."Posting Date";
      TempVATEntry."Document No." := GenJnlLine."Document No.";
      TempVATEntry."External Document No." := GenJnlLine."External Document No.";
      TempVATEntry."Document Type" := GenJnlLine."Document Type";
      TempVATEntry."Source Code" := GenJnlLine."Source Code";
      TempVATEntry."Reason Code" := GenJnlLine."Reason Code";
      TempVATEntry."Transaction No." := NextTransactionNo;
      TempVATEntry."Sales Tax Connection No." := NextConnectionNo;
      TempVATEntry."Unrealized Amount" := 0;
      TempVATEntry."Unrealized Base" := 0;
      TempVATEntry."Remaining Unrealized Amount" := 0;
      TempVATEntry."Remaining Unrealized Base" := 0;
      TempVATEntry."User ID" := USERID;
      TempVATEntry."Closed by Entry No." := 0;
      TempVATEntry.Closed := FALSE;
      TempVATEntry."Internal Ref. No." := '';
      TempVATEntry.Amount := VATAmount;
      TempVATEntry."Additional-Currency Amount" := VATAmountAddCurr;
      TempVATEntry."VAT Difference" := 0;
      TempVATEntry."Add.-Curr. VAT Difference" := 0;
      TempVATEntry."Add.-Currency Unrealized Amt." := 0;
      TempVATEntry."Add.-Currency Unrealized Base" := 0;
      IF VATEntry2."Tax on Tax" THEN BEGIN
        TempVATEntry.Base :=
          ROUND((VATEntry2.Base + VATEntry2."Unrealized Base") * PmtDiscFactorLCY);
        TempVATEntry."Additional-Currency Base" :=
          ROUND(
            (VATEntry2."Additional-Currency Base" +
             VATEntry2."Add.-Currency Unrealized Base") * PmtDiscFactorAddCurr,
            AddCurrency."Amount Rounding Precision");
      END ELSE BEGIN
        TempVATEntry.Base := VATBase;
        TempVATEntry."Additional-Currency Base" := VATBaseAddCurr;
      END;

      IF AddCurrencyCode = '' THEN BEGIN
        TempVATEntry."Additional-Currency Base" := 0;
        TempVATEntry."Additional-Currency Amount" := 0;
        TempVATEntry."Add.-Currency Unrealized Amt." := 0;
        TempVATEntry."Add.-Currency Unrealized Base" := 0;
      END;
      TempVATEntry.Positive := TempVATEntry.Amount > 0;
      TempVATEntry.INSERT;
    END;

    LOCAL PROCEDURE InsertPmtDiscVATForGLEntry@94(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;VAR NewCVLedgEntryBuf@1003 : Record 382;VATEntry2@1004 : Record 254;VAR VATPostingSetup@1005 : Record 325;VAR TaxJurisdiction@1008 : Record 320;EntryType@1002 : Integer;VATAmount@1006 : Decimal;VATAmountAddCurr@1007 : Decimal;OldCVLedgEntryBuf@1210000 : Record 382);
    BEGIN
      DtldCVLedgEntryBuf.INIT;
      DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
      CASE EntryType OF
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)";
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)";
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)";
      END;
      DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      DtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      DtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
      DtldCVLedgEntryBuf.Amount := 0;
      DtldCVLedgEntryBuf."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
      DtldCVLedgEntryBuf."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
      DtldCVLedgEntryBuf."Tax Jurisdiction Code" := VATEntry2."Tax Jurisdiction Code";
      IF GLSetup."Enable Russian Accounting" THEN
        DtldCVLedgEntryBuf."Applied CV Ledger Entry No." := OldCVLedgEntryBuf."Entry No.";
      // The total payment discount in currency is posted on the entry made in
      // the function CalcPmtDisc.
      DtldCVLedgEntryBuf."User ID" := USERID;
      DtldCVLedgEntryBuf."Use Additional-Currency Amount" := TRUE;

      CASE VATEntry2.Type OF
        VATEntry2.Type::Purchase:
          CASE VATEntry2."VAT Calculation Type" OF
            VATEntry2."VAT Calculation Type"::"Normal VAT",
            VATEntry2."VAT Calculation Type"::"Full VAT":
              BEGIN
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE,
                  VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
            VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE,
                  VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),'',
                  -VATAmount,-VATAmountAddCurr,FALSE,
                  VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
              END;
            VATEntry2."VAT Calculation Type"::"Sales Tax":
              IF VATEntry2."Use Tax" THEN BEGIN
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE,
                  VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetRevChargeAccount(FALSE),'',
                  -VATAmount,-VATAmountAddCurr,FALSE,
                  VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
              END ELSE BEGIN
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE,
                  VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
          END;
        VATEntry2.Type::Sale:
          CASE VATEntry2."VAT Calculation Type" OF
            VATEntry2."VAT Calculation Type"::"Normal VAT",
            VATEntry2."VAT Calculation Type"::"Full VAT":
              BEGIN
                InitGLEntryVAT(
                  GenJnlLine,VATPostingSetup.GetSalesAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE,
                  VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
            VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
              ;
            VATEntry2."VAT Calculation Type"::"Sales Tax":
              BEGIN
                InitGLEntryVAT(
                  GenJnlLine,TaxJurisdiction.GetSalesAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE,
                  VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcCurrencyApplnRounding@51(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;ApplnRoundingPrecision@1005 : Decimal);
    VAR
      ApplnRounding@1006 : Decimal;
      ApplnRoundingLCY@1007 : Decimal;
    BEGIN
      IF NOT GLSetup."Enable Russian Accounting" THEN
        IF ((NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Payment) AND
            (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)) OR
           (NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf."Currency Code")
        THEN
          EXIT;

      ApplnRounding := -(NewCVLedgEntryBuf."Remaining Amount" + OldCVLedgEntryBuf."Remaining Amount");
      ApplnRoundingLCY := ROUND(ApplnRounding / NewCVLedgEntryBuf."Adjusted Currency Factor");

      IF (ApplnRounding = 0) OR (ABS(ApplnRounding) > ApplnRoundingPrecision) THEN
        EXIT;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding",ApplnRounding,ApplnRoundingLCY,ApplnRounding,0,0,0);
    END;

    LOCAL PROCEDURE FindAmtForAppln@6(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR AppliedAmount@1003 : Decimal;VAR AppliedAmountLCY@1004 : Decimal;VAR OldAppliedAmount@1005 : Decimal;ApplnRoundingPrecision@1007 : Decimal);
    BEGIN
      IF OldCVLedgEntryBuf2.GETFILTER(Positive) <> '' THEN BEGIN
        IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN BEGIN
          IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
               ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")))
          THEN
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount"
          ELSE
            AppliedAmount := -OldCVLedgEntryBuf2."Amount to Apply"
        END ELSE
          AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
      END ELSE BEGIN
        IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN
          IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
               ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")) AND
              (ABS(NewCVLedgEntryBuf."Remaining Amount") >=
               ABS(
                 ABSMin(
                   OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",
                   OldCVLedgEntryBuf2."Amount to Apply")))) OR
             OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance"
          THEN BEGIN
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
            OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := FALSE;
          END ELSE
            AppliedAmount := GetAppliedAmountFromBuffers(NewCVLedgEntryBuf,OldCVLedgEntryBuf2)
        ELSE
          AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Remaining Amount");
      END;

      IF (ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply") < ApplnRoundingPrecision) AND
         (ApplnRoundingPrecision <> 0) AND
         (OldCVLedgEntryBuf2."Amount to Apply" <> 0)
      THEN
        AppliedAmount := AppliedAmount - (OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply");

      IF NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
        AppliedAmountLCY := ROUND(AppliedAmount / OldCVLedgEntryBuf."Original Currency Factor");
        OldAppliedAmount := AppliedAmount;
      END ELSE BEGIN
        // Management of posting in multiple currencies
        IF AppliedAmount = -OldCVLedgEntryBuf2."Remaining Amount" THEN
          OldAppliedAmount := -OldCVLedgEntryBuf."Remaining Amount"
        ELSE
          OldAppliedAmount :=
            CurrExchRate.ExchangeAmount(
              AppliedAmount,NewCVLedgEntryBuf."Currency Code",
              OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Posting Date");

        IF NewCVLedgEntryBuf."Currency Code" <> '' THEN
          // Post the realized gain or loss on the NewCVLedgEntryBuf
          AppliedAmountLCY := ROUND(OldAppliedAmount / OldCVLedgEntryBuf."Original Currency Factor")
        ELSE
          // Post the realized gain or loss on the OldCVLedgEntryBuf
          AppliedAmountLCY := ROUND(AppliedAmount / NewCVLedgEntryBuf."Original Currency Factor");
      END;
    END;

    LOCAL PROCEDURE CalcCurrencyUnrealizedGainLoss@48(VAR CVLedgEntryBuf@1000 : Record 382;VAR TempDtldCVLedgEntryBuf@1002 : TEMPORARY Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;RemainingAmountBeforeAppln@1007 : Decimal);
    VAR
      DtldCustLedgEntry@1008 : Record 379;
      DtldVendLedgEntry@1009 : Record 380;
      UnRealizedGainLossLCY@1001 : Decimal;
    BEGIN
      IF (CVLedgEntryBuf."Currency Code" = '') OR (RemainingAmountBeforeAppln = 0) THEN
        EXIT;

      // Calculate Unrealized GainLoss
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN
        UnRealizedGainLossLCY :=
          ROUND(
            DtldCustLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
            ABS(AppliedAmount / RemainingAmountBeforeAppln))
      ELSE
        UnRealizedGainLossLCY :=
          ROUND(
            DtldVendLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
            ABS(AppliedAmount / RemainingAmountBeforeAppln));

      IF UnRealizedGainLossLCY <> 0 THEN
        IF UnRealizedGainLossLCY < 0 THEN
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss",0,-UnRealizedGainLossLCY,0,0,0,0)
        ELSE
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain",0,-UnRealizedGainLossLCY,0,0,0,0);
    END;

    LOCAL PROCEDURE CalcCurrencyRealizedGainLoss@62(VAR CVLedgEntryBuf@1005 : Record 382;NewCVLedgEntryBuf@1210000 : Record 382;VAR TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;GenJnlLine@1002 : Record 81;AppliedAmount@1001 : Decimal;AppliedAmountLCY@1000 : Decimal);
    VAR
      RealizedGainLossLCY@1006 : Decimal;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      IF GLSetup."Enable Russian Accounting" AND (NewCVLedgEntryBuf."Prepmt. Diff. Appln. Entry No." <> 0) THEN
        EXIT;

      // Calculate Realized GainLoss
      RealizedGainLossLCY :=
        AppliedAmountLCY - ROUND(AppliedAmount / CVLedgEntryBuf."Original Currency Factor");
      IF RealizedGainLossLCY = 0 THEN
        EXIT;

      IF NOT GLSetup."Enable Russian Accounting" THEN
        IF RealizedGainLossLCY < 0 THEN
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Realized Loss",0,RealizedGainLossLCY,0,0,0,0)
        ELSE
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Realized Gain",0,RealizedGainLossLCY,0,0,0,0);

      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        TempDtldCVLedgEntryBuf.InitFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(CVLedgEntryBuf);
        TempDtldCVLedgEntryBuf."Applied CV Ledger Entry No." := NewCVLedgEntryBuf."Entry No.";
        TempDtldCVLedgEntryBuf."Prepmt. Diff." := PrepmtDiffMgt.CheckCalcPrepDiff(CVLedgEntryBuf,NewCVLedgEntryBuf);
        IF RealizedGainLossLCY < 0 THEN BEGIN
          TempDtldCVLedgEntryBuf."Entry Type" := TempDtldCVLedgEntryBuf."Entry Type"::"Realized Loss";
          TempDtldCVLedgEntryBuf."Amount (LCY)" := RealizedGainLossLCY;
          //Nc TR237 > EB
          TempDtldCVLedgEntryBuf."Not Consolidate":= GLSetup."Not Consolidate Exch. Diff.";
          //Nc TR237 < EB

          //NC APCOC-104 > DP
          MovingDataSetup.GET;
          TempDtldCVLedgEntryBuf."Not Translate" := MovingDataSetup."Not Translate Applications";
          //NC APCOC-104 < DP
          //NC APCOC-117 > RD
          TempDtldCVLedgEntryBuf."Not Translate IFRS" := MovingDataSetup."Not Transl. Applications IFRS";
          //NC APCOC-117 < RD
          //NC MIO-28 > DP
          IF (TempDtldCVLedgEntryBuf."Posting Date" >= GLSetup."Not Post FX G/L from Date") AND
             (GLSetup."Not Post FX G/L from Date" <> 0D)
          THEN
            TempDtldCVLedgEntryBuf."Not G/L Post" := TRUE;  // NC MIO-28 AES
          //NC MIO-28 < DP
          TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END ELSE BEGIN
          TempDtldCVLedgEntryBuf."Entry Type" := TempDtldCVLedgEntryBuf."Entry Type"::"Realized Gain";
          TempDtldCVLedgEntryBuf."Amount (LCY)" := RealizedGainLossLCY;
          //Nc TR237 > EB
          TempDtldCVLedgEntryBuf."Not Consolidate":= GLSetup."Not Consolidate Exch. Diff.";
          //Nc TR237 < EB
          //NC APCOC-104 > DP
          MovingDataSetup.GET;
          TempDtldCVLedgEntryBuf."Not Translate" := MovingDataSetup."Not Translate Applications";
          //NC APCOC-104 < DP
          //NC APCOC-117 > RD
          TempDtldCVLedgEntryBuf."Not Translate IFRS" := MovingDataSetup."Not Transl. Applications IFRS";
          //NC APCOC-117 < RD
          //NC MIO-28 > DP
          IF (TempDtldCVLedgEntryBuf."Posting Date" >= GLSetup."Not Post FX G/L from Date") AND
            (GLSetup."Not Post FX G/L from Date" <> 0D)
          THEN
            TempDtldCVLedgEntryBuf."Not G/L Post" := TRUE;  // NC MIO-28 AES
          //NC MIO-28 < DP
          TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END;
        IF TempDtldCVLedgEntryBuf."Prepmt. Diff." THEN
          CalcTaxAccRealizedGainLossAmt(
            NewCVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,RealizedGainLossLCY,AppliedAmount,AppliedAmountLCY);
      END;
    END;

    LOCAL PROCEDURE CalcApplication@55(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;AppliedAmountLCY@1005 : Decimal;OldAppliedAmount@1006 : Decimal;PrevNewCVLedgEntryBuf@1008 : Record 382;PrevOldCVLedgEntryBuf@1007 : Record 382;VAR AllApplied@1009 : Boolean);
    BEGIN
      IF AppliedAmount = 0 THEN
        EXIT;

      IF NOT GLSetup."Enable Russian Accounting" THEN
        DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
          GenJnlLine,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
          DtldCVLedgEntryBuf."Entry Type"::Application,OldAppliedAmount,AppliedAmountLCY,0,
          NewCVLedgEntryBuf."Entry No.",PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
          PrevOldCVLedgEntryBuf."Max. Payment Tolerance")
      ELSE BEGIN
        DtldCVLedgEntryBuf.InitFromGenJnlLine(GenJnlLine);
        DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(OldCVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::Application;
        IF NewCVLedgEntryBuf."Prepmt. Diff. Appln. Entry No." <> 0 THEN BEGIN
          PrepmtDiffMgt.UpdateCurrFactor(NewCVLedgEntryBuf,OldCVLedgEntryBuf);
          OldCVLedgEntryBuf."Currency Code" := NewCVLedgEntryBuf."Closed by Currency Code";
          DtldCVLedgEntryBuf."Currency Code" := NewCVLedgEntryBuf."Closed by Currency Code";
          IF DtldCVLedgEntryBuf."Currency Code" <> '' THEN
            OldAppliedAmount := 0;
        END;
        DtldCVLedgEntryBuf.Amount := OldAppliedAmount;
        DtldCVLedgEntryBuf."Amount (LCY)" := AppliedAmountLCY;
        DtldCVLedgEntryBuf."Applied CV Ledger Entry No." := NewCVLedgEntryBuf."Entry No.";
        DtldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
          PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible";
        DtldCVLedgEntryBuf."Max. Payment Tolerance" := PrevOldCVLedgEntryBuf."Max. Payment Tolerance";
        DtldCVLedgEntryBuf."Applied Amount (LCY)" := AppliedAmountLCY;
        DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,OldCVLedgEntryBuf,FALSE);
      END;

      OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amount" <> 0;
      IF GLSetup."Enable Russian Accounting" AND (NewCVLedgEntryBuf."Prepmt. Diff. Appln. Entry No." <> 0) THEN
        OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amt. (LCY)" <> 0;
      IF NOT OldCVLedgEntryBuf.Open THEN
        OldCVLedgEntryBuf.SetClosedFields(
          NewCVLedgEntryBuf."Entry No.",GenJnlLine."Posting Date",
          -OldAppliedAmount,-AppliedAmountLCY,NewCVLedgEntryBuf."Currency Code",-AppliedAmount)
      ELSE
        AllApplied := FALSE;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::Application,-AppliedAmount,-AppliedAmountLCY,0,
        NewCVLedgEntryBuf."Entry No.",PrevNewCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
        PrevNewCVLedgEntryBuf."Max. Payment Tolerance");

      NewCVLedgEntryBuf.Open := NewCVLedgEntryBuf."Remaining Amount" <> 0;
      IF NOT NewCVLedgEntryBuf.Open AND NOT AllApplied THEN
        NewCVLedgEntryBuf.SetClosedFields(
          OldCVLedgEntryBuf."Entry No.",GenJnlLine."Posting Date",
          AppliedAmount,AppliedAmountLCY,OldCVLedgEntryBuf."Currency Code",OldAppliedAmount);
    END;

    LOCAL PROCEDURE CalcAmtLCYAdjustment@52(VAR CVLedgEntryBuf@1000 : Record 382;VAR NewCVLedgEntryBuf@1210001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81);
    VAR
      AdjustedAmountLCY@1005 : Decimal;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        IF NewCVLedgEntryBuf."Prepmt. Diff. Appln. Entry No." <> 0 THEN
          EXIT;
        IF GLSetup."Cancel Curr. Prepmt. Adjmt." AND CVLedgEntryBuf.Prepayment THEN
          IF (CVLedgEntryBuf."Adjusted Currency Factor" <> CVLedgEntryBuf."Original Currency Factor") AND
             CVLedgEntryBuf.Open
          THEN
            EXIT;
      END;

      AdjustedAmountLCY :=
        ROUND(CVLedgEntryBuf."Remaining Amount" / CVLedgEntryBuf."Adjusted Currency Factor");

      IF AdjustedAmountLCY <> CVLedgEntryBuf."Remaining Amt. (LCY)" THEN BEGIN
        DtldCVLedgEntryBuf.InitFromGenJnlLine(GenJnlLine);
        DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(CVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" :=
          DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount";
        DtldCVLedgEntryBuf."Amount (LCY)" := AdjustedAmountLCY - CVLedgEntryBuf."Remaining Amt. (LCY)";
        DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE InitBankAccLedgEntry@59(GenJnlLine@1000 : Record 81;VAR BankAccLedgEntry@1001 : Record 271);
    BEGIN
      BankAccLedgEntry.INIT;
      BankAccLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      BankAccLedgEntry."Entry No." := NextEntryNo;
      BankAccLedgEntry."Transaction No." := NextTransactionNo;
    END;

    LOCAL PROCEDURE InitCheckLedgEntry@65(BankAccLedgEntry@1000 : Record 271;VAR CheckLedgEntry@1001 : Record 272);
    BEGIN
      CheckLedgEntry.INIT;
      CheckLedgEntry.CopyFromBankAccLedgEntry(BankAccLedgEntry);
      CheckLedgEntry."Entry No." := NextCheckEntryNo;
    END;

    LOCAL PROCEDURE InitCustLedgEntry@57(GenJnlLine@1000 : Record 81;VAR CustLedgEntry@1001 : Record 21);
    BEGIN
      CustLedgEntry.INIT;
      CustLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      CustLedgEntry."Entry No." := NextEntryNo;
      CustLedgEntry."Transaction No." := NextTransactionNo;
      //NC MTD02 > AIG update_reliase!
      CustLedgEntry."External System ID" := GenJnlLine."External System ID";
      //NC MTD02 < AIG update_reliase!
      //NC S1893 > PCH
      CustLedgEntry."Business Unit Code" := GenJnlLine."Business Unit Code";
      //NC S1893 < PCH
    END;

    LOCAL PROCEDURE InitVendLedgEntry@58(GenJnlLine@1001 : Record 81;VAR VendLedgEntry@1000 : Record 25);
    BEGIN
      VendLedgEntry.INIT;
      VendLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      VendLedgEntry."Entry No." := NextEntryNo;
      VendLedgEntry."Transaction No." := NextTransactionNo;
      //NC MTD02 > AIG update_reliase!
      VendLedgEntry."External System ID" := GenJnlLine."External System ID";
      //NC MTD02 < AIG update_reliase!
      //NC S1893 > PCH
      VendLedgEntry."Business Unit Code" := GenJnlLine."Business Unit Code";
      //NC S1893 < PCH
    END;

    LOCAL PROCEDURE InsertDtldCustLedgEntry@102(GenJnlLine@1003 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VAR DtldCustLedgEntry@1001 : Record 379;Offset@1000 : Integer);
    BEGIN
      IF GenJnlLine."Prepmt. Diff." THEN
        EXIT;

      WITH DtldCustLedgEntry DO BEGIN
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        "Customer Posting Group" := GenJnlLine."Posting Group";
        "Agreement No." := GenJnlLine."Agreement No.";
        //NC MLN03 > EB
        "Agreement Condition No." := GenJnlLine."Agreement Condition No.";
        "Amount Type" := GenJnlLine."Amount Type";
        //NC MLN03 < EB
        //NC APCOC-56 > DP
        "Interest Accrual" := GenJnlLine."Interest Accrual";
        //NC APCOC-56 < DP
        IF "Prepmt. Diff." THEN
          "Entry Type" := "Entry Type"::Application;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertDtldVendLedgEntry@103(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;VAR DtldVendLedgEntry@1004 : Record 380;Offset@1002 : Integer);
    BEGIN
      IF GenJnlLine."Prepmt. Diff." THEN
        EXIT;

      WITH DtldVendLedgEntry DO BEGIN
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        "Vendor Posting Group" := GenJnlLine."Posting Group";
        "Agreement No." := GenJnlLine."Agreement No.";
        //NC MLN03 > EB
        "Agreement Condition No." := GenJnlLine."Agreement Condition No.";
        "Amount Type" := GenJnlLine."Amount Type";
        //NC MLN03 < EB
        //NC APCOC-56 > DP
        "Interest Accrual" := GenJnlLine."Interest Accrual";
        //NC APCOC-56 < DP
        IF "Prepmt. Diff." THEN
          "Entry Type" := "Entry Type"::Application;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntry@1(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;Cust@1003 : Record 18);
    VAR
      OldCustLedgEntry@1005 : Record 21;
      OldCVLedgEntryBuf@1006 : Record 382;
      NewCustLedgEntry@1008 : Record 21;
      NewCVLedgEntryBuf2@1019 : Record 382;
      TempOldCustLedgEntry@1021 : TEMPORARY Record 21;
      SalesSetup@1210000 : Record 311;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1024 : Boolean;
      AmtDiffDocToPrepayment@1210001 : Boolean;
      ApplyDocNo@1101495000 : Code[20];
      TempOldCustLedgEntry1@1101495001 : TEMPORARY Record 21;
      CustPostGroup1@1101495003 : Record 92;
      CustPostGroup2@1101495002 : Record 92;
    BEGIN
      IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
        EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
         ((Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") AND
          GenJnlLine."Allow Application")
      THEN
        EXIT;

      //NC NCS-978 > DP
      InsertFX_RevalTypeDimValue;
      //NC NCS-978 < DP

      SalesSetup.GET;
      IF (Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") AND
         SalesSetup."Check Application Date"
      THEN
        ERROR(CheckApplnDateCustErr,Cust."No.");

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      //NC OCPM01 > DP
      SavedNewCVDocNo := DtldCVLedgEntryBuf."Document No.";
      IF GLSetup."Use Application Postfix" THEN BEGIN
        IF STRPOS(GenJnlLine."Document No.",'.AP') = 0 THEN
          GenJnlLine."Document No." :=COPYSTR(GenJnlLine."Document No.", 1, MAXSTRLEN(GenJnlLine."Document No.")-3) + '.AP';
        ApplyDocNo := GenJnlLine."Document No.";
        DtldCVLedgEntryBuf."Document No." := ApplyDocNo;
      END;
      //NC OCPM01 < DP

      IF NOT PrepareTempCustLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry,Cust,ApplyingDate,
        ApplyDocNo,TempOldCustLedgEntry1) // NC NOS-26 SPA
      THEN
        EXIT;

      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          IF SalesSetup."Check Application Date" AND
             (TempOldCustLedgEntry."Posting Date" > NewCVLedgEntryBuf."Posting Date")
          THEN
            ERROR(MustNotBeAfterErr,
              NewCVLedgEntryBuf."Posting Date",TempOldCustLedgEntry.TABLECAPTION,TempOldCustLedgEntry."Entry No.");
          IF SalesSetup."Check Application Period" THEN BEGIN
            IF CALCDATE('<CM>',TempOldCustLedgEntry."Posting Date") <> CALCDATE('<CM>',NewCVLedgEntryBuf."Posting Date") THEN
              IF (TempOldCustLedgEntry."Document Type" IN
                  [TempOldCustLedgEntry."Document Type"::" ",TempOldCustLedgEntry."Document Type"::Payment,
                   TempOldCustLedgEntry."Document Type"::Refund]) AND
                 NOT TempOldCustLedgEntry.Prepayment
              THEN
                ERROR(ApplnPrepmtOnlyErr);
          END;
          CheckCustPrepmtApplPostingDate(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry);
        END;

        IF Cust."Agreement Posting" = Cust."Agreement Posting"::Mandatory THEN
          IF TempOldCustLedgEntry."Agreement No." <> NewCVLedgEntryBuf."Agreement No." THEN
            ERROR(AgreementMustBeErr,NewCVLedgEntryBuf."Agreement No.",TempOldCustLedgEntry."Document No.");

        //NC S1893 > PCH
        IF GLSetup."Use Bus.Unit for Separ. Trans." THEN
          NewCVLedgEntryBuf.TESTFIELD("Business Unit Code",TempOldCustLedgEntry."Business Unit Code");
        //NC S1893 < PCH

        //NC TR266 > EB
        // Проверка на соответствие учетных групп между применяемыми операциями
        IF NOT SalesSetup."Appln. between Posting Groups" THEN BEGIN
          CustPostGroup1.GET(GenJnlLine."Posting Group");
          CustPostGroup2.GET(TempOldCustLedgEntry."Customer Posting Group");
          //TDRANCS-817 >
          IF CustPostGroup1.Code <> CustPostGroup2.Code THEN
            ERROR(Text55001,GenJnlLine."Posting Group",TempOldCustLedgEntry."Customer Posting Group");
          //TDRANCS-817 <
        END;
        //NC TR266 < EB

        TempOldCustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TempOldCustLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);
        OldCVLedgEntryBuf.CopyFromCustLedgEntry(TempOldCustLedgEntry);

        PostApply(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
          Cust."Block Payment Tolerance",AllApplied,AppliedAmount,PmtTolAmtToBeApplied);

        IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
          UpdateCalcInterest(OldCVLedgEntryBuf);
          UpdateCalcInterest2(OldCVLedgEntryBuf,NewCVLedgEntryBuf);
        END;

        TempOldCustLedgEntry.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
        OldCustLedgEntry := TempOldCustLedgEntry;
        OldCustLedgEntry."Applies-to ID" := '';
        OldCustLedgEntry."Amount to Apply" := 0;

        //NC OCPM01 > DP
        IF GLSetup."Use Application Postfix" THEN
          IF TempOldCustLedgEntry1.GET(TempOldCustLedgEntry."Entry No.") THEN
            OldCustLedgEntry."Document No." := TempOldCustLedgEntry1."Document No.";
        //NC OCPM01 < DP

        OldCustLedgEntry.MODIFY;

        IF NOT GLSetup."Enable Russian Accounting" AND
           (GLSetup."Unrealized VAT" OR
            (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment))
        THEN
          IF IsNotPayment(TempOldCustLedgEntry."Document Type") THEN BEGIN
            TempOldCustLedgEntry.RecalculateAmounts(
              NewCVLedgEntryBuf."Currency Code",TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
            CustUnrealizedVAT(
              GenJnlLine,
              TempOldCustLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"),0,0,0);
          END;

        IF GLSetup."Enable Russian Accounting" AND NOT AmtDiffDocToPrepayment AND
           (GLSetup."Unrealized VAT" OR
            (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment))
        THEN BEGIN
          IF TempOldCustLedgEntry."Prepayment Document No." <> TempOldCustLedgEntry."Document No." THEN BEGIN
            GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
            GenJnlLine."Document No." := OldCustLedgEntry."Prepayment Document No.";
          END;

          OldCustLedgEntry.CALCFIELDS(Amount,"Credit Amount","Debit Amount");
          GenJnlLine.Correction :=
            (OldCustLedgEntry.Amount > 0) AND (OldCustLedgEntry."Credit Amount" < 0) OR
            (OldCustLedgEntry.Amount < 0) AND (OldCustLedgEntry."Debit Amount" < 0);
          IF OldCustLedgEntry."Currency Code" = '' THEN
            CustUnrealizedVAT(GenJnlLine,OldCustLedgEntry,AppliedAmount,0,0,0)
          ELSE
            CustUnrealizedVAT(
              GenJnlLine,
              TempOldCustLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"),0,0,0);
        END;

        TempOldCustLedgEntry.DELETE;

        // Find the next old entry for application of the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldCustLedgEntry.GETFILTER(Positive) <> '' THEN
            IF TempOldCustLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldCustLedgEntry.SETRANGE(Positive);
              TempOldCustLedgEntry.FIND('-');
              TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldCustLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          ELSE
            IF NewCVLedgEntryBuf.Open THEN
              Completed := TempOldCustLedgEntry.NEXT = 0
            ELSE
              Completed := TRUE;
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF NOT NewCVLedgEntryBuf.Open THEN
        UpdateCalcInterest(NewCVLedgEntryBuf);

      IF GLSetup."Enable Russian Accounting" AND AmtDiffDocToPrepayment THEN
        EXIT;

      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF (IsNotPayment(NewCVLedgEntryBuf."Document Type") OR
           IsPrepayment(NewCVLedgEntryBuf."Document Type",NewCVLedgEntryBuf.Prepayment)) AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          NewCustLedgEntry.CopyFromCVLedgEntryBuffer(NewCVLedgEntryBuf);
          IF GLSetup."Enable Russian Accounting" THEN BEGIN
            IF GenJnlLine."Prepayment Status" <> GenJnlLine."Prepayment Status"::Set THEN
              CheckUnrealizedCust := TRUE;
            IF NewCustLedgEntry."Prepayment Document No." <> NewCustLedgEntry."Document No." THEN BEGIN
              GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
              GenJnlLine."Document No." := NewCustLedgEntry."Prepayment Document No.";
            END;
          END ELSE
            CheckUnrealizedCust := TRUE;
          UnrealizedCustLedgEntry := NewCustLedgEntry;
          UnrealizedCustLedgEntry.CALCFIELDS("Amount (LCY)","Original Amt. (LCY)");
          UnrealizedRemainingAmountCust := NewCustLedgEntry."Remaining Amount" - NewRemainingAmtBeforeAppln;
        END;

      //NC OCPM01 > DP
      DtldCVLedgEntryBuf."Document No." := SavedNewCVDocNo;
      //NC OCPM01 < DP
    END;

    PROCEDURE CustPostApplyCustLedgEntry@74(VAR GenJnlLinePostApply@1000 : Record 81;VAR CustLedgEntryPostApply@1001 : Record 21);
    VAR
      Cust@1002 : Record 18;
      CustPostingGr@1007 : Record 92;
      CustLedgEntry@1006 : Record 21;
      DtldCustLedgEntry@1003 : Record 379;
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
      GenJnlLine@1008 : Record 81;
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      CustLedgEntry.TRANSFERFIELDS(CustLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        "Source Currency Code" := CustLedgEntryPostApply."Currency Code";
        "Applies-to ID" := CustLedgEntryPostApply."Applies-to ID";

        GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
        GlobalGenJournalLine := GenJnlLinePostApply; // NC NOS-26 SPA

        GenJnlCheckLine.RunCheck(GenJnlLine);

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        Cust.GET(CustLedgEntry."Customer No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        END;
        CustPostingGr.GET("Posting Group");
        CustPostingGr.GetReceivablesAccount;

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        // Post the application
        CustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
        ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust);
        CustLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        CustLedgEntry.MODIFY;

        // Post the Dtld customer entry
        DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,FALSE);

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
        FinishPosting(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE PrepareTempCustLedgEntry@111(GenJnlLine@1000 : Record 81;VAR NewCVLedgEntryBuf@1015 : Record 382;VAR TempOldCustLedgEntry@1010 : TEMPORARY Record 21;Cust@1016 : Record 18;VAR ApplyingDate@1001 : Date;ApplyDocNo@1101495000 : Code[20];VAR TempOldCustLedgEntry1@1101495001 : TEMPORARY Record 21) : Boolean;
    VAR
      OldCustLedgEntry@1014 : Record 21;
      SalesSetup@1009 : Record 311;
      GenJnlApply@1008 : Codeunit 225;
      RemainingAmount@1002 : Decimal;
    BEGIN
      //NC NOS-26 SPA
      // Добавлены параметры функции:
      // -- ApplyDocNo [code]
      // -- TempOldCustLedgEntry1 [temporary record] "Cust. Ledger Entry"

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.");
        OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE(Open,TRUE);

        IF GLSetup."Enable Russian Accounting" THEN
          IF (GenJnlLine."Prepayment Status" <> 0) AND (GenJnlLine."Unrealized VAT Entry No." <> 0) THEN BEGIN
            OldCustLedgEntry.SETRANGE("Entry No.",GenJnlLine."Unrealized VAT Entry No.");
            GenJnlLine."Unrealized VAT Entry No." := 0;
          END;

        OldCustLedgEntry.FINDFIRST;
        OldCustLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldCustLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldCustLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
        TempOldCustLedgEntry := OldCustLedgEntry;

        //NC OCPM01 > DP
        IF GLSetup."Use Application Postfix" THEN
          BEGIN
            TempOldCustLedgEntry1.INIT;
            TempOldCustLedgEntry1 := TempOldCustLedgEntry;
            TempOldCustLedgEntry1.INSERT;
            TempOldCustLedgEntry."Document No." := ApplyDocNo;
          END;
        //NC OCPM01 < DP

        TempOldCustLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldCustLedgEntry.SETRANGE(Open,TRUE);
        OldCustLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT (Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") THEN
          OldCustLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);
        IF Cust."Agreement Posting" = Cust."Agreement Posting"::Mandatory THEN
          OldCustLedgEntry.SETRANGE("Agreement No.",GenJnlLine."Agreement No.");

        IF Cust."Application Method" = Cust."Application Method"::"Apply to Oldest" THEN
          OldCustLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        // Check Cust Ledger Entry and add to Temp.
        SalesSetup.GET;
        IF SalesSetup."Appln. between Currencies" = SalesSetup."Appln. between Currencies"::None THEN
          OldCustLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldCustLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,FALSE)
            THEN BEGIN
              IF (OldCustLedgEntry."Posting Date" > ApplyingDate) AND (OldCustLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldCustLedgEntry."Posting Date";
              TempOldCustLedgEntry := OldCustLedgEntry;

                //NC OCPM01 > DP
                IF GLSetup."Use Application Postfix" THEN
                  BEGIN
                    TempOldCustLedgEntry1.INIT;
                    TempOldCustLedgEntry1 := TempOldCustLedgEntry;
                    TempOldCustLedgEntry1.INSERT;
                    TempOldCustLedgEntry."Document No." := ApplyDocNo;
                  END;
                //NC OCPM01 < DP

              TempOldCustLedgEntry.INSERT;
            END;
          UNTIL OldCustLedgEntry.NEXT = 0;

        IF GLSetup."Enable Russian Accounting" AND NewCVLedgEntryBuf.Prepayment AND GenJnlLine.Correction THEN
          ERROR(PrepmtCorrectionErr);

        TempOldCustLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF GLSetup."Enable Russian Accounting" AND SalesSetup."Check Application Date" AND (TempOldCustLedgEntry.COUNT > 0) THEN BEGIN
          TempOldCustLedgEntry.SETRANGE(Positive,NOT (NewCVLedgEntryBuf."Remaining Amount" > 0));
          IF TempOldCustLedgEntry.COUNT > 0 THEN
            ERROR(MultipleEntriesApplnErr);
          TempOldCustLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);
        END;

        IF TempOldCustLedgEntry.FIND('-') THEN BEGIN
          RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldCustLedgEntry.SETRANGE(Positive);
          TempOldCustLedgEntry.FIND('-');
          REPEAT
            TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
            TempOldCustLedgEntry.RecalculateAmounts(
              TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            IF PaymentToleranceMgt.CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,FALSE,FALSE) THEN
              TempOldCustLedgEntry."Remaining Amount" -= TempOldCustLedgEntry."Remaining Pmt. Disc. Possible";
            RemainingAmount += TempOldCustLedgEntry."Remaining Amount";
          UNTIL TempOldCustLedgEntry.NEXT = 0;
          TempOldCustLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
        END ELSE
          TempOldCustLedgEntry.SETRANGE(Positive);

        EXIT(TempOldCustLedgEntry.FIND('-'));
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntries@46(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1002 : Record 92;LedgEntryInserted@1012 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1011 : TEMPORARY Record 49;
      DtldCustLedgEntry@1005 : Record 379;
      CorrDtldCVLedgEntryBuf@1210002 : TEMPORARY Record 383;
      AdjAmount@1003 : ARRAY [4] OF Decimal;
      DtldCustLedgEntryNoOffset@1006 : Integer;
      SaveEntryNo@1014 : Integer;
    BEGIN
      IF GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Customer THEN
        EXIT;

      IF DtldCustLedgEntry.FINDLAST THEN
        DtldCustLedgEntryNoOffset := DtldCustLedgEntry."Entry No."
      ELSE
        DtldCustLedgEntryNoOffset := 0;

      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        SummarizeGainLoss(DtldCVLedgEntryBuf,CorrDtldCVLedgEntryBuf,FALSE);
        FinVoidedCheck := IsCheckFinVoided(GenJnlLine,DtldCVLedgEntryBuf);
      END;
      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
        IF LedgEntryInserted THEN BEGIN
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        END;
        REPEAT
          InsertDtldCustLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldCustLedgEntry,DtldCustLedgEntryNoOffset);

          IF GLSetup."Enable Russian Accounting" THEN BEGIN
            GenJnlLine."Posting Date" := DtldCVLedgEntryBuf."Posting Date";
            GenJnlLine."Document Type" := DtldCVLedgEntryBuf."Document Type";
            GenJnlLine."Document No." := DtldCVLedgEntryBuf."Document No.";
            GenJnlLine."Not G/L Post" := DtldCVLedgEntryBuf."Not G/L Post";  // NC MIO-28 AES
          END;

          UpdateTotalAmounts(
            TempInvPostBuf,GenJnlLine."Dimension Set ID",
            DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount");

          IF GLSetup."Enable Russian Accounting" THEN
            UpdateGainLoss(DtldCVLedgEntryBuf,CorrDtldCVLedgEntryBuf);

          // Post automatic entries.
          IF ((DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
              (DtldCVLedgEntryBuf."VAT Amount (LCY)" <> 0)) OR
             (GLSetup."Enable Russian Accounting" AND
              (DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::"Initial Entry")) OR
             ((AddCurrencyCode <> '') AND (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
          THEN BEGIN
            IF GLSetup."Enable Russian Accounting" THEN
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":
                  InsertCustGLEntry(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr);
                DtldCVLedgEntryBuf."Entry Type"::Application:
                  PostCustBackPrepayment(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr);
              END;
            PostDtldCustLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,AdjAmount);
          END;
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;
      END;

      IF NOT GLSetup."Enable Russian Accounting" THEN
        CreateGLEntriesForTotalAmounts(
          GenJnlLine,TempInvPostBuf,AdjAmount,SaveEntryNo,CustPostingGr.GetReceivablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := NOT DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntry@82(GenJnlLine@1005 : Record 81;DtldCVLedgEntryBuf@1003 : Record 383;CustPostingGr@1002 : Record 92;VAR AdjAmount@1001 : ARRAY [4] OF Decimal);
    VAR
      AccNo@1006 : Code[20];
      BalAccNo@1210000 : Code[20];
    BEGIN
      AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,0,FALSE,BalAccNo);
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,BalAccNo,AdjAmount,FALSE);
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntryUnapply@114(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1000 : Record 92;OriginalTransactionNo@1006 : Integer);
    VAR
      SavedGenJnlLine@1210001 : Record 81;
      AdjAmount@1004 : ARRAY [4] OF Decimal;
      AccNo@1002 : Code[20];
      BalAccNo@1210000 : Code[20];
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) AND
         ((AddCurrencyCode = '') OR (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        SavedGenJnlLine := GenJnlLine;
        GenJnlLine."Document Type" := DtldCVLedgEntryBuf."Document Type";
        GenJnlLine."Document No." := DtldCVLedgEntryBuf."Document No.";
      END;
      AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,OriginalTransactionNo,TRUE,BalAccNo);
      DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Sale;
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,BalAccNo,AdjAmount,TRUE);
      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        IF DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::Application THEN
          PostCustBackPrepayment(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr);
        GenJnlLine := SavedGenJnlLine;
      END;
    END;

    LOCAL PROCEDURE GetDtldCustLedgEntryAccNo@147(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1000 : Record 92;OriginalTransactionNo@1006 : Integer;Unapply@1012 : Boolean;VAR BalAccNo@1210000 : Code[20]) : Code[20];
    VAR
      GenPostingSetup@1005 : Record 252;
      Currency@1009 : Record 4;
      AmountCondition@1002 : Boolean;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
        IF GLSetup."Enable Russian Accounting" THEN
          BalAccNo := CustPostingGr.GetPrepaymentAccount(Prepayment);
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain":
            BEGIN
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              EXIT(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            END;
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            BEGIN
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              IF "Prepmt. Diff. in TA" THEN
                EXIT(Currency.GetSalesPrepmtDiffAccount(DtldCVLedgEntryBuf));
              IF (NOT "Prepmt. Diff.") AND
                 (NOT "Prepmt. Diff. in TA")
              THEN
                EXIT(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            END;
          "Entry Type"::"Payment Discount":
            EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
          "Entry Type"::"Payment Discount (VAT Excl.)":
            BEGIN
              TESTFIELD("Gen. Prod. Posting Group");
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Appln. Rounding":
            EXIT(CustPostingGr.GetApplRoundingAccount(AmountCondition));
          "Entry Type"::"Correction of Remaining Amount":
            EXIT(CustPostingGr.GetRoundingAccount(AmountCondition));
          "Entry Type"::"Payment Discount Tolerance":
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(CustPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance":
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(CustPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance (VAT Excl.)":
            BEGIN
              TESTFIELD("Gen. Prod. Posting Group");
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Payment Tolerance Posting" OF
                GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtToleranceAccount(AmountCondition));
                GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtToleranceAccount(AmountCondition));
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            IF Unapply THEN
              PostDtldCustVATAdjustment(GenJnlLine,DtldCVLedgEntryBuf,OriginalTransactionNo);
          ELSE
            FIELDERROR("Entry Type");
        END;
      END;
    END;

    LOCAL PROCEDURE CustUnrealizedVAT@16(GenJnlLine@1015 : Record 81;VAR CustLedgEntry2@1000 : Record 21;SettledAmount@1001 : Decimal;VATEntryNo@1470001 : Integer;UnrealVATPart@1470000 : Decimal;VATAllocationLineNo@1210001 : Integer);
    VAR
      VATEntry2@1002 : Record 254;
      TaxJurisdiction@1014 : Record 320;
      VATPostingSetup@1017 : Record 325;
      VATSettlementMgt@1210000 : Codeunit 12411;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountLast@1012 : Decimal;
      TotalUnrealVATAmountFirst@1013 : Decimal;
      SalesVATAccount@1009 : Code[20];
      SalesVATUnrealAccount@1010 : Code[20];
      LastConnectionNo@1011 : Integer;
    BEGIN
      IF GLSetup."Enable Russian Accounting" AND (SettledAmount = 0) THEN
        EXIT;

      PaidAmount := CustLedgEntry2."Amount (LCY)" - CustLedgEntry2."Remaining Amt. (LCY)";
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
      IF VATEntry2.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"]
          THEN
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"]
          THEN
            TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;

      IF GLSetup."Enable Russian Accounting" THEN
        IF VATEntryNo <> 0 THEN BEGIN
          IF GenJnlLine."Prepmt. Diff." THEN
            VATEntry2.RESET;
          VATEntry2.SETRANGE("Entry No.",VATEntryNo);
          IF VATEntry2.FIND('-') THEN
            TotalUnrealVATAmountFirst := VATEntry2."Remaining Unrealized Amount"
          ELSE
            VATEntry2.SETRANGE("Entry No.");
        END;

      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT(GenJnlLine,VATPostingSetup);
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          IF NOT GLSetup."Enable Russian Accounting" THEN
            VATPart :=
              VATEntry2.GetUnrealizedVATPart(
                ROUND(SettledAmount / CustLedgEntry2.GetOriginalCurrencyFactor),
                PaidAmount,
                CustLedgEntry2."Original Amt. (LCY)",
                TotalUnrealVATAmountFirst,
                TotalUnrealVATAmountLast)
          ELSE
            IF NOT (VATSettlementMgt.VATIsPostponed(VATEntry2,GenJnlLine."VAT Settlement Part",GenJnlLine."Posting Date") OR
                    VATSettlementMgt.PartiallyRealized(VATEntry2."Entry No.",GenJnlLine."VAT Settlement Part"))
            THEN BEGIN
              IF UnrealVATPart <> 0 THEN
                VATPart := UnrealVATPart
              ELSE
                VATPart :=
                  VATEntry2.GetUnrealizedVATPart(
                    ROUND(SettledAmount / CustLedgEntry2.GetOriginalCurrencyFactor),
                    PaidAmount,
                    CustLedgEntry2."Original Amt. (LCY)",
                    TotalUnrealVATAmountFirst,
                    TotalUnrealVATAmountLast);
            END;

          IF VATPart > 0 THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                BEGIN
                  SalesVATAccount := VATPostingSetup.GetSalesAccount(FALSE);
                  SalesVATUnrealAccount := VATPostingSetup.GetSalesAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  SalesVATAccount := TaxJurisdiction.GetSalesAccount(FALSE);
                  SalesVATUnrealAccount := TaxJurisdiction.GetSalesAccount(TRUE);
                END;
            END;

            IF VATPart = 1 THEN BEGIN
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
            END ELSE BEGIN
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart,GLSetup."Amount Rounding Precision");
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart,GLSetup."Amount Rounding Precision");
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              IF GLSetup."Enable Russian Accounting" THEN BEGIN
                IF VATAllocationLineNo <> 0 THEN
                  VATBase := ROUND(VATAmount * GenJnlLine."VAT Base Amount" / GenJnlLine."VAT Amount")
                ELSE
                  AdjustVATAmount(VATEntry2,VATPart,VATBase,VATAmount,VATBaseAddCurr,VATAmountAddCurr,TRUE);
              END;
            END;

            IF GLSetup."Enable Russian Accounting" THEN BEGIN
              IF VATAllocationLineNo <> 0 THEN
                SalesVATAccount := GenJnlLine."Account No.";

              IF VATEntry2.Prepayment THEN BEGIN
                GenJnlLine."Document Type" := VATEntry2."Document Type";
                GenJnlLine."Document No." := VATEntry2."Document No.";
              END;
              IF VATAllocationLineNo <> 0 THEN
                GenJnlLine.Description := CustLedgEntry2.Description;
            END;
            InitGLEntryVAT(
              GenJnlLine,SalesVATUnrealAccount,SalesVATAccount,-VATAmount,-VATAmountAddCurr,FALSE,
              VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
            InitGLEntryVATCopy(
              GenJnlLine,SalesVATAccount,SalesVATUnrealAccount,VATAmount,VATAmountAddCurr,VATEntry2,
              VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");

            PostUnrealVATEntry(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr);
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT(GenJnlLine,VATPostingSetup);
      END;
    END;

    LOCAL PROCEDURE ApplyVendLedgEntry@4(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;Vend@1015 : Record 23;VendPostingGr@1170000001 : Record 93);
    VAR
      OldVendLedgEntry@1005 : Record 25;
      OldCVLedgEntryBuf@1006 : Record 382;
      NewVendLedgEntry@1008 : Record 25;
      NewCVLedgEntryBuf2@1019 : Record 382;
      TempOldVendLedgEntry@1003 : TEMPORARY Record 25;
      PurchSetup@1210000 : Record 312;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1024 : Boolean;
      UnrealVATDate@1210001 : Date;
      SavedPostingDate@1210003 : Date;
      VendInvPostDate@1210004 : Date;
      VendInvRcvdDate@1210005 : Date;
      "NCV>"@1101495005 : Integer;
      VendPostGroup1@1101495004 : Record 93;
      VendPostGroup2@1101495003 : Record 93;
      ApplyDocNo@1101495002 : Code[20];
      TempOldVendLedgEntry1@1101495001 : TEMPORARY Record 25;
    BEGIN
      IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
        EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
         ((Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") AND
          GenJnlLine."Allow Application")
      THEN
        EXIT;

      //NC NCS-978 > DP
      InsertFX_RevalTypeDimValue;
      //NC NCS-978 < DP

      PurchSetup.GET;
      IF (Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") AND
         PurchSetup."Check Application Date"
      THEN
        ERROR(CheckApplnDateVendErr,Vend."No.");

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";
      IF GLSetup."Enable Russian Accounting" THEN
        SavedPostingDate := GenJnlLine."Posting Date";

      //NC OCPM01 > DP
      SavedDocNo := GenJnlLine."Document No.";
      SavedNewCVDocNo := NewCVLedgEntryBuf."Document No.";
      IF GLSetup."Use Application Postfix" THEN BEGIN
        IF STRPOS(GenJnlLine."Document No.",'.AP') = 0 THEN
          GenJnlLine."Document No." := COPYSTR(GenJnlLine."Document No.", 1, MAXSTRLEN(GenJnlLine."Document No.")-3) + '.AP';
        ApplyDocNo := GenJnlLine."Document No.";
        NewCVLedgEntryBuf."Document No." := ApplyDocNo;
      END;
      //NC OCPM01 < DP

      IF NOT PrepareTempVendLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldVendLedgEntry,Vend,ApplyingDate,
        ApplyDocNo,TempOldVendLedgEntry1) // NC NOS-26 SPA
      THEN
        EXIT;

      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          CheckVendPrepmtApplPostingDate(GenJnlLine,NewCVLedgEntryBuf,TempOldVendLedgEntry,
            Vend); // NC NOS-26 SPA

          //NC TR266 > EB
          // Проверка на соответствие учетных групп между применяемыми операциями
          IF NOT PurchSetup."Appln. between Posting Groups" THEN BEGIN
            VendPostGroup1.GET(GenJnlLine."Posting Group");
            VendPostGroup2.GET(TempOldVendLedgEntry."Vendor Posting Group");
            // TDRANCS-817>
            IF VendPostGroup1.Code <> VendPostGroup2.Code THEN
              ERROR(Text55001,GenJnlLine."Posting Group",TempOldVendLedgEntry."Vendor Posting Group");
            // TDRANCS-817<
          END;
          //NC TR266 < EB

          IF VendPostingGr."VAT Invoice Mandatory" THEN
            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice THEN
              IF Vend."Vendor Type" = Vend."Vendor Type"::Vendor THEN
                IF NOT NewVendLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN BEGIN // autoapply
                  GenJnlLine.TESTFIELD("Vendor VAT Invoice No.");
                  GenJnlLine.TESTFIELD("Vendor VAT Invoice Date");
                  GenJnlLine.TESTFIELD("Vendor VAT Invoice Rcvd Date");
                  VendInvPostDate := GenJnlLine."Vendor VAT Invoice Date";
                  VendInvRcvdDate := GenJnlLine."Vendor VAT Invoice Rcvd Date";
                END ELSE BEGIN
                  NewVendLedgEntry.TESTFIELD("Vendor VAT Invoice No.");
                  NewVendLedgEntry.TESTFIELD("Vendor VAT Invoice Date");
                  NewVendLedgEntry.TESTFIELD("Vendor VAT Invoice Rcvd Date");
                  VendInvPostDate := NewVendLedgEntry."Vendor VAT Invoice Date";
                  VendInvRcvdDate := NewVendLedgEntry."Vendor VAT Invoice Rcvd Date";
                END
            ELSE
              IF OldVendLedgEntry."Document Type" = OldVendLedgEntry."Document Type"::Invoice THEN
                IF Vend."Vendor Type" = Vend."Vendor Type"::Vendor THEN BEGIN
                  OldVendLedgEntry.TESTFIELD("Vendor VAT Invoice No.");
                  OldVendLedgEntry.TESTFIELD("Vendor VAT Invoice Date");
                  OldVendLedgEntry.TESTFIELD("Vendor VAT Invoice Rcvd Date");
                  VendInvPostDate := OldVendLedgEntry."Vendor VAT Invoice Date";
                  VendInvRcvdDate := OldVendLedgEntry."Vendor VAT Invoice Rcvd Date";
                END;
          UnrealVATDate := GetLastDate(ApplyingDate,VendInvPostDate,VendInvRcvdDate);
        END;

        IF Vend."Agreement Posting" = Vend."Agreement Posting"::Mandatory THEN
          IF TempOldVendLedgEntry."Agreement No." <> NewCVLedgEntryBuf."Agreement No." THEN
            ERROR(AgreementMustBeErr,NewCVLedgEntryBuf."Agreement No.",TempOldVendLedgEntry."Document No.");

        //NC S1893 > PCH
        IF GLSetup."Use Bus.Unit for Separ. Trans." THEN
          NewCVLedgEntryBuf.TESTFIELD("Business Unit Code",TempOldVendLedgEntry."Business Unit Code");
        //NC S1893 < PCH

        TempOldVendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        OldCVLedgEntryBuf.CopyFromVendLedgEntry(TempOldVendLedgEntry);
        TempOldVendLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);

        PostApply(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
          Vend."Block Payment Tolerance",AllApplied,AppliedAmount,PmtTolAmtToBeApplied);

        // Update the Old Entry
        TempOldVendLedgEntry.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
        OldVendLedgEntry := TempOldVendLedgEntry;
        OldVendLedgEntry."Applies-to ID" := '';
        OldVendLedgEntry."Amount to Apply" := 0;
        //NC OCPM01 > DP
        IF GLSetup."Use Application Postfix" THEN
          IF TempOldVendLedgEntry1.GET(TempOldVendLedgEntry."Entry No.") THEN
            OldVendLedgEntry."Document No." := TempOldVendLedgEntry1."Document No.";
        //NC OCPM01 < DP
        OldVendLedgEntry.MODIFY;

        IF NOT GLSetup."Enable Russian Accounting" AND
           (GLSetup."Unrealized VAT" OR (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment))
        THEN
          IF IsNotPayment(TempOldVendLedgEntry."Document Type") THEN BEGIN
            TempOldVendLedgEntry.RecalculateAmounts(
              NewCVLedgEntryBuf."Currency Code",TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
            VendUnrealizedVAT(
              GenJnlLine,
              TempOldVendLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"),0,0,0,0);
          END;

        IF GLSetup."Enable Russian Accounting" AND
           (GLSetup."Unrealized VAT" OR (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment))
        THEN BEGIN
          GenJnlLine."Posting Date" := UnrealVATDate;
          GenJnlCheckLine.CheckDateAllowed(GenJnlLine);
          TempOldVendLedgEntry.CALCFIELDS(Amount,"Credit Amount","Debit Amount");
          GenJnlLine.Correction :=
            ((TempOldVendLedgEntry.Amount > 0) AND (TempOldVendLedgEntry."Credit Amount" < 0)) OR
            ((TempOldVendLedgEntry.Amount < 0) AND (TempOldVendLedgEntry."Debit Amount" < 0));
          IF TempOldVendLedgEntry."Currency Code" = '' THEN
            VendUnrealizedVAT(GenJnlLine,TempOldVendLedgEntry,AppliedAmount,0,0,0,0)
          ELSE
            VendUnrealizedVAT(
              GenJnlLine,
              TempOldVendLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"),0,0,0,0);
          GenJnlLine."Posting Date" := ApplyingDate;
        END;

        TempOldVendLedgEntry.DELETE;

        // Find the next old entry to apply to the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldVendLedgEntry.GETFILTER(Positive) <> '' THEN
            IF TempOldVendLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldVendLedgEntry.SETRANGE(Positive);
              TempOldVendLedgEntry.FIND('-');
              TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldVendLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          ELSE
            IF NewCVLedgEntryBuf.Open THEN
              Completed := TempOldVendLedgEntry.NEXT = 0
            ELSE
              Completed := TRUE;
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF (IsNotPayment(NewCVLedgEntryBuf."Document Type") OR
           IsPrepayment(NewCVLedgEntryBuf."Document Type",NewCVLedgEntryBuf.Prepayment)) AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0) OR
           (IsVATAgentVATPayment(GenJnlLine))
        THEN BEGIN
          IF GLSetup."Enable Russian Accounting" THEN BEGIN
            GenJnlLine."Posting Date" := UnrealVATDate;
            GenJnlCheckLine.CheckDateAllowed(GenJnlLine);
          END;
          NewVendLedgEntry.CopyFromCVLedgEntryBuffer(NewCVLedgEntryBuf);
          CheckUnrealizedVend := TRUE;
          UnrealizedVendLedgEntry := NewVendLedgEntry;
          UnrealizedVendLedgEntry.CALCFIELDS("Amount (LCY)","Original Amt. (LCY)");
          UnrealizedRemainingAmountVend := -(NewRemainingAmtBeforeAppln - NewVendLedgEntry."Remaining Amount");
        END;
      IF GLSetup."Enable Russian Accounting" THEN
        GenJnlLine."Posting Date" := SavedPostingDate;

      //NC OCPM01 > DP
      GenJnlLine."Document No." := SavedDocNo;
      NewCVLedgEntryBuf."Document No." := SavedNewCVDocNo;
      //NC OCPM01 < DP
    END;

    PROCEDURE VendPostApplyVendLedgEntry@66(VAR GenJnlLinePostApply@1000 : Record 81;VAR VendLedgEntryPostApply@1001 : Record 25);
    VAR
      Vend@1002 : Record 23;
      VendPostingGr@1007 : Record 93;
      VendLedgEntry@1006 : Record 25;
      DtldVendLedgEntry@1003 : Record 380;
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
      GenJnlLine@1008 : Record 81;
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      VendLedgEntry.TRANSFERFIELDS(VendLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        "Source Currency Code" := VendLedgEntryPostApply."Currency Code";
        "Applies-to ID" := VendLedgEntryPostApply."Applies-to ID";

        GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
        GlobalGenJournalLine := GenJnlLinePostApply; // NC NOS-26 SPA

        GenJnlCheckLine.RunCheck(GenJnlLine);

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        Vend.GET(VendLedgEntry."Vendor No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        VendPostingGr.GetPayablesAccount;

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        // Post the application
        VendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
        ApplyVendLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend,VendPostingGr);
        VendLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        VendLedgEntry.MODIFY(TRUE);

        // Collect VAT Amounts for possible correction
        GetVATAmountsToRealize(TempDtldCVLedgEntryBuf);

        // Post Dtld vendor entry
        DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,FALSE);

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);

        FinishPosting(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE PrepareTempVendLedgEntry@119(GenJnlLine@1004 : Record 81;VAR NewCVLedgEntryBuf@1003 : Record 382;VAR TempOldVendLedgEntry@1002 : TEMPORARY Record 25;Vend@1001 : Record 23;VAR ApplyingDate@1000 : Date;ApplyDocNo@1101495001 : Code[20];VAR TempOldVendLedgEntry1@1101495002 : TEMPORARY Record 25) : Boolean;
    VAR
      OldVendLedgEntry@1018 : Record 25;
      PurchSetup@1013 : Record 312;
      GenJnlApply@1012 : Codeunit 225;
      RemainingAmount@1009 : Decimal;
      locVendor@1101495000 : Record 23;
    BEGIN
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Document No.");
        OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        OldVendLedgEntry.FINDFIRST;
        OldVendLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldVendLedgEntry."Posting Date";

        //NC OAM43 > DP
        GenJnlApply.IsRespEmployee(NewCVLedgEntryBuf."CV No.");
        //NC OAM43 < DP
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
        TempOldVendLedgEntry := OldVendLedgEntry;
        //NC OCPM01 > DP
        IF GLSetup."Use Application Postfix" THEN BEGIN
          TempOldVendLedgEntry1.INIT;
          TempOldVendLedgEntry1 := TempOldVendLedgEntry;
          TempOldVendLedgEntry1.INSERT;
          TempOldVendLedgEntry."Document No." := ApplyDocNo;
        END;
        //NC OCPM01 < DP
        TempOldVendLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        OldVendLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT (Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") THEN
          OldVendLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);
        IF Vend."Agreement Posting" = Vend."Agreement Posting"::Mandatory THEN
          OldVendLedgEntry.SETRANGE("Agreement No.",GenJnlLine."Agreement No.");
        IF Vend."Application Method" = Vend."Application Method"::"Apply to Oldest" THEN
          OldVendLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        // Check and Move Ledger Entries to Temp
        PurchSetup.GET;

        //NC OAM43 > DP
        locVendor.GET(NewCVLedgEntryBuf."CV No.");
        IF locVendor."Vendor Type" = locVendor."Vendor Type"::"Resp. Employee" THEN BEGIN
          IF NOT PurchSetup."Appl. Currency Resp. Person" AND
            (PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None)
          THEN
            OldVendLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        END ELSE
        //NC OAM43 < DP
        IF PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None THEN
          OldVendLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldVendLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            //NC OAM43 > DP
            GenJnlApply.IsRespEmployee(NewCVLedgEntryBuf."CV No.");
            //NC OAM43 < DP

            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,FALSE)
            THEN BEGIN
              IF (OldVendLedgEntry."Posting Date" > ApplyingDate) AND (OldVendLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldVendLedgEntry."Posting Date";
              TempOldVendLedgEntry := OldVendLedgEntry;

              //NC OCPM01 > DP
              IF GLSetup."Use Application Postfix" THEN BEGIN
                TempOldVendLedgEntry1.INIT;
                TempOldVendLedgEntry1 := TempOldVendLedgEntry;
                TempOldVendLedgEntry1.INSERT;
                TempOldVendLedgEntry."Document No." := ApplyDocNo;
              END;
              //NC OCPM01 < DP
              TempOldVendLedgEntry.INSERT;
            END;
          UNTIL OldVendLedgEntry.NEXT = 0;

        TempOldVendLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF GLSetup."Enable Russian Accounting" THEN
          IF PurchSetup."Check Application Date" AND (TempOldVendLedgEntry.COUNT > 0) THEN BEGIN
            TempOldVendLedgEntry.SETRANGE(Positive ,NOT (NewCVLedgEntryBuf."Remaining Amount" > 0));
            IF TempOldVendLedgEntry.COUNT > 0 THEN
              ERROR(MultipleEntriesApplnErr);
            TempOldVendLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);
          END;

        IF TempOldVendLedgEntry.FIND('-') THEN BEGIN
          RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldVendLedgEntry.SETRANGE(Positive);
          TempOldVendLedgEntry.FIND('-');
          REPEAT
            TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
            TempOldVendLedgEntry.RecalculateAmounts(
              TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            IF PaymentToleranceMgt.CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,FALSE,FALSE) THEN
              TempOldVendLedgEntry."Remaining Amount" -= TempOldVendLedgEntry."Remaining Pmt. Disc. Possible";
            RemainingAmount += TempOldVendLedgEntry."Remaining Amount";
          UNTIL TempOldVendLedgEntry.NEXT = 0;
          TempOldVendLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
        END ELSE
          TempOldVendLedgEntry.SETRANGE(Positive);
        EXIT(TempOldVendLedgEntry.FIND('-'));
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntries@32(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;VendPostingGr@1002 : Record 93;LedgEntryInserted@1011 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1007 : TEMPORARY Record 49;
      DtldVendLedgEntry@1004 : Record 380;
      CorrDtldCVLedgEntryBuf@1210004 : TEMPORARY Record 383;
      AdjAmount@1012 : ARRAY [4] OF Decimal;
      DtldVendLedgEntryNoOffset@1005 : Integer;
      SaveEntryNo@1013 : Integer;
    BEGIN
      IF GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Vendor THEN
        EXIT;

      IF DtldVendLedgEntry.FINDLAST THEN
        DtldVendLedgEntryNoOffset := DtldVendLedgEntry."Entry No."
      ELSE
        DtldVendLedgEntryNoOffset := 0;

      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        SummarizeGainLoss(DtldCVLedgEntryBuf,CorrDtldCVLedgEntryBuf,FALSE);
        FinVoidedCheck := IsCheckFinVoided(GenJnlLine,DtldCVLedgEntryBuf);
      END;

      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
        IF LedgEntryInserted THEN BEGIN
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        END;
        REPEAT
          IF NOT VendPostingGr."Skip Posting" THEN
            InsertDtldVendLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldVendLedgEntry,DtldVendLedgEntryNoOffset);

          IF GLSetup."Enable Russian Accounting" THEN BEGIN
            GenJnlLine."Document Type" := DtldCVLedgEntryBuf."Document Type";
            GenJnlLine."Document No." := DtldCVLedgEntryBuf."Document No.";
            GenJnlLine."Posting Date" := DtldCVLedgEntryBuf."Posting Date";
            GenJnlLine."Not G/L Post" := DtldCVLedgEntryBuf."Not G/L Post";  // NC MIO-28 AES
          END;

          UpdateTotalAmounts(
            TempInvPostBuf,GenJnlLine."Dimension Set ID",
            DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount");

          IF GLSetup."Enable Russian Accounting" THEN
            UpdateGainLoss(DtldCVLedgEntryBuf,CorrDtldCVLedgEntryBuf);

          // Post automatic entries.
          IF ((DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
              (DtldCVLedgEntryBuf."VAT Amount (LCY)" <> 0)) OR
             (GLSetup."Enable Russian Accounting" AND
              (DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::"Initial Entry")) OR
             ((AddCurrencyCode <> '') AND (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
          THEN BEGIN
            IF GLSetup."Enable Russian Accounting" THEN
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":
                  InsertVendGLEntry(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr);
                DtldCVLedgEntryBuf."Entry Type"::Application:
                  PostVendBackPrepayment(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,FALSE);
              END;
            PostDtldVendLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,AdjAmount);
          END;
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;
      END;

      IF NOT GLSetup."Enable Russian Accounting" THEN
        CreateGLEntriesForTotalAmounts(
          GenJnlLine,TempInvPostBuf,AdjAmount,SaveEntryNo,VendPostingGr.GetPayablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := NOT DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntry@81(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VendPostingGr@1006 : Record 93;VAR AdjAmount@1003 : ARRAY [4] OF Decimal);
    VAR
      AccNo@1005 : Code[20];
      BalAccNo@1210000 : Code[20];
    BEGIN
      AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,0,FALSE,BalAccNo);
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,BalAccNo,AdjAmount,FALSE);
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntryUnapply@69(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;VendPostingGr@1000 : Record 93;OriginalTransactionNo@1006 : Integer);
    VAR
      SavedGenJnlLine@1210001 : Record 81;
      AccNo@1002 : Code[20];
      AdjAmount@1003 : ARRAY [4] OF Decimal;
      BalAccNo@1210000 : Code[20];
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) AND
         ((AddCurrencyCode = '') OR (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        SavedGenJnlLine := GenJnlLine;
        GenJnlLine."Document Type" := DtldCVLedgEntryBuf."Document Type";
        GenJnlLine."Document No." := DtldCVLedgEntryBuf."Document No.";
      END;
      AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,OriginalTransactionNo,TRUE,BalAccNo);
      DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Purchase;
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,BalAccNo,AdjAmount,TRUE);
      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        IF DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::Application THEN
          PostVendBackPrepayment(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,TRUE);
        GenJnlLine := SavedGenJnlLine;
      END;
    END;

    LOCAL PROCEDURE GetDtldVendLedgEntryAccNo@56(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VendPostingGr@1006 : Record 93;OriginalTransactionNo@1003 : Integer;Unapply@1001 : Boolean;VAR BalAccNo@1210000 : Code[20]) : Code[20];
    VAR
      Currency@1008 : Record 4;
      GenPostingSetup@1007 : Record 252;
      AmountCondition@1004 : Boolean;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
        IF GLSetup."Enable Russian Accounting" THEN
          BalAccNo := VendPostingGr.GetPrepaymentAccount(Prepayment);
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain":
            BEGIN
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              EXIT(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            END;
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            BEGIN
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              IF "Prepmt. Diff. in TA" THEN
                EXIT(Currency.GetPurchPrepmtDiffAccount(DtldCVLedgEntryBuf));
              IF (NOT "Prepmt. Diff.") AND
                 (NOT "Prepmt. Diff. in TA")
              THEN
                EXIT(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            END;
          "Entry Type"::"Payment Discount":
            EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
          "Entry Type"::"Payment Discount (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Appln. Rounding":
            EXIT(VendPostingGr.GetApplRoundingAccount(AmountCondition));
          "Entry Type"::"Correction of Remaining Amount":
            EXIT(VendPostingGr.GetRoundingAccount(AmountCondition));
          "Entry Type"::"Payment Discount Tolerance":
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(VendPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance":
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(VendPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Payment Tolerance Posting" OF
                GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtToleranceAccount(AmountCondition));
                GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtToleranceAccount(AmountCondition));
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            IF Unapply THEN
              PostDtldVendVATAdjustment(GenJnlLine,DtldCVLedgEntryBuf,OriginalTransactionNo);
          ELSE
            FIELDERROR("Entry Type");
        END;
      END;
    END;

    LOCAL PROCEDURE PostDtldCVLedgEntry@15(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;AccNo@1002 : Code[20];BalAccNo@1210002 : Code[20];VAR AdjAmount@1004 : ARRAY [4] OF Decimal;Unapply@1005 : Boolean);
    VAR
      Currency@1210000 : Record 4;
      GLEntry@1210001 : Record 17;
    BEGIN
      WITH DtldCVLedgEntryBuf DO
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain":
            BEGIN
              IF GLSetup."Currency Adjmt with Correction" THEN
                GenJnlLine.Correction := "Amount (LCY)" < 0;

              IF "Entry Type" = "Entry Type"::"Unrealized Loss" THEN
                //NC TR269 > EB
                InsertNegDim(GenJnlLine)
                //NC TR269 < EB
              ELSE
                //NC TR269 > EB
                InsertPosDim(GenJnlLine);
                //NC TR269 < EB
              IF GLSetup."Enable Russian Accounting" THEN
                //NC NOS-26 > SPA
                // функция разбита на составляющие : InitGLEntry и InsertRUGLEntry
                {
                CreateGLEntryRU(GenJnlLine,AccNo,-"Amount (LCY)",0,"Currency Code" = AddCurrencyCode,BalAccNo,FALSE,TRUE,FALSE)
                }
                BEGIN
                  InitGLEntry(GenJnlLine,GLEntry,AccNo,-"Amount (LCY)",
                    //NC OAM44 > DP
                    //0,"Currency Code" = AddCurrencyCode,
                    0,("Currency Code" = AddCurrencyCode) AND NOT GLSetup."Calc. FX Add. Curr. Amount",
                    //NC OAM44 > DP
                    TRUE);

                  //NC TR269 > EB
                  GenJnlLineShortCutsModify(GenJnlLine);
                  //NC TR269 < EB
                  //NC TR237 > EB
                  GLEntry."Not Consolidate" := "Not Consolidate";
                  //NC TR237 < EB
                  //NC APCOC-104 > DP
                  GLEntry."Not Translate" := "Not Translate";
                  //NC APCOC-104 < DP
                  //NC APCOC-117 > RD
                  GLEntry."Not Translate IFRS" := "Not Translate IFRS";
                  //NC APCOC-117 < RD
                  //NC OAM20 > DP
                  GLEntry."Original Currency Code" := "Currency Code";
                  GLEntry."Original Amount" := 0;
                  GLEntry."Original Debit Amount" := 0;
                  GLEntry."Original Credit Amount" := 0;
                  GLEntry."Null Original Amount" := TRUE;
                  //NC OAM20 < DP

                  InsertRUGLEntry(GenJnlLine,GLEntry,BalAccNo,FALSE,
                    ("Currency Code" = AddCurrencyCode) AND NOT GLSetup."Calc. FX Add. Curr. Amount",FALSE);
                END
                //NC NOS-26 < SPA
              ELSE
                CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",0,"Currency Code" = AddCurrencyCode);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
            END;
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            IF NOT GLSetup."Enable Russian Accounting" THEN BEGIN
              CreateGLEntryGainLoss(GenJnlLine,AccNo,-"Amount (LCY)","Currency Code" = AddCurrencyCode);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
            END ELSE BEGIN
              IF GLSetup."Enable Russian Accounting" AND NOT "Prepmt. Diff. in TA" THEN
                CASE GenJnlLine."Account Type" OF
                  GenJnlLine."Account Type"::Customer:
                    GenJnlLine.Correction :=
                      "Initial Entry Positive" XOR
                      ("Document Type" IN ["Document Type"::Payment,
                                           "Document Type"::"Credit Memo"]);
                  GenJnlLine."Account Type"::Vendor:
                    GenJnlLine.Correction :=
                      NOT "Initial Entry Positive" XOR
                      ("Document Type" IN ["Document Type"::Payment,
                                           "Document Type"::"Credit Memo"]);
                END;
              IF "Prepmt. Diff." THEN
                PrepmtDiffMgt.InsertPrepmtDiffBufEntry(
                  DtldCVLedgEntryBuf,GetGenPostingTypeFromAccType(GenJnlLine."Account Type"),"Transaction No.");
              IF "Prepmt. Diff. in TA" THEN BEGIN
                GetCurrency(Currency,"Currency Code");
                Currency.TESTFIELD("PD Bal. Gain/Loss Acc. (TA)");
                //NC NOS-26 > SPA
                IF "Entry Type" = "Entry Type"::"Realized Loss" THEN
                //NC NOS-26 < SPA
                  //NC TR269 > EB
                  InsertNegDim(GenJnlLine)
                  //NC TR269 < EB
                ELSE
                  //NC TR269 > EB
                  InsertPosDim(GenJnlLine);
                  //NC TR269 < EB
                InitGLEntry(GenJnlLine,GLEntry,AccNo,-"Amount (LCY)",0,
                  //NC OAM44 > DP
                  //"Currency Code" = GLSetup."Additional Reporting Currency",
                  ("Currency Code" = GLSetup."Additional Reporting Currency") AND NOT GLSetup."Calc. FX Add. Curr. Amount",
                  //NC OAM44 < DP
                  TRUE);
                CollectAdjustment(AdjAmount,GLEntry.Amount,GLEntry."Additional-Currency Amount");

                //NC TR269 > EB
                GenJnlLineShortCutsModify(GenJnlLine);
                //NC TR269 < EB
                //NC TR237 > EB
                GLEntry."Not Consolidate" := "Not Consolidate";
                //NC TR237 < EB
                //NC APCOC-104 > DP
                GLEntry."Not Translate" := "Not Translate";
                //NC APCOC-104 < DP
                //NC APCOC-117 > RD
                GLEntry."Not Translate IFRS" := "Not Translate IFRS";
                //NC APCOC-117 < RD
                //NC OAM20 > DP
                GLEntry."Original Currency Code" := "Currency Code";
                GLEntry."Original Amount" := 0;
                GLEntry."Original Debit Amount" := 0;
                GLEntry."Original Credit Amount" := 0;
                GLEntry."Null Original Amount" := TRUE;
                //NC OAM20 < DP
                InsertRUGLEntry(GenJnlLine,GLEntry,Currency."PD Bal. Gain/Loss Acc. (TA)",FALSE,TRUE,FALSE);
              END;
              IF (NOT "Prepmt. Diff.") AND (NOT "Prepmt. Diff. in TA") THEN BEGIN
                IF NOT GLSetup."Currency Adjmt with Correction" THEN
                  GenJnlLine.Correction := FALSE;
                //NC NOS-26 > SPA
                IF "Entry Type" = "Entry Type"::"Realized Loss" THEN
                //NC NOS-26 < SPA
                  //NC TR269 > EB
                  InsertNegDim(GenJnlLine)
                  //NC TR269 < EB
                ELSE
                  //NC TR269 > EB
                  InsertPosDim(GenJnlLine);
                  //NC TR269 < EB
                InitGLEntry(GenJnlLine,GLEntry,AccNo,-"Amount (LCY)",0,
                  //NC OAM44 > DP
                  //"Currency Code" = GLSetup."Additional Reporting Currency",
                  ("Currency Code" = GLSetup."Additional Reporting Currency") AND NOT GLSetup."Calc. FX Add. Curr. Amount",
                  //NC OAM44 < DP
                  TRUE);
                CollectAdjustment(AdjAmount,GLEntry.Amount,GLEntry."Additional-Currency Amount");
                //NC TR269 > EB
                GenJnlLineShortCutsModify(GenJnlLine);
                //NC TR269 < EB
                //NC TR237 > EB
                GLEntry."Not Consolidate" := "Not Consolidate";
                //NC TR237 < EB
                //NC APCOC-104 > DP
                GLEntry."Not Translate" := "Not Translate";
                //NC APCOC-104 < DP
                //NC APCOC-117 > RD
                GLEntry."Not Translate IFRS" := "Not Translate IFRS";
                //NC APCOC-117 < RD
                //NC OAM20 > DP
                GLEntry."Original Currency Code" := "Currency Code";
                GLEntry."Original Amount" := 0;
                GLEntry."Original Debit Amount" := 0;
                GLEntry."Original Credit Amount" := 0;
                GLEntry."Null Original Amount" := TRUE;
                //NC OAM20 < DP
                InsertRUGLEntry(GenJnlLine,GLEntry,BalAccNo,FALSE,TRUE,FALSE);
              END;
            END;
          "Entry Type"::"Payment Discount",
          "Entry Type"::"Payment Tolerance",
          "Entry Type"::"Payment Discount Tolerance":
            BEGIN
              IF GLSetup."Enable Russian Accounting" THEN
                CreateGLEntryRU(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",FALSE,BalAccNo,FALSE,TRUE,FALSE)
              ELSE
                CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",-"Additional-Currency Amount");
            END;
          "Entry Type"::"Payment Discount (VAT Excl.)",
          "Entry Type"::"Payment Tolerance (VAT Excl.)",
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            IF NOT GLSetup."Enable Russian Accounting" THEN BEGIN
              IF NOT Unapply THEN
                CreateGLEntryVATCollectAdj(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf,
                  AdjAmount)
              ELSE
                CreateGLEntryVAT(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf);
            END ELSE BEGIN
              IF NOT Unapply THEN
                CreateGLEntryVATCollectAdjRU(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf,
                  AdjAmount,'',FALSE,TRUE,FALSE)
              ELSE
                CreateGLEntryVATRU(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf,
                  '',FALSE,TRUE,FALSE);
            END;
          "Entry Type"::"Appln. Rounding":
            IF "Amount (LCY)" <> 0 THEN BEGIN
              IF GLSetup."Enable Russian Accounting" THEN
                //NC NOS-26 > SPA
                // функция разбита на составляющие : InitGLEntry и InsertRUGLEntry
                {
                CreateGLEntryRU(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",TRUE,BalAccNo,FALSE,TRUE,FALSE)
                }
                BEGIN
                  //NC NOS-26 > SPA
                  IF -"Amount (LCY)" > 0 THEN
                  //NC NOS-26 < SPA
                    //NC TR269 > EB
                    InsertNegDim(GenJnlLine)
                    //NC TR269 < EB
                  ELSE
                    //NC TR269 > EB
                    InsertPosDim(GenJnlLine);
                    //NC TR269 < EB
                  InitGLEntry(GenJnlLine,GLEntry,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",TRUE,TRUE);

                  //NC TR269 > EB
                  GenJnlLineShortCutsModify(GenJnlLine);
                  //NC TR269 < EB
                  //NC TR237 > EB
                  GLEntry."Not Consolidate" := "Not Consolidate";
                  //NC TR237 < EB
                  //NC APCOC-104 > DP
                  GLEntry."Not Translate" := "Not Translate";
                  //NC APCOC-104 < DP
                  //NC APCOC-117 > RD
                  GLEntry."Not Translate IFRS" := "Not Translate IFRS";
                  //NC APCOC-117 < RD
                  InsertRUGLEntry(GenJnlLine,GLEntry,BalAccNo,FALSE,TRUE,FALSE);
                END
                //NC NOS-26 < SPA
              ELSE
                CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",TRUE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",-"Additional-Currency Amount");
            END;
          "Entry Type"::"Correction of Remaining Amount":
            IF "Amount (LCY)" <> 0 THEN
              IF GLSetup."Enable Russian Accounting" THEN BEGIN
                InitGLEntry(GenJnlLine,GLEntry,AccNo,-"Amount (LCY)",0,
                  "Currency Code" = GLSetup."Additional Reporting Currency",TRUE);
                IF NOT Unapply THEN
                  CollectAdjustment(AdjAmount,-"Amount (LCY)",0);

                //NC TR237 > EB
                GLEntry."Not Consolidate" := "Not Consolidate";
                //NC TR237 < EB
                //NC APCOC-104 > DP
                GLEntry."Not Translate" := "Not Translate";
                //NC APCOC-104 < DP
                //NC APCOC-117 > RD
                GLEntry."Not Translate IFRS" := "Not Translate IFRS";
                //NC APCOC-117 < RD
                //NC OAM20.4 > DP
                GLEntry."Original Currency Code" := "Currency Code";
                GLEntry."Original Amount" := 0;
                GLEntry."Original Debit Amount" := 0;
                GLEntry."Original Credit Amount" := 0;
                GLEntry."Null Original Amount" := TRUE;
                //NC OAM20.4 < DP
                InsertRUGLEntry(GenJnlLine,GLEntry,BalAccNo,FALSE,TRUE,FALSE);
              END ELSE
                IF "Amount (LCY)" <> 0 THEN BEGIN
                  CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",0,FALSE);
                  IF NOT Unapply THEN
                    CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
                END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            ;
          ELSE
            FIELDERROR("Entry Type");
        END;
    END;

    LOCAL PROCEDURE PostDtldCustVATAdjustment@75(GenJnlLine@1003 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;OriginalTransactionNo@1000 : Integer);
    VAR
      VATPostingSetup@1005 : Record 325;
      TaxJurisdiction@1004 : Record 320;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        VATEntry.RESET;
        VATEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETRANGE("Transaction No.",OriginalTransactionNo);
        VATEntry.SETRANGE("VAT Bus. Posting Group","VAT Bus. Posting Group");
        VATEntry.SETRANGE("VAT Prod. Posting Group","VAT Prod. Posting Group");
        VATEntry.FINDFIRST;

        CASE VATPostingSetup."VAT Calculation Type" OF
          VATPostingSetup."VAT Calculation Type"::"Normal VAT",
          VATPostingSetup."VAT Calculation Type"::"Full VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetSalesAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            ;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            BEGIN
              TESTFIELD("Tax Jurisdiction Code");
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              CreateGLEntry(
                GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE PostDtldVendVATAdjustment@73(GenJnlLine@1004 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;OriginalTransactionNo@1000 : Integer);
    VAR
      VATPostingSetup@1003 : Record 325;
      TaxJurisdiction@1005 : Record 320;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        VATEntry.RESET;
        VATEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETRANGE("Transaction No.",OriginalTransactionNo);
        VATEntry.SETRANGE("VAT Bus. Posting Group","VAT Bus. Posting Group");
        VATEntry.SETRANGE("VAT Prod. Posting Group","VAT Prod. Posting Group");
        VATEntry.FINDFIRST;

        CASE VATPostingSetup."VAT Calculation Type" OF
          VATPostingSetup."VAT Calculation Type"::"Normal VAT",
          VATPostingSetup."VAT Calculation Type"::"Full VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),"Amount (LCY)","Additional-Currency Amount",FALSE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            BEGIN
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              IF "Use Tax" THEN BEGIN
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetRevChargeAccount(FALSE),"Amount (LCY)","Additional-Currency Amount",FALSE);
              END ELSE
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE VendUnrealizedVAT@18(GenJnlLine@1017 : Record 81;VAR VendLedgEntry2@1000 : Record 25;SettledAmount@1001 : Decimal;VATEntryNo@1470001 : Integer;UnrealVATPart@1470002 : Decimal;NewTransactionNo@1470005 : Integer;VATAllocationLineNo@1210002 : Integer);
    VAR
      VATEntry2@1002 : Record 254;
      TaxJurisdiction@1016 : Record 320;
      VATPostingSetup@1019 : Record 325;
      VATSettlementMgt@1210000 : Codeunit 12411;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountFirst@1014 : Decimal;
      TotalUnrealVATAmountLast@1015 : Decimal;
      PurchVATAccount@1009 : Code[20];
      PurchVATUnrealAccount@1010 : Code[20];
      PurchReverseAccount@1011 : Code[20];
      PurchReverseUnrealAccount@1012 : Code[20];
      LastConnectionNo@1013 : Integer;
      InitialVATFactor@1210009 : Decimal;
    BEGIN
      IF GLSetup."Enable Russian Accounting" AND (SettledAmount = 0) THEN
        EXIT;

      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",VendLedgEntry2."Transaction No.");
      PaidAmount := -VendLedgEntry2."Amount (LCY)" + VendLedgEntry2."Remaining Amt. (LCY)";
      IF VATEntry2.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"]
          THEN
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"]
          THEN
            TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;

      IF GLSetup."Enable Russian Accounting" AND (VATEntryNo <> 0) THEN BEGIN
        IF GenJnlLine."Prepmt. Diff." THEN
          VATEntry2.RESET;
        VATEntry2.SETRANGE("Entry No.",VATEntryNo);
        IF VATEntry2.FIND('-') THEN
          TotalUnrealVATAmountFirst := VATEntry2."Unrealized Amount"
        ELSE
          VATEntry2.SETRANGE("Entry No.");
      END;

      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT(GenJnlLine,VATPostingSetup);
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          IF NOT GLSetup."Enable Russian Accounting" THEN
            VATPart :=
              VATEntry2.GetUnrealizedVATPart(
                ROUND(SettledAmount / VendLedgEntry2.GetOriginalCurrencyFactor),
                PaidAmount,
                VendLedgEntry2."Original Amt. (LCY)",
                TotalUnrealVATAmountFirst,
                TotalUnrealVATAmountLast)
          ELSE BEGIN
            IF NOT (VATSettlementMgt.VATIsPostponed(VATEntry2,GenJnlLine."VAT Settlement Part",GenJnlLine."Posting Date") OR
                    VATSettlementMgt.PartiallyRealized(VATEntry2."Entry No.",GenJnlLine."VAT Settlement Part"))
            THEN BEGIN
              IF UnrealVATPart <> 0 THEN
                VATPart := UnrealVATPart
              ELSE
                IF VendLedgEntry2."Currency Code" = '' THEN
                  VATPart :=
                    VATEntry2.GetUnrealizedVATPart(
                      SettledAmount,
                      PaidAmount,
                      VendLedgEntry2."Original Amt. (LCY)",
                      TotalUnrealVATAmountFirst,
                      TotalUnrealVATAmountLast)
                ELSE
                  VATPart :=
                    VATEntry2.GetUnrealizedVATPart(
                      ROUND(SettledAmount / VendLedgEntry2.GetOriginalCurrencyFactor),
                      PaidAmount,
                      VendLedgEntry2."Original Amt. (LCY)",
                      TotalUnrealVATAmountFirst,
                      TotalUnrealVATAmountLast);
            END;
          END;

          IF VATPart > 0 THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                BEGIN
                  PurchVATAccount := VATPostingSetup.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := VATPostingSetup.GetPurchAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                BEGIN
                  PurchVATAccount := VATPostingSetup.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := VATPostingSetup.GetPurchAccount(TRUE);
                  PurchReverseAccount := VATPostingSetup.GetRevChargeAccount(FALSE);
                  PurchReverseUnrealAccount := VATPostingSetup.GetRevChargeAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  PurchVATAccount := TaxJurisdiction.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := TaxJurisdiction.GetPurchAccount(TRUE);
                  PurchReverseAccount := TaxJurisdiction.GetRevChargeAccount(FALSE);
                  PurchReverseUnrealAccount := TaxJurisdiction.GetRevChargeAccount(TRUE);
                END ELSE BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  PurchVATAccount := TaxJurisdiction.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := TaxJurisdiction.GetPurchAccount(TRUE);
                END;
            END;

            IF VATPart = 1 THEN BEGIN
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
              IF GLSetup."Enable Russian Accounting" AND (UnrealVATPart <> 0) AND (UnrealVATPart <> 1) THEN BEGIN
                InitialVATFactor :=
                  VATEntry2."Unrealized Amount" / (VATEntry2."Unrealized Amount" + VATEntry2."Unrealized Base");
                VATAmount := ROUND((VATAmount + VATBase) * UnrealVATPart * InitialVATFactor);
                VATBase := ROUND(VATBase * UnrealVATPart);
                VATAmountAddCurr := ROUND(VATAmountAddCurr * UnrealVATPart,AddCurrency."Amount Rounding Precision");
                VATBaseAddCurr := ROUND(VATBaseAddCurr * UnrealVATPart,AddCurrency."Amount Rounding Precision");
                AdjustVATAmount(VATEntry2,UnrealVATPart,VATBase,VATAmount,VATBaseAddCurr,VATAmountAddCurr,TRUE);
              END;
            END ELSE BEGIN
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart,GLSetup."Amount Rounding Precision");
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart,GLSetup."Amount Rounding Precision");
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              IF GLSetup."Enable Russian Accounting" THEN BEGIN
                IF IsVendBackPrepmt THEN
                  IF (ABS(VATAmount - VATEntryToRealize.Amount) <> 0) AND
                     (ABS(VATAmount - VATEntryToRealize.Amount) <= GLSetup."Amount Rounding Precision")
                  THEN BEGIN
                    VATAmount := VATEntryToRealize.Amount;
                    VATBase := VATEntryToRealize.Base;
                    VATAmountAddCurr := VATEntryToRealize."Additional-Currency Amount";
                    VATBaseAddCurr := VATEntryToRealize."Additional-Currency Base";
                  END;

                IF VATAllocationLineNo <> 0 THEN
                  VATBase := ROUND(VATAmount * GenJnlLine."VAT Base Amount" / GenJnlLine."VAT Amount")
                ELSE
                  AdjustVATAmount(VATEntry2,VATPart,VATBase,VATAmount,VATBaseAddCurr,VATAmountAddCurr,TRUE);
              END;
            END;

            IF GLSetup."Enable Russian Accounting" THEN BEGIN
              IF IsVendBackPrepmt THEN
                WITH VATEntryToRealize DO BEGIN
                  Amount -= VATAmount;
                  Base -= VATBase;
                  "Additional-Currency Amount" -= VATAmountAddCurr;
                  "Additional-Currency Base" -= VATBaseAddCurr;
                END;

              IF VATAllocationLineNo <> 0 THEN
                PurchVATAccount := GenJnlLine."Account No.";

              IF NewTransactionNo <> 0 THEN BEGIN
                VendLedgEntry2."Transaction No." := NextTransactionNo;
                NextTransactionNo := NewTransactionNo;
              END;

              IF VATEntry2.Prepayment THEN BEGIN
                GenJnlLine."Document Type" := VATEntry2."Document Type";
                GenJnlLine."Document No." := VATEntry2."Document No.";
              END;
              IF VATAllocationLineNo <> 0 THEN
                GenJnlLine.Description := VendLedgEntry2.Description;
            END;

            InitGLEntryVAT(
              GenJnlLine,PurchVATUnrealAccount,PurchVATAccount,-VATAmount,-VATAmountAddCurr,FALSE,
              VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
            InitGLEntryVATCopy(
              GenJnlLine,PurchVATAccount,PurchVATUnrealAccount,VATAmount,VATAmountAddCurr,VATEntry2,
              VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");

            IF (VATEntry2."VAT Calculation Type" =
                VATEntry2."VAT Calculation Type"::"Reverse Charge VAT") OR
               ((VATEntry2."VAT Calculation Type" =
                 VATEntry2."VAT Calculation Type"::"Sales Tax") AND
                (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax")
            THEN BEGIN
              InitGLEntryVAT(
                GenJnlLine,PurchReverseUnrealAccount,PurchReverseAccount,VATAmount,VATAmountAddCurr,FALSE,
                VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
              InitGLEntryVATCopy(
                GenJnlLine,PurchReverseAccount,PurchReverseUnrealAccount,-VATAmount,-VATAmountAddCurr,VATEntry2,
                VATPostingSetup."Trans. VAT Type" = VATPostingSetup."Trans. VAT Type"::"Amount + Tax");
            END;

            PostUnrealVATEntry(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr);
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT(GenJnlLine,VATPostingSetup);
      END;
    END;

    LOCAL PROCEDURE PostUnrealVATEntry@5(GenJnlLine@1002 : Record 81;VAR VATEntry2@1000 : Record 254;VATAmount@1003 : Decimal;VATBase@1004 : Decimal;VATAmountAddCurr@1006 : Decimal;VATBaseAddCurr@1005 : Decimal);
    VAR
      InitialVATEntry@1210000 : Record 254;
    BEGIN
      VATEntry.LOCKTABLE;
      VATEntry := VATEntry2;
      VATEntry."Entry No." := NextVATEntryNo;
      VATEntry."Posting Date" := GenJnlLine."Posting Date";
      VATEntry."Document No." := GenJnlLine."Document No.";
      VATEntry."External Document No." := GenJnlLine."External Document No.";
      VATEntry."Document Type" := GenJnlLine."Document Type";
      VATEntry.Amount := VATAmount;
      VATEntry.Base := VATBase;
      VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
      VATEntry."Additional-Currency Base" := VATBaseAddCurr;
      VATEntry.SetUnrealAmountsToZero;
      VATEntry."User ID" := USERID;
      VATEntry."Source Code" := GenJnlLine."Source Code";
      VATEntry."Reason Code" := GenJnlLine."Reason Code";
      VATEntry."Closed by Entry No." := 0;
      VATEntry.Closed := FALSE;
      VATEntry."Transaction No." := NextTransactionNo;
      VATEntry."Sales Tax Connection No." := NextConnectionNo;
      VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        VATEntry."Document Date" := GenJnlLine."Document Date";
        VATEntry.Positive := VATEntry.Amount > 0;
        VATEntry."VAT Settlement Part" := GenJnlLine."VAT Settlement Part";
        VATEntry.Correction := GenJnlLine.Correction;
        VATEntry."Additional VAT Ledger Sheet" := GenJnlLine."Additional VAT Ledger Sheet";
        VATEntry."Corrected Document Date" := GenJnlLine."Corrected Document Date";
        IF GenJnlLine."Additional VAT Ledger Sheet" THEN
          FindAdjustingVATEntry(VATEntry,GenJnlLine."Corrected Document Date");
        IF (GenJnlLine."Prepayment Status" = GenJnlLine."Prepayment Status"::Reset) AND
           VATEntry."Additional VAT Ledger Sheet"
        THEN BEGIN
          VATEntry.Reversed := TRUE;
          VATEntry."Reversed Entry No." := VATEntry."Unrealized VAT Entry No.";
        END;
        VATEntry."Manual VAT Settlement" := VATEntry."VAT Settlement Part" <> 0;
        VATEntry."FA Ledger Entry No." := GenJnlLine."FA Error Entry No.";
        VATEntry."VAT Allocation Type" := GenJnlLine."VAT Allocation Type";
        IF GenJnlLine."Initial VAT Entry No." <> 0 THEN BEGIN
          InitialVATEntry.GET(GenJnlLine."Initial VAT Entry No.");
          VATEntry."Initial VAT Transaction No." := InitialVATEntry."Transaction No.";
          VATEntry."Document Line No." := InitialVATEntry."Document Line No.";
        END;
      END;
      IF VATEntry."Prepmt. Diff." AND VATEntry."Additional VAT Ledger Sheet" THEN BEGIN
        InitialVATEntry.RESET;
        InitialVATEntry.SETCURRENTKEY("Transaction No.");
        InitialVATEntry.SETRANGE("Transaction No.",VATEntry."Initial VAT Transaction No.");
        IF InitialVATEntry.FINDSET THEN
          REPEAT
            IF InitialVATEntry."Unrealized VAT Entry No." <> 0 THEN
              IF NOT PrepmtDiffMgt.IsDifferentTaxPeriod(InitialVATEntry."Posting Date",VATEntry."Posting Date") THEN BEGIN
                InitialVATEntry."Additional VAT Ledger Sheet" := VATEntry."Additional VAT Ledger Sheet";
                InitialVATEntry."Corrected Document Date" := VATEntry."Corrected Document Date";
                InitialVATEntry.MODIFY;
              END;
          UNTIL InitialVATEntry.NEXT = 0;
      END;
      VATEntry.INSERT(TRUE);
      NextVATEntryNo := NextVATEntryNo + 1;

      VATEntry2."Remaining Unrealized Amount" :=
        VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
      VATEntry2."Remaining Unrealized Base" :=
        VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
      VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
        VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
      VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
        VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
      VATEntry2."VAT Settlement Part" := GenJnlLine."VAT Settlement Part";
      VATEntry2.MODIFY;
    END;

    LOCAL PROCEDURE PostApply@105(GenJnlLine@1007 : Record 81;VAR DtldCVLedgEntryBuf@1008 : Record 383;VAR OldCVLedgEntryBuf@1000 : Record 382;VAR NewCVLedgEntryBuf@1005 : Record 382;VAR NewCVLedgEntryBuf2@1013 : Record 382;BlockPaymentTolerance@1006 : Boolean;AllApplied@1009 : Boolean;VAR AppliedAmount@1016 : Decimal;VAR PmtTolAmtToBeApplied@1010 : Decimal);
    VAR
      OldCVLedgEntryBuf2@1003 : Record 382;
      OldCVLedgEntryBuf3@1002 : Record 382;
      OldRemainingAmtBeforeAppln@1001 : Decimal;
      ApplnRoundingPrecision@1004 : Decimal;
      AppliedAmountLCY@1012 : Decimal;
      OldAppliedAmount@1011 : Decimal;
    BEGIN
      OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
      OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

      // Management of posting in multiple currencies
      OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
      OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      ApplnRoundingPrecision := GetApplnRoundPrecision(NewCVLedgEntryBuf,OldCVLedgEntryBuf);

      OldCVLedgEntryBuf2.RecalculateAmounts(
        OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");

      IF NOT BlockPaymentTolerance THEN
        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

      CalcPmtDisc(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo);

      IF NOT BlockPaymentTolerance THEN
        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          NextTransactionNo,FirstNewVATEntryNo);

      CalcCurrencyApplnRounding(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
        GenJnlLine,ApplnRoundingPrecision);

      FindAmtForAppln(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
        AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision);

      IF GLSetup."Enable Russian Accounting" THEN
        RUFindAmtForAppln(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,
          AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision);

      CalcCurrencyUnrealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

      CalcCurrencyRealizedGainLoss(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

      CalcCurrencyRealizedGainLoss(
        OldCVLedgEntryBuf,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

      CalcApplication(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
        GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
        NewCVLedgEntryBuf2,OldCVLedgEntryBuf3,AllApplied);

      PaymentToleranceMgt.CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup);

      CalcAmtLCYAdjustment(OldCVLedgEntryBuf,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);
    END;

    PROCEDURE UnapplyCustLedgEntry@109(GenJnlLine2@1004 : Record 81;DtldCustLedgEntry@1003 : Record 379);
    VAR
      Cust@1006 : Record 18;
      CustPostingGr@1019 : Record 92;
      GenJnlLine@1021 : Record 81;
      SavedGenJnlLine@1210002 : Record 81;
      DtldCustLedgEntry2@1013 : Record 379;
      NewDtldCustLedgEntry@1012 : Record 379;
      CustLedgEntry@1011 : Record 21;
      DtldCVLedgEntryBuf@1010 : Record 383;
      VATEntry@1009 : Record 254;
      TempVATEntry2@1023 : TEMPORARY Record 254;
      CurrencyLCY@1024 : Record 4;
      TempInvPostBuf@1002 : TEMPORARY Record 49;
      TempDtldCVLedgEntryBuf@1210003 : TEMPORARY Record 383;
      CorrDtldCVLedgEntryBuf@1210000 : TEMPORARY Record 383;
      VATSettlementMgt@1210001 : Codeunit 12411;
      AdjAmount@1031 : ARRAY [4] OF Decimal;
      NextDtldLedgEntryNo@1001 : Integer;
      UnapplyVATEntries@1000 : Boolean;
      "NCV>"@1101495004 : Integer;
      CustLedgEntryUnapplied@1101495003 : Record 21;
      GLEntryUnapplied@1101495002 : Record 17;
      UnappliedAccNo@1101495001 : Code[20];
      CustPostGroupUnapplied@1101495000 : Record 92;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GLSetup."Enable Russian Accounting" THEN
        GenJnlLine."Source Currency Code" := DtldCustLedgEntry."Currency Code";
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Cust.GET(DtldCustLedgEntry."Customer No.");
      Cust.CheckBlockedCustOnJnls(Cust,GenJnlLine2."Document Type"::Payment,TRUE);
      CustPostingGr.GET(GenJnlLine."Posting Group");
      CustPostingGr.GetReceivablesAccount;

      VATEntry.LOCKTABLE;
      DtldCustLedgEntry.LOCKTABLE;
      CustLedgEntry.LOCKTABLE;

      DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::Application);

      DtldCustLedgEntry2.RESET;
      DtldCustLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldCustLedgEntry2."Entry No." + 1;
      IF DtldCustLedgEntry."Transaction No." = 0 THEN BEGIN
        DtldCustLedgEntry2.SETCURRENTKEY("Application No.","Customer No.","Entry Type");
        DtldCustLedgEntry2.SETRANGE("Application No.",DtldCustLedgEntry."Application No.");
      END ELSE BEGIN
        DtldCustLedgEntry2.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
        DtldCustLedgEntry2.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      END;
      DtldCustLedgEntry2.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
      DtldCustLedgEntry2.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
      IF DtldCustLedgEntry."Transaction No." <> 0 THEN BEGIN
        UnapplyVATEntries := FALSE;
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          CreateCustUnapplyBuffer(DtldCustLedgEntry2,TempDtldCVLedgEntryBuf,NextDtldLedgEntryNo);
          SummarizeGainLoss(TempDtldCVLedgEntryBuf,CorrDtldCVLedgEntryBuf,TRUE);
          FinVoidedCheck := IsCheckFinVoided(GenJnlLine2,TempDtldCVLedgEntryBuf);
        END;
        DtldCustLedgEntry2.FINDSET;
        REPEAT
          DtldCustLedgEntry2.TESTFIELD(Unapplied,FALSE);
          IF GLSetup."Enable Russian Accounting" THEN BEGIN
            VATSettlementMgt.CheckForUnapplyByEntryNo(DtldCustLedgEntry2."Cust. Ledger Entry No.",0);
            IF DtldCustLedgEntry2."Tax Diff. Transaction No." <> 0 THEN
              ERROR(PostedTaxDiffReverseErr,DtldCustLedgEntry2."Tax Diff. Transaction No.");
            IF DtldCustLedgEntry2."Prepmt. Diff." THEN
              VATSettlementMgt.CheckForPDUnapply(DtldCustLedgEntry2."Cust. Ledger Entry No.");
          END;
          IF IsVATAdjustment(DtldCustLedgEntry2."Entry Type") THEN
            UnapplyVATEntries := TRUE
        UNTIL DtldCustLedgEntry2.NEXT = 0;

        PostUnapply(
          GenJnlLine,VATEntry,VATEntry.Type::Sale,
          DtldCustLedgEntry."Customer No.",DtldCustLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);

        DtldCustLedgEntry2.FINDSET;
        REPEAT
          DtldCVLedgEntryBuf.INIT;
          DtldCVLedgEntryBuf.TRANSFERFIELDS(DtldCustLedgEntry2);
          ProcessTempVATEntry(DtldCVLedgEntryBuf,TempVATEntry);
        UNTIL DtldCustLedgEntry2.NEXT = 0;
      END;

      // Look one more time
      DtldCustLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      REPEAT
        DtldCustLedgEntry2.TESTFIELD(Unapplied,FALSE);
        InsertDtldCustLedgEntryUnapply(GenJnlLine,SavedGenJnlLine,NewDtldCustLedgEntry,DtldCustLedgEntry2,NextDtldLedgEntryNo);

        //NC MLN15 > DP
        UnappliedAccNo :='';
        CustLedgEntry.GET(DtldCustLedgEntry2."Cust. Ledger Entry No.");
        IF CustLedgEntry."Closed by Entry No." <> 0 THEN
          CustLedgEntryUnapplied.GET(CustLedgEntry."Closed by Entry No.")
        ELSE
          CustLedgEntryUnapplied.GET(CustLedgEntry."Entry No.");
        IF CustPostGroupUnapplied.GET(CustLedgEntryUnapplied."Customer Posting Group") THEN
          IF CustLedgEntryUnapplied.Prepayment THEN
            UnappliedAccNo := CustPostGroupUnapplied."Prepayment Account"
          ELSE
            UnappliedAccNo := CustPostGroupUnapplied."Receivables Account";

        GLEntryUnapplied.RESET;
        GLEntryUnapplied.SETCURRENTKEY("Transaction No.");
        GLEntryUnapplied.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
        GLEntryUnapplied.SETRANGE("G/L Account No.",UnappliedAccNo);
        IF GLEntryUnapplied.ISEMPTY THEN BEGIN
          CustLedgEntry.GET(DtldCustLedgEntry2."Cust. Ledger Entry No.");
          IF CustLedgEntry."Closed by Entry No." <> 0 THEN
            CustLedgEntry.GET(CustLedgEntry."Closed by Entry No.");
          GenJnlLine."Dimension Set ID" := CustLedgEntry."Dimension Set ID";
        END ELSE BEGIN
          GLEntryUnapplied.FINDFIRST;
          GenJnlLine."Dimension Set ID" := GLEntryUnapplied."Dimension Set ID";
        END;
        //NC MLN15 < DP

        GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108

        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldCustLedgEntry);
        IF GLSetup."Enable Russian Accounting" THEN
          DtldCVLedgEntryBuf."Posting Date" := DtldCustLedgEntry2."Posting Date";
        IF NOT (DtldCVLedgEntryBuf."Prepmt. Diff." OR DtldCVLedgEntryBuf."Prepmt. Diff. in TA") THEN
          SetAddCurrForUnapplication(DtldCVLedgEntryBuf)
        ELSE
          DtldCVLedgEntryBuf."Additional-Currency Amount" := 0;
        CurrencyLCY.InitRoundingPrecision;

        IF (DtldCustLedgEntry2."Transaction No." <> 0) AND IsVATExcluded(DtldCustLedgEntry2."Entry Type") THEN BEGIN
          UnapplyExcludedVAT(
            TempVATEntry2,DtldCustLedgEntry2."Transaction No.",DtldCustLedgEntry2."VAT Bus. Posting Group",
            DtldCustLedgEntry2."VAT Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
          DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
            CalcVATAmountFromVATEntry(DtldCVLedgEntryBuf."Amount (LCY)",TempVATEntry2,CurrencyLCY);
        END;
        UpdateTotalAmounts(
          TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf."Amount (LCY)",
          DtldCVLedgEntryBuf."Additional-Currency Amount");

        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
                                                    DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
                                                    DtldCVLedgEntryBuf."Entry Type"::Application])
        THEN
          CollectAdjustment(AdjAmount,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");

        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
          DtldCVLedgEntryBuf."Initial Transaction No." := DtldCustLedgEntry."Transaction No.";
          UpdateGainLoss(DtldCVLedgEntryBuf,CorrDtldCVLedgEntryBuf);
        END;

        PostDtldCustLedgEntryUnapply(
          GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,DtldCustLedgEntry2."Transaction No.");

        IF GLSetup."Enable Russian Accounting" THEN
          GenJnlLine := SavedGenJnlLine;

        DtldCustLedgEntry2.Unapplied := TRUE;
        DtldCustLedgEntry2."Unapplied by Entry No." := NewDtldCustLedgEntry."Entry No.";
        DtldCustLedgEntry2.MODIFY;

        UpdateCustLedgEntry(DtldCustLedgEntry2);
      UNTIL DtldCustLedgEntry2.NEXT = 0;

      IF NOT GLSetup."Enable Russian Accounting" THEN
        CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,CustPostingGr.GetReceivablesAccount);

      IF IsTempGLEntryBufEmpty THEN
        DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
      CheckPostUnrealizedVAT(GenJnlLine,TRUE);
      FinishPosting(GenJnlLine);
    END;

    PROCEDURE UnapplyVendLedgEntry@108(GenJnlLine2@1003 : Record 81;DtldVendLedgEntry@1002 : Record 380);
    VAR
      Vend@1005 : Record 23;
      VendPostingGr@1019 : Record 93;
      GenJnlLine@1021 : Record 81;
      SavedGenJnlLine@1210002 : Record 81;
      DtldVendLedgEntry2@1012 : Record 380;
      NewDtldVendLedgEntry@1011 : Record 380;
      VendLedgEntry@1010 : Record 25;
      DtldCVLedgEntryBuf@1009 : Record 383;
      VATEntry@1008 : Record 254;
      TempVATEntry2@1023 : TEMPORARY Record 254;
      CurrencyLCY@1024 : Record 4;
      TempInvPostBuf@1001 : TEMPORARY Record 49;
      TempDtldCVLedgEntryBuf@1210003 : TEMPORARY Record 383;
      CorrDtldCVLedgEntryBuf@1210000 : TEMPORARY Record 383;
      VATSettlementMgt@1210001 : Codeunit 12411;
      AdjAmount@1031 : ARRAY [4] OF Decimal;
      NextDtldLedgEntryNo@1000 : Integer;
      UnapplyVATEntries@1013 : Boolean;
      "NCV>"@1101495004 : Integer;
      VendLedgEntryUnapplied@1101495003 : Record 25;
      GLEntryUnapplied@1101495002 : Record 17;
      UnappliedAccNo@1101495001 : Code[20];
      VendPostGroupUnapplied@1101495000 : Record 93;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GLSetup."Enable Russian Accounting" THEN
        GenJnlLine."Source Currency Code" := DtldVendLedgEntry."Currency Code";
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Vend.GET(DtldVendLedgEntry."Vendor No.");
      Vend.CheckBlockedVendOnJnls(Vend,GenJnlLine2."Document Type"::Payment,TRUE);
      VendPostingGr.GET(GenJnlLine."Posting Group");
      VendPostingGr.GetPayablesAccount;

      VATEntry.LOCKTABLE;
      DtldVendLedgEntry.LOCKTABLE;
      VendLedgEntry.LOCKTABLE;

      DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::Application);

      IF GLSetup."Enable Russian Accounting" THEN
        VATSettlementMgt.CheckForUnapplyByTransNo(DtldVendLedgEntry."Transaction No.");

      DtldVendLedgEntry2.RESET;
      DtldVendLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldVendLedgEntry2."Entry No." + 1;
      IF DtldVendLedgEntry."Transaction No." = 0 THEN BEGIN
        DtldVendLedgEntry2.SETCURRENTKEY("Application No.","Vendor No.","Entry Type");
        DtldVendLedgEntry2.SETRANGE("Application No.",DtldVendLedgEntry."Application No.");
      END ELSE BEGIN
        DtldVendLedgEntry2.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
        DtldVendLedgEntry2.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      END;
      DtldVendLedgEntry2.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
      DtldVendLedgEntry2.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
      IF DtldVendLedgEntry."Transaction No." <> 0 THEN BEGIN
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          CreateVendUnapplyBuffer(DtldVendLedgEntry2,TempDtldCVLedgEntryBuf,NextDtldLedgEntryNo);
          SummarizeGainLoss(TempDtldCVLedgEntryBuf,CorrDtldCVLedgEntryBuf,TRUE);
          FinVoidedCheck := IsCheckFinVoided(GenJnlLine2,TempDtldCVLedgEntryBuf);
        END;
        UnapplyVATEntries := FALSE;
        DtldVendLedgEntry2.FINDSET;
        REPEAT
          DtldVendLedgEntry2.TESTFIELD(Unapplied,FALSE);
          IF IsVATAdjustment(DtldVendLedgEntry2."Entry Type") THEN
            UnapplyVATEntries := TRUE
        UNTIL DtldVendLedgEntry2.NEXT = 0;

        PostUnapply(
          GenJnlLine,VATEntry,VATEntry.Type::Purchase,
          DtldVendLedgEntry."Vendor No.",DtldVendLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);

        DtldVendLedgEntry2.FINDSET;
        REPEAT
          DtldCVLedgEntryBuf.INIT;
          DtldCVLedgEntryBuf.TRANSFERFIELDS(DtldVendLedgEntry2);
          ProcessTempVATEntry(DtldCVLedgEntryBuf,TempVATEntry);
        UNTIL DtldVendLedgEntry2.NEXT = 0;
      END;

      // Look one more time
      DtldVendLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      REPEAT
        DtldVendLedgEntry2.TESTFIELD(Unapplied,FALSE);
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          VATSettlementMgt.CheckForUnapplyByEntryNo(DtldVendLedgEntry2."Vendor Ledger Entry No.",1);
          IF DtldVendLedgEntry2."Tax Diff. Transaction No." <> 0 THEN
            ERROR(PostedTaxDiffReverseErr,DtldVendLedgEntry2."Tax Diff. Transaction No.");
          IF DtldVendLedgEntry2."Prepmt. Diff." THEN
            VATSettlementMgt.CheckForPDUnapply(DtldVendLedgEntry2."Vendor Ledger Entry No.");
        END;
        InsertDtldVendLedgEntryUnapply(GenJnlLine,SavedGenJnlLine,NewDtldVendLedgEntry,DtldVendLedgEntry2,NextDtldLedgEntryNo);

        //NC MLN15 > DP
        UnappliedAccNo := '';
        VendLedgEntry.GET(DtldVendLedgEntry2."Vendor Ledger Entry No.");
        IF VendLedgEntry."Closed by Entry No." <> 0 THEN
          VendLedgEntryUnapplied.GET(VendLedgEntry."Closed by Entry No.")
        ELSE
          VendLedgEntryUnapplied.GET(VendLedgEntry."Entry No.");
        IF VendPostGroupUnapplied.GET(VendLedgEntryUnapplied."Vendor Posting Group") THEN
          IF VendLedgEntryUnapplied.Prepayment THEN
            UnappliedAccNo :=VendPostGroupUnapplied."Prepayment Account"
          ELSE
            UnappliedAccNo :=VendPostGroupUnapplied."Payables Account";

        GLEntryUnapplied.RESET;
        GLEntryUnapplied.SETCURRENTKEY("Transaction No.");
        GLEntryUnapplied.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
        GLEntryUnapplied.SETRANGE("G/L Account No.",UnappliedAccNo);
        IF GLEntryUnapplied.ISEMPTY THEN BEGIN
          VendLedgEntry.GET(DtldVendLedgEntry2."Vendor Ledger Entry No.");
          IF VendLedgEntry."Closed by Entry No." <> 0 THEN
            VendLedgEntry.GET(VendLedgEntry."Closed by Entry No.");
          GenJnlLine."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
        END ELSE BEGIN
          GLEntryUnapplied.FINDFIRST;
          GenJnlLine."Dimension Set ID" := GLEntryUnapplied."Dimension Set ID";
        END;
        //NC MLN15 < DP

        GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108

        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldVendLedgEntry);
        IF GLSetup."Enable Russian Accounting" THEN
          DtldCVLedgEntryBuf."Posting Date" := DtldVendLedgEntry2."Posting Date";
        IF NOT (DtldCVLedgEntryBuf."Prepmt. Diff." OR DtldCVLedgEntryBuf."Prepmt. Diff. in TA") THEN
          SetAddCurrForUnapplication(DtldCVLedgEntryBuf)
        ELSE
          DtldCVLedgEntryBuf."Additional-Currency Amount" := 0;
        CurrencyLCY.InitRoundingPrecision;

        IF (DtldVendLedgEntry2."Transaction No." <> 0) AND IsVATExcluded(DtldVendLedgEntry2."Entry Type") THEN BEGIN
          UnapplyExcludedVAT(
            TempVATEntry2,DtldVendLedgEntry2."Transaction No.",DtldVendLedgEntry2."VAT Bus. Posting Group",
            DtldVendLedgEntry2."VAT Prod. Posting Group",DtldVendLedgEntry2."Gen. Prod. Posting Group");
          DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
            CalcVATAmountFromVATEntry(DtldCVLedgEntryBuf."Amount (LCY)",TempVATEntry2,CurrencyLCY);
        END;
        UpdateTotalAmounts(
          TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf."Amount (LCY)",
          DtldCVLedgEntryBuf."Additional-Currency Amount");

        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
                                                    DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
                                                    DtldCVLedgEntryBuf."Entry Type"::Application])
        THEN
          CollectAdjustment(AdjAmount,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");

        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
          DtldCVLedgEntryBuf."Initial Transaction No." := DtldVendLedgEntry."Transaction No.";
          UpdateGainLoss(DtldCVLedgEntryBuf,CorrDtldCVLedgEntryBuf);
        END;

        PostDtldVendLedgEntryUnapply(
          GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,DtldVendLedgEntry2."Transaction No.");

        IF GLSetup."Enable Russian Accounting" THEN
          GenJnlLine := SavedGenJnlLine;

        DtldVendLedgEntry2.Unapplied := TRUE;
        DtldVendLedgEntry2."Unapplied by Entry No." := NewDtldVendLedgEntry."Entry No.";
        DtldVendLedgEntry2.MODIFY;

        UpdateVendLedgEntry(DtldVendLedgEntry2);
      UNTIL DtldVendLedgEntry2.NEXT = 0;

      IF NOT GLSetup."Enable Russian Accounting" THEN
        CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,VendPostingGr.GetPayablesAccount);

      IF IsTempGLEntryBufEmpty THEN
        DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      CheckPostUnrealizedVAT(GenJnlLine,TRUE);
      FinishPosting(GenJnlLine);
    END;

    LOCAL PROCEDURE UnapplyExcludedVAT@85(VAR TempVATEntry@1000 : TEMPORARY Record 254;TransactionNo@1004 : Integer;VATBusPostingGroup@1001 : Code[10];VATProdPostingGroup@1002 : Code[10];GenProdPostingGroup@1003 : Code[10]);
    BEGIN
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",VATBusPostingGroup);
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",VATProdPostingGroup);
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",GenProdPostingGroup);
      IF NOT TempVATEntry.FINDFIRST THEN BEGIN
        TempVATEntry.RESET;
        IF TempVATEntry.FINDLAST THEN
          TempVATEntry."Entry No." := TempVATEntry."Entry No." + 1
        ELSE
          TempVATEntry."Entry No." := 1;
        TempVATEntry.INIT;
        TempVATEntry."VAT Bus. Posting Group" := VATBusPostingGroup;
        TempVATEntry."VAT Prod. Posting Group" := VATProdPostingGroup;
        TempVATEntry."Gen. Prod. Posting Group" := GenProdPostingGroup;
        VATEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETRANGE("Transaction No.",TransactionNo);
        VATEntry.SETRANGE("VAT Bus. Posting Group",VATBusPostingGroup);
        VATEntry.SETRANGE("VAT Prod. Posting Group",VATProdPostingGroup);
        VATEntry.SETRANGE("Gen. Prod. Posting Group",GenProdPostingGroup);
        IF VATEntry.FINDSET THEN
          REPEAT
            IF VATEntry."Unrealized VAT Entry No." = 0 THEN BEGIN
              TempVATEntry.Base := TempVATEntry.Base + VATEntry.Base;
              TempVATEntry.Amount := TempVATEntry.Amount + VATEntry.Amount;
            END;
          UNTIL VATEntry.NEXT = 0;
        CLEAR(VATEntry);
        TempVATEntry.INSERT;
      END;
    END;

    LOCAL PROCEDURE PostUnrealVATByUnapply@106(GenJnlLine@1002 : Record 81;VATPostingSetup@1008 : Record 325;VATEntry@1005 : Record 254;NewVATEntry@1004 : Record 254);
    VAR
      VATEntry2@1003 : Record 254;
      GLEntry@1210001 : Record 17;
      AmountAddCurr@1007 : Decimal;
      SavedPostingDate@1210000 : Date;
    BEGIN
      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        SavedPostingDate := GenJnlLine."Posting Date";
        IF VATEntry."Posting Date" > GenJnlLine."Posting Date" THEN
          GenJnlLine."Posting Date" := VATEntry."Posting Date";
      END;

      AmountAddCurr := CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      IF NOT GLSetup."Enable Russian Accounting" THEN BEGIN
        CreateGLEntry(
          GenJnlLine,GetPostingAccountNo(VATPostingSetup,VATEntry,TRUE),VATEntry.Amount,AmountAddCurr,FALSE);
        CreateGLEntryFromVATEntry(
          GenJnlLine,GetPostingAccountNo(VATPostingSetup,VATEntry,FALSE),-VATEntry.Amount,-AmountAddCurr,VATEntry);
      END ELSE BEGIN
        InitGLEntry(GenJnlLine,GLEntry,
          GetPostingAccountNo(VATPostingSetup,VATEntry,TRUE),VATEntry.Amount,0,FALSE,TRUE);
        GLEntry."Additional-Currency Amount" :=
          CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
        GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
        InsertRUGLEntry(GenJnlLine,GLEntry,GetPostingAccountNo(VATPostingSetup,VATEntry,FALSE),TRUE,TRUE,FALSE);
        GenJnlLine."Posting Date" := SavedPostingDate;
      END;
      WITH VATEntry2 DO BEGIN
        GET(VATEntry."Unrealized VAT Entry No.");
        "Remaining Unrealized Amount" := "Remaining Unrealized Amount" - NewVATEntry.Amount;
        "Remaining Unrealized Base" := "Remaining Unrealized Base" - NewVATEntry.Base;
        "Add.-Curr. Rem. Unreal. Amount" :=
          "Add.-Curr. Rem. Unreal. Amount" - NewVATEntry."Additional-Currency Amount";
        "Add.-Curr. Rem. Unreal. Base" :=
          "Add.-Curr. Rem. Unreal. Base" - NewVATEntry."Additional-Currency Base";
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE PostPmtDiscountVATByUnapply@104(GenJnlLine@1003 : Record 81;ReverseChargeVATAccNo@1002 : Code[20];VATAccNo@1001 : Code[20];VATEntry@1000 : Record 254);
    VAR
      AmountAddCurr@1005 : Decimal;
    BEGIN
      AmountAddCurr := CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      CreateGLEntry(GenJnlLine,ReverseChargeVATAccNo,VATEntry.Amount,AmountAddCurr,FALSE);
      CreateGLEntry(GenJnlLine,VATAccNo,-VATEntry.Amount,-AmountAddCurr,FALSE);
    END;

    LOCAL PROCEDURE PostUnapply@101(GenJnlLine@1007 : Record 81;VAR VATEntry@1002 : Record 254;VATEntryType@1004 : Option;BilltoPaytoNo@1001 : Code[20];VAR TransactionNo@1003 : Integer;VAR UnapplyVATEntries@1006 : Boolean;VAR TempVATEntry@1013 : TEMPORARY Record 254);
    VAR
      VATPostingSetup@1000 : Record 325;
      SavedGenJnlLine@1210000 : Record 81;
      VATEntry2@1009 : Record 254;
      GLEntryVATEntryLink@1011 : Record 253;
      AccNo@1010 : Code[20];
      TempVATEntryNo@1005 : Integer;
    BEGIN
      TempVATEntryNo := 1;
      VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
      VATEntry.SETRANGE(Type,VATEntryType);
      VATEntry.SETRANGE("Bill-to/Pay-to No.",BilltoPaytoNo);
      VATEntry.SETRANGE("Transaction No.",TransactionNo);
      IF GLSetup."Enable Russian Accounting" THEN BEGIN
        VATEntry.SETRANGE("Unrealized Amount",0);
        VATEntry.SETRANGE("Unrealized Base",0);
      END;
      IF VATEntry.FINDSET THEN BEGIN
        VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
        IF VATPostingSetup."Adjust for Payment Discount" AND NOT IsNotPayment(VATEntry."Document Type") AND
           (VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT")
        THEN
          UnapplyVATEntries := TRUE;
        REPEAT
          IF UnapplyVATEntries OR (VATEntry."Unrealized VAT Entry No." <> 0) THEN BEGIN
            InsertTempVATEntry(GenJnlLine,VATEntry,TempVATEntryNo,TempVATEntry);
            IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
              IF GLSetup."Enable Russian Accounting" THEN BEGIN
                SavedGenJnlLine := GenJnlLine;
                CASE VATEntryType OF
                  VATEntry.Type::Sale:
                    GenJnlLine.Correction := VATEntry.Amount < 0;
                  VATEntry.Type::Purchase:
                    GenJnlLine.Correction := VATEntry.Amount > 0;
                END;
                IF VATEntry.Prepayment THEN BEGIN
                  GenJnlLine."Document Type" := VATEntry."Document Type";
                  GenJnlLine."Document No." := VATEntry."Document No.";
                END;
              END;
              VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
              IF VATPostingSetup."VAT Calculation Type" IN
                 [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                  VATPostingSetup."VAT Calculation Type"::"Full VAT"]
              THEN
                PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry)
              ELSE
                IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                  PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(TRUE),
                    -VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount),FALSE);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),
                    VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount),FALSE);
                END ELSE
                  PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
              VATEntry2 := TempVATEntry;
              VATEntry2."Entry No." := NextVATEntryNo;
              IF GLSetup."Enable Russian Accounting" THEN
                NextVATEntryNo := NextVATEntryNo + 1;
              VATEntry2.INSERT;
              IF VATEntry2."Unrealized VAT Entry No." = 0 THEN
                GLEntryVATEntryLink.InsertLink(NextEntryNo,VATEntry2."Entry No.");
              TempVATEntry.DELETE;
              IncrNextVATEntryNo;
              IF GLSetup."Enable Russian Accounting" THEN
                GenJnlLine := SavedGenJnlLine;
            END;

            IF VATPostingSetup."Adjust for Payment Discount" AND NOT IsNotPayment(VATEntry."Document Type") AND
               (VATPostingSetup."VAT Calculation Type" =
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT") AND
               (VATEntry."Unrealized VAT Entry No." = 0)
            THEN BEGIN
              CASE VATEntryType OF
                VATEntry.Type::Sale:
                  AccNo := VATPostingSetup.GetSalesAccount(FALSE);
                VATEntry.Type::Purchase:
                  AccNo := VATPostingSetup.GetPurchAccount(FALSE);
              END;
              PostPmtDiscountVATByUnapply(GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),AccNo,VATEntry);
            END;
          END;
        UNTIL VATEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcAddCurrForUnapplication@100(Date@1001 : Date;Amt@1002 : Decimal) : Decimal;
    VAR
      AddCurrency@1000 : Record 4;
      CurrExchRate@1003 : Record 330;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      AddCurrency.GET(AddCurrencyCode);
      AddCurrency.TESTFIELD("Amount Rounding Precision");

      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            Date,AddCurrencyCode,Amt,CurrExchRate.ExchangeRate(Date,AddCurrencyCode)),
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CalcVATAmountFromVATEntry@99(AmountLCY@1000 : Decimal;VAR VATEntry@1001 : Record 254;CurrencyLCY@1003 : Record 4) VATAmountLCY : Decimal;
    BEGIN
      WITH VATEntry DO
        IF (AmountLCY = Base) OR (Base = 0) THEN BEGIN
          VATAmountLCY := Amount;
          DELETE;
        END ELSE BEGIN
          VATAmountLCY :=
            ROUND(
              Amount * AmountLCY / Base,
              CurrencyLCY."Amount Rounding Precision",
              CurrencyLCY.VATRoundingDirection);
          Base := Base - AmountLCY;
          Amount := Amount - VATAmountLCY;
          MODIFY;
        END;
    END;

    LOCAL PROCEDURE InsertDtldCustLedgEntryUnapply@91(VAR GenJnlLine@1002 : Record 81;VAR SavedGenJnlLine@1210001 : Record 81;VAR NewDtldCustLedgEntry@1000 : Record 379;OldDtldCustLedgEntry@1001 : Record 379;VAR NextDtldLedgEntryNo@1003 : Integer);
    VAR
      CustLedgEntry2@1210000 : Record 21;
    BEGIN
      NewDtldCustLedgEntry := OldDtldCustLedgEntry;
      WITH NewDtldCustLedgEntry DO BEGIN
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldCustLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldCustLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldCustLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldCustLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldCustLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldCustLedgEntry."Credit Amount (LCY)";
        Unapplied := TRUE;
        "Unapplied by Entry No." := OldDtldCustLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          "Customer Posting Group" := OldDtldCustLedgEntry."Customer Posting Group";
          SavedGenJnlLine := GenJnlLine;
          IF Prepayment THEN BEGIN
            CustLedgEntry2.GET("Cust. Ledger Entry No.");
            "Document No." := CustLedgEntry2."Document No.";
            GenJnlLine."Document No." := CustLedgEntry2."Document No.";
            GenJnlLine.Description := CustLedgEntry2.Description;
          END;
        END;
        INSERT(TRUE);
      END;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertDtldVendLedgEntryUnapply@90(VAR GenJnlLine@1003 : Record 81;VAR SavedGenJnlLine@1210001 : Record 81;VAR NewDtldVendLedgEntry@1002 : Record 380;OldDtldVendLedgEntry@1001 : Record 380;VAR NextDtldLedgEntryNo@1000 : Integer);
    VAR
      VendLedgEntry2@1210000 : Record 25;
    BEGIN
      NewDtldVendLedgEntry := OldDtldVendLedgEntry;
      WITH NewDtldVendLedgEntry DO BEGIN
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldVendLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldVendLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldVendLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldVendLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldVendLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldVendLedgEntry."Credit Amount (LCY)";
        Unapplied := TRUE;
        "Unapplied by Entry No." := OldDtldVendLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          "Vendor Posting Group" := OldDtldVendLedgEntry."Vendor Posting Group";
          SavedGenJnlLine := GenJnlLine;
          IF Prepayment THEN BEGIN
            VendLedgEntry2.GET("Vendor Ledger Entry No.");
            "Document No." := VendLedgEntry2."Document No.";
            GenJnlLine."Document No." := VendLedgEntry2."Document No.";
            GenJnlLine.Description := VendLedgEntry2.Description;
          END;
        END;
        INSERT(TRUE);
      END;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertTempVATEntry@88(GenJnlLine@1002 : Record 81;VATEntry@1000 : Record 254;VAR TempVATEntryNo@1001 : Integer;VAR TempVATEntry@1003 : TEMPORARY Record 254);
    BEGIN
      TempVATEntry := VATEntry;
      WITH TempVATEntry DO BEGIN
        "Entry No." := TempVATEntryNo;
        TempVATEntryNo := TempVATEntryNo + 1;
        "Closed by Entry No." := 0;
        Closed := FALSE;
        CopyAmountsFromVATEntry(VATEntry,TRUE);
        "Posting Date" := GenJnlLine."Posting Date";
        "Document No." := GenJnlLine."Document No.";
        "User ID" := USERID;
        "Transaction No." := NextTransactionNo;
        IF GLSetup."Enable Russian Accounting" THEN BEGIN
          Positive := Amount > 0;
          "Additional VAT Ledger Sheet" := TRUE;
          "Corrected Document Date" := VATEntry."Posting Date";
        END;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ProcessTempVATEntry@87(DtldCVLedgEntryBuf@1000 : Record 383;VAR TempVATEntry@1004 : TEMPORARY Record 254);
    VAR
      VATEntrySaved@1005 : Record 254;
      VATBaseSum@1003 : ARRAY [3] OF Decimal;
      DeductedVATBase@1006 : Decimal;
      EntryNoBegin@1002 : ARRAY [3] OF Integer;
      i@1001 : Integer;
    BEGIN
      IF NOT (DtldCVLedgEntryBuf."Entry Type" IN
              [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
               DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
               DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"])
      THEN
        EXIT;

      DeductedVATBase := 0;
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Entry No.",0,999999);
      TempVATEntry.SETRANGE("Gen. Bus. Posting Group",DtldCVLedgEntryBuf."Gen. Bus. Posting Group");
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",DtldCVLedgEntryBuf."VAT Bus. Posting Group");
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",DtldCVLedgEntryBuf."VAT Prod. Posting Group");
      IF TempVATEntry.FINDSET THEN
        REPEAT
          CASE TRUE OF
            VATBaseSum[3] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 4;
            VATBaseSum[2] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 3;
            VATBaseSum[1] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 2;
            TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 1;
            ELSE
              i := 0;
          END;
          IF i > 0 THEN BEGIN
            TempVATEntry.RESET;
            IF i > 1 THEN BEGIN
              IF EntryNoBegin[i - 1] < TempVATEntry."Entry No." THEN
                TempVATEntry.SETRANGE("Entry No.",EntryNoBegin[i - 1],TempVATEntry."Entry No.")
              ELSE
                TempVATEntry.SETRANGE("Entry No.",TempVATEntry."Entry No.",EntryNoBegin[i - 1]);
            END ELSE
              TempVATEntry.SETRANGE("Entry No.",TempVATEntry."Entry No.");
            TempVATEntry.FINDSET;
            REPEAT
              VATEntrySaved := TempVATEntry;
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 2000000);
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 1000000);
              END;
              TempVATEntry := VATEntrySaved;
              DeductedVATBase += TempVATEntry.Base;
            UNTIL TempVATEntry.NEXT = 0;
            FOR i := 1 TO 3 DO BEGIN
              VATBaseSum[i] := 0;
              EntryNoBegin[i] := 0;
            END;
            TempVATEntry.SETRANGE("Entry No.",0,999999);
          END ELSE BEGIN
            VATBaseSum[3] += TempVATEntry.Base;
            VATBaseSum[2] := VATBaseSum[1] + TempVATEntry.Base;
            VATBaseSum[1] := TempVATEntry.Base;
            IF EntryNoBegin[3] > 0 THEN
              EntryNoBegin[3] := TempVATEntry."Entry No.";
            EntryNoBegin[2] := EntryNoBegin[1];
            EntryNoBegin[1] := TempVATEntry."Entry No.";
          END;
        UNTIL TempVATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateCustLedgEntry@80(DtldCustLedgEntry@1000 : Record 379);
    VAR
      CustLedgEntry@1001 : Record 21;
    BEGIN
      IF DtldCustLedgEntry."Entry Type" <> DtldCustLedgEntry."Entry Type"::Application THEN
        EXIT;

      CustLedgEntry.GET(DtldCustLedgEntry."Cust. Ledger Entry No.");
      CustLedgEntry."Remaining Pmt. Disc. Possible" := DtldCustLedgEntry."Remaining Pmt. Disc. Possible";
      CustLedgEntry."Max. Payment Tolerance" := DtldCustLedgEntry."Max. Payment Tolerance";
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      IF NOT CustLedgEntry.Open THEN BEGIN
        CustLedgEntry.Open := TRUE;
        CustLedgEntry."Closed by Entry No." := 0;
        CustLedgEntry."Closed at Date" := 0D;
        CustLedgEntry."Closed by Amount" := 0;
        CustLedgEntry."Closed by Amount (LCY)" := 0;
        CustLedgEntry."Closed by Currency Code" := '';
        CustLedgEntry."Closed by Currency Amount" := 0;
        CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
        CustLedgEntry."Pmt. Tolerance (LCY)" := 0;
        CustLedgEntry."Calculate Interest" := FALSE;
      END;
      CustLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateVendLedgEntry@76(DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      IF DtldVendLedgEntry."Entry Type" <> DtldVendLedgEntry."Entry Type"::Application THEN
        EXIT;

      VendLedgEntry.GET(DtldVendLedgEntry."Vendor Ledger Entry No.");
      VendLedgEntry."Remaining Pmt. Disc. Possible" := DtldVendLedgEntry."Remaining Pmt. Disc. Possible";
      VendLedgEntry."Max. Payment Tolerance" := DtldVendLedgEntry."Max. Payment Tolerance";
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      IF NOT VendLedgEntry.Open THEN BEGIN
        VendLedgEntry.Open := TRUE;
        VendLedgEntry."Closed by Entry No." := 0;
        VendLedgEntry."Closed at Date" := 0D;
        VendLedgEntry."Closed by Amount" := 0;
        VendLedgEntry."Closed by Amount (LCY)" := 0;
        VendLedgEntry."Closed by Currency Code" := '';
        VendLedgEntry."Closed by Currency Amount" := 0;
        VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
        VendLedgEntry."Pmt. Tolerance (LCY)" := 0;
      END;
      VendLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateCalcInterest@28(VAR CVLedgEntryBuf@1000 : Record 382);
    VAR
      CustLedgEntry@1001 : Record 21;
      CVLedgEntryBuf2@1002 : Record 382;
    BEGIN
      WITH CVLedgEntryBuf DO BEGIN
        IF CustLedgEntry.GET("Closed by Entry No.") THEN BEGIN
          CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
          UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
        END;
        CustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
        CustLedgEntry.SETRANGE("Closed by Entry No.","Entry No.");
        IF CustLedgEntry.FINDSET THEN
          REPEAT
            CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
            UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
          UNTIL CustLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateCalcInterest2@27(VAR CVLedgEntryBuf@1000 : Record 382;VAR CVLedgEntryBuf2@1001 : Record 382);
    BEGIN
      WITH CVLedgEntryBuf DO
        IF "Due Date" < CVLedgEntryBuf2."Document Date" THEN
          "Calculate Interest" := TRUE;
    END;

    LOCAL PROCEDURE GLCalcAddCurrency@35(Amount@1003 : Decimal;AddCurrAmount@1000 : Decimal;OldAddCurrAmount@1004 : Decimal;UseAddCurrAmount@1001 : Boolean;GenJnlLine@1002 : Record 81;VAR GLEntry@1101495000 : Record 17) : Decimal;
    BEGIN
      IF

      //NC NCS-1820.5 > DP
      (
      //NC NCS-1820.5 < DP
        (AddCurrencyCode <> '') AND
         (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None) AND
         (NOT GenJnlLine."Prepmt. Diff." OR NOT GLSetup."Enable Russian Accounting")

      //NC NCS-1820.5 > DP
      )
      //NC NCS-1820.5 < DP

         //NC NCS-1820 > DP
         OR GenJnlLine."Allocation Entry"
         //NC NCS-1820 < DP
      THEN BEGIN
        IF (GenJnlLine."Source Currency Code" = AddCurrencyCode) AND UseAddCurrAmount
          //NC APCOC-89 > DP
          AND NOT GenJnlLine."Currency Index Entry"
          //NC APCOC-89 < DP
        THEN
          EXIT(AddCurrAmount);


        //NC NCS-1820 > DP
        //NC NCS-1820.5 > DP
        IF GenJnlLine."Allocation Entry" THEN BEGIN
        //NC NCS-1820.5 < DP
          //NC NCS-1820.3 > DP
          GLEntry."Allocation For Dim. 1" := TRUE;
          //NC NCS-1820.3 < DP

          //NC NCS-1866 < DP
          //GLEntry."Additional-Currency Amount" := GenJnlLine."Allocation ACY Amount"; //NC NOS-26 SPA
          EXIT(GenJnlLine."Allocation ACY Amount");
          //NC NCS-1866 < DP

        //NC NCS-1820 < DP

        //NC NCS-1820.5 > DP
        END;
        //NC NCS-1820.5 < DP

        EXIT(ExchangeAmtLCYToFCY2(Amount));
      END;
      EXIT(OldAddCurrAmount);
    END;

    LOCAL PROCEDURE HandleAddCurrResidualGLEntry@38(GenJnlLine@1003 : Record 81;Amount@1000 : Decimal;AmountAddCurr@1001 : Decimal);
    VAR
      GLAcc@1002 : Record 15;
      GLEntry@1004 : Record 17;
      locExtSystem@1101495000 : Record 50065;
      DefDim@1101495001 : Record 352;
      TempDimSetEntry@1101495002 : TEMPORARY Record 480;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      TotalAddCurrAmount := TotalAddCurrAmount + AmountAddCurr;
      TotalAmount := TotalAmount + Amount;

      IF (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None) AND
         (TotalAmount = 0) AND (TotalAddCurrAmount <> 0) AND
         CheckNonAddCurrCodeOccurred(GenJnlLine."Source Currency Code")
      THEN BEGIN
        GLEntry.INIT;
        GLEntry.CopyFromGenJnlLine(GenJnlLine);
        GLEntry."External Document No." := '';
        GLEntry.Description :=
          COPYSTR(
            STRSUBSTNO(
              ResidualRoundingErr,
              GLEntry.FIELDCAPTION("Additional-Currency Amount")),
            1,MAXSTRLEN(GLEntry.Description));
        GLEntry."Source Type" := 0;
        GLEntry."Source No." := '';
        GLEntry."Job No." := '';
        GLEntry.Quantity := 0;
        GLEntry."Entry No." := NextEntryNo;
        GLEntry."Transaction No." := NextTransactionNo;
        IF TotalAddCurrAmount < 0 THEN
          GLEntry."G/L Account No." := AddCurrency."Residual Losses Account"
        ELSE
          GLEntry."G/L Account No." := AddCurrency."Residual Gains Account";
        GLEntry.Amount := 0;
        GLEntry."System-Created Entry" := TRUE;
        GLEntry."Additional-Currency Amount" := -TotalAddCurrAmount;
        GLEntry."Source Type" := TempGLEntryBuf."Source Type";
        GLEntry."Source No." := TempGLEntryBuf."Source No.";

        //NC PIF010 > MP
        GLEntry."Not Consolidate" := TempGLEntryBuf."Not Consolidate";
        GLEntry."Transaction Type" := TempGLEntryBuf."Transaction Type";
        GLEntry."Historical Date" := TempGLEntryBuf."Historical Date";
        GLEntry."Buffer Entry No." := TempGLEntryBuf."Buffer Entry No.";
        GLEntry."Cons. Source Code" := TempGLEntryBuf."Cons. Source Code";
        GLEntry."Export Cons. Source Code" := TempGLEntryBuf."Export Cons. Source Code";
        GLEntry."Export Register No." := TempGLEntryBuf."Export Register No.";
        //NC PIF010 < MP

        //NC #6455 > DP
        GLEntry."Null Original Amount" := TRUE;
        GLEntry."Original Amount" := 0;
        GLEntry."Original Debit Amount" := 0;
        GLEntry."Original Credit Amount" := 0;
        //NC #6455 < DP

        //NC APCOC-92 DP
        GLEntry."Not Translate" := GenJnlLine."Not Translate";
        //NC APCOC-92 DP
        //NC APCOC-117 > RD
        GLEntry."Not Translate IFRS" := GenJnlLine."Not Translate IFRS";
        //NC APCOC-117 < RD

        //NC NCS-2166 > DP
        IF locExtSystem.GET(GLEntry."External System ID") THEN BEGIN
          IF locExtSystem."Not Translate" THEN
           GLEntry."Not Translate" := locExtSystem."Not Translate";
          IF locExtSystem."Not Translate IFRS" THEN
            GLEntry."Not Translate IFRS" := locExtSystem."Not Translate IFRS";
        END;
        //NC NCS-2166 < DP

        GLAcc.GET(GLEntry."G/L Account No.");
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);

        //NC MDR01 > MP
        DefDim.RESET;
        DefDim.SETRANGE("Table ID",15);
        DefDim.SETRANGE("No.",GLEntry."G/L Account No.");
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        IF DefDim.FINDSET THEN BEGIN
          //NC NOS-26 > SPA
          IF GLEntry."Dimension Set ID" <> 0 THEN
            DimMgt.GetDimensionSet(TempDimSetEntry, GLEntry."Dimension Set ID");
          //NC NOS-26 < SPA
          REPEAT
            //NC NOS-26 > SPA
            {
            TempJnlLineDim.INIT;
            //TDRAAPCOC-129 25/10/12 commented>
            //TempJnlLineDim."Table ID" := 81;
            //TDRAAPCOC-129 25/10/12<
            TempJnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
            TempJnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
            TempJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
            TempJnlLineDim."Allocation Line No." := 0;
            TempJnlLineDim."Dimension Code" := DefDim."Dimension Code";
            TempJnlLineDim."Dimension Value Code" := DefDim."Dimension Value Code";
            IF NOT TempJnlLineDim.INSERT THEN
              //NC MDR01.1 > DP
              {
              TempJnlLineDim.MODIFY
              }
              ;
              //NC MDR01.1 < DP
            }
            TempDimSetEntry."Dimension Code" := DefDim."Dimension Code";
            IF NOT TempDimSetEntry.FIND THEN BEGIN
              TempDimSetEntry.VALIDATE("Dimension Value Code", DefDim."Dimension Value Code");
              TempDimSetEntry.INSERT;
            END;
            //NC NOS-26 < SPA
          UNTIL DefDim.NEXT = 0;

          //NC NOS-26 > SPA
          GLEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
          DimMgt.UpdateGlobalDimFromDimSetID(GLEntry."Dimension Set ID",
            GLEntry."Global Dimension 1 Code",
            GLEntry."Global Dimension 2 Code");
          //NC NOS-26 < SPA
        END;
        //NC MDR01 < MP

        InsertGLEntry(GenJnlLine,GLEntry,FALSE);

        CheckGLAccDimError(GenJnlLine,GLEntry."G/L Account No.",
          FALSE); // NC NOS-26 SPA

        TotalAddCurrAmount := 0;
      END;
    END;

    LOCAL PROCEDURE CalcLCYToAddCurr@42(AmountLCY@1000 : Decimal) : Decimal;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      EXIT(ExchangeAmtLCYToFCY2(AmountLCY));
    END;

    LOCAL PROCEDURE GetCurrencyExchRate@39(GenJnlLine@1001 : Record 81);
    VAR
      NewCurrencyDate@1000 : Date;
      GenJnlTemplate@1101495000 : Record 80;
      Currency@1101495001 : Record 4;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      AddCurrency.GET(AddCurrencyCode);
      AddCurrency.TESTFIELD("Amount Rounding Precision");
      AddCurrency.TESTFIELD("Residual Gains Account");
      AddCurrency.TESTFIELD("Residual Losses Account");

      NewCurrencyDate := GenJnlLine."Posting Date";
      //NC MAU02 > MP
      IF GenJnlLine."Source Historical Date" <> 0D THEN
        NewCurrencyDate := GenJnlLine."Source Historical Date";
      //NC MAU02 < MP
      //NC NCS-1500 > DP
      IF GenJnlTemplate.GET(GenJnlLine."Journal Template Name") AND
        GenJnlTemplate.Recurring
      THEN
      //NC NCS-1500 < DP
        //TD APCOC-110 KKA >
        IF GenJnlLine."Posting Date"=GenJnlLine."Source Historical Date" THEN
        //TD APCOC-110 KKA <
          IF GenJnlLine."Reversing Entry" THEN
            NewCurrencyDate := NewCurrencyDate - 1;
          IF (NewCurrencyDate <> CurrencyDate) OR
             UseCurrFactorOnly
          THEN BEGIN
            UseCurrFactorOnly := FALSE;
            //NC OAM50 > DP
            IF Currency.GET(GLSetup."Additional Reporting Currency") AND
              (Currency."Search Method" = Currency."Search Method"::"As of Date")
            THEN
              CurrencyDate := NORMALDATE(NewCurrencyDate)
            ELSE
            //NC OAM50 < DP
            CurrencyDate := NewCurrencyDate;
            CurrencyFactor :=
              CurrExchRate.ExchangeRate(CurrencyDate,AddCurrencyCode);
          END;

      IF (GenJnlLine."FA Add.-Currency Factor" <> 0) AND
         (GenJnlLine."FA Add.-Currency Factor" <> CurrencyFactor)
      THEN BEGIN
        UseCurrFactorOnly := TRUE;
        CurrencyDate := 0D;
        CurrencyFactor := GenJnlLine."FA Add.-Currency Factor";
      END;
    END;

    PROCEDURE PostVendVATSettlement@1210013(GenJnlLine@1170000000 : Record 81;VAR VendLedgEntry2@1210017 : Record 25;VAR GenJnlLine2@1210016 : Record 81);
    VAR
      PrepmtDiffVATEntry@1210001 : Record 254;
      VATAllocationLine@1210000 : Record 14925;
      VATSettlementMgt@1470003 : Codeunit 12411;
      VATAllocationPost@1210003 : Codeunit 12417;
      VATPart@1470004 : Decimal;
      DeprAmount@1210004 : Decimal;
      DeprBook@1210005 : Code[10];
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);

      VATSettlementMgt.CheckFPE(GenJnlLine);

      GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
      GlobalGenJournalLine := GenJnlLine; // NC NOS-26 SPA

      StartPosting(GenJnlLine);

      VendLedgEntry2.CALCFIELDS(Amount,"Amount (LCY)","Remaining Amt. (LCY)","Original Amt. (LCY)");
      VendLedgEntry2."Currency Code" := '';
      CASE GenJnlLine."VAT Settlement Part" OF
        GenJnlLine."VAT Settlement Part"::" ":
          ;
        GenJnlLine."VAT Settlement Part"::Custom:
          BEGIN
            IF GenJnlLine2."Paid Amount" = 0 THEN
              VATPart := 0
            ELSE
              VATPart := GenJnlLine.Amount / GenJnlLine2."Paid Amount";
          END;
        ELSE
          VATPart := VATSettlementMgt.CalcUnrealVATPart(GenJnlLine);
      END;
      IF VATSettlementMgt.IsLastOperation(GenJnlLine) THEN
        VATPart := 1;

      IF GenJnlLine."VAT Settlement Part" <> GenJnlLine."VAT Settlement Part"::" " THEN
        GenJnlLine."VAT Transaction No." := 0
      ELSE
        IF VATPart <> 1 THEN BEGIN
          VendLedgEntry2."Remaining Amt. (LCY)" := -GenJnlLine.Amount;
          VendLedgEntry2.Open := TRUE;
        END;
      IF GenJnlLine."Prepmt. Diff." THEN BEGIN
        GenJnlLine.Correction := GenJnlLine.Amount > 0;
        VATPart := 1;
        PrepmtDiffVATEntry.GET(GenJnlLine."Unrealized VAT Entry No.");
        IF GenJnlLine."Posting Date" < PrepmtDiffVATEntry."Posting Date" THEN
          GenJnlLine."Posting Date" := PrepmtDiffVATEntry."Posting Date";
      END;

      VATAllocationLine.RESET;
      VATAllocationLine.SETRANGE("VAT Entry No.",GenJnlLine."Unrealized VAT Entry No.");
      IF VATAllocationLine.FINDSET THEN BEGIN
        REPEAT
          IF VATAllocationLine.Amount <> 0 THEN BEGIN
            GenJnlLine.Amount := VATAllocationLine.Amount;
            IF GenJnlLine2."Paid Amount" <> 0 THEN
              VATPart := GenJnlLine.Amount / GenJnlLine2."Paid Amount"
            ELSE
              VATPart := 0;
            GenJnlLine."VAT Amount" := VATAllocationLine."VAT Amount";
            GenJnlLine."VAT Base Amount" := VATAllocationLine."VAT Base Amount";
            GenJnlLine."VAT Allocation Type" := VATAllocationLine.Type;
            GenJnlLine."Account No." := VATAllocationLine."Account No.";
            GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
            IF VATAllocationLine."FA No." = '' THEN BEGIN
              GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
              GenJnlLine."Source No." := VendLedgEntry2."Vendor No.";
            END ELSE BEGIN
              GenJnlLine."Source Type" := GenJnlLine."Source Type"::"Fixed Asset";
              GenJnlLine."Source No." := VATAllocationLine."FA No.";
            END;
            GenJnlLine."Dimension Set ID" := VATAllocationLine."Dimension Set ID";

            GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108

            VendLedgEntry2.Description :=
              COPYSTR(GenJnlLine.Description + ' ' + VATAllocationLine.Description,
                1,MAXSTRLEN(VendLedgEntry2.Description));

            VendUnrealizedVAT(GenJnlLine,
              VendLedgEntry2,GenJnlLine.Amount,GenJnlLine."Unrealized VAT Entry No.",
              VATPart,GenJnlLine."VAT Transaction No.",VATAllocationLine."Line No.");

            IF VATAllocationLine."FA No." <> '' THEN BEGIN
              VATAllocationPost.PostFAAllocation(GenJnlLine2,VATAllocationLine,DeprAmount,DeprBook);
              IF DeprAmount <> 0 THEN
                PostVATAllocDepreciation(GenJnlLine2,VATAllocationLine,DeprAmount,DeprBook);
            END;
            GenJnlLine2."Paid Amount" := GenJnlLine2."Paid Amount" - GenJnlLine.Amount;
          END;
        UNTIL VATAllocationLine.NEXT = 0;
        VATEntry.GET(GenJnlLine."Unrealized VAT Entry No.");
        IF VATEntry."Remaining Unrealized Base" = 0 THEN
          VATAllocationLine.DELETEALL(TRUE);

        GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
      END ELSE
        VendUnrealizedVAT(GenJnlLine,
          VendLedgEntry2,GenJnlLine.Amount,GenJnlLine."Unrealized VAT Entry No.",
          VATPart,GenJnlLine."VAT Transaction No.",0);

      FinishPosting(GenJnlLine);
      GenJnlLine2 := GenJnlLine;
    END;

    PROCEDURE PostCustVATSettlement@1470007(GenJnlLine@1170000000 : Record 81;VAR CustLedgEntry2@1210017 : Record 21;VAR GenJnlLine2@1210016 : Record 81);
    VAR
      PrepmtDiffVATEntry@1210001 : Record 254;
      VATAllocationLine@1210000 : Record 14925;
      VATSettlementMgt@1470003 : Codeunit 12411;
      VATPart@1470004 : Decimal;
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);

      GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
      GlobalGenJournalLine := GenJnlLine; // NC NOS-26 SPA

      StartPosting(GenJnlLine);

      CustLedgEntry2.CALCFIELDS(Amount,"Amount (LCY)","Remaining Amt. (LCY)","Original Amt. (LCY)");
      CustLedgEntry2."Currency Code" := '';

      CASE GenJnlLine."VAT Settlement Part" OF
        GenJnlLine."VAT Settlement Part"::" ":
          ;
        GenJnlLine."VAT Settlement Part"::Custom:
          BEGIN
            IF GenJnlLine2."Paid Amount" = 0 THEN
              VATPart := 0
            ELSE
              VATPart := GenJnlLine.Amount / GenJnlLine2."Paid Amount";
          END;
        ELSE
          VATPart := VATSettlementMgt.CalcUnrealVATPart(GenJnlLine);
      END;
      IF VATSettlementMgt.IsLastOperation(GenJnlLine) THEN
        VATPart := 1;

      IF GenJnlLine."VAT Settlement Part" <> GenJnlLine."VAT Settlement Part"::" " THEN
        GenJnlLine."VAT Transaction No." := 0;

      IF GenJnlLine."Prepmt. Diff." THEN BEGIN
        GenJnlLine.Correction := GenJnlLine.Amount < 0;
        VATPart := 1;
        PrepmtDiffVATEntry.GET(GenJnlLine."Unrealized VAT Entry No.");
        IF GenJnlLine."Posting Date" < PrepmtDiffVATEntry."Posting Date" THEN
          GenJnlLine."Posting Date" := PrepmtDiffVATEntry."Posting Date";
      END;

      VATAllocationLine.RESET;
      VATAllocationLine.SETRANGE("VAT Entry No.",GenJnlLine."Unrealized VAT Entry No.");
      IF VATAllocationLine.FINDSET THEN BEGIN
        REPEAT
          IF VATAllocationLine.Amount <> 0 THEN BEGIN
            GenJnlLine.Amount := VATAllocationLine.Amount;
            IF GenJnlLine2."Paid Amount" <> 0 THEN
              VATPart := GenJnlLine.Amount / GenJnlLine2."Paid Amount"
            ELSE
              VATPart := 0;
            GenJnlLine."VAT Amount" := VATAllocationLine."VAT Amount";
            GenJnlLine."VAT Base Amount" := VATAllocationLine."VAT Base Amount";
            GenJnlLine."VAT Allocation Type" := VATAllocationLine.Type;
            GenJnlLine."Account No." := VATAllocationLine."Account No.";
            GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
            GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
            GenJnlLine."Source No." := CustLedgEntry2."Customer No.";
            GenJnlLine."Dimension Set ID" := VATAllocationLine."Dimension Set ID";

            GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108

            CustLedgEntry2.Description :=
              COPYSTR(GenJnlLine.Description + ' ' + VATAllocationLine.Description,
                1,MAXSTRLEN(CustLedgEntry2.Description));

            CustUnrealizedVAT(GenJnlLine,
              CustLedgEntry2,GenJnlLine.Amount,GenJnlLine."Unrealized VAT Entry No.",
              VATPart,VATAllocationLine."Line No.");

            GenJnlLine2."Paid Amount" := GenJnlLine2."Paid Amount" - GenJnlLine.Amount;
          END;
        UNTIL VATAllocationLine.NEXT = 0;
        VATEntry.GET(GenJnlLine."Unrealized VAT Entry No.");
        IF VATEntry."Remaining Unrealized Base" = 0 THEN
          VATAllocationLine.DELETEALL(TRUE);

        GlobalDimensionSetID := GenJnlLine."Dimension Set ID"; // TDRAAPCOC-108
      END ELSE
        CustUnrealizedVAT(GenJnlLine,
          CustLedgEntry2,GenJnlLine.Amount,GenJnlLine."Unrealized VAT Entry No.",VATPart,0);

      FinishPosting(GenJnlLine);
      GenJnlLine2 := GenJnlLine;
    END;

    PROCEDURE PostVendVATReinstatement@1210016(VAR GenJnlLine2@1210016 : Record 81);
    VAR
      GenJnlLine@1170000000 : Record 81;
      VATPostingSetup@1170000001 : Record 325;
      UnrealizedVATEntry@1210005 : Record 254;
      SourceVATEntry@1210000 : Record 254;
      NewVATEntry@1210001 : Record 254;
      GLEntry@1170000002 : Record 17;
      VATReinstMgt@1210002 : Codeunit 12418;
      ReinstatementAmount@1210004 : Decimal;
      ReinstatementBaseAmount@1210003 : Decimal;
      ReinstatementACAmount@1210007 : Decimal;
      ReinstatementBaseACAmount@1210006 : Decimal;
    BEGIN
      VATReinstMgt.CheckAmount(GenJnlLine2);
      GenJnlLine.COPY(GenJnlLine2);

      StartPosting(GenJnlLine);

      SourceVATEntry.GET(GenJnlLine2."Reinstatement VAT Entry No.");
      SourceVATEntry.TESTFIELD("Unrealized VAT Entry No.");

      ReinstatementAmount := GenJnlLine2.Amount;
      VATPostingSetup.GET(SourceVATEntry."VAT Bus. Posting Group",SourceVATEntry."VAT Prod. Posting Group");
      VATPostingSetup.TESTFIELD("Trans. VAT Type",VATPostingSetup."Trans. VAT Type"::" ");
      VATPostingSetup.TESTFIELD("Trans. VAT Account",'');
      VATPostingSetup.TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      ReinstatementBaseAmount := ROUND(ReinstatementAmount / VATPostingSetup."VAT %" * 100);
      ReinstatementACAmount := CalcLCYToAddCurr(ReinstatementAmount);
      ReinstatementBaseACAmount := CalcLCYToAddCurr(ReinstatementBaseAmount);

      NewVATEntry := SourceVATEntry;
      NewVATEntry."Entry No." := NextVATEntryNo;
      NewVATEntry."Transaction No." := NextTransactionNo;
      NewVATEntry."Posting Date" := GenJnlLine2."Posting Date";
      NewVATEntry."Document Date" := GenJnlLine2."Document Date";
      NewVATEntry.Amount := -ReinstatementAmount;
      NewVATEntry.Base := -ReinstatementBaseAmount;
      NewVATEntry.Positive := FALSE;
      NewVATEntry."VAT Reinstatement" := TRUE;
      NewVATEntry."User ID" := USERID;
      NewVATEntry.INSERT(TRUE);

      NextVATEntryNo := NextVATEntryNo + 1;

      UnrealizedVATEntry.GET(SourceVATEntry."Unrealized VAT Entry No.");
      UnrealizedVATEntry."Remaining Unrealized Amount" :=
        UnrealizedVATEntry."Remaining Unrealized Amount" + ReinstatementAmount;
      UnrealizedVATEntry."Remaining Unrealized Base" :=
        UnrealizedVATEntry."Remaining Unrealized Base" + ReinstatementBaseAmount;
      UnrealizedVATEntry."Add.-Curr. Rem. Unreal. Amount" :=
        UnrealizedVATEntry."Add.-Currency Unrealized Amt." + ReinstatementACAmount;
      UnrealizedVATEntry."Add.-Currency Unrealized Base" :=
        UnrealizedVATEntry."Add.-Currency Unrealized Base" + ReinstatementBaseACAmount;
      UnrealizedVATEntry.MODIFY;

      VATPostingSetup.GET(SourceVATEntry."VAT Bus. Posting Group",SourceVATEntry."VAT Prod. Posting Group");

      VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
      InitGLEntry(GenJnlLine,GLEntry,
        VATPostingSetup."Purch. VAT Unreal. Account",
        ReinstatementAmount,ReinstatementACAmount,TRUE,TRUE);
      GLEntry."Bal. Account No." := VATPostingSetup."Purchase VAT Account";
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);

      VATPostingSetup.TESTFIELD("Purchase VAT Account");
      InitGLEntry(GenJnlLine,GLEntry,
        VATPostingSetup."Purchase VAT Account",
        -ReinstatementAmount,-ReinstatementACAmount,TRUE,TRUE);
      GLEntry."Bal. Account No." := VATPostingSetup."Purch. VAT Unreal. Account";
      GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Purchase;
      GLEntry."Gen. Bus. Posting Group" := SourceVATEntry."Gen. Bus. Posting Group";
      GLEntry."Gen. Prod. Posting Group" := SourceVATEntry."Gen. Prod. Posting Group";
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);

      FinishPosting(GenJnlLine);
      GenJnlLine2 := GenJnlLine;
    END;

    LOCAL PROCEDURE PostCustBackPrepayment@1210003(GenJnlLine@1170000000 : Record 81;VAR DtldCVLedgEntryBuf@1470000 : Record 383;CustPostingGr@1170000002 : Record 92);
    VAR
      GLEntry@1170000001 : Record 17;
      UseAddCurrAmount@1470002 : Boolean;
    BEGIN
      IF FinVoidedCheck THEN
        EXIT;

      IF NOT DtldCVLedgEntryBuf.Prepayment THEN
        EXIT;

      IF GenJnlLine."Prepayment Status" = GenJnlLine."Prepayment Status"::Reset THEN
        EXIT;

      IF (DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0) THEN BEGIN
        UseAddCurrAmount := DtldCVLedgEntryBuf."Currency Code" <> '';
        IF UseAddCurrAmount AND
           (DtldCVLedgEntryBuf."Currency Code" = AddCurrencyCode)
        THEN
          DtldCVLedgEntryBuf."Additional-Currency Amount" := DtldCVLedgEntryBuf.Amount;
        InitGLEntry(GenJnlLine,GLEntry,
          CustPostingGr."Receivables Account",
          -DtldCVLedgEntryBuf."Amount (LCY)",
          -DtldCVLedgEntryBuf."Additional-Currency Amount",UseAddCurrAmount,TRUE);
        GLEntry."Bal. Account Type" := GLEntry."Bal. Account Type"::"G/L Account";
        GLEntry."Bal. Account No." := CustPostingGr."Prepayment Account";

        //NC OFA020.2 > DP
        GLEntry."Original Currency Code" := DtldCVLedgEntryBuf."Currency Code";
        GLEntry."Original Amount" := - DtldCVLedgEntryBuf.Amount;
        IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
          ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
        THEN BEGIN
          GLEntry."Original Debit Amount" := GLEntry."Original Amount";
          GLEntry."Original Credit Amount" := 0;
        END ELSE BEGIN
          GLEntry."Original Debit Amount" := 0;
          GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
        END;
        //NC OFA020.2 < DP

        InsertRUGLEntry(GenJnlLine,GLEntry,
          CustPostingGr."Prepayment Account",TRUE,UseAddCurrAmount,FALSE);
      END;
    END;

    LOCAL PROCEDURE InsertCustGLEntry@1210008(GenJnlLine@1170000000 : Record 81;DtldCVLedgEntryBuf@1470003 : Record 383;CustPostingGr@1170000002 : Record 92);
    VAR
      TempGenJnlLine@1210008 : Record 81;
      SavedGenJnlLine@1210004 : Record 81;
      CustLedgerEntry@1210003 : Record 21;
      GLEntry@1170000001 : Record 17;
      SalesSetup@1170000003 : Record 311;
      VATPostingSetup@1170000004 : Record 325;
      VATPrepmtPost@1470000 : Codeunit 12410;
    BEGIN
      WITH GenJnlLine DO BEGIN
        InitGLEntry(GenJnlLine,GLEntry,
          CustPostingGr.GetPrepaymentAccount(DtldCVLedgEntryBuf.Prepayment),
          DtldCVLedgEntryBuf."Amount (LCY)",
          DtldCVLedgEntryBuf."Additional-Currency Amount",TRUE,TRUE);
        GLEntry."Entry No." := DtldCVLedgEntryBuf."CV Ledger Entry No.";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        IF "Prepayment Status" <> "Prepayment Status"::" " THEN
          GLEntry."Bal. Account No." := CustPostingGr.GetPrepaymentAccount(NOT DtldCVLedgEntryBuf.Prepayment);
        NextEntryNo := NextEntryNo - 1;

        IF NOT DtldCVLedgEntryBuf.Prepayment OR ("Prepayment Status" = "Prepayment Status"::Reset) THEN
          InsertGLEntry(GenJnlLine,GLEntry,TRUE)
        ELSE BEGIN
          TempGenJnlLine.INIT;
          TempGenJnlLine."Posting Date" := "Posting Date";
          TempGenJnlLine."Document Type" := TempGenJnlLine."Document Type"::Payment;
          TempGenJnlLine."Document No." := "Document No.";
          TempGenJnlLine."External Document No." := "External Document No.";
          TempGenJnlLine.Prepayment := Prepayment;
          TempGenJnlLine.VALIDATE("Account No.",CustPostingGr."Prepayment Account");
          TempGenJnlLine.VALIDATE(Amount,DtldCVLedgEntryBuf."Amount (LCY)");
          TempGenJnlLine."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
          TempGenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          TempGenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          TempGenJnlLine."Source Code" := "Source Code";
          TempGenJnlLine."Source Type" := TempGenJnlLine."Source Type"::Customer ;
          TempGenJnlLine."Source No." := DtldCVLedgEntryBuf."CV No.";
          TempGenJnlLine.Correction := Correction;
          TempGenJnlLine.Description := Description;
          TempGenJnlLine."Prepayment Status" := "Prepayment Status";
          TempGenJnlLine."Prepayment Document No." := "Prepayment Document No.";

          CustLedgerEntry.GET(DtldCVLedgEntryBuf."CV Ledger Entry No.");
          SalesSetup.GET;
          IF SalesSetup."Create Prepayment Invoice" THEN
            CustLedgerEntry."Prepayment Document No." :=
              VATPrepmtPost.InsertSalesInvoice(TempGenJnlLine)
          ELSE
            CustLedgerEntry."Prepayment Document No." := "Document No.";
          CustLedgerEntry.MODIFY;

          SavedGenJnlLine := GenJnlLine;
          GenJnlLine := TempGenJnlLine;

          InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
          InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
          GenJnlLine := SavedGenJnlLine;
        END;
      END;
    END;

    LOCAL PROCEDURE PostVendBackPrepayment@1210007(GenJnlLine@1170000000 : Record 81;DtldCVLedgEntryBuf@1470002 : Record 383;VendPostingGr@1170000002 : Record 93;Unapply@1210004 : Boolean);
    VAR
      UnrealizedVATEntry@1210000 : Record 254;
      VendLedgEntry@1210001 : Record 25;
      GLEntry@1170000001 : Record 17;
      VATSettlementMgt@1210002 : Codeunit 12411;
      UseAddCurrAmount@1210003 : Boolean;
    BEGIN
      IF NOT DtldCVLedgEntryBuf.Prepayment THEN
        EXIT;

      IsVendBackPrepmt := TRUE;
      IF NOT FinVoidedCheck THEN
        IF GenJnlLine."Prepayment Status" <> GenJnlLine."Prepayment Status"::Reset THEN
          IF (DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0)
          THEN BEGIN
            UseAddCurrAmount := DtldCVLedgEntryBuf."Currency Code" <> '';
            IF UseAddCurrAmount AND
               (DtldCVLedgEntryBuf."Currency Code" = AddCurrencyCode)
            THEN
              DtldCVLedgEntryBuf."Additional-Currency Amount" := DtldCVLedgEntryBuf.Amount;
            InitGLEntry(GenJnlLine,GLEntry,
              VendPostingGr."Payables Account",
              -DtldCVLedgEntryBuf."Amount (LCY)",
              -DtldCVLedgEntryBuf."Additional-Currency Amount",UseAddCurrAmount,TRUE);
            GLEntry."Bal. Account Type" := GLEntry."Bal. Account Type"::"G/L Account";
            GLEntry."Bal. Account No." := VendPostingGr."Prepayment Account";

            //NC OFA020.2 > DP
            GLEntry."Original Currency Code" := DtldCVLedgEntryBuf."Currency Code";
            GLEntry."Original Amount" := - DtldCVLedgEntryBuf.Amount;
            IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
              ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
            THEN BEGIN
              GLEntry."Original Debit Amount" := GLEntry."Original Amount";
              GLEntry."Original Credit Amount" := 0;
            END ELSE BEGIN
              GLEntry."Original Debit Amount" := 0;
              GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
            END;
            //NC OFA020.2 < DP

            InsertGLEntry(GenJnlLine,GLEntry,TRUE);

            VendPostingGr.TESTFIELD("Prepayment Account");
            InitGLEntry(GenJnlLine,GLEntry,
              VendPostingGr."Prepayment Account",
              DtldCVLedgEntryBuf."Amount (LCY)",
              DtldCVLedgEntryBuf."Additional-Currency Amount",UseAddCurrAmount,TRUE);
            GLEntry."Bal. Account Type" := GLEntry."Bal. Account Type"::"G/L Account";
            GLEntry."Bal. Account No." := VendPostingGr."Payables Account";

            //NC OFA020.2 > DP
            GLEntry."Original Currency Code" := DtldCVLedgEntryBuf."Currency Code";
            GLEntry."Original Amount" :=  DtldCVLedgEntryBuf.Amount;

            IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
              ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
            THEN BEGIN
              GLEntry."Original Debit Amount" := GLEntry."Original Amount";
              GLEntry."Original Credit Amount" := 0;
            END ELSE BEGIN
              GLEntry."Original Debit Amount" := 0;
              GLEntry."Original Credit Amount" := -GLEntry."Original Amount";
            END;
            //NC OFA020.2 < DP

            InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          END;

      IF NOT Unapply THEN BEGIN
        VendLedgEntry.GET(DtldCVLedgEntryBuf."CV Ledger Entry No.");
        VendLedgEntry."Currency Code" := '';
        UnrealizedVATEntry.SETCURRENTKEY("Transaction No.","CV Ledg. Entry No.");
        UnrealizedVATEntry.SETRANGE("CV Ledg. Entry No.",DtldCVLedgEntryBuf."CV Ledger Entry No.");
        UnrealizedVATEntry.SETRANGE("Unrealized VAT Entry No.",0);
        UnrealizedVATEntry.SETRANGE(Prepayment,TRUE);
        IF UnrealizedVATEntry.FINDSET THEN
          REPEAT
            GenJnlLine."Document Type" := UnrealizedVATEntry."Document Type";
            GenJnlLine."Document No." := UnrealizedVATEntry."Document No.";
            VendLedgEntry."Transaction No." := UnrealizedVATEntry."Transaction No.";
            IF NOT VATSettlementMgt.VATIsPostponed(UnrealizedVATEntry,0,GenJnlLine."Posting Date") THEN BEGIN
              VendLedgEntry.CALCFIELDS(
                "Amount (LCY)","Original Amt. (LCY)","Amount (LCY)","Remaining Amt. (LCY)");
              VendUnrealizedVAT(GenJnlLine,
                VendLedgEntry,DtldCVLedgEntryBuf."Amount (LCY)",UnrealizedVATEntry."Entry No.",0,0,0);
              CheckUnrealizedVend := FALSE;
            END;
          UNTIL UnrealizedVATEntry.NEXT = 0;
      END;
      IsVendBackPrepmt := FALSE;
    END;

    LOCAL PROCEDURE InsertVendGLEntry@1470004(GenJnlLine@1170000000 : Record 81;DtldCVLedgEntryBuf@1470003 : Record 383;VendPostingGr@1470004 : Record 93);
    VAR
      GLEntry@1170000001 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,
        VendPostingGr.GetPrepaymentAccount(DtldCVLedgEntryBuf.Prepayment),
        DtldCVLedgEntryBuf."Amount (LCY)",
        DtldCVLedgEntryBuf."Additional-Currency Amount",TRUE,TRUE);
      GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
      GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
      GLEntry."Source Type" := GLEntry."Source Type"::Vendor;
      GLEntry."Source No." := DtldCVLedgEntryBuf."CV No.";
      GLEntry."Entry No." := DtldCVLedgEntryBuf."CV Ledger Entry No.";
      NextEntryNo := NextEntryNo - 1;
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);

      InsertVATAgentVATPmtGLEntry(GenJnlLine,DtldCVLedgEntryBuf."Amount (LCY)");
    END;

    PROCEDURE RUFindAmtForAppln@1210001(VAR NewCVLedgEntryBuf@1210005 : Record 382;VAR OldCVLedgEntryBuf@1210004 : Record 382;VAR AppliedAmount@1210002 : Decimal;VAR AppliedAmountLCY@1210001 : Decimal;VAR OldAppliedAmount@1210000 : Decimal;ApplnRoundingPrecision@1470000 : Decimal);
    VAR
      PayEntryBuf@1210007 : TEMPORARY Record 382;
      InvEntryBuf@1210008 : TEMPORARY Record 382;
      SaveAmount@1210009 : Decimal;
      InvAmount@1470001 : Decimal;
      PayAmount@1470002 : Decimal;
      ReplaceEntries@1470003 : Boolean;
    BEGIN
      IF NOT GLSetup."Enable Russian Accounting" THEN
        EXIT;

      IF (NewCVLedgEntryBuf."Currency Code" = '') AND (OldCVLedgEntryBuf."Currency Code" = '') THEN
        EXIT;
      IF (NewCVLedgEntryBuf."Currency Code" <> OldCVLedgEntryBuf."Currency Code") AND
         (NewCVLedgEntryBuf."Currency Code" <> '') AND (OldCVLedgEntryBuf."Currency Code" <> '')
      THEN
        EXIT;

      ReplaceEntries :=
        (NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::" ",
                                               NewCVLedgEntryBuf."Document Type"::Payment,
                                               NewCVLedgEntryBuf."Document Type"::Refund]);
      IF NOT ReplaceEntries THEN BEGIN
        InvEntryBuf := NewCVLedgEntryBuf;
        PayEntryBuf := OldCVLedgEntryBuf;
      END ELSE BEGIN
        PayEntryBuf := NewCVLedgEntryBuf;
        InvEntryBuf := OldCVLedgEntryBuf;
      END;

      IF PayEntryBuf."Currency Code" = InvEntryBuf."Currency Code" THEN BEGIN
        InvAmount := GetRemAmount(InvEntryBuf,ApplnRoundingPrecision);
        PayAmount := GetRemAmount(PayEntryBuf,ApplnRoundingPrecision);
        IF ABS(InvAmount) <= ABS(PayAmount) THEN
          AppliedAmount := InvAmount
        ELSE
          AppliedAmount := -PayAmount;
        OldAppliedAmount := AppliedAmount;
        IF PayEntryBuf."Posting Date" > InvEntryBuf."Posting Date" THEN
          AppliedAmountLCY := ROUND(OldAppliedAmount / PayEntryBuf."Original Currency Factor")
        ELSE
          AppliedAmountLCY := ROUND(OldAppliedAmount / InvEntryBuf."Original Currency Factor");
        IF GLSetup."Cancel Curr. Prepmt. Adjmt." AND PayEntryBuf.Prepayment THEN
          AppliedAmountLCY := ROUND(OldAppliedAmount / PayEntryBuf."Original Currency Factor");
      END ELSE
        CASE TRUE OF
          PayEntryBuf."Currency Code" = '':
            CalcAppliedAmounts(InvEntryBuf,PayEntryBuf,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision,1);
          InvEntryBuf."Currency Code" = '':
            CalcAppliedAmounts(PayEntryBuf,InvEntryBuf,OldAppliedAmount,AppliedAmountLCY,AppliedAmount,ApplnRoundingPrecision,-1);
        END;

      IF ReplaceEntries THEN BEGIN
        SaveAmount := OldAppliedAmount;
        OldAppliedAmount := -AppliedAmount;
        AppliedAmount := -SaveAmount;
        AppliedAmountLCY := -AppliedAmountLCY;
      END;
    END;

    PROCEDURE CheckCalcAmtDiff@1210002(NewCVLedgCurrencyCode@1210009 : Code[10];OldCVLedgCurrencyCode@1210008 : Code[10]) : Boolean;
    BEGIN
      IF NOT GLSetup."Enable Russian Accounting" THEN
        EXIT(FALSE);

      // Amt Diff is only when one of currencies is LCY
      EXIT((NewCVLedgCurrencyCode = '') XOR (OldCVLedgCurrencyCode = ''));
    END;

    PROCEDURE GetLastDate@1470001(Date1@1470000 : Date;Date2@1470001 : Date;Date3@1470002 : Date) ReturnDate : Date;
    BEGIN
      IF Date3 > LastDate THEN
        ReturnDate := Date3
      ELSE BEGIN
        IF Date2 > Date1 THEN
          ReturnDate := Date2
        ELSE
          ReturnDate := Date1;
      END;
    END;

    LOCAL PROCEDURE GetPayablesAccountNo@1210031(GenJnlLine@1210000 : Record 81) : Code[20];
    VAR
      VendPostGroup@1210001 : Record 93;
    BEGIN
      WITH GenJnlLine DO BEGIN
        TESTFIELD("Posting Group");
        VendPostGroup.GET("Posting Group");
        EXIT(VendPostGroup.GetPrepaymentAccount(Prepayment));
      END;
    END;

    LOCAL PROCEDURE ExchangeAmtLCYToFCY2@40(Amount@1000 : Decimal) : Decimal;
    BEGIN
      IF UseCurrFactorOnly THEN
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(Amount,CurrencyFactor),
            AddCurrency."Amount Rounding Precision"));
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            CurrencyDate,AddCurrencyCode,Amount,CurrencyFactor),
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CheckNonAddCurrCodeOccurred@54(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      NonAddCurrCodeOccured :=
        NonAddCurrCodeOccured OR (AddCurrencyCode <> CurrencyCode);
      EXIT(NonAddCurrCodeOccured);
    END;

    LOCAL PROCEDURE TotalVATAmountOnJnlLines@1130(GenJnlLine@1000 : Record 81) TotalVATAmount : Decimal;
    VAR
      GenJnlLine2@1001 : Record 81;
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        SETRANGE("Source Code",GenJnlLine."Source Code");
        SETRANGE("Document No.",GenJnlLine."Document No.");
        SETRANGE("Posting Date",GenJnlLine."Posting Date");
        IF FINDSET THEN
          REPEAT
            TotalVATAmount += "VAT Amount (LCY)" - "Bal. VAT Amount (LCY)";
          UNTIL NEXT = 0;
      END;
      EXIT(TotalVATAmount);
    END;

    PROCEDURE SetGLRegReverse@8(VAR ReverseGLReg@1000 : Record 45);
    BEGIN
      GLReg.Reversed := TRUE;
      ReverseGLReg := GLReg;
    END;

    LOCAL PROCEDURE InsertVATEntriesFromTemp@83(VAR DtldCVLedgEntryBuf@1000 : Record 383;GLEntry@1003 : Record 17);
    VAR
      Complete@1001 : Boolean;
      LinkedAmount@1002 : Decimal;
      FirstEntryNo@1006 : Integer;
      LastEntryNo@1004 : Integer;
    BEGIN
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Gen. Bus. Posting Group",GLEntry."Gen. Bus. Posting Group");
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",GLEntry."Gen. Prod. Posting Group");
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",GLEntry."VAT Bus. Posting Group");
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",GLEntry."VAT Prod. Posting Group");
      CASE DtldCVLedgEntryBuf."Entry Type" OF
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          BEGIN
            FirstEntryNo := 0;
            LastEntryNo := 999999;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          BEGIN
            FirstEntryNo := 1000000;
            LastEntryNo := 1999999;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          BEGIN
            FirstEntryNo := 2000000;
            LastEntryNo := 2999999;
          END;
      END;
      TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
      IF TempVATEntry.FINDSET THEN
        REPEAT
          VATEntry := TempVATEntry;
          VATEntry."Entry No." := NextVATEntryNo;
          VATEntry.INSERT(TRUE);
          NextVATEntryNo := NextVATEntryNo + 1;
          IF VATEntry."Unrealized VAT Entry No." = 0 THEN
            GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.",VATEntry."Entry No.");
          IF VATEntry."VAT Calculation Type" = VATEntry."VAT Calculation Type"::"Full VAT" THEN BEGIN
            LinkedAmount += VATEntry.Amount;
            Complete := LinkedAmount = -DtldCVLedgEntryBuf."VAT Amount (LCY)";
          END ELSE BEGIN
            LinkedAmount += VATEntry.Base;
            Complete := LinkedAmount = -DtldCVLedgEntryBuf."Amount (LCY)";
          END;
          LastEntryNo := TempVATEntry."Entry No.";
        UNTIL Complete OR (TempVATEntry.NEXT = 0);

      TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
      TempVATEntry.DELETEALL;
    END;

    LOCAL PROCEDURE ABSMin@84(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Decimal1) < ABS(Decimal2) THEN
        EXIT(Decimal1);
      EXIT(Decimal2);
    END;

    PROCEDURE ABSMax@124(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Decimal1) > ABS(Decimal2) THEN
        EXIT(Decimal1);
      EXIT(Decimal2);
    END;

    LOCAL PROCEDURE GetApplnRoundPrecision@92(NewCVLedgEntryBuf@1002 : Record 382;OldCVLedgEntryBuf@1003 : Record 382) : Decimal;
    VAR
      ApplnCurrency@1000 : Record 4;
      CurrencyCode@1005 : Code[10];
    BEGIN
      IF NewCVLedgEntryBuf."Currency Code" <> '' THEN
        CurrencyCode := NewCVLedgEntryBuf."Currency Code"
      ELSE
        CurrencyCode := OldCVLedgEntryBuf."Currency Code";
      IF CurrencyCode = '' THEN
        EXIT(0);
      ApplnCurrency.GET(CurrencyCode);
      IF ApplnCurrency."Appln. Rounding Precision" <> 0 THEN
        EXIT(ApplnCurrency."Appln. Rounding Precision");
      EXIT(GLSetup."Appln. Rounding Precision");
    END;

    LOCAL PROCEDURE GetGLSetup@19();
    BEGIN
      IF GLSetupRead THEN
        EXIT;

      GLSetup.GET;
      GLSetupRead := TRUE;

      AddCurrencyCode := GLSetup."Additional Reporting Currency";
    END;

    LOCAL PROCEDURE ReadGLSetup@17(VAR NewGLSetup@1000 : Record 98);
    BEGIN
      NewGLSetup := GLSetup;
    END;

    LOCAL PROCEDURE CheckSalesExtDocNo@115(GenJnlLine@1001 : Record 81);
    VAR
      SalesSetup@1000 : Record 311;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Ext. Doc. No. Mandatory" THEN
        EXIT;

      IF GenJnlLine."Document Type" IN
         [GenJnlLine."Document Type"::Invoice,
          GenJnlLine."Document Type"::"Credit Memo",
          GenJnlLine."Document Type"::Payment,
          GenJnlLine."Document Type"::Refund,
          GenJnlLine."Document Type"::" "]
      THEN
        GenJnlLine.TESTFIELD("External Document No.");
    END;

    LOCAL PROCEDURE CheckPurchExtDocNo@107(GenJnlLine@1003 : Record 81;IsAmtDiff@1000 : Boolean);
    VAR
      PurchSetup@1002 : Record 312;
      OldVendLedgEntry@1001 : Record 25;
    BEGIN
      PurchSetup.GET;
      IF (NOT (PurchSetup."Ext. Doc. No. Mandatory" OR (GenJnlLine."External Document No." <> ''))) OR IsAmtDiff THEN
        EXIT;

      GenJnlLine.TESTFIELD("External Document No.");
      OldVendLedgEntry.RESET;
      OldVendLedgEntry.SETRANGE("External Document No.",GenJnlLine."External Document No.");
      OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Document Type");
      OldVendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
      OldVendLedgEntry.SETRANGE(Reversed,FALSE);
      IF NOT OldVendLedgEntry.ISEMPTY THEN
        ERROR(
          PurchaseAlreadyExistsErr,
          GenJnlLine."Document Type",GenJnlLine."External Document No.");
    END;

    LOCAL PROCEDURE CheckDimValueForDisposal@93(GenJnlLine@1001 : Record 81;AccountNo@1002 : Code[20]);
    VAR
      DimMgt@1000 : Codeunit 408;
      TableID@1025 : ARRAY [10] OF Integer;
      AccNo@1026 : ARRAY [10] OF Code[20];
    BEGIN
      IF ((GenJnlLine.Amount = 0) OR (GenJnlLine."Amount (LCY)" = 0)) AND
         (GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Disposal)
      THEN BEGIN
        TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type"::"G/L Account");
        AccNo[1] := AccountNo;
        IF NOT DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") THEN
          ERROR(DimMgt.GetDimValuePostingErr);
      END;
    END;

    PROCEDURE SetOverDimErr@79();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    LOCAL PROCEDURE CheckGLAccDimError@97(GenJnlLine@1005 : Record 81;GLAccNo@1004 : Code[20];CalledFromInitGLEntryFunction@1101495000 : Boolean);
    VAR
      LocalDimMgt@1002 : Codeunit 408;
      TableID@1001 : ARRAY [10] OF Integer;
      AccNo@1000 : ARRAY [10] OF Code[20];
      DimSetIDArr@1101495001 : ARRAY [10] OF Integer;
      HasError@1101495002 : Boolean;
      TempDimSetEntry@1101495003 : TEMPORARY Record 480;
    BEGIN
      IF (GenJnlLine.Amount = 0) AND (GenJnlLine."Amount (LCY)" = 0) THEN
        EXIT;

      TableID[1] := DATABASE::"G/L Account";
      AccNo[1] := GLAccNo;
      //NC NOS-26 > SPA
      IF CalledFromInitGLEntryFunction THEN BEGIN
        DimMgt.GetDimensionSet(TempDimSetEntry,GlobalDimensionSetID);
        fn_InsertDefDimValueFromAcc(GLAccNo, TempDimSetEntry);
        //TDRAMIO-41>
        fn_InsertRealCounterparty(GLAccNo, TempDimSetEntry);
        //TDRAMIO-41<
        //TDRANCS-1533>
        fn_InsertLegalEntityDimValue(TempDimSetEntry);
        //TDRANCS-1533<

        //NC NOS-26 > SPA
        GlobalDimensionSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
        IF GenJnlLine."Dimension Set ID" <> GlobalDimensionSetID THEN
          DimMgt.UpdateGenJnlLineDim(GenJnlLine,GlobalDimensionSetID);

        HasError := NOT LocalDimMgt.fn_CheckJnlLineDimValuePosting(TableID,AccNo,GlobalDimensionSetID,GenJnlLine."Posting Date"); ///TDRANCS-1071
        IF NOT HasError THEN
          HasError := NOT LocalDimMgt.fn_CheckGlobalDim(GlobalDimensionSetID,GenJnlLine);
        IF NOT HasError THEN
          HasError := NOT LocalDimMgt.fn_CheckRealCounterparty(GlobalDimensionSetID,GLAccNo);
        IF NOT HasError AND (GenJnlLine."Transaction Type" = GenJnlLine."Transaction Type"::Manual) THEN
          HasError := NOT LocalDimMgt.fn_CheckDimForManualJnlBatch(GlobalDimensionSetID);
        IF NOT HasError THEN
          EXIT;
      END ELSE
      //NC NOS-26 < SPA
        IF LocalDimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") THEN
          EXIT;

      IF GenJnlLine."Line No." <> 0 THEN
        ERROR(
          DimensionUsedErr,
          GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
          GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
          LocalDimMgt.GetDimValuePostingErr);

      ERROR(LocalDimMgt.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE CalculateCurrentBalance@95(AccountNo@1000 : Code[20];BalAccountNo@1001 : Code[20];InclVATAmount@1002 : Boolean;AmountLCY@1004 : Decimal;VATAmount@1005 : Decimal);
    BEGIN
      IF (AccountNo <> '') AND (BalAccountNo <> '') THEN
        EXIT;

      IF AccountNo = BalAccountNo THEN
        EXIT;

      IF NOT InclVATAmount THEN
        VATAmount := 0;

      IF BalAccountNo <> '' THEN
        CurrentBalance -= AmountLCY + VATAmount
      ELSE
        CurrentBalance += AmountLCY + VATAmount;
    END;

    LOCAL PROCEDURE GetCurrency@191(VAR Currency@1000 : Record 4;CurrencyCode@1001 : Code[10]);
    BEGIN
      IF Currency.Code <> CurrencyCode THEN BEGIN
        IF CurrencyCode = '' THEN
          CLEAR(Currency)
        ELSE
          Currency.GET(CurrencyCode);
      END;
    END;

    LOCAL PROCEDURE CollectAdjustment@181(VAR AdjAmount@1003 : ARRAY [4] OF Decimal;Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal);
    VAR
      Offset@1001 : Integer;
    BEGIN
      Offset := GetAdjAmountOffset(Amount,AmountAddCurr);
      AdjAmount[Offset] += Amount;
      AdjAmount[Offset + 1] += AmountAddCurr;
    END;

    LOCAL PROCEDURE HandleDtldAdjustment@182(GenJnlLine@1008 : Record 81;VAR GLEntry@1002 : Record 17;AdjAmount@1010 : ARRAY [4] OF Decimal;TotalAmountLCY@1004 : Decimal;TotalAmountAddCurr@1005 : Decimal;GLAccNo@1007 : Code[20]);
    BEGIN
      IF NOT PostDtldAdjustment(
           GenJnlLine,GLEntry,AdjAmount,
           TotalAmountLCY,TotalAmountAddCurr,GLAccNo,
           GetAdjAmountOffset(TotalAmountLCY,TotalAmountAddCurr))
      THEN
        InitGLEntry(GenJnlLine,GLEntry,GLAccNo,TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostDtldAdjustment@96(GenJnlLine@1006 : Record 81;VAR GLEntry@1005 : Record 17;AdjAmount@1004 : ARRAY [4] OF Decimal;TotalAmountLCY@1002 : Decimal;TotalAmountAddCurr@1001 : Decimal;GLAcc@1000 : Code[20];ArrayIndex@1007 : Integer) : Boolean;
    BEGIN
      IF (GenJnlLine."Bal. Account No." <> '') AND
         ((AdjAmount[ArrayIndex] <> 0) OR (AdjAmount[ArrayIndex + 1] <> 0)) AND
         ((TotalAmountLCY + AdjAmount[ArrayIndex] <> 0) OR (TotalAmountAddCurr + AdjAmount[ArrayIndex + 1] <> 0))
      THEN BEGIN
        CreateGLEntryBalAcc(
          GenJnlLine,GLAcc,-AdjAmount[ArrayIndex],-AdjAmount[ArrayIndex + 1],
          GenJnlLine."Bal. Account Type",GenJnlLine."Bal. Account No.");
        InitGLEntry(GenJnlLine,GLEntry,
          GLAcc,TotalAmountLCY + AdjAmount[ArrayIndex],
          TotalAmountAddCurr + AdjAmount[ArrayIndex + 1],TRUE,TRUE);
        AdjAmount[ArrayIndex] := 0;
        AdjAmount[ArrayIndex + 1] := 0;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetAdjAmountOffset@121(Amount@1000 : Decimal;AmountACY@1001 : Decimal) : Integer;
    BEGIN
      IF (Amount > 0) OR (Amount = 0) AND (AmountACY > 0) THEN
        EXIT(1);
      EXIT(3);
    END;

    PROCEDURE GetNextEntryNo@53() : Integer;
    BEGIN
      EXIT(NextEntryNo);
    END;

    PROCEDURE GetNextTransactionNo@67() : Integer;
    BEGIN
      EXIT(NextTransactionNo);
    END;

    PROCEDURE GetNextVATEntryNo@68() : Integer;
    BEGIN
      EXIT(NextVATEntryNo);
    END;

    PROCEDURE IncrNextVATEntryNo@70();
    BEGIN
      NextVATEntryNo := NextVATEntryNo + 1;
    END;

    LOCAL PROCEDURE IsNotPayment@77(DocumentType@1000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund') : Boolean;
    BEGIN
      EXIT(DocumentType IN [DocumentType::Invoice,
                            DocumentType::"Credit Memo",
                            DocumentType::"Finance Charge Memo",
                            DocumentType::Reminder]);
    END;

    LOCAL PROCEDURE IsTempGLEntryBufEmpty@44() : Boolean;
    BEGIN
      EXIT(TempGLEntryBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE IsVATAdjustment@20(EntryType@1000 : Option) : Boolean;
    VAR
      DtldCVLedgEntryBuf@1001 : Record 383;
    BEGIN
      EXIT(EntryType IN [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]);
    END;

    LOCAL PROCEDURE IsVATExcluded@7(EntryType@1000 : Option) : Boolean;
    VAR
      DtldCVLedgEntryBuf@1001 : Record 383;
    BEGIN
      EXIT(EntryType IN [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"]);
    END;

    LOCAL PROCEDURE UpdateGLEntryNo@120(VAR GLEntryNo@1002 : Integer;VAR SavedEntryNo@1000 : Integer);
    BEGIN
      IF SavedEntryNo <> 0 THEN BEGIN
        GLEntryNo := SavedEntryNo;
        NextEntryNo := NextEntryNo - 1;
        SavedEntryNo := 0;
      END;
    END;

    LOCAL PROCEDURE UpdateTotalAmounts@132(VAR TempInvPostBuf@1003 : TEMPORARY Record 49;DimSetID@1000 : Integer;AmountToCollect@1001 : Decimal;AmountACYToCollect@1002 : Decimal);
    BEGIN
      WITH TempInvPostBuf DO BEGIN
        SETRANGE("Dimension Set ID",DimSetID);
        IF FINDFIRST THEN BEGIN
          Amount += AmountToCollect;
          "Amount (ACY)" += AmountACYToCollect;
          MODIFY;
        END ELSE BEGIN
          INIT;
          "Dimension Set ID" := DimSetID;
          Amount := AmountToCollect;
          "Amount (ACY)" := AmountACYToCollect;
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateGLEntriesForTotalAmountsUnapply@135(GenJnlLine@1000 : Record 81;VAR TempInvPostBuf@1002 : TEMPORARY Record 49;Account@1001 : Code[20]);
    VAR
      DimMgt@1003 : Codeunit 408;
    BEGIN
      WITH TempInvPostBuf DO BEGIN
        SETRANGE("Dimension Set ID");
        IF FINDSET THEN
          REPEAT
            IF (Amount <> 0) OR
               ("Amount (ACY)" <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
            THEN BEGIN
              DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
              CreateGLEntry(GenJnlLine,Account,Amount,"Amount (ACY)",TRUE);
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateGLEntriesForTotalAmounts@36(GenJnlLine@1004 : Record 81;VAR InvPostBuf@1001 : Record 49;AdjAmountBuf@1006 : ARRAY [4] OF Decimal;SavedEntryNo@1009 : Integer;GLAccNo@1007 : Code[20];LedgEntryInserted@1003 : Boolean);
    VAR
      DimMgt@1002 : Codeunit 408;
      GLEntryInserted@1000 : Boolean;
    BEGIN
      GLEntryInserted := FALSE;

      WITH InvPostBuf DO BEGIN
        RESET;
        IF FINDSET THEN
          REPEAT
            IF (Amount <> 0) OR ("Amount (ACY)" <> 0) AND (AddCurrencyCode <> '') THEN BEGIN
              DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
              CreateGLEntryForTotalAmounts(GenJnlLine,Amount,"Amount (ACY)",AdjAmountBuf,SavedEntryNo,GLAccNo);
              GLEntryInserted := TRUE;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT GLEntryInserted AND LedgEntryInserted THEN
        CreateGLEntryForTotalAmounts(GenJnlLine,0,0,AdjAmountBuf,SavedEntryNo,GLAccNo);
    END;

    LOCAL PROCEDURE CreateGLEntryForTotalAmounts@122(GenJnlLine@1004 : Record 81;Amount@1000 : Decimal;AmountACY@1001 : Decimal;AdjAmountBuf@1006 : ARRAY [4] OF Decimal;VAR SavedEntryNo@1009 : Integer;GLAccNo@1007 : Code[20]);
    VAR
      GLEntry@1005 : Record 17;
    BEGIN
      HandleDtldAdjustment(GenJnlLine,GLEntry,AdjAmountBuf,Amount,AmountACY,GLAccNo);
      GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
      GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
      UpdateGLEntryNo(GLEntry."Entry No.",SavedEntryNo);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE SetAddCurrForUnapplication@136(VAR DtldCVLedgEntryBuf@1000 : Record 383);
    BEGIN
      WITH DtldCVLedgEntryBuf DO
        IF NOT ("Entry Type" IN ["Entry Type"::Application,"Entry Type"::"Unrealized Loss",
                                 "Entry Type"::"Unrealized Gain","Entry Type"::"Realized Loss",
                                 "Entry Type"::"Realized Gain","Entry Type"::"Correction of Remaining Amount"])
        THEN
          IF ("Entry Type" = "Entry Type"::"Appln. Rounding") OR
             ((AddCurrencyCode <> '') AND (AddCurrencyCode = "Currency Code"))
          THEN
            "Additional-Currency Amount" := Amount
          ELSE
            "Additional-Currency Amount" := CalcAddCurrForUnapplication("Posting Date","Amount (LCY)");
    END;

    PROCEDURE CalcAppliedAmounts@1470006(VAR EntryBuf1@1470004 : Record 382;VAR EntryBuf2@1470003 : Record 382;VAR AppliedAmount1@1470002 : Decimal;VAR AppliedAmountLCY@1470001 : Decimal;VAR AppliedAmount2@1470000 : Decimal;ApplnRoundingPrecision@1470007 : Decimal;Factor@1470010 : Decimal);
    VAR
      UseOrigCurrencyFactor@1470005 : Boolean;
      RemainingAmt@1470006 : Decimal;
      RemAmt1@1470008 : Decimal;
      RemAmt2@1470009 : Decimal;
    BEGIN
      RemAmt1 := GetRemAmount(EntryBuf1,ApplnRoundingPrecision);
      RemAmt2 := GetRemAmount(EntryBuf2,ApplnRoundingPrecision);
      UseOrigCurrencyFactor := EntryBuf1."Original Currency Factor" <>
        CurrExchRate.ExchangeRate(EntryBuf1."Posting Date",EntryBuf1."Currency Code");
      IF UseOrigCurrencyFactor THEN
        RemainingAmt := ROUND(RemAmt2 * EntryBuf1."Original Currency Factor")
      ELSE
        RemainingAmt :=
          CurrExchRate.ExchangeAmount(RemAmt2,EntryBuf2."Currency Code",EntryBuf1."Currency Code",EntryBuf2."Posting Date");
      IF ABS(RemAmt1) < ABS(RemainingAmt) THEN BEGIN
        AppliedAmount1 := Factor * RemAmt1;
        IF UseOrigCurrencyFactor THEN
          AppliedAmount2 := ROUND(AppliedAmount1 / EntryBuf1."Original Currency Factor")
        ELSE
          AppliedAmount2 :=
            CurrExchRate.ExchangeAmount(AppliedAmount1,EntryBuf1."Currency Code",EntryBuf2."Currency Code",EntryBuf2."Posting Date");
      END ELSE BEGIN
        AppliedAmount1 := Factor * -RemainingAmt;
        AppliedAmount2 := Factor * -RemAmt2;
      END;
      AppliedAmountLCY := AppliedAmount2;
    END;

    PROCEDURE GetRemAmount@1470011(EntryBuf@1470000 : Record 382;ApplnRoundingPrecision@1470001 : Decimal) RemainingAmount : Decimal;
    BEGIN
      IF EntryBuf."Amount to Apply" = 0 THEN
        RemainingAmount := EntryBuf."Remaining Amount"
      ELSE BEGIN
        IF ABS(EntryBuf."Remaining Amount") < ABS(EntryBuf."Amount to Apply") THEN
          RemainingAmount := EntryBuf."Remaining Amount"
        ELSE
          RemainingAmount := EntryBuf."Amount to Apply";

        IF (ABS(EntryBuf."Remaining Amount" - EntryBuf."Amount to Apply") < ApplnRoundingPrecision) AND
           (ApplnRoundingPrecision <> 0)
        THEN
          RemainingAmount := RemainingAmount - (EntryBuf."Remaining Amount" - EntryBuf."Amount to Apply");
      END;
    END;

    LOCAL PROCEDURE InsertRUGLEntry@1470015(GenJnlLine@1470007 : Record 81;GLEntry@1470006 : Record 17;BalAccountNo@1470003 : Code[20];IgnoreGLSetup@1470002 : Boolean;CalcAddCurrResiduals@1470001 : Boolean;RUCorrection@1470000 : Boolean) : Boolean;
    VAR
      GLEntrySrc@1470005 : Record 17;
      SavedCorrection@1470004 : Boolean;
    BEGIN
      // NC MIO-28 > AES
      IF GenJnlLine."Not G/L Post" THEN
        EXIT;
      // NC MIO-28 < AES

      SavedCorrection := GenJnlLine.Correction;
      IF RUCorrection THEN
        GenJnlLine.Correction := TRUE;
      GLEntrySrc := GLEntry;
      GLEntry."Bal. Account No." := BalAccountNo;
      InsertGLEntry(GenJnlLine,GLEntry,CalcAddCurrResiduals);
      IF (BalAccountNo <> '') AND (IgnoreGLSetup OR GLSetup."Enable Russian Accounting") THEN BEGIN
        GLEntry := GLEntrySrc;
        GLEntry."Entry No." := NextEntryNo;
        GLEntry."Bal. Account No." := GLEntry."G/L Account No.";
        GLEntry."G/L Account No." := BalAccountNo;
        GLEntry.Amount := -GLEntry.Amount;
        GLEntry."Additional-Currency Amount" := -GLEntry."Additional-Currency Amount";
        GLEntry."VAT Amount" := -GLEntry."VAT Amount";
        InsertGLEntry(GenJnlLine,GLEntry,CalcAddCurrResiduals);
        GenJnlLine.Correction := SavedCorrection;
        EXIT(TRUE);
      END;
      GenJnlLine.Correction := SavedCorrection;
    END;

    PROCEDURE SpecialRunWithCheck@1470016(VAR GenJnlLine2@1470001 : Record 81) : Integer;
    BEGIN
      ThisIsSpecialRun := TRUE;
      RunWithCheck(GenJnlLine2);
      ThisIsSpecialRun := FALSE;
      EXIT(GLEntryNo);
    END;

    PROCEDURE AdjustVATAmount@1470013(VAR VATEntry@1470002 : Record 254;VATPart@1470003 : Decimal;VAR VATBase@1470000 : Decimal;VATAmount@1470001 : Decimal;VAR VATBaseAddCurr@1470006 : Decimal;VATAmountAddCurr@1470005 : Decimal;Remaining@1470007 : Boolean);
    VAR
      TotalVAT@1470004 : Decimal;
    BEGIN
      IF Remaining THEN
        TotalVAT := ROUND((VATEntry."Remaining Unrealized Amount" + VATEntry."Remaining Unrealized Base") * VATPart)
      ELSE
        TotalVAT := ROUND((VATEntry."Unrealized Amount" + VATEntry."Unrealized Base") * VATPart);
      IF TotalVAT <> VATBase + VATAmount THEN
        VATBase := TotalVAT - VATAmount;

      IF Remaining THEN
        TotalVAT := ROUND((VATEntry."Add.-Curr. Rem. Unreal. Amount" + VATEntry."Add.-Curr. Rem. Unreal. Base") * VATPart,
            AddCurrency."Amount Rounding Precision")
      ELSE
        TotalVAT := ROUND((VATEntry."Add.-Currency Unrealized Amt." + VATEntry."Add.-Currency Unrealized Base") * VATPart,
            AddCurrency."Amount Rounding Precision");
      IF TotalVAT <> VATAmountAddCurr + VATBaseAddCurr THEN
        VATBaseAddCurr := TotalVAT - VATAmountAddCurr;
    END;

    PROCEDURE SummarizeGainLoss@1470008(VAR DtldCVLedgEntryBuf@1470000 : Record 383;VAR CorrDtldCVLedgEntryBuf@1470002 : Record 383;Unapply@1003 : Boolean);
    VAR
      Currency@1210005 : Record 4;
      DtldCVLedgEntryBuf2@1210002 : TEMPORARY Record 383;
      RealizedForCustEntryNo@1210000 : TEMPORARY Record 2000000026;
      AmountLCY@1470003 : Decimal;
      EntryNo@1470004 : Integer;
      CurrencyCode@1000 : Code[20];
      CanBeSummarized@1002 : Boolean;
      DeleteEntry@1210001 : Boolean;
      Completed@1210003 : Boolean;
      DtldCVLedgEntryNo@1210004 : Integer;
    BEGIN
      GLSetup.GET;
      IF NOT GLSetup."Summarize Gains/Losses" THEN
        EXIT;

      CorrDtldCVLedgEntryBuf.DELETEALL;
      DtldCVLedgEntryBuf.RESET;
      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::"Realized Loss",
        DtldCVLedgEntryBuf."Entry Type"::"Realized Gain");
      IF DtldCVLedgEntryBuf.FINDSET THEN
        REPEAT
          DtldCVLedgEntryBuf2 := DtldCVLedgEntryBuf;
          DtldCVLedgEntryBuf2.INSERT;
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;
      DtldCVLedgEntryBuf2.SETCURRENTKEY("CV Ledger Entry No.");
      DtldCVLedgEntryBuf.SETFILTER(
        "Entry Type",'%1|%2|%3|%4',
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss",
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain",
        DtldCVLedgEntryBuf."Entry Type"::"Realized Loss",
        DtldCVLedgEntryBuf."Entry Type"::"Realized Gain");
      CurrencyCode := '';
      IF DtldCVLedgEntryBuf.FIND('+') THEN
        REPEAT
          IF NOT DtldCVLedgEntryBuf."Prepmt. Diff." THEN BEGIN
            IF EntryNo <> DtldCVLedgEntryBuf."CV Ledger Entry No." THEN BEGIN
              IF CurrencyCode <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                CurrencyCode := DtldCVLedgEntryBuf."Currency Code";
                Currency.GET(CurrencyCode);
                CanBeSummarized :=
                  (Currency."Unrealized Gains Acc." = Currency."Realized Gains Acc.") AND
                  (Currency."Unrealized Losses Acc." = Currency."Realized Losses Acc.");
              END;
              IF CanBeSummarized THEN BEGIN
                CorrDtldCVLedgEntryBuf := DtldCVLedgEntryBuf;
                CorrDtldCVLedgEntryBuf.INSERT;
                IF DtldCVLedgEntryBuf."Entry Type" IN [DtldCVLedgEntryBuf."Entry Type"::"Realized Loss",
                                                       DtldCVLedgEntryBuf."Entry Type"::"Realized Gain"]
                THEN BEGIN
                  RealizedForCustEntryNo.Number := DtldCVLedgEntryBuf."CV Ledger Entry No.";
                  IF RealizedForCustEntryNo.INSERT THEN;
                END ELSE BEGIN
                  DtldCVLedgEntryBuf2.SETRANGE("CV Ledger Entry No.",DtldCVLedgEntryBuf."CV Ledger Entry No.");
                  IF NOT DtldCVLedgEntryBuf2.FINDFIRST THEN BEGIN
                    CorrDtldCVLedgEntryBuf."Entry Type" := CorrDtldCVLedgEntryBuf."Entry Type"::"Realized Gain";
                    CorrDtldCVLedgEntryBuf.MODIFY;
                  END;
                END;
              END;
            END;
          END;
        UNTIL DtldCVLedgEntryBuf.NEXT(-1) = 0;

      CorrDtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      IF CorrDtldCVLedgEntryBuf.FINDSET THEN BEGIN
        Completed := FALSE;
        AmountLCY := 0;
        EntryNo := CorrDtldCVLedgEntryBuf."CV Ledger Entry No.";
        DtldCVLedgEntryNo := CorrDtldCVLedgEntryBuf."Entry No.";

        DtldCVLedgEntryBuf2.RESET;
        DtldCVLedgEntryBuf2.DELETEALL;
        REPEAT
          DeleteEntry := FALSE;
          IF EntryNo <> CorrDtldCVLedgEntryBuf."CV Ledger Entry No." THEN BEGIN
            DtldCVLedgEntryBuf.GET(DtldCVLedgEntryNo);
            DtldCVLedgEntryBuf2 := DtldCVLedgEntryBuf;
            DtldCVLedgEntryBuf2."Amount (LCY)" := AmountLCY;
            DtldCVLedgEntryBuf2.INSERT;

            AmountLCY := 0;
            EntryNo := CorrDtldCVLedgEntryBuf."CV Ledger Entry No.";
          END;
          AmountLCY := AmountLCY + CorrDtldCVLedgEntryBuf."Amount (LCY)";
          CorrDtldCVLedgEntryBuf."Amount (LCY)" := 0;

          IF CorrDtldCVLedgEntryBuf."Entry Type" IN
             [CorrDtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss",
              CorrDtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain"]
          THEN
            DeleteEntry := NOT RealizedForCustEntryNo.GET(CorrDtldCVLedgEntryBuf."CV Ledger Entry No.");

          IF DeleteEntry THEN
            CorrDtldCVLedgEntryBuf.DELETE
          ELSE
            CorrDtldCVLedgEntryBuf.MODIFY;

          DtldCVLedgEntryNo := CorrDtldCVLedgEntryBuf."Entry No.";
          Completed := CorrDtldCVLedgEntryBuf.NEXT = 0;
          IF Completed THEN BEGIN
            DtldCVLedgEntryBuf.GET(DtldCVLedgEntryNo);
            DtldCVLedgEntryBuf2 := DtldCVLedgEntryBuf;
            DtldCVLedgEntryBuf2."Amount (LCY)" := AmountLCY;
            DtldCVLedgEntryBuf2.INSERT;
          END;
        UNTIL Completed;

        IF DtldCVLedgEntryBuf2.FINDSET THEN
          REPEAT
            CorrDtldCVLedgEntryBuf.GET(DtldCVLedgEntryBuf2."Entry No.");
            CorrDtldCVLedgEntryBuf."Amount (LCY)" := DtldCVLedgEntryBuf2."Amount (LCY)";
            IF NOT GLSetup."Currency Adjmt with Correction" THEN
              IF (CorrDtldCVLedgEntryBuf."Amount (LCY)" > 0) XOR Unapply THEN
                CorrDtldCVLedgEntryBuf."Entry Type" := CorrDtldCVLedgEntryBuf."Entry Type"::"Realized Gain"
              ELSE
                CorrDtldCVLedgEntryBuf."Entry Type" := CorrDtldCVLedgEntryBuf."Entry Type"::"Realized Loss";
            CorrDtldCVLedgEntryBuf.MODIFY;
          UNTIL DtldCVLedgEntryBuf2.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateGainLoss@1470017(VAR DtldCVLedgEntryBuf@1470000 : Record 383;VAR CorrDtldCVLedgEntryBuf@1470001 : Record 383);
    BEGIN
      IF CorrDtldCVLedgEntryBuf.GET(DtldCVLedgEntryBuf."Entry No.") THEN BEGIN
        DtldCVLedgEntryBuf."Entry Type" := CorrDtldCVLedgEntryBuf."Entry Type";
        DtldCVLedgEntryBuf."Amount (LCY)" := CorrDtldCVLedgEntryBuf."Amount (LCY)";
      END;
    END;

    PROCEDURE CreateCustUnapplyBuffer@1470092(VAR DtldCustLedgEntry@1000 : Record 379;VAR DtldCVLedgEntryBuf@1001 : Record 383;NextDtldLedgEntryNo@1002 : Integer);
    BEGIN
      IF DtldCustLedgEntry.FINDSET THEN
        REPEAT
          DtldCVLedgEntryBuf.TRANSFERFIELDS(DtldCustLedgEntry);
          DtldCVLedgEntryBuf."Entry No." := NextDtldLedgEntryNo;
          DtldCVLedgEntryBuf."Amount (LCY)" := -DtldCVLedgEntryBuf."Amount (LCY)";

          //Nc TR237 > EB
          IF DtldCVLedgEntryBuf."Entry Type" IN [DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Realized Loss",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Realized Gain"] THEN
          //NC APCOC-104 > DP
          BEGIN
          //NC APCOC-104 < DP

             DtldCVLedgEntryBuf."Not Consolidate" := GLSetup."Not Consolidate Exch. Diff.";

          //NC APCOC-104 > DP
              MovingDataSetup.GET;
              DtldCVLedgEntryBuf."Not Translate" := MovingDataSetup."Not Translate Applications";
              //NC APCOC-117 > RD
              DtldCVLedgEntryBuf."Not Translate IFRS" := MovingDataSetup."Not Transl. Applications IFRS";
              //NC APCOC-117 < RD

            //NC MIO-28 > DP
            IF (DtldCVLedgEntryBuf."Posting Date" >= GLSetup."Not Post FX G/L from Date") AND
              (GLSetup."Not Post FX G/L from Date" <> 0D)
            THEN
              DtldCVLedgEntryBuf."Not G/L Post" := TRUE;  // NC MIO-28 AES
            //NC MIO-28 < DP
          END;
          //NC APCOC-104 < DP

          //Nc TR237 < EB
          DtldCVLedgEntryBuf.INSERT;
          NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
        UNTIL DtldCustLedgEntry.NEXT = 0;
    END;

    PROCEDURE CreateVendUnapplyBuffer@1470111(VAR DtldCustLedgEntry@1000 : Record 380;VAR DtldCVLedgEntryBuf@1001 : Record 383;NextDtldLedgEntryNo@1002 : Integer);
    BEGIN
      IF DtldCustLedgEntry.FINDSET THEN
        REPEAT
          DtldCVLedgEntryBuf.TRANSFERFIELDS(DtldCustLedgEntry);
          DtldCVLedgEntryBuf."Entry No." := NextDtldLedgEntryNo;
          DtldCVLedgEntryBuf."Amount (LCY)" := -DtldCVLedgEntryBuf."Amount (LCY)";
          //Nc TR237 > EB
          IF DtldCVLedgEntryBuf."Entry Type" IN [DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Realized Loss",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Realized Gain"] THEN
          //NC APCOC-104 > DP
          BEGIN
          //NC APCOC-104 < DP
              DtldCVLedgEntryBuf."Not Consolidate" := GLSetup."Not Consolidate Exch. Diff.";
          //NC APCOC-104 > DP
              MovingDataSetup.GET;
              DtldCVLedgEntryBuf."Not Translate" := MovingDataSetup."Not Translate Applications";
              //NC APCOC-117 > RD
              DtldCVLedgEntryBuf."Not Translate IFRS" := MovingDataSetup."Not Transl. Applications IFRS";
              //NC APCOC-117 < RD
              //NC MIO-28 > DP
              IF (DtldCVLedgEntryBuf."Posting Date" >= GLSetup."Not Post FX G/L from Date") AND
                (GLSetup."Not Post FX G/L from Date" <> 0D)
              THEN
                DtldCVLedgEntryBuf."Not G/L Post" := TRUE;  // NC MIO-28 AES
              //NC MIO-28 < DP

          END;
          //NC APCOC-104 < DP
          //Nc TR237 < EB

          DtldCVLedgEntryBuf.INSERT;
          NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
        UNTIL DtldCustLedgEntry.NEXT = 0;
    END;

    PROCEDURE FindAdjustingVATEntry@1470010(VAR VATEntry@1470000 : Record 254;CorrDocDate@1470001 : Date);
    VAR
      AdjustingVATEntry@1470002 : Record 254;
    BEGIN
      AdjustingVATEntry.SETCURRENTKEY("Unrealized VAT Entry No.");
      AdjustingVATEntry.SETRANGE("Unrealized VAT Entry No.",VATEntry."Unrealized VAT Entry No.");
      AdjustingVATEntry.SETRANGE("Corrected Document Date",CALCDATE('<-CM>',CorrDocDate),CALCDATE('<CM>',CorrDocDate));
      IF AdjustingVATEntry.FINDFIRST THEN
        VATEntry."Adjusted VAT Entry No." := AdjustingVATEntry."Entry No.";
    END;

    PROCEDURE UpdateTaxDiff@1470012(GenJnlLine@1470002 : Record 81);
    VAR
      DtldCustLedgEntry@1470001 : Record 379;
      DtldVendLedgEntry@1470000 : Record 380;
    BEGIN
      WITH GenJnlLine DO
        CASE "Object Type" OF
          "Object Type"::Customer:
            BEGIN
              DtldCustLedgEntry.GET("Tax. Diff. Dtld. Entry No.");
              IF DtldCustLedgEntry."Tax Diff. Transaction No." <> 0 THEN
                ERROR(PostedTaxDiffAlreadyExistErr,DtldCustLedgEntry."Tax Diff. Transaction No.");
              DtldCustLedgEntry."Tax Diff. Transaction No." := NextTransactionNo;
              DtldCustLedgEntry.MODIFY;
            END;
          "Object Type"::Vendor:
            BEGIN
              DtldVendLedgEntry.GET("Tax. Diff. Dtld. Entry No.");
              IF DtldVendLedgEntry."Tax Diff. Transaction No." <> 0 THEN
                ERROR(PostedTaxDiffAlreadyExistErr,DtldVendLedgEntry."Tax Diff. Transaction No.");
              DtldVendLedgEntry."Tax Diff. Transaction No." := NextTransactionNo;
              DtldVendLedgEntry.MODIFY;
            END;
        END;
    END;

    LOCAL PROCEDURE CalcTaxAccRealizedGainLossAmt@1210015(VAR CVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1002 : TEMPORARY Record 383;GenJnlLine@1003 : Record 81;RealizedGainLossAmount@1004 : Decimal;AppliedAmount@1210000 : Decimal;AppliedAmountLCY@1210001 : Decimal);
    VAR
      TaxAccRealizedGainLossAmt@1006 : Decimal;
    BEGIN
      IF GLSetup."Cancel Prepmt. Adjmt. in TA" OR (CVLedgEntryBuf."Currency Code" = '') OR NOT CVLedgEntryBuf.Prepayment THEN
        EXIT;

      TaxAccRealizedGainLossAmt :=
        ROUND(AppliedAmountLCY - AppliedAmount / CVLedgEntryBuf."Adjusted Currency Factor");

      TaxAccRealizedGainLossAmt := -TaxAccRealizedGainLossAmt + RealizedGainLossAmount;
      IF TaxAccRealizedGainLossAmt = 0 THEN
        EXIT;

      DtldCVLedgEntryBuf.InitFromGenJnlLine(GenJnlLine);
      DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(CVLedgEntryBuf);
      DtldCVLedgEntryBuf."Prepmt. Diff. in TA" := TRUE;
      IF TaxAccRealizedGainLossAmt < 0 THEN BEGIN
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Realized Loss";
        DtldCVLedgEntryBuf."Amount (LCY)" := TaxAccRealizedGainLossAmt;
        DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
      END ELSE BEGIN
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Realized Gain";
        DtldCVLedgEntryBuf."Amount (LCY)" := TaxAccRealizedGainLossAmt;
        DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
      END;
    END;

    PROCEDURE PostPrepmtDiffRealizedVAT@1210006(GenJnlLine@1210016 : Record 81;UnrealizedVATEntry@1210017 : Record 254);
    VAR
      VendLedgEntry@1470002 : Record 25;
      CustLedgEntry@1210000 : Record 21;
      VATSettlementMgt@1210001 : Codeunit 12411;
    BEGIN
      IF VATSettlementMgt.VATIsPostponed(UnrealizedVATEntry,0,GenJnlLine."Posting Date") THEN
        EXIT;

      CASE GenJnlLine."Source Type" OF
        GenJnlLine."Source Type"::Vendor:
          BEGIN
            VendLedgEntry.INIT;
            VendLedgEntry."Transaction No." := NextTransactionNo;
            VendLedgEntry."Remaining Amt. (LCY)" := 0;
            VendLedgEntry."Amount (LCY)" := UnrealizedVATEntry."Unrealized Base" + UnrealizedVATEntry."Unrealized Amount";
            VendLedgEntry.Open := FALSE;
            VendUnrealizedVAT(
              GenJnlLine,VendLedgEntry,GenJnlLine.Amount,UnrealizedVATEntry."Entry No.",1,GenJnlLine."VAT Transaction No.",0);
          END;
        GenJnlLine."Source Type"::Customer:
          BEGIN
            CustLedgEntry.INIT;
            CustLedgEntry."Transaction No." := NextTransactionNo;
            CustLedgEntry."Remaining Amt. (LCY)" := 0;
            CustLedgEntry."Amount (LCY)" := UnrealizedVATEntry."Unrealized Base" + UnrealizedVATEntry."Unrealized Amount";
            CustLedgEntry.Open := FALSE;
            CustUnrealizedVAT(GenJnlLine,CustLedgEntry,GenJnlLine.Amount,UnrealizedVATEntry."Entry No.",1,0);
          END;
      END;
    END;

    PROCEDURE TransferCVLedgerEntryBuf@1210011(CVLedgEntryBuf@1210000 : Record 382);
    BEGIN
      InitialCVLedgEntryBuf := CVLedgEntryBuf;
    END;

    PROCEDURE SetCVLedgEntryForVAT@1210069(TransactionNo@1210000 : Integer;CVLedgEntryNo@1210001 : Integer);
    VAR
      VATEntry@1210002 : Record 254;
    BEGIN
      VATEntry.RESET;
      VATEntry.SETCURRENTKEY("Transaction No.","CV Ledg. Entry No.");
      VATEntry.SETRANGE("Transaction No.",TransactionNo);
      VATEntry.SETRANGE("CV Ledg. Entry No.",0);
      VATEntry.MODIFYALL("CV Ledg. Entry No.",CVLedgEntryNo);
    END;

    PROCEDURE IsCheckFinVoided@1210004(GenJnlLine@1170000000 : Record 81;VAR DtldCVLedgEntryBuf@1210000 : Record 383) : Boolean;
    VAR
      CustLedgEntry@1210001 : Record 21;
      VendLedgEntry@1210002 : Record 25;
      BankAccLedgEntry2@1210003 : Record 271;
      CheckLedgEntry3@1210004 : Record 272;
      TransactionNo@1210005 : Integer;
    BEGIN
      DtldCVLedgEntryBuf.RESET;
      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("Entry Type",DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.SETRANGE(Prepayment,TRUE);
      IF DtldCVLedgEntryBuf.FINDSET THEN
        REPEAT
          CASE GenJnlLine."Account Type" OF
            GenJnlLine."Account Type"::Customer:
              BEGIN
                CustLedgEntry.GET(DtldCVLedgEntryBuf."CV Ledger Entry No.");
                TransactionNo := CustLedgEntry."Transaction No.";
              END;
            GenJnlLine."Account Type"::Vendor:
              BEGIN
                VendLedgEntry.GET(DtldCVLedgEntryBuf."CV Ledger Entry No.");
                TransactionNo := VendLedgEntry."Transaction No.";
              END;
          END;
          BankAccLedgEntry2.RESET;
          BankAccLedgEntry2.SETCURRENTKEY("Transaction No.");
          BankAccLedgEntry2.SETRANGE("Transaction No.",TransactionNo);
          IF BankAccLedgEntry2.FINDSET THEN
            REPEAT
              CheckLedgEntry3.RESET;
              CheckLedgEntry3.SETCURRENTKEY("Bank Account Ledger Entry No.");
              CheckLedgEntry3.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry2."Entry No.");
              CheckLedgEntry3.SETRANGE("Entry Status",CheckLedgEntry3."Entry Status"::"Financially Voided");
              IF NOT CheckLedgEntry3.ISEMPTY THEN
                EXIT(TRUE);
            UNTIL BankAccLedgEntry2.NEXT = 0;
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE PostFuturePeriodVacation@1210012(GenJnlLine@1170000000 : Record 81);
    VAR
      PayrollLedgerEntry@1210000 : Record 17418;
    BEGIN
      IF GenJnlLine."Payroll Ledger Entry No." <> 0 THEN BEGIN
        PayrollLedgerEntry.GET(GenJnlLine."Payroll Ledger Entry No.");
        IF PayrollLedgerEntry."Action Start Date" < PayrollLedgerEntry."Period End Date" THEN BEGIN
          PayrollLedgerEntry.TESTFIELD("Future Period Vacation Posted",FALSE);
          PayrollLedgerEntry."Future Period Vacation Posted" := TRUE;
          PayrollLedgerEntry.MODIFY;
        END;
      END;
    END;

    PROCEDURE SetPreviewMode@1210017(NewPreviewMode@1210000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    PROCEDURE IsVATAgentVATPayment@1210019(GenJnlLine@1170000000 : Record 81) : Boolean;
    VAR
      Vend@1210000 : Record 23;
    BEGIN
      IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment) AND
         (GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor)
      THEN BEGIN
        Vend.GET(GenJnlLine."Account No.");
        EXIT(Vend."VAT Agent");
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateVATAgentVendLedgEntry@1210020(VAR VendLedgEntry@1210000 : Record 25);
    BEGIN
      VendLedgEntry."Entry No." := NextEntryNo;
      VendLedgEntry."Currency Code" := '';
      VendLedgEntry."Applies-to Doc. Type" := VendLedgEntry."Applies-to Doc. Type"::" ";
      VendLedgEntry."Applies-to Doc. No." := '';
      VendLedgEntry."Applies-to ID" := '';
      VendLedgEntry.Open := TRUE;
      VendLedgEntry."Closed by Entry No." := 0;
      VendLedgEntry."Closed at Date" := 0D;
      VendLedgEntry."Closed by Amount" := 0;
      VendLedgEntry."Closed by Amount (LCY)" := 0;
      VendLedgEntry."Closed by Currency Code" := '';
      VendLedgEntry."Closed by Currency Amount" := 0;
      VendLedgEntry."Adjusted Currency Factor" := 1;
      VendLedgEntry."Original Currency Factor" := 1;
      VendLedgEntry."Amount to Apply" := 0;
      VendLedgEntry."Prepmt. Diff. Appln. Entry No." := 0;
    END;

    LOCAL PROCEDURE InsertVATAgentVATPmtGLEntry@1210037(GenJnlLine@1170000000 : Record 81;PmtAmount@1470003 : Decimal);
    VAR
      LCYCurrency@1210001 : Record 4;
      FCYCurrency@1210006 : Record 4;
      VendAgrmt@1210003 : Record 14901;
      Vend@1210005 : Record 23;
      VATPostingSetup@1170000001 : Record 325;
      GLEntry@1170000002 : Record 17;
      VATPrepmtPost@1210004 : Codeunit 12410;
      VATAgentVATPmtAmtFCY@1210007 : Decimal;
    BEGIN
      VATAgentVATPmtAmount := 0;
      IF VATAgentVATPayment THEN BEGIN
        NextEntryNo := NextEntryNo - 1;
        LCYCurrency.InitRoundingPrecision;
        IF GenJnlLine."Currency Code" <> '' THEN
          FCYCurrency.GET(GenJnlLine."Currency Code")
        ELSE
          FCYCurrency.InitRoundingPrecision;
        IF GenJnlLine."Agreement No." <> '' THEN BEGIN
          VendAgrmt.GET(GenJnlLine."Account No.",GenJnlLine."Agreement No.");
          VATPostingSetup.GET(VendAgrmt."VAT Bus. Posting Group",VendAgrmt."VAT Agent Prod. Posting Group");
        END ELSE BEGIN
          Vend.GET(GenJnlLine."Account No.");
          VATPostingSetup.GET(Vend."VAT Bus. Posting Group",Vend."VAT Agent Prod. Posting Group");
        END;
        GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
        GenJnlLine."VAT Bus. Posting Group" := VATPostingSetup."VAT Bus. Posting Group";
        GenJnlLine."VAT Prod. Posting Group" := VATPostingSetup."VAT Prod. Posting Group";
        GenJnlLine."Currency Code" := '';
        VATAgentVATPmtAmount :=
          ROUND(
            PmtAmount * VATPostingSetup."VAT %" / 100,
            LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
        GenJnlLine."Amount (LCY)" := PmtAmount + VATAgentVATPmtAmount;
        GenJnlLine."VAT Base Amount (LCY)" := GenJnlLine."Amount (LCY)";

        VATAgentVATPmtAmtFCY :=
          ROUND(
            GenJnlLine.Amount * VATPostingSetup."VAT %" / 100,
            FCYCurrency."Amount Rounding Precision",FCYCurrency.VATRoundingDirection);
        GenJnlLine.Amount := GenJnlLine.Amount + VATAgentVATPmtAmtFCY;
        GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
        VATPrepmtPost.InsertVATAgentPurchInvoice(GenJnlLine,VATAgentVATPmtAmount,VATAgentVATPmtAmtFCY);

        InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
        PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
      END;
    END;

    PROCEDURE InitVATAgentDtldVendLedgEntry@1210055(GenJnlLine@1170000000 : Record 81;VAR VendLedgEntry@1210000 : Record 25;VAR DtldVendLedgEntry@1210001 : Record 380);
    VAR
      DtldVendLedgEntryNo@1210002 : Integer;
    BEGIN
      DtldVendLedgEntry.RESET;
      IF DtldVendLedgEntry.FINDLAST THEN
        DtldVendLedgEntryNo := DtldVendLedgEntry."Entry No." + 1
      ELSE
        DtldVendLedgEntryNo := 1;

      DtldVendLedgEntry.INIT;
      DtldVendLedgEntry."Entry No." := DtldVendLedgEntryNo;
      DtldVendLedgEntry."Vendor Ledger Entry No." := VendLedgEntry."Entry No.";
      DtldVendLedgEntry."Entry Type" := DtldVendLedgEntry."Entry Type"::"Initial Entry";
      DtldVendLedgEntry."Posting Date" := VendLedgEntry."Posting Date";
      DtldVendLedgEntry."Document Type" := VendLedgEntry."Document Type";
      DtldVendLedgEntry."Document No." := VendLedgEntry."Document No.";
      DtldVendLedgEntry.Amount := VATAgentVATPmtAmount;
      DtldVendLedgEntry."Amount (LCY)" := VATAgentVATPmtAmount;
      DtldVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      DtldVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      DtldVendLedgEntry."User ID" := VendLedgEntry."User ID";
      DtldVendLedgEntry."Initial Entry Due Date" := VendLedgEntry."Due Date";
      DtldVendLedgEntry."Initial Entry Posting Date" := VendLedgEntry."Posting Date";
      DtldVendLedgEntry."Initial Entry Global Dim. 1" := VendLedgEntry."Global Dimension 1 Code";
      DtldVendLedgEntry."Initial Entry Global Dim. 2" := VendLedgEntry."Global Dimension 2 Code";
      DtldVendLedgEntry."Initial Document Type" := VendLedgEntry."Document Type";
      DtldVendLedgEntry."Initial Entry Positive" := VATAgentVATPmtAmount > 0;
      DtldVendLedgEntry."Agreement No." := VendLedgEntry."Agreement No.";
      DtldVendLedgEntry."Journal Batch Name" := GenJnlLine."Journal Batch Name";
      DtldVendLedgEntry."Reason Code" := GenJnlLine."Reason Code";
      DtldVendLedgEntry."Source Code" := GenJnlLine."Source Code";
      DtldVendLedgEntry."Transaction No." := VendLedgEntry."Transaction No.";
      DtldVendLedgEntry."Vendor Posting Group" := GenJnlLine."Posting Group";
    END;

    PROCEDURE PostVATAllocDepreciation@1210018(GenJnlLine@1210004 : Record 81;VATAllocLine@1210000 : Record 14925;DeprAmount@1210005 : Decimal;DeprBookCode@1210006 : Code[10]);
    VAR
      FA@1210001 : Record 5600;
      FADeprBook@1210002 : Record 5612;
      FAPostingGr@1210003 : Record 5606;
      GLEntry@1170000000 : Record 17;
      GLAcc@1170000001 : Record 15;
    BEGIN
      FA.GET(VATAllocLine."FA No.");
      FADeprBook.GET(FA."No.",DeprBookCode);
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      FAPostingGr.TESTFIELD("Accum. Depreciation Account");
      FAPostingGr.TESTFIELD("Depreciation Expense Acc.");

      InitGLEntry(GenJnlLine,GLEntry,
        FAPostingGr."Accum. Depreciation Account",DeprAmount,0,FALSE,TRUE);
      GLAcc.GET(GLEntry."G/L Account No.");
      GLEntry.Description :=
        COPYSTR(GenJnlLine.Description + ' ' + GLAcc.Name,1,MAXSTRLEN(GLEntry.Description));
      GLEntry."Bal. Account Type" := GLEntry."Bal. Account Type"::"G/L Account";
      GLEntry."Bal. Account No." := FAPostingGr."Depreciation Expense Acc.";
      GLEntry."Source Type" := GLEntry."Source Type"::"Fixed Asset";
      GLEntry."Source No." := FA."No.";
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);

      InitGLEntry(GenJnlLine,GLEntry,
        FAPostingGr."Depreciation Expense Acc.",-DeprAmount,0,FALSE,TRUE);
      GLAcc.GET(GLEntry."G/L Account No.");
      GLEntry.Description :=
        COPYSTR(GenJnlLine.Description + ' ' + GLAcc.Name,1,MAXSTRLEN(GLEntry.Description));
      GLEntry."Bal. Account Type" := GLEntry."Bal. Account Type"::"G/L Account";
      GLEntry."Bal. Account No." := FAPostingGr."Accum. Depreciation Account";
      GLEntry."Source Type" := GLEntry."Source Type"::"Fixed Asset";
      GLEntry."Source No." := FA."No.";
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE CheckVendPrepmtApplPostingDate@1210023(GenJnlLine@1210002 : Record 81;NewCVLedgEntryBuf@1210000 : Record 382;OldVendLedgEntry@1210001 : Record 25;Vend@1101495000 : Record 23);
    BEGIN
      IF GenJnlLine."Prepayment Status" <> GenJnlLine."Prepayment Status"::" " THEN
        EXIT;

      WITH OldVendLedgEntry DO
        IF (NewCVLedgEntryBuf.Prepayment XOR Prepayment)
          //NC OAM37 > DP
          AND (Vend."Vendor Type" IN [Vend."Vendor Type"::Vendor,Vend."Vendor Type"::"Tax Authority",Vend."Vendor Type"::Person])
          //NC OAM37 < DP
        THEN
          IF NewCVLedgEntryBuf.Prepayment THEN
            CheckVendApplDates(NewCVLedgEntryBuf."Posting Date","Posting Date",NewCVLedgEntryBuf."Entry No.")
          ELSE
            CheckVendApplDates("Posting Date",NewCVLedgEntryBuf."Posting Date","Entry No.");
    END;

    LOCAL PROCEDURE CheckCustPrepmtApplPostingDate@1210029(GenJnlLine@1210002 : Record 81;NewCVLedgEntryBuf@1210000 : Record 382;OldCustLedgEntry@1210001 : Record 21);
    BEGIN
      IF GenJnlLine."Prepayment Status" <> GenJnlLine."Prepayment Status"::" " THEN
        EXIT;

      WITH OldCustLedgEntry DO
        IF NewCVLedgEntryBuf.Prepayment XOR Prepayment THEN
          IF NewCVLedgEntryBuf.Prepayment THEN
            CheckCustApplDates(NewCVLedgEntryBuf."Posting Date","Posting Date",NewCVLedgEntryBuf."Entry No.")
          ELSE
            CheckCustApplDates("Posting Date",NewCVLedgEntryBuf."Posting Date","Entry No.");
    END;

    LOCAL PROCEDURE CheckVendApplDates@1210027(PrepaymentPostingDate@1210003 : Date;InitialEntryPostingDate@1210002 : Date;EntryNo@1210001 : Integer);
    VAR
      VendLedgEntry@1210000 : Record 25;
    BEGIN
      WITH VendLedgEntry DO
        IF PrepaymentPostingDate > InitialEntryPostingDate THEN
          ERROR(MustNotBeAfterErr,
            InitialEntryPostingDate,TABLECAPTION,EntryNo);
    END;

    LOCAL PROCEDURE CheckCustApplDates@1210028(PrepaymentPostingDate@1210002 : Date;InitialEntryPostingDate@1210003 : Date;EntryNo@1210004 : Integer);
    VAR
      CustLedgEntry@1210005 : Record 21;
    BEGIN
      WITH CustLedgEntry DO
        IF PrepaymentPostingDate > InitialEntryPostingDate THEN
          ERROR(MustNotBeAfterErr,
            InitialEntryPostingDate,TABLECAPTION,EntryNo);
    END;

    LOCAL PROCEDURE GetGenPostingTypeFromAccType@1210022(AccountType@1210000 : Option) : Integer;
    VAR
      GenJnlLine@1210002 : Record 81;
      DtldCVLedgEntryBuf@1210001 : Record 383;
    BEGIN
      CASE AccountType OF
        GenJnlLine."Account Type"::Vendor:
          EXIT(DtldCVLedgEntryBuf."Gen. Posting Type"::Purchase);
        GenJnlLine."Account Type"::Customer:
          EXIT(DtldCVLedgEntryBuf."Gen. Posting Type"::Sale);
      END;
    END;

    LOCAL PROCEDURE GetVATAmountsToRealize@1210014(VAR DtldCVLedgEntryBuf@1210000 : Record 383);
    VAR
      TempDtldCVLedgEntryBuf@1210001 : TEMPORARY Record 383;
      RealizedVATEntry@1210002 : Record 254;
    BEGIN
      TempDtldCVLedgEntryBuf.COPY(DtldCVLedgEntryBuf);
      WITH VATEntryToRealize DO BEGIN
        Base := 0;
        Amount := 0;
        "Additional-Currency Base" := 0;
        "Additional-Currency Amount" := 0;
      END;
      WITH TempDtldCVLedgEntryBuf DO BEGIN
        SETRANGE("CV Ledger Entry No.");
        SETRANGE(Prepayment,FALSE);
        IF FINDSET THEN
          REPEAT
            RealizedVATEntry.SETRANGE("CV Ledg. Entry No.","CV Ledger Entry No.");
            IF RealizedVATEntry.FINDSET THEN
              REPEAT
                VATEntryToRealize.Base += RealizedVATEntry.Base;
                VATEntryToRealize.Amount += RealizedVATEntry.Amount;
                VATEntryToRealize."Additional-Currency Base" += RealizedVATEntry."Additional-Currency Base";
                VATEntryToRealize."Additional-Currency Amount" += RealizedVATEntry."Additional-Currency Amount";
              UNTIL RealizedVATEntry.NEXT = 0;
          UNTIL TempDtldCVLedgEntryBuf.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE IsPrepayment@1210042(DocumentType@1000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Prepayment@1210000 : Boolean) : Boolean;
    BEGIN
      EXIT(
        (DocumentType IN [DocumentType::Payment,DocumentType::Refund]) AND
        Prepayment AND GLSetup."Enable Russian Accounting");
    END;

    LOCAL PROCEDURE CheckLedgerEntryIsNeeded@1210000(BankAcc@1210000 : Record 270;GenJnlLine@1210001 : Record 81) : Boolean;
    BEGIN
      WITH GenJnlLine DO
        EXIT((((Amount <= 0) OR (BankAcc."Account Type" = BankAcc."Account Type"::"Cash Account")) AND
          ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND "Check Printed") OR
          ((Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Manual Check")) OR
          ((Amount > 0) AND (BankAcc."Account Type" = BankAcc."Account Type"::"Cash Account") AND
          ("Bank Payment Type" = "Bank Payment Type"::"Manual Check")))
    END;

    LOCAL PROCEDURE GetAppliedAmountFromBuffers@123(NewCVLedgEntryBuf@1000 : Record 382;OldCVLedgEntryBuf@1001 : Record 382) : Decimal;
    BEGIN
      IF (((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment) AND
           (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo")) OR
          ((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Refund) AND
           (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice))) AND
         (ABS(NewCVLedgEntryBuf."Remaining Amount") < ABS(OldCVLedgEntryBuf."Amount to Apply"))
      THEN
        EXIT(ABSMax(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf."Amount to Apply"));
      EXIT(ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf."Amount to Apply"));
    END;

    LOCAL PROCEDURE GetPostingAccountNo@225(VATPostingSetup@1002 : Record 325;VATEntry@1001 : Record 254;UnrealizedVAT@1000 : Boolean) : Code[20];
    VAR
      TaxJurisdiction@1003 : Record 320;
    BEGIN
      IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Sales Tax" THEN BEGIN
        VATEntry.TESTFIELD("Tax Jurisdiction Code");
        TaxJurisdiction.GET(VATEntry."Tax Jurisdiction Code");
        CASE VATEntry.Type OF
          VATEntry.Type::Sale:
            EXIT(TaxJurisdiction.GetSalesAccount(UnrealizedVAT));
          VATEntry.Type::Purchase:
            EXIT(TaxJurisdiction.GetPurchAccount(UnrealizedVAT));
        END;
      END;

      CASE VATEntry.Type OF
        VATEntry.Type::Sale:
          EXIT(VATPostingSetup.GetSalesAccount(UnrealizedVAT));
        VATEntry.Type::Purchase:
          EXIT(VATPostingSetup.GetPurchAccount(UnrealizedVAT));
      END;
    END;

    LOCAL PROCEDURE PostDeferral@125(VAR GenJournalLine@1000 : Record 81;AccountNumber@1006 : Code[20]);
    VAR
      DeferralTemplate@1001 : Record 1700;
      DeferralHeader@1002 : Record 1701;
      DeferralLine@1003 : Record 1702;
      GLEntry@1004 : Record 17;
      CurrExchRate@1012 : Record 330;
      DeferralUtilities@1005 : Codeunit 1720;
      PerPostDate@1007 : Date;
      PeriodicCount@1008 : Integer;
      AmtToDefer@1010 : Decimal;
      AmtToDeferACY@1009 : Decimal;
      EmptyDeferralLine@1011 : Boolean;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF "Source Type" IN ["Source Type"::Vendor,"Source Type"::Customer] THEN
          // Purchasing and Sales, respectively
          // We can create these types directly from the GL window, need to make sure we don't already have a deferral schedule
          // created for this GL Trx before handing it off to sales/purchasing subsystem
          IF "Source Code" <> GLSourceCode THEN BEGIN
            PostDeferralPostBuffer(GenJournalLine);
            EXIT;
          END;

        IF DeferralHeader.GET(DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.") THEN BEGIN
          EmptyDeferralLine := FALSE;
          // Get the range of detail records for this schedule
          DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType::"G/L");
          DeferralLine.SETRANGE("Gen. Jnl. Template Name","Journal Template Name");
          DeferralLine.SETRANGE("Gen. Jnl. Batch Name","Journal Batch Name");
          DeferralLine.SETRANGE("Document Type",0);
          DeferralLine.SETRANGE("Document No.",'');
          DeferralLine.SETRANGE("Line No.","Line No.");
          IF DeferralLine.FINDSET THEN
            REPEAT
              IF DeferralLine.Amount = 0.0 THEN
                EmptyDeferralLine := TRUE;
            UNTIL (DeferralLine.NEXT = 0) OR EmptyDeferralLine;
          IF EmptyDeferralLine THEN
            ERROR(ZeroDeferralAmtErr,"Line No.","Deferral Code");
          DeferralHeader."Amount to Defer (LCY)" :=
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",
                DeferralHeader."Amount to Defer","Currency Factor"));
          DeferralHeader.MODIFY;
        END;

        DeferralUtilities.RoundDeferralAmount(
          DeferralHeader,
          "Currency Code","Currency Factor","Posting Date",AmtToDefer,AmtToDeferACY);

        DeferralTemplate.GET("Deferral Code");
        DeferralTemplate.TESTFIELD("Deferral Account");
        DeferralTemplate.TESTFIELD("Deferral %");

        // Get the Deferral Header table so we know the amount to defer...
        // Assume straight GL posting
        IF DeferralHeader.GET(DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.") THEN BEGIN
          // Get the range of detail records for this schedule
          DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType::"G/L");
          DeferralLine.SETRANGE("Gen. Jnl. Template Name","Journal Template Name");
          DeferralLine.SETRANGE("Gen. Jnl. Batch Name","Journal Batch Name");
          DeferralLine.SETRANGE("Document Type",0);
          DeferralLine.SETRANGE("Document No.",'');
          DeferralLine.SETRANGE("Line No.","Line No.");
        END ELSE
          ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");

        InitGLEntry(GenJournalLine,GLEntry,
          AccountNumber,
          -DeferralHeader."Amount to Defer (LCY)",
          -DeferralHeader."Amount to Defer",TRUE,TRUE);
        GLEntry.Description := DeferralTemplate.Description;
        InsertGLEntry(GenJournalLine,GLEntry,TRUE);

        InitGLEntry(GenJournalLine,GLEntry,
          DeferralTemplate."Deferral Account",
          DeferralHeader."Amount to Defer (LCY)",
          DeferralHeader."Amount to Defer",TRUE,TRUE);
        GLEntry.Description := DeferralTemplate.Description;
        InsertGLEntry(GenJournalLine,GLEntry,TRUE);

        // Here we want to get the Deferral Details table range and loop through them...
        IF DeferralLine.FINDSET THEN BEGIN
          PeriodicCount := 1;
          REPEAT
            PerPostDate := DeferralLine."Posting Date";
            IF GenJnlCheckLine.DateNotAllowed(PerPostDate) THEN
              ERROR(InvalidPostingDateErr,PerPostDate);

            InitGLEntry(GenJournalLine,GLEntry,AccountNumber,DeferralLine."Amount (LCY)",
              DeferralLine.Amount,
              TRUE,TRUE);
            GLEntry."Posting Date" := PerPostDate;
            GLEntry.Description := DeferralLine.Description;
            InsertGLEntry(GenJournalLine,GLEntry,TRUE);

            InitGLEntry(GenJournalLine,GLEntry,
              DeferralTemplate."Deferral Account",-DeferralLine."Amount (LCY)",
              -DeferralLine.Amount,
              TRUE,TRUE);
            GLEntry."Posting Date" := PerPostDate;
            GLEntry.Description := DeferralLine.Description;
            InsertGLEntry(GenJournalLine,GLEntry,TRUE);
            PeriodicCount := PeriodicCount + 1;
          UNTIL DeferralLine.NEXT = 0;
        END ELSE
          ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");
      END;
    END;

    LOCAL PROCEDURE PostDeferralPostBuffer@127(GenJournalLine@1005 : Record 81);
    VAR
      DeferralPostBuffer@1004 : Record 1703;
      GLEntry@1003 : Record 17;
      PostDate@1000 : Date;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF "Source Type" = "Source Type"::Customer THEN
          DeferralDocType := DeferralDocType::Sales
        ELSE
          DeferralDocType := DeferralDocType::Purchase;

        DeferralPostBuffer.SETRANGE("Deferral Doc. Type",DeferralDocType);
        DeferralPostBuffer.SETRANGE("Document No.","Document No.");
        DeferralPostBuffer.SETRANGE("Deferral Line No.","Deferral Line No.");

        IF DeferralPostBuffer.FINDSET THEN BEGIN
          REPEAT
            PostDate := DeferralPostBuffer."Posting Date";
            IF GenJnlCheckLine.DateNotAllowed(PostDate) THEN
              ERROR(InvalidPostingDateErr,PostDate);

            // When no sales/purch amount is entered, the offset was already posted
            IF (DeferralPostBuffer."Sales/Purch Amount" <> 0) OR (DeferralPostBuffer."Sales/Purch Amount (LCY)" <> 0) THEN BEGIN
              InitGLEntry(GenJournalLine,GLEntry,DeferralPostBuffer."G/L Account",
                DeferralPostBuffer."Sales/Purch Amount (LCY)",
                DeferralPostBuffer."Sales/Purch Amount",
                TRUE,TRUE);
              GLEntry."Posting Date" := PostDate;
              GLEntry.Description := DeferralPostBuffer.Description;
              GLEntry.CopyFromDeferralPostBuffer(DeferralPostBuffer);
              InsertGLEntry(GenJournalLine,GLEntry,TRUE);
            END;

            InitGLEntry(GenJournalLine,GLEntry,
              DeferralPostBuffer."Deferral Account",
              -DeferralPostBuffer."Amount (LCY)",
              -DeferralPostBuffer.Amount,
              TRUE,TRUE);
            GLEntry."Posting Date" := PostDate;
            GLEntry.Description := DeferralPostBuffer.Description;
            InsertGLEntry(GenJournalLine,GLEntry,TRUE);
          UNTIL DeferralPostBuffer.NEXT = 0;
          DeferralPostBuffer.DELETEALL;
        END;
      END;
    END;

    PROCEDURE RemoveDeferralSchedule@128(GenJournalLine@1002 : Record 81);
    VAR
      DeferralUtilities@1000 : Codeunit 1720;
      DeferralDocType@1001 : 'Purchase,Sales,G/L';
    BEGIN
      // Removing deferral schedule after all deferrals for this line have been posted successfully
      WITH GenJournalLine DO
        DeferralUtilities.DeferralCodeOnDelete(
          DeferralDocType::"G/L",
          "Journal Template Name",
          "Journal Batch Name",0,'',"Line No.");
    END;

    LOCAL PROCEDURE GetGLSourceCode@130();
    VAR
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      GLSourceCode := SourceCodeSetup."General Journal";
    END;

    LOCAL PROCEDURE DeferralPosting@131(DeferralCode@1000 : Code[10];SourceCode@1001 : Code[10];AccountNo@1002 : Code[20];VAR GenJournalLine@1005 : Record 81;Balancing@1006 : Boolean);
    BEGIN
      IF DeferralCode <> '' THEN
        // Sales and purchasing could have negative amounts, so check for them first...
        IF SourceCode <> GLSourceCode THEN
          PostDeferralPostBuffer(GenJournalLine)
        ELSE
          // Pure GL trx, only post deferrals if it is not a balancing entry
          IF NOT Balancing THEN
            PostDeferral(GenJournalLine,AccountNo);
    END;

    LOCAL PROCEDURE IsDebitAmount@137(DtldCVLedgEntryBuf@1000 : Record 383;Unapply@1001 : Boolean) : Boolean;
    VAR
      VATPostingSetup@1002 : Record 325;
      VATAmountCondition@1003 : Boolean;
      EntryAmount@1004 : Decimal;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        VATAmountCondition :=
          "Entry Type" IN ["Entry Type"::"Payment Discount (VAT Excl.)","Entry Type"::"Payment Tolerance (VAT Excl.)",
                           "Entry Type"::"Payment Discount Tolerance (VAT Excl.)"];
        IF VATAmountCondition THEN BEGIN
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          VATAmountCondition := VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Full VAT";
        END;
        IF VATAmountCondition THEN
          EntryAmount := "VAT Amount (LCY)"
        ELSE
          EntryAmount := "Amount (LCY)";
        IF Unapply THEN
          EXIT(EntryAmount > 0);
        EXIT(EntryAmount <= 0);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostGenJnlLine@133(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitGLRegister@139(VAR GLRegister@1000 : Record 45;VAR GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertGlobalGLEntry@142(VAR GLEntry@1000 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertGLEntryBuffer@146(VAR TempGLEntryBuf@1000 : TEMPORARY Record 17;VAR GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    PROCEDURE "NCF>"@1000000012();
    BEGIN
    END;

    PROCEDURE SetGLEntryNo@1000000005(GeneralJournalLine@1210000 : Record 81;GLEntry@1210001 : Record 17);
    VAR
      AnalysisViewBudgetEntry@1210002 : Record 366;
      ConsolidationSetup@1210003 : Record 50000;
      GLBudgetName@1210004 : Record 95;
      AnalysisView@1210006 : Record 363;
      DimensionSetEntry@1101495001 : Record 480;
    BEGIN
      //NC PIF001 < DP
      IF AnalysisView.GET(GeneralJournalLine."Analysis View Code") THEN BEGIN
        AnalysisViewBudgetEntry.RESET;
        AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",GeneralJournalLine."Analysis View Code");
        AnalysisViewBudgetEntry.SETRANGE("Budget Name",GeneralJournalLine."Analysis View Budget Code");
        IF GeneralJournalLine."Account Type" = GeneralJournalLine."Account Type"::"G/L Account" THEN
          AnalysisViewBudgetEntry.SETRANGE("G/L Account No.",GLEntry."G/L Account No.");
        IF GeneralJournalLine."Account Type" = GeneralJournalLine."Account Type"::"Fixed Asset" THEN BEGIN
          AnalysisViewBudgetEntry.SETRANGE("FA No.",GeneralJournalLine."Account No.");
          AnalysisViewBudgetEntry.SETRANGE("Depr. Book Code",GeneralJournalLine."Depreciation Book Code");
          AnalysisViewBudgetEntry.SETRANGE("FA Posting Type",GeneralJournalLine."FA Posting Type");
        END;
        //NC NOS-26 > SPA
        {
        IF JournalLineDimension.GET(
           DATABASE::"Gen. Journal Line",
           GeneralJournalLine."Journal Template Name",
           GeneralJournalLine."Journal Batch Name",
           GeneralJournalLine."Line No.",0,
           AnalysisView."Dimension 1 Code")
        THEN
          AnalysisViewBudgetEntry.SETRANGE("Dimension 1 Value Code",JournalLineDimension."Dimension Value Code");
        IF JournalLineDimension.GET(
           DATABASE::"Gen. Journal Line",
           GeneralJournalLine."Journal Template Name",
           GeneralJournalLine."Journal Batch Name",
           GeneralJournalLine."Line No.",0,
           AnalysisView."Dimension 2 Code")
        THEN
          AnalysisViewBudgetEntry.SETRANGE("Dimension 2 Value Code",JournalLineDimension."Dimension Value Code");
        IF JournalLineDimension.GET(
           DATABASE::"Gen. Journal Line",
           GeneralJournalLine."Journal Template Name",
           GeneralJournalLine."Journal Batch Name",
           GeneralJournalLine."Line No.",0,
           AnalysisView."Dimension 3 Code")
        THEN
          AnalysisViewBudgetEntry.SETRANGE("Dimension 3 Value Code",JournalLineDimension."Dimension Value Code");
        IF JournalLineDimension.GET(
           DATABASE::"Gen. Journal Line",
           GeneralJournalLine."Journal Template Name",
           GeneralJournalLine."Journal Batch Name",
           GeneralJournalLine."Line No.",0,
           AnalysisView."Dimension 4 Code")
        THEN
          AnalysisViewBudgetEntry.SETRANGE("Dimension 4 Value Code",JournalLineDimension."Dimension Value Code");
        }
        IF DimensionSetEntry.GET(GeneralJournalLine."Dimension Set ID", AnalysisView."Dimension 1 Code") THEN
          AnalysisViewBudgetEntry.SETRANGE("Dimension 1 Value Code", DimensionSetEntry."Dimension Value Code");
        IF DimensionSetEntry.GET(GeneralJournalLine."Dimension Set ID", AnalysisView."Dimension 2 Code") THEN
          AnalysisViewBudgetEntry.SETRANGE("Dimension 2 Value Code", DimensionSetEntry."Dimension Value Code");
        IF DimensionSetEntry.GET(GeneralJournalLine."Dimension Set ID", AnalysisView."Dimension 3 Code") THEN
          AnalysisViewBudgetEntry.SETRANGE("Dimension 3 Value Code", DimensionSetEntry."Dimension Value Code");
        IF DimensionSetEntry.GET(GeneralJournalLine."Dimension Set ID", AnalysisView."Dimension 4 Code") THEN
          AnalysisViewBudgetEntry.SETRANGE("Dimension 4 Value Code", DimensionSetEntry."Dimension Value Code");
        //NC NOS-26 < SPA

        IF GLEntry."Business Unit Code" <> '' THEN
          AnalysisViewBudgetEntry.SETRANGE("Business Unit Code",GLEntry."Business Unit Code");
        AnalysisViewBudgetEntry.SETRANGE("Posting Date",GLEntry."Posting Date");
        AnalysisViewBudgetEntry.SETRANGE("Entry No.",GeneralJournalLine."Analysis View Budget Entry No.");
        IF AnalysisViewBudgetEntry.FINDFIRST THEN BEGIN
          AnalysisViewBudgetEntry."G/L Entry No." := GLEntry."Entry No.";
          AnalysisViewBudgetEntry.MODIFY;
        END;
      END;
      //NC PIF001 < DP
    END;

    PROCEDURE SetApplicationDim@1000000007(VAR ParTempSelectedDimPos@1000000001 : TEMPORARY Record 369;VAR ParTempSelectedDimNeg@1000000000 : TEMPORARY Record 369);
    BEGIN
      //NC TR269 > EB
      TempSelectedDimPos.RESET;
      TempSelectedDimPos.DELETEALL;
      IF ParTempSelectedDimPos.FIND('-') THEN
        REPEAT
          TempSelectedDimPos.INIT;
          TempSelectedDimPos.TRANSFERFIELDS(ParTempSelectedDimPos);
          TempSelectedDimPos.INSERT;
        UNTIL ParTempSelectedDimPos.NEXT = 0;

      TempSelectedDimNeg.RESET;
      TempSelectedDimNeg.DELETEALL;
      IF ParTempSelectedDimNeg.FIND('-') THEN
        REPEAT
          TempSelectedDimNeg.INIT;
          TempSelectedDimNeg.TRANSFERFIELDS(ParTempSelectedDimNeg);
          TempSelectedDimNeg.INSERT;
        UNTIL ParTempSelectedDimNeg.NEXT = 0;
      //NC TR269 < EB
    END;

    PROCEDURE InsertPosDim@1000000006(VAR GenJnlLine@1101495000 : Record 81);
    VAR
      TempDimSetEntry@1101495001 : TEMPORARY Record 480;
    BEGIN
      //NC TR269 > EB
      IF TempSelectedDimPos.FIND('-') THEN BEGIN
        GLSetup.GET;
        //NC NOS-26 > SPA
        IF GenJnlLine."Dimension Set ID" <> 0 THEN
          DimMgt.GetDimensionSet(TempDimSetEntry, GenJnlLine."Dimension Set ID");
        //NC NOS-26 < SPA

        REPEAT
          //NC NOS-26 > SPA
          {
          IF (TempSelectedDimPos."Dimension Code" = GLSetup."Global Dimension 1 Code") AND
             (TempSelectedDimPos."New Dimension Value Code" <> GenJnlLine."Shortcut Dimension 1 Code")
          THEN BEGIN
            GenJnlLine."Shortcut Dimension 1 Code" := TempSelectedDimPos."New Dimension Value Code";
            GenJnlLine.MODIFY;
          END;
          IF (TempSelectedDimPos."Dimension Code" = GLSetup."Global Dimension 2 Code") AND
             (TempSelectedDimPos."New Dimension Value Code" <> GenJnlLine."Shortcut Dimension 2 Code")
          THEN BEGIN
            GenJnlLine."Shortcut Dimension 2 Code" := TempSelectedDimPos."New Dimension Value Code";
            GenJnlLine.MODIFY;
          END;

          IF TempJnlLineDim.FINDFIRST THEN
            TablID := TempJnlLineDim."Table ID"
          ELSE
            TablID := 81;

          TempJnlLineDim."Table ID" := TablID;
          TempJnlLineDim."Dimension Code" := TempSelectedDimPos."Dimension Code";
          TempJnlLineDim."Dimension Value Code" := TempSelectedDimPos."New Dimension Value Code";
          IF NOT TempJnlLineDim.INSERT THEN
            TempJnlLineDim.MODIFY;
          }

          TempDimSetEntry."Dimension Code" := TempSelectedDimPos."Dimension Code";
          IF TempDimSetEntry.FIND THEN
            TempDimSetEntry.DELETE;
          TempDimSetEntry.VALIDATE("Dimension Value Code", TempSelectedDimPos."New Dimension Value Code");
          TempDimSetEntry.INSERT;
          //NC NOS-26 < SPA
        UNTIL TempSelectedDimPos.NEXT = 0;

        //NC NOS-26 > SPA
        DimMgt.UpdateGenJnlLineDim(GenJnlLine, DimMgt.GetDimensionSetID(TempDimSetEntry));
        //GenJnlLine.MODIFY;
        //NC NOS-26 < SPA
      END;
      //NC TR269 < EB
    END;

    PROCEDURE InsertNegDim@1000000001(VAR GenJnlLine@1101495000 : Record 81);
    VAR
      TempDimSetEntry@1101495001 : TEMPORARY Record 480;
    BEGIN
      //NC TR269 > EB
      IF TempSelectedDimNeg.FIND('-') THEN BEGIN
        GLSetup.GET;
        //NC NOS-26 > SPA
        IF GenJnlLine."Dimension Set ID" <> 0 THEN
          DimMgt.GetDimensionSet(TempDimSetEntry, GenJnlLine."Dimension Set ID");
        //NC NOS-26 < SPA

        REPEAT
          //NC NOS-26 > SPA
          {
          IF (TempSelectedDimNeg."Dimension Code" = GLSetup."Global Dimension 1 Code") AND
                  (TempSelectedDimNeg."New Dimension Value Code" <> GenJnlLine."Shortcut Dimension 1 Code") THEN BEGIN
            GenJnlLine."Shortcut Dimension 1 Code" := TempSelectedDimNeg."New Dimension Value Code";
            IF GenJnlLine.MODIFY THEN;
          END;
          IF (TempSelectedDimNeg."Dimension Code" = GLSetup."Global Dimension 2 Code") AND
                  (TempSelectedDimNeg."New Dimension Value Code" <> GenJnlLine."Shortcut Dimension 2 Code") THEN BEGIN
            GenJnlLine."Shortcut Dimension 2 Code" := TempSelectedDimNeg."New Dimension Value Code";
            IF GenJnlLine.MODIFY THEN;
          END;
          IF TempJnlLineDim.FINDFIRST THEN
            TablID := TempJnlLineDim."Table ID"
          ELSE
            TablID := 81;
          TempJnlLineDim."Table ID" := TablID;

          TempJnlLineDim."Dimension Code" := TempSelectedDimNeg."Dimension Code";
          TempJnlLineDim."Dimension Value Code" := TempSelectedDimNeg."New Dimension Value Code";
          IF NOT TempJnlLineDim.INSERT THEN
            TempJnlLineDim.MODIFY;
          }
          TempDimSetEntry."Dimension Code" := TempSelectedDimPos."Dimension Code";
          IF TempDimSetEntry.FIND THEN
            TempDimSetEntry.DELETE;
          TempDimSetEntry.VALIDATE("Dimension Value Code", TempSelectedDimPos."New Dimension Value Code");
          TempDimSetEntry.INSERT;
          //NC NOS-26 < SPA
        UNTIL TempSelectedDimNeg.NEXT = 0;

        //NC NOS-26 > SPA
        DimMgt.UpdateGenJnlLineDim(GenJnlLine, DimMgt.GetDimensionSetID(TempDimSetEntry));
        //GenJnlLine.MODIFY;
        //NC NOS-26 < SPA
      END;
      //NC TR269 < EB
    END;

    PROCEDURE GenJnlLineShortCutsModify@1000000002(VAR GenJournalLine@1101495000 : Record 81);
    BEGIN
      //NC TR269 > EB
      IF TempSelectedDimPos.FIND('-') OR TempSelectedDimNeg.FIND('-') THEN
        //NC NOS-26 > SPA
        {
        IF TempJnlLineDim.FIND('-') THEN
          REPEAT
            CASE TempJnlLineDim."Dimension Code" OF
              GLSetup."Global Dimension 1 Code" :
                GenJnlLine."Shortcut Dimension 1 Code" := TempJnlLineDim."Dimension Value Code";
              GLSetup."Global Dimension 2 Code" :
                GenJnlLine."Shortcut Dimension 2 Code" := TempJnlLineDim."Dimension Value Code";
            END;
          UNTIL TempJnlLineDim.NEXT = 0;
        }
        DimMgt.UpdateGenJnlLineDim(GenJournalLine, GenJournalLine."Dimension Set ID");
        //NC NOS-26 < SPA

      //NC TR269 < EB
    END;

    PROCEDURE CheckAccount@1000000000(CheckGLEntry@1210000 : Record 17);
    VAR
      Acc@1210001 : Record 15;
      Comp@1210003 : Record 2000000006;
    BEGIN
      // NC TR219 > EB
      GLSetup.GET;
      IF GLSetup."Amount Post Check" THEN BEGIN
        Comp.GET(COMPANYNAME);
        IF Comp."Posting Type" IN [Comp."Posting Type"::"Local"] THEN BEGIN
          Acc.GET(CheckGLEntry."G/L Account No.");
          IF Acc."Account Control" <> 0 THEN BEGIN
            Acc.CALCFIELDS(Balance);
            IF (Acc."Account Control" = Acc."Account Control"::Act) AND ((Acc.Balance + CheckGLEntry.Amount) < 0) THEN
              ERROR(Text55002, Acc."No.");
            IF (Acc."Account Control" = Acc."Account Control"::Pass) AND ((Acc.Balance + CheckGLEntry.Amount) > 0) THEN
              ERROR(Text55003, Acc."No.");
          END;
        END
      END;
      // NC TR219 < EB
    END;

    PROCEDURE CheckUserAccounts@1000000009(CheckGLEntry@1210000 : Record 17);
    VAR
      UserAcc@1210001 : Record 50034;
      Comp@1210003 : Record 2000000006;
    BEGIN
      //NC TR217 > DP
      GLSetup.GET;
      IF GLSetup."User Account Check" THEN BEGIN
        Comp.GET(COMPANYNAME);
        IF Comp."Company Type" IN [Comp."Company Type"::" ",Comp."Company Type"::Standalone] THEN
          IF NOT UserAcc.GET(USERID, CheckGLEntry."G/L Account No.") THEN
          ERROR(Text55004, CheckGLEntry."G/L Account No.", UPPERCASE(USERID));
      END;
      //NC TR217 < DP
    END;

    PROCEDURE CheckAmount@1000000008(CheckGLEntry@1210000 : Record 17);
    VAR
      UserSetup@1210001 : Record 91;
      Comp@1210003 : Record 2000000006;
    BEGIN
      //NC TR220 > DP
      GLSetup.GET;
      IF GLSetup."User Amount Post. Check" THEN BEGIN
        Comp.GET(COMPANYNAME);
        IF Comp."Posting Type" IN [Comp."Company Type"::" ",Comp."Company Type"::Standalone] THEN BEGIN
          UserSetup.GET(USERID);
          UserSetup.TESTFIELD("Max Amount Allow");
          IF ABS(CheckGLEntry.Amount) > UserSetup."Max Amount Allow" THEN
            ERROR(Text55005, UPPERCASE(USERID), UserSetup."Max Amount Allow");
        END;
      END;
      //NC TR220 < DP
    END;

    PROCEDURE SetClosePeriod@1000000003(VAR SetGLEntry@1210000 : Record 17);
    VAR
      AccPeriod@1210001 : Record 50;
    BEGIN
      //NC TR221 > DP
      AccPeriod.GET(CALCDATE('<-CM>', NORMALDATE(SetGLEntry."Posting Date")));
      IF AccPeriod."Closed Period" THEN BEGIN
        SetGLEntry."Closed Period Entry" := TRUE;
        SetGLEntry.MODIFY;
      END;
      //NC TR221 < DP
    END;

    PROCEDURE CheckAgreementAmount@1101495017(GenJnlLineLoc@1210000 : Record 81);
    VAR
      PurchSetup@1101495000 : Record 312;
      VendorAgreementLoc@1210001 : Record 14901;
      CurrExchRateLoc@1210002 : Record 330;
      AgreementAmountLCY@1210004 : Decimal;
      VLELoc@1210003 : Record 25;
      AgreementAmount@1210006 : Decimal;
      CurrencyLoc@1210005 : Record 4;
      LEAmount@1210007 : Decimal;
      GJAmount@1210008 : Decimal;
      VendorNo@1000000000 : Code[20];
    BEGIN
      //NC TR189 < DP
      PurchSetup.GET;
      IF NOT ((PurchSetup."Check Pmtn. Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Payment) OR
              ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount > 0))))
        AND NOT ((PurchSetup."Check Liab. Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Invoice) OR
              ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount < 0))))
      THEN
        EXIT;

      GLSetup.GET;
      VendorNo :='';
      IF GenJnlLineLoc."Account Type" = GenJnlLineLoc."Account Type"::Vendor THEN
        VendorNo := GenJnlLineLoc."Account No.";
      IF GenJnlLineLoc."Bal. Account Type" = GenJnlLineLoc."Bal. Account Type"::Vendor THEN
        VendorNo := GenJnlLineLoc."Bal. Account No.";

      IF VendorAgreementLoc.GET(VendorNo, GenJnlLineLoc."Agreement No.") THEN BEGIN
        IF VendorAgreementLoc."Agreement Amount" = 0 THEN
          EXIT;
        AgreementAmount := VendorAgreementLoc."Agreement Amount";
        CASE VendorAgreementLoc."Agreement Type" OF
        VendorAgreementLoc."Agreement Type"::Standard:

          BEGIN
          VLELoc.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
          VLELoc.SETRANGE("Vendor No.", GenJnlLineLoc."Account No.");
          VLELoc.SETRANGE("Agreement No.", GenJnlLineLoc."Agreement No.");
          IF VLELoc.FIND('-') THEN REPEAT
            VLELoc.CALCFIELDS("Original Amount");
            IF (((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Payment) OR
                ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount>0))) AND
                (VLELoc."Original Amount" > 0) AND
                (VLELoc."Document Type" <> VLELoc."Document Type"::"Credit Memo")) THEN
              BEGIN
                IF VLELoc."Currency Code"<>VendorAgreementLoc."Currency Code" THEN
                  LEAmount := ROUND(CurrExchRateLoc.ExchangeAmtFCYToFCY(GenJnlLineLoc."Posting Date",
                                    VLELoc."Currency Code",
                                    VendorAgreementLoc."Currency Code",
                                    VLELoc."Original Amount"),GLSetup."Amount Rounding Precision")
                ELSE
                  LEAmount :=VLELoc."Original Amount";
                AgreementAmount -= LEAmount;
              END;
            IF (((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Invoice)
              OR ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount<0))) AND
              (VLELoc."Original Amount" < 0)) OR
              (((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Invoice)
              OR ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ")  AND (GenJnlLineLoc.Amount<0))) AND
              (VLELoc."Document Type" = VLELoc."Document Type"::"Credit Memo")) THEN
            BEGIN
                IF VLELoc."Currency Code"<>VendorAgreementLoc."Currency Code" THEN
                  LEAmount := ROUND(CurrExchRateLoc.ExchangeAmtFCYToFCY(GenJnlLineLoc."Posting Date",
                                    VLELoc."Currency Code",
                                    VendorAgreementLoc."Currency Code",
                                    VLELoc."Original Amount"),GLSetup."Amount Rounding Precision")
                ELSE
                  LEAmount :=VLELoc."Original Amount";
                AgreementAmount += LEAmount;
            END;
          UNTIL VLELoc.NEXT = 0;
          END;
        VendorAgreementLoc."Agreement Type"::Trade:
          BEGIN

          END;
        END;
        IF VendorAgreementLoc."Currency Code" <> GenJnlLineLoc."Currency Code" THEN BEGIN
          GJAmount := ROUND(CurrExchRateLoc.ExchangeAmtFCYToFCY(GenJnlLineLoc."Posting Date",
              GenJnlLineLoc."Currency Code",
              VendorAgreementLoc."Currency Code",
              GenJnlLineLoc.Amount),GLSetup."Amount Rounding Precision");
        END ELSE
          GJAmount := GenJnlLineLoc.Amount;

        IF ABS(GJAmount) > ABS(AgreementAmount) THEN
          IF NOT CONFIRM(STRSUBSTNO(Text50105, ABS(GJAmount), VendorAgreementLoc."Currency Code",
            AgreementAmount,VendorAgreementLoc."Currency Code"))
          THEN
            ERROR('');
      END;
      //NC TR189 < DP
    END;

    LOCAL PROCEDURE PostFI@1000000011(GenJnlLine@1101495009 : Record 81);
    VAR
      GLEntry@1101495010 : Record 17;
      TempGLEntry@1000 : Record 17;
      TempFIGLPostBuf@1001 : Record 50108;
      FIReg@1002 : Record 50109;
      FAAutomaticEntry_@1003 : Codeunit 5607;
      ShortcutDim1Code@1004 : Code[20];
      ShortcutDim2Code@1005 : Code[20];
      Correction2_@1006 : Boolean;
      NetDisposalNo_@1007 : Integer;
      "NCV>"@1210001 : Integer;
      FALedgerEntryRec_@1210000 : Record 5601;
      DepreciationBook_@1210002 : Record 5611;
      GLFIValueRelation@1101495000 : Record 50117;
      FIInsertLedgerEntry@1101495001 : Codeunit 50035;
      FIValueNo@1101495002 : Integer;
      FILedgerEntry@1101495003 : Record 50106;
      NextFILedgEntryNo@1101495004 : Integer;
      ReversalEntry@1101495005 : Record 179;
      FIValueEntry@1101495007 : Record 50107;
      GLEntryLoc@1101495008 : Record 17;
      SaveGenJnlLine@1101495006 : Record 81;
      VATPostingSetup@1101495011 : Record 325;
      GenJnlPostReverse@1101495012 : Codeunit 17;
    BEGIN
      //NC MTF02 > II
      {
      IF GenJnlLine.Correction = FALSE THEN BEGIN
        WITH GenJnlLine DO BEGIN
          //InitGLEntry('',"Amount (LCY)","Source Currency Amount",TRUE,"System-Created Entry");
          InitGLEntry(GenJnlLine,GLEntry,'',"Amount (LCY)","Source Currency Amount",TRUE,"System-Created Entry"); // NC NOS-26 SPA
          GLEntry."Gen. Posting Type" := "Gen. Posting Type";
          GLEntry."Bal. Account Type" := "Bal. Account Type";
          GLEntry."Bal. Account No." := "Bal. Account No.";
          IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::"6" THEN
            GLEntry."Financial Instrument No." := GenJnlLine."Account No.";

          IF "Gen. Posting Type" = 0 THEN BEGIN
            GLEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
          END;

          InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
          TempGLEntry := GLEntry;
          FIGLJnlPostLine.GenJnlPostLine(
            GenJnlLine,TempGLEntry.Amount,TempGLEntry."VAT Amount",NextTransactionNo,NextEntryNo);
          FIValueNo := FIGLJnlPostLine.GetFIValueEntryNo;

          ShortcutDim1Code := "Shortcut Dimension 1 Code";
          ShortcutDim2Code := "Shortcut Dimension 2 Code";
        END;
        WITH TempFIGLPostBuf DO
          IF FIGLJnlPostLine.FindFirstGLAcc(TempFIGLPostBuf) THEN
            REPEAT
              GenJnlLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
              GenJnlLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
              GenJnlLine.Correction := Correction;
              FADimAlreadyChecked := TempFIGLPostBuf."FI Posting Group"  <> '';
              IF "Original General Journal Line" THEN
                {
                InitGLEntry("Account No.",Amount,TempGLEntry."Additional-Currency Amount", TRUE, TRUE)
                }
                //InitGLEntry("Account No.", Amount, TempGLEntry."Additional-Currency Amount", TRUE, FALSE)
                InitGLEntry(GenJnlLine,GLEntry,"Account No.", Amount, TempGLEntry."Additional-Currency Amount", TRUE, FALSE) // NC NOS-26 SPA
              ELSE BEGIN
                CheckNonAddCurrCodeOccurred('');
                //InitGLEntry("Account No.",Amount,0,FALSE, TRUE);
                InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,0,FALSE, TRUE); // NC NOS-26 SPA
              END;
              FADimAlreadyChecked := FALSE;
              GLEntry."Gen. Posting Type" := TempGLEntry."Gen. Posting Type";
              GLEntry."Gen. Bus. Posting Group" := TempGLEntry."Gen. Bus. Posting Group";
              GLEntry."Gen. Prod. Posting Group" := TempGLEntry."Gen. Prod. Posting Group";
              GLEntry."VAT Bus. Posting Group" := TempGLEntry."VAT Bus. Posting Group";
              GLEntry."VAT Prod. Posting Group" := TempGLEntry."VAT Prod. Posting Group";
              GLEntry."Tax Area Code" := TempGLEntry."Tax Area Code";
              GLEntry."Tax Liable" := TempGLEntry."Tax Liable";
              GLEntry."Tax Group Code" := TempGLEntry."Tax Group Code";
              GLEntry."Use Tax" := TempGLEntry."Use Tax";
              GLEntry."VAT Amount" := TempGLEntry."VAT Amount";
              GLEntry."Bal. Account Type" := TempGLEntry."Bal. Account Type";
              GLEntry."Bal. Account No." := TempGLEntry."Bal. Account No.";
              IF GLEntry."Original Currency Code" = '' THEN BEGIN
                GLEntry."Original Amount" := GLEntry.Amount;
                IF (Amount > 0) AND NOT Correction OR
                   (Amount < 0) AND Correction
                THEN BEGIN
                  GLEntry."Original Debit Amount" := Amount;
                  GLEntry."Original Credit Amount" := 0
                END ELSE BEGIN
                  GLEntry."Original Debit Amount" := 0;
                  GLEntry."Original Credit Amount" := -Amount;
                END;
              END;

              IF GenJnlLine."Bal. Account No." <> '' THEN BEGIN
                GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
                GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
              END;

              IF GenJnlLine."Amount Type" = GenJnlLine."Amount Type"::Interest THEN BEGIN
                GLEntry.Quantity := 0;
                GLEntry."Debit Quantity" := 0;
                GLEntry."Credit Quantity" := 0;
              END;

              IF ((GenJnlLine."FI EntryType" = GenJnlLine."FI EntryType"::Sale) AND (GenJnlLine."Short Position" = FALSE)) OR
                 ((GenJnlLine."FI EntryType" = GenJnlLine."FI EntryType"::Purchase) AND (GenJnlLine."Short Position" = TRUE)) THEN BEGIN
                GLEntry.Quantity := 0;
                GLEntry."Debit Quantity" := 0;
                GLEntry."Credit Quantity" := 0;
              END;

              IF TempFIGLPostBuf."FI Posting Group" <> '' THEN BEGIN
                FIGLPostBuf := TempFIGLPostBuf;
                FIGLPostBuf."Entry No." := NextEntryNo;
                FIGLPostBuf.INSERT;
              END;
              //InsertGLEntry(TRUE);
              InsertGLEntry(GenJnlLine,GLEntry,TRUE); //NC NOS-26 SPA

              GLFIValueRelation."G/L Entry No." := GLEntry."Entry No.";
              GLFIValueRelation."FI Value Entry No." := FIValueNo;
              GLFIValueRelation.INSERT;

            UNTIL FIGLJnlPostLine.GetNextGLAcc(TempFIGLPostBuf) = 0;

        GenJnlLine."Shortcut Dimension 1 Code" := ShortcutDim1Code;
        GenJnlLine."Shortcut Dimension 2 Code" := ShortcutDim2Code;
        //GenJnlLine.Correction := Correction2;
        GLEntry := TempGLEntry;
        //GLEntryTmp := GLEntry;
        TempGLEntryBuf := GLEntry; // NC NOS-26 SPA

        FICalcAvgCost.SetAvgCostAdjmt(GenJnlLine."Account No.", GenJnlLine."FI Portfolio",
                                      GenJnlLine."FI Posting Book", GenJnlLine."Posting Date");

        FICalcAvgCost.CalcFIAvgCost(GenJnlLine."Account No.", GenJnlLine."FI Portfolio",
                                    GenJnlLine."FI Posting Book", FALSE, GenJnlLine."Posting Date");


        //InsertGenJnlLineForFI(GLEntry."Entry No.", GenJnlLine);
        //PostCostAuto;

        //PostVAT;
        PostVAT(GenJnlLine,GLEntry,VATPostingSetup); // NC NOS-26 SPA
        //PostRealisedCoupon;
        InsertGenJnlLineForCoupon(FIValueNo, GenJnlLine);

        IF FIReg.FINDLAST THEN BEGIN
          FIReg."G/L Register No." := GLReg."No.";
          FIReg.MODIFY;
        END;

      END ELSE BEGIN
        // коррекция FI Ledger Entry
        FILedgerEntry.GET(GenJnlLine."Appl. to FI Entry No.");
        SaveGenJnlLine := GenJnlLine;
        NextFILedgEntryNo := PostFICorr(GenJnlLine);
        GenJnlLine := SaveGenJnlLine;
        GenJnlPostReverse.ReverseFILedgEntry(FILedgerEntry, NextFILedgEntryNo, ReversalEntry, FIReg, GenJnlLine, GLReg);

        //GLEntryTmp.DELETEALL;
        TempGLEntryBuf.DELETEALL; // NC NOS-26 SPA

        IF FIReg.FINDLAST THEN BEGIN
          FIReg."G/L Register No." := GLReg."No.";
          FIReg.MODIFY;
        END;

      END;
      }
      //NC MTF02 < II
    END;

    PROCEDURE PostFICorr@1101495016(GenJnlLine@1101495000 : Record 81) RetValue : Integer;
    VAR
      GLFIValueRelation@1101495009 : Record 50117;
      FIInsertLedgerEntry@1101495008 : Codeunit 50035;
      FIValueNo@1101495007 : Integer;
      FILedgerEntry@1101495006 : Record 50106;
      NextFILedgEntryNo@1101495005 : Integer;
      ReversalEntry@1101495004 : Record 179;
      FIValueEntry@1101495003 : Record 50107;
      GLEntryLoc@1101495002 : Record 17;
      LastLineNo@1101495010 : Integer;
      FI@1101495011 : Record 50021;
    BEGIN
      {
      //NC MTF02 > II
      IF GenJnlLineForCorr.FINDLAST THEN
        LastLineNo := GenJnlLineForCorr."Line No." + 10000
      ELSE
        LastLineNo := 10000;

      FI.GET(GenJnlLine."Financial Instrument No.");
      FIValueEntry.SETCURRENTKEY("FI Ledger Entry No.");
      FIValueEntry.SETRANGE("FI Ledger Entry No.", GenJnlLine."Appl. to FI Entry No.");
      IF FIValueEntry.FIND('-') THEN
        REPEAT
          GLFIValueRelation.SETRANGE("FI Value Entry No.", FIValueEntry."Entry No.");
          IF GLFIValueRelation.FIND('-') THEN
            REPEAT
              GLEntryLoc.GET(GLFIValueRelation."G/L Entry No.");
              GenJnlLineForCorr.DELETEALL;
              WITH GenJnlLineForCorr DO BEGIN;
                "Line No." := LastLineNo;
                "Posting Date" := GenJnlLine."Posting Date";
                "Document No." := GenJnlLine."Document No.";
                "Source Historical Date" := GLEntryLoc."Posting Date";
                Correction := (GLEntryLoc."Debit Amount" > 0) OR (GLEntryLoc."Credit Amount" > 0);
                GenJnlLineForCorr."Financial Instrument No." := GLEntryLoc."Financial Instrument No.";
                VALIDATE(Quantity, -GLEntryLoc.Quantity);
                VALIDATE("Account Type", "Account Type"::"G/L Account");
                VALIDATE("Account No.", GLEntryLoc."G/L Account No.");

                GLEntryTypeForFI := '';
                IF (GLEntryLoc."Original Currency Code" <> '') AND (GLEntryLoc."Original Amount" <> 0) THEN BEGIN
                  VALIDATE("Currency Code", GLEntryLoc."Original Currency Code");
                  VALIDATE(Amount, -GLEntryLoc."Original Amount");
                  VALIDATE("Amount (LCY)", -GLEntryLoc.Amount);
                END ELSE
                  IF (GLEntryLoc."Original Currency Code" <> '') AND
                     (GLEntryLoc."Original Amount" = 0) THEN BEGIN
                    //AKU оотключено после обсуждения - AND GLEntryLoc."Null Original Amount"
                    GLEntryTypeForFI := 'КУРСОВАЯРАЗНИЦА';
                    VALIDATE("Currency Code", '');
                    VALIDATE(Amount, -GLEntryLoc.Amount);
                    VALIDATE("Currency Index Entry", TRUE);
                    VALIDATE("Currency Index", FI."Currency of Nominal");
                  END ELSE BEGIN
                    VALIDATE("Currency Code", '');
                    VALIDATE(Amount, -GLEntryLoc.Amount);
                  END;

                IF GLEntryLoc."Entry No." <> FIValueEntry."FI Ledger Entry No." THEN
                  //NC MTF02 > AKU
                  {
                  Description := Text50108 + COPYSTR(GLEntryLoc.Description,1,44)
                  }
                  Description := GLEntryLoc.Description
                  //NC MTF02 < AKU
                ELSE
                  Description := GenJnlLine.Description;

                "Shortcut Dimension 1 Code" := GLEntryLoc."Global Dimension 1 Code";
                "Shortcut Dimension 2 Code" := GLEntryLoc."Global Dimension 2 Code";
                "Dimension Set ID" := GLEntryLoc."Dimension Set ID"; // NC NOS-26 SPA
                INSERT;
              END; //WITH GenJnlLineForCorr

      //        TempJnlLineDimForFI.RESET;
      //        TempJnlLineDimForFI.DELETEALL;
      //        GLDim.SETRANGE("Table ID", DATABASE::"G/L Entry");
      //        GLDim.SETRANGE("Entry No.", GLFIValueRelation."G/L Entry No.");
      //        DimMgt.MoveLedgEntryDimToJnlLineDim(
      //           GLDim, TempJnlLineDimForFI, DATABASE::"G/L Entry",
      //           GenJnlLineForCorr."Journal Template Name",GenJnlLineForCorr."Journal Batch Name",
      //           GenJnlLineForCorr."Line No.", 0);

              //NC MTF02 > AKU
              GenJnlLineForCorr."System-Created Entry" := TRUE;
              //NC MTF02 < AKU

              //RunWithCheck(GenJnlLineForCorr, TempJnlLineDimForFI);
              RunWithCheck(GenJnlLineForCorr); // NC NOS-26 SPA

              IF RetValue = 0 THEN
                //RetValue := GLEntry."Entry No.";
                RetValue := GlobalGLEntry."Entry No."; // NC NOS-26 SPA

              IF GLEntryLoc."Entry No." <> FIValueEntry."FI Ledger Entry No." THEN BEGIN
                //Аннулируется не основная транзакция
                //NC NOS-26 > SPA
                {
                GLEntry."Reversed Entry No." := GLFIValueRelation."G/L Entry No.";
                GLEntry.Reversed := TRUE;
                GLEntry.MODIFY;
                }
                GlobalGLEntry."Reversed Entry No." := GLFIValueRelation."G/L Entry No.";
                GlobalGLEntry.Reversed := TRUE;
                GlobalGLEntry.MODIFY;
                //NC NOS-26 < SPA

                GLEntryLoc.GET(GLFIValueRelation."G/L Entry No.");
                GLEntryLoc."Reversed by Entry No." := GlobalGLEntry."Entry No.";
                GLEntryLoc.Reversed := TRUE;
                GLEntryLoc.MODIFY;
              END;
            UNTIL GLFIValueRelation.NEXT = 0;
        UNTIL FIValueEntry.NEXT = 0;
      //NC MTF02 < II
      }
    END;

    PROCEDURE PostRealisedCoupon_@1000000013();
    VAR
      FIPostSetup@1000000000 : Record 50105;
      GenJnlLineOld@1000000001 : Record 81;
    BEGIN
      {
      //NC MTF02 > II
      GenJnlLineOld := GenJnlLine;
      GenJnlLine.Description := Text50109;
      GenJnlLine.VALIDATE(Quantity, 0);

      WITH GenJnlLine DO BEGIN;
        IF "Amount Type" = "Amount Type"::Interest THEN BEGIN
          IF ("FI EntryType" = "FI EntryType"::Sale) AND ("Short Position" = FALSE) THEN BEGIN
            FIPostSetup.GET("FI Posting Group","FI Posting Book","FI Portfolio");
            FIPostSetup.TESTFIELD("Coupon Account");
            FIPostSetup.TESTFIELD("Realized Profit Account");
            InitGLEntry(FIPostSetup."Coupon Account", "Amount (LCY)",0,TRUE,TRUE);
            InsertGLEntry(TRUE);
            InitGLEntry(FIPostSetup."Realized Profit Account", -"Amount (LCY)",0,TRUE,TRUE);
            InsertGLEntry(TRUE);

          END;
          IF ("FI EntryType" = "FI EntryType"::Purchase) AND ("Short Position" = TRUE) THEN BEGIN
            FIPostSetup.GET("FI Posting Group","FI Posting Book","FI Portfolio");
            FIPostSetup.TESTFIELD("Coupon Account");
            FIPostSetup.TESTFIELD("Realized Loss Account");
            InitGLEntry(FIPostSetup."Coupon Account", "Amount (LCY)",0,TRUE,TRUE);
            InsertGLEntry(TRUE);
            InitGLEntry(FIPostSetup."Realized Loss Account", -"Amount (LCY)",0,TRUE,TRUE);
            InsertGLEntry(TRUE);

          END;
        END;
      END;
      GenJnlLine := GenJnlLineOld;
      //NC MTF02 < II
      }
    END;

    PROCEDURE InsertGenJnlLineForFI@1000000010(FIEntryNo@1000000001 : Integer;GenJnlLinePar@1000000010 : Record 81;PostQty@1000000016 : Boolean;VAR GenJnlLine@1101495000 : Record 81);
    VAR
      FIPostSetup@1000000000 : Record 50105;
      FILedgEntry2@1000000002 : Record 50106;
      FIValueEntry2@1000000003 : Record 50107;
      GenPostingSetup@1000000004 : Record 252;
      CurrExchRate@1000000006 : Record 330;
      CostAmountCFIToLCY@1000000007 : Decimal;
      CurrDiff@1000000008 : Decimal;
      CurrDiffCFI@1000000009 : Decimal;
      LastEntryNo@1000000005 : Integer;
      FI@1000000011 : Record 50021;
      CurrDiffPost@1000000012 : Decimal;
      FIValueEntry5@1000000013 : Record 50107;
      GLEntryLoc@1000000014 : Record 17;
    BEGIN
      //NC MTF02 > II
      FILedgEntry2.GET(FIEntryNo);
      IF FILedgEntry2."Amount Type" = FILedgEntry2."Amount Type"::Interest THEN
        EXIT;
      IF FILedgEntry2."FI EntryType" = FILedgEntry2."FI EntryType"::Sale THEN
        IF FILedgEntry2."Short Position" THEN
          EXIT;
      IF FILedgEntry2."FI EntryType" = FILedgEntry2."FI EntryType"::Purchase THEN
        IF NOT FILedgEntry2."Short Position" THEN
          EXIT;
      IF FILedgEntry2."FI EntryType" = FILedgEntry2."FI EntryType"::"Negative Adjmt." THEN
        IF FILedgEntry2."Short Position" THEN
          EXIT;
      IF FILedgEntry2."FI EntryType" = FILedgEntry2."FI EntryType"::"Positive Adjmt." THEN
        IF NOT FILedgEntry2."Short Position" THEN
          EXIT;

      FIPostSetup.GET(FILedgEntry2."FI Posting Group",FILedgEntry2."FI Posting Book",FILedgEntry2."FI Portfolio");
      GenPostingSetup.GET(FILedgEntry2."Gen. Bus. Posting Group", FILedgEntry2."Gen. Prod. Posting Group");

      FIPostSetup.TESTFIELD("FI Account");
      //NC MTF02 > AKU
      IF FILedgEntry2."Short Position" THEN
      //NC MTF02 < AKU
        FIPostSetup.TESTFIELD("Short Account");
      GenPostingSetup.TESTFIELD("COGS Account");

      IF GenJnlLineForFI.FINDLAST THEN
        LastEntryNo := GenJnlLineForFI."Line No." + 10000
      ELSE
        LastEntryNo := 10000;

      GenJnlLineForFI := GenJnlLinePar;
      GenJnlLineForFI."Account Type" := GenJnlLineForFI."Account Type"::"G/L Account";
      GenJnlLineForFI."Journal Template Name" := '';
      GenJnlLineForFI."Journal Batch Name" := '';
      GenJnlLineForFI."Line No." := LastEntryNo;
      //NC MTF02 > AKU
      GenJnlLineForFI."System-Created Entry" := TRUE;
      //NC MTF02 < AKU

      //CLEAR(JnlLineDimForFI);

      //Определение валюты операции и определение курсовой разницы
      FI.GET(FILedgEntry2."FI No.");
      IF FI."Currency of Nominal" IN ['', GLSetup."LCY Code"] THEN BEGIN
        GenJnlLineForFI.VALIDATE("Currency Code", '');
      END ELSE BEGIN
        GenJnlLineForFI.VALIDATE("Currency Code", FI."Currency of Nominal");
        GenJnlLineForFI."Currency Factor" :=
              CurrExchRate.ExchangeRate(GenJnlLineForFI."Posting Date",GenJnlLineForFI."Currency Code");

        FILedgEntry2.CALCFIELDS("Cost Amount", "Cost Amount (CFI)");
        CostAmountCFIToLCY := CurrExchRate.ExchangeAmtFCYToLCY(FILedgEntry2."Posting Date", GenJnlLineForFI."Currency Code",
                                                               FILedgEntry2."Cost Amount (CFI)", GenJnlLineForFI."Currency Factor");
        CostAmountCFIToLCY := ROUND(CostAmountCFIToLCY, 0.01);
        CurrDiff := FILedgEntry2."Cost Amount" - CostAmountCFIToLCY;
        //Для короткой позиции меняем знак
        IF FILedgEntry2."Short Position" THEN
        CurrDiff := -CurrDiff;
      END;

      //----- Проводка по себестоимости
      GenJnlLineForFI.VALIDATE(Quantity, 0);

      FIValueEntry2.SETRANGE("FI Ledger Entry No.", FIEntryNo);
      FIValueEntry2.SETRANGE("Cost Not Post To GL", TRUE);
      IF FIValueEntry2.FINDFIRST THEN BEGIN // должна быть только одна запись

        IF FILedgEntry2."FI EntryType" IN [FILedgEntry2."FI EntryType"::Sale, FILedgEntry2."FI EntryType"::Purchase] THEN BEGIN

          IF (-FIValueEntry2."Cost Amount" < 0) AND (FILedgEntry2."FI EntryType" = FILedgEntry2."FI EntryType"::Sale) THEN
            GenJnlLineForFI.Correction := TRUE;
          IF (-FIValueEntry2."Cost Amount" > 0) AND (FILedgEntry2."FI EntryType" = FILedgEntry2."FI EntryType"::Purchase) THEN
            GenJnlLineForFI.Correction := TRUE;
          GenJnlLineForFI."Line No." := GenJnlLineForFI."Line No." + 100;
          GenJnlLineForFI.VALIDATE("Account No.", GenPostingSetup."COGS Account");
          //NC MTF02 > AKU
          {
          GenJnlLineForFI.Description := Text50112;
          }
          GenJnlLineForFI.Description := FILedgEntry2.Description;
          //NC MTF02 < AKU
          GenJnlLineForFI.VALIDATE(Amount, -FIValueEntry2."Cost Amount (CFI)");
          GenJnlLineForFI.VALIDATE("Amount (LCY)", -FIValueEntry2."Cost Amount");
          GenJnlLineForFI.GLEntryTypeForFI  := 'CostGLEntryNoD';
          GenJnlLineForFI.FIValueEntryNo := FIValueEntry2."Entry No."; // Для заполнения CostGLEntryNoD
          IF -FIValueEntry2."Cost Amount (CFI)" < 0 THEN
            GenJnlLine.Correction := TRUE;

          GenJnlLineForFI."Shortcut Dimension 1 Code" := GenJnlLinePar."Shortcut Dimension 1 Code";
          GenJnlLineForFI."Shortcut Dimension 2 Code" := GenJnlLinePar."Shortcut Dimension 2 Code";
          GenJnlLineForFI."Dimension Set ID" := FILedgEntry2."Dimension Set ID"; // NC NOS-26 SPA
          GenJnlLineForFI.INSERT;

          //Копия измерений с исходной операции
      //    LedgerEntryDim.RESET;
      //    LedgerEntryDim.SETRANGE("Table ID", DATABASE::"FI Ledger Entry");
      //    LedgerEntryDim.SETRANGE("Entry No.", FILedgEntry2."Entry No.");
      //    DimMgt.MoveLedgEntryDimToJnlLineDim(
      //           LedgerEntryDim, JnlLineDimForFI, 0,
      //           GenJnlLineForFI."Journal Template Name", GenJnlLineForFI."Journal Batch Name",
      //           GenJnlLineForFI."Line No.", 0);

          // Устанавливаем значения измерения REVAL.TYPE в (COST)
          InsertRevalTypeDimValue(GenJnlLineForFI."Dimension Set ID", 'COST');
          //NC NOS-26 > SPA
          IF GenJnlLineForFI."Dimension Set ID" <> FILedgEntry2."Dimension Set ID" THEN
            DimMgt.UpdateGlobalJnlDimFromDimSetID(GenJnlLineForFI."Dimension Set ID",
              GenJnlLineForFI."Shortcut Dimension 1 Code",
              GenJnlLineForFI."Shortcut Dimension 2 Code",
              GenJnlLineForFI."Financial Instrument No.");
          GenJnlLineForFI.MODIFY;
          //NC NOS-26 < SPA

          LastEntryNo := LastEntryNo + 10000;

          GenJnlLineForFI."Line No." := GenJnlLineForFI."Line No." + 100;
          IF FILedgEntry2."FI EntryType" = FILedgEntry2."FI EntryType"::Sale THEN
            GenJnlLineForFI.VALIDATE("Account No.", FIPostSetup."FI Account")
          ELSE
            GenJnlLineForFI.VALIDATE("Account No.", FIPostSetup."Short Account");
          //NC MTF02 > AKU
          {
          GenJnlLineForFI.Description := Text50112;
          }
          GenJnlLineForFI.Description := FILedgEntry2.Description;
          //NC MTF02 < AKU

          GenJnlLineForFI.VALIDATE(Amount, FIValueEntry2."Cost Amount (CFI)");
          GenJnlLineForFI.VALIDATE("Amount (LCY)", FIValueEntry2."Cost Amount");
          IF PostQty THEN
            GenJnlLineForFI.VALIDATE(Quantity, FILedgEntry2.Quantity);
          GenJnlLineForFI.GLEntryTypeForFI  := 'CostGLEntryNoK';
          GenJnlLineForFI.FIValueEntryNo := FIValueEntry2."Entry No."; // Для заполнения CostGLEntryNoK
          IF -FIValueEntry2."Cost Amount (CFI)" < 0 THEN
            GenJnlLine.Correction := TRUE;

          GenJnlLineForFI."Shortcut Dimension 1 Code" := GenJnlLinePar."Shortcut Dimension 1 Code";
          GenJnlLineForFI."Shortcut Dimension 2 Code" := GenJnlLinePar."Shortcut Dimension 2 Code";
          GenJnlLineForFI."Dimension Set ID" := FILedgEntry2."Dimension Set ID"; // NC NOS-26 SPA
          GenJnlLineForFI.INSERT;

      //    DimMgt.MoveLedgEntryDimToJnlLineDim(
      //           LedgerEntryDim, JnlLineDimForFI, 0,
      //           GenJnlLineForFI."Journal Template Name", GenJnlLineForFI."Journal Batch Name",
      //           GenJnlLineForFI."Line No.", 0);

          // Устанавливаем значения измерения REVAL.TYPE в (COST)
          InsertRevalTypeDimValue(GenJnlLineForFI."Dimension Set ID", 'COST');
          //NC NOS-26 > SPA
          IF GenJnlLineForFI."Dimension Set ID" <> FILedgEntry2."Dimension Set ID"THEN
            DimMgt.UpdateGlobalJnlDimFromDimSetID(GenJnlLineForFI."Dimension Set ID",
              GenJnlLineForFI."Shortcut Dimension 1 Code",
              GenJnlLineForFI."Shortcut Dimension 2 Code",
              GenJnlLineForFI."Financial Instrument No.");
          GenJnlLineForFI.MODIFY;
          //NC NOS-26 < SPA

          LastEntryNo := LastEntryNo + 10000;
        END;

        FIValueEntry2."Cost Not Post To GL" := FALSE;
        FIValueEntry2.MODIFY;
      END;

      //---------- Проводки по курсовой разнице
      GenJnlLineForFI := GenJnlLinePar;
      GenJnlLineForFI."Account Type" := GenJnlLineForFI."Account Type"::"G/L Account";
      GenJnlLineForFI."Journal Template Name" := '';
      GenJnlLineForFI."Journal Batch Name" := '';
      GenJnlLineForFI."Line No." := LastEntryNo;
      GenJnlLineForFI.VALIDATE(Quantity, 0);
      //GenJnlLineForFI.VALIDATE("Currency Code", FI."Currency of Nominal");
      GenJnlLineForFI.VALIDATE("Currency Code", '');  //Проводки по курсовой разнице идут в локальной валюте
      //GenJnlLineForFI."Currency Factor" :=
      //      CurrExchRate.ExchangeRate(GenJnlLineForFI."Posting Date",GenJnlLineForFI."Currency Code");
      //GenJnlLineForFI.VALIDATE("Currency Code", '');

      //----------- 1. Сторнирование ранее учтенной курсовой разницы при списании
      IF GLEntryLoc.GET(FILedgEntry2.CurrDiffGLEntryNoD) THEN BEGIN
        CurrDiffPost := GLEntryLoc.Amount;
        IF CurrDiffPost <> CurrDiff  THEN BEGIN
          GenJnlLineForFI."Line No." := GenJnlLineForFI."Line No." + 100;
          GenJnlLineForFI.VALIDATE("Account No.", GLEntryLoc."G/L Account No.");
          // GenJnlLineForFI.Description := Text50111;
          GenJnlLineForFI.Description := FILedgEntry2.Description;
          GenJnlLineForFI.VALIDATE(Amount, -GLEntryLoc.Amount);
          GenJnlLineForFI.Correction := TRUE;

          GenJnlLineForFI.GLEntryTypeForFI := 'КУРСОВАЯРАЗНИЦА';
          GenJnlLineForFI."Shortcut Dimension 1 Code" := GenJnlLinePar."Shortcut Dimension 1 Code";
          GenJnlLineForFI."Shortcut Dimension 2 Code" := GenJnlLinePar."Shortcut Dimension 2 Code";
          GenJnlLineForFI."Dimension Set ID" := GLEntryLoc."Dimension Set ID"; // NC NOS-26 SPA
          GenJnlLineForFI.INSERT;

      //    LedgerEntryDim.RESET;
      //    LedgerEntryDim.SETRANGE("Table ID", DATABASE::"G/L Entry");
      //    LedgerEntryDim.SETRANGE("Entry No.", GLEntryLoc."Entry No.");
      //    DimMgt.MoveLedgEntryDimToJnlLineDim(
      //           LedgerEntryDim, JnlLineDimForFI, 0,
      //           GenJnlLineForFI."Journal Template Name", GenJnlLineForFI."Journal Batch Name",
      //           GenJnlLineForFI."Line No.", 0);

          GLEntryLoc.GET(FILedgEntry2.CurrDiffGLEntryNoK);
          GenJnlLineForFI."Line No." := GenJnlLineForFI."Line No." + 100;
          GenJnlLineForFI.VALIDATE("Account No.", GLEntryLoc."G/L Account No.");
          // GenJnlLineForFI.Description := Text50111;
          GenJnlLineForFI.VALIDATE(Amount, -GLEntryLoc.Amount);
          GenJnlLineForFI.Correction := TRUE;

          GenJnlLineForFI.GLEntryTypeForFI := 'КУРСОВАЯРАЗНИЦА';
          GenJnlLineForFI.VALIDATE("Currency Index Entry", TRUE);
          GenJnlLineForFI.VALIDATE("Currency Index", FI."Currency of Nominal");

          GenJnlLineForFI."Shortcut Dimension 1 Code" := GenJnlLinePar."Shortcut Dimension 1 Code";
          GenJnlLineForFI."Shortcut Dimension 2 Code" := GenJnlLinePar."Shortcut Dimension 2 Code";
          GenJnlLineForFI."Dimension Set ID" := GLEntryLoc."Dimension Set ID"; // NC NOS-26 SPA
          GenJnlLineForFI.INSERT;

      //    LedgerEntryDim.SETRANGE("Entry No.", GLEntryLoc."Entry No.");
      //    DimMgt.MoveLedgEntryDimToJnlLineDim(
      //           LedgerEntryDim, JnlLineDimForFI, 0,
      //           GenJnlLineForFI."Journal Template Name", GenJnlLineForFI."Journal Batch Name",
      //           GenJnlLineForFI."Line No.", 0);

        END ELSE
          CurrDiff := 0;
      END;

      //----------- 2. Формирование проводки по списанию курсовой разницы: Realised PL (COST) - К: Realised PL (FX)
      IF CurrDiff <> 0 THEN BEGIN
      //  CurrDiffCFI := CurrExchRate.ExchangeAmtLCYToFCY(GenJnlLineForFI."Posting Date", GenJnlLineForFI."Currency Code",
      //                                                  CurrDiff, GenJnlLineForFI."Currency Factor");
      //  CurrDiffCFI := ROUND(CurrDiffCFI, 0.01);
      //  IF CurrDiffCFI <> 0 THEN BEGIN
          FIPostSetup.TESTFIELD("Realized Profit Account");
          FIPostSetup.TESTFIELD("Realized Loss Account");

          GenJnlLineForFI."Line No." := GenJnlLineForFI."Line No." + 100;
          GenJnlLineForFI.VALIDATE("Account No.", GenPostingSetup."COGS Account");
      //    GenJnlLineForFI.Description := Text50110;
      //    GenJnlLineForFI.VALIDATE(Amount, CurrDiffCFI);
          GenJnlLineForFI.Description := FILedgEntry2.Description;
          GenJnlLineForFI.VALIDATE(Amount, CurrDiff);
          GenJnlLineForFI.GLEntryTypeForFI  := 'CurrDiffGLEntryNoD';
          GenJnlLineForFI.FIValueEntryNo := FILedgEntry2."Entry No."; // Для заполнения CurrDiffGLEntryNoD

          GenJnlLineForFI.GLEntryTypeForFI := 'КУРСОВАЯРАЗНИЦА_COST';
          GenJnlLineForFI.VALIDATE("Currency Index Entry", TRUE);
          GenJnlLineForFI.VALIDATE("Currency Index", FI."Currency of Nominal");

          GenJnlLineForFI."Shortcut Dimension 1 Code" := GenJnlLinePar."Shortcut Dimension 1 Code";
          GenJnlLineForFI."Shortcut Dimension 2 Code" := GenJnlLinePar."Shortcut Dimension 2 Code";
          GenJnlLineForFI."Dimension Set ID" := FILedgEntry2."Dimension Set ID"; // NC NOS-26 SPA
          GenJnlLineForFI.INSERT;

      //    LedgerEntryDim.RESET;
      //    LedgerEntryDim.SETRANGE("Table ID", DATABASE::"FI Ledger Entry");
      //    LedgerEntryDim.SETRANGE("Entry No.", FILedgEntry2."Entry No.");
      //    DimMgt.MoveLedgEntryDimToJnlLineDim(
      //           LedgerEntryDim, JnlLineDimForFI, 0,
      //           GenJnlLineForFI."Journal Template Name", GenJnlLineForFI."Journal Batch Name",
      //           GenJnlLineForFI."Line No.", 0);

          // Устанавливаем значения измерения REVAL.TYPE в (COST)
          InsertRevalTypeDimValue(GenJnlLineForFI."Dimension Set ID", 'COST');
          //NC NOS-26 > SPA
          IF GenJnlLineForFI."Dimension Set ID" <> FILedgEntry2."Dimension Set ID" THEN
            DimMgt.UpdateGlobalJnlDimFromDimSetID(GenJnlLineForFI."Dimension Set ID",
              GenJnlLineForFI."Shortcut Dimension 1 Code",
              GenJnlLineForFI."Shortcut Dimension 2 Code",
              GenJnlLineForFI."Financial Instrument No.");
          GenJnlLineForFI.MODIFY;
          //NC NOS-26 < SPA
          LastEntryNo := LastEntryNo + 10000;

          GenJnlLineForFI."Line No." := GenJnlLineForFI."Line No." + 100;
          IF CurrDiff < 0 THEN
            GenJnlLineForFI.VALIDATE("Account No.", FIPostSetup."Realized Loss Account")
          ELSE
            GenJnlLineForFI.VALIDATE("Account No.", FIPostSetup."Realized Profit Account");
      //    GenJnlLineForFI.Description := Text50110;
      //    GenJnlLineForFI.VALIDATE(Amount, -CurrDiffCFI);
          GenJnlLineForFI.Description := FILedgEntry2.Description;
          GenJnlLineForFI.VALIDATE(Amount, -CurrDiff);
          GenJnlLineForFI.FIValueEntryNo := FILedgEntry2."Entry No."; // Для заполнения CurrDiffGLEntryNoK

          GenJnlLineForFI.GLEntryTypeForFI := 'КУРСОВАЯРАЗНИЦА_FX';
          GenJnlLineForFI.VALIDATE("Currency Index Entry", TRUE);
          GenJnlLineForFI.VALIDATE("Currency Index", FI."Currency of Nominal");
          GenJnlLineForFI."Shortcut Dimension 1 Code" := GenJnlLinePar."Shortcut Dimension 1 Code";
          GenJnlLineForFI."Shortcut Dimension 2 Code" := GenJnlLinePar."Shortcut Dimension 2 Code";
          GenJnlLineForFI."Dimension Set ID" := FILedgEntry2."Dimension Set ID"; // NC NOS-26 SPA
          GenJnlLineForFI.INSERT;

      //    DimMgt.MoveLedgEntryDimToJnlLineDim(
      //           LedgerEntryDim, JnlLineDimForFI, 0,
      //           GenJnlLineForFI."Journal Template Name", GenJnlLineForFI."Journal Batch Name",
      //           GenJnlLineForFI."Line No.", 0);

          // Устанавливаем значения измерения REVAL.TYPE в (FX)
          InsertRevalTypeDimValue(GenJnlLineForFI."Dimension Set ID", 'FX');
          //NC NOS-26 > SPA
          IF GenJnlLineForFI."Dimension Set ID" <> FILedgEntry2."Dimension Set ID" THEN
            DimMgt.UpdateGlobalJnlDimFromDimSetID(GenJnlLineForFI."Dimension Set ID",
              GenJnlLineForFI."Shortcut Dimension 1 Code",
              GenJnlLineForFI."Shortcut Dimension 2 Code",
              GenJnlLineForFI."Financial Instrument No.");
          GenJnlLineForFI.MODIFY;
          //NC NOS-26 < SPA
          LastEntryNo := LastEntryNo + 10000;
      //  END;
      END;
      //NC MTF02 < II
    END;

    PROCEDURE PostCost@1000000016(TemplateName@1000000003 : Code[10]);
    VAR
      FIValueEntry4@1000000001 : Record 50107;
      FILedgerEntry4@1000000000 : Record 50106;
      GenJnlLine4@1000000002 : Record 81;
      GenJournalLine@1101495001 : Record 81;
      GenJnlTemplate@1000000004 : Record 80;
      GLEntryLoc@1000000007 : Record 17;
      FILedgEntry4@1000000008 : Record 50106;
      FIValueEntry5@1000000005 : Record 50107;
      GLFIValueRelation@1101495000 : Record 50117;
    BEGIN
      //NC MTF02 > II
      GLSetup.GET;
      FISetup.GET;
      GenJnlTemplate.GET(TemplateName);

      // JnlLineDimForFI.RESET;
      // JnlLineDimForFI.DELETEALL;

      FIValueEntry4.SETRANGE("Cost Not Post To GL", TRUE);
      FIValueEntry5.SETCURRENTKEY("FI Ledger Entry No.");

      IF FIValueEntry4.FIND('-') THEN
        REPEAT
          FILedgerEntry4.GET(FIValueEntry4."FI Ledger Entry No.");

          GenJnlLine4.INIT;
          GenJnlLine4."Document No." := FIValueEntry4."Document No.";
          GenJnlLine4."Posting Date" := FIValueEntry4."Posting Date";
          GenJnlLine4."Journal Template Name" := GenJnlTemplate.Name;
          GenJnlLine4."Source Code" := GenJnlTemplate."Source Code";
          GenJnlLine4."Gen. Bus. Posting Group" := FILedgerEntry4."Gen. Bus. Posting Group";
          GenJnlLine4."Gen. Prod. Posting Group" := FILedgerEntry4."Gen. Prod. Posting Group";
          GenJnlLine4."FI Posting Group" := FILedgerEntry4."FI Posting Group";
          GenJnlLine4."Shortcut Dimension 1 Code" := FILedgerEntry4."Global Dimension 1 Code";
          GenJnlLine4."Shortcut Dimension 2 Code" := FILedgerEntry4."Global Dimension 2 Code";
          GenJnlLine4."External Operation No" := FILedgerEntry4."Entry No.";  // для копирования измерений из операции
          GenJnlLine4."Financial Instrument No." := FILedgerEntry4."FI No.";
          GenJnlLine4.FIValueEntryNo2 := FIValueEntry4."Entry No.";
        // если ст-сть уже учитывалась ранее, то количество в фин. книге не учитываем
          FIValueEntry5.SETRANGE("FI Ledger Entry No.",FIValueEntry4."FI Ledger Entry No.");
          FIValueEntry5.SETFILTER("Cost Amount",'<>0');
          IF FIValueEntry5.FINDFIRST THEN
            InsertGenJnlLineForFI(FILedgerEntry4."Entry No.", GenJnlLine4, FIValueEntry5."Entry No." = FIValueEntry4."Entry No.", GenJournalLine);
        UNTIL FIValueEntry4.NEXT = 0;

      IF GenJnlLineForFI.FIND('-') THEN
        REPEAT
          GenJnlLineForFI."External Operation No" := 0;

      //    JnlLineDimForFI.SETRANGE("Journal Template Name", GenJnlLineForFI."Journal Template Name");
      //    JnlLineDimForFI.SETRANGE("Journal Batch Name", GenJnlLineForFI."Journal Batch Name");
      //    JnlLineDimForFI.SETRANGE("Journal Line No.", GenJnlLineForFI."Line No.");
      //    JnlLineDimForFI.SETRANGE("Allocation Line No.", 0);
      //    TempJnlLineDimForFI.DELETEALL;
      //    DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDimForFI, TempJnlLineDimForFI);
          //RunWithCheck(GenJnlLineForFI, TempJnlLineDimForFI);
          RunWithCheck(GenJnlLineForFI); // NC NOS-26 SPA

          GLFIValueRelation."G/L Entry No." := GlobalGLEntry."Entry No.";
          GLFIValueRelation."FI Value Entry No." := GenJnlLineForFI.FIValueEntryNo2;
          GLFIValueRelation.INSERT;

          CASE GenJnlLineForFI.GLEntryTypeForFI OF
            'COSTGLENTRYNOD', 'COSTGLENTRYNOK' :
               BEGIN
                 FIValueEntry4.GET(GenJnlLineForFI.FIValueEntryNo);
                 IF GenJnlLineForFI.GLEntryTypeForFI = 'COSTGLENTRYNOD' THEN
                   FIValueEntry4.CostGLEntryNoD := GlobalGLEntry."Entry No."
                 ELSE
                   FIValueEntry4.CostGLEntryNoK := GlobalGLEntry."Entry No.";

                 FIValueEntry4."Transaction No." := GlobalGLEntry."Transaction No.";
                 FIValueEntry4.MODIFY;
               END;

            'КУРСОВАЯРАЗНИЦА_COST', 'КУРСОВАЯРАЗНИЦА_FX' :
               BEGIN
                 FILedgEntry4.GET(GenJnlLineForFI.FIValueEntryNo);
                 IF GenJnlLineForFI.GLEntryTypeForFI = 'КУРСОВАЯРАЗНИЦА_COST' THEN
                   FILedgEntry4.CurrDiffGLEntryNoD := GlobalGLEntry."Entry No."
                 ELSE
                   FILedgEntry4.CurrDiffGLEntryNoK := GlobalGLEntry."Entry No.";
                 FILedgEntry4.MODIFY;
               END;
          END;  //CASE

        UNTIL GenJnlLineForFI.NEXT = 0;

      // JnlLineDimForFI.RESET;
      // GenJnlLineForFI.DELETEALL;
      // JnlLineDimForFI.RESET;
      // JnlLineDimForFI.DELETEALL;

      //NC MTF02 < II
    END;

    PROCEDURE UpdateCVAgreementSchedule@1000000017(SourceType@1000000000 : 'Customer,Vendor';SourceNo@1000000003 : Code[20];AgreementNo@1000000004 : Code[20];AgreementCondition@1000000005 : Integer;PostingDate@1000000006 : Date;EntryNo@1000000001 : Integer;Reverse@1000000007 : Boolean);
    VAR
      AgreementSchedule@1000000002 : Record 50097;
    BEGIN
      //NC MLN09 > DP
      AgreementSchedule.RESET;
      AgreementSchedule.SETRANGE("Source Type",SourceType);
      AgreementSchedule.SETRANGE("Source No.",SourceNo);
      AgreementSchedule.SETRANGE("Agreement No.",AgreementNo);
      AgreementSchedule.SETRANGE("Agreement Condition No.",AgreementCondition);
      AgreementSchedule.SETRANGE(Type,AgreementSchedule.Type::Accrual);
      AgreementSchedule.SETRANGE(Date,PostingDate);
      IF AgreementSchedule.FINDFIRST THEN BEGIN
        IF NOT Reverse THEN BEGIN
          IF NOT AgreementSchedule.Posted THEN BEGIN
            AgreementSchedule.Posted :=TRUE;
            AgreementSchedule.Reversed := FALSE;
            AgreementSchedule."G/L Entry No." := EntryNo;
            AgreementSchedule.MODIFY;

          END
          //NC MLN09.1 > DP
          {
          ELSE
            ERROR(Text50106,FORMAT(SourceType),SourceNo,AgreementNo,AgreementCondition,EntryNo)
          }
          //NC MLN09.1 < DP
          ;
        END ELSE BEGIN
          IF NOT AgreementSchedule.Reversed THEN BEGIN
            AgreementSchedule.Posted :=FALSE;
            AgreementSchedule.Reversed := TRUE;
            AgreementSchedule."Reversed G/L Entry No." := EntryNo;
            AgreementSchedule.MODIFY;
          END ELSE
            ERROR(Text50107,FORMAT(SourceType),SourceNo,AgreementNo,AgreementCondition);
        END;
      END;
      //NC MLN09 < DP
    END;

    PROCEDURE CheckLoanAgreementAmount@1000000004(GenJnlLineLoc@1210000 : Record 81);
    VAR
      PurchSetup@1101495001 : Record 312;
      SalesSetup@1101495002 : Record 311;
      VendAgreementLoc@1210001 : Record 14901;
      CustAgreementLoc@1000000002 : Record 14902;
      CurrExchRateLoc@1210002 : Record 330;
      AgreementAmountLCY@1210004 : Decimal;
      VLELoc@1210003 : Record 25;
      CLELoc@1000000003 : Record 21;
      AgreementAmount@1210006 : Decimal;
      AgreementCurrencyCode@1000000001 : Code[20];
      CurrencyLoc@1210005 : Record 4;
      LEAmount@1210007 : Decimal;
      GJAmount@1210008 : Decimal;
      VendorNo@1000000000 : Code[20];
      SignAmount@1101495000 : Integer;
    BEGIN
      //NC MLN04 < DP
      GLSetup.GET;

      IF GenJnlLineLoc."Account Type" =  GenJnlLineLoc."Account Type"::Vendor THEN
        BEGIN
            PurchSetup.GET;

            IF NOT ((PurchSetup."Check Pmtn. Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::Payment) OR
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount > 0))))
             AND NOT ((PurchSetup."Check Refund Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::Refund) OR
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount < 0))))
            THEN
              EXIT;

            IF VendAgreementLoc.GET(GenJnlLineLoc."Account No.", GenJnlLineLoc."Agreement No.") THEN BEGIN
              IF VendAgreementLoc."Agreement Amount" = 0 THEN
                EXIT;
            AgreementAmount := VendAgreementLoc."Agreement Amount";
            AgreementCurrencyCode := VendAgreementLoc."Currency Code";
            IF VendAgreementLoc."Agreement Type" = VendAgreementLoc."Agreement Type"::Loans THEN
              BEGIN
                VLELoc.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
                VLELoc.SETRANGE("Vendor No.", GenJnlLineLoc."Account No.");
                VLELoc.SETRANGE("Agreement No.", GenJnlLineLoc."Agreement No.");
                VLELoc.SETRANGE("Amount Type",VLELoc."Amount Type"::" ",VLELoc."Amount Type"::Principal);
                IF ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Payment) OR
                  ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount>0))) THEN BEGIN
                  VLELoc.SETRANGE("Document Type",VLELoc."Document Type"::Payment);
                  SignAmount :=-1;
                END;
                IF ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Refund) OR
                  ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount<0))) THEN BEGIN
                  VLELoc.SETRANGE("Document Type",VLELoc."Document Type"::Refund);
                  SignAmount :=1;
                END;
                IF VLELoc.FIND('-') THEN
                  REPEAT
                    VLELoc.CALCFIELDS("Original Amount");
                    IF VLELoc."Currency Code"<>AgreementCurrencyCode THEN
                      LEAmount := ROUND(CurrExchRateLoc.ExchangeAmtFCYToFCY(GenJnlLineLoc."Posting Date",
                                  VLELoc."Currency Code",
                                  AgreementCurrencyCode,
                                  VLELoc."Original Amount"),GLSetup."Amount Rounding Precision")
                    ELSE
                      LEAmount :=VLELoc."Original Amount";
                    AgreementAmount += SignAmount*LEAmount;
                  UNTIL VLELoc.NEXT = 0;
              END;
            END;
          END;
        IF GenJnlLineLoc."Account Type" =  GenJnlLineLoc."Account Type"::Customer THEN
          BEGIN
            SalesSetup.GET;

            IF NOT ((SalesSetup."Check Recpt. Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::Payment) OR
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount < 0))))
             AND NOT ((SalesSetup."Check Refund Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::Refund) OR
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount > 0))))
            THEN
              EXIT;

            IF CustAgreementLoc.GET(GenJnlLineLoc."Account No.", GenJnlLineLoc."Agreement No.") THEN BEGIN
              IF CustAgreementLoc."Agreement Amount" = 0 THEN
                EXIT;
            AgreementAmount := CustAgreementLoc."Agreement Amount";
            AgreementCurrencyCode := CustAgreementLoc."Currency Code";
            IF CustAgreementLoc."Agreement Type" = CustAgreementLoc."Agreement Type"::Loans THEN BEGIN
              CLELoc.SETCURRENTKEY("Customer No.","Posting Date","Currency Code");
              CLELoc.SETRANGE("Customer No.", GenJnlLineLoc."Account No.");
              CLELoc.SETRANGE("Agreement No.", GenJnlLineLoc."Agreement No.");
              CLELoc.SETRANGE("Amount Type",CLELoc."Amount Type"::" ",CLELoc."Amount Type"::Principal);
              IF ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Payment) OR
                ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount<0))) THEN BEGIN
                CLELoc.SETRANGE("Document Type",CLELoc."Document Type"::Payment);
                SignAmount :=1;
              END;
              IF ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Refund) OR
                ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount>0))) THEN BEGIN
                CLELoc.SETRANGE("Document Type",CLELoc."Document Type"::Refund);
                SignAmount :=-1;
              END;
              IF CLELoc.FIND('-') THEN
                REPEAT
                  CLELoc.CALCFIELDS("Original Amount");
                  IF CLELoc."Currency Code"<>AgreementCurrencyCode THEN
                    LEAmount := ROUND(CurrExchRateLoc.ExchangeAmtFCYToFCY(GenJnlLineLoc."Posting Date",
                                CLELoc."Currency Code",
                                AgreementCurrencyCode,
                                CLELoc."Original Amount"),GLSetup."Amount Rounding Precision")
                  ELSE
                    LEAmount :=CLELoc."Original Amount";
                  AgreementAmount += SignAmount*LEAmount;
                UNTIL CLELoc.NEXT = 0;
            END;
          END;
        END;

      IF GenJnlLineLoc."Bal. Account Type" = GenJnlLineLoc."Bal. Account Type"::Vendor THEN
          BEGIN
            PurchSetup.GET;

            IF NOT ((PurchSetup."Check Pmtn. Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::Payment) OR
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount > 0))))
             AND NOT ((PurchSetup."Check Refund Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::Refund) OR
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount < 0))))
            THEN
              EXIT;

            IF VendAgreementLoc.GET(GenJnlLineLoc."Bal. Account No.", GenJnlLineLoc."Agreement No.") THEN BEGIN
              IF VendAgreementLoc."Agreement Amount" = 0 THEN
                EXIT;
            AgreementAmount := VendAgreementLoc."Agreement Amount";
            AgreementCurrencyCode := VendAgreementLoc."Currency Code";
            IF VendAgreementLoc."Agreement Type" = VendAgreementLoc."Agreement Type"::Loans THEN
              BEGIN
                VLELoc.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
                VLELoc.SETRANGE("Vendor No.", GenJnlLineLoc."Bal. Account No.");
                VLELoc.SETRANGE("Agreement No.", GenJnlLineLoc."Agreement No.");
                VLELoc.SETRANGE("Amount Type",VLELoc."Amount Type"::" ",VLELoc."Amount Type"::Principal);
                IF ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Payment) OR
                  ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount<0))) THEN BEGIN
                  VLELoc.SETRANGE("Document Type",VLELoc."Document Type"::Payment);
                  SignAmount :=1;
                END;
                IF ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Refund) OR
                  ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount>0))) THEN BEGIN
                  VLELoc.SETRANGE("Document Type",VLELoc."Document Type"::Refund);
                  SignAmount :=-1;
                END;

                IF VLELoc.FIND('-') THEN
                  REPEAT
                    VLELoc.CALCFIELDS("Original Amount");
                    IF VLELoc."Currency Code"<>AgreementCurrencyCode THEN
                      LEAmount := ROUND(CurrExchRateLoc.ExchangeAmtFCYToFCY(GenJnlLineLoc."Posting Date",
                                  VLELoc."Currency Code",
                                  AgreementCurrencyCode,
                                  VLELoc."Original Amount"),GLSetup."Amount Rounding Precision")
                    ELSE
                      LEAmount :=VLELoc."Original Amount";
                    AgreementAmount += SignAmount*LEAmount;
                  UNTIL VLELoc.NEXT = 0;
              END;
            END;
          END;
        IF GenJnlLineLoc."Bal. Account Type"= GenJnlLineLoc."Bal. Account Type"::Customer THEN
          BEGIN
            SalesSetup.GET;
            IF NOT ((SalesSetup."Check Recpt. Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::Payment) OR
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount < 0))))
             AND NOT ((SalesSetup."Check Refund Agrmnt. Amount") AND
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::Refund) OR
              ((GenJnlLineLoc."Document Type"=GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount > 0))))
            THEN
              EXIT;

            IF CustAgreementLoc.GET(GenJnlLineLoc."Bal. Account No.", GenJnlLineLoc."Agreement No.") THEN BEGIN
              IF CustAgreementLoc."Agreement Amount" = 0 THEN
                EXIT;
            AgreementAmount := CustAgreementLoc."Agreement Amount";
            AgreementCurrencyCode := CustAgreementLoc."Currency Code";
            IF CustAgreementLoc."Agreement Type" = CustAgreementLoc."Agreement Type"::Loans THEN BEGIN
              CLELoc.SETCURRENTKEY("Customer No.","Posting Date","Currency Code");
              CLELoc.SETRANGE("Customer No.", GenJnlLineLoc."Bal. Account No.");
              CLELoc.SETRANGE("Agreement No.", GenJnlLineLoc."Agreement No.");
              CLELoc.SETRANGE("Amount Type",CLELoc."Amount Type"::" ",CLELoc."Amount Type"::Principal);
              IF ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Payment) OR
                ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount>0))) THEN BEGIN
                CLELoc.SETRANGE("Document Type",CLELoc."Document Type"::Payment);
                SignAmount :=-1;
              END;
              IF ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::Refund) OR
                ((GenJnlLineLoc."Document Type" = GenJnlLineLoc."Document Type"::" ") AND (GenJnlLineLoc.Amount<0))) THEN BEGIN
                CLELoc.SETRANGE("Document Type",CLELoc."Document Type"::Refund);
                SignAmount :=1;
              END;
              IF CLELoc.FIND('-') THEN
                REPEAT
                  CLELoc.CALCFIELDS("Original Amount");
                  IF CLELoc."Currency Code"<>AgreementCurrencyCode THEN
                    LEAmount := ROUND(CurrExchRateLoc.ExchangeAmtFCYToFCY(GenJnlLineLoc."Posting Date",
                                  CLELoc."Currency Code",
                                  AgreementCurrencyCode,
                                  CLELoc."Original Amount"),GLSetup."Amount Rounding Precision")
                  ELSE
                    LEAmount :=CLELoc."Original Amount";
                  AgreementAmount -= LEAmount;
                UNTIL CLELoc.NEXT = 0;
            END;
          END;
      END;

      IF AgreementCurrencyCode <> GenJnlLineLoc."Currency Code" THEN BEGIN
        GJAmount := ROUND(CurrExchRateLoc.ExchangeAmtFCYToFCY(GenJnlLineLoc."Posting Date",
                          GenJnlLineLoc."Currency Code",
                          AgreementCurrencyCode,
                          GenJnlLineLoc.Amount),GLSetup."Amount Rounding Precision");
      END ELSE
        GJAmount := GenJnlLineLoc.Amount;
      IF ABS(GJAmount) > ABS(AgreementAmount) THEN
        IF NOT CONFIRM(STRSUBSTNO(Text50105, ABS(GJAmount), AgreementCurrencyCode,
          AgreementAmount,AgreementCurrencyCode)) THEN
          ERROR('');

      //NC MLN04 < DP
    END;

    PROCEDURE InsertGenJnlLineForCoupon@1101495003(FIValueNo@1101495000 : Integer;GenJnlLine@1101495001 : Record 81);
    VAR
      FIPostSetup@1000000000 : Record 50105;
      FILedgEntry2@1000000002 : Record 50106;
      FIValueEntry2@1000000003 : Record 50107;
      GenPostingSetup@1000000004 : Record 252;
      CurrExchRate@1000000006 : Record 330;
      CostAmountCFIToLCY@1000000007 : Decimal;
      CurrDiff@1000000008 : Decimal;
      CurrDiffCFI@1000000009 : Decimal;
      LastEntryNo@1000000005 : Integer;
      FI@1000000011 : Record 50021;
      CurrDiffPost@1000000012 : Decimal;
      CurrDiffPostCFI@1000000015 : Decimal;
      FIValueEntry5@1000000013 : Record 50107;
      GLEntryLoc@1000000014 : Record 17;
    BEGIN
      //NC MTF02 > II
      IF GenJnlLineForCoupon.FINDLAST THEN
        LastEntryNo := GenJnlLineForCoupon."Line No." + 10000
      ELSE
        LastEntryNo := 10000;

      GenJnlLineForCoupon := GenJnlLine;
      GenJnlLineForCoupon."Journal Batch Name" := '';
      //раздел очищаем, чтобы заблокировать Аннулирование транзакции на уровне этой операции. Аннулировать надо FI Ledger Entry

      WITH GenJnlLineForCoupon DO BEGIN;
        VALIDATE(Quantity, 0);
        VALIDATE("Account Type", GenJnlLineForCoupon."Account Type"::"G/L Account");
        "External Operation No" := GlobalGLEntry."Entry No.";  // для копирования измерений
        FIValueEntryNo2 := FIValueNo;

        IF "Amount Type" = "Amount Type"::Interest THEN BEGIN
          IF ("FI EntryType" = "FI EntryType"::Sale) AND ("Short Position" = FALSE) THEN BEGIN
            FIPostSetup.GET("FI Posting Group","FI Posting Book","FI Portfolio");
            FIPostSetup.TESTFIELD("Coupon Account");
            FIPostSetup.TESTFIELD("Realized Profit Account");

            VALIDATE("Account No.", FIPostSetup."Coupon Account");
            VALIDATE(Amount, GenJnlLine.Amount);
            "Amount (LCY)" := GenJnlLine."Amount (LCY)";
            Description := GenJnlLine.Description; //Text50109;

            "Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
            "Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
            INSERT;

            "Line No." := LastEntryNo + 100;
            VALIDATE("Account No.", FIPostSetup."Realized Profit Account");
            VALIDATE(Amount, -GenJnlLine.Amount);
            "Amount (LCY)" := -GenJnlLine."Amount (LCY)";
            Description := GenJnlLine.Description; // Text50109;

            "Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
            "Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
            INSERT;
          END;
          IF ("FI EntryType" = "FI EntryType"::Purchase) AND ("Short Position" = TRUE) THEN BEGIN
            FIPostSetup.GET("FI Posting Group","FI Posting Book","FI Portfolio");
            FIPostSetup.TESTFIELD("Coupon Short Account");
            FIPostSetup.TESTFIELD("Realized Loss Account");

            VALIDATE("Account No.", FIPostSetup."Coupon Short Account");
            VALIDATE(Amount, GenJnlLine.Amount);
            "Amount (LCY)" := GenJnlLine."Amount (LCY)";
            Description := GenJnlLine.Description; //Text50109;

            "Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
            "Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
            INSERT;

            "Line No." := LastEntryNo + 100;
            VALIDATE("Account No.", FIPostSetup."Realized Loss Account");
            VALIDATE(Amount, -GenJnlLine.Amount);
            "Amount (LCY)" := -GenJnlLine."Amount (LCY)";
            Description := GenJnlLine.Description; // Text50109;

            "Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
            "Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
            INSERT;
          END;
        END;
      END;

      //NC MTF02 < II
    END;

    PROCEDURE PostCoupon@1101495012(TemplateName@1000000003 : Code[10]);
    VAR
      FIValueEntry4@1000000001 : Record 50107;
      FILedgerEntry4@1000000000 : Record 50106;
      GenJnlLine4@1000000002 : Record 81;
      GenJnlTemplate@1000000004 : Record 80;
      GLEntryLoc@1000000007 : Record 17;
      FILedgEntry4@1000000008 : Record 50106;
      FIValueEntry5@1000000005 : Record 50107;
      GLFIValueRelation@1101495000 : Record 50117;
    BEGIN
      //NC MTF02 > II
      GenJnlTemplate.GET(TemplateName);
      IF GenJnlLineForCoupon.FIND('-') THEN REPEAT
        //Копирование аналитик с исходной операции
      //  TempJnlLineDimForFI.DELETEALL;
      //  GLDim.SETRANGE("Table ID", DATABASE::"G/L Entry");
      //  GLDim.SETRANGE("Entry No.", GenJnlLineForCoupon."External Operation No");
      //  IF GLDim.FIND('-') THEN REPEAT
      //    DimMgt.MoveLedgEntryDimToJnlLineDim(
      //           GLDim, TempJnlLineDimForFI, DATABASE::"G/L Entry",
      //           GenJnlLineForCoupon."Journal Template Name", GenJnlLineForCoupon."Journal Batch Name",
      //           GenJnlLineForCoupon."Line No.", 0);
      //  UNTIL GLDim.NEXT = 0;
        //NC NOS-26 > SPA
        GLEntryLoc.GET(GenJnlLineForCoupon."External Operation No");
        GenJnlLineForCoupon."Dimension Set ID" := GLEntryLoc."Dimension Set ID";
        //NC NOS-26 < SPA

        //NC MTF02.1 > AKU
        // Устанавливаем значения измерения REVAL.TYPE в (INT)
        InsertRevalTypeDimValue(GenJnlLineForCoupon."Dimension Set ID", 'INT');
        //NC MTF02.1 < AKU

        RunWithCheck(GenJnlLineForCoupon);

        GLFIValueRelation."G/L Entry No." := GLEntryLoc."Entry No.";
        GLFIValueRelation."FI Value Entry No." := GenJnlLineForCoupon.FIValueEntryNo2;
        GLFIValueRelation.INSERT;

      UNTIL GenJnlLineForCoupon.NEXT = 0;
      GenJnlLineForCoupon.DELETEALL;
      //NC MTF02 < II
    END;

    PROCEDURE UpdateCVAgreementDetail@1101495011(SourceType@1101495006 : 'Customer,Vendor';SourceNo@1101495005 : Code[20];AgreementNo@1101495004 : Code[20];AgreementCondition@1101495003 : Integer;PostingDate@1101495002 : Date;Reverse@1101495000 : Boolean;DocType@1101495008 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';ChangeBlockStatus@1101495009 : Boolean);
    VAR
      CVAgreementDetails@1101495001 : Record 50096;
      CVAgreementSchedule@1101495007 : Record 50097;
    BEGIN
      //NC MLN09.3 > DP
      CVAgreementDetails.RESET;
      IF CVAgreementDetails.GET(SourceType,SourceNo,AgreementNo, AgreementCondition) THEN BEGIN
        //NC MLN09.4 > DP
        IF DocType IN [DocType::" ",DocType::Refund] THEN
          IF CVAgreementDetails."Interest Calc. Starting Date"=0D THEN BEGIN
            CVAgreementDetails."Interest Calc. Starting Date" := PostingDate+1;
            CVAgreementDetails.MODIFY;
          END;
        //NC MLN09.4 < DP
        //NC MLN09.5 < DP
        IF ChangeBlockStatus THEN BEGIN
        {
        IF GenJnlLine."Change Condition Block Status" THEN BEGIN
        }
        //NC MLN09.5 < DP
          CVAgreementDetails.Blocked :=NOT Reverse;
          CVAgreementDetails.MODIFY;
          CVAgreementSchedule.RESET;
          CVAgreementSchedule.SETRANGE("Source Type",CVAgreementDetails."Source Type");
          CVAgreementSchedule.SETRANGE("Source No.",CVAgreementDetails."Source No.");
          CVAgreementSchedule.SETRANGE("Agreement No.",CVAgreementDetails."Agreement No.");
          CVAgreementSchedule.SETRANGE("Agreement Condition No.",CVAgreementDetails."Condition No.");
          CVAgreementSchedule.SETRANGE(Type,CVAgreementSchedule.Type::Accrual);
          CVAgreementSchedule.SETFILTER(Date,'%1..',PostingDate);
          IF CVAgreementSchedule.FINDSET THEN
            REPEAT
              CVAgreementSchedule.Blocked := NOT Reverse;
              CVAgreementSchedule.MODIFY;
            UNTIL CVAgreementSchedule.NEXT=0;
        END;
      END;
      //NC MLN09.3 < DP
    END;

    LOCAL PROCEDURE fn_InsertDefDimValueFromAcc@1000000015(p_codeAccNo@1101495004 : Code[20];VAR TempDimSetEntry@1101495000 : TEMPORARY Record 480);
    VAR
      l_recDefDim@1101495001 : Record 352;
    BEGIN
      //TDRAAPCOC-108
      // Простановка значений измерений из настройки плана счетов, где настроено Единый Код
      l_recDefDim.SETRANGE("Table ID",DATABASE::"G/L Account");
      l_recDefDim.SETRANGE("No.",p_codeAccNo);
      l_recDefDim.SETFILTER("Dimension Value Code",'<>%1','');
      l_recDefDim.SETRANGE("Value Posting",l_recDefDim."Value Posting"::"Same Code");
      IF l_recDefDim.FINDSET THEN BEGIN
        TempDimSetEntry.SetObject(GlobalGenJournalLine);
        REPEAT
          TempDimSetEntry."Dimension Code" := l_recDefDim."Dimension Code";
          IF TempDimSetEntry.FIND THEN
            TempDimSetEntry.DELETE;
          TempDimSetEntry.VALIDATE("Dimension Value Code", l_recDefDim."Dimension Value Code");
          TempDimSetEntry.INSERT(TRUE);
        UNTIL l_recDefDim.NEXT = 0;
      END;
    END;

    PROCEDURE InsertRevalTypeDimValue@1101495004(VAR DimSetID@1101495001 : Integer;TypeDimValue@1101495000 : Code[20]);
    VAR
      TempDimSetEntry@1101495002 : TEMPORARY Record 480;
    BEGIN
      //NC NOS-26 > SPA
      {
      //NC MTF02.1 > AKU
      //Добавление аналитики REVAL.TYPE по операциям с фин. инструментами.
      //Значения первичного ключа в JnlLineDim должны инициализированы до вызова функции
      IF FISetup."REVAL.TYPE Dimension Code" <> '' THEN BEGIN
        JnlLineDim."Dimension Code" := FISetup."REVAL.TYPE Dimension Code";
        IF NOT JnlLineDim.FIND THEN
          JnlLineDim.INSERT;

        CASE TypeDimValue OF
          'COST' :
             IF FISetup."COST Dimension Value" <> '' THEN
               JnlLineDim."Dimension Value Code" := FISetup."COST Dimension Value";
          'FX' :
             IF FISetup."FX Dimension Value" <> '' THEN
               JnlLineDim."Dimension Value Code" := FISetup."FX Dimension Value";
          'MTM' :
             IF FISetup."MTM Dimension Value" <> '' THEN
               JnlLineDim."Dimension Value Code" := FISetup."MTM Dimension Value";
          'PROCEEDS':
             IF FISetup."PROCEEDS Dimension Value" <> '' THEN
               JnlLineDim."Dimension Value Code" := FISetup."PROCEEDS Dimension Value";
          'INT':
             IF FISetup."INT Dimension Value" <> '' THEN
               JnlLineDim."Dimension Value Code" := FISetup."INT Dimension Value";
        END;

        IF JnlLineDim."Dimension Value Code" = '' THEN
          JnlLineDim.DELETE
        ELSE
          JnlLineDim.MODIFY;
      END;
      //NC MTF02.1 < AKU
      }

      IF DimSetID <> 0 THEN
        DimMgt.GetDimensionSet(TempDimSetEntry, DimSetID);

      IF FISetup."REVAL.TYPE Dimension Code" <> '' THEN BEGIN
        TempDimSetEntry.VALIDATE("Dimension Code", FISetup."REVAL.TYPE Dimension Code");
        IF NOT TempDimSetEntry.FIND THEN
          TempDimSetEntry.INSERT;

        CASE TypeDimValue OF
          'COST' :
             IF FISetup."COST Dimension Value" <> '' THEN
               TempDimSetEntry.VALIDATE("Dimension Value Code", FISetup."COST Dimension Value");
          'FX' :
             IF FISetup."FX Dimension Value" <> '' THEN
               TempDimSetEntry.VALIDATE("Dimension Value Code", FISetup."FX Dimension Value");
          'MTM' :
             IF FISetup."MTM Dimension Value" <> '' THEN
               TempDimSetEntry.VALIDATE("Dimension Value Code", FISetup."MTM Dimension Value");
          'PROCEEDS':
             IF FISetup."PROCEEDS Dimension Value" <> '' THEN
               TempDimSetEntry.VALIDATE("Dimension Value Code", FISetup."PROCEEDS Dimension Value");
          'INT':
             IF FISetup."INT Dimension Value" <> '' THEN
               TempDimSetEntry.VALIDATE("Dimension Value Code", FISetup."INT Dimension Value");
        END;

        IF TempDimSetEntry."Dimension Value Code" = '' THEN
          TempDimSetEntry.DELETE
        ELSE
          TempDimSetEntry.MODIFY;

        DimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
      END;
      //NC NOS-26 < SPA
    END;

    PROCEDURE InsertFX_RevalTypeDimValue@1101495006();
    VAR
      ParTempSelectedDimPos@1101495000 : TEMPORARY Record 369;
      ParTempSelectedDimNeg@1101495001 : TEMPORARY Record 369;
      DefDimApplication@1101495002 : Record 352;
    BEGIN
      //NC NCS-978 > DP
      ParTempSelectedDimNeg.DELETEALL;
      ParTempSelectedDimPos.DELETEALL;

      DefDimApplication.RESET;
      DefDimApplication.SETRANGE("Table ID",50064);
      DefDimApplication.SETRANGE("No.",'');
      DefDimApplication.SETFILTER("Value Posting",'%1|%2',DefDimApplication."Value Posting"::"Code Mandatory",
                                                    DefDimApplication."Value Posting"::"Same Code");
      DefDimApplication.SETFILTER("Dimension Value Code",'<>%1','');
      IF DefDimApplication.FINDSET THEN
        REPEAT
          ParTempSelectedDimPos.INIT;
          ParTempSelectedDimPos."Object Type" := 0;
          ParTempSelectedDimPos."Object ID" := 50064;
          ParTempSelectedDimPos."Dimension Code" :=DefDimApplication."Dimension Code";
          ParTempSelectedDimPos."New Dimension Value Code" := DefDimApplication."Dimension Value Code";
          ParTempSelectedDimPos.INSERT;
          ParTempSelectedDimNeg.INIT;
          ParTempSelectedDimNeg."Object Type" := 0;
          ParTempSelectedDimNeg."Object ID" := 50064;
          ParTempSelectedDimNeg."Dimension Code" :=DefDimApplication."Dimension Code";
          ParTempSelectedDimNeg."New Dimension Value Code" := DefDimApplication."Dimension Value Code";
          ParTempSelectedDimNeg.INSERT;
        UNTIL DefDimApplication.NEXT=0;

      SetApplicationDim(ParTempSelectedDimPos,ParTempSelectedDimNeg);
      //NC NCS-978 < DP
    END;

    LOCAL PROCEDURE fn_InsertRealCounterparty@1000000021(p_codeAccNo@1101495004 : Code[20];VAR TempDimSetEntry@1101495002 : TEMPORARY Record 480);
    VAR
      l_recDefDim@1101495001 : Record 352;
      l_recGLAccount@1000000001 : Record 15;
      l_recMovingDataSetup@1000000002 : Record 50064;
      l_codeRealCtr@1000000004 : Code[20];
      l_codeCtr@1000000005 : Code[20];
    BEGIN
      //TDRAMIO-41
      // Insert Dim Value Counterparty Real
      IF NOT l_recGLAccount.GET(p_codeAccNo) THEN
        EXIT;

      IF l_recGLAccount."Real Counterparty Value" = l_recGLAccount."Real Counterparty Value"::" " THEN
        EXIT;

      l_recMovingDataSetup.GET;

      //NC NOS-26 > SPA
      IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID", l_recMovingDataSetup."Customer Dimension Code") THEN
        l_codeCtr := TempDimSetEntry."Dimension Value Code"
      ELSE
        EXIT;

      IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID", l_recMovingDataSetup."Real Counterparty Dim. Code") THEN
        l_codeRealCtr := TempDimSetEntry."Dimension Value Code";

      CASE l_recGLAccount."Real Counterparty Value" OF
        l_recGLAccount."Real Counterparty Value"::"Default Value": BEGIN
          l_codeRealCtr := l_codeCtr;
          TempDimSetEntry.VALIDATE("Dimension Code", l_recMovingDataSetup."Real Counterparty Dim. Code");
          IF TempDimSetEntry.FIND THEN
            TempDimSetEntry.DELETE;
          TempDimSetEntry.VALIDATE("Dimension Value Code", l_codeRealCtr);
          TempDimSetEntry.SetObject(GlobalGenJournalLine);
          TempDimSetEntry.INSERT(TRUE);
        END;

        l_recGLAccount."Real Counterparty Value"::"Same Value": BEGIN
          IF l_codeRealCtr = '' THEN BEGIN
            l_codeRealCtr := l_codeCtr;
            TempDimSetEntry.VALIDATE("Dimension Code", l_recMovingDataSetup."Real Counterparty Dim. Code");
            IF TempDimSetEntry.FIND THEN
              TempDimSetEntry.DELETE;
            TempDimSetEntry.VALIDATE("Dimension Value Code", l_codeRealCtr);
            TempDimSetEntry.SetObject(GlobalGenJournalLine);
            TempDimSetEntry.INSERT(TRUE);
          END;
        END;
      END;

      TempDimSetEntry.RESET;
      //NC NOS-26 < SPA
    END;

    LOCAL PROCEDURE fn_InsertLegalEntityDimValue@1000000018(VAR TempDimSetEntry@1101495001 : TEMPORARY Record 480);
    VAR
      l_recCompany@1000000000 : Record 2000000006;
      l_recDefDim@1000000001 : Record 352;
      l_recGLAccount@1000000004 : Record 15;
    BEGIN
      //TDRANCS-1533 >
      l_recCompany.GET(COMPANYNAME);
      IF l_recCompany."Legal Entity Type" = '' THEN
        EXIT;

      //NC NOS-26 > SPA
      l_recDefDim.SETRANGE("Table ID", DATABASE::"Legal Entity Type");
      l_recDefDim.SETRANGE("No.", l_recCompany."Legal Entity Type");
      l_recDefDim.SETFILTER("Dimension Value Code", '<>%1', '');
      l_recDefDim.SETRANGE("Value Posting", l_recDefDim."Value Posting"::"Code Mandatory", l_recDefDim."Value Posting"::"Same Code");
      IF l_recDefDim.FINDSET THEN BEGIN
        TempDimSetEntry.SetObject(GlobalGenJournalLine);
        REPEAT
          CASE l_recDefDim."Value Posting" OF
            l_recDefDim."Value Posting"::"Same Code": BEGIN
              TempDimSetEntry."Dimension Code" := l_recDefDim."Dimension Code";
              IF TempDimSetEntry.FIND THEN
                TempDimSetEntry.DELETE;
              TempDimSetEntry.VALIDATE("Dimension Value Code", l_recDefDim."Dimension Value Code");
              TempDimSetEntry.INSERT(TRUE);
            END;
            l_recDefDim."Value Posting"::"Code Mandatory": BEGIN
              TempDimSetEntry."Dimension Code" := l_recDefDim."Dimension Code";
              IF NOT TempDimSetEntry.FIND THEN BEGIN
                TempDimSetEntry.VALIDATE("Dimension Value Code", l_recDefDim."Dimension Value Code");
                TempDimSetEntry.INSERT(TRUE);
              END;
            END;
          END;
        UNTIL l_recDefDim.NEXT = 0;
      END;

      TempDimSetEntry.RESET;
      //NC NOS-26 < SPA
    END;

    PROCEDURE SetNextTransaction@1101495007();
    BEGIN
      //NC NCS-1820 > DP
      NextTransactionNo := NextTransactionNo+1;
      //NC NCS-1820 < DP
    END;

    PROCEDURE InsertGLEntryExtension@1101495010(GLEntry@1101495000 : Record 17;GenJnlLine@1101495001 : Record 81);
    BEGIN
      // NCS-1880 > ORM
      GLEntryExtensionTmp."Entry No." := GLEntry."Entry No.";
      GLEntryExtensionTmp."Modified By" := GenJnlLine."Modified By";
      GLEntryExtensionTmp."Approved By" := GenJnlLine."Approved By";
      GLEntryExtensionTmp.INSERT;
      // NCS-1880 < ORM
    END;

    PROCEDURE InsertGLEntryExtensionFromBuff@1101495015();
    BEGIN
      // NCS-1880 > ORM
      IF GLEntryExtensionTmp.FINDSET THEN
        REPEAT
          GLEntryExtension := GLEntryExtensionTmp;
          IF GLEntryExtension.INSERT THEN;
        UNTIL GLEntryExtensionTmp.NEXT = 0;
      // NCS-1880 < ORM
    END;

    PROCEDURE FillSourceGLAccountNo@1101495009(VAR SourceGLEntry@1101495009 : Record 17);
    VAR
      ExtAccMappingLine@1101495000 : Record 50189;
      MovingDataSetup@1101495004 : Record 50064;
      Customer@1101495005 : Record 18;
      ExternalSystem@1101495002 : Record 50065;
      TempMapping@1101495007 : TEMPORARY Record 50022;
      TempDimSetEntry@1101495001 : TEMPORARY Record 480;
      DimensionSetEntry@1101495010 : Record 480;
      ConsolidationMgt@1101495008 : Codeunit 50000;
      SourceAccountNo@1101495003 : Code[20];
      OneMapping@1101495006 : Boolean;
    BEGIN
      // NCS-1897 > ORM
      WITH SourceGLEntry DO BEGIN
        IF "Source G/L Account No." <> '' THEN
          EXIT;

        IF ExternalSystem.GET("External System ID") THEN
          IF ExternalSystem."Do not Generate Ext. Acc. No." THEN
            EXIT;

        GLSetup.GET;
        GLSetup.TESTFIELD("Dflt.Exp.Mapping Trans. Scheme");
        MovingDataSetup.GET;
        MovingDataSetup.TESTFIELD("Customer Dimension Code");

        GlobalVariables.GetMapping(TempMapping,GLSetup."Dflt.Exp.Mapping Trans. Scheme",0,OneMapping);
        IF NOT OneMapping THEN
          ConsolidationMgt.GetMapping("Posting Date",TempMapping);

        ExtAccMappingLine.SETCURRENTKEY("Transformation Scheme Code","IFRS Account No.");
        ExtAccMappingLine.SETRANGE("Transformation Scheme Code",TempMapping.Code);
        ExtAccMappingLine.SETRANGE("IFRS Account No.","G/L Account No.");
        IF GlobalVariables.FIND_ExtAccountMapping(ExtAccMappingLine) THEN BEGIN
          //NC NOS-26 > SPA
          {
          IF LedgerEntryDimension.GET(17,"Entry No.",MovingDataSetup."Customer Dimension Code") THEN
            IF Customer.GET(LedgerEntryDimension."Dimension Value Code") THEN;
          }
          IF DimensionSetEntry.GET("Dimension Set ID", MovingDataSetup."Customer Dimension Code") THEN
            IF Customer.GET(DimensionSetEntry."Dimension Value Code") THEN;
          //NC NOS-26 < SPA

          // поиск полного соответсвия мэпинга
          ExtAccMappingLine.SETFILTER("Dimension 1 Code",'<>%1','');
          ExtAccMappingLine.SETFILTER("Dimension 2 Code",'<>%1','');
          ExtAccMappingLine.SETFILTER("Counterparty Category",'>0');
          IF GlobalVariables.FIND_ExtAccountMapping(ExtAccMappingLine) THEN
            REPEAT
              //NC NOS-26 > SPA
              {
              IF HasDimension("Entry No.",ExtAccMappingLine."Dimension 1 Code",ExtAccMappingLine."Dimension 1 Value Code") AND
                 HasDimension("Entry No.",ExtAccMappingLine."Dimension 2 Code",ExtAccMappingLine."Dimension 2 Value Code") AND
              }
              IF HasDimension("Dimension Set ID",ExtAccMappingLine."Dimension 1 Code",ExtAccMappingLine."Dimension 1 Value Code") AND
                 HasDimension("Dimension Set ID",ExtAccMappingLine."Dimension 2 Code",ExtAccMappingLine."Dimension 2 Value Code") AND
              //NC NOS-26 < SPA
                 //NC S2015 > PCH
                 //(ExtAccMappingLine."Counterparty Category" = Customer."Counterparty Type" + 1)
                 (ExtAccMappingLine."Counterparty Category" = Customer."Counterparty Category" + 1)
                 //NC S2015 < PCH
              THEN BEGIN
                ExtAccMappingLine.TESTFIELD("GAAP Account No.");
                "Source G/L Account No." := ExtAccMappingLine."GAAP Account No.";
                EXIT;
              END;
            UNTIL GlobalVariables.NEXT_ExtAccountMapping(ExtAccMappingLine) = 0;

          // поиск по двум измерениям
          ExtAccMappingLine.SETRANGE("Counterparty Category",0);
          IF GlobalVariables.FIND_ExtAccountMapping(ExtAccMappingLine) THEN
            REPEAT
              //NC NOS-26 > SPA
              {
              IF HasDimension("Entry No.",ExtAccMappingLine."Dimension 1 Code",ExtAccMappingLine."Dimension 1 Value Code") AND
                 HasDimension("Entry No.",ExtAccMappingLine."Dimension 2 Code",ExtAccMappingLine."Dimension 2 Value Code")
              }
              IF HasDimension("Dimension Set ID",ExtAccMappingLine."Dimension 1 Code",ExtAccMappingLine."Dimension 1 Value Code") AND
                 HasDimension("Dimension Set ID",ExtAccMappingLine."Dimension 2 Code",ExtAccMappingLine."Dimension 2 Value Code")
              //NC NOS-26 < SPA
              THEN BEGIN
                ExtAccMappingLine.TESTFIELD("GAAP Account No.");
                "Source G/L Account No." := ExtAccMappingLine."GAAP Account No.";
                EXIT;
              END;
            UNTIL GlobalVariables.NEXT_ExtAccountMapping(ExtAccMappingLine) = 0;

          // поиск по одному измерению + тип контрагента
          ExtAccMappingLine.SETFILTER("Dimension 2 Code",'=%1','');
          //NC S2015 > PCH
          //ExtAccMappingLine.SETRANGE("Counterparty Category",Customer."Counterparty Type" + 1);
          ExtAccMappingLine.SETRANGE("Counterparty Category",Customer."Counterparty Category" + 1);
          //NC S2015 < PCH
          IF GlobalVariables.FIND_ExtAccountMapping(ExtAccMappingLine) THEN
            REPEAT
              //NC NOS-26 > SPA
              {
              IF HasDimension("Entry No.",
                 ExtAccMappingLine."Dimension 1 Code",ExtAccMappingLine."Dimension 1 Value Code")
              }
              IF HasDimension("Dimension Set ID",
                 ExtAccMappingLine."Dimension 1 Code",ExtAccMappingLine."Dimension 1 Value Code")
              //NC NOS-26 < SPA
              THEN BEGIN
                ExtAccMappingLine.TESTFIELD("GAAP Account No.");
                "Source G/L Account No." := ExtAccMappingLine."GAAP Account No.";
                EXIT;
              END;
            UNTIL GlobalVariables.NEXT_ExtAccountMapping(ExtAccMappingLine) = 0;


          // поиск по одному измерению
          ExtAccMappingLine.SETFILTER("Dimension 2 Code",'=%1','');
          ExtAccMappingLine.SETRANGE("Counterparty Category",0);
          IF GlobalVariables.FIND_ExtAccountMapping(ExtAccMappingLine) THEN
            REPEAT
              //NC NOS-26 > SPA
              {
              IF HasDimension("Entry No.",
                 ExtAccMappingLine."Dimension 1 Code",ExtAccMappingLine."Dimension 1 Value Code")
              }
              IF HasDimension("Dimension Set ID",
                 ExtAccMappingLine."Dimension 1 Code",ExtAccMappingLine."Dimension 1 Value Code")
              //NC NOS-26 < SPA
              THEN BEGIN
                ExtAccMappingLine.TESTFIELD("GAAP Account No.");
                "Source G/L Account No." := ExtAccMappingLine."GAAP Account No.";
                EXIT;
              END;
            UNTIL GlobalVariables.NEXT_ExtAccountMapping(ExtAccMappingLine) = 0;

          // поиск по одному номеру счета + тип контрагента
          ExtAccMappingLine.SETFILTER("Dimension 1 Code",'=%1','');
          //NC S2015 > PCH
          //ExtAccMappingLine.SETRANGE("Counterparty Category",Customer."Counterparty Type" + 1);
          ExtAccMappingLine.SETRANGE("Counterparty Category",Customer."Counterparty Category" + 1);
          //NC S2015 < PCH
          IF ExtAccMappingLine.FINDFIRST THEN BEGIN
            ExtAccMappingLine.TESTFIELD("GAAP Account No.");
            "Source G/L Account No." := ExtAccMappingLine."GAAP Account No.";
            EXIT;
          END;

          // поиск по одному номеру счета
          ExtAccMappingLine.SETRANGE("Counterparty Category",0);
          ExtAccMappingLine.SETFILTER("Dimension 1 Code",'=%1','');
          IF ExtAccMappingLine.FINDFIRST THEN BEGIN
            ExtAccMappingLine.TESTFIELD("GAAP Account No.");
            "Source G/L Account No." := ExtAccMappingLine."GAAP Account No.";
            EXIT;
          END;
        END;
      END;
      // NCS-1897 < ORM
    END;

    PROCEDURE HasDimension@1101495013(DimSetID@1101495003 : Integer;DimCode@1101495000 : Code[20];DimValue@1101495001 : Code[20]) : Boolean;
    VAR
      DimensionSetEntry@1101495002 : Record 480;
    BEGIN
      //NC NOS-26 > SPA
      {
      // NCS-1897 > ORM
      IF NOT LedgerEntryDimension.GET(17,EntryNo,DimCode) THEN
        EXIT(FALSE);

      EXIT(LedgerEntryDimension."Dimension Value Code" = DimValue);
      // NCS-1897 < ORM
      }

      IF NOT DimensionSetEntry.GET(DimSetID, DimCode) THEN
        EXIT(FALSE);

      EXIT(DimensionSetEntry."Dimension Value Code" = DimValue);
      //NC NOS-26 < SPA
    END;

    PROCEDURE fn_UpdateGlobalDimForSameCode@1000000019(DimSetID@1101495000 : Integer;VAR pv_recGLEntry@1000000002 : Record 17);
    BEGIN
      //NC NOS-26 > SPA
      DimMgt.UpdateGlobalDimFromDimSetID(DimSetID,
        pv_recGLEntry."Global Dimension 1 Code",
        pv_recGLEntry."Global Dimension 2 Code");
      //NC NOS-26 < SPA
    END;

    LOCAL PROCEDURE fn_InsertVATDimValue@1101495014(VAR p_recVATGL@1101495000 : TEMPORARY Record 17;VAR TempDimSetEntry@1101495001 : TEMPORARY Record 480);
    VAR
      l_recCompany@1000000000 : Record 2000000006;
      l_recDefDim@1000000001 : Record 352;
      l_recGLAccount@1000000004 : Record 15;
      l_blnIsModify@1101495002 : Boolean;
    BEGIN
      //NC NOS-26 > SPA
      l_recDefDim.SETRANGE("Table ID", DATABASE::"VAT Product Posting Group");
      l_recDefDim.SETRANGE("No.", p_recVATGL."VAT Prod. Posting Group");
      l_recDefDim.SETFILTER("Dimension Value Code", '<>%1', '');
      l_recDefDim.SETRANGE("Value Posting", l_recDefDim."Value Posting"::"Code Mandatory", l_recDefDim."Value Posting"::"Same Code");
      IF l_recDefDim.FINDSET THEN BEGIN
        TempDimSetEntry.SetObject(GlobalGenJournalLine);
        REPEAT
          CASE l_recDefDim."Value Posting" OF
            l_recDefDim."Value Posting"::"Same Code": BEGIN
              TempDimSetEntry."Dimension Code" := l_recDefDim."Dimension Code";
              IF TempDimSetEntry.FIND THEN
                TempDimSetEntry.DELETE;
              TempDimSetEntry.VALIDATE("Dimension Value Code", l_recDefDim."Dimension Value Code");
              TempDimSetEntry.INSERT(TRUE);
            END;

            l_recDefDim."Value Posting"::"Code Mandatory": BEGIN
              TempDimSetEntry."Dimension Code" := l_recDefDim."Dimension Code";
              IF NOT TempDimSetEntry.FIND THEN BEGIN
                TempDimSetEntry.VALIDATE("Dimension Value Code", l_recDefDim."Dimension Value Code");
                TempDimSetEntry.INSERT(TRUE);
              END;
            END;
          END;
        UNTIL l_recDefDim.NEXT = 0;
      END;
      //NC NOS-26 < SPA
    END;

    PROCEDURE SetGlobalDimensionSetID@1101495000(NewDimSetID@1101495000 : Integer);
    BEGIN
      //NC NOS-26 > SPA
      GlobalDimensionSetID := NewDimSetID;
      //NC NOS-26 < SPA
    END;

    PROCEDURE GetFiscalYearStartDate@1101495018() : Date;
    BEGIN
      //NC NOS-26 > SPA
      EXIT(FiscalYearStartDate);
      //NC NOS-26 < SPA
    END;

    BEGIN
    {
      NC PIF001 MP Изменена функция PostFixedAsset
      NC PIF001 DL Изменена модификация PIF001
      NC PIF001 AK Добавлен код на InitGLEntry
      NC PIF001 MP Изменена ф-ция GLCalcAddCurrency
      NC MP 26.02.07 Изменения в функции InsertFAAllocDim
                     При доначислении амортизации на ОС при выбытии подтягивается аналитика
                     ОС, СТРУКТУРНОЕ ПОДРАЗДЕЛЕНИЕ
      NC MP 28.03.07 Изменения в PostFixedAsset
      NC PIF001 DP Изменена функция InitGLEntry
      NC MDP01 MP Мелкие доработки по журналам: не консолидировать
      NCS CFM Code added into trigger "Code"
      NCS CFM Code added into trigger "Post bank acc"
      NC MDTA01 MP Измерение Валюта
      NC MDR01 MP Изменения в коде
      NC MDM06 GM заполнение поля время учета
      NC MAU02 MP ДОВ считается на историческую дату
      NC MIFI02 Изменения в коде
      NC MMTM05 AG Заполнение поля Reverse
      ------------------------------
      NC BLD001 EB создан билд, вкл модификации NCPIF001,NCSCFM1.01,MDP01,MDTA01,MDR01,MDM06,MIFI02
      NC TR266 EB Добавлен код в функции ApplyCustLedgEntry, ApplyVendLedgEntry
      NC TR219 EB добавлена функция CheckAccount
      NC TR269 EB Changed code in PostDtldCustLedgEntries,PostDtldVendLedgEntries, added functions SetApplicationDim,InsertPosDim,
                  InsertNegDim,GenJnlLineShortCutsModify
      NC TR237 EB протягивание признака Not Consolidate
      NC TR217 DP Контроль использования счета по пользователю
      NC TR220 DP Контроль по сумме учета для пользователя
      NC TR221 DP Контроль операций закрытого периода
      NC OCPM01 DP Постфикс для номера при применении операций в функциях ApplyCustLedgEntry, ApplyVendLedgEntry
      ------------------------------
      NC BLD002 DP создан билд, вкл модификации NCBLD001,TR266,219,269,237,217,220,221,277
      NC OFA011 DP Модификация функции InsertFAAllocDim
      NC MTF02 II Учет фин. инструментов
      NC MLN03 EB протягивание значения поля "Agreement Condition No.", "Amount Type"
      NC MLN09 DP Изменение статуса начислений графика договора
      NC MLN15 DP Изменены функции UnapplyCustLedgEntry, UnapplyVendLedgEntry
      ------------------------------
      NC BLD03 AKU создан билд, вкл. модификации NCBLD002,OFA011,MTF02,MLN03,MLN09,MLN15
      NC OCPM01.1 DP Постфикс для номера
      NC MTF02 II Учет фин. инструментов
      NC MLN04 DP Добавлена функция CheckLoanAgreementAmount
      NC MLN09.3 DP Функция UpdateCVAgreementDetail
      NC OAM20 DP Оригинальная валюта на курсовых разницах
      NC OFA21 DP Доопределение измерения по умолчанию для компании
      --------------------------------
      NC BLD04 DP создан билд, вкл. модификации NCBLD03,OCPM01.1,MTF02,MLN04,MLN09.3,OAM20,OFA21
      NC MLN09.4 DP Изменены функции PostCust, PostVend, UpdateCVAgreementDetail
      NC MTF02 II Учет ФИ
      NC MLN09.5 DP Изменены функции PostCust, PostVend, UpdateCVAgreementDetail
      NC OAM24 DP Изменеие знака на реализованных разницах при применении
      NC OAM20.1 DP Оригинальная валюта на НДС
      NC OAM20.2 DP Оригинальная валюта на зачете аванса
      NC OAM29 DP Снят контроль на наличие учетных групп в карточках
      ---------------------------------
      NC BLD05 DP создан билд, вкл. модификации NCBLD04,MLN09.4,MLN09.5,OFA24,MTF02,OAM20.2,OAM29
      NC OAM20.3 DP Оригинальная валюта на НДС
      NC OCPM01.2 DP Описание операции
      NC MTF02.1 AKU Доработка аннулирования транзакций, учета списания себестоимости, установка значений измерений REVAL.TYPE
      NC OAM37 DP Снят контроль применяемых документов по датам для подотчетных лиц
      NC MTF02.1 AKU Доработка заполнения поля GLEntry."Financial Instrument No."
      NC OAM43 DP Применение для подотчетных лиц
      NC OAM20.4 DP Оригинальная валюта на Коррекции суммы остатка
      NC MTF02.1 AKU Исправление учета купона
      ----------------------------------
      NC BLD06 DP создан билд, вкл. модификации NCBLD05,OAM20.3,OCPM01.2,OAM37,OAM43,OA20.4,MTF02.1
      NC OAM44 DP Расчет суммы ДОВ для курсовых разниц с валютой, равной ДОВ
      NC MLN09.1 DP Учет процентов
      NC MTD02.1 DP Изменена функция PostBankAcc
      NC OAM50 DP Изменена функция GetCurrencyExchRate
      NC MDR01.1 DP Измерения на ДОВ баланс. строке
      NC OAM20.5 DP Оригинальная валюта на Коррекции суммы остатка
      ----------------------------------
      NC BLD07 DP создан билд, вкл. модификации NCBLD06,OAM44,MLN09.1,MTD02.1,M1,MDR01.1,OAM20.5
      NC APCOC-89 DP Переоценка ДОВ карточек
      NC APCOC-56 DP Признак начисления процентов
      NC APCOC-92 DP Обработка поля Not Translate
      // TDRAAPCOC-108 bugfix Posting Docs, dimension on VAT >
        add function fn_InsertDefDimValueFromAcc
        при учете документов на операции со счетом НДС должна проставляться аналитика из плана счетов,
        где указана настройка Единый Код
      -------------------------------------------
      NC BLD08 DP создан билд, вкл. модификации NCBLD07,APCOC-89,APCOC-56,APCOC-92,TDAPCOC-108
      NC APCOC-107 DP Признак не транслировать - с филиала
      NC APCOC-110 KKA 02/08/12 Установка исторической даты для реверса - GetCurrencyExchRate()
      NC #6455 Оригинальная сумма на округлении ДОВ
      NC APCOC-104 DP Не Транслировать Применение
      NC APCOC-117 RD Не Транслировать применения в IFRS, перенос признака со строк журнала, с карточки филиала
      // TDRAAPCOC-129
        Modify Function PostBankAcc
        Modify Function PostVend
        Modify Function PostCust
      TDRAAPCOC-129 25/10/12 corrected function HandleAddCurrResidualGLEntry
      //22/01/13 NAVW15.00.01,NAVRU5.00.01.03,NCBLD08,APCOC-107,#6455,APCOC-104,APCOC-117,-129,DP
      -------------------------------------------
      NC BLD09 DP создан билд, вкл модификации BLD08,APCOC-107,#6455,APCOC-104,APCOC-117,-129,DP
      NC NCS-745 DP Не Транслировать Применение для нулевых проводок
      TDRANCS-817 >
        Changed Appln. between Posting Groups
      NC NCS-745.1 DP Не Транслировать Применение для нулевых проводок
      TDRANCS-846 > Modify function Code - That was not correct, because it does not post correctly Documents
      NC NCS-900 DP Оригинальная сумма на обратном НДС со счетов
      NC NCS-902 DP Ошибка вставки измерений распределения
      NC NCS-978 DP Измерение REVAL.TYPE на применении
      -------------------------------------------
      NC BLD10 DP создан билд, вкл модификации NCBLD09,NCS-745,TDNCS-817,NCS-745.1,TDNCS-846,NCS-900,NCS-902,NCS-978
      NC NCS-981 DP Исправлено указание ориг. суммы при зачете аванса поставщика
      TDRANCS-1071 >
        modified function Reverse(
      TDRANCS-1071>
        Modified Func InitGLEntry
      NC NCS-1152 DP Оригинальная сумма при нулевой сумме в локальной валюте
      NC NCS-1152.1 DP Оригинальная сумма при нулевой сумме в локальной валюте
      NC NCS-1152.2 DP Оригинальная сумма при нулевой сумме в локальной валюте
      NC NCS-1163 DP Наследуем значение ФИ в ГК всегда (имитация доп. глоб. измерения)
      NC MIO-11 AES:
        Измененные триггеры и функции:
          Code,
          PostGLAcc
      NC MIO-28 AES/DP Отключить формирование операций в G/L Entry при формировании переоценок
      --------------------------------
      NC BLD11 DP создан билд, вкл. модификации NCBLD10,NCS-981,NCS-978,NCS-1071,NCS-1152.2,NCS-1163,MIO-11,MIO-28
      NC NCS-1500 DP Изменена функция GetCurrencyExchRate
      TDRAMIO-41
        deleted mio-34
          Modified func InitGLEntry, FinishCodeunit
          created func fn_InsertRealCounterparty
      NC MIO-28.1 DP Изменена функция InitCodeunit
      NC MIO-28.2 DP Изменена функция InitCodeunit
      TDRAMIO-41.1
        Modified funcs PostCust, PostVend, PostBankAcc
      TDRANCS-1533>
        Deleted InsertLegalEntityDimValue, Created fn_InsertLegalEntityDimValue
        Modified func InitGLEntry, FinishCodeunit, PostCust, PostVend, PostBankAcc
      NC MIO-59 DP Изменена функция InitCodeunit
      TDRANCS-1574 Modified func fn_InsertLegalEntityDimValue
      NC MIO-61 DP Изменена функция InitGLEntry
      NC S1585 PCH отключены ключи
      NC MIO-85.2 DP Изменена функция FinishCodeunit
      TDRA Created  BLD12
      NCBLD11,NCS1459,1490,1500,MIO41,MIO28.2,S1533,MIO59,S1574
      TDRANCS-1715 Modified InitGLEntry
      TDVYNCS-1722 Modified Reverse
      NC NCS-1820 DP Изменена функция Reverse, GLCalcAddCurrency, добавлены функции ReverseAllocationCostGLEntry, SetNextTransaction
      NC NCS-1820.3 DP Изменена функция GLCalcAddCurrency
      NC NCS-1820.4 DP Изменена функция Reverse
      NC NCS-1820.5 DP Изменена функция GLCalcAddCurrency
      NC NCS-1866 DP Изменена функция GLCalcAddCurrency
      NC NCS-1880 ORM Изменена функция InitGLEntry,InsertGLEntry,FinishCodeunit,
        доабвлены функции InsertGLEntryExtension, InsertGLEntryExtensionFromBuff
      NC S1893 PCH протягивание business unit
      NC NCS-1897 ORM Изменена функция FinishCodeunit. Добавлены функции FillSourceGLAccountNo, HasDimension
      NC S2015 PCH
      NC NCS-2166 DP Изменены функции InitGLEntry,HandleAddCurrResidualGLEntry
      TDRANCS-2173 Modified InitGLEntry, created fn_UpdateGlobalDimForSameCode
      TDRANCS-2230 added read Permissions for g\l entry
      BLD013
        NCBLD12,MIO61,S1585,MIO85,1715,1820,1866,1880,1893,1897,2015
      NCS-2360 ORM variable FIJnlPostLine renamed to FIGLJnlPostLine
      NC NCS-2296 DP Added fn_InsertVATDimValue function, modified InsertVAT, InitCodeunit, FinishCodeunit functions
      NC NCS-2385 DP Изменены функции fn_InsertDefDimValueFromAcc, fn_InsertRealCounterparty,
                                      fn_InsertLegalEntityDimValue, fn_InsertVATDimValue, Code
      TDRANCS-2001 modified Code() LCY Code and Currency Code = ''
      NC NCS-2413 DP Изменена функция InitGLEntry
      ------------------------------------------------
      NC NOS-26 SPA Миграция на NAV2017
        Функции ReverseFILedgEntry, ReverseAllocationCostGLEntry перенесены в CU 17
        Добавлены функции: SetGlobalDimensionSetID, GetFiscalYearStartDate
        Не перенесен учет ФИ
        Модификации кода, связанные с различиями между версиями
        Добавлено ограничение WorkFlow для автоматического фин. журнала
      ------------------------------------------------
    }
    END.
  }
}

