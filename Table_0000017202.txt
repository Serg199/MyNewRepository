OBJECT Table 17202 Tax Register Template
{
  OBJECT-PROPERTIES
  {
    Date=15.09.15;
    Time=12:00:00;
    Version List=NAVRU9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TaxRegSection.GET("Section Code");
               TaxRegSection.ValidateChangeDeclaration;
             END;

    OnDelete=BEGIN
               TaxRegSection.GET("Section Code");
               TaxRegSection.ValidateChangeDeclaration;

               TaxRegDimFilter.SETRANGE("Section Code","Section Code");
               TaxRegDimFilter.SETRANGE("Tax Register No.",Code);
               TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::Template);
               TaxRegDimFilter.SETRANGE("Line No.","Line No.");
               TaxRegDimFilter.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Tax Register Template;
               RUS=Шаблон налогового регистра];
    LookupPageID=Page17212;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;TableRelation="Tax Register".No.;
                                                   CaptionML=[ENU=Code;
                                                              RUS=Код] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 3   ;   ;Expression Type     ;Option        ;OnValidate=BEGIN
                                                                IF "Expression Type" <> xRec."Expression Type" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  IF "Expression Type" <> "Expression Type"::Norm THEN
                                                                    "Norm Jurisdiction Code" := ''
                                                                  ELSE BEGIN
                                                                    TaxRegSection.TESTFIELD("Norm Jurisdiction Code");
                                                                    "Norm Jurisdiction Code" := TaxRegSection."Norm Jurisdiction Code";
                                                                  END;
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                  Expression := '';
                                                                  Value := 0;
                                                                  "Link Tax Register No." := '';
                                                                  "Sum Field No." := 0;
                                                                  "Link Line Code" := '';
                                                                  "Term Line Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Expression Type;
                                                              RUS=Тип выражения];
                                                   OptionCaptionML=[ENU=Term,Link,Total,Header,SumField,Norm;
                                                                    RUS=Термин,Ссылка,Итог,Заголовок,Поле суммы,Норма];
                                                   OptionString=Term,Link,Total,Header,SumField,Norm }
    { 4   ;   ;Expression          ;Text150       ;OnValidate=BEGIN
                                                                IF Expression <> xRec.Expression THEN
                                                                  IF ("Expression Type" IN ["Expression Type"::Link,"Expression Type"::SumField]) AND (Expression <> '') THEN
                                                                    Expression := xRec.Expression
                                                                  ELSE BEGIN
                                                                    TaxRegSection.GET("Section Code");
                                                                    TaxRegSection.ValidateChangeDeclaration;
                                                                  END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CASE "Expression Type" OF
                                                                "Expression Type"::Norm:
                                                                  BEGIN
                                                                    TESTFIELD("Norm Jurisdiction Code");
                                                                    TaxRegNormGroup.RESET;
                                                                    TaxRegNormGroup.FILTERGROUP(2);
                                                                    TaxRegNormGroup.SETRANGE("Norm Jurisdiction Code","Norm Jurisdiction Code");
                                                                    TaxRegNormGroup.FILTERGROUP(0);
                                                                    IF Expression <> '' THEN
                                                                      IF TaxRegNormGroup.GET("Norm Jurisdiction Code",Expression) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,TaxRegNormGroup) THEN BEGIN
                                                                      Expression := TaxRegNormGroup.Code;
                                                                      IF Description = '' THEN
                                                                        Description := TaxRegNormGroup.Description;
                                                                    END;
                                                                  END;
                                                                "Expression Type"::Term:
                                                                  BEGIN
                                                                    TaxRegTerm.RESET;
                                                                    TaxRegTerm.FILTERGROUP(2);
                                                                    TaxRegTerm.SETRANGE("Section Code","Section Code");
                                                                    TaxRegTerm.FILTERGROUP(0);
                                                                    IF Expression <> '' THEN
                                                                      IF TaxRegTerm.GET("Section Code",Expression) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,TaxRegTerm) THEN BEGIN
                                                                      Expression := TaxRegTerm."Term Code";
                                                                      IF Description = '' THEN
                                                                        Description := TaxRegTerm.Description;
                                                                    END;
                                                                  END;
                                                                "Expression Type"::SumField:
                                                                  BEGIN
                                                                    "Link Tax Register No." := Code;
                                                                    TaxReg.GET("Section Code","Link Tax Register No.");
                                                                    Field.RESET;
                                                                    Field.SETFILTER("No.",MakeFieldFilter(TaxReg."Table ID"));
                                                                    IF Field.GETFILTER("No.") <> '' THEN BEGIN
                                                                      Field.SETRANGE(TableNo,TaxReg."Table ID");
                                                                      IF Field."No." <> 0 THEN
                                                                        IF Field.GET(TaxReg."Table ID",Field."No.") THEN ;
                                                                      IF ACTION::LookupOK = PAGE.RUNMODAL(PAGE::"Tax Register Field Select",Field) THEN BEGIN
                                                                        IF TaxReg."Table ID" = DATABASE::"Tax Register FA Entry" THEN BEGIN
                                                                          IF Field."No." <> TaxRegFAEntry.FIELDNO("Depreciation Amount") THEN
                                                                            TESTFIELD(Period,'');
                                                                          IF Field."No." <> TaxRegFAEntry.FIELDNO("Depreciation Bonus Amount") THEN
                                                                            TESTFIELD("Depr. Bonus % Filter",'');
                                                                          IF NOT (Field."No." IN [TaxRegFAEntry.FIELDNO("Acquisition Cost"),
                                                                                                  TaxRegFAEntry.FIELDNO("Valuation Changes")])
                                                                          THEN
                                                                            TESTFIELD("Tax Difference Code Filter",'');

                                                                          IF Field."No." = TaxRegFAEntry.FIELDNO("Acquis. Cost for Released FA") THEN BEGIN
                                                                            FASetup.GET;
                                                                            FASetup.TESTFIELD("Release Depr. Book");
                                                                            TaxRegSetup.GET;
                                                                            TaxRegSetup.TESTFIELD("Tax Depreciation Book");
                                                                            IF NOT ("Depr. Book Filter" IN
                                                                                    [FASetup."Release Depr. Book",TaxRegSetup."Tax Depreciation Book"])
                                                                            THEN
                                                                              FIELDERROR("Depr. Book Filter");
                                                                          END;
                                                                        END;
                                                                        "Sum Field No." := Field."No.";
                                                                        Expression := Field."Field Caption";
                                                                      END;
                                                                    END;
                                                                  END;
                                                                "Expression Type"::Link:
                                                                  BEGIN
                                                                    TESTFIELD("Link Tax Register No.");
                                                                    TaxReg.GET("Section Code","Link Tax Register No.");
                                                                    TaxRegTemplate.FILTERGROUP(2);
                                                                    TaxRegTemplate.SETRANGE("Section Code",TaxReg."Section Code");
                                                                    TaxRegTemplate.SETRANGE(Code,TaxReg."No.");
                                                                    TaxRegTemplate.FILTERGROUP(0);
                                                                    IF Expression <> '' THEN
                                                                      IF TaxRegTemplate.GET("Section Code",Expression) THEN ;
                                                                    IF ACTION::LookupOK = PAGE.RUNMODAL(0,TaxRegTemplate) THEN BEGIN
                                                                      TaxRegTemplate.TESTFIELD("Line Code");
                                                                      Expression := TaxRegTemplate."Line Code";
                                                                      IF Description = '' THEN
                                                                        Description := TaxRegTemplate.Description;
                                                                    END;
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Expression;
                                                              RUS=Выражение] }
    { 5   ;   ;Line Code           ;Code10        ;OnValidate=BEGIN
                                                                IF ("Line Code" <> xRec."Line Code") AND (xRec."Line Code" <> '') THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Line Code;
                                                              RUS=Код строки] }
    { 6   ;   ;Description         ;Text150       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 7   ;   ;Value               ;Decimal       ;CaptionML=[ENU=Value;
                                                              RUS=Значение] }
    { 8   ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              RUS=Фильтр по дате] }
    { 9   ;   ;Link Tax Register No.;Code10       ;TableRelation=IF (Expression Type=CONST(Link)) "Tax Register".No. WHERE (Section Code=FIELD(Section Code));
                                                   OnValidate=BEGIN
                                                                IF "Link Tax Register No." <> xRec."Link Tax Register No." THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;

                                                                  IF "Link Tax Register No." = '' THEN
                                                                    Expression := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Link Tax Register No.;
                                                              RUS=Ссылка на код налог. регистра] }
    { 10  ;   ;Sum Field No.       ;Integer       ;OnValidate=BEGIN
                                                                IF "Sum Field No." <> xRec."Sum Field No." THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sum Field No.;
                                                              RUS=Номер поля суммы] }
    { 11  ;   ;Link Line Code      ;Code10        ;OnValidate=BEGIN
                                                                IF "Link Line Code" <> xRec."Link Line Code" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Link Line Code;
                                                              RUS=Код строки ссылки] }
    { 12  ;   ;Rounding Precision  ;Decimal       ;OnValidate=BEGIN
                                                                IF "Rounding Precision" <> xRec."Rounding Precision" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Rounding Precision;
                                                              RUS=Точность округления];
                                                   DecimalPlaces=0: }
    { 13  ;   ;Section Code        ;Code10        ;TableRelation="Tax Register Section";
                                                   CaptionML=[ENU=Section Code;
                                                              RUS=Код секции];
                                                   NotBlank=Yes }
    { 14  ;   ;Dimensions Filters  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Tax Register Dim. Filter" WHERE (Section Code=FIELD(Section Code),
                                                                                                       Tax Register No.=FIELD(Code),
                                                                                                       Define=CONST(Template),
                                                                                                       Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Dimensions Filters;
                                                              RUS=Фильтры измерений];
                                                   Editable=No }
    { 15  ;   ;Norm Jurisdiction Code;Code10      ;TableRelation="Tax Register Norm Jurisdiction";
                                                   CaptionML=[ENU=Norm Jurisdiction Code;
                                                              RUS=Код нормы юрисдикции] }
    { 16  ;   ;G/L Corr. Dimensions Filters;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Tax Reg. G/L Corr. Dim. Filter" WHERE (Section Code=FIELD(Section Code),
                                                                                                             Tax Register No.=FIELD(Code),
                                                                                                             Line No.=FIELD(Line No.),
                                                                                                             Define=CONST(Template)));
                                                   CaptionML=[ENU=G/L Corr. Dimensions Filters;
                                                              RUS=Фильтры изм. по корресп.] }
    { 37  ;   ;Report Line Code    ;Text10        ;CaptionML=[ENU=Report Line Code;
                                                              RUS=Код строки отчета] }
    { 39  ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              RUS=Отступ] }
    { 40  ;   ;Bold                ;Boolean       ;CaptionML=[ENU=Bold;
                                                              RUS=Полужирный] }
    { 41  ;   ;Period              ;Code30        ;OnValidate=BEGIN
                                                                IF NOT ("Expression Type" IN ["Expression Type"::Term,"Expression Type"::SumField]) THEN
                                                                  IF Period <> '' THEN
                                                                    ERROR(Text2001,"Expression Type");
                                                                IF Period <> xRec.Period THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Period;
                                                              RUS=Период] }
    { 42  ;   ;Term Line Code      ;Code10        ;OnValidate=BEGIN
                                                                IF "Term Line Code" <> xRec."Term Line Code" THEN BEGIN
                                                                  CheckElementType;
                                                                  CheckSourcePay;
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                  TaxRegLineSetup.RESET;
                                                                  TaxRegLineSetup.SETRANGE("Section Code","Section Code");
                                                                  TaxRegLineSetup.SETRANGE("Tax Register No.","Link Tax Register No.");
                                                                  TaxRegLineSetup.SETRANGE("Line Code","Term Line Code");
                                                                  IF NOT TaxRegLineSetup.FINDFIRST THEN
                                                                    FIELDERROR("Term Line Code");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF ("Expression Type" <> "Expression Type"::SumField) OR
                                                                 ("Sum Field No." = 0) OR
                                                                 ("Link Tax Register No." = '')
                                                              THEN
                                                                EXIT;

                                                              TaxRegLineSetup.RESET;
                                                              TaxRegLineSetup.FILTERGROUP(2);
                                                              TaxRegLineSetup.SETRANGE("Section Code","Section Code");
                                                              TaxRegLineSetup.FILTERGROUP(0);
                                                              TaxRegLineSetup.SETRANGE("Tax Register No.","Link Tax Register No.");
                                                              IF ACTION::LookupOK = PAGE.RUNMODAL(0,TaxRegLineSetup) THEN BEGIN
                                                                TaxRegLineSetup.TESTFIELD("Tax Register No.","Link Tax Register No.");
                                                                TaxRegLineSetup.TESTFIELD("Line Code");
                                                                "Term Line Code" := TaxRegLineSetup."Line Code";
                                                                IF "Term Line Code" <> xRec."Term Line Code" THEN BEGIN
                                                                  "Element Type Totaling" := '';
                                                                  "Payroll Source Totaling" := '';
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Term Line Code;
                                                              RUS=Код строки термина] }
    { 43  ;   ;Depreciation Group  ;Code10        ;TableRelation=IF (Expression Type=CONST(SumField)) "Depreciation Group".Code;
                                                   OnValidate=BEGIN
                                                                IF "Depreciation Group" <> xRec."Depreciation Group" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Group;
                                                              RUS=Группа амортизации] }
    { 44  ;   ;Belonging to Manufacturing;Option  ;OnValidate=BEGIN
                                                                IF "Belonging to Manufacturing" <> xRec."Belonging to Manufacturing" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Belonging to Manufacturing;
                                                              RUS=Принадлежность к производству];
                                                   OptionCaptionML=[ENU=" ,Production,Nonproduction";
                                                                    RUS=" ,Производственное,Непроизводственное"];
                                                   OptionString=[ ,Production,Nonproduction] }
    { 45  ;   ;FA Type             ;Option        ;OnValidate=BEGIN
                                                                IF "FA Type" <> xRec."FA Type" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=FA Type;
                                                              RUS=Тип ОС];
                                                   OptionCaptionML=[ENU=" ,Fixed Assets,Intangible Assets";
                                                                    RUS=" ,ОС,НМА"];
                                                   OptionString=[ ,Fixed Assets,Intangible Assets] }
    { 51  ;   ;Org. Unit Code      ;Code10        ;TableRelation="Organizational Unit";
                                                   CaptionML=[ENU=Org. Unit Code;
                                                              RUS=Код подразделения] }
    { 52  ;   ;Element Type Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Element Type Filter;
                                                              RUS=Фильтр по типу элемента];
                                                   OptionCaptionML=[ENU=Wage,Bonus,Income Tax,Netto Salary,Tax Deduction,Deduction,Other,Funds,Reporting;
                                                                    RUS=Начисление,Премия,НДФЛ,Зарплата,Налоговый вычет,Удержание,Прочее,Фонды,Отчетность];
                                                   OptionString=Wage,Bonus,Income Tax,Netto Salary,Tax Deduction,Deduction,Other,Funds,Reporting;
                                                   Editable=No }
    { 53  ;   ;Payroll Source Filter;Option       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Payroll Source Filter;
                                                              RUS=Фильтр источника плат. ведомости];
                                                   OptionCaptionML=[ENU=" ,Cost,Profit,FSI,FOSI";
                                                                    RUS=" ,Себест.,Прибыль,ФСС,ФОМС"];
                                                   OptionString=[ ,Cost,Profit,FSI,FOSI];
                                                   Editable=No }
    { 54  ;   ;Element Type Totaling;Code80       ;OnValidate=BEGIN
                                                                IF "Element Type Totaling" <> '' THEN BEGIN
                                                                  TaxReg.GET("Section Code",Code);
                                                                  IF TaxReg."Table ID" <> DATABASE::"Tax Register PR Entry" THEN
                                                                    FIELDERROR("Element Type Totaling",
                                                                      STRSUBSTNO(Text21000902,PayrollLedgEntry.TABLECAPTION));
                                                                END;
                                                                TextErr := FormatElementTypeTotaling;
                                                              END;

                                                   CaptionML=[ENU=Element Type Totaling;
                                                              RUS=Суммирование по типу элемента] }
    { 55  ;   ;Payroll Source Totaling;Code80     ;OnValidate=BEGIN
                                                                IF "Payroll Source Totaling" <> '' THEN BEGIN
                                                                  TaxReg.GET("Section Code",Code);
                                                                  IF TaxReg."Table ID" <> DATABASE::"Tax Register PR Entry" THEN
                                                                    FIELDERROR("Payroll Source Totaling",
                                                                      STRSUBSTNO(Text21000902,PayrollLedgEntry.TABLECAPTION));
                                                                END;
                                                                TextErr := FormatSourcePayTotaling;
                                                              END;

                                                   CaptionML=[ENU=Payroll Source Totaling;
                                                              RUS=Суммир. по источнику плат. ведомости] }
    { 56  ;   ;Depr. Bonus % Filter;Code20        ;OnValidate=BEGIN
                                                                IF "Depr. Bonus % Filter" <> xRec."Depr. Bonus % Filter" THEN BEGIN
                                                                  TESTFIELD("Expression Type","Expression Type"::SumField);
                                                                  IF "Sum Field No." <> TaxRegFAEntry.FIELDNO("Depreciation Bonus Amount") THEN
                                                                    ERROR(Text2003,FIELDCAPTION(Expression),TaxRegFAEntry.FIELDCAPTION("Depreciation Bonus Amount"));
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Depr. Bonus % Filter;
                                                              RUS=Фильтр по амортизационной премии (%)] }
    { 57  ;   ;Tax Difference Code Filter;Code80  ;TableRelation="Tax Difference";
                                                   OnValidate=BEGIN
                                                                IF "Tax Difference Code Filter" <> xRec."Tax Difference Code Filter" THEN BEGIN
                                                                  TESTFIELD("Expression Type","Expression Type"::SumField);
                                                                  IF NOT ("Sum Field No." IN [TaxRegFAEntry.FIELDNO("Acquisition Cost"),
                                                                                              TaxRegFAEntry.FIELDNO("Valuation Changes")])
                                                                  THEN
                                                                    ERROR(
                                                                      Text2004,
                                                                      FIELDCAPTION(Expression),
                                                                      TaxRegFAEntry.FIELDCAPTION("Acquisition Cost"),
                                                                      TaxRegFAEntry.FIELDCAPTION("Valuation Changes"));

                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Tax Difference Code Filter;
                                                              RUS=Фильтр по коду налоговой разницы] }
    { 58  ;   ;Depr. Book Filter   ;Code80        ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                IF "Depr. Book Filter" <> xRec."Depr. Book Filter" THEN BEGIN
                                                                  FASetup.GET;
                                                                  FASetup.TESTFIELD("Release Depr. Book");
                                                                  TaxRegSetup.GET;
                                                                  TaxRegSetup.TESTFIELD("Tax Depreciation Book");
                                                                  TESTFIELD("Expression Type","Expression Type"::SumField);
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;

                                                                  IF ("Sum Field No." = TaxRegFAEntry.FIELDNO("Acquis. Cost for Released FA")) AND
                                                                     NOT ("Depr. Book Filter" IN [FASetup."Release Depr. Book",TaxRegSetup."Tax Depreciation Book"])
                                                                  THEN
                                                                    FIELDERROR(Expression);
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Depr. Book Filter;
                                                              RUS=Фильтр по книге амортизации] }
    { 59  ;   ;Result on Disposal  ;Option        ;OnValidate=BEGIN
                                                                IF "Result on Disposal" <> xRec."Result on Disposal" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                  IF "Result on Disposal" <> "Result on Disposal"::" " THEN BEGIN
                                                                    TaxReg.GET("Section Code",Code);
                                                                    TaxReg.TESTFIELD("Table ID",DATABASE::"Tax Register FA Entry");

                                                                    IF NOT ("Sum Field No." IN
                                                                            [TaxRegFAEntry.FIELDNO("Sales Gain/Loss"),TaxRegFAEntry.FIELDNO("Sold FA Qty")])
                                                                    THEN
                                                                      FIELDERROR(Expression);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Result on Disposal;
                                                              RUS=Результат реализации];
                                                   OptionCaptionML=[ENU=" ,Gain,Loss";
                                                                    RUS=" ,Прибыль,Убыток"];
                                                   OptionString=[ ,Gain,Loss] }
  }
  KEYS
  {
    {    ;Section Code,Code,Line No.              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FASetup@1210001 : Record 5603;
      TaxRegSetup@1210002 : Record 17236;
      TaxRegSection@1000 : Record 17207;
      TaxRegTerm@1002 : Record 17204;
      TaxReg@1003 : Record 17200;
      TaxRegLineSetup@1004 : Record 17201;
      TaxRegTemplate@1005 : Record 17202;
      Field@1006 : Record 2000000041;
      TaxRegGLEntry@1007 : Record 17209;
      TaxRegFAEntry@1011 : Record 17211;
      TaxRegDimFilter@1013 : Record 17218;
      TaxRegNormGroup@1015 : Record 17221;
      PayrollLedgEntry@1210003 : Record 17418;
      LookupMgt@1016 : Codeunit 17209;
      Text2001@1018 : TextConst 'ENU=Period must be empty if Expression Type is %1.;RUS=Период должен быть пустым, если тип выражения - %1.';
      Text21000902@1020 : TextConst 'ENU=cannot be set if register is not linked to %1.;RUS=невозможно задать, если регистр не связан с %1.';
      TextErr@1021 : Text[1024];
      Text2003@1022 : TextConst 'ENU=%1 must be %2.;RUS=%1 должно быть %2.';
      Text2004@1210000 : TextConst 'ENU=%1 must be %2 or %3.;RUS=%1 должно быть %2 или %3.';
      Text2005@1210004 : TextConst 'ENU=There is no data found within filter %2 for %1.;RUS=В фильтре %2 не найдены данные для %1.';

    PROCEDURE MakeFieldFilter@1(TaxRegTableNo@1000 : Integer) FilterText : Text[1024];
    BEGIN
      Field.RESET;
      Field.SETRANGE(TableNo,TaxRegTableNo);
      IF Field.FINDSET THEN BEGIN
        REPEAT
          IF TaxRegGLEntry.SetFieldFilter(Field."No.") THEN
            FilterText := STRSUBSTNO('%1|%2',FilterText,Field."No.");
        UNTIL Field.NEXT = 0;
        FilterText := DELCHR(FilterText,'<>','|');
      END;
    END;

    LOCAL PROCEDURE CheckElementType@9();
    BEGIN
      IF ("Term Line Code" <> '') AND ("Element Type Totaling" <> '') THEN BEGIN
        TaxRegLineSetup.RESET;
        TaxRegLineSetup.SETRANGE("Section Code","Section Code");
        TaxRegLineSetup.SETRANGE("Tax Register No.",Code);
        TaxRegLineSetup.SETRANGE("Line Code","Term Line Code");
        TaxRegLineSetup.FINDFIRST;
        IF NOT LookupMgt.MergeOptionLists(
             DATABASE::"Tax Register Template",FIELDNO("Element Type Filter"),
             TaxRegLineSetup."Element Type Totaling","Element Type Totaling",TextErr)
        THEN
          MESSAGE(Text2005,
            FIELDCAPTION("Element Type Totaling"),TaxRegLineSetup.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckSourcePay@10();
    BEGIN
      IF ("Term Line Code" <> '') AND ("Payroll Source Totaling" <> '') THEN BEGIN
        TaxRegLineSetup.RESET;
        TaxRegLineSetup.SETFILTER("Section Code","Section Code");
        TaxRegLineSetup.SETRANGE("Tax Register No.",Code);
        TaxRegLineSetup.SETRANGE("Line Code","Term Line Code");
        TaxRegLineSetup.FINDFIRST;
        IF NOT LookupMgt.MergeOptionLists(
             DATABASE::"Tax Register Template",FIELDNO("Payroll Source Filter"),
             TaxRegLineSetup."Payroll Source Totaling","Payroll Source Totaling",TextErr)
        THEN
          MESSAGE(Text2005,
            FIELDCAPTION("Payroll Source Totaling"),TaxRegLineSetup.TABLECAPTION);
      END;
    END;

    PROCEDURE FormatElementTypeTotaling@11() : Text[80];
    BEGIN
      EXIT(LookupMgt.FormatOptionTotaling(
          DATABASE::"Tax Register Template",FIELDNO("Element Type Filter"),"Element Type Totaling"));
    END;

    PROCEDURE FormatSourcePayTotaling@12() : Text[80];
    BEGIN
      EXIT(LookupMgt.FormatOptionTotaling(
          DATABASE::"Tax Register Template",FIELDNO("Payroll Source Filter"),"Payroll Source Totaling"));
    END;

    PROCEDURE LookupElementTypeTotaling@13(VAR Text@1000 : Text[1024]) : Boolean;
    BEGIN
      TaxReg.GET("Section Code",Code);
      IF TaxReg."Table ID" <> DATABASE::"Tax Register PR Entry" THEN
        FIELDERROR("Element Type Totaling",
          STRSUBSTNO(Text21000902,PayrollLedgEntry.TABLECAPTION));
      EXIT(LookupMgt.LookupOptionList(
          DATABASE::"Tax Register Template",FIELDNO("Element Type Filter"),Text));
    END;

    PROCEDURE LookupSourcePayTotaling@14(VAR Text@1000 : Text[1024]) : Boolean;
    BEGIN
      TaxReg.GET("Section Code",Code);
      IF TaxReg."Table ID" <> DATABASE::"Tax Register PR Entry" THEN
        FIELDERROR("Payroll Source Totaling",
          STRSUBSTNO(Text21000902,PayrollLedgEntry.TABLECAPTION));
      EXIT(LookupMgt.LookupOptionList(
          DATABASE::"Tax Register Template",FIELDNO("Payroll Source Filter"),Text));
    END;

    PROCEDURE DrillDownElementTypeTotaling@15();
    BEGIN
      TaxReg.GET("Section Code",Code);
      IF TaxReg."Table ID" <> DATABASE::"Tax Register PR Entry" THEN
        EXIT;
      LookupMgt.DrillDownOptionList(
        DATABASE::"Tax Register Template",FIELDNO("Element Type Filter"),"Element Type Totaling");
    END;

    PROCEDURE DrillDownSourcePayTotaling@16();
    BEGIN
      TaxReg.GET("Section Code",Code);
      IF TaxReg."Table ID" <> DATABASE::"Tax Register PR Entry" THEN
        EXIT;
      LookupMgt.DrillDownOptionList(
        DATABASE::"Tax Register Template",FIELDNO("Payroll Source Filter"),"Payroll Source Totaling");
    END;

    PROCEDURE AssistEditSourcePayTotaling@17();
    BEGIN
      IF "Term Line Code" = '' THEN
        TaxRegLineSetup.INIT
      ELSE BEGIN
        TaxRegLineSetup.RESET;
        TaxRegLineSetup.SETFILTER("Section Code","Section Code");
        TaxRegLineSetup.SETRANGE("Tax Register No.",Code);
        TaxRegLineSetup.SETRANGE("Line Code","Term Line Code");
        TaxRegLineSetup.FINDFIRST;
      END;
      IF NOT LookupMgt.MergeOptionLists(
           DATABASE::"Tax Register Template",FIELDNO("Payroll Source Filter"),
           TaxRegLineSetup."Payroll Source Totaling","Payroll Source Totaling",TextErr)
      THEN BEGIN
        MESSAGE(Text2005,
          FIELDCAPTION("Payroll Source Totaling"),TaxRegLineSetup.TABLECAPTION);
        TextErr := '1..0';
      END;
      LookupMgt.DrillDownOptionList(
        DATABASE::"Tax Register Template",FIELDNO("Payroll Source Filter"),TextErr);
    END;

    PROCEDURE AssistEditElementTypeTotaling@18();
    BEGIN
      IF "Term Line Code" = '' THEN
        TaxRegLineSetup.INIT
      ELSE BEGIN
        TaxRegLineSetup.RESET;
        TaxRegLineSetup.SETFILTER("Section Code","Section Code");
        TaxRegLineSetup.SETRANGE("Tax Register No.",Code);
        TaxRegLineSetup.SETRANGE("Line Code","Term Line Code");
        TaxRegLineSetup.FINDFIRST;
      END;
      IF NOT LookupMgt.MergeOptionLists(
           DATABASE::"Tax Register Template",FIELDNO("Element Type Filter"),
           TaxRegLineSetup."Element Type Totaling","Element Type Totaling",TextErr)
      THEN BEGIN
        MESSAGE(Text2005,
          FIELDCAPTION("Element Type Totaling"),TaxRegLineSetup.TABLECAPTION);
        TextErr := '1..0';
      END;
      LookupMgt.DrillDownOptionList(
        DATABASE::"Tax Register Template",FIELDNO("Element Type Filter"),TextErr);
    END;

    PROCEDURE GenerateProfile@19();
    VAR
      GenTemplateProfile@1000 : Record 17237;
      TaxRegAccumulation@1002 : Record 17208;
      TaxRegDimFilter@1003 : Record 17218;
    BEGIN
      IF GenTemplateProfile.GET(DATABASE::"Tax Register Template") THEN
        EXIT;

      GenTemplateProfile."Template Line Table No." := DATABASE::"Tax Register Template";
      GenTemplateProfile."Template Header Table No." := DATABASE::"Tax Register";
      GenTemplateProfile."Term Header Table No." := DATABASE::"Tax Register Term";
      GenTemplateProfile."Term Line Table No." := DATABASE::"Tax Register Term Formula";
      GenTemplateProfile."Dim. Filter Table No." := DATABASE::"Tax Register Dim. Filter";

      GenTemplateProfile."Section Code (Hdr)" := TaxReg.FIELDNO("Section Code");
      GenTemplateProfile."Code (Hdr)" := TaxReg.FIELDNO("No.");
      GenTemplateProfile."Check (Hdr)" := TaxReg.FIELDNO(Check);
      GenTemplateProfile."Level (Hdr)" := TaxReg.FIELDNO(Level);

      GenTemplateProfile."Section Code" := FIELDNO("Section Code");
      GenTemplateProfile.Code := FIELDNO(Code);
      GenTemplateProfile."Line No." := FIELDNO("Line No.");
      GenTemplateProfile."Expression Type" := FIELDNO("Expression Type");
      GenTemplateProfile.Expression := FIELDNO(Expression);
      GenTemplateProfile."Line Code (Line)" := FIELDNO("Line Code");
      GenTemplateProfile."Norm Jurisd. Code (Line)" := FIELDNO("Norm Jurisdiction Code");
      GenTemplateProfile."Link Code" := FIELDNO("Link Tax Register No.");
      GenTemplateProfile."Date Filter" := FIELDNO("Date Filter");
      GenTemplateProfile.Period := FIELDNO(Period);
      GenTemplateProfile.Description := FIELDNO(Description);
      GenTemplateProfile."Rounding Precision" := FIELDNO("Rounding Precision");

      GenTemplateProfile."Header Code (Link)" := TaxRegAccumulation.FIELDNO("Tax Register No.");
      GenTemplateProfile."Line Code (Link)" := TaxRegAccumulation.FIELDNO("Template Line Code");
      GenTemplateProfile."Value (Link)" := TaxRegAccumulation.FIELDNO(Amount);

      GenTemplateProfile."Section Code (Dim)" := TaxRegDimFilter.FIELDNO("Section Code");
      GenTemplateProfile."Tax Register No. (Dim)" := TaxRegDimFilter.FIELDNO("Tax Register No.");
      GenTemplateProfile."Define (Dim)" := TaxRegDimFilter.FIELDNO(Define);
      GenTemplateProfile."Line No. (Dim)" := TaxRegDimFilter.FIELDNO("Line No.");
      GenTemplateProfile."Dimension Code (Dim)" := TaxRegDimFilter.FIELDNO("Dimension Code");
      GenTemplateProfile."Dimension Value Filter (Dim)" := TaxRegDimFilter.FIELDNO("Dimension Value Filter");

      GenTemplateProfile.INSERT;
    END;

    PROCEDURE GetGLCorrDimFilter@1210004(DimCode@1210002 : Code[20];FilterGroup@1210000 : 'Debit,Credit') DimFilter : Text[250];
    VAR
      TaxRegGLCorrDimFilter@1210003 : Record 17244;
    BEGIN
      IF TaxRegGLCorrDimFilter.GET("Section Code",Code,0,"Line No.",FilterGroup,DimCode) THEN
        DimFilter := TaxRegGLCorrDimFilter."Dimension Value Filter";
    END;

    PROCEDURE InitFADeprBookFilter@1210000();
    VAR
      TaxRegisterName@1210001 : Record 17200;
      TaxRegisterSetup@1210000 : Record 17236;
    BEGIN
      TaxRegisterName.GET("Section Code",Code);
      IF TaxRegisterName."Table ID" = DATABASE::"Tax Register FA Entry" THEN BEGIN
        TaxRegisterSetup.GET;
        "Depr. Book Filter" := TaxRegisterSetup."Tax Depreciation Book";
      END;
    END;

    BEGIN
    END.
  }
}

