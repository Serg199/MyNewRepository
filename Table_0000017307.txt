OBJECT Table 17307 Tax Calc. Section
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Status := Status::Blocked;
               VALIDATE("Page ID");
             END;

    OnDelete=BEGIN
               IF Status = Status::Closed THEN
                 ERROR(Text1009,Status);

               SectionReset;
               TaxCalcHeader.RESET;
               TaxCalcHeader.SETRANGE("Section Code",Code);
               TaxCalcHeader.DELETEALL(TRUE);

               TaxCalcTerm.SETRANGE("Section Code",Code);
               TaxCalcTerm.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Tax Calc. Section;
               RUS=Секция налогового расчета];
    LookupPageID=Page17309;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              RUS=Код];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 6   ;   ;Page ID             ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Page));
                                                   OnValidate=BEGIN
                                                                IF "Page ID" = 0 THEN
                                                                  VALIDATE(Type);
                                                                CALCFIELDS("Page Name");
                                                              END;

                                                   CaptionML=[ENU=Page ID;
                                                              RUS=Код страницы] }
    { 9   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                CASE Type OF
                                                                  Type::Standard:
                                                                    "Page ID" := PAGE::"Tax Calc. Accumulation";
                                                                  ELSE
                                                                    ERROR('');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              RUS=Тип];
                                                   OptionCaptionML=[ENU=Standard;
                                                                    RUS=Стандарт];
                                                   OptionString=Standard;
                                                   Editable=No }
    { 10  ;   ;Norm Jurisdiction Code;Code10      ;TableRelation="Tax Register Norm Jurisdiction".Code;
                                                   CaptionML=[ENU=Norm Jurisdiction Code;
                                                              RUS=Код нормы юрисдикции] }
    { 11  ;   ;Dimension 1 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                CheckUseDimCode(1,xRec."Dimension 1 Code","Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Dimension 1 Code;
                                                              RUS=Код измерения 1] }
    { 12  ;   ;Dimension 2 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                CheckUseDimCode(2,xRec."Dimension 2 Code","Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Dimension 2 Code;
                                                              RUS=Код измерения 2] }
    { 13  ;   ;Dimension 3 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                CheckUseDimCode(3,xRec."Dimension 3 Code","Dimension 3 Code");
                                                              END;

                                                   CaptionML=[ENU=Dimension 3 Code;
                                                              RUS=Код измерения 3] }
    { 14  ;   ;Dimension 4 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                CheckUseDimCode(4,xRec."Dimension 4 Code","Dimension 4 Code");
                                                              END;

                                                   CaptionML=[ENU=Dimension 4 Code;
                                                              RUS=Код измерения 4] }
    { 16  ;   ;Page Name           ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Page),
                                                                                                                Object ID=FIELD(Page ID)));
                                                   CaptionML=[ENU=Page Name;
                                                              RUS=Название страницы];
                                                   Editable=No }
    { 17  ;   ;Last Register No.   ;Code10        ;CaptionML=[ENU=Last Register No.;
                                                              RUS=Посл. номер регистра];
                                                   Editable=No }
    { 18  ;   ;Last Date Filter    ;Text30        ;CaptionML=[ENU=Last Date Filter;
                                                              RUS=Фильтр по последней дате];
                                                   Editable=No }
    { 30  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Blocked);
                                                                IF NOT CONFIRM(Text1002,FALSE) THEN
                                                                  ERROR('');
                                                                IF "Starting Date" <> 0D THEN
                                                                  "Starting Date" := CALCDATE('<-CM>',"Starting Date");
                                                                SectionReset;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              RUS=Дата начала] }
    { 31  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                IF "Ending Date" = xRec."Ending Date" THEN
                                                                  EXIT;
                                                                IF "Ending Date" <> 0D THEN BEGIN
                                                                  IF Status > Status::Blocked THEN
                                                                    ERROR(Text1005,Status);
                                                                  TESTFIELD("Starting Date");
                                                                  "Ending Date" := CALCDATE('<CM>',"Ending Date");
                                                                  IF ("Ending Date" <> xRec."Ending Date") AND ("Ending Date" < "Starting Date") THEN
                                                                    ERROR(Text1004,FIELDCAPTION("Ending Date"),FIELDCAPTION("Starting Date"));
                                                                  IF ("Ending Date" <> xRec."Ending Date") AND ("Ending Date" < LastDateEntries) THEN
                                                                    ERROR(Text1004,FIELDCAPTION("Ending Date"),LastDateEntries);
                                                                  IF CALCDATE('<CY>',"Ending Date") <> CALCDATE('<CY>',"Starting Date") THEN
                                                                    ERROR(Text1010,FIELDCAPTION("Ending Date"),FIELDCAPTION("Starting Date"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              RUS=Дата окончания] }
    { 32  ;   ;Last Date Updated   ;Date          ;CaptionML=[ENU=Last Date Updated;
                                                              RUS=Дата посл. обновления];
                                                   Editable=No }
    { 33  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF Status <> Status::Blocked THEN
                                                                  TESTFIELD("Starting Date");

                                                                CASE Status OF
                                                                  Status::Statement:
                                                                    BEGIN
                                                                      IF NOT CONFIRM(Text1002,FALSE) THEN
                                                                        ERROR('');

                                                                      SectionReset;
                                                                    END;
                                                                  Status::Closed:
                                                                    BEGIN
                                                                      TESTFIELD("Ending Date");
                                                                      IF xRec.Status <> xRec.Status::Statement THEN
                                                                        ERROR(Text1006,FIELDCAPTION(Status),Status);
                                                                      IF TaxCalcMgt.GetNextAvailableBeginDate(Code,DATABASE::"Tax Calc. Accumulation",TRUE) <> 0D THEN
                                                                        ERROR(Text1006,FIELDCAPTION(Status),Status);
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Open,Statement,Blocked,Closed;
                                                                    RUS=Открыт,Отчет,Заблокирован,Закрыт];
                                                   OptionString=Open,Statement,Blocked,Closed }
    { 34  ;   ;No G/L Entries Date ;Date          ;CaptionML=[ENU=No G/L Entries Date;
                                                              RUS=Дата отсутствия операций ГК];
                                                   Editable=No }
    { 36  ;   ;No Item Entries Date;Date          ;CaptionML=[ENU=No Item Entries Date;
                                                              RUS=Дата отсутствия операций по товару];
                                                   Editable=No }
    { 37  ;   ;No FA Entries Date  ;Date          ;CaptionML=[ENU=No FA Entries Date;
                                                              RUS=Дата отсутствия операций ОС];
                                                   Editable=No }
    { 40  ;   ;Last G/L Entries Date;Date         ;OnValidate=BEGIN
                                                                "Last Date Updated" := TODAY;
                                                              END;

                                                   CaptionML=[ENU=Last G/L Entries Date;
                                                              RUS=Посл. дата операций ГК];
                                                   Editable=No }
    { 42  ;   ;Last Item Entries Date;Date        ;OnValidate=BEGIN
                                                                "Last Date Updated" := TODAY;
                                                              END;

                                                   CaptionML=[ENU=Last Item Entries Date;
                                                              RUS=Посл. дата операций по товару];
                                                   Editable=No }
    { 43  ;   ;Last FA Entries Date;Date          ;OnValidate=BEGIN
                                                                "Last Date Updated" := TODAY;
                                                              END;

                                                   CaptionML=[ENU=Last FA Entries Date;
                                                              RUS=Посл. дата операций ОС];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Description,Status                  }
  }
  CODE
  {
    VAR
      TaxCalcHeader@1000 : Record 17308;
      Text1001@1001 : TextConst 'ENU=You cannot use the same dimension twice in the same %1.;RUS=Одно измерение не может быть использовано дважды в одной %1.';
      Text1002@1002 : TextConst 'ENU=If you change the section declaration, the entries will be deleted.\You will have to update again.\\Do you want to change the section declaration?;RUS=При изменении объявления разделов операции будут удалены.\Потребуется повторное обновление.\\Изменить объявления разделов?';
      Text1004@1004 : TextConst 'ENU=%1 cannot be less then %2;RUS=%1 не может быть меньше %2';
      Text1005@1005 : TextConst 'ENU=You cannot change Engind Date if Status is %1.;RUS=Невозможно изменить дату окончания, если статус - %1.';
      Text1006@1006 : TextConst 'ENU=%1 cannot be set %2 if not ending build registers.;RUS=%1 невозможно установить равным %2, если не закончено формирование регистров.';
      Text1008@1008 : TextConst 'ENU=You cannot change the value if Status is %1.;RUS=Невозможно изменить значение, если статус - %1.';
      Text1009@1009 : TextConst 'ENU=You cannot delete section if Status is %1.;RUS=Невозможно удалить секцию, если статус - %1.';
      TaxCalcTerm@1011 : Record 17311;
      TaxCalcMgt@1012 : Codeunit 17303;
      Text1010@1013 : TextConst 'ENU=%1 and %2 are in different year;RUS=%1 и %2 принадлежат разным календарным годам';
      FileMgt@1210005 : Codeunit 419;
      FileName@1210000 : Text[250];
      Text1015@1210003 : TextConst 'ENU=Select a filename to export settings to.;RUS=Выберите файл для экспорта настроек.';

    LOCAL PROCEDURE CheckUseDimCode@1(FieldNumber@1000 : Integer;xRecDimCode@1001 : Code[20];DimCode@1002 : Code[20]);
    BEGIN
      IF xRecDimCode = DimCode THEN
        EXIT;
      IF Status <> Status::Open THEN
        ERROR(Text1008,Status);

      IF DimCode <> '' THEN
        IF ((1 <> FieldNumber) AND (DimCode = "Dimension 1 Code")) OR
           ((2 <> FieldNumber) AND (DimCode = "Dimension 2 Code")) OR
           ((3 <> FieldNumber) AND (DimCode = "Dimension 3 Code")) OR
           ((4 <> FieldNumber) AND (DimCode = "Dimension 4 Code"))
        THEN
          ERROR(Text1001,TABLECAPTION);

      IF xRecDimCode <> '' THEN
        CheckChange;
    END;

    PROCEDURE SectionReset@2();
    VAR
      TaxCalcGLCorrEntry@1000 : Record 17319;
      TaxCalcAccumulation@1001 : Record 17314;
      TaxCalcGLEntry@1002 : Record 17315;
      TaxCalcItemEntry@1003 : Record 17317;
      TaxCalcFAEntry@1004 : Record 17318;
    BEGIN
      TaxCalcAccumulation.SETRANGE("Section Code",Code);
      TaxCalcAccumulation.DELETEALL(TRUE);

      TaxCalcGLEntry.SETRANGE("Section Code",Code);
      TaxCalcGLEntry.DELETEALL(TRUE);

      TaxCalcFAEntry.SETRANGE("Section Code",Code);
      TaxCalcFAEntry.DELETEALL(TRUE);

      TaxCalcItemEntry.SETRANGE("Section Code",Code);
      TaxCalcItemEntry.DELETEALL(TRUE);

      TaxCalcGLCorrEntry.SETRANGE("Section Code",Code);
      TaxCalcGLCorrEntry.DELETEALL(TRUE);

      "Last Date Updated" := 0D;
      "No G/L Entries Date" := 0D;
      "No Item Entries Date" := 0D;
      "No FA Entries Date" := 0D;
      "Last G/L Entries Date" := 0D;
      "Last Item Entries Date" := 0D;
      "Last FA Entries Date" := 0D;
    END;

    PROCEDURE ValidateChange@3();
    BEGIN
      IF LastDateEntries <> 0D THEN BEGIN
        IF NOT CONFIRM(Text1002,FALSE) THEN
          ERROR('');
        SectionReset;
        Status := Status::Blocked;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CheckChange@4();
    BEGIN
      IF LastDateEntries <> 0D THEN BEGIN
        IF NOT CONFIRM(Text1002,FALSE) THEN
          ERROR('');
        SectionReset;
      END;
    END;

    PROCEDURE LastDateEntries@5() LastDate : Date;
    BEGIN
      IF (LastDate = 0D) OR (LastDate > "Last G/L Entries Date") AND ("Last G/L Entries Date" <> 0D) THEN
        LastDate := "Last G/L Entries Date";

      IF (LastDate = 0D) OR ((LastDate > "Last Item Entries Date") AND ("Last Item Entries Date" <> 0D)) THEN
        LastDate := "Last Item Entries Date";

      IF (LastDate = 0D) OR ((LastDate > "Last FA Entries Date") AND ("Last FA Entries Date" <> 0D)) THEN
        LastDate := "Last FA Entries Date";
    END;

    PROCEDURE ExportSettings@1210002(VAR TaxCalcSection@1210000 : Record 17307);
    VAR
      TaxDiffRegisters@1210001 : XMLport 17300;
      OutputFile@1210002 : File;
      OutStr@1210003 : OutStream;
    BEGIN
      FileName := FileMgt.ServerTempFileName('xml');
      OutputFile.CREATE(FileName);
      OutputFile.CREATEOUTSTREAM(OutStr);
      TaxDiffRegisters.SETDESTINATION(OutStr);
      TaxDiffRegisters.SetData(TaxCalcSection);
      TaxDiffRegisters.EXPORT;
      OutputFile.CLOSE;
      CLEAR(OutStr);
      DOWNLOAD(FileName,Text1015,'','',FileName);
    END;

    PROCEDURE ImportSettings@1210010(FileName2@1210000 : Text[250]);
    VAR
      TaxDiffRegisters@1210001 : XMLport 17300;
      InStr@1210003 : InStream;
      ImportFile@1210002 : File;
    BEGIN
      ImportFile.OPEN(FileName2);
      ImportFile.CREATEINSTREAM(InStr);

      TaxDiffRegisters.SETSOURCE(InStr);
      TaxDiffRegisters.IMPORT;
      TaxDiffRegisters.ImportData;
      CLEAR(InStr);
      ImportFile.CLOSE;
    END;

    PROCEDURE PromptImportSettings@1210000();
    BEGIN
      ImportSettings('');
    END;

    BEGIN
    END.
  }
}

