OBJECT Report 14900 Import Currency Exch. Rate
{
  OBJECT-PROPERTIES
  {
    Date=25.04.17;
    Time=12:51:53;
    Modified=Yes;
    Version List=NAVRU10.00.00.15052;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Currency Exch. Rate;
               RUS=Импорт курсов валют];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF StartDate = 0D THEN
                    ERROR(Text008);

                  IF EndDate = 0D THEN
                    ERROR(Text009);

                  IF EndDate < StartDate THEN
                    ERROR(Text007);
                END;

  }
  DATASET
  {
    { 9857;    ;DataItem;                    ;
               DataItemTable=Table2000000007;
               DataItemTableView=SORTING(Period Type,Period Start)
                                 WHERE(Period Type=CONST(Date));
               OnPreDataItem=BEGIN
                               SETRANGE("Period Start",StartDate,EndDate);

                               ProcessingDaysQty := EndDate - StartDate + 1;
                               Window.OPEN(Text000);
                             END;

               OnAfterGetRecord=BEGIN
                                  DaysCounter += 1;
                                  Window.UPDATE(1,FORMAT("Period Start"));
                                  Window.UPDATE(2,ROUND(DaysCounter / ProcessingDaysQty * 10000,1));

                                  LoadXML("Period Start",XMLRootNode,DateLoaded,FALSE);
                                  IF DateLoaded <> "Period Start" THEN
                                    CurrReport.SKIP;

                                  ImportExchRates;
                                END;
                                 }

    { 8031;    ;DataItem;MonthlyRates        ;
               DataItemTable=Table2000000007;
               DataItemTableView=SORTING(Period Type,Period Start)
                                 WHERE(Period Type=CONST(Month));
               OnPreDataItem=BEGIN
                               SETRANGE("Period Start",CALCDATE('<-CM>',StartDate),EndDate);

                               ProcessingMonthesQty := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  MonthesCounter += 1;
                                  Window.UPDATE(1,FORMAT("Period Start"));
                                  Window.UPDATE(3,ROUND(MonthesCounter / ProcessingMonthesQty * 10000,1));

                                  LoadXML("Period Start",XMLRootNode,DateLoaded,TRUE);

                                  ImportExchRates;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   StartDate := TODAY;
                   EndDate := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры] }

      { 1210000;2;Field     ;
                  CaptionML=[ENU=Start Date;
                             RUS=Дата начала];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=StartDate }

      { 1210002;2;Field     ;
                  CaptionML=[ENU=End Date;
                             RUS=Дата окончания];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Currency@1210024 : Record 4;
      CompanyInformation@1210023 : Record 79;
      CurrencyExchangeRate@1210022 : Record 330;
      Company@1210021 : Record 2000000006;
      XMLRootNode@1210121 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Window@1210004 : Dialog;
      StartDate@1210000 : Date;
      EndDate@1210001 : Date;
      DateLoaded@1210020 : Date;
      ExchRateAmount@1210019 : Decimal;
      RelationalExchRateAmount@1210018 : Decimal;
      ProcessingDaysQty@1210003 : Integer;
      DaysCounter@1210002 : Integer;
      ProcessingMonthesQty@1210026 : Integer;
      MonthesCounter@1210025 : Integer;
      Text000@1210005 : TextConst 'ENU=Importing Currency Exchange Rates #1######\Daily Exchange Rates    @2@@@@@@@@@@@@@@@@\Monthly Exchange Rates  @3@@@@@@@@@@@@@@@@;RUS=Импорт курсов валют #1######\Ежедневные курсы    @2@@@@@@@@@@@@@@@@\Ежемесячные курсы  @3@@@@@@@@@@@@@@@@';
      Text002@1210008 : TextConst 'ENU=Unexpected XML structure.;RUS=Непредвиденная структура XML.';
      Text004@1210011 : TextConst 'ENU=Unable to find %1 attribute.;RUS=Не удается найти атрибут %1.';
      Text005@1210012 : TextConst 'ENU=Unexpected %1 attribute format.;RUS=Непредвиденный формат атрибута %1.';
      Text006@1210013 : TextConst 'ENU=Unexpected %1 node value.;RUS=Непредвиденное значение узла %1.';
      Text007@1210014 : TextConst 'ENU=Start Date cannot be greater than End Date.;RUS=Дата начала не может превышать дату окончания.';
      Text008@1210015 : TextConst 'ENU=You must specify the Start Date.;RUS=Необходимо указать начальную дату.';
      Text009@1210016 : TextConst 'ENU=You must specify the End Date.;RUS=Необходимо указать конечную дату.';

    PROCEDURE LoadXML@1210019(DateReq@1210000 : Date;VAR XMLNode@1210100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR DateLoaded@1210004 : Date;MonthlyRates@1210006 : Boolean);
    VAR
      XMLDOMManagement@1210005 : Codeunit 6224;
      XMLNamedNodeMap@1210002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLNodeDate@1210003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      MonthlyURLAppendix@1210007 : Text[30];
    BEGIN
      IF MonthlyRates THEN
        MonthlyURLAppendix := '&d=1';

      XMLDOMManagement.LoadXMLNodeFromUri(
        'http://www.cbr.ru/scripts/XML_daily.asp?date_req=' + FORMAT(DateReq,0,'<Day,2>.<Month,2>.<Year4>') + MonthlyURLAppendix,
        XMLNode);

      IF XMLNode.Name <> 'ValCurs' THEN
        ERROR(Text002);

      XMLNamedNodeMap := XMLNode.Attributes;
      XMLNodeDate := XMLNamedNodeMap.GetNamedItem('Date');
      IF ISNULL(XMLNodeDate) THEN
        ERROR(Text004,'Date');

      IF NOT EvaluateDate(DateLoaded,FORMAT(XMLNodeDate.Value)) THEN
        ERROR(Text005,'Date');
    END;

    PROCEDURE GetExchRateParameters@1210023(CurrencyCode@1210000 : Code[10];VAR ExchRateAmount@1210001 : Decimal;VAR RelationalExchRateAmount@1210002 : Decimal;VAR XMLNode@1210003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      XMLNodeList@1210004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNodeExchRate@1210006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeCurrencyCode@1210007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeExchRateAmount@1210008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeRelExchRateAmount@1210009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1210005 : Integer;
    BEGIN
      XMLNodeList := XMLNode.ChildNodes;
      IF NOT ISNULL(XMLNodeList) THEN
        FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
          XMLNodeExchRate := XMLNodeList.Item(i);
          IF FindNode(XMLNodeExchRate,'CharCode',XMLNodeCurrencyCode) THEN
            IF FORMAT(XMLNodeCurrencyCode.InnerText) = CurrencyCode THEN BEGIN
              IF FindNode(XMLNodeExchRate,'Nominal',XMLNodeExchRateAmount) THEN
                IF NOT EVALUATE(ExchRateAmount,
                     ConvertToXMLFormat(FORMAT(XMLNodeExchRateAmount.InnerText)),9) THEN
                  ERROR(Text006,'Nominal');

              IF FindNode(XMLNodeExchRate,'Value',XMLNodeRelExchRateAmount) THEN
                IF NOT EVALUATE(RelationalExchRateAmount,
                     ConvertToXMLFormat(FORMAT(XMLNodeRelExchRateAmount.InnerText)),9) THEN
                  ERROR(Text006,'Value');
              EXIT(TRUE);
            END;
        END;

      EXIT(FALSE);
    END;

    PROCEDURE ConvertToXMLFormat@1210000(Str@1210000 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(CONVERTSTR(Str,',','.'));
    END;

    PROCEDURE FindNode@3(VAR XMLRootNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text[250];VAR FoundXMLNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT(FALSE);

      FoundXMLNode := XMLRootNode.SelectSingleNode(NodePath);

      IF ISNULL(FoundXMLNode) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE EvaluateDate@1210001(VAR DateLoaded@1210004 : Date;Str@1210000 : Text[30]) : Boolean;
    VAR
      Day@1210001 : Integer;
      Month@1210002 : Integer;
      Year@1210003 : Integer;
    BEGIN
      IF NOT EVALUATE(Day,COPYSTR(Str,1,2)) THEN
        EXIT(FALSE);

      IF NOT EVALUATE(Month,COPYSTR(Str,4,2)) THEN
        EXIT(FALSE);

      IF NOT EVALUATE(Year,COPYSTR(Str,7)) THEN
        EXIT(FALSE);

      DateLoaded := DMY2DATE(Day,Month,Year);

      EXIT(TRUE);
    END;

    PROCEDURE ImportExchRates@1210003();
    BEGIN
      IF Company.FINDSET THEN
        REPEAT
          CompanyInformation.CHANGECOMPANY(Company.Name);
          CompanyInformation.GET;
          IF CompanyInformation."Import Curr. Exch. Rates" THEN BEGIN
            Currency.CHANGECOMPANY(Company.Name);
            Currency.SETRANGE(Import,TRUE);
            IF Currency.FINDSET THEN
              REPEAT
                Currency.TESTFIELD("RU Bank Code");

                IF GetExchRateParameters(Currency."RU Bank Code",ExchRateAmount,RelationalExchRateAmount,XMLRootNode) THEN BEGIN
                  CurrencyExchangeRate.CHANGECOMPANY(Company.Name);
                  IF NOT CurrencyExchangeRate.GET(Currency.Code,DateLoaded) THEN BEGIN
                    CurrencyExchangeRate.INIT;
                    CurrencyExchangeRate."Currency Code" := Currency.Code;
                    CurrencyExchangeRate."Starting Date" := DateLoaded;
                    CurrencyExchangeRate."Exchange Rate Amount" := ExchRateAmount;
                    CurrencyExchangeRate."Adjustment Exch. Rate Amount" := ExchRateAmount;
                    CurrencyExchangeRate."Relational Exch. Rate Amount" := RelationalExchRateAmount;
                    CurrencyExchangeRate."Relational Adjmt Exch Rate Amt" := RelationalExchRateAmount;
                    CurrencyExchangeRate.INSERT;
                  END ELSE BEGIN
                    IF CompanyInformation.IsNeedToReplaceCurrExchRate(Currency.Code,DateLoaded,Company.Name) THEN BEGIN
                      CurrencyExchangeRate."Exchange Rate Amount" := ExchRateAmount;
                      CurrencyExchangeRate."Adjustment Exch. Rate Amount" := ExchRateAmount;
                      CurrencyExchangeRate."Relational Exch. Rate Amount" := RelationalExchRateAmount;
                      CurrencyExchangeRate."Relational Adjmt Exch Rate Amt" := RelationalExchRateAmount;
                      CurrencyExchangeRate.MODIFY;
                    END;
                  END;
                END;
              UNTIL Currency.NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

