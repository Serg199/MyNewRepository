OBJECT Codeunit 2 Company-Initialize
{
  OBJECT-PROPERTIES
  {
    Date=30.03.17;
    Time=15:30:47;
    Modified=Yes;
    Version List=NAVW110.00.00.15052,NAVRU10.00.00.15052,NOS-26;
  }
  PROPERTIES
  {
    Permissions=TableData 314=i,
                TableData 315=i,
                TableData 843=i,
                TableData 870=i,
                TableData 905=i,
                TableData 1006=i,
                TableData 5218=i,
                TableData 5603=i;
    OnRun=VAR
            BankPmtApplRule@1003 : Record 1252;
            TransformationRule@1005 : Record 1237;
            ApplicationLaunchMgt@1001 : Codeunit 403;
            AddOnIntegrMgt@1000 : Codeunit 5403;
            WorkflowSetup@1004 : Codeunit 1502;
            Window@1002 : Dialog;
          BEGIN
            Window.OPEN(Text000);

            InitSetupTables;
            AddOnIntegrMgt.InitMfgSetup;
            InitSourceCodeSetup;
            InitStandardTexts;
            InitReportSelection;
            InitJobWIPMethods;
            InitBankExportImportSetup;
            InitBankDataConversionPmtType;
            InitBankClearingStandard;
            InitBankDataConvServiceSetup;
            InitDocExchServiceSetup;
            BankPmtApplRule.InsertDefaultMatchingRules;
            ApplicationLaunchMgt.InsertStyleSheets;
            InsertClientAddIns;
            InitVATRegNrValidationSetup;
            WorkflowSetup.InitWorkflow;
            TransformationRule.CreateDefaultTransformations;
            InitElectronicFormats;

            OnCompanyInitialize;

            Window.CLOSE;

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Initializing company...;RUS=Инициализация организации...';
      SEPACTCodeTxt@1076 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPACT;RUS=SEPACT';
      SEPACTNameTxt@1083 : TextConst 'ENU=SEPA Credit Transfer;RUS=Кредитовый перевод SEPA';
      SEPADDCodeTxt@1033 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPADD;RUS=SEPADD';
      SEPADDNameTxt@1020 : TextConst 'ENU=SEPA Direct Debit;RUS=Прямое дебетование SEPA';
      Text001@1001 : TextConst 'ENU=SALES;RUS=ПРОДАЖИ';
      Text002@1002 : TextConst 'ENU=Sales;RUS=Продажи';
      Text003@1003 : TextConst 'ENU=PURCHASES;RUS=ПОКУПКИ';
      Text004@1004 : TextConst 'ENU=Purchases;RUS=Покупки';
      Text005@1005 : TextConst 'ENU=DELETE;RUS=УДАЛЕНИЕ';
      Text006@1006 : TextConst 'ENU=INVTPCOST;RUS=УЧЕТЗАП';
      Text007@1007 : TextConst 'ENU=EXCHRATADJ;RUS=КОРВАЛКУР';
      Text010@1010 : TextConst 'ENU=CLSINCOME;RUS=ЗАКРСЧЕТОВ';
      Text011@1011 : TextConst 'ENU=CONSOLID;RUS=КОНСОЛИД';
      Text012@1012 : TextConst 'ENU=Consolidation;RUS=Консолидация';
      Text013@1013 : TextConst 'ENU=GENJNL;RUS=ФИНЖУР';
      Text014@1014 : TextConst 'ENU=SALESJNL;RUS=ЖУРНПРОД';
      Text015@1015 : TextConst 'ENU=PURCHJNL;RUS=ПОКУПЖУР';
      Text016@1016 : TextConst 'ENU=CASHRECJNL;RUS=КЛИЕНТЖУР';
      Text017@1017 : TextConst 'ENU=PAYMENTJNL;RUS=ЖУРНПЛАТ';
      Text018@1018 : TextConst 'ENU=ITEMJNL;RUS=ЖУРТОВ';
      Text020@1019 : TextConst 'ENU=PHYSINVJNL;RUS=ИНВЕНТ';
      Text022@1021 : TextConst 'ENU=RESJNL;RUS=РЕСЖУР';
      Text023@1022 : TextConst 'ENU=JOBJNL;RUS=РАБЖУР';
      Text024@1023 : TextConst 'ENU=SALESAPPL;RUS=ПРИМПРОД';
      Text025@1024 : TextConst 'ENU=Sales Entry Application;RUS=Применение операций продажи';
      PaymentReconJnlTok@1169 : TextConst '@@@=Payment Reconciliation Journal Code;ENU=PAYMTRECON;RUS=ВЫВЕРКПЛАТ';
      Text026@1025 : TextConst 'ENU=PURCHAPPL;RUS=ПОКУППРИМ';
      Text027@1026 : TextConst 'ENU=Purchase Entry Application;RUS=Применение операций покупки';
      Text028@1027 : TextConst 'ENU=VATSTMT;RUS=НДСОТЧЕТ';
      Text029@1028 : TextConst 'ENU=COMPRGL;RUS=КОМПРФИН';
      Text030@1029 : TextConst 'ENU=COMPRVAT;RUS=КОМПРНДС';
      Text031@1030 : TextConst 'ENU=COMPRCUST;RUS=КОМПРКЛН';
      Text032@1031 : TextConst 'ENU=COMPRVEND;RUS=КОМПРПОС';
      Text035@1034 : TextConst 'ENU=COMPRRES;RUS=КОМПРРЕС';
      Text036@1035 : TextConst 'ENU=COMPRJOB;RUS=КОМПРРАБ';
      Text037@1036 : TextConst 'ENU=COMPRBANK;RUS=КОМПРБАНК';
      Text038@1037 : TextConst 'ENU=COMPRCHECK;RUS=КОМПРПЛАТ';
      Text039@1038 : TextConst 'ENU=FINVOIDCHK;RUS=ФИНОТМПЛАТ';
      Text040@1039 : TextConst 'ENU=Financially Voided Check;RUS=Финансово отмененный платеж. документ';
      Text041@1040 : TextConst 'ENU=REMINDER;RUS=НАПОМИН.';
      Text042@1041 : TextConst 'ENU=Reminder;RUS=Напоминание';
      Text043@1042 : TextConst 'ENU=FINCHRG;RUS=ПРОЦНОТА';
      Text044@1043 : TextConst 'ENU=Finance Charge Memo;RUS=Процент-нота';
      Text045@1044 : TextConst 'ENU=FAGLJNL;RUS=ОСЖУРГК';
      Text046@1045 : TextConst 'ENU=FAJNL;RUS=ОСЖУР';
      Text047@1046 : TextConst 'ENU=INSJNL;RUS=СТРЖУР';
      Text048@1047 : TextConst 'ENU=COMPRFA;RUS=КОМПРОС';
      Text049@1048 : TextConst 'ENU=COMPRMAINT;RUS=КОМПРОБС';
      Text050@1049 : TextConst 'ENU=COMPRINS;RUS=КОМПРСТР';
      Text051@1050 : TextConst 'ENU=ADJADDCURR;RUS=КОРРДОПВАЛ';
      Text052@1051 : TextConst 'ENU=MD;RUS=МД';
      Text053@1052 : TextConst 'ENU=Monthly Depreciation;RUS=Ежемесячная амортизация';
      Text054@1053 : TextConst 'ENU=SC;RUS=ПП';
      Text055@1054 : TextConst 'ENU=Shipping Charge;RUS=Расходы по отгрузке';
      Text056@1055 : TextConst 'ENU=SUC;RUS=ППК';
      Text057@1056 : TextConst 'ENU=Sale under Contract;RUS=Продажа по контракту';
      Text058@1057 : TextConst 'ENU=TE;RUS=КР';
      Text059@1058 : TextConst 'ENU=Travel Expenses;RUS=Командиров. расх.';
      Text063@1062 : TextConst 'ENU=TRANSFER;RUS=ПЕРЕМЕЩ';
      Text064@1063 : TextConst 'ENU=Transfer;RUS=Перемещение';
      Text065@1064 : TextConst 'ENU=RECLASSJNL;RUS=РЕКЛАССЖУР';
      Text066@1065 : TextConst 'ENU=REVALJNL;RUS=ПЕРЕОЦЖУР';
      Text067@1066 : TextConst 'ENU=CONSUMPJNL;RUS=ПОТРЕБЖУР';
      Text068@1067 : TextConst 'ENU=INVTADJMT;RUS=КОРРЗАП';
      Text069@1069 : TextConst 'ENU=POINOUTJNL;RUS=ПЗВХВЫХЖУР';
      Text070@1073 : TextConst 'ENU=CAPACITJNL;RUS=ПРМОЩЖУР';
      Text071@1107 : TextConst 'ENU=WHITEM;RUS=СКЛТОВАР';
      Text072@1105 : TextConst 'ENU=WHPHYSINVT;RUS=СКЛИНВЕНТ';
      Text073@1068 : TextConst 'ENU=WHRCLSSJNL;RUS=СКЛРЕКЛЖУР';
      Text074@1070 : TextConst 'ENU=SERVICE;RUS=СЕРВИС';
      Text075@1074 : TextConst 'ENU=Service Management;RUS=Сервисное управление';
      Text076@1075 : TextConst 'ENU=BANKREC;RUS=БАНКВЫВ';
      Text077@1077 : TextConst 'ENU=WHPUTAWAY;RUS=СКЛАДРАЗМ';
      Text078@1078 : TextConst 'ENU=WHPICK;RUS=СКЛАДПОДБ';
      Text079@1079 : TextConst 'ENU=WHMOVEMENT;RUS=СКЛАДПЕРЕМ';
      Text080@1080 : TextConst 'ENU=Whse. Put-away;RUS=Склад. размещение';
      Text081@1081 : TextConst 'ENU=Whse. Pick;RUS=Склад - подбор';
      Text082@1082 : TextConst 'ENU=Whse. Movement;RUS=Склад - перемещение';
      Text083@1100 : TextConst 'ENU=COMPRWHSE;RUS=КОМПРСКЛ';
      Text084@1106 : TextConst 'ENU=INTERCOMP;RUS=МЕЖФИРМ';
      Text085@1108 : TextConst 'ENU=Intercompany;RUS=Межфирм.';
      Text086@1114 : TextConst 'ENU=UNAPPSALES;RUS=ОТМЕНПРОД';
      Text087@1113 : TextConst 'ENU=Unapplied Sales Entry Application;RUS=Применение операций отмены продажи';
      Text088@1112 : TextConst 'ENU=UNAPPPURCH;RUS=ОТМЕНПОК';
      Text089@1111 : TextConst 'ENU=Unapplied Purchase Entry Application;RUS=Применение операций отмены покупки';
      Text090@1110 : TextConst 'ENU=REVERSAL;RUS=СТОРНО';
      Text091@1109 : TextConst 'ENU="Reversal Entry ";RUS="Операция сторнирования "';
      Text092@1115 : TextConst 'ENU=PRODORDER;RUS=ПРОИЗВЗАК';
      Text99000004@1071 : TextConst 'ENU=FLUSHING;RUS=СПИСАНИЕ';
      Text99000005@1072 : TextConst 'ENU=Flushing;RUS=Списание';
      Text096@1008 : TextConst 'ENU=JOBGLJNL;RUS=РАБГКЖУР';
      Text097@1009 : TextConst 'ENU=JOBGLWIP;RUS=РАБГКНЗП';
      Text098@1122 : TextConst 'ENU=WIP Entry;RUS=Операция НЗП';
      Text099@1123 : TextConst 'ENU=Date Compress Job Ledge;RUS=Сжатие по дате - книга работ';
      Text100@1032 : TextConst '@@@="{Locked} ";ENU=COMPRIBUDG;RUS=COMPRIBUDG';
      Text101@1117 : TextConst 'ENU=Completed Contract;RUS=Выполненный контракт';
      Text102@1116 : TextConst 'ENU=Cost of Sales;RUS=Себестоимость продаж';
      Text103@1101 : TextConst 'ENU=Cost Value;RUS=Себестоимость';
      Text104@1061 : TextConst 'ENU=Sales Value;RUS=Стоимость продаж';
      Text105@1060 : TextConst 'ENU=Percentage of Completion;RUS=Процент завершения';
      Text106@1084 : TextConst 'ENU=POC;RUS=ЗАВ';
      Text109@1127 : TextConst '@@@=Uppercase of the translation of cash flow work sheet with a max of 10 char;ENU=CFWKSH;RUS=ЖДВДС';
      Text110@1128 : TextConst 'ENU=Cash Flow Worksheet;RUS=Журнал движения денежных средств';
      Text107@1121 : TextConst '@@@=Uppercase of the translation of assembly with a max of 10 char;ENU=ASSEMBLY;RUS=СБОРКА';
      Text108@1125 : TextConst 'ENU=Assembly;RUS=Сборка';
      Text111@1130 : TextConst 'ENU=GL;RUS=ГК';
      Text112@1131 : TextConst 'ENU=G/L Entry to Cost Accounting;RUS=Операция ГК в учете затрат';
      Text113@1132 : TextConst '@@@=Uppercase of the translation of cost accounting journal with a max of 10 char;ENU=CAJOUR;RUS=ЖУЧЗ';
      Text114@1133 : TextConst 'ENU=Cost Journal;RUS=Журнал затрат';
      Text115@1134 : TextConst '@@@=Uppercase of the translation of allocation with a max of 10 char;ENU=ALLOC;RUS=РАСПРЕД';
      Text116@1135 : TextConst 'ENU=Cost Allocation;RUS=Распределение затрат';
      Text117@1137 : TextConst '@@@=Uppercase of the translation of Transfer Budget to Actual with a max of 10 char;ENU=TRABUD;RUS=ПЕРЕНБЮД';
      Text118@1138 : TextConst 'ENU=Transfer Budget to Actual;RUS=Перенос бюджета в фактические';
      Text12400@1210010 : TextConst 'ENU=ADVSTMT;RUS=АВАНСОТЧ';
      Text12402@1210008 : TextConst 'ENU=DEFVAT;RUS=ОПРНДС';
      Text12403@1210007 : TextConst 'ENU=CUSTADV;RUS=КЛИЕНАВАНС';
      Text12404@1210006 : TextConst 'ENU=VENDADV;RUS=ПОСТАВАНС';
      Text12407@1210003 : TextConst 'ENU=CASHORDER;RUS=КАСОРД';
      Text12408@1210019 : TextConst 'ENU=VATREINST;RUS=VATREINST';
      Text12450@1470000 : TextConst 'ENU=ITEMRCPT;RUS=АКТОПРИХ';
      Text12452@1470002 : TextConst 'ENU=ITEMSHPT;RUS=ТОВНАКЛ';
      Text12470@1470001 : TextConst 'ENU=FARELEASE;RUS=ОСВВОДЭКСП';
      Text12471@1470003 : TextConst 'ENU=FAMOVEMENT;RUS=ОСПЕРЕМЕЩ';
      Text12472@1470004 : TextConst 'ENU=FAWRITEOFF;RUS=ОССПИСАНИЕ';
      Text12473@1210001 : TextConst 'ENU=VATPURCORR;RUS=НДСКОРРПОК';
      Text12474@1210009 : TextConst 'ENU=VATSALCORR;RUS=КОРНДСПРОД';
      Text17300@1210011 : TextConst 'ENU=TAXDEFJNL;RUS=ОТЛНАЛЖУРН';
      StatRepSetup@1210000 : Record 26569;
      Text14800@1210002 : TextConst 'ENU=PAYRJNL;RUS=ЖУРЗАРПЛ';
      Text14801@1210004 : TextConst 'ENU=COMPRPAYR;RUS=СРАВНЗАРПЛ';
      Text14802@1210012 : TextConst 'ENU=EMPLJNL;RUS=ЖУРСОТР';
      Text14803@1210013 : TextConst 'ENU=EMPLVACJNL;RUS=ЖУРОТПСОТР';
      Text14804@1210014 : TextConst 'ENU=VACORDER;RUS=ПРИКОТПУСК';
      Text14805@1210015 : TextConst 'ENU=SICKORDER;RUS=ПРИКОТПБОЛ';
      Text14806@1210005 : TextConst 'ENU=PAYRDOC;RUS=ЗАРПДОК';
      Text14807@1210017 : TextConst 'ENU=TRAVORDER;RUS=ПРИККОМАНД';
      Text14808@1210018 : TextConst 'ENU=OTHERORDER;RUS=ПРИКПРОЧЕЕ';
      Text14809@1210020 : TextConst 'ENU=VATONCOST;RUS=VATONCOST';
      BankClearingStandardCode1Tok@1085 : TextConst '@@@={Locked};ENU=AustrianBankleitzahl;RUS=AustrianBankleitzahl';
      BankClearingStandardDesc1Txt@1086 : TextConst 'ENU=Austrian BLZ number;RUS=Австрийский код BLZ';
      BankClearingStandardCode2Tok@1088 : TextConst '@@@={Locked};ENU=CanadianPaymentsARN;RUS=CanadianPaymentsARN';
      BankClearingStandardDesc2Txt@1087 : TextConst 'ENU=Canadian ARN number;RUS=Канадский код ARN';
      BankClearingStandardCode3Tok@1090 : TextConst '@@@={Locked};ENU=CHIPSParticipant;RUS=CHIPSParticipant';
      BankClearingStandardDesc3Txt@1089 : TextConst 'ENU=American CHIPS number;RUS=Американский код CHIPS';
      BankClearingStandardCode4Tok@1092 : TextConst '@@@={Locked};ENU=CHIPSUniversal;RUS=CHIPSUniversal';
      BankClearingStandardDesc4Txt@1091 : TextConst 'ENU=American CHIPS universal number;RUS=Американский универсальный код CHIPS';
      BankClearingStandardCode5Tok@1094 : TextConst '@@@={Locked};ENU=ExtensiveBranchNetwork;RUS=ExtensiveBranchNetwork';
      BankClearingStandardDesc5Txt@1093 : TextConst 'ENU=Extensive branch network number;RUS=Расширенный номер сети филиалов';
      BankClearingStandardCode6Tok@1096 : TextConst '@@@={Locked};ENU=FedwireRoutingNumber;RUS=FedwireRoutingNumber';
      BankClearingStandardDesc6Txt@1095 : TextConst 'ENU=American Fedwire/ABA routing number;RUS=Американский код банка Fedwire/ABA';
      BankClearingStandardCode7Tok@1098 : TextConst '@@@={Locked};ENU=GermanBankleitzahl;RUS=GermanBankleitzahl';
      BankClearingStandardDesc7Txt@1097 : TextConst 'ENU=German BLZ number;RUS=Немецкий код BLZ';
      BankClearingStandardCode8Tok@1102 : TextConst '@@@={Locked};ENU=HongKongBank;RUS=HongKongBank';
      BankClearingStandardDesc8Txt@1099 : TextConst 'ENU=Hong Kong branch number;RUS=Код филиала в Гонконге';
      BankClearingStandardCode9Tok@1104 : TextConst '@@@={Locked};ENU=IrishNSC;RUS=IrishNSC';
      BankClearingStandardDesc9Txt@1103 : TextConst 'ENU=Irish NSC number;RUS=Ирландский код NSC';
      BankClearingStandardCode10Tok@1119 : TextConst '@@@={Locked};ENU=ItalianDomestic;RUS=ItalianDomestic';
      BankClearingStandardDesc10Txt@1118 : TextConst 'ENU=Italian domestic code;RUS=Итальянский государственный код';
      BankClearingStandardCode11Tok@1124 : TextConst '@@@={Locked};ENU=NewZealandNCC;RUS=NewZealandNCC';
      BankClearingStandardDesc11Txt@1120 : TextConst 'ENU=New Zealand NCC number;RUS=Новозеландский код NCC';
      BankClearingStandardCode12Tok@1129 : TextConst '@@@={Locked};ENU=PortugueseNCC;RUS=PortugueseNCC';
      BankClearingStandardDesc12Txt@1126 : TextConst 'ENU=Portuguese NCC number;RUS=Португальский код NCC';
      BankClearingStandardCode13Tok@1139 : TextConst '@@@={Locked};ENU=RussianCentralBankIdentificationCode;RUS=RussianCentralBankIdentificationCode';
      BankClearingStandardDesc13Txt@1136 : TextConst 'ENU=Russian CBI code;RUS=Русский код CBI';
      BankClearingStandardCode14Tok@1143 : TextConst '@@@={Locked};ENU=SouthAfricanNCC;RUS=SouthAfricanNCC';
      BankClearingStandardDesc14Txt@1142 : TextConst 'ENU=South African NCC number;RUS=Южноафриканский код NCC';
      BankClearingStandardCode15Tok@1145 : TextConst '@@@={Locked};ENU=SpanishDomesticInterbanking;RUS=SpanishDomesticInterbanking';
      BankClearingStandardDesc15Txt@1144 : TextConst 'ENU=Spanish domestic interbanking number;RUS=Испанский внутренний межбанковский код';
      BankClearingStandardCode16Tok@1147 : TextConst '@@@={Locked};ENU=SwissBC;RUS=SwissBC';
      BankClearingStandardDesc16Txt@1146 : TextConst 'ENU=Swiss BC number;RUS=Швейцарский код BC';
      BankClearingStandardCode17Tok@1151 : TextConst '@@@={Locked};ENU=SwissSIC;RUS=SwissSIC';
      BankClearingStandardDesc17Txt@1150 : TextConst 'ENU=Swiss SIC number;RUS=Швейцарский код SIC';
      BankClearingStandardCode18Tok@1149 : TextConst '@@@={Locked};ENU=UKDomesticSortCode;RUS=UKDomesticSortCode';
      BankClearingStandardDesc18Txt@1148 : TextConst 'ENU=British sorting code;RUS=Британский код отделения';
      BankDataConvPmtTypeCode1Tok@1140 : TextConst '@@@={Locked};ENU=IntAcc2Acc;RUS=IntAcc2Acc';
      BankDataConvPmtTypeDesc1Txt@1141 : TextConst 'ENU=International account to account transfer (standard);RUS=Международный перевод со счета на счет (стандартный)';
      BankDataConvPmtTypeCode2Tok@1152 : TextConst '@@@={Locked};ENU=IntAcc2AccExp;RUS=IntAcc2AccExp';
      BankDataConvPmtTypeDesc2Txt@1153 : TextConst 'ENU=International account to account transfer (express);RUS=Международный перевод со счета на счет (экспресс)';
      BankDataConvPmtTypeCode3Tok@1155 : TextConst '@@@={Locked};ENU=IntAcc2AccFoFa;RUS=IntAcc2AccFoFa';
      BankDataConvPmtTypeDesc3Txt@1154 : TextConst 'ENU=International account to account transfer;RUS=Международный перевод со счета на счет';
      BankDataConvPmtTypeCode4Tok@1157 : TextConst '@@@={Locked};ENU=IntAcc2AccHighVal;RUS=IntAcc2AccHighVal';
      BankDataConvPmtTypeDesc4Txt@1156 : TextConst 'ENU=International account to account transfer (high value);RUS=Международный перевод со счета на счет (высокая сумма)';
      BankDataConvPmtTypeCode5Tok@1159 : TextConst '@@@={Locked};ENU=IntAcc2AccInterComp;RUS=IntAcc2AccInterComp';
      BankDataConvPmtTypeDesc5Txt@1158 : TextConst 'ENU=International account to account transfer (inter company);RUS=Международный перевод со счета на счет (между компаниями)';
      BankDataConvPmtTypeCode6Tok@1161 : TextConst '@@@={Locked};ENU=DomAcc2Acc;RUS=DomAcc2Acc';
      BankDataConvPmtTypeDesc6Txt@1160 : TextConst 'ENU=Domestic account to account transfer;RUS=Внутренний перевод со счета на счет';
      BankDataConvPmtTypeCode7Tok@1163 : TextConst '@@@={Locked};ENU=DomAcc2AccHighVal;RUS=DomAcc2AccHighVal';
      BankDataConvPmtTypeDesc7Txt@1162 : TextConst 'ENU=Domestic account to account transfer (high value);RUS=Внутренний перевод со счета на счет (высокая сумма)';
      BankDataConvPmtTypeCode8Tok@1165 : TextConst '@@@={Locked};ENU=DomAcc2AccInterComp;RUS=DomAcc2AccInterComp';
      BankDataConvPmtTypeDesc8Txt@1164 : TextConst 'ENU=Domestic account to account transfer (inter company);RUS=Внутренний перевод со счета на счет (между компаниями)';
      BankDataConvPmtTypeCode9Tok@1167 : TextConst '@@@={Locked};ENU=EurAcc2AccSepa;RUS=EurAcc2AccSepa';
      BankDataConvPmtTypeDesc9Txt@1166 : TextConst 'ENU=SEPA credit transfer;RUS=Кредитовый перевод SEPA';
      PEPPOL21_ElectronicFormatTxt@1168 : TextConst '@@@={Locked};ENU=PEPPOL 2.1;RUS=PEPPOL 2.1';
      PEPPOL21_ElectronicFormatDescriptionTxt@1170 : TextConst 'ENU=PEPPOL 2.1 Format (Pan-European Public Procurement Online);RUS=Формат PEPPOL 2.1 (общеевропейские общественные закупки через Интернет)';
      PEPPOL20_ElectronicFormatTxt@1172 : TextConst '@@@={Locked};ENU=PEPPOL 2.0;RUS=PEPPOL 2.0';
      PEPPOL20_ElectronicFormatDescriptionTxt@1171 : TextConst 'ENU=PEPPOL 2.0 Format (Pan-European Public Procurement Online);RUS=Формат PEPPOL 2.0 (общеевропейские общественные закупки через Интернет)';
      "NCT>"@1101495018 : TextConst;
      Text55001@1101495017 : TextConst 'ENU=IFRS_ADJ;RUS=КОРР_МСФО';
      Text55002@1101495016 : TextConst 'ENU=IFRS Adjustments;RUS=Корректировки МСФО';
      Text55003@1101495015 : TextConst 'ENU=DEPR;RUS=АМОРТ';
      Text55004@1101495014 : TextConst 'ENU=FA Depretiation;RUS=Амортизация ОС, НМА, РБП';
      Text55005@1101495013 : TextConst 'ENU=NETTING;RUS=НЕТТИНГ';
      Text55006@1101495012 : TextConst 'ENU=Securities netting;RUS=Неттинг ценных бумаг';
      Text55007@1101495011 : TextConst 'ENU=FV REVAL;RUS=FV ПЕРЕОЦ';
      Text55008@1101495010 : TextConst 'ENU=Fair Value revaluation;RUS=Переоценка до спр. стоимости';
      Text55009@1101495009 : TextConst 'ENU=FX Reval;RUS=FX ПЕРЕОЦ';
      Text55010@1101495008 : TextConst 'ENU=FX Revaluation;RUS=Валютная переоценка';
      Text55011@1101495007 : TextConst 'ENU=ELIMIN;RUS=ЭЛИМИН';
      Text55012@1101495006 : TextConst 'ENU=Elimination IC;RUS=Элиминирование внутригр. операций';
      Text55013@1101495005 : TextConst 'ENU=ELIM_RE;RUS=ЭЛИМИН НП';
      Text55014@1101495004 : TextConst 'ENU=Retained earnings elimination;RUS=Элиминирование нереализованной прибыли';
      Text55015@1101495003 : TextConst 'ENU=TRANSFORM;RUS=ТРАНСФОРМ';
      Text55016@1101495002 : TextConst 'ENU=Transformation;RUS=Трансформация';
      Text55017@1101495001 : TextConst 'ENU=FATRANSF;RUS=ОСТРАНСФ';
      Text55018@1101495000 : TextConst 'ENU=FA Transformation;RUS=ОС Трансформация';

    LOCAL PROCEDURE InitSetupTables@3();
    VAR
      GLSetup@1025 : Record 98;
      SalesSetup@1024 : Record 311;
      PurchSetup@1023 : Record 312;
      InvtSetup@1022 : Record 313;
      ResourcesSetup@1021 : Record 314;
      JobsSetup@1020 : Record 315;
      HumanResourcesSetup@1019 : Record 5218;
      MarketingSetup@1018 : Record 5079;
      InteractionTemplateSetup@1017 : Record 5122;
      ServiceMgtSetup@1016 : Record 5911;
      NonstockItemSetup@1015 : Record 5719;
      FASetup@1014 : Record 5603;
      CashFlowSetup@1007 : Record 843;
      CostAccSetup@1006 : Record 1108;
      WhseSetup@1004 : Record 5769;
      AssemblySetup@1002 : Record 905;
      VATReportSetup@1000 : Record 743;
      TaxSetup@1026 : Record 326;
      ConfigSetup@1001 : Record 8627;
      DataMigrationSetup@1009 : Record 1806;
      IncomingDocumentsSetup@1008 : Record 131;
      CompanyInfo@1003 : Record 79;
      TaxRegSetup@1470005 : Record 17236;
      SocialListeningSetup@1005 : Record 870;
    BEGIN

      WITH GLSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH SalesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH MarketingSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH InteractionTemplateSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ServiceMgtSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH SocialListeningSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT(TRUE);
        END;

      WITH PurchSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH InvtSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ResourcesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH JobsSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH FASetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH HumanResourcesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH WhseSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH NonstockItemSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CashFlowSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CostAccSetup DO
        IF WRITEPERMISSION THEN
          IF NOT FINDFIRST THEN BEGIN
            INIT;
            INSERT;
          END;

      WITH AssemblySetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH VATReportSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH TaxSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ConfigSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH DataMigrationSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH IncomingDocumentsSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CompanyInfo DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          "Created DateTime" := CURRENTDATETIME;
          INSERT;
        END;

      WITH TaxRegSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH StatRepSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitSourceCodeSetup@9();
    VAR
      SourceCode@1001 : Record 230;
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      IF NOT (SourceCodeSetup.FINDFIRST OR SourceCode.FINDFIRST) THEN
        WITH SourceCodeSetup DO BEGIN
          INIT;
          InsertSourceCode(Sales,Text001,Text002);
          InsertSourceCode(Purchases,Text003,Text004);
          InsertSourceCode("Deleted Document",Text005,COPYSTR(FIELDCAPTION("Deleted Document"),1,30));
          InsertSourceCode("Inventory Post Cost",Text006,ReportName(REPORT::"Post Inventory Cost to G/L"));
          InsertSourceCode("Exchange Rate Adjmt.",Text007,ReportName(REPORT::"Adjust Exchange Rates"));
          InsertSourceCode("Close Income Statement",Text010,ReportName(REPORT::"Close Income Statement"));
          InsertSourceCode(Consolidation,Text011,Text012);
          InsertSourceCode("General Journal",Text013,PageName(PAGE::"General Journal"));
          InsertSourceCode("Sales Journal",Text014,PageName(PAGE::"Sales Journal"));
          InsertSourceCode("Purchase Journal",Text015,PageName(PAGE::"Purchase Journal"));
          InsertSourceCode("Cash Receipt Journal",Text016,PageName(PAGE::"Cash Receipt Journal"));
          InsertSourceCode("Payment Journal",Text017,PageName(PAGE::"Payment Journal"));
          InsertSourceCode("Payment Reconciliation Journal",PaymentReconJnlTok,PageName(PAGE::"Payment Reconciliation Journal"));
          InsertSourceCode("Item Journal",Text018,PageName(PAGE::"Item Journal"));
          InsertSourceCode(Transfer,Text063,Text064);
          InsertSourceCode("Item Reclass. Journal",Text065,PageName(PAGE::"Item Reclass. Journal"));
          InsertSourceCode("Phys. Inventory Journal",Text020,PageName(PAGE::"Phys. Inventory Journal"));
          InsertSourceCode("Revaluation Journal",Text066,PageName(PAGE::"Revaluation Journal"));
          InsertSourceCode("Consumption Journal",Text067,PageName(PAGE::"Consumption Journal"));
          InsertSourceCode("Output Journal",Text069,PageName(PAGE::"Output Journal"));
          InsertSourceCode("Production Journal",Text092,PageName(PAGE::"Production Journal"));
          InsertSourceCode("Capacity Journal",Text070,PageName(PAGE::"Capacity Journal"));
          InsertSourceCode("Resource Journal",Text022,PageName(PAGE::"Resource Journal"));
          InsertSourceCode("Job Journal",Text023,PageName(PAGE::"Job Journal"));
          InsertSourceCode("Job G/L Journal",Text096,PageName(PAGE::"Job G/L Journal"));
          InsertSourceCode("Job G/L WIP",Text097,Text098);
          InsertSourceCode("Sales Entry Application",Text024,Text025);
          InsertSourceCode("Unapplied Sales Entry Appln.",Text086,Text087);
          InsertSourceCode("Unapplied Purch. Entry Appln.",Text088,Text089);
          InsertSourceCode(Reversal,Text090,Text091);
          InsertSourceCode("Purchase Entry Application",Text026,Text027);
          InsertSourceCode("VAT Settlement",Text028,ReportName(REPORT::"Calc. and Post VAT Settlement"));
          InsertSourceCode("Compress G/L",Text029,ReportName(REPORT::"Date Compress General Ledger"));
          InsertSourceCode("Compress VAT Entries",Text030,ReportName(REPORT::"Date Compress VAT Entries"));
          InsertSourceCode("Compress Cust. Ledger",Text031,ReportName(REPORT::"Date Compress Customer Ledger"));
          InsertSourceCode("Compress Vend. Ledger",Text032,ReportName(REPORT::"Date Compress Vendor Ledger"));
          InsertSourceCode("Compress Res. Ledger",Text035,ReportName(REPORT::"Date Compress Resource Ledger"));
          InsertSourceCode("Compress Job Ledger",Text036,Text099);
          InsertSourceCode("Compress Bank Acc. Ledger",Text037,ReportName(REPORT::"Date Compress Bank Acc. Ledger"));
          InsertSourceCode("Compress Check Ledger",Text038,ReportName(REPORT::"Delete Check Ledger Entries"));
          InsertSourceCode("Financially Voided Check",Text039,Text040);
          InsertSourceCode(Reminder,Text041,Text042);
          InsertSourceCode("Finance Charge Memo",Text043,Text044);
          InsertSourceCode("Trans. Bank Rec. to Gen. Jnl.",Text076,ReportName(REPORT::"Trans. Bank Rec. to Gen. Jnl."));
          InsertSourceCode("Fixed Asset G/L Journal",Text045,PageName(PAGE::"Fixed Asset G/L Journal"));
          InsertSourceCode("Fixed Asset Journal",Text046,PageName(PAGE::"Fixed Asset Journal"));
          InsertSourceCode("Insurance Journal",Text047,PageName(PAGE::"Insurance Journal"));
          InsertSourceCode("Compress FA Ledger",Text048,ReportName(REPORT::"Date Compress FA Ledger"));
          InsertSourceCode("Compress Maintenance Ledger",Text049,ReportName(REPORT::"Date Compress Maint. Ledger"));
          InsertSourceCode("Compress Insurance Ledger",Text050,ReportName(REPORT::"Date Compress Insurance Ledger"));
          InsertSourceCode("Adjust Add. Reporting Currency",Text051,ReportName(REPORT::"Adjust Add. Reporting Currency"));
          InsertSourceCode(Flushing,Text99000004,Text99000005);
          InsertSourceCode("Adjust Cost",Text068,ReportName(REPORT::"Adjust Cost - Item Entries"));
          InsertSourceCode("Compress Item Budget",Text100,ReportName(REPORT::"Date Comp. Item Budget Entries"));
          InsertSourceCode("Whse. Item Journal",Text071,PageName(PAGE::"Whse. Item Journal"));
          InsertSourceCode("Whse. Phys. Invt. Journal",Text072,PageName(PAGE::"Whse. Phys. Invt. Journal"));
          InsertSourceCode("Whse. Reclassification Journal",Text073,PageName(PAGE::"Whse. Reclassification Journal"));
          InsertSourceCode("Compress Whse. Entries",Text083,ReportName(REPORT::"Date Compress Whse. Entries"));
          InsertSourceCode("Whse. Put-away",Text077,Text080);
          InsertSourceCode("Whse. Pick",Text078,Text081);
          InsertSourceCode("Whse. Movement",Text079,Text082);
          InsertSourceCode("Service Management",Text074,Text075);
          InsertSourceCode("IC General Journal",Text084,Text085);
          InsertSourceCode("Cash Flow Worksheet",Text109,Text110);
          InsertSourceCode(Assembly,Text107,Text108);
          InsertSourceCode("G/L Entry to CA",Text111,Text112);
          InsertSourceCode("Cost Journal",Text113,Text114);
          InsertSourceCode("Cost Allocation",Text115,Text116);
          InsertSourceCode("Transfer Budget to Actual",Text117,Text118);
          InsertSourceCode("Advance Statements",Text12400,PageName(PAGE::"Advance Statement"));
          InsertSourceCode("Deferred VAT Settlement",Text12402,PageName(PAGE::"VAT Settlement Journal"));
          InsertSourceCode("Customer Prepayments",Text12403,SourceCodeSetup.FIELDCAPTION("Customer Prepayments"));
          InsertSourceCode("Vendor Prepayments",Text12404,SourceCodeSetup.FIELDCAPTION("Vendor Prepayments"));
          InsertSourceCode("Cash Order Payments",Text12407,SourceCodeSetup.FIELDCAPTION("Cash Order Payments"));
          InsertSourceCode("Tax Difference Journal",Text17300,PageName(PAGE::"Tax Difference Journal Batches"));
          InsertSourceCode("Item Receipt",Text12450,SourceCodeSetup.FIELDCAPTION("Item Receipt"));
          InsertSourceCode("Item Shipment",Text12452,SourceCodeSetup.FIELDCAPTION("Item Shipment"));
          InsertSourceCode("FA Release",Text12470,SourceCodeSetup.FIELDCAPTION("FA Release"));
          InsertSourceCode("FA Movement",Text12471,SourceCodeSetup.FIELDCAPTION("FA Movement"));
          InsertSourceCode("FA Writeoff",Text12472,SourceCodeSetup.FIELDCAPTION("FA Writeoff"));
          InsertSourceCode("VAT for Customer Adjustment",Text12474,SourceCodeSetup.FIELDCAPTION("VAT for Customer Adjustment"));
          InsertSourceCode("VAT for Vendor Adjustment",Text12473,SourceCodeSetup.FIELDCAPTION("VAT for Vendor Adjustment"));
          InsertSourceCode("Payroll Calculation",Text14806,PageName(PAGE::"Payroll Document"));
          InsertSourceCode("Compress Payroll Journal",Text14801,ReportName(REPORT::"Date Compress Payroll Ledger"));
          InsertSourceCode("Employee Journal",Text14802,PageName(PAGE::"Employee Journal"));
          InsertSourceCode("Employee Vacation Journal",Text14803,PageName(PAGE::"Employee Journal"));
          InsertSourceCode("Vacation Order",Text14804,PageName(PAGE::"Vacation Order"));
          InsertSourceCode("Sick Leave Order",Text14805,PageName(PAGE::"Sick Leave Order"));
          InsertSourceCode("Travel Order",Text14807,PageName(PAGE::"Travel Order"));
          InsertSourceCode("Other Absence Order",Text14808,PageName(PAGE::"Other Absence Order"));
          InsertSourceCode("VAT Reinstatement",Text12408,PageName(PAGE::"VAT Reinstatement Journal"));
          InsertSourceCode("VAT Allocation on Cost",Text14809,SourceCodeSetup.FIELDCAPTION("VAT Allocation on Cost"));
          //NC MDA01 > MP
          InsertSourceCode("Translation Adjustment",Text55001,Text55002);
          InsertSourceCode(Transformation,Text55015,Text55016);
          InsertSourceCode("FA Transformation",Text55017,Text55018);
          InsertSourceCode("FA Depretiation",Text55003,Text55004);
          InsertSourceCode(Netting,Text55005,Text55006);
          InsertSourceCode("FV Revaluation",Text55007,Text55008);
          InsertSourceCode("FX Revaluation",Text55009,Text55010);
          InsertSourceCode(Elimination,Text55011,Text55012);
          InsertSourceCode("Elimination FA",Text55013,Text55014);
          //NC MDA01 < MP
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitStandardTexts@11();
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      IF NOT StandardText.FINDFIRST THEN BEGIN
        InsertStandardText(Text052,Text053);
        InsertStandardText(Text054,Text055);
        InsertStandardText(Text056,Text057);
        InsertStandardText(Text058,Text059);
      END;
    END;

    LOCAL PROCEDURE InitReportSelection@13();
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      WITH ReportSelections DO
        IF NOT FINDFIRST THEN BEGIN
          InsertRepSelection(Usage::SID,'1',REPORT::"Standard Sales - Draft Invoice",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SQ,'1',REPORT::"Standard Sales - Quote",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SB,'1',REPORT::"Blanket Sales Order",TRUE,FALSE,TRUE);
          // Sales Order
          InsertRepSelection(Usage::SO,'1',REPORT::"Standard Sales - Order Conf.",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::SO,'2',REPORT::"Order Proforma-Invoice (A)",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::SO,'3',REPORT::"Order Factura-Invoice (A)",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::SO,'4',REPORT::"Order Item Shipment TORG-12",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::SO,'5',REPORT::"Order Item Waybill 1-T",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::SO,'6',REPORT::"Sales Shipment M-15",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::SO,'7',REPORT::"Pick Instruction",FALSE,FALSE,TRUE);
          // Sales Invoice
          InsertRepSelection(Usage::USI,'1',REPORT::"Order Proforma-Invoice (A)",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::USI,'2',REPORT::"Order Factura-Invoice (A)",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::USI,'3',REPORT::"Order Item Shipment TORG-12",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::USI,'4',REPORT::"Order Item Waybill 1-T",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::USI,'5',REPORT::"Sales Shipment M-15",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::USCM,'1',REPORT::"Order Factura-Invoice (A)",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::SRet,'1',REPORT::"Return Order Confirmation",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SRet,'2',REPORT::"Order Proforma-Invoice (A)",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SRet,'3',REPORT::"Order Factura-Invoice (A)",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::SRet,'4',REPORT::"Order Item Shipment TORG-12",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SRet,'5',REPORT::"Order Item Waybill 1-T",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::SRet,'6',REPORT::"Sales Shipment M-15",FALSE,FALSE,TRUE);
          // Sales Shipment
          InsertRepSelection(Usage::SS,'1',REPORT::"Sales - Shipment",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::SS,'2',REPORT::"Posted Ship. Shipment TORG-12",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::SS,'3',REPORT::"Posted Ship. Item Waybill 1-T",FALSE,FALSE,FALSE);
          // Sales Posted Invoice
          InsertRepSelection(Usage::SI,'2',REPORT::"Posted Factura-Invoice (A)",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::SI,'3',REPORT::"Posted Inv. Shipment TORG-12",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::SI,'4',REPORT::"Posted Inv. Item Waybill 1-T",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::SI,'5',REPORT::"Posted Sales Shipment M-15",FALSE,FALSE,FALSE);

          // Sales Posted Credit Memo
          InsertRepSelection(Usage::SCM,'1',REPORT::"Standard Sales - Credit Memo",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::SCM,'2',REPORT::"Posted Cr. M. Factura-Invoice",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::SCM,'3',REPORT::"Posted Cr. M. Shipment TORG-12",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::PQ,'1',REPORT::"Purchase - Quote",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PB,'1',REPORT::"Blanket Purchase Order",TRUE,FALSE,TRUE);
          // Purchase Order
          InsertRepSelection(Usage::PO,'1',REPORT::Order,TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PO,'2',REPORT::"Purchase Receipt M-4",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::PO,'3',REPORT::"Purch. FA Receipt FA-14",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::PO,'4',REPORT::"Act Items Receipt M-7",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::PO,'5',REPORT::"Items Receipt Act TORG-1",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::PO,'6',REPORT::"Receipt Deviations TORG-2",FALSE,TRUE,FALSE);
          // Purchase Invoice
          InsertRepSelection(Usage::UPI,'1',REPORT::"Purchase Receipt M-4",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::UPI,'2',REPORT::"Purch. FA Receipt FA-14",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::UPI,'3',REPORT::"Act Items Receipt M-7",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::UPI,'4',REPORT::"Items Receipt Act TORG-1",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::PRet,'1',REPORT::"Return Order",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PCM,'1',REPORT::"Purchase - Credit Memo",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PR,'1',REPORT::"Purchase - Receipt",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PRS,'1',REPORT::"Purchase - Return Shipment",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PT,'1',REPORT::"Purchase Document - Test",TRUE,FALSE,TRUE);

          // Purchase Credit Memo
          InsertRepSelection(Usage::UPCM,'1',REPORT::"Act Items Receipt M-7",TRUE,FALSE,TRUE);

          // Posted Purchase Invoice
          InsertRepSelection(Usage::PI,'1',REPORT::"Posted Purchase Receipt M-4",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::PI,'2',REPORT::"Posted Purch. FA Receipt FA-14",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::PI,'3',REPORT::"Pstd. Purch. Factura-Invoice",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::BS,'1',REPORT::"Bank Account Statement",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::BRT,'1',REPORT::"Bank Acc. Recon. - Test",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::BC,'1',REPORT::"Bank Payment Order",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::Rem,'1',REPORT::Reminder,TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::FC,'1',REPORT::"Finance Charge Memo",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::RT,'1',REPORT::"Reminder - Test",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::FCT,'1',REPORT::"Finance Charge Memo - Test",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::Inv1,'1',REPORT::"Transfer Order TORG-13",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::Inv1,'2',REPORT::"Shipment Request M-11",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::Inv2,'1',REPORT::"Transfer Shipment TORG-13",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::Inv2,'2',REPORT::"Shipment Request M-11",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::Inv3,'1',REPORT::"Transfer Receipt TORG-13",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::Inv3,'2',REPORT::"Shipment Request M-11",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::IPT,'1',REPORT::"Close Inventory Period - Test",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PrO,'1',REPORT::"Prod. Order - Job Card",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::M1,'1',REPORT::"Prod. Order - Job Card",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::M2,'1',REPORT::"Prod. Order - Mat. Requisition",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::M3,'1',REPORT::"Prod. Order - Shortage List",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SMQ,'1',REPORT::"Service Quote",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SMO,'1',REPORT::"Service Order",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SMI,'1',REPORT::"Service - Invoice",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SMCM,'1',REPORT::"Service - Credit Memo",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SMS,'1',REPORT::"Service - Shipment",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SMCQ,'1',REPORT::"Service Contract Quote",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SMC,'1',REPORT::"Service Contract",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SMT,'1',REPORT::"Service Document - Test",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::STPrep,'1',REPORT::"Sales Prepmt. Document Test",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PTP,'1',REPORT::"Purchase Prepmt. Doc. - Test",TRUE,FALSE,TRUE);

          InsertRepSelection(Usage::SAQ,'1',REPORT::"Archived Sales Quote",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SAO,'1',REPORT::"Archived Sales Order",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PAQ,'1',REPORT::"Archived Purchase Quote",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PAO,'1',REPORT::"Archived Purchase Order",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::PARO,'1',REPORT::"Arch.Purch. Return Order",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::SARO,'1',REPORT::"Arch. Sales Return Order",TRUE,FALSE,TRUE);

          // Cash
          InsertRepSelection(Usage::CB,'1',REPORT::"Cash Report CO-4",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::UCI,'1',REPORT::"Cash Ingoing Order",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::UCO,'1',REPORT::"Cash Outgoing Order",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::CI,'1',REPORT::"Posted Cash Ingoing Order",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::CO,'1',REPORT::"Posted Cash Outgoing Order",TRUE,FALSE,FALSE);

          // Advance Statements
          InsertRepSelection(Usage::UAS,'1',REPORT::"Advance Statement",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::AS,'1',REPORT::"Posted Advance Statement",TRUE,FALSE,FALSE);
          // Item Shipment
          InsertRepSelection(Usage::UIS,'1',REPORT::"Item Write-off act TORG-16",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::IS,'1',REPORT::"Posted Item Write-off TORG-16",FALSE,FALSE,FALSE);
          // Item Receipt
          InsertRepSelection(Usage::UIR,'1',REPORT::"Act Items Receipt M-7",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::UIR,'2',REPORT::"Items Receipt Act TORG-1",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::UIR,'3',REPORT::"Receipt Deviations TORG-2",FALSE,TRUE,TRUE);
          InsertRepSelection(Usage::IR,'1',REPORT::"Act Items Receipt M-7",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::IR,'2',REPORT::"Items Receipt Act TORG-1",FALSE,FALSE,TRUE);
          InsertRepSelection(Usage::IR,'3',REPORT::"Receipt Deviations TORG-2",FALSE,TRUE,TRUE);

          // Item Phys. Inventory Journal
          InsertRepSelection(Usage::PIJ,'1',REPORT::"Phys. Inventory Form INV-3",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::PIJ,'2',REPORT::"Phys. Inventory Form INV-19",FALSE,FALSE,FALSE);
          // Item Reclassification Journal
          InsertRepSelection(Usage::IRJ,'1',REPORT::"Item Reclass. TORG-13",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::IRJ,'2',REPORT::"Shipment Request M-11",FALSE,FALSE,TRUE);

          // FA Writeoff
          InsertRepSelection(Usage::UFAW,'1',REPORT::"FA Write-off Act FA-4",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::UFAW,'2',REPORT::"FA Writeoff Act FA-4a",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::FAW,'1',REPORT::"FA Posted Writeoff Act FA-4",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::FAW,'2',REPORT::"Posted FA Writeoff Act FA-4a",TRUE,FALSE,FALSE);

          // FA Movement
          InsertRepSelection(Usage::UFAM,'1',REPORT::"FA Movement FA-2",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::UFAM,'2',REPORT::"FA Movement FA-3",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::UFAM,'3',REPORT::"FA Movement FA-15",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::FAM,'1',REPORT::"FA Posted Movement FA-2",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::FAM,'2',REPORT::"FA Posted Movement FA-3",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::FAM,'3',REPORT::"Posted FA Movement FA-15",TRUE,FALSE,FALSE);
          // FA Release
          InsertRepSelection(Usage::UFAR,'1',REPORT::"FA Release Act FA-1",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::FAR,'1',REPORT::"FA Posted Release Act FA-1",TRUE,FALSE,FALSE);
          // FA Jnl.
          InsertRepSelection(Usage::FARJ,'1',REPORT::"FA Phys. Inventory INV-1",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::FARJ,'2',REPORT::"FA Comparative Sheet INV-18",FALSE,FALSE,FALSE);
          InsertRepSelection(Usage::FAJ,'1',REPORT::"FA Phys. Inventory INV-1a",TRUE,TRUE,FALSE);
          // Future Expense Jnl.
          InsertRepSelection(Usage::FAJ,'2',REPORT::"Inventory for Deferrals INV-11",FALSE,TRUE,FALSE);
          InsertRepSelection(Usage::FAJ,'3',REPORT::"FA Comparative Sheet INV-18",TRUE,FALSE,TRUE);
          InsertRepSelection(Usage::FAJ,'4',REPORT::"FA Phys. Inventory INV-1",FALSE,FALSE,TRUE);
          // Corrective Documents
          InsertRepSelection(Usage::UCSD,'1',REPORT::"Sales Corr. Factura-Invoice",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::CSI,'1',REPORT::"Pstd. Sales Corr. Fact. Inv.",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::CSCM,'1',REPORT::"Pstd. Sales Corr. Cr. M. Fact.",TRUE,FALSE,FALSE);
          InsertRepSelection(Usage::CSTMT,'1',REPORT::"Standard Statement",TRUE,FALSE,TRUE);
        END;
    END;

    LOCAL PROCEDURE InitJobWIPMethods@15();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      IF NOT JobWIPMethod.FINDFIRST THEN BEGIN
        InsertJobWIPMethod(Text101,Text101,JobWIPMethod."Recognized Costs"::"At Completion",
          JobWIPMethod."Recognized Sales"::"At Completion",4);
        InsertJobWIPMethod(Text102,Text102,JobWIPMethod."Recognized Costs"::"Cost of Sales",
          JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",2);
        InsertJobWIPMethod(Text103,Text103,JobWIPMethod."Recognized Costs"::"Cost Value",
          JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",0);
        InsertJobWIPMethod(Text104,Text104,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
          JobWIPMethod."Recognized Sales"::"Sales Value",1);
        InsertJobWIPMethod(Text106,Text105,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
          JobWIPMethod."Recognized Sales"::"Percentage of Completion",3);
      END;
    END;

    LOCAL PROCEDURE InitBankExportImportSetup@14();
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      IF NOT BankExportImportSetup.FINDFIRST THEN BEGIN
        InsertBankExportImportSetup(SEPACTCodeTxt,SEPACTNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"SEPA CT-Export File",XMLPORT::"SEPA CT pain.001.001.03",CODEUNIT::"SEPA CT-Check Line");
        InsertBankExportImportSetup(SEPADDCodeTxt,SEPADDNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"SEPA DD-Export File",XMLPORT::"SEPA DD pain.008.001.02",CODEUNIT::"SEPA DD-Check Line");
      END;
    END;

    LOCAL PROCEDURE InitBankClearingStandard@18();
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      IF NOT BankClearingStandard.FINDFIRST THEN BEGIN
        InsertBankClearingStandard(BankClearingStandardCode1Tok,BankClearingStandardDesc1Txt);
        InsertBankClearingStandard(BankClearingStandardCode2Tok,BankClearingStandardDesc2Txt);
        InsertBankClearingStandard(BankClearingStandardCode3Tok,BankClearingStandardDesc3Txt);
        InsertBankClearingStandard(BankClearingStandardCode4Tok,BankClearingStandardDesc4Txt);
        InsertBankClearingStandard(BankClearingStandardCode5Tok,BankClearingStandardDesc5Txt);
        InsertBankClearingStandard(BankClearingStandardCode6Tok,BankClearingStandardDesc6Txt);
        InsertBankClearingStandard(BankClearingStandardCode7Tok,BankClearingStandardDesc7Txt);
        InsertBankClearingStandard(BankClearingStandardCode8Tok,BankClearingStandardDesc8Txt);
        InsertBankClearingStandard(BankClearingStandardCode9Tok,BankClearingStandardDesc9Txt);
        InsertBankClearingStandard(BankClearingStandardCode10Tok,BankClearingStandardDesc10Txt);
        InsertBankClearingStandard(BankClearingStandardCode11Tok,BankClearingStandardDesc11Txt);
        InsertBankClearingStandard(BankClearingStandardCode12Tok,BankClearingStandardDesc12Txt);
        InsertBankClearingStandard(BankClearingStandardCode13Tok,BankClearingStandardDesc13Txt);
        InsertBankClearingStandard(BankClearingStandardCode14Tok,BankClearingStandardDesc14Txt);
        InsertBankClearingStandard(BankClearingStandardCode15Tok,BankClearingStandardDesc15Txt);
        InsertBankClearingStandard(BankClearingStandardCode16Tok,BankClearingStandardDesc16Txt);
        InsertBankClearingStandard(BankClearingStandardCode17Tok,BankClearingStandardDesc17Txt);
        InsertBankClearingStandard(BankClearingStandardCode18Tok,BankClearingStandardDesc18Txt);
      END;
    END;

    LOCAL PROCEDURE InitBankDataConvServiceSetup@19();
    VAR
      BankDataConvServiceSetup@1000 : Record 1260;
    BEGIN
      WITH BankDataConvServiceSetup DO
        IF NOT GET THEN BEGIN
          INIT;
          INSERT(TRUE);
        END;
    END;

    LOCAL PROCEDURE InitDocExchServiceSetup@25();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO
        IF NOT GET THEN BEGIN
          INIT;
          SetURLsToDefault;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitBankDataConversionPmtType@21();
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      IF NOT BankDataConversionPmtType.FINDFIRST THEN BEGIN
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode1Tok,BankDataConvPmtTypeDesc1Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode2Tok,BankDataConvPmtTypeDesc2Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode3Tok,BankDataConvPmtTypeDesc3Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode4Tok,BankDataConvPmtTypeDesc4Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode5Tok,BankDataConvPmtTypeDesc5Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode6Tok,BankDataConvPmtTypeDesc6Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode7Tok,BankDataConvPmtTypeDesc7Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode8Tok,BankDataConvPmtTypeDesc8Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode9Tok,BankDataConvPmtTypeDesc9Txt);
      END;
    END;

    LOCAL PROCEDURE InitVATRegNrValidationSetup@22();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      VATLookupExtDataHndl@1001 : Codeunit 248;
    BEGIN
      IF GeneralLedgerSetup.GET THEN
        IF GeneralLedgerSetup."VAT Reg. No. Validation URL" = '' THEN BEGIN
          GeneralLedgerSetup."VAT Reg. No. Validation URL" := VATLookupExtDataHndl.GetVATRegNrValidationWebServiceURL;
          GeneralLedgerSetup.MODIFY;
        END;
    END;

    LOCAL PROCEDURE InitElectronicFormats@23();
    VAR
      ElectronicDocumentFormat@1000 : Record 61;
    BEGIN
      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Inv. - PEPPOL 2.1",ElectronicDocumentFormat.Usage::"Sales Invoice");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Cr.M. - PEPPOL2.1",ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Serv. Inv. - PEPPOL 2.1",ElectronicDocumentFormat.Usage::"Service Invoice");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Service Cr.M. - PEPPOL2.1",ElectronicDocumentFormat.Usage::"Service Credit Memo");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Validation",ElectronicDocumentFormat.Usage::"Sales Validation");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Service Validation",ElectronicDocumentFormat.Usage::"Service Validation");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Inv. - PEPPOL 2.0",ElectronicDocumentFormat.Usage::"Sales Invoice");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Cr.M. - PEPPOL2.0",ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Serv. Inv. - PEPPOL 2.0",ElectronicDocumentFormat.Usage::"Service Invoice");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Service Cr.M. - PEPPOL2.0",ElectronicDocumentFormat.Usage::"Service Credit Memo");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Validation",ElectronicDocumentFormat.Usage::"Sales Validation");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Service Validation",ElectronicDocumentFormat.Usage::"Service Validation");
    END;

    LOCAL PROCEDURE InsertSourceCode@1(VAR SourceCodeDefCode@1000 : Code[10];Code@1001 : Code[10];Description@1002 : Text[50]);
    VAR
      SourceCode@1003 : Record 230;
    BEGIN
      SourceCodeDefCode := Code;
      SourceCode.INIT;
      SourceCode.Code := Code;
      SourceCode.Description := Description;
      SourceCode.INSERT;
    END;

    LOCAL PROCEDURE InsertStandardText@4(Code@1000 : Code[20];Description@1001 : Text[50]);
    VAR
      StandardText@1002 : Record 7;
    BEGIN
      StandardText.INIT;
      StandardText.Code := Code;
      StandardText.Description := Description;
      StandardText.INSERT;
    END;

    LOCAL PROCEDURE InsertRepSelection@2(ReportUsage@1000 : Integer;Sequence@1001 : Code[10];ReportID@1002 : Integer;Default@1210000 : Boolean;ExcelExport@1210001 : Boolean;UseForEmailAttachment@1210002 : Boolean);
    VAR
      ReportSelections@1003 : Record 77;
    BEGIN
      ReportSelections.INIT;
      ReportSelections.Usage := ReportUsage;
      ReportSelections.Sequence := Sequence;
      ReportSelections."Report ID" := ReportID;
      ReportSelections.Default := Default;
      ReportSelections."Excel Export" := ExcelExport;
      ReportSelections."Use for Email Attachment" := UseForEmailAttachment;
      ReportSelections.INSERT;
    END;

    LOCAL PROCEDURE PageName@5(PageID@1000 : Integer) : Text[50];
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      EXIT(COPYSTR(ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Page,PageID),1,30));
    END;

    LOCAL PROCEDURE ReportName@6(ReportID@1000 : Integer) : Text[50];
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      EXIT(COPYSTR(ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Report,ReportID),1,30));
    END;

    LOCAL PROCEDURE InsertClientAddIns@8();
    VAR
      ClientAddIn@1000 : Record 2000000069;
    BEGIN
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.DynamicsOnlineConnect','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Microsoft Dynamics Online Connect control add-in','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.BusinessChart','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics BusinessChart control add-in',
        APPLICATIONPATH + 'Add-ins\BusinessChart\Microsoft.Dynamics.Nav.Client.BusinessChart.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.TimelineVisualization','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Interactive visualizion for a timeline of events','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PingPong','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Microsoft Dynamics PingPong control add-in','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.VideoPlayer','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics VideoPlayer control add-in',
        APPLICATIONPATH + 'Add-ins\VideoPlayer\Microsoft.Dynamics.Nav.Client.VideoPlayer.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PageReady','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics PageReady control add-in',
        APPLICATIONPATH + 'Add-ins\PageReady\Microsoft.Dynamics.Nav.Client.PageReady.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.SocialListening','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Social Listening control add-in',
        APPLICATIONPATH + 'Add-ins\SocialListening\Microsoft.Dynamics.Nav.Client.SocialListening.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.WebPageViewer','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Web Page Viewer control add-in',
        APPLICATIONPATH + 'Add-ins\WebPageViewer\Microsoft.Dynamics.Nav.Client.WebPageViewer.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.OAuthIntegration','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft OAuth Integration control add-in',
        APPLICATIONPATH + 'Add-ins\OAuthIntegration\Microsoft.Dynamics.Nav.Client.OAuthIntegration.zip');
    END;

    LOCAL PROCEDURE InsertClientAddIn@17(ControlAddInName@1000 : Text[220];PublicKeyToken@1001 : Text[20];Version@1002 : Text[25];Category@1006 : Option;Description@1003 : Text[250];ResourceFilePath@1005 : Text[250]);
    VAR
      ClientAddIn@1004 : Record 2000000069;
    BEGIN
      IF ClientAddIn.GET(ControlAddInName,PublicKeyToken,Version) THEN
        EXIT;

      ClientAddIn.INIT;
      ClientAddIn."Add-in Name" := ControlAddInName;
      ClientAddIn."Public Key Token" := PublicKeyToken;
      ClientAddIn.Version := Version;
      ClientAddIn.Category := Category;
      ClientAddIn.Description := Description;
      IF EXISTS(ResourceFilePath) THEN
        ClientAddIn.Resource.IMPORT(ResourceFilePath);
      IF ClientAddIn.INSERT THEN;
    END;

    LOCAL PROCEDURE InsertJobWIPMethod@7(Code@1000 : Code[20];Description@1001 : Text[50];RecognizedCosts@1002 : Option;RecognizedSales@1003 : Option;SystemDefinedIndex@1004 : Integer);
    VAR
      JobWIPMethod@1005 : Record 1006;
    BEGIN
      JobWIPMethod.INIT;
      JobWIPMethod.Code := Code;
      JobWIPMethod.Description := Description;
      JobWIPMethod."WIP Cost" := TRUE;
      JobWIPMethod."WIP Sales" := TRUE;
      JobWIPMethod."Recognized Costs" := RecognizedCosts;
      JobWIPMethod."Recognized Sales" := RecognizedSales;
      JobWIPMethod.Valid := TRUE;
      JobWIPMethod."System Defined" := TRUE;
      JobWIPMethod."System-Defined Index" := SystemDefinedIndex;
      JobWIPMethod.INSERT;
    END;

    LOCAL PROCEDURE InsertBankExportImportSetup@16(CodeTxt@1000 : Text[20];NameTxt@1001 : Text[100];DirectionOpt@1002 : Option;CodeunitID@1003 : Integer;XMLPortID@1004 : Integer;CheckCodeunitID@1006 : Integer);
    VAR
      BankExportImportSetup@1005 : Record 1200;
    BEGIN
      WITH BankExportImportSetup DO BEGIN
        INIT;
        Code := CodeTxt;
        Name := NameTxt;
        Direction := DirectionOpt;
        "Processing Codeunit ID" := CodeunitID;
        "Processing XMLport ID" := XMLPortID;
        "Check Export Codeunit" := CheckCodeunitID;
        "Preserve Non-Latin Characters" := FALSE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertBankClearingStandard@12(CodeText@1001 : Text[50];DescriptionText@1002 : Text[80]);
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      WITH BankClearingStandard DO BEGIN
        INIT;
        Code := CodeText;
        Description := DescriptionText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertBankDataConversionPmtType@20(CodeText@1001 : Text[50];DescriptionText@1002 : Text[80]);
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      WITH BankDataConversionPmtType DO BEGIN
        INIT;
        Code := CodeText;
        Description := DescriptionText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertElectronicFormat@24(Code@1000 : Code[20];Description@1001 : Text[250];CodeunitID@1002 : Integer;Usage@1004 : Option);
    VAR
      ElectronicDocumentFormat@1003 : Record 61;
    BEGIN
      IF ElectronicDocumentFormat.GET(Code,Usage) THEN
        EXIT;

      ElectronicDocumentFormat.INIT;
      ElectronicDocumentFormat.Code := Code;
      ElectronicDocumentFormat.Description := Description;
      ElectronicDocumentFormat."Codeunit ID" := CodeunitID;
      ElectronicDocumentFormat.Usage := Usage;
      ElectronicDocumentFormat.INSERT;
    END;

    [Integration]
    LOCAL PROCEDURE OnCompanyInitialize@27();
    BEGIN
    END;

    BEGIN
    {
      NC PIF001 DP Вставка измерений, общих для всех фирм
      NC MDA01 MP Изменения в коде
    }
    END.
  }
}

