OBJECT Codeunit 50044 Calc Cupon & Conversation
{
  OBJECT-PROPERTIES
  {
    Date=21.02.11;
    Time=15:50:11;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text01@1000000000 : TextConst 'ENU=For FI %1 Last Date ACI is %2;RUS=По Фин. Инструменту %1 дата последнего начисления %2 больше "Отчетный Период Конечная Дата"';
      Text02@1000000001 : TextConst 'ENU=Not correct cost for date %1;RUS=На %1 расчет с-сти неактуален по %2 %3 %4';
      Text03@1000000002 : TextConst 'ENU=ACI by %2 not founded at %1;RUS=На %1 по %2 в ФИ Значениях не найден НКД';
      Text04@1000000003 : TextConst 'ENU=Not Principal For Conversation ID %1;RUS=По Конвертации ID %1 количество прихода основной суммы равно 0';
      Text05@1101495001 : TextConst 'ENU=Fin. Instrument - %1. Short position - %2. Quantity at %3 is 0.;RUS=Фин. Инструмент - %1 Короткая позиция - %2. Количество на %3 равно 0';
      EmptyStr@1101495000 : TextConst 'RUS=''''';
      FIValue@1101495002 : Record 50090;
      IsInicialized@1101495003 : Integer;

    PROCEDURE CouponAdjustment@1101495003(ToDate@1101495000 : Date;FINo@1101495001 : Code[10]);
    VAR
      FIValueEntry@1101495002 : Record 50107;
    BEGIN

      FIValueEntry.SETCURRENTKEY("FI No.", "FI Portfolio", "FI Posting Book", Reversed, "Posting Date",
                                 "Short Position", Positive, "Amount Type");
      //Определяем количество на начало дня
    END;

    PROCEDURE GetChargingACIatDate@1101495016(FINo@1101495000 : Code[20];FIPostingBook@1101495001 : Code[20];FIPortfolio@1101495002 : Code[20];ShortPosition@1101495003 : Boolean;GlobalDimValue1@1101495006 : Code[20];GlobalDimValue2@1101495007 : Code[20];ToDate@1101495004 : Date) RetValue : Decimal;
    VAR
      FIValueEntry@1101495005 : Record 50107;
    BEGIN
      // Возвращает сумму начисленного НКД на дату ToDate
      RetValue := 0;
      FIValueEntry.RESET;
      FIValueEntry.SETCURRENTKEY("FI No.", "FI Portfolio", "FI Posting Book", Reversed, "Posting Date",
                                 "Short Position", Positive, "Amount Type", "FI Entry Type",
                                 "Global Dimension 1 Code", "Global Dimension 2 Code");
      FIValueEntry.SETRANGE("FI No.", FINo);
      FIValueEntry.SETRANGE("FI Posting Book", FIPostingBook);
      FIValueEntry.SETRANGE("FI Portfolio", FIPortfolio);
      FIValueEntry.SETRANGE(Reversed, FALSE);
      FIValueEntry.SETRANGE("Amount Type", FIValueEntry."Amount Type"::Interest);
      FIValueEntry.SETRANGE("Short Position", ShortPosition);

      IF GlobalDimValue1 <> '' THEN
        FIValueEntry.SETRANGE("Global Dimension 1 Code", GlobalDimValue1);
      IF GlobalDimValue2 <> '' THEN
        FIValueEntry.SETRANGE("Global Dimension 2 Code", GlobalDimValue2);

      // 1. по всем операциям, предшествующим ToDate
      FIValueEntry.SETRANGE("Posting Date", 0D, ToDate - 1);
      FIValueEntry.CALCSUMS("Cupon Amount (CFI)");
      RetValue := FIValueEntry."Cupon Amount (CFI)";

      // 2. по операциям начисления / погашения на ToDate
      FIValueEntry.SETRANGE("Posting Date", ToDate);
      FIValueEntry.SETRANGE("FI Entry Type", FIValueEntry."FI Entry Type"::"Charging%");
      FIValueEntry.CALCSUMS("Cupon Amount (CFI)");
      RetValue += FIValueEntry."Cupon Amount (CFI)";

      EXIT(RetValue);
    END;

    PROCEDURE GetRepaymentACIatDate@1101495017(FINo@1101495004 : Code[20];FIPostingBook@1101495003 : Code[20];FIPortfolio@1101495002 : Code[20];ShortPosition@1101495001 : Boolean;GlobalDimValue1@1101495007 : Code[20];GlobalDimValue2@1101495006 : Code[20];ToDate@1101495000 : Date) RetValue : Decimal;
    VAR
      FIValueEntry@1101495005 : Record 50107;
    BEGIN
      // Возвращает сумму погашения НКД в дату ToDate
      RetValue := 0;
      FIValueEntry.RESET;
      FIValueEntry.SETCURRENTKEY("FI No.", "FI Portfolio", "FI Posting Book", Reversed, "Posting Date",
                                 "Short Position", Positive, "Amount Type", "FI Entry Type",
                                 "Global Dimension 1 Code", "Global Dimension 2 Code");
      FIValueEntry.SETRANGE("FI No.", FINo);
      FIValueEntry.SETRANGE("FI Posting Book", FIPostingBook);
      FIValueEntry.SETRANGE("FI Portfolio", FIPortfolio);
      FIValueEntry.SETRANGE(Reversed, FALSE);
      FIValueEntry.SETRANGE("Amount Type", FIValueEntry."Amount Type"::Interest);
      FIValueEntry.SETRANGE("Short Position", ShortPosition);

      IF GlobalDimValue1 <> '' THEN
        FIValueEntry.SETRANGE("Global Dimension 1 Code", GlobalDimValue1);
      IF GlobalDimValue2 <> '' THEN
        FIValueEntry.SETRANGE("Global Dimension 2 Code", GlobalDimValue2);

      FIValueEntry.SETRANGE("Posting Date", ToDate);
      FIValueEntry.SETRANGE("FI Entry Type", FIValueEntry."FI Entry Type"::"Repayment%");
      FIValueEntry.CALCSUMS("Cupon Amount (CFI)");
      RetValue := FIValueEntry."Cupon Amount (CFI)";

      EXIT(RetValue);
    END;

    PROCEDURE CreateGJLbyAccrualACI@1101495005(VAR GenJnlLine@1101495000 : Record 81);
    BEGIN
    END;

    PROCEDURE CaclConversationCost@1000000000(VAR SourceGenJnlLine@1000000001 : Record 81);
    VAR
      GenJnlLine@1101495007 : Record 81;
      FIValue@1000000003 : Record 50090;
      FIAvgCostEntryPoint@1000000004 : Record 50104;
      FILedgEntry@1000000005 : Record 50106;
      FIValueEntry@1000000006 : Record 50107;
      FI@1000000007 : Record 50021;
      Currency@1000000008 : Record 4;
      GenJnlLine2@1000000009 : Record 81;
      LastConversationID@1000000010 : Code[10];
      AllNeg@1000000011 : Decimal;
      ACIPos@1000000012 : Decimal;
      QtyPos@1000000013 : Decimal;
      RemQty@1101495002 : Decimal;
      ConvAmount@1101495003 : Decimal;
      ConvAmountLCY@1101495004 : Decimal;
      AmountRoundingPrecision@1000000014 : Decimal;
      AmountRoundingPrecisionLCY@1000000015 : Decimal;
      GLSetup@1000000016 : Record 98;
      ConvBalance@1000000017 : Decimal;
      TempConversAmount@1101495000 : TEMPORARY Record 50058;
      CurrExchRate@1101495001 : Record 330;
      FICalcAvgCost@1101495005 : Codeunit 50042;
      RecalcCost@1101495006 : Boolean;
    BEGIN
      CLEAR(TempConversAmount);
      TempConversAmount.DELETEALL;

      GenJnlLine.RESET;
      GenJnlLine.COPY(SourceGenJnlLine);
      GenJnlLine.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Conversation ID", "FI EntryType", "Amount Type");
      GenJnlLine.SETFILTER("Journal Template Name", SourceGenJnlLine."Journal Template Name");
      GenJnlLine.SETFILTER("Journal Batch Name", SourceGenJnlLine."Journal Batch Name");
      GenJnlLine.SETFILTER("Conversation ID", '<>%1', EmptyStr);
      GenJnlLine.SETRANGE(Conversation, TRUE);

      GLSetup.GET;
      AmountRoundingPrecisionLCY := GLSetup."Amount Rounding Precision";

      //  Подстановка себестоимости расходов
      GenJnlLine.SETRANGE("FI EntryType", GenJnlLine."FI EntryType"::"Negative Adjmt.");
      GenJnlLine.SETRANGE("Amount Type", GenJnlLine."Amount Type"::" ", GenJnlLine."Amount Type"::Principal);
      IF GenJnlLine.FIND('-') THEN
        REPEAT
          IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::"6" THEN BEGIN
            FI.GET(GenJnlLine."Account No.");
            IF FI."Currency of Nominal" IN ['', GLSetup."LCY Code"] THEN
              GenJnlLine.TESTFIELD("Currency Code", '')
            ELSE
              GenJnlLine.TESTFIELD("Currency Code", FI."Currency of Nominal");
            IF Currency.GET(FI."Currency of Nominal") THEN
              AmountRoundingPrecision := Currency."Amount Rounding Precision"
            ELSE
              AmountRoundingPrecision := AmountRoundingPrecisionLCY;

            GenJnlLine.TESTFIELD(Quantity);
            GenJnlLine.TESTFIELD("Conversation ID");

            // сначала проверим актуален ли расчет себестоимости на дату учета, если нет - делаем пересчет
            RecalcCost := FALSE;
            FIAvgCostEntryPoint.SETFILTER("Valuation Date", '<=%1', GenJnlLine."Posting Date");
            FIAvgCostEntryPoint.SETFILTER("FI No.", GenJnlLine."Account No.");
            FIAvgCostEntryPoint.SETFILTER("FI Portfolio", GenJnlLine."FI Portfolio");
            FIAvgCostEntryPoint.SETFILTER("FI Posting Book", GenJnlLine."FI Posting Book");
            IF FIAvgCostEntryPoint.FINDLAST THEN
              RecalcCost := NOT FIAvgCostEntryPoint."Cost Is Adjusted"
            ELSE
              RecalcCost := TRUE;

            IF RecalcCost THEN BEGIN
              FICalcAvgCost.CalcFIAvgCost(FI."No.", GenJnlLine."FI Portfolio", GenJnlLine."FI Posting Book",
                                          TRUE, GenJnlLine."Posting Date");
              {
              ERROR(Text02, GenJnlLine."Posting Date", GenJnlLine."Account No.",
                    GenJnlLine."FI Portfolio", GenJnlLine."FI Posting Book");
              }
            END;
            //>AKU
            {
            FILedgEntry.SETCURRENTKEY("FI No.","FI Posting Book","FI Portfolio","Amount Type");
            FILedgEntry.SETFILTER("FI No.", GenJnlLine."Account No.");
            FILedgEntry.SETRANGE("Posting Date", 0D, GenJnlLine."Posting Date");
            FILedgEntry.SETRANGE("Amount Type", GenJnlLine."Amount Type");
            FILedgEntry.SETFILTER("FI Posting Book", GenJnlLine."FI Posting Book");
            FILedgEntry.SETFILTER("FI Portfolio", GenJnlLine."FI Portfolio");
            FILedgEntry.CALCSUMS(Quantity);
            }
            //<AKU
            FIValueEntry.SETCURRENTKEY("FI No.","FI Portfolio","FI Posting Book",Reversed,"Posting Date",
                                       "Short Position", Positive, "Amount Type");
            FIValueEntry.SETRANGE("FI No.", FI."No.");
            FIValueEntry.SETRANGE("Posting Date", 0D, GenJnlLine."Posting Date");
            FIValueEntry.SETRANGE("Amount Type", FIValueEntry."Amount Type"::Principal);
            FIValueEntry.SETRANGE("FI Posting Book", GenJnlLine."FI Posting Book");
            FIValueEntry.SETRANGE("FI Portfolio", GenJnlLine."FI Portfolio");
            FIValueEntry.SETRANGE(Reversed, FALSE);
            FIValueEntry.SETRANGE("Short Position", GenJnlLine."Short Position");
            FIValueEntry.CALCSUMS("Cost Amount","Cost Amount (CFI)", "FI Ledger Entry Quantity");

            IF FIValueEntry."FI Ledger Entry Quantity" = 0 THEN
              ERROR(Text05, FI."No.", GenJnlLine."Short Position", GenJnlLine."Posting Date");

            GenJnlLine.VALIDATE(Amount,
               ROUND(GenJnlLine.Quantity * FIValueEntry."Cost Amount (CFI)" / FIValueEntry."FI Ledger Entry Quantity",
                     AmountRoundingPrecision));
            //GenJnlLine.VALIDATE("Amount (LCY)", ROUND(GenJnlLine.Quantity * FIValueEntry."Cost Amount" /
            //                            FILedgEntry.Quantity, AmountRoundingPrecisionLCY));
            GenJnlLine.MODIFY(TRUE);
          END;

          IF NOT TempConversAmount.GET(GenJnlLine."Conversation ID", 0D) THEN BEGIN
            TempConversAmount."No." := GenJnlLine."Conversation ID";
            TempConversAmount."Currency Ask" := GenJnlLine."Currency Code";
            TempConversAmount."Quoting Ask" := GenJnlLine.Amount;
            TempConversAmount."Quoting Bid" := GenJnlLine."Amount (LCY)";
            TempConversAmount.INSERT;
          END ELSE BEGIN
            TempConversAmount."Quoting Ask" += GenJnlLine.Amount;
            TempConversAmount."Quoting Bid" += GenJnlLine."Amount (LCY)";
            TempConversAmount.MODIFY;
          END;

        UNTIL GenJnlLine.NEXT = 0;

      //  Подстановка НКД расходов и приходов
      GenJnlLine.SETFILTER("FI EntryType", '%1|%2',
                           GenJnlLine."FI EntryType"::"Negative Adjmt.", GenJnlLine."FI EntryType"::"Positive Adjmt.");
      GenJnlLine.SETRANGE("Amount Type", GenJnlLine."Amount Type"::Interest);
      IF GenJnlLine.FIND('-') THEN
        REPEAT
          FI.GET(GenJnlLine."Account No.");
          IF FI."Currency of Nominal" IN ['', GLSetup."LCY Code"] THEN
            GenJnlLine.TESTFIELD("Currency Code", '')
          ELSE
            GenJnlLine.TESTFIELD("Currency Code", FI."Currency of Nominal");
          IF Currency.GET(FI."Currency of Nominal") THEN
            AmountRoundingPrecision := Currency."Amount Rounding Precision"
          ELSE
            AmountRoundingPrecision := AmountRoundingPrecisionLCY;

          GenJnlLine.TESTFIELD(Quantity);

          IF  NOT FIValue.GET(GenJnlLine."Account No.", FIValue."Type Value"::ACI, GenJnlLine."Posting Date") THEN
            ERROR(Text03, GenJnlLine."Posting Date", GenJnlLine."Account No.");
          GenJnlLine.VALIDATE(Amount, GenJnlLine.Quantity * FIValue.Value);

          GenJnlLine.MODIFY(TRUE);

          IF NOT TempConversAmount.GET(GenJnlLine."Conversation ID", 0D) THEN BEGIN
            TempConversAmount."No." := GenJnlLine."Account No.";
            TempConversAmount."Currency Ask" := GenJnlLine."Currency Code";
            TempConversAmount."Quoting Ask" := GenJnlLine.Amount;
            TempConversAmount."Quoting Bid" := GenJnlLine."Amount (LCY)";
            TempConversAmount.INSERT;
          END ELSE BEGIN
            TempConversAmount."Quoting Ask" += GenJnlLine.Amount;
            TempConversAmount."Quoting Bid" += GenJnlLine."Amount (LCY)";
            TempConversAmount.MODIFY;
          END;

      UNTIL GenJnlLine.NEXT = 0;


      // 3. Расчет сумм прихода в разрезе Conversation ID
      IF TempConversAmount.FINDSET(TRUE, FALSE) THEN BEGIN
        GenJnlLine.RESET;
        GenJnlLine.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Conversation ID", "FI EntryType", "Amount Type");
        GenJnlLine.SETFILTER("Journal Template Name", SourceGenJnlLine."Journal Template Name");
        GenJnlLine.SETFILTER("Journal Batch Name", SourceGenJnlLine."Journal Batch Name");
        GenJnlLine.SETRANGE(Conversation, TRUE);

        GenJnlLine.SETRANGE("FI EntryType", GenJnlLine."FI EntryType"::"Positive Adjmt.");
        GenJnlLine.SETFILTER("Amount Type", '<>%1', GenJnlLine."Amount Type"::Interest);

        REPEAT
          GenJnlLine.SETRANGE("Conversation ID", TempConversAmount."No.");

          // a. Обрабатываем дебетовые суммы не фин. инструментов (проводка по клиенту при частичном погашении)
          GenJnlLine.SETFILTER("Account Type", '<>%1',  GenJnlLine."Account Type"::"6");
          IF GenJnlLine.FINDSET THEN
            REPEAT
              TempConversAmount."Quoting Bid" += GenJnlLine."Amount (LCY)";

              CASE TRUE OF
                TempConversAmount."Currency Ask" = '' :
                  TempConversAmount."Quoting Ask" += GenJnlLine."Amount (LCY)";
                TempConversAmount."Currency Ask" = GenJnlLine."Currency Code" :
                  TempConversAmount."Quoting Ask" += GenJnlLine.Amount;
                ELSE BEGIN
                  Currency.GET(TempConversAmount."Currency Ask");
                  TempConversAmount."Quoting Ask" +=
                    ROUND(
                      CurrExchRate.ExchangeAmtLCYToFCY(
                        GenJnlLine."Posting Date", TempConversAmount."Currency Ask",
                        GenJnlLine."Amount (LCY)",
                        CurrExchRate.ExchangeRate(GenJnlLine."Posting Date", TempConversAmount."Currency Ask")),
                      Currency."Amount Rounding Precision")
                END;
              END;

            UNTIL GenJnlLine.NEXT = 0; // "Account Type" <> FI

          // b. Обрабатываем дебетовые суммы по фин. инструментам
          ConvAmount := TempConversAmount."Quoting Ask";    // Сумма прихода в валюте исходного фин. инструмента
          ConvAmountLCY := TempConversAmount."Quoting Bid"; // Сумма прихода в локальной валюте

          GenJnlLine.SETRANGE("Account Type", GenJnlLine."Account Type"::"6");
          // - определяем общее количество в приходе
          GenJnlLine2.COPY(GenJnlLine);
          {
          GenJnlLine2.SETRANGE("Account Type");
          GenJnlLine2.SETRANGE(Conversation);
          GenJnlLine2.CALCSUMS(GenJnlLine2.Quantity);
          }
          QtyPos := 0;
          IF GenJnlLine2.FINDSET THEN
            REPEAT
              QtyPos += GenJnlLine2.Quantity;
            UNTIL GenJnlLine2.NEXT = 0;
          RemQty := QtyPos;

          IF QtyPos <> 0 THEN
            // Распределяем сумму по конвертации
            IF GenJnlLine.FINDSET THEN BEGIN
              REPEAT

                FI.GET(GenJnlLine."Account No.");
                IF FI."Currency of Nominal" IN ['', GLSetup."LCY Code"] THEN
                  GenJnlLine.TESTFIELD("Currency Code", '')
                ELSE
                  GenJnlLine.TESTFIELD("Currency Code", FI."Currency of Nominal");
                IF Currency.GET(FI."Currency of Nominal") THEN
                  AmountRoundingPrecision := Currency."Amount Rounding Precision"
                ELSE
                  AmountRoundingPrecision := AmountRoundingPrecisionLCY;
                GenJnlLine.TESTFIELD(Quantity);

                  CASE TRUE OF
                    GenJnlLine."Currency Code" = '' :
                      BEGIN
                        GenJnlLine.VALIDATE(Amount,
                          ROUND(ConvAmountLCY * GenJnlLine.Quantity / QtyPos, AmountRoundingPrecision));
                        IF TempConversAmount."Currency Ask" = '' THEN
                          TempConversAmount."Quoting Ask" += GenJnlLine.Amount;
                      END;

                    GenJnlLine."Currency Code" = TempConversAmount."Currency Ask" :
                      BEGIN
                        GenJnlLine.VALIDATE(Amount,
                          ROUND(ConvAmount * GenJnlLine.Quantity / QtyPos, AmountRoundingPrecision));
                        TempConversAmount."Quoting Ask" += GenJnlLine.Amount;
                      END;

                    ELSE BEGIN
                      // Пересчет в валюту фин. инструмента прихода
                      GenJnlLine.VALIDATE(Amount,
                        ROUND(
                          CurrExchRate.ExchangeAmtLCYToFCY(
                            GenJnlLine."Posting Date", GenJnlLine."Currency Code",
                            ConvAmountLCY * GenJnlLine.Quantity / QtyPos,
                             CurrExchRate.ExchangeRate(GenJnlLine."Posting Date", GenJnlLine."Currency Code")),
                          AmountRoundingPrecision));
                    END;
                  END;  // CASE

                IF GenJnlLine."Currency Code" <> TempConversAmount."Currency Ask" THEN BEGIN
                // Расчитываем остаток в валюте исходного фин. инструмента
                  Currency.GET(TempConversAmount."Currency Ask");
                  TempConversAmount."Quoting Ask" +=
                    ROUND(
                      CurrExchRate.ExchangeAmtLCYToFCY(
                        GenJnlLine."Posting Date", TempConversAmount."Currency Ask",
                        GenJnlLine."Amount (LCY)",
                        CurrExchRate.ExchangeRate(GenJnlLine."Posting Date", TempConversAmount."Currency Ask")),
                      Currency."Amount Rounding Precision")
                END;

                TempConversAmount."Quoting Bid" += GenJnlLine."Amount (LCY)";

                RemQty -= GenJnlLine.Quantity;
                IF (RemQty = 0) AND (ROUND(TempConversAmount."Quoting Bid", AmountRoundingPrecision) <> 0.0) THEN BEGIN
                // Последняя операция прихода от конвертации. Корректируем последнюю операцию на погрешность округления
                  CASE TRUE OF
                    GenJnlLine."Currency Code" = '' :
                      BEGIN
                        GenJnlLine.VALIDATE(Amount, GenJnlLine.Amount - ROUND(TempConversAmount."Quoting Bid", AmountRoundingPrecision));
                      END;

                    GenJnlLine."Currency Code" = TempConversAmount."Currency Ask" :
                      BEGIN
                        GenJnlLine.VALIDATE(Amount, GenJnlLine.Amount - ROUND(TempConversAmount."Quoting Ask", AmountRoundingPrecision));
                      END;

                    ELSE BEGIN
                      // Пересчет в валюту фин. инструмента прихода
                      GenJnlLine.VALIDATE(Amount, GenJnlLine.Amount -
                        ROUND(
                          CurrExchRate.ExchangeAmtLCYToFCY(
                            GenJnlLine."Posting Date", GenJnlLine."Currency Code",
                            TempConversAmount."Quoting Bid",
                             CurrExchRate.ExchangeRate(GenJnlLine."Posting Date", GenJnlLine."Currency Code")),
                          AmountRoundingPrecision));
                    END;
                  END;  // CASE

                END;

                GenJnlLine.MODIFY;

              UNTIL GenJnlLine.NEXT = 0; // "Account Type" <> FI

            END; // IF GenJnlLine.FINDSET

        UNTIL TempConversAmount.NEXT = 0;
      END;

      {
      k-------------------------------------------------
      LastConversationID := '';
      GenJnlLine.SETCURRENTKEY("Conversation ID");
      GenJnlLine.SETRANGE("FI EntryType", GenJnlLine."FI EntryType"::"Positive Adjmt.");
      GenJnlLine.SETRANGE("Amount Type", GenJnlLine."Amount Type"::Principal);
      IF GenJnlLine.FIND('-') THEN REPEAT
        FI.GET(GenJnlLine."Account No.");
        IF FI."Currency of Nominal" IN ['', GLSetup."LCY Code"] THEN
          GenJnlLine.TESTFIELD("Currency Code", '')
        ELSE
          GenJnlLine.TESTFIELD("Currency Code", FI."Currency of Nominal");
        IF Currency.GET(FI."Currency of Nominal") THEN
          AmountRoundingPrecision := Currency."Amount Rounding Precision"
        ELSE
          AmountRoundingPrecision := AmountRoundingPrecisionLCY;
        GenJnlLine.TESTFIELD(Quantity);

        IF GenJnlLine."Conversation ID" <> LastConversationID THEN BEGIN
          GenJnlLine2.SETCURRENTKEY("Conversation ID");
          GenJnlLine2.SETFILTER("Journal Template Name", JnlTemplName);
          GenJnlLine2.SETFILTER("Journal Batch Name", JnlBatchlName);
          GenJnlLine2.SETFILTER("Conversation ID", GenJnlLine."Conversation ID");
          GenJnlLine2.SETRANGE("FI EntryType", GenJnlLine2."FI EntryType"::"Negative Adjmt.");
          GenJnlLine2.CALCSUMS(Amount, "Amount (LCY)");
          AllNeg := GenJnlLine2.Amount;

          GenJnlLine2.SETRANGE("FI EntryType", GenJnlLine2."FI EntryType"::"Positive Adjmt.");
          GenJnlLine2.SETRANGE("Amount Type", GenJnlLine2."Amount Type"::Interest);
          GenJnlLine2.CALCSUMS(GenJnlLine2.Amount);
          ACIPos := GenJnlLine2.Amount;

          GenJnlLine2.SETRANGE("Amount Type", GenJnlLine2."Amount Type"::Principal);
          GenJnlLine2.CALCSUMS(GenJnlLine2.Quantity);
          QtyPos := GenJnlLine2.Quantity;
          IF QtyPos = 0 THEN
            ERROR(Text04, GenJnlLine."Conversation ID");
        END;

        GenJnlLine.VALIDATE(Amount, ROUND(GenJnlLine.Quantity*(-AllNeg - ACIPos)/QtyPos, AmountRoundingPrecision));

        LastConversationID := GenJnlLine."Conversation ID";
        GenJnlLine.MODIFY(TRUE);

      UNTIL GenJnlLine.NEXT = 0;


      // 4. Исправление погрешностей выравнивания по Conversation ID
      GenJnlLine2.RESET;
      LastConversationID := '';
      GenJnlLine.SETCURRENTKEY("Conversation ID");
      GenJnlLine.SETRANGE("FI EntryType", GenJnlLine."FI EntryType"::"Positive Adjmt.");
      GenJnlLine.SETRANGE("Amount Type", GenJnlLine."Amount Type"::Principal);
      IF GenJnlLine.FIND('-') THEN REPEAT
        IF GenJnlLine."Conversation ID" <> LastConversationID THEN BEGIN
          GenJnlLine2.SETCURRENTKEY("Conversation ID");
          GenJnlLine2.SETFILTER("Conversation ID",GenJnlLine."Conversation ID");
          GenJnlLine2.SETFILTER("Journal Template Name", JnlTemplName);
          GenJnlLine2.SETFILTER("Journal Batch Name", JnlBatchlName);
          GenJnlLine2.CALCSUMS(Amount);
          ConvBalance := GenJnlLine2.Amount;
          IF ConvBalance <> 0 THEN
            GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
            IF GenJnlLine2.FINDLAST THEN BEGIN
              GenJnlLine2.VALIDATE(Amount, GenJnlLine2.Amount-ConvBalance);
              GenJnlLine2.MODIFY(TRUE);
            END;
        END;
        LastConversationID := GenJnlLine."Conversation ID";
      UNTIL GenJnlLine.NEXT = 0;
      }
    END;

    PROCEDURE GetCoupon@1101495000(ToDate@1101495001 : Date;FINo@1101495000 : Code[20]) : Decimal;
    BEGIN
      //Возвращает ставку купона на дату. При отсутствии - -1
      IF FIValue.GET(FINo, FIValue."Type Value"::ACI, ToDate) THEN
        EXIT(FIValue.Value)
      ELSE
        EXIT(-1)
    END;

    PROCEDURE IsACIPaymentDate@1101495001(ToDate@1101495000 : Date;FINo@1101495001 : Code[20]) : Boolean;
    BEGIN
      //Возвращает TRUE, если дата ToDate является плановой датой выплаты купона
      IF (FIValue."FI No." = FINo) AND
         (FIValue."Type Value" = FIValue."Type Value"::ACI) AND
         (FIValue."Start Date" = ToDate) THEN
        EXIT(FIValue."Plan Payment Date")
      ELSE
        IF FIValue.GET(FINo, FIValue."Type Value"::ACI, ToDate) THEN
          EXIT(FIValue."Plan Payment Date");

      EXIT(FALSE);
    END;

    BEGIN
    {
      NCMTF02 II Новый кодеюнит
    }
    END.
  }
}

