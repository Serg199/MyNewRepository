OBJECT Codeunit 50058 Load One Deal Entry
{
  OBJECT-PROPERTIES
  {
    Date=10.07.13;
    Time=16:30:31;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=50063;
    OnRun=BEGIN
            GLSetup.GET;
            MovingDataSetup.GET;
            isOK := TRUE;
            RecID := "Record ID";
            IF RecID.TABLENO = 0 THEN
              ERROR(Text001);

            RecRef.OPEN(RecID.TABLENO,FALSE,"Company No.");
            RecRef.GET("Record ID");
            RecRef.SETTABLE(PreBuffer);

            ConsSource.GET(Processor);

            IF PreBuffer."Time Creation" = CREATEDATETIME(0D,0T) THEN BEGIN
              ErrorJournal.AddErrorPreBuferDealEntry("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                            Processor,"Cons. Register",
                                            'EDB02',STRSUBSTNO(TextEDB02,PreBuffer.FIELDCAPTION("Time Creation")),COMPANYNAME,PreBuffer,
                                            "Line No.");
              isOK := FALSE;
            END;
            IF PreBuffer."Document ID" = '' THEN BEGIN
              ErrorJournal.AddErrorPreBuferDealEntry("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                            Processor,"Cons. Register",
                                            'EDB02',STRSUBSTNO(TextEDB02,PreBuffer.FIELDCAPTION("Document ID")),COMPANYNAME,PreBuffer,
                                            "Line No.");
              isOK := FALSE;
            END;

            IF PreBuffer."Deal Type" = '' THEN BEGIN
              ErrorJournal.AddErrorPreBuferDealEntry("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                            Processor,"Cons. Register",
                                            'EDB02',STRSUBSTNO(TextEDB02,PreBuffer.FIELDCAPTION("Deal Type")),COMPANYNAME,PreBuffer,
                                            "Line No.");
              isOK := FALSE;
            END;

            IF NOT DealType.GET(PreBuffer."Deal Type") THEN BEGIN
              ErrorJournal.AddErrorPreBuferDealEntry("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                            Processor,"Cons. Register",
                                            'EDB17',STRSUBSTNO(TextEDB17,PreBuffer.TABLECAPTION,
                                                                         STRSUBSTNO(Text009,DealType.TABLECAPTION,PreBuffer."Deal Type")),
                                            COMPANYNAME,PreBuffer,"Line No.");
              isOK := FALSE;
            END;

            IF PreBuffer."Event Code" = '' THEN BEGIN
              ErrorJournal.AddErrorPreBuferDealEntry("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                            Processor,"Cons. Register",
                                            'EDB02',STRSUBSTNO(TextEDB02,PreBuffer.FIELDCAPTION("Event Code")),COMPANYNAME,PreBuffer,
                                            "Line No.");
              isOK := FALSE;
            END;

            IF NOT isOK THEN BEGIN
              PreBuffer."Time Complete" := CURRENTDATETIME;
              PreBuffer.Status := PreBuffer.Status::"Processing Canceled";
              PreBuffer.MODIFY;
              EXIT;
            END;

            Buffer.SETRANGE("Cons. Source Code",Processor);
            Buffer.SETRANGE("Document ID",PreBuffer."Document ID");
            Buffer.SETRANGE(Removed, FALSE);
            Buffer.SETRANGE("Remove Oper. No", 0);
            //Buffer.SETRANGE(Reposted, FALSE);
            isFind := Buffer.FINDLAST;


            IF MovingDataSetup."Exact Processing Change" THEN
              CASE TRUE OF

                (PreBuffer.Type = PreBuffer.Type::New) AND NOT isFind :
                  isOK := TRUE;

                (PreBuffer.Type = PreBuffer.Type::New) AND isFind :
                  BEGIN
                    CodeError := 'EDB03';
                    TextError := STRSUBSTNO(TextEDB03,PreBuffer.Type);
                    isOK := FALSE;
                  END;

                (PreBuffer.Type = PreBuffer.Type::Modify) AND NOT isFind :
                  BEGIN
                    CodeError := 'EDB10';
                    TextError := STRSUBSTNO(TextEDB10,PreBuffer.Type);
                    isOK := FALSE;
                  END;

                (PreBuffer.Type = PreBuffer.Type::Modify) AND isFind :
                  isOK := TRUE;

                (PreBuffer.Type = PreBuffer.Type::Delete) AND NOT isFind :
                  BEGIN
                    CodeError := 'EDB10';
                    TextError := STRSUBSTNO(TextEDB10,PreBuffer.Type);
                    isOK := FALSE;
                  END;

                (PreBuffer.Type = PreBuffer.Type::Delete) AND isFind :
                  isOK := TRUE;

              END
            ELSE
              CASE TRUE OF

                (PreBuffer.Type = PreBuffer.Type::New) AND NOT isFind :
                  isOK := TRUE;

                (PreBuffer.Type = PreBuffer.Type::New) AND isFind :
                  BEGIN
                    CodeError := 'EDB03';
                    TextError := STRSUBSTNO(TextEDB03,PreBuffer.Type);
                    isOK := FALSE;
                  END;

                (PreBuffer.Type = PreBuffer.Type::Modify) AND NOT isFind :
                  BEGIN
                    CodeError := 'EDB08';
                    TextError := STRSUBSTNO(TextEDB08,PreBuffer.Type);
                    isOK := TRUE;
                  END;

                (PreBuffer.Type = PreBuffer.Type::Modify) AND isFind :
                  isOK := TRUE;

                (PreBuffer.Type = PreBuffer.Type::Delete) AND NOT isFind :
                  BEGIN
                    CodeError := 'EDB10';
                    TextError := STRSUBSTNO(TextEDB10,PreBuffer.Type);
                    isOK := FALSE;
                  END;

                (PreBuffer.Type = PreBuffer.Type::Delete) AND isFind :
                  isOK := TRUE;

              END;

            IF isOK THEN BEGIN
              IF TextError <> '' THEN BEGIN
                IF isFind THEN
                  ErrorJournal.AddErrorPreBuferBufferDealEntr("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Warning,
                                                Processor,"Cons. Register",
                                                CodeError,TextError,COMPANYNAME,PreBuffer,Buffer,"Line No.")
                ELSE
                  ErrorJournal.AddErrorPreBuferDealEntry("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Warning,
                                                Processor,"Cons. Register",
                                                CodeError,TextError,COMPANYNAME,PreBuffer,"Line No.");
              END;
              CASE PreBuffer.Type OF
                PreBuffer.Type::New :
                  CopyPreBuffer2Buffer(PreBuffer, BufferNew, 0,
                                       "Begin Entry No.", "Last Entry No.", ConsSource, "Cons. Register");
                PreBuffer.Type::Modify :
                  IF isFind THEN BEGIN
                    IF Buffer."Export Consolidation Register" > 0 THEN BEGIN
                       //Найденная строка в буфере уже перенесена в Navision или является изменяющей или выгружена операция по ОС
                      Buffer.Reposted := TRUE;
                      Buffer.MODIFY;
                    END ELSE BEGIN
                      //Найденная строка в буфере еще не переносилась в Navision
                      Buffer.Reposted := TRUE;
                      Buffer."Not Translate" := TRUE;
                      Buffer.MODIFY;
                    END;
                    CopyPreBuffer2Buffer(PreBuffer, BufferNew, Buffer."Entry No.",
                                         "Begin Entry No.", "Last Entry No.", ConsSource, "Cons. Register");
                  END ELSE
                    CopyPreBuffer2Buffer(PreBuffer, BufferNew, 0,
                                         "Begin Entry No.", "Last Entry No.", ConsSource, "Cons. Register");
                PreBuffer.Type::Delete :
                  BEGIN
                    CopyBuffer2Buffer(PreBuffer, Buffer, BufferNew,
                                      "Begin Entry No.", "Last Entry No.", ConsSource, "Cons. Register",
                                      (Buffer."Export Consolidation Register" = 0) AND (Buffer."Source Operation No." = 0));

                    Buffer."Remove Oper. No" := BufferNew."Entry No.";
                    IF Buffer."Export Consolidation Register" = 0 THEN
                      Buffer."Remove Oper. No" := BufferNew."Entry No.";
                      Buffer."Not Translate" := TRUE;
                    Buffer.MODIFY;
                  END;
              END;

              PreBuffer."Time Complete" := CURRENTDATETIME;
              PreBuffer.Status := PreBuffer.Status::"Processing Complete";
              PreBuffer.MODIFY;

              // помечаются ранние ошибочные операции
              PreBuffer2.RESET;
              PreBuffer2.SETRANGE("Id Legal Entity",PreBuffer."Id Legal Entity");
              PreBuffer2.SETRANGE("Id External System",PreBuffer."Id External System");
              PreBuffer2.SETRANGE(Status,PreBuffer.Status::"Processing Canceled");
              PreBuffer2.SETRANGE("Document ID",PreBuffer."Document ID");
              PreBuffer2.SETFILTER("Entry No.",'<%1',PreBuffer."Entry No.");
              IF PreBuffer2.FINDSET THEN REPEAT
                IF PreBuffer3.GET(PreBuffer2."Entry No.") THEN BEGIN
                  PreBuffer3."Time Complete" := CURRENTDATETIME;
                  PreBuffer3.Status := PreBuffer.Status::"Canceled Automatic";
                  PreBuffer3.MODIFY;
                END;
              UNTIL PreBuffer2.NEXT = 0;
            END ELSE BEGIN
              IF isFind THEN
                ErrorJournal.AddErrorPreBuferBufferDealEntr("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                                    Processor,"Cons. Register",
                                                    CodeError,TextError,COMPANYNAME,PreBuffer,Buffer,"Line No.")
              ELSE
                ErrorJournal.AddErrorPreBuferDealEntry("Company No.",ErrorJournal."Error Group"::Load,ErrorJournal.Type::Error,
                                              Processor,"Cons. Register",
                                              CodeError,TextError,COMPANYNAME,PreBuffer,"Line No.");

              PreBuffer."Time Complete" := CURRENTDATETIME;
              PreBuffer.Status := PreBuffer.Status::"Processing Canceled";
              PreBuffer.MODIFY;

            END;

            isOK := TRUE;
          END;

  }
  CODE
  {
    VAR
      MovingDataSetup@1101495020 : Record 50064;
      GLSetup@1000000001 : Record 98;
      ConsSource@1101495023 : Record 50001;
      RecID@1101495000 : RecordID;
      RecRef@1101495001 : RecordRef;
      PreBuffer@1101495002 : Record 50153;
      Text001@1101495003 : TextConst 'ENU=Wrong identifier to record;RUS=Неправильный идентификатор записи';
      Text009@1101495011 : TextConst 'ENU=Can not find an element of the directory %1 with code %2.;RUS=Не найден элемент справочника %1 с кодом %2.';
      TextEDB01@1000000006 : TextConst 'ENU=In the process of implementation %1 unclassified error occurred. %2 Processing stopped.;RUS=В процессе выполнения %1 возникла ошибка. %2 Обработка прекращена.';
      TextEDB02@1101495015 : TextConst 'ENU=In the Buffer of Loading %1 submitted incomplete data. Please enter %2. Record not processed.;RUS=В Буфере Загрузки Операций по Сделкам переданы не полные данные. Не заполнено поле %1. Запись не обработана.';
      TextEDB03@1101495014 : TextConst 'ENU=In the Buffer of Loading operations handed treatment of type %1 for the operation. In NAV is an operation with the UID. Record not processed.;RUS=В Буфере Загрузки Операций по Сделкам передан тип обработки %1 для операции. В NAV есть операция с таким UID. Действие было пропущено.';
      TextEDB04@1101495013 : TextConst 'ENU="In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. Record not processed.";RUS="В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. Действие было пропущено. "';
      TextEDB08@1101495009 : TextConst 'ENU=Warning. In the Buffer of Loading of deal operations the type of processing %1 for operation. In NAV there is no operation with such UID.;RUS=Предупреждение. В Буфере Загрузки Операций по Сделкам передан тип обработки %1 для операции. В NAV нет операции с таким UID.';
      TextEDB09@1101495008 : TextConst 'ENU="Warning. In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is an element of the directory with this code.";RUS="Предупреждение. В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. В NAV есть элемент справочника с таким кодом."';
      TextEDB10@1101495007 : TextConst 'ENU=In the Buffer of Loading deal operations handed treatment of type %1 for the operation. In NAV no operation with the UID.;RUS=В Буфере Загрузки операций по Сделкам передан тип обработки %1 для операции. В NAV нет операции с таким UID.';
      TextEDB11@1101495006 : TextConst 'ENU="Warning. In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is no element with such a code book.";RUS="Предупреждение. В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. В NAV нет элемента справочника с таким кодом."';
      TextEDB12@1101495005 : TextConst 'ENU="In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is an element of the directory with this code. Record not processed.";RUS="В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. В NAV есть элемент справочника с таким кодом. Действие было пропущено. "';
      TextEDB13@1101495004 : TextConst 'ENU="In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is no element with such a code book. Record not processed.";RUS="В Буфере Загрузки справочника %1 передан тип обработки %2 для справочника %3 Код=%4. В NAV нет элемента справочника с таким кодом. Действие было пропущено. "';
      PreBuffer2@1000000007 : Record 50153;
      PreBuffer3@1000000008 : Record 50153;
      CodeError@1000000005 : Code[10];
      TextError@1101495021 : Text[250];
      ErrorJournal@1101495017 : Record 50023;
      Buffer@1101495018 : Record 50155;
      BufferNew@1101495022 : Record 50155;
      isFind@1101495019 : Boolean;
      CurrConsCode@1000000002 : Code[10];
      Currency@1000000003 : Record 4;
      TextEDB17@1101495012 : TextConst 'ENU=In the Buffer of Loading %1 submitted incomplete data. %2 Record not processed.;RUS=В Буфере Загрузки %1 переданы не полные данные. %2 Запись не обработана.';
      TextEDB19@1000000004 : TextConst 'ENU=In the Buffer of Loading deal operations the value of field %1 must be equal to the value of field %2.;RUS=В Буфере Загрузки Операций по Сделкам величина в поле %1 должна быть равна величине в поле %2.';
      TextEDB20@1000000009 : TextConst 'ENU=In the Buffer of Loading operations the value have different signs.;RUS=В Буфер Загрузки суммы разных знаков.';
      TextEDB21@1101495016 : TextConst 'ENU=In the Buffer of Loading Null Amount and Not Null Original Amount.;RUS=В Буфер Загрузки нулевая сумма в локальной валюте и ненулевая в оригинальной.';
      CurrencyExchangeRate@1101495027 : Record 330;
      DtCurrencyCode@1101495026 : Code[10];
      CtCurrencyCode@1101495025 : Code[10];
      CurrencyCode1@1101495024 : Code[10];
      DealType@1101495010 : Record 50038;

    PROCEDURE CopyPreBuffer2Buffer@1210030(VAR PreBuffer@1210001 : Record 50153;VAR BufferNew@1210000 : Record 50155;SourceEntryNo@1101495002 : Integer;VAR BeginEntryNo@1101495001 : Integer;VAR LastEntryNo@1210002 : Integer;ConsSource@1101495000 : Record 50001;RegisterNo@1000000000 : Integer);
    VAR
      PreBuffeDataSet@1101495003 : Record 50154;
      PreBuffeDataSet2@1101495007 : Record 50154;
      BuffeDataSet@1101495004 : Record 50156;
      BuffeDataSet2@1101495008 : Record 50156;
      FI@1101495005 : Record 50021;
      Deal@1101495006 : Record 50037;
    BEGIN
      IF LastEntryNo = 0 THEN BEGIN
        BufferNew.SETRANGE("Cons. Source Code",ConsSource.Code);
        IF BufferNew.FINDLAST THEN
          LastEntryNo := BufferNew."Entry No.";
        BufferNew.RESET;
      END;
      LastEntryNo += 1;

      BufferNew.INIT;
      BufferNew.TRANSFERFIELDS(PreBuffer,FALSE);
      BufferNew."Cons. Source Code" := ConsSource.Code;
      BufferNew."Entry No." := LastEntryNo;
      BufferNew."Source Operation No." := SourceEntryNo;
      BufferNew."Export Cons. Source Code" := ConsSource."Export Cons. Source";
      BufferNew."Consolidation Register" := RegisterNo;
      BufferNew."PreBuffer Entry No." := PreBuffer."Entry No.";
      IF SourceEntryNo = 0 THEN
        BufferNew.Type := BufferNew.Type::New
      ELSE
        BufferNew.Type := BufferNew.Type::Modify;

      IF (BufferNew."FI ID" <> '') AND (BufferNew."FI No." <> BufferNew."FI ID") THEN BEGIN
        FI.RESET;
        FI.SETRANGE("Rec ID",BufferNew."FI ID");
        IF FI.FINDFIRST THEN
          BufferNew."FI No." := FI."No.";
      END;
      IF (BufferNew."Deal ID" <> '') AND (BufferNew."Deal No." <> BufferNew."Deal ID") THEN BEGIN
        Deal.RESET;
        Deal.SETRANGE("Rec ID",BufferNew."Deal ID");
        IF Deal.FINDFIRST THEN
          BufferNew."Deal No." := Deal."Deal ID";
      END;


      BufferNew."Debit Dimension 1 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 1 Code",
                                                                   PreBuffer."Debit Dimension 1 Value Code",
                                                                   PreBuffer."Debit Dimension 1 Value ID");
      BufferNew."Credit Dimension 1 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 1 Code",
                                                                    PreBuffer."Credit Dimension 1 Value Code",
                                                                    PreBuffer."Credit Dimension 1 Value ID");

      BufferNew."Debit Dimension 2 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 2 Code",
                                                                   PreBuffer."Debit Dimension 2 Value Code",
                                                                   PreBuffer."Debit Dimension 2 Value ID");
      BufferNew."Credit Dimension 2 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 2 Code",
                                                                    PreBuffer."Credit Dimension 2 Value Code",
                                                                    PreBuffer."Credit Dimension 2 Value ID");

      BufferNew."Debit Dimension 3 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 3 Code",
                                                                   PreBuffer."Debit Dimension 3 Value Code",
                                                                   PreBuffer."Debit Dimension 3 Value ID");
      BufferNew."Credit Dimension 3 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 3 Code",
                                                                    PreBuffer."Credit Dimension 3 Value Code",
                                                                    PreBuffer."Credit Dimension 3 Value ID");

      BufferNew."Debit Dimension 4 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 4 Code",
                                                                   PreBuffer."Debit Dimension 4 Value Code",
                                                                   PreBuffer."Debit Dimension 4 Value ID");
      BufferNew."Credit Dimension 4 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 4 Code",
                                                                    PreBuffer."Credit Dimension 4 Value Code",
                                                                    PreBuffer."Credit Dimension 4 Value ID");

      BufferNew."Debit Dimension 5 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 5 Code",
                                                                   PreBuffer."Debit Dimension 5 Value Code",
                                                                   PreBuffer."Debit Dimension 5 Value ID");
      BufferNew."Credit Dimension 5 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 5 Code",
                                                                    PreBuffer."Credit Dimension 5 Value Code",
                                                                    PreBuffer."Credit Dimension 5 Value ID");

      BufferNew."Debit Dimension 6 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 6 Code",
                                                                   PreBuffer."Debit Dimension 6 Value Code",
                                                                   PreBuffer."Debit Dimension 6 Value ID");
      BufferNew."Credit Dimension 6 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 6 Code",
                                                                    PreBuffer."Credit Dimension 6 Value Code",
                                                                    PreBuffer."Credit Dimension 6 Value ID");

      BufferNew."Debit Dimension 7 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 7 Code",
                                                                   PreBuffer."Debit Dimension 7 Value Code",
                                                                   PreBuffer."Debit Dimension 7 Value ID");
      BufferNew."Credit Dimension 7 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 7 Code",
                                                                    PreBuffer."Credit Dimension 7 Value Code",
                                                                    PreBuffer."Credit Dimension 7 Value ID");

      BufferNew."Debit Dimension 8 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 8 Code",
                                                                   PreBuffer."Debit Dimension 8 Value Code",
                                                                   PreBuffer."Debit Dimension 8 Value ID");
      BufferNew."Credit Dimension 8 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 8 Code",
                                                                    PreBuffer."Credit Dimension 8 Value Code",
                                                                    PreBuffer."Credit Dimension 8 Value ID");

      BufferNew."Debit Dimension 9 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 9 Code",
                                                                   PreBuffer."Debit Dimension 9 Value Code",
                                                                   PreBuffer."Debit Dimension 9 Value ID");
      BufferNew."Credit Dimension 9 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 9 Code",
                                                                    PreBuffer."Credit Dimension 9 Value Code",
                                                                    PreBuffer."Credit Dimension 9 Value ID");

      BufferNew."Debit Dimension 10 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 10 Code",
                                                                   PreBuffer."Debit Dimension 10 Value Code",
                                                                   PreBuffer."Debit Dimension 10 Value ID");
      BufferNew."Credit Dimension 10 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 10 Code",
                                                                    PreBuffer."Credit Dimension 10 Value Code",
                                                                    PreBuffer."Credit Dimension 10 Value ID");

      BufferNew."Debit Dimension 11 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 11 Code",
                                                                   PreBuffer."Debit Dimension 11 Value Code",
                                                                   PreBuffer."Debit Dimension 11 Value ID");
      BufferNew."Credit Dimension 11 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 11 Code",
                                                                    PreBuffer."Credit Dimension 11 Value Code",
                                                                    PreBuffer."Credit Dimension 11 Value ID");

      BufferNew."Debit Dimension 12 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 12 Code",
                                                                   PreBuffer."Debit Dimension 12 Value Code",
                                                                   PreBuffer."Debit Dimension 12 Value ID");
      BufferNew."Credit Dimension 12 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 12 Code",
                                                                    PreBuffer."Credit Dimension 12 Value Code",
                                                                    PreBuffer."Credit Dimension 12 Value ID");

      BufferNew."Debit Dimension 13 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 13 Code",
                                                                   PreBuffer."Debit Dimension 13 Value Code",
                                                                   PreBuffer."Debit Dimension 13 Value ID");
      BufferNew."Credit Dimension 13 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 13 Code",
                                                                    PreBuffer."Credit Dimension 13 Value Code",
                                                                    PreBuffer."Credit Dimension 13 Value ID");

      BufferNew."Debit Dimension 14 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 14 Code",
                                                                   PreBuffer."Debit Dimension 14 Value Code",
                                                                   PreBuffer."Debit Dimension 14 Value ID");
      BufferNew."Credit Dimension 14 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 14 Code",
                                                                    PreBuffer."Credit Dimension 14 Value Code",
                                                                    PreBuffer."Credit Dimension 14 Value ID");

      BufferNew."Debit Dimension 15 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 15 Code",
                                                                   PreBuffer."Debit Dimension 15 Value Code",
                                                                   PreBuffer."Debit Dimension 15 Value ID");
      BufferNew."Credit Dimension 15 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 15 Code",
                                                                    PreBuffer."Credit Dimension 15 Value Code",
                                                                    PreBuffer."Credit Dimension 15 Value ID");

      BufferNew."Debit Dimension 16 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 16 Code",
                                                                   PreBuffer."Debit Dimension 16 Value Code",
                                                                   PreBuffer."Debit Dimension 16 Value ID");
      BufferNew."Credit Dimension 16 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 16 Code",
                                                                    PreBuffer."Credit Dimension 16 Value Code",
                                                                    PreBuffer."Credit Dimension 16 Value ID");

      BufferNew."Debit Dimension 17 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 17 Code",
                                                                   PreBuffer."Debit Dimension 17 Value Code",
                                                                   PreBuffer."Debit Dimension 17 Value ID");
      BufferNew."Credit Dimension 17 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 17 Code",
                                                                    PreBuffer."Credit Dimension 17 Value Code",
                                                                    PreBuffer."Credit Dimension 17 Value ID");

      BufferNew."Debit Dimension 18 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 18 Code",
                                                                   PreBuffer."Debit Dimension 18 Value Code",
                                                                   PreBuffer."Debit Dimension 18 Value ID");
      BufferNew."Credit Dimension 18 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 18 Code",
                                                                    PreBuffer."Credit Dimension 18 Value Code",
                                                                    PreBuffer."Credit Dimension 18 Value ID");

      BufferNew."Debit Dimension 19 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 19 Code",
                                                                   PreBuffer."Debit Dimension 19 Value Code",
                                                                   PreBuffer."Debit Dimension 19 Value ID");
      BufferNew."Credit Dimension 19 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 19 Code",
                                                                    PreBuffer."Credit Dimension 19 Value Code",
                                                                    PreBuffer."Credit Dimension 19 Value ID");

      BufferNew."Debit Dimension 20 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 20 Code",
                                                                   PreBuffer."Debit Dimension 20 Value Code",
                                                                   PreBuffer."Debit Dimension 20 Value ID");
      BufferNew."Credit Dimension 20 Value Code" := GetDimCodeFromID(ConsSource."Shortcut Dimension 20 Code",
                                                                    PreBuffer."Credit Dimension 20 Value Code",
                                                                    PreBuffer."Credit Dimension 20 Value ID");
      BufferNew.INSERT(TRUE);
      PreBuffeDataSet.RESET;
      PreBuffeDataSet.SETRANGE("Entry No.",PreBuffer."Entry No.");
      IF PreBuffeDataSet.FINDSET THEN REPEAT
        BuffeDataSet.INIT;
        BuffeDataSet.TRANSFERFIELDS(PreBuffeDataSet,FALSE);
        BuffeDataSet."Cons. Source Code" := BufferNew."Cons. Source Code";
        BuffeDataSet."Entry No." := BufferNew."Entry No.";
        BuffeDataSet."Data Set No." := PreBuffeDataSet."Data Set No.";
        IF DealType."Flow Grouping" AND (BuffeDataSet."Fixing Date" = 0D) AND (BuffeDataSet."Due Date" <> 0D) THEN BEGIN
          PreBuffeDataSet2.RESET;
          PreBuffeDataSet2.SETRANGE("Entry No.",PreBuffer."Entry No.");
          PreBuffeDataSet2.SETRANGE("Due Date",BuffeDataSet."Due Date");
          PreBuffeDataSet2.SETFILTER("Fixing Date",'<>%1',0D);
          IF PreBuffeDataSet2.FINDSET THEN
            REPEAT
              IF (BuffeDataSet."Fixing Date" = 0D) OR (BuffeDataSet."Fixing Date" > PreBuffeDataSet2."Fixing Date") THEN
                BuffeDataSet."Fixing Date" := PreBuffeDataSet2."Fixing Date";
            UNTIL PreBuffeDataSet2.NEXT = 0
          ELSE
            BuffeDataSet."Fixing Date" := BuffeDataSet."Due Date";
        END;
        BuffeDataSet.INSERT;
      UNTIL PreBuffeDataSet.NEXT = 0;

      IF DealType."Flow Grouping" THEN BEGIN
        BuffeDataSet.RESET;
        BuffeDataSet.SETRANGE("Cons. Source Code",BufferNew."Cons. Source Code");
        BuffeDataSet.SETRANGE("Entry No.",BufferNew."Entry No.");

        //NC NCS-1104 > DP
        BuffeDataSet.SETFILTER("Due Date",'<>%1',0D);
        {
        BuffeDataSet.SETFILTER("Fixing Date",'<>%1',0D);
        }
        //NC NCS-1104 < DP

        IF BuffeDataSet.FINDSET THEN REPEAT
          IF (BuffeDataSet."Group Disc Amount" = 0) AND (BuffeDataSet."Group Non Disc Amount" = 0) THEN BEGIN
            BuffeDataSet2.RESET;
            BuffeDataSet2.SETRANGE("Cons. Source Code",BufferNew."Cons. Source Code");
            BuffeDataSet2.SETRANGE("Entry No.",BufferNew."Entry No.");

            //NC NCS-1104 > DP
            {
            BuffeDataSet2.SETRANGE("Fixing Date",BuffeDataSet."Fixing Date");
            }
            //NC NCS-1104 < DP

            //NC NCS-914 > DP
            BuffeDataSet2.SETRANGE("Due Date",BuffeDataSet."Due Date");
            //NC NCS-914 < DP

            IF BuffeDataSet2.FINDSET THEN REPEAT
              BuffeDataSet."Group Disc Amount" += BuffeDataSet2.Amount;
              BuffeDataSet."Group Non Disc Amount" += BuffeDataSet2."Undisc_ Market Value";
            UNTIL BuffeDataSet2.NEXT = 0;
            BuffeDataSet.MODIFY;
          END;
        UNTIL BuffeDataSet.NEXT = 0;
      END;

      IF BeginEntryNo = 0 THEN
        BeginEntryNo := LastEntryNo;
    END;

    PROCEDURE CopyBuffer2Buffer@1210047(VAR PreBuffer@1101495004 : Record 50153;VAR Buffer@1210000 : Record 50155;VAR BufferNew@1210001 : Record 50155;VAR BeginEntryNo@1101495001 : Integer;VAR LastEntryNo@1101495000 : Integer;ConsSource@1101495003 : Record 50001;RegisterNo@1101495002 : Integer;NotTranslate@1101495005 : Boolean);
    BEGIN
      IF LastEntryNo = 0 THEN BEGIN
        BufferNew.SETRANGE("Cons. Source Code",ConsSource.Code);
        IF BufferNew.FINDLAST THEN
          LastEntryNo := BufferNew."Entry No.";
        BufferNew.RESET;
      END;
      LastEntryNo += 1;

      BufferNew.INIT;
      BufferNew.TRANSFERFIELDS(Buffer);
      BufferNew."Cons. Source Code" := ConsSource.Code;
      BufferNew."Entry No." := LastEntryNo;
      BufferNew."Export Cons. Source Code" := ConsSource."Export Cons. Source";
      BufferNew.Removed := TRUE;
      BufferNew."Source Operation No." := Buffer."Entry No.";
      BufferNew."Remove Oper. No" := 0;
      BufferNew."Export Consolidation Register" := 0;
      BufferNew."Consolidation Register" := RegisterNo;
      BufferNew."PreBuffer Entry No." := PreBuffer."Entry No.";
      BufferNew."Not Translate" := NotTranslate;
      BufferNew.Type := BufferNew.Type::Delete;
      BufferNew.INSERT(TRUE);

      IF BeginEntryNo = 0 THEN
        BeginEntryNo := LastEntryNo;
    END;

    PROCEDURE ConvertToLCY@1000000001(Amount@1000000000 : Decimal;CurrCode@1000000001 : Code[10]) AmountLCY : Decimal;
    VAR
      Currency@1000000002 : Record 4;
    BEGIN
      IF CurrCode = '' THEN
        EXIT(Amount);
      IF NOT Currency.GET(CurrCode) THEN
        EXIT(0);
    END;

    PROCEDURE TestDimCodeFromID@1101495001(DimCode@1101495000 : Code[20];Code@1101495001 : Code[20];ID@1101495002 : Code[40];FieldName@1101495004 : Text[30];VAR JobProc@1101495005 : TEMPORARY Record 50063;VAR PreBuffer2@1101495006 : Record 50153;VAR ErrorJnl@1101495007 : Record 50023) : Boolean;
    VAR
      DimValue@1101495003 : Record 349;
    BEGIN
      IF (DimCode <> '') AND (Code <> '') AND (ID = '') THEN BEGIN
        ErrorJnl.AddErrorPreBuferDealEntry(JobProc."Company No.",ErrorJnl."Error Group"::Load,ErrorJnl.Type::Error,
                                  JobProc.Processor,JobProc."Cons. Register",
                                  'EDB02',STRSUBSTNO(TextEDB02,FieldName),COMPANYNAME,PreBuffer2,
                                  JobProc."Line No.");
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetDimCodeFromID@1101495000(DimCode@1101495000 : Code[20];Code@1101495001 : Code[20];ID@1101495002 : Code[40]) : Code[20];
    VAR
      DimValue@1101495003 : Record 349;
    BEGIN
      IF (DimCode = '') OR (ID = '') OR (Code = ID) THEN
        EXIT(Code);
      DimValue.SETRANGE("Dimension Code",DimCode);
      DimValue.SETRANGE("Rec ID",ID);
      IF DimValue.FINDFIRST THEN
        EXIT(DimValue.Code)
      ELSE
        EXIT(Code);
    END;

    BEGIN
    {
      NC S622 PCH Создан CU
      ПАРАМЕТРЫ:
        "Company No."
        "Line No."
        Blocked
        Process
        Description
        "Auto Start"
        Dependency
        "Type Processing" - Ист. Консолидации
        Processor - Код Ист. Консолидации
        "Status Monitor" - 0 - Загрузка из Внеш. Системы
        "Import Format" - 0 - Загрузка из Внеш. Системы
        "External Source" - ID внешней системы
        "Transaction No."
        "Object No." - не используется
        "Processing Mode" - Test - проверка наличия записей, Load - загрузка
        "Record ID" - рекорд  ID буфера
      ВОЗВРАТ:
        isOK - ОК
        "Cons. Register" - регистр в котором произошла загрузка
        Status
        "Time Status"
        "Begin Entry No."
        "Last Entry No."
      NC NCS-914 DP Группировка по дате фиксинга и дате платежа
      NC NCS-1014 DP Группировка только по дате платежа
    }
    END.
  }
}

