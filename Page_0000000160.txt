OBJECT Page 160 Sales Statistics
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00,NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Statistics;
               RUS=Статистика продаж];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table36;
    PageType=ListPlus;
    OnOpenPage=BEGIN
                 SalesSetup.GET;
                 AllowInvDisc :=
                   NOT (SalesSetup."Calc. Inv. Discount" AND CustInvDiscRecExists("Invoice Disc. Code"));
                 AllowVATDifference :=
                   SalesSetup."Allow VAT Difference" AND
                   NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
                 CurrPage.EDITABLE :=
                   AllowVATDifference OR AllowInvDisc;
                 SetVATSpecification;
               END;

    OnAfterGetRecord=VAR
                       SalesLine@1000 : Record 37;
                       TempSalesLine@1001 : TEMPORARY Record 37;
                     BEGIN
                       CurrPage.CAPTION(STRSUBSTNO(Text000,"Document Type"));
                       IF PrevNo = "No." THEN BEGIN
                         GetVATSpecification;
                         EXIT;
                       END;
                       PrevNo := "No.";
                       FILTERGROUP(2);
                       SETRANGE("No.",PrevNo);
                       FILTERGROUP(0);
                       CLEAR(SalesLine);
                       CLEAR(TotalSalesLine);
                       CLEAR(TotalSalesLineLCY);
                       CLEAR(SalesPost);

                       SalesPost.GetSalesLines(Rec,TempSalesLine,0);
                       CLEAR(SalesPost);
                       SalesPost.SumSalesLinesTemp(
                         Rec,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
                         VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);

                       AdjProfitLCY := TotalSalesLineLCY.Amount - TotalAdjCostLCY;
                       IF TotalSalesLineLCY.Amount <> 0 THEN
                         AdjProfitPct := ROUND(AdjProfitLCY / TotalSalesLineLCY.Amount * 100,0.1);

                       IF "Prices Including VAT" THEN BEGIN
                         TotalAmount2 := TotalSalesLine.Amount;
                         TotalAmount1 := TotalAmount2 + VATAmount;
                         TotalSalesLine."Line Amount" := TotalAmount1 + TotalSalesLine."Inv. Discount Amount";
                       END ELSE BEGIN
                         TotalAmount1 := TotalSalesLine.Amount;
                         TotalAmount2 := TotalSalesLine."Amount Including VAT";
                       END;

                       IF Cust.GET("Bill-to Customer No.") THEN
                         Cust.CALCFIELDS("Balance (LCY)")
                       ELSE
                         CLEAR(Cust);
                       IF Cust."Credit Limit (LCY)" = 0 THEN
                         CreditLimitLCYExpendedPct := 0
                       ELSE
                         IF Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" < 0 THEN
                           CreditLimitLCYExpendedPct := 0
                         ELSE
                           IF Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" > 1 THEN
                             CreditLimitLCYExpendedPct := 10000
                           ELSE
                             CreditLimitLCYExpendedPct := ROUND(Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" * 10000,1);

                       SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine);
                       IF TempVATAmountLine.FINDSET THEN
                         REPEAT
                           TempVATAmountLine."VAT Amount" := CalcVATAmount(TempSalesLine,TempVATAmountLine);
                           IF "Prices Including VAT" THEN
                             TempVATAmountLine."VAT Base" :=
                               TempVATAmountLine."Amount Including VAT" - TempVATAmountLine."VAT Amount"
                           ELSE
                             TempVATAmountLine."Amount Including VAT" :=
                               TempVATAmountLine."VAT Base" + TempVATAmountLine."VAT Amount";
                           TempVATAmountLine.MODIFY;
                         UNTIL TempVATAmountLine.NEXT = 0;
                       TempVATAmountLine.MODIFYALL(Modified,FALSE);
                       SetVATSpecification;
                     END;

    OnQueryClosePage=BEGIN
                       GetVATSpecification;
                       IF TempVATAmountLine.GetAnyLineModified THEN
                         UpdateVATOnSalesLines;
                       EXIT(TRUE);
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           RUS=Общее] }

    { 129 ;2   ;Field     ;
                Name=Amount;
                CaptionML=[ENU=Amount;
                           RUS=Сумма];
                ToolTipML=[ENU=Specifies the net amount of all the lines in the sales document.;
                           RUS=Определяет чистую сумму по всем строкам в документе продажи.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                Editable=FALSE }

    { 93  ;2   ;Field     ;
                Name=InvDiscountAmount;
                CaptionML=[ENU=Inv. Discount Amount;
                           RUS=Сумма скидки по счету];
                ToolTipML=[ENU=Specifies the invoice discount amount for the sales document.;
                           RUS=Определяет сумму скидки по счету для документа продажи.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                OnValidate=BEGIN
                             UpdateInvDiscAmount;
                           END;
                            }

    { 80  ;2   ;Field     ;
                CaptionML=[ENU=Total;
                           RUS=Всего];
                ToolTipML=[ENU=Specifies the total amount less any invoice discount amount and excluding VAT for the sales document.;
                           RUS=Определяет общую сумму за вычетом любой суммы скидки по счету и НДС для документа продажи.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount1;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                OnValidate=BEGIN
                             UpdateTotalAmount;
                           END;
                            }

    { 75  ;2   ;Field     ;
                CaptionML=[ENU=VAT Amount;
                           RUS=Сумма НДС];
                ToolTipML=[ENU=Specifies the total VAT amount that has been calculated for all the lines in the sales document.;
                           RUS=Определяет общую сумму НДС, вычисленную по всем строкам документа продажи.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=VATAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText);
                Editable=FALSE }

    { 76  ;2   ;Field     ;
                CaptionML=[ENU=Total Incl. VAT;
                           RUS=Всего, с учетом НДС];
                ToolTipML=[ENU=Specifies the total amount including VAT that will be posted to the customer's account for all the lines in the sales document. This is the amount that the customer owes based on this sales document. If the document is a credit memo, it is the amount that you owe to the customer.;
                           RUS=Определяет общую сумму, включая НДС, которая будет учтена на счете клиента по всем строкам документа продажи. Это сумма долга клиента по этому документу продажи. Если документ является кредит-нотой, то это сумма вашего долга клиенту.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount2;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,TRUE);
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Sales (LCY);
                           RUS=Продажи (руб.)];
                ToolTipML=[ENU=Specifies your total sales turnover in the fiscal year. It is calculated from amounts excluding VAT on all completed and open sales invoices and credit memos.;
                           RUS=Определяет общий оборот продаж в финансовом году. Это значение вычисляется на основании сумм без НДС по всем завершенным и открытым счетам и кредит-нотам продажи.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY.Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                CaptionML=[ENU=Original Profit (LCY);
                           RUS=Исходная прибыль (руб.)];
                ToolTipML=[ENU=Specifies the original profit that was associated with the sales when they were originally posted.;
                           RUS=Определяет исходную прибыль, связанную с продажами при их первоначальном учете.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ProfitLCY;
                AutoFormatType=1;
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Profit (LCY);
                           RUS=Скорректир. прибыль (руб.)];
                ToolTipML=[ENU=Specifies the profit, taking into consideration changes in the purchase prices of the goods.;
                           RUS=Определяет прибыль, учитывающую изменения цен покупки товаров.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AdjProfitLCY;
                AutoFormatType=1;
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                CaptionML=[ENU=Original Profit %;
                           RUS=Исходная прибыль (%)];
                ToolTipML=[ENU=Specifies the original percentage of profit that was associated with the sales when they were originally posted.;
                           RUS=Определяет исходный процент прибыли, связанной с продажами при их первоначальном учете.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Profit %;
                           RUS=Скорректир. прибыль (%)];
                ToolTipML=[ENU=Specifies the percentage of profit for all sales, taking into account changes that occurred in the purchase prices of the goods.;
                           RUS=Определяет процент прибыли по всем продажам с учетом изменений цен покупки товаров.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=1:1;
                SourceExpr=AdjProfitPct;
                Editable=FALSE }

    { 95  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           RUS=Кол-во];
                ToolTipML=[ENU=Specifies the total quantity of G/L account entries, items, and/or resources in the sales document. If the amount is rounded, because the Invoice Rounding check box is selected in the Sales & Receivables Setup window, this field will contain the quantity of items in the sales document plus one.;
                           RUS=Определяет общее количество по операциям счета ГК, товарам и/или ресурсам в документе продажи. Если округленные суммы являются следствием установки флажка в поле "Округление счета" в окне "Настройка модуля продажи", это поле будет содержать количество товаров в документе продажи плюс один.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine.Quantity;
                Editable=FALSE }

    { 73  ;2   ;Field     ;
                CaptionML=[ENU=Parcels;
                           RUS=Упаковок];
                ToolTipML=[ENU=Specifies the total number of parcels in the sales document.;
                           RUS=Определяет общее число упаковок по документу продажи.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine."Units per Parcel";
                Editable=FALSE }

    { 91  ;2   ;Field     ;
                CaptionML=[ENU=Net Weight;
                           RUS=Вес нетто];
                ToolTipML=[ENU=Specifies the total net weight of the items in the sales document.;
                           RUS=Определяет суммарный вес нетто товаров по документу продажи.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine."Net Weight";
                Editable=FALSE }

    { 82  ;2   ;Field     ;
                CaptionML=[ENU=Gross Weight;
                           RUS=Вес брутто];
                ToolTipML=[ENU=Specifies the total gross weight of the items in the sales document.;
                           RUS=Определяет суммарный вес брутто товаров по документу продажи.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine."Gross Weight";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                CaptionML=[ENU=Volume;
                           RUS=Объем];
                ToolTipML=[ENU=Specifies the total volume of the items in the sales document.;
                           RUS=Определяет суммарный объем товаров по документу продажи.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine."Unit Volume";
                Editable=FALSE }

    { 78  ;2   ;Field     ;
                CaptionML=[ENU=Original Cost (LCY);
                           RUS=Исходная стоимость (руб.)];
                ToolTipML=[ENU=Specifies the total cost, in LCY, of the G/L account entries, items, and/or resources in the sales document. The cost is calculated as unit cost x quantity of the items or resources.;
                           RUS=Определяет общую себестоимость (в рублях) по операциям счета ГК, товарам и/или ресурсам в документе продажи. Себестоимость вычисляется как себестоимость единицы, умноженная на количество товаров или ресурсов.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Cost (LCY);
                           RUS=Скоррект. себест. (руб.)];
                ToolTipML=[ENU=Specifies the total cost, in LCY, of the items in the sales document, adjusted for any changes in the original costs of these items. If this field contains zero, it means that there were no entries to calculate, possibly because of date compression or because the adjustment batch job has not yet been run.;
                           RUS=Определяет общую себестоимость (в рублях) товаров в документе продажи, скорректированную с учетом всех изменений исходной себестоимости этих товаров. Если это поле содержит нулевое значение, это означает отсутствие записей для расчета, возможно, из-за сжатия по дате или из-за того, что еще не было выполнено пакетное задание корректировки.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAdjCostLCY;
                AutoFormatType=1;
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Cost Adjmt. Amount (LCY);
                           RUS=Сумма корр. себест. (руб.)];
                ToolTipML=[ENU=Specifies the difference between the original cost and the total adjusted cost of the items in the sales document.;
                           RUS=Определяет разницу между исходной себестоимостью и общей скорректированной себестоимостью товаров в документе продажи.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAdjCostLCY - TotalSalesLineLCY."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE;
                OnLookup=BEGIN
                           LookupAdjmtValueEntries(0);
                         END;
                          }

    { 5   ;1   ;Part      ;
                Name=SubForm;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page576 }

    { 1903289601;1;Group  ;
                CaptionML=[ENU=Customer;
                           RUS=Клиент] }

    { 67  ;2   ;Field     ;
                CaptionML=[ENU=Balance (LCY);
                           RUS=Сальдо (руб.)];
                ToolTipML=[ENU=Specifies the balance on the customer's account.;
                           RUS=Определяет сальдо счета клиента.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Cust."Balance (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 68  ;2   ;Field     ;
                CaptionML=[ENU=Credit Limit (LCY);
                           RUS=Кредитный лимит (руб.)];
                ToolTipML=[ENU=Specifies the credit limit of the customer that you created the sales document for.;
                           RUS=Определяет кредитный лимит клиента, для которого создан документ продажи.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Cust."Credit Limit (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                ExtendedDatatype=Ratio;
                CaptionML=[ENU=Expended % of Credit Limit (LCY);
                           RUS=Израсх. % кредитного лимита (руб.)];
                ToolTipML=[ENU=Specifies the expended percentage of the credit limit in (LCY).;
                           RUS=Определяет процент расхода кредитного лимита (в рублях).];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CreditLimitLCYExpendedPct }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Sales %1 Statistics;RUS=Статистика продажи %1';
      Text001@1001 : TextConst 'ENU=Total;RUS=Всего';
      Text002@1002 : TextConst 'ENU=Amount;RUS=Сумма';
      Text003@1003 : TextConst 'ENU=%1 must not be 0.;RUS=%1 не должно быть равно нулю.';
      Text004@1004 : TextConst 'ENU=%1 must not be greater than %2.;RUS=%1 не должно быть больше %2.';
      Text005@1005 : TextConst '@@@=You cannot change the invoice discount because there is a Cust. Invoice Disc. record for Invoice Disc. Code 30000.;ENU=You cannot change the invoice discount because there is a %1 record for %2 %3.;RUS=Нельзя изменить скидку счета, так как есть запись %1 для %2 %3.';
      TotalSalesLine@1006 : Record 37;
      TotalSalesLineLCY@1007 : Record 37;
      Cust@1008 : Record 18;
      TempVATAmountLine@1009 : TEMPORARY Record 290;
      SalesSetup@1010 : Record 311;
      SalesPost@1011 : Codeunit 80;
      TotalAmount1@1012 : Decimal;
      TotalAmount2@1013 : Decimal;
      VATAmount@1014 : Decimal;
      VATAmountText@1015 : Text[30];
      ProfitLCY@1016 : Decimal;
      ProfitPct@1017 : Decimal;
      AdjProfitLCY@1024 : Decimal;
      AdjProfitPct@1023 : Decimal;
      TotalAdjCostLCY@1022 : Decimal;
      CreditLimitLCYExpendedPct@1018 : Decimal;
      PrevNo@1019 : Code[20];
      AllowInvDisc@1020 : Boolean;
      AllowVATDifference@1021 : Boolean;

    LOCAL PROCEDURE UpdateHeaderInfo@5();
    VAR
      CurrExchRate@1000 : Record 330;
      UseDate@1001 : Date;
    BEGIN
      TotalSalesLine."Inv. Discount Amount" := TempVATAmountLine.GetTotalInvDiscAmount;
      TotalAmount1 :=
        TotalSalesLine."Line Amount" - TotalSalesLine."Inv. Discount Amount";
      VATAmount := TempVATAmountLine.GetTotalVATAmount;
      IF "Prices Including VAT" THEN BEGIN
        TotalAmount1 := TempVATAmountLine.GetTotalAmountInclVAT;
        TotalAmount2 := TotalAmount1 - VATAmount;
        TotalSalesLine."Line Amount" := TotalAmount1 + TotalSalesLine."Inv. Discount Amount";
      END ELSE
        TotalAmount2 := TotalAmount1 + VATAmount;

      IF "Prices Including VAT" THEN
        TotalSalesLineLCY.Amount := TotalAmount2
      ELSE
        TotalSalesLineLCY.Amount := TotalAmount1;
      IF "Currency Code" <> '' THEN BEGIN
        IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
           ("Posting Date" = 0D)
        THEN
          UseDate := WORKDATE
        ELSE
          UseDate := "Posting Date";

        TotalSalesLineLCY.Amount :=
          CurrExchRate.ExchangeAmtFCYToLCY(
            UseDate,"Currency Code",TotalSalesLineLCY.Amount,"Currency Factor");
      END;
      ProfitLCY := TotalSalesLineLCY.Amount - TotalSalesLineLCY."Unit Cost (LCY)";
      IF TotalSalesLineLCY.Amount = 0 THEN
        ProfitPct := 0
      ELSE
        ProfitPct := ROUND(100 * ProfitLCY / TotalSalesLineLCY.Amount,0.01);

      AdjProfitLCY := TotalSalesLineLCY.Amount - TotalAdjCostLCY;
      IF TotalSalesLineLCY.Amount = 0 THEN
        AdjProfitPct := 0
      ELSE
        AdjProfitPct := ROUND(100 * AdjProfitLCY / TotalSalesLineLCY.Amount,0.01);
    END;

    LOCAL PROCEDURE GetVATSpecification@21();
    BEGIN
      CurrPage.SubForm.PAGE.GetTempVATAmountLine(TempVATAmountLine);
      IF TempVATAmountLine.GetAnyLineModified THEN
        UpdateHeaderInfo;
    END;

    LOCAL PROCEDURE SetVATSpecification@11();
    BEGIN
      CurrPage.SubForm.PAGE.SetTempVATAmountLine(TempVATAmountLine);
      CurrPage.SubForm.PAGE.InitGlobals(
        "Currency Code",AllowVATDifference,AllowVATDifference,
        "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
    END;

    LOCAL PROCEDURE UpdateTotalAmount@16();
    VAR
      SaveTotalAmount@1000 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      IF "Prices Including VAT" THEN BEGIN
        SaveTotalAmount := TotalAmount1;
        UpdateInvDiscAmount;
        TotalAmount1 := SaveTotalAmount;
      END;
      WITH TotalSalesLine DO
        "Inv. Discount Amount" := "Line Amount" - TotalAmount1;
      UpdateInvDiscAmount;
    END;

    LOCAL PROCEDURE UpdateInvDiscAmount@3();
    VAR
      InvDiscBaseAmount@1000 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      InvDiscBaseAmount := TempVATAmountLine.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");
      IF InvDiscBaseAmount = 0 THEN
        ERROR(Text003,TempVATAmountLine.FIELDCAPTION("Inv. Disc. Base Amount"));

      IF TotalSalesLine."Inv. Discount Amount" / InvDiscBaseAmount > 1 THEN
        ERROR(
          Text004,
          TotalSalesLine.FIELDCAPTION("Inv. Discount Amount"),
          TempVATAmountLine.FIELDCAPTION("Inv. Disc. Base Amount"));

      TempVATAmountLine.SetInvoiceDiscountAmount(
        TotalSalesLine."Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
      CurrPage.SubForm.PAGE.SetTempVATAmountLine(TempVATAmountLine);
      UpdateHeaderInfo;

      "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
      "Invoice Discount Value" := TotalSalesLine."Inv. Discount Amount";
      MODIFY;
      UpdateVATOnSalesLines;
    END;

    LOCAL PROCEDURE GetCaptionClass@2(FieldCaption@1000 : Text[100];ReverseCaption@1001 : Boolean) : Text[80];
    BEGIN
      IF "Prices Including VAT" XOR ReverseCaption THEN
        EXIT('2,1,' + FieldCaption);

      EXIT('2,0,' + FieldCaption);
    END;

    LOCAL PROCEDURE UpdateVATOnSalesLines@1();
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      GetVATSpecification;
      IF TempVATAmountLine.GetAnyLineModified THEN BEGIN
        SalesLine.UpdateVATOnLines(0,Rec,SalesLine,TempVATAmountLine);
        SalesLine.UpdateVATOnLines(1,Rec,SalesLine,TempVATAmountLine);
      END;
      PrevNo := '';
    END;

    LOCAL PROCEDURE CustInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      CustInvDisc@1001 : Record 19;
    BEGIN
      CustInvDisc.SETRANGE(Code,InvDiscCode);
      EXIT(CustInvDisc.FINDFIRST);
    END;

    LOCAL PROCEDURE CheckAllowInvDisc@8();
    VAR
      CustInvDisc@1000 : Record 19;
    BEGIN
      IF NOT AllowInvDisc THEN
        ERROR(
          Text005,
          CustInvDisc.TABLECAPTION,FIELDCAPTION("Invoice Disc. Code"),"Invoice Disc. Code");
    END;

    PROCEDURE CalcVATAmount@1210000(VAR TempSalesLine@1210000 : TEMPORARY Record 37;VAR TempVATAmountLine@1210001 : TEMPORARY Record 290) : Decimal;
    BEGIN
      TempSalesLine.SETRANGE("VAT Identifier",TempVATAmountLine."VAT Identifier");
      TempSalesLine.SETRANGE("VAT Calculation Type",TempVATAmountLine."VAT Calculation Type");
      TempSalesLine.SETRANGE("Tax Group Code",TempVATAmountLine."Tax Group Code");
      IF TempVATAmountLine.Positive THEN
        TempSalesLine.SETFILTER("Line Amount",'>=0')
      ELSE
        TempSalesLine.SETFILTER("Line Amount",'<0');
      IF TempSalesLine.FINDFIRST THEN
        TempSalesLine.CALCSUMS(Amount,"Amount Including VAT");
      TempSalesLine.SETRANGE("VAT Identifier");
      TempSalesLine.SETRANGE("VAT Calculation Type");
      TempSalesLine.SETRANGE("Tax Group Code");

      EXIT(TempSalesLine."Amount Including VAT" - TempSalesLine.Amount);
    END;

    BEGIN
    END.
  }
}

