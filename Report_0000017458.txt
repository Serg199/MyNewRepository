OBJECT Report 17458 Employee Paysheet
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Employee Paysheet;
               RUS=Платежная ведомость сотрудника];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  InitReportTemplate;
                END;

    OnPostReport=BEGIN
                   IF PayrollDocExist AND (FileName <> '') THEN
                     ExcelReportBuilderMgr.ExportDataToClientFile(FileName)
                   ELSE
                     IF PayrollDocExist THEN
                       ExcelReportBuilderMgr.ExportData;
                 END;

  }
  DATASET
  {
    { 1210000; ;DataItem;                    ;
               DataItemTable=Table5200;
               DataItemTableView=SORTING(Org. Unit Code,Last Name,First Name,Middle Name)
                                 WHERE(Blocked=CONST(No));
               OnAfterGetRecord=BEGIN
                                  IF NOT PayrollAmountExists THEN
                                    CurrReport.SKIP;

                                  FillInBuffers;
                                  FillHeader;
                                END;

               ReqFilterFields=No.,Org. Unit Code,Global Dimension 1 Code,Statistics Group Code }

    { 1210001;1;DataItem;CollectEntries      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnAfterGetRecord=BEGIN
                                  IF AddBuffer.FINDSET THEN
                                    REPEAT
                                      IF AddBuffer."Payroll Amount" <> 0 THEN BEGIN
                                        FillBody(AddBuffer);
                                        TotalAdded += AddBuffer."Payroll Amount";
                                        TotalDays += AddBuffer."Actual Days";
                                        TotalHours += AddBuffer."Actual Hours";
                                      END;
                                    UNTIL AddBuffer.NEXT = 0;

                                  IF DeductBuffer.FINDSET THEN
                                    REPEAT
                                      IF DeductBuffer."Payroll Amount" <> 0 THEN BEGIN
                                        FillBody(DeductBuffer);
                                        TotalDeducted += DeductBuffer."Payroll Amount";
                                        TotalDays += DeductBuffer."Actual Days";
                                        TotalHours += DeductBuffer."Actual Hours";
                                      END;
                                    UNTIL DeductBuffer.NEXT = 0;

                                  IF OtherGainBuffer.FINDSET THEN
                                    REPEAT
                                      IF OtherGainBuffer."Payroll Amount" <> 0 THEN BEGIN
                                        FillBody(OtherGainBuffer);
                                        TotalDays += DeductBuffer."Actual Days";
                                        TotalHours += DeductBuffer."Actual Hours";
                                      END;
                                    UNTIL OtherGainBuffer.NEXT = 0;

                                  IF IncomeTaxBuffer.FINDSET THEN
                                    REPEAT
                                      IF IncomeTaxBuffer."Payroll Amount" <> 0 THEN BEGIN
                                        FillBody(IncomeTaxBuffer);
                                        TotalDeducted += IncomeTaxBuffer."Payroll Amount";
                                      END;
                                    UNTIL IncomeTaxBuffer.NEXT = 0;

                                  FillTotals;
                                  ExcelReportBuilderMgr.AddSection('DueTaxRedemptionSection');
                                  ExcelReportBuilderMgr.AddSection('PaidTaxRedemptionSection');
                                  ExcelReportBuilderMgr.AddSection('CompanyDebtSection');
                                  ExcelReportBuilderMgr.AddSection('EmplDebtSection');
                                  ExcelReportBuilderMgr.AddSection('Separator');
                                  ExcelReportBuilderMgr.AddPagebreak;
                                  CurrReport.BREAK;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   DateBegin := CALCDATE('<-1M-CM>',WORKDATE);
                   DateEnd := CALCDATE('<CM>',DateBegin);
                 END;

    }
    CONTROLS
    {
      { 1210000; ;Container ;
                  ContainerType=ContentArea }

      { 1210001;1;Group     ;
                  Name=Options;
                  CaptionML=[ENU=Options;
                             RUS=Параметры];
                  GroupType=Group }

      { 1210002;2;Field     ;
                  Name=StartingDate;
                  CaptionML=[ENU=Starting Date;
                             RUS=Дата начала];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DateBegin;
                  OnValidate=BEGIN
                               DateEnd := CALCDATE('<CM>',DateBegin);
                             END;
                              }

      { 1210003;2;Field     ;
                  Name=EndingDate;
                  CaptionML=[ENU=Ending Date;
                             RUS=Дата окончания];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DateEnd }

      { 1210004;2;Field     ;
                  Name=DataSource;
                  CaptionML=[ENU=Data Source;
                             RUS=Источник данных];
                  OptionCaptionML=[ENU=Posted Entries,Payroll Documents;
                                   RUS=Учтенные операции,Зарплатные документы];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DataSource }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PayrollDoc@1210007 : Record 17414;
      PayrollDocLine@1210015 : Record 17415;
      PostedPayrollDoc@1210006 : Record 17416;
      AddBuffer@1210011 : TEMPORARY Record 17415;
      DeductBuffer@1210010 : TEMPORARY Record 17415;
      OtherGainBuffer@1210009 : TEMPORARY Record 17415;
      IncomeTaxBuffer@1210020 : TEMPORARY Record 17415;
      PostedPayrollDocLine@1210013 : Record 17417;
      PayrollElement@1210014 : Record 17400;
      ExcelReportBuilderMgr@1210001 : Codeunit 14930;
      StdRepMgt@1210000 : Codeunit 12401;
      DateBegin@1210002 : Date;
      DateEnd@1210003 : Date;
      DataSource@1210005 : 'Posted Entries,Payroll Documents';
      PayrollDocExist@1210008 : Boolean;
      TotalAdded@1210022 : Decimal;
      TotalDeducted@1210021 : Decimal;
      TotalDays@1210016 : Decimal;
      TotalHours@1210017 : Decimal;
      FileName@1210012 : Text;

    PROCEDURE InitReportTemplate@1210002();
    VAR
      SheetName@1210001 : Text;
    BEGIN
      SheetName := 'Sheet1';
      ExcelReportBuilderMgr.InitTemplate(GetTemplateCode);
      ExcelReportBuilderMgr.SetSheet(SheetName);
    END;

    PROCEDURE FillHeader@1210006();
    BEGIN
      ExcelReportBuilderMgr.AddSection('EmplHeader');
      ExcelReportBuilderMgr.AddDataToSection('PayPeriod',FORMAT(DateEnd,0,'<Month Text> <Year4>'));
      ExcelReportBuilderMgr.AddDataToSection('EmplId',Employee."No.");
      ExcelReportBuilderMgr.AddDataToSection('EmplName',Employee."First Name" + ' ' + Employee."Last Name");
      ExcelReportBuilderMgr.AddDataToSection('OrganizationId',Employee."Org. Unit Code");
      ExcelReportBuilderMgr.AddDataToSection('OrganizationName',Employee."Org. Unit Name");
      ExcelReportBuilderMgr.AddSection('EmplPageHeader');

      FillHeaderTitle;
    END;

    PROCEDURE FillHeaderTitle@1210015();
    BEGIN
      ExcelReportBuilderMgr.AddSection('Header');
    END;

    PROCEDURE FillBody@1210012(VAR BufferLine@1210000 : TEMPORARY Record 17415);
    BEGIN
      ExcelReportBuilderMgr.AddSection('Body');
      ExcelReportBuilderMgr.AddDataToSection('PayCType',BufferLine."Element Code");
      ExcelReportBuilderMgr.AddDataToSection('PayName',BufferLine.Description);
      ExcelReportBuilderMgr.AddDataToSection('SourceDate',BufferLine."Period Code");
      ExcelReportBuilderMgr.AddDataToSection('Days',StdRepMgt.FormatReportValue(BufferLine."Actual Days",2));
      ExcelReportBuilderMgr.AddDataToSection('Hours',StdRepMgt.FormatReportValue(BufferLine."Actual Hours",2));
      IF BufferLine."Payroll Amount" > 0 THEN
        ExcelReportBuilderMgr.AddDataToSection('AddSum',StdRepMgt.FormatReportValue(BufferLine."Payroll Amount",2))
      ELSE
        ExcelReportBuilderMgr.AddDataToSection(
          'Deduction',StdRepMgt.FormatReportValue(ABS(BufferLine."Payroll Amount"),2));
    END;

    PROCEDURE FillTotals@1210059();
    BEGIN
      ExcelReportBuilderMgr.AddSection('Total');
      ExcelReportBuilderMgr.AddDataToSection('DaysTotal',StdRepMgt.FormatReportValue(TotalDays,2));
      ExcelReportBuilderMgr.AddDataToSection('HoursTotal',StdRepMgt.FormatReportValue(TotalHours,2));
      ExcelReportBuilderMgr.AddDataToSection('AddSumTotal',StdRepMgt.FormatReportValue(TotalAdded,2));
      ExcelReportBuilderMgr.AddDataToSection('DeductionTotal',StdRepMgt.FormatReportValue(ABS(TotalDeducted),2));
      ExcelReportBuilderMgr.AddDataToSection('SumOnHand',StdRepMgt.FormatReportValue(TotalAdded + TotalDeducted,2));
    END;

    LOCAL PROCEDURE GetTemplateCode@1210013() : Code[10];
    VAR
      HumanResourcesSetup@1210001 : Record 5218;
    BEGIN
      HumanResourcesSetup.GET;
      HumanResourcesSetup.TESTFIELD("Employee Paysheet Templ. Code");
      EXIT(HumanResourcesSetup."Employee Paysheet Templ. Code");
    END;

    PROCEDURE PayrollAmountExists@1210028() : Boolean;
    BEGIN
      CASE DataSource OF
        DataSource::"Posted Entries":
          BEGIN
            PostedPayrollDoc.SETRANGE("Employee No.",Employee."No.");
            PostedPayrollDoc.SETRANGE("Posting Date",DateBegin,DateEnd);
            IF PostedPayrollDoc.FINDFIRST THEN BEGIN
              PayrollDocExist := TRUE;
              EXIT(PayrollDocExist);
            END;
          END;
        DataSource::"Payroll Documents":
          BEGIN
            PayrollDoc.SETRANGE("Employee No.",Employee."No.");
            PayrollDoc.SETRANGE("Posting Date",DateBegin,DateEnd);
            IF PayrollDoc.FINDFIRST THEN BEGIN
              PayrollDocExist := TRUE;
              EXIT(PayrollDocExist);
            END;
          END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE FillInBuffers@1210046();
    BEGIN
      AddBuffer.DELETEALL;
      DeductBuffer.DELETEALL;
      OtherGainBuffer.DELETEALL;
      IncomeTaxBuffer.DELETEALL;
      TotalAdded := 0;
      TotalDeducted := 0;
      TotalDays := 0;
      TotalHours := 0;

      CASE DataSource OF
        DataSource::"Posted Entries":
          WITH PostedPayrollDocLine DO BEGIN
            SETRANGE("Document No.",PostedPayrollDoc."No.");
            IF FINDSET THEN
              REPEAT
                IF PayrollElement.GET("Element Code") THEN
                  CASE "Element Type" OF
                    "Element Type"::Wage,
                    "Element Type"::Bonus:
                      BEGIN
                        AddBuffer.TRANSFERFIELDS(PostedPayrollDocLine);
                        AddBuffer.Description := PayrollElement.Description;
                        AddBuffer.INSERT;
                      END;
                    "Element Type"::Deduction,
                    "Element Type"::"Tax Deduction":
                      BEGIN
                        DeductBuffer.TRANSFERFIELDS(PostedPayrollDocLine);
                        DeductBuffer.Description := PayrollElement.Description;
                        DeductBuffer.INSERT;
                      END;
                    "Element Type"::Other:
                      BEGIN
                        OtherGainBuffer.TRANSFERFIELDS(PostedPayrollDocLine);
                        OtherGainBuffer.Description := PayrollElement.Description;
                        OtherGainBuffer.INSERT;
                      END;
                    "Element Type"::"Income Tax":
                      BEGIN
                        IncomeTaxBuffer.TRANSFERFIELDS(PostedPayrollDocLine);
                        IncomeTaxBuffer.Description := PayrollElement.Description;
                        IncomeTaxBuffer.INSERT;
                      END;
                  END;
              UNTIL NEXT = 0;
          END;
        DataSource::"Payroll Documents":
          WITH PayrollDocLine DO BEGIN
            SETRANGE("Document No.",PayrollDoc."No.");
            IF FINDSET THEN
              REPEAT
                IF PayrollElement.GET("Element Code") THEN
                  CASE "Element Type" OF
                    "Element Type"::Wage,
                    "Element Type"::Bonus:
                      BEGIN
                        AddBuffer.TRANSFERFIELDS(PayrollDocLine);
                        AddBuffer.Description := PayrollElement.Description;
                        AddBuffer.INSERT;
                      END;
                    "Element Type"::Deduction,
                    "Element Type"::"Tax Deduction":
                      BEGIN
                        DeductBuffer.TRANSFERFIELDS(PayrollDocLine);
                        DeductBuffer.Description := PayrollElement.Description;
                        DeductBuffer.INSERT;
                      END;
                    "Element Type"::Other:
                      BEGIN
                        OtherGainBuffer.TRANSFERFIELDS(PayrollDocLine);
                        OtherGainBuffer.Description := PayrollElement.Description;
                        OtherGainBuffer.INSERT;
                      END;
                    "Element Type"::"Income Tax":
                      BEGIN
                        IncomeTaxBuffer.TRANSFERFIELDS(PayrollDocLine);
                        IncomeTaxBuffer.Description := PayrollElement.Description;
                        IncomeTaxBuffer.INSERT;
                      END;
                  END;
              UNTIL NEXT = 0;
          END;
      END;
    END;

    PROCEDURE SetFileNameSilent@1210004(NewFileName@1210001 : Text);
    BEGIN
      FileName := NewFileName;
    END;

    PROCEDURE InitializeRequest@1210000(NewDateBegin@1210001 : Date;NewDateEnd@1210002 : Date;NewDataSource@1210003 : Option);
    BEGIN
      DateBegin := NewDateBegin;
      DateEnd := NewDateEnd;
      DataSource := NewDataSource;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

