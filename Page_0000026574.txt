OBJECT Page 26574 Create Report Data
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Report Data;
               RUS=Создание данных отчета];
    PageType=Card;
    OnInit=BEGIN
             ProgressiveTotalCheckBoxEnable := TRUE;
             AccountingPeriodTextBoxEnable := TRUE;
             FileNameEnable := TRUE;
             CorrNumberTextBoxEnable := TRUE;
             EndDateTextBoxEditable := TRUE;
             StartDateTextBoxEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 GLSetup.GET;

                 IF CreationDate = 0D THEN
                   CreationDate := TODAY;

                 CASE TRUE OF
                   (StatutoryReport."Report Type" = StatutoryReport."Report Type"::Accounting) AND (Periodicity < 1):
                     Periodicity := 2;
                   (StatutoryReport."Report Type" = StatutoryReport."Report Type"::Tax) AND (Periodicity = 0):
                     Periodicity := 1;
                 END;

                 DataDescription := StatutoryReport.Description;

                 UpdateControls;
                 UpdatePeriodType;
               END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210000;1;Group     ;
                CaptionML=[ENU=General;
                           RUS=Общее] }

    { 1210001;2;Field     ;
                CaptionML=[ENU=Data Source;
                           RUS=Источник данных];
                OptionCaptionML=[ENU=NAV Reporting,Excel File;
                                 RUS=Отчетность NAV,Файл Excel];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataSource;
                OnValidate=BEGIN
                             IF DataSource = DataSource::"Excel File" THEN
                               ExcelFileDataSourceOnValidate;
                             IF DataSource = DataSource::"NAV Reporting" THEN
                               NAVReportingDataSourceOnValida;
                           END;
                            }

    { 1210035;2;Field     ;
                Name=FileName;
                CaptionML=[ENU=Excel File Name;
                           RUS=Имя файла Excel];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=FileName;
                Enabled=FileNameEnable;
                OnAssistEdit=VAR
                               NewFileName@1210000 : Text[250];
                             BEGIN
                               DefaultFormat := '';
                               NewFileName := FileMgt.OpenFileDialog(Text008,DefaultFormat,'');
                               IF NewFileName <> '' THEN
                                 FileName := NewFileName;
                             END;
                              }

    { 1210038;2;Field     ;
                CaptionML=[ENU=Data Description;
                           RUS=Описание данных];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataDescription }

    { 1210020;2;Field     ;
                CaptionML=[ENU=Creation Date;
                           RUS=Дата создания];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CreationDate }

    { 1210046;2;Field     ;
                Name=ProgressiveTotalCheckBox;
                CaptionML=[ENU=Progressive Total;
                           RUS=Нарастающий итог];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ProgressiveTotal;
                Enabled=ProgressiveTotalCheckBoxEnable;
                OnValidate=BEGIN
                             UpdateControls;
                             UpdatePeriodType;
                           END;
                            }

    { 1210042;2;Field     ;
                CaptionML=[ENU=Periodicity;
                           RUS=Периодичность];
                OptionCaptionML=[ENU=" ,Month,Quarter,Year";
                                 RUS=" ,Месяц,Квартал,Год"];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Periodicity;
                OnValidate=BEGIN
                             IF StatutoryReport."Report Type" IN [StatutoryReport."Report Type"::Tax,StatutoryReport."Report Type"::Accounting] THEN
                               IF Periodicity = Periodicity::" " THEN
                                 ERROR(Text006,StatutoryReport.FIELDCAPTION("Report Type"),StatutoryReport."Report Type");

                             IF StatutoryReport."Report Type" = StatutoryReport."Report Type"::Accounting THEN
                               IF Periodicity = Periodicity::Month THEN
                                 ERROR(Text007,StatutoryReport.FIELDCAPTION("Report Type"),StatutoryReport."Report Type");

                             ExternReportManagement.InitPeriod(CalendarPeriod,Periodicity - 1);
                             UpdateControls;
                             UpdatePeriodType;
                           END;
                            }

    { 1210041;2;Field     ;
                Name=AccountingPeriodTextBox;
                CaptionML=[ENU=Accounting Period;
                           RUS=Учетный период];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AccountPeriod;
                Enabled=AccountingPeriodTextBoxEnable;
                OnValidate=BEGIN
                             DatePeriod.COPY(CalendarPeriod);
                             ExternReportManagement.PeriodSetup(DatePeriod,ProgressiveTotal);
                             StartDate := DatePeriod."Period Start";
                             EndDate := DatePeriod."Period End";
                             UpdateControls;
                             UpdatePeriodType;
                           END;

                OnLookup=BEGIN
                           ExternReportManagement.SelectPeriod(Text,CalendarPeriod,ProgressiveTotal);
                           DatePeriod.COPY(CalendarPeriod);
                           ExternReportManagement.PeriodSetup(DatePeriod,ProgressiveTotal);
                           StartDate := DatePeriod."Period Start";
                           EndDate := DatePeriod."Period End";
                           CurrPage.UPDATE;
                           EXIT(TRUE);
                         END;
                          }

    { 1210040;2;Field     ;
                CaptionML=[ENU=Period Type;
                           RUS=Признак периода];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PeriodType }

    { 1210003;2;Field     ;
                Name=StartDateTextBox;
                CaptionML=[ENU=Start Period Date;
                           RUS=Дата начала периода];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=StartDate;
                Editable=StartDateTextBoxEditable }

    { 1210013;2;Field     ;
                Name=EndDateTextBox;
                CaptionML=[ENU=End Period Date;
                           RUS=Дата окончания периода];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=EndDate;
                Editable=EndDateTextBoxEditable }

    { 1210027;2;Field     ;
                CaptionML=[ENU=OKEI;
                           RUS=ОКЕИ];
                OptionCaptionML=[ENU=383 - RUR,384 - thous. RUR,385 - mln. RUR;
                                 RUS=383 - руб.,384 - тыс. руб.,385 - млн. руб.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OKEI }

    { 1210031;2;Field     ;
                CaptionML=[ENU=Document Type;
                           RUS=Тип документа];
                OptionCaptionML=[ENU=Primary,Correction;
                                 RUS=Первичн.,Корректировка];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocumentType;
                OnValidate=BEGIN
                             IF DocumentType = DocumentType::Correction THEN
                               CorrectionDocumentTypeOnValida;
                             IF DocumentType = DocumentType::Primary THEN
                               PrimaryDocumentTypeOnValidate;
                           END;
                            }

    { 1210033;2;Field     ;
                Name=CorrNumberTextBox;
                CaptionML=[ENU=Correction Number;
                           RUS=Номер корректировки];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CorrNumber;
                MinValue=1;
                MaxValue=999;
                Enabled=CorrNumberTextBoxEnable }

  }
  CODE
  {
    VAR
      GLSetup@1210018 : Record 98;
      StatutoryReport@1210037 : Record 26550;
      DatePeriod@1210028 : Record 2000000007;
      CalendarPeriod@1210035 : Record 2000000007;
      ExternReportManagement@1210034 : Codeunit 12406;
      FileMgt@1210007 : Codeunit 419;
      CreationDate@1210026 : Date;
      StartDate@1210006 : Date;
      EndDate@1210005 : Date;
      AccountPeriod@1210030 : Text[30];
      DataDescription@1210043 : Text[250];
      ProgressiveTotal@1210036 : Boolean;
      OKEI@1210001 : '383,384,385';
      DocumentType@1210002 : 'Primary,Correction';
      Periodicity@1210031 : ' ,Month,Quarter,Year';
      DataSource@1210049 : 'NAV Reporting,Excel File';
      CorrNumber@1210004 : Integer;
      FileName@1210021 : Text[250];
      Text006@1210038 : TextConst 'ENU="Periodiocity can''t be empty for %1 = %2.";RUS="Поле ""Периодичность"" не может быть пустым, если %1 = %2."';
      PeriodType@1210044 : Code[2];
      Text007@1210045 : TextConst 'ENU="Periodiocity can''t be Month for %1 = %2.";RUS="Поле ""Периодичность"" не может иметь значение ""Месяц"", если %1 = %2."';
      Text008@1210000 : TextConst 'ENU=Open Excel File;RUS=Открыть файл Excel';
      Text009@1210048 : TextConst 'ENU="The combination Periodicity=%1, Progressive Total=%2 is not defined. Please enter the value for Period Type manually.";RUS="Сочетание Периодичность=%1, Нарастающий итог=%2 не определено. Введите значение типа периода вручную."';
      DefaultFormat@1210003 : Text[30];
      StartDateTextBoxEditable@19027786 : Boolean INDATASET;
      EndDateTextBoxEditable@19054859 : Boolean INDATASET;
      CorrNumberTextBoxEnable@19004669 : Boolean INDATASET;
      FileNameEnable@19078740 : Boolean INDATASET;
      AccountingPeriodTextBoxEnable@19020319 : Boolean INDATASET;
      ProgressiveTotalCheckBoxEnable@19041326 : Boolean INDATASET;

    PROCEDURE SetParameters@1210002(NewReportCode@1210000 : Code[20]);
    BEGIN
      StatutoryReport.GET(NewReportCode);
    END;

    PROCEDURE GetParameters@1210001(VAR NewCreationDate@1210003 : Date;VAR NewStartDate@1000 : Date;VAR NewEndDate@1210001 : Date;VAR NewDocumentType@1001 : Option;VAR NewOKEI@1002 : Option;VAR NewCorrNumber@1003 : Integer;VAR NewFileName@1210002 : Text[250];VAR NewDataDescription@1210004 : Text[250];VAR NewPeriodicity@1210005 : Option;VAR NewPeriodNo@1210006 : Integer;VAR NewPeriodType@1210007 : Code[2];VAR NewPeriodName@1210008 : Text[30];VAR NewDataSource@1210000 : Option);
    BEGIN
      NewCreationDate := CreationDate;
      NewStartDate := StartDate;
      NewEndDate := EndDate;
      NewDocumentType := DocumentType;
      NewOKEI := OKEI;
      NewCorrNumber := CorrNumber;
      NewFileName := FileName;
      NewDataDescription := DataDescription;
      NewPeriodicity := Periodicity;
      IF Periodicity IN [Periodicity::Month,Periodicity::Quarter] THEN
        NewPeriodNo := CalendarPeriod."Period No.";
      NewPeriodType := PeriodType;
      NewPeriodName := AccountPeriod;
      NewDataSource := DataSource;
    END;

    PROCEDURE UpdateControls@1210004();
    VAR
      ParsedAccountPeriod@1210000 : Text[30];
    BEGIN
      IF DocumentType = DocumentType::Primary THEN
        CorrNumber := 0;

      CorrNumberTextBoxEnable := DocumentType = DocumentType::Correction;
      FileNameEnable := DataSource = DataSource::"Excel File";

      IF Periodicity > 0 THEN BEGIN
        IF CalendarPeriod."Period Start" = 0D THEN
          ExternReportManagement.InitPeriod(CalendarPeriod,Periodicity - 1);
        ExternReportManagement.SetCaptionPeriodYear(AccountPeriod,CalendarPeriod,ProgressiveTotal);
        ParsedAccountPeriod := AccountPeriod;
        IF ExternReportManagement.ParseCaptionPeriodName(ParsedAccountPeriod,CalendarPeriod,ProgressiveTotal) THEN
          AccountPeriod := ParsedAccountPeriod;
        DatePeriod.COPY(CalendarPeriod);
        ExternReportManagement.PeriodSetup(DatePeriod,ProgressiveTotal);
        AccountingPeriodTextBoxEnable := TRUE;
        ProgressiveTotalCheckBoxEnable := TRUE;
        StartDateTextBoxEditable := FALSE;
        EndDateTextBoxEditable := FALSE;
        StartDate := DatePeriod."Period Start";
        EndDate := DatePeriod."Period End";
      END ELSE BEGIN
        AccountingPeriodTextBoxEnable := FALSE;
        ProgressiveTotalCheckBoxEnable := FALSE;
        StartDateTextBoxEditable := TRUE;
        EndDateTextBoxEditable := TRUE;
      END;
    END;

    PROCEDURE UpdatePeriodType@1210003();
    BEGIN
      WITH StatutoryReport DO
        IF IsXML THEN BEGIN
          CASE Periodicity OF
            Periodicity::Month:
              BEGIN
                IF ProgressiveTotal THEN
                  PeriodType := FORMAT(CalendarPeriod."Period No." + 34)
                ELSE
                  PeriodType := '35';
              END;
            Periodicity::Quarter:
              IF ProgressiveTotal THEN BEGIN
                CASE CalendarPeriod."Period No." OF
                  1:
                    PeriodType := '21';
                  2:
                    PeriodType := '31';
                  3:
                    PeriodType := '33';
                  4:
                    PeriodType := '34';
                END;
              END ELSE
                CASE CalendarPeriod."Period No." OF
                  1:
                    PeriodType := '21';
                  2:
                    PeriodType := '22';
                  3:
                    PeriodType := '23';
                  4:
                    PeriodType := '24';
                END;
            Periodicity::Year:
              IF NOT ProgressiveTotal THEN
                PeriodType := '46'
              ELSE BEGIN
                PeriodType := '';
                MESSAGE(Text009,Periodicity,ProgressiveTotal);
              END;
          END;
        END ELSE
          CASE "Report Type" OF
            "Report Type"::Tax:
              CASE Periodicity OF
                Periodicity::Month:
                  PeriodType := '1';
                Periodicity::Quarter:
                  CASE TRUE OF
                    ProgressiveTotal AND (CalendarPeriod."Period No." = 2):
                      PeriodType := '6';
                    ProgressiveTotal AND (CalendarPeriod."Period No." = 3):
                      PeriodType := '9';
                    ELSE
                      PeriodType := '3';
                  END;
                Periodicity::Year:
                  PeriodType := '0';
              END;
            "Report Type"::Accounting:
              CASE Periodicity OF
                Periodicity::Quarter:
                  PeriodType := '2';
                Periodicity::Year:
                  PeriodType := '3';
              END;
          END;
    END;

    LOCAL PROCEDURE CorrectionDocumentTypeOnAfterV@19047122();
    BEGIN
      UpdateControls;
      IF CorrNumber = 0 THEN
        CorrNumber := 1;
    END;

    LOCAL PROCEDURE PrimaryDocumentTypeOnAfterVali@19067737();
    BEGIN
      UpdateControls;
    END;

    LOCAL PROCEDURE NAVReportingDataSourceOnAfterV@19019600();
    BEGIN
      FileName := '';
      UpdateControls;
    END;

    LOCAL PROCEDURE ExcelFileDataSourceOnAfterVali@19007134();
    BEGIN
      UpdateControls;
    END;

    LOCAL PROCEDURE NAVReportingDataSourceOnValida@19039311();
    BEGIN
      NAVReportingDataSourceOnAfterV;
    END;

    LOCAL PROCEDURE ExcelFileDataSourceOnValidate@19077148();
    BEGIN
      ExcelFileDataSourceOnAfterVali;
    END;

    LOCAL PROCEDURE PrimaryDocumentTypeOnValidate@19074431();
    BEGIN
      PrimaryDocumentTypeOnAfterVali;
    END;

    LOCAL PROCEDURE CorrectionDocumentTypeOnValida@19021758();
    BEGIN
      CorrectionDocumentTypeOnAfterV;
    END;

    BEGIN
    END.
  }
}

