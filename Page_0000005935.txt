OBJECT Page 5935 Service Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Service Credit Memo;
               RUS=Сервисная кредит-нота];
    SourceTable=Table5900;
    SourceTableView=WHERE(Document Type=FILTER(Credit Memo));
    PageType=Document;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN
                 SetSecurityFilterOnRespCenter;
               END;

    OnFindRecord=BEGIN
                   IF FIND(Which) THEN
                     EXIT(TRUE);

                   SETRANGE("No.");
                   EXIT(FIND(Which));
                 END;

    OnNewRecord=BEGIN
                  "Responsibility Center" := UserMgt.GetServiceFilter;

                  IF "No." = '' THEN
                    SetCustomerFromFilter;
                END;

    OnDeleteRecord=BEGIN
                     CurrPage.SAVERECORD;
                     CLEAR(ServLogMgt);
                     ServLogMgt.ServHeaderManualDelete(Rec);
                     EXIT(ConfirmDeletion);
                   END;

    OnQueryClosePage=BEGIN
                       IF NOT DocumentIsPosted THEN
                         EXIT(ConfirmCloseUnposted);
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 49      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Cr. Memo;
                                 RUS=&Кр.-нота];
                      Image=CreditMemo }
      { 51      ;2   ;Action    ;
                      Name=Statistics;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 RUS=Статистика];
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalcInvDiscForHeader;
                                 COMMIT;
                                 PAGE.RUNMODAL(PAGE::"Service Statistics",Rec);
                               END;
                                }
      { 52      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Card;
                                 RUS=Карточка];
                      RunObject=Page 21;
                      RunPageLink=No.=FIELD(Customer No.);
                      Image=EditLines }
      { 53      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 RUS=Ко&мментарии];
                      RunObject=Page 5911;
                      RunPageLink=Table Name=CONST(Service Header),
                                  Table Subtype=FIELD(Document Type),
                                  No.=FIELD(No.),
                                  Type=CONST(General);
                      Image=ViewComments }
      { 105     ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 RUS=Измерения];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 RUS=Просмотр или изменение измерений, например области, проекта или отдела, которые можно назначать документам покупки и продажи для распределения себестоимости и анализа истории транзакций.];
                      Enabled="No." <> '';
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 27      ;2   ;Separator  }
      { 30      ;2   ;Action    ;
                      CaptionML=[ENU=Service Document Lo&g;
                                 RUS=&Журнал сервисных документов];
                      Image=Log;
                      OnAction=VAR
                                 ServDocLog@1001 : Record 5912;
                                 TempServDocLog@1000 : TEMPORARY Record 5912;
                               BEGIN
                                 TempServDocLog.RESET;
                                 TempServDocLog.DELETEALL;

                                 ServDocLog.RESET;
                                 ServDocLog.SETRANGE("Document Type",ServDocLog."Document Type"::"Credit Memo");
                                 ServDocLog.SETRANGE("Document No.","No.");
                                 IF ServDocLog.FINDSET THEN
                                   REPEAT
                                     TempServDocLog := ServDocLog;
                                     TempServDocLog.INSERT;
                                   UNTIL ServDocLog.NEXT = 0;

                                 TempServDocLog.RESET;
                                 TempServDocLog.SETCURRENTKEY("Change Date","Change Time");
                                 TempServDocLog.ASCENDING(FALSE);

                                 PAGE.RUN(0,TempServDocLog);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 58      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 RUS=Ф&ункции];
                      Image=Action }
      { 114     ;2   ;Action    ;
                      Name=Calculate Invoice Discount;
                      AccessByPermission=TableData 19=R;
                      CaptionML=[ENU=Calculate &Invoice Discount;
                                 RUS=Вычи&слить скидку по счету];
                      Image=CalculateInvoiceDiscount;
                      OnAction=BEGIN
                                 ApproveCalcInvDisc;
                               END;
                                }
      { 113     ;2   ;Separator  }
      { 121     ;2   ;Action    ;
                      Name=ApplyEntries;
                      ShortCutKey=Shift+F11;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Apply Entries;
                                 RUS=Применить операции];
                      Image=ApplyEntries;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Service Header Apply",Rec);
                               END;
                                }
      { 126     ;2   ;Separator  }
      { 112     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Get St&d. Service Codes;
                                 RUS=Получить с&танд. сервисные коды];
                      Image=ServiceCode;
                      OnAction=VAR
                                 StdServCode@1001 : Record 5996;
                               BEGIN
                                 StdServCode.InsertServiceLines(Rec);
                               END;
                                }
      { 128     ;2   ;Separator  }
      { 120     ;2   ;Action    ;
                      CaptionML=[ENU=Get Prepaid Contract E&ntries;
                                 RUS=Получить о&перации предоплаты по контракту];
                      Image=ContractPayment;
                      OnAction=BEGIN
                                 CLEAR(GetPrepaidTransactions);
                                 GetPrepaidTransactions.Initialize(Rec);
                                 GetPrepaidTransactions.RUNMODAL;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 59      ;1   ;ActionGroup;
                      CaptionML=[ENU=P&osting;
                                 RUS=У&чет];
                      Image=Post }
      { 60      ;2   ;Action    ;
                      Name=TestReport;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Test Report;
                                 RUS=Тестовый отчет];
                      ToolTipML=[ENU=View a test report so that you can find and correct any errors before you perform the actual posting of the journal or document.;
                                 RUS=Просмотр тестового отчета, чтобы можно было найти и исправить все ошибки перед учетом журнала или документа.];
                      Image=TestReport;
                      OnAction=BEGIN
                                 ReportPrint.PrintServiceHeader(Rec);
                               END;
                                }
      { 61      ;2   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      CaptionML=[ENU=P&ost;
                                 RUS=У&чет];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceHeader@1001 : Record 5900;
                                 ServPostYesNo@1000 : Codeunit 5981;
                                 InstructionMgt@1003 : Codeunit 1330;
                                 PreAssignedNo@1002 : Code[20];
                               BEGIN
                                 PreAssignedNo := "No.";
                                 ServPostYesNo.PostDocument(Rec);

                                 DocumentIsPosted := NOT ServiceHeader.GET("Document Type","No.");

                                 IF InstructionMgt.IsEnabled(InstructionMgt.ShowPostedConfirmationMessageCode) THEN
                                   ShowPostedConfirmationMessage(PreAssignedNo);
                               END;
                                }
      { 5       ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=[ENU=Preview Posting;
                                 RUS=Предварительный просмотр учета];
                      ToolTipML=[ENU=Review the different types of entries that will be created when you post the document or journal.;
                                 RUS=Просмотр различных типов операций, которые будут созданы в результате учета документа или журнала.];
                      Image=ViewPostedOrder;
                      OnAction=VAR
                                 ServiceHeader@1001 : Record 5900;
                                 ServPostYesNo@1000 : Codeunit 5981;
                               BEGIN
                                 ServPostYesNo.PreviewDocument(Rec);
                                 DocumentIsPosted := NOT ServiceHeader.GET("Document Type","No.");
                               END;
                                }
      { 3       ;2   ;Action    ;
                      Name=PostAndSend;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Post and &Send;
                                 RUS=Учесть и &отправить];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostSendTo;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceHeader@1000 : Record 5900;
                               BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Service-Post and Send",Rec);
                                 DocumentIsPosted := NOT ServiceHeader.GET("Document Type","No.");
                               END;
                                }
      { 62      ;2   ;Action    ;
                      ShortCutKey=Shift+F9;
                      CaptionML=[ENU=Post and &Print;
                                 RUS=Учет и &печать];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostPrint;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServPostPrint@1000 : Codeunit 5982;
                               BEGIN
                                 ServPostPrint.PostDocument(Rec);
                               END;
                                }
      { 63      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Post &Batch;
                                 RUS=&Пакетный учет];
                      Image=PostBatch;
                      OnAction=BEGIN
                                 REPORT.RUNMODAL(REPORT::"Batch Post Service Cr. Memos",TRUE,TRUE,Rec);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           RUS=Общее] }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the service document you are creating.;
                           RUS=Определяет номер создаваемого сервисного документа.];
                SourceExpr="No.";
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the customer who owns the items in the service document.;
                           RUS=Определяет номер клиента, владеющего товарами из сервисного документа.];
                SourceExpr="Customer No.";
                OnValidate=BEGIN
                             CustomerNoOnAfterValidate;
                           END;
                            }

    { 57  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the contact to whom you will deliver the service.;
                           RUS=Определяет номер контакта, которому будет оказана услуга.];
                SourceExpr="Contact No.";
                OnValidate=BEGIN
                             IF GETFILTER("Contact No.") = xRec."Contact No." THEN
                               IF "Contact No." <> xRec."Contact No." THEN
                                 SETRANGE("Contact No.");
                           END;
                            }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the customer to whom the items on the document will be shipped.;
                           RUS=Определяет название клиента, которому будут отгружены товары по этому документу.];
                SourceExpr=Name }

    { 65  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the address of the customer to whom the service will be shipped.;
                           RUS=Определяет адрес клиента, которому будет оказана услуга.];
                SourceExpr=Address }

    { 67  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies an alternate address of the customer.;
                           RUS=Определяет альтернативный адрес клиента.];
                SourceExpr="Address 2" }

    { 70  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the postal code of the address.;
                           RUS=Определяет почтовый индекс для адреса.];
                SourceExpr="Post Code" }

    { 69  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the city of the address.;
                           RUS=Определяет город для адреса.];
                SourceExpr=City }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the contact who will receive the service.;
                           RUS=Определяет имя контакта, который примет услугу.];
                SourceExpr="Contact Name" }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the service document should be posted.;
                           RUS=Определяет дату, когда должен быть учтен сервисный документ.];
                SourceExpr="Posting Date" }

    { 39  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the service document was created.;
                           RUS=Определяет дату создания сервисного документа.];
                SourceExpr="Document Date" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the salesperson assigned to this service document.;
                           RUS=Определяет код менеджера по продажам, назначенного этому сервисному документу.];
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             SalespersonCodeOnAfterValidate;
                           END;
                            }

    { 107 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the responsibility center associated with the user who created the service order.;
                           RUS=Определяет код центра ответственности, который связан с пользователем, создавшим сервисный заказ.];
                SourceExpr="Responsibility Center";
                OnValidate=BEGIN
                             ResponsibilityCenterOnAfterVal;
                           END;
                            }

    { 111 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who is responsible for the document.;
                           RUS=Определяет код пользователя, который отвечает за документ.];
                SourceExpr="Assigned User ID" }

    { 48  ;1   ;Part      ;
                Name=ServLines;
                SubPageLink=Document No.=FIELD(No.);
                PagePartID=Page5936 }

    { 1905885101;1;Group  ;
                CaptionML=[ENU=Invoicing;
                           RUS=Счет] }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the customer to whom you send the order invoice.;
                           RUS=Определяет номер клиента, которому отправляется счет по заказу.];
                SourceExpr="Bill-to Customer No.";
                OnValidate=BEGIN
                             BilltoCustomerNoOnAfterValidat;
                           END;
                            }

    { 124 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the contact to whom you will send the invoice.;
                           RUS=Определяет номер контакта, которому будет отправлен счет.];
                SourceExpr="Bill-to Contact No." }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the customer to whom you will send invoices.;
                           RUS=Определяет имя клиента, которому будут отправлены счета.];
                SourceExpr="Bill-to Name" }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the address of the customer to whom you will send the invoice.;
                           RUS=Определяет адрес клиента, которому будет отправлен счет.];
                SourceExpr="Bill-to Address" }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies an alternate address of the customer.;
                           RUS=Определяет альтернативный адрес клиента.];
                SourceExpr="Bill-to Address 2" }

    { 75  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the postal code of the address.;
                           RUS=Определяет почтовый индекс для адреса.];
                SourceExpr="Bill-to Post Code" }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the city of the address.;
                           RUS=Определяет город для адреса.];
                SourceExpr="Bill-to City" }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the person to contact when sending invoices to the customer.;
                           RUS=Определяет имя контактного лица при отправке счетов клиенту.];
                SourceExpr="Bill-to Contact" }

    { 74  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code for the dimension chosen as Global Dimension 1.;
                           RUS=Определяет код значения измерения, выбранного как глобальное измерение 1.];
                SourceExpr="Shortcut Dimension 1 Code";
                OnValidate=BEGIN
                             ShortcutDimension1CodeOnAfterV;
                           END;
                            }

    { 78  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code for the dimension chosen as Global Dimension 2.;
                           RUS=Определяет код значения измерения, выбранного как глобальное измерение 2.];
                SourceExpr="Shortcut Dimension 2 Code";
                OnValidate=BEGIN
                             ShortcutDimension2CodeOnAfterV;
                           END;
                            }

    { 131 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code that represents the service header payment terms, which are used to calculate the due date and payment discount date.;
                           RUS=Определяет код, представляющий условия оплаты в заголовке сервиса, которые используются для расчета срока оплаты и даты предоставления скидки по оплате.];
                SourceExpr="Payment Terms Code" }

    { 133 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies when the invoice is due.;
                           RUS=Определяет, когда должен быть оплачен счет.];
                SourceExpr="Due Date" }

    { 135 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the percentage of payment discount given, if the customer pays by the date entered in the Pmt. Discount Date field.;
                           RUS=Определяет процент скидки по оплате, которая предоставляется при условии совершения клиентом оплаты не позже даты, указанной в поле "Дата скидки оплаты".];
                SourceExpr="Payment Discount %" }

    { 137 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the last date for the customer to pay the invoice and receive a payment discount.;
                           RUS=Определяет крайний срок, когда клиент может оплатить счет и получить скидку по оплате.];
                SourceExpr="Pmt. Discount Date" }

    { 100 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that the unit price on the Service Line will be displayed including VAT.;
                           RUS=Указывает, что цена единицы в сервисной строке должна отображаться с учетом НДС.];
                SourceExpr="Prices Including VAT";
                OnValidate=BEGIN
                             PricesIncludingVATOnAfterValid;
                           END;
                            }

    { 1906801201;1;Group  ;
                CaptionML=[ENU=Shipping;
                           RUS=Отгрузка] }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the customer to whom you will ship the service on the document.;
                           RUS=Определяет название клиента, которому оказывается услуга по этому документу.];
                SourceExpr="Ship-to Name" }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the address where the service on the document should be shipped to.;
                           RUS=Определяет адрес, по которому должна быть оказана услуга по документу.];
                SourceExpr="Ship-to Address" }

    { 36  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies an additional line of the address.;
                           RUS=Определяет дополнительную строку адреса.];
                SourceExpr="Ship-to Address 2" }

    { 83  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the postal code of the address.;
                           RUS=Определяет почтовый индекс для адреса.];
                SourceExpr="Ship-to Post Code" }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the city of the address.;
                           RUS=Определяет город для адреса.];
                SourceExpr="Ship-to City" }

    { 40  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the contact person at the place where the service should be shipped to.;
                           RUS=Определяет имя контактного лица в месте оказания услуги.];
                SourceExpr="Ship-to Contact" }

    { 80  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the location (for example, warehouse or distribution center) of the items specified on the service item lines.;
                           RUS=Определяет код склада (например, складского помещения или центра дистрибуции), где находятся товары, указанные в строках сервисного товара.];
                SourceExpr="Location Code" }

    { 1907468901;1;Group  ;
                CaptionML=[ENU=Foreign Trade;
                           RUS=Внешняя торговля] }

    { 91  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for various amounts on the service lines.;
                           RUS=Определяет код валюты для различных сумм в сервисных строках.];
                SourceExpr="Currency Code";
                OnAssistEdit=BEGIN
                               CLEAR(ChangeExchangeRate);
                               ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date");
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);
                                 CurrPage.UPDATE;
                               END;
                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 42  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a check box in this field if the service order is part of an EU 3-party trade transaction.;
                           RUS=Флажок в этому поле указывает, что сервисный заказ является частью транзакции трехсторонней торговли в ЕС.];
                SourceExpr="EU 3-Party Trade" }

    { 44  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the transaction type assigned to the service document.;
                           RUS=Определяет код типа транзакции, назначенного сервисному документу.];
                SourceExpr="Transaction Type" }

    { 89  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the transaction specification code used on the service document.;
                           RUS=Определяет код спецификации транзакции, используемый в сервисном документе.];
                SourceExpr="Transaction Specification" }

    { 46  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the transport method to be used for shipment.;
                           RUS=Определяет код метода перевозки, который будет использоваться для отгрузки.];
                SourceExpr="Transport Method" }

    { 85  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the port of exit through which you ship the service out of your country/region.;
                           RUS=Определяет код порта выхода, через который осуществляется отгрузка услуг за пределы страны или региона.];
                SourceExpr="Exit Point" }

    { 87  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the area where the customer company is located.;
                           RUS=Определяет код области, в которой находится организация клиента.];
                SourceExpr=Area }

    { 1904409301;1;Group  ;
                CaptionML=[ENU=Application;
                           RUS=Применение] }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if you want to apply an invoice or a credit memo to a service document that is posted.;
                           RUS=Указывает, нужно ли применить счет или кредит-ноту к учитываемому сервисному документу.];
                SourceExpr="Applies-to Doc. Type" }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if you want to apply an invoice or a credit memo to a service document that is posted.;
                           RUS=Указывает, нужно ли применить счет или кредит-ноту к учитываемому сервисному документу.];
                SourceExpr="Applies-to Doc. No." }

    { 94  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the applies-to ID of the posted entries, to which the given service document will be applied, if you use the Apply Entries function.;
                           RUS=Определяет код применения учтенных операций, к которым будет применен этот сервисный документ, если используется функция "Применить операции".];
                SourceExpr="Applies-to ID" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1902018507;1;Part   ;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9082;
                Visible=TRUE;
                PartType=Page }

    { 1900316107;1;Part   ;
                SubPageLink=No.=FIELD(Customer No.);
                PagePartID=Page9084;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      GetPrepaidTransactions@1006 : Report 6033;
      ReportPrint@1004 : Codeunit 228;
      UserMgt@1005 : Codeunit 5700;
      ServLogMgt@1000 : Codeunit 5906;
      ChangeExchangeRate@1002 : Page 511;
      DocumentIsPosted@1001 : Boolean;
      OpenPostedServiceCrMemoQst@1003 : TextConst 'ENU=The credit memo has been posted and moved to the Posted Service Credit Memos window.\\Do you want to open the posted credit memo?;RUS=Кредит-нота учтена и перемещена в окно учтенных сервисных кредит-нот.\\Открыть учтенную кредит-ноту?';

    LOCAL PROCEDURE ApproveCalcInvDisc@1();
    BEGIN
      CurrPage.ServLines.PAGE.ApproveCalcInvDisc;
    END;

    LOCAL PROCEDURE CustomerNoOnAfterValidate@19016267();
    BEGIN
      IF GETFILTER("Customer No.") = xRec."Customer No." THEN
        IF "Customer No." <> xRec."Customer No." THEN
          SETRANGE("Customer No.");
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SalespersonCodeOnAfterValidate@19011896();
    BEGIN
      CurrPage.ServLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE ResponsibilityCenterOnAfterVal@19032024();
    BEGIN
      CurrPage.ServLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE BilltoCustomerNoOnAfterValidat@19044114();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShortcutDimension1CodeOnAfterV@19029405();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShortcutDimension2CodeOnAfterV@19008725();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE PricesIncludingVATOnAfterValid@19009096();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowPostedConfirmationMessage@17(PreAssignedNo@1001 : Code[20]);
    VAR
      ServiceCrMemoHeader@1000 : Record 5994;
      InstructionMgt@1002 : Codeunit 1330;
    BEGIN
      ServiceCrMemoHeader.SETCURRENTKEY("Pre-Assigned No.");
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      IF ServiceCrMemoHeader.FINDFIRST THEN
        IF InstructionMgt.ShowConfirm(OpenPostedServiceCrMemoQst,InstructionMgt.ShowPostedConfirmationMessageCode) THEN
          PAGE.RUN(PAGE::"Posted Service Credit Memo",ServiceCrMemoHeader);
    END;

    BEGIN
    END.
  }
}

