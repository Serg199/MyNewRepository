OBJECT Table 8627 Config. Setup
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Config. Setup;
               RUS=Настройка конфигурации];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              RUS=Первичный ключ] }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              RUS=Название] }
    { 3   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              RUS=Название 2] }
    { 4   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              RUS=Адрес] }
    { 5   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              RUS=Адрес 2] }
    { 6   ;   ;City                ;Text30        ;CaptionML=[ENU=City;
                                                              RUS=Город] }
    { 7   ;   ;Phone No.           ;Text30        ;CaptionML=[ENU=Phone No.;
                                                              RUS=Телефон] }
    { 8   ;   ;Phone No. 2         ;Text30        ;CaptionML=[ENU=Phone No. 2;
                                                              RUS=Телефон 2] }
    { 9   ;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              RUS=Телекс] }
    { 10  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              RUS=Факс] }
    { 11  ;   ;Giro No.            ;Text20        ;CaptionML=[ENU=Giro No.;
                                                              RUS=Номер жиросчета] }
    { 12  ;   ;Bank Name           ;Text50        ;AccessByPermission=TableData 270=R;
                                                   CaptionML=[ENU=Bank Name;
                                                              RUS=Название банка] }
    { 13  ;   ;Bank Branch No.     ;Text20        ;AccessByPermission=TableData 270=R;
                                                   CaptionML=[ENU=Bank Branch No.;
                                                              RUS=Номер отделения банка] }
    { 14  ;   ;Bank Account No.    ;Text30        ;AccessByPermission=TableData 270=R;
                                                   CaptionML=[ENU=Bank Account No.;
                                                              RUS=Код банк. счета] }
    { 15  ;   ;Payment Routing No. ;Text20        ;CaptionML=[ENU=Payment Routing No.;
                                                              RUS=Номер маршрута оплаты] }
    { 17  ;   ;Customs Permit No.  ;Text10        ;CaptionML=[ENU=Customs Permit No.;
                                                              RUS=Номер разрешения таможни] }
    { 18  ;   ;Customs Permit Date ;Date          ;CaptionML=[ENU=Customs Permit Date;
                                                              RUS=Дата разрешения таможни] }
    { 19  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              RUS=ИНН] }
    { 20  ;   ;Registration No.    ;Text20        ;CaptionML=[ENU=Registration No.;
                                                              RUS=Регистрационный номер] }
    { 21  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              RUS=Телекс для ответа] }
    { 22  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              RUS=Название получателя] }
    { 23  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              RUS=Название 2 получателя] }
    { 24  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              RUS=Адрес получателя] }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              RUS=Адрес 2 получателя] }
    { 26  ;   ;Ship-to City        ;Text30        ;CaptionML=[ENU=Ship-to City;
                                                              RUS=Город получателя] }
    { 27  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              RUS=Контакт получателя] }
    { 28  ;   ;Location Code       ;Code10        ;CaptionML=[ENU=Location Code;
                                                              RUS=Код склада] }
    { 29  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              RUS=Изображение];
                                                   SubType=Bitmap }
    { 30  ;   ;Post Code           ;Code20        ;CaptionML=[ENU=Post Code;
                                                              RUS=Индекс] }
    { 31  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              RUS=Район] }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;CaptionML=[ENU=Ship-to Post Code;
                                                              RUS=Индекс получателя] }
    { 33  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              RUS=Район получателя] }
    { 34  ;   ;E-Mail              ;Text80        ;CaptionML=[ENU=Email;
                                                              RUS=Эл. почта] }
    { 35  ;   ;Home Page           ;Text80        ;CaptionML=[ENU=Home Page;
                                                              RUS=Интернет-адрес] }
    { 36  ;   ;Country/Region Code ;Code10        ;CaptionML=[ENU=Country/Region Code;
                                                              RUS=Код страны/региона] }
    { 37  ;   ;Ship-to Country/Region Code;Code10 ;CaptionML=[ENU=Ship-to Country/Region Code;
                                                              RUS=Код страны/региона получателя] }
    { 38  ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              RUS=IBAN] }
    { 39  ;   ;SWIFT Code          ;Code20        ;CaptionML=[ENU=SWIFT Code;
                                                              RUS=SWIFT-код] }
    { 40  ;   ;Industrial Classification;Text30   ;CaptionML=[ENU=Industrial Classification;
                                                              RUS=Отраслевая классификация] }
    { 500 ;   ;Logo Position on Documents;Option  ;CaptionML=[ENU=Logo Position on Documents;
                                                              RUS=Позиция логотипа на документах];
                                                   OptionCaptionML=[ENU=No Logo,Left,Center,Right;
                                                                    RUS=Нет логотипа,Слева,В центре,Справа];
                                                   OptionString=No Logo,Left,Center,Right }
    { 5700;   ;Responsibility Center;Code10       ;CaptionML=[ENU=Responsibility Center;
                                                              RUS=Центр ответственности] }
    { 5791;   ;Check-Avail. Period Calc.;DateFormula;
                                                   CaptionML=[ENU=Check-Avail. Period Calc.;
                                                              RUS=Расчет периода проверки наличия] }
    { 5792;   ;Check-Avail. Time Bucket;Option    ;CaptionML=[ENU=Check-Avail. Time Bucket;
                                                              RUS=Временной период проверки наличия];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                                                    RUS=День,Неделя,Месяц,Квартал,Год];
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 7600;   ;Base Calendar Code  ;Code10        ;CaptionML=[ENU=Base Calendar Code;
                                                              RUS=Код базового календаря] }
    { 7601;   ;Cal. Convergence Time Frame;DateFormula;
                                                   InitValue=1Y;
                                                   CaptionML=[ENU=Cal. Convergence Time Frame;
                                                              RUS=Время сведения календаря] }
    { 8600;   ;Package File Name   ;Text250       ;OnValidate=BEGIN
                                                                ReadPackageHeader(DecompressPackage(TRUE));
                                                              END;

                                                   CaptionML=[ENU=Package File Name;
                                                              RUS=Имя файла пакета] }
    { 8601;   ;Package Code        ;Code20        ;CaptionML=[ENU=Package Code;
                                                              RUS=Код пакета];
                                                   Editable=No }
    { 8602;   ;Language ID         ;Integer       ;TableRelation="Windows Language";
                                                   CaptionML=[ENU=Language ID;
                                                              RUS=Код языка];
                                                   Editable=No }
    { 8603;   ;Product Version     ;Text80        ;CaptionML=[ENU=Product Version;
                                                              RUS=Версия продукта];
                                                   Editable=No }
    { 8604;   ;Package Name        ;Text50        ;CaptionML=[ENU=Package Name;
                                                              RUS=Имя пакета] }
    { 8605;   ;Your Profile Code   ;Code30        ;TableRelation=Profile;
                                                   CaptionML=[ENU=Your Profile Code;
                                                              RUS=Ваш код профиля] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PackageAlreadyExistsQst@1003 : TextConst 'ENU=The imported package already exists. Do you want to import another package?;RUS=Импортированный пакет уже существует. Импортировать другой пакет?';
      HideDialog@1000 : Boolean;
      PackageDataNotDefinedErr@1001 : TextConst '@@@="%1 = ""Package Code""";ENU=%1 should be defined in the imported package.;RUS=В импортированном пакете должно быть выполнено определение %1.';

    PROCEDURE CompleteWizard@1() : Boolean;
    BEGIN
      TESTFIELD("Package File Name");
      TESTFIELD("Package Code");
      TESTFIELD("Package Name");

      ImportPackage(DecompressPackage(TRUE));
      ApplyPackages;
      ApplyAnswers;
      CopyCompInfo;
      SelectDefaultRoleCenter("Your Profile Code");
      EXIT(TRUE);
    END;

    PROCEDURE SelectDefaultRoleCenter@8(ProfileID@1000 : Code[30]);
    VAR
      Profile@1001 : Record 2000000072;
      ConfPersonalizationMgt@1002 : Codeunit 9170;
    BEGIN
      IF Profile.GET(ProfileID) THEN BEGIN
        Profile.VALIDATE("Default Role Center",TRUE);
        Profile.MODIFY;
        ConfPersonalizationMgt.ChangeDefaultRoleCenter(ProfileID);
      END;
    END;

    PROCEDURE ReadPackageHeader@7(DecompressedFileName@1005 : Text);
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigXMLExchange@1002 : Codeunit 8614;
      XMLDOMManagement@1004 : Codeunit 6224;
      PackageXML@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DocumentElement@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      LanguageID@1006 : Text;
    BEGIN
      IF "Package File Name" <> '' THEN BEGIN
        XMLDOMManagement.LoadXMLDocumentFromFile(DecompressedFileName,PackageXML);
        DocumentElement := PackageXML.DocumentElement;
        "Package Code" :=
          COPYSTR(
            ConfigXMLExchange.GetAttribute(
              ConfigXMLExchange.GetElementName(ConfigPackage.FIELDNAME(Code)),DocumentElement),
            1,MAXSTRLEN("Package Code"));
        IF "Package Code" = '' THEN
          ERROR(PackageDataNotDefinedErr,FIELDCAPTION("Package Code"));
        "Package Name" :=
          COPYSTR(
            ConfigXMLExchange.GetAttribute(
              ConfigXMLExchange.GetElementName(ConfigPackage.FIELDNAME("Package Name")),DocumentElement),
            1,MAXSTRLEN("Package Name"));
        IF "Package Name" = '' THEN
          ERROR(PackageDataNotDefinedErr,FIELDCAPTION("Package Name"));
        "Product Version" :=
          COPYSTR(
            ConfigXMLExchange.GetAttribute(
              ConfigXMLExchange.GetElementName(ConfigPackage.FIELDNAME("Product Version")),DocumentElement),
            1,MAXSTRLEN("Product Version"));
        LanguageID := ConfigXMLExchange.GetAttribute(
            ConfigXMLExchange.GetElementName(ConfigPackage.FIELDNAME("Language ID")),DocumentElement);
        IF LanguageID <> '' THEN
          EVALUATE("Language ID",LanguageID);
        MODIFY;
      END ELSE BEGIN
        "Package Code" := '';
        "Package Name" := '';
        "Product Version" := '';
        "Language ID" := 0;
      END;
    END;

    PROCEDURE ImportPackage@4(DecompressedFileName@1005 : Text);
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigXMLExchange@1001 : Codeunit 8614;
    BEGIN
      IF ConfigPackage.GET("Package Code") THEN
        IF NOT HideDialog THEN
          IF CONFIRM(PackageAlreadyExistsQst,TRUE) THEN BEGIN
            ConfigPackage.DELETE(TRUE);
            COMMIT;
          END ELSE
            ERROR('');

      ConfigXMLExchange.SetHideDialog(HideDialog);
      ConfigXMLExchange.ImportPackageXML(DecompressedFileName);
      COMMIT;
    END;

    PROCEDURE ApplyPackages@6() ErrorCount : Integer;
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1002 : Record 8613;
      ConfigPackageMgt@1001 : Codeunit 8611;
    BEGIN
      ConfigPackage.GET("Package Code");
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageMgt.SetHideDialog(HideDialog);
      ErrorCount := ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,TRUE);
    END;

    PROCEDURE ApplyAnswers@9();
    VAR
      ConfigQuestionnaire@1000 : Record 8610;
      ConfigQuestionnaireMgt@1001 : Codeunit 8610;
    BEGIN
      IF ConfigQuestionnaire.FINDSET THEN
        REPEAT
          ConfigQuestionnaireMgt.ApplyAnswers(ConfigQuestionnaire);
        UNTIL ConfigQuestionnaire.NEXT = 0;
    END;

    PROCEDURE CopyCompInfo@5();
    VAR
      CompanyInfo@1000 : Record 79;
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      IF NOT CompanyInfo.GET THEN BEGIN
        CompanyInfo.INIT;
        CompanyInfo.INSERT;
      END;
      CompanyInfo.TRANSFERFIELDS(Rec);
      CompanyInfo.MODIFY;

      IF NOT SalesReceivablesSetup.GET THEN BEGIN
        SalesReceivablesSetup.INIT;
        SalesReceivablesSetup.INSERT;
      END;
      SalesReceivablesSetup."Logo Position on Documents" := "Logo Position on Documents";
      SalesReceivablesSetup.MODIFY;

      COMMIT;
    END;

    PROCEDURE SetHideDialog@48(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    PROCEDURE DecompressPackage@2(UploadToServer@1003 : Boolean) DecompressedFileName : Text;
    VAR
      ConfigXMLExchange@1002 : Codeunit 8614;
      FileMgt@1001 : Codeunit 419;
    BEGIN
      IF UploadToServer THEN
        DecompressedFileName := ConfigXMLExchange.DecompressPackage(FileMgt.UploadFileSilent("Package File Name"))
      ELSE
        DecompressedFileName := ConfigXMLExchange.DecompressPackage("Package File Name");
    END;

    BEGIN
    END.
  }
}

