OBJECT Report 60006 Mapping Restore
{
  OBJECT-PROPERTIES
  {
    Date=27.03.17;
    Time=14:18:19;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnPreReport=BEGIN
                  // ПАРАМЕТРЫ >
                  GLAcc := '20501010';
                  JournalTemplateName := 'GENJL';
                  JournalBatchName := 'GJNEW';
                  // ПАРАМЕТРЫ <

                  // чистим фин. проводки из ГК и откатываем буфер
                  GLEntry.RESET;
                  GLEntry.SETCURRENTKEY("G/L Account No.", "Posting Date");
                  GLEntry.SETRANGE("G/L Account No.", GLAcc);
                  IF GLEntry.FINDSET THEN REPEAT
                    GLEntry1.RESET;
                    GLEntry1.SETCURRENTKEY("Cons. Source Code","Buffer Entry No.",Reposted,Removed);
                    GLEntry1.SETRANGE("Cons. Source Code", GLEntry."Cons. Source Code");
                    GLEntry1.SETRANGE("Buffer Entry No.", GLEntry."Buffer Entry No.");
                    IF GLEntry1.FINDSET THEN REPEAT
                      IF VendorLedgerEntry.GET(GLEntry1."Entry No.") THEN
                        VendorLedgerEntry.DELETE(TRUE);

                      IF CustLedgerEntry.GET(GLEntry1."Entry No.") THEN
                        CustLedgerEntry.DELETE(TRUE);

                      GLEntry1.DELETE(TRUE);

                      ConsDataBuffer.GET(GLEntry."Cons. Source Code", GLEntry."Buffer Entry No.");
                      ConsDataBuffer."Export Consolidation Register" := 0;
                      ConsDataBuffer.MODIFY;
                    UNTIL GLEntry1.NEXT = 0;
                  UNTIL GLEntry.NEXT = 0;

                  IF (JournalTemplateName <> '') AND (JournalBatchName <> '') THEN BEGIN

                  // чистим операции в фин. журнале
                  // клиентские операции
                  CustomerPostingGroup.RESET;
                  CustomerPostingGroup.SETRANGE("Receivables Account", GLAcc);
                  IF CustomerPostingGroup.FINDSET THEN
                  REPEAT
                    GenJournalLine.RESET;
                    GenJournalLine.SETCURRENTKEY("Account Type");
                    GenJournalLine.SETRANGE("Journal Template Name", JournalTemplateName);
                    GenJournalLine.SETRANGE("Journal Batch Name", JournalBatchName);
                    GenJournalLine.SETRANGE("Account Type", GenJournalLine."Account Type"::Customer);
                    GenJournalLine.SETRANGE("Posting Group", CustomerPostingGroup.Code);
                    IF GenJournalLine.FINDSET THEN REPEAT
                      GenJournalLine1.RESET;
                      GenJournalLine1.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
                      GenJournalLine1.SETRANGE("Buffer Entry No.", GenJournalLine."Buffer Entry No.");
                      GenJournalLine1.SETRANGE("Cons. Source Code", GenJournalLine."Cons. Source Code");
                      GenJournalLine1.FINDSET;
                      GenJournalLine1.DELETEALL(TRUE);

                      ConsDataBuffer.GET(GenJournalLine."Cons. Source Code", GenJournalLine."Buffer Entry No.");
                      ConsDataBuffer."Export Consolidation Register" := 0;
                      ConsDataBuffer.MODIFY;
                    UNTIL GenJournalLine.NEXT = 0;
                  UNTIL CustomerPostingGroup.NEXT = 0;

                  // оперрации поставщиков
                  VendorPostingGroup.RESET;
                  VendorPostingGroup.SETRANGE("Payables Account", GLAcc);
                  IF VendorPostingGroup.FINDSET THEN
                  REPEAT
                    GenJournalLine.RESET;
                    GenJournalLine.SETCURRENTKEY("Account Type");
                    GenJournalLine.SETRANGE("Journal Template Name", JournalTemplateName);
                    GenJournalLine.SETRANGE("Journal Batch Name", JournalBatchName);
                    GenJournalLine.SETRANGE("Account Type", GenJournalLine."Account Type"::Vendor);
                    GenJournalLine.SETRANGE("Posting Group", VendorPostingGroup.Code);
                    IF GenJournalLine.FINDSET THEN REPEAT
                      GenJournalLine1.RESET;
                      GenJournalLine1.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
                      GenJournalLine1.SETRANGE("Buffer Entry No.", GenJournalLine."Buffer Entry No.");
                      GenJournalLine1.SETRANGE("Cons. Source Code", GenJournalLine."Cons. Source Code");
                      GenJournalLine1.FINDSET;
                      GenJournalLine1.DELETEALL(TRUE);

                      ConsDataBuffer.GET(GenJournalLine."Cons. Source Code", GenJournalLine."Buffer Entry No.");
                      ConsDataBuffer."Export Consolidation Register" := 0;
                      ConsDataBuffer.MODIFY;
                    UNTIL GenJournalLine.NEXT = 0;
                  UNTIL VendorPostingGroup.NEXT = 0;

                  // операции по банку
                  BankAccountPostingGroup.RESET;
                  BankAccountPostingGroup.SETRANGE("G/L Bank Account No.", GLAcc);
                  IF BankAccountPostingGroup.FINDSET THEN
                  REPEAT
                    GenJournalLine.RESET;
                    GenJournalLine.SETCURRENTKEY("Account Type");
                    GenJournalLine.SETRANGE("Journal Template Name", JournalTemplateName);
                    GenJournalLine.SETRANGE("Journal Batch Name", JournalBatchName);
                    GenJournalLine.SETRANGE("Account Type", GenJournalLine."Account Type"::"Bank Account");
                    GenJournalLine.SETRANGE("Posting Group", BankAccountPostingGroup.Code);
                    IF GenJournalLine.FINDSET THEN REPEAT
                      GenJournalLine1.RESET;
                      GenJournalLine1.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
                      GenJournalLine1.SETRANGE("Buffer Entry No.", GenJournalLine."Buffer Entry No.");
                      GenJournalLine1.SETRANGE("Cons. Source Code", GenJournalLine."Cons. Source Code");
                      GenJournalLine1.FINDSET;
                      GenJournalLine1.DELETEALL(TRUE);

                      ConsDataBuffer.GET(GenJournalLine."Cons. Source Code", GenJournalLine."Buffer Entry No.");
                      ConsDataBuffer."Export Consolidation Register" := 0;
                      ConsDataBuffer.MODIFY;
                    UNTIL GenJournalLine.NEXT = 0;
                  UNTIL BankAccountPostingGroup.NEXT = 0;
                  END;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      GLEntry@1101495000 : Record 17;
      GLEntry1@1101495003 : Record 17;
      VendorLedgerEntry@1101495001 : Record 25;
      CustLedgerEntry@1101495007 : Record 21;
      LedgerEntryDimension@1101495002 : Record 355;
      ConsSourceCode@1101495004 : Code[20];
      ConsDataBuffer@1101495005 : Record 50008;
      GLAcc@1101495006 : Code[20];
      CustomerPostingGroup@1101495008 : Record 92;
      VendorPostingGroup@1101495009 : Record 93;
      GenJournalLine@1101495010 : Record 81;
      GenJournalLine1@1101495013 : Record 81;
      JournalTemplateName@1101495012 : Code[20];
      JournalBatchName@1101495011 : Code[20];
      BankAccountPostingGroup@1101495014 : Record 277;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>353c5957-1a12-4127-bb5b-4fe6b6f0e0a6</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <Code>Public Function BlankZero(ByVal Value As Decimal)
    if Value = 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankPos(ByVal Value As Decimal)
    if Value &gt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankZeroAndPos(ByVal Value As Decimal)
    if Value &gt;= 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNeg(ByVal Value As Decimal)
    if Value &lt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNegAndZero(ByVal Value As Decimal)
    if Value &lt;= 0 then
        Return ""
    end if
    Return Value
End Function
</Code>
  <Language>=User!Language</Language>
  <ConsumeContainerWhitespace>true</ConsumeContainerWhitespace>
  <rd:ReportUnitType>Inch</rd:ReportUnitType>
  <rd:ReportID>0eeb6585-38ae-40f1-885b-8d50088d51b4</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

