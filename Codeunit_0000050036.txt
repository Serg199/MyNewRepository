OBJECT Codeunit 50036 FI Insert G/L Account
{
  OBJECT-PROPERTIES
  {
    Date=30.07.10;
    Time=[ 9:50:19];
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=50106;
    OnRun=VAR
            DisposalEntry@1000 : Boolean;
            FA@1210000 : Record 5600;
            Flag@1210001 : Boolean;
          BEGIN
            CLEAR(FIGLPostBuf);
            {
            DisposalEntry :=
              ("FA Posting Category" = "FA Posting Category"::" ") AND
              ("FA Posting Type" = "FA Posting Type"::"Proceeds on Disposal");
            IF NOT BookValueEntry THEN
              BookValueEntry :=
                ("FA Posting Category" = "FA Posting Category"::Disposal) AND
                ("FA Posting Type" = "FA Posting Type"::"Book Value on Disposal");

            IF NOT DisposalEntry THEN
            }
              FIGLPostBuf."Account No." := FIGetGLAcc.GetAccNo(Rec);
              FIGLPostBuf.Amount := Amount;
            {
            FIGLPostBuf.Correction := Correction;
            }
            FIGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
            FIGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
            FIGLPostBuf."FI Entry No." := "Entry No.";
            //FIGLPostBuf."Disposal Entry No." := "Disposal Entry No.";
            IF "Entry No." > 0 THEN
              FIGLPostBuf."FI Entry Type" := FIGLPostBuf."FI Entry Type"::" ";
            //FIGLPostBuf."Automatic Entry" := "Automatic Entry";
            GLEntryNo := "Entry No.";
            InsertBufferEntry;
            //"G/L Entry No." := TempFIGLPostBuf."Entry No.";
            {
            IF DisposalEntry THEN
              CalcDisposalAmount(Rec);
            Flag := FALSE;
            IF "Disposal Entry No." IN [-1,1] THEN
              CASE "FA Posting Category" OF
                "FA Posting Category"::Disposal,
                "FA Posting Category"::"Bal. Disposal": Flag := TRUE;
                ELSE BEGIN
                  CASE "FA Posting Type" OF
                    "FA Posting Type"::"Gain/Loss",
                    "FA Posting Type"::"Proceeds on Disposal": Flag := TRUE;
                  END;
                END;
              END;
            IF Flag THEN
              InsertDispAcc(Rec, TRUE);
            }
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=must not be more than 100;RUS=не должно быть больше 100';
      Text001@1001 : TextConst 'ENU=There is not enough space to insert the balance accounts.;RUS=Недостаточно места для вставки балансирующих счетов.';
      TempFIGLPostBuf@1002 : TEMPORARY Record 50108;
      FIGLPostBuf@1003 : Record 50108;
      FAAlloc@1004 : Record 5615;
      FIPostingSetup@1005 : Record 50105;
      FIPostingSetup2@1006 : Record 50105;
      FADeprBook@1007 : Record 5612;
      JnlLineDim@1008 : Record 356;
      JnlLineDimTmp@1009 : TEMPORARY Record 356;
      JnlLineDimTmp2@1010 : TEMPORARY Record 356;
      FADimMgt@1011 : Codeunit 5674;
      FIGetGLAcc@1012 : Codeunit 50037;
      DepreciationCalc@1013 : Codeunit 5616;
      NextEntryNo@1014 : Integer;
      GLEntryNo@1015 : Integer;
      TotalAllocAmount@1016 : Decimal;
      NewAmount@1017 : Decimal;
      TotalPercent@1018 : Decimal;
      NumberOfEntries@1019 : Integer;
      NextLineNo@1020 : Integer;
      NoOfEmptyLines@1021 : Integer;
      NoOfEmptyLines2@1027 : Integer;
      OrgGenJnlLine@1022 : Boolean;
      DisposalEntryNo@1023 : Integer;
      GainLossAmount@1024 : Decimal;
      DisposalAmount@1025 : Decimal;
      BookValueEntry@1026 : Boolean;
      NetDisp@1028 : Boolean;

    PROCEDURE InsertMaintenanceAccNo_@5(VAR MaintenanceLedgEntry@1000 : Record 5625);
    BEGIN
      {
      WITH MaintenanceLedgEntry DO BEGIN
        CLEAR(FIGLPostBuf);
        FIGLPostBuf."Account No." := FIGetGLAcc.GetMaintenanceAccNo(MaintenanceLedgEntry);
        FIGLPostBuf.Amount := Amount;
        FIGLPostBuf.Correction := Correction;
        FIGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
        FIGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
        FIGLPostBuf."FI Entry No." := "Entry No.";
        FIGLPostBuf."FI Entry Type" := FIGLPostBuf."FI Entry Type";
        GLEntryNo := "G/L Entry No.";
        InsertBufferEntry;
        "G/L Entry No." := TempFIGLPostBuf."Entry No.";
      END;
      }
    END;

    LOCAL PROCEDURE InsertBufferBalAcc_@2(FAPostingType@1000 : 'Acquisition,Depr,WriteDown,Appr,Custom1,Custom2,Disposal,Maintenance,Gain,Loss,Book Value Gain,Book Value Loss';AllocAmount@1001 : Decimal;DeprBookCode@1002 : Code[10];PostingGrCode@1003 : Code[10];GlobalDim1Code@1004 : Code[20];GlobalDim2Code@1005 : Code[20];AutomaticEntry@1006 : Boolean;Correction@1007 : Boolean);
    VAR
      GLAccNo@1008 : Code[20];
      FieldErrorText@1009 : Text[50];
      Flag@1210000 : Boolean;
      FALedgEntry@1210001 : Record 5601;
    BEGIN
      {
      NumberOfEntries := 0;
      TotalAllocAmount := 0;
      NewAmount := 0;
      TotalPercent := 0;
      FieldErrorText := Text000;
      WITH FIPostingSetup DO BEGIN
        RESET;
        GET(PostingGrCode);
        CASE FAPostingType OF
          FAPostingType::Acquisition:
             BEGIN
               TESTFIELD("Acquisition Cost Bal. Acc.");
               GLAccNo := "Acquisition Cost Bal. Acc.";
               CALCFIELDS("Allocated Acquisition Cost %");
               IF "Allocated Acquisition Cost %" > 100 THEN
                 FIELDERROR("Allocated Acquisition Cost %",FieldErrorText);
             END;
          FAPostingType::Depr:
             BEGIN
               TESTFIELD("Depreciation Expense Acc.");
               GLAccNo := "Depreciation Expense Acc.";
               CALCFIELDS("Allocated Depreciation %");
               IF "Allocated Depreciation %" > 100 THEN
                 FIELDERROR("Allocated Depreciation %",FieldErrorText);
             END;
          FAPostingType::WriteDown:
             BEGIN
               TESTFIELD("Write-Down Expense Acc.");
               GLAccNo := "Write-Down Expense Acc.";
               CALCFIELDS("Allocated Write-Down %");
               IF "Allocated Write-Down %" > 100 THEN
                 FIELDERROR("Allocated Write-Down %",FieldErrorText);
             END;
          FAPostingType::Appr:
             BEGIN
               TESTFIELD("Appreciation Bal. Account");
               GLAccNo := "Appreciation Bal. Account";
               CALCFIELDS("Allocated Appreciation %");
               IF "Allocated Appreciation %" > 100 THEN
                 FIELDERROR("Allocated Appreciation %",FieldErrorText);
             END;
          FAPostingType::Custom1:
             BEGIN
               TESTFIELD("Custom 1 Expense Acc.");
               GLAccNo := "Custom 1 Expense Acc.";
               CALCFIELDS("Allocated Custom 1 %");
               IF "Allocated Custom 1 %" > 100 THEN
                 FIELDERROR("Allocated Custom 1 %",FieldErrorText);
             END;
          FAPostingType::Custom2:
             BEGIN
               TESTFIELD("Custom 2 Expense Acc.");
               GLAccNo := "Custom 2 Expense Acc.";
               CALCFIELDS("Allocated Custom 2 %");
               IF "Allocated Custom 2 %" > 100 THEN
                 FIELDERROR("Allocated Custom 2 %",FieldErrorText);
             END;
          FAPostingType::Disposal:
             BEGIN
               TESTFIELD("Sales Bal. Acc.");
               GLAccNo := "Sales Bal. Acc.";
               CALCFIELDS("Allocated Sales Price %");
               IF "Allocated Sales Price %" > 100 THEN
                 FIELDERROR("Allocated Sales Price %",FieldErrorText);
             END;
          FAPostingType::Maintenance:
             BEGIN
               TESTFIELD("Maintenance Bal. Acc.");
               GLAccNo := "Maintenance Bal. Acc.";
               CALCFIELDS("Allocated Maintenance %");
               IF "Allocated Maintenance %" > 100 THEN
                 FIELDERROR("Allocated Maintenance %",FieldErrorText);
             END;
          FAPostingType::Gain:
             BEGIN
               TESTFIELD("Gains Acc. on Disposal");
               GLAccNo := "Gains Acc. on Disposal";
               CALCFIELDS("Allocated Gain %");
               IF "Allocated Gain %" > 100 THEN
                 FIELDERROR("Allocated Gain %",FieldErrorText);
             END;
          FAPostingType::Loss:
             BEGIN
               TESTFIELD("Losses Acc. on Disposal");
               GLAccNo := "Losses Acc. on Disposal";
               CALCFIELDS("Allocated Loss %");
               IF "Allocated Loss %" > 100 THEN
                 FIELDERROR("Allocated Loss %",FieldErrorText);
             END;
          FAPostingType::"Book Value Gain":
             BEGIN
               TESTFIELD("Book Val. Acc. on Disp. (Gain)");
               GLAccNo := "Book Val. Acc. on Disp. (Gain)";
               CALCFIELDS("Allocated Book Value % (Gain)");
               IF "Allocated Book Value % (Gain)" > 100 THEN
                 FIELDERROR("Allocated Book Value % (Gain)",FieldErrorText);
             END;
          FAPostingType::"Book Value Loss":
             BEGIN
               TESTFIELD("Book Val. Acc. on Disp. (Loss)");
               GLAccNo := "Book Val. Acc. on Disp. (Loss)";
               CALCFIELDS("Allocated Book Value % (Loss)");
               IF "Allocated Book Value % (Loss)" > 100 THEN
                 FIELDERROR("Allocated Book Value % (Loss)",FieldErrorText);
             END;
        END;
      END;
      WITH FAAlloc DO BEGIN
        Flag := FAPostingType IN [FAPostingType::Gain,
                                  FAPostingType::Loss,
                                  FAPostingType::Disposal,
                                  FAPostingType::"Book Value Loss",
                                  FAPostingType::"Book Value Gain"];
        RESET;
        SETRANGE(Code,PostingGrCode);
        SETRANGE("Allocation Type",FAPostingType);
        IF FIND('-') THEN
          REPEAT
            IF ("Account No." = '') AND ("Allocation %" > 0) THEN
              TESTFIELD("Account No.");
            TotalPercent := TotalPercent + "Allocation %";
            NewAmount :=
              DepreciationCalc.CalcRounding(DeprBookCode,AllocAmount * TotalPercent / 100) - TotalAllocAmount;
            TotalAllocAmount := TotalAllocAmount + NewAmount;
            IF ABS(TotalAllocAmount) > ABS(AllocAmount) THEN
              NewAmount := AllocAmount - (TotalAllocAmount - NewAmount);
            CLEAR(FIGLPostBuf);
            FIGLPostBuf."Account No." := "Account No.";
            FIGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
            FIGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
            FIGLPostBuf.Amount := NewAmount;
            FIGLPostBuf."Automatic Entry" := AutomaticEntry;
            FIGLPostBuf.Correction := Correction;
            FIGLPostBuf."FA Posting Group" := Code;
            FIGLPostBuf."FA Allocation Type" := "Allocation Type";
            FIGLPostBuf."FA Allocation Line No." := "Line No.";
            IF NewAmount <> 0 THEN BEGIN
              FADimMgt.CheckFAAllocDim(FAAlloc);
              InsertBufferEntry;
              IF Flag THEN BEGIN
                CLEAR(FIGLPostBuf);
                IF FIPostingSetup."Sales Bal. Acc." <> '' THEN  BEGIN
                  FIGLPostBuf."Account No." := FIPostingSetup."Sales Bal. Acc.";
                  FIGLPostBuf.Amount := - NewAmount;
                  FIGLPostBuf.Correction := Correction;
                  FIGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
                  FIGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
                  FIGLPostBuf."Automatic Entry" := AutomaticEntry;
                  FIGLPostBuf."FA Posting Group" := Code;
                  FIGLPostBuf."FA Allocation Type" := "Allocation Type";
                  FIGLPostBuf."FA Allocation Line No." := "Line No.";
                  InsertBufferEntry;
                END;
              END;
            END;
          UNTIL NEXT = 0;
          IF ABS(TotalAllocAmount) < ABS(AllocAmount) THEN BEGIN
            NewAmount := AllocAmount - TotalAllocAmount;
            CLEAR(FIGLPostBuf);
            FIGLPostBuf."Account No." := GLAccNo;
            FIGLPostBuf.Amount := NewAmount;
            FIGLPostBuf."Global Dimension 1 Code" := GlobalDim1Code;
            FIGLPostBuf."Global Dimension 2 Code" := GlobalDim2Code;
            FIGLPostBuf."Automatic Entry" := AutomaticEntry;
            FIGLPostBuf.Correction := Correction;
            IF NewAmount <> 0 THEN BEGIN
              InsertBufferEntry;
              IF Flag THEN BEGIN
                CLEAR(FIGLPostBuf);
                IF FIPostingSetup."Sales Bal. Acc." <> '' THEN  BEGIN
                  FIGLPostBuf."Account No." := FIPostingSetup."Sales Bal. Acc.";
                  FIGLPostBuf.Amount := - NewAmount;
                  FIGLPostBuf.Correction := Correction;
                  FIGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
                  FIGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
                  FIGLPostBuf."Automatic Entry" := AutomaticEntry;
                  FIGLPostBuf."FA Posting Group" := Code;
                  FIGLPostBuf."FA Allocation Type" := "Allocation Type";
                  FIGLPostBuf."FA Allocation Line No." := "Line No.";
                  InsertBufferEntry;
                END;
              END;
          END;
        END;
      END;
      }
    END;

    PROCEDURE InsertBalAcc_@9(VAR FALedgEntry@1000 : Record 5601);
    BEGIN
      {
      // Called from codeunit 5632
      WITH FALedgEntry DO
        InsertBufferBalAcc(
          GetPostingType(FALedgEntry),-Amount,"Depreciation Book Code",
          "FA Posting Group","Global Dimension 1 Code","Global Dimension 2 Code","Automatic Entry",Correction);
      }
    END;

    PROCEDURE GetPostingType_@16(VAR FALedgEntry@1000 : Record 5601) : Integer;
    VAR
      FAPostingType@1001 : 'Acquisition,Depr,WriteDown,Appr,Custom1,Custom2,Disposal,Maintenance,Gain,Loss,Book Value Gain,Book Value Loss';
    BEGIN
      {
      WITH FALedgEntry DO BEGIN
        IF "FA Posting Type" >= "FA Posting Type"::"Gain/Loss" THEN BEGIN
          IF "FA Posting Type" = "FA Posting Type"::"Gain/Loss" THEN BEGIN
            IF "Result on Disposal" = "Result on Disposal"::Gain THEN
              EXIT(FAPostingType::Gain)
            ELSE
              EXIT(FAPostingType::Loss);
          END;
          IF "FA Posting Type" = "FA Posting Type"::"Book Value on Disposal" THEN BEGIN
            IF "Result on Disposal" = "Result on Disposal"::Gain THEN
              EXIT(FAPostingType::"Book Value Gain")
            ELSE
              EXIT(FAPostingType::"Book Value Loss");
          END;
        END ELSE
          EXIT(ConvertPostingType);
      END;
      }
    END;

    PROCEDURE GetBalAcc_@6(GenJnlLine@1000 : Record 81);
    VAR
      Description2@1001 : Text[50];
      FAAddCurrExchRate2@1002 : Decimal;
    BEGIN
      {
      TempFIGLPostBuf.DELETEALL;
      WITH GenJnlLine DO BEGIN
        RESET;
        FIND;
        CreateJnlLineDimTmp(GenJnlLine);
        TESTFIELD("Bal. Account No.",'');
        TESTFIELD("Account Type","Account Type"::"Fixed Asset");
        TESTFIELD("Account No.");
        TESTFIELD("Depreciation Book Code");
        TESTFIELD("Posting Group");
        TESTFIELD("FA Posting Type");
        Description2 := Description;
        FAAddCurrExchRate2 := "FA Add.-Currency Factor";
        InsertBufferBalAcc(
          "FA Posting Type" - 1,-Amount,"Depreciation Book Code",
          "Posting Group","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",FALSE,FALSE);
        CalculateNoOfEmptyLines(GenJnlLine,NumberOfEntries);
        "Account Type" := "Account Type"::"G/L Account";
        "Depreciation Book Code" := '';
        "Posting Group" := '';
        VALIDATE("FA Posting Type","FA Posting Type"::" ");
        IF TempFIGLPostBuf.FIND('-') THEN
          REPEAT
            "Line No." := 0;
            VALIDATE("Account No.",TempFIGLPostBuf."Account No.");
            VALIDATE(Amount,TempFIGLPostBuf.Amount);
            VALIDATE("Depreciation Book Code",'');
            "Shortcut Dimension 1 Code" := TempFIGLPostBuf."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempFIGLPostBuf."Global Dimension 2 Code";
            Description := Description2;
            "FA Add.-Currency Factor" := FAAddCurrExchRate2;
            InsertGenJnlLine(GenJnlLine,TempFIGLPostBuf);
          UNTIL TempFIGLPostBuf.NEXT = 0;
      END;
      TempFIGLPostBuf.DELETEALL;
      }
    END;

    PROCEDURE GetBalAcc2_@19(VAR GenJnlLine@1000 : Record 81;VAR NextLineNo2@1001 : Integer);
    BEGIN
      {
      NoOfEmptyLines2 := 1000;
      GetBalAcc(GenJnlLine);
      NextLineNo2 := NextLineNo;
      }
    END;

    LOCAL PROCEDURE CalculateNoOfEmptyLines_@7(VAR GenJnlLine@1000 : Record 81;NumberOfEntries@1001 : Integer);
    VAR
      GenJnlLine2@1002 : Record 81;
    BEGIN
      {
      GenJnlLine2."Journal Template Name" := GenJnlLine."Journal Template Name";
      GenJnlLine2."Journal Batch Name" := GenJnlLine."Journal Batch Name";
      GenJnlLine2."Line No." := GenJnlLine."Line No.";
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      NextLineNo := GenJnlLine."Line No.";
      IF NoOfEmptyLines2 > 0 THEN
        NoOfEmptyLines := NoOfEmptyLines2
      ELSE BEGIN
        IF GenJnlLine2.NEXT = 0 THEN
          NoOfEmptyLines := 1000
        ELSE
          NoOfEmptyLines := (GenJnlLine2."Line No." - NextLineNo) DIV (NumberOfEntries + 1);
        IF NoOfEmptyLines < 1 THEN
          ERROR(Text001);
      END;
      }
    END;

    LOCAL PROCEDURE InsertGenJnlLine@4(VAR GenJnlLine@1000 : Record 81;FIGLPostBuf@1001 : Record 50108);
    VAR
      FAJnlSetup@1002 : Record 5605;
    BEGIN
      NextLineNo := NextLineNo + NoOfEmptyLines;
      GenJnlLine."Line No." := NextLineNo;
      //FAJnlSetup.SetGenJnlTrailCodes(GenJnlLine);
      GenJnlLine.INSERT(TRUE);
      InsertJnlLineDim(GenJnlLine,FIGLPostBuf);
    END;

    LOCAL PROCEDURE InsertBufferEntry@13();
    BEGIN
      IF TempFIGLPostBuf.FIND('+') THEN
        NextEntryNo := TempFIGLPostBuf."Entry No." + 1
      ELSE
        NextEntryNo := GLEntryNo;
      TempFIGLPostBuf := FIGLPostBuf;
      TempFIGLPostBuf."Entry No." := NextEntryNo;
      TempFIGLPostBuf."Original General Journal Line" := OrgGenJnlLine;
      //TempFIGLPostBuf."Net Disposal" := NetDisp;
      TempFIGLPostBuf.INSERT;
      NumberOfEntries := NumberOfEntries + 1;
    END;

    PROCEDURE FindFirstGLAcc@8(VAR FIGLPostBuf@1000 : Record 50108) : Boolean;
    VAR
      ReturnValue@1001 : Boolean;
    BEGIN
      TempFIGLPostBuf.SETCURRENTKEY("Disposal Entry No.","Entry No.");
      ReturnValue := TempFIGLPostBuf.FIND('-');
      FIGLPostBuf := TempFIGLPostBuf;
      EXIT(ReturnValue);
    END;

    PROCEDURE GetNextGLAcc@10(VAR FIGLPostBuf@1000 : Record 50108) : Integer;
    VAR
      ReturnValue@1001 : Integer;
    BEGIN
      ReturnValue := TempFIGLPostBuf.NEXT;
      FIGLPostBuf := TempFIGLPostBuf;
      EXIT(ReturnValue);
    END;

    PROCEDURE DeleteAllGLAcc@12();
    BEGIN
      TempFIGLPostBuf.DELETEALL;
      DisposalEntryNo := 0;
      BookValueEntry := FALSE;
    END;

    LOCAL PROCEDURE CreateJnlLineDimTmp@11(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      JnlLineDimTmp.DELETEALL;
      WITH JnlLineDim DO BEGIN
        LOCKTABLE;
        SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
        SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
        SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        SETRANGE("Journal Line No.",GenJnlLine."Line No.");
        SETRANGE("Allocation Line No.",0);
        IF FIND('-') THEN
          REPEAT
            JnlLineDimTmp := JnlLineDim;
            JnlLineDimTmp.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertJnlLineDim@14(VAR GenJnlLine@1000 : Record 81;VAR FIGLPostBuf@1001 : Record 50108);
    VAR
      FAAllocDim@1002 : Record 5648;
      FADimMgt@1003 : Codeunit 5674;
    BEGIN
      JnlLineDimTmp2.DELETEALL;
      IF FIGLPostBuf."FI Posting Group" <> '' THEN BEGIN
        IF JnlLineDimTmp.FIND('-') THEN
          REPEAT
            JnlLineDimTmp2."Dimension Code" := JnlLineDimTmp."Dimension Code";
            JnlLineDimTmp2."Dimension Value Code" := JnlLineDimTmp."Dimension Value Code";
            JnlLineDimTmp2.INSERT;
          UNTIL JnlLineDimTmp.NEXT = 0;
        FAAllocDim.SETRANGE(Code,FIGLPostBuf."FI Posting Group");
        FAAllocDim.SETRANGE("Allocation Type",FIGLPostBuf."FA Allocation Type");
        FAAllocDim.SETRANGE("Line No.",FIGLPostBuf."FA Allocation Line No.");
        IF FAAllocDim.FIND('-') THEN
          REPEAT
            JnlLineDimTmp2.RESET;
            JnlLineDimTmp2.SETRANGE("Dimension Code",FAAllocDim."Dimension Code");
            IF NOT JnlLineDimTmp2.FINDFIRST THEN BEGIN
            JnlLineDimTmp2.RESET;
            JnlLineDimTmp2."Dimension Code" := FAAllocDim."Dimension Code";
            JnlLineDimTmp2."Dimension Value Code" := FAAllocDim."Dimension Value Code";
            JnlLineDimTmp2.INSERT;
            END ELSE BEGIN
              JnlLineDimTmp2."Dimension Value Code" := FAAllocDim."Dimension Value Code";
              JnlLineDimTmp2.MODIFY;
              JnlLineDimTmp2.RESET;
            END;
          UNTIL FAAllocDim.NEXT = 0;
      END ELSE BEGIN
        IF JnlLineDimTmp.FIND('-') THEN
          REPEAT
            JnlLineDimTmp2."Dimension Code" := JnlLineDimTmp."Dimension Code";
            JnlLineDimTmp2."Dimension Value Code" := JnlLineDimTmp."Dimension Value Code";
            JnlLineDimTmp2.INSERT;
          UNTIL JnlLineDimTmp.NEXT = 0;
      END;
      FADimMgt.InsertJnlLineDim(
        DATABASE::"Gen. Journal Line",
        GenJnlLine."Journal Template Name",
        GenJnlLine."Journal Batch Name",
        GenJnlLine."Line No.",
        JnlLineDimTmp2);
    END;

    PROCEDURE SetOrgGenJnlLine@1(OrgGenJnlLine2@1000 : Boolean);
    BEGIN
      OrgGenJnlLine := OrgGenJnlLine2;
    END;

    LOCAL PROCEDURE CalcDisposalAmount@3(FALedgEntry@1000 : Record 5601);
    BEGIN
      DisposalEntryNo := TempFIGLPostBuf."Entry No.";
      WITH FALedgEntry DO BEGIN
        FADeprBook.GET("FA No.","Depreciation Book Code");
        FADeprBook.CALCFIELDS("Proceeds on Disposal","Gain/Loss");
        DisposalAmount := FADeprBook."Proceeds on Disposal";
        GainLossAmount := FADeprBook."Gain/Loss";
        FIPostingSetup2.GET("FA Posting Group");
      END;
    END;

    PROCEDURE CorrectEntries_@37();
    BEGIN
      {
      IF DisposalEntryNo = 0 THEN
        EXIT;
      CorrectDisposalEntry;
      IF NOT BookValueEntry THEN
        CorrectBookValueEntry;
      }
    END;

    LOCAL PROCEDURE CorrectDisposalEntry_@17();
    VAR
      LastDisposal@1000 : Boolean;
      GLAmount@1001 : Decimal;
    BEGIN
      {
      TempFIGLPostBuf.GET(DisposalEntryNo);
      FADeprBook.CALCFIELDS("Gain/Loss");
      LastDisposal := CalcLastDisposal(FADeprBook);
      IF LastDisposal THEN
        GLAmount := GainLossAmount
      ELSE
        GLAmount := FADeprBook."Gain/Loss";
      IF GLAmount <= 0 THEN BEGIN
        FIPostingSetup2.TESTFIELD("Sales Acc. on Disp. (Gain)");
        TempFIGLPostBuf."Account No." := FIPostingSetup2."Sales Acc. on Disp. (Gain)";
      END ELSE BEGIN
        FIPostingSetup2.TESTFIELD("Sales Acc. on Disp. (Loss)");
        TempFIGLPostBuf."Account No." := FIPostingSetup2."Sales Acc. on Disp. (Loss)";
      END;
      TempFIGLPostBuf.MODIFY;
      FIGLPostBuf := TempFIGLPostBuf;
      IF LastDisposal THEN
        EXIT;
      IF IdenticalSign(FADeprBook."Gain/Loss",GainLossAmount,DisposalAmount) THEN
        EXIT;
      FIPostingSetup2.TESTFIELD("Sales Acc. on Disp. (Gain)");
      FIPostingSetup2.TESTFIELD("Sales Acc. on Disp. (Loss)");
      IF FIPostingSetup2."Sales Acc. on Disp. (Gain)" = FIPostingSetup2."Sales Acc. on Disp. (Loss)" THEN
        EXIT;
      FIGLPostBuf."FA Entry No." := 0;
      FIGLPostBuf."FA Entry Type" := FIGLPostBuf."FA Entry Type"::" ";
      FIGLPostBuf."Automatic Entry" := TRUE;
      OrgGenJnlLine := FALSE;
      IF FADeprBook."Gain/Loss" <= 0 THEN BEGIN
        FIGLPostBuf."Account No." := FIPostingSetup2."Sales Acc. on Disp. (Gain)";
        FIGLPostBuf.Amount := DisposalAmount;
        InsertBufferEntry;
        FIGLPostBuf."Account No." := FIPostingSetup2."Sales Acc. on Disp. (Loss)";
        FIGLPostBuf.Amount := -DisposalAmount;
        FIGLPostBuf.Correction := NOT FIGLPostBuf.Correction;
        InsertBufferEntry;
      END ELSE BEGIN
        FIGLPostBuf."Account No." := FIPostingSetup2."Sales Acc. on Disp. (Loss)";
        FIGLPostBuf.Amount := DisposalAmount;
        InsertBufferEntry;
        FIGLPostBuf."Account No." := FIPostingSetup2."Sales Acc. on Disp. (Gain)";
        FIGLPostBuf.Amount := -DisposalAmount;
        FIGLPostBuf.Correction := NOT FIGLPostBuf.Correction;
        InsertBufferEntry;
      END;
       }
    END;

    LOCAL PROCEDURE CorrectBookValueEntry_@18();
    VAR
      FALedgEntry@1000 : Record 5601;
      FAGLPostBuf@1001 : Record 5637;
      DepreciationCalc@1002 : Codeunit 5616;
      BookValueAmount@1003 : Decimal;
    BEGIN
      {
      DepreciationCalc.SetFAFilter(
        FALedgEntry,FADeprBook."FA No.",FADeprBook."Depreciation Book Code",TRUE);
      FALedgEntry.SETRANGE("FA Posting Category",FALedgEntry."FA Posting Category"::Disposal);
      FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Book Value on Disposal");
      FALedgEntry.CALCSUMS(Amount);
      BookValueAmount := FALedgEntry.Amount;
      TempFIGLPostBuf.GET(DisposalEntryNo);
      FIGLPostBuf := TempFIGLPostBuf;
      IF IdenticalSign(FADeprBook."Gain/Loss",GainLossAmount,BookValueAmount) THEN
        EXIT;
      FIPostingSetup2.TESTFIELD("Book Val. Acc. on Disp. (Gain)");
      FIPostingSetup2.TESTFIELD("Book Val. Acc. on Disp. (Loss)");
      IF FIPostingSetup2."Book Val. Acc. on Disp. (Gain)" =
         FIPostingSetup2."Book Val. Acc. on Disp. (Loss)"
      THEN
        EXIT;
      OrgGenJnlLine := FALSE;
      IF FADeprBook."Gain/Loss" <= 0 THEN BEGIN
        InsertBufferBalAcc(
          10,
          BookValueAmount,
          FADeprBook."Depreciation Book Code",
          FIPostingSetup2.Code,
          FIGLPostBuf."Global Dimension 1 Code",
          FIGLPostBuf."Global Dimension 2 Code",
          TRUE,FIGLPostBuf.Correction);

        InsertBufferBalAcc(
          11,
          -BookValueAmount,
          FADeprBook."Depreciation Book Code",
          FIPostingSetup2.Code,
          FIGLPostBuf."Global Dimension 1 Code",
          FIGLPostBuf."Global Dimension 2 Code",
          TRUE,NOT FIGLPostBuf.Correction);
      END ELSE BEGIN
        InsertBufferBalAcc(
          11,
          BookValueAmount,
          FADeprBook."Depreciation Book Code",
          FIPostingSetup2.Code,
          FIGLPostBuf."Global Dimension 1 Code",
          FIGLPostBuf."Global Dimension 2 Code",
          TRUE,FIGLPostBuf.Correction);

        InsertBufferBalAcc(
          10,
          -BookValueAmount,
          FADeprBook."Depreciation Book Code",
          FIPostingSetup2.Code,
          FIGLPostBuf."Global Dimension 1 Code",
          FIGLPostBuf."Global Dimension 2 Code",
          TRUE,NOT FIGLPostBuf.Correction);
      END;
      }
    END;

    LOCAL PROCEDURE IdenticalSign@15(A@1000 : Decimal;B@1001 : Decimal;C@1002 : Decimal) : Boolean;
    BEGIN
      EXIT(((A <= 0) = (B <= 0)) OR (C = 0));
    END;

    PROCEDURE SetNetDisposal@20(NetDisp2@1000 : Boolean);
    BEGIN
      NetDisp := NetDisp2;
    END;

    LOCAL PROCEDURE CalcLastDisposal@21(FADeprBook@1000 : Record 5612) : Boolean;
    VAR
      FALedgEntry@1001 : Record 5601;
      DepreciationCalc@1002 : Codeunit 5616;
    BEGIN
      DepreciationCalc.SetFAFilter(
        FALedgEntry,FADeprBook."FA No.",FADeprBook."Depreciation Book Code",TRUE);
      FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Proceeds on Disposal");
      EXIT(NOT FALedgEntry.FIND('-'));
    END;

    PROCEDURE InsertDispAcc_@1210003(VAR FALedgEntry@1210000 : Record 5601;Convert@1210002 : Boolean);
    VAR
      FA@1210001 : Record 5600;
      GLSetup@1470000 : Record 98;
    BEGIN
      {
      WITH FALedgEntry DO BEGIN
        IF Amount = 0 THEN
          EXIT;
        GLSetup.GET;
        IF GLSetup."Accounting Regulation" <> GLSetup."Accounting Regulation"::Russian THEN
          EXIT;
        FA.GET("FA No.");
        IF FA."Undepreciable FA" THEN
          EXIT;
        CLEAR(FIGLPostBuf);
        FADeprBook.GET("FA No.","Depreciation Book Code");
        FIPostingSetup.GET(FADeprBook."FA Posting Group");

        IF FIPostingSetup."Not Use Sales Bal. Acc." THEN
          EXIT;

        FIPostingSetup.TESTFIELD("Sales Bal. Acc.");
        FIGLPostBuf."Account No." := FIPostingSetup."Sales Bal. Acc.";
        FIGLPostBuf.Amount := Amount;
        IF Convert THEN
          FIGLPostBuf.Amount := -FIGLPostBuf.Amount;
        FIGLPostBuf.Correction := Correction;
        FIGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
        FIGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
        FIGLPostBuf."FA Entry No." := "Entry No.";
        IF NOT Convert THEN
          FIGLPostBuf."Disposal Entry No." := -1  //for sorting
        ELSE
          FIGLPostBuf."Disposal Entry No." := "Disposal Entry No.";
        IF "Entry No." > 0 THEN
          FIGLPostBuf."FA Entry Type" := FIGLPostBuf."FA Entry Type"::"Fixed Asset";
        FIGLPostBuf."Automatic Entry" := "Automatic Entry";
        GLEntryNo := "G/L Entry No.";
        InsertBufferEntry;
        "G/L Entry No." := TempFIGLPostBuf."Entry No.";
      END;
       }
    END;

    BEGIN
    {
      NC MTF02 II Учет ФИ
    }
    END.
  }
}

