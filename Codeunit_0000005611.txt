OBJECT Codeunit 5611 Calculate Normal Depreciation
{
  OBJECT-PROPERTIES
  {
    Date=29.05.17;
    Time=14:22:41;
    Modified=Yes;
    Version List=NAVW19.00,NAVRU9.00,NOS-26;
  }
  PROPERTIES
  {
    Permissions=TableData 5601=r,
                TableData 5604=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="Force No. of Days must only be specified if %1 %2 = %3.";RUS="Параметр ""Число дней обязательно"" является обязательным только в том случае, если %1 %2 = %3."';
      Text001@1001 : TextConst 'ENU=%2 must not be 100 for %1.;RUS=%2 не должно быть равно 100 для %1.';
      Text002@1002 : TextConst 'ENU="%2 must be %3 if %4 %5 = %6 for %1.";RUS="%2 должно быть %3 если %4 %5 = %6 для %1."';
      Text003@1003 : TextConst 'ENU=%2 must not be later than %3 for %1.;RUS=%2 не должно быть позднее %3 для %1.';
      Text004@1004 : TextConst 'ENU=%1 %2 must not be used together with the Half-Year Convention for %3.;RUS=%1 %2 нельзя использовать вместе с приемом приобретения на середину года для %3.';
      FA@1005 : Record 5600;
      FALedgEntry@1006 : Record 5601;
      DeprBook@1007 : Record 5611;
      FADeprBook@1008 : Record 5612;
      DeprGroup@1210005 : Record 12476;
      DepreciationCalc@1009 : Codeunit 5616;
      DeprBookCode@1010 : Code[10];
      DaysInFiscalYear@1011 : Integer;
      EntryAmounts@1012 : ARRAY [4] OF Decimal;
      MinusBookValue@1013 : Decimal;
      DateFromProjection@1014 : Date;
      SkipOnZero@1015 : Boolean;
      UntilDate@1016 : Date;
      Sign@1017 : Integer;
      FirstDeprDate@1018 : Date;
      NumberOfDays@1019 : Integer;
      NumberOfDays2@1020 : Integer;
      DaysInPeriod@1021 : Integer;
      UseDeprStartingDate@1022 : Boolean;
      BookValue@1023 : Decimal;
      BookValue2@1024 : Decimal;
      DeprBasis@1025 : Decimal;
      SalvageValue@1026 : Decimal;
      SalvageValue2@1027 : Decimal;
      AcquisitionDate@1028 : Date;
      DisposalDate@1029 : Date;
      DeprMethod@1030 : 'StraightLine,DB1,DB2,DB1SL,DB2SL,User-Defined,Manual,SLRU,DBSLRU,DBSLRUTaxGroup,BelowZero';
      DeprStartingDate@1031 : Date;
      FirstUserDefinedDeprDate@1032 : Date;
      SLPercent@1033 : Decimal;
      DBPercent@1034 : Decimal;
      FixedAmount@1035 : Decimal;
      DeprYears@1036 : Decimal;
      DeprTableCode@1037 : Code[10];
      FinalRoundingAmount@1038 : Decimal;
      EndingBookValue@1039 : Decimal;
      AmountBelowZero@1040 : Decimal;
      PercentBelowZero@1041 : Decimal;
      StartingDate@1042 : Date;
      EndingDate@1043 : Date;
      Factor@1044 : Decimal;
      UseHalfYearConvention@1045 : Boolean;
      NewYearDate@1046 : Date;
      DeprInTwoFiscalYears@1047 : Boolean;
      TempDeprAmount@1048 : Decimal;
      Text005@1049 : TextConst 'ENU=%1 must not be used together with the Half-Year Convention for %2.;RUS=%1 нельзя использовать вместе с приемом приобретения на середину года для %2.';
      Text006@1050 : TextConst 'ENU=%1 must be %2 or later for %3.;RUS=%1 должно быть %2 или позднее для %3.';
      Text007@1051 : TextConst 'ENU=%1 must not be used together with %2 for %3.;RUS=%1 нельзя использовать вместе с %2 для %3.';
      Text008@1052 : TextConst 'ENU="%1 must not be used together with %2 = %3 for %4.";RUS="%1 нельзя использовать вместе с %2 = %3 для %4."';
      Year365Days@1053 : Boolean;
      DeprPeriod@1210001 : Date;
      EmptyStartingDate@1210000 : Boolean;
      Text12400@1210004 : TextConst 'ENU=Previous periods Depreciation wasn''t calculated;RUS=Амортизация за предыдущие периоды не рассчитана.';
      Text12401@1210003 : TextConst 'ENU=Depreciation was already calculated;RUS=Амортизация уже рассчитана';
      Text12402@1210002 : TextConst 'ENU=Depreciation already calculated for Depr. Period Starting Date %1\FA Code %2\FA Depreciation Book Code %3;RUS=Амортизация на начальную дату периода амортизации уже рассчитана: %1\Код ОС: %2\Код книги амортизации ОС: %3';
      DeprBonus@1470001 : Boolean;
      DeprBonusAmount@1470000 : Decimal;
      Is30DaysPeriod@1101495000 : Boolean;

    PROCEDURE Calculate@1(VAR DeprAmount@1000 : Decimal;VAR NumberOfDays4@1001 : Integer;FANo@1002 : Code[20];DeprBookCode2@1003 : Code[10];UntilDate2@1004 : Date;EntryAmounts2@1005 : ARRAY [4] OF Decimal;DateFromProjection2@1006 : Date;DaysInPeriod2@1007 : Integer;Period@1210000 : Date);
    VAR
      i@1008 : Integer;
      OK@1210001 : Boolean;
    BEGIN
      IF DeprBonus THEN BEGIN
        CLEARALL;
        DeprBonus := TRUE;
      END ELSE
        CLEARALL;
      DeprAmount := 0;
      NumberOfDays4 := 0;
      DeprBookCode := DeprBookCode2;
      FA.GET(FANo);
      DepreciationCalc.SetFA(FA);
      DeprBook.GET(DeprBookCode);
      IF NOT FADeprBook.GET(FANo,DeprBookCode) THEN
        EXIT;
      UntilDate := UntilDate2;
      FOR i := 1 TO 4 DO
        EntryAmounts[i] := EntryAmounts2[i];
      DateFromProjection := DateFromProjection2;
      DaysInPeriod := DaysInPeriod2;

      FALedgEntry.LOCKTABLE;
      WITH DeprBook DO
        IF DaysInPeriod > 0 THEN
          IF "Periodic Depr. Date Calc." <> "Periodic Depr. Date Calc."::"Last Entry" THEN BEGIN
            "Periodic Depr. Date Calc." := "Periodic Depr. Date Calc."::"Last Entry";
            ERROR(
              Text000,
              TABLECAPTION,FIELDCAPTION("Periodic Depr. Date Calc."),"Periodic Depr. Date Calc.");
          END;
      DeprPeriod := Period;

      TransferValues;
      IF BookValue + SalvageValue <= 0 THEN
        SkipOnZero := TRUE;
      IF (SalvageValue >= 0) AND (BookValue <= EndingBookValue) THEN
        SkipOnZero := TRUE;

      //NC T#4651 > DP
      IF NOT Is30DaysPeriod THEN
        CheckUntilDate;
      //NC T#4651 < DP

      IF NOT SkipRecord THEN BEGIN
        IF (DeprMethod = DeprMethod::SLRU) OR
           (DeprMethod = DeprMethod::DBSLRU) OR
           (DeprMethod = DeprMethod::DBSLRUTaxGroup)
        THEN BEGIN
          IF (FADeprBook."Depreciation Starting Date" <= DeprPeriod) AND NOT SkipOnZero  THEN BEGIN
            OK := FALSE;
            CASE DepreciationCalc.ExistingDeprPeriods(FANo,DeprBookCode,Period) OF
              0: IF FADeprBook."Depreciation Starting Date" < DeprPeriod THEN //it's not first depr
                   MESSAGE(Text12400+'\'+Text12402,Period,FANo,DeprBookCode)
                 ELSE
                   OK := TRUE;
              1,3: MESSAGE(Text12401+'\'+Text12402,Period,FANo,DeprBookCode);
              2: OK := TRUE;
            END;
            IF NOT OK THEN BEGIN
              DeprAmount := 0;
              EXIT;
            END;
          END;
        END;

        IF DeprMethod = DeprMethod::DBSLRUTaxGroup THEN BEGIN
          FA.TESTFIELD("Depreciation Group");
          DeprGroup.GET(FA."Depreciation Group");
        END;

        Sign := 1;
        IF NOT FADeprBook."Use FA Ledger Check" THEN BEGIN
          IF DeprBook."Use FA Ledger Check" THEN
            FADeprBook.TESTFIELD("Use FA Ledger Check",TRUE);
          FADeprBook.TESTFIELD("Fixed Depr. Amount below Zero",0);
          FADeprBook.TESTFIELD("Depr. below Zero %",0);
          Sign := DepreciationCalc.GetSign(BookValue,DeprBasis,SalvageValue,MinusBookValue);
          IF Sign = 0 THEN
            EXIT;
          IF Sign = -1 THEN
            DepreciationCalc.GetNewSigns(BookValue,DeprBasis,SalvageValue,MinusBookValue);
        END;
        IF (FADeprBook."Fixed Depr. Amount below Zero" > 0) OR
           (FADeprBook."Depr. below Zero %" > 0)
        THEN
          FADeprBook.TESTFIELD("Use FA Ledger Check",TRUE);

        IF BookValue + SalvageValue <= 0 THEN
          SkipOnZero := TRUE;
        IF (SalvageValue >= 0) AND (BookValue <= EndingBookValue) THEN
          SkipOnZero := TRUE;

        IF NOT
           (SkipOnZero AND
            NOT DeprBook."Allow Depr. below Zero" AND
            NOT DeprBook."Use FA Ledger Check")
        THEN BEGIN
          IF SkipOnZero THEN
            DeprMethod := DeprMethod::BelowZero;
          IF NOT DeprBonus THEN
            DeprAmount := Sign * CalculateDeprAmount
          ELSE
            DeprAmount := Sign * CalculateDeprBonusAmount(
              FANo,DeprBookCode,0D,CALCDATE('<-CM-1D>',UntilDate),TRUE,DeprBonus);
          IF Sign * DeprAmount > 0 THEN
            DeprAmount := 0;
          NumberOfDays4 := NumberOfDays2;
        END;
      END;
    END;

    LOCAL PROCEDURE SkipRecord@4() : Boolean;
    BEGIN
      //NC T#4651 > DP
      IF Is30DaysPeriod THEN BEGIN
      //NC T#4651 < DP
      EXIT(
        (DisposalDate > 0D) OR
        (AcquisitionDate = 0D) OR
        (DeprMethod = DeprMethod::Manual) OR
        (AcquisitionDate > UntilDate) OR
        FA.Inactive OR
        FA.Blocked OR
        FA."Undepreciable FA" OR
        EmptyStartingDate);
      //NC T#4651 > DP
      END ELSE
      EXIT(
        ((DisposalDate > 0D) AND (DisposalDate < UntilDate)) OR
        (AcquisitionDate = 0D) OR
        (DeprMethod = DeprMethod::Manual) OR
        (AcquisitionDate > UntilDate) OR
        FA.Inactive OR
        FA.Blocked OR
        FA."Undepreciable FA" OR
        EmptyStartingDate);
      //NC T#4651 < DP
    END;

    LOCAL PROCEDURE CalculateDeprAmount@2() : Decimal;
    VAR
      Amount@1000 : Decimal;
    BEGIN
      WITH FA DO BEGIN
        IF DateFromProjection > 0D THEN
          FirstDeprDate := DateFromProjection
        ELSE BEGIN
          //NC T#4651 > DP
          DepreciationCalc.SetForce30DaysPeriod(Is30DaysPeriod);
          //NC T#4651 < DP
          FirstDeprDate := DepreciationCalc.GetFirstDeprDate("No.",DeprBookCode,Year365Days);
          IF FirstDeprDate > UntilDate THEN
            EXIT(0);
          UseDeprStartingDate := DepreciationCalc.UseDeprStartingDate("No.",DeprBookCode);
          IF UseDeprStartingDate THEN
            FirstDeprDate := DeprStartingDate;
        END;
        IF FirstDeprDate < DeprStartingDate THEN
          FirstDeprDate := DeprStartingDate;
        NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
        Factor := 1;
        IF NumberOfDays <= 0 THEN
          EXIT(0);
        IF DaysInPeriod > 0 THEN BEGIN
          Factor := DaysInPeriod / NumberOfDays;
          NumberOfDays := DaysInPeriod;
          IF FADeprBook."Last Depreciation Date" = 0D THEN
            FirstDeprDate := DeprStartingDate;
        END;
        IF (DeprMethod = DeprMethod::SLRU) OR (DeprMethod = DeprMethod::DBSLRU) THEN BEGIN
          FirstDeprDate := DeprPeriod;
          DaysInPeriod := 30;
          NumberOfDays := DaysInPeriod;
        END ELSE BEGIN
          IF DateFromProjection > 0D THEN
            FirstDeprDate := DateFromProjection
          ELSE BEGIN
            FirstDeprDate := DepreciationCalc.GetFirstDeprDate("No.",DeprBookCode,Year365Days);
            IF FirstDeprDate > UntilDate THEN
              EXIT(0);
            UseDeprStartingDate := DepreciationCalc.UseDeprStartingDate("No.",DeprBookCode);
            IF UseDeprStartingDate THEN
              FirstDeprDate := DeprStartingDate;
          END;
          IF FirstDeprDate < DeprStartingDate THEN
            FirstDeprDate := DeprStartingDate;
          NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
          Factor := 1;
          IF NumberOfDays <= 0 THEN
            EXIT(0);
            IF NOT ("FA Type" = "FA Type"::"Future Expense") THEN

            //NC NCS-1823 > DP
            IF NOT FA.IsFirstMonthDepr THEN
            //NC NCS-1823 < DP
              IF DaysInPeriod > 0 THEN BEGIN
                Factor := DaysInPeriod / NumberOfDays;
                NumberOfDays := DaysInPeriod;
              END;
        END;
        UseHalfYearConvention := SetHalfYearConventionMethod;
        // Method Last Entry
        IF UseDeprStartingDate OR
           (DateFromProjection > 0D) OR
           (DeprMethod = DeprMethod::BelowZero) OR
           (DeprBook."Periodic Depr. Date Calc." = DeprBook."Periodic Depr. Date Calc."::"Last Entry")
        THEN BEGIN
          NumberOfDays2 := NumberOfDays;
          IF UseHalfYearConvention THEN
            Amount := CalcHalfYearConventionDepr
          ELSE
            CASE DeprMethod OF
              DeprMethod::StraightLine:
                Amount := CalcSLAmount;
              DeprMethod::DB1:
                Amount := CalcDB1Amount;
              DeprMethod::DB2:
                Amount := CalcDB2Amount;
              DeprMethod::DB1SL,
              DeprMethod::DB2SL:
                Amount := CalcDBSLAmount;
              DeprMethod::Manual:
                Amount := 0;
              DeprMethod::"User-Defined":
                Amount := CalcUserDefinedAmount(UntilDate);
              DeprMethod::BelowZero:
                Amount := DepreciationCalc.CalcRounding(DeprBookCode,CalcBelowZeroAmount);
              DeprMethod::SLRU:
                Amount := CalcSLAmount;
              DeprMethod::DBSLRU:
                Amount := CalcDBSLRUAmount;
              DeprMethod::DBSLRUTaxGroup:
                Amount := CalcDBSLRUTaxGroupAmount;
            END;
        END
          // Method Last Depreciation Entry
        ELSE BEGIN
          IF UseHalfYearConvention THEN
            DeprBook.TESTFIELD(
              "Periodic Depr. Date Calc.",DeprBook."Periodic Depr. Date Calc."::"Last Entry");
          Amount := 0;
          StartingDate := 0D;
          EndingDate := 0D;
          DepreciationCalc.GetDeprPeriod(
            "No.",DeprBookCode,UntilDate,StartingDate,EndingDate,NumberOfDays,Year365Days);
          FirstDeprDate := StartingDate;
          NumberOfDays2 := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
          WHILE NumberOfDays > 0 DO BEGIN
            DepreciationCalc.CalculateDeprInPeriod(
              "No.",DeprBookCode,EndingDate,Amount,Sign,
              BookValue,DeprBasis,SalvageValue,MinusBookValue);
            IF DepreciationCalc.GetSign(
                 BookValue,DeprBasis,SalvageValue,MinusBookValue) <> 1
            THEN
              EXIT(0);
            CASE DeprMethod OF
              DeprMethod::StraightLine:
                Amount := Amount + CalcSLAmount;
              DeprMethod::DB1:
                Amount := Amount + CalcDB1Amount;
              DeprMethod::DB2:
                Amount := Amount + CalcDB2Amount;
              DeprMethod::Manual:
                Amount := 0;
              DeprMethod::"User-Defined":
                Amount := Amount + CalcUserDefinedAmount(EndingDate);
            END;
            DepreciationCalc.GetDeprPeriod(
              "No.",DeprBookCode,UntilDate,StartingDate,EndingDate,NumberOfDays,Year365Days);
            FirstDeprDate := StartingDate;
          END;
        END;
      END;
      IF Amount >= 0 THEN
        EXIT(0);
      IF NOT SkipOnZero THEN
        DepreciationCalc.AdjustDepr(
          DeprBookCode,Amount,ABS(BookValue2),-ABS(SalvageValue2),
          EndingBookValue,FinalRoundingAmount);
      EXIT(ROUND(Amount));
    END;

    LOCAL PROCEDURE CalcTempDeprAmount@19(VAR DeprAmount@1000 : Decimal) : Boolean;
    BEGIN
      DeprAmount := 0;
      IF FADeprBook."Temp. Ending Date" = 0D THEN
        EXIT(FALSE);
      IF (FirstDeprDate <= FADeprBook."Temp. Ending Date") AND (UntilDate > FADeprBook."Temp. Ending Date") THEN
        ERROR(
          Text006,
          FADeprBook.FIELDCAPTION("Temp. Ending Date"),
          UntilDate,
          FAName);
      IF FADeprBook."Temp. Ending Date" >= UntilDate THEN BEGIN
        IF FADeprBook."Use Half-Year Convention" THEN
          ERROR(
            Text005,
            FADeprBook.FIELDCAPTION("Temp. Ending Date"),
            FAName);
        IF FADeprBook."Use DB% First Fiscal Year" THEN
          ERROR(
            Text007,
            FADeprBook.FIELDCAPTION("Temp. Ending Date"),
            FADeprBook.FIELDCAPTION("Use DB% First Fiscal Year"),
            FAName);
        IF FADeprBook."Depreciation Method" = FADeprBook."Depreciation Method"::"User-Defined" THEN
          ERROR(
            Text008,
            FADeprBook.FIELDCAPTION("Temp. Ending Date"),
            FADeprBook.FIELDCAPTION("Depreciation Method"),
            FADeprBook."Depreciation Method",
            FAName);
        IF DeprMethod = DeprMethod::BelowZero THEN
          ERROR(
            Text007,
            FADeprBook.FIELDCAPTION("Temp. Ending Date"),
            DeprBook.FIELDCAPTION("Allow Depr. below Zero"),
            FAName);
        DeprBook.TESTFIELD(
          "Periodic Depr. Date Calc.",DeprBook."Periodic Depr. Date Calc."::"Last Entry");
        DeprAmount := -(NumberOfDays / DaysInFiscalYear) * FADeprBook."Temp. Fixed Depr. Amount";
        EXIT(TRUE)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CalcSLAmount@6() : Decimal;
    VAR
      RemainingLife@1000 : Decimal;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        EXIT(TempDeprAmount);

      IF SLPercent > 0 THEN
        EXIT((-SLPercent / 100) * (NumberOfDays / DaysInFiscalYear) * DeprBasis);

      IF FixedAmount > 0 THEN
        EXIT(-FixedAmount * NumberOfDays / DaysInFiscalYear);

      IF DeprYears > 0 THEN BEGIN
        RemainingLife :=
          (DeprYears * DaysInFiscalYear) -
          DepreciationCalc.DeprDays(
            DeprStartingDate,DepreciationCalc.Yesterday(FirstDeprDate,Year365Days),Year365Days);
        IF RemainingLife < 1 THEN
          EXIT(-BookValue);

        EXIT(-(BookValue + SalvageValue - MinusBookValue) * NumberOfDays / RemainingLife);
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE CalcDB1Amount@11() : Decimal;
    VAR
      DeprInFiscalYear@1000 : Decimal;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        EXIT(TempDeprAmount);

      IF DateFromProjection = 0D THEN
        DeprInFiscalYear := DepreciationCalc.DeprInFiscalYear(FA."No.",DeprBookCode,UntilDate)
      ELSE
        DeprInFiscalYear := EntryAmounts[3];
      IF DeprInTwoFiscalYears THEN
        DeprInFiscalYear := 0;
      EXIT(
        -(DBPercent / 100) * (NumberOfDays / DaysInFiscalYear) *
        (BookValue + SalvageValue - MinusBookValue - Sign * DeprInFiscalYear));
    END;

    LOCAL PROCEDURE CalcDB2Amount@14() : Decimal;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        EXIT(TempDeprAmount);

      EXIT(
        -(1 - POWER(1 - DBPercent / 100,NumberOfDays / DaysInFiscalYear)) *
        (BookValue - MinusBookValue));
    END;

    LOCAL PROCEDURE CalcDBSLAmount@12() : Decimal;
    VAR
      FADateCalc@1002 : Codeunit 5617;
      SLAmount@1000 : Decimal;
      DBAmount@1001 : Decimal;
    BEGIN
      IF DeprMethod = DeprMethod::DB1SL THEN
        DBAmount := CalcDB1Amount
      ELSE
        DBAmount := CalcDB2Amount;
      IF FADeprBook."Use DB% First Fiscal Year" THEN
        IF FADateCalc.GetFiscalYear(DeprBookCode,UntilDate) =
           FADateCalc.GetFiscalYear(DeprBookCode,DeprStartingDate)
        THEN
          EXIT(DBAmount);
      SLAmount := CalcSLAmount;
      IF SLAmount < DBAmount THEN
        EXIT(SLAmount);

      EXIT(DBAmount)
    END;

    LOCAL PROCEDURE CalcUserDefinedAmount@8(EndingDate@1000 : Date) : Decimal;
    VAR
      TableDeprCalc@1001 : Codeunit 5618;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        ERROR('');

      EXIT(
        -TableDeprCalc.GetTablePercent(DeprBook.Code,DeprTableCode,
          FirstUserDefinedDeprDate,FirstDeprDate,EndingDate) *
        DeprBasis * Factor);
    END;

    LOCAL PROCEDURE CalcBelowZeroAmount@9() : Decimal;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        ERROR('');

      IF PercentBelowZero > 0 THEN
        EXIT((-PercentBelowZero / 100) * (NumberOfDays / DaysInFiscalYear) * DeprBasis);
      IF AmountBelowZero > 0 THEN
        EXIT(-AmountBelowZero * NumberOfDays / DaysInFiscalYear);
      EXIT(0);
    END;

    LOCAL PROCEDURE TransferValues@3();
    BEGIN
      WITH FADeprBook DO BEGIN
        EmptyStartingDate := ("Depreciation Starting Date" = 0D);
        IF EmptyStartingDate THEN
          EXIT;
        IF "Depreciation Method" = "Depreciation Method"::"User-Defined" THEN BEGIN
          TESTFIELD("Depreciation Table Code");
          TESTFIELD("First User-Defined Depr. Date");
        END;
        CASE "Depreciation Method" OF
          "Depreciation Method"::"Declining-Balance 1",
          "Depreciation Method"::"Declining-Balance 2",
          "Depreciation Method"::"DB1/SL",
          "Depreciation Method"::"DB2/SL":
            IF "Declining-Balance %" >= 100 THEN
              ERROR(Text001,FAName,FIELDCAPTION("Declining-Balance %"));
        END;
        IF (DeprBook."Periodic Depr. Date Calc." = DeprBook."Periodic Depr. Date Calc."::"Last Depr. Entry") AND
           ("Depreciation Method" <> "Depreciation Method"::"Straight-Line")
        THEN BEGIN
          "Depreciation Method" := "Depreciation Method"::"Straight-Line";
          ERROR(
            Text002,
            FAName,
            FIELDCAPTION("Depreciation Method"),
            "Depreciation Method",
            DeprBook.TABLECAPTION,
            DeprBook.FIELDCAPTION("Periodic Depr. Date Calc."),
            DeprBook."Periodic Depr. Date Calc.");
        END;

        DeprMethod := "Depreciation Method";
        IF DateFromProjection = 0D THEN BEGIN
          IF ("Depreciation Method" = "Depreciation Method"::"SL-RU") OR
             ("Depreciation Method" = "Depreciation Method"::"DB/SL-RU")
          THEN BEGIN
            SETFILTER("FA Posting Date Filter",'..%1',CALCDATE('<-1D>',DeprPeriod));
            DeprBonusAmount := 0;
            DeprBonusAmount := CalculateDeprBonusAmount(FA."No.",DeprBookCode,DeprPeriod,UntilDate,FALSE,TRUE);
          END;

          //NC T#4651 > DP
          IF ("Depreciation Method" = "Depreciation Method"::"Straight-Line") AND NOT Is30DaysPeriod THEN
            IF DeprBook."RU Depreciation Method" THEN
              IF ("Disposal Date"<>0D) AND  ("Disposal Date"<=UntilDate) AND ("Disposal Date">=DeprPeriod) THEN
                SETFILTER("FA Posting Date Filter",'..%1',CALCDATE('<-1D>',"Disposal Date"))
              ELSE
              SETFILTER("FA Posting Date Filter",'..%1',UntilDate)
            ELSE
              IF FA."FA Type"=FA."FA Type"::"Future Expense" THEN
                SETFILTER("FA Posting Date Filter",'..%1',UntilDate)
              ELSE
                //NC NCS-1823 > DP
                IF FA.IsFirstMonthDepr THEN
                  SETFILTER("FA Posting Date Filter",'..%1',UntilDate)
                ELSE
                //NC NCS-1823 < DP
                  SETFILTER("FA Posting Date Filter",'..%1',CALCDATE('<-1D>',DeprPeriod));
          //NC T#4651 < DP

          CALCFIELDS("Book Value");
          BookValue := "Book Value" + DeprBonusAmount;
        END ELSE
          BookValue := EntryAmounts[1];
        MinusBookValue := DepreciationCalc.GetMinusBookValue(FA."No.",DeprBookCode,0D,0D);
        CALCFIELDS("Depreciable Basis","Salvage Value");
        DeprBasis := "Depreciable Basis";
        SalvageValue := "Salvage Value";
        BookValue2 := BookValue;
        SalvageValue2 := SalvageValue;
        DeprStartingDate := "Depreciation Starting Date";
        DeprTableCode := "Depreciation Table Code";
        FirstUserDefinedDeprDate := "First User-Defined Depr. Date";
        IF ("Depreciation Method" = "Depreciation Method"::"User-Defined") AND
           (FirstUserDefinedDeprDate > DeprStartingDate)
        THEN
          ERROR(
            Text003,
            FAName,FIELDCAPTION("First User-Defined Depr. Date"),FIELDCAPTION("Depreciation Starting Date"));
        SLPercent := "Straight-Line %";
        DBPercent := "Declining-Balance %";
        DeprYears := "No. of Depreciation Years";
        IF "Depreciation Ending Date" > 0D THEN BEGIN
          IF  "Depreciation Starting Date" > "Depreciation Ending Date" THEN
            ERROR(
              Text003,
              FAName,FIELDCAPTION("Depreciation Starting Date"),FIELDCAPTION("Depreciation Ending Date"));
          DeprYears :=
            DepreciationCalc.DeprDays(
              "Depreciation Starting Date","Depreciation Ending Date",FALSE) / 360;
        END;
        FixedAmount := "Fixed Depr. Amount";
        FinalRoundingAmount := "Final Rounding Amount";
        IF FinalRoundingAmount = 0 THEN
          FinalRoundingAmount := DeprBook."Default Final Rounding Amount";
        EndingBookValue := "Ending Book Value";
        IF NOT "Ignore Def. Ending Book Value" AND (EndingBookValue = 0) THEN
          EndingBookValue := DeprBook."Default Ending Book Value";
        AcquisitionDate := "Acquisition Date";
        DisposalDate := "Disposal Date";
        PercentBelowZero := "Depr. below Zero %";
        AmountBelowZero := "Fixed Depr. Amount below Zero";
        DaysInFiscalYear := DeprBook."No. of Days in Fiscal Year";
        IF DaysInFiscalYear = 0 THEN
          DaysInFiscalYear := 360;
        Year365Days := DeprBook."Fiscal Year 365 Days";
        IF Year365Days THEN BEGIN
          DaysInFiscalYear := 365;
          DeprYears :=
            DepreciationCalc.DeprDays(
              "Depreciation Starting Date","Depreciation Ending Date",TRUE) / DaysInFiscalYear;
        END;
      END;
    END;

    LOCAL PROCEDURE FAName@5() : Text[200];
    VAR
      DepreciationCalc@1000 : Codeunit 5616;
    BEGIN
      EXIT(DepreciationCalc.FAName(FA,DeprBookCode));
    END;

    LOCAL PROCEDURE SetHalfYearConventionMethod@7() : Boolean;
    VAR
      AccountingPeriod@1000 : Record 50;
    BEGIN
      IF NOT FADeprBook."Use Half-Year Convention" THEN
        EXIT(FALSE);
      IF FADeprBook."Depreciation Method" = FADeprBook."Depreciation Method"::Manual THEN
        EXIT(FALSE);
      IF DeprMethod = DeprMethod::BelowZero THEN
        EXIT(FALSE);

      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      AccountingPeriod.SETFILTER(
        "Starting Date",'>=%1',
        DepreciationCalc.ToMorrow(FADeprBook."Depreciation Starting Date",Year365Days));
      AccountingPeriod.FINDFIRST;
      NewYearDate := AccountingPeriod."Starting Date";
      IF FirstDeprDate >= NewYearDate THEN
        EXIT(FALSE);

      IF DeprBook."No. of Days in Fiscal Year" <> 0 THEN
        DeprBook.TESTFIELD("No. of Days in Fiscal Year",360);
      IF DeprMethod IN
         [DeprMethod::DB2,
          DeprMethod::DB2SL,
          DeprMethod::"User-Defined"]
      THEN
        ERROR(
          Text004,
          FADeprBook.FIELDCAPTION("Depreciation Method"),
          FADeprBook."Depreciation Method",
          FAName);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CalcHalfYearConventionDepr@21() : Decimal;
    VAR
      DeprAmount@1000 : Decimal;
      HalfYearPercent@1001 : Decimal;
      HalfYearFactor@1002 : Decimal;
      OriginalNumberOfDays@1003 : Integer;
      OriginalBookValue@1004 : Decimal;
      OriginalFirstDeprDate@1005 : Date;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        ERROR('');

      IF (DeprMethod = DeprMethod::DB1) OR (DeprMethod = DeprMethod::DB1SL) THEN
        HalfYearPercent := DBPercent
      ELSE
        IF SLPercent > 0 THEN
          HalfYearPercent := SLPercent
        ELSE
          IF DeprYears > 0 THEN
            HalfYearPercent :=
              100 /
              (DepreciationCalc.DeprDays(NewYearDate,FADeprBook."Depreciation Ending Date",Year365Days) +
               DaysInFiscalYear / 2) * DaysInFiscalYear
          ELSE
            HalfYearPercent := 0;

      HalfYearFactor :=
        DaysInFiscalYear / 2 /
        DepreciationCalc.DeprDays(
          FADeprBook."Depreciation Starting Date",
          DepreciationCalc.Yesterday(NewYearDate,Year365Days),
          Year365Days);
      DeprInTwoFiscalYears := UntilDate >= NewYearDate;

      OriginalNumberOfDays := NumberOfDays;
      OriginalBookValue := BookValue;
      OriginalFirstDeprDate := FirstDeprDate;

      IF DeprInTwoFiscalYears THEN
        NumberOfDays :=
          DepreciationCalc.DeprDays(
            FirstDeprDate,DepreciationCalc.Yesterday(NewYearDate,Year365Days),Year365Days);
      IF FixedAmount > 0 THEN
        DeprAmount := -FixedAmount * NumberOfDays / DaysInFiscalYear * HalfYearFactor
      ELSE
        DeprAmount :=
          (-HalfYearPercent / 100) * (NumberOfDays / DaysInFiscalYear) * DeprBasis * HalfYearFactor;
      IF DeprInTwoFiscalYears THEN BEGIN
        NumberOfDays := DepreciationCalc.DeprDays(NewYearDate,UntilDate,Year365Days);
        FirstDeprDate := NewYearDate;
        BookValue := BookValue + DeprAmount;
        CASE DeprMethod OF
          DeprMethod::StraightLine:
            DeprAmount := DeprAmount + CalcSLAmount;
          DeprMethod::DB1:
            DeprAmount := DeprAmount + CalcDB1Amount;
          DeprMethod::DB1SL:
            DeprAmount := DeprAmount + CalcDBSLAmount;
        END;
      END;
      NumberOfDays := OriginalNumberOfDays;
      BookValue := OriginalBookValue;
      FirstDeprDate := OriginalFirstDeprDate;
      DeprInTwoFiscalYears := FALSE;
      EXIT(DeprAmount);
    END;

    PROCEDURE CalcDBSLRUAmount@1210000() : Decimal;
    VAR
      SLAmount@1000 : Decimal;
      DBAmount@1001 : Decimal;
    BEGIN
      DBAmount := 2 * DBPercent / 100 * (BookValue - MinusBookValue);
      IF (BookValue - MinusBookValue) <= (0.2 * DeprBasis) THEN
        EXIT(CalcSLAmount)
      ELSE
        EXIT( -DBAmount);
    END;

    PROCEDURE DepreciationBonus@1470000(DeprBonus2@1470000 : Boolean);
    BEGIN
      DeprBonus := DeprBonus2;
    END;

    PROCEDURE CalculateDeprBonusAmount@1470001(FANo1@1470000 : Code[20];FADeprBook1@1470001 : Code[10];StartingDate@1470002 : Date;EndingDate@1470003 : Date;Calculate@1470004 : Boolean;DeprBonus1@1470005 : Boolean) : Decimal;
    BEGIN
      IF (DeprMethod = DeprMethod::SLRU) OR (DeprMethod = DeprMethod::DBSLRU) THEN BEGIN
        FirstDeprDate := DeprPeriod;
        DaysInPeriod := 30;
        NumberOfDays := DaysInPeriod;
      END ELSE BEGIN
        IF DateFromProjection > 0D THEN
          FirstDeprDate := DateFromProjection
        ELSE BEGIN
          FirstDeprDate := DepreciationCalc.GetFirstDeprDate(FANo1,FADeprBook1,Year365Days);
          IF FirstDeprDate > UntilDate THEN
            EXIT(0);
          UseDeprStartingDate := DepreciationCalc.UseDeprStartingDate(FANo1,FADeprBook1);
          IF UseDeprStartingDate THEN
            FirstDeprDate := DeprStartingDate;
        END;
      END;

      IF FirstDeprDate < DeprStartingDate THEN
        FirstDeprDate := DeprStartingDate;
      NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
      IF NumberOfDays <= 0 THEN
        EXIT(0);

      FALedgEntry.RESET;
      FALedgEntry.SETCURRENTKEY(
        "FA No.","Depreciation Book Code","FA Posting Category",
        "FA Posting Type","FA Posting Date","Depr. Bonus");
      FALedgEntry.SETRANGE("FA No.",FANo1);
      FALedgEntry.SETRANGE("Depreciation Book Code",FADeprBook1);
      FALedgEntry.SETRANGE("FA Posting Category",FALedgEntry."FA Posting Category"::" ");
      IF Calculate THEN
        FALedgEntry.SETFILTER("FA Posting Type",'%1|%2',
          FALedgEntry."FA Posting Type"::"Acquisition Cost",
          FALedgEntry."FA Posting Type"::Appreciation)
      ELSE
        FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::Depreciation);
      FALedgEntry.SETRANGE("Depr. Bonus",DeprBonus1);
      FALedgEntry.SETRANGE("FA Posting Date",StartingDate,EndingDate);
      FALedgEntry.CALCSUMS(Amount);
      IF Calculate THEN
        EXIT(ROUND(-FALedgEntry.Amount / 100 * FADeprBook."Depr. Bonus %"))
      ELSE
        EXIT(ROUND(FALedgEntry.Amount));
    END;

    PROCEDURE CalcDBSLRUTaxGroupAmount@1210001() : Decimal;
    VAR
      SLAmount@1000 : Decimal;
      DBAmount@1001 : Decimal;
      DBSLTaxAmount@1210000 : Decimal;
    BEGIN
      DBSLTaxAmount := BookValue * DeprGroup."Tax Depreciation Rate" * DeprGroup."Depreciation Factor" / 100;
      EXIT(-DBSLTaxAmount);
    END;

    PROCEDURE SetForce30DaysPeriod@1101495000(Is30DaysPeriod2@1101495000 : Boolean);
    BEGIN
      //NC T#4651 > DP
      Is30DaysPeriod := Is30DaysPeriod2;
      //NC T#4651 < DP
    END;

    PROCEDURE CheckUntilDate@1101495001();
    BEGIN
      //NC T#4651 > DP
      WITH FA DO BEGIN
        IF DisposalDate = 0D THEN
          EXIT;

      DepreciationCalc.SetForce30DaysPeriod(Is30DaysPeriod);
      FirstDeprDate := DepreciationCalc.GetFirstDeprDate("No.",DeprBookCode,Year365Days);
      IF FirstDeprDate > UntilDate THEN
        EXIT;

      UseDeprStartingDate := DepreciationCalc.UseDeprStartingDate("No.",DeprBookCode);
      IF UseDeprStartingDate THEN
        FirstDeprDate := DeprStartingDate;

      IF FirstDeprDate < DeprStartingDate THEN
        FirstDeprDate := DeprStartingDate;

      IF (UntilDate >= DisposalDate) AND (FirstDeprDate <= DisposalDate) THEN
        UntilDate := DisposalDate;
      END;
      //NC T#4651 > DP
    END;

    BEGIN
    {
      NC T#4651 DP Периодический расчет амортизации
      NC NCS-1823 DP Изменены функции CalculateDeprAmount, TransferValues
    }
    END.
  }
}

