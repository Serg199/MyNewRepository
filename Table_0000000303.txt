OBJECT Table 303 Finance Charge Memo Line
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               FinChrgMemoHeader@1000 : Record 302;
             BEGIN
               FinChrgMemoHeader.GET("Finance Charge Memo No.");
               IF Type = Type::"Customer Ledger Entry" THEN
                 TESTFIELD("Attached to Line No.",0);
               "Attached to Line No." := 0;
             END;

    OnModify=BEGIN
               TESTFIELD("System-Created Entry",FALSE);
             END;

    OnDelete=BEGIN
               FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
               FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
               FinChrgMemoLine.DELETEALL;
             END;

    CaptionML=[ENU=Finance Charge Memo Line;
               RUS=Строка процент-ноты];
  }
  FIELDS
  {
    { 1   ;   ;Finance Charge Memo No.;Code20     ;TableRelation="Finance Charge Memo Header";
                                                   CaptionML=[ENU=Finance Charge Memo No.;
                                                              RUS=Номер процент-ноты] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки];
                                                   NotBlank=Yes }
    { 3   ;   ;Attached to Line No.;Integer       ;TableRelation="Finance Charge Memo Line"."Line No." WHERE (Finance Charge Memo No.=FIELD(Finance Charge Memo No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              RUS=Вложение для строки номер];
                                                   Editable=No }
    { 4   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  FinChrgMemoLine := Rec;
                                                                  INIT;
                                                                  Type := FinChrgMemoLine.Type;
                                                                  GetFinChrgMemoHeader;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              RUS=Тип];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Customer Ledger Entry";
                                                                    RUS=" ,Счет ГК,Операция книги клиентов"];
                                                   OptionString=[ ,G/L Account,Customer Ledger Entry] }
    { 5   ;   ;Entry No.           ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Attached to Line No.",0);
                                                                GetFinChrgMemoHeader;
                                                                CustLedgEntry.GET("Entry No.");
                                                                CASE FinChrgTerms."Interest Calculation" OF
                                                                  FinChrgTerms."Interest Calculation"::"Open Entries":
                                                                    CustLedgEntry.TESTFIELD(Open,TRUE);
                                                                  FinChrgTerms."Interest Calculation"::"Closed Entries":
                                                                    CustLedgEntry.TESTFIELD(Open,FALSE);
                                                                END;
                                                                CustLedgEntry.TESTFIELD("Customer No.",FinChrgMemoHeader."Customer No.");
                                                                CustLedgEntry.TESTFIELD("On Hold",'');
                                                                IF CustLedgEntry."Currency Code" <> FinChrgMemoHeader."Currency Code" THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FinChrgMemoHeader.FIELDCAPTION("Currency Code"),
                                                                    FinChrgMemoHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);
                                                                "Posting Date" := CustLedgEntry."Posting Date";
                                                                "Document Date" := CustLedgEntry."Document Date";
                                                                "Due Date" := CustLedgEntry."Due Date";
                                                                "Document Type" := CustLedgEntry."Document Type";
                                                                "Document No." := CustLedgEntry."Document No.";
                                                                Description := CustLedgEntry.Description;
                                                                CustLedgEntry.SETFILTER("Date Filter",'..%1',FinChrgMemoHeader."Document Date");
                                                                CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                                                                "Original Amount" := CustLedgEntry.Amount;
                                                                "Remaining Amount" := CustLedgEntry."Remaining Amount";
                                                                CalcFinChrg;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Customer Ledger Entry" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF CustLedgEntry.GET("Entry No.") THEN;
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Entry No.;
                                                              RUS=Номер операции];
                                                   BlankZero=Yes }
    { 7   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              RUS=Дата учета];
                                                   Editable=No }
    { 8   ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              RUS=Дата документа];
                                                   Editable=No }
    { 9   ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              RUS=Срок оплаты];
                                                   Editable=No }
    { 10  ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                VALIDATE("Document No.");
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Платеж,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 11  ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                "Entry No." := 0;
                                                                IF "Document No." <> '' THEN BEGIN
                                                                  SetCustLedgEntryView;
                                                                  IF "Document Type" <> 0 THEN
                                                                    CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    VALIDATE("Entry No.",CustLedgEntry."Entry No.")
                                                                  ELSE
                                                                    ERROR(Text004,FORMAT(Type),FIELDCAPTION("Document No."),"Document No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Customer Ledger Entry" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF "Document Type" <> 0 THEN
                                                                CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                              IF "Document No." <> '' THEN
                                                                CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                              IF CustLedgEntry.FINDFIRST THEN;
                                                              CustLedgEntry.SETRANGE("Document Type");
                                                              CustLedgEntry.SETRANGE("Document No.");
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 12  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 13  ;   ;Original Amount     ;Decimal       ;CaptionML=[ENU=Original Amount;
                                                              RUS=Исходная сумма];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 14  ;   ;Remaining Amount    ;Decimal       ;CaptionML=[ENU=Remaining Amount;
                                                              RUS=Сумма остатка];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 15  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account";
                                                   OnValidate=BEGIN
                                                                IF "No." <> '' THEN
                                                                  CASE Type OF
                                                                    Type::" ":
                                                                      BEGIN
                                                                        StdTxt.GET("No.");
                                                                        Description := StdTxt.Description;
                                                                      END;
                                                                    Type::"Customer Ledger Entry":
                                                                      BEGIN
                                                                        FinChrgMemoLine.Type := FinChrgMemoLine.Type::" ";
                                                                        FinChrgMemoLine2.Type := FinChrgMemoLine2.Type::"G/L Account";
                                                                        ERROR(
                                                                          Text001,
                                                                          FIELDCAPTION(Type),FinChrgMemoLine.Type,FinChrgMemoLine2.Type);
                                                                      END;
                                                                    Type::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        IF NOT "System-Created Entry" THEN
                                                                          GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
                                                                        Description := GLAcc.Name;
                                                                        GetFinChrgMemoHeader;
                                                                        "Tax Group Code" := GLAcc."Tax Group Code";
                                                                        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
                                                                        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              RUS=Номер] }
    { 16  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                IF Type = Type::" " THEN BEGIN
                                                                  FinChrgMemoLine.Type := Type::"G/L Account";
                                                                  FinChrgMemoLine2.Type := Type::"Customer Ledger Entry";
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),FinChrgMemoLine.Type,FinChrgMemoLine2.Type);
                                                                END;
                                                                IF Type = Type::"Customer Ledger Entry" THEN
                                                                  TESTFIELD("Attached to Line No.",0);
                                                                GetFinChrgMemoHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" :=
                                                                      ROUND(Amount * "VAT %" / 100,Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          FinChrgMemoHeader."Tax Area Code","Tax Group Code",FinChrgMemoHeader."Tax Liable",
                                                                          FinChrgMemoHeader."Posting Date",Amount,0,0);
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"4":
                                                                    BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 17  ;   ;Interest Rate       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Entry No.");
                                                                CalcFinChrg;
                                                              END;

                                                   CaptionML=[ENU=Interest Rate;
                                                              RUS=Процентная ставка];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 18  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              RUS=Общая товарная группа] }
    { 19  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              RUS=НДС (%)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              RUS=Тип расчета НДС];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    RUS=Обычный НДС,Обратный НДС,Полный НДС,Налог с продаж];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 21  ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              RUS=Сумма НДС];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 22  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              RUS=Код налоговой группы] }
    { 23  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                GetFinChrgMemoHeader;
                                                                VATPostingSetup.GET(FinChrgMemoHeader."VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Sales VAT Account");
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          FinChrgMemoHeader."Tax Area Code","Tax Group Code",FinChrgMemoHeader."Tax Liable",
                                                                          FinChrgMemoHeader."Posting Date",Amount,0,0);
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              RUS=НДС товарная группа] }
    { 24  ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              RUS=Идентификатор НДС];
                                                   Editable=No }
    { 25  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              RUS=Тип строки];
                                                   OptionCaptionML=[ENU=Finance Charge Memo Line,Beginning Text,Ending Text,Rounding;
                                                                    RUS=Строка процент-ноты,Начальный текст,Заключительный текст,Округление];
                                                   OptionString=Finance Charge Memo Line,Beginning Text,Ending Text,Rounding }
    { 26  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              RUS=Код Условия НДС] }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              RUS=Созданная системой операция];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Finance Charge Memo No.,Line No.        ;SumIndexFields=Amount,VAT Amount,Remaining Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Finance Charge Memo No.,Type            ;SumIndexFields=Amount,VAT Amount,Remaining Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The %1 on the %2 and the %3 must be the same.;RUS=%1 в %2 и %3 должны совпадать.';
      Text001@1001 : TextConst 'ENU=%1 must be %2 or %3.;RUS=%1 должно быть %2 или %3.';
      Text002@1002 : TextConst 'ENU=Document;RUS=Документ';
      CustLedgEntry2@1003 : Record 21;
      FinChrgTerms@1004 : Record 5;
      FinChrgMemoHeader@1005 : Record 302;
      FinChrgMemoLine@1006 : Record 303;
      FinChrgMemoLine2@1007 : Record 303;
      ReminderEntry@1009 : Record 300;
      CustLedgEntry@1010 : Record 21;
      Currency@1012 : Record 4;
      VATPostingSetup@1013 : Record 325;
      CustPostingGr@1014 : Record 92;
      GLAcc@1015 : Record 15;
      StdTxt@1016 : Record 7;
      GenProdPostingGrp@1017 : Record 251;
      ApplicationManagement@1023 : Codeunit 1;
      SalesTaxCalculate@1018 : Codeunit 398;
      InterestCalcDate@1019 : Date;
      DocTypeText@1021 : Text[30];
      CalcInterest@1022 : Boolean;
      Text004@1011 : TextConst 'ENU=There is no open %1 with %2 %3.;RUS=Нет открытых %1 с %2 %3.';
      ClosedatDate@1025 : Date;

    LOCAL PROCEDURE CalcFinChrg@6();
    VAR
      DtldCLE@1001 : Record 379;
      IssuedReminderHeader@1003 : Record 297;
      InterestStartDate@1000 : Date;
      BaseAmount@1002 : Decimal;
      LineFee@1004 : Decimal;
    BEGIN
      GetFinChrgMemoHeader;
      Amount := 0;
      "VAT Amount" := 0;
      "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
      "Gen. Prod. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
      "Interest Rate" := 0;
      CustLedgEntry.GET("Entry No.");
      IF CustLedgEntry."On Hold" <> '' THEN
        EXIT;

      "Interest Rate" := FinChrgTerms."Interest Rate";
      CASE FinChrgTerms."Interest Calculation Method" OF
        FinChrgTerms."Interest Calculation Method"::"Average Daily Balance":
          BEGIN
            FinChrgTerms.TESTFIELD("Interest Period (Days)");
            ReminderEntry.SETCURRENTKEY("Customer Entry No.");
            ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::"Finance Charge Memo");
            InterestCalcDate := CustLedgEntry."Due Date";
            IF ReminderEntry.FINDLAST THEN
              InterestCalcDate := ReminderEntry."Document Date";
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
            ReminderEntry.SETRANGE("Interest Posted",TRUE);
            IF ReminderEntry.FINDLAST THEN
              IF ReminderEntry."Document Date" > InterestCalcDate THEN
                InterestCalcDate := ReminderEntry."Document Date";
            CalcInterest := FALSE;
            IF CALCDATE(FinChrgTerms."Grace Period","Due Date") < FinChrgMemoHeader."Document Date" THEN BEGIN
              CalcInterest := TRUE;
              IF CustLedgEntry."Calculate Interest" THEN BEGIN
                ClosedatDate := CalcClosedatDate;
                IF ClosedatDate <= CALCDATE(FinChrgTerms."Grace Period","Due Date") THEN
                  CalcInterest := FALSE;
              END;
              DtldCLE.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
              DtldCLE.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
              DtldCLE.SETFILTER("Entry Type",'%1|%2',
                DtldCLE."Entry Type"::"Initial Entry",
                DtldCLE."Entry Type"::Application);
              DtldCLE.SETRANGE("Posting Date",0D,FinChrgMemoHeader."Document Date");
              IF DtldCLE.FIND('-') THEN
                REPEAT
                  IF DtldCLE."Entry Type" = DtldCLE."Entry Type"::"Initial Entry" THEN
                    InterestStartDate := CustLedgEntry."Due Date"
                  ELSE
                    InterestStartDate := DtldCLE."Posting Date";
                  IF InterestCalcDate > InterestStartDate THEN
                    InterestStartDate := InterestCalcDate;
                  Amount := Amount + DtldCLE.Amount * (FinChrgMemoHeader."Document Date" - InterestStartDate);
                UNTIL DtldCLE.NEXT = 0;
              IF (NOT FinChrgTerms."Add. Line Fee in Interest") AND
                 (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Reminder) AND
                 IssuedReminderHeader.GET(CustLedgEntry."Document No.")
              THEN BEGIN
                IssuedReminderHeader.CALCFIELDS("Add. Fee per Line");
                LineFee := IssuedReminderHeader."Add. Fee per Line" + IssuedReminderHeader.CalculateLineFeeVATAmount;
                Amount := Amount - LineFee * (FinChrgMemoHeader."Document Date" - InterestStartDate);
                IF Amount < 0 THEN
                  Amount := 0;
              END;
            END;
            BaseAmount := Amount / FinChrgTerms."Interest Period (Days)";
            IF CalcInterest THEN
              Amount := Amount / FinChrgTerms."Interest Period (Days)" * "Interest Rate" / 100
            ELSE
              Amount := 0;
          END;
        FinChrgTerms."Interest Calculation Method"::"Balance Due":
          IF CALCDATE(FinChrgTerms."Grace Period","Due Date") < FinChrgMemoHeader."Document Date" THEN BEGIN
            Amount := "Remaining Amount" * "Interest Rate" / 100;
            BaseAmount := "Remaining Amount";
          END;
      END;

      IF FinChrgTerms."Line Description" <> '' THEN BEGIN
        DocTypeText := DELCHR(FORMAT("Document Type"),'<');
        IF DocTypeText = '' THEN
          DocTypeText := Text002;
        Description :=
          COPYSTR(
            STRSUBSTNO(
              FinChrgTerms."Line Description",
              CustLedgEntry.Description,
              DocTypeText,
              "Document No.",
              "Interest Rate",
              FORMAT("Original Amount",0,ApplicationManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              FORMAT(BaseAmount,0,ApplicationManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              "Due Date",
              FinChrgMemoHeader."Currency Code"),
            1,
            MAXSTRLEN(Description));
      END;

      IF Amount <> 0 THEN BEGIN
        CustPostingGr.GET(FinChrgMemoHeader."Customer Posting Group");
        CustPostingGr.TESTFIELD("Interest Account");
        GLAcc.GET(CustPostingGr."Interest Account");
        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
      END;
    END;

    PROCEDURE CheckAttachedLines@5() : Boolean;
    VAR
      FinChrgMemoLine@1000 : Record 303;
    BEGIN
      IF "Line No." <> 0 THEN BEGIN
        FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
        FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
        EXIT(NOT FinChrgMemoLine.ISEMPTY);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE UpdateAttachedLines@8();
    VAR
      FinChrgMemoLine@1000 : Record 303;
    BEGIN
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
      FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
      FinChrgMemoLine.DELETEALL;
    END;

    LOCAL PROCEDURE SetCustLedgEntryView@9();
    BEGIN
      GetFinChrgMemoHeader;
      CASE FinChrgTerms."Interest Calculation" OF
        FinChrgTerms."Interest Calculation"::"Open Entries":
          BEGIN
            CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
            CustLedgEntry.SETRANGE("Customer No.",FinChrgMemoHeader."Customer No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
          END;
        FinChrgTerms."Interest Calculation"::"Closed Entries",
        FinChrgTerms."Interest Calculation"::"All Entries":
          BEGIN
            CustLedgEntry.SETCURRENTKEY("Customer No.");
            CustLedgEntry.SETRANGE("Customer No.",FinChrgMemoHeader."Customer No.");
          END;
      END;
    END;

    LOCAL PROCEDURE LookupCustLedgEntry@12();
    BEGIN
      GetFinChrgMemoHeader;
      CASE FinChrgTerms."Interest Calculation" OF
        FinChrgTerms."Interest Calculation"::"Open Entries":
          IF PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK THEN
            VALIDATE("Entry No.",CustLedgEntry."Entry No.");
        FinChrgTerms."Interest Calculation"::"Closed Entries",
        FinChrgTerms."Interest Calculation"::"All Entries":
          IF PAGE.RUNMODAL(PAGE::"Customer Ledger Entries",CustLedgEntry) = ACTION::LookupOK THEN
            VALIDATE("Entry No.",CustLedgEntry."Entry No.");
      END;
    END;

    LOCAL PROCEDURE GetFinChrgMemoHeader@2();
    BEGIN
      IF "Finance Charge Memo No." <> FinChrgMemoHeader."No." THEN BEGIN
        FinChrgMemoHeader.GET("Finance Charge Memo No.");
        ProcessFinChrgMemoHeader;
      END;
    END;

    PROCEDURE SetFinChrgMemoHeader@4(VAR NewFinChrgMemoHeader@1000 : Record 302);
    BEGIN
      FinChrgMemoHeader := NewFinChrgMemoHeader;
      ProcessFinChrgMemoHeader;
    END;

    LOCAL PROCEDURE ProcessFinChrgMemoHeader@1();
    BEGIN
      FinChrgMemoHeader.TESTFIELD("Customer No.");
      FinChrgMemoHeader.TESTFIELD("Document Date");
      FinChrgMemoHeader.TESTFIELD("Customer Posting Group");
      FinChrgMemoHeader.TESTFIELD("Fin. Charge Terms Code");
      FinChrgTerms.GET(FinChrgMemoHeader."Fin. Charge Terms Code");
      IF FinChrgMemoHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(FinChrgMemoHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    PROCEDURE GetCurrencyCode@10() : Code[10];
    VAR
      FinChrgMemoHeader@1000 : Record 302;
    BEGIN
      IF "Finance Charge Memo No." = FinChrgMemoHeader."No." THEN
        EXIT(FinChrgMemoHeader."Currency Code");

      IF FinChrgMemoHeader.GET("Finance Charge Memo No.") THEN
        EXIT(FinChrgMemoHeader."Currency Code");

      EXIT('');
    END;

    PROCEDURE CalcClosedatDate@3() ClosedatDate : Date;
    BEGIN
      IF CustLedgEntry2.GET(CustLedgEntry."Closed by Entry No.") THEN
        IF CustLedgEntry2."Document Date" > CustLedgEntry."Closed at Date" THEN
          ClosedatDate := CustLedgEntry2."Document Date"
        ELSE
          ClosedatDate := CustLedgEntry."Closed at Date";
      CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
      CustLedgEntry2.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
      IF CustLedgEntry2.FIND('-') THEN
        REPEAT
          IF CustLedgEntry2."Document Date" > CustLedgEntry."Closed at Date" THEN
            ClosedatDate := CustLedgEntry2."Document Date"
          ELSE
            ClosedatDate := CustLedgEntry."Closed at Date";
        UNTIL CustLedgEntry2.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

