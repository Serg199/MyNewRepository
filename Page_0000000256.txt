OBJECT Page 256 Payment Journal
{
  OBJECT-PROPERTIES
  {
    Date=25.07.17;
    Time=14:05:43;
    Modified=Yes;
    Version List=NAVW110.00,NAVRU10.00,NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payment Journal;
               RUS=Журнал платежей];
    SaveValues=Yes;
    SourceTable=Table81;
    DataCaptionExpr=DataCaption;
    DelayedInsert=Yes;
    PageType=Worksheet;
    AutoSplitKey=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Bank,Prepare,Approve;
                                RUS=Создать,Обработать,Отчет,Банк,Подготовить,Утвердить];
    OnInit=BEGIN
             TotalBalanceVisible := TRUE;
             BalanceVisible := TRUE;
           END;

    OnOpenPage=VAR
                 JnlSelected@1000 : Boolean;
               BEGIN
                 BalAccName := '';

                 IF IsOpenedFromBatch THEN BEGIN
                   CurrentJnlBatchName := "Journal Batch Name";
                   GenJnlManagement.OpenJnl(CurrentJnlBatchName,Rec);
                   SetControlAppearance;
                   EXIT;
                 END;
                 GenJnlManagement.TemplateSelection(PAGE::"Payment Journal",4,FALSE,Rec,JnlSelected);
                 IF NOT JnlSelected THEN
                   ERROR('');
                 GenJnlManagement.OpenJnl(CurrentJnlBatchName,Rec);
                 SetControlAppearance;

                 //NC NCS-1108.5 > DP
                 GenJnlBatch.GET(GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
                 //NC NOS-26 > ENK
                 {
                 CurrPage.ButtonPost.ENABLED(NOT GenJnlBatch."Check Printed");
                 }
                 IF (NOT GenJnlBatch."Check Printed") THEN
                   EnablePost := TRUE;
                 //NC NOS-26 < ENK
                 //NC NCS-1108.5 < DP
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := GetOverdueDateInteractions(OverdueWarningText);
                       ShowShortcutDimCode(ShortcutDimCode);
                       HasPmtFileErr := HasPaymentFileErrors;
                       SetControlAppearance;

                       //NC S1880.1 > PCH
                       //NC NOS-26 > ENK
                       {
                       IF CurrPage.ctrl_AccName2.VISIBLE THEN
                       }
                       //NC NOS-26 < ENK
                         GenJnlManagement2.GetAccounts(Rec,AccName2,BalAccName2);
                       //NC S1880.1 < PCH

                       //NC NOS-26 > ENK
                       {
                       //TDRANCS-1101>
                       l_recJnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
                       l_recJnlLineDim.SETRANGE("Journal Template Name","Journal Template Name");
                       l_recJnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
                       l_recJnlLineDim.SETRANGE("Journal Line No.","Line No.");
                       IF l_recJnlLineDim.FINDSET THEN REPEAT
                         IF l_recJnlLineDim.fn_ColorBlockDim(l_recJnlLineDim."Dimension Code",
                                                             l_recJnlLineDim."Dimension Value Code",
                                                             "Posting Date") <> 0 THEN
                           CurrForm."Posting Date".UPDATEFORECOLOR := l_recJnlLineDim.fn_ColorBlockDim(l_recJnlLineDim."Dimension Code",
                                                                                                       l_recJnlLineDim."Dimension Value Code",
                                                                                                       "Posting Date");
                       UNTIL l_recJnlLineDim.NEXT = 0;
                       //TDRANCS-1101<
                       }
                       PostingDateColor := DimensionManagement.fn_ColorBlockDim("Dimension Set ID", "Posting Date");
                       //NC NOS-26 < ENK
                     END;

    OnNewRecord=BEGIN
                  HasPmtFileErr := FALSE;
                  UpdateBalance;
                  SetUpNewLine(xRec,Balance,BelowxRec);
                  CLEAR(ShortcutDimCode);

                  //NC OAM003 > DP
                  IF xRec."Account No." = '' THEN BEGIN
                    "Account Type" := "Account Type"::Vendor;
                    "Document Type" := "Document Type"::Invoice;
                    END;
                  Amount := -(TotalBalance+"Balance (LCY)"-xRec."Balance (LCY)");
                  //NC OAM003 < DP
                END;

    OnModifyRecord=BEGIN
                     CheckForPmtJnlErrors;
                   END;

    OnAfterGetCurrRecord=VAR
                           GenJournalBatch@1000 : Record 232;
                           WorkflowEventHandling@1001 : Codeunit 1520;
                           WorkflowManagement@1002 : Codeunit 1501;
                           TableID@1101495001 : ARRAY [10] OF Integer;
                           No@1101495000 : ARRAY [10] OF Code[20];
                         BEGIN
                           StyleTxt := GetOverdueDateInteractions(OverdueWarningText);
                           GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                           UpdateBalance;
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);

                           IF GenJournalBatch.GET("Journal Template Name","Journal Batch Name") THEN
                             ShowWorkflowStatusOnBatch := CurrPage.WorkflowStatusBatch.PAGE.SetFilterOnWorkflowRecord(GenJournalBatch.RECORDID);
                           ShowWorkflowStatusOnLine := CurrPage.WorkflowStatusLine.PAGE.SetFilterOnWorkflowRecord(RECORDID);

                           EventFilter := WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode;
                           EnabledApprovalWorkflowsExist := WorkflowManagement.EnabledWorkflowExist(DATABASE::"Gen. Journal Line",EventFilter);
                           // NC NOS-26 > SPA
                           SpecifyTableID_No(TableID,No);
                           CurrPage.DimensionsList.PAGE.RefreshList("Dimension Set ID",TableID,No);
                           // NC NOS-26 < SPA
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 57      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 RUS=&Строка];
                      Image=Line }
      { 58      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 RUS=Измерения];
                      ToolTipML=[ENU=View or edits dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 RUS=Просмотр или изменение измерений, например области, проекта или отдела, которые можно назначать документам покупки и продажи для распределения себестоимости и анализа истории транзакций.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Image=Dimensions;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowDimensions;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 92      ;2   ;Action    ;
                      Name=IncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=[ENU=Incoming Document;
                                 RUS=Входящий документ];
                      ToolTipML=[ENU=View or create an incoming document record that is linked to the entry or document.;
                                 RUS=Просмотр или создание входящей записи документа, которая связана с операцией или документом.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 VALIDATE("Incoming Document Entry No.",IncomingDocument.SelectIncomingDocument("Incoming Document Entry No.",RECORDID));
                               END;
                                }
      { 37      ;1   ;ActionGroup;
                      CaptionML=[ENU=A&ccount;
                                 RUS=С&чет];
                      Image=ChartOfAccounts }
      { 38      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Card;
                                 RUS=Карточка];
                      ToolTipML=[ENU=View or change detailed information about the record that is being processed on the journal line.;
                                 RUS=Просмотр или изменение подробных сведений о записи, обрабатываемой в строке журнала.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 15;
                      Image=EditLines }
      { 39      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 RUS=&Книга операций];
                      ToolTipML=[ENU=View the history of transactions that have been posted for the selected record.;
                                 RUS=Просмотр истории транзакций, которые были учтены для выбранной записи.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 14;
                      Promoted=No;
                      Image=GLRegisters;
                      PromotedCategory=Process }
      { 41      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Payments;
                                 RUS=&Платежи];
                      Image=Payment }
      { 42      ;2   ;Action    ;
                      Name=SuggestVendorPayments;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Suggest Vendor Payments;
                                 RUS=Предлож. оплаты поставщикам];
                      ToolTipML=[ENU=Create payment suggestion as lines in the payment journal.;
                                 RUS=Создание предложений по оплате в качестве строк журнала платежей.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SuggestVendorPayments;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 SuggestVendorPayments@1001 : Report 393;
                               BEGIN
                                 CLEAR(SuggestVendorPayments);
                                 SuggestVendorPayments.SetGenJnlLine(Rec);
                                 SuggestVendorPayments.RUNMODAL;
                               END;
                                }
      { 63      ;2   ;Action    ;
                      Name=PreviewCheck;
                      CaptionML=[ENU=P&review Check;
                                 RUS=П&росмотр платеж. документа];
                      ToolTipML=[ENU=Preview the check before printing it.;
                                 RUS=Предварительный просмотр платежного документа перед печатью.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 404;
                      RunPageLink=Journal Template Name=FIELD(Journal Template Name),
                                  Journal Batch Name=FIELD(Journal Batch Name),
                                  Line No.=FIELD(Line No.);
                      Image=ViewCheck }
      { 64      ;2   ;Action    ;
                      Name=PrintCheck;
                      AccessByPermission=TableData 272=R;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Print Check;
                                 RUS=Печать платежного документа];
                      ToolTipML=[ENU=Prepare to print the check.;
                                 RUS=Подготовка к печати платежного документа.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=PrintCheck;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GenJnlLine.RESET;
                                 GenJnlLine.COPY(Rec);
                                 GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 DocPrint.PrintCheck(GenJnlLine);
                                 CODEUNIT.RUN(CODEUNIT::"Adjust Gen. Journal Balance",Rec);
                               END;
                                }
      { 65      ;2   ;Action    ;
                      CaptionML=[ENU=Void Check;
                                 RUS=Аннулировать платеж. документ];
                      ToolTipML=[ENU=Void the check if, for example, the check is not cashed by the bank.;
                                 RUS=Аннулирование платежного документа, если, например, он не принят банком к исполнению.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=VoidCheck;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TESTFIELD("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                 TESTFIELD("Check Printed",TRUE);
                                 IF CONFIRM(Text000,FALSE,"Document No.") THEN
                                   CheckManagement.VoidCheck(Rec);
                               END;
                                }
      { 66      ;2   ;Action    ;
                      CaptionML=[ENU=Void &All Checks;
                                 RUS=Аннулировать в&се платеж. документы];
                      ToolTipML=[ENU=Void all checks if, for example, the checks are not cashed by the bank.;
                                 RUS=Аннулирование всех платежных документов, если, например, они не приняты банком к исполнению.];
                      ApplicationArea=#Basic,#Suite;
                      Image=VoidAllChecks;
                      OnAction=BEGIN
                                 IF CONFIRM(Text001,FALSE) THEN BEGIN
                                   GenJnlLine.RESET;
                                   GenJnlLine.COPY(Rec);
                                   GenJnlLine.SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                   GenJnlLine.SETRANGE("Check Printed",TRUE);
                                   IF GenJnlLine.FIND('-') THEN
                                     REPEAT
                                       GenJnlLine2 := GenJnlLine;
                                       CheckManagement.VoidCheck(GenJnlLine2);
                                     UNTIL GenJnlLine.NEXT = 0;
                                 END;
                               END;
                                }
      { 26      ;2   ;Action    ;
                      Name=CreditTransferRegEntries;
                      CaptionML=[ENU=Credit Transfer Reg. Entries;
                                 RUS=Операции регистров кредитовых переводов];
                      ToolTipML=[ENU=View or edit the credit transfer entries that are related to file export for credit transfers.;
                                 RUS=Просмотр или изменение операций кредитового перевода, относящиеся к экспорту файла для кредитового перевода.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 16;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExportReceipt;
                      PromotedCategory=Category4 }
      { 23      ;2   ;Action    ;
                      Name=CreditTransferRegisters;
                      CaptionML=[ENU=Credit Transfer Registers;
                                 RUS=Регистры кредитовых переводов];
                      ToolTipML=[ENU=View or edit the payment files that have been exported in connection with credit transfers.;
                                 RUS=Просмотр или изменения файлов оплаты, которые были экспортированы в связи с кредитовыми переводами.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 1205;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExportElectronicDocument;
                      PromotedCategory=Category4 }
      { 1101495012;2 ;Action    ;
                      CaptionML=[ENU=Pr&int All checks;
                                 RUS=П&ечать всех Платёжн. Документов];
                      Image=PrintCheck;
                      OnAction=VAR
                                 BankAcc@1101495003 : Record 270;
                                 CustLedgEntry@1101495002 : Record 21;
                                 VendLedgEntry@1101495001 : Record 25;
                                 GenJnlCheckLine@1101495000 : Codeunit 11;
                               BEGIN
                                 //NC NCS-1602.7 > USE
                                 GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                 IF CONFIRM(Text50002,FALSE) AND (GenJnlBatch."Bal. Account Type"=GenJnlBatch."Bal. Account Type"::"Bank Account") THEN
                                 BEGIN

                                 //NC NCS-1745 > DP
                                   GenJnlLine.COPY(Rec);
                                   GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
                                   GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
                                   GenJnlLine.SETRANGE("Check Printed",FALSE);
                                   GenJnlLine.SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                   IF GenJnlLine.FINDFIRST THEN
                                   REPEAT
                                   IF GenJnlLine."Document Type" <> 0 THEN
                                     IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN
                                       CASE GenJnlLine."Document Type" OF
                                         GenJnlLine."Document Type"::"Credit Memo":
                                           GenJnlCheckLine.ErrorIfPositiveAmt(GenJnlLine);
                                         GenJnlLine."Document Type"::Payment:
                                           IF (GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo") AND
                                             (GenJnlLine."Applies-to Doc. No." <> '')
                                           THEN
                                             GenJnlCheckLine.ErrorIfNegativeAmt(GenJnlLine)
                                           ELSE
                                             GenJnlCheckLine.ErrorIfPositiveAmt(GenJnlLine);
                                         ELSE
                                           GenJnlCheckLine.ErrorIfNegativeAmt(GenJnlLine);
                                       END
                                     ELSE
                                       CASE GenJnlLine."Document Type" OF
                                         GenJnlLine."Document Type"::"Credit Memo":
                                           GenJnlCheckLine.ErrorIfNegativeAmt(GenJnlLine);
                                         GenJnlLine."Document Type"::Payment:
                                           IF (GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo") AND
                                             (GenJnlLine."Applies-to Doc. No." <> '')
                                           THEN
                                             GenJnlCheckLine.ErrorIfPositiveAmt(GenJnlLine)
                                           ELSE
                                             GenJnlCheckLine.ErrorIfNegativeAmt(GenJnlLine);
                                         ELSE
                                           GenJnlCheckLine.ErrorIfPositiveAmt(GenJnlLine);
                                       END;
                                   GenJnlLine.TESTFIELD("Bal. Account Type",GenJnlLine."Bal. Account Type"::"Bank Account");
                                   IF GenJnlLine."Account Type" =GenJnlLine."Account Type"::Customer THEN
                                     IF Cust.GET(GenJnlLine."Account No.") AND (Cust."Agreement Posting"=Cust."Agreement Posting"::Mandatory) THEN
                                       BEGIN
                                       CustLedgEntry.RESET;
                                       CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                                       CustLedgEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
                                       CustLedgEntry.SETRANGE(Open,TRUE);
                                       CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                                       IF CustLedgEntry.ISEMPTY THEN
                                         IF NOT CONFIRM(Text50001,FALSE) THEN
                                           EXIT;
                                       GenJnlLine.TESTFIELD("Agreement No.");
                                       END;

                                   IF GenJnlLine."Account Type" =GenJnlLine."Account Type"::Vendor THEN
                                     IF Vend.GET(GenJnlLine."Account No.") AND (Vend."Agreement Posting"=Vend."Agreement Posting"::Mandatory) THEN
                                       BEGIN
                                       VendLedgEntry.RESET;
                                       VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                                       VendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
                                       VendLedgEntry.SETRANGE(Open,TRUE);
                                       VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                                       IF VendLedgEntry.ISEMPTY THEN
                                         IF NOT CONFIRM(Text50001,FALSE) THEN
                                           EXIT;
                                       GenJnlLine.TESTFIELD("Agreement No.");
                                       END;
                                   UNTIL GenJnlLine.NEXT=0;
                                 {
                                   //RESET;
                                   SETRANGE("Journal Template Name","Journal Template Name");
                                   SETRANGE("Journal Batch Name","Journal Batch Name");
                                   SETRANGE("Check Printed",FALSE);
                                   SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                   IF FINDFIRST THEN
                                   REPEAT

                                   IF "Document Type" <> 0 THEN
                                     IF "Account Type" = "Account Type"::Customer THEN
                                       CASE "Document Type" OF
                                         "Document Type"::"Credit Memo":
                                           GenJnlCheckLine.ErrorIfPositiveAmt(Rec);
                                         "Document Type"::Payment:
                                           IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
                                             ("Applies-to Doc. No." <> '')
                                           THEN
                                             GenJnlCheckLine.ErrorIfNegativeAmt(Rec)
                                           ELSE
                                             GenJnlCheckLine.ErrorIfPositiveAmt(Rec);
                                         ELSE
                                           GenJnlCheckLine.ErrorIfNegativeAmt(Rec);
                                       END
                                     ELSE
                                       CASE "Document Type" OF
                                         "Document Type"::"Credit Memo":
                                           GenJnlCheckLine.ErrorIfNegativeAmt(GenJnlLine);
                                         "Document Type"::Payment:
                                           IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
                                             ("Applies-to Doc. No." <> '')
                                           THEN
                                             GenJnlCheckLine.ErrorIfPositiveAmt(Rec)
                                           ELSE
                                             GenJnlCheckLine.ErrorIfNegativeAmt(Rec);
                                         ELSE
                                           GenJnlCheckLine.ErrorIfPositiveAmt(Rec);
                                       END;


                                   GenJnlLine.RESET;
                                   GenJnlLine.COPY(Rec);
                                   GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
                                   GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
                                   GenJnlLine.SETRANGE("Line No.","Line No.");
                                   GenJnlLine.TESTFIELD("Bal. Account Type",GenJnlLine."Bal. Account Type"::"Bank Account");

                                   IF GenJnlLine."Account Type" =GenJnlLine."Account Type"::Customer THEN
                                     IF Cust.GET(GenJnlLine."Account No.") AND (Cust."Agreement Posting"=Cust."Agreement Posting"::Mandatory) THEN

                                       BEGIN
                                       CustLedgEntry.RESET;
                                       CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                                       CustLedgEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
                                       CustLedgEntry.SETRANGE(Open,TRUE);
                                       CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                                       IF CustLedgEntry.ISEMPTY THEN
                                         IF NOT CONFIRM(Text50001,FALSE) THEN
                                           EXIT;

                                       GenJnlLine.TESTFIELD("Agreement No.");
                                       END;

                                   IF GenJnlLine."Account Type" =GenJnlLine."Account Type"::Vendor THEN
                                     IF Vend.GET(GenJnlLine."Account No.") AND (Vend."Agreement Posting"=Vend."Agreement Posting"::Mandatory) THEN

                                       BEGIN
                                       VendLedgEntry.RESET;
                                       VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                                       VendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
                                       VendLedgEntry.SETRANGE(Open,TRUE);
                                       VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                                       IF VendLedgEntry.ISEMPTY THEN
                                         IF NOT CONFIRM(Text50001,FALSE) THEN
                                           EXIT;

                                       GenJnlLine.TESTFIELD("Agreement No.");
                                       END;

                                 UNTIL NEXT=0;
                                 SETRANGE("Bank Payment Type");
                                 SETRANGE("Check Printed");
                                 }
                                 //NC NCS-1745 < DP

                                 GenJnlLine.RESET;
                                 GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 GenJnlLine.SETRANGE("Check Printed",FALSE);
                                 GenJnlLine.SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");

                                 GenJnlLine.FINDSET;

                                 BankAcc.GET(GenJnlLine."Bal. Account No.");
                                 CASE BankAcc."Account Type" OF
                                   BankAcc."Account Type"::"Bank Account":
                                 DocPrint.PrintCheck(GenJnlLine);
                                   BankAcc."Account Type"::"Cash Account":
                                     DocPrint.PrintCashOrder(GenJnlLine);
                                 END;
                                 CODEUNIT.RUN(CODEUNIT::"Adjust Gen. Journal Balance",Rec);

                                 END;
                                 //NC NCS-1602.7 < USE
                               END;
                                }
      { 54      ;1   ;Action    ;
                      Name=Approvals;
                      AccessByPermission=TableData 454=R;
                      CaptionML=[ENU=Approvals;
                                 RUS=Утверждения];
                      ToolTipML=[ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                                 RUS=Просмотр списка записей, ожидающих утверждения. Например, вы можете видеть имя пользователя, запросившего утверждение записи, время отправки запроса и время, когда он должен быть утвержден.];
                      ApplicationArea=#Suite;
                      Image=Approvals;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record 81;
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.ShowJournalApprovalEntries(GenJournalLine);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 40      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 RUS=Ф&ункции];
                      Image=Action }
      { 19      ;2   ;Action    ;
                      CaptionML=[ENU=Renumber Document Numbers;
                                 RUS=Перенумеровать документы];
                      ToolTipML=[ENU=Resort the numbers in the Document No. column to avoid posting errors because the document numbers are not in sequence. Entry applications and line groupings are preserved.;
                                 RUS=Пересортировка номеров в столбце "Номер документа", чтобы избежать ошибок учета, если номера документов не упорядочены. Применения операций и группировки строк сохраняются.];
                      ApplicationArea=#Basic,#Suite;
                      Image=EditLines;
                      OnAction=BEGIN
                                 RenumberDocumentNo
                               END;
                                }
      { 1101495011;2 ;Action    ;
                      CaptionML=RUS=Вставить Строки Окр. Конв. РУБ;
                      RunObject=Codeunit 407 }
      { 15      ;2   ;Action    ;
                      Name=ExportPaymentsToFile;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Export Payments to File;
                                 RUS=Экспорт платежей в файл];
                      ToolTipML=[ENU=Export a file with the payment information on the journal lines.;
                                 RUS=Экспорт файла с платежной информацией по строкам журнала.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExportFile;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 GenJnlLine@1001 : Record 81;
                               BEGIN
                                 GenJnlLine.COPYFILTERS(Rec);
                                 GenJnlLine.FINDFIRST;
                                 GenJnlLine.ExportPaymentFile;
                               END;
                                }
      { 1210004 ;2   ;Action    ;
                      Name=PreviewPaymentOrder;
                      CaptionML=[ENU=P&review Payment Order;
                                 RUS=Прос&мотр платежного поручения];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ViewCheck;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 BankAcc@1470004 : Record 270;
                                 BankOrderForm@1470003 : Page 12422;
                                 CashInOrderForm@1470002 : Page 12423;
                                 CashOutOrderForm@1470001 : Page 12446;
                               BEGIN
                                 CheckManagement.ShowPaymentDocument(Rec);
                                 CODEUNIT.RUN(CODEUNIT::"Adjust Gen. Journal Balance",Rec);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1210005 ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Print Payment Order;
                                 RUS=Печать платежного поручения];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PrintCheck;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 BankAcc@1470004 : Record 270;
                               BEGIN
                                 GenJnlLine.RESET;
                                 GenJnlLine.COPY(Rec);
                                 GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 GenJnlLine.SETRANGE("Line No.","Line No.");
                                 GenJnlLine.TESTFIELD("Bal. Account Type",GenJnlLine."Bal. Account Type"::"Bank Account");
                                 BankAcc.GET(GenJnlLine."Bal. Account No.");
                                 CASE BankAcc."Account Type" OF
                                   BankAcc."Account Type"::"Bank Account":
                                 DocPrint.PrintCheck(GenJnlLine);
                                   BankAcc."Account Type"::"Cash Account":
                                     DocPrint.PrintCashOrder(GenJnlLine);
                                 END;
                                 CODEUNIT.RUN(CODEUNIT::"Adjust Gen. Journal Balance",Rec);
                               END;
                                }
      { 1210065 ;2   ;Action    ;
                      CaptionML=[ENU=Void Payment Order;
                                 RUS=Аннулировать печать платеж. поручения];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=VoidCheck;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TESTFIELD("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                 TESTFIELD("Check Printed",TRUE);
                                 IF CONFIRM(Text000,FALSE,"Document No.") THEN
                                   CheckManagement.VoidCheck(Rec);
                               END;
                                }
      { 1210066 ;2   ;Action    ;
                      CaptionML=[ENU=Void &All Payment Orders;
                                 RUS=Аннулировать &все платежные поручения];
                      ApplicationArea=#Basic,#Suite;
                      Image=VoidAllChecks;
                      OnAction=BEGIN
                                 IF CONFIRM(Text001,FALSE) THEN BEGIN
                                   GenJnlLine.RESET;
                                   GenJnlLine.COPY(Rec);
                                   GenJnlLine.SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                   GenJnlLine.SETRANGE("Check Printed",TRUE);
                                   IF GenJnlLine.FIND('-') THEN
                                     REPEAT
                                       GenJnlLine2 := GenJnlLine;
                                       CheckManagement.VoidCheck(GenJnlLine2);
                                     UNTIL GenJnlLine.NEXT = 0;
                                 END;
                               END;
                                }
      { 68      ;2   ;Action    ;
                      Name=CalculatePostingDate;
                      CaptionML=[ENU=Calculate Posting Date;
                                 RUS=Расчет даты учета];
                      ToolTipML=[ENU=Calculate the date that will appear as the posting date on the journal lines.;
                                 RUS=Расчет даты, которая будет указываться в качестве даты учета в строках журнала.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=CalcWorkCenterCalendar;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 CalculatePostingDate;
                               END;
                                }
      { 1470000 ;2   ;Action    ;
                      CaptionML=[ENU=Copy Payment Document;
                                 RUS=Копировать платежный документ];
                      ApplicationArea=#Basic,#Suite;
                      Image=CopyDocument;
                      OnAction=VAR
                                 CopyDocument@1470000 : Report 12425;
                               BEGIN
                                 CopyDocument.SetJournalLine(Rec);
                                 CopyDocument.RUNMODAL;
                                 CLEAR(CopyDocument);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 34      ;2   ;Action    ;
                      Name=PositivePayExport;
                      CaptionML=[ENU=Positive Pay Export;
                                 RUS=Экспорт Positive Pay];
                      Visible=FALSE;
                      Image=Export;
                      OnAction=VAR
                                 GenJnlBatch@1000 : Record 232;
                                 BankAcc@1001 : Record 270;
                               BEGIN
                                 GenJnlBatch.GET("Journal Template Name",CurrentJnlBatchName);
                                 IF GenJnlBatch."Bal. Account Type" = GenJnlBatch."Bal. Account Type"::"Bank Account" THEN BEGIN
                                   BankAcc."No." := GenJnlBatch."Bal. Account No.";
                                   PAGE.RUN(PAGE::"Positive Pay Export",BankAcc);
                                 END;
                               END;
                                }
      { 1101495014;2 ;Action    ;
                      CaptionML=RUS=----- }
      { 1101495015;2 ;Action    ;
                      Name=ApplyEntries;
                      ShortCutKey=Shift+F11;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Apply Entries;
                                 RUS=Применить операции];
                      ToolTipML=[ENU=Select one or more ledger entries that you want to apply this record to so that the related posted documents are closed as paid or refunded.;
                                 RUS=Выберите одну или несколько операций книги, которые нужно применить к этой записи, чтобы связанные учтенные документы были закрыты как оплаченные или возмещенные.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 225;
                      Promoted=Yes;
                      Image=ApplyEntries;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //NC NCS-1108.4 > DP
                                 TESTFIELD("Bal. Account Type","Bal. Account Type"::"Bank Account");
                                 TESTFIELD("Check Printed",FALSE);
                                 //NC NCS-1108.4 < DP

                                 //NC NCS-1108 > DP
                                 CLEAR(GenJnlApply);
                                 IF "Applies-to ID" = '' THEN BEGIN
                                  IF GenJnlBatch.GET("Journal Template Name","Journal Batch Name") AND (GenJnlBatch."Check Appl. ID Nos."<>'') THEN BEGIN
                                    "Applies-to ID" := NoSeriesMgt.GetNextNo(GenJnlBatch."Check Appl. ID Nos.","Posting Date",TRUE);
                                    MODIFY;
                                    MESSAGE(Text002,"Applies-to ID",FIELDCAPTION("Applies-to ID"));
                                  END;
                                 END ELSE
                                 GenJnlApply.RUN(Rec);
                                 //NC NCS-1108 < DP
                               END;
                                }
      { 1101495016;2 ;Action    ;
                      CaptionML=[ENU=Insert Conv. LCY Rndg. Lines;
                                 RUS=Вставить строки округл. для конвертации в руб.];
                      ToolTipML=[ENU=Insert a rounding correction line in the journal. This rounding correction line will balance in LCY when amounts in the foreign currency also balance. You can then post the journal.;
                                 RUS=Вставка строки корректировки округления в журнал. Эта корректирующая строка округления будет балансировать суммы в рублях, если суммы в иностранной валюте также сбалансированы. Затем можно приступать к учету журнала.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 407;
                      Image=InsertCurrency }
      { 1101495007;2 ;Action    ;
                      CaptionML=[ENU=Copy General Ledger Entry;
                                 RUS=Копировать Фин. Книга Операций];
                      Image=LedgerEntries;
                      OnAction=VAR
                                 CopyGL@1101495000 : Report 50052;
                               BEGIN
                                 //NC TR195 > EB
                                 CLEAR(CopyGL);
                                 CopyGL.SetJnlParam("Journal Template Name", "Journal Batch Name");
                                 CopyGL.RUNMODAL;
                                 //NC TR195 < EB
                               END;
                                }
      { 1101495006;2 ;Action    ;
                      CaptionML=[ENU=Copy Gen. Journal Line;
                                 RUS=Копировать Фин. Журнал Строки];
                      Image=CopyWorksheet;
                      OnAction=VAR
                                 Rec1@1101495000 : Record 81;
                               BEGIN
                                 //NC PIF051 > DP
                                 Rec1:=Rec;
                                 Rec1.SETRECFILTER;
                                 Rec1.SETRANGE("Line No.");
                                 REPORT.RUN(REPORT::"Fill data 2 (TEMP)",TRUE,TRUE,Rec1);
                                 //NC PIF051 < DP
                               END;
                                }
      { 1101495017;2 ;Action    ;
                      CaptionML=[ENU=Import from CSV;
                                 RUS=Импорт из CSV файла];
                      Image=Import;
                      OnAction=BEGIN
                                 //NC NOS-26 > ENK
                                 //Need to migrate dataport 50042 "Gen.Journal Line Import"
                                 {
                                 //NC PIF051 > DP
                                 CLEAR(ImportGL);
                                 ImportGL.SetJnlParam("Journal Template Name", "Journal Batch Name");
                                 ImportGL.RUNMODAL;
                                 //NC PIF051 < DP
                                 }
                                 //NC NOS-26 < ENK
                               END;
                                }
      { 1101495010;2 ;Action    ;
                      CaptionML=[ENU=A&pprove Document;
                                 RUS=Утвердить Документ];
                      Promoted=Yes;
                      Image=Approve;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // NC NCS-1880 ORM
                                 ApproveSelected;
                               END;
                                }
      { 1101495008;2 ;Action    ;
                      CaptionML=[ENU=&Reopen Document;
                                 RUS=Открыть Документ];
                      Promoted=Yes;
                      Image=ReOpen;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // NC NCS-1880 ORM
                                 ReopenSelected;
                               END;
                                }
      { 43      ;1   ;ActionGroup;
                      CaptionML=[ENU=P&osting;
                                 RUS=У&чет];
                      Image=Post }
      { 48      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F11;
                      CaptionML=[ENU=Reconcile;
                                 RUS=Выверить];
                      ToolTipML=[ENU=View the balances on bank accounts that are marked for reconciliation, usually liquid accounts.;
                                 RUS=Просмотр балансов банковских счетов, промаркированных для выверки (как правило, ликвидных счетов).];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=EnablePost;
                      Image=Reconcile;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 GLReconcile.SetGenJnlLine(Rec);
                                 GLReconcile.RUN;
                               END;
                                }
      { 78      ;2   ;Action    ;
                      Name=PreCheck;
                      CaptionML=[ENU=Vendor Pre-Payment Journal;
                                 RUS=Журнал предоплат поставщика];
                      ToolTipML=[ENU=View journal line entries, payment discounts, discount tolerance amounts, payment tolerance, and any errors associated with the entries. You can use the results of the report to review payment journal lines and to review the results of posting before you actually post.;
                                 RUS=Просмотр операций строк журнала, скидок по оплате, сумм отклонения в скидке, отклонений в оплате и всех ошибок, связанных с операциями. Результаты отчета можно использовать для просмотра строк журнала платежей и результатов учета перед фактическим учетом.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=EnablePost;
                      Image=PreviewChecks;
                      OnAction=VAR
                                 GenJournalBatch@1000 : Record 232;
                               BEGIN
                                 GenJournalBatch.INIT;
                                 GenJournalBatch.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJournalBatch.SETRANGE(Name,"Journal Batch Name");
                                 REPORT.RUN(REPORT::"Vendor Pre-Payment Journal",TRUE,FALSE,GenJournalBatch);
                               END;
                                }
      { 45      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Test Report;
                                 RUS=Тестовый отчет];
                      ToolTipML=[ENU=View a test report so that you can find and correct any errors before you perform the actual posting of the journal or document.;
                                 RUS=Просмотр тестового отчета, чтобы можно было найти и исправить все ошибки перед учетом журнала или документа.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=EnablePost;
                      Image=TestReport;
                      OnAction=BEGIN
                                 ReportPrint.PrintGenJnlLine(Rec);
                               END;
                                }
      { 46      ;2   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      CaptionML=[ENU=P&ost;
                                 RUS=У&чет];
                      ToolTipML=[ENU=Finalize the document or journal by posting the amounts and quantities to the related accounts in your company books.;
                                 RUS=Завершение подготовки документа или журнала путем учета сумм и количеств на соответствующих счетах в книгах организации.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=EnablePost;
                      PromotedIsBig=Yes;
                      Image=PostOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post",Rec);
                                 CurrentJnlBatchName := GETRANGEMAX("Journal Batch Name");
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 32      ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=[ENU=Preview Posting;
                                 RUS=Предварительный просмотр учета];
                      ToolTipML=[ENU=Review the different types of entries that will be created when you post the document or journal.;
                                 RUS=Просмотр различных типов операций, которые будут созданы в результате учета документа или журнала.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=EnablePost;
                      Image=ViewPostedOrder;
                      OnAction=VAR
                                 GenJnlPost@1001 : Codeunit 231;
                               BEGIN
                                 GenJnlPost.Preview(Rec);
                               END;
                                }
      { 47      ;2   ;Action    ;
                      ShortCutKey=Shift+F9;
                      CaptionML=[ENU=Post and &Print;
                                 RUS=Учет и &печать];
                      ToolTipML=[ENU=Finalize and prepare to print the document or journal. The values and quantities are posted to the related accounts. A report request window where you can specify what to include on the print-out.;
                                 RUS=Завершение подготовки документа или журнала и его подготовка к печати. Значения и количества учитываются на соответствующих счетах. В окне запроса отчета можно указать, какая информация должна выводиться на печать.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=EnablePost;
                      PromotedIsBig=Yes;
                      Image=PostPrint;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post+Print",Rec);
                                 CurrentJnlBatchName := GETRANGEMAX("Journal Batch Name");
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 36      ;1   ;ActionGroup;
                      CaptionML=[ENU=Request Approval;
                                 RUS=Утверждение запросов] }
      { 86      ;2   ;ActionGroup;
                      Name=SendApprovalRequest;
                      CaptionML=[ENU=Send Approval Request;
                                 RUS=Отправить запрос на утверждение];
                      Image=SendApprovalRequest }
      { 76      ;3   ;Action    ;
                      Name=SendApprovalRequestJournalBatch;
                      CaptionML=[ENU=Journal Batch;
                                 RUS=Раздел журнала];
                      ToolTipML=[ENU=Send all journal lines for approval, also those that you may not see because of filters.;
                                 RUS=Отправка всех строк журнала на утверждение, включая те, которые вы можете не видеть из-за фильтров.];
                      ApplicationArea=#Suite;
                      Enabled=NOT OpenApprovalEntriesOnBatchOrAnyJnlLineExist;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.TrySendJournalBatchApprovalRequest(Rec);
                                 SetControlAppearance;
                               END;
                                }
      { 74      ;3   ;Action    ;
                      Name=SendApprovalRequestJournalLine;
                      CaptionML=[ENU=Selected Journal Lines;
                                 RUS=Выбранные строки журнала];
                      ToolTipML=[ENU=Send selected journal lines for approval.;
                                 RUS=Отправка выбранных строк журнала на утверждение.];
                      ApplicationArea=#Suite;
                      Enabled=NOT OpenApprovalEntriesOnBatchOrCurrJnlLineExist;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record 81;
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.TrySendJournalLineApprovalRequests(GenJournalLine);
                               END;
                                }
      { 52      ;2   ;ActionGroup;
                      Name=CancelApprovalRequest;
                      CaptionML=[ENU=Cancel Approval Request;
                                 RUS=Отменить запрос на утверждение];
                      Image=Cancel }
      { 50      ;3   ;Action    ;
                      Name=CancelApprovalRequestJournalBatch;
                      CaptionML=[ENU=Journal Batch;
                                 RUS=Раздел журнала];
                      ToolTipML=[ENU=Cancel sending all journal lines for approval, also those that you may not see because of filters.;
                                 RUS=Отмена отправки всех строк журнала на утверждение, включая те, которые вы можете не видеть из-за фильтров.];
                      ApplicationArea=#Suite;
                      Enabled=CanCancelApprovalForJnlBatch;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.TryCancelJournalBatchApprovalRequest(Rec);
                                 SetControlAppearance;
                               END;
                                }
      { 96      ;3   ;Action    ;
                      Name=CancelApprovalRequestJournalLine;
                      CaptionML=[ENU=Selected Journal Lines;
                                 RUS=Выбранные строки журнала];
                      ToolTipML=[ENU=Cancel sending selected journal lines for approval.;
                                 RUS=Отмена отправки выбранных строк журнала на утверждение.];
                      ApplicationArea=#Suite;
                      Enabled=CanCancelApprovalForJnlLine;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record 81;
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.TryCancelJournalLineApprovalRequests(GenJournalLine);
                               END;
                                }
      { 98      ;1   ;ActionGroup;
                      CaptionML=[ENU=Workflow;
                                 RUS=Рабочий процесс] }
      { 90      ;2   ;Action    ;
                      Name=CreateApprovalWorkflow;
                      CaptionML=[ENU=Create Approval Workflow;
                                 RUS=Создать рабочий процесс утверждения];
                      ToolTipML=[ENU=Set up an approval workflow for payment journal lines, by going through a few pages that will guide you.;
                                 RUS=Настройка рабочего процесса утверждения для строк журнала платежей. Рабочий процесс состоит из нескольких страниц, которые помогают выполнить эту задачу.];
                      ApplicationArea=#Suite;
                      Enabled=NOT EnabledApprovalWorkflowsExist;
                      Image=CreateWorkflow;
                      OnAction=VAR
                                 TempApprovalWorkflowWizard@1001 : TEMPORARY Record 1804;
                               BEGIN
                                 TempApprovalWorkflowWizard."Journal Batch Name" := "Journal Batch Name";
                                 TempApprovalWorkflowWizard."Journal Template Name" := "Journal Template Name";
                                 TempApprovalWorkflowWizard."For All Batches" := FALSE;
                                 TempApprovalWorkflowWizard.INSERT;

                                 PAGE.RUNMODAL(PAGE::"Pmt. App. Workflow Setup Wzrd.",TempApprovalWorkflowWizard);
                                 COMMIT;
                               END;
                                }
      { 102     ;2   ;Action    ;
                      Name=ManageApprovalWorkflows;
                      CaptionML=[ENU=Manage Approval Workflows;
                                 RUS=Управление рабочими процессами утверждения];
                      ToolTipML=[ENU=View or edit existing approval workflows for payment journal lines.;
                                 RUS=Просмотр или изменение имеющихся рабочих процессов утверждения строк журнала платежей.];
                      ApplicationArea=#Suite;
                      Enabled=EnabledApprovalWorkflowsExist;
                      Image=WorkflowSetup;
                      OnAction=VAR
                                 WorkflowManagement@1000 : Codeunit 1501;
                               BEGIN
                                 WorkflowManagement.NavigateToWorkflows(DATABASE::"Gen. Journal Line",EventFilter);
                               END;
                                }
      { 72      ;1   ;ActionGroup;
                      CaptionML=[ENU=Approval;
                                 RUS=Утверждение] }
      { 70      ;2   ;Action    ;
                      Name=Approve;
                      CaptionML=[ENU=Approve;
                                 RUS=Утвердить];
                      ToolTipML=[ENU=Approve the requested changes.;
                                 RUS=Утверждение запрошенных изменений.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.ApproveGenJournalLineRequest(Rec);
                               END;
                                }
      { 62      ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=[ENU=Reject;
                                 RUS=Отклонить];
                      ToolTipML=[ENU=Reject the approval request.;
                                 RUS=Отклонение запроса на утверждение.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.RejectGenJournalLineRequest(Rec);
                               END;
                                }
      { 60      ;2   ;Action    ;
                      Name=Delegate;
                      CaptionML=[ENU=Delegate;
                                 RUS=Делегировать];
                      ToolTipML=[ENU=Delegate the approval to a substitute approver.;
                                 RUS=Делегирование утверждения заместителю утверждающего лица.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=Delegate;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.DelegateGenJournalLineRequest(Rec);
                               END;
                                }
      { 56      ;2   ;Action    ;
                      Name=Comment;
                      CaptionML=[ENU=Comments;
                                 RUS=Комментарии];
                      ToolTipML=[ENU=View or add comments.;
                                 RUS=Просмотр или добавление комментариев.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=ViewComments;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 GenJournalBatch@1001 : Record 232;
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 IF OpenApprovalEntriesOnJnlLineExist THEN
                                   ApprovalsMgmt.GetApprovalComment(Rec)
                                 ELSE
                                   IF OpenApprovalEntriesOnJnlBatchExist THEN
                                     IF GenJournalBatch.GET("Journal Template Name","Journal Batch Name") THEN
                                       ApprovalsMgmt.GetApprovalComment(GenJournalBatch);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 33  ;1   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Batch Name;
                           RUS=Код раздела];
                ToolTipML=[ENU=Specifies the batch name on the payment journal.;
                           RUS=Определяет название раздела журнала платежей.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentJnlBatchName;
                OnValidate=BEGIN
                             GenJnlManagement.CheckName(CurrentJnlBatchName,Rec);
                             CurrentJnlBatchNameOnAfterVali;
                           END;

                OnLookup=BEGIN
                           CurrPage.SAVERECORD;
                           GenJnlManagement.LookupName(CurrentJnlBatchName,Rec);
                           //NC NCS-1108.5 > DP
                           GenJnlBatch.GET(GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
                           //NC NOS-26 > ENK
                           {
                           CurrPage.ButtonPost.ENABLED(NOT GenJnlBatch."Check Printed");
                           }
                           IF (NOT GenJnlBatch."Check Printed") THEN
                             EnablePost := TRUE;
                           //NC NOS-26 < ENK
                           //NC NCS-1108.5 < DP

                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the posting date for the entry.;
                           RUS=Определяет дату учета операции.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 35  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on the document that provides the basis for the entry on the journal line.;
                           RUS=Определяет дату документа, на которой базируется операция в строке журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Date";
                Visible=FALSE;
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of document that the entry on the journal line is.;
                           RUS=Определяет тип документа, который имеет операция в строке журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type";
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 1470001;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Prepayment }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a document number for the journal line.;
                           RUS=Определяет номер документа для строки журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No.";
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 9   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the incoming document that this general journal line is created for.;
                           RUS=Определяет номер входящего документа, для которого создается эта строка финансового журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Incoming Document Entry No.";
                Visible=FALSE;
                OnAssistEdit=BEGIN
                               IF "Incoming Document Entry No." > 0 THEN
                                 HYPERLINK(GetIncomingDocumentURL);
                             END;
                              }

    { 83  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a document number that refers to the customer's or vendor's numbering system.;
                           RUS=Определяет номер документа, относящийся к системе нумерации клиента или поставщика.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Document No.";
                Visible=TRUE }

    { 21  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the external document number that will be exported in the payment file.;
                           RUS=Определяет номер внешнего документа, который будет экспортирован в файл платежей.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Ext. Doc. No.";
                Visible=FALSE }

    { 1101495000;2;Field  ;
                SourceExpr="Account Type" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the account number that the entry on the journal line will be posted to.;
                           RUS=Определяет номер счета, в котором будет учтена операция строки журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Account No.";
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                OnValidate=BEGIN
                             GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                             ShowShortcutDimCode(ShortcutDimCode);
                           END;

                ShowMandatory=True }

    { 1101495004;2;Field  ;
                Name=ctrl_AccName2;
                CaptionML=[ENU=Account Name;
                           RUS=Счет Название];
                SourceExpr=AccName2;
                Visible=FALSE;
                Editable=FALSE }

    { 13  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the bank account that the amount will be transferred to after it has been exported from the payment journal.;
                           RUS=Определяет банковский счет, на который будет переведена сумма, после того как она будет экспортирована из журнала платежей.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Recipient Bank Account";
                ShowMandatory=True }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the message exported to the payment file when you use the Export Payments to File function in the Payment Journal window.;
                           RUS=Определяет сообщение, экспортированное в файл при использовании функции "Экспортировать платежи в файл" в окне "Журнал платежей".];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Message to Recipient" }

    { 1210022;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Group" }

    { 1210018;2;Field     ;
                ToolTipML=[ENU=Specifies the beneficiary bank code associated with the general journal line.;
                           RUS=Определяет код банка получателя, связанный со строкой финансового журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Beneficiary Bank Code";
                Visible=TRUE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the entry. The field is automatically filled when the Account No. field is filled.;
                           RUS=Определяет описание операции. Поле заполняется автоматически при заполнении поля "Номер счета".];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 1210000;2;Field     ;
                ToolTipML=[ENU=Specifies the prepayment document number associated with the general journal line.;
                           RUS=Определяет номер документа предоплаты, связанный со строкой финансового журнала.];
                SourceExpr="Prepayment Document No.";
                Visible=FALSE }

    { 1210002;2;Field     ;
                ToolTipML=[ENU=Specifies the agreement number associated with the general journal line.;
                           RUS=Определяет номер соглашения, связанный со строкой финансового журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Agreement No.";
                OnValidate=BEGIN
                             ShowShortcutDimCode(ShortcutDimCode);
                           END;
                            }

    { 1101495005;2;Field  ;
                SourceExpr="Agreement Condition No." }

    { 53  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the salesperson or purchaser who is linked to the journal line.;
                           RUS=Определяет менеджера по продажам или покупкам, связанного со строкой журнала.];
                ApplicationArea=#Suite;
                SourceExpr="Salespers./Purch. Code";
                Visible=FALSE }

    { 95  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the campaign the journal line is linked to.;
                           RUS=Определяет номер кампании, с которой связана строка журнала.];
                SourceExpr="Campaign No.";
                Visible=FALSE }

    { 55  ;2   ;Field     ;
                AssistEdit=Yes;
                ToolTipML=[ENU=Specifies the code of the currency for the amounts on the journal line.;
                           RUS=Определяет код валюты для сумм в строке журнала.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                OnAssistEdit=BEGIN
                               ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date");
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);

                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 77  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the general posting type that will be used when you post the entry on this journal line.;
                           RUS=Определяет общий тип учета, который будет использоваться при учете операции в этой строке журнала.];
                SourceExpr="Gen. Posting Type";
                Visible=FALSE }

    { 79  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the general business posting group that will be used when you post the entry on the journal line.;
                           RUS=Определяет код общей бизнес-группы, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="Gen. Bus. Posting Group";
                Visible=FALSE }

    { 81  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the general product posting group that will be used when you post the entry on the journal line.;
                           RUS=Определяет код общей товарной группы, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="Gen. Prod. Posting Group";
                Visible=FALSE }

    { 85  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the VAT business posting group code that will be used when you post the entry on the journal line.;
                           RUS=Определяет код бизнес-группы НДС, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="VAT Bus. Posting Group";
                Visible=FALSE }

    { 87  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the VAT product posting group that will be used when you post the entry on the journal line.;
                           RUS=Определяет код товарной группы НДС, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="VAT Prod. Posting Group";
                Visible=FALSE }

    { 100 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment method that was used to make the payment that resulted in the entry.;
                           RUS=Определяет способ оплаты, который использовался для оплаты в результате операции.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Method Code";
                ShowMandatory=True }

    { 110 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment of the purchase invoice.;
                           RUS=Определяет оплату счета покупки.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Reference" }

    { 115 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor who sent the purchase invoice.;
                           RUS=Определяет поставщика, который отправил счет покупки.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Creditor No." }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total amount (including VAT) that the journal line consists of.;
                           RUS=Определяет общую сумму (включая НДС) строки журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                ShowMandatory=True }

    { 1000;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total amount (including VAT) that the journal line consists of, if it is a debit amount. The amount must be entered in the currency represented by the currency code on the line.;
                           RUS=Определяет общую сумму (с НДС), из которой состоит строка журнала, если это сумма дебета. Сумма должна вводиться в валюте, представленной кодом валюты в строке.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=FALSE }

    { 1001;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total amount (including VAT) that the journal line consists of, if it is a credit amount. The amount must be entered in the currency represented by the currency code on the line.;
                           RUS=Определяет общую сумму (с НДС), из которой состоит строка журнала, если это сумма кредита. Сумма должна вводиться в валюте, представленной кодом валюты в строке.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=FALSE }

    { 97  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of VAT included in the total amount.;
                           RUS=Определяет сумму НДС, включенную в общую сумму.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Amount";
                Visible=FALSE }

    { 101 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the difference between the calculate VAT amount and the VAT amount that you have entered manually.;
                           RUS=Определяет разницу между вычисленной суммой НДС и суммой НДС, введенной вручную.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Difference";
                Visible=FALSE }

    { 99  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of Bal. VAT included in the total amount.;
                           RUS=Определяет сумму "Бал. НДС", включенную в общую сумму.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. VAT Amount";
                Visible=FALSE }

    { 103 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the difference between the calculate VAT amount and the VAT amount that you have entered manually.;
                           RUS=Определяет разницу между вычисленной суммой НДС и суммой НДС, введенной вручную.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. VAT Difference";
                Visible=FALSE }

    { 1101495001;2;Field  ;
                SourceExpr="Bal. Account Type" }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the general ledger, customer, vendor, or bank account to which a balancing entry for the journal line will posted (for example, a cash account for cash purchases).;
                           RUS=Определяет номер главной книги, клиента, поставщика или банковского счета, где будет учитываться балансовая операция строки журнала (например, счет кассы для покупок за наличные).];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. Account No.";
                OnValidate=BEGIN
                             GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                             ShowShortcutDimCode(ShortcutDimCode);
                           END;
                            }

    { 71  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the general posting type that will be used when you post the entry on the journal line.;
                           RUS=Определяет общий тип учета, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="Bal. Gen. Posting Type";
                Visible=FALSE }

    { 73  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the general business posting group that will be used when you post the entry on the journal line.;
                           RUS=Определяет код общей бизнес-группы, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="Bal. Gen. Bus. Posting Group";
                Visible=FALSE }

    { 75  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the general product posting group that will be used when you post the entry on the journal line.;
                           RUS=Определяет код общей товарной группы, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="Bal. Gen. Prod. Posting Group";
                Visible=FALSE }

    { 89  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the VAT business posting group that will be used when you post the entry on the journal line.;
                           RUS=Определяет код бизнес-группы НДС, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="Bal. VAT Bus. Posting Group";
                Visible=FALSE }

    { 91  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the VAT product posting group that will be used when you post the entry on the journal line.;
                           RUS=Определяет код товарной группы НДС, который будет использоваться при учете операции в строке журнала.];
                SourceExpr="Bal. VAT Prod. Posting Group";
                Visible=FALSE }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 1.;
                           RUS=Определяет код ярлыка измерения 1.];
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE }

    { 51  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 2.;
                           RUS=Определяет код ярлыка измерения 2.];
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE }

    { 300 ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[3];
                CaptionClass='1,2,3';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(3),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(3,ShortcutDimCode[3]);
                             //NC NCS-1616 > USE
                             GLSetup.GET;
                             fn_CreateLinkDim(GLSetup."Shortcut Dimension 3 Code",ShortcutDimCode[3]);
                             //NC NCS-1616 < USE
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(3,ShortcutDimCode[3]);
                           //TDRANCS-1616.1>
                           GLSetup.GET;
                           fn_CreateLinkDim(GLSetup."Shortcut Dimension 3 Code",ShortcutDimCode[3]);
                           //TDRANCS-1616.1<
                         END;
                          }

    { 302 ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[4];
                CaptionClass='1,2,4';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(4),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(4,ShortcutDimCode[4]);
                             //NC NCS-1616 > USE
                             GLSetup.GET;
                             fn_CreateLinkDim(GLSetup."Shortcut Dimension 4 Code",ShortcutDimCode[4]);
                             //NC NCS-1616 < USE
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(4,ShortcutDimCode[4]);
                           //TDRANCS-1616.1>
                           GLSetup.GET;
                           fn_CreateLinkDim(GLSetup."Shortcut Dimension 4 Code",ShortcutDimCode[4]);
                           //TDRANCS-1616.1<
                         END;
                          }

    { 304 ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[5];
                CaptionClass='1,2,5';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(5),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(5,ShortcutDimCode[5]);
                             //NC NCS-1616 > USE
                             GLSetup.GET;
                             fn_CreateLinkDim(GLSetup."Shortcut Dimension 5 Code",ShortcutDimCode[5]);
                             //NC NCS-1616 < USE
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(5,ShortcutDimCode[5]);
                           //TDRANCS-1616.1>
                           GLSetup.GET;
                           fn_CreateLinkDim(GLSetup."Shortcut Dimension 5 Code",ShortcutDimCode[5]);
                           //TDRANCS-1616.1<
                         END;
                          }

    { 306 ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[6];
                CaptionClass='1,2,6';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(6),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(6,ShortcutDimCode[6]);
                             //NC NCS-1616 > USE
                             GLSetup.GET;
                             fn_CreateLinkDim(GLSetup."Shortcut Dimension 6 Code",ShortcutDimCode[6]);
                             //NC NCS-1616 < USE
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(6,ShortcutDimCode[6]);
                           //TDRANCS-1616.1>
                           GLSetup.GET;
                           fn_CreateLinkDim(GLSetup."Shortcut Dimension 6 Code",ShortcutDimCode[6]);
                           //TDRANCS-1616.1<
                         END;
                          }

    { 308 ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[7];
                CaptionClass='1,2,7';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(7),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(7,ShortcutDimCode[7]);
                             //NC NCS-1616 > USE
                             GLSetup.GET;
                             fn_CreateLinkDim(GLSetup."Shortcut Dimension 7 Code",ShortcutDimCode[7]);
                             //NC NCS-1616 < USE
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(7,ShortcutDimCode[7]);
                           //TDRANCS-1616.1>
                           GLSetup.GET;
                           fn_CreateLinkDim(GLSetup."Shortcut Dimension 7 Code",ShortcutDimCode[7]);
                           //TDRANCS-1616.1<
                         END;
                          }

    { 310 ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[8];
                CaptionClass='1,2,8';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(8),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(8,ShortcutDimCode[8]);
                             //NC NCS-1616 > USE
                             GLSetup.GET;
                             fn_CreateLinkDim(GLSetup."Shortcut Dimension 8 Code",ShortcutDimCode[8]);
                             //NC NCS-1616 < USE
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(8,ShortcutDimCode[8]);
                           //TDRANCS-1616.1>
                           GLSetup.GET;
                           fn_CreateLinkDim(GLSetup."Shortcut Dimension 8 Code",ShortcutDimCode[8]);
                           //TDRANCS-1616.1<
                         END;
                          }

    { 1101495003;2;Field  ;
                Name=<Control320>;
                CaptionML=RUS=<Control320>;
                SourceExpr=ShortcutDimCode[9];
                CaptionClass='1,2,9';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(9),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             //NC NCS-1616 > USE
                             ValidateShortcutDimCode(9,ShortcutDimCode[9]);
                             GLSetup.GET;
                             fn_CreateLinkDim(GLSetup."Shortcut Dimension 9 Code",ShortcutDimCode[9]);
                             //NC NCS-1616 < USE
                           END;

                OnLookup=BEGIN
                           //TDRANCS-1616.1>
                           LookupShortcutDimCode(9,ShortcutDimCode[9]);
                           GLSetup.GET;
                           fn_CreateLinkDim(GLSetup."Shortcut Dimension 9 Code",ShortcutDimCode[9]);
                           //TDRANCS-1616.1<
                         END;
                          }

    { 1101495002;2;Field  ;
                Name=<Control330>;
                CaptionML=RUS=<Control330>;
                SourceExpr=ShortcutDimCode[10];
                CaptionClass='1,2,10';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(10),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             //NC NCS-1616 > USE
                             ValidateShortcutDimCode(10,ShortcutDimCode[10]);
                             GLSetup.GET;
                             fn_CreateLinkDim(GLSetup."Shortcut Dimension 10 Code",ShortcutDimCode[10]);
                             //NC NCS-1616 < USE
                           END;

                OnLookup=BEGIN
                           //TDRANCS-1616.1>
                           LookupShortcutDimCode(10,ShortcutDimCode[10]);
                           GLSetup.GET;
                           fn_CreateLinkDim(GLSetup."Shortcut Dimension 10 Code",ShortcutDimCode[10]);
                           //TDRANCS-1616.1<
                         END;
                          }

    { 5   ;2   ;Field     ;
                Name=Applied (Yes/No);
                CaptionML=[ENU=Applied (Yes/No);
                           RUS=Применено (да/нет)];
                ToolTipML=[ENU=Specifies if the payment has been applied.;
                           RUS=Определяет, применен ли платеж.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=IsApplied }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of the posted document that this document or journal line will be applied to when you post, for example to register payment.;
                           RUS=Определяет тип учтенного документа, к которому будет применен этот документ или строка журнала, например при учете с целью регистрации оплаты.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Doc. Type" }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the posted document that this document or journal line will be applied to when you post, for example to register payment.;
                           RUS=Определяет номер учтенного документа, к которому будет применен этот документ или строка журнала, например при учете с целью регистрации оплаты.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Doc. No.";
                StyleExpr=StyleTxt }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entries that will be applied to by the journal line if you use the Apply Entries facility.;
                           RUS=Определяет операции, которые будут применены строкой журнала, если используется средство "Применить операции".];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to ID";
                Visible=FALSE;
                StyleExpr=StyleTxt }

    { 105 ;2   ;Field     ;
                Name=GetAppliesToDocDueDate;
                CaptionML=[ENU=Applies-to Doc. Due Date;
                           RUS=Примен. к сроку оплаты документа];
                ToolTipML=[ENU=Specifies the due date from the Applies-to Doc. on the journal line.;
                           RUS=Определяет срок оплаты из поля "Примен. к док. - номер" строки журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetAppliesToDocDueDate;
                StyleExpr=StyleTxt }

    { 67  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the payment type to be used for the entry on the payment journal line.;
                           RUS=Определяет код типа оплаты, используемый для операции в строке журнала платежей.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Payment Type" }

    { 59  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether a check has been printed for the amount on the payment journal line.;
                           RUS=Определяет, был ли распечатан платежный документ на сумму строки журнала платежей.];
                SourceExpr="Check Printed";
                Visible=FALSE }

    { 69  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the reason code that has been entered on the journal lines.;
                           RUS=Определяет код причины, введенный в строках журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Reason Code";
                Visible=FALSE }

    { 1210007;2;Field     ;
                ToolTipML=[ENU=Specifies the initial document number associated with the general journal line.;
                           RUS=Определяет номер исходного документа, связанный со строкой финансового журнала.];
                SourceExpr="Initial Document No.";
                Visible=FALSE }

    { 1210001;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Entry Type" }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a comment related to registering a payment.;
                           RUS=Определяет комментарий о регистрации оплаты.];
                SourceExpr=Comment;
                Visible=FALSE }

    { 290 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that the payment journal line was exported to a payment file.;
                           RUS=Определяет, что строка журнала платежей была экспортирована в файл платежей.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Exported to Payment File" }

    { 28  ;2   ;Field     ;
                Name=TotalExportedAmount;
                DrillDown=Yes;
                CaptionML=[ENU=Total Exported Amount;
                           RUS=Общая сумма экспорта];
                ToolTipML=[ENU=Specifies the amount for the payment journal line that has been exported to payment files that are not canceled.;
                           RUS=Определяет сумму строки журнала платежей, экспортированную в файлы платежей, которые не были отменены.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalExportedAmount;
                OnDrillDown=BEGIN
                              DrillDownExportedAmount
                            END;
                             }

    { 17  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that an error occurred when you used the Export Payments to File function in the Payment Journal window.;
                           RUS=Указывает, что при использовании функции "Экспортировать платежи в файл" в окне "Журнал платежей" произошла ошибка.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Has Payment Export Error" }

    { 1101495009;2;Field  ;
                SourceExpr="Amount (LCY)" }

    { 1101495013;2;Field  ;
                SourceExpr="Pmt. Discount Date" }

    { 1101495018;2;Field  ;
                SourceExpr="Payment Discount %" }

    { 1101495019;2;Field  ;
                SourceExpr="Modified By" }

    { 1101495020;2;Field  ;
                SourceExpr="Approved By" }

    { 24  ;1   ;Group      }

    { 80  ;2   ;Group     ;
                GroupType=FixedLayout }

    { 82  ;3   ;Group     ;
                GroupType=Group }

    { 84  ;4   ;Field     ;
                ToolTipML=[ENU=Specifies the text that is displayed for overdue payments.;
                           RUS=Определяет текст, который отображается для просроченных платежей.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OverdueWarningText;
                Style=Unfavorable;
                StyleExpr=TRUE }

    { 1903561801;2;Group  ;
                GroupType=FixedLayout }

    { 1903866901;3;Group  ;
                CaptionML=[ENU=Account Name;
                           RUS=Название счета] }

    { 29  ;4   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the account.;
                           RUS=Определяет имя счета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AccName;
                Editable=FALSE }

    { 1902759701;3;Group  ;
                CaptionML=[ENU=Bal. Account Name;
                           RUS=Назв. баланс. счета] }

    { 31  ;4   ;Field     ;
                CaptionML=[ENU=Bal. Account Name;
                           RUS=Назв. баланс. счета];
                ToolTipML=[ENU=Specifies the name of the balancing account that has been entered on the journal line.;
                           RUS=Определяет имя балансирующего счета, который указан в строке журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BalAccName;
                Editable=FALSE }

    { 1900545401;3;Group  ;
                CaptionML=[ENU=Balance;
                           RUS=Сальдо] }

    { 25  ;4   ;Field     ;
                Name=Balance;
                CaptionML=[ENU=Balance;
                           RUS=Сальдо];
                ToolTipML=[ENU=Specifies the balance that has accumulated in the payment journal on the line where the cursor is.;
                           RUS=Определяет баланс, который накоплен в журнале платежей в строке, на которой установлен курсор.];
                ApplicationArea=#All;
                SourceExpr=Balance + "Balance (LCY)" - xRec."Balance (LCY)";
                AutoFormatType=1;
                Visible=BalanceVisible;
                Editable=FALSE }

    { 1900295801;3;Group  ;
                CaptionML=[ENU=Total Balance;
                           RUS=Общее сальдо] }

    { 27  ;4   ;Field     ;
                Name=TotalBalance;
                CaptionML=[ENU=Total Balance;
                           RUS=Общее сальдо];
                ToolTipML=[ENU=Specifies the total balance in the payment journal.;
                           RUS=Определяет общий баланс по журналу платежей.];
                ApplicationArea=#All;
                SourceExpr=TotalBalance + "Balance (LCY)" - xRec."Balance (LCY)";
                AutoFormatType=1;
                Visible=TotalBalanceVisible;
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1101495021;1;Part   ;
                Name=DimensionsList;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page50310;
                PartType=Page }

    { 30  ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 7   ;1   ;Part      ;
                CaptionML=[ENU=Payment File Errors;
                           RUS=Ошибки файла платежей];
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Journal Template Name=FIELD(Journal Template Name),
                            Journal Batch Name=FIELD(Journal Batch Name),
                            Journal Line No.=FIELD(Line No.);
                PagePartID=Page1228;
                PartType=Page }

    { 88  ;1   ;Part      ;
                Name=WorkflowStatusBatch;
                CaptionML=[ENU=Batch Workflows;
                           RUS=Рабочие процессы партии];
                ApplicationArea=#Suite;
                PagePartID=Page1528;
                Visible=ShowWorkflowStatusOnBatch;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 44  ;1   ;Part      ;
                Name=WorkflowStatusLine;
                CaptionML=[ENU=Line Workflows;
                           RUS=Рабочие процессы строки];
                ApplicationArea=#Suite;
                PagePartID=Page1528;
                Visible=ShowWorkflowStatusOnLine;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Void Check %1?;RUS=Аннулировать платежный документ %1?';
      Text001@1001 : TextConst 'ENU=Void all printed checks?;RUS=Аннулировать все напечатанные платежные документы?';
      GenJnlLine@1003 : Record 81;
      GenJnlLine2@1004 : Record 81;
      GenJnlManagement@1007 : Codeunit 230;
      ReportPrint@1008 : Codeunit 228;
      DocPrint@1009 : Codeunit 229;
      CheckManagement@1010 : Codeunit 367;
      ChangeExchangeRate@1005 : Page 511;
      GLReconcile@1002 : Page 345;
      CurrentJnlBatchName@1011 : Code[10];
      AccName@1012 : Text[50];
      BalAccName@1013 : Text[50];
      Balance@1014 : Decimal;
      TotalBalance@1015 : Decimal;
      ShowBalance@1016 : Boolean;
      ShowTotalBalance@1017 : Boolean;
      HasPmtFileErr@1006 : Boolean;
      ShortcutDimCode@1018 : ARRAY [20] OF Code[20];
      BalanceVisible@19073040 : Boolean INDATASET;
      TotalBalanceVisible@19063333 : Boolean INDATASET;
      StyleTxt@1106 : Text;
      OverdueWarningText@1120 : Text;
      Text14701@1210000 : TextConst 'ENU="There is nothing to export. Only bank payment orders with %1 = New can be exported.";RUS="Нет данных для экспорта. Могут быть экспортированы только платежные поручения с %1 = Новый."';
      EventFilter@1029 : Text;
      OpenApprovalEntriesExistForCurrUser@1019 : Boolean;
      OpenApprovalEntriesOnJnlBatchExist@1024 : Boolean;
      OpenApprovalEntriesOnJnlLineExist@1023 : Boolean;
      OpenApprovalEntriesOnBatchOrCurrJnlLineExist@1022 : Boolean;
      OpenApprovalEntriesOnBatchOrAnyJnlLineExist@1021 : Boolean;
      ShowWorkflowStatusOnBatch@1020 : Boolean;
      ShowWorkflowStatusOnLine@1025 : Boolean;
      CanCancelApprovalForJnlBatch@1026 : Boolean;
      CanCancelApprovalForJnlLine@1027 : Boolean;
      EnabledApprovalWorkflowsExist@1028 : Boolean;
      ">NOS-26"@1101495000 : Integer;
      GenJnlBatch@1101495005 : Record 232;
      GLSetup@1101495004 : Record 98;
      AccName2@1101495003 : Text[50];
      BalAccName2@1101495002 : Text[50];
      GenJnlManagement2@1101495001 : Codeunit 230;
      EnablePost@1101495006 : Boolean;
      PostingDateColor@1101495008 : Text;
      DimensionManagement@1101495007 : Codeunit 408;
      GenJnlApply@1101495009 : Codeunit 225;
      NoSeriesMgt@1101495010 : Codeunit 396;
      Text002@1101495011 : TextConst 'ENU=Value %1 for %2 was setup. Please try agian.;RUS=Задано значение %1 для %2. Используйте функцию еще раз.';
      Text50001@1101495013 : TextConst 'ENU=Linked bills wasn''t define . Are you sure you want to print a check?;RUS=Не определены связанные счета. Вы уверены, что хотите распечатать чек ?';
      Text50002@1101495012 : TextConst 'ENU=Print checks for all payments?;RUS=Распечатать чеки для всех платежей?';
      Cust@1101495015 : Record 18;
      Vend@1101495014 : Record 23;

    LOCAL PROCEDURE CheckForPmtJnlErrors@5();
    VAR
      BankAccount@1000 : Record 270;
      BankExportImportSetup@1001 : Record 1200;
    BEGIN
      IF HasPmtFileErr THEN
        IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND BankAccount.GET("Bal. Account No.") THEN
          IF BankExportImportSetup.GET(BankAccount."Payment Export Format") THEN
            IF BankExportImportSetup."Check Export Codeunit" > 0 THEN
              CODEUNIT.RUN(BankExportImportSetup."Check Export Codeunit",Rec);
    END;

    LOCAL PROCEDURE UpdateBalance@1();
    BEGIN
      GenJnlManagement.CalcBalance(
        Rec,xRec,Balance,TotalBalance,ShowBalance,ShowTotalBalance);
      BalanceVisible := ShowBalance;
      TotalBalanceVisible := ShowTotalBalance;
    END;

    LOCAL PROCEDURE CurrentJnlBatchNameOnAfterVali@19002411();
    BEGIN
      CurrPage.SAVERECORD;
      GenJnlManagement.SetName(CurrentJnlBatchName,Rec);
      //NC NCS-1108.5 > DP
      GenJnlBatch.GET(GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
      //NC NOS-26 > ENK
      {
      CurrPage.ButtonPost.ENABLED(NOT GenJnlBatch."Check Printed");
      }
      IF (NOT GenJnlBatch."Check Printed") THEN
        EnablePost := TRUE;
      //NC NOS-26 < ENK
      //NC NCS-1108.5 < DP
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE GetCurrentlySelectedLines@3(VAR GenJournalLine@1000 : Record 81) : Boolean;
    BEGIN
      CurrPage.SETSELECTIONFILTER(GenJournalLine);
      EXIT(GenJournalLine.FINDSET);
    END;

    LOCAL PROCEDURE SetControlAppearance@4();
    VAR
      GenJournalBatch@1000 : Record 232;
      ApprovalsMgmt@1002 : Codeunit 1535;
    BEGIN
      IF GenJournalBatch.GET("Journal Template Name","Journal Batch Name") THEN;
      OpenApprovalEntriesExistForCurrUser :=
        ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(GenJournalBatch.RECORDID) OR
        ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);

      OpenApprovalEntriesOnJnlBatchExist := ApprovalsMgmt.HasOpenApprovalEntries(GenJournalBatch.RECORDID);
      OpenApprovalEntriesOnJnlLineExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
      OpenApprovalEntriesOnBatchOrCurrJnlLineExist := OpenApprovalEntriesOnJnlBatchExist OR OpenApprovalEntriesOnJnlLineExist;

      OpenApprovalEntriesOnBatchOrAnyJnlLineExist :=
        OpenApprovalEntriesOnJnlBatchExist OR
        ApprovalsMgmt.HasAnyOpenJournalLineApprovalEntries("Journal Template Name","Journal Batch Name");

      CanCancelApprovalForJnlBatch := ApprovalsMgmt.CanCancelApprovalForRecord(GenJournalBatch.RECORDID);
      CanCancelApprovalForJnlLine := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);
    END;

    LOCAL PROCEDURE ">>>NOS-26"@1101495002();
    BEGIN
    END;

    PROCEDURE ApproveSelected@1170000000();
    VAR
      GenJournalLine@1170000000 : Record 81;
    BEGIN
      // NC NCS-1880 ORM
      GenJournalLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(GenJournalLine);
      GenJnlManagement.ApproveGenJnlLines(GenJournalLine);
    END;

    PROCEDURE ReopenSelected@1170000001();
    VAR
      GenJournalLine@1170000000 : Record 81;
      ReopenedQty@1170000001 : Integer;
    BEGIN
      // NC NCS-1880 ORM
      GenJournalLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(GenJournalLine);
      GenJnlManagement.ReopenGenJnlLines(GenJournalLine);
    END;

    BEGIN
    {
      NC TR195 EB Перенос функции копрование ФКО
      NC OAM003 DP Добавление формы с измерениями, расчет балансирующей суммы
      NC MLN001 DP Выведено поле "Agreement Condition No.","Amount Type"
      NC NCS-1108 DP Выведено поле "Check Printed", изменен вызов функции "Применить Операции"
      TDRANCS-1101>
        modified OnFormat for "Posting Date"
      NC NCS-1108.3 DP Проверка установленного применения к счетам и значения Источник Платеж. Документа = Компьютерный
      NC NCS-1108.4 DP Применение только для ненапечатанных чеков
      NC NCS-1108.5 DP Функция "Учет" в форме доступна только для разделов без признака "Чек Напечатан"
      NC NCS-1108.6 DP Проверка типов документов и знака сумм перед печатью чека
      -------------------------------
      BLD01 Создан билд, включающий модификации NCTR195,OAM03,MLN01,NCS-1108,NCS-1101,NC-1108.6
      NC NCS-1616 USE Изменены триггеры OnValidate у Shortcuts DImension
      NC NCS-1602.7 USE Добавлен новый MenuItem (Pr&int All checks),изменен триггер <Control1101495004> - OnPush()
      TDRANCS-1616.1
        Modified OnLookUp for Shortcuts DImension
      NC NCS-1745 DP Изменены триггеры OnPush() контролов Control1101495004, Control64
      NC NCS-1880 ORM
        Добавлены пункты меню Functions - Approve Document, Functions - Reopen Document
        Добавлены поля "Modified By", "Approved By"
      NC S1880.1 PCH описание счета
      NCS-2356 DP Added field "Shortcut Dimension 9 Code","Shortcut Dimension 10 Code"
                  Changed dimension of array ShortcutDimCode 8->10
      -----
      NC NOS-26 ENK
          <Action1101495008> - OnAction() Need to migrate dataport 50042 "Gen.Journal Line Import"
    }
    END.
  }
}

