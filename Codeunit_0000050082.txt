OBJECT Codeunit 50082 Transfer FI Operation
{
  OBJECT-PROPERTIES
  {
    Date=26.12.16;
    Time=13:09:28;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=50063;
    OnRun=VAR
            TillDateFormula@1101495000 : DateFormula;
            lAdoConnection@1101495006 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Connection";
            AdoFunc@1101495005 : Codeunit 50024;
            ConectionString@1101495004 : Text[1024];
            txtScript@1101495003 : Text[1024];
            isRepeat@1101495001 : Boolean;
            BeginEntryNo@1101495002 : Integer;
            LastEntryNo@1101495007 : Integer;
          BEGIN
            // Проверки обеспечиающие контроль правильного программного запуска
            ConsolidationSetup.GET;
            MovingDataSetup.GET;
            IF "Type Processing" <> "Type Processing"::"Cons. Source" THEN
              ERROR(Text001);
            ConsSource.CHANGECOMPANY("Company No.");
            ConsSource.GET(Processor);

            IF ConsSource."Import Format" <> ConsSource."Import Format"::FIOperation THEN
              ERROR(Text001);
            Company.GET("Company No.");

            Buffer.SETCURRENTKEY("Id Legal Entity","Id External System",Status,"Entry No.");
            Buffer.SETRANGE("Id Legal Entity",Company."Legal Entity Id");
            Buffer.SETRANGE("Id External System",ConsSource."External System");
            Buffer.SETRANGE(Status,Buffer.Status::New);

            isOK := NOT Buffer.ISEMPTY;

            IF ("Processing Mode" = "Processing Mode"::Test) OR
               (NOT isOK) THEN
              EXIT;

            IF "Company No." <> COMPANYNAME THEN
              ERROR(Text002,ConsSource.Code);

            IF GUIALLOWED THEN BEGIN
              Indicator.OPEN(Text55001 +
                             Text55002 +
                             Text55003 +
                             Text55004);
              iCount := Buffer.COUNT;
              i := 0;
              Indicator.UPDATE(2, iCount);
            END;

            CountCanceled := 0;
            CountProcessed := 0;

            IF "Cons. Register" = 0 THEN BEGIN
              ConsRegister.RESET;
              ConsRegister.SETRANGE("Cons. Source Code", Processor);
              IF ConsRegister.FINDLAST THEN
                "Cons. Register" := ConsRegister."No." + 1
              ELSE
                "Cons. Register" := 1;

              ConsRegister.INIT;
            END ELSE
              ConsRegister.GET("Cons. Register",Processor);

            ConsRegister."No." := "Cons. Register";
            ConsRegister."Cons. Source Code" := Processor;
            ConsRegister."Consolidation Date" := TODAY;
            ConsRegister."Consolidation Time" := TIME;
            ConsRegister."User ID" := USERID;
            ConsRegister."Id Legal Entity" := Company."Legal Entity Id";
            ConsRegister."FI Journal Template" := ConsolidationSetup."FI Jnl. Template";
            ConsRegister."FI Journal Batch" := ConsSource."FI Journal Batch";
            ConsRegister."FI Correction Journal Template" :=  ConsolidationSetup."FI Jnl. Template";
            ConsRegister."FI Correction Journal Batch" := ConsSource."Correction FI Journal Batch";
            ConsRegister."FI Cancel Journal Template" := ConsolidationSetup."FI Jnl. Template";
            ConsRegister."FI Cancel Journal Batch" := ConsSource."Cancel FI Journal Batch";

            IF NOT   ConsRegister.INSERT(TRUE) THEN
              ConsRegister.MODIFY(TRUE);

            COMMIT;

            //IF ConsSource."AE PreProcessing" <> '' THEN BEGIN
            //  ConectionString := AdoFunc.ConnectByWindowAutentification(MovingDataSetup."Windows Autentification");
            //  AdoFunc.AdoOpen(lAdoConnection,ConectionString);
            //  txtScript := STRSUBSTNO('EXECUTE [dbo].%1 ''%2'',''%3'',''%4''',ConsSource."AE PreProcessing",
            //                                                                                Company."Legal Entity Id",
            //                                                                                ConsSource.Code,
            //                                                                                ConsRegister."No.");
            //  lAdoConnection.Execute(txtScript);
            //  AdoFunc.AdoClose(lAdoConnection);
            //END;

            IF NOT Buffer.FIND('-') THEN BEGIN
              isOK := FALSE;
              EXIT;
            END;

            REPEAT
              IF GUIALLOWED THEN BEGIN
                i +=1 ;
                Indicator.UPDATE(1, ROUND((i/iCount)*10000, 1));
                Indicator.UPDATE(3, i);
              END;

              //isRepeat := FALSE;
              //REPEAT
              //  isOK := TRUE;
              //  RecRefBuffer.GETTABLE(Buffer);
              //  Rec."Record ID" := RecRefBuffer.RECORDID;
              //  IF NOT CODEUNIT.RUN(CODEUNIT::"Table Check Blocked",Rec) THEN BEGIN
              //
              //    IF NOT isRepeat AND Buffer.GET(Buffer."Entry No.") THEN BEGIN
              //      SLEEP(MovingDataSetup."Timeout with Blocking (m.sec)");
              //      isRepeat := TRUE;
              //    END ELSE BEGIN
              //      isRepeat := FALSE;
              //      EXIT;
              //    END;
              //  END ELSE
              //    isRepeat := FALSE;
              //UNTIL NOT isRepeat;

              Buffer.GET(Buffer."Entry No.");
              RecRefBuffer.GETTABLE(Buffer);
              Rec."Record ID" := RecRefBuffer.RECORDID;
              IF NOT CODEUNIT.RUN(CODEUNIT::"Transf. One FI Operation",Rec) THEN BEGIN
                Buffer2.GET(Buffer."Entry No.");
                Buffer2."Error in Import" := TRUE;
                Buffer2.MODIFY(TRUE);

                ErrorJournal.AddLastError1("Company No.",ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Warning,
                                           Processor,"Cons. Register",
                                           Buffer2.TABLECAPTION,RecRefBuffer,"Line No.");

              END;

              iProc += 1;
              IF (ConsRegister."From Posting Date" = 0D) OR
                 (Buffer."Deal Date" < ConsRegister."From Posting Date") THEN
                ConsRegister."From Posting Date" := Buffer."Deal Date";
              IF (ConsRegister."To Posting Date" = 0D) OR
                 (Buffer."Deal Date" > ConsRegister."To Posting Date") THEN
                ConsRegister."To Posting Date" := Buffer."Deal Date";

              IF LastEntryNo < Buffer."Entry No." THEN
                LastEntryNo := Buffer."Entry No.";
              IF BeginEntryNo > Buffer."Entry No." THEN
                BeginEntryNo := Buffer."Entry No.";

              Buffer2.GET(Buffer."Entry No.");
              IF Buffer2."Export Consolidation Register" = 0 THEN
                CountCanceled += 1
              ELSE
                CountProcessed += 1;
              COMMIT;
            UNTIL Buffer.NEXT = 0;

            ConsRegister."From Entry No." := BeginEntryNo;
            ConsRegister."To Entry No." := LastEntryNo;
            ConsRegister."Total Entries In Session" := iProc;
            ConsRegister."Total Success Loaded In Sess" := CountProcessed;
            ConsRegister."Total Unloaded In Session" := CountCanceled;
            ConsRegister."Total Loaded without Jnl" := 0;
            ConsRegister."Consolidation Date" := TODAY;
            ConsRegister."Consolidation Time" := TIME;
            ConsRegister.MODIFY(TRUE);

            IF GUIALLOWED THEN
              Indicator.CLOSE;
          END;

  }
  CODE
  {
    VAR
      TableCheckBlocked@1000000007 : Codeunit 50010;
      ErrorJournal@1101495000 : Record 50023;
      TextError@1101495001 : Text[250];
      Text001@1101495002 : TextConst 'ENU=Incorrect startup parameters.;RUS=Неправильные параметры запуска.';
      ConsSource@1101495003 : Record 50001;
      Buffer@1101495004 : Record 50221;
      Buffer2@1000000006 : Record 50221;
      Company@1101495005 : Record 2000000006;
      RecRefBuffer@1101495006 : RecordRef;
      Text002@1101495007 : TextConst 'ENU=Processing ischtochnika consolidation %1 must run in your company;RUS=Обработка исчточника консолидации %1 должна запускаться в своей фирме';
      Text003@1000000008 : TextConst 'ENU=You can not start the download. As legal persons loading.;RUS=Нельзя запустить загрузку. В юрлице идет загрузка.';
      ConsRegister@1101495009 : Record 50005;
      Indicator@1000000013 : Dialog;
      iCount@1101495011 : Integer;
      i@1101495012 : Integer;
      TextEDB01@1000000011 : TextConst 'ENU=In the process of implementation %1 unclassified error occurred. %2 Processing stopped.;RUS=В процессе выполнения %1 возникла ошибка. %2 Обработка прекращена.';
      Text55001@1000000000 : TextConst 'ENU=Transformation entries from Buffer Process... \;RUS=Трансформация данных из буфера обработки... \';
      Text55002@1000000001 : TextConst 'ENU=Total Entries      #2##### \;RUS=Общее число строк  #2##### \';
      Text55003@1000000002 : TextConst 'ENU=Processed          #3##### \;RUS=Обработано         #3##### \';
      Text55004@1000000003 : TextConst 'ENU=Progress:          @1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;RUS=Процент выполнения:@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      CountCanceled@1000000004 : Integer;
      CountProcessed@1000000005 : Integer;
      CountWithoutJnl@1000000012 : Integer;
      MovingDataSetup@1000000010 : Record 50064;
      ConsolidationSetup@1101495013 : Record 50000;
      iProc@1101495014 : Integer;
      Log@1101495015 : Codeunit 50014;

    PROCEDURE LoadFromPredBuffer@1101495000(ConsSource@1101495000 : Record 50001);
    VAR
      JobProcStatusTemp@1101495001 : TEMPORARY Record 50063;
      JobProc@1000000000 : Record 50062;
      JobProcStatus@1000000001 : Record 50063;
    BEGIN

      ConsSource.TESTFIELD("Import Format",ConsSource."Import Format"::FIOperation);
      ConsSource.TESTFIELD("Use External File",FALSE);


      JobProc.RESET;
      JobProc.INIT;
      JobProc.VALIDATE("Company No.",COMPANYNAME);
      JobProc.VALIDATE(Blocked,FALSE);
      JobProc.VALIDATE("Type Processing",JobProc."Type Processing"::"Cons. Source");
      JobProc.VALIDATE(Processor,ConsSource.Code);
      JobProc.VALIDATE("Import Format",JobProc."Import Format"::EventUpload);
      JobProc.VALIDATE("External Source",ConsSource."External System");
      JobProc."Auto Start" := FALSE;
      JobProc."Name Service NAS" := '';
      JobProc."Name Server NAS" := '';
      JobProc."Status Monitor" := JobProc."Status Monitor"::Transformation;
      JobProc."Data Check" := TRUE;
      JobProc."Check Uniqueness" := TRUE;

      // Проверка на загрузку операций в юрлице
      IF NOT JobProcStatus.IsCheckUniq(JobProc,STRSUBSTNO('%1|%2',JobProcStatus.Status::Scheduled,
                                                                  JobProcStatus.Status::Working)) THEN
        ERROR(Text003,ConsSource."Company Name");

      JobProcStatus.AddJob(JobProc);
      JobProcStatus.Status := JobProcStatus.Status::Scheduled;
      JobProcStatus."Transaction No." := JobProcStatus.GetNewTransactionNo;
      JobProcStatus."Processing Mode" := JobProcStatusTemp."Processing Mode"::Load;
      JobProcStatus.MODIFY;
      COMMIT;

      IF NOT CODEUNIT.RUN(CODEUNIT::"Run Job Process",JobProcStatus) THEN BEGIN
        IF GUIALLOWED THEN
          MESSAGE(GETLASTERRORTEXT);
      END;

      JobProcStatus.GET(JobProcStatus."Line No.");
    END;

    BEGIN
    {
      NCS2360 AAP Created
    }
    END.
  }
}

