OBJECT Codeunit 50000 Consolidation Management
{
  OBJECT-PROPERTIES
  {
    Date=27.01.17;
    Time=17:07:00;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1210001 : Record 98;
      ConsolidationSetup@1210000 : Record 50000;
      Text000@1210003 : TextConst 'ENU=Gen. Journal Lines already exists in %1 %2 %3 %4 %5. Delete them?;RUS=В %1 %2 %3 %4 %5 существуют строки, удалить их?';
      Text001@1210002 : TextConst 'ENU=Consolidation canceled.;RUS=Консолидация прервана.';
      Text00001@1210004 : TextConst 'RUS=Значение измерения внутренний контрагент не указано';
      ErrMessage@1210005 : Text[250];
      ErrDoc@1210006 : Text[20];
      ErrOper@1210007 : Text[50];
      Text00002@1210008 : TextConst 'RUS=Ошибка. Каждая операция должна быть представлена двумя полупроводками';
      SpecCorrDimFilter@1000000000 : Code[1000];
      CurrentCompany@1000000001 : Record 2000000006;
      CloseOperation@1000000002 : Boolean;
      Text55001@1000000003 : TextConst 'RUS=Вы должны определить измерение %1 в аналитическом отчете %2 в компании %3.';
      TMPGLEntryException@1210009 : TEMPORARY Record 17;
      LocGLAcc@1210010 : Record 15;
      Text002@1210011 : TextConst 'ENU="Company %1 has no new General Ledger Entries ";RUS="В Компании %1 нет новых Фин. Операций "';
      Text003@1210012 : TextConst 'ENU="Consolidation from Company ";RUS="Консолидация данных из компании "';
      Text004@1210013 : TextConst 'ENU=Data has not loaded from Source. Error was saved in Consolidation Register;RUS=Данные НЕ выгружены из компании источника. Возникшие ошибки сохранены в регистре ошибок';
      Text005@1210014 : TextConst 'ENU=Checking for Errors ...;RUS=Проверка наличия ошибок...';
      Text006@1210015 : TextConst 'ENU=Operation for Source %1 was succsefully imported;RUS=Данные по источнику %1 импортированы успешно';
      Text007@1210016 : TextConst 'ENU="Company %1 has no new Entries ";RUS="В Компании %1 нет новых Операций "';
      Text008@1210017 : TextConst 'ENU="Operations for Source %1 was imported.\Operation Reloaded: %2\Operation Loaded: %3\Error Operation: %4 ";RUS=Данные по источнику %1 импортированы.\Перезагружено операций: %2\Загружено новых операций: %3\Выявлено ошибок: %4';
      Text009@1210018 : TextConst 'ENU=%1 Value should be differ from 1;RUS=Значение %1 должно отличаться от 1';
      CurrGLAcc@1210019 : Record 15;
      LocGLSetup@1210021 : Record 98;
      TranslationNeeded@1210020 : Boolean;
      TempDebitLedgEntryDim@1000000004 : TEMPORARY Record 355;
      TempCreditLedgEntryDim@1000000005 : TEMPORARY Record 355;
      Text010@1000000006 : TextConst 'ENU="There is no mapping for G/L Account ";RUS="Для счета "';
      Text011@1000000007 : TextConst 'ENU=.;RUS=" не задан соответствующий счет в МСФО"';
      Text012@1000000008 : TextConst 'ENU="There is no mapping for value ";RUS="Для значения "';
      Text013@1000000009 : TextConst 'ENU=" of Dimension ";RUS=" измерения "';
      Text014@1000000010 : TextConst 'ENU=.;RUS=" не задано преобразование."';
      Log@1101495000 : Codeunit 50014;
      LastGenJnlTemplate@1101495002 : Code[20];
      LastGenJnlBatch@1101495001 : Code[20];
      LastLineNo@1101495003 : Integer;
      Text015@1000000011 : TextConst 'ENU='''';RUS=''''';
      IsGlobalError@1000000012 : Boolean;
      DTMappLineNo@1000000013 : Integer;
      CTMappLineNo@1000000014 : Integer;
      Text016@1000000015 : TextConst 'ENU="G/L Account ";RUS="Счет "';
      Text017@1000000016 : TextConst 'ENU=" does not exist in the chart of accounts.";RUS=" отсутствует в плане счетов МСФО."';
      Text018@1000000017 : TextConst 'ENU="For Entry on G/L Account ";RUS="Для операции по счету "';
      Text019@1000000018 : TextConst 'ENU=" there is no required dimension ";RUS=" нет обязательного измерения "';
      Text020@1000000019 : TextConst 'ENU="For Entry on G/L Account ";RUS="На операции по счету "';
      Text021@1000000020 : TextConst 'ENU=" with value ";RUS=" со значением "';
      Text022@1000000021 : TextConst 'ENU="Dimension ";RUS="Для измерения "';
      Text023@1000000022 : TextConst 'ENU=" value ";RUS=" нет значения "';
      Text024@1000000023 : TextConst 'ENU=" does no exist in NAV.";RUS=" в справочнике NAV."';
      Text025@1000000024 : TextConst 'ENU="Dimension ";RUS="Измерение "';
      Text026@1000000025 : TextConst 'RUS=" значение "';
      Text027@1000000026 : TextConst 'ENU=" is blocked in NAV.";RUS=" блокировано в справочнике NAV."';
      Text028@1000000027 : TextConst 'ENU=" Dimension ";RUS=" Измерение "';
      Text029@1000000028 : TextConst 'ENU=" is not allowed for posting.";RUS=" не разрешено для учета."';
      ErrorJournal@1000000029 : Record 50023;
      Text030@1000000030 : TextConst 'ENU=" in correspondence with account ";RUS=" в корреспонденции со счетом "';
      FiPos@1000000031 : Integer;
      Text031@1000000032 : TextConst 'RUS=Одно из измерений в источнике консолидации %1 должно быть %2.';
      SourceCodeSetup@1101495004 : Record 242;
      Text032@1101495005 : TextConst 'ENU=" Value Type must be Standart.";RUS=" Тип Значения должен быть Стандартный."';
      Text033@1000000033 : TextConst 'ENU="For G/L Account ";RUS="Для счета "';
      Text034@1000000034 : TextConst 'ENU="For value ";RUS="Для значения "';
      Text035@1000000035 : TextConst 'ENU=Account Type for G/L Account %1 must be Posting.;RUS=Тип Счета %1 должен быть Учетный.';
      Text036@1000000036 : TextConst 'ENU=There are no Currency Rate %1 at Date %2.;RUS=Нет курса валюты %1 на дату %2.';
      Text037@1000000037 : TextConst 'ENU=%1 must not be 0. Currency %2, Date %3.;RUS=%1 не должно быть 0. Валюта %2, Дата %3.';
      "NCV > MDM02"@1000000038 : Integer;
      JobProcStatusLineNo@1000000040 : Integer;
      "NCV < MDM02"@1000000039 : Integer;
      Text038@1000000041 : TextConst 'ENU=Not Valid definition of %1 %2 %3.;RUS=Недопустимое задание фильтра в %1 %2 %3.';
      Text039@1000000042 : TextConst 'ENU=Corresponding off-BS with BS Accounts. Dt Account %1, Ct Account %2.;RUS=Корреспонденция Балансового Счета с Забалансовым. Дт Счет %1, Кт Счет %2.';
      MovingDataSetup@1000000043 : Record 50064;
      Text040@1000000044 : TextConst 'ENU=External Currency Code %1 does not exist in NAV.;RUS=Внешний Код Валюта %1 отсутствует в справочнике NAV.';
      Text041@1000000045 : TextConst 'ENU=G/L Account %1 is blocked in NAV.;RUS=Фин. Счет %1 блокирован в NAV.';
      Text042@1000000046 : TextConst 'ENU=Dimension %1 is blocked in NAV.;RUS=Измерение %1 блокировано в NAV.';
      Text043@1000000047 : TextConst 'ENU=Dimension %1 does not exist in NAV.;RUS=Измерение %1 не существует в NAV.';
      OffsetExceptionsDT@1000000048 : Boolean;
      OffsetExceptionsCT@1000000049 : Boolean;
      Text044@1000000050 : TextConst 'RUS=На проводке для счета источника %1 по карточке Клиента либо Поставщика отсутствует значение аналитики %2';
      Text045@1000000051 : TextConst 'RUS=Прямой Учет должен быть Да для счета %1';
      Text046@1000000052 : TextConst 'RUS=Для счета источника %1 не задана настройка учетной группы для учета операций по карточке Клиента/Поставщика/Банковского Счета';
      Text047@1000000053 : TextConst 'RUS=На проводке для счета источника %1 по карточке Банковского Счета отсутствует значение аналитики %2';
      Text048@1000000054 : TextConst 'RUS=Для счета источника %1 не найдена карточка Клиента %2';
      Text049@1000000055 : TextConst 'RUS=По счету источника %1 учет по договорам обязателен для клиента %2';
      Text050@1000000056 : TextConst 'RUS=Договор %1 клиента %2 должен быть активен.';
      Text051@1000000057 : TextConst 'RUS=Договор %1 поставщика %2 должен быть активен.';
      Text052@1000000058 : TextConst 'RUS=Банковская карточка %1 не существует.';
      OffsetFromDate@1101495014 : Date;
      OffsetToDate@1101495015 : Date;
      DebitBankAcc@1000000059 : Boolean;
      CreditBankAcc@1000000060 : Boolean;
      IsSpeshialControl@1000000061 : Boolean;
      Text053@1101495006 : TextConst 'RUS=Карточка сделки %1 не существует';
      Text054@1101495007 : TextConst 'RUS=Для клиента %1 нет договора %2';
      Text055@1101495008 : TextConst 'RUS=Для поставщика %1 нет договора %2';
      Text056@1101495009 : TextConst 'RUS=Для счета источника %1 не найдена карточка Поставщика %2';
      Text057@1101495010 : TextConst 'RUS=Валюта в карточке банковского счета %1 должна быть %2';
      Text058@1101495011 : TextConst 'RUS=Карточка сделки %1 для поставщика %2 не существует';
      Text059@1101495012 : TextConst 'RUS=Карточка сделки %1 для клиента %2 не существует';
      Text060@1101495013 : TextConst 'RUS=По счету источника %1 учет по договорам обязателен для поставщика %2';
      IsDebitPositionAmount@1101495017 : Boolean;
      IsCreditPositionAmount@1101495016 : Boolean;
      TMPDimNotToCopy@1101495018 : TEMPORARY Record 348;
      IsSpeshialControl2@1101495020 : Boolean;
      DebitGLAccount@1101495021 : Record 15;
      CreditGLAccount@1101495022 : Record 15;
      IsDebitConvertAmount@1101495024 : Boolean;
      IsCreditConvertAmount@1101495023 : Boolean;
      CurrCompany@1101495026 : Record 2000000006;
      Text070@1101495025 : TextConst 'ENU="For %1 and Posting Group %2 ";RUS="На операции по %1у и Учетной Группе %2 "';
      NoVendErr@1101495027 : Text[250];
      Text071@1101495028 : TextConst 'ENU=Add record in the buffer vendors.;RUS="Создана запись в буфере поставщиков. "';
      Text072@1101495029 : TextConst 'ENU=Writing in a buffer vendor caused the error.;RUS=Создание записи в буфере поставщиков вызвало ошибку.';
      VendorForCustomerTemp@1101495030 : TEMPORARY Record 23;
      Text061@1101495032 : TextConst 'ENU=" should be equal to Dimension Value ";RUS=" должно быть равно значению измерения "';
      TextEDTC27@1101495031 : TextConst 'ENU=In %1 value %2 should be ''%3''.;RUS=В %1 величина %2 должна быть ''%3''.';
      gConsBuffer@1101495019 : Record 50008;

    PROCEDURE CheckGLAccount@1210002(ConsSourceNo@1210002 : Code[20];EntryNo@1210003 : Integer;VAR GLAccountNo@1210000 : Code[20];VAR LedgerEntryDimTMP@1210004 : TEMPORARY Record 355);
    VAR
      GLAccount@1210001 : Record 15;
    BEGIN
      //NC PIF001.2 > DP
      //CreateGLAccountDim(ConsSourceNo, EntryNo, GLAccountNo, LedgerEntryDimTMP);
      //NC PIF001.2 < DP
      //NC PIF001 > DP
      IF NOT GLAccount.GET(GLAccountNo) THEN BEGIN
        GLAccount.INIT;
        GLAccount."No." := GLAccountNo;
        GLAccount."Account Type" := GLAccount."Account Type"::Posting;
        GLAccount."Consol. Translation Method" := GLAccount."Consol. Translation Method"::"Historical Rate";
        GLAccount.INSERT(TRUE);
      END;
      //NC PIF001 < DP
    END;

    PROCEDURE CheckDimensions@1210003(DimCode@1210001 : Code[20];DimValueCode@1210000 : Code[20];DimValueName@1210002 : Text[50];IntContrDimCode@1210005 : Code[20];DocNo@1000000000 : Code[20];DocDate@1000000001 : Date;EntryNo@1000000002 : Integer;ConsSourceCode@1000000004 : Code[20];ConsRegNo@1000000005 : Integer;GLBuffer@1000000007 : Record 50008;MappingCode@1000000010 : Code[20]);
    VAR
      DimensionValue@1210003 : Record 349;
      Dimension@1210004 : Record 348;
      tmp@1000000003 : Integer;
      ConsSource@1000000006 : Record 50001;
      NeedMapping@1000000008 : Boolean;
      DimMappingSel@1000000009 : Record 50031;
      l_cuDimMgt@1000000011 : Codeunit 408;
    BEGIN
      //NC PIF001 > DP
      IF DimValueCode = '' THEN
        EXIT;
      IF Dimension.GET(DimCode) THEN BEGIN
        //NC MDTC05.1 > MP
        IF Dimension.Blocked THEN BEGIN
          IsGlobalError := TRUE;
          ErrorJournal.AddErrorBuferDim(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsSourceCode,ConsRegNo,'EDTC16',
                                     STRSUBSTNO(Text042,DimCode),COMPANYNAME,GLBuffer,Dimension,JobProcStatusLineNo);
        END;
        //NC MDTC05.1 < MP
        IF NOT DimensionValue.GET(DimCode, DimValueCode) THEN BEGIN
          //NC MDTC05 > MP
          {
          DimensionValue.INIT;
          DimensionValue."Dimension Code" := DimCode;
          DimensionValue.Code := DimValueCode;
          //NC PIF001 > DP
          IF DimValueName='' THEN
            DimensionValue.Name := DimValueCode
          ELSE
          //NC PIF001 < DP
          DimensionValue.Name := DimValueName;
          //DimensionValue."Int Contragent Dim Value" := IntContrDimCode;
          //DimensionValue."Company Name" := COMPANYNAME;
          DimensionValue.INSERT(TRUE);
          }
          //NC MDM04 > MP
          {
          ErrOper := FORMAT(EntryNo);// + ' / ' + FORMAT(GLEntry."Posting Date");
          ErrDoc := DocNo;
          ErrMessage := Text022 + FORMAT(DimCode) + Text023 + FORMAT(DimValueCode) + Text024;
          IsGlobalError := TRUE;
          tmp :=
              CreateErrorLogEntry(ConsSourceCode, ConsRegNo, 0, 0,
              ErrOper,DocDate,DimCode,ErrDoc,ErrMessage,DimValueCode);
          }
          //NC MDTM02.2 > PCH
          //NC MDTM11 > MP
          {
          ConsSource.GET(ConsSourceCode);
          NeedMapping := DimMappingSel.GET(ConsSource."Mapping Code",DimCode);
          }
          NeedMapping := DimMappingSel.GET(MappingCode,DimCode);
          //NC MDTM11 < MP
          //NC MDTC05.1 > MP
          //IF (NOT Dimension."Need Mapping") OR (Dimension."Need Mapping" AND Dimension."Save when Mapping") THEN BEGIN
          IF (NOT NeedMapping) OR (NeedMapping AND DimMappingSel."Save when Mapping") THEN BEGIN
          //NC MDTC05.1 < MP
          //NC MDTM02.2 < PCH
          IsGlobalError := TRUE;
          ErrMessage := Text022 + FORMAT(DimCode) + Text023 + FORMAT(DimValueCode) + Text024;
          ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsSourceCode,ConsRegNo,'EDTC06',
                                     ErrMessage,COMPANYNAME,GLBuffer,JobProcStatusLineNo);
          //NC MDTC05.1 > MP
          END;
          //NC MDTC05.1 < MP
          //NC MDM04 < MP
          //NC MDTC05 < MP
        END ELSE BEGIN
          //NC MDTC06 > MP
          IF DimensionValue.Blocked THEN BEGIN
            //NC MDM04 > MP
            {
            ErrOper := FORMAT(EntryNo);// + ' / ' + FORMAT(GLEntry."Posting Date");
            ErrDoc := DocNo;
            ErrMessage := Text025 + FORMAT(DimCode) + Text026 + FORMAT(DimValueCode) + Text027;
            IsGlobalError := TRUE;
            tmp :=
                CreateErrorLogEntry(ConsSourceCode, ConsRegNo, 0, 0,
                ErrOper,DocDate,DimCode,ErrDoc,ErrMessage,DimValueCode);
            }
            //TDRANCS-1071> Commented
            {
            IsGlobalError := TRUE;
            ErrMessage := Text025 + FORMAT(DimCode) + Text026 + FORMAT(DimValueCode) + Text027;
            ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsSourceCode,ConsRegNo,'EDTC07',
                                       ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
            }
            IF NOT l_cuDimMgt.fn_CheckDimValue(DimCode,DimValueCode,DocDate) THEN BEGIN
              IsGlobalError := TRUE;
              ErrMessage := l_cuDimMgt.GetDimErr;
              ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsSourceCode,ConsRegNo,'EDTC07',
                                         ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
            END;
            //TDRANCS-1071<
            //NC MDM04 < MP
          END;
          IF DimensionValue."Dimension Value Type" <> DimensionValue."Dimension Value Type"::Standard THEN BEGIN
            IsGlobalError := TRUE;
            ErrMessage := Text034 + FORMAT(DimValueCode) + Text013 + FORMAT(DimCode) + Text032;
            ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsSourceCode,ConsRegNo,'EDTC09',
                                       ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
          END;
          //NC MDTC06 < MP

        END;
      END ELSE BEGIN
        //Добавить ошибку в лог
      END;
      //NC PIF001 < DP
    END;

    PROCEDURE TransformIntContragent@1210004(DimCode@1210001 : Code[20];DimValueCode@1210000 : Code[20];VAR IntContr_DimValueCode@1210003 : Code[20]);
    VAR
      DimensionValue@1210002 : Record 349;
      DimensionValue1@1210004 : Record 349;
      ConsolidationSetup@1210005 : Record 50000;
    BEGIN
      //NC PIF001 > DP
      IntContr_DimValueCode := '';
      IF DimensionValue.GET(DimCode, DimValueCode) THEN
        IntContr_DimValueCode := DimensionValue."Int Contragent Dim Value";
      //NC PIF001 < DP
    END;

    PROCEDURE CreateDimBuffer@1000000018(VAR LedgerEntryDimTMP@1000000000 : TEMPORARY Record 355;TableNo@1000000001 : Integer;EntryNo@1000000002 : Integer;DimCode@1000000003 : Code[20];DimValue@1000000004 : Code[20];DimName@1210000 : Text[50];ConsRegNo@1000000006 : Integer;DocNo@1000000007 : Code[20];DocDate@1000000008 : Date;ConsSourceCode@1000000009 : Code[20];GLBuff@1000000010 : Record 50008;UseCheck@1000000011 : Boolean;MappingCode@1000000012 : Code[20]);
    VAR
      LinkedDim@1000000005 : Record 50016;
      Deal@1101495000 : Record 50037;
    BEGIN
      //NC PIF001 > DP
      Log.StartCounter(-14);
      IF DimValue = '' THEN
        EXIT;
      IF UseCheck THEN
        CheckDimensions(DimCode, DimValue, DimName,'',DocNo,DocDate,EntryNo,ConsSourceCode,ConsRegNo,GLBuff,MappingCode);
      LedgerEntryDimTMP.INIT;
      LedgerEntryDimTMP."Table ID" := TableNo;
      LedgerEntryDimTMP."Entry No." := EntryNo;
      LedgerEntryDimTMP."Dimension Code" := DimCode;
      LedgerEntryDimTMP."Dimension Value Code" := DimValue;
      //LedgerEntryDimTMP.Name := DimName;
      IF NOT LedgerEntryDimTMP.INSERT THEN BEGIN
      END ELSE BEGIN
        //NC > MP 25.11.2010
        {
        LinkedDim.RESET;
        LinkedDim.SETRANGE("Dimension Code",DimCode);
        LinkedDim.SETRANGE("Dimension Value",DimValue);
        IF LinkedDim.FINDSET THEN
          REPEAT
            LedgerEntryDimTMP.INIT;
            LedgerEntryDimTMP."Table ID" := TableNo;
            LedgerEntryDimTMP."Entry No." := EntryNo;
            LedgerEntryDimTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
            LedgerEntryDimTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
            IF NOT LedgerEntryDimTMP.INSERT THEN
              LedgerEntryDimTMP.MODIFY;
          UNTIL LinkedDim.NEXT = 0;
        }
        //NC < MP 25.11.2010

        //NC NCS-1746.1 > DP
        //Доопределение аналитки FI со сделки
        IF GLBuff."FI Processing" AND (DimCode = MovingDataSetup."Deal Dimension Code") THEN
          IF Deal.GET(DimValue) AND (Deal."Financial instrument No."<>'') THEN BEGIN
             LedgerEntryDimTMP.INIT;
             LedgerEntryDimTMP."Table ID" := TableNo;
             LedgerEntryDimTMP."Entry No." := EntryNo;
             LedgerEntryDimTMP."Dimension Code" := MovingDataSetup."FI Dimension Code";
             LedgerEntryDimTMP."Dimension Value Code" := Deal."Financial instrument No.";
             IF NOT LedgerEntryDimTMP.INSERT THEN
               LedgerEntryDimTMP.MODIFY;
          END;
        //NC NCS-1746.1 < DP

      END;
      Log.StartCounter(14);
      //NC PIF001 < DP
    END;

    PROCEDURE CreateDebitDimBuffer@1210006(ConsBuffer@1210000 : Record 50008;VAR LedgerEntryDimTmp@1210001 : TEMPORARY Record 355;ConsRegister@1210003 : Record 50005;EntryNo@1000000000 : Integer;UseCheck@1000000001 : Boolean;MappingCode@1000000002 : Code[20]) nErr : Integer;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      //NC PIF001 > DP
      IF (ConsBuffer."Dimension 1 Code" <> '') AND
         (ConsBuffer."Debit Dimension 1 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 1 Code",ConsBuffer."Debit Dimension 1 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 2 Code" <> '') AND
         (ConsBuffer."Debit Dimension 2 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 2 Code",ConsBuffer."Debit Dimension 2 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 3 Code" <> '') AND
         (ConsBuffer."Debit Dimension 3 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 3 Code",ConsBuffer."Debit Dimension 3 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 4 Code" <> '') AND
         (ConsBuffer."Debit Dimension 4 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 4 Code",ConsBuffer."Debit Dimension 4 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 5 Code" <> '') AND
         (ConsBuffer."Debit Dimension 5 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 5 Code",ConsBuffer."Debit Dimension 5 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF ConsBuffer."Dimension 6 Code" <> '' THEN BEGIN                  //Контрагент
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 6 Code",ConsBuffer."Debit Dimension 6 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
        {
        IF ConsBuffer."Debit Int Contragent" = ConsBuffer."Debit Int Contragent"::Contr THEN BEGIN
          TransformIntContragent(ConsBuffer."Dimension 6 Code", ConsBuffer."Debit Dimension 6 Value Code",IntContrValue);
          CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');
        END ELSE
          IF (ConsBuffer."Сredit Int Contragent" = ConsBuffer."Сredit Int Contragent"::Contr) AND
             (ConsBuffer."Debit Int Contragent" <> ConsBuffer."Debit Int Contragent"::Bank) AND
             (EntryNo = 1)
          THEN BEGIN
            TransformIntContragent(ConsBuffer."Dimension 6 Code", ConsBuffer."Credit Dimension 6 Value Code",IntContrValue);
            CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                            ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');

          END;
        }
      END;
      IF (ConsBuffer."Dimension 7 Code" <> '') AND
         (ConsBuffer."Debit Dimension 7 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 7 Code",ConsBuffer."Debit Dimension 7 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 8 Code" <> '') AND
         (ConsBuffer."Debit Dimension 8 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 8 Code",ConsBuffer."Debit Dimension 8 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF ConsBuffer."Dimension 9 Code" <> '' THEN BEGIN                  //Банки
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 9 Code",ConsBuffer."Debit Dimension 9 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
        {
        IF ConsBuffer."Debit Int Contragent" = ConsBuffer."Debit Int Contragent"::Bank THEN BEGIN
          TransformIntContragent(ConsBuffer."Dimension 9 Code", ConsBuffer."Debit Dimension 9 Value Code",IntContrValue);
          IF CheckReclassCorrespondenseRSBU(ConsBuffer) THEN
            CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                            ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'',ConsRegister."No.");
        END ELSE
          IF (ConsBuffer."Сredit Int Contragent" = ConsBuffer."Сredit Int Contragent"::Bank) AND
            (ConsBuffer."Debit Int Contragent" <> ConsBuffer."Debit Int Contragent"::Contr) AND
            (EntryNo = 1)
          THEN BEGIN
            TransformIntContragent(ConsBuffer."Dimension 9 Code", ConsBuffer."Credit Dimension 9 Value Code",IntContrValue);
            IF CheckReclassCorrespondenseRSBU(ConsBuffer) THEN
              CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                              ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'',ConsRegister."No.");
          END;
        }
      END;
      IF (ConsBuffer."Dimension 10 Code" <> '') AND
         (ConsBuffer."Debit Dimension 10 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 10 Code",ConsBuffer."Debit Dimension 10 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 11 Code" <> '') AND
         (ConsBuffer."Debit Dimension 11 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 11 Code",ConsBuffer."Debit Dimension 11 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 12 Code" <> '') AND
         (ConsBuffer."Debit Dimension 12 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 12 Code",ConsBuffer."Debit Dimension 12 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 13 Code" <> '') AND
         (ConsBuffer."Debit Dimension 13 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 13 Code",ConsBuffer."Debit Dimension 13 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 14 Code" <> '') AND
         (ConsBuffer."Debit Dimension 14 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 14 Code",ConsBuffer."Debit Dimension 14 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 15 Code" <> '') AND
         (ConsBuffer."Debit Dimension 15 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 15 Code",ConsBuffer."Debit Dimension 15 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 16 Code" <> '') AND
         (ConsBuffer."Debit Dimension 16 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 16 Code",ConsBuffer."Debit Dimension 16 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 17 Code" <> '') AND
         (ConsBuffer."Debit Dimension 17 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 17 Code",ConsBuffer."Debit Dimension 17 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      //NC MDB01 > MP
      IF (ConsBuffer."Dimension 18 Code" <> '') AND
         (ConsBuffer."Debit Dimension 18 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 18 Code",ConsBuffer."Debit Dimension 18 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 19 Code" <> '') AND
         (ConsBuffer."Debit Dimension 19 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 19 Code",ConsBuffer."Debit Dimension 19 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 20 Code" <> '') AND
         (ConsBuffer."Debit Dimension 20 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 20 Code",ConsBuffer."Debit Dimension 20 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      {
      IF ConsolidationSetup."Structure Unit Dimension Code" <> '' THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsolidationSetup."Structure Unit Dimension Code", ConsBuffer."Structure Unit", '',
                        ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",ConsRegister."Cons. Source Code");
      }
      //NC MDB01 < MP
      {
      IF (ConsBuffer."Dimension 5 Code" <> '') AND
         (ConsBuffer."Debit Dimension 5 Value Code" <> '')
      THEN BEGIN
        TransformIntContragent(ConsBuffer."Dimension 5 Code", ConsBuffer."Debit Dimension 5 Value Code",IntContrValue);
        IF IntContrValue<>'' THEN
          CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');
      END;
      IF (ConsBuffer."Dimension 12 Code" <> '') AND
         (ConsBuffer."Debit Dimension 12 Value Code" <> '')
      THEN BEGIN
        TransformIntContragent(ConsBuffer."Dimension 12 Code", ConsBuffer."Debit Dimension 12 Value Code",IntContrValue);
        IF IntContrValue<>'' THEN
          CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');
      END;
      }
      //NC PIF001 < DP
    END;

    PROCEDURE CreateCreditDimBuffer@1210013(ConsBuffer@1210001 : Record 50008;VAR LedgerEntryDimTmp@1210000 : TEMPORARY Record 355;ConsRegister@1210003 : Record 50005;EntryNo@1000000000 : Integer;UseCheck@1000000001 : Boolean;MappingCode@1000000002 : Code[20]) nErr : Integer;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      //NC PIF001 > DP
      IF (ConsBuffer."Dimension 1 Code" <> '') AND
         (ConsBuffer."Credit Dimension 1 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 1 Code",ConsBuffer."Credit Dimension 1 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 2 Code" <> '') AND
         (ConsBuffer."Credit Dimension 2 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 2 Code",ConsBuffer."Credit Dimension 2 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 3 Code" <> '') AND
         (ConsBuffer."Credit Dimension 3 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 3 Code",ConsBuffer."Credit Dimension 3 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 4 Code" <> '') AND
         (ConsBuffer."Credit Dimension 4 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 4 Code",ConsBuffer."Credit Dimension 4 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 5 Code" <> '') AND
         (ConsBuffer."Credit Dimension 5 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 5 Code",ConsBuffer."Credit Dimension 5 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF ConsBuffer."Dimension 6 Code" <> '' THEN BEGIN      //Контрагент
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 6 Code",ConsBuffer."Credit Dimension 6 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
        {
        IF ConsBuffer."Сredit Int Contragent" = ConsBuffer."Сredit Int Contragent"::Contr THEN BEGIN
          TransformIntContragent(ConsBuffer."Dimension 6 Code", ConsBuffer."Credit Dimension 6 Value Code",IntContrValue);
          CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');
        END ELSE
          IF (ConsBuffer."Debit Int Contragent" = ConsBuffer."Debit Int Contragent"::Contr) AND
            (ConsBuffer."Сredit Int Contragent" <> ConsBuffer."Сredit Int Contragent"::Bank) AND
            (EntryNo = 2)
          THEN BEGIN
            TransformIntContragent(ConsBuffer."Dimension 6 Code", ConsBuffer."Debit Dimension 6 Value Code",IntContrValue);
            CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                            ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');

          END;
        }
      END;
      IF (ConsBuffer."Dimension 7 Code" <> '') AND
         (ConsBuffer."Credit Dimension 7 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 7 Code",ConsBuffer."Credit Dimension 7 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 8 Code" <> '') AND
         (ConsBuffer."Credit Dimension 8 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 8 Code",ConsBuffer."Credit Dimension 8 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF ConsBuffer."Dimension 9 Code" <> '' THEN  BEGIN         //Банки
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 9 Code",ConsBuffer."Credit Dimension 9 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
        {
        IF ConsBuffer."Сredit Int Contragent" = ConsBuffer."Сredit Int Contragent"::Bank THEN BEGIN
          TransformIntContragent(ConsBuffer."Dimension 9 Code", ConsBuffer."Credit Dimension 9 Value Code",IntContrValue);
          IF CheckReclassCorrespondenseRSBU(ConsBuffer) THEN
            CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                            ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');
        END ELSE
          IF (ConsBuffer."Debit Int Contragent" = ConsBuffer."Debit Int Contragent"::Bank) AND
             (ConsBuffer."Сredit Int Contragent" <> ConsBuffer."Сredit Int Contragent"::Contr) AND
             (EntryNo = 2)
          THEN BEGIN
            TransformIntContragent(ConsBuffer."Dimension 9 Code", ConsBuffer."Debit Dimension 9 Value Code",IntContrValue);
            IF CheckReclassCorrespondenseRSBU(ConsBuffer) THEN
              CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                              ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');
          END;
        }
      END;
      IF (ConsBuffer."Dimension 10 Code" <> '') AND
         (ConsBuffer."Credit Dimension 10 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 10 Code",ConsBuffer."Credit Dimension 10 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 11 Code" <> '') AND
         (ConsBuffer."Credit Dimension 11 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 11 Code",ConsBuffer."Credit Dimension 11 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 12 Code" <> '') AND
         (ConsBuffer."Credit Dimension 12 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 12 Code",ConsBuffer."Credit Dimension 12 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 13 Code" <> '') AND
         (ConsBuffer."Credit Dimension 13 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 13 Code",ConsBuffer."Credit Dimension 13 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 14 Code" <> '') AND
         (ConsBuffer."Credit Dimension 14 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 14 Code",ConsBuffer."Credit Dimension 14 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 15 Code" <> '') AND
         (ConsBuffer."Credit Dimension 15 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 15 Code",ConsBuffer."Credit Dimension 15 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 16 Code" <> '') AND
         (ConsBuffer."Credit Dimension 16 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 16 Code",ConsBuffer."Credit Dimension 16 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 17 Code" <> '') AND
         (ConsBuffer."Credit Dimension 17 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 17 Code",ConsBuffer."Credit Dimension 17 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      //NC MDB01 > MP
      IF (ConsBuffer."Dimension 18 Code" <> '') AND
         (ConsBuffer."Credit Dimension 18 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 18 Code",ConsBuffer."Credit Dimension 18 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 19 Code" <> '') AND
         (ConsBuffer."Credit Dimension 19 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 19 Code",ConsBuffer."Credit Dimension 19 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 20 Code" <> '') AND
         (ConsBuffer."Credit Dimension 20 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 20 Code",ConsBuffer."Credit Dimension 20 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      {
      IF ConsolidationSetup."Structure Unit Dimension Code" <> '' THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsolidationSetup."Structure Unit Dimension Code", ConsBuffer."Structure Unit", '',
                        ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",ConsRegister."Cons. Source Code");
      }
      //NC MDB01 < MP
      {
      IF (ConsBuffer."Dimension 5 Code" <> '') AND
         (ConsBuffer."Credit Dimension 5 Value Code" <> '')
      THEN BEGIN
        TransformIntContragent(ConsBuffer."Dimension 5 Code", ConsBuffer."Credit Dimension 5 Value Code",IntContrValue);
        IF IntContrValue<>'' THEN
          CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');
      END;
      IF (ConsBuffer."Dimension 12 Code" <> '') AND
         (ConsBuffer."Credit Dimension 12 Value Code" <> '')
      THEN BEGIN
        TransformIntContragent(ConsBuffer."Dimension 12 Code", ConsBuffer."Credit Dimension 12 Value Code",IntContrValue);
        IF IntContrValue<>'' THEN
          CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'');
      END;
      }
      //NC PIF001 < DP
    END;

    PROCEDURE CreateConsDimList@1000000000(VAR TMPDimCheck@1000000000 : TEMPORARY Record 348;ConsolidationSource@1000000001 : Record 50001;OnlyNeedToMap@1210000 : Boolean);
    VAR
      Dim@1210001 : Record 348;
      GLMapping@1000000002 : Record 50002;
      NeedMapping@1000000003 : Boolean;
      DimMappingSelection@1000000004 : Record 50031;
    BEGIN
      //NC PIF001 > DP
      //NC MDTC09 > MP Эта функция полностью переработана
      TMPDimCheck.RESET;

      IF NOT OnlyNeedToMap THEN BEGIN

       //NC MIO-10 > DP
       IF ConsolidationSource."Import Format"=ConsolidationSource."Import Format"::FromBufferNAV THEN BEGIN
          Dim.RESET;
          IF Dim.FINDSET THEN
          REPEAT
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          UNTIL Dim.NEXT=0;
       END ELSE BEGIN
       //NC MIO-10 < DP

        IF ConsolidationSource."Shortcut Dimension 1 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 1 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 2 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 2 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 3 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 3 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 4 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 4 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 5 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 5 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 6 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 6 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 7 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 7 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 8 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 8 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 9 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 9 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 10 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 10 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 11 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 11 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 12 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 12 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 13 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 13 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 14 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 14 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 15 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 15 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 16 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 16 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 17 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 17 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;

        ConsolidationSetup.GET;
        IF ConsolidationSetup."IC Dimension Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSetup."IC Dimension Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        //NC MDB01 > MP
        {
        IF ConsolidationSetup."Structure Unit Dimension Code" <> '' THEN BEGIN
          TMPDimCheck.Code := ConsolidationSetup."Structure Unit Dimension Code";
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        }
        IF ConsolidationSource."Shortcut Dimension 18 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 18 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 19 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 19 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        IF ConsolidationSource."Shortcut Dimension 20 Code" <> '' THEN BEGIN
          IF Dim.GET(ConsolidationSource."Shortcut Dimension 20 Code") THEN BEGIN
            TMPDimCheck.TRANSFERFIELDS(Dim);
            IF NOT TMPDimCheck.INSERT THEN;
          END;
        END;
        //NC MDB01 < MP
        //NC PIF010 > MP
        IF (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer) AND
          ConsolidationSource."Use GL Mapping"
        THEN BEGIN
          //NCMDTM02 >  MP
          ConsolidationSource.TESTFIELD("Mapping Code");
          //NCMDTM02 <  MP
          GLMapping.RESET;
          GLMapping.SETRANGE("Mapping Code",ConsolidationSource."Mapping Code");
          GLMapping.SETFILTER("Receiver Dimension Code 1",'<>%1','');
          IF GLMapping.FINDSET THEN
            REPEAT
              IF Dim.GET(GLMapping."Receiver Dimension Code 1") THEN BEGIN
                TMPDimCheck.TRANSFERFIELDS(Dim);
                IF NOT TMPDimCheck.INSERT THEN;
              END;
            UNTIL GLMapping.NEXT = 0;
          GLMapping.SETRANGE("Receiver Dimension Code 1");
          GLMapping.SETFILTER("Receiver Dimension Code 2",'<>%1','');
          IF GLMapping.FINDSET THEN
            REPEAT
              IF Dim.GET(GLMapping."Receiver Dimension Code 2") THEN BEGIN
                TMPDimCheck.TRANSFERFIELDS(Dim);
                IF NOT TMPDimCheck.INSERT THEN;
              END;
            UNTIL GLMapping.NEXT = 0;
          GLMapping.SETRANGE("Receiver Dimension Code 2");
          GLMapping.SETFILTER("Receiver Dimension Code 3",'<>%1','');
          IF GLMapping.FINDSET THEN
            REPEAT
              IF Dim.GET(GLMapping."Receiver Dimension Code 3") THEN BEGIN
                TMPDimCheck.TRANSFERFIELDS(Dim);
                IF NOT TMPDimCheck.INSERT THEN;
              END;
            UNTIL GLMapping.NEXT = 0;
          GLMapping.RESET;
          GLMapping.SETRANGE("Mapping Code",ConsolidationSource."Mapping Code");
          GLMapping.SETFILTER("Source Dimension Code 1",'<>%1','');
          IF GLMapping.FINDSET THEN
            REPEAT
              IF Dim.GET(GLMapping."Source Dimension Code 1") THEN BEGIN
                TMPDimCheck.TRANSFERFIELDS(Dim);
                IF NOT TMPDimCheck.INSERT THEN;
              END;
            UNTIL GLMapping.NEXT = 0;
          GLMapping.SETRANGE("Source Dimension Code 1");
          GLMapping.SETFILTER("Source Dimension Code 2",'<>%1','');
          IF GLMapping.FINDSET THEN
            REPEAT
              IF Dim.GET(GLMapping."Source Dimension Code 2") THEN BEGIN
                TMPDimCheck.TRANSFERFIELDS(Dim);
                IF NOT TMPDimCheck.INSERT THEN;
              END;
            UNTIL GLMapping.NEXT = 0;
          GLMapping.SETRANGE("Source Dimension Code 2");
          GLMapping.SETFILTER("Source Dimension Code 3",'<>%1','');
          IF GLMapping.FINDSET THEN
            REPEAT
              IF Dim.GET(GLMapping."Source Dimension Code 3") THEN BEGIN
                TMPDimCheck.TRANSFERFIELDS(Dim);
                IF NOT TMPDimCheck.INSERT THEN;
              END;
            UNTIL GLMapping.NEXT = 0;
        END;
        //NC PIF010 < MP

      //NC MIO-10 > DP
       END;
      //NC MIO-10 > DP

      END ELSE BEGIN
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 1 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 1 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 1 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 2 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 2 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 2 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 3 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 3 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 3 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 4 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 4 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 4 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 5 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 5 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 5 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 6 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 6 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 6 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 7 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 7 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 7 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 8 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 8 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 8 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 9 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 9 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 9 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 10 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 10 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 10 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 11 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 11 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 11 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 12 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 12 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 12 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 13 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 13 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 13 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 14 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 14 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 14 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 15 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 15 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 15 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 16 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 16 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 16 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 17 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 17 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 17 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        ConsolidationSetup.GET;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSetup."IC Dimension Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSetup."IC Dimension Code" <> '') AND
           Dim.GET(ConsolidationSetup."IC Dimension Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDB01 > MP
        {
        IF (ConsolidationSetup."Structure Unit Dimension Code" <> '') AND
           Dim.GET(ConsolidationSetup."Structure Unit Dimension Code") AND
           Dim."Need Map"
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        }
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 18 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 18 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 18 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 19 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 19 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 19 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDTM02.2 > PCH
        NeedMapping := DimMappingSelection.GET(ConsolidationSource."Mapping Code",ConsolidationSource."Shortcut Dimension 20 Code");
        //NC MDTM02.2 < PCH
        IF (ConsolidationSource."Shortcut Dimension 20 Code" <> '') AND
           Dim.GET(ConsolidationSource."Shortcut Dimension 20 Code") AND
           //NC MDTM02.2 > PCH
           //Dim."Need Mapping"
           NeedMapping
           //NC MDTM02.2 < PCH
        THEN BEGIN
          TMPDimCheck.TRANSFERFIELDS(Dim);
          IF NOT TMPDimCheck.INSERT THEN;
        END;
        //NC MDB01 < MP
      END;
      //NC MDTC09 < MP Эта функция полностью переработана
      //NC PIF001 < DP
    END;

    PROCEDURE GenJnlLineExists@1000000009(GenJnlTemplate@1000000000 : Code[20];GenJnlBatch@1000000001 : Code[20];VAR GenJnlLineCheck@1000000002 : Record 81) : Boolean;
    BEGIN
      //NC PIF001 > DP
      GenJnlLineCheck.RESET;
      GenJnlLineCheck.SETRANGE("Journal Template Name", GenJnlTemplate);
      GenJnlLineCheck.SETRANGE("Journal Batch Name", GenJnlBatch);
      IF GenJnlLineCheck.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
      //NC PIF001 < DP
    END;

    PROCEDURE CreateJnlLineDimensions@1000000004(VAR GenJournalLine@1000000002 : Record 81;VAR JournalLineDimension@1000000001 : Record 356;VAR LedgerEntryDimension@1000000000 : TEMPORARY Record 355;ConsSession@1000000005 : Integer;VAR InterCompany@1000000009 : Boolean;ConsolSource@1210001 : Record 50001;GLAccNo@1000000006 : Code[20];MappingCode@1000000014 : Code[20]);
    VAR
      DimValue@1000000003 : Record 349;
      NextErrorEntryNo@1000000007 : Integer;
      Dimension@1210000 : Record 348;
      IsErr@1210002 : Boolean;
      Defaultdim@1000000004 : Record 352;
      GenJnlLineCheck@1000000008 : Record 356;
      IFRSRUR@1000000010 : Boolean;
      GLBuffer@1000000011 : Record 50008;
      NeedMapping@1000000012 : Boolean;
      DimMappingSel@1000000013 : Record 50031;
    BEGIN
      //NC PIF001 > DP
      Log.StartCounter(-12);
      // если такого измерения еще нет
      Log.StartCounter(-20);
      IF NOT JournalLineDimension.GET(81, GenJournalLine."Journal Template Name", GenJournalLine."Journal Batch Name",
        GenJournalLine."Line No.", 0, LedgerEntryDimension."Dimension Code") THEN BEGIN
        Log.StartCounter(20);
        Log.StartCounter(-19);
        //LedgerEntryDimension.CALCFIELDS("Dimension Value Name");
        //DimValue2.CHANGECOMPANY(ConsolSource."Company Name");
        //DimValue2.GET(LedgerEntryDimension."Dimension Code",LedgerEntryDimension."Dimension Value Code");
        //!!!!!!!!!!! Скорее всего эта функция не нужна!
        //CheckDimensions(LedgerEntryDimension."Dimension Code",LedgerEntryDimension."Dimension Value Code",
        //  LedgerEntryDimension."Dimension Value Name",DimValue2."Int Contragent Dim Value",
        //  GenJournalLine."Document No.",GenJournalLine."Posting Date",0,'',0,GLBuffer);

        IF DimValue.GET(LedgerEntryDimension."Dimension Code",LedgerEntryDimension."Dimension Value Code") THEN BEGIN
          JournalLineDimension.RESET;
          JournalLineDimension.INIT;
          JournalLineDimension."Table ID" := 81;
          JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
          JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
          JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
          Dimension.GET(LedgerEntryDimension."Dimension Code");
          //NC MDTM02.2 > PCH
          //NC MDTM11 > MP
          {
          NeedMapping := DimMappingSel.GET(ConsolSource."Mapping Code",LedgerEntryDimension."Dimension Code");
          }
          NeedMapping := DimMappingSel.GET(MappingCode,LedgerEntryDimension."Dimension Code");
          //NC MDTM11 < MP
          //NC MDTM02.2 < PCH
          IsErr := FALSE;
          Log.StartCounter(19);
          IF (
              (
               (ConsolSource."Import Format" = ConsolSource."Import Format"::FromNavision)
               //OR
               //(
                //(ConsolSource."Import Format" = ConsolSource."Import Format"::FromBuffer) AND
                //(ConsolSource."Use GL Mapping")
               //)
              )
              AND
              //NC MDTM02.2 > PCH
              //(Dimension."Need Mapping")
              (NeedMapping)
              //NC MDTM02.2 < PCH
              AND
              (NOT GenJournalLine."Except Correspondence")
              AND (NOT CloseOperation)
             )
          THEN BEGIN
            IsErr := MappDimension(GenJournalLine, JournalLineDimension, LedgerEntryDimension, ConsolSource, ConsSession,
                                   GLAccNo,MappingCode);
          END ELSE BEGIN
            JournalLineDimension."Dimension Code" := LedgerEntryDimension."Dimension Code";
            JournalLineDimension."Dimension Value Code" := LedgerEntryDimension."Dimension Value Code";
            //NC MDTC05.1 > MP
            JournalLineDimension."Dim in Source" := LedgerEntryDimension."Dim in Source";
            JournalLineDimension."Dim Value Code in Source" := LedgerEntryDimension."Dim Value Code in Source";
            //NC MDTC05.1 < MP
          END;
          IF (NOT IsErr)
            AND (((ConsolSource."Import Format" = ConsolSource."Import Format"::FromNavision) AND
            //NC MDTM02.2 > PCH
            //(Dimension."Need Mapping" AND (NOT CloseOperation))
            //OR (NOT Dimension."Need Mapping")) OR (ConsolSource."Import Format" = ConsolSource."Import Format"::FromBuffer))
            (NeedMapping AND (NOT CloseOperation))

            //NC MIO-10 > DP
            {
            OR (NOT NeedMapping)) OR (ConsolSource."Import Format" = ConsolSource."Import Format"::FromBuffer))
            }
            OR (NOT NeedMapping)) OR (ConsolSource."Import Format" IN [ConsolSource."Import Format"::FromBuffer,
                                                                       ConsolSource."Import Format"::FromBufferNAV]))
            //NC MIO-10 < DP

            //NC MDTM02.2 < PCH
          THEN BEGIN
            Log.StartCounter(-17);
            IF NOT JournalLineDimension.INSERT THEN BEGIN
              Defaultdim.CHANGECOMPANY(ConsolSource."Company Name");
              IF Defaultdim.GET(15,GLAccNo,LedgerEntryDimension."Dimension Code") THEN
                JournalLineDimension.MODIFY;
            END;
            //NC PIF010 > MP
            IF JournalLineDimension."Dimension Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN BEGIN
              //InsertFinInstr(JournalLineDimension."Dimension Value Code");
              GenJournalLine."Financial Instrument No." := JournalLineDimension."Dimension Value Code";
            END;
            //NC PIF010 < MP

            IF GLSetup."Global Dimension 1 Code" <> '' THEN
              IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                GenJournalLine."Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";
            IF GLSetup."Global Dimension 2 Code" <> '' THEN
              IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                GenJournalLine."Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";
            Log.StartCounter(17);
          END;
        END ELSE BEGIN
          Log.StartCounter(19);
          //  GenJournalLine."Cons. Register Error Entry No." := CreateErrorLogEntry(ImportFormat,ConsSession,1,0,
          //                                                         FORMAT(GenJournalLine."Cons. Source Entry No."),
          //                                                      LedgerEntryDimension."Dimension Value Code",
          //                                                      GenJournalLine."Document No.",
          //'В консолидирующей компании не найдено Значение Измерения '+FORMAT(LedgerEntryDimension."Dimension Code"));
        END;
      END ELSE
        Log.StartCounter(20);
      Log.StartCounter(12);
      //NC PIF001 < DP
    END;

    PROCEDURE GetNextLineNo@1000000008(GenJnlTemplate@1000000001 : Code[20];GenJnlBatch@1000000000 : Code[20]) : Integer;
    VAR
      GenJournalLine1@1000000002 : Record 81;
    BEGIN
      //NC OPT > PCH
      IF (LastGenJnlTemplate <> GenJnlTemplate) OR
         (LastGenJnlBatch <> GenJnlBatch) OR
         (LastLineNo = 0) THEN BEGIN
      //NC OPT < PCH
        //NC PIF001 > DP
         GenJournalLine1.SETFILTER("Journal Template Name", GenJnlTemplate);
         GenJournalLine1.SETFILTER("Journal Batch Name", GenJnlBatch);
         IF GenJournalLine1.RECORDLEVELLOCKING THEN
           GenJournalLine1.LOCKTABLE;
         //NC OPT > PCH
         LastGenJnlTemplate := GenJnlTemplate;
         LastGenJnlBatch := GenJnlBatch;
         //NC OPT < PCH
         IF GenJournalLine1.FINDLAST THEN
           //NC OPT > PCH
           //EXIT(GenJournalLine1."Line No." + 3)
           LastLineNo := GenJournalLine1."Line No." + 3
           //NC OPT < PCH
         ELSE
           //NC OPT > PCH
           //EXIT(1);
           LastLineNo := 1;
           //NC OPT < PCH
        //NC PIF001 < DP
      //NC OPT > PCH
      END ELSE
        LastLineNo += 3;
      EXIT(LastLineNo);
      //NC OPT < PCH
    END;

    PROCEDURE CreateJnlLine@1000000014(VAR GenJournalLine@1000000002 : Record 81;ConsolidationSource@1000000000 : Record 50001;VAR GLEntry@1000000001 : Record 17;DocumentNo@1000000006 : Code[20];ConsSession@1000000012 : Integer;VAR LedgEntryDimTMP@1000000014 : Record 355;nErr@1210000 : Integer;ConsType@1210001 : 'Buffer,Navision';OperType@1210003 : 'Normal,Repost';NotUseMapp@1210004 : Boolean;ExchangeCorrNav@1210006 : Boolean;MappLineNo@1000000011 : Integer;MappingCode@1000000017 : Code[20]);
    VAR
      ConvOfChartOfAccounts@1000000003 : Record 50002;
      CurrExchRate@1000000004 : Record 330;
      AccountingPeriod@1000000007 : Record 50;
      GLAccount@1000000005 : Record 15;
      Description@1000000008 : Text[150];
      NextErrorEntryNo@1000000013 : Integer;
      ConsRateType@1000000015 : 'Historical,Period Average,Weighted Average,End Period,User Defined';
      PeriodType@1000000009 : 'Month,Year,Quarter,AccPeriod';
      UserFactor@1000000016 : Decimal;
      ConsSetupComp@1000000019 : Record 50000;
      RepostedBatch@1000000021 : Code[10];
      RepostedTemplate@1000000020 : Code[10];
      EntryNo@1000000023 : Integer;
      "NCV 015<"@1000000018 : Integer;
      Currency@1210002 : Record 4;
      CurrencyDate@1210005 : Date;
      ConsolidationSource1@1210007 : Record 50001;
      OriginalTranslationMethod@1210008 : Integer;
      GLAccountCode@1000000010 : Code[20];
      GenJournalBatch@1101495000 : Record 232;
    BEGIN
      //NC PIF001 > DP
      Log.StartCounter(-10);
      GenJournalLine.RESET;
      GenJournalLine.INIT;
      GenJournalLine."Journal Template Name" := ConsolidationSetup."Gen. Jnl. Template";

      GenJournalLine."Journal Batch Name" := ConsolidationSource."Gen. Journal Batch";
      //NC MDA01 > MP
      {
      GenJournalLine."Source Code" := ConsolidationSetup."Source Code";
      }
      GenJournalLine."Source Code" := SourceCodeSetup.Transformation;
      //NC MDA01 < MP
      IF OperType =  OperType::Repost THEN BEGIN
        GenJournalLine."Journal Batch Name" := ConsolidationSource."Reposted Journal Batch";
      END;

      Log.StartCounter(-16);
      IF ConsType = ConsType::Navision THEN BEGIN
        IF NOT TMPGLEntryException.GET(GLEntry."Entry No.") THEN BEGIN
          ConsolidationSource1.CHANGECOMPANY(ConsolidationSource."Company Name");
          IF ConsolidationSource1.GET(GLEntry."Export Cons. Source Code") THEN;
          IF GLEntry."Journal Batch Name"  = ConsolidationSource1."Gen. Journal Batch" THEN
            GenJournalLine."Journal Batch Name" := ConsolidationSource."Gen. Journal Batch";
          IF GLEntry."Journal Batch Name"  = ConsolidationSource1."Reposted Journal Batch" THEN
            GenJournalLine."Journal Batch Name" := ConsolidationSource."Reposted Journal Batch";
          IF GLEntry."Journal Batch Name"  = ConsolidationSource1."Removed Journal Batch" THEN
            GenJournalLine."Journal Batch Name" := ConsolidationSource."Removed Journal Batch";
        END ELSE BEGIN
          GenJournalLine."Journal Batch Name" := TMPGLEntryException."Journal Batch Name";
          GenJournalLine."Except Correspondence" := TRUE;
        END;
      END;
      //NC MTD06 > AIG
      IF OffsetExceptionsDT OR OffsetExceptionsCT THEN BEGIN
        GenJournalLine."Journal Batch Name" := ConsolidationSource."Offset Accounts Journal Batch";
        GenJournalLine."Transaction Type" := GenJournalLine."Transaction Type"::Manual;
      END ELSE
        GenJournalLine."Transaction Type" := GenJournalLine."Transaction Type"::Automatic;

      IF IsSpeshialControl AND NOT (OffsetExceptionsDT OR OffsetExceptionsCT) THEN
        GenJournalLine."Journal Batch Name" := ConsolidationSource."Speshial Control Journal Batch";
      //NC MTD06 < AIG

      //NC MIO-10 > DP
      {
      IF (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer) AND
      }
      IF (ConsolidationSource."Import Format" IN [ConsolidationSource."Import Format"::FromBuffer,
                                                  ConsolidationSource."Import Format"::FromBufferNAV]) AND
      //NC MIO-10 < DP

        (NOT ConsolidationSource."Use GL Mapping")
      THEN BEGIN
        //NC OPT PCH GenJournalLine.VALIDATE("Posting Date",GLEntry."Posting Date");
        GenJournalLine."Posting Date" := GLEntry."Posting Date";
        GenJournalLine."Document Date" := GLEntry."Document Date";
      END;
      IF (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer) AND
        ConsolidationSource."Use GL Mapping" AND TMPGLEntryException.GET(GLEntry."Buffer Entry No.")
      THEN BEGIN
        GenJournalLine."Journal Batch Name" := TMPGLEntryException."Journal Batch Name";
        GenJournalLine."Except Correspondence" := TRUE;
      END;

      Log.StartCounter(16);
      Log.StartCounter(-18);
      IF (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromNavision) OR

         //NC MIO-10 > DP
         {
         ((ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer) AND
         }
         ((ConsolidationSource."Import Format" IN [ConsolidationSource."Import Format"::FromBuffer,
                                                   ConsolidationSource."Import Format"::FromBufferNAV]) AND
         //NC MIO-10 < DP

           ConsolidationSource."Use GL Mapping")
      THEN BEGIN
        //GLSetup.GET;
        IF GLEntry."Posting Date" < GLSetup."Allow Posting From" THEN BEGIN
          //NC OPT PCH GenJournalLine.VALIDATE("Posting Date",GLSetup."Allow Posting From");
          GenJournalLine."Posting Date" := GLSetup."Allow Posting From";

          //NC MIO-10 > DP
          IF GLEntry."Historical Date"<>0D THEN
            GenJournalLine."Source Historical Date" := GLEntry."Historical Date"
          ELSE
          //NC MIO-10 < DP

          GenJournalLine."Source Historical Date" := GLEntry."Posting Date";
        END ELSE BEGIN
          //NC OPT PCH GenJournalLine.VALIDATE("Posting Date", GLEntry."Posting Date");
          GenJournalLine."Posting Date" := GLEntry."Posting Date";

          //NC MIO-10 > DP
          IF GLEntry."Historical Date"<>0D THEN
            GenJournalLine."Source Historical Date" := GLEntry."Historical Date"
          ELSE
          //NC MIO-10 < DP

          GenJournalLine."Source Historical Date" := 0D;
        END;
        //NC MAU02 > MP
        IF GLEntry."Posting Date" < GLSetup."Allow Transformation From" THEN BEGIN
          GenJournalLine."Posting Date" := GLSetup."Allow Transformation From";
          GenJournalLine."Source Historical Date" := GLEntry."Posting Date";
          GenJournalLine."Journal Batch Name" := ConsolidationSource."Closed Period Journal Batch";
        END;
        //NC MAU02 < MP
        //NC S1304 > PCH
        GenJournalLine."Document Date" := GLEntry."Document Date";
        //NC S1304 < PCH

        //NC MIO-10 > DP
        IF GLEntry."Posting Date" < ConsolidationSource."Allow Transformation To" THEN BEGIN
          IF ConsolidationSource."Post Closed Period Batch" THEN
            GenJournalLine."Posting Date" := ConsolidationSource."Allow Transformation To"
          ELSE
            GenJournalLine."Posting Date" := GLEntry."Posting Date";
          GenJournalLine."Source Historical Date" := GLEntry."Posting Date";
          GenJournalLine."Journal Batch Name" := ConsolidationSource."Closed Period Journal Batch";
        END;
        //NC MIO-10 < DP

      END;


      //NC NCS-953 > DP
      IF GLEntry."Historical Date"<>0D THEN
        GenJournalLine."Source Historical Date" := GLEntry."Historical Date";
      //NC NCS-953 < DP


      GenJournalLine."Line No." := GetNextLineNo(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      Log.StartCounter(18);

      GenJournalLine."Document Type" := GenJournalLine."Document Type"::" ";
      //NCMDTC01 > MP
      IF GenJournalLine."Except Correspondence" THEN BEGIN
        GLAccountCode := ConsolidationSetup."Exception G/L Account No.";
      END ELSE BEGIN
      //NCMDTC01 < MP
      IF ((ConsType = ConsType::Navision) AND (NOT NotUseMapp) AND (NOT GenJournalLine."Except Correspondence")) OR
         ((ConsType = ConsType::Buffer) AND (NOT NotUseMapp) AND (NOT GenJournalLine."Except Correspondence") AND
          ConsolidationSource."Use GL Mapping")
      THEN
        //NCMDTC01 > MP
        IF ((ConsType = ConsType::Buffer) AND ConsolidationSource."Use GL Mapping") THEN
        //NC MTD02 > AIG
        {
          GLAccountCode := MappChartsOfAccount3(LedgEntryDimTMP,ConsolidationSource,MappingCode,MappLineNo,
                                                GLEntry)
        }
        BEGIN
          Log.StartCounter(-11);
          IF ConvOfChartOfAccounts.GET(MappingCode,MappLineNo) THEN
            GLAccountCode := ConvOfChartOfAccounts."Receiver Account Code";

        END
        //NC MTD02 < AIG
        ELSE
        //NCMDTC01 < MP
        GLAccountCode := MappChartsOfAccount(GenJournalLine,GLEntry,LedgEntryDimTMP,ConsolidationSource,ConsSession, DocumentNo,
                                             MappingCode)
      ELSE
        IF GenJournalLine."Except Correspondence" THEN BEGIN
          GLAccountCode := ConsolidationSetup."Exception G/L Account No.";
        END ELSE
          GLAccountCode := GLEntry."G/L Account No.";
      //NCMDTC01 > MP
      END;
      //NCMDTC01 < MP
      Log.StartCounter(-16);
      //NC MTD02 > AIG
      {
      IF NOT SetAccountTypeAccountNo(GenJournalLine,GLEntry,LedgEntryDimTMP,
        GLEntry."Cons. Source Code",GLAccountCode, GLEntry."Buffer Entry No.",ConsSession)
      }
      IF NOT SetAccountTypeAccountNo2(GenJournalLine,GLEntry,LedgEntryDimTMP,ConvOfChartOfAccounts)
      //NC MTD02 < AIG
      THEN BEGIN
        //NC OPT PCH GenJournalLine.VALIDATE("Account Type", GenJournalLine."Account Type"::"G/L Account");
        GenJournalLine."Account Type" := GenJournalLine."Account Type"::"G/L Account";
        //NC OPT PCH GenJournalLine.VALIDATE("Account No.", GLAccountCode);
        GenJournalLine."Account No." := GLAccountCode;
      END;

      GenJournalLine.Description := GLEntry.Description;
      GenJournalLine."Gen. Posting Type" := GenJournalLine."Gen. Posting Type"::" ";
      GenJournalLine."Gen. Bus. Posting Group" := '';
      GenJournalLine."Gen. Prod. Posting Group" := '';

      //NC S1893 > PCH
      IF GLSetup."Use Bus.Unit for Separ. Trans." THEN
        GenJournalLine."Business Unit Code" := GLSetup."Default Business Unit Code"
      ELSE
      //NC S1893 < PCH
        IF ConsolidationSource."Business Unit Code" <> '' THEN
          GenJournalLine."Business Unit Code" := ConsolidationSource."Business Unit Code";

      //NC APCOC-112 > PCH

      //NC NCS-2166 > DP
      {
      IF ConsolidationSource."Reset Busines Unit for Offset" AND
         (OffsetExceptionsDT OR OffsetExceptionsCT) AND
         (GLAccountCode = '') THEN
        GenJournalLine."Business Unit Code" := '';
      }
      //NC NCS-2166 < DP

      IF (OffsetExceptionsDT OR OffsetExceptionsCT) AND
         GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name") THEN
        GenJournalLine."Bal. Account No." := GenJournalBatch."Bal. Account No.";
      //NC APCOC-112 < PCH

      GenJournalLine."Special Correspondense" := GLEntry."Special Correspondense";
      //обращение к курсовым пересчетам

      IF ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromNavision THEN BEGIN

        //NC PIF001 > DP
        IF LocGLAcc.GET(GLEntry."G/L Account No.") THEN;
        IF CurrGLAcc.GET(GenJournalLine."Account No.") THEN;
        OriginalTranslationMethod := LocGLAcc."Consol. Translation Method";
        IF LocGLAcc."Consol. Translation Method" = LocGLAcc."Consol. Translation Method"::"Average Rate (Manual)" THEN BEGIN
          IF CurrGLAcc."Income/Balance" = CurrGLAcc."Income/Balance"::"Balance Sheet" THEN
            LocGLAcc."Consol. Translation Method" := LocGLAcc."Consol. Translation Method"::"Closing Rate";
        END;
        //NC PIF001 < DP
        IF GenJournalLine."Source Historical Date" = 0D THEN
          CurrencyDate := GenJournalLine."Posting Date"
        ELSE
          CurrencyDate := GenJournalLine."Source Historical Date";

        //если валюта загружаемой операции = валюте фирмы >
        IF (ConsolidationSource."LCY Code" = GLEntry."Original Currency Code") AND
           (ConsolidationSource."LCY Code" <> '')
        THEN BEGIN
          GenJournalLine.VALIDATE("Currency Code",'');
          IF CheckExchangeCorrNav(GLEntry,ConsolidationSource.Code) OR
            (NotUseMapp AND ExchangeCorrNav)
          THEN BEGIN
            GenJournalLine.VALIDATE(Amount,GLEntry."Original Amount");
          END ELSE BEGIN
            Currency.SETCURRENTKEY("Source Currency Code");
            Currency.SETFILTER("Source Currency Code",'=%1','');
            IF Currency.FINDFIRST THEN BEGIN
              CurrExchRate.GET(Currency.Code,CurrencyDate);

              //NC PIF001 > DP
              IF  LocGLAcc."Consol. Translation Method" = LocGLAcc."Consol. Translation Method"::"Closing Rate" THEN
                GenJournalLine.VALIDATE(Amount,
                                      CurrExchRate.ExchangeAmtFCYToLCY(CurrencyDate,
                                      Currency.Code,
                                      GLEntry.Amount,
                                      ConsolidationSource."Balance Currency Factor"));
              IF LocGLAcc."Consol. Translation Method" = LocGLAcc."Consol. Translation Method"::"Average Rate (Manual)" THEN
                GenJournalLine.VALIDATE(Amount,
                                      CurrExchRate.ExchangeAmtFCYToLCY(CurrencyDate,
                                      Currency.Code,
                                      GLEntry.Amount,
                                      ConsolidationSource."Income Currency Factor"));
              IF LocGLAcc."Consol. Translation Method" = LocGLAcc."Consol. Translation Method"::"Historical Rate" THEN
              //NC PIF001 < DP
                GenJournalLine.VALIDATE(Amount,
                                      CurrExchRate.ExchangeAmtFCYToLCY(CurrencyDate,
                                        Currency.Code,
                                        GLEntry.Amount,
                                        CurrExchRate."Exchange Rate Amount"/
                                        CurrExchRate."Relational Exch. Rate Amount"));
            END;
          END;
          //GenJournalLine."Additional Currency Amount" := GLEntry.Amount;
        END;


        //в лок. валюте и лок. валюты источника и приемника не совпадают >
        IF ((GLEntry."Original Currency Code" = '') AND
          (ConsolidationSource."LCY Code" <> ''))
        THEN BEGIN
          Currency.SETCURRENTKEY("Source Currency Code");
          Currency.SETFILTER("Source Currency Code",'=%1','');
          IF Currency.FINDFIRST THEN
            GenJournalLine.VALIDATE("Currency Code",Currency.Code);
          GenJournalLine.VALIDATE(Amount,GLEntry.Amount);
          //GenJournalLine."Additional Currency Amount" := GLEntry.Amount;
        END;

        //в лок. валюте и лок. валюты источника и приемника не совпадают >
        {
        IF (ConsolidationSource."Export Local Curr. Code" <> GLEntry."Original Currency Code") AND
           (GLEntry."Original Currency Code" <> '') AND
           AND (ConsolidationSource."Export Local Curr. Code" <> '')
        THEN BEGIN
          Currency.SETCURRENTKEY("Source Currency Code");
          Currency.SETFILTER("Source Currency Code",'=%1','');
          IF Currency.FINDFIRST THEN
            GenJournalLine.VALIDATE("Currency Code",Currency.Code);
          //NC PIF001 > DP
          {
          IF  LocGLAcc."Consol. Translation Method" = LocGLAcc."Consol. Translation Method"::"Closing Rate" THEN
            GenJournalLine.VALIDATE("Amount (LCY)",
                                      CurrExchRate.ExchangeAmtFCYToLCY(CurrencyDate,
                                      Currency.Code,
                                      GLEntry.Amount,
                                      ConsolidationSource."Balance Currency Factor"));
          IF LocGLAcc."Consol. Translation Method" = LocGLAcc."Consol. Translation Method"::"Average Rate (Manual)" THEN
            GenJournalLine.VALIDATE("Amount (LCY)",
                                      CurrExchRate.ExchangeAmtFCYToLCY(CurrencyDate,
                                      Currency.Code,
                                      GLEntry.Amount,
                                      ConsolidationSource."Income Currency Factor"));
          IF LocGLAcc."Consol. Translation Method" = LocGLAcc."Consol. Translation Method"::"Historical Rate" THEN
            GenJournalLine.VALIDATE(Amount,GLEntry."Original Amount");
          }
          //NC PIF001 < DP
          GenJournalLine."Additional Currency Amount" := GLEntry.Amount;
        END;
        }
        //если оригинальная валюта не USD и не RUR >
        IF (ConsolidationSource."LCY Code" <> GLEntry."Original Currency Code") AND
           (GLEntry."Original Currency Code" <> '') AND
           (ConsolidationSource."LCY Code" <> '')
        THEN BEGIN
          Currency.SETCURRENTKEY("Source Currency Code");
          Currency.SETFILTER("Source Currency Code",'=%1',GLEntry."Original Currency Code");
          IF Currency.FINDFIRST THEN
            GenJournalLine.VALIDATE("Currency Code",Currency.Code);
          GenJournalLine.VALIDATE(Amount,GLEntry."Original Amount");
          //GenJournalLine."Additional Currency Amount" := GLEntry.Amount;
        END;



        //Валюта источника = валюте приемника
        IF (ConsolidationSource."LCY Code" = '') THEN BEGIN
          GenJournalLine.VALIDATE("Currency Code",GLEntry."Original Currency Code");
          //GenJournalLine.VALIDATE(Amount,GLEntry."Original Amount");

          IF GenJournalLine."Currency Code" = '' THEN
            GenJournalLine.VALIDATE("Amount (LCY)", GLEntry.Amount)
          ELSE BEGIN
            GenJournalLine.VALIDATE(Amount,GLEntry."Original Amount");
            GenJournalLine.VALIDATE("Currency Factor",GLEntry."Original Amount" / GLEntry.Amount);
          END;
          //GenJournalLine."Additional Currency Amount" := GLEntry."Additional-Currency Amount";
        END;

        LocGLAcc."Consol. Translation Method" := OriginalTranslationMethod;
      END;

      //NC MIO-10 > DP
      {
      IF ((ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer) AND
      }
      IF ((ConsolidationSource."Import Format" IN [ConsolidationSource."Import Format"::FromBuffer,
                                                   ConsolidationSource."Import Format"::FromBufferNAV]) AND
      //NC MIO-10 < DP

          (NOT ConsolidationSource."Use GL Mapping"))
      THEN BEGIN
        IF GLEntry."Original Currency Code"<>'' THEN
          //NC OPT PCH GenJournalLine.VALIDATE("Currency Code",GLEntry."Original Currency Code");
          GenJournalLine."Currency Code" := GLEntry."Original Currency Code";
        IF GenJournalLine."Currency Code" = '' THEN BEGIN
          //NC OPT PCH GenJournalLine.VALIDATE("Amount (LCY)", GLEntry.Amount);
          GenJournalLine.Amount := GLEntry.Amount;
          GenJournalLine."Amount (LCY)" := GLEntry.Amount;
        END ELSE BEGIN
          //NC OPT PCH GenJournalLine.VALIDATE(Amount,GLEntry."Original Amount");
          GenJournalLine.Amount := GLEntry."Original Amount";
          //NC OPT PCH GenJournalLine.VALIDATE("Currency Factor",GLEntry."Original Amount" / GLEntry.Amount);
          GenJournalLine."Currency Factor" := GLEntry."Original Amount" / GLEntry.Amount;
        END;
      END;

      //NC MDTY01 > MP

      //NC MIO-10 > DP
      {
      IF ((ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer) AND
      }
      IF ((ConsolidationSource."Import Format" IN [ConsolidationSource."Import Format"::FromBuffer,
                                                   ConsolidationSource."Import Format"::FromBufferNAV]) AND
      //NC MIO-10 < DP

          (ConsolidationSource."Use GL Mapping"))
      THEN BEGIN
        IF NOT GLEntry."Use Tax" THEN BEGIN
          GenJournalLine."Currency Code" := GLEntry."Original Currency Code";
          GenJournalLine.Amount := ROUND(GLEntry."Original Amount",0.01);
          GenJournalLine."Amount (LCY)" := ROUND(GLEntry.Amount,0.01);
          GenJournalLine."Currency Factor" := GLEntry."Original Currency Factor";
        END ELSE BEGIN
          GenJournalLine."Currency Index Entry" := TRUE;
          GenJournalLine."Currency Index" := GLEntry."Original Currency Code";
          GenJournalLine.Amount := ROUND(GLEntry.Amount,0.01);
          GenJournalLine."Amount (LCY)" := ROUND(GLEntry.Amount,0.01);
        END;
      END;
      //NC MDTY01 < MP

      IF (GLEntry."Debit Amount" < 0) OR (GLEntry."Credit Amount" < 0)  OR
        //NC MIO-10 > DP
        {
         (GLEntry."Debit Quantity" < 0) OR (GLEntry."Credit Quantity" < 0)
        }
        ((GLEntry."Debit Quantity" < 0) AND (GLEntry."Debit Quantity" * GLEntry."Debit Amount" > 0)) OR
        ((GLEntry."Credit Quantity" < 0) AND (GLEntry."Credit Quantity" * GLEntry."Credit Amount" > 0))
        //NC MIO-10 < DP

      THEN
        //NC OPT PCH GenJournalLine.VALIDATE(Correction, TRUE);
        GenJournalLine.Correction := TRUE;
      //NC OPT PCH GenJournalLine.VALIDATE("Document No.", DocumentNo);
      GenJournalLine."Document No." := DocumentNo;
      GenJournalLine."Export Cons. Source Code" := ConsolidationSource.Code;
      GenJournalLine."Source Entry No." := GLEntry."Entry No.";
      GenJournalLine."Register No." := GLEntry."Register No.";
      GenJournalLine."Export Register No." := ConsSession;
      GenJournalLine."External Document Type" := GLEntry."External Document Type";
      GenJournalLine."External Document ID" := GLEntry."External Document ID";

      //NC MIO-10 > DP
      IF GLEntry."Posting Date" < ConsolidationSource."Allow Transformation To" THEN
        GenJournalLine."External Document Date" := GLEntry."Posting Date"
      ELSE
      //NC MIO-10 < DP

      GenJournalLine."External Document Date" := GLEntry."External Document Date";
      GenJournalLine."External Operation No" := GLEntry."External Operation No";
      GenJournalLine."External Document No." := GLEntry."External Document No.";
      GenJournalLine."External System ID" := ConsolidationSource."External System";
      GenJournalLine.Removed := GLEntry.Removed;
      GenJournalLine.Reposted := GLEntry.Reposted;

      //NC MDTM02 > MP
      {
      IF ((ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromNavision)
         AND (NOT NotUseMapp))
      THEN BEGIN
        GenJournalLine."Local G/L Account" := GLEntry."G/L Account No.";
      END;
      }

      //NC MIO-10 > DP
      GenJournalLine."Source User ID" := GLEntry."User ID";
      IF GLEntry."Original System ID"='' THEN
      GenJournalLine."Original System ID" := GenJournalLine."External System ID"
      ELSE
      //NC MIO-10 > DP

      //NC MBD30 > DP
      GenJournalLine."Original System ID" :=GLEntry."Original System ID";

      //NC NCS-2166 > DP
      IF ConsolidationSource."Reset Busines Unit for Offset" AND
         (OffsetExceptionsDT OR OffsetExceptionsCT) AND
         (GLAccountCode = '') THEN
        GenJournalLine."External System ID" := '';
      //NC NCS-2166 < DP

      IF GLEntry."Local G/L Account"<>'' THEN
        GenJournalLine."Local G/L Account" := GLEntry."Local G/L Account"
      ELSE
      //NC MBD30 < DP

      GenJournalLine."Local G/L Account" := GLEntry."G/L Account No.";
      //NC MDTM02 < MP
      //NC S1896 > PCH
      GenJournalLine."Source G/L Account No." := GLEntry."Source G/L Account No.";
      //NC S1896 < PCH

      IF (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer)
      THEN
      GenJournalLine."FA Operation" := GLEntry."FA Operation";

      GenJournalLine."Buffer Entry No." := GLEntry."Buffer Entry No.";
      GenJournalLine."Cons. Source Code" := GLEntry."Cons. Source Code";
      //NC MBD01 > MP
      {
      GenJournalLine."Begining Date" := GLEntry."Begining Date";
      GenJournalLine."Ending Date" := GLEntry."Ending Date";
      }
      GenJournalLine."Due Date" := GLEntry."Due Date";
      //NC MBD01 < MP
      //GenJournalLine."Corresp. G/L Account No." := GLEntry."Corresp. G/L Account No.";
      GenJournalLine."Description 2" := GLEntry."Description 2";
      //NC PIF010 > MP
      //NC MTD002 > AIG
      {
      GenJournalLine."Transaction Type" := GenJournalLine."Transaction Type"::Automatic;
      }
      //NC MTD002 < AIG
      //NC OPT PCH  !!!  GenJournalLine.Quantity := GLEntry.Quantity;
      GenJournalLine.VALIDATE(Quantity,GLEntry.Quantity);
      //NC OPT PCH GenJournalLine."Debit Quantity" := GLEntry."Debit Quantity";
      //NC OPT PCH GenJournalLine."Credit Quantity" := GLEntry."Credit Quantity";

      IF GenJournalLine."Amount (LCY)" = 0 THEN
        GenJournalLine."Allow Zero-Amount Posting" := TRUE;

      //NC APCOC-94 < DP
      GenJournalLine."Not Translate" := ConsolidationSource."Not Translate";
      //NC APCOC-94 > DP
      //NC APCOC-117 > RD
      GenJournalLine."Not Translate IFRS" := ConsolidationSource."Not Translate IFRS";
      //NC APCOC-117 < RD


      //NC APCOC-124 > DP
      IF ConsolidationSource."Reset Busines Unit for Offset" AND
         (OffsetExceptionsDT OR OffsetExceptionsCT) AND
         (GLAccountCode = '') THEN
        GenJournalLine."Local G/L Account" := '';
      //NC APCOC-124 < DP

      //NC NCS-1908 > DP
      IF ((ConsType = ConsType::Buffer) AND ConsolidationSource."Use GL Mapping") THEN
        IF ConvOfChartOfAccounts.GET(MappingCode,MappLineNo) THEN BEGIN
          IF ConvOfChartOfAccounts."Gen. Posting Type"<>0 THEN
            GenJournalLine."Gen. Posting Type" :=ConvOfChartOfAccounts."Gen. Posting Type";
          IF ConvOfChartOfAccounts."VAT Bus. Posting Group"<>'' THEN
            GenJournalLine."VAT Bus. Posting Group" :=ConvOfChartOfAccounts."VAT Bus. Posting Group";
          IF ConvOfChartOfAccounts."VAT Prod. Posting Group"<>'' THEN
            GenJournalLine."VAT Prod. Posting Group" :=ConvOfChartOfAccounts."VAT Prod. Posting Group";
        END;
      //NC NCS-1908 < DP

      Log.StartCounter(16);
      Log.StartCounter(10);
      //NC PIF010 < MP
      //NC PIF001 < DP
    END;

    PROCEDURE ConsBuffer2GLEntry@1210019(VAR GLEntryTmp@1210000 : TEMPORARY Record 17;ConsBuffer@1210001 : Record 50008;EntryNo@1210004 : Integer;DocNoToUse@1210002 : Code[20];Type@1210003 : 'Debit,Credit';AddGLAccount@1000000000 : Boolean;ConsSource@1000000001 : Record 50001;MappingCode@1000000003 : Code[20]);
    VAR
      CurrExchRate@1000000002 : Record 330;
    BEGIN
      //NC PIF001 > DP
      Log.StartCounter(-9);
      GLEntryTmp.INIT;
      GLEntryTmp."Entry No." := EntryNo;
      //NC MTD02 > AIG
      GLEntryTmp."Buffer Entry No." := ConsBuffer."Entry No.";
      //NC MTD02 < AIG
      GLEntryTmp."Document No." := DocNoToUse;
      GLEntryTmp."Posting Date" := ConsBuffer."Document Date";
      GLEntryTmp."Document Date" := ConsBuffer."Original Doc. Date";
      GLEntryTmp.Description := ConsBuffer.Description;

      //NC NCS-953 > DP
      IF ConsBuffer.Reverse THEN
        GLEntryTmp."Historical Date" := ConsBuffer."Original Doc. Date";
      //NC NCS-953 > DP

      IF Type = Type::Debit THEN BEGIN
        //IF AddGLAccount THEN
        //  CheckGLAccount(ConsBuffer."Cons. Source Code", EntryNo, ConsBuffer."Debit G/L Account No.",LedgerEntryDimTMP);
        GLEntryTmp."G/L Account No." := ConsBuffer."Debit G/L Account No.";
        //GLEntryTmp."Corresp. G/L Account No." := ConsBuffer."Credit G/L Account No.";
        //NC MDTC01 > MP

        //NC MDB30 > DP
        IF ConsBuffer."Debit Original G/L Account"<>'' THEN
          GLEntryTmp."Local G/L Account" := ConsBuffer."Debit Original G/L Account";
        //NC MDB30 < DP

        IF NOT ConsSource."Use GL Mapping" THEN BEGIN
          IF ConsSource."LCY Code" = '' THEN BEGIN
            GLEntryTmp.Amount := ConsBuffer."Amount (LCY)";
            GLEntryTmp."Debit Amount" := ConsBuffer."Amount (LCY)";
            GLEntryTmp."Original Amount" := ConsBuffer."Debit Original Amount";
            GLEntryTmp."Original Currency Code" := ConvertCurrencyCode2(ConsBuffer."Debit Currency Code");
          END ELSE BEGIN
            IF (ConsBuffer."Debit Currency Code" = '') OR (ConsBuffer."Debit Currency Code" = ConsSource."LCY Code")
            THEN BEGIN
              GLEntryTmp."Original Amount" := ConsBuffer."Amount (LCY)";
              GLEntryTmp."Original Currency Code" := ConsSource."LCY Code";
              GLEntryTmp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     ConsBuffer."Document Date",
                                     ConsSource."LCY Code",
                                     ConsBuffer."Amount (LCY)",
                                     CurrExchRate.ExchangeRate(
                                       ConsBuffer."Document Date",
                                       ConsSource."LCY Code"));
              GLEntryTmp."Debit Amount" := GLEntryTmp.Amount;
            END ELSE BEGIN
              GLEntryTmp."Original Amount" := ConsBuffer."Debit Original Amount";
              GLEntryTmp."Original Currency Code" := ConvertCurrencyCode2(ConsBuffer."Debit Currency Code");
              IF (GLEntryTmp."Original Currency Code" = '') AND (ConsBuffer."Debit Currency Code" = ConsBuffer."Credit Currency Code")
              THEN
                GLEntryTmp.Amount := GLEntryTmp."Original Amount"
              ELSE
                GLEntryTmp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                       ConsBuffer."Document Date",
                                       ConsSource."LCY Code",
                                       ConsBuffer."Amount (LCY)",
                                       CurrExchRate.ExchangeRate(
                                         ConsBuffer."Document Date",
                                         ConsSource."LCY Code"));
              GLEntryTmp."Debit Amount" := GLEntryTmp.Amount;
            END;
          END;
        END ELSE BEGIN //ветка тройки
          IF NOT TMPGLEntryException.GET(ConsBuffer."Entry No.") THEN BEGIN
            CASE ConsSource."Check Original Currency" OF
              ConsSource."Check Original Currency"::None : BEGIN
                GetAmountsNone(ConsBuffer,ConsSource."LCY Code",MappingCode,GLEntryTmp,Type);
              END;
              ConsSource."Check Original Currency"::Position : BEGIN
                GetAmountsPosition(ConsBuffer,ConsSource."LCY Code",MappingCode,GLEntryTmp,Type);
              END;
              ConsSource."Check Original Currency"::Rates : BEGIN
                GetAmountsRates(ConsBuffer,ConsSource."LCY Code",MappingCode,GLEntryTmp,Type);
              END;
            END;
          END ELSE BEGIN
            GLEntryTmp."Original Amount" := ConsBuffer."Amount (LCY)";
            GLEntryTmp.Amount := ConsBuffer."Amount (LCY)";
            GLEntryTmp."Debit Amount" := GLEntryTmp.Amount;
          END;
        END;
        //NC MDTC01 < MP
        GLEntryTmp.Quantity := ConsBuffer.Quantity;
        //NC PIF010 > MP
        GLEntryTmp."Debit Quantity" := ConsBuffer.Quantity;
        //NC PIF010 < MP
      END ELSE BEGIN
        //IF AddGLAccount THEN
        //  CheckGLAccount(ConsBuffer."Cons. Source Code", EntryNo, ConsBuffer."Credit G/L Account No.",LedgerEntryDimTMP);
        GLEntryTmp."G/L Account No." := ConsBuffer."Credit G/L Account No.";
        //GLEntryTmp."Corresp. G/L Account No." := ConsBuffer."Debit G/L Account No.";
        {
        GLEntryTmp.Amount := -ConsBuffer."Amount (LCY)";
        GLEntryTmp."Credit Amount" := ConsBuffer."Amount (LCY)";
        GLEntryTmp."Original Amount" := -ConsBuffer."Credit Original Amount";
        GLEntryTmp."Original Currency Code" := GetCurrencyCode(ConsBuffer."Credit Currency Code");
        GLEntryTmp.Quantity := -ConsBuffer.Quantity;
        }
        //NC MDTC01 > MP
        //NC MDB30 > DP
        IF ConsBuffer."Credit Original G/L Account"<>'' THEN
          GLEntryTmp."Local G/L Account" := ConsBuffer."Credit Original G/L Account";
        //NC MDB30 < DP

        IF NOT ConsSource."Use GL Mapping" THEN BEGIN
          IF ConsSource."LCY Code" = '' THEN BEGIN
            GLEntryTmp.Amount := -ConsBuffer."Amount (LCY)";
            GLEntryTmp."Credit Amount" := ConsBuffer."Amount (LCY)";
            GLEntryTmp."Original Amount" := -ConsBuffer."Credit Original Amount";
            GLEntryTmp."Original Currency Code" := ConvertCurrencyCode2(ConsBuffer."Credit Currency Code");
          END ELSE BEGIN
            IF (ConsBuffer."Credit Currency Code" = '') OR (ConsBuffer."Credit Currency Code" = ConsSource."LCY Code")
            THEN BEGIN
              GLEntryTmp."Original Amount" := -ConsBuffer."Amount (LCY)";
              GLEntryTmp."Original Currency Code" := ConsSource."LCY Code";
              GLEntryTmp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     ConsBuffer."Document Date",
                                     ConsSource."LCY Code",
                                     -ConsBuffer."Amount (LCY)",
                                     CurrExchRate.ExchangeRate(
                                       ConsBuffer."Document Date",
                                       ConsSource."LCY Code"));
              GLEntryTmp."Credit Amount" := -GLEntryTmp.Amount;
            END ELSE BEGIN
              GLEntryTmp."Original Amount" := -ConsBuffer."Credit Original Amount";
              GLEntryTmp."Original Currency Code" := ConvertCurrencyCode2(ConsBuffer."Credit Currency Code");
              IF (GLEntryTmp."Original Currency Code" = '') AND (ConsBuffer."Debit Currency Code" = ConsBuffer."Credit Currency Code")
              THEN
                GLEntryTmp.Amount := GLEntryTmp."Original Amount"
              ELSE
                GLEntryTmp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                       ConsBuffer."Document Date",
                                       ConsSource."LCY Code",
                                       -ConsBuffer."Amount (LCY)",
                                       CurrExchRate.ExchangeRate(
                                         ConsBuffer."Document Date",
                                         ConsSource."LCY Code"));
              GLEntryTmp."Credit Amount" := -GLEntryTmp.Amount;
            END;
          END;
        END ELSE BEGIN //ветка тройки
          IF NOT TMPGLEntryException.GET(ConsBuffer."Entry No.") THEN BEGIN
            CASE ConsSource."Check Original Currency" OF
              ConsSource."Check Original Currency"::None : BEGIN
                GetAmountsNone(ConsBuffer,ConsSource."LCY Code",MappingCode,GLEntryTmp,Type);
              END;
              ConsSource."Check Original Currency"::Position : BEGIN
                GetAmountsPosition(ConsBuffer,ConsSource."LCY Code",MappingCode,GLEntryTmp,Type);
              END;
              ConsSource."Check Original Currency"::Rates : BEGIN
                GetAmountsRates(ConsBuffer,ConsSource."LCY Code",MappingCode,GLEntryTmp,Type);
              END;
            END;
          END ELSE BEGIN
            GLEntryTmp."Original Amount" := -ConsBuffer."Amount (LCY)";
            GLEntryTmp.Amount := -ConsBuffer."Amount (LCY)";
            GLEntryTmp."Credit Amount" := -GLEntryTmp.Amount;
          END;
        END;
        //NC MDTC01 < MP
        GLEntryTmp.Quantity := -ConsBuffer.Quantity;
        //NC PIF010 > MP
        GLEntryTmp."Credit Quantity" := ConsBuffer.Quantity;
        //NC PIF010 < MP
      END;
      GLEntryTmp."Buffer Entry No." := ConsBuffer."Entry No.";
      GLEntryTmp."Cons. Source Code" := ConsBuffer."Cons. Source Code";
      GLEntryTmp."External Document Type" := ConsBuffer."Document Type";
      GLEntryTmp."External Document ID" := ConsBuffer."Document ID";
      GLEntryTmp."External Operation No" := ConsBuffer."Operation No.";
      GLEntryTmp."External Document Date" := ConsBuffer."Original Doc. Date";
      //NC MDB01 > MP
      {
      GLEntryTmp."Begining Date" := ConsBuffer."Begining Date";
      GLEntryTmp."Ending Date" := ConsBuffer."Ending Date";
      }
      GLEntryTmp."Due Date" := ConsBuffer."Due Date";
      //NC MDB01 < MP
      GLEntryTmp."FA Operation" := ConsBuffer."FA Operation";
      GLEntryTmp."Register No." := ConsBuffer."Consolidation Register";
      GLEntryTmp."Description 2" := ConsBuffer."Description 2";
      GLEntryTmp."External Document No." := ConsBuffer."Document No.";
      GLEntryTmp.INSERT;
      Log.StartCounter(9);
      //NC PIF001 < DP
    END;

    PROCEDURE ImportFromNavision@1000000001(ConsolidationSource@1000000000 : Record 50001);
    VAR
      TempGenJournalLine@1000000013 : TEMPORARY Record 81;
      TempJournalLineDimension@1000000015 : TEMPORARY Record 356;
      LastDocumentNo@1000000012 : Code[20];
      ConsRegister@1000000018 : Record 50005;
      GenJnlPostBatch@1000000022 : Codeunit 13;
      NoSerManag@1000000021 : Codeunit 396;
      DocNoToUse@1000000024 : Code[20];
      Text55000@1000000034 : TextConst 'ENU=Linking G/L entries and elimination entries:\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;RUS=Производится связь элиминирующих и исходных проводок:\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      EntryCount@1000000036 : Integer;
      EntryCounter@1000000037 : Integer;
      LineCount@1000000009 : Integer;
      LineCounter@1000000008 : Integer;
      "---------------------"@1000000040 : Integer;
      GLEntry@1000000001 : Record 17;
      GenJournalLine@1000000002 : Record 81;
      LedgerEntryDim@1000000004 : Record 355;
      JournalLineDimension@1000000014 : Record 356;
      TMPDimCheck@1000000019 : TEMPORARY Record 348;
      GenJnlLineCheck@1000000020 : Record 81;
      InterCompany@1000000032 : Boolean;
      ConsStirngsNum@1000000007 : Integer;
      StringsToConsNum@1000000006 : Integer;
      DlgWindow@1000000033 : Dialog;
      ImportedEntries@1000000030 : Integer;
      Indicator@1000000005 : Dialog;
      ErrorCounter@1000000038 : Integer;
      NextRegNo@1000000017 : Integer;
      FromDate@1000000011 : Date;
      ToDate@1000000010 : Date;
      ConsType@1210000 : 'Buffer,Navision';
      OperType@1210001 : 'Normal,Repost';
      GLEntry1@1210002 : TEMPORARY Record 17;
      GLAcc@1210003 : Code[20];
      GenJnlLine@1210005 : Record 81;
      ExchangeCorrNav@1210006 : Boolean;
      GLEntry2@1210007 : Record 17;
      Text55001@1210008 : TextConst 'ENU=There are entries not in account period. Continue anyway?;RUS=Существуют операции вне открытого периода. Продолжить?';
      Text55002@1210009 : TextConst 'ENU=Consolidation was interupted.;RUS=Консолидация прервана.';
      EntriesNotInAccountPeriod@1210010 : Boolean;
      ConsolidationSource11@1210011 : Record 50001;
      NoSeries@1210012 : Code[10];
      LastCorrEntry@1210013 : Boolean;
      GLEntryLastInTransaction@1210014 : Record 17;
      NoSeriesLine1@1210018 : Record 309;
      NoSeriesLine2@1210019 : Record 309;
      NoSeriesLine3@1210020 : Record 309;
      NoSeriesRec@1210021 : Record 308;
      "NC PIF001 >"@1210022 : Integer;
      GLEntryCheck@1210023 : Record 17;
      TMPDimCheckNeedMapp@1210027 : TEMPORARY Record 348;
      LedgerEntryDimCheck@1210024 : Record 355;
      NoOfEntriesToCheck@1210025 : Integer;
      NoOfEntriesChecked@1210026 : Integer;
      IndicatorCheckErrors@1210028 : Dialog;
      SpecCorrSelectedDim@1000000003 : Record 369;
      FromEntryNo@1000000016 : Integer;
      MappingCode@1000000023 : Code[20];
      DefaultDimension@1000000025 : Record 352;
    BEGIN
      Log.WriteLogFile('ImportFromNavision',TRUE,FALSE,1);
      Log.WriteLogFile('Проверка общая START',FALSE,FALSE,-2);

      GLSetup.GET;
      CurrentCompany.GET(COMPANYNAME);
      GLSetup.TESTFIELD("Additional Reporting Currency");
      GLSetup.TESTFIELD("Allow Posting From");
      GLSetup.TESTFIELD("Allow Posting To");
      ConsolidationSetup.GET;
      ConsolidationSetup.TESTFIELD("Remote Consolidation Source",FALSE);
      ConsolidationSetup.TESTFIELD(ConsolidationSetup."Gen. Jnl. Template");
      ConsolidationSetup.TESTFIELD("Counterparty Dim Code");
      ConsolidationSetup.TESTFIELD("IC Dimension Code");
      ConsolidationSource.TESTFIELD("Gen. Journal Batch");
      ConsolidationSource.TESTFIELD("Removed Journal Batch");
      ConsolidationSource.TESTFIELD("Reposted Journal Batch");
      ConsolidationSetup.TESTFIELD("Exception G/L Account No.");
      //NC MDA01 > MP
      {
      ConsolidationSetup.TESTFIELD("Source Code");
      }
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD(Transformation);
      //NC MDA01 < MP
      //NC PIF010 > MP
      ConsolidationSetup.TESTFIELD("Fin. Instrument Dimension Code");
      //NC PIF010 < MP
      //NC MDTM02 > MP
      ConsolidationSetup.TESTFIELD("Exception Batch Name");
      //NC MDTM02 < MP

      CLEAR(SpecCorrDimFilter);
      SpecCorrSelectedDim.RESET;
      SpecCorrSelectedDim.SETRANGE("User ID",'');
      SpecCorrSelectedDim.SETRANGE("Object Type",6);
      SpecCorrSelectedDim.SETRANGE("Object ID",CODEUNIT::"Consolidation Management");
      SpecCorrSelectedDim.SETRANGE("Analysis View Code",'');
      IF SpecCorrSelectedDim.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          SpecCorrDimFilter := SpecCorrDimFilter + SpecCorrSelectedDim."Dimension Code" + '|';
        UNTIL SpecCorrSelectedDim.NEXT = 0;
        SpecCorrDimFilter := DELSTR(SpecCorrDimFilter,STRLEN(SpecCorrDimFilter),1);
      END;


      //NC Серии номеров для фин. журналов
      ConsolidationSource.TESTFIELD("Source  No. Series");
      IF NoSeriesRec.GET(ConsolidationSource."Source  No. Series") THEN BEGIN
        NoSerManag.SetNoSeriesLineFilter(NoSeriesLine1,ConsolidationSource."Source  No. Series",0D);
        CLEAR(NoSeriesLine1);
        CLEAR(NoSerManag);
      END;

      ConsolidationSource.TESTFIELD("Reposted  No. Series");
      IF NoSeriesRec.GET(ConsolidationSource."Reposted  No. Series") THEN BEGIN
        NoSerManag.SetNoSeriesLineFilter(NoSeriesLine2,ConsolidationSource."Reposted  No. Series",0D);
        CLEAR(NoSeriesLine2);
        CLEAR(NoSerManag);
      END;

      ConsolidationSource.TESTFIELD("Removed  No. Series");
      IF NoSeriesRec.GET(ConsolidationSource."Removed  No. Series") THEN BEGIN
        NoSerManag.SetNoSeriesLineFilter(NoSeriesLine3,ConsolidationSource."Removed  No. Series",0D);
        CLEAR(NoSeriesLine3);
        CLEAR(NoSerManag);
      END;

      IF GenJnlLineExists(ConsolidationSetup."Gen. Jnl. Template",
                          ConsolidationSource."Gen. Journal Batch",GenJnlLineCheck) THEN
        IF CONFIRM(STRSUBSTNO(Text000,GenJournalLine.TABLECAPTION,
                   GenJournalLine.FIELDCAPTION(GenJournalLine."Journal Template Name"),
                   ConsolidationSetup."Gen. Jnl. Template",
                   GenJournalLine.FIELDCAPTION(GenJournalLine."Journal Batch Name"),
                   ConsolidationSource."Gen. Journal Batch")) THEN BEGIN
          GenJnlLineCheck.DELETEALL;
          GenJnlLineCheck.RESET;
          GenJnlLineCheck.SETRANGE("Journal Template Name", ConsolidationSetup."Gen. Jnl. Template");
          GenJnlLineCheck.SETFILTER("Journal Batch Name", '%1|%2',  ConsolidationSource."Reposted Journal Batch",
            ConsolidationSource."Removed Journal Batch");
          GenJnlLineCheck.DELETEALL(TRUE);
        END ELSE BEGIN
          MESSAGE(Text001);
          EXIT;
        END;
      CreateConsDimList(TMPDimCheck,ConsolidationSource,FALSE);

      //NC Проверка операций вне открытого периода
      EntriesNotInAccountPeriod := FALSE;
      GLEntry2.CHANGECOMPANY(ConsolidationSource."Company Name");
      GLEntry2.RESET;
      GLEntry2.SETRANGE("FA Operation",FALSE);
      IF ConsolidationSource."Last G/L Entry No." > 0 THEN
        GLEntry2.SETFILTER("Entry No.", '>%1', ConsolidationSource."Last G/L Entry No.");

      GLEntry2.SETCURRENTKEY("Posting Date");
      IF GLEntry2.FINDFIRST AND (GLEntry2."Posting Date" < GLSetup."Allow Posting From")
      THEN
        EntriesNotInAccountPeriod := TRUE;
      IF GLEntry2.FINDLAST AND (GLEntry2."Posting Date" > GLSetup."Allow Posting To")
      THEN
        EntriesNotInAccountPeriod := TRUE;

      IF EntriesNotInAccountPeriod THEN
        IF NOT CONFIRM(Text55001) THEN BEGIN
          MESSAGE(Text55002);
          EXIT;
        END;


      GLEntry.CHANGECOMPANY(ConsolidationSource."Company Name");
      LedgerEntryDim.CHANGECOMPANY(ConsolidationSource."Company Name");

      //NC PIF001 > DP
      LocGLSetup.CHANGECOMPANY(ConsolidationSource."Company Name");
      LocGLAcc.CHANGECOMPANY(ConsolidationSource."Company Name");
      LocGLSetup.GET;
      IF NOT ((ConsolidationSource."Income Currency Factor"=1) AND (ConsolidationSource."Balance Currency Factor"=1)) THEN
        IF ConsolidationSource."Income Currency Factor"=1 THEN
          ERROR(Text009,ConsolidationSource.FIELDCAPTION("Income Currency Factor"))
        ELSE
          ERROR(Text009,ConsolidationSource.FIELDCAPTION("Balance Currency Factor"));
      TranslationNeeded := ((ConsolidationSource."Income Currency Factor"<>1) OR
                            (ConsolidationSource."Balance Currency Factor"<>1));
      //NC PIF001 < DP

      //NC Исключение в фирмах с валютой USD
      //IF CurrentCompany.Type IN [CurrentCompany.Type::"2",CurrentCompany.Type::"3"]
      IF CurrentCompany."Company Type" IN [CurrentCompany."Company Type"::"1"]
      THEN BEGIN
        GLEntry.SETCURRENTKEY("FA Operation");
        GLEntry.SETRANGE("FA Operation",FALSE);
      END;

      IF ConsolidationSource."Last G/L Entry No." > 0 THEN
        GLEntry.SETFILTER("Entry No.", '>%1', ConsolidationSource."Last G/L Entry No.");

      IF NOT GLEntry.FINDFIRST THEN BEGIN
        MESSAGE(Text002, ConsolidationSource."Company Name");
        EXIT;
      END;

      //Проверка ошибок
      GLEntryCheck.CHANGECOMPANY(ConsolidationSource."Company Name");
      LedgerEntryDimCheck.CHANGECOMPANY(ConsolidationSource."Company Name");

      // Исключение в фирмах с валютой USD
      //IF CurrentCompany.Type IN [CurrentCompany.Type::"2",CurrentCompany.Type::"3"]
      IF CurrentCompany."Company Type" IN [CurrentCompany."Company Type"::"1"]
      THEN BEGIN
        GLEntryCheck.SETCURRENTKEY("FA Operation");
        GLEntryCheck.SETRANGE("FA Operation",FALSE);
      END;


      IF ConsolidationSource."Last G/L Entry No." > 0 THEN
        GLEntryCheck.SETFILTER("Entry No.", '>%1', ConsolidationSource."Last G/L Entry No.");
      GLEntryCheck.FINDSET(FALSE,FALSE);
      NoOfEntriesToCheck := GLEntryCheck.COUNT;
      NoOfEntriesChecked := 0;

      CreateConsDimList(TMPDimCheckNeedMapp,ConsolidationSource,TRUE);

      CreateConsRegister(ConsolidationSource.Code,0,0,TODAY,
        GLEntryCheck."Source Posting Date", GLEntryCheck."Ending Date", ConsRegister);

      Log.WriteLogFile('Проверка общая END',FALSE,FALSE,2);
      Log.WriteLogFile(Text005 + 'START',FALSE,FALSE,-2);

      IndicatorCheckErrors.OPEN(Text005 + '\' +
                                '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      REPEAT
        NoOfEntriesChecked += 1;
        CheckErrorsConsFromNav(GLEntryCheck,TMPDimCheckNeedMapp,LedgerEntryDimCheck,
          ConsRegister,ConsolidationSource);
        IndicatorCheckErrors.UPDATE(1, ROUND(NoOfEntriesChecked *
                                    (10000 / NoOfEntriesToCheck),1));

      UNTIL GLEntryCheck.NEXT = 0;
      IndicatorCheckErrors.CLOSE;
      //ErrJournal.RESET;
      //ErrJournal.SETRANGE("Cons. Source Code", ConsolidationSource.Code);
      //ErrJournal.SETRANGE("Cons. Register", ConsRegister."No.");
      Log.WriteLogFile(Text005 + 'END',FALSE,FALSE,2);
      //IF ErrJournal.FINDSET THEN BEGIN
      //  MESSAGE(Text004);
      //  EXIT;
      //END ELSE
      //  ConsRegister.DELETE(TRUE);
      Log.WriteLogFile(Text003 + 'START',FALSE,FALSE,-2);
      Indicator.OPEN(Text003 + ConsolidationSource."Company Name" + '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');
      StringsToConsNum := GLEntry.COUNT;
      ConsStirngsNum := 0;
      ImportedEntries := 0;

      REPEAT
        ConsStirngsNum += 1;
        ImportedEntries += 1;

        IF ConsStirngsNum = 1 THEN BEGIN
          FromEntryNo := GLEntry."Entry No.";
          CreateConsRegister(ConsolidationSource.Code,GLEntry."Entry No.",GLEntry."Entry No.",GLEntry."Posting Date",
            GLEntry."Source Posting Date", GLEntry."Ending Date", ConsRegister);
        END;
        IF ConsStirngsNum = StringsToConsNum THEN
          UpdateConsRegister(FromEntryNo,GLEntry."Entry No.",GLEntry."Posting Date", GLEntry."Source Posting Date", GLEntry.
      "Ending Date",
            ConsRegister,0,0,0,0);

        CreateJnlLine(GenJournalLine, ConsolidationSource, GLEntry, GLEntry."Document No.", ConsRegister."No." ,
          LedgerEntryDim, 0, ConsType::Navision, OperType::Normal, FALSE, FALSE,0,MappingCode);
        IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
          CloseOperation := FALSE;
          LedgerEntryDim.RESET;
          LedgerEntryDim.SETRANGE("Table ID", 17);
          LedgerEntryDim.SETRANGE("Entry No.", GLEntry."Entry No.");
          IF LedgerEntryDim.FINDSET(FALSE,FALSE) THEN
            REPEAT
              IF TMPDimCheck.GET(LedgerEntryDim."Dimension Code") THEN
                CreateJnlLineDimensions(GenJournalLine, JournalLineDimension, LedgerEntryDim, ConsRegister."No.",
                  InterCompany, ConsolidationSource,GLEntry."G/L Account No.",'');
            UNTIL LedgerEntryDim.NEXT = 0;
        END;
        GenJournalLine.INSERT;

        {  // НЕ ИСПОЛЬЗУЕТСЯ
        //Исключающая корреспонденция МСФО
        IF NOT GenJournalLine."Except Correspondence" THEN BEGIN
        //если <>, то это исключающая корреспонденция, следовательно реклассификацию проверять не надо
          GLAcc := CheckReclassCorrespondenseMSFO(GLEntry, ConsolidationSource.Code);
          IF GLAcc <> '' THEN BEGIN
            GLEntry1.COPY(GLEntry);
            IF CheckExchangeCorrNav(GLEntry1,ConsolidationSource.Code) THEN
              ExchangeCorrNav := TRUE;
            GLEntry1."G/L Account No." := GLAcc;
            GLEntry1.Amount := - GLEntry.Amount;
            GLEntry1."Debit Amount" := GLEntry."Credit Amount";
            GLEntry1."Credit Amount" := GLEntry."Debit Amount";
            GLEntry1."Original Amount" := - GLEntry."Original Amount";
            GLEntry1."Original Debit Amount" := GLEntry."Original Credit Amount";
            GLEntry1."Original Credit Amount" := GLEntry."Original Debit Amount";
            CreateJnlLine(GenJournalLine, ConsolidationSource, GLEntry1, GLEntry1."Document No.", ConsRegister."No." ,
              LedgerEntryDim, 0, ConsType::Navision, OperType::Normal, TRUE, ExchangeCorrNav);
            GenJournalLine.INSERT(TRUE);
            CopyEntryDim(GLEntry,GenJournalLine, ConsolidationSource."Company Name",ConsolidationSource);
          END;
        END;
        }
        Indicator.UPDATE(1, ROUND(ConsStirngsNum * (10000 / StringsToConsNum),1));
        ConsolidationSource."Last G/L Entry No." := GLEntry."Entry No.";
      UNTIL GLEntry.NEXT = 0;
      InsertRoundingCorrectionLines(ConsolidationSource.Code, GenJournalLine, JournalLineDimension);

      Indicator.CLOSE;
      ConsolidationSource."Last Consolidation Date" := TODAY;
      ConsolidationSource."Last Consolidation Time" := TIME;
      ConsolidationSource.MODIFY;
      ConsRegister.MODIFY;

      Log.WriteLogFile(Text003 + 'END',FALSE,FALSE,2);
      Log.WriteLogFile('ImportFromNavision',FALSE,TRUE,1);

      MESSAGE(Text006,ConsolidationSource.Code)
    END;

    PROCEDURE ImportFromBufferTable@1000000002(VAR JobProcStatus@1000000035 : TEMPORARY Record 50063);
    VAR
      GenJnlLineCheck@1000000003 : Record 81;
      GenJournalLine@1000000004 : Record 81;
      TMPDimCheck@1000000005 : TEMPORARY Record 348;
      ConsBuffer@1000000007 : Record 50008;
      GLEntryTMP@1000000020 : TEMPORARY Record 17;
      LedgerEntryDimTMP@1000000006 : TEMPORARY Record 355;
      JournalLineDimension@1000000016 : Record 356;
      GenJnlBatch@1000000023 : Record 232;
      NoSerManag@1000000021 : Codeunit 396;
      Indicator@1000000008 : Dialog;
      InterCompany@1000000012 : Boolean;
      ConsStirngsNum@1000000011 : Integer;
      StringsToConsNum@1000000010 : Integer;
      ImportedEntries@1000000009 : Integer;
      FromDate@1000000014 : Date;
      ToDate@1000000013 : Date;
      ErrorCounter@1000000018 : Integer;
      DocNoToUse@1000000022 : Code[20];
      GenJnlLine1@1000000019 : Record 81;
      GenJnlLine2@1000000024 : Record 81;
      GenJnlLine4@1000000026 : Record 81;
      Type@1210000 : 'Debit,Credit';
      ConsRegister@1210001 : Record 50005;
      EntryType@1210002 : 'Remove,Repost';
      OperType@1210003 : 'Normal,Repost';
      LastNo@1210004 : Integer;
      FirstNo@1210005 : Integer;
      "NC PIF001 >"@1210006 : Integer;
      ConsBuffIntContrDebit@1210007 : Record 50008;
      ConsBuffIntContrCredit@1210008 : Record 50008;
      NoOfEntriesToCheck@1210009 : Integer;
      NoOfCurrentEntryToCheck@1210010 : Integer;
      OpType@1210011 : 'Debit,Credit';
      IndicatorCheckErrors@1210012 : Dialog;
      ConsBuffCheck@1000000000 : Record 50008;
      TMPDimCheckMapp@1000000001 : TEMPORARY Record 348;
      ConsBufferCorr@1000000015 : Record 50008;
      SpecCorrSelectedDim@1000000017 : Record 369;
      FirstDate@1000000025 : Date;
      LastDate@1000000027 : Date;
      CoAMapping@1000000028 : Record 50002;
      CoAMappRef@1000000029 : RecordRef;
      TotalSuccesLoaded@1000000030 : Integer;
      TotalExceptLoaded@1000000032 : Integer;
      TotalLoadedWithoutJnl@1000000031 : Integer;
      "NCV > MDM02"@1000000002 : Integer;
      ConsolidationSource@1000000033 : Record 50001;
      "NCV < MDM02"@1000000034 : Integer;
      CoAMappingMask@1000000037 : Record 50020;
      TempMapping@1000000039 : TEMPORARY Record 50022;
      OneMapping@1000000036 : Boolean;
    BEGIN
      //NC MDM02 > PCH
      JobProcStatusLineNo := JobProcStatus."Line No.";
      JobProcStatus.TESTFIELD("Type Processing",JobProcStatus."Type Processing"::"Cons. Source");
      ConsolidationSource.GET(JobProcStatus.Processor);
      //NC MDM02 < PCH
      //NC MDB01.1 > MP
      CreateConsRegister(ConsolidationSource.Code, FirstNo, LastNo,
        ConsBuffer."Document Date", FirstDate, LastDate, ConsRegister);
      JobProcStatus."Cons. Register" := ConsRegister."No.";
      JobProcStatus."Begin Entry No." := ConsRegister."From Entry No.";
      JobProcStatus."Last Entry No." := ConsRegister."To Entry No.";
      JobProcStatus.MODIFY;
      COMMIT;
      //NC MDB01.1 < MP
      Log.WriteLogFile('ImportFromBufferTable',TRUE,FALSE,1);
      Log.WriteLogFile('Проверка общая START',FALSE,FALSE,-2);

      GLSetup.GET;
      GLSetup.TESTFIELD("Additional Reporting Currency");

      ConsolidationSetup.GET;
      ConsolidationSetup.TESTFIELD("Remote Consolidation Source",FALSE);
      ConsolidationSetup.TESTFIELD("Gen. Jnl. Template");
      ConsolidationSetup.TESTFIELD("IC Dimension Code");
      //NC MTD03 > AIG
      ConsolidationSetup.TESTFIELD("Deal Dimension Code");
      //NC MTD03 < AIG

      ConsolidationSource.TESTFIELD("Source  No. Series");
      ConsolidationSource.TESTFIELD("Gen. Journal Batch");
      //NC MDR01 > MP
      ConsolidationSource.TESTFIELD("Reposted Journal Batch");
      ConsolidationSource.TESTFIELD("Removed Journal Batch");
      //NC MDR01 < MP
      //NC MTD06 > AIG
      ConsolidationSource.TESTFIELD("Offset Accounts Journal Batch");
      ConsolidationSource.TESTFIELD("Speshial Control Journal Batch");
      //NC MTD06 < AIG
      MovingDataSetup.GET;

      //NC 1619 > DP
      IF MovingDataSetup."Do Not Copy Dimensions Dt Ct" THEN BEGIN
        TMPDimNotToCopy.RESET;
        TMPDimNotToCopy.DELETEALL;
        SpecCorrSelectedDim.RESET;
        SpecCorrSelectedDim.SETRANGE("User ID",'');
        SpecCorrSelectedDim.SETRANGE("Object Type",6);
        SpecCorrSelectedDim.SETRANGE("Object ID",CODEUNIT::"Consolidation Management");
        SpecCorrSelectedDim.SETRANGE("Analysis View Code",'');
        IF SpecCorrSelectedDim.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            TMPDimNotToCopy.INIT;
            TMPDimNotToCopy.Code := SpecCorrSelectedDim."Dimension Code";
            TMPDimNotToCopy.INSERT;
          UNTIL SpecCorrSelectedDim.NEXT = 0;
        END;
      END;
      //NC 1619 < DP

      IF MovingDataSetup."Max Entries in Transformation" = 0 THEN
        MovingDataSetup.FIELDERROR("Max Entries in Transformation");
      //NC MAU02 > MP
      ConsolidationSource.TESTFIELD("Closed Period Journal Batch");
      //NC MAU02 < MP
      //NC MDA01 > MP
      {
      ConsolidationSetup.TESTFIELD("Source Code");
      }
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD(Transformation);
      //NC MDA01 < MP
      //NC PIF010 > MP
      ConsolidationSetup.TESTFIELD("Fin. Instrument Dimension Code");
      ConsolidationSource.TESTFIELD("External System");
      //NC PIF010 < MP
      //NC MDTM02 > MP
      IF ConsolidationSource."Use GL Mapping" THEN BEGIN
        ConsolidationSetup.TESTFIELD("Exception Batch Name");
        //NC MDTY01 > MP
        ConsolidationSetup.TESTFIELD("FX Difference G/L Account No.");
        ConsolidationSetup.TESTFIELD("FX OffBS Diff. G/L Account No.");
        ConsolidationSetup.TESTFIELD("Debit FX Diff. Dim. Code");
        ConsolidationSetup.TESTFIELD("Credit FX Diff. Dim. Code");
        SynchronizeFXDimensions;
        CheckCurrencies;
        //NC MDTY01 < MP
        //NC MDTM02.1 > MP
        ConsolidationSource.TESTFIELD("Mapping Code");
        CheckUseOfMask(TempMapping,ConsolidationSource."Mapping Code",0,OneMapping); // 0-Это GL, 1-FA
        //NC MDTM02.1 < MP
      END;
      //NC MDTM02 < MP
      GenJnlBatch.GET(ConsolidationSetup."Gen. Jnl. Template",ConsolidationSource."Gen. Journal Batch");

      ConsBuffer.RESET;
      ConsBuffer.SETCURRENTKEY("Export Consolidation Register","Export Cons. Source Code");
      ConsBuffer.SETRANGE("Export Cons. Source Code", ConsolidationSource.Code);
      ConsBuffer.SETRANGE("Export Consolidation Register", 0);

      IF NOT ConsBuffer.FINDSET(FALSE,FALSE) THEN BEGIN
        MESSAGE(Text007, ConsolidationSource."Company Name");
        EXIT;
      END;

      //NC MDB01 > MP
      ConsBuffer.SETCURRENTKEY("Export Consolidation Register","Export Cons. Source Code","Document Date");
      ConsBuffer.SETRANGE("Export Cons. Source Code", ConsolidationSource.Code);
      ConsBuffer.SETRANGE("Export Consolidation Register", 0);
      ConsBuffer.FINDFIRST;
      FirstDate := ConsBuffer."Document Date";
      ConsBuffer.FINDLAST;
      LastDate := ConsBuffer."Document Date";

      ConsBuffer.SETCURRENTKEY("Export Consolidation Register","Export Cons. Source Code");
      //NC MDB01 < MP

      ConsBuffer.FINDLAST;
      LastNo := ConsBuffer."Entry No.";
      ConsBuffer.FINDFIRST;
      FirstNo := ConsBuffer."Entry No.";

      //NC MDTC01 > MP
      {
      IF GenJnlLineExists(ConsolidationSetup."Gen. Jnl. Template",
                          ConsolidationSource."Gen. Journal Batch",GenJnlLineCheck) THEN
        IF CONFIRM(STRSUBSTNO(Text000,GenJournalLine.TABLECAPTION,
                   GenJournalLine.FIELDCAPTION(GenJournalLine."Journal Template Name"),
                   ConsolidationSetup."Gen. Jnl. Template",
                   GenJournalLine.FIELDCAPTION(GenJournalLine."Journal Batch Name"),
                   ConsolidationSource."Gen. Journal Batch")) THEN BEGIN
          GenJnlLineCheck.DELETEALL(TRUE);
        END ELSE
          ERROR(Text001);

      IF GenJnlLineExists(ConsolidationSetup."Gen. Jnl. Template",
                          ConsolidationSource."Reposted Journal Batch",GenJnlLineCheck) THEN
        IF CONFIRM(STRSUBSTNO(Text000,GenJournalLine.TABLECAPTION,
                   GenJournalLine.FIELDCAPTION(GenJournalLine."Journal Template Name"),
                   ConsolidationSetup."Gen. Jnl. Template",
                   GenJournalLine.FIELDCAPTION(GenJournalLine."Journal Batch Name"),
                   ConsolidationSource."Reposted Journal Batch")) THEN BEGIN
          GenJnlLineCheck.DELETEALL(TRUE);
        END ELSE
          ERROR(Text001);

      IF GenJnlLineExists(ConsolidationSetup."Gen. Jnl. Template",
                          ConsolidationSource."Removed Journal Batch",GenJnlLineCheck) THEN
        IF CONFIRM(STRSUBSTNO(Text000,GenJournalLine.TABLECAPTION,
                   GenJournalLine.FIELDCAPTION(GenJournalLine."Journal Template Name"),
                   ConsolidationSetup."Gen. Jnl. Template",
                   GenJournalLine.FIELDCAPTION(GenJournalLine."Journal Batch Name"),
                   ConsolidationSource."Removed Journal Batch")) THEN BEGIN
          GenJnlLineCheck.DELETEALL(TRUE);
        END ELSE
          ERROR(Text001);
      }
      //NC MDTC01 < MP

      CreateConsDimList(TMPDimCheck,ConsolidationSource,FALSE);
      //NC PIF010 > MP
      CreateConsDimList(TMPDimCheckMapp,ConsolidationSource,TRUE);
      TempDebitLedgEntryDim.RESET;
      TempCreditLedgEntryDim.RESET;
      TempDebitLedgEntryDim.DELETEALL;
      TempCreditLedgEntryDim.DELETEALL;
      CLEAR(SpecCorrDimFilter);
      SpecCorrSelectedDim.RESET;
      SpecCorrSelectedDim.SETRANGE("User ID",'');
      SpecCorrSelectedDim.SETRANGE("Object Type",6);
      SpecCorrSelectedDim.SETRANGE("Object ID",CODEUNIT::"Consolidation Management");
      SpecCorrSelectedDim.SETRANGE("Analysis View Code",'');
      IF SpecCorrSelectedDim.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          SpecCorrDimFilter := SpecCorrDimFilter + SpecCorrSelectedDim."Dimension Code" + '|';
        UNTIL SpecCorrSelectedDim.NEXT = 0;
        SpecCorrDimFilter := DELSTR(SpecCorrDimFilter,STRLEN(SpecCorrDimFilter),1);
      END ELSE
        SpecCorrDimFilter := '!-!NONE!-!';
      //NC PIF010 < MP

      //Проверка наличия ошибок


      //NC PIF003 > DP
      IF NOT ConsolidationSource."Use GL Mapping" THEN BEGIN
        ConsBuffCheck.COPY(ConsBuffer);
        NoOfCurrentEntryToCheck :=0;
        NoOfEntriesToCheck := ConsBuffCheck.COUNT;
        //NC MDM02 > PCH
        IF GUIALLOWED THEN
        //NC MDM02 < PCH
          IndicatorCheckErrors.OPEN(Text005 + '\' +
                                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');
        IF ConsBuffCheck.FINDSET(FALSE,FALSE) THEN BEGIN
          //NC MDB01 > MP
          {
          CreateConsRegister(ConsolidationSource.Code, 0, 0,
            TODAY, ConsBuffer."Begining Date", ConsBuffer."Ending Date", ConsRegister);
          }
          CreateConsRegister(ConsolidationSource.Code, 0, 0,
            TODAY, 0D, 0D, ConsRegister);
          //NC MDB01 < MP

          REPEAT
            NoOfCurrentEntryToCheck += 1;
            CheckAcTypeSetupCorrespondence(ConsolidationSource.Code,ConsBuffCheck,
            '',ConsRegister."No.");
            //NC MDM02 > PCH
            IF GUIALLOWED THEN
            //NC MDM02 < PCH
              IndicatorCheckErrors.UPDATE(1, ROUND(NoOfCurrentEntryToCheck *
                                          (10000 / NoOfEntriesToCheck),1));
          UNTIL ConsBuffCheck.NEXT = 0;
          //NC MDB01 > MP
          {
          ErrJournal.RESET;
          ErrJournal.SETRANGE("Cons. Source Code", ConsBuffCheck."Cons. Source Code");
          ErrJournal.SETRANGE("Cons. Register", ConsRegister."No.");
          IF ErrJournal.FINDSET THEN BEGIN
            ErrorCounter := 1;
          END ELSE BEGIN
            ErrorCounter := 0;
            ConsRegister.DELETE;
            CLEAR(ConsRegister);
          END;
          }
          //NC MDB01 < MP

        END;
      END;
      //NC PIF003 < DP

      //NC PIF010 > MP
      {
      ConsBuffIntContrDebit.COPY(ConsBuffer);
      ConsBuffIntContrDebit.SETFILTER("Debit Int Contragent",'<>%1',0);
      ConsBuffIntContrCredit.COPY(ConsBuffer);
      ConsBuffIntContrCredit.SETFILTER("Сredit Int Contragent",'<>%1',0);
      NoOfEntriesToCheck := ConsBuffIntContrDebit.COUNT + ConsBuffIntContrCredit.COUNT;

      IF NoOfEntriesToCheck <> 0 THEN BEGIN

        CreateConsRegister(ConsolidationSource.Code, 0, 0,
          TODAY, ConsBuffer."Begining Date", ConsBuffer."Ending Date", ConsRegister);

        NoOfCurrentEntryToCheck := 0;
        //IndicatorCheckErrors.OPEN(Text005 + '\' +
        //                          '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

        IF ConsBuffIntContrDebit.FINDSET(FALSE,FALSE) THEN
          REPEAT
            NoOfCurrentEntryToCheck += 1;
            CheckErrorsConsFromBuffer(ConsBuffIntContrDebit,ConsolidationSource,
              TMPLedgEntryDimCheck, OpType::Debit,ConsRegister);
            //NC MDM02 > PCH
            IF GUIALLOWED THEN
            //NC MDM02 < PCH
              IndicatorCheckErrors.UPDATE(1, ROUND(NoOfCurrentEntryToCheck *
                                          (10000 / NoOfEntriesToCheck),1));
          UNTIL ConsBuffIntContrDebit.NEXT = 0;

        IF ConsBuffIntContrCredit.FINDSET(FALSE,FALSE) THEN
          REPEAT
            NoOfCurrentEntryToCheck += 1;
            CheckErrorsConsFromBuffer(ConsBuffIntContrCredit,ConsolidationSource,
              TMPLedgEntryDimCheck, OpType::Credit,ConsRegister);
            //NC MDM02 > PCH
            IF GUIALLOWED THEN
            //NC MDM02 < PCH
              IndicatorCheckErrors.UPDATE(1, ROUND(NoOfCurrentEntryToCheck *
                                          (10000 / NoOfEntriesToCheck),1));
          UNTIL ConsBuffIntContrCredit.NEXT = 0;


        ErrJournal.RESET;
        ErrJournal.SETRANGE("Cons. Source Code", ConsolidationSource.Code);
        ErrJournal.SETRANGE("Cons. Register", ConsRegister."No.");
        IF ErrJournal.FIND('+') THEN BEGIN
          ErrorCounter := 1;
        END ELSE BEGIN
          ErrorCounter := 0;
          ConsRegister.DELETE;
          CLEAR(ConsRegister);
        END;
        //IndicatorCheckErrors.CLOSE;
      END;

      //NC MDM02 > PCH
      IF GUIALLOWED THEN
      //NC MDM02 < PCH
        IndicatorCheckErrors.CLOSE;
      IF ErrorCounter <> 0 THEN BEGIN
        MESSAGE(Text004);
        EXIT;
      END;
      }
      //NC PIF010 < MP

      Log.WriteLogFile('Проверка общая END',FALSE,FALSE,2);
      Log.WriteLogFile(Text005 + 'START',FALSE,FALSE,-2);

      //NC PIF010 > MP
      //NC MDTC01 > MP
      {
      IF  ConsolidationSource."Use GL Mapping" THEN BEGIN
        ConsBuffCheck.COPY(ConsBuffer);
        NoOfCurrentEntryToCheck :=0;
        NoOfEntriesToCheck := ConsBuffCheck.COUNT;
        IndicatorCheckErrors.OPEN(Text005 + '\' +
                                   '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');
        IF ConsBuffCheck.FINDSET(FALSE,FALSE) THEN BEGIN
          CreateConsRegister(ConsolidationSource.Code, 0, 0,
            TODAY, ConsBuffer."Begining Date", ConsBuffer."Ending Date", ConsRegister);

          REPEAT
            NoOfCurrentEntryToCheck += 1;
            CheckErrorsConsFromBuffer2(ConsBuffCheck,TMPDimCheckMapp,
              ConsRegister,ConsolidationSource);
            IndicatorCheckErrors.UPDATE(1, ROUND(NoOfCurrentEntryToCheck *
                                        (10000 / NoOfEntriesToCheck),1));
          UNTIL ConsBuffCheck.NEXT = 0;
          ErrJournal.RESET;
          ErrJournal.SETRANGE("Cons. Source Code", ConsolidationSource.Code);
          ErrJournal.SETRANGE("Cons. Register", ConsRegister."No.");
          IF ErrJournal.FINDSET THEN BEGIN
            ErrorCounter := 1;
          END ELSE BEGIN
            ErrorCounter := 0;
            ConsRegister.DELETE;
            CLEAR(ConsRegister);
          END;

        END;
      END;
      IndicatorCheckErrors.CLOSE;
      Log.WriteLogFile(Text005 + 'END',FALSE,FALSE,2);
      Log.WriteLogFile(Text003 + 'START',FALSE,FALSE,-2);
      IF ErrorCounter <> 0 THEN BEGIN
        MESSAGE(Text004);
        EXIT;
      END;
      }
      //NC MDTC01 < MP
      //NC PIF010 < MP
      //NC MDM02 > PCH
      IF GUIALLOWED THEN
      //NC MDM02 < PCH
        Indicator.OPEN(Text003 + ' ' + ConsolidationSource.Code + '\' +
                       '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      StringsToConsNum := ConsBuffer.COUNT;
      TotalSuccesLoaded := 0;
      TotalExceptLoaded := 0;
      TotalLoadedWithoutJnl := 0;
      ConsStirngsNum := 0;
      ImportedEntries := 0;
      CLEAR(NoSerManag);
      //NC MDTY01 > MP
      FiPos := GetFIPosition(ConsolidationSource);
      //NC MDTY01 < MP

      //NC OPT > PCH
      ConsBuffer.FINDSET;
      //NC OPT < PCH
      REPEAT
        //NCS-2345 > AAP
        gConsBuffer.TRANSFERFIELDS(ConsBuffer);
        //NCS-2345 < AAP

        ConsStirngsNum += 1;
        ImportedEntries += 1;

        IF ConsStirngsNum = 1 THEN BEGIN
          //NC MDB01 > MP
          {
          CreateConsRegister(ConsolidationSource.Code, FirstNo, LastNo,
          ConsBuffer."Document Date", ConsBuffer."Begining Date", ConsBuffer."Ending Date", ConsRegister);
          }
          //NC MDB01.1 > MP теперь регистр создаем всегда, при каждом запуске
          {
          CreateConsRegister(ConsolidationSource.Code, FirstNo, LastNo,
            ConsBuffer."Document Date", FirstDate, LastDate, ConsRegister);
          JobProcStatus."Cons. Register" := ConsRegister."No.";
          JobProcStatus."Begin Entry No." := ConsRegister."From Entry No.";
          JobProcStatus."Last Entry No." := ConsRegister."To Entry No.";
          }
          //NC MDB01.1 < MP
          //NC MDB01 < MP
        //NC MDB01 > MP
        {
        END ELSE
          UpdateConsRegister(ConsBuffer."Entry No.", ConsBuffer."Document Date", ConsBuffer."Begining Date",
          ConsBuffer."Ending Date", ConsRegister);
        }
        END;
        IF ConsStirngsNum MOD MovingDataSetup."Max Entries in Transformation" = 0 THEN BEGIN
          UpdateConsRegister(FirstNo,ConsBuffer."Entry No.", ConsBuffer."Document Date", FirstDate, LastDate, ConsRegister,
                             StringsToConsNum,TotalSuccesLoaded,TotalExceptLoaded,TotalLoadedWithoutJnl);
          JobProcStatus."Cons. Register" := ConsRegister."No.";
          JobProcStatus."Begin Entry No." := ConsRegister."From Entry No.";
          JobProcStatus."Last Entry No." := ConsRegister."To Entry No.";
          TempDebitLedgEntryDim.RESET;
          TempDebitLedgEntryDim.DELETEALL;
          TempCreditLedgEntryDim.RESET;
          TempCreditLedgEntryDim.DELETEALL;
          COMMIT; //!!!!!!!!!!
        END;
        IF ConsStirngsNum = StringsToConsNum THEN
          UpdateConsRegister(FirstNo,ConsBuffer."Entry No.", ConsBuffer."Document Date", FirstDate, LastDate, ConsRegister,
                             StringsToConsNum,TotalSuccesLoaded,TotalExceptLoaded,TotalLoadedWithoutJnl);
        //NC MDB01 < MP
        //NC MDR01 > MP
        IF (NOT ConsBuffer."Not Translate") AND (NOT ConsBuffer."FA Operation") THEN BEGIN
        //NC MDR01 < MP
          //NC MDTM11 > MP
          IF NOT OneMapping THEN
            GetMapping(ConsBuffer."Document Date",TempMapping);
          //NC MDTM11 < MP
          //NC MDTC01 > MP
          IF NOT CheckErrorsConsFromBuffer3(ConsBuffer,TMPDimCheckMapp,ConsRegister,ConsolidationSource,
                                            TempMapping."Temp Use Masks",TempMapping."Temp No. Of Symb. In Masks",TempMapping.Code)
          THEN BEGIN
          //NC MDTC01 < MP
            IF ConsBuffer."Source Operation No." = 0 THEN BEGIN

              DocNoToUse := NoSerManag.GetNextNo(ConsolidationSource."Source  No. Series",ConsBuffer."Document Date",TRUE);

              //NC MDTC01 > MP
              {
              ImportNewRecord(ConsBuffer,DocNoToUse,ConsStirngsNum,ConsolidationSource,ConsRegister, ImportedEntries,
                TMPDimCheck, OperType::Normal);
              }
              ImportNewRecord2(ConsBuffer,DocNoToUse,ConsStirngsNum,ConsolidationSource,ConsRegister, ImportedEntries,
                TMPDimCheck, OperType::Normal,TempMapping.Code);
              {
              IF NOT TMPGLEntryException.GET(ConsBuffer."Entry No.") THEN
                TotalSuccesLoaded += 1
              ELSE
                TotalExceptLoaded += 1;
              }
              //NC MDTC01 < MP
            END ELSE BEGIN
              IF ConsBuffer.Removed THEN BEGIN

                DocNoToUse := NoSerManag.GetNextNo(ConsolidationSource."Removed  No. Series",ConsBuffer."Document Date",TRUE);

                CreateCorrectionJnlLines(ConsBuffer,ConsStirngsNum,ConsolidationSource,ConsRegister,ImportedEntries, EntryType::Remove,
                  DocNoToUse);
              END ELSE BEGIN

                DocNoToUse := NoSerManag.GetNextNo(ConsolidationSource."Reposted  No. Series",ConsBuffer."Document Date",TRUE);

                CreateCorrectionJnlLines(ConsBuffer,ConsStirngsNum,ConsolidationSource,ConsRegister,ImportedEntries, EntryType::Repost,
                  DocNoToUse);
                DocNoToUse := NoSerManag.GetNextNo(ConsolidationSource."Source  No. Series",ConsBuffer."Document Date",TRUE);
                //NC MDTC01 > MP
                {
                ImportNewRecord(ConsBuffer,DocNoToUse,ConsStirngsNum,ConsolidationSource,ConsRegister,ImportedEntries,
                  TMPDimCheck, OperType::Repost);
                }
                ImportNewRecord2(ConsBuffer,DocNoToUse,ConsStirngsNum,ConsolidationSource,ConsRegister,ImportedEntries,
                  TMPDimCheck, OperType::Repost,TempMapping.Code);
                {
                IF TMPGLEntryException.GET(ConsBuffer."Entry No.") THEN
                  TotalSuccesLoaded += 1
                ELSE
                  TotalExceptLoaded += 1;
                }
                //NC MDTC01 < MP
              END;
            END;

            ConsBufferCorr.GET(ConsBuffer."Cons. Source Code",ConsBuffer."Entry No.");
            //NC MDTC01 > MP
            IF ConsBufferCorr."Deleting from Gen. Journal" THEN
              TotalLoadedWithoutJnl += 1
            ELSE
              IF NOT TMPGLEntryException.GET(ConsBuffer."Entry No.") THEN
                TotalSuccesLoaded += 1
              ELSE
                TotalExceptLoaded += 1;
            IF CoAMapping.GET(TempMapping.Code,DTMappLineNo) THEN BEGIN
              CoAMappRef.GETTABLE(CoAMapping);
              ConsBufferCorr."Debit CoA Mapping ID" := CoAMappRef.RECORDID;
            END;
            IF CoAMapping.GET(TempMapping.Code,CTMappLineNo) THEN BEGIN
              CoAMappRef.GETTABLE(CoAMapping);
              ConsBufferCorr."Credit CoA Mapping ID" := CoAMappRef.RECORDID;
            END;
            //NC MDTC01 < MP
            ConsBufferCorr."Export Consolidation Register" := ConsRegister."No.";
            ConsBufferCorr.MODIFY;
          //NC MDTC01 > MP
          //NC MDTC01.1 > AKO
          {
          END;
          }
          END ELSE BEGIN
            ConsBuffer."Error in Import" := TRUE;
            ConsBuffer.MODIFY;
          END;
          //NC MDTC01.1 < AKO
          //NC MDTC01 < MP
        END ELSE BEGIN
          ConsBufferCorr.GET(ConsBuffer."Cons. Source Code",ConsBuffer."Entry No.");
          ConsBufferCorr."Export Consolidation Register" := ConsRegister."No.";
          ConsBufferCorr.MODIFY;
          TotalLoadedWithoutJnl += 1;
        END;
        //NC MDM02 > PCH
        IF GUIALLOWED THEN
        //NC MDM02 < PCH
          Indicator.UPDATE(1, ROUND(ConsStirngsNum * (10000 / StringsToConsNum),1));
        //NC S1245 > PCH
        IF (ConsRegister."From Posting Date" = 0D) OR
           (ConsBuffer."Document Date" < ConsRegister."From Posting Date") THEN
          ConsRegister."From Posting Date" := ConsBuffer."Document Date";
        IF (ConsRegister."To Posting Date" = 0D) OR
           (ConsBuffer."Document Date" > ConsRegister."To Posting Date") THEN
          ConsRegister."To Posting Date" := ConsBuffer."Document Date";
        //NC S1245 < PCH
      UNTIL ConsBuffer.NEXT = 0;

      //NC MDM02 > PCH
      IF GUIALLOWED THEN
      //NC MDM02 < PCH
        Indicator.CLOSE;
      // Основной блок получения данных  ---<
      ConsRegister."Total Entries In Session" := StringsToConsNum;
      ConsRegister."Total Success Loaded In Sess" := TotalSuccesLoaded;
      ConsRegister."Total Exception In Sess" := TotalExceptLoaded;
      ConsRegister."Total Loaded without Jnl" := TotalLoadedWithoutJnl;
      ConsRegister."Total Unloaded In Session" := StringsToConsNum - TotalSuccesLoaded - TotalExceptLoaded - TotalLoadedWithoutJnl;
      ConsRegister.MODIFY;

      // запомнить последнюю дату и время консолидации
      ConsolidationSource."Last Consolidation Date" := TODAY;
      ConsolidationSource."Last Consolidation Time" := TIME;
      ConsolidationSource.MODIFY;

      //NC MDM02 > PCH
      JobProcStatusLineNo := 0;
      JobProcStatus."Cons. Register" := ConsRegister."No.";
      JobProcStatus."Begin Entry No." := ConsRegister."From Entry No.";
      JobProcStatus."Last Entry No." := ConsRegister."To Entry No.";
      //NC MDM02 < PCH

      //NC S1471 > PCH
      IF VendorForCustomerTemp.FINDSET THEN REPEAT
        COMMIT;
        IF NOT CODEUNIT.RUN(CODEUNIT::"Create Vendor Buffer",VendorForCustomerTemp) THEN BEGIN
          ErrorJournal.AddLastError(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                    Text072,JobProcStatusLineNo);
        END;
      UNTIL VendorForCustomerTemp.NEXT = 0;

      //NC S1471 < PCH
      Log.WriteLogFile(Text003 + 'END',FALSE,FALSE,2);
      Log.WriteLogFile('Статистика по функциям:',FALSE,FALSE,0);
      Log.WriteLogFile('CheckErrorsConsFromBuffer2',FALSE,FALSE,0);
      Log.WriteLogFile('  CheckExceptionCorrespondense2',FALSE,FALSE,6);
      Log.WriteLogFile('  CheckGLMapp2',FALSE,FALSE,7);
      Log.WriteLogFile('  CheckDimMapp2',FALSE,FALSE,8);
      Log.WriteLogFile('ImportNewRecord',FALSE,FALSE,0);
      Log.WriteLogFile('  ConsBuffer2GLEntry',FALSE,FALSE,9);
      Log.WriteLogFile('  CreateJnlLine',FALSE,FALSE,10);
      Log.WriteLogFile('     Gen. Journal Line.VALIDATE',FALSE,FALSE,16);
      Log.WriteLogFile('     MappChartsOfAccount',FALSE,FALSE,11);
      Log.WriteLogFile('     GetNextLineNo',FALSE,FALSE,18);
      Log.WriteLogFile('  CreateJnlLineDimensions',FALSE,FALSE,12);
      Log.WriteLogFile('     JournalLineDimension.GET',FALSE,FALSE,20);
      Log.WriteLogFile('     CheckDimensions + проверки',FALSE,FALSE,19);
      Log.WriteLogFile('     JournalLineDimension.INSERT',FALSE,FALSE,17);
      Log.WriteLogFile('     MappDimension',FALSE,FALSE,13);
      Log.WriteLogFile('CreateCorrectionJnlLines',FALSE,FALSE,15);
      Log.WriteLogFile('CreateDimBuffer',FALSE,FALSE,14);
      Log.WriteLogFile('ImportFromBufferTable',FALSE,TRUE,1);
      {
      IF ErrorCounter = 0 THEN
        MESSAGE(Text006,ConsolidationSource.Code)
      ELSE
        MESSAGE(Text008,ConsolidationSource.Code,FORMAT(ImportedEntries),FORMAT(ImportedEntries),FORMAT(ErrorCounter));
      }
    END;

    PROCEDURE ImportNewRecord@1210005(VAR ConsBuffer@1210001 : Record 50008;DocNotoUse@1210002 : Code[20];VAR ConsStirngsNum@1210005 : Integer;ConsolidationSource@1210006 : Record 50001;VAR ConsRegister@1210007 : Record 50005;VAR ImportedEntries@1210008 : Integer;VAR TMPDimCheck@1210010 : TEMPORARY Record 348;OperType@1210015 : 'Normal,Repost';MappingCode@1000000000 : Code[20]);
    VAR
      Type@1210003 : 'Debit,Credit';
      GenJournalLine@1210009 : Record 81;
      JournalLineDimension@1210011 : Record 356;
      InterCompany@1210012 : Boolean;
      GLEntryTmp@1210000 : TEMPORARY Record 17;
      LedgerEntryDimTMP@1210004 : TEMPORARY Record 355;
      nErr@1210013 : Integer;
      ConsType@1210014 : 'Buffer,Navision';
      GLOperationType@1210016 : ' ,Debit,Credit';
    BEGIN
      //NC MDTC01 > MP
      GLEntryTmp.RESET;
      GLEntryTmp.DELETEALL;
      LedgerEntryDimTMP.RESET;
      LedgerEntryDimTMP.DELETEALL;

      // Дебетовая часть проводки

      //NC PIF001.2 > DP
      IF NOT ((ConsBuffer."Debit G/L Account No." = ConsolidationSource."Corresponding G/L Account No.") AND
       (ConsolidationSource."Import Format"=ConsolidationSource."Import Format"::FromBuffer))
      THEN BEGIN
      //NC PIF001.2 < DP

        ConsBuffer2GLEntry(GLEntryTmp, ConsBuffer, 1, DocNotoUse, Type::Debit,
          NOT ConsolidationSource."Use GL Mapping",ConsolidationSource,MappingCode);
        nErr := CreateDebitDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister,1,TRUE,MappingCode);
        nErr := CreateCreditDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister,1,TRUE,MappingCode);


        CreateJnlLine(GenJournalLine, ConsolidationSource, GLEntryTmp, GLEntryTmp."Document No.", ConsRegister."No." ,
          LedgerEntryDimTMP, nErr, ConsType::Buffer, OperType, FALSE, FALSE, DTMappLineNo,MappingCode);


        IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
          LedgerEntryDimTMP.RESET;
          LedgerEntryDimTMP.SETRANGE("Table ID", 17);
          LedgerEntryDimTMP.SETRANGE("Entry No.", GLEntryTmp."Entry No.");
          IF LedgerEntryDimTMP.FINDSET(FALSE,FALSE) THEN
            REPEAT
              IF TMPDimCheck.GET(LedgerEntryDimTMP."Dimension Code") THEN
                CreateJnlLineDimensions(GenJournalLine, JournalLineDimension, LedgerEntryDimTMP, ConsRegister."No.",
                  InterCompany, ConsolidationSource,GLEntryTmp."G/L Account No.",MappingCode);
            UNTIL LedgerEntryDimTMP.NEXT = 0;
        END;
        GenJournalLine.INSERT;

        ImportedEntries += 1;

      //NC PIF001.2 > DP
      END;
      //NC PIF001.2 < DP

      // Кредитовая часть проводки

      //NC PIF001.2 > DP
      IF NOT ((ConsBuffer."Credit G/L Account No." = ConsolidationSource."Corresponding G/L Account No.") AND
       (ConsolidationSource."Import Format"=ConsolidationSource."Import Format"::FromBuffer))
      THEN BEGIN
      //NC PIF001.2 < DP

        ConsBuffer2GLEntry(GLEntryTmp, ConsBuffer, 2, DocNotoUse, Type::Credit,
          NOT ConsolidationSource."Use GL Mapping",ConsolidationSource,MappingCode);
        nErr := CreateCreditDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister,2,TRUE,MappingCode);
        nErr := CreateDebitDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister,2,TRUE,MappingCode);

        CreateJnlLine(GenJournalLine, ConsolidationSource, GLEntryTmp, GLEntryTmp."Document No.", ConsRegister."No.",
          LedgerEntryDimTMP, nErr, ConsType::Buffer, OperType, FALSE, FALSE, CTMappLineNo,MappingCode);


        IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
          LedgerEntryDimTMP.RESET;
          LedgerEntryDimTMP.SETRANGE("Table ID", 17);
          LedgerEntryDimTMP.SETRANGE("Entry No.", GLEntryTmp."Entry No.");
          IF LedgerEntryDimTMP.FINDSET(FALSE,FALSE) THEN
            REPEAT
              IF TMPDimCheck.GET(LedgerEntryDimTMP."Dimension Code") THEN
                CreateJnlLineDimensions(GenJournalLine, JournalLineDimension, LedgerEntryDimTMP, ConsRegister."No.",
                  InterCompany, ConsolidationSource,GLEntryTmp."G/L Account No.",MappingCode);
            UNTIL LedgerEntryDimTMP.NEXT = 0;
        END;
        GenJournalLine.INSERT;

      //NC PIF001.2 > DP
      END;
      //NC PIF001.2 < DP

      //NC PIF001 < DP
    END;

    PROCEDURE CreateConsRegister@1210062(ConsSource@1000000004 : Code[20];FromEntryNo@1000000002 : Integer;ToEntryNo@1000000003 : Integer;PostDate@1210001 : Date;FromDate@1000000000 : Date;ToDate@1000000001 : Date;VAR ConsRegister@1210003 : Record 50005);
    VAR
      ConsolSource1@1000000008 : Record 50001;
      ConsolidationSetup@1210000 : Record 50000;
    BEGIN
      //NC PIF001 > DP

      IF FromEntryNo > ToEntryNo THEN
        FromEntryNo := ToEntryNo;
      ConsRegister.INIT;
      ConsRegister."No." := GetNextRegisterNo(ConsSource);
      ConsRegister."Cons. Source Code" := ConsSource;
      ConsRegister."Consolidation Date" := TODAY;
      ConsRegister."User ID" := USERID;
      ConsRegister."From Entry No." := FromEntryNo;
      ConsRegister."To Entry No." := ToEntryNo;
      ConsRegister."From Posting Date" := FromDate;
      ConsRegister."To Posting Date" := ToDate;
      ConsolidationSetup.GET;
      ConsolSource1.GET(ConsSource);
      ConsRegister."Gen. Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
      ConsRegister."Gen. Journal Batch" := ConsolSource1."Gen. Journal Batch";
      ConsRegister."Closed Period Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
      ConsRegister."Closed Period Journal Batch" := ConsolSource1."Closed Period Journal Batch";
      ConsRegister."Reposted Journal Template" :=  ConsolidationSetup."Gen. Jnl. Template";
      ConsRegister."Reposted Journal Batch" := ConsolSource1."Reposted Journal Batch";
      ConsRegister."Removed Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
      ConsRegister."Removed Journal Batch" := ConsolSource1."Removed Journal Batch";
      //NC MAU02 > MP
      ConsRegister."Closed Period Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
      ConsRegister."Closed Period Journal Batch" := ConsolSource1."Closed Period Journal Batch";
      //NC MAU02 < MP
      //NC MTD06 > AIG
      ConsRegister."Offset Accounts Journal Batch" := ConsolSource1."Offset Accounts Journal Batch";
      ConsRegister."Speshial Acc. Journal Batch" := ConsolSource1."Speshial Control Journal Batch";
      //NC MTD06 < AIG
      ConsRegister."Consolidation Time" := TIME;
      ConsRegister.INSERT(TRUE);
      //NC PIF001 < DP
    END;

    PROCEDURE UpdateConsRegister@1000000019(FromEntryNo@1000000009 : Integer;ToEntryNo@1000000005 : Integer;PostDate@1000000004 : Date;FromDate@1000000003 : Date;ToDate@1000000002 : Date;VAR ConsRegister@1000000001 : Record 50005;StringsToConsNum@1000000000 : Integer;TotalSuccesLoaded@1000000006 : Integer;TotalExceptLoaded@1000000007 : Integer;TotalLoadedWithoutJnl@1000000008 : Integer);
    BEGIN
      //NC PIF001 > DP
      ConsRegister."From Entry No." := FromEntryNo;
      ConsRegister."From Posting Date" := FromDate;
      IF ToEntryNo > ConsRegister."To Entry No." THEN
        ConsRegister."To Entry No." := ToEntryNo;
      IF FromDate < ConsRegister."From Posting Date" THEN BEGIN
        ConsRegister."From Posting Date" := FromDate;
      END;
      IF ToDate > ConsRegister."To Posting Date" THEN BEGIN
        ConsRegister."To Posting Date" := ToDate;
      END;
      ConsRegister."Consolidation Date" := TODAY;
      ConsRegister."Consolidation Time" := TIME;
      ConsRegister."Total Entries In Session" := StringsToConsNum;
      ConsRegister."Total Success Loaded In Sess" := TotalSuccesLoaded;
      ConsRegister."Total Exception In Sess" := TotalExceptLoaded;
      ConsRegister."Total Loaded without Jnl" := TotalLoadedWithoutJnl;
      ConsRegister."Total Unloaded In Session" := StringsToConsNum - TotalSuccesLoaded - TotalExceptLoaded - TotalLoadedWithoutJnl;
      ConsRegister.MODIFY(TRUE);
      //NC PIF001 < DP
    END;

    PROCEDURE GetNextRegisterNo@1210061(ConsSource@1210000 : Code[20]) : Integer;
    VAR
      ConsRegister@1000000002 : Record 50005;
    BEGIN
      //NC PIF001 > DP
      ConsRegister.RESET;
      ConsRegister.SETRANGE("Cons. Source Code", ConsSource);
      IF ConsRegister.FIND('+') THEN
        EXIT(ConsRegister."No." + 1)
      ELSE
        EXIT(1);
      //NC PIF001 < DP
    END;

    PROCEDURE CheckExchangeCorrespondense@1210001(ConsBuffer@1210003 : Record 50008) Spec : Boolean;
    VAR
      SpecCorrespondense@1210002 : Record 50009;
      DebitAccount@1210001 : Code[20];
      CreditAccount@1210000 : Code[20];
      ConsSource@1210004 : Code[20];
      CurrCode@1210006 : Code[10];
      CorrespondenseType@1210005 : 'CurExchange,Exception,Reclassification';
    BEGIN
      //NC PIF001 > DP
      Spec := FALSE;
      DebitAccount := ConsBuffer."Debit G/L Account No.";
      CreditAccount := ConsBuffer."Credit G/L Account No.";
      ConsSource := ConsBuffer."Export Cons. Source Code";
      CurrCode := ConsBuffer."Debit Currency Code";
      IF SpecCorrespondense.GET(ConsSource, CorrespondenseType::CurExchange, DebitAccount, CreditAccount,
        '', '') THEN
        Spec := TRUE
      ELSE
        IF SpecCorrespondense.GET(ConsSource, CorrespondenseType::CurExchange, DebitAccount, '',
          '', '') THEN
          Spec := TRUE
        ELSE
          IF SpecCorrespondense.GET(ConsSource, CorrespondenseType::CurExchange, '', CreditAccount,
            '', '') THEN
            Spec := TRUE
          ELSE
            IF SpecCorrespondense.GET(ConsSource, CorrespondenseType::CurExchange, '', '',
              '', '') THEN
              Spec := TRUE;

      //NC PIF001 < DP
    END;

    PROCEDURE CheckReclassCorrespondenseRSBU@1210009(ConsBuffer@1210003 : Record 50008) Spec : Boolean;
    VAR
      SpecCorrespondense@1210002 : Record 50009;
      DebitAccount@1210001 : Code[20];
      CreditAccount@1210000 : Code[20];
      ConsSource@1210004 : Code[20];
      CurrCode@1210006 : Code[10];
      CorrespondenseType@1210005 : 'CurExchange,Exception,Reclassification';
    BEGIN
      //NC PIF001 > DP
      Spec := FALSE;
      DebitAccount := ConsBuffer."Debit G/L Account No.";
      CreditAccount := ConsBuffer."Credit G/L Account No.";
      ConsSource := ConsBuffer."Export Cons. Source Code";
      IF SpecCorrespondense.GET(ConsSource, CorrespondenseType::Reclassification, DebitAccount, CreditAccount,
        '', '') THEN BEGIN
        Spec := TRUE;
      END;
      //NC PIF001 < DP
    END;

    PROCEDURE CheckReclassCorrespondenseMSFO@1210038(GLEntry@1210006 : Record 17;ConsSource@1210002 : Code[20]) GLAcc : Code[20];
    VAR
      SpecCorrespondense@1210005 : Record 50009;
      DebitAccount@1210004 : Code[20];
      CreditAccount@1210003 : Code[20];
      CurrCode@1210001 : Code[10];
      CorrespondenseType@1210000 : 'CurExchange,Exception,Reclassification';
      ConsSourceRec@1210007 : Record 50001;
      LedgEntryDim@1210008 : Record 355;
      ConsolidationSource@1210009 : Record 50001;
      GLEntry1@1210010 : Record 17;
      GLFilter@1210011 : Text[90];
    BEGIN
      //NC PIF001 > DP
      {
      GLAcc := '';

      ConsolidationSource.GET(ConsSource);
      LedgEntryDim.CHANGECOMPANY(ConsolidationSource."Company Name");
      GLEntry1.CHANGECOMPANY(ConsolidationSource."Company Name");
      GLEntry1.SETCURRENTKEY("Transaction No.");
      GLEntry1.SETRANGE("Transaction No.", GLEntry."Transaction No.");
      GLFilter += FORMAT(GLEntry."Entry No.");
      GLEntry1.SETFILTER("Debit Amount", '<>%1', 0);
      GLEntry1.FINDFIRST;
      DebitAccount := GLEntry1."G/L Account No.";
      GLEntry1.SETRANGE("Debit Amount");
      GLEntry1.SETFILTER("Credit Amount", '<>%1', 0);
      GLEntry1.FINDFIRST;

      CreditAccount := GLEntry1."G/L Account No.";

      //ищем запись с незаполненными измерениями. Если такая запись есть, то делаем реклассификацию независимо от значений
      //измерений проводок
      IF SpecCorrespondense.GET(ConsSource, CorrespondenseType::Reclassification, DebitAccount, CreditAccount,
        '', '') THEN BEGIN
        SpecCorrespondense.TESTFIELD("Reclassification Account");
        EXIT(SpecCorrespondense."Reclassification Account");
      END;
      //ищем запись со значениями измерений, указанными на одной из полупроводок.
      LedgEntryDim.SETRANGE("Table ID", 17);
      LedgEntryDim.SETFILTER("Entry No.", GLFilter);
      LedgEntryDim.SETFILTER("Dimension Code",SpecCorrDimFilter);
      IF LedgEntryDim.FINDSET(FALSE,FALSE) THEN
        REPEAT
          IF SpecCorrespondense.GET(ConsSource, CorrespondenseType::Reclassification, DebitAccount, CreditAccount,
            LedgEntryDim."Dimension Code", LedgEntryDim."Dimension Value Code")
          THEN BEGIN
            SpecCorrespondense.TESTFIELD("Reclassification Account");
            EXIT(SpecCorrespondense."Reclassification Account");
          END;
        UNTIL LedgEntryDim.NEXT = 0;
      }
      //NC PIF001 < DP
    END;

    PROCEDURE CheckExceptionCorrespondense@1210073(GLEntry@1210003 : Record 17;MappingCode@1210012 : Code[20]) : Boolean;
    VAR
      SpecCorrespondense@1210002 : Record 50009;
      SpecCorrespondense1@1210011 : Record 50009;
      DebitAccount@1210001 : Code[20];
      CreditAccount@1210000 : Code[20];
      DocumentType1C@1210006 : Text[30];
      CorrespondenseType@1210005 : 'CurExchange,Exception,Reclassification';
      LedgEntryDim@1210007 : Record 355;
      DimCode@1210009 : Code[20];
      DimVal@1210010 : Code[20];
      ConsolidationSource@1210004 : Record 50001;
      GLEntry1@1210013 : Record 17;
      GLFilter@1210014 : Text[90];
      SpecNotExcept@1000000000 : Boolean;
      SpecDim@1000000001 : Boolean;
      Spec@1000000002 : Boolean;
      SelectedExceptDim@1000000003 : Record 369;
      BufferEntry@1101495000 : Record 50008;
    BEGIN
      //NC PIF001 > DP
      ConsolidationSource.GET(MappingCode);
      GLEntry1.CHANGECOMPANY(ConsolidationSource."Company Name");
      GLEntry1.SETCURRENTKEY("Transaction No.");
      GLEntry1.SETRANGE("Transaction No.", GLEntry."Transaction No.");
      GLFilter := FORMAT(GLEntry."Entry No.");
      Spec := FALSE;
      GLEntry1.SETFILTER("Debit Amount", '<>%1', 0);
      GLEntry1.FINDFIRST;
      DebitAccount := GLEntry1."G/L Account No.";
      GLEntry1.SETRANGE("Debit Amount");
      GLEntry1.SETFILTER("Credit Amount", '<>%1', 0);
      GLEntry1.FINDFIRST;
      CreditAccount := GLEntry1."G/L Account No.";
      DocumentType1C :=  GLEntry1."External Document Type";

      SpecCorrespondense1.SETRANGE("Mapping Code", MappingCode);
      //SpecCorrespondense1.SETRANGE("Correspondenсe Type", CorrespondenseType::Exception);
      IF NOT SpecCorrespondense1.FINDFIRST THEN
        EXIT(FALSE);

      //Обработка опции "Не Исключать"
      SpecNotExcept := FALSE;
      Spec := CheckCorr(MappingCode, DebitAccount, CreditAccount,DocumentType1C,'','',SpecNotExcept);
        IF NOT SpecNotExcept THEN BEGIN
          LedgEntryDim.CHANGECOMPANY(ConsolidationSource."Company Name");
          LedgEntryDim.SETRANGE("Table ID", 17);
          LedgEntryDim.SETFILTER("Entry No.", GLFilter);
          LedgEntryDim.SETFILTER("Dimension Code",SpecCorrDimFilter);
          IF LedgEntryDim.FINDSET(FALSE,FALSE) THEN
            REPEAT
              DimCode := LedgEntryDim."Dimension Code";
              DimVal := LedgEntryDim."Dimension Value Code";
                SpecDim := CheckCorr(MappingCode,DebitAccount,
                  CreditAccount,DocumentType1C,DimCode,DimVal,SpecNotExcept);
            UNTIL (LedgEntryDim.NEXT = 0) OR SpecDim OR SpecNotExcept;
        END;
      IF (Spec OR SpecDim) AND (NOT SpecNotExcept) THEN BEGIN
        //NC MDTM02 > MP
        {
        SpecCorrespondense.TESTFIELD("Gen. Journal  Batch Name");
        }
        //NC MDTM02 < MP
        TMPGLEntryException.INIT;
        TMPGLEntryException."Entry No." := GLEntry."Entry No.";
        //NC MDTM02 > MP
        {
        TMPGLEntryException."Journal Batch Name" := SpecCorrespondense."Gen. Journal  Batch Name";
        }
        TMPGLEntryException."Journal Batch Name" := ConsolidationSetup."Exception Batch Name";
        //NC MDTM02 < MP
        TMPGLEntryException.INSERT;

        //NC OAM46 > DP
        IF (GLEntry."Cons. Source Code"<>'') AND (GLEntry."Buffer Entry No."<>0) AND
          (ConsolidationSource."Import Format"=ConsolidationSource."Import Format"::FromBuffer) THEN BEGIN
          IF BufferEntry.GET(GLEntry."Cons. Source Code",GLEntry."Buffer Entry No.") THEN BEGIN
            BufferEntry."Exception Entry" := TRUE;
            BufferEntry.MODIFY;
          END;
        END;
        //NC OAM46 < DP

        EXIT(TRUE);
      END;
      EXIT(FALSE);
      //NC PIF001 < DP
    END;

    PROCEDURE CheckCorr@1210059(MappingCode@1210005 : Code[20];DebitAccount@1210007 : Code[20];CreditAccount@1210006 : Code[20];DocumentType1C@1210004 : Text[30];DimCode@1210001 : Code[20];DimVal@1210000 : Code[20];VAR SpecNotExcept@1000000000 : Boolean) Spec : Boolean;
    VAR
      Exceptions@1000000001 : Record 50009;
    BEGIN
      //NC MDTM02 > MP Полностью переработана функция исключения
      Spec := FALSE;
      //NC MDTX02 > MP
      {
      Exceptions.SETCURRENTKEY("Ext. Debit Account No.","Ext. Credit Account No.","Dimension Code","Dimension Value Code");
      }
      Exceptions.SETCURRENTKEY("Company Name","Ext. Debit Account No.","Ext. Credit Account No.","Dimension Code","Dimension Value Code"
      );
      //NC MDTX02 < MP
      Exceptions.SETRANGE("Mapping Code",MappingCode);
      //NC MDTX02 > MP
      Exceptions.SETRANGE("Company Name",COMPANYNAME);
      //NC MDTX02 < MP
      Exceptions.SETRANGE("Ext. Debit Account No.",DebitAccount);
      Exceptions.SETRANGE("Ext. Credit Account No.",CreditAccount);
      Exceptions.SETRANGE("Dimension Code",DimCode);
      Exceptions.SETRANGE("Dimension Value Code",DimVal);

      IF Exceptions.FINDFIRST THEN BEGIN
        IF NOT Exceptions."Not Except" THEN
          Spec := TRUE
        ELSE
          SpecNotExcept := TRUE;
        EXIT;
      END;
      Exceptions.SETRANGE("Ext. Credit Account No.",'');
      IF Exceptions.FINDFIRST THEN BEGIN
        IF NOT Exceptions."Not Except" THEN
          Spec := TRUE
        ELSE
          SpecNotExcept := TRUE;
        EXIT;
      END;
      Exceptions.SETRANGE("Ext. Credit Account No.",CreditAccount);
      Exceptions.SETRANGE("Ext. Debit Account No.",'');
      IF Exceptions.FINDFIRST THEN BEGIN
        IF NOT Exceptions."Not Except" THEN
          Spec := TRUE
        ELSE
          SpecNotExcept := TRUE;
      END;

      //NC MDTX02 > MP
      Exceptions.SETRANGE("Company Name",'');
      Exceptions.SETRANGE("Ext. Debit Account No.",DebitAccount);
      Exceptions.SETRANGE("Ext. Credit Account No.",CreditAccount);

      IF Exceptions.FINDFIRST THEN BEGIN
        IF NOT Exceptions."Not Except" THEN
          Spec := TRUE
        ELSE
          SpecNotExcept := TRUE;
        EXIT;
      END;
      Exceptions.SETRANGE("Ext. Credit Account No.",'');
      IF Exceptions.FINDFIRST THEN BEGIN
        IF NOT Exceptions."Not Except" THEN
          Spec := TRUE
        ELSE
          SpecNotExcept := TRUE;
        EXIT;
      END;
      Exceptions.SETRANGE("Ext. Credit Account No.",CreditAccount);
      Exceptions.SETRANGE("Ext. Debit Account No.",'');
      IF Exceptions.FINDFIRST THEN BEGIN
        IF NOT Exceptions."Not Except" THEN
          Spec := TRUE
        ELSE
          SpecNotExcept := TRUE;
      END;
      //NC MDTX02 < MP
      //NC MDTM02 < MP
    END;

    PROCEDURE CreateCorrectionJnlLines@1210017(ConsBuffer@1210000 : Record 50008;VAR ConsStirngsNum@1210004 : Integer;ConsolidationSource@1210005 : Record 50001;VAR ConsRegister@1210006 : Record 50005;ImportedEntries@1210007 : Integer;EntryType@1210003 : 'Remove,Repost';DocNoToUse@1210009 : Code[20]);
    VAR
      GLEntry@1210001 : Record 17;
      ConsBuffer1@1210010 : Record 50008;
      GLEntry2@1000000000 : Record 17;
      CorrTemplate@1101495001 : Code[10];
      CorrBatch@1101495000 : Code[10];
      GenJnlLineDel@1101495002 : Record 81;
      GenJnlLineDel2@1101495003 : Record 81;
      ChangeLogMgt@1101495004 : Codeunit 423;
      RecRef@1101495005 : RecordRef;
      GenJnlLineDimDel@1101495006 : Record 356;
      GenJnlLineDimDel2@1101495007 : Record 356;
      GLBuff2Correct@1000000001 : Record 50008;
    BEGIN
      //NC PIF001 > DP
      Log.StartCounter(-15);
      //NC MDR01 > MP
      IF EntryType = EntryType::Repost THEN BEGIN
        CorrTemplate := ConsolidationSetup."Gen. Jnl. Template";
        CorrBatch := ConsolidationSource."Reposted Journal Batch";
      END ELSE BEGIN
        CorrTemplate := ConsolidationSetup."Gen. Jnl. Template";
        CorrBatch := ConsolidationSource."Removed Journal Batch";
      END;
      GenJnlLineDel.RESET;
      GenJnlLineDel.SETRANGE("Journal Template Name",CorrTemplate);
      //GenJnlLineDel.SETRANGE("Journal Batch Name",CorrBatch);
      GenJnlLineDel.SETRANGE("External Document ID",ConsBuffer."Document ID");
      GenJnlLineDel.SETRANGE("External Operation No",ConsBuffer."Operation No.");
      ChangeLogMgt.ClearTempChangeLogSetupTable;
      IF GenJnlLineDel.FINDSET THEN
        REPEAT
          GenJnlLineDel2.GET(CorrTemplate,GenJnlLineDel."Journal Batch Name",GenJnlLineDel."Line No.");
          RecRef.GETTABLE(GenJnlLineDel2);
          ChangeLogMgt.LogDeletion(RecRef);
          GenJnlLineDel2.DELETE;
          GenJnlLineDimDel.RESET;
          GenJnlLineDimDel.SETRANGE("Table ID",81);
          GenJnlLineDimDel.SETRANGE("Journal Template Name",CorrTemplate);
          GenJnlLineDimDel.SETRANGE("Journal Batch Name",GenJnlLineDel."Journal Batch Name");
          GenJnlLineDimDel.SETRANGE("Journal Line No.",GenJnlLineDel."Line No.");
          IF GenJnlLineDimDel.FINDSET THEN
            REPEAT
              GenJnlLineDimDel2.GET(81,CorrTemplate,GenJnlLineDel."Journal Batch Name",GenJnlLineDel."Line No.",
                                   GenJnlLineDimDel."Allocation Line No.",
                                   GenJnlLineDimDel."Dimension Code");
              IF GLBuff2Correct.GET(GenJnlLineDel2."Cons. Source Code",GenJnlLineDel2."Buffer Entry No.") AND
                (NOT GLBuff2Correct."Deleted from Gen. Journal")
              THEN BEGIN
                GLBuff2Correct."Deleted from Gen. Journal" := TRUE;
                GLBuff2Correct.MODIFY;
              END;
              IF GLBuff2Correct.GET(ConsBuffer."Cons. Source Code",ConsBuffer."Entry No.") AND
                (NOT GLBuff2Correct."Deleting from Gen. Journal")
              THEN BEGIN
                GLBuff2Correct."Deleting from Gen. Journal" := TRUE;
                GLBuff2Correct.MODIFY;
              END;
              RecRef.GETTABLE(GenJnlLineDimDel2);
              ChangeLogMgt.LogDeletion(RecRef);
              GenJnlLineDimDel2.DELETE;
            UNTIL GenJnlLineDimDel.NEXT = 0;
        UNTIL GenJnlLineDel.NEXT = 0;
      {
      GLEntry.SETCURRENTKEY("Cons. Source Code","Buffer Entry No.",Reposted,Removed);
      GLEntry.SETRANGE("Cons. Source Code", ConsBuffer."Cons. Source Code");
      GLEntry.SETRANGE("Buffer Entry No.", ConsBuffer."Source Operation No.");
      }
      GLEntry.SETRANGE("External Document ID",ConsBuffer."Document ID");
      GLEntry.SETRANGE("External Operation No",ConsBuffer."Operation No.");
      //NC MDR01 < MP
      GLEntry.SETRANGE(Reposted, FALSE);
      GLEntry.SETRANGE(Removed, FALSE);
      //NC AIG >
      GLEntry.SETRANGE(Reversed, FALSE);
      //NC AIG <

      ImportedEntries -= 1;

      IF GLEntry.FINDSET THEN
        REPEAT
          ImportedEntries += 1;

          //NC S1304 > PCH
          IF ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer THEN
            GLEntry."Document Date" := ConsBuffer."Original Doc. Date";
          //NC S1304 < PCH

          //NC NCS-999 > DP
          IF GLEntry."Business Unit Code"='' THEN
            CreateCorrectionLine(GLEntry, ConsRegister."No.",ConsolidationSource,
                               DocNoToUse+'_',CorrTemplate,CorrBatch, EntryType,ConsBuffer."Entry No.")
          ELSE
          //NC NCS-999 < DP

          CreateCorrectionLine(GLEntry, ConsRegister."No.",ConsolidationSource,
                               DocNoToUse,CorrTemplate,CorrBatch, EntryType,ConsBuffer."Entry No.");
        UNTIL GLEntry.NEXT = 0;
      Log.StartCounter(15);
      //NC PIF001 < DP
    END;

    PROCEDURE CreateCorrectionLine@1000000005(GLEntry@1000000000 : Record 17;RegisterNo@1000000009 : Integer;ConsolidationSource@1101495000 : Record 50001;DocNo@1000000005 : Code[20];CorrTemplate@1000000006 : Code[10];VAR CorrBatch@1000000007 : Code[10];EntryType@1000000011 : 'Remove,Repost';BufferEntryNo@1210000 : Integer);
    VAR
      GenJnlLine1@1000000001 : Record 81;
      LineNo@1000000003 : Integer;
      Continue@1000000004 : Boolean;
      CurrFactor@1000000010 : Decimal;
      CustLedgEntry@1000000002 : Record 21;
      VendLedgEntry@1000000008 : Record 25;
      BankLedgEntry@1000000012 : Record 271;
      BankAccountPG@1000000013 : Record 277;
      FILedgerEntry@1101495001 : Record 50106;
    BEGIN
      //NC PIF001 > DP
      IF (CorrBatch = '') OR (CorrTemplate = '') THEN BEGIN
        IF EntryType = EntryType::Repost THEN BEGIN
          CorrTemplate := ConsolidationSetup."Gen. Jnl. Template";
          CorrBatch := ConsolidationSource."Reposted Journal Batch";
        END ELSE BEGIN
          CorrTemplate := ConsolidationSetup."Gen. Jnl. Template";
          CorrBatch := ConsolidationSource."Removed Journal Batch";
        END;
      END;

      //NC MAU02 > MP
      IF GLEntry."Posting Date" < GLSetup."Allow Transformation From" THEN BEGIN
        CorrBatch := ConsolidationSource."Closed Period Journal Batch";
      END;

      //NC MIO-10 > DP
      IF GLEntry."Posting Date" < ConsolidationSource."Allow Transformation To" THEN BEGIN
        CorrBatch := ConsolidationSource."Closed Period Journal Batch";
      END;
      //NC MIO-10 < DP

      {
      GenJnlLine1.SETRANGE("Journal Template Name", CorrTemplate);
      GenJnlLine1.SETRANGE("Journal Batch Name", CorrBatch);
      IF GenJnlLine1.FIND('+') THEN
        LineNo := GenJnlLine1."Line No." + 3
      ELSE
        LineNo := 10000;
      }
      //NC MAU02 < MP

      GenJnlLine1.RESET;
      GenJnlLine1.INIT;
      GenJnlLine1."Journal Template Name" := CorrTemplate;
      GenJnlLine1."Journal Batch Name" := CorrBatch;
      GenJnlLine1."Line No." := GetNextLineNo(CorrTemplate,CorrBatch);

      //NC MTD02 > AIG
      {
      GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
      GenJnlLine1."Account No." := GLEntry."G/L Account No.";
      }
      CASE GLEntry."Source Type" OF
          GLEntry."Source Type":: " ",GLEntry."Source Type"::"Fixed Asset":
          BEGIN
           GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
           GenJnlLine1."Account No." := GLEntry."G/L Account No.";
          END;
        GLEntry."Source Type":: Customer:
          BEGIN
            GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::Customer;
            GenJnlLine1."Account No." := GLEntry."Source No.";
            IF CustLedgEntry.GET(GLEntry."Entry No.") THEN
            BEGIN
              IF CustLedgEntry.Prepayment THEN
                GenJnlLine1.Prepayment := TRUE;
              GenJnlLine1."Posting Group" := CustLedgEntry."Customer Posting Group";

              //NC MTD02.3 > DP
              GenJnlLine1."Agreement No." := CustLedgEntry."Agreement No.";
              GenJnlLine1."Agreement Condition No." := CustLedgEntry."Agreement Condition No.";
              GenJnlLine1."Amount Type" := CustLedgEntry."Amount Type";
              //NC MTD02.3 < DP

              {
              IF CustLedgEntry.Open THEN BEGIN
                GenJnlLine1.VALIDATE("Applies-to Doc. Type",CustLedgEntry."Document Type");
                GenJnlLine1.VALIDATE("Applies-to Doc. No.",CustLedgEntry."Document No.");
                CustLedgEntry."Applies-to Doc. Type" := GenJnlLine1."Document Type";
                CustLedgEntry."Applies-to Doc. No." := DocNo;
                CustLedgEntry.MODIFY;
              END;
              }

            //NC APCOC-120 > DP
            END ELSE BEGIN
             GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
             GenJnlLine1."Account No." := GLEntry."G/L Account No.";
            //NC APCOC-120 < DP

            END;
          END;
        GLEntry."Source Type":: Vendor:
          BEGIN
           GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::Vendor;
           GenJnlLine1."Account No." := GLEntry."Source No.";
           IF VendLedgEntry.GET(GLEntry."Entry No.") THEN
           BEGIN
             IF VendLedgEntry.Prepayment THEN
               GenJnlLine1.Prepayment := TRUE;
             GenJnlLine1."Posting Group" := VendLedgEntry."Vendor Posting Group";

             //NC MTD02.3 > DP
             GenJnlLine1."Agreement No." := VendLedgEntry."Agreement No.";
             GenJnlLine1."Agreement Condition No." := VendLedgEntry."Agreement Condition No.";
             GenJnlLine1."Amount Type" := VendLedgEntry."Amount Type";
             //NC MTD02.3 < DP

             {
             IF VendLedgEntry.Open THEN BEGIN
               GenJnlLine1.VALIDATE("Applies-to Doc. Type",VendLedgEntry."Document Type");
               GenJnlLine1.VALIDATE("Applies-to Doc. No.",VendLedgEntry."Document No.");
               VendLedgEntry."Applies-to Doc. Type" := GenJnlLine1."Document Type";
               VendLedgEntry."Applies-to Doc. No." := DocNo;
               VendLedgEntry.MODIFY;
             END;
             }
           //NC APCOC-120 > DP
           END ELSE BEGIN
             GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
             GenJnlLine1."Account No." := GLEntry."G/L Account No.";
           //NC APCOC-120 < DP

           END;
          END;
        GLEntry."Source Type":: "Bank Account":
          BEGIN
           GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"Bank Account";
           GenJnlLine1."Account No." := GLEntry."Source No.";
           BankAccountPG.RESET;
           BankAccountPG.SETRANGE("G/L Bank Account No.", GLEntry."G/L Account No.");
           IF BankAccountPG.FINDFIRST THEN
             GenJnlLine1."Posting Group" := BankAccountPG.Code

           //NC APCOC-120 > DP
           ELSE BEGIN
             GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
             GenJnlLine1."Account No." := GLEntry."G/L Account No.";
           END;
           //NC APCOC-120 < DP

          END;
        //NC MTF01 > PCH
        GLEntry."Source Type"::"Fin. Instrument":
          BEGIN
            IF FILedgerEntry.GET(GLEntry."Entry No.") THEN BEGIN
              GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::FI;
              GenJnlLine1."Account No." := FILedgerEntry."FI No.";
              GenJnlLine1."FI Posting Group" := FILedgerEntry."FI Posting Group";
              GenJnlLine1."Gen. Bus. Posting Group" := FILedgerEntry."Gen. Bus. Posting Group";
              GenJnlLine1."Gen. Prod. Posting Group" := FILedgerEntry."Gen. Prod. Posting Group";
              GenJnlLine1."Amount Type" := FILedgerEntry."Amount Type";
              GenJnlLine1."FI EntryType" := FILedgerEntry."FI EntryType";
              GenJnlLine1.Conversation := FILedgerEntry.Conversation;
              GenJnlLine1."Conversation ID" := FILedgerEntry."Conversation ID";

              GenJnlLine1."Financial Instrument No." := GLEntry."Financial Instrument No.";
              GenJnlLine1."FI Portfolio" := FILedgerEntry."FI Portfolio";
              GenJnlLine1."FI Posting Book" := FILedgerEntry."FI Posting Book";
              GenJnlLine1."Short Position" := FILedgerEntry."Short Position";

           //NC APCOC-120 > DP
           END ELSE BEGIN
             GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
             GenJnlLine1."Account No." := GLEntry."G/L Account No.";
           //NC APCOC-120 < DP

            END;
          END;
          //NC MTF01 < PCH
      END;

      GenJnlLine1."Agreement No." := GLEntry."Agreement No.";
      //NC MTD02 < AIG


      //NC T#1513 > DP
      IF (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer) AND
        (NOT ConsolidationSource."Use GL Mapping")
      THEN BEGIN
        GenJnlLine1."Posting Date" := GLEntry."Posting Date";
      END;

      IF (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromNavision) OR
         //NC NCS-959 > DP
         (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBufferDealEntry) OR
         //NC NCS-959 < DP
         //NC NCS-1753 > PCH
         (ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::EventUpload) OR
         //NC NCS-1753 < PCH
         ((ConsolidationSource."Import Format" = ConsolidationSource."Import Format"::FromBuffer) AND
           ConsolidationSource."Use GL Mapping")
      THEN BEGIN
      //NC T#1513 < DP

      //NC MAU02 > MP
      IF GLEntry."Posting Date" < GLSetup."Allow Posting From" THEN BEGIN
        GenJnlLine1."Posting Date" := GLSetup."Allow Posting From";
        IF GLEntry."Historical Date" = 0D THEN
          GenJnlLine1."Source Historical Date" := GLEntry."Posting Date"
        ELSE
          GenJnlLine1."Source Historical Date" := GLEntry."Historical Date";
      END ELSE BEGIN
        GenJnlLine1."Posting Date" := GLEntry."Posting Date";
        GenJnlLine1."Source Historical Date" := GLEntry."Historical Date";
      END;

      IF GLEntry."Posting Date" < GLSetup."Allow Transformation From" THEN BEGIN
        GenJnlLine1."Posting Date" := GLSetup."Allow Transformation From";
        IF GLEntry."Historical Date" = 0D THEN
          GenJnlLine1."Source Historical Date" := GLEntry."Posting Date"
        ELSE
          GenJnlLine1."Source Historical Date" := GLEntry."Historical Date";
      END;
      //NC MAU02 < MP

      //NC T#1513 > DP
      END;
      //NC T#1513 < DP

      //NC MIO-10 > DP
      IF GLEntry."Posting Date" < ConsolidationSource."Allow Transformation To" THEN BEGIN
        IF ConsolidationSource."Post Closed Period Batch" THEN
          GenJnlLine1."Posting Date" := ConsolidationSource."Allow Transformation To"
        ELSE
          GenJnlLine1."Posting Date" := GLEntry."Posting Date";
        GenJnlLine1."Source Historical Date" := GLEntry."Posting Date";
        GenJnlLine1."Journal Batch Name" := ConsolidationSource."Closed Period Journal Batch";
      END;
      //NC MIO-10 < DP

      GenJnlLine1."Document Type" := GLEntry."Document Type";

      GenJnlLine1."Document No." := DocNo;
      GenJnlLine1.Description := GLEntry.Description;
      IF GLEntry."Original Amount" <> 0 THEN BEGIN
        GenJnlLine1."Currency Code" := GLEntry."Original Currency Code";
        GenJnlLine1."Currency Factor" :=  GLEntry."Original Currency Factor";
      END ELSE BEGIN
        GenJnlLine1."Currency Index" := GLEntry."Original Currency Code";
        GenJnlLine1."Currency Index Entry" := TRUE;
      END;
      GenJnlLine1."External Document No." := GLEntry."External Document No.";
      GenJnlLine1."Business Unit Code" := GLEntry."Business Unit Code";
      GenJnlLine1."Shortcut Dimension 1 Code" := GLEntry."Global Dimension 1 Code";
      GenJnlLine1."Shortcut Dimension 2 Code" := GLEntry."Global Dimension 2 Code";
      GenJnlLine1."Source Code" := GLEntry."Source Code";
      GenJnlLine1."Source Type" := GLEntry."Source Type";
      GenJnlLine1."Source No." := GLEntry."Source No.";
      GenJnlLine1."Reason Code" := GLEntry."Reason Code";
      GenJnlLine1."Document Date" := GLEntry."Document Date";

      //На сторнирующей полупроводке номер сторнирующей буферной операции
      GenJnlLine1."Buffer Entry No." := BufferEntryNo;

      GenJnlLine1."Cons. Source Code" := GLEntry."Cons. Source Code";
      GenJnlLine1."Export Cons. Source Code" := GLEntry."Export Cons. Source Code";
      GenJnlLine1."Source Entry No." := GLEntry."Source Entry No.";
      GenJnlLine1."Export Register No." := RegisterNo;
      //GenJnlLine1."Cons. Register Error Entry No." := GLEntry."Cons. Register Error Entry No.";

      GenJnlLine1."External Document Type" := GLEntry."External Document Type";
      GenJnlLine1."External Document ID" := GLEntry."External Document ID";
      GenJnlLine1."External Document Date" := GLEntry."External Document Date";
      GenJnlLine1."External Operation No" := GLEntry."External Operation No";
      GenJnlLine1."FA Operation" := GLEntry."FA Operation";
      GenJnlLine1."Begining Date" := GLEntry."Source Posting Date";
      GenJnlLine1."Ending Date" := GLEntry."Ending Date";
      //GenJnlLine1."Corresp. G/L Account No." := GLEntry."Corresp. G/L Account No.";
      //GenJnlLine1.VALIDATE(Correction, TRUE);


      //NC NCS-806 > DP
      IF GLEntry.Quantity <> 0 THEN
        GenJnlLine1.VALIDATE(Quantity,-GLEntry.Quantity);
      {
      GenJnlLine1.Quantity := -GLEntry.Quantity;
      GenJnlLine1."Debit Quantity" := -GLEntry."Debit Quantity";
      GenJnlLine1."Credit Quantity" := -GLEntry."Credit Quantity";
      }
      //NC NCS-806 < DP

      IF GLEntry."Original Amount" <> 0 THEN BEGIN
        IF GLEntry."Debit Amount" <> 0 THEN
          GenJnlLine1.VALIDATE("Debit Amount", -GLEntry."Original Debit Amount");
        IF GLEntry."Credit Amount" <> 0 THEN
          GenJnlLine1.VALIDATE("Credit Amount", -GLEntry."Original Credit Amount");
      END ELSE BEGIN
        IF GLEntry."Debit Amount" <> 0 THEN
          GenJnlLine1.VALIDATE("Debit Amount", -GLEntry."Debit Amount");
        IF GLEntry."Credit Amount" <> 0 THEN
          GenJnlLine1.VALIDATE("Credit Amount", -GLEntry."Credit Amount" );
      END;


      //Сохраняем историческую дату, ссылку на корректируемую операцию
      //GenJnlLine1."Historical Date 1C" := HistoricalDate;
      IF EntryType = EntryType::Repost THEN BEGIN
        GenJnlLine1.Reposted := TRUE;
      END ELSE BEGIN
        GenJnlLine1.Removed := TRUE;
      END;

      GenJnlLine1."Local G/L Account" := GLEntry."Local G/L Account";
      GenJnlLine1."Linked G/L Entry No." := GLEntry."Entry No.";
      //NC PIF010 > MP
      GenJnlLine1."Transaction Type" := GenJnlLine1."Transaction Type"::Automatic;
      //NC PIF010 < MP
      //NC MBD01 > MP
      GenJnlLine1."Due Date" := GLEntry."Due Date";
      GenJnlLine1."External System ID" := GLEntry."External System ID";
      GenJnlLine1."Balance Entry" := GLEntry."Balance Entry";
      //NC MBD01 < MP
      //NC MDR01 > MP
      GenJnlLine1."Financial Instrument No." := GLEntry."Financial Instrument No.";
      //NC MDR01 < MP

      //NC APCOC-94 < DP
      GenJnlLine1."Not Translate" := GLEntry."Not Translate";
      //NC APCOC-94 > DP
      //NC APCOC-117 > RD
      GenJnlLine1."Not Translate IFRS" := GLEntry."Not Translate IFRS";
      //NC APCOC-117 < RD

      IF GenJnlLine1."Amount (LCY)" = 0 THEN
        GenJnlLine1."Allow Zero-Amount Posting" := TRUE;
      GenJnlLine1.INSERT;
      CopyEntryDim(GLEntry,GenJnlLine1,'',ConsolidationSource);

      //NC PIF001 < DP
    END;

    PROCEDURE CopyEntryDim@1210022(GLEntry1@1000000000 : Record 17;GenJnlLineTo@1000000001 : Record 81;CompName@1210000 : Text[150];ConsolSource@1000000005 : Record 50001);
    VAR
      LedgerDim@1000000002 : Record 355;
      JnlLineDim@1000000003 : Record 356;
      Dim@1000000006 : Record 348;
      DefaultDimension@1101495000 : Record 352;
      DefaultDimensionAdvanced@1101495001 : Record 50128;
    BEGIN
      //NC PIF001 > DP
      IF CompName <> '' THEN BEGIN
        LedgerDim.CHANGECOMPANY(CompName);
      END;
      LedgerDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
      LedgerDim.SETRANGE("Entry No.", GLEntry1."Entry No.");
      //NC MTF01 > PCH
      LedgerDim.SETFILTER("Dimension Value Code",'<>%1','');
      //NC MTF01 < PCH
      IF LedgerDim.FINDSET(FALSE,FALSE) THEN
        REPEAT
          JnlLineDim.INIT;
          JnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
          JnlLineDim."Journal Template Name" := GenJnlLineTo."Journal Template Name";
          JnlLineDim."Journal Batch Name" := GenJnlLineTo."Journal Batch Name";
          JnlLineDim."Journal Line No." := GenJnlLineTo."Line No.";
          //NC MDR01 > MP
          {
          IF (CompName <> '') AND Dim.GET(LedgerDim."Dimension Code") AND (Dim."Need Map")
            AND (NOT CloseOperation)
            AND (ConsolSource."Import Format" = ConsolSource."Import Format"::FromNavision)
          THEN
            MappDimension(GenJnlLineTo,JnlLineDim,LedgerDim,ConsolSource,0,'')
          ELSE BEGIN
            JnlLineDim."Dimension Code" := LedgerDim."Dimension Code";
            JnlLineDim."Dimension Value Code" := LedgerDim."Dimension Value Code";
          END;
          IF ((Dim."Need Map" AND (NOT CloseOperation) AND (CurrentCompany.Type = CurrentCompany.Type::"GAAP RUR"))
            OR (NOT Dim."Need Map") OR (ConsolSource."Import Format" <> ConsolSource."Import Format"::FromNavision)) THEN
          }
          JnlLineDim."Dimension Code" := LedgerDim."Dimension Code";
          JnlLineDim."Dimension Value Code" := LedgerDim."Dimension Value Code";
          //NC MDR01 < MP

          //NC NCS-894 > DP
          {
          IF NOT JnlLineDim.INSERT(TRUE) THEN;
          }
          IF NOT JnlLineDim.INSERT THEN;
          //NC NCS-894 > DP

          //NC NCS-2335 > DP
          IF JnlLineDim."Dimension Code" = ConsolidationSetup."Deal Dimension Code" THEN BEGIN
            IF GenJnlLineTo."Account Type" = GenJnlLineTo."Account Type"::Vendor THEN BEGIN
              DefaultDimensionAdvanced.RESET;
              DefaultDimensionAdvanced.SETRANGE("Table ID", 14901);
              DefaultDimensionAdvanced.SETRANGE("Source No.",GenJnlLineTo."Account No.");
              DefaultDimensionAdvanced.SETRANGE("No.", GenJnlLineTo."Agreement No.");
              DefaultDimensionAdvanced.SETFILTER("Dimension Value Code",'<>%1','');
              DefaultDimensionAdvanced.SETRANGE("Value Posting",DefaultDimensionAdvanced."Value Posting"::"Same Code");
              IF DefaultDimensionAdvanced.FINDSET THEN
              REPEAT
                JnlLineDim.INIT;
                JnlLineDim."Table ID" := 81;
                JnlLineDim."Journal Template Name" := GenJnlLineTo."Journal Template Name";
                JnlLineDim."Journal Batch Name" := GenJnlLineTo."Journal Batch Name";
                JnlLineDim."Journal Line No." := GenJnlLineTo."Line No.";
                JnlLineDim."Dimension Code" := DefaultDimensionAdvanced."Dimension Code";
                JnlLineDim."Dimension Value Code" := DefaultDimensionAdvanced."Dimension Value Code";

                IF NOT JnlLineDim.INSERT THEN JnlLineDim.MODIFY;

                IF (GLSetup."Global Dimension 1 Code" <> '') AND
                  (JnlLineDim."Dimension Code" = GLSetup."Global Dimension 1 Code") THEN BEGIN
                    GenJnlLineTo."Shortcut Dimension 1 Code" := JnlLineDim."Dimension Value Code";
                    GenJnlLineTo.MODIFY;
                END;
                IF (GLSetup."Global Dimension 2 Code" <> '') AND
                 (JnlLineDim."Dimension Code" = GLSetup."Global Dimension 2 Code") THEN BEGIN
                    GenJnlLineTo."Shortcut Dimension 2 Code" := JnlLineDim."Dimension Value Code";
                    GenJnlLineTo.MODIFY;
                END;
              UNTIL DefaultDimensionAdvanced.NEXT = 0;
            END;
            IF GenJnlLineTo."Account Type" = GenJnlLineTo."Account Type"::Customer THEN BEGIN
              DefaultDimensionAdvanced.RESET;
              DefaultDimensionAdvanced.SETRANGE("Table ID", 14902);
              DefaultDimensionAdvanced.SETRANGE("Source No.",GenJnlLineTo."Account No.");
              DefaultDimensionAdvanced.SETRANGE("No.", GenJnlLineTo."Agreement No.");
              DefaultDimensionAdvanced.SETFILTER("Dimension Value Code",'<>%1','');
              DefaultDimensionAdvanced.SETRANGE("Value Posting",DefaultDimensionAdvanced."Value Posting"::"Same Code");
              IF DefaultDimensionAdvanced.FINDSET THEN
                REPEAT
                  JnlLineDim.INIT;
                  JnlLineDim."Table ID" := 81;
                  JnlLineDim."Journal Template Name" := GenJnlLineTo."Journal Template Name";
                  JnlLineDim."Journal Batch Name" := GenJnlLineTo."Journal Batch Name";
                  JnlLineDim."Journal Line No." := GenJnlLineTo."Line No.";
                  JnlLineDim."Dimension Code" := DefaultDimensionAdvanced."Dimension Code";
                  JnlLineDim."Dimension Value Code" := DefaultDimensionAdvanced."Dimension Value Code";

                  IF NOT JnlLineDim.INSERT THEN JnlLineDim.MODIFY;

                  IF (GLSetup."Global Dimension 1 Code" <> '') AND
                    (JnlLineDim."Dimension Code" = GLSetup."Global Dimension 1 Code") THEN BEGIN
                      GenJnlLineTo."Shortcut Dimension 1 Code" := JnlLineDim."Dimension Value Code";
                      GenJnlLineTo.MODIFY;
                  END;
                  IF (GLSetup."Global Dimension 2 Code" <> '') AND
                    (JnlLineDim."Dimension Code" = GLSetup."Global Dimension 2 Code") THEN BEGIN
                      GenJnlLineTo."Shortcut Dimension 2 Code" := JnlLineDim."Dimension Value Code";
                      GenJnlLineTo.MODIFY;
                  END;
                UNTIL DefaultDimensionAdvanced.NEXT = 0;
            END;
          END;
          //NC NCS-2335 < DP

        UNTIL LedgerDim.NEXT = 0;

      //NC PIF001 < DP

      //NC NCS-2335 > DP
      IF GenJnlLineTo."Account Type" = GenJnlLineTo."Account Type"::"Bank Account" THEN BEGIN
        DefaultDimension.RESET;
        DefaultDimension.SETRANGE("Table ID", 270);
        DefaultDimension.SETRANGE("No.",GenJnlLineTo."Account No.");
        DefaultDimension.SETFILTER("Dimension Value Code",'<>%1','');
        DefaultDimension.SETRANGE("Value Posting",DefaultDimensionAdvanced."Value Posting"::"Same Code");
        IF DefaultDimension.FINDSET THEN
          REPEAT
            JnlLineDim.INIT;
            JnlLineDim."Table ID" := 81;
            JnlLineDim."Journal Template Name" := GenJnlLineTo."Journal Template Name";
            JnlLineDim."Journal Batch Name" := GenJnlLineTo."Journal Batch Name";
            JnlLineDim."Journal Line No." := GenJnlLineTo."Line No.";
            JnlLineDim."Dimension Code" := DefaultDimension."Dimension Code";
            JnlLineDim."Dimension Value Code" := DefaultDimension."Dimension Value Code";
            IF NOT JnlLineDim.INSERT THEN
              JnlLineDim.MODIFY;
            IF (GLSetup."Global Dimension 1 Code" <> '') AND
              (JnlLineDim."Dimension Code" = GLSetup."Global Dimension 1 Code") THEN BEGIN
                GenJnlLineTo."Shortcut Dimension 1 Code" := JnlLineDim."Dimension Value Code";
                GenJnlLineTo.MODIFY;
            END;
            IF (GLSetup."Global Dimension 2 Code" <> '') AND
              (JnlLineDim."Dimension Code" = GLSetup."Global Dimension 2 Code") THEN BEGIN
                GenJnlLineTo."Shortcut Dimension 2 Code" := JnlLineDim."Dimension Value Code";
                GenJnlLineTo.MODIFY;
            END;
          UNTIL DefaultDimension.NEXT = 0;
        END;
      //NC NCS-2335 < DP
    END;

    PROCEDURE CreateErrorLogEntry@1000000010(ConsSource@1210000 : Code[20];ConsRegNo@1000000001 : Integer;ErrorType@1000000003 : 'Abscense,Unknown';SourceType@1000000004 : 'Dimension,G/L Account';SourceEntryNo@1000000005 : Text[20];SourceCreatDate@1101495000 : Date;ErrSourceCode@1000000006 : Code[20];ErrSourceDocNo@1000000007 : Code[20];TxtDescr@1000000008 : Text[150];ErrSubSourceCode@1210001 : Code[20]) : Integer;
    BEGIN
      //NC PIF001 > DP
      //NC MDB01 > MP
      {
      ConsErrorJnl.INIT;
      ConsErrorJnl."Cons. Source Code" := ConsSource;
      ConsErrorJnl."Cons. Register" := ConsRegNo;
      ConsErrorJnl."Entry No." := GetNextErrorLogEntryNo(ConsSource,ConsRegNo);
      ConsErrorJnl."Entry Type":= ErrorType;
      ConsErrorJnl."Source Type" := SourceType;
      ConsErrorJnl.Description := TxtDescr;
      ConsErrorJnl."Source Entry No." := SourceEntryNo;
      ConsErrorJnl."Document Date" := SourceCreatDate;
      ConsErrorJnl."Source Code" := ErrSourceCode;
      ConsErrorJnl."Source Document No." := ErrSourceDocNo;
      ConsErrorJnl."SubSource Code" := ErrSubSourceCode;
      ConsErrorJnl.INSERT;
      EXIT(ConsErrorJnl."Entry No.");
      }
      //NC MDB01 < MP
      //NC PIF001 < DP
    END;

    PROCEDURE GetNextErrorLogEntryNo@1000000011(ConsSource@1210000 : Code[20];ConsRegNo@1000000002 : Integer) : Integer;
    BEGIN
      //NC PIF001 > DP
      //NC MDB01 > MP
      {
      ConsErrorJnl.RESET;
      ConsErrorJnl.SETRANGE("Cons. Source Code",ConsSource);
      ConsErrorJnl.SETRANGE("Cons. Register",ConsRegNo);
      IF ConsErrorJnl.RECORDLEVELLOCKING THEN
        ConsErrorJnl.LOCKTABLE;
      IF ConsErrorJnl.FIND('+') THEN
        EXIT(ConsErrorJnl."Entry No." + 1)
      ELSE
        EXIT(1);
      }
      //NC MDB01 < MP
      //NC PIF001 < DP
    END;

    PROCEDURE MappChartsOfAccount@1000000024(VAR GenJnlLine1@1000000000 : Record 81;VAR GLEntry1@1000000001 : Record 17;VAR LedgDimension@1000000010 : Record 355;ConsolidationSource1@1000000009 : Record 50001;ConsSession@1210000 : Integer;DocumentNo@1210002 : Code[20];MappingCode@1000000004 : Code[20]) : Code[20];
    VAR
      ConvOfChartOfAccounts@1000000008 : Record 50002;
      ConsSetup@1000000021 : Record 50000;
      OperationType@1000000015 : ' ,Debit,Credit';
      DimCode1@1000000014 : Code[20];
      DimCode2@1000000013 : Code[20];
      DimVal1@1000000016 : Code[20];
      DimVal2@1000000017 : Code[20];
      MappingFind@1000000018 : Boolean;
      GLAccount@1210001 : Record 15;
      IsErr@1210003 : Boolean;
      LedgDimContr@1210004 : Record 355;
      LedgDimIntContr@1210005 : Record 355;
      Text50055@1210006 : TextConst 'RUS=Вы должны определить Измерение %1 в %2 или %3 таблицы %4.';
      DimValueContr@1000000002 : Record 349;
      cConsAcc@1210011 : Code[20];
      lDim1Exist@1210009 : Boolean;
      lDim2Exist@1210008 : Boolean;
      lDim3Exist@1210007 : Boolean;
      CountLEDim@1101495000 : Integer;
      Rating@1101495001 : Integer;
      LinkedDim@1000000003 : Record 50016;
      GLEntryBufEmpty@1101495002 : Record 50093;
    BEGIN
      //NC PIT006 > AK
      Log.StartCounter(-11);
      //Определение типа операции
      OperationType := OperationType::" ";
      IF GLEntry1."Debit Amount" <> 0 THEN
        OperationType := OperationType::Debit
      ELSE
        IF GLEntry1."Credit Amount" <> 0 THEN
          OperationType := OperationType::Credit;
      MappingFind := FALSE;



      //NC PIF001 > DP
      //LedgDimension.RESET;
      LedgDimension.SETRANGE("Table ID", DATABASE::"G/L Entry");
      LedgDimension.SETRANGE("Entry No.", GLEntry1."Entry No.");
      //NC OPT > PCH
      //IF LedgDimension.FINDFIRST THEN
      CountLEDim := LedgDimension.COUNT;
      //NC OPT < PCH

      //NC OPT > PCH
      //Устанавливаем сортировку по убыванию - А ТЕПЕРЬ НЕ УСТАНАВЛИВАЕМ (PCH)
      //ConvOfChartOfAccounts.ASCENDING(FALSE);
      //NC MDTM03 > MP
      {
      ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Source Account Code","Operation Type","Rating Transformation");
      }
      ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name",
                                          "Source Account Code","Operation Type",
                                          "Rating Transformation",Active);
      ConvOfChartOfAccounts.SETRANGE("Company Name",COMPANYNAME);
      ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
      //NC MDTM03 < MP
      ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
      //NC OPT < PCH
      ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
      ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
      ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType);
      IF ConvOfChartOfAccounts.FINDSET THEN
        REPEAT
          //проверяем, есть ли строка, соответствующая исключению, в измерениях в данной операции

          IF cConsAcc='' THEN BEGIN
            //Проверка на соответствие до 3-х измерений
            lDim1Exist := TRUE;
            lDim2Exist := TRUE;
            lDim3Exist := TRUE;
            //NC OPT > PCH
            Rating := 0;
            //NC OPT < PCH

            WITH LedgDimension DO BEGIN
              IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND (ConvOfChartOfAccounts."Source Dimension Value Code 1" <>
      '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                lDim1Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim1Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;

              IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND (ConvOfChartOfAccounts."Source Dimension Value Code 2" <>
      '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                lDim2Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim2Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;

              IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND (ConvOfChartOfAccounts."Source Dimension Value Code 3" <>
      '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                lDim3Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim3Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;
            END;

            //NC OPT > PCH
            //IF lDim1Exist AND lDim2Exist AND lDim3Exist THEN
            IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN
            //NC OPT < PCH
              cConsAcc := ConvOfChartOfAccounts."Receiver Account Code";

          END;
        UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');

      IF cConsAcc='' THEN BEGIN
        ConvOfChartOfAccounts.RESET;
        //NC OPT > PCH
        //ConvOfChartOfAccounts.ASCENDING(FALSE);
        //NC MDTM03 > MP
        {
        ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Source Account Code","Operation Type","Rating Transformation");
        }
        ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name",
                                            "Source Account Code","Operation Type",
                                            "Rating Transformation",Active);
        ConvOfChartOfAccounts.SETRANGE("Company Name",COMPANYNAME);
        ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
        //NC MDTM03 < MP
        ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
        //NC OPT < PCH
        ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
        ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
        ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType::" ");
        IF ConvOfChartOfAccounts.FINDSET THEN
          REPEAT
            IF cConsAcc='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;
              //NC OPT > PCH
              Rating := 0;
              //NC OPT < PCH

              WITH LedgDimension DO BEGIN
                IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 1" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                  lDim1Exist := NOT ISEMPTY;
                  //NC OPT > PCH
                  IF lDim1Exist THEN
                    Rating -= 1;
                  //NC OPT < PCH
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 2" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                  //NC OPT > PCH
                  IF lDim2Exist THEN
                    Rating -= 1;
                  //NC OPT < PCH
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 3" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                  //NC OPT > PCH
                  IF lDim3Exist THEN
                    Rating -= 1;
                  //NC OPT < PCH
                END;
              END;

              //NC OPT > PCH
              //IF lDim1Exist AND lDim2Exist AND lDim3Exist THEN
              IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN
              //NC OPT < PCH
                cConsAcc := ConvOfChartOfAccounts."Receiver Account Code"

            END;
          UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');
      END;
      //NC MDTM03 > MP
      IF cConsAcc='' THEN BEGIN
        ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name",
                                            "Source Account Code","Operation Type",
                                            "Rating Transformation",Active);
        ConvOfChartOfAccounts.SETRANGE("Company Name",'');
        ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
        ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
        ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
        ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
        ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType);
        IF ConvOfChartOfAccounts.FINDSET THEN
          REPEAT
            //проверяем, есть ли строка, соответствующая исключению, в измерениях в данной операции

            IF cConsAcc='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;
              Rating := 0;

              WITH LedgDimension DO BEGIN
                IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 1" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                  lDim1Exist := NOT ISEMPTY;
                  IF lDim1Exist THEN
                    Rating -= 1;
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 2" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                  IF lDim2Exist THEN
                    Rating -= 1;
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 3" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                  IF lDim3Exist THEN
                    Rating -= 1;
                END;
              END;

              IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN
                cConsAcc := ConvOfChartOfAccounts."Receiver Account Code";

            END;
          UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');
      END;
      IF cConsAcc='' THEN BEGIN
        ConvOfChartOfAccounts.RESET;
        ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name",
                                            "Source Account Code","Operation Type",
                                            "Rating Transformation",Active);
        ConvOfChartOfAccounts.SETRANGE("Company Name",'');
        ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
        ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
        ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
        ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
        ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType::" ");
        IF ConvOfChartOfAccounts.FINDSET THEN
          REPEAT
            IF cConsAcc='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;
              Rating := 0;

              WITH LedgDimension DO BEGIN
                IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 1" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                  lDim1Exist := NOT ISEMPTY;
                  IF lDim1Exist THEN
                    Rating -= 1;
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 2" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                  IF lDim2Exist THEN
                    Rating -= 1;
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 3" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                  IF lDim3Exist THEN
                    Rating -= 1;
                END;
              END;

              IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN
                cConsAcc := ConvOfChartOfAccounts."Receiver Account Code"

            END;
          UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');
      END;
      //NC MDTM03 < MP

      IF cConsAcc<>'' THEN
        MappingFind := TRUE;
      {
      LedgDimension.SETRANGE("Entry No.");
      LedgDimension.SETRANGE("Dimension Code");
      LedgDimension.SETRANGE("Dimension Value Code");

      LedgDimContr.CHANGECOMPANY(ConsolidationSource1."Company Name");
      IF NOT LedgDimContr.GET(DATABASE::"G/L Entry", GLEntry1."Entry No.",ConsolidationSetup."Contragent Dim Code")
      THEN BEGIN
        IF NOT ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
         OperationType, '', '', '', '', '', '')
        THEN
          IF NOT ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
            OperationType::" ", '', '', '', '', '', '')
          THEN;
      END;

      LedgDimIntContr.CHANGECOMPANY(ConsolidationSource1."Company Name");
      IF NOT LedgDimIntContr.GET(DATABASE::"G/L Entry", GLEntry1."Entry No.",
                              ConsolidationSetup."Int Contragent Dimension Code")
      THEN BEGIN
        IF NOT ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
         OperationType, '', '', '', '', '', '')
        THEN
          IF NOT ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
            OperationType::" ", '', '', '', '', '', '')
          THEN;
      END;

      DimValueContr.CHANGECOMPANY(ConsolidationSource1."Company Name");
      IF DimValueContr.GET(ConsolidationSetup."Contragent Dim Code",LedgDimContr."Dimension Value Code") AND
        (DimValueContr."Int Contragent Dim Value" <> LedgDimIntContr."Dimension Value Code")
      THEN
        IF NOT ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
         OperationType, '', '', '', '', '', '')
        THEN
          IF NOT ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
            OperationType::" ", '', '', '', '', '', '')
          THEN;

      IF cConsAcc = '' THEN
        EXIT(ConvOfChartOfAccounts."Receiver Account Code");
      }
      //NC PIF010 > MP
      IF (ConsolidationSource1."Import Format" = ConsolidationSource1."Import Format"::FromBuffer) AND
         ConsolidationSource1."Use GL Mapping"
      THEN BEGIN
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 1" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 1" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(1,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(1,GLEntry1."Entry No.",gConsBuffer,LedgDimension);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimension.INIT;
          LedgDimension."Table ID" := 17;
          LedgDimension."Entry No." := GLEntry1."Entry No.";
          LedgDimension."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 1";
          LedgDimension."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 1";
          IF NOT LedgDimension.INSERT THEN
            LedgDimension.MODIFY;
          LinkedDim.RESET;
          LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 1");
          LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 1");
          IF LinkedDim.FINDSET THEN
            REPEAT
              LedgDimension.INIT;
              LedgDimension."Table ID" := 17;
              LedgDimension."Entry No." := GLEntry1."Entry No.";
              LedgDimension."Dimension Code" := LinkedDim."Linked Dimension Code";
              LedgDimension."Dimension Value Code" := LinkedDim."Linked Dimension Value";
              IF NOT LedgDimension.INSERT THEN;
              //  LedgDimension.MODIFY;
            UNTIL LinkedDim.NEXT = 0;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 2" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 2" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(2,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(2,GLEntry1."Entry No.",gConsBuffer,LedgDimension);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimension.INIT;
          LedgDimension."Table ID" := 17;
          LedgDimension."Entry No." := GLEntry1."Entry No.";
          LedgDimension."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 2";
          LedgDimension."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 2";
          IF NOT LedgDimension.INSERT THEN
            LedgDimension.MODIFY;
          LinkedDim.RESET;
          LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 2");
          LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 2");
          IF LinkedDim.FINDSET THEN
            REPEAT
              LedgDimension.INIT;
              LedgDimension."Table ID" := 17;
              LedgDimension."Entry No." := GLEntry1."Entry No.";
              LedgDimension."Dimension Code" := LinkedDim."Linked Dimension Code";
              LedgDimension."Dimension Value Code" := LinkedDim."Linked Dimension Value";
              IF NOT LedgDimension.INSERT THEN;
              //  LedgDimension.MODIFY;
            UNTIL LinkedDim.NEXT = 0;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 3" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 3" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(3,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(3,GLEntry1."Entry No.",gConsBuffer,LedgDimension);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimension.INIT;
          LedgDimension."Table ID" := 17;
          LedgDimension."Entry No." := GLEntry1."Entry No.";
          LedgDimension."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 3";
          LedgDimension."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 3";
          IF NOT LedgDimension.INSERT THEN
            LedgDimension.MODIFY;
          LinkedDim.RESET;
          LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 3");
          LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 3");
          IF LinkedDim.FINDSET THEN
            REPEAT
              LedgDimension.INIT;
              LedgDimension."Table ID" := 17;
              LedgDimension."Entry No." := GLEntry1."Entry No.";
              LedgDimension."Dimension Code" := LinkedDim."Linked Dimension Code";
              LedgDimension."Dimension Value Code" := LinkedDim."Linked Dimension Value";
              IF NOT LedgDimension.INSERT THEN;
              //  LedgDimension.MODIFY;
            UNTIL LinkedDim.NEXT = 0;
        END;
      END;
      //NC PIF010 < MP
      Log.StartCounter(11);
      EXIT(cConsAcc);
      //NC PIF001 < DP
    END;

    PROCEDURE MappDimension@1210008(VAR GenJnlLine1@1210001 : Record 81;VAR GenJnlLineDim@1000000000 : Record 356;VAR LedgDimension@1000000010 : Record 355;ConsolidationSource@1000000009 : Record 50001;ConsSession@1210000 : Integer;GLAccNo@1000000001 : Code[20];MappingCode@1000000004 : Code[20]) IsErr : Boolean;
    VAR
      ConvDimensions@1000000008 : Record 50003;
      DimCode@1000000014 : Code[20];
      DimVal@1000000013 : Code[20];
      JournalLineDimension@1000000002 : Record 356;
      Defaultdim@1000000003 : Record 352;
      lDim1Exist@1210002 : Boolean;
      lDim2Exist@1210003 : Boolean;
      lDim3Exist@1210004 : Boolean;
      ConsDimCode@1210005 : Code[20];
      ConsDimValue@1210007 : Code[20];
      LedgDimension1@1210006 : Record 355;
    BEGIN
      //NC PIF001 > DP
      Log.StartCounter(-13);
      IsErr := FALSE;
      DimCode := LedgDimension."Dimension Code";
      DimVal := LedgDimension."Dimension Value Code";


      IF ConsolidationSetup."Mapping Dimension Type"=ConsolidationSetup."Mapping Dimension Type"::"Combination-To-One" THEN BEGIN
        ConsDimCode := '';
        ConsDimValue := '';
        LedgDimension1.CHANGECOMPANY(ConsolidationSource."Company Name");
        LedgDimension1.RESET;
        LedgDimension1.SETRANGE("Table ID", DATABASE::"G/L Entry");
        LedgDimension1.SETRANGE("Entry No.", LedgDimension."Entry No.");

        ConvDimensions.ASCENDING(FALSE);
        ConvDimensions.SETRANGE("Mapping Code",MappingCode);
        ConvDimensions.SETRANGE("Source Dimension Code",DimCode);
        ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
        IF ConvDimensions.FIND('-') THEN
          REPEAT
            //проверяем, есть ли строка, соответствующая исключению, в измерениях в данной операции

            IF ConsDimCode='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;

              WITH LedgDimension1 DO BEGIN
                IF ConvDimensions."Source Dimension Code" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code");
                  lDim1Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 2" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 2");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 3" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 3");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                END;
              END;
              IF (lDim1Exist AND lDim2Exist AND lDim3Exist) THEN BEGIN
                ConsDimCode := ConvDimensions."Receiver Dimension Code";
                ConsDimValue := ConvDimensions."Receiver Dimension Value Code";
              END
            END;
          UNTIL ConvDimensions.NEXT = 0;
          IF ConsDimCode<>'' THEN BEGIN
            IF NOT JournalLineDimension.GET(81, GenJnlLine1."Journal Template Name", GenJnlLine1."Journal Batch Name",
              GenJnlLine1."Line No.", 0, ConvDimensions."Receiver Dimension Code")
            THEN BEGIN
              GenJnlLineDim."Dimension Code" := ConsDimCode;
              GenJnlLineDim."Dimension Value Code" := ConsDimValue;
              GenJnlLineDim."Dim in Source" := DimCode;
              GenJnlLineDim."Dim Value Code in Source" := DimVal;
            END ELSE BEGIN
              Defaultdim.CHANGECOMPANY(ConsolidationSource."Company Name");
              IF Defaultdim.GET(15,GLAccNo,LedgDimension."Dimension Code") THEN BEGIN
                GenJnlLineDim."Dimension Code" := ConsDimCode;
                GenJnlLineDim."Dimension Value Code" := ConsDimValue;
                GenJnlLineDim."Dim in Source" := DimCode;
                GenJnlLineDim."Dim Value Code in Source" := DimVal;
              END ELSE BEGIN
                GenJnlLineDim."Dimension Code" := JournalLineDimension."Dimension Code";
                GenJnlLineDim."Dimension Value Code" := JournalLineDimension."Dimension Value Code";
                GenJnlLineDim."Dim in Source" := JournalLineDimension."Dim in Source";
                GenJnlLineDim."Dim Value Code in Source" := JournalLineDimension."Dim Value Code in Source";
              END;
            END;
          END;
      END ELSE BEGIN
      //NCMDTM02 > MP
      {
      IF ConvDimensions.GET(ConsolidationSource.Code, DimCode, DimVal) THEN BEGIN
      }
      ConvDimensions.SETCURRENTKEY("Company Name","Source Dimension Code","Source Dimension Value Code");
      ConvDimensions.SETRANGE("Mapping Code",MappingCode);
      //NC MDTA02 > MP
      ConvDimensions.SETRANGE("Company Name",COMPANYNAME);
      //NC MDTA02 < MP
      ConvDimensions.SETRANGE("Source Dimension Code",DimCode);
      ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
      IF ConvDimensions.FINDFIRST THEN BEGIN
      //NCMDTM02 < MP
        IF NOT JournalLineDimension.GET(81, GenJnlLine1."Journal Template Name", GenJnlLine1."Journal Batch Name",
          GenJnlLine1."Line No.", 0, ConvDimensions."Receiver Dimension Code")
        THEN BEGIN
          GenJnlLineDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
          GenJnlLineDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
          GenJnlLineDim."Dim in Source" := DimCode;
          GenJnlLineDim."Dim Value Code in Source" := DimVal;
        END ELSE BEGIN
          Defaultdim.CHANGECOMPANY(ConsolidationSource."Company Name");
          IF Defaultdim.GET(15,GLAccNo,LedgDimension."Dimension Code") THEN BEGIN
            GenJnlLineDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
            GenJnlLineDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
            GenJnlLineDim."Dim in Source" := DimCode;
            GenJnlLineDim."Dim Value Code in Source" := DimVal;
          END ELSE BEGIN
            GenJnlLineDim."Dimension Code" := JournalLineDimension."Dimension Code";
            GenJnlLineDim."Dimension Value Code" := JournalLineDimension."Dimension Value Code";
            GenJnlLineDim."Dim in Source" := JournalLineDimension."Dim in Source";
            GenJnlLineDim."Dim Value Code in Source" := JournalLineDimension."Dim Value Code in Source";
          END;
        END;
      //NC MDTA02 > MP
      {
      END;
      }
      END ELSE BEGIN
        ConvDimensions.SETRANGE("Company Name",'');
        IF ConvDimensions.FINDFIRST THEN BEGIN
          IF NOT JournalLineDimension.GET(81, GenJnlLine1."Journal Template Name", GenJnlLine1."Journal Batch Name",
            GenJnlLine1."Line No.", 0, ConvDimensions."Receiver Dimension Code")
          THEN BEGIN
            GenJnlLineDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
            GenJnlLineDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
            GenJnlLineDim."Dim in Source" := DimCode;
            GenJnlLineDim."Dim Value Code in Source" := DimVal;
          END ELSE BEGIN
            Defaultdim.CHANGECOMPANY(ConsolidationSource."Company Name");
            IF Defaultdim.GET(15,GLAccNo,LedgDimension."Dimension Code") THEN BEGIN
              GenJnlLineDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
              GenJnlLineDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
              GenJnlLineDim."Dim in Source" := DimCode;
              GenJnlLineDim."Dim Value Code in Source" := DimVal;
            END ELSE BEGIN
              GenJnlLineDim."Dimension Code" := JournalLineDimension."Dimension Code";
              GenJnlLineDim."Dimension Value Code" := JournalLineDimension."Dimension Value Code";
              GenJnlLineDim."Dim in Source" := JournalLineDimension."Dim in Source";
              GenJnlLineDim."Dim Value Code in Source" := JournalLineDimension."Dim Value Code in Source";
            END;
          END;
        END;
      END;
      //NC MDTA02 < MP
      END;
      Log.StartCounter(13);
      //NC PIF001 < DP
    END;

    PROCEDURE CheckExchangeCorrNav@1210012(GLEntry@1210000 : Record 17;ConsSourceCode@1210003 : Code[20]) : Boolean;
    VAR
      Spec@1210001 : Boolean;
      SpecialCorrespondence@1210002 : Record 50009;
      DebitAccount@1000000000 : Code[20];
      CreditAccount@1000000001 : Code[20];
    BEGIN
      //NC PIF001 > DP
      {
      IF GLEntry."Debit Amount" <> 0 THEN
        DebitAccount := GLEntry."G/L Account No."
      ;//ELSE
        //DebitAccount := GLEntry."Corresp. G/L Account No.";
      IF GLEntry."Credit Amount" <> 0 THEN
        CreditAccount := GLEntry."G/L Account No."
      ;//ELSE
        //CreditAccount := GLEntry."Corresp. G/L Account No.";

      IF SpecialCorrespondence.GET(ConsSourceCode, SpecialCorrespondence."Correspondenсe Type"::"0", DebitAccount,
      CreditAccount,
        '', '', '', '') THEN
        EXIT(TRUE)
      ELSE
        IF SpecialCorrespondence.GET(ConsSourceCode, SpecialCorrespondence."Correspondenсe Type"::"0", DebitAccount, '',
          '', '', '', '') THEN
          EXIT(TRUE)
        ELSE
          IF SpecialCorrespondence.GET(ConsSourceCode, SpecialCorrespondence."Correspondenсe Type"::"0", '', CreditAccount,
            '', '', '', '') THEN
            EXIT(TRUE)
          ELSE
            IF SpecialCorrespondence.GET(ConsSourceCode, SpecialCorrespondence."Correspondenсe Type"::"0", '', '',
              '', '', '', '') THEN
              EXIT(TRUE);
      EXIT(FALSE);
      }
      //NC PIF001 < DP
    END;

    PROCEDURE CheckErrorsConsFromBuffer@1210010(VAR ConsBuffer@1210007 : Record 50008;ConsolidationSource@1210004 : Record 50001;VAR TMPLedgEntryDimCheck@1210001 : TEMPORARY Record 355;OperType@1210000 : 'Debit,Credit';ConsRegister@1210002 : Record 50005);
    VAR
      LedgerEntryDimTMP@1210003 : TEMPORARY Record 355;
      nErr@1210005 : Integer;
    BEGIN
      //NC PIF001 > DP
      LedgerEntryDimTMP.RESET;
      LedgerEntryDimTMP.DELETEALL;
      IF OperType = OperType::Debit THEN
        nErr := CheckDebitDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister)
      ELSE
        nErr := CheckCreditDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister);
      //NC PIF001 < DP
    END;

    PROCEDURE CheckDebitDimBuffer@1210011(ConsBuffer@1210000 : Record 50008;VAR LedgerEntryDimTmp@1210001 : TEMPORARY Record 355;ConsRegister@1210003 : Record 50005) nErr : Integer;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      //NC PIF001 < DP
      {
      nErr := 0;
      IF ConsBuffer."Dimension 6 Code" <> '' THEN BEGIN                  //Контрагент
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",1,
                        ConsBuffer."Dimension 6 Code",ConsBuffer."Debit Dimension 6 Value Code",
                        ConsBuffer."Debit Dimension 6 Name",ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date");
        IF ConsBuffer."Debit Int Contragent" = ConsBuffer."Debit Int Contragent"::Contr THEN BEGIN
          IntContrValue := '';
          TransformIntContragent(ConsBuffer."Dimension 6 Code", ConsBuffer."Debit Dimension 6 Value Code",IntContrValue);
          IF IntContrValue <> '' THEN
            CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",1,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'',
                          ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date")
          ELSE BEGIN
            ErrMessage := 'Для контрагента ' + LedgerEntryDimTmp."Dimension Value Code" +
              ' не указан внутренний контрагент';
            ErrOper := FORMAT(ConsBuffer."Operation No.");// + ' / ' + FORMAT(ConsBuffer."Document Date");
            ErrDoc := ConsBuffer."Document No.";
            nErr := CreateErrorLogEntry(ConsBuffer."Export Cons. Source Code", ConsRegister."No.",
                      0,0, ErrOper,ConsBuffer."Document Date",
                      ConsBuffer."Dimension 6 Code",ErrDoc,ErrMessage,LedgerEntryDimTmp."Dimension Value Code");

          END;
        END;
      END;

      IF ConsBuffer."Dimension 9 Code" <> '' THEN BEGIN                  //Банки
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",1,
                        ConsBuffer."Dimension 9 Code",ConsBuffer."Debit Dimension 9 Value Code",
                        ConsBuffer."Debit Dimension 9 Name",ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date");
        IF ConsBuffer."Debit Int Contragent" = ConsBuffer."Debit Int Contragent"::Bank THEN BEGIN
          IntContrValue := '';
          TransformIntContragent(ConsBuffer."Dimension 9 Code", ConsBuffer."Debit Dimension 9 Value Code",IntContrValue);
          IF (IntContrValue <> '') THEN
            CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",1,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'',
                          ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date")
          ELSE BEGIN
            IF (IntContrValue = '') THEN BEGIN
              ErrMessage := 'Для банка ' + LedgerEntryDimTmp."Dimension Value Code" +
                ' не указан внутренний контрагент';
              ErrOper := FORMAT(ConsBuffer."Operation No.");// + ' / ' + FORMAT(ConsBuffer."Document Date");
              ErrDoc := ConsBuffer."Document No.";
              nErr := CreateErrorLogEntry(ConsBuffer."Export Cons. Source Code", ConsRegister."No.",0,0,
                        ErrOper,ConsBuffer."Document Date",
                        ConsBuffer."Dimension 9 Code",ErrDoc,ErrMessage,LedgerEntryDimTmp."Dimension Value Code");

            END;
          END;
        END;
      END;
      }
      //NC PIF001 < DP
    END;

    PROCEDURE CheckCreditDimBuffer@1210007(ConsBuffer@1210001 : Record 50008;VAR LedgerEntryDimTmp@1210000 : TEMPORARY Record 355;ConsRegister@1210003 : Record 50005) nErr : Integer;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      //NC PIF001 > DP
      {
      nErr := 0;

      IF ConsBuffer."Dimension 6 Code" <> '' THEN BEGIN      //Контрагент
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",2,
                        ConsBuffer."Dimension 6 Code",ConsBuffer."Credit Dimension 6 Value Code",
                        ConsBuffer."Credit Dimension 6 Name",ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date");
        IF ConsBuffer."Сredit Int Contragent" = ConsBuffer."Сredit Int Contragent"::Contr THEN BEGIN
          IntContrValue := '';
          TransformIntContragent(ConsBuffer."Dimension 6 Code", ConsBuffer."Credit Dimension 6 Value Code",IntContrValue);
          IF IntContrValue <> '' THEN
            CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",2,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'',
                          ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date")
          ELSE BEGIN
            ErrMessage := 'Для контрагента ' + LedgerEntryDimTmp."Dimension Value Code" +
              ' не указан внутренний контрагент';
            ErrOper := FORMAT(ConsBuffer."Operation No.");// + ' / ' + FORMAT(ConsBuffer."Document Date");
            ErrDoc := ConsBuffer."Document No.";
            nErr := CreateErrorLogEntry(ConsBuffer."Export Cons. Source Code", ConsRegister."No.",0,0,
                      ErrOper,ConsBuffer."Document Date",
                      ConsBuffer."Dimension 6 Code",ErrDoc,ErrMessage,LedgerEntryDimTmp."Dimension Value Code");
          END;
        END;
      END;
      IF ConsBuffer."Dimension 9 Code" <> '' THEN  BEGIN         //Банки
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",2,
                        ConsBuffer."Dimension 9 Code",ConsBuffer."Credit Dimension 9 Value Code",
                        ConsBuffer."Credit Dimension 9 Name",ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date");
        IF ConsBuffer."Сredit Int Contragent" = ConsBuffer."Сredit Int Contragent"::Bank THEN BEGIN
          IntContrValue := '';
          TransformIntContragent(ConsBuffer."Dimension 9 Code", ConsBuffer."Credit Dimension 9 Value Code",IntContrValue);
          IF (IntContrValue <> '') THEN
            CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",2,
                          ConsolidationSetup."Int Contragent Dimension Code", IntContrValue,'',
                          ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date")
          ELSE BEGIN
            IF (IntContrValue = '') THEN BEGIN
              ErrMessage := 'Для банка ' + LedgerEntryDimTmp."Dimension Value Code" +
                ' не указан внутренний контрагент';

              ErrOper := FORMAT(ConsBuffer."Operation No.");// + ' / ' + FORMAT(ConsBuffer."Document Date");
              ErrDoc := ConsBuffer."Document No.";
              nErr := CreateErrorLogEntry(ConsBuffer."Export Cons. Source Code", ConsRegister."No.",0,0,
                        ErrOper,ConsBuffer."Document Date",
                        ConsBuffer."Dimension 9 Code",ErrDoc,ErrMessage,LedgerEntryDimTmp."Dimension Value Code");

            END;
          END;
        END;
      END;
      }
      //NC PIF001 < DP
    END;

    PROCEDURE CheckErrorsConsFromNav@1210015(GLEntry@1210000 : Record 17;VAR TMPDimCheck@1210001 : TEMPORARY Record 348;VAR LedgEntryDimCheck@1210002 : Record 355;ConsRegister@1210003 : Record 50005;ConsSource@1210004 : Record 50001);
    VAR
      lConsDataBuffer@1000000000 : Record 50008;
    BEGIN
      //NC PIF001 > DP
      //IF CurrentCompany.Type <> CurrentCompany.Type::"3" THEN BEGIN
      IF NOT CheckExceptionCorrespondense(GLEntry,ConsSource.Code) THEN
        CheckGLMapp(GLEntry,LedgEntryDimCheck,ConsSource,ConsRegister."No.",
                    GLEntry."Document No.",ConsSource."Mapping Code"); //!!!!!!!!попраить мэппинг
      //END ELSE
      //  CheckGLMapp(GLEntry,LedgEntryDimCheck,ConsSource,ConsRegister."No.",
      //              GLEntry."Document No.");

      IF ConsSource."Consolidate Dimensions" AND
         ((NOT TMPGLEntryException.GET(GLEntry."Entry No."))
         //AND (CurrentCompany.Type <> CurrentCompany.Type::"3"))
         )
      THEN BEGIN
        LedgEntryDimCheck.RESET;
        LedgEntryDimCheck.SETRANGE("Table ID", 17);
        LedgEntryDimCheck.SETRANGE("Entry No.", GLEntry."Entry No.");

        IF LedgEntryDimCheck.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF TMPDimCheck.GET(LedgEntryDimCheck."Dimension Code") THEN
              CheckDimMapp(GLEntry,LedgEntryDimCheck,ConsSource,ConsRegister."No.",ConsSource."Mapping Code");
      //!!!!!!!!попраить мэппинг
          UNTIL LedgEntryDimCheck.NEXT = 0;
      END;
      //NC PIF001 < DP
    END;

    PROCEDURE CheckGLMapp@1210014(VAR GLEntry1@1000000001 : Record 17;VAR LedgDimension@1000000010 : Record 355;ConsolidationSource1@1000000009 : Record 50001;ConsSession@1210000 : Integer;DocumentNo@1210002 : Code[20];MappingCode@1000000000 : Code[20]);
    VAR
      ConvOfChartOfAccounts@1000000008 : Record 50002;
      OperationType@1000000015 : ' ,Debit,Credit';
      DimCode1@1000000014 : Code[20];
      DimCode2@1000000013 : Code[20];
      DimVal1@1000000016 : Code[20];
      DimVal2@1000000017 : Code[20];
      MappingFind@1000000018 : Boolean;
      GLAccount@1210001 : Record 15;
      IsErr@1210003 : Boolean;
      LedgDimContr@1210004 : Record 355;
      LedgDimIntContr@1210005 : Record 355;
      Text50055@1210006 : TextConst 'ENU="You should define Dimension %1 %2/%3/%4 in table %5 ";RUS=Вы должны определить Измерение %1 в %2 или в %3 или в %4 таблицы %5.';
      DimValueContr@1000000002 : Record 349;
      cConsAcc@1210010 : Code[20];
      lDim1Exist@1210009 : Boolean;
      lDim2Exist@1210008 : Boolean;
      lDim3Exist@1210007 : Boolean;
      ICDim1Exist@1210013 : Boolean;
      ICDim2Exist@1210012 : Boolean;
      ICDim3Exist@1210011 : Boolean;
      CountLEDim@1101495000 : Integer;
      Rating@1101495001 : Integer;
    BEGIN
      //NC PIF001 > DP
      //Определение типа операции
      OperationType := OperationType::" ";
      IF GLEntry1."Debit Amount" <> 0 THEN
        OperationType := OperationType::Debit
      ELSE
        IF GLEntry1."Credit Amount" <> 0 THEN
          OperationType := OperationType::Credit;
      MappingFind := FALSE;


      LedgDimension.RESET;
      LedgDimension.SETRANGE("Table ID", DATABASE::"G/L Entry");
      LedgDimension.SETRANGE("Entry No.", GLEntry1."Entry No.");
      //NC OPT > PCH
      CountLEDim := LedgDimension.COUNT;
      //NC OPT > PCH

      //NC OPT > PCH
      //Устанавливаем сортировку по убыванию - А ТЕПЕРЬ НЕ УСТАНАВЛИВАЕМ (PCH)
      //ConvOfChartOfAccounts.ASCENDING(FALSE);
      //NC MDTM03 > MP
      {
      ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Source Account Code","Operation Type","Rating Transformation");
      }
      ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name",
                                          "Source Account Code","Operation Type",
                                          "Rating Transformation",Active);
      ConvOfChartOfAccounts.SETRANGE("Company Name",COMPANYNAME);
      ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
      //NC MDTM03 < MP
      ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
      //NC OPT < PCH
      ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
      ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
      ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType);
      IF ConvOfChartOfAccounts.FINDSET THEN
        REPEAT
          IF cConsAcc='' THEN BEGIN
            //Проверка на соответствие до 3-х измерений
            lDim1Exist := TRUE;
            lDim2Exist := TRUE;
            lDim3Exist := TRUE;
            //NC OPT > PCH
            Rating := 0;
            //NC OPT < PCH

            WITH LedgDimension DO BEGIN
              IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND
                 (ConvOfChartOfAccounts."Source Dimension Value Code 1" <> '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                lDim1Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim1Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;

              IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND
                 (ConvOfChartOfAccounts."Source Dimension Value Code 2" <> '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                lDim2Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim2Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;

              IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND
                 (ConvOfChartOfAccounts."Source Dimension Value Code 3" <> '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                lDim3Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim3Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;
            END;

            //NC OPT > PCH
            //IF lDim1Exist AND lDim2Exist AND lDim3Exist THEN
            IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN
            //NC OPT < PCH
              cConsAcc := ConvOfChartOfAccounts."Receiver Account Code"
          END;
        UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');

      IF cConsAcc='' THEN BEGIN
        ConvOfChartOfAccounts.RESET;
        //NC OPT > PCH
        //NC MDTM03 > MP
        {
        ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Source Account Code","Operation Type","Rating Transformation");
        }
        ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name",
                                            "Source Account Code","Operation Type",
                                            "Rating Transformation",Active);
        ConvOfChartOfAccounts.SETRANGE("Company Name",COMPANYNAME);
        ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
        //NC MDTM03 < MP
        ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
        //NC OPT < PCH
        ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
        ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
        ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType::" ");
        IF ConvOfChartOfAccounts.FINDSET THEN
          REPEAT
            IF cConsAcc='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;
              //NC OPT > PCH
              Rating := 0;
              //NC OPT < PCH

              WITH LedgDimension DO BEGIN
                IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 1" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                  lDim1Exist := NOT ISEMPTY;
                  //NC OPT > PCH
                  IF lDim1Exist THEN
                    Rating -= 1;
                  //NC OPT < PCH
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 2" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                  //NC OPT > PCH
                  IF lDim2Exist THEN
                    Rating -= 1;
                  //NC OPT < PCH
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 3" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                  //NC OPT > PCH
                  IF lDim3Exist THEN
                    Rating -= 1;
                  //NC OPT < PCH
                END;
              END;
              //NC OPT > PCH
              //IF lDim1Exist AND lDim2Exist AND lDim3Exist THEN
              IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN
              //NC OPT < PCH
                cConsAcc := ConvOfChartOfAccounts."Receiver Account Code"
            END;
          UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');
      END;

      //NC MDTM03 > MP
      IF cConsAcc='' THEN BEGIN
        ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name",
                                            "Source Account Code","Operation Type",
                                            "Rating Transformation",Active);
        ConvOfChartOfAccounts.SETRANGE("Company Name",'');
        ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
        ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
        ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
        ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
        ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType);
        IF ConvOfChartOfAccounts.FINDSET THEN
          REPEAT
            IF cConsAcc='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;
              Rating := 0;

              WITH LedgDimension DO BEGIN
                IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 1" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                  lDim1Exist := NOT ISEMPTY;
                  IF lDim1Exist THEN
                    Rating -= 1;
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 2" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                  IF lDim2Exist THEN
                    Rating -= 1;
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 3" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                  IF lDim3Exist THEN
                    Rating -= 1;
                END;
              END;

              IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN
                cConsAcc := ConvOfChartOfAccounts."Receiver Account Code"
            END;
          UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');
      END;

      IF cConsAcc='' THEN BEGIN
        ConvOfChartOfAccounts.RESET;
        ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name",
                                            "Source Account Code","Operation Type",
                                            "Rating Transformation",Active);
        ConvOfChartOfAccounts.SETRANGE("Company Name",'');
        ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
        ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
        ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
        ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
        ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType::" ");
        IF ConvOfChartOfAccounts.FINDSET THEN
          REPEAT
            IF cConsAcc='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;
              Rating := 0;

              WITH LedgDimension DO BEGIN
                IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 1" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                  lDim1Exist := NOT ISEMPTY;
                  IF lDim1Exist THEN
                    Rating -= 1;
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 2" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                  IF lDim2Exist THEN
                    Rating -= 1;
                END;

                IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND
                   (ConvOfChartOfAccounts."Source Dimension Value Code 3" <> '')
                THEN BEGIN
                  SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                  SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                  IF lDim3Exist THEN
                    Rating -= 1;
                END;
              END;
              IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN
                cConsAcc := ConvOfChartOfAccounts."Receiver Account Code"
            END;
          UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');
      END;
      //NC MDTM03 < MP

      IF cConsAcc<>'' THEN
        MappingFind := TRUE;

      IsErr := FALSE;
      //NC OPT > PCH
      //IF (NOT MappingFind) OR
      //   (ConvOfChartOfAccounts."Receiver Account Code" = '')
      IF NOT MappingFind
      //NC OPT < PCH
      THEN
          IsErr := TRUE;

      IF IsErr THEN BEGIN
        //NC MDM04 > MP
        {
        ErrOper := FORMAT(GLEntry1."Entry No.");// + ' / ' + FORMAT(GLEntry1."Posting Date");
        ErrDoc := DocumentNo;
        ErrMessage := Text010 + FORMAT(GLEntry1."G/L Account No.") + Text011;
          CreateErrorLogEntry(ConsolidationSource1.Code,
            ConsSession,0,1, ErrOper,GLEntry1."Posting Date",
            GLEntry1."G/L Account No.",ErrDoc,ErrMessage,'');
        }
        ErrMessage := Text010 + FORMAT(GLEntry1."G/L Account No.") + Text011;
        ErrorJournal.AddErrorGLEntry(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                   ConsolidationSource1.Code,ConsSession,'EDTC01',
                                   ErrMessage,COMPANYNAME,GLEntry1,JobProcStatusLineNo);

        //NC MDM04 < MP
      END;

      //NC PIF010 > MP
      {
      LedgDimContr.CHANGECOMPANY(ConsolidationSource1."Company Name");
      IF NOT LedgDimContr.GET(DATABASE::"G/L Entry", GLEntry1."Entry No.",
                               ConsSetup."Contragent Dim Code")
      THEN
        EXIT;

      LedgDimIntContr.CHANGECOMPANY(ConsolidationSource1."Company Name");
      IF (NOT LedgDimIntContr.GET(DATABASE::"G/L Entry", GLEntry1."Entry No.",
                               ConsSetup."Int Contragent Dimension Code"))
      THEN
        EXIT;

      DimValueContr.CHANGECOMPANY(ConsolidationSource1."Company Name");
      IF DimValueContr.GET(LedgDimContr."Dimension Code",LedgDimContr."Dimension Value Code") AND
        (DimValueContr."Int Contragent Dim Value" <> LedgDimIntContr."Dimension Value Code")
      THEN
        EXIT;

      ICDim1Exist := TRUE;
      ICDim2Exist := TRUE;
      ICDim3Exist := TRUE;

      ConvOfChartOfAccounts.RESET;
      ConvOfChartOfAccounts.SETRANGE("Cons. Source Code",ConsolidationSource1.Code);
      ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
      ConvOfChartOfAccounts.SETRANGE("Source Dimension Code 1",ConsSetup."Int Contragent Dimension Code");
      IF NOT ConvOfChartOfAccounts.FINDFIRST THEN
        ICDim1Exist := FALSE
      ELSE BEGIN
        IF ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
                                     OperationType, ConsSetup."Int Contragent Dimension Code",
                                     LedgDimIntContr."Dimension Value Code", '','','','') THEN
          MappingFind := TRUE
        ELSE
          IF ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
                                       OperationType::" ", ConsSetup."Int Contragent Dimension Code",
                                       LedgDimIntContr."Dimension Value Code", '','','','') THEN
            MappingFind := TRUE;
      END;

      ConvOfChartOfAccounts.RESET;
      ConvOfChartOfAccounts.SETRANGE("Cons. Source Code",ConsolidationSource1.Code);
      ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
      ConvOfChartOfAccounts.SETRANGE("Source Dimension Code 2",ConsSetup."Int Contragent Dimension Code");
      IF NOT ConvOfChartOfAccounts.FINDFIRST THEN
        ICDim2Exist := FALSE
      ELSE BEGIN
        IF ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
                                     OperationType, '', '', ConsSetup."Int Contragent Dimension Code",
                                     LedgDimIntContr."Dimension Value Code", '', '') THEN
          MappingFind := TRUE
        ELSE
          IF ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
                                       OperationType::" ", '', '', ConsSetup."Int Contragent Dimension Code",
                                       LedgDimIntContr."Dimension Value Code", '', '') THEN
            MappingFind := TRUE;
      END;

      ConvOfChartOfAccounts.RESET;
      ConvOfChartOfAccounts.SETRANGE("Cons. Source Code",ConsolidationSource1.Code);
      ConvOfChartOfAccounts.SETRANGE("Source Account Code",GLEntry1."G/L Account No.");
      ConvOfChartOfAccounts.SETRANGE("Source Dimension Code 3",ConsSetup."Int Contragent Dimension Code");
      IF NOT ConvOfChartOfAccounts.FINDFIRST THEN
        ICDim3Exist := FALSE
      ELSE BEGIN
        IF ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
                                     OperationType, '', '', '', '', ConsSetup."Int Contragent Dimension Code",
                                     LedgDimIntContr."Dimension Value Code") THEN
          MappingFind := TRUE
        ELSE
          IF ConvOfChartOfAccounts.GET(ConsolidationSource1.Code, GLEntry1."G/L Account No.",
                                       OperationType::" ", '', '', '', '', ConsSetup."Int Contragent Dimension Code",
                                       LedgDimIntContr."Dimension Value Code") THEN
            MappingFind := TRUE;
      END;

      IF NOT ICDim1Exist AND NOT ICDim2Exist AND NOT ICDim3Exist THEN
        ERROR(Text50055,ConsSetup."Int Contragent Dimension Code",
              ConvOfChartOfAccounts.FIELDCAPTION("Source Dimension Code 1"),
              ConvOfChartOfAccounts.FIELDCAPTION("Source Dimension Code 2"),
              ConvOfChartOfAccounts.FIELDCAPTION("Source Dimension Code 3"),
              ConvOfChartOfAccounts.TABLECAPTION);
      MappingFind := FALSE;

      IF (NOT MappingFind) OR
         (ConvOfChartOfAccounts."Receiver Account Code" = '')
      THEN
          IsErr := TRUE;

      IF IsErr THEN BEGIN
        ErrOper := FORMAT(GLEntry1."Entry No.") + ' / ' + FORMAT(GLEntry1."Posting Date");
        ErrDoc := DocumentNo;
        ErrMessage := COPYSTR('Для счета ' + GLEntry1."G/L Account No." + ' и Измерения Внутренний Контрагент'
                      + '=' +
                      LedgDimIntContr."Dimension Value Code"
                      + ' не задан соответсвующий счет в МСФО',1,100);
          CreateErrorLogEntry(ConsolidationSource1.Code, ConsSession,0,1,
            ErrOper,GLEntry1."G/L Account No.",ErrDoc,ErrMessage,'');
      END;
      }
      //NC PIF010 < MP
      //NC PIF001 < DP
    END;

    PROCEDURE CheckDimMapp@1210018(GLEntry@1210001 : Record 17;VAR LedgDimension@1000000010 : Record 355;ConsolidationSource@1000000009 : Record 50001;ConsSession@1210000 : Integer;MappingCode@1000000000 : Code[20]) IsErr : Boolean;
    VAR
      ConvDimensions@1000000008 : Record 50003;
      DimCode@1000000014 : Code[20];
      DimVal@1000000013 : Code[20];
      tmp@1210002 : Integer;
      lDim1Exist@1210007 : Boolean;
      lDim2Exist@1210006 : Boolean;
      lDim3Exist@1210005 : Boolean;
      ConsDimCode@1210004 : Code[20];
      LedgDimension1@1210003 : Record 355;
      DimensionValue@1101495000 : Record 349;
    BEGIN
      //NC PIF001 > DP
      IsErr := FALSE;
      DimCode := LedgDimension."Dimension Code";
      DimVal := LedgDimension."Dimension Value Code";

      IF ConsolidationSetup."Mapping Dimension Type"=ConsolidationSetup."Mapping Dimension Type"::"Combination-To-One" THEN BEGIN
        ConsDimCode :='';

        LedgDimension1.CHANGECOMPANY(ConsolidationSource."Company Name");
        LedgDimension1.RESET;
        LedgDimension1.SETRANGE("Table ID", DATABASE::"G/L Entry");
        LedgDimension1.SETRANGE("Entry No.", LedgDimension."Entry No.");

        ConvDimensions.RESET;
        //NC OPT > PCH
        //ConvDimensions.ASCENDING(FALSE);
        //NC OPT < PCH
        ConvDimensions.SETRANGE("Mapping Code",MappingCode);
        ConvDimensions.SETRANGE("Source Dimension Code",DimCode);
        ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
        IF ConvDimensions.FINDSET THEN
          REPEAT
            //проверяем, есть ли строка, соответствующая исключению, в измерениях в данной операции

            IF ConsDimCode='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;

              WITH LedgDimension1 DO BEGIN
                IF ConvDimensions."Source Dimension Code" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code");
                  lDim1Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 2" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 2");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 3" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 3");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                END;
              END;
             IF (lDim1Exist AND lDim2Exist AND lDim3Exist) THEN
               ConsDimCode := ConvDimensions."Receiver Dimension Code";
            END;
          UNTIL (ConvDimensions.NEXT = 0) OR (ConsDimCode <> '');
          IF ConsDimCode='' THEN BEGIN
            //NC MDM04 > MP
            {
            ErrOper := FORMAT(GLEntry."Entry No.");// + ' / ' + FORMAT(GLEntry."Posting Date");
            ErrDoc := GLEntry."Document No.";
            }
            //NC MDM04 < MP
            ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
            IsErr := TRUE;
            //NC MDM04 > MP
            {
            tmp :=
                CreateErrorLogEntry(ConsolidationSource.Code, ConsSession, 0, 0,
                ErrOper,GLEntry."Posting Date",DimCode,ErrDoc,ErrMessage,DimVal);
            }
            ErrorJournal.AddErrorGLEntry(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                       ErrMessage,COMPANYNAME,GLEntry,JobProcStatusLineNo);
            //NC MDM04 < MP
         END;
      END ELSE BEGIN

      //NCMDTM02 > MP
      {
      IF NOT ConvDimensions.GET(ConsolidationSource.Code, DimCode, DimVal) THEN BEGIN
      }
      ConvDimensions.SETCURRENTKEY("Source Dimension Code","Source Dimension Value Code");
      ConvDimensions.SETRANGE("Mapping Code",MappingCode);
      ConvDimensions.SETRANGE("Source Dimension Code",DimCode);
      ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
      IF NOT ConvDimensions.FINDFIRST THEN BEGIN
      //NCMDTM02 < MP
        //NC MDM04 > MP
        {
        ErrOper := FORMAT(GLEntry."Entry No.");// + ' / ' + FORMAT(GLEntry."Posting Date");
        ErrDoc := GLEntry."Document No.";
        }
        //NC MDM04 < MP
        ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
        IsErr := TRUE;
        //NC MDM04 > MP
        {
        tmp :=
          CreateErrorLogEntry(ConsolidationSource.Code, ConsSession, 0, 0,
            ErrOper,GLEntry."Posting Date",DimCode,ErrDoc,ErrMessage,DimVal);
        }
        ErrorJournal.AddErrorGLEntry(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                   ConsolidationSource.Code,ConsSession,'EDTC02',
                                   ErrMessage,COMPANYNAME,GLEntry,JobProcStatusLineNo);
        //NC MDM04 < MP
      END;

      END;
      //NC PIF001 < DP
    END;

    PROCEDURE InsertRoundingCorrectionLines@1210016(ConsSource@1210003 : Code[20];VAR locJnlLine@1210007 : Record 81;VAR locLineDim@1210006 : Record 356);
    VAR
      DocBalanceAmount@1210004 : Decimal;
      TmpGenJournalLine@1210005 : TEMPORARY Record 81;
      Text000@1210000 : TextConst 'ENU=Rounding correction for Doc No. %1;RUS=Ошибка округления для Док. № %1';
      TmpGenJournalLineInsert@1210001 : TEMPORARY Record 81;
      TmpJnlDimInsert@1000000000 : TEMPORARY Record 356;
      GLAcc@1000000001 : Record 15;
      DefDim@1000000002 : Record 352;
      JLD@1000000003 : Record 356;
      ConsolidationSource@1210002 : Record 50001;
      iCurLineNo@1210008 : Integer;
      SourceCodeSetup@1210009 : Record 242;
      oldDimValueCode@1101495001 : Code[20];
      locJnlLine1@1101495000 : Record 81;
    BEGIN
      //NC PIF001 > DP
      ConsolidationSource.GET(ConsSource);
      IF NOT ConsolidationSource."Cons. Balance" THEN
        EXIT;

      //NC S622 > PCH
      ConsolidationSource.TESTFIELD("Exch. Rate Gains Acc.");
      ConsolidationSource.TESTFIELD("Exch. Rate Losses Acc.");
      //NC S622 < PCH

      TmpGenJournalLineInsert.DELETEALL;
      CLEAR(TmpGenJournalLine);
      DocBalanceAmount := 0;
      iCurLineNo := locJnlLine.COUNT;
      locJnlLine.FINDFIRST;
      IF locJnlLine.FINDSET(FALSE,FALSE) THEN
        REPEAT
          //Window.UPDATE(5, ROUND(locJnlLine."Line No." / iCurLineNo, 1) );
          IF (locJnlLine."Posting Date"       <> TmpGenJournalLine."Posting Date") OR
             (locJnlLine."Document No."       <> TmpGenJournalLine."Document No.") OR
             (locJnlLine."Document Type"      <> TmpGenJournalLine."Document Type") OR
             (locJnlLine."Business Unit Code" <> TmpGenJournalLine."Business Unit Code") THEN BEGIN
            // --- Балансирование по документам раздела >
            IF (DocBalanceAmount <> 0) AND
               (ABS(DocBalanceAmount) <= ConsolidationSource."Cons. Max Round. Amount") THEN BEGIN;
               TmpGenJournalLineInsert               := TmpGenJournalLine;
               TmpGenJournalLineInsert."Line No."    := TmpGenJournalLineInsert."Line No." + 1;

               IF DocBalanceAmount>0 THEN
                 TmpGenJournalLineInsert."Account No." := ConsolidationSource."Exch. Rate Gains Acc."
               ELSE
                 TmpGenJournalLineInsert."Account No." := ConsolidationSource."Exch. Rate Losses Acc.";

               TmpGenJournalLineInsert.VALIDATE("Currency Code",'');
               TmpGenJournalLineInsert."Source No." := '';
               //NC MDA01 > MP
               {
               TmpGenJournalLineInsert."Source Code" := ConsSetup."Source Code";
               }
               TmpGenJournalLineInsert."Source Code" := SourceCodeSetup.Transformation;
               //NC MDA01 < MP
               TmpGenJournalLineInsert.VALIDATE(Amount, -DocBalanceAmount);
               TmpGenJournalLineInsert.Description   := STRSUBSTNO(Text000, TmpGenJournalLineInsert."Document No.");

               //NC APCOC-94 < DP
               TmpGenJournalLineInsert."Not Translate" := ConsolidationSource."Not Translate";
               //NC APCOC-94 > DP
               //NC APCOC-117 > RD
               TmpGenJournalLineInsert."Not Translate IFRS" := ConsolidationSource."Not Translate IFRS";
               //NC APCOC-117 < RD

               TmpGenJournalLineInsert.INSERT;

               // insert last line dims
               locLineDim.SETRANGE("Table ID", DATABASE::"Gen. Journal Line");
               locLineDim.SETRANGE("Journal Template Name", TmpGenJournalLine."Journal Template Name");
               locLineDim.SETRANGE("Journal Batch Name", TmpGenJournalLine."Journal Batch Name");
               locLineDim.SETRANGE("Journal Line No.", TmpGenJournalLine."Line No.");
               IF locLineDim.FINDSET THEN REPEAT
                 TmpJnlDimInsert := locLineDim;
                 TmpJnlDimInsert."Journal Line No." := TmpGenJournalLineInsert."Line No.";
                 TmpJnlDimInsert.INSERT;
                 UNTIL locLineDim.NEXT = 0;

               //NC APCOC-72 > DP
               DefDim.RESET;
               DefDim.SETRANGE("Table ID",50064);
               DefDim.SETRANGE("No.",'');
               DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",
                                                    DefDim."Value Posting"::"Same Code");
               DefDim.SETFILTER("Dimension Value Code",'<>%1','');
               IF DefDim.FINDSET THEN
                 REPEAT
                   TmpJnlDimInsert.RESET;
                   IF NOT TmpJnlDimInsert.GET(81,
                                           TmpGenJournalLineInsert."Journal Template Name",
                                           TmpGenJournalLineInsert."Journal Batch Name",
                                           TmpGenJournalLineInsert."Line No.",
                                           0,
                                           DefDim."Dimension Code") THEN BEGIN
                     TmpJnlDimInsert.INIT;
                     TmpJnlDimInsert."Table ID":= 81;
                     TmpJnlDimInsert."Journal Template Name" := TmpGenJournalLineInsert."Journal Template Name";
                     TmpJnlDimInsert."Journal Batch Name" := TmpGenJournalLineInsert."Journal Batch Name";
                     TmpJnlDimInsert."Journal Line No." := TmpGenJournalLineInsert."Line No.";
                     TmpJnlDimInsert."Allocation Line No." := 0;
                     TmpJnlDimInsert."Dimension Code" := DefDim."Dimension Code";
                     TmpJnlDimInsert."Dimension Value Code" := DefDim."Dimension Value Code";
                     IF TmpJnlDimInsert.INSERT THEN;
                   END ELSE BEGIN
                     oldDimValueCode := TmpJnlDimInsert."Dimension Value Code";
                     TmpJnlDimInsert."Dimension Value Code" := DefDim."Dimension Value Code";
                     CASE DefDim."Value Posting" OF
                       DefDim."Value Posting"::"Same Code": TmpJnlDimInsert.MODIFY;
                     ELSE
                       IF oldDimValueCode='' THEN TmpJnlDimInsert.MODIFY;
                     END;
                   END;
                 UNTIL DefDim.NEXT = 0;
               //NC APCOC-72 < DP

               END;
            // --- balancing within the batch <
            DocBalanceAmount := locJnlLine."Amount (LCY)";
          END
          ELSE
            DocBalanceAmount := DocBalanceAmount + locJnlLine."Amount (LCY)";
          TmpGenJournalLine := locJnlLine;

          //NC APCOC-94 < DP
          TmpGenJournalLine."Not Translate" := ConsolidationSource."Not Translate";
          //NC APCOC-94 > DP
          //NC APCOC-117 > RD
          TmpGenJournalLine."Not Translate IFRS" := ConsolidationSource."Not Translate IFRS";
          //NC APCOC-117 < RD

        IF GLAcc.GET(TmpGenJournalLineInsert."Account No.") THEN BEGIN
           DefDim.RESET;
           DefDim.SETRANGE("Table ID",15);
           DefDim.SETRANGE("No.",GLAcc."No.");

           //NC MCO04 > PCH
           //DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Same Code");
           DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",
                                                    DefDim."Value Posting"::"Same Code");
           DefDim.SETFILTER("Dimension Value Code",'<>%1','');
           //NC MCO04 < PCH

           IF DefDim.FINDSET THEN
             REPEAT
                TmpJnlDimInsert.RESET;
                TmpJnlDimInsert.SETRANGE("Table ID",81);
                TmpJnlDimInsert.SETRANGE("Journal Template Name", TmpGenJournalLineInsert."Journal Template Name");
                TmpJnlDimInsert.SETRANGE("Journal Batch Name", TmpGenJournalLineInsert."Journal Batch Name");
                TmpJnlDimInsert.SETRANGE("Journal Line No.",TmpGenJournalLineInsert."Line No.");
                TmpJnlDimInsert.SETRANGE("Dimension Code",DefDim."Dimension Code");
                  IF NOT TmpJnlDimInsert.FINDFIRST THEN BEGIN
                     TmpJnlDimInsert.INIT;
                     TmpJnlDimInsert."Table ID":= 81;
                     TmpJnlDimInsert."Journal Template Name" := TmpGenJournalLineInsert."Journal Template Name";
                     TmpJnlDimInsert."Journal Batch Name" := TmpGenJournalLineInsert."Journal Batch Name";
                     TmpJnlDimInsert."Journal Line No." := TmpGenJournalLineInsert."Line No.";
                     TmpJnlDimInsert."Dimension Code" := DefDim."Dimension Code";
                     TmpJnlDimInsert."Dimension Value Code" := DefDim."Dimension Value Code";
                     TmpJnlDimInsert.INSERT;
                  END;
             UNTIL DefDim.NEXT = 0;

        END;
        TmpJnlDimInsert.RESET;
        UNTIL locJnlLine.NEXT = 0;

            // --- Балансирование в конце раздела >
            IF (DocBalanceAmount <> 0) AND
               (ABS(DocBalanceAmount) <= ConsolidationSource."Cons. Max Round. Amount") THEN BEGIN;
               TmpGenJournalLineInsert               := TmpGenJournalLine;
               TmpGenJournalLineInsert."Line No."    := TmpGenJournalLineInsert."Line No." + 1;

               IF DocBalanceAmount>0 THEN
                 TmpGenJournalLineInsert."Account No." := ConsolidationSource."Exch. Rate Gains Acc."
               ELSE
                 TmpGenJournalLineInsert."Account No." := ConsolidationSource."Exch. Rate Losses Acc.";

               TmpGenJournalLineInsert.VALIDATE("Currency Code",'');
               TmpGenJournalLineInsert.VALIDATE(Amount, -DocBalanceAmount);
               TmpGenJournalLineInsert.Description   := STRSUBSTNO(Text000, TmpGenJournalLineInsert."Document No.");
               TmpGenJournalLineInsert."Source No." := '';
               TmpGenJournalLineInsert.INSERT;

               // insert last line dims
               locLineDim.SETRANGE("Table ID", DATABASE::"Gen. Journal Line");
               locLineDim.SETRANGE("Journal Template Name", TmpGenJournalLine."Journal Template Name");
               locLineDim.SETRANGE("Journal Batch Name", TmpGenJournalLine."Journal Batch Name");
               locLineDim.SETRANGE("Journal Line No.", TmpGenJournalLine."Line No.");
               IF locLineDim.FINDSET THEN REPEAT
                 TmpJnlDimInsert := locLineDim;
                 TmpJnlDimInsert."Journal Line No." := TmpGenJournalLineInsert."Line No.";
                 TmpJnlDimInsert.INSERT;
                 UNTIL locLineDim.NEXT = 0;

               //NC APCOC-72 > DP
               DefDim.RESET;
               DefDim.SETRANGE("Table ID",50064);
               DefDim.SETRANGE("No.",'');
               DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",
                                                    DefDim."Value Posting"::"Same Code");
               DefDim.SETFILTER("Dimension Value Code",'<>%1','');
               IF DefDim.FINDSET THEN
                 REPEAT
                   TmpJnlDimInsert.RESET;
                   IF NOT TmpJnlDimInsert.GET(81,
                                           TmpGenJournalLineInsert."Journal Template Name",
                                           TmpGenJournalLineInsert."Journal Batch Name",
                                           TmpGenJournalLineInsert."Line No.",
                                           0,
                                           DefDim."Dimension Code") THEN BEGIN
                     TmpJnlDimInsert.INIT;
                     TmpJnlDimInsert."Table ID":= 81;
                     TmpJnlDimInsert."Journal Template Name" := TmpGenJournalLineInsert."Journal Template Name";
                     TmpJnlDimInsert."Journal Batch Name" := TmpGenJournalLineInsert."Journal Batch Name";
                     TmpJnlDimInsert."Journal Line No." := TmpGenJournalLineInsert."Line No.";
                     TmpJnlDimInsert."Allocation Line No." := 0;
                     TmpJnlDimInsert."Dimension Code" := DefDim."Dimension Code";
                     TmpJnlDimInsert."Dimension Value Code" := DefDim."Dimension Value Code";
                     IF TmpJnlDimInsert.INSERT THEN;
                   END ELSE BEGIN
                     oldDimValueCode := TmpJnlDimInsert."Dimension Value Code";
                     TmpJnlDimInsert."Dimension Value Code" := DefDim."Dimension Value Code";
                     CASE DefDim."Value Posting" OF
                       DefDim."Value Posting"::"Same Code": TmpJnlDimInsert.MODIFY;
                     ELSE
                       IF oldDimValueCode='' THEN TmpJnlDimInsert.MODIFY;
                     END;
                   END;
                 UNTIL DefDim.NEXT = 0;
               //NC APCOC-72 < DP

               END;
            // --- Балансирование в конце раздела <

      IF TmpGenJournalLineInsert.FINDSET(TRUE,TRUE) THEN
        REPEAT
          locJnlLine := TmpGenJournalLineInsert;
          locJnlLine.INSERT;
        UNTIL TmpGenJournalLineInsert.NEXT = 0;


      IF TmpJnlDimInsert.FINDSET(TRUE,TRUE) THEN
        REPEAT
          locLineDim := TmpJnlDimInsert;
          locLineDim.INSERT;
        UNTIL TmpJnlDimInsert.NEXT = 0;

        IF GLAcc.GET(TmpGenJournalLineInsert."Account No.") THEN BEGIN
           DefDim.RESET;
           DefDim.SETRANGE("Table ID",15);
           DefDim.SETRANGE("No.",GLAcc."No.");

           //NC MCO04 > PCH
           //DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Same Code");
           DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",
                                                    DefDim."Value Posting"::"Same Code");
           DefDim.SETFILTER("Dimension Value Code",'<>%1','');
           //NC MCO04 < PCH

           IF DefDim.FINDSET THEN
             REPEAT
                JLD.RESET;
                JLD.SETRANGE("Table ID",81);
                JLD.SETRANGE("Journal Template Name", TmpGenJournalLineInsert."Journal Template Name");
                JLD.SETRANGE("Journal Batch Name", TmpGenJournalLineInsert."Journal Batch Name");
                JLD.SETRANGE("Journal Line No.",TmpGenJournalLineInsert."Line No.");
                JLD.SETRANGE("Dimension Code",DefDim."Dimension Code");
                  IF NOT JLD.FINDFIRST THEN BEGIN
                     JLD.INIT;
                     JLD."Table ID":= 81;
                     JLD."Journal Template Name" := TmpGenJournalLineInsert."Journal Template Name";
                     JLD."Journal Batch Name" := TmpGenJournalLineInsert."Journal Batch Name";
                     JLD."Journal Line No." := TmpGenJournalLineInsert."Line No.";
                     JLD."Dimension Code" := DefDim."Dimension Code";
                     JLD."Dimension Value Code" := DefDim."Dimension Value Code";

                     //NC NCS-1002 > DP
                     {
                     IF JLD.INSERT THEN;
                     }
                     IF NOT JLD.INSERT THEN
                       IF DefDim."Value Posting" = DefDim."Value Posting"::"Same Code" THEN
                         JLD.MODIFY;
                     //NC NCS-1002 < DP

                  END;
             UNTIL DefDim.NEXT = 0;
        END;
      //NC PIF001 < DP
    END;

    PROCEDURE CreateGLAccountDim@1210021(ConsSource@1210000 : Code[20];EntryNo@1210008 : Integer;VAR AccountNo@1210001 : Code[20];VAR LedgerEntryDimTMP@1210007 : TEMPORARY Record 355);
    VAR
      GLAccDimSetup@1210002 : Record 50017;
      OldAccountNo@1210003 : Code[20];
      i@1210004 : Integer;
      i1@1210005 : Integer;
      DimValue@1210006 : Code[20];
    BEGIN
      //NC PIF001.2 > DP
      {
      OldAccountNo := AccountNo;
      GLAccDimSetup.RESET;
      GLAccDimSetup.SETRANGE("Cons. Source Code",ConsSource);
      IF GLAccDimSetup.FINDSET(FALSE,FALSE) THEN
        REPEAT
          i := STRPOS(OldAccountNo,GLAccDimSetup."G/L Account No.");
          IF i >0 THEN BEGIN
            AccountNo := GLAccDimSetup."G/L Account No.";
            OldAccountNo := COPYSTR(OldAccountNo, i+STRLEN(GLAccDimSetup."G/L Account No."),
                                   STRLEN(OldAccountNo)-(i+STRLEN(GLAccDimSetup."G/L Account No.")-1));
            i :=STRPOS(OldAccountNo,GLAccDimSetup."Dimension Delimiter");
            IF i>0 THEN BEGIN
              OldAccountNo := COPYSTR(OldAccountNo, i+1,STRLEN(OldAccountNo)-i);
              i1 :=STRPOS(OldAccountNo,GLAccDimSetup."Dimension Delimiter");
              IF i1>0 THEN BEGIN
                DimValue := COPYSTR(OldAccountNo,1,i1-1);
                CreateDimBuffer(LedgerEntryDimTMP,DATABASE::"G/L Entry",EntryNo, GLAccDimSetup."Dimension 1 Code", DimValue, '');
                DimValue := COPYSTR(OldAccountNo, i1+1,STRLEN(OldAccountNo)-i1);
                CreateDimBuffer(LedgerEntryDimTMP,DATABASE::"G/L Entry",EntryNo, GLAccDimSetup."Dimension 2 Code", DimValue, '');
              END ELSE BEGIN
                DimValue := OldAccountNo;
                CreateDimBuffer(LedgerEntryDimTMP,DATABASE::"G/L Entry",EntryNo, GLAccDimSetup."Dimension 1 Code", DimValue, '');
              END;
            END;
          END;
        UNTIL GLAccDimSetup.NEXT=0;
      }
      //NC PIF001.2 < DP
    END;

    PROCEDURE CheckAcTypeSetupCorrespondence@1000000003(ConsSourceCode@1000000005 : Code[20];ConsDataBuffer@1000000000 : Record 50008;GLAccountNo@1000000007 : Code[20];ConsSession@1000000006 : Integer) IsErr : Boolean;
    VAR
      GLAccount@1000000001 : Record 15;
      GLAccount1@1000000003 : Record 15;
      AccTypeGenJnlSetup@1000000002 : Record 50019;
      tmp@1000000004 : Integer;
    BEGIN
      //NC PIF003 > DP
      IF GLAccountNo<>'' THEN BEGIN
        IF GLAccount.GET(GLAccountNo) THEN
          IF NOT (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account") THEN BEGIN
            IF NOT AccTypeGenJnlSetup.GET(ConsSourceCode,ConsDataBuffer."Debit G/L Account No.",ConsDataBuffer."Credit G/L Account No.")

            THEN BEGIN
              //NC MDTM04 > MP
              {
              ErrOper := FORMAT(ConsDataBuffer."Entry No.") + ' / ' + FORMAT(ConsDataBuffer."Document Date");
              ErrDoc := ConsDataBuffer."Document No.";
              }
              //NC MDTM04 < MP
              ErrMessage := 'Для счета '+ConsDataBuffer."Debit G/L Account No."+ ' в корреспонденции со счетом ' +
                           ConsDataBuffer."Credit G/L Account No." + ' не задана настройка Учетных Групп.';
              IsErr := TRUE;
              //NC MDTM04 > MP
              {
              tmp :=
                 CreateErrorLogEntry(ConsSourceCode, ConsSession, 0, 0,
                 ErrOper,ConsDataBuffer."Document Date",
                 ConsDataBuffer."Debit G/L Account No.",ErrDoc,ErrMessage,ConsDataBuffer."Credit G/L Account No.");
              }
              ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsSourceCode,ConsSession,'',
                                         ErrMessage,COMPANYNAME,ConsDataBuffer,JobProcStatusLineNo);
              //NC MDTM04 < MP
            END;
         END;
      END ELSE BEGIN
        IF GLAccount.GET(ConsDataBuffer."Debit G/L Account No.") THEN;
        IF GLAccount1.GET(ConsDataBuffer."Credit G/L Account No.") THEN;
        IF NOT (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account")
          OR NOT (GLAccount1."Ext. Source Type"=GLAccount1."Ext. Source Type"::"G/L Account") THEN BEGIN
         IF NOT AccTypeGenJnlSetup.GET(ConsSourceCode,ConsDataBuffer."Debit G/L Account No.",ConsDataBuffer."Credit G/L Account No.")
           OR (NOT AccTypeGenJnlSetup.GET(ConsSourceCode,ConsDataBuffer."Debit G/L Account No.",'') AND
                NOT (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account"))
           OR (NOT AccTypeGenJnlSetup.GET(ConsSourceCode,'',ConsDataBuffer."Credit G/L Account No.") AND
                NOT (GLAccount1."Ext. Source Type"=GLAccount1."Ext. Source Type"::"G/L Account")) THEN
            BEGIN
              //NC MDTM04 > MP
              {
              ErrOper := FORMAT(ConsDataBuffer."Entry No.");// + ' / ' + FORMAT(ConsDataBuffer."Document Date");
              ErrDoc := ConsDataBuffer."Document No.";
              }
              //NC MDTM04 < MP
              ErrMessage := 'Для счета '+ConsDataBuffer."Debit G/L Account No."+ ' в корреспонденции со счетом ' +
                           ConsDataBuffer."Credit G/L Account No." + ' не задана настройка Учетных Групп.';
              IsErr := TRUE;
              //NC MDTM04 > MP
              {
              tmp :=
                 CreateErrorLogEntry(ConsSourceCode, ConsSession, 0, 0,
                 ErrOper,ConsDataBuffer."Document Date",
                 ConsDataBuffer."Debit G/L Account No.",ErrDoc,ErrMessage,ConsDataBuffer."Credit G/L Account No.");
              }
              ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsSourceCode,ConsSession,'',
                                         ErrMessage,COMPANYNAME,ConsDataBuffer,JobProcStatusLineNo);
              //NC MDTM04 < MP
            END;
        END;
      END;
      //NC PIF003 < DP
    END;

    PROCEDURE SetAccountTypeAccountNo@1000000006(VAR GenJournalLine@1000000004 : Record 81;GLEntry@1000000006 : Record 17;VAR LedgEntryDim@1000000008 : Record 355;ConsSourceCode@1000000003 : Code[20];GLAccountNo@1000000001 : Code[20];BufferEntryNo@1000000005 : Integer;ConsSession@1000000000 : Integer) : Boolean;
    VAR
      ConsDataBuffer@1000000002 : Record 50008;
      GLAccount@1000000009 : Record 15;
      AccTypeGenJnlSetup@1000000007 : Record 50019;
      IsSpecialAccountType@1000000010 : Boolean;
    BEGIN
      //NC PIF010 > MP Пока не используем
      EXIT(FALSE);
      //NC PIF010 < MP
      //NC PIF003 > DP
      IsSpecialAccountType := FALSE;
      IF GLAccount.GET(GLAccountNo) THEN
        IF NOT (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account") THEN BEGIN

          IF ConsDataBuffer.GET(ConsSourceCode,BufferEntryNo) THEN BEGIN

            IF AccTypeGenJnlSetup.GET(ConsDataBuffer."Cons. Source Code",
              ConsDataBuffer."Debit G/L Account No.", ConsDataBuffer."Credit G/L Account No.")
            THEN BEGIN
              IsSpecialAccountType :=TRUE;
              IF GLEntry."G/L Account No." = ConsDataBuffer."Debit G/L Account No." THEN BEGIN
                GenJournalLine.VALIDATE("Account Type", AccTypeGenJnlSetup."Debit Source Type");
                GenJournalLine.VALIDATE("Account No.",
                    SetAccountNo(GLEntry,AccTypeGenJnlSetup."Debit Source Type",LedgEntryDim,AccTypeGenJnlSetup."Debit Posting Group"));
                GenJournalLine.VALIDATE("Posting Group", AccTypeGenJnlSetup."Debit Posting Group");
                GenJournalLine.Prepayment := AccTypeGenJnlSetup.Prepayment;
              END ELSE BEGIN
                GenJournalLine.VALIDATE("Account Type", AccTypeGenJnlSetup."Credit Source Type");
                GenJournalLine.VALIDATE("Account No.",
                    SetAccountNo(GLEntry,AccTypeGenJnlSetup."Credit Source Type",LedgEntryDim,AccTypeGenJnlSetup."Credit Posting Group")
      );
                GenJournalLine.VALIDATE("Posting Group", AccTypeGenJnlSetup."Credit Posting Group");
                GenJournalLine.Prepayment := AccTypeGenJnlSetup.Prepayment;
              END;
            END ELSE BEGIN
              IF AccTypeGenJnlSetup.GET(ConsSourceCode, GLEntry."G/L Account No.", '') AND
               (GLEntry."G/L Account No." = ConsDataBuffer."Debit G/L Account No.")
               THEN BEGIN
                IsSpecialAccountType :=TRUE;
                GenJournalLine.VALIDATE("Account Type", AccTypeGenJnlSetup."Debit Source Type");
                GenJournalLine.VALIDATE("Account No.",
                    SetAccountNo(GLEntry,AccTypeGenJnlSetup."Debit Source Type",LedgEntryDim,AccTypeGenJnlSetup."Debit Posting Group"));
                GenJournalLine.VALIDATE("Posting Group", AccTypeGenJnlSetup."Debit Posting Group");
                GenJournalLine.Prepayment := AccTypeGenJnlSetup.Prepayment;
              END ELSE BEGIN
                IF AccTypeGenJnlSetup.GET(ConsSourceCode, '', GLEntry."G/L Account No.") AND
                (GLEntry."G/L Account No." = ConsDataBuffer."Credit G/L Account No.")
                THEN BEGIN
                  IsSpecialAccountType :=TRUE;
                  GenJournalLine.VALIDATE("Account Type", AccTypeGenJnlSetup."Credit Source Type");
                  GenJournalLine.VALIDATE("Account No.",
                    SetAccountNo(GLEntry,AccTypeGenJnlSetup."Credit Source Type",LedgEntryDim,AccTypeGenJnlSetup."Credit Posting Group")
      );
                  GenJournalLine.VALIDATE("Posting Group", AccTypeGenJnlSetup."Credit Posting Group");
                  GenJournalLine.Prepayment := AccTypeGenJnlSetup.Prepayment;
                END;
              END;
            END;

          END;
       END;

      EXIT(IsSpecialAccountType);
      //NC PIF003 > DP
    END;

    PROCEDURE SetAccountNo@1000000021(GLEntry@1000000003 : Record 17;AccountType@1000000001 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';VAR LedgEntryDim@1000000000 : Record 355;PostingGroup@1000000009 : Code[20]) : Code[20];
    VAR
      Customer@1000000004 : Record 18;
      Vendor@1000000005 : Record 23;
      BankAccount@1000000006 : Record 270;
      ConsSetup@1000000002 : Record 50000;
      DefaultDimension@1000000007 : Record 352;
      DefaultDimension1@1000000008 : Record 352;
      DimensionValue@1000000010 : Record 349;
    BEGIN
      //NC PIF003 > DP
      CASE AccountType OF
        AccountType::"G/L Account":
          EXIT(GLEntry."G/L Account No.");
        AccountType::Customer:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Entry No.",ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
            DefaultDimension.SETRANGE(DefaultDimension."Table ID",DATABASE::Customer);
            DefaultDimension.SETRANGE("Dimension Code",ConsolidationSetup."Counterparty Dim Code");
            DefaultDimension.SETRANGE("Dimension Value Code",LedgEntryDim."Dimension Value Code");
            IF DefaultDimension.FINDFIRST THEN
              EXIT(DefaultDimension."No.")
            ELSE BEGIN
              Customer.INIT;
              Customer."No." :=LedgEntryDim."Dimension Value Code";
              IF DimensionValue.GET(ConsolidationSetup."Counterparty Dim Code",LedgEntryDim."Dimension Value Code") THEN
                Vendor.Name := DimensionValue.Name;
              Customer."Customer Posting Group" := PostingGroup;
              IF Customer.INSERT THEN;
              DefaultDimension1.INIT;
              DefaultDimension1."Table ID" :=DATABASE::Customer;
              DefaultDimension1."No." :=LedgEntryDim."Dimension Value Code";
              DefaultDimension1."Dimension Code" :=ConsolidationSetup."Counterparty Dim Code";
              DefaultDimension1."Dimension Value Code" :=LedgEntryDim."Dimension Value Code";
              IF DefaultDimension1.INSERT THEN;
              EXIT(LedgEntryDim."Dimension Value Code");
            END;
          END ELSE
            EXIT(GLEntry."G/L Account No.");
        AccountType::Vendor:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Entry No.",ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
            DefaultDimension.SETRANGE(DefaultDimension."Table ID",DATABASE::Vendor);
            DefaultDimension.SETRANGE("Dimension Code",ConsolidationSetup."Counterparty Dim Code");
            DefaultDimension.SETRANGE("Dimension Value Code",LedgEntryDim."Dimension Value Code");
            IF DefaultDimension.FINDFIRST THEN
              EXIT(DefaultDimension."No.")
            ELSE BEGIN
              Vendor.INIT;
              Vendor."No." :=LedgEntryDim."Dimension Value Code";
              IF DimensionValue.GET(ConsolidationSetup."Counterparty Dim Code",LedgEntryDim."Dimension Value Code") THEN
                Vendor.Name := DimensionValue.Name;
              Vendor."Vendor Posting Group" := PostingGroup;
              IF Vendor.INSERT THEN;
              DefaultDimension1.INIT;
              DefaultDimension1."Table ID" :=DATABASE::Vendor;
              DefaultDimension1."No." :=LedgEntryDim."Dimension Value Code";
              DefaultDimension1."Dimension Code" :=ConsolidationSetup."Counterparty Dim Code";
              DefaultDimension1."Dimension Value Code" :=LedgEntryDim."Dimension Value Code";
              IF DefaultDimension1.INSERT THEN;
              EXIT(LedgEntryDim."Dimension Value Code");
            END;
          END ELSE
            EXIT(GLEntry."G/L Account No.");
        AccountType::"Bank Account":
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Entry No.",ConsolidationSetup."Bank Account Dimension Code") THEN BEGIN
            DefaultDimension.SETRANGE(DefaultDimension."Table ID",DATABASE::"Bank Account");
            DefaultDimension.SETRANGE("Dimension Code",ConsolidationSetup."Bank Account Dimension Code");
            DefaultDimension.SETRANGE("Dimension Value Code",LedgEntryDim."Dimension Value Code");
            IF DefaultDimension.FINDFIRST THEN
              EXIT(DefaultDimension."No.")
            ELSE BEGIN
              BankAccount.INIT;
              BankAccount."No." :=LedgEntryDim."Dimension Value Code";
              IF DimensionValue.GET(ConsolidationSetup."Bank Account Dimension Code",LedgEntryDim."Dimension Value Code") THEN
                BankAccount.Name := DimensionValue.Name;
              BankAccount."Bank Acc. Posting Group" :=PostingGroup;
              IF BankAccount.INSERT THEN;
              DefaultDimension1.INIT;
              DefaultDimension1."Table ID" :=DATABASE::"Bank Account";
              DefaultDimension1."No." :=LedgEntryDim."Dimension Value Code";
              DefaultDimension1."Dimension Code" :=ConsolidationSetup."Bank Account Dimension Code";
              DefaultDimension1."Dimension Value Code" :=LedgEntryDim."Dimension Value Code";
              IF DefaultDimension1.INSERT THEN;
              EXIT(LedgEntryDim."Dimension Value Code");

            END;
          END ELSE
            EXIT(GLEntry."G/L Account No.");

        ELSE
          EXIT(GLEntry."G/L Account No.");
      END;
      //NC PIF003 < DP
    END;

    PROCEDURE "NCF > PIF010"@1000000007();
    BEGIN
    END;

    PROCEDURE CheckExceptionCorrespondense2@1000000012(GLBuffer@1210003 : Record 50008;ConsSource@1210012 : Record 50001;MappingCode@1000000004 : Code[20]) : Boolean;
    VAR
      SpecCorrespondense@1210002 : Record 50009;
      SpecCorrespondense1@1210011 : Record 50009;
      DebitAccount@1210001 : Code[20];
      CreditAccount@1210000 : Code[20];
      DocumentType1C@1210006 : Text[30];
      CorrespondenseType@1210005 : 'CurExchange,Exception,Reclassification';
      LedgEntryDim@1210007 : Record 355;
      DimCode@1210009 : Code[20];
      DimVal@1210010 : Code[20];
      GLEntry1@1210013 : Record 17;
      GLFilter@1210014 : Text[90];
      SpecNotExcept@1000000000 : Boolean;
      SpecDim@1000000001 : Boolean;
      Spec@1000000002 : Boolean;
      SelectedExceptDim@1000000003 : Record 369;
    BEGIN
      //NC PIF001 > DP
      Log.StartCounter(-6);
      {
      GLEntry1.CHANGECOMPANY(ConsolidationSource."Company Name");
      GLEntry1.SETCURRENTKEY("Transaction No.");
      GLEntry1.SETRANGE("Transaction No.", GLEntry."Transaction No.");
      GLFilter := FORMAT(GLEntry."Entry No.");
      Spec := FALSE;
      GLEntry1.SETFILTER("Debit Amount", '<>%1', 0);
      GLEntry1.FINDFIRST;
      DebitAccount := GLEntry1."G/L Account No.";
      GLEntry1.SETRANGE("Debit Amount");
      GLEntry1.SETFILTER("Credit Amount", '<>%1', 0);
      GLEntry1.FINDFIRST;
      CreditAccount := GLEntry1."G/L Account No.";
      DocumentType1C :=  GLEntry1."External Document Type";
      }
      SpecCorrespondense1.SETRANGE("Mapping Code", MappingCode);
      //SpecCorrespondense1.SETRANGE("Correspondenсe Type", CorrespondenseType::Exception);
      IF NOT SpecCorrespondense1.FINDFIRST THEN
        EXIT(FALSE);

      //Обработка опции "Не Исключать"
      SpecNotExcept := FALSE;
      Spec := CheckCorr(ConsSource."Mapping Code",
                        GLBuffer."Debit G/L Account No.",
                        GLBuffer."Credit G/L Account No.",
                        GLBuffer."Document Type",
                        '',
                        '',
                        SpecNotExcept);
        IF NOT SpecNotExcept THEN BEGIN
          TempDebitLedgEntryDim.SETRANGE("Table ID", 17);
          TempDebitLedgEntryDim.SETRANGE("Entry No.", GLBuffer."Entry No.");
          TempDebitLedgEntryDim.SETFILTER("Dimension Code",SpecCorrDimFilter);
          IF TempDebitLedgEntryDim.FINDSET(FALSE,FALSE) THEN
            REPEAT
              DimCode := TempDebitLedgEntryDim."Dimension Code";
              DimVal := TempDebitLedgEntryDim."Dimension Value Code";
                SpecDim := CheckCorr(MappingCode,
                  GLBuffer."Debit G/L Account No.",
                  GLBuffer."Credit G/L Account No.",
                  DocumentType1C,
                  DimCode,
                  DimVal,
                  SpecNotExcept);
            UNTIL (TempDebitLedgEntryDim.NEXT = 0) OR SpecDim OR SpecNotExcept;
        END;
        IF (NOT SpecNotExcept) AND (NOT SpecDim) THEN BEGIN
          TempCreditLedgEntryDim.SETRANGE("Table ID", 17);
          TempCreditLedgEntryDim.SETRANGE("Entry No.", GLBuffer."Entry No.");
          TempCreditLedgEntryDim.SETFILTER("Dimension Code",SpecCorrDimFilter);
          IF TempCreditLedgEntryDim.FINDSET(FALSE,FALSE) THEN
            REPEAT
              DimCode := TempCreditLedgEntryDim."Dimension Code";
              DimVal := TempCreditLedgEntryDim."Dimension Value Code";
                SpecDim := CheckCorr(MappingCode,
                  GLBuffer."Debit G/L Account No.",
                  GLBuffer."Credit G/L Account No.",
                  DocumentType1C,
                  DimCode,
                  DimVal,
                  SpecNotExcept);
            UNTIL (TempCreditLedgEntryDim.NEXT = 0) OR SpecDim OR SpecNotExcept;
        END;

      Log.StartCounter(6);

      IF (Spec OR SpecDim) AND (NOT SpecNotExcept) THEN BEGIN
        //NC MDTM02 > MP
        {
        SpecCorrespondense.TESTFIELD("Gen. Journal  Batch Name");
        }
        //NC MDTM02 < MP
        TMPGLEntryException.INIT;
        TMPGLEntryException."Entry No." := GLBuffer."Entry No.";
        //NC MDTM02 > MP
        {
        TMPGLEntryException."Journal Batch Name" := SpecCorrespondense."Gen. Journal  Batch Name";
        }
        TMPGLEntryException."Journal Batch Name" := ConsolidationSetup."Exception Batch Name";
        //NC MDTM02 < MP
        TMPGLEntryException.INSERT;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
      //NC PIF010 < MP
    END;

    PROCEDURE CheckGLMapp2@1000000013(VAR GLBuffer@1000000001 : Record 50008;VAR LedgDimensionTMP@1000000010 : TEMPORARY Record 355;ConsolidationSource1@1000000009 : Record 50001;ConsSession@1210000 : Integer;DocumentNo@1210002 : Code[20];OperationType@1000000000 : ' ,Debit,Credit';DtExtAccCode@1000000020 : Code[20];CtExtAccCode@1000000022 : Code[20];MappingCode@1000000023 : Code[20];VAR IsAccBalance@1101495008 : Boolean;ThisIsNormalRun@1101495004 : Boolean;VAR ReceiverGLAcc@1101495005 : Code[20];VAR SourceType@1101495006 : 'G/L Account,Customer,Vendor,Bank Account';VAR SourcePostingGroup@1101495007 : Code[10]);
    VAR
      ConvOfChartOfAccounts@1000000008 : Record 50002;
      ConsSetup@1000000021 : Record 50000;
      DimCode1@1000000014 : Code[20];
      DimCode2@1000000013 : Code[20];
      DimVal1@1000000016 : Code[20];
      DimVal2@1000000017 : Code[20];
      MappingFind@1000000018 : Boolean;
      GLAccount@1210001 : Record 15;
      IsErr@1210003 : Boolean;
      LedgDimContr@1210004 : Record 355;
      LedgDimIntContr@1210005 : Record 355;
      Text50055@1210006 : TextConst 'ENU="You should define Dimension %1 %2/%3/%4 in table %5 ";RUS=Вы должны определить Измерение %1 в %2 или в %3 или в %4 таблицы %5.';
      DimValueContr@1000000002 : Record 349;
      cConsAcc@1210010 : Code[20];
      lDim1Exist@1210009 : Boolean;
      lDim2Exist@1210008 : Boolean;
      lDim3Exist@1210007 : Boolean;
      ICDim1Exist@1210013 : Boolean;
      ICDim2Exist@1210012 : Boolean;
      ICDim3Exist@1210011 : Boolean;
      SourceGLAccountNo@1000000003 : Code[20];
      CountLEDim@1101495000 : Integer;
      Rating@1101495001 : Integer;
      LineNo@1000000004 : Integer;
      SourceCorrGLAccountNo@1000000005 : Code[20];
      CoAMappRef@1000000006 : RecordRef;
      DimValue@1000000007 : Record 349;
      DefDim@1000000011 : Record 352;
      LinkedDim@1000000012 : Record 50016;
      Dimension@1000000015 : Record 348;
      TmpBool@1000000019 : Boolean;
      IsSpecialAccountType@1000000024 : Boolean;
      Customer@1000000025 : Record 18;
      Vendor@1000000026 : Record 23;
      VendorAgreement@1000000027 : Record 14901;
      CustomerAgreement@1000000028 : Record 14902;
      DimMappingSelection@1000000029 : Record 50031;
      BankAccount@1000000030 : Record 270;
      DealCard@1101495002 : Record 50037;
      EntryCurrencyCode@1101495003 : Code[20];
      GLEntryBufEmpty@1101495009 : Record 50093;
    BEGIN
      //NC PIF010 > MP
      Log.StartCounter(-7);
      MappingFind := FALSE;

      //NC MIO-10.1 > DP
      CurrCompany.GET(COMPANYNAME);
      //NC MIO-10.1 < DP

      //NC MDTM04 > MP
      {
      IF OperationType = OperationType::Debit THEN
        SourceGLAccountNo := GLBuffer."Debit G/L Account No.";
      IF OperationType = OperationType::Credit THEN
        SourceGLAccountNo := GLBuffer."Credit G/L Account No.";
      }
      IF OperationType = OperationType::Debit THEN BEGIN
        //NC MDTM02.1 > MP
        {
        SourceGLAccountNo := GLBuffer."Debit G/L Account No.";
        SourceCorrGLAccountNo := GLBuffer."Credit G/L Account No.";
        }
        SourceGLAccountNo := DtExtAccCode;
        SourceCorrGLAccountNo := CtExtAccCode;
        //NC MDTM02.1 < MP
      END;
      IF OperationType = OperationType::Credit THEN BEGIN
        //NC MDTM02.1 > MP
        {
        SourceGLAccountNo := GLBuffer."Credit G/L Account No.";
        SourceCorrGLAccountNo := GLBuffer."Debit G/L Account No.";
        }
        SourceGLAccountNo := CtExtAccCode;
        SourceCorrGLAccountNo := DtExtAccCode;
        //NC MDTM02.1 < MP
      END;
      //NC MDTM02.1 < MP
      //NC MDTM04 < MP

      //NC MDTM03, MDTM04 > MP Полностью переработана функция мэппинга
      IF NOT IsFoundGLMapp(GLBuffer."Entry No.",LedgDimensionTMP,MappingCode,
                           COMPANYNAME,SourceGLAccountNo,SourceCorrGLAccountNo,OperationType,cConsAcc,LineNo)
      THEN
      IF NOT IsFoundGLMapp(GLBuffer."Entry No.",LedgDimensionTMP,MappingCode,
                           COMPANYNAME,SourceGLAccountNo,SourceCorrGLAccountNo,0,            cConsAcc,LineNo)
      THEN
      IF NOT IsFoundGLMapp(GLBuffer."Entry No.",LedgDimensionTMP,MappingCode,
                           COMPANYNAME,SourceGLAccountNo,'',                   OperationType,cConsAcc,LineNo)
      THEN
      IF NOT IsFoundGLMapp(GLBuffer."Entry No.",LedgDimensionTMP,MappingCode,
                           COMPANYNAME,SourceGLAccountNo,'',                   0,            cConsAcc,LineNo)
      THEN
      IF NOT IsFoundGLMapp(GLBuffer."Entry No.",LedgDimensionTMP,MappingCode,
                           '',         SourceGLAccountNo,SourceCorrGLAccountNo,OperationType,cConsAcc,LineNo)
      THEN
      IF NOT IsFoundGLMapp(GLBuffer."Entry No.",LedgDimensionTMP,MappingCode,
                           '',         SourceGLAccountNo,SourceCorrGLAccountNo,0,            cConsAcc,LineNo)
      THEN
      IF NOT IsFoundGLMapp(GLBuffer."Entry No.",LedgDimensionTMP,MappingCode,
                           '',         SourceGLAccountNo,'',                   OperationType,cConsAcc,LineNo)
      THEN
      IF NOT IsFoundGLMapp(GLBuffer."Entry No.",LedgDimensionTMP,MappingCode,
                           '',         SourceGLAccountNo,'',                   0,            cConsAcc,LineNo)
      THEN;

      IF cConsAcc <> '' THEN BEGIN
        MappingFind := TRUE;
        //NC MDTC01 > MP
        IF OperationType = OperationType::Debit THEN BEGIN
          DTMappLineNo := LineNo;
          //ConvOfChartOfAccounts.GET(MappingCode,DTMappLineNo);
          //CoAMappRef.GETTABLE(ConvOfChartOfAccounts);
          //GLBuffer."Debit CoA Mapping ID" := CoAMappRef.RECORDID;
        END ELSE BEGIN
          CTMappLineNo := LineNo;
          //ConvOfChartOfAccounts.GET(MappingCode,CTMappLineNo);
          //CoAMappRef.GETTABLE(ConvOfChartOfAccounts);
          //GLBuffer."Credit CoA Mapping ID" := CoAMappRef.RECORDID;
        END;
        //NC MDTC01 < MP
      END;
      IsErr := FALSE;
      //NC OPT > PCH
      //IF (NOT MappingFind) OR
      //   (ConvOfChartOfAccounts."Receiver Account Code" = '')
      IF NOT MappingFind
      //NC OPT < PCH
      THEN BEGIN
        IsErr := TRUE;
        //NC MDTC01 > MP
        IsGlobalError := TRUE;
        //NC MDTC01 < MP
      END;
      IF IsErr THEN BEGIN
        //NC MDM04 > MP
        {
        ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
        ErrDoc := DocumentNo;
        ErrMessage := Text010 + FORMAT(SourceGLAccountNo) + Text011;
          CreateErrorLogEntry(ConsolidationSource1.Code,
            ConsSession,0,1, ErrOper,GLBuffer."Document Date",SourceGLAccountNo,ErrDoc,ErrMessage,'');
        }
        ErrMessage := Text010 + FORMAT(SourceGLAccountNo) + Text030 + FORMAT(SourceCorrGLAccountNo) + Text011;
        //NC MDTC01.02 > MP
        IF ThisIsNormalRun THEN
        //NC MDTC01.02 < MP
        ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                   ConsolidationSource1.Code,ConsSession,'EDTC01',
                                   ErrMessage,COMPANYNAME,GLBuffer,JobProcStatusLineNo);
        //NC MDM04 < MP
      END;
      //NC MDTC02 > MP
      //NC MDTC01.02 > MP
      IF NOT ThisIsNormalRun THEN BEGIN
        ReceiverGLAcc := cConsAcc;

        //NC MDTC01.03 > DP
        IF GLAccount.GET(cConsAcc) THEN
          IF NOT (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account") THEN BEGIN
            IF ConvOfChartOfAccounts."Ext. Source Type" <> ConvOfChartOfAccounts."Ext. Source Type"::"G/L Account" THEN BEGIN
        //NC MDTC01.03 < DP

        ConvOfChartOfAccounts.GET(MappingCode,LineNo);
        SourceType := GLAccount."Ext. Source Type";
        SourcePostingGroup := GLAccount."Source Posting Group";


        //NC MDTC01.03 > DP
            END ELSE BEGIN
              SourceType := GLAccount."Ext. Source Type";
              SourcePostingGroup := GLAccount."Source Posting Group";
            END;
          END ELSE BEGIN
            SourceType := GLAccount."Ext. Source Type";
            SourcePostingGroup := GLAccount."Source Posting Group";
          END;
        //NC MDTC01.03 < DP

      END;
      //NC MDTC01.02 < MP
      IF cConsAcc <> '' THEN
        IF NOT GLAccount.GET(cConsAcc) THEN BEGIN
          IsErr := TRUE;
          IsGlobalError := TRUE;
          //NC MDM04 > MP
          {
          ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
          ErrDoc := DocumentNo;
          ErrMessage := Text016 + FORMAT(cConsAcc) + Text017;
            CreateErrorLogEntry(ConsolidationSource1.Code,
              ConsSession,0,1, ErrOper,GLBuffer."Document Date",SourceGLAccountNo,ErrDoc,ErrMessage,'');
          }
          ErrMessage := Text016 + FORMAT(cConsAcc) + Text017;
          //NC MDTC01.02 > MP
          IF ThisIsNormalRun THEN
          //NC MDTC01.02 < MP
          ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsolidationSource1.Code,ConsSession,'EDTC03',
                                     ErrMessage,COMPANYNAME,GLBuffer,JobProcStatusLineNo);
          //NC MDM04 < MP
        END ELSE BEGIN
          //NC APCOC-115 > AIG
          IsAccBalance := NOT (GLAccount."Income/Balance" = GLAccount."Income/Balance"::"Income Statement");
          //NC APCOC-115 < AIG
          IF GLAccount."Account Type" <> GLAccount."Account Type"::Posting THEN BEGIN
            IsGlobalError := TRUE;
            ConvOfChartOfAccounts.GET(MappingCode,LineNo);
            //NC MDTC01.02 > MP
            IF ThisIsNormalRun THEN
            //NC MDTC01.02 < MP
            ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                  ConsolidationSource1.Code,ConsSession,'EDTC10',
                                                  STRSUBSTNO(Text035,GLAccount."No."),COMPANYNAME,GLBuffer,GLAccount,
                                                  ConvOfChartOfAccounts,JobProcStatusLineNo);
          END;
          //NC MDTC02.1 > MP
          IF GLAccount.Blocked THEN BEGIN
            IsGlobalError := TRUE;
            ConvOfChartOfAccounts.GET(MappingCode,LineNo);
            //NC MDTC01.02 > MP
            IF ThisIsNormalRun THEN
            //NC MDTC01.02 < MP
            ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                  ConsolidationSource1.Code,ConsSession,'EDTC15',
                                                  STRSUBSTNO(Text041,GLAccount."No."),COMPANYNAME,GLBuffer,GLAccount,
                                                  ConvOfChartOfAccounts,JobProcStatusLineNo);
          END;
          //NC MDTC02.1 < MP

          //NC NCS-1908 > DP
          ConvOfChartOfAccounts.GET(MappingCode,LineNo);
          IF ConvOfChartOfAccounts."Ext. Source Type" IN [ConvOfChartOfAccounts."Ext. Source Type"::Customer,
                                              ConvOfChartOfAccounts."Ext. Source Type"::Vendor,
                                              ConvOfChartOfAccounts."Ext. Source Type"::"Bank Account"] THEN BEGIN
            IF ConvOfChartOfAccounts."Gen. Posting Type" <> 0 THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                        ConsolidationSource1.Code,ConsSession,'EDTC27',
                    STRSUBSTNO(TextEDTC27, ConvOfChartOfAccounts.TABLECAPTION,ConvOfChartOfAccounts.FIELDCAPTION("Gen. Posting Type"),''
      ),
                                                        COMPANYNAME,GLBuffer,GLAccount,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
            IF ConvOfChartOfAccounts."VAT Bus. Posting Group" <> '' THEN BEGIN
               IsGlobalError := TRUE;
               ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                        ConsolidationSource1.Code,ConsSession,'EDTC27',
               STRSUBSTNO(TextEDTC27, ConvOfChartOfAccounts.TABLECAPTION,ConvOfChartOfAccounts.FIELDCAPTION("VAT Bus. Posting Group"),''
      ),
                                                        COMPANYNAME,GLBuffer,GLAccount,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
            IF ConvOfChartOfAccounts."VAT Prod. Posting Group" <> '' THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                        ConsolidationSource1.Code,ConsSession,'EDTC27',
             STRSUBSTNO(TextEDTC27, ConvOfChartOfAccounts.TABLECAPTION,ConvOfChartOfAccounts.FIELDCAPTION("VAT Prod. Posting Group"),'')
      ,
                                                        COMPANYNAME,GLBuffer,GLAccount,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
          END;
          IF GLAccount."Ext. Source Type" IN [GLAccount."Ext. Source Type"::Customer,
                                              GLAccount."Ext. Source Type"::Vendor,
                                              GLAccount."Ext. Source Type"::"Bank Account"] THEN BEGIN
            IF ConvOfChartOfAccounts."Gen. Posting Type" <> 0 THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                        ConsolidationSource1.Code,ConsSession,'EDTC27',
                    STRSUBSTNO(TextEDTC27, ConvOfChartOfAccounts.TABLECAPTION,ConvOfChartOfAccounts.FIELDCAPTION("Gen. Posting Type"),''
      ),
                                                        COMPANYNAME,GLBuffer,GLAccount,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
            IF ConvOfChartOfAccounts."VAT Bus. Posting Group" <> '' THEN BEGIN
               IsGlobalError := TRUE;
               ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                        ConsolidationSource1.Code,ConsSession,'EDTC27',
               STRSUBSTNO(TextEDTC27, ConvOfChartOfAccounts.TABLECAPTION,ConvOfChartOfAccounts.FIELDCAPTION("VAT Bus. Posting Group"),''
      ),
                                                        COMPANYNAME,GLBuffer,GLAccount,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
            IF ConvOfChartOfAccounts."VAT Prod. Posting Group" <> '' THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                        ConsolidationSource1.Code,ConsSession,'EDTC27',
             STRSUBSTNO(TextEDTC27, ConvOfChartOfAccounts.TABLECAPTION,ConvOfChartOfAccounts.FIELDCAPTION("VAT Prod. Posting Group"),'')
      ,
                                                        COMPANYNAME,GLBuffer,GLAccount,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
          END;
          //NC NCS-1908 < DP

        END;
      //NC MDTC02 < MP
      //NC MDTC03 > MP
      IF (ConsolidationSource1."Import Format" = ConsolidationSource1."Import Format"::FromBuffer) AND
         ConsolidationSource1."Use GL Mapping" AND (cConsAcc <> '') AND (LineNo <> 0)
          //NC MDTC01.02 > MP
          AND ThisIsNormalRun
          //NC MDTC01.02 < MP
      THEN BEGIN
        ConvOfChartOfAccounts.GET(MappingCode,LineNo);
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 1" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 1" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(1,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(1,GLBuffer."Entry No.",GLBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          IF Dimension.GET(ConvOfChartOfAccounts."Receiver Dimension Code 1") THEN BEGIN
            IF Dimension.Blocked THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource1.Code,ConsSession,'EDTC16',
                                         STRSUBSTNO(Text042,ConvOfChartOfAccounts."Receiver Dimension Code 1"),
                                         COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
          END ELSE BEGIN
            IsGlobalError := TRUE;
            ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource1.Code,ConsSession,'EDTC17',
                                       STRSUBSTNO(Text043,ConvOfChartOfAccounts."Receiver Dimension Code 1"),
                                       COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);

          END;
          IF NOT DimValue.GET(ConvOfChartOfAccounts."Receiver Dimension Code 1",ConvOfChartOfAccounts."Receiver Dim. Value Code 1")
          THEN BEGIN
            IsGlobalError := TRUE;
            ErrMessage := Text022 + FORMAT(ConvOfChartOfAccounts."Receiver Dimension Code 1") + Text023 +
                          FORMAT(ConvOfChartOfAccounts."Receiver Dim. Value Code 1") + Text024;
            ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                  ConsolidationSource1.Code,ConsSession,'EDTC06',
                                                  ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
          END ELSE BEGIN
            IF DimValue."Dimension Value Type" <> DimValue."Dimension Value Type"::Standard THEN BEGIN
              IsGlobalError := TRUE;
              ErrMessage := Text034 + FORMAT(DimValue.Code) + Text013 + FORMAT(DimValue."Dimension Code") + Text032;
              ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource1.Code,ConsSession,'EDTC09',
                                         ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END ELSE BEGIN
              IF DimValue.Blocked THEN BEGIN
                IsGlobalError := TRUE;
                ErrMessage := Text025 + FORMAT(DimValue."Dimension Code") + Text026 + FORMAT(DimValue.Code) + Text027;
                ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                           ConsolidationSource1.Code,ConsSession,'EDTC07',
                                           ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
              END ELSE BEGIN
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := GLBuffer."Entry No.";
                LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 1";
                LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 1";
                IF NOT LedgDimensionTMP.INSERT THEN BEGIN
                  TmpBool := TRUE; //LedgDimensionTMP.MODIFY;
                  //NCS-2345 > AAP
                  IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 1" THEN BEGIN
                    LedgDimensionTMP.MODIFY;
                  END;
                  //NCS-2345 < AAP
                END ELSE BEGIN
                  LinkedDim.RESET;
                  LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 1");
                  LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 1");
                  IF LinkedDim.FINDSET THEN
                    REPEAT
                      LedgDimensionTMP.INIT;
                      LedgDimensionTMP."Table ID" := 17;
                      LedgDimensionTMP."Entry No." := GLBuffer."Entry No.";
                      LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                      LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                      IF NOT LedgDimensionTMP.INSERT THEN;
                      //  LedgDimensionTMP.MODIFY;
                    UNTIL LinkedDim.NEXT = 0;
                END;
              END
            END;
          END;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 2" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 2" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(2,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(2,GLBuffer."Entry No.",GLBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          IF Dimension.GET(ConvOfChartOfAccounts."Receiver Dimension Code 2") THEN BEGIN
            IF Dimension.Blocked THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource1.Code,ConsSession,'EDTC16',
                                         STRSUBSTNO(Text042,ConvOfChartOfAccounts."Receiver Dimension Code 2"),
                                         COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
          END ELSE BEGIN
            IsGlobalError := TRUE;
            ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource1.Code,ConsSession,'EDTC17',
                                       STRSUBSTNO(Text043,ConvOfChartOfAccounts."Receiver Dimension Code 2"),
                                       COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);

          END;
          IF NOT DimValue.GET(ConvOfChartOfAccounts."Receiver Dimension Code 2",ConvOfChartOfAccounts."Receiver Dim. Value Code 2")
          THEN BEGIN
            IsGlobalError := TRUE;
            ErrMessage := Text022 + FORMAT(ConvOfChartOfAccounts."Receiver Dimension Code 2") + Text023 +
                          FORMAT(ConvOfChartOfAccounts."Receiver Dim. Value Code 2") + Text024;
            ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                  ConsolidationSource1.Code,ConsSession,'EDTC06',
                                                  ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
          END ELSE BEGIN
            IF DimValue."Dimension Value Type" <> DimValue."Dimension Value Type"::Standard THEN BEGIN
              IsGlobalError := TRUE;
              ErrMessage := Text034 + FORMAT(DimValue.Code) + Text013 + FORMAT(DimValue."Dimension Code") + Text032;
              ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource1.Code,ConsSession,'EDTC09',
                                         ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END ELSE BEGIN
              IF DimValue.Blocked THEN BEGIN
                IsGlobalError := TRUE;
                ErrMessage := Text025 + FORMAT(DimValue."Dimension Code") + Text026 + FORMAT(DimValue.Code) + Text027;
                ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                           ConsolidationSource1.Code,ConsSession,'EDTC07',
                                           ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
              END ELSE BEGIN
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := GLBuffer."Entry No.";
                LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 2";
                LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 2";
                IF NOT LedgDimensionTMP.INSERT THEN BEGIN
                  TmpBool := TRUE; //LedgDimensionTMP.MODIFY
                  //NCS-2345 > AAP
                  IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 2" THEN BEGIN
                    LedgDimensionTMP.MODIFY;
                  END;
                  //NCS-2345 < AAP
                END ELSE BEGIN
                  LinkedDim.RESET;
                  LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 2");
                  LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 2");
                  IF LinkedDim.FINDSET THEN
                    REPEAT
                      LedgDimensionTMP.INIT;
                      LedgDimensionTMP."Table ID" := 17;
                      LedgDimensionTMP."Entry No." := GLBuffer."Entry No.";
                      LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 2";
                      LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 2";
                      LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                      LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                      IF NOT LedgDimensionTMP.INSERT THEN;
                      //  LedgDimensionTMP.MODIFY;
                    UNTIL LinkedDim.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 3" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 3" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(3,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(3,GLBuffer."Entry No.",GLBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          IF Dimension.GET(ConvOfChartOfAccounts."Receiver Dimension Code 3") THEN BEGIN
            IF Dimension.Blocked THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource1.Code,ConsSession,'EDTC16',
                                         STRSUBSTNO(Text042,ConvOfChartOfAccounts."Receiver Dimension Code 3"),
                                         COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
          END ELSE BEGIN
            IsGlobalError := TRUE;
            ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource1.Code,ConsSession,'EDTC17',
                                       STRSUBSTNO(Text043,ConvOfChartOfAccounts."Receiver Dimension Code 3"),
                                       COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);

          END;
          IF NOT DimValue.GET(ConvOfChartOfAccounts."Receiver Dimension Code 3",ConvOfChartOfAccounts."Receiver Dim. Value Code 3")
          THEN BEGIN
            IsGlobalError := TRUE;
            ErrMessage := Text022 + FORMAT(ConvOfChartOfAccounts."Receiver Dimension Code 3") + Text023 +
                          FORMAT(ConvOfChartOfAccounts."Receiver Dim. Value Code 3") + Text024;
            ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                  ConsolidationSource1.Code,ConsSession,'EDTC06',
                                                  ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
          END ELSE BEGIN
            IF DimValue."Dimension Value Type" <> DimValue."Dimension Value Type"::Standard THEN BEGIN
              IsGlobalError := TRUE;
              ErrMessage := Text034 + FORMAT(DimValue.Code) + Text013 + FORMAT(DimValue."Dimension Code") + Text032;
              ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource1.Code,ConsSession,'EDTC09',
                                         ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
            END ELSE BEGIN
              IF DimValue.Blocked THEN BEGIN
                IsGlobalError := TRUE;
                ErrMessage := Text025 + FORMAT(DimValue."Dimension Code") + Text026 + FORMAT(DimValue.Code) + Text027;
                ErrorJournal.AddErrorBuferGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                           ConsolidationSource1.Code,ConsSession,'EDTC07',
                                           ErrMessage,COMPANYNAME,GLBuffer,ConvOfChartOfAccounts,JobProcStatusLineNo);
              END ELSE BEGIN
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := GLBuffer."Entry No.";
                LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 3";
                LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 3";
                IF NOT LedgDimensionTMP.INSERT THEN BEGIN
                  TmpBool := TRUE; //LedgDimensionTMP.MODIFY;
                  //NCS-2345 > AAP
                  IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 3" THEN BEGIN
                    LedgDimensionTMP.MODIFY;
                  END;
                  //NCS-2345 < AAP
                END ELSE BEGIN
                  LinkedDim.RESET;
                  LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 3");
                  LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 3");
                  IF NOT LedgDimensionTMP.INSERT THEN
                    LedgDimensionTMP.MODIFY;
                  IF LinkedDim.FINDSET THEN
                    REPEAT
                      LedgDimensionTMP.INIT;
                      LedgDimensionTMP."Table ID" := 17;
                      LedgDimensionTMP."Entry No." := GLBuffer."Entry No.";
                      LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 3";
                      LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 3";
                      LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                      LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                      IF NOT LedgDimensionTMP.INSERT THEN;
                      //  LedgDimensionTMP.MODIFY;
                    UNTIL LinkedDim.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
        //NC MIO-10.1 > DP
        {
        //NC MTD02 > AIG
        IF (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account") THEN BEGIN
        //NC MTD02 < AIG
        }
        IF CurrCompany."G/L Accounting Only" OR
        (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account") THEN BEGIN
        //NC MIO-10.1 < DP


        //NC MDTC01 > MP Добавляем стандартные измерения со счета
        DefDim.SETRANGE("Table ID",15);
        DefDim.SETRANGE("No.",cConsAcc);
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        IF DefDim.FINDSET THEN
          REPEAT
            LedgDimensionTMP.INIT;
            LedgDimensionTMP."Table ID" := 17;
            LedgDimensionTMP."Entry No." := GLBuffer."Entry No.";
            LedgDimensionTMP."Dimension Code" := DefDim."Dimension Code";
            LedgDimensionTMP."Dimension Value Code" := DefDim."Dimension Value Code";

            //NC NCS-1002.2 > DP
            IF DefDim."Value Posting" = DefDim."Value Posting"::"Same Code" THEN BEGIN
              LedgDimensionTMP."Dim in Source" :=DefDim."Dimension Code";
              LedgDimensionTMP."Dim Value Code in Source" := DefDim."Dimension Value Code";
            END;
            //NC NCS-1002.2 < DP

            //NC NCS-1002 > DP
            IF NOT LedgDimensionTMP.INSERT THEN
              IF DefDim."Value Posting" = DefDim."Value Posting"::"Same Code" THEN
                LedgDimensionTMP.MODIFY;
            {
            IF NOT LedgDimensionTMP.INSERT THEN;
            }
            //NC NCS-1002 < DP

          UNTIL DefDim.NEXT = 0;
        //NC MDTC01 < MP


        //NC NCS-1002.4 > DP
        END ELSE BEGIN
          DefDim.SETRANGE("Table ID",15);
          DefDim.SETRANGE("No.",cConsAcc);
          DefDim.SETRANGE("Value Posting", DefDim."Value Posting"::"Same Code");
          DefDim.SETFILTER("Dimension Value Code",'<>%1','');
          IF DefDim.FINDSET THEN
            REPEAT
              LedgDimensionTMP.INIT;
              LedgDimensionTMP."Table ID" := 17;
              LedgDimensionTMP."Entry No." := GLBuffer."Entry No.";
              LedgDimensionTMP."Dimension Code" := DefDim."Dimension Code";
              LedgDimensionTMP."Dimension Value Code" := DefDim."Dimension Value Code";
              LedgDimensionTMP."Dim in Source" :=DefDim."Dimension Code";
              LedgDimensionTMP."Dim Value Code in Source" := DefDim."Dimension Value Code";
              IF NOT LedgDimensionTMP.INSERT THEN
                LedgDimensionTMP.MODIFY;
          UNTIL DefDim.NEXT = 0;
        //NC NCS-1002.4 < DP




        //NC MTD02 > AIG
        END;
        //NC MTD02 < AIG



          //NC MTD02 > AIG
          IsSpecialAccountType := FALSE;
          IF NOT (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account")

          //NC MIO-10.1 > DP
          AND NOT CurrCompany."G/L Accounting Only"
          //NC MIO-10.1 < DP

          THEN BEGIN
          IsSpecialAccountType := TRUE;
            ConvOfChartOfAccounts.GET(MappingCode,LineNo);
            IF ConvOfChartOfAccounts."Ext. Source Type" <> ConvOfChartOfAccounts."Ext. Source Type"::"G/L Account" THEN BEGIN
              IF (ConvOfChartOfAccounts."Ext. Source Type" = ConvOfChartOfAccounts."Ext. Source Type"::Customer) OR
                 (ConvOfChartOfAccounts."Ext. Source Type" = ConvOfChartOfAccounts."Ext. Source Type"::Vendor) THEN BEGIN
                   LedgDimensionTMP.RESET;
                   LedgDimensionTMP.SETRANGE("Table ID", 17);
                   LedgDimensionTMP.SETRANGE("Entry No.", GLBuffer."Entry No.");
                   LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Counterparty Dim Code");
                   IF NOT LedgDimensionTMP.FINDSET THEN BEGIN
                     IsGlobalError := TRUE;
                     ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                           ErrorJournal.Type::Error,
                                                           ConsolidationSource1.Code,ConsSession,'EDTC21',
                                                             STRSUBSTNO(Text044,GLAccount."No.",ConsolidationSetup.
      "Counterparty Dim Code"
      ),
                                                           COMPANYNAME,GLBuffer,GLAccount,
                                                           ConvOfChartOfAccounts,JobProcStatusLineNo);
                   END ELSE BEGIN
                     // аналитика COUNTERPARTY есть на операции, проверяем сделку и учет оп договорам.
                     IF ConvOfChartOfAccounts."Ext. Source Type" = ConvOfChartOfAccounts."Ext. Source Type"::Customer THEN
                       IF NOT Customer.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                         IsGlobalError := TRUE;
                         ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                               ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,'EDTC24',
                                                               STRSUBSTNO(Text048,GLAccount."No.",
                                                               LedgDimensionTMP."Dimension Value Code"),
                                                               COMPANYNAME,GLBuffer,GLAccount,
                                                               ConvOfChartOfAccounts,JobProcStatusLineNo);
                       END ELSE BEGIN
                         LedgDimensionTMP.RESET;
                         LedgDimensionTMP.SETRANGE("Table ID", 17);
                         LedgDimensionTMP.SETRANGE("Entry No.", GLBuffer."Entry No.");
                         LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Deal Dimension Code");
                         IF NOT LedgDimensionTMP.FINDFIRST THEN BEGIN
                           IF Customer."Agreement Posting" = Customer."Agreement Posting"::Mandatory THEN BEGIN
                             IsGlobalError := TRUE;
                             ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                   ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                   'EDTC10',
                                                                   STRSUBSTNO(Text049,GLAccount."No.",
                                                                   Customer."No."),
                                                                   COMPANYNAME,GLBuffer,GLAccount,
                                                                   ConvOfChartOfAccounts,JobProcStatusLineNo);
                           END;
                         END ELSE BEGIN
                         // сущность определена, контрагент найден, аналитика deal есть на операции - > проверяем блокировку договора
                         IF CustomerAgreement.GET(Customer."No.", LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IF CustomerAgreement.Active = FALSE THEN BEGIN
                             IsGlobalError := TRUE;
                             ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                   ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                   'EDTC11',
                                                                   STRSUBSTNO(Text050,LedgDimensionTMP."Dimension Value Code",
                                                                   Customer."No."),
                                                                   COMPANYNAME,GLBuffer,GLAccount,
                                                                   ConvOfChartOfAccounts,JobProcStatusLineNo);

                           END;
                         END ELSE BEGIN
                         {
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                 'EDTC10',
                                                                 STRSUBSTNO(Text054, Customer."No.",
                                                                 LedgDimensionTMP."Dimension Value Code"),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         }
                         // проверяем наличие карточки сделки
                         IF NOT DealCard.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                 'EDTC10',
                                                                 STRSUBSTNO(Text059, LedgDimensionTMP."Dimension Value Code",
                                                                 Customer."No."),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         END;
                         END;
                         END;
                      END;
                     IF ConvOfChartOfAccounts."Ext. Source Type" = ConvOfChartOfAccounts."Ext. Source Type"::Vendor THEN
                      IF NOT Vendor.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                        //NC S1471 > PCH
                        CreateVendorBuffer(LedgDimensionTMP."Dimension Value Code");
                        //NC S1471 < PCH
                        IsGlobalError := TRUE;
                        ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                              ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                              'EDTC10',
                                                              STRSUBSTNO(Text056,GLAccount."No.", LedgDimensionTMP.
      "Dimension Value Code")
                                                              //NC S1471 > PCH
                                                              + NoVendErr
                                                              //NC S1471 < PCH
                                                              ,COMPANYNAME,GLBuffer,GLAccount,
                                                              ConvOfChartOfAccounts,JobProcStatusLineNo);
                      END ELSE BEGIN
                        LedgDimensionTMP.RESET;
                        LedgDimensionTMP.SETRANGE("Table ID", 17);
                        LedgDimensionTMP.SETRANGE("Entry No.", GLBuffer."Entry No.");
                        LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Deal Dimension Code");
                        IF NOT LedgDimensionTMP.FINDFIRST THEN BEGIN
                          IF Vendor."Agreement Posting" = Vendor."Agreement Posting"::Mandatory THEN BEGIN
                            IsGlobalError := TRUE;
                            ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                  ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                  'EDTC10',STRSUBSTNO(Text060,GLAccount."No.", Vendor."No."),
                                                                  COMPANYNAME,GLBuffer,GLAccount,
                                                                  ConvOfChartOfAccounts,JobProcStatusLineNo);
                          END;
                        END ELSE BEGIN
                         // сущность определена, контрагент найден, аналитика deal есть на операции - > проверяем блокировку договора
                         IF VendorAgreement.GET(Vendor."No.", LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IF VendorAgreement.Active = FALSE THEN BEGIN
                             IsGlobalError := TRUE;
                             ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                   ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                   'EDTC11',
                                                                   STRSUBSTNO(Text051,LedgDimensionTMP."Dimension Value Code",
                                                                   Vendor."No."),
                                                                   COMPANYNAME,GLBuffer,GLAccount,
                                                                   ConvOfChartOfAccounts,JobProcStatusLineNo);

                           END;
                         END ELSE BEGIN
                         {
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                 'EDTC10',
                                                                 STRSUBSTNO(Text055, Vendor."No.",
                                                                 LedgDimensionTMP."Dimension Value Code"),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         }
                         // проверяем наличие карточки сделки
                         IF NOT DealCard.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                 'EDTC10',
                                                                 STRSUBSTNO(Text058, LedgDimensionTMP."Dimension Value Code",
                                                                 Vendor."No."),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         END;
                         END;
                         END;
                      END;
                   END;
              END;
              IF (ConvOfChartOfAccounts."Ext. Source Type" = ConvOfChartOfAccounts."Ext. Source Type"::"Bank Account") THEN BEGIN
                   LedgDimensionTMP.RESET;
                   LedgDimensionTMP.SETRANGE("Table ID", 17);
                   LedgDimensionTMP.SETRANGE("Entry No.", GLBuffer."Entry No.");
                   LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Bank Account Dimension Code");
                   IF NOT LedgDimensionTMP.FINDSET THEN BEGIN
                    IsGlobalError := TRUE;
                    ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::
      Error,
                                                          ConsolidationSource1.Code,ConsSession,'EDTC22',
                                                          STRSUBSTNO(Text047,GLAccount."No.",
                                                          ConsolidationSetup."Bank Account Dimension Code"),
                                                          COMPANYNAME,GLBuffer,GLAccount,
                                                          ConvOfChartOfAccounts,JobProcStatusLineNo);
                   END ELSE BEGIN
                     IF DimMappingSelection.GET(ConsolidationSource1."Mapping Code",
                                                ConsolidationSetup."Bank Account Dimension Code") THEN BEGIN
                       IF OperationType = OperationType::Debit THEN BEGIN
                         DebitBankAcc := TRUE;
                       END ELSE BEGIN
                         CreditBankAcc := TRUE;
                       END;
                     END ELSE
                     IF NOT BankAccount.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                       IsGlobalError := TRUE;
                       ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                          ErrorJournal.Type::Error,ConsolidationSource1.Code,ConsSession,'EDTC02',
                                                          STRSUBSTNO(Text052,LedgDimensionTMP."Dimension Value Code"),
                                                          COMPANYNAME,GLBuffer,GLAccount,
                                                          ConvOfChartOfAccounts,JobProcStatusLineNo);
                     END ELSE BEGIN
                       IF OperationType = OperationType::Debit THEN BEGIN
                         EntryCurrencyCode := GLBuffer."Debit Currency Code";
                       END ELSE BEGIN
                         EntryCurrencyCode := GLBuffer."Credit Currency Code";
                       END;
                       IF EntryCurrencyCode = '' THEN
                         EntryCurrencyCode := ConsolidationSource1."LCY Code";

                       IF (BankAccount."Currency Code" <> '') AND
                          (BankAccount."Currency Code" <> EntryCurrencyCode) THEN BEGIN
                         IsGlobalError := TRUE;
                         ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                               ErrorJournal.Type::Error,ConsolidationSource1.Code,ConsSession,'EDTC02',
                                                               STRSUBSTNO(Text057,BankAccount."No.", EntryCurrencyCode),
                                                               COMPANYNAME,GLBuffer,GLAccount,
                                                               ConvOfChartOfAccounts,JobProcStatusLineNo);
                       END;
                     END;
                   END;
              END;
              IF ConvOfChartOfAccounts."Source Posting Group" = '' THEN BEGIN
                IsGlobalError := TRUE;
                ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                      ConsolidationSource1.Code,ConsSession,'EDTC23',
                                                      STRSUBSTNO(Text046,GLAccount."No."),COMPANYNAME,GLBuffer,GLAccount,
                                                      ConvOfChartOfAccounts,JobProcStatusLineNo);
              END;
            END ELSE
            IF GLAccount."Ext. Source Type" <> GLAccount."Ext. Source Type"::"G/L Account" THEN BEGIN
              IF (GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::Customer) OR
                 (GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::Vendor) THEN BEGIN
                   LedgDimensionTMP.RESET;
                   LedgDimensionTMP.SETRANGE("Table ID", 17);
                   LedgDimensionTMP.SETRANGE("Entry No.", GLBuffer."Entry No.");
                   LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Counterparty Dim Code");
                   IF NOT LedgDimensionTMP.FINDSET THEN BEGIN
                    IsGlobalError := TRUE;
                     ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::
      Error
      ,
                                                          ConsolidationSource1.Code,ConsSession,'EDTC21',
                                                            STRSUBSTNO(Text044,GLAccount."No.",ConsolidationSetup.
      "Counterparty Dim Code")
      ,
                                                          COMPANYNAME,GLBuffer,GLAccount,
                                                          ConvOfChartOfAccounts,JobProcStatusLineNo);
                   END ELSE BEGIN
                     // аналитика COUNTERPARTY есть на операции, проверяем сделку и учет оп договорам.
                     IF GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::Customer THEN
                      IF NOT Customer.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                        IsGlobalError := TRUE;
                        ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                              ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,'EDTC24',
                                                              STRSUBSTNO(Text048,GLAccount."No.",
                                                              LedgDimensionTMP."Dimension Value Code"),
                                                              COMPANYNAME,GLBuffer,GLAccount,
                                                              ConvOfChartOfAccounts,JobProcStatusLineNo);
                      END ELSE BEGIN
                       LedgDimensionTMP.RESET;
                       LedgDimensionTMP.SETRANGE("Table ID", 17);
                       LedgDimensionTMP.SETRANGE("Entry No.", GLBuffer."Entry No.");
                       LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Deal Dimension Code");
                       IF NOT LedgDimensionTMP.FINDFIRST THEN BEGIN
                         IF Customer."Agreement Posting" = Customer."Agreement Posting"::Mandatory THEN BEGIN
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
      'EDTC10',
                                                                 STRSUBSTNO(Text049,GLAccount."No.",
                                                                 Customer."No."),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         END;
                       END ELSE BEGIN
                         // сущность определена, контрагент найден, аналитика deal есть на операции - > проверяем блокировку договора
                         IF CustomerAgreement.GET(Customer."No.", LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IF CustomerAgreement.Active = FALSE THEN BEGIN
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
      'EDTC11',
                                                                 STRSUBSTNO(Text050,LedgDimensionTMP."Dimension Value Code",
                                                                 Customer."No."),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);

                           END;
                         END ELSE BEGIN
                         // сущность определена, контрагент найден, аналитика deal есть на операции - > проверяем блокировку договора
                         IF CustomerAgreement.GET(Customer."No.", LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IF CustomerAgreement.Active = FALSE THEN BEGIN
                             IsGlobalError := TRUE;
                             ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                   ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                   'EDTC11',
                                                                   STRSUBSTNO(Text050,LedgDimensionTMP."Dimension Value Code",
                                                                   Customer."No."),
                                                                   COMPANYNAME,GLBuffer,GLAccount,
                                                                   ConvOfChartOfAccounts,JobProcStatusLineNo);

                           END;
                         END ELSE BEGIN
                         {
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                 'EDTC10',
                                                                 STRSUBSTNO(Text054, Customer."No.",
                                                                 LedgDimensionTMP."Dimension Value Code"),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         }
                         // проверяем наличие карточки сделки
                         IF NOT DealCard.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                 'EDTC10',
                                                                 STRSUBSTNO(Text059, LedgDimensionTMP."Dimension Value Code",
                                                                 Customer."No."),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         END;
                         END;
                         END;
                       END;
                      END;
                     IF GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::Vendor THEN
                      IF NOT Vendor.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                        //NC S1471 > PCH
                        CreateVendorBuffer(LedgDimensionTMP."Dimension Value Code");
                        //NC S1471 < PCH
                        IsGlobalError := TRUE;
                        ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                              ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                              'EDTC10',
                                                              STRSUBSTNO(Text056,GLAccount."No.", LedgDimensionTMP.
      "Dimension Value Code")
                                                              //NC S1471 > PCH
                                                              + NoVendErr
                                                              //NC S1471 < PCH
                                                              ,COMPANYNAME,GLBuffer,GLAccount,
                                                              ConvOfChartOfAccounts,JobProcStatusLineNo);
                      END ELSE BEGIN
                        LedgDimensionTMP.RESET;
                        LedgDimensionTMP.SETRANGE("Table ID", 17);
                        LedgDimensionTMP.SETRANGE("Entry No.", GLBuffer."Entry No.");
                        LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Deal Dimension Code");
                        IF NOT LedgDimensionTMP.FINDFIRST THEN BEGIN
                          IF Vendor."Agreement Posting" = Vendor."Agreement Posting"::Mandatory THEN BEGIN
                            IsGlobalError := TRUE;
                            ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                  ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                  'EDTC10',STRSUBSTNO(Text060,GLAccount."No.", Vendor."No."),
                                                                  COMPANYNAME,GLBuffer,GLAccount,
                                                                  ConvOfChartOfAccounts,JobProcStatusLineNo);
                          END;
                        END ELSE BEGIN
                         // сущность определена, контрагент найден, аналитика deal есть на операции - > проверяем блокировку договора
                         IF VendorAgreement.GET(Vendor."No.", LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IF VendorAgreement.Active = FALSE THEN BEGIN
                             IsGlobalError := TRUE;
                             ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                   ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                   'EDTC11',
                                                                   STRSUBSTNO(Text051,LedgDimensionTMP."Dimension Value Code",
                                                                   Vendor."No."),
                                                                   COMPANYNAME,GLBuffer,GLAccount,
                                                                   ConvOfChartOfAccounts,JobProcStatusLineNo);

                           END;
                         END ELSE BEGIN
                         {
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                 'EDTC10',
                                                                 STRSUBSTNO(Text055, Vendor."No.",
                                                                 LedgDimensionTMP."Dimension Value Code"),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         }
                         // проверяем наличие карточки сделки
                         IF NOT DealCard.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                           IsGlobalError := TRUE;
                           ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                                 ErrorJournal.Type::Error, ConsolidationSource1.Code,ConsSession,
                                                                 'EDTC10',
                                                                 STRSUBSTNO(Text058, LedgDimensionTMP."Dimension Value Code",
                                                                 Vendor."No."),
                                                                 COMPANYNAME,GLBuffer,GLAccount,
                                                                 ConvOfChartOfAccounts,JobProcStatusLineNo);
                         END;
                         END;
                         END;
                      END;
                   END;
              END;
              IF (GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::"Bank Account") THEN BEGIN
                   LedgDimensionTMP.RESET;
                   LedgDimensionTMP.SETRANGE("Table ID", 17);
                   LedgDimensionTMP.SETRANGE("Entry No.", GLBuffer."Entry No.");
                   LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Bank Account Dimension Code");
                   IF NOT LedgDimensionTMP.FINDSET THEN BEGIN
                    IsGlobalError := TRUE;
                    ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::
      Error,
                                                          ConsolidationSource1.Code,ConsSession,'EDTC22',
                                                     STRSUBSTNO(Text047,GLAccount."No.",ConsolidationSetup."Bank Account Dimension Code"
      ),
                                                          COMPANYNAME,GLBuffer,GLAccount,
                                                          ConvOfChartOfAccounts,JobProcStatusLineNo);
                   END ELSE BEGIN
                     IF DimMappingSelection.GET(ConsolidationSource1."Mapping Code",
                                                ConsolidationSetup."Bank Account Dimension Code") THEN BEGIN
                       IF OperationType = OperationType::Debit THEN BEGIN
                         DebitBankAcc := TRUE;
                       END ELSE BEGIN
                         CreditBankAcc := TRUE;
                       END;
                     END ELSE
                     IF NOT BankAccount.GET(LedgDimensionTMP."Dimension Value Code") THEN BEGIN
                       IsGlobalError := TRUE;
                       ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                          ErrorJournal.Type::Error,ConsolidationSource1.Code,ConsSession,'EDTC02',
                                                          STRSUBSTNO(Text052,LedgDimensionTMP."Dimension Value Code"),
                                                          COMPANYNAME,GLBuffer,GLAccount,
                                                          ConvOfChartOfAccounts,JobProcStatusLineNo);

                     END ELSE BEGIN
                       IF OperationType = OperationType::Debit THEN BEGIN
                         EntryCurrencyCode := GLBuffer."Debit Currency Code";
                       END ELSE BEGIN
                         EntryCurrencyCode := GLBuffer."Credit Currency Code";
                       END;
                       IF EntryCurrencyCode = '' THEN
                         EntryCurrencyCode := ConsolidationSource1."LCY Code";

                       IF (BankAccount."Currency Code" <> '') AND
                          (BankAccount."Currency Code" <> EntryCurrencyCode) THEN BEGIN
                         IsGlobalError := TRUE;
                         ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,
                                                               ErrorJournal.Type::Error,ConsolidationSource1.Code,ConsSession,'EDTC02',
                                                               STRSUBSTNO(Text057,BankAccount."No.", EntryCurrencyCode),
                                                               COMPANYNAME,GLBuffer,GLAccount,
                                                               ConvOfChartOfAccounts,JobProcStatusLineNo);
                       END;
                     END;
                   END;
              END;
              IF GLAccount."Source Posting Group" = '' THEN BEGIN
                IsGlobalError := TRUE;
                ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                      ConsolidationSource1.Code,ConsSession,'EDTC23',
                                                      STRSUBSTNO(Text046,GLAccount."No."),COMPANYNAME,GLBuffer,GLAccount,
                                                      ConvOfChartOfAccounts,JobProcStatusLineNo);
               END;
            END ELSE BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                    ConsolidationSource1.Code,ConsSession,'EDTC21',
                                                    STRSUBSTNO(Text045,GLAccount."No."),COMPANYNAME,GLBuffer,GLAccount,
                                                    ConvOfChartOfAccounts,JobProcStatusLineNo);
            END;
          END;
          //NC MTD02 < AIG

      END;
      //NC MDTC03 < MP

      //NC MDTC03, MDTM04< MP

      Log.StartCounter(7);
      EXIT;
      //NC MDTC04 > MP Приоритет при поиске мэппинга:
      {
      Фирма | Дебет/Кредит | Корр.Счет
        +          +            +
        +          +            -
        +          -            +
        +          -            -
        -          +            +
        -          +            -
        -          -            +
        -          -            -
      }
      //NC MDTC04 < MP
      //NC PIF010 < MP
    END;

    PROCEDURE CheckDimMapp2@1000000032(GLBuffer@1210001 : Record 50008;VAR LedgDimensionTmp@1000000010 : TEMPORARY Record 355;ConsolidationSource@1000000009 : Record 50001;ConsSession@1210000 : Integer;OperationType@1000000000 : 'Debit,Credit';SaveSourceDimValue@1000000001 : Boolean;MappingCode@1000000002 : Code[20]) IsErr : Boolean;
    VAR
      ConvDimensions@1000000008 : Record 50003;
      DimCode@1000000014 : Code[20];
      DimVal@1000000013 : Code[20];
      tmp@1210002 : Integer;
      lDim1Exist@1210007 : Boolean;
      lDim2Exist@1210006 : Boolean;
      lDim3Exist@1210005 : Boolean;
      ConsDimCode@1210004 : Code[20];
      ConsDimValue@1000000004 : Code[20];
      LedgDimension1@1210003 : Record 355;
      DimensionValue@1101495000 : Record 349;
      BankAccount@1000000003 : Record 270;
      EntryCurrencyCode@1101495001 : Code[10];
      IsNotModify@1101495002 : Boolean;
    BEGIN
      //NC PIF001 > DP
      Log.StartCounter(-8);
      IsErr := FALSE;
      DimCode := LedgDimensionTmp."Dimension Code";
      DimVal := LedgDimensionTmp."Dimension Value Code";

      IF ConsolidationSetup."Mapping Dimension Type"=ConsolidationSetup."Mapping Dimension Type"::"Combination-To-One" THEN BEGIN
        ConsDimCode :='';

        LedgDimensionTmp.RESET;
        LedgDimensionTmp.SETRANGE("Table ID", DATABASE::"G/L Entry");
        LedgDimensionTmp.SETRANGE("Entry No.", GLBuffer."Entry No.");

        ConvDimensions.RESET;
        //NC OPT > PCH
        //ConvDimensions.ASCENDING(FALSE);
        //NC OPT > PCH
        ConvDimensions.SETRANGE("Mapping Code",MappingCode);
        ConvDimensions.SETRANGE("Source Dimension Code",DimCode);
        ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
        IF ConvDimensions.FINDSET THEN
          REPEAT
            //проверяем, есть ли строка, соответствующая исключению, в измерениях в данной операции

            IF ConsDimCode='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;

              WITH LedgDimensionTmp DO BEGIN
                IF ConvDimensions."Source Dimension Code" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code");
                  lDim1Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 2" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 2");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 3" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 3");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                END;
              END;
             IF (lDim1Exist AND lDim2Exist AND lDim3Exist) THEN
             //NC MTD02 > AIG
      //       BEGIN
             //NC MTD02 < AIG
               ConsDimCode := ConvDimensions."Receiver Dimension Code";
             //NC MTD02 > AIG
      //         ConsDimValue := ConvDimensions."Receiver Dimension Value Code";
      //       END;
             //NC MTD02 < AIG
            END;
          UNTIL (ConvDimensions.NEXT = 0) OR (ConsDimCode <> '');
          IF ConsDimCode='' THEN BEGIN
            //NC MDM04 > MP
            {
            ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
            ErrDoc := GLBuffer."Document No.";
            }
            //NC MDM04 < MP
            ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
            IsErr := TRUE;
            //NC MDTC01 > MP
            IsGlobalError := TRUE;
            //NC MDTC01 < MP
            //NC MDM04 > MP
            {
            tmp :=
                CreateErrorLogEntry(ConsolidationSource.Code, ConsSession, 0, 0,
                ErrOper,GLBuffer."Document Date",DimCode,ErrDoc,ErrMessage,DimVal);
            }
            IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
            ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                       ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
            //NC MDM04 < MP
         END;
      END ELSE BEGIN
        //NCMDTM02 > MP
        {
        IF NOT ConvDimensions.GET(ConsolidationSource.Code, DimCode, DimVal) THEN BEGIN
        }
        ConvDimensions.SETCURRENTKEY("Company Name","Source Dimension Code","Source Dimension Value Code");
        ConvDimensions.SETRANGE("Mapping Code",MappingCode);
        //NC MDTA02 > MP
        ConvDimensions.SETRANGE("Company Name",COMPANYNAME);
        //NC MDTA02 < MP
        ConvDimensions.SETRANGE("Source Dimension Code",DimCode);
        ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
        IF NOT ConvDimensions.FINDFIRST THEN BEGIN
        //NCMDTM02 < MP
          //NC MDTA02 > MP
          ConvDimensions.SETRANGE("Company Name",'');
          IF NOT ConvDimensions.FINDFIRST THEN BEGIN
          //NC MDTA02 < MP
            //NC MDM04 > MP
            {
            ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
            ErrDoc := GLBuffer."Document No.";
            }
            //NC MDM04 < MP
            ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
            IsErr := TRUE;
            //NC MDTC01 > MP
            IsGlobalError := TRUE;
            //NC MDTC01 < MP
            //NC MDM04 > MP
            {
            tmp :=
              CreateErrorLogEntry(ConsolidationSource.Code, ConsSession, 0, 0,
                ErrOper,GLBuffer."Document Date",DimCode,ErrDoc,ErrMessage,DimVal);
            }
            IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
            ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                       ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
            //NC MDM04 < MP
          //NC MDTA02 > MP
          END ELSE BEGIN
            IF (ConvDimensions."Receiver Dimension Code" = '') OR (ConvDimensions."Receiver Dimension Value Code" = '') THEN BEGIN
              //NC MDM04 > MP
              {
              ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
              ErrDoc := GLBuffer."Document No.";
              }
              //NC MDM04 < MP
              ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
              IsErr := TRUE;
              //NC MDTC01 > MP
              IsGlobalError := TRUE;
              //NC MDTC01 < MP
              //NC MDM04 > MP
              {
              tmp :=
                CreateErrorLogEntry(ConsolidationSource.Code, ConsSession, 0, 0,
                  ErrOper,GLBuffer."Document Date",DimCode,ErrDoc,ErrMessage,DimVal);
              }
              IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
              ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource.Code,ConsSession,'EDTC02',
                                         ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
              //NC MDM04 < MP
            END ELSE BEGIN
              IF OperationType = OperationType::Debit THEN BEGIN
                //NC > AIG
                IF (ConsolidationSetup."Bank Account Dimension Code" = ConvDimensions."Receiver Dimension Code") AND
                   (DebitBankAcc) AND (NOT BankAccount.GET(ConvDimensions."Receiver Dimension Value Code")) THEN BEGIN
                  IsErr := TRUE;
                  IsGlobalError := TRUE;
                  IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
                  ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                     ConsolidationSource.Code,ConsSession,'EDTC02',
                                                     STRSUBSTNO(Text052,ConvDimensions."Receiver Dimension Value Code"),
                                                     COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);

                END ELSE BEGIN
                  EntryCurrencyCode := GLBuffer."Debit Currency Code";
                  IF EntryCurrencyCode = '' THEN
                    EntryCurrencyCode := ConsolidationSource."LCY Code";

                  IF (DebitBankAcc) AND
                     (BankAccount."Currency Code" <> '') AND (BankAccount."Currency Code" <> EntryCurrencyCode) THEN BEGIN
                    IsErr := TRUE;
                    IsGlobalError := TRUE;
                    ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                                       STRSUBSTNO(Text057,BankAccount."No.", GLBuffer."Debit Currency Code"),
                                                       COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
                  END;
                //NC < AIG

                  //NC NCS-1002.2 > DP
                  IsNotModify := FALSE;
                  IF TempDebitLedgEntryDim.GET(17,GLBuffer."Entry No.",ConvDimensions."Receiver Dimension Code") THEN
                   IF (TempDebitLedgEntryDim."Dimension Code"=TempDebitLedgEntryDim."Dim in Source") AND
                   (TempDebitLedgEntryDim."Dimension Value Code"=TempDebitLedgEntryDim."Dim Value Code in Source") THEN
                      IsNotModify := TRUE;
                  //NC NCS-1002.2 < DP

                  TempDebitLedgEntryDim.GET(17,LedgDimensionTmp."Entry No.",LedgDimensionTmp."Dimension Code");
                  //NC MDTC09 > MP
                  IF NOT SaveSourceDimValue THEN
                  //NC MDTC09 < MP
                  TempDebitLedgEntryDim.DELETE;
                  TempDebitLedgEntryDim.INIT;
                  TempDebitLedgEntryDim."Table ID" := 17;
                  TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                  TempDebitLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
                  TempDebitLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
                  TempDebitLedgEntryDim."Dim in Source" := DimCode;
                  TempDebitLedgEntryDim."Dim Value Code in Source" := DimVal;
                  IF NOT TempDebitLedgEntryDim.INSERT THEN

                    //NC NCS-1002.2 > DP
                    IF NOT IsNotModify THEN
                    //NC NCS-1002.2 < DP

                    TempDebitLedgEntryDim.MODIFY;
                //NC > AIG
                END;
                //NC < AIG
              END ELSE BEGIN
                //NC > AIG
                IF (ConsolidationSetup."Bank Account Dimension Code" = ConvDimensions."Receiver Dimension Code") AND
                   (CreditBankAcc) AND (NOT BankAccount.GET(ConvDimensions."Receiver Dimension Value Code")) THEN BEGIN
                  IsErr := TRUE;
                  IsGlobalError := TRUE;
                  IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
                  ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                     ConsolidationSource.Code,ConsSession,'EDTC02',
                                                     STRSUBSTNO(Text052,ConvDimensions."Receiver Dimension Value Code"),
                                                     COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);

                END ELSE BEGIN
                  EntryCurrencyCode := GLBuffer."Credit Currency Code";
                  IF EntryCurrencyCode = '' THEN
                    EntryCurrencyCode := ConsolidationSource."LCY Code";

                  IF (CreditBankAcc) AND
                     (BankAccount."Currency Code" <> '') AND (BankAccount."Currency Code" <> EntryCurrencyCode) THEN BEGIN
                    IsErr := TRUE;
                    IsGlobalError := TRUE;
                    ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                                       STRSUBSTNO(Text057,BankAccount."No.", GLBuffer."Credit Currency Code"),
                                                       COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
                  END;
                //NC < AIG

                  //NC NCS-1002.2 > DP
                  IsNotModify := FALSE;
                  IF TempCreditLedgEntryDim.GET(17,GLBuffer."Entry No.",ConvDimensions."Receiver Dimension Code") THEN
                   IF (TempCreditLedgEntryDim."Dimension Code"=TempCreditLedgEntryDim."Dim in Source") AND
                   (TempCreditLedgEntryDim."Dimension Value Code"=TempCreditLedgEntryDim."Dim Value Code in Source") THEN
                      IsNotModify := TRUE;
                  //NC NCS-1002.2 < DP


                  TempCreditLedgEntryDim.GET(17,LedgDimensionTmp."Entry No.",LedgDimensionTmp."Dimension Code");
                  //NC MDTC09 > MP
                  IF NOT SaveSourceDimValue THEN
                  //NC MDTC09 < MP
                  TempCreditLedgEntryDim.DELETE;
                  TempCreditLedgEntryDim.INIT;
                  TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                  TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                  TempCreditLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
                  TempCreditLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
                  TempCreditLedgEntryDim."Dim in Source" := DimCode;
                  TempCreditLedgEntryDim."Dim Value Code in Source" := DimVal;
                  IF NOT TempCreditLedgEntryDim.INSERT THEN

                    //NC NCS-1002.2 > DP
                    IF NOT IsNotModify THEN
                    //NC NCS-1002.2 < DP

                    TempCreditLedgEntryDim.MODIFY;
                //NC > AIG
                END;
                //NC < AIG
              END;
            END;
          END;
          //NC MDTA02 < MP
        END ELSE BEGIN
          //NC MDTC03 > MP
          IF (ConvDimensions."Receiver Dimension Code" = '') OR (ConvDimensions."Receiver Dimension Value Code" = '') THEN BEGIN
            //NC MDM04 > MP
            {
            ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
            ErrDoc := GLBuffer."Document No.";
            }
            //NC MDM04 < MP
            ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
            IsErr := TRUE;
            //NC MDTC01 > MP
            IsGlobalError := TRUE;
            //NC MDTC01 < MP
            //NC MDM04 > MP
            {
            tmp :=
              CreateErrorLogEntry(ConsolidationSource.Code, ConsSession, 0, 0,
                ErrOper,GLBuffer."Document Date",DimCode,ErrDoc,ErrMessage,DimVal);
            }
            IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
            ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                       ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
            //NC MDM04 < MP
          END ELSE BEGIN
            IF OperationType = OperationType::Debit THEN BEGIN
            //NC > AIG
              IF (ConsolidationSetup."Bank Account Dimension Code" = ConvDimensions."Receiver Dimension Code") AND
                 (DebitBankAcc) AND (NOT BankAccount.GET(ConvDimensions."Receiver Dimension Value Code")) THEN BEGIN
                IsErr := TRUE;
                IsGlobalError := TRUE;
                IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
                ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsolidationSource.Code,ConsSession,'EDTC02',
                                                   STRSUBSTNO(Text052,ConvDimensions."Receiver Dimension Value Code"),
                                                   COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
              END ELSE BEGIN
                  EntryCurrencyCode := GLBuffer."Debit Currency Code";
                  IF EntryCurrencyCode = '' THEN
                    EntryCurrencyCode := ConsolidationSource."LCY Code";

                  IF (DebitBankAcc) AND
                     (BankAccount."Currency Code" <> '') AND (BankAccount."Currency Code" <> EntryCurrencyCode) THEN BEGIN
                    IsErr := TRUE;
                    IsGlobalError := TRUE;
                    ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                                       STRSUBSTNO(Text057,BankAccount."No.", GLBuffer."Debit Currency Code"),
                                                       COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
                  END;
            //NC < AIG

                //NC NCS-1002.2 > DP
                IsNotModify := FALSE;
                IF TempDebitLedgEntryDim.GET(17,GLBuffer."Entry No.",ConvDimensions."Receiver Dimension Code") THEN
                  IF (TempDebitLedgEntryDim."Dimension Code"=TempDebitLedgEntryDim."Dim in Source") AND
                    (TempDebitLedgEntryDim."Dimension Value Code"=TempDebitLedgEntryDim."Dim Value Code in Source") THEN
                    IsNotModify := TRUE;
                //NC NCS-1002.2 < DP


                TempDebitLedgEntryDim.GET(17,LedgDimensionTmp."Entry No.",LedgDimensionTmp."Dimension Code");
                //NC MDTC09 > MP
                IF NOT SaveSourceDimValue THEN
                //NC MDTC09 < MP
                TempDebitLedgEntryDim.DELETE;
                TempDebitLedgEntryDim.INIT;
                TempDebitLedgEntryDim."Table ID" := 17;
                TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                TempDebitLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
                TempDebitLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
                TempDebitLedgEntryDim."Dim in Source" := DimCode;
                TempDebitLedgEntryDim."Dim Value Code in Source" := DimVal;
                IF NOT TempDebitLedgEntryDim.INSERT THEN

                  //NC NCS-1002.2 > DP
                  IF NOT IsNotModify THEN
                  //NC NCS-1002.2 < DP

                  TempDebitLedgEntryDim.MODIFY;
            //NC > AIG
              END;
            //NC < AIG
            END ELSE BEGIN
            //NC > AIG
            IF (ConsolidationSetup."Bank Account Dimension Code" = ConvDimensions."Receiver Dimension Code") AND
               (CreditBankAcc) AND (NOT BankAccount.GET(ConvDimensions."Receiver Dimension Value Code")) THEN BEGIN
              IsErr := TRUE;
              IsGlobalError := TRUE;
              IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
              ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                 ConsolidationSource.Code,ConsSession,'EDTC02',
                                                 STRSUBSTNO(Text052,ConvDimensions."Receiver Dimension Value Code"),
                                                 COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
            END ELSE BEGIN
                  EntryCurrencyCode := GLBuffer."Credit Currency Code";
                  IF EntryCurrencyCode = '' THEN
                    EntryCurrencyCode := ConsolidationSource."LCY Code";

                  IF (CreditBankAcc) AND
                     (BankAccount."Currency Code" <> '') AND (BankAccount."Currency Code" <> EntryCurrencyCode) THEN BEGIN
                    IsErr := TRUE;
                    IsGlobalError := TRUE;
                    ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                       ConsolidationSource.Code,ConsSession,'EDTC02',
                                                       STRSUBSTNO(Text057,BankAccount."No.", GLBuffer."Credit Currency Code"),
                                                       COMPANYNAME,GLBuffer,DimensionValue,JobProcStatusLineNo);
                  END;
            //NC < AIG

              //NC NCS-1002.2 > DP
              IsNotModify := FALSE;
              IF TempCreditLedgEntryDim.GET(17,GLBuffer."Entry No.",ConvDimensions."Receiver Dimension Code") THEN
                IF (TempCreditLedgEntryDim."Dimension Code"=TempCreditLedgEntryDim."Dim in Source") AND
                 (TempCreditLedgEntryDim."Dimension Value Code"=TempCreditLedgEntryDim."Dim Value Code in Source") THEN
                 IsNotModify := TRUE;
              //NC NCS-1002.2 < DP

              TempCreditLedgEntryDim.GET(17,LedgDimensionTmp."Entry No.",LedgDimensionTmp."Dimension Code");
              //NC MDTC09 > MP
              IF NOT SaveSourceDimValue THEN
              //NC MDTC09 < MP
              TempCreditLedgEntryDim.DELETE;
              TempCreditLedgEntryDim.INIT;
              TempCreditLedgEntryDim."Table ID" := 17;
              TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
              TempCreditLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
              TempCreditLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
              TempCreditLedgEntryDim."Dim in Source" := DimCode;
              TempCreditLedgEntryDim."Dim Value Code in Source" := DimVal;
              IF NOT TempCreditLedgEntryDim.INSERT THEN

                //NC NCS-1002.2 > DP
                IF NOT IsNotModify THEN
                //NC NCS-1002.2 < DP

                TempCreditLedgEntryDim.MODIFY;
            END;
            //NC > AIG
            END;
            //NC < AIG
          END;
          //NC MDTC03 < MP
        END;
      END;
      Log.StartCounter(8);
      //NC PIF001 < DP
      //NC MDTM02.3 > MP
      {
      //NC ??? > PCH
      LedgDimensionTmp."Table ID" := 17;
      LedgDimensionTmp."Entry No." := GLBuffer."Entry No.";
      LedgDimensionTmp."Dimension Code" := DimCode;
      LedgDimensionTmp."Dimension Value Code" := DimVal;
      //NC ??? < PCH
      }
      //NC MDTM02.3 < MP
    END;

    PROCEDURE CheckErrorsConsFromBuffer2@1000000016(GLBuffer@1210000 : Record 50008;VAR TMPDimCheck@1210001 : TEMPORARY Record 348;ConsRegister@1210003 : Record 50005;ConsSource@1210004 : Record 50001;MappingCode@1000000002 : Code[20]);
    VAR
      lConsDataBuffer@1000000000 : Record 50008;
      DimMappingSel@1000000001 : Record 50031;
      ReceiverGLAcc@1101495000 : Code[20];
      SourceType@1101495002 : 'G/L Account,Customer,Vendor,Bank Account';
      SourcePostingGroup@1101495001 : Code[10];
      IsDtAccBal@1101495004 : Boolean;
      IsCtAccBal@1101495003 : Boolean;
    BEGIN
      //NC PIF010 > MP
      CreateDebitDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",TRUE,MappingCode);
      CreateCreditDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",TRUE,MappingCode);

      IF NOT CheckExceptionCorrespondense2(GLBuffer,ConsSource,MappingCode) THEN BEGIN
        CheckGLMapp2(GLBuffer,TempDebitLedgEntryDim,ConsSource,ConsRegister."No.",
                      GLBuffer."Document No.",1,GLBuffer."Debit G/L Account No.",GLBuffer."Credit G/L Account No.",MappingCode,
                      //NC APCOC-115 > AIG
                      IsDtAccBal,
                      //NC APCOC-115 < AIG
                      TRUE,
                      ReceiverGLAcc,SourceType,SourcePostingGroup); //трансформация это поле не использует
        CheckGLMapp2(GLBuffer,TempCreditLedgEntryDim,ConsSource,ConsRegister."No.",
                      GLBuffer."Document No.",2,GLBuffer."Debit G/L Account No.",GLBuffer."Credit G/L Account No.",MappingCode,
                      //NC APCOC-115 > AIG
                      IsCtAccBal,
                      //NC APCOC-115 < AIG
                      TRUE,
                      ReceiverGLAcc,SourceType,SourcePostingGroup); //трансформация это поле не использует
      END;


      IF ConsSource."Consolidate Dimensions" AND (NOT TMPGLEntryException.GET(GLBuffer."Entry No."))
      THEN BEGIN
        //NC MDTM02.3 > MP
        {
        TempDebitLedgEntryDim.RESET;
        TempDebitLedgEntryDim.SETRANGE("Table ID", 17);
        TempDebitLedgEntryDim.SETRANGE("Entry No.", GLBuffer."Entry No.");

        IF TempDebitLedgEntryDim.FINDSET(TRUE,TRUE) THEN
          REPEAT
            //NC MDTM02.2 > PCH
            //IF TMPDimCheck.GET(TempDebitLedgEntryDim."Dimension Code") THEN
            //  CheckDimMapp2(GLBuffer,TempDebitLedgEntryDim,ConsSource,ConsRegister."No.",0,TMPDimCheck."Save when Mapping");
            IF DimMappingSel.GET(MappingCode,TempDebitLedgEntryDim."Dimension Code") THEN
              CheckDimMapp2(GLBuffer,TempDebitLedgEntryDim,ConsSource,ConsRegister."No.",0,DimMappingSel."Save when Mapping");
            //NC MDTM02.2 < PCH
          UNTIL TempDebitLedgEntryDim.NEXT = 0;
        }
        DimMappingSel.SETRANGE("Mapping Code",MappingCode);
        IF DimMappingSel.FINDSET THEN
          REPEAT
            IF TempDebitLedgEntryDim.GET(17,GLBuffer."Entry No.",DimMappingSel."Dimension Code") AND
               (TempDebitLedgEntryDim."Dim in Source" = '')
            THEN
              CheckDimMapp2(GLBuffer,TempDebitLedgEntryDim,ConsSource,ConsRegister."No.",0,DimMappingSel."Save when Mapping",MappingCode
      );
            IF TempCreditLedgEntryDim.GET(17,GLBuffer."Entry No.",DimMappingSel."Dimension Code") AND
               (TempCreditLedgEntryDim."Dim in Source" = '')
            THEN
              CheckDimMapp2(GLBuffer,TempCreditLedgEntryDim,ConsSource,ConsRegister."No.",1,DimMappingSel."Save when Mapping",
                            MappingCode);
          UNTIL DimMappingSel.NEXT = 0;
        //NC MDTM02.3 < MP

        //NC MDTM02.3 > MP
        {
        TempCreditLedgEntryDim.RESET;
        TempCreditLedgEntryDim.SETRANGE("Table ID", 17);
        TempCreditLedgEntryDim.SETRANGE("Entry No.", GLBuffer."Entry No.");
        IF TempCreditLedgEntryDim.FINDSET(TRUE,TRUE) THEN
          REPEAT
            //NC MDTM02.2 > PCH
            //IF TMPDimCheck.GET(TempCreditLedgEntryDim."Dimension Code") THEN
            //  CheckDimMapp2(GLBuffer,TempCreditLedgEntryDim,ConsSource,ConsRegister."No.",1,TMPDimCheck."Save when Mapping");
            IF DimMappingSel.GET(MappingCode,TempCreditLedgEntryDim."Dimension Code") THEN
              CheckDimMapp2(GLBuffer,TempCreditLedgEntryDim,ConsSource,ConsRegister."No.",1,DimMappingSel."Save when Mapping");
            //NC MDTM02.2 < PCH
          UNTIL TempCreditLedgEntryDim.NEXT = 0;
        }
        //NC MDTM02.3 < MP
      END;
      //NC PIF010 < MP
    END;

    PROCEDURE CreateDebitDimBuffer2@1000000020(ConsBuffer@1210000 : Record 50008;VAR LedgerEntryDimTmp@1210001 : TEMPORARY Record 355;ConsRegister@1210003 : Record 50005;EntryNo@1000000000 : Integer;UseCheck@1000000001 : Boolean;MappingCode@1000000002 : Code[20]) nErr : Integer;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      //NC PIF001 > DP
      IF (ConsBuffer."Dimension 1 Code" <> '') AND
         (ConsBuffer."Debit Dimension 1 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 1 Code",ConsBuffer."Debit Dimension 1 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 2 Code" <> '') AND
         (ConsBuffer."Debit Dimension 2 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 2 Code",ConsBuffer."Debit Dimension 2 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 3 Code" <> '') AND
         (ConsBuffer."Debit Dimension 3 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 3 Code",ConsBuffer."Debit Dimension 3 Value Code",
                       '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 4 Code" <> '') AND
         (ConsBuffer."Debit Dimension 4 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 4 Code",ConsBuffer."Debit Dimension 4 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 5 Code" <> '') AND
         (ConsBuffer."Debit Dimension 5 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 5 Code",ConsBuffer."Debit Dimension 5 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 6 Code" <> '') AND                  //Контрагент
         (ConsBuffer."Debit Dimension 6 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 6 Code",ConsBuffer."Debit Dimension 6 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 7 Code" <> '') AND
         (ConsBuffer."Debit Dimension 7 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 7 Code",ConsBuffer."Debit Dimension 7 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 8 Code" <> '') AND
         (ConsBuffer."Debit Dimension 8 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 8 Code",ConsBuffer."Debit Dimension 8 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 9 Code" <> '') AND                 //Банки
         (ConsBuffer."Debit Dimension 9 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 9 Code",ConsBuffer."Debit Dimension 9 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 10 Code" <> '') AND
         (ConsBuffer."Debit Dimension 10 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 10 Code",ConsBuffer."Debit Dimension 10 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 11 Code" <> '') AND
         (ConsBuffer."Debit Dimension 11 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 11 Code",ConsBuffer."Debit Dimension 11 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 12 Code" <> '') AND
         (ConsBuffer."Debit Dimension 12 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 12 Code",ConsBuffer."Debit Dimension 12 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 13 Code" <> '') AND
         (ConsBuffer."Debit Dimension 13 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 13 Code",ConsBuffer."Debit Dimension 13 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 14 Code" <> '') AND
         (ConsBuffer."Debit Dimension 14 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 14 Code",ConsBuffer."Debit Dimension 14 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 15 Code" <> '') AND
         (ConsBuffer."Debit Dimension 15 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 15 Code",ConsBuffer."Debit Dimension 15 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 16 Code" <> '') AND
         (ConsBuffer."Debit Dimension 16 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 16 Code",ConsBuffer."Debit Dimension 16 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 17 Code" <> '') AND
         (ConsBuffer."Debit Dimension 17 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 17 Code",ConsBuffer."Debit Dimension 17 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      //NC MDB01 > MP
      IF (ConsBuffer."Dimension 18 Code" <> '') AND
         (ConsBuffer."Debit Dimension 18 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 18 Code",ConsBuffer."Debit Dimension 18 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 19 Code" <> '') AND
         (ConsBuffer."Debit Dimension 19 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 19 Code",ConsBuffer."Debit Dimension 19 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 20 Code" <> '') AND
         (ConsBuffer."Debit Dimension 20 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 20 Code",ConsBuffer."Debit Dimension 20 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      {
      IF ConsolidationSetup."Structure Unit Dimension Code" <> '' THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsolidationSetup."Structure Unit Dimension Code", ConsBuffer."Structure Unit", '',
                        ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",ConsRegister."Cons. Source Code");
      }
      //NC MDB01 < MP
      //NC PIF001 < DP
    END;

    PROCEDURE CreateCreditDimBuffer2@1000000017(ConsBuffer@1210001 : Record 50008;VAR LedgerEntryDimTmp@1210000 : TEMPORARY Record 355;ConsRegister@1210003 : Record 50005;EntryNo@1000000000 : Integer;UseCheck@1000000001 : Boolean;MappingCode@1000000002 : Code[20]) nErr : Integer;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      //NC PIF001 > DP
      IF (ConsBuffer."Dimension 1 Code" <> '') AND
         (ConsBuffer."Credit Dimension 1 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 1 Code",ConsBuffer."Credit Dimension 1 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 2 Code" <> '') AND
         (ConsBuffer."Credit Dimension 2 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 2 Code",ConsBuffer."Credit Dimension 2 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 3 Code" <> '') AND
         (ConsBuffer."Credit Dimension 3 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 3 Code",ConsBuffer."Credit Dimension 3 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 4 Code" <> '') AND
         (ConsBuffer."Credit Dimension 4 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 4 Code",ConsBuffer."Credit Dimension 4 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 5 Code" <> '') AND
         (ConsBuffer."Credit Dimension 5 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 5 Code",ConsBuffer."Credit Dimension 5 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 6 Code" <> '') AND      //Контрагент
         (ConsBuffer."Credit Dimension 6 Value Code" <> '')
       THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 6 Code",ConsBuffer."Credit Dimension 6 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 7 Code" <> '') AND
         (ConsBuffer."Credit Dimension 7 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 7 Code",ConsBuffer."Credit Dimension 7 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 8 Code" <> '') AND
         (ConsBuffer."Credit Dimension 8 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 8 Code",ConsBuffer."Credit Dimension 8 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 9 Code" <> '') AND         //Банки
         (ConsBuffer."Credit Dimension 9 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 9 Code",ConsBuffer."Credit Dimension 9 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 10 Code" <> '') AND
         (ConsBuffer."Credit Dimension 10 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 10 Code",ConsBuffer."Credit Dimension 10 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 11 Code" <> '') AND
         (ConsBuffer."Credit Dimension 11 Value Code" <> '')

      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 11 Code",ConsBuffer."Credit Dimension 11 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 12 Code" <> '') AND
         (ConsBuffer."Credit Dimension 12 Value Code" <> '')

      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 12 Code",ConsBuffer."Credit Dimension 12 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 13 Code" <> '') AND
         (ConsBuffer."Credit Dimension 13 Value Code" <> '')

      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 13 Code",ConsBuffer."Credit Dimension 13 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 14 Code" <> '') AND
         (ConsBuffer."Credit Dimension 14 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 14 Code",ConsBuffer."Credit Dimension 14 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 15 Code" <> '') AND
         (ConsBuffer."Credit Dimension 15 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 15 Code",ConsBuffer."Credit Dimension 15 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 16 Code" <> '') AND
         (ConsBuffer."Credit Dimension 16 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 16 Code",ConsBuffer."Credit Dimension 16 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 17 Code" <> '') AND
         (ConsBuffer."Credit Dimension 17 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 17 Code",ConsBuffer."Credit Dimension 17 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      //NC MDB01 > MP
      IF (ConsBuffer."Dimension 18 Code" <> '') AND
         (ConsBuffer."Credit Dimension 18 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 18 Code",ConsBuffer."Credit Dimension 18 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 19 Code" <> '') AND
         (ConsBuffer."Credit Dimension 19 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 19 Code",ConsBuffer."Credit Dimension 19 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 20 Code" <> '') AND
         (ConsBuffer."Credit Dimension 20 Value Code" <> '')
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 20 Code",ConsBuffer."Credit Dimension 20 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      {
      IF ConsolidationSetup."Structure Unit Dimension Code" <> '' THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsolidationSetup."Structure Unit Dimension Code", ConsBuffer."Structure Unit", '',
                        ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",ConsRegister."Cons. Source Code");
      }
      //NC MDB01 < MP
      //NC PIF010 < MP
    END;

    PROCEDURE InsertFinInstr@1000000015(FI@1000000000 : Code[20]);
    VAR
      DefaultDimension@1000000001 : Record 352;
      DefaultDimension1@1000000002 : Record 352;
      FIrec@1000000004 : Record 50021;
    BEGIN
      FIrec."No." := FI;
      IF FIrec.INSERT THEN;
    END;

    PROCEDURE "NCF TROIKA>"@1000000025();
    BEGIN
    END;

    PROCEDURE CheckErrorsConsFromBuffer3@1000000023(VAR GLBuffer@1210000 : Record 50008;VAR TMPDimCheck@1210001 : TEMPORARY Record 348;ConsRegister@1210003 : Record 50005;ConsSource@1210004 : Record 50001;UseCoAMappingMask@1000000002 : Boolean;NoOfSymbolsInMask@1000000003 : Integer;MappingCode@1000000007 : Code[20]) : Boolean;
    VAR
      lConsDataBuffer@1000000000 : Record 50008;
      IsExceptCorr@1000000001 : Boolean;
      DtExtAccCode@1000000004 : Code[20];
      CtExtAccCode@1000000005 : Code[20];
      DimMappingSel@1000000006 : Record 50031;
      ReceiverGLAcc@1101495000 : Code[20];
      SourceType@1101495002 : 'G/L Account,Customer,Vendor,Bank Account';
      SourcePostingGroup@1101495001 : Code[10];
      IsDtBalanceAcc@1101495004 : Boolean;
      IsCtBalanceAcc@1101495003 : Boolean;
      OldGLBuffer@1101495005 : Record 50008;
    BEGIN
      //NC MDTC01 > MP
      //NC MDR01 > MP
      IF GLBuffer.Removed THEN
        EXIT(FALSE);
      //NC MDR01 < MP
      IsGlobalError := FALSE;
      DTMappLineNo := 0;
      CTMappLineNo := 0;
      //NC MTD02 > AIG
      DebitBankAcc := FALSE;
      CreditBankAcc := FALSE;
      //NC MTD02 < AIG


      CreateDebitDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",TRUE,MappingCode);
      CreateCreditDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",TRUE,MappingCode);

      //NC MDTC01 > MP 13.12.09
      IsExceptCorr := TRUE;
      //NC MDTC01 < MP 13.12.09
      IF NOT CheckExceptionCorrespondense3(GLBuffer,ConsSource,UseCoAMappingMask,NoOfSymbolsInMask,DtExtAccCode,CtExtAccCode,MappingCode
      )
      THEN BEGIN
        //NC MDTC01 > MP 13.12.09
        IsExceptCorr := FALSE;
        //NC MDTC01 < MP 13.12.09
        //NC MTD06 > AIG
        IF NOT OffsetExceptionsDT THEN
        //NC MTD06 < AIG
        CheckGLMapp2(GLBuffer,TempDebitLedgEntryDim,ConsSource,ConsRegister."No.",
                      GLBuffer."Document No.",1,DtExtAccCode,CtExtAccCode,MappingCode,
                      //NC APCOC-115 > AIG
                      IsDtBalanceAcc,
                      //NC APCOC-115 < AIG
                      TRUE,ReceiverGLAcc,SourceType,SourcePostingGroup)//;
        //NC MTD06 > AIG
        ELSE
          //NC APCOC-115.1 > DP
          BEGIN
          //NC APCOC-115.1 < DP

          DTMappLineNo := 2147483647;
        //NC MTD06 < AIG

          //NC APCOC-115.1 > DP
            IsDtBalanceAcc := TRUE;
          END;
          //NC APCOC-115.1 < DP

        //NC MTD06 > AIG
        IF NOT OffsetExceptionsCT THEN
        //NC MTD06 < AIG
        CheckGLMapp2(GLBuffer,TempCreditLedgEntryDim,ConsSource,ConsRegister."No.",
                      GLBuffer."Document No.",2,DtExtAccCode,CtExtAccCode,MappingCode,
                      //NC APCOC-115 > AIG
                      IsCtBalanceAcc,
                      //NC APCOC-115 < AIG
                      TRUE,ReceiverGLAcc,SourceType,SourcePostingGroup)//;
        //NC MTD06 > AIG
        ELSE

          //NC APCOC-115.1 > DP
          BEGIN
          //NC APCOC-115.1 < DP

          CTMappLineNo := 2147483647;

          //NC APCOC-115.1 > DP
            IsCtBalanceAcc := TRUE;
          END;
          //NC APCOC-115.1 < DP

        //NC MTD06 < AIG

      END;


      //NC >> DP
      {
      IF MovingDataSetup."Do Not Copy Dimensions Dt Ct" AND (OffsetExceptionsDT OR OffsetExceptionsCT)  THEN BEGIN
        CreateCreditDimBuffer3(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
        CreateDebitDimBuffer3(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
        IF (NOT IsGlobalError) AND (DTMappLineNo <> 0) AND (CTMappLineNo <> 0) THEN BEGIN
          IF NOT OffsetExceptionsDT THEN
            UpdateLedgEntryDim3(TempDebitLedgEntryDim,GLBuffer."Entry No.",ConsSource,CTMappLineNo,MappingCode);
          IF NOT OffsetExceptionsCT THEN
            UpdateLedgEntryDim3(TempCreditLedgEntryDim,GLBuffer."Entry No.",ConsSource,DTMappLineNo,MappingCode);
        END;
      END ELSE BEGIN
      }
      //NC << DP

      //NCMDTC03 > MP
      //NC MTD06 > AIG
      {
      CreateCreditDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
      CreateDebitDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
      IF (NOT IsGlobalError) AND (DTMappLineNo <> 0) AND (CTMappLineNo <> 0) THEN BEGIN
        UpdateLedgEntryDim(TempDebitLedgEntryDim,GLBuffer."Entry No.",ConsSource,CTMappLineNo,MappingCode);
        UpdateLedgEntryDim(TempCreditLedgEntryDim,GLBuffer."Entry No.",ConsSource,DTMappLineNo,MappingCode);
      END;
      }
      //NC APCOC-115 > AIG
      {
      CreateCreditDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
      CreateDebitDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
      }
      IF NOT MovingDataSetup."Do Not Copy Dimensions Dt Ct" THEN BEGIN
        CreateCreditDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
        CreateDebitDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
      END ELSE BEGIN
        IF IsDtBalanceAcc AND IsCtBalanceAcc THEN BEGIN
          CreateCreditDimBuffer3(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
          CreateDebitDimBuffer3(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
        END ELSE BEGIN
          CreateCreditDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
          CreateDebitDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
        END;
      END;
      //NC APCOC-115 < AIG
      IF (NOT IsGlobalError) AND (DTMappLineNo <> 0) AND (NOT OffsetExceptionsDT) THEN BEGIN
        UpdateLedgEntryDim(TempDebitLedgEntryDim,GLBuffer."Entry No.",ConsSource,DTMappLineNo,MappingCode);
      END;

      //NC APCOC-115 > AIG
      {
      CreateCreditDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
      CreateDebitDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
      }
      IF NOT MovingDataSetup."Do Not Copy Dimensions Dt Ct" THEN BEGIN
        CreateCreditDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
        CreateDebitDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
      END ELSE BEGIN
        IF IsDtBalanceAcc AND IsCtBalanceAcc THEN BEGIN
          CreateCreditDimBuffer3(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
          CreateDebitDimBuffer3(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
        END ELSE BEGIN
          CreateCreditDimBuffer2(GLBuffer,TempDebitLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
          CreateDebitDimBuffer2(GLBuffer,TempCreditLedgEntryDim,ConsRegister,GLBuffer."Entry No.",FALSE,MappingCode);
        END;
      END;

      //NC APCOC-115 < AIG
      IF (NOT IsGlobalError) AND (CTMappLineNo <> 0) AND (NOT OffsetExceptionsCT) THEN BEGIN
        UpdateLedgEntryDim(TempCreditLedgEntryDim,GLBuffer."Entry No.",ConsSource,CTMappLineNo,MappingCode);
      END;

      //NC MTD06 < AIG
      //NCMDTC03 < MP

      //NC >> DP
      {
      END;
      }
      //NC << DP

      IF ConsSource."Consolidate Dimensions" AND (NOT TMPGLEntryException.GET(GLBuffer."Entry No."))
      THEN BEGIN
        //NC MDTM02.3 > MP
        {
        TempDebitLedgEntryDim.RESET;
        TempDebitLedgEntryDim.SETRANGE("Table ID", 17);
        TempDebitLedgEntryDim.SETRANGE("Entry No.", GLBuffer."Entry No.");

        IF TempDebitLedgEntryDim.FINDSET(TRUE,TRUE) THEN
          REPEAT
            //NC MDTM02.2 > PCH
            //IF TMPDimCheck.GET(TempDebitLedgEntryDim."Dimension Code") THEN
            //  CheckDimMapp2(GLBuffer,TempDebitLedgEntryDim,ConsSource,ConsRegister."No.",0,TMPDimCheck."Save when Mapping");
            IF DimMappingSel.GET(MappingCode,TempDebitLedgEntryDim."Dimension Code") THEN
              CheckDimMapp2(GLBuffer,TempDebitLedgEntryDim,ConsSource,ConsRegister."No.",0,DimMappingSel."Save when Mapping");
            //NC MDTM02.2 < PCH
          UNTIL TempDebitLedgEntryDim.NEXT = 0;

        TempCreditLedgEntryDim.RESET;
        TempCreditLedgEntryDim.SETRANGE("Table ID", 17);
        TempCreditLedgEntryDim.SETRANGE("Entry No.", GLBuffer."Entry No.");
        IF TempCreditLedgEntryDim.FINDSET(TRUE,TRUE) THEN
          REPEAT
            //NC MDTM02.2 > PCH
            //IF TMPDimCheck.GET(TempCreditLedgEntryDim."Dimension Code") THEN
            //  CheckDimMapp2(GLBuffer,TempCreditLedgEntryDim,ConsSource,ConsRegister."No.",1,TMPDimCheck."Save when Mapping");
            IF DimMappingSel.GET(MappingCode,TempCreditLedgEntryDim."Dimension Code") THEN
              CheckDimMapp2(GLBuffer,TempCreditLedgEntryDim,ConsSource,ConsRegister."No.",1,DimMappingSel."Save when Mapping");
            //NC MDTM02.2 < PCH
          UNTIL TempCreditLedgEntryDim.NEXT = 0;
         }
         DimMappingSel.SETRANGE("Mapping Code",MappingCode);
         IF DimMappingSel.FINDSET THEN
           REPEAT
             IF TempDebitLedgEntryDim.GET(17,GLBuffer."Entry No.",DimMappingSel."Dimension Code") AND
                (TempDebitLedgEntryDim."Dim in Source" = '')
             THEN
               CheckDimMapp2(GLBuffer,TempDebitLedgEntryDim,ConsSource,ConsRegister."No.",0,DimMappingSel."Save when Mapping",
                             MappingCode);
             IF TempCreditLedgEntryDim.GET(17,GLBuffer."Entry No.",DimMappingSel."Dimension Code") AND
                (TempCreditLedgEntryDim."Dim in Source" = '')
             THEN
               CheckDimMapp2(GLBuffer,TempCreditLedgEntryDim,ConsSource,ConsRegister."No.",1,DimMappingSel."Save when Mapping",
                             MappingCode);
           UNTIL DimMappingSel.NEXT = 0;
         //NC MDTM02.3 < MP
      END;
      //NC MDTC01 > MP 13.12.09
      IF NOT IsExceptCorr THEN BEGIN
      //NC MDTC01 < MP 13.12.09
        //NC MDTC03 > MP
        CheckDefaultDimensions(ConsSource,GLBuffer,ConsRegister."No.",MappingCode);
        //NC MDTC03 < MP
        //NC MDTC04 > MP
        CheckSameCodeDimensions(ConsSource,GLBuffer,ConsRegister."No.",MappingCode);
        //NC MDTC04 < MP
        //NC MDTC07 > MP
        CheckRestrictedDimensions(ConsSource,GLBuffer,ConsRegister."No.",MappingCode);
        //NC MDTC07 < MP
        //NC MDTM02.1 > MP //Снимаем эту проверку по результатам статуса 11.02.2010
        {
        CheckGLAccountTypes(ConsSource,GLBuffer,ConsRegister."No."); //Снимаем эту проверку по результатам статуса 11.02.2010
        }
        //NC MDTM02.1 < MP

        //NC MIO-34 > DP
        CheckRealDimensions(ConsSource,GLBuffer,ConsRegister."No.",MappingCode);
        //NC MIO-34 < DP

      //NC MDTC01 > MP 13.12.09
      END;
      //NC MDTC01 < MP 13.12.09





      //NC NCS-720.3 > DP
      //Сохраняем параметры буферной таблицы
      OldGLBuffer :=GLBuffer;
      //NC NCS-720.3 < DP

      //NC NCS-720.2 > DP
      //Передаем по var GLBuffer
      CheckFICurrency(GLBuffer, ConsSource, ConsRegister."No.", MappingCode, 0);
      CheckFICurrency(GLBuffer, ConsSource, ConsRegister."No.", MappingCode, 1);
      //NC NCS-720 < DP

      //NC MDTC08 > MP
      CheckCurrency(GLBuffer,ConsSource,ConsRegister."No.");
      //NC MDTC08 < MP

      //NC NCS-720.2 > DP
      //Проверку курсов валют осуществляем 1 раз
      {
      //NC NCS-720 > DP
      CheckFICurrency(GLBuffer, ConsSource, ConsRegister, MappingCode, 0);
      CheckFICurrency(GLBuffer, ConsSource, ConsRegister, MappingCode, 1);
      //NC NCS-720 < DP
      }
      //NC NCS-720.2 > DP

      //NC NCS-720.3 > DP
      //Восстанавливаем параметры буферной таблицы
      GLBuffer :=OldGLBuffer;
      //NC NCS-720.3 < DP

      EXIT(IsGlobalError);
      //NC MDTC01 < MP
    END;

    PROCEDURE MappChartsOfAccount3@1000000026(VAR LedgDimension@1000000010 : TEMPORARY Record 355;ConsolidationSource1@1000000009 : Record 50001;MappingCode@1000000000 : Code[20];MappingLineNo@1000000001 : Integer;GLEntry1@1000000003 : Record 17) : Code[20];
    VAR
      ConvOfChartOfAccounts@1000000008 : Record 50002;
      ConsSetup@1000000021 : Record 50000;
      OperationType@1000000015 : ' ,Debit,Credit';
      DimCode1@1000000014 : Code[20];
      DimCode2@1000000013 : Code[20];
      DimVal1@1000000016 : Code[20];
      DimVal2@1000000017 : Code[20];
      MappingFind@1000000018 : Boolean;
      GLAccount@1210001 : Record 15;
      IsErr@1210003 : Boolean;
      LedgDimContr@1210004 : Record 355;
      LedgDimIntContr@1210005 : Record 355;
      Text50055@1210006 : TextConst 'RUS=Вы должны определить Измерение %1 в %2 или %3 таблицы %4.';
      DimValueContr@1000000002 : Record 349;
      cConsAcc@1210011 : Code[20];
      lDim1Exist@1210009 : Boolean;
      lDim2Exist@1210008 : Boolean;
      lDim3Exist@1210007 : Boolean;
      CountLEDim@1101495000 : Integer;
      Rating@1101495001 : Integer;
      LinkedDim@1000000004 : Record 50016;
    BEGIN
      //NC MDTM03 > MP
      Log.StartCounter(-11);
      //NC MTD06 > AIG
      {
      ConvOfChartOfAccounts.GET(MappingCode,MappingLineNo);
      cConsAcc := ConvOfChartOfAccounts."Receiver Account Code";
      }
      IF ConvOfChartOfAccounts.GET(MappingCode,MappingLineNo) THEN
        cConsAcc := ConvOfChartOfAccounts."Receiver Account Code";
      //NC MTD06 < AIG
      //NC PIF010 > MP
      { //Уже ранее все отмэпплено
      IF (ConsolidationSource1."Import Format" = ConsolidationSource1."Import Format"::FromBuffer) AND
         ConsolidationSource1."Use GL Mapping"
      THEN BEGIN
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 1" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 1" <> '')
        THEN BEGIN
          LedgDimension.INIT;
          LedgDimension."Table ID" := 17;
          LedgDimension."Entry No." := GLEntry1."Entry No.";
          LedgDimension."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 1";
          LedgDimension."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 1";
          IF NOT LedgDimension.INSERT THEN BEGIN
            //LedgDimension.MODIFY;
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 1");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 1");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimension.INIT;
                LedgDimension."Table ID" := 17;
                LedgDimension."Entry No." := GLEntry1."Entry No.";
                LedgDimension."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimension."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimension.INSERT THEN;
                //  LedgDimension.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 2" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 2" <> '')
        THEN BEGIN
          LedgDimension.INIT;
          LedgDimension."Table ID" := 17;
          LedgDimension."Entry No." := GLEntry1."Entry No.";
          LedgDimension."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 2";
          LedgDimension."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 2";
          IF NOT LedgDimension.INSERT THEN BEGIN
            //LedgDimension.MODIFY;
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 2");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 2");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimension.INIT;
                LedgDimension."Table ID" := 17;
                LedgDimension."Entry No." := GLEntry1."Entry No.";
                LedgDimension."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimension."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimension.INSERT THEN;
                //  LedgDimension.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 3" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 3" <> '')
        THEN BEGIN
          LedgDimension.INIT;
          LedgDimension."Table ID" := 17;
          LedgDimension."Entry No." := GLEntry1."Entry No.";
          LedgDimension."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 3";
          LedgDimension."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 3";
          IF NOT LedgDimension.INSERT THEN  BEGIN
            //LedgDimension.MODIFY;
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 3");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 3");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimension.INIT;
                LedgDimension."Table ID" := 17;
                LedgDimension."Entry No." := GLEntry1."Entry No.";
                LedgDimension."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimension."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimension.INSERT THEN;
                //  LedgDimension.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
      END;
      }
      //NC PIF010 < MP
      Log.StartCounter(11);
      EXIT(cConsAcc);
      //NC PIF001 < DP
    END;

    PROCEDURE CheckDefaultDimensions@1000000027(ConsSource@1000000000 : Record 50001;GLBuffer@1000000001 : Record 50008;ConsRegNo@1000000004 : Integer;MappingCode@1000000007 : Code[20]);
    VAR
      GLMapp@1000000002 : Record 50002;
      DefDim@1000000003 : Record 352;
      Dim@1000000005 : Record 348;
      GLAcc@1000000006 : Record 15;
      AccNo@1000000008 : Code[20];
      Company@1000000010 : Record 2000000006;
      IsDealMandatory@1101495002 : Boolean;
      DealCode@1101495001 : Code[20];
      Deal@1101495000 : Record 50037;
    BEGIN
      //NC NCS-1746 > DP
      IsDealMandatory := FALSE;
      DealCode :='';
      //NC NCS-1746 < DP

      //NC MDTC03 > MP
      IF (DTMappLineNo <> 0) AND GLMapp.GET(MappingCode,DTMappLineNo) THEN
        IF GLMapp."Receiver Account Code" <> '' THEN BEGIN
          //NC MTD02 > AIG
          Company.GET(COMPANYNAME);
          DefDim.RESET;
          DefDim.SETRANGE("Table ID", DATABASE::"Legal Entity Type");
          DefDim.SETRANGE("No.", Company."Legal Entity Type");
          IF DefDim.FINDSET THEN
          REPEAT

            TempDebitLedgEntryDim.INIT;
            TempDebitLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
            TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
            TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
            TempDebitLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

            IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
              (DefDim."Dimension Value Code" <> '') THEN BEGIN
              IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN
                TempDebitLedgEntryDim.MODIFY(TRUE);
            END ELSE
              IF TempDebitLedgEntryDim.INSERT(TRUE) THEN;
          UNTIL DefDim.NEXT = 0;

          // доопределяем стандартную аналитику с карточки
          IF GLAcc.GET(GLMapp."Receiver Account Code") THEN
            IF NOT (GLAcc."Ext. Source Type"=GLAcc."Ext. Source Type"::"G/L Account") THEN
              IF GLMapp."Ext. Source Type" <> GLMapp."Ext. Source Type"::"G/L Account" THEN BEGIN

              CASE GLMapp."Ext. Source Type" OF
              GLMapp."Ext. Source Type"::Customer:
                IF TempDebitLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
                  AccNo := TempDebitLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::Customer);
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempDebitLedgEntryDim.INIT;
                    TempDebitLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempDebitLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                       (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLMapp."Receiver Account Code",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempDebitLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempDebitLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              GLMapp."Ext. Source Type"::Vendor:
                IF TempDebitLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
                  AccNo := TempDebitLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::Vendor);
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempDebitLedgEntryDim.INIT;
                    TempDebitLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempDebitLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                       (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLMapp."Receiver Account Code",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempDebitLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempDebitLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              GLMapp."Ext. Source Type"::"Bank Account":
                IF TempDebitLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Bank Account Dimension Code") THEN BEGIN
                  AccNo := TempDebitLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::"Bank Account");
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempDebitLedgEntryDim.INIT;
                    TempDebitLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempDebitLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    //NC NCS-2253 > DP
                    IF (DefDim."Value Posting" IN [DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code"]) AND
                    {
                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                    }
                    //NC NCS-2253 < DP

                      (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLMapp."Receiver Account Code",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempDebitLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempDebitLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              END;
              END ELSE
              IF GLAcc."Ext. Source Type" <> GLAcc."Ext. Source Type"::"G/L Account" THEN BEGIN

              CASE GLAcc."Ext. Source Type" OF
              GLAcc."Ext. Source Type"::Customer:
                IF TempDebitLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
                  AccNo := TempDebitLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::Customer);
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempDebitLedgEntryDim.INIT;
                    TempDebitLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempDebitLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                       (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLAcc."No.",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempDebitLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempDebitLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              GLAcc."Ext. Source Type"::Vendor:
                IF TempDebitLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
                  AccNo := TempDebitLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::Vendor);
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempDebitLedgEntryDim.INIT;
                    TempDebitLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempDebitLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                       (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLAcc."No.",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempDebitLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempDebitLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              GLAcc."Ext. Source Type"::"Bank Account":
                IF TempDebitLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Bank Account Dimension Code") THEN BEGIN
                  AccNo := TempDebitLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::"Bank Account");
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempDebitLedgEntryDim.INIT;
                    TempDebitLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempDebitLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    //NC NCS-2253 > DP
                    IF (DefDim."Value Posting" IN [DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code"]) AND
                    {
                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                    }
                    //NC NCS-2253 < DP

                      (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLAcc."No.",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempDebitLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempDebitLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              END;
              END;
          //NC MTD02 < AIG


          DefDim.RESET;
          DefDim.SETRANGE("Table ID",15);
          DefDim.SETRANGE("No.",GLMapp."Receiver Account Code");
          DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Code Mandatory");
          IF DefDim.FINDSET THEN
            REPEAT

              //NC NCS-1746 > DP
              //Доопределение аналитки со сделки
              IF GLBuffer."FI Processing" AND (DefDim."Dimension Code" = MovingDataSetup."Deal Dimension Code") THEN
                IsDealMandatory := TRUE;
              IF GLBuffer."FI Processing" AND (DefDim."Dimension Code" = MovingDataSetup."FI Dimension Code") AND
                (DealCode <>'') AND IsDealMandatory THEN BEGIN
                IF Deal.GET(DealCode) AND (Deal."Financial instrument No."<>'') THEN BEGIN
                  TempDebitLedgEntryDim.INIT;
                  TempDebitLedgEntryDim."Table ID" := 17;
                  TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                  TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                  TempDebitLedgEntryDim."Dimension Value Code" := Deal."Financial instrument No.";
                  IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN
                    TempDebitLedgEntryDim.MODIFY(TRUE);
                END;
              END;
              //NC NCS-1746 > DP


              TempDebitLedgEntryDim.RESET;
              TempDebitLedgEntryDim.SETRANGE("Table ID",17);
              TempDebitLedgEntryDim.SETRANGE("Entry No.",GLBuffer."Entry No.");
              TempDebitLedgEntryDim.SETRANGE("Dimension Code",DefDim."Dimension Code");
              IF NOT TempDebitLedgEntryDim.FINDFIRST THEN BEGIN
              //NC MTD06 > AIG
              IF (Dim.GET(DefDim."Dimension Code")) AND (Dim."Speshial Control") THEN BEGIN
                IsSpeshialControl := TRUE;
              END ELSE BEGIN
              //NC MTD06 < AIG
                IsGlobalError := TRUE;
                //NC MDTM04 > MP
                {
                ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
                ErrDoc := GLBuffer."Document No.";
                }
                //NC MDTM04 < MP
                ErrMessage := Text020 + FORMAT(GLMapp."Receiver Account Code") + Text019 + FORMAT(DefDim."Dimension Code");
                //NC MDTM04 > MP
                {
                CreateErrorLogEntry(ConsSource.Code,
                  ConsRegNo,0,2, ErrOper,GLBuffer."Document Date",GLMapp."Receiver Account Code",ErrDoc,ErrMessage,
                  DefDim."Dimension Code");
                }
                IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
                IF NOT Dim.GET(DefDim."Dimension Code") THEN;
                ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                      ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                      ConsSource.Code,ConsRegNo,'EDTC04',
                                                      ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);
                //NC MDTM04 < MP
              //NC MTD06 > AIG
              END;
              //NC MTD06 < AIG

              //NC NCS-1746 > DP
              END ELSE BEGIN
                IF GLBuffer."FI Processing" AND (DefDim."Dimension Code" = MovingDataSetup."Deal Dimension Code") THEN
                  DealCode :=TempDebitLedgEntryDim."Dimension Value Code";
              //NC NCS-1746 < DP

              END;
            UNTIL DefDim.NEXT = 0;
        END;

      //NC NCS-1746 > DP
      IsDealMandatory := FALSE;
      DealCode :='';
      //NC NCS-1746 < DP

      IF (CTMappLineNo <> 0) AND GLMapp.GET(MappingCode,CTMappLineNo) THEN
        IF GLMapp."Receiver Account Code" <> '' THEN BEGIN
          //NC MTD02 > AIG
          Company.GET(COMPANYNAME);
          DefDim.RESET;
          DefDim.SETRANGE("Table ID", DATABASE::"Legal Entity Type");
          DefDim.SETRANGE("No.", Company."Legal Entity Type");
          IF DefDim.FINDSET THEN
          REPEAT
            TempCreditLedgEntryDim.INIT;
            TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
            TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
            TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
            TempCreditLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

            IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
              (DefDim."Dimension Value Code" <> '') THEN BEGIN
              IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN
                TempCreditLedgEntryDim.MODIFY(TRUE);
            END ELSE
            IF TempCreditLedgEntryDim.INSERT(TRUE) THEN;
          UNTIL DefDim.NEXT = 0;

          // доопределяем стандартную аналитику с карточки
          IF GLAcc.GET(GLMapp."Receiver Account Code") THEN
            IF NOT (GLAcc."Ext. Source Type"=GLAcc."Ext. Source Type"::"G/L Account") THEN
              IF GLMapp."Ext. Source Type" <> GLMapp."Ext. Source Type"::"G/L Account" THEN BEGIN

              CASE GLMapp."Ext. Source Type" OF
              GLMapp."Ext. Source Type"::Customer:
                IF TempCreditLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
                  AccNo := TempCreditLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::Customer);
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempCreditLedgEntryDim.INIT;
                    TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempCreditLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                       (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLMapp."Receiver Account Code",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempCreditLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempCreditLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              GLMapp."Ext. Source Type"::Vendor:
                IF TempCreditLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
                  AccNo := TempCreditLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::Vendor);
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempCreditLedgEntryDim.INIT;
                    TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempCreditLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                       (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLMapp."Receiver Account Code",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempCreditLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempCreditLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              GLMapp."Ext. Source Type"::"Bank Account":
                IF TempCreditLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Bank Account Dimension Code") THEN BEGIN
                  AccNo := TempCreditLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::"Bank Account");
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempCreditLedgEntryDim.INIT;
                    TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempCreditLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    //NC NCS-2253 > DP
                    IF (DefDim."Value Posting" IN [DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code"]) AND
                    {
                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                    }
                    //NC NCS-2253 < DP

                      (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLMapp."Receiver Account Code",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempCreditLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempCreditLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              END;
              END ELSE
              IF GLAcc."Ext. Source Type" <> GLAcc."Ext. Source Type"::"G/L Account" THEN BEGIN

              CASE GLAcc."Ext. Source Type" OF
              GLAcc."Ext. Source Type"::Customer:
                IF TempCreditLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
                  AccNo := TempCreditLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::Customer);
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempCreditLedgEntryDim.INIT;
                    TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempCreditLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                       (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLAcc."No.",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempCreditLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempCreditLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              GLAcc."Ext. Source Type"::Vendor:
                IF TempCreditLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
                  AccNo := TempCreditLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::Vendor);
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempCreditLedgEntryDim.INIT;
                    TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempCreditLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                       (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLAcc."No.",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempCreditLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempCreditLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              GLAcc."Ext. Source Type"::"Bank Account":
                IF TempCreditLedgEntryDim.GET(DATABASE::"G/L Entry",GLBuffer."Entry No.",
                                             ConsolidationSetup."Bank Account Dimension Code") THEN BEGIN
                  AccNo := TempCreditLedgEntryDim."Dimension Value Code";
                  DefDim.RESET;
                  DefDim.SETRANGE("Table ID", DATABASE::"Bank Account");
                  DefDim.SETRANGE("No.", AccNo);
                  IF DefDim.FINDSET THEN
                  REPEAT
                    TempCreditLedgEntryDim.INIT;
                    TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                    TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                    TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                    TempCreditLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                    //NC NCS-2253 > DP
                    IF (DefDim."Value Posting" IN [DefDim."Value Posting"::"Code Mandatory",DefDim."Value Posting"::"Same Code"]) AND
                    {
                    IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                    }
                    //NC NCS-2253 < DP

                      (DefDim."Dimension Value Code" <> '') THEN BEGIN
                      IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN

                        //NC NCS-1002.3 > DP
                        IF NOT CheckAccountSameCodeDim(GLAcc."No.",DefDim."Dimension Code") THEN
                        //NC NCS-1002.3 < DP

                        TempCreditLedgEntryDim.MODIFY(TRUE);
                    END ELSE
                      IF TempCreditLedgEntryDim.INSERT(TRUE) THEN;
                  UNTIL DefDim.NEXT = 0;
                END;
              END;
              END;
          //NC MTD02 < AIG

          DefDim.RESET;
          DefDim.SETRANGE("Table ID",15);
          DefDim.SETRANGE("No.",GLMapp."Receiver Account Code");
          DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Code Mandatory");
          IF DefDim.FINDSET THEN
            REPEAT

              //NC NCS-1746 > DP
              IF GLBuffer."FI Processing" AND (DefDim."Dimension Code" = MovingDataSetup."Deal Dimension Code") THEN
                IsDealMandatory := TRUE;
              IF GLBuffer."FI Processing" AND (DefDim."Dimension Code" = MovingDataSetup."FI Dimension Code") AND
                (DealCode <>'') AND IsDealMandatory THEN BEGIN
                IF Deal.GET(DealCode) AND (Deal."Financial instrument No."<>'') THEN BEGIN
                  TempCreditLedgEntryDim.INIT;
                  TempCreditLedgEntryDim."Table ID" := 17;
                  TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                  TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                  TempCreditLedgEntryDim."Dimension Value Code" := Deal."Financial instrument No.";
                  IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN
                    TempCreditLedgEntryDim.MODIFY(TRUE);
                END;
              END;
              //NC NCS-1746 > DP

              TempCreditLedgEntryDim.RESET;
              TempCreditLedgEntryDim.SETRANGE("Table ID",17);
              TempCreditLedgEntryDim.SETRANGE("Entry No.",GLBuffer."Entry No.");
              TempCreditLedgEntryDim.SETRANGE("Dimension Code",DefDim."Dimension Code");
              IF NOT TempCreditLedgEntryDim.FINDFIRST THEN BEGIN
              //NC MTD06 > AIG
              IF (Dim.GET(DefDim."Dimension Code")) AND (Dim."Speshial Control") THEN BEGIN
                IsSpeshialControl := TRUE;


              END ELSE BEGIN
              //NC MTD06 < AIG
                IsGlobalError := TRUE;
                //NC MDTM04 > MP
                {
                ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
                ErrDoc := GLBuffer."Document No.";
                }
                //NC MDTM04 < MP
                ErrMessage := Text020 + FORMAT(GLMapp."Receiver Account Code") + Text019 + FORMAT(DefDim."Dimension Code");
                //NC MDTM04 > MP
                {
                CreateErrorLogEntry(ConsSource.Code,
                  ConsRegNo,0,2, ErrOper,GLBuffer."Document Date",GLMapp."Receiver Account Code",ErrDoc,ErrMessage,
                  DefDim."Dimension Code");
                }
                IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
                IF NOT Dim.GET(DefDim."Dimension Code") THEN;
                ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                      ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                      ConsSource.Code,ConsRegNo,'EDTC04',
                                                      ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);
                //NC MDTM04 < MP
              //NC MTD06 > AIG
              END;
              //NC MTD06 < AIG

              //NC NCS-1746 > DP
              END ELSE BEGIN
                IF GLBuffer."FI Processing" AND (DefDim."Dimension Code" = MovingDataSetup."Deal Dimension Code") THEN
                  DealCode :=TempCreditLedgEntryDim."Dimension Value Code";
              //NC NCS-1746 < DP

              END;
            UNTIL DefDim.NEXT = 0;
        END;

      //NC MDTC03 < MP
    END;

    PROCEDURE CheckSameCodeDimensions@1000000028(ConsSource@1000000000 : Record 50001;GLBuffer@1000000001 : Record 50008;ConsRegNo@1000000004 : Integer;MappingCode@1000000007 : Code[20]);
    VAR
      GLMapp@1000000002 : Record 50002;
      DefDim@1000000003 : Record 352;
      GLAcc@1000000005 : Record 15;
      DimValue@1000000006 : Record 349;
    BEGIN
      //NC MDTC04 > MP
      IF (DTMappLineNo <> 0) AND GLMapp.GET(MappingCode,DTMappLineNo) THEN
        IF GLMapp."Receiver Account Code" <> '' THEN BEGIN
          DefDim.RESET;
          DefDim.SETRANGE("Table ID",15);
          DefDim.SETRANGE("No.",GLMapp."Receiver Account Code");
          DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Same Code");
          IF DefDim.FINDSET THEN
            REPEAT
              TempDebitLedgEntryDim.RESET;
              TempDebitLedgEntryDim.SETRANGE("Table ID",17);
              TempDebitLedgEntryDim.SETRANGE("Entry No.",GLBuffer."Entry No.");
              TempDebitLedgEntryDim.SETRANGE("Dimension Code",DefDim."Dimension Code");
              IF NOT TempDebitLedgEntryDim.FINDFIRST THEN BEGIN
                IsGlobalError := TRUE;
                //NC MDTM04 > MP
                {
                ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
                ErrDoc := GLBuffer."Document No.";
                }
                //NC MDTM04 < MP
                ErrMessage := Text020 + FORMAT(GLMapp."Receiver Account Code") + Text019 + FORMAT(DefDim."Dimension Code") +
                  Text021 + FORMAT(DefDim."Dimension Value Code");
                //NC MDTM04 > MP
                {
                CreateErrorLogEntry(ConsSource.Code,
                  ConsRegNo,0,2, ErrOper,GLBuffer."Document Date",GLMapp."Receiver Account Code",ErrDoc,ErrMessage,
                  DefDim."Dimension Code");
                }
                IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
                //IF NOT DimValue.GET(DefDim."Dimension Code",DefDim."Dimension Value Code") THEN;
                ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                   ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSource.Code,ConsRegNo,'EDTC05',
                                                   ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);
                //NC MDTM04 < MP
              END ELSE BEGIN
                IF TempDebitLedgEntryDim."Dimension Value Code" <> DefDim."Dimension Value Code" THEN BEGIN
                  IsGlobalError := TRUE;
                  //NC MDTM04 > MP
                  {
                  ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
                  ErrDoc := GLBuffer."Document No.";
                  }
                  //NC MDTM04 < MP
                  ErrMessage := Text020 + FORMAT(GLMapp."Receiver Account Code") + Text019 + FORMAT(DefDim."Dimension Code") +
                    Text021 + FORMAT(DefDim."Dimension Value Code");
                  //NC MDTM04 > MP
                  {
                  CreateErrorLogEntry(ConsSource.Code,
                    ConsRegNo,0,2, ErrOper,GLBuffer."Document Date",GLMapp."Receiver Account Code",ErrDoc,ErrMessage,
                    DefDim."Dimension Code");
                  }
                  IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
                  //IF NOT DimValue.GET(DefDim."Dimension Code",DefDim."Dimension Value Code") THEN;
                  ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                     ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                     ConsSource.Code,ConsRegNo,'EDTC05',
                                                     ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);
                  //NC MDTM04 < MP
                END;
              END;
            UNTIL DefDim.NEXT = 0;
        END;
      IF (CTMappLineNo <> 0) AND GLMapp.GET(MappingCode,CTMappLineNo) THEN
        IF GLMapp."Receiver Account Code" <> '' THEN BEGIN
          DefDim.RESET;
          DefDim.SETRANGE("Table ID",15);
          DefDim.SETRANGE("No.",GLMapp."Receiver Account Code");
          DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Same Code");
          IF DefDim.FINDSET THEN
            REPEAT
              TempCreditLedgEntryDim.RESET;
              TempCreditLedgEntryDim.SETRANGE("Table ID",17);
              TempCreditLedgEntryDim.SETRANGE("Entry No.",GLBuffer."Entry No.");
              TempCreditLedgEntryDim.SETRANGE("Dimension Code",DefDim."Dimension Code");
              IF NOT TempCreditLedgEntryDim.FINDFIRST THEN BEGIN
                IsGlobalError := TRUE;
                //NC MDTM04 > MP
                {
                ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
                ErrDoc := GLBuffer."Document No.";
                }
                //NC MDTM04 < MP
                ErrMessage := Text020 + FORMAT(GLMapp."Receiver Account Code") + Text019 + FORMAT(DefDim."Dimension Code") +
                  Text021 + FORMAT(DefDim."Dimension Value Code");
                //NC MDTM04 > MP
                {
                CreateErrorLogEntry(ConsSource.Code,
                  ConsRegNo,0,2, ErrOper,GLBuffer."Document Date",GLMapp."Receiver Account Code",ErrDoc,ErrMessage,
                  DefDim."Dimension Code");
                }
                IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
                //IF NOT DimValue.GET(DefDim."Dimension Code",DefDim."Dimension Value Code") THEN;
                ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                   ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSource.Code,ConsRegNo,'EDTC05',
                                                   ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);
                //NC MDTM04 < MP
              END ELSE BEGIN
                IF TempCreditLedgEntryDim."Dimension Value Code" <> DefDim."Dimension Value Code" THEN BEGIN
                  IsGlobalError := TRUE;
                  //NC MDTM04 > MP
                  {
                  ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
                  ErrDoc := GLBuffer."Document No.";
                  }
                  //NC MDTM04 < MP
                  ErrMessage := Text020 + FORMAT(GLMapp."Receiver Account Code") + Text019 + FORMAT(DefDim."Dimension Code") +
                    Text021 + FORMAT(DefDim."Dimension Value Code");
                  //NC MDTM04 > MP
                  {
                  CreateErrorLogEntry(ConsSource.Code,
                    ConsRegNo,0,2, ErrOper,GLBuffer."Document Date",GLMapp."Receiver Account Code",ErrDoc,ErrMessage,
                    DefDim."Dimension Code");
                  }
                  IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
                  //IF NOT DimValue.GET(DefDim."Dimension Code",DefDim."Dimension Value Code") THEN;
                  ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                     ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                     ConsSource.Code,ConsRegNo,'EDTC05',
                                                     ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);
                  //NC MDTM04 < MP
                END;
              END;
            UNTIL DefDim.NEXT = 0;
        END;
      //NC MDTC04 < MP
    END;

    PROCEDURE CheckRestrictedDimensions@1000000029(ConsSource@1000000000 : Record 50001;GLBuffer@1000000001 : Record 50008;ConsRegNo@1000000004 : Integer;MappingCode@1000000007 : Code[20]);
    VAR
      GLMapp@1000000002 : Record 50002;
      DefDim@1000000003 : Record 352;
      AccDim@1000000005 : Record 50030;
      GLAcc@1000000006 : Record 15;
    BEGIN
      //NC MDTC07 > MP
      IF NOT GLSetup."Check Account Dimension" THEN
        EXIT;

      IF (DTMappLineNo <> 0) AND GLMapp.GET(MappingCode,DTMappLineNo) THEN
        IF GLMapp."Receiver Account Code" <> '' THEN BEGIN
          TempDebitLedgEntryDim.RESET;
          TempDebitLedgEntryDim.SETRANGE("Table ID",17);
          TempDebitLedgEntryDim.SETRANGE("Entry No.",GLBuffer."Entry No.");
          IF TempDebitLedgEntryDim.FINDSET THEN
            REPEAT
              AccDim.RESET;
              AccDim.SETRANGE("Account No.", GLMapp."Receiver Account Code");
              AccDim.SETRANGE("Dimension Code", TempDebitLedgEntryDim."Dimension Code");
              //AccDim.SETRANGE(Type,AccDim.Type::"0");
              IF AccDim.FINDFIRST THEN
                IF NOT AccDim.GET(GLMapp."Receiver Account Code",
                                  TempDebitLedgEntryDim."Dimension Code",
                                  TempDebitLedgEntryDim."Dimension Value Code")
                THEN BEGIN
                  IsGlobalError := TRUE;
                  //NC MDTM04 > MP
                  {
                  ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
                  ErrDoc := GLBuffer."Document No.";
                  }
                  //NC MDTM04 < MP
                  ErrMessage := Text033 + FORMAT(GLMapp."Receiver Account Code") + Text028 +
                    FORMAT(TempDebitLedgEntryDim."Dimension Code") +
                    Text026 + FORMAT(TempDebitLedgEntryDim."Dimension Value Code") + Text029;
                  //NC MDTM04 > MP
                  {
                  CreateErrorLogEntry(ConsSource.Code,
                    ConsRegNo,0,2, ErrOper,GLBuffer."Document Date",GLMapp."Receiver Account Code",ErrDoc,ErrMessage,
                    TempDebitLedgEntryDim."Dimension Code");
                  }
                  IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
                  ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                     ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                     ConsSource.Code,ConsRegNo,'EDTC08',
                                                     ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);
                  //NC MDTM04 < MP
                END;
            UNTIL TempDebitLedgEntryDim.NEXT = 0;
        END;
      IF (CTMappLineNo <> 0) AND GLMapp.GET(MappingCode,CTMappLineNo) THEN
        IF GLMapp."Receiver Account Code" <> '' THEN BEGIN
          TempCreditLedgEntryDim.RESET;
          TempCreditLedgEntryDim.SETRANGE("Table ID",17);
          TempCreditLedgEntryDim.SETRANGE("Entry No.",GLBuffer."Entry No.");
          IF TempCreditLedgEntryDim.FINDSET THEN
            REPEAT
              AccDim.RESET;
              AccDim.SETRANGE("Account No.", GLMapp."Receiver Account Code");
              AccDim.SETRANGE("Dimension Code", TempCreditLedgEntryDim."Dimension Code");
              //AccDim.SETRANGE(Type,AccDim.Type::"0");
              IF AccDim.FINDFIRST THEN
                IF NOT AccDim.GET(GLMapp."Receiver Account Code",
                                  TempCreditLedgEntryDim."Dimension Code",
                                  TempCreditLedgEntryDim."Dimension Value Code")
                THEN BEGIN
                  IsGlobalError := TRUE;
                  //NC MDTM04 > MP
                  {
                  ErrOper := FORMAT(GLBuffer."Entry No.");// + ' / ' + FORMAT(GLBuffer."Document Date");
                  ErrDoc := GLBuffer."Document No.";
                  }
                  //NC MDTM04 < MP
                  ErrMessage := Text033 + FORMAT(GLMapp."Receiver Account Code") + Text028 +
                    FORMAT(TempCreditLedgEntryDim."Dimension Code") +
                    Text026 + FORMAT(TempCreditLedgEntryDim."Dimension Value Code") + Text029;
                  //NC MDTM04 > MP
                  {
                  CreateErrorLogEntry(ConsSource.Code,
                    ConsRegNo,0,2, ErrOper,GLBuffer."Document Date",GLMapp."Receiver Account Code",ErrDoc,ErrMessage,
                    TempCreditLedgEntryDim."Dimension Code");
                  }
                  IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
                  ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                     ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                     ConsSource.Code,ConsRegNo,'EDTC08',
                                                     ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);
                  //NC MDTM04 < MP
                END;
            UNTIL TempCreditLedgEntryDim.NEXT = 0;
        END;

      //NC MDTC07 < MP
    END;

    PROCEDURE IsFoundGLMapp@1000000030(EntryNo@1000000001 : Integer;VAR LedgDimensionTMP@1000000010 : TEMPORARY Record 355;MappingCode@1000000009 : Code[20];CompName@1000000007 : Text[30];SourceGLAccountNo@1000000011 : Code[20];SourceCorrGLAccountNo@1000000012 : Code[20];OperationType@1000000004 : ' ,Debit,Credit';VAR cConsAcc@1000000015 : Code[20];VAR LineNo@1000000003 : Integer) : Boolean;
    VAR
      ConvOfChartOfAccounts@1000000008 : Record 50002;
      DimCode1@1000000014 : Code[20];
      DimCode2@1000000013 : Code[20];
      DimVal1@1000000016 : Code[20];
      DimVal2@1000000017 : Code[20];
      GLAccount@1210001 : Record 15;
      LedgDimContr@1210004 : Record 355;
      LedgDimIntContr@1210005 : Record 355;
      Text50055@1210006 : TextConst 'ENU="You should define Dimension %1 %2/%3/%4 in table %5 ";RUS=Вы должны определить Измерение %1 в %2 или в %3 или в %4 таблицы %5.';
      DimValueContr@1000000002 : Record 349;
      lDim1Exist@1210009 : Boolean;
      lDim2Exist@1210008 : Boolean;
      lDim3Exist@1210007 : Boolean;
      ICDim1Exist@1210013 : Boolean;
      ICDim2Exist@1210012 : Boolean;
      ICDim3Exist@1210011 : Boolean;
      CountLEDim@1101495000 : Integer;
      Rating@1101495001 : Integer;
    BEGIN
      //NC MDTM04 > MP
      LedgDimensionTMP.RESET;
      LedgDimensionTMP.SETRANGE("Table ID", DATABASE::"G/L Entry");
      LedgDimensionTMP.SETRANGE("Entry No.", EntryNo);
      CountLEDim := LedgDimensionTMP.COUNT;

      ConvOfChartOfAccounts.SETCURRENTKEY("Mapping Code","Company Name","Source Account Code",
                                          "Source Corresp. Account Code","Operation Type",
                                          "Rating Transformation",Active);
      ConvOfChartOfAccounts.SETRANGE("Company Name",CompName);
      ConvOfChartOfAccounts.SETRANGE(Active,TRUE);
      ConvOfChartOfAccounts.SETFILTER("Rating Transformation",'>=%1',-CountLEDim);
      ConvOfChartOfAccounts.SETRANGE("Mapping Code",MappingCode);
      ConvOfChartOfAccounts.SETRANGE("Source Account Code",SourceGLAccountNo);
      ConvOfChartOfAccounts.SETRANGE("Source Corresp. Account Code",SourceCorrGLAccountNo);
      ConvOfChartOfAccounts.SETRANGE("Operation Type",OperationType);

      IF ConvOfChartOfAccounts.FINDSET THEN
        REPEAT
          IF cConsAcc='' THEN BEGIN
            //Проверка на соответствие до 3-х измерений
            lDim1Exist := TRUE;
            lDim2Exist := TRUE;
            lDim3Exist := TRUE;
            //NC OPT > PCH
            Rating := 0;
            //NC OPT < PCH

            WITH LedgDimensionTMP DO BEGIN
              IF (ConvOfChartOfAccounts."Source Dimension Code 1" <> '') AND (ConvOfChartOfAccounts."Source Dimension Value Code 1" <>
      '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 1");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 1");
                lDim1Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim1Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;

              IF (ConvOfChartOfAccounts."Source Dimension Code 2" <> '') AND (ConvOfChartOfAccounts."Source Dimension Value Code 2" <>
      '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 2");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 2");
                lDim2Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim2Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;

              IF (ConvOfChartOfAccounts."Source Dimension Code 3" <> '') AND (ConvOfChartOfAccounts."Source Dimension Value Code 3" <>
      '')
              THEN BEGIN
                SETRANGE("Dimension Code", ConvOfChartOfAccounts."Source Dimension Code 3");
                SETFILTER("Dimension Value Code", ConvOfChartOfAccounts."Source Dimension Value Code 3");
                lDim3Exist := NOT ISEMPTY;
                //NC OPT > PCH
                IF lDim3Exist THEN
                  Rating -= 1;
                //NC OPT < PCH
              END;
            END;

            //NC OPT > PCH
            //IF lDim1Exist AND lDim2Exist AND lDim3Exist THEN
            IF ConvOfChartOfAccounts."Rating Transformation" = Rating THEN BEGIN
            //NC OPT < PCH
              cConsAcc := ConvOfChartOfAccounts."Receiver Account Code";
              LineNo := ConvOfChartOfAccounts."Line No.";
            END;
          END;
        UNTIL (ConvOfChartOfAccounts.NEXT = 0) OR (cConsAcc <> '');
      EXIT(cConsAcc <> '');
      //NC MDTM04 < MP
    END;

    PROCEDURE SynchronizeFXDimensions@1000000033();
    VAR
      GLAcc@1000000000 : Record 15;
      FXDim@1000000001 : Record 349;
    BEGIN
      //NC MDTY01 > MP
      GLAcc.SETRANGE("Account Type",GLAcc."Account Type"::Posting);
      IF GLAcc.FINDSET THEN
        REPEAT
          FXDim.INIT;
          FXDim."Dimension Code" := ConsolidationSetup."Debit FX Diff. Dim. Code";
          FXDim.Code := GLAcc."No.";
          FXDim.Name := GLAcc.Name;
          IF NOT FXDim.INSERT THEN
            FXDim.MODIFY;
          FXDim.INIT;
          FXDim."Dimension Code" := ConsolidationSetup."Credit FX Diff. Dim. Code";
          FXDim.Code := GLAcc."No.";
          FXDim.Name := GLAcc.Name;
          IF NOT FXDim.INSERT THEN
            FXDim.MODIFY;
        UNTIL GLAcc.NEXT = 0;
      COMMIT; //Решаем проблему блокировки при параллельной работе
      //NC MDTY01 < MP
    END;

    PROCEDURE CheckCurrencies@1000000036();
    VAR
      Currency@1000000000 : Record 4;
    BEGIN
      //NC MDTY01 > MP
      Currency.RESET;
      IF Currency.FINDSET THEN
        REPEAT
          IF Currency."Source Currency Code" <> '' THEN BEGIN
            Currency.TESTFIELD("Check Currency Code");
          END;
        UNTIL Currency.NEXT = 0;
      //NC MDTY01 < MP
    END;

    PROCEDURE GetFIPosition@1000000031(ConsSource@1000000000 : Record 50001) : Integer;
    BEGIN
      //NC MDTY01 > MP
      IF ConsSource."Check Original Currency" <> ConsSource."Check Original Currency"::Position THEN
        EXIT(0);
      IF ConsSource."Shortcut Dimension 1 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(1);
      IF ConsSource."Shortcut Dimension 2 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(2);
      IF ConsSource."Shortcut Dimension 3 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(3);
      IF ConsSource."Shortcut Dimension 4 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(4);
      IF ConsSource."Shortcut Dimension 5 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(5);
      IF ConsSource."Shortcut Dimension 6 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(6);
      IF ConsSource."Shortcut Dimension 7 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(7);
      IF ConsSource."Shortcut Dimension 8 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(8);
      IF ConsSource."Shortcut Dimension 9 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(9);
      IF ConsSource."Shortcut Dimension 10 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(10);
      IF ConsSource."Shortcut Dimension 11 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(11);
      IF ConsSource."Shortcut Dimension 12 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(12);
      IF ConsSource."Shortcut Dimension 13 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(13);
      IF ConsSource."Shortcut Dimension 14 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(14);
      IF ConsSource."Shortcut Dimension 15 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(15);
      IF ConsSource."Shortcut Dimension 16 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(16);
      IF ConsSource."Shortcut Dimension 17 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(17);
      IF ConsSource."Shortcut Dimension 18 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(18);
      IF ConsSource."Shortcut Dimension 19 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(19);
      IF ConsSource."Shortcut Dimension 20 Code" = ConsolidationSetup."Fin. Instrument Dimension Code" THEN
        EXIT(20);
      ERROR(Text031,ConsSource.Code,ConsolidationSetup."Fin. Instrument Dimension Code");
      //NC MDTY01 < MP
    END;

    PROCEDURE ImportNewRecord2@1000000034(VAR ConsBuffer@1210001 : Record 50008;DocNotoUse@1210002 : Code[20];VAR ConsStirngsNum@1210005 : Integer;ConsolidationSource@1210006 : Record 50001;VAR ConsRegister@1210007 : Record 50005;VAR ImportedEntries@1210008 : Integer;VAR TMPDimCheck@1210010 : TEMPORARY Record 348;OperType@1210015 : 'Normal,Repost';MappingCode@1000000002 : Code[20]);
    VAR
      Type@1210003 : 'Debit,Credit';
      GenJournalLine@1210009 : Record 81;
      JournalLineDimension@1210011 : Record 356;
      InterCompany@1210012 : Boolean;
      GLEntryTmpDt@1210000 : TEMPORARY Record 17;
      nErr@1210013 : Integer;
      ConsType@1210014 : 'Buffer,Navision';
      GLOperationType@1210016 : ' ,Debit,Credit';
      FXAmountLCY@1101495000 : Decimal;
      DTGLAccCode@1101495001 : Code[20];
      OffBSTransaction@1000000000 : Boolean;
      GLAcc@1000000001 : Record 15;
      DefaultDimension@1000000003 : Record 352;
      VendorAgreement@1000000004 : Record 14901;
      CustomerAgreement@1000000005 : Record 14902;
      Vendor@1000000006 : Record 23;
      Customer@1000000007 : Record 18;
      PostingGroup@1000000008 : Code[20];
      PurchSetup@1101495002 : Record 312;
      SalesSetup@1101495003 : Record 311;
      GLEntryTmpCt@1101495004 : TEMPORARY Record 17;
      JnlLineDimExists@1101495006 : Boolean;
      IncTaxDimCode@1101495005 : Code[20];
      DefaultDimensionAdvanced@1101495007 : Record 50128;
      IsModify@1101495008 : Boolean;
    BEGIN

      //NC MDTC01 > MP
      //NC MDTC01.01 > MP
      ConsolidationSetup.GET;
      {
      GLEntryTmp.RESET;
      GLEntryTmp.DELETEALL;
      }
      GLEntryTmpDt.RESET;
      GLEntryTmpDt.DELETEALL;
      GLEntryTmpCt.RESET;
      GLEntryTmpCt.DELETEALL;
      IsDebitPositionAmount := FALSE;
      IsCreditPositionAmount := FALSE;
      //NC MDTC01.01 < MP
      //LedgerEntryDimTMP.RESET;
      //LedgerEntryDimTMP.DELETEALL;

      //NC MDTY01 > MP

      //NC MIO-10 > DP
      IsDebitConvertAmount := FALSE;
      IsCreditConvertAmount := FALSE;
      //NC MIO-10 < DP

      IF ConsolidationSource."Use GL Mapping" THEN BEGIN
        FXAmountLCY := 0;
      END;
      //NC MDTY01 < MP

      // Дебетовая часть проводки

      ConsBuffer2GLEntry(GLEntryTmpDt, ConsBuffer, 1, DocNotoUse, Type::Debit,
        NOT ConsolidationSource."Use GL Mapping",ConsolidationSource,MappingCode);
      //nErr := CreateDebitDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister,1);
      //nErr := CreateCreditDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister,1);
      //NC MDTC01.01 > MP
      ConsBuffer2GLEntry(GLEntryTmpCt, ConsBuffer, 2, DocNotoUse, Type::Credit,
        NOT ConsolidationSource."Use GL Mapping",ConsolidationSource,MappingCode);

      IF IsDebitPositionAmount AND (NOT IsCreditPositionAmount) THEN BEGIN
        IF (GLEntryTmpDt."Original Currency Code" = GLEntryTmpCt."Original Currency Code") AND
          (ABS(ABS(GLEntryTmpDt."Original Amount") - ABS(GLEntryTmpCt."Original Amount")) <
          //NC MDTC01.04 > DP
          ConsolidationSetup."Position Conv. Amt. Precision")
          {
          0.5)
          }
          //NC MDTC01.04 < DP
        THEN
          GLEntryTmpDt."Original Amount" := - GLEntryTmpCt."Original Amount";
      END;
      IF (NOT IsDebitPositionAmount) AND IsCreditPositionAmount THEN BEGIN
        IF (GLEntryTmpDt."Original Currency Code" = GLEntryTmpCt."Original Currency Code") AND
          (ABS(ABS(GLEntryTmpDt."Original Amount") - ABS(GLEntryTmpCt."Original Amount")) <
          //NC MDTC01.04 > DP
          ConsolidationSetup."Position Conv. Amt. Precision")
          {
          0.5)
          }
          //NC MDTC01.04 < DP
        THEN
          GLEntryTmpCt."Original Amount" := - GLEntryTmpDt."Original Amount";
      END;
      //NC MDTC01.01 < MP

      //NC MIO-10 > DP
      IF IsDebitConvertAmount AND (NOT IsCreditConvertAmount) THEN BEGIN
        IF (GLEntryTmpDt."Original Currency Code" = GLEntryTmpCt."Original Currency Code") AND
          (ABS(ABS(GLEntryTmpDt."Original Amount") - ABS(GLEntryTmpCt."Original Amount")) <
          ConsolidationSetup."Conv. Amt. Precision")
        THEN
          GLEntryTmpDt."Original Amount" := - GLEntryTmpCt."Original Amount";
      END;
      IF (NOT IsDebitConvertAmount) AND IsCreditConvertAmount THEN BEGIN
        IF (GLEntryTmpDt."Original Currency Code" = GLEntryTmpCt."Original Currency Code") AND
          (ABS(ABS(GLEntryTmpDt."Original Amount") - ABS(GLEntryTmpCt."Original Amount")) <
          ConsolidationSetup."Conv. Amt. Precision")
        THEN
          GLEntryTmpCt."Original Amount" := - GLEntryTmpDt."Original Amount";
      END;
      //NC MIO-10 < DP



      CreateJnlLine(GenJournalLine, ConsolidationSource, GLEntryTmpDt, GLEntryTmpDt."Document No.", ConsRegister."No." ,
        TempDebitLedgEntryDim, nErr, ConsType::Buffer, OperType, FALSE, FALSE, DTMappLineNo,MappingCode);


      IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
        TempDebitLedgEntryDim.RESET;
        TempDebitLedgEntryDim.SETRANGE("Table ID", 17);
        TempDebitLedgEntryDim.SETRANGE("Entry No.", ConsBuffer."Entry No.");
        IF TempDebitLedgEntryDim.FINDSET(FALSE,FALSE) THEN
          REPEAT
            //IF TMPDimCheck.GET(TempDebitLedgEntryDim."Dimension Code") THEN
              CreateJnlLineDimensions(GenJournalLine, JournalLineDimension, TempDebitLedgEntryDim, ConsRegister."No.",
                InterCompany, ConsolidationSource,GLEntryTmpDt."G/L Account No.",MappingCode);
            //NC MTD03 > AIG
            // создание карточки договора
            IF JournalLineDimension."Dimension Code" = ConsolidationSetup."Deal Dimension Code" THEN BEGIN
              IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN BEGIN
                {
                Vendor.GET(GenJournalLine."Account No.");
                Vendor."Agreement Posting" := Vendor."Agreement Posting"::Mandatory;
                IF Vendor.MODIFY THEN;
                }
                IF (JournalLineDimension."Dimension Value Code" <> '') AND
                   NOT VendorAgreement.GET(GenJournalLine."Account No.", JournalLineDimension."Dimension Value Code") THEN BEGIN
                  VendorAgreement.INIT;
                  VendorAgreement."Vendor No." := GenJournalLine."Account No.";
                  VendorAgreement."No." := JournalLineDimension."Dimension Value Code";
                  //NC MTD03.1 > DP
                  JournalLineDimension.CALCFIELDS("Dimension Value Name");
                  VendorAgreement."External Agreement No." := JournalLineDimension."Dimension Value Name";
                  //NC MTD03.1 < DP
                  VendorAgreement.Description := JournalLineDimension."Dimension Value Name";
                  VendorAgreement.Active := TRUE;
                  VendorAgreement."Vendor Posting Group" := GenJournalLine."Posting Group";
                  VendorAgreement."Deal No." := JournalLineDimension."Dimension Value Code";
                  VendorAgreement."Currency Code" := ConsBuffer."Debit Currency Code";
                  VendorAgreement."Agreement Type" := VendorAgreement."Agreement Type"::Trade;
                  IF NOT VendorAgreement.INSERT THEN;
                  {
                  PurchSetup.GET;
                  DefaultDimension.INIT;
                  DefaultDimension."Table ID" := DATABASE::"Vendor Agreement";
                  DefaultDimension."No." := VendorAgreement."No.";
                  DefaultDimension."Dimension Code" := PurchSetup."Vendor Agreement Dim. Code";
                  DefaultDimension."Dimension Value Code" := VendorAgreement."No.";
                  DefaultDimension."Value Posting" := DefaultDimension."Value Posting"::"Same Code";
                  DefaultDimension.INSERT;
                  }
                END;
                {
                PostingGroup := GenJournalLine."Posting Group";
                GenJournalLine.VALIDATE("Agreement No.", JournalLineDimension."Dimension Value Code");
                GenJournalLine.VALIDATE("Posting Group", PostingGroup);
                }
                GenJournalLine."Agreement No." := JournalLineDimension."Dimension Value Code";

                //NC NCS-2312 > DP
                {
                DefaultDimension.RESET;
                DefaultDimension.SETRANGE("Table ID", 14901);
                DefaultDimension.SETRANGE("No.", GenJournalLine."Agreement No.");
                IF DefaultDimension.FINDSET THEN
                REPEAT
                  JournalLineDimension.INIT;
                  JournalLineDimension."Table ID" := 81;
                  JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
                  JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
                  JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                  JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
                  JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                  IF JournalLineDimension.INSERT THEN;
                UNTIL DefaultDimension.NEXT = 0;
                }
                DefaultDimensionAdvanced.RESET;
                DefaultDimensionAdvanced.SETRANGE("Table ID", 14901);
                DefaultDimensionAdvanced.SETRANGE("Source No.",GenJournalLine."Account No.");
                DefaultDimensionAdvanced.SETRANGE("No.", GenJournalLine."Agreement No.");
                DefaultDimensionAdvanced.SETFILTER("Dimension Value Code",'<>%1','');
                DefaultDimensionAdvanced.SETFILTER("Value Posting",'%1|%2',
                      DefaultDimensionAdvanced."Value Posting"::"Code Mandatory",
                      DefaultDimensionAdvanced."Value Posting"::"Same Code");
                IF DefaultDimensionAdvanced.FINDSET THEN
                REPEAT
                  IsModify := TRUE;
                  JournalLineDimension.INIT;
                  JournalLineDimension."Table ID" := 81;
                  JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
                  JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
                  JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                  JournalLineDimension."Dimension Code" := DefaultDimensionAdvanced."Dimension Code";
                  JournalLineDimension."Dimension Value Code" := DefaultDimensionAdvanced."Dimension Value Code";
                  IF NOT JournalLineDimension.INSERT THEN BEGIN
                    IF DefaultDimensionAdvanced."Value Posting"=DefaultDimensionAdvanced."Value Posting"::"Same Code" THEN
                      JournalLineDimension.MODIFY;
                  END ELSE
                    IsModify := FALSE;

                  IF IsModify THEN BEGIN
                    IF GLSetup."Global Dimension 1 Code" <> '' THEN
                      IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN BEGIN
                        GenJournalLine."Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";

                      END;
                    IF GLSetup."Global Dimension 2 Code" <> '' THEN
                      IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN BEGIN
                        GenJournalLine."Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";

                      END;
                  END;
                UNTIL DefaultDimensionAdvanced.NEXT = 0;
                //NC NCS-2312 < DP

              END;
              IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN BEGIN
                {
                Customer.GET(GenJournalLine."Account No.");
                Customer."Agreement Posting" := Customer."Agreement Posting"::Mandatory;
                IF Customer.MODIFY THEN;
                }
                IF (JournalLineDimension."Dimension Value Code" <> '') AND
                   NOT CustomerAgreement.GET(GenJournalLine."Account No.", JournalLineDimension."Dimension Value Code") THEN BEGIN
                  CustomerAgreement.INIT;
                  CustomerAgreement."Customer No." := GenJournalLine."Account No.";
                  CustomerAgreement."No." := JournalLineDimension."Dimension Value Code";

                  //NC MTD03.1 > DP
                  JournalLineDimension.CALCFIELDS("Dimension Value Name");
                  CustomerAgreement."External Agreement No." := JournalLineDimension."Dimension Value Name";
                  //NC MTD03.1 < DP

                  CustomerAgreement.Description := JournalLineDimension."Dimension Value Name";
                  CustomerAgreement.Active := TRUE;
                  CustomerAgreement."Customer Posting Group" := GenJournalLine."Posting Group";
                  CustomerAgreement."Deal No." := JournalLineDimension."Dimension Value Code";
                  CustomerAgreement."Currency Code" := ConsBuffer."Debit Currency Code";
                  CustomerAgreement."Agreement Type" := CustomerAgreement."Agreement Type"::Trade;
                  IF CustomerAgreement.INSERT THEN;
                  {
                  SalesSetup.GET;
                  DefaultDimension.INIT;
                  DefaultDimension."Table ID" := DATABASE::"Customer Agreement";
                  DefaultDimension."No." := CustomerAgreement."No.";
                  DefaultDimension."Dimension Code" := SalesSetup."Customer Agreement Dim. Code";
                  DefaultDimension."Dimension Value Code" := CustomerAgreement."No.";
                  DefaultDimension."Value Posting" := DefaultDimension."Value Posting"::"Same Code";
                  DefaultDimension.INSERT;
                  }
                END;
                {
                PostingGroup := GenJournalLine."Posting Group";
                GenJournalLine.VALIDATE("Agreement No.", JournalLineDimension."Dimension Value Code");
                GenJournalLine.VALIDATE("Posting Group", PostingGroup);
                }
                GenJournalLine."Agreement No." := JournalLineDimension."Dimension Value Code";

                //NC NCS-2312 > DP
                {
                DefaultDimension.RESET;
                DefaultDimension.SETRANGE("Table ID", 14902);
                DefaultDimension.SETRANGE("No.", GenJournalLine."Agreement No.");
                IF DefaultDimension.FINDSET THEN
                REPEAT
                  JournalLineDimension.INIT;
                  JournalLineDimension."Table ID" := 81;
                  JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
                  JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
                  JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                  JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
                  JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                  IF JournalLineDimension.INSERT THEN;
                UNTIL DefaultDimension.NEXT = 0;
                }
                DefaultDimensionAdvanced.RESET;
                DefaultDimensionAdvanced.SETRANGE("Table ID", 14902);
                DefaultDimensionAdvanced.SETRANGE("Source No.",GenJournalLine."Account No.");
                DefaultDimensionAdvanced.SETRANGE("No.", GenJournalLine."Agreement No.");
                DefaultDimensionAdvanced.SETFILTER("Dimension Value Code",'<>%1','');
                DefaultDimensionAdvanced.SETFILTER("Value Posting",'%1|%2',
                      DefaultDimensionAdvanced."Value Posting"::"Code Mandatory",
                      DefaultDimensionAdvanced."Value Posting"::"Same Code");
                IF DefaultDimensionAdvanced.FINDSET THEN
                REPEAT
                  IsModify := TRUE;
                  JournalLineDimension.INIT;
                  JournalLineDimension."Table ID" := 81;
                  JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
                  JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
                  JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                  JournalLineDimension."Dimension Code" := DefaultDimensionAdvanced."Dimension Code";
                  JournalLineDimension."Dimension Value Code" := DefaultDimensionAdvanced."Dimension Value Code";
                  IF NOT JournalLineDimension.INSERT THEN BEGIN
                    IF DefaultDimensionAdvanced."Value Posting"=DefaultDimensionAdvanced."Value Posting"::"Same Code" THEN
                      JournalLineDimension.MODIFY;
                  END ELSE
                    IsModify := FALSE;
                  IF IsModify THEN BEGIN
                    IF GLSetup."Global Dimension 1 Code" <> '' THEN
                      IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN BEGIN
                        GenJournalLine."Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";

                      END;
                    IF GLSetup."Global Dimension 2 Code" <> '' THEN
                      IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN BEGIN
                        GenJournalLine."Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";

                      END;
                  END;

                UNTIL DefaultDimensionAdvanced.NEXT = 0;
                //NC NCS-2312 < DP

              END;
            END;
            //NC MTD03 < AIG
          UNTIL TempDebitLedgEntryDim.NEXT = 0;
      END;

      //NC MTD11 > AIG
      //добавление стандартной аналитики с карточки фин. инструмента
      DefaultDimension.RESET;
      DefaultDimension.SETRANGE("Table ID", 50021);
      DefaultDimension.SETRANGE("No.", GenJournalLine."Financial Instrument No.");
      // NC NC-973 > SKV
      // 1-й случай обрабоки стандартных измерений ФИ
      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
      // Это измерение будет обработанно особенным образом
      DefaultDimension.SETFILTER("Dimension Code", '<>%1', MovingDataSetup."INC.TAX Dimension Code");
      // NC NC-973 < SKV
      IF DefaultDimension.FINDFIRST THEN
      REPEAT
        JournalLineDimension.INIT;
        JournalLineDimension."Table ID" := 81;
        JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
        JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
        JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
        JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
        JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
        IF NOT JournalLineDimension.INSERT THEN;
      UNTIL DefaultDimension.NEXT = 0;
      // NC NC-973 > SKV
      // считаем, что если по мэппнгу измерение проставилось - ничего делать не надо
      IncTaxDimCode := GenJournalLine.GetIncTaxDimCode(JnlLineDimExists);
        IF IncTaxDimCode = '' THEN BEGIN
          IF JnlLineDimExists THEN
          // Измерение может быть пустым, но запись в таблице существует
            GenJournalLine.DeleteIncTaxDimCode;
          GenJournalLine.InsertIncTaxDimCode;
        END;
      // NC NC-973 < SKV


      //NC MTD11 < AIG

      GenJournalLine.INSERT;

      //NC MDTY01 > MP
      IF ConsolidationSource."Use GL Mapping" AND (NOT GenJournalLine."Except Correspondence") THEN BEGIN
        FXAmountLCY := ROUND(GenJournalLine."Amount (LCY)",0.01);
        //NC MTD02 > AIG
        {
        DTGLAccCode := GenJournalLine."Account No.";
        }
        DTGLAccCode := GetFXAccount(GenJournalLine);
        //NC MTD02 < AIG
        // > по результатам статуса 11.02.2010 всегда постим на балансовый ПЛ MP
        {
        IF GLAcc.GET(DTGLAccCode) THEN
          OffBSTransaction := GLAcc."Income/Balance" = GLAcc."Income/Balance"::"Off Balance Sheet";
        }
        // < по результатам статуса 11.02.2010 всегда постим на балансовый ПЛ MP
      END;
      //NC MDTY01 < MP

      ImportedEntries += 1;


      // Кредитовая часть проводки

      //NC MDTC01.01 > MP
      {
      ConsBuffer2GLEntry(GLEntryTmp, ConsBuffer, 2, DocNotoUse, Type::Credit,
        NOT ConsolidationSource."Use GL Mapping",ConsolidationSource,MappingCode);
      }
      //NC MDTC01.01 < MP
      //nErr := CreateCreditDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister,2);
      //nErr := CreateDebitDimBuffer(ConsBuffer, LedgerEntryDimTMP, ConsRegister,2);

      CreateJnlLine(GenJournalLine, ConsolidationSource, GLEntryTmpCt, GLEntryTmpCt."Document No.", ConsRegister."No.",
        TempCreditLedgEntryDim, nErr, ConsType::Buffer, OperType, FALSE, FALSE, CTMappLineNo,MappingCode);


      IF ConsolidationSource."Consolidate Dimensions" THEN BEGIN
        TempCreditLedgEntryDim.RESET;
        TempCreditLedgEntryDim.SETRANGE("Table ID", 17);
        TempCreditLedgEntryDim.SETRANGE("Entry No.", ConsBuffer."Entry No.");
        IF TempCreditLedgEntryDim.FINDSET(FALSE,FALSE) THEN
          REPEAT
            //IF TMPDimCheck.GET(TempCreditLedgEntryDim."Dimension Code") THEN
              CreateJnlLineDimensions(GenJournalLine, JournalLineDimension, TempCreditLedgEntryDim, ConsRegister."No.",
                InterCompany, ConsolidationSource,GLEntryTmpCt."G/L Account No.",MappingCode);
            //NC MTD03 > AIG
            // создание карточки договора
            IF JournalLineDimension."Dimension Code" = ConsolidationSetup."Deal Dimension Code" THEN BEGIN
              IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN BEGIN
                {
                Vendor.GET(GenJournalLine."Account No.");
                Vendor."Agreement Posting" := Vendor."Agreement Posting"::Mandatory;
                IF Vendor.MODIFY THEN;
                }
                IF (JournalLineDimension."Dimension Value Code" <> '') AND
                   NOT VendorAgreement.GET(GenJournalLine."Account No.", JournalLineDimension."Dimension Value Code") THEN BEGIN

                  VendorAgreement.INIT;
                  VendorAgreement."Vendor No." := GenJournalLine."Account No.";
                  VendorAgreement."No." := JournalLineDimension."Dimension Value Code";
                  VendorAgreement.Description := JournalLineDimension."Dimension Value Name";
                  VendorAgreement.Active := TRUE;
                  VendorAgreement."Vendor Posting Group" := GenJournalLine."Posting Group";
                  VendorAgreement."Deal No." := JournalLineDimension."Dimension Value Code";
                  VendorAgreement."Currency Code" := ConsBuffer."Credit Currency Code";
                  VendorAgreement."Agreement Type" := VendorAgreement."Agreement Type"::Trade;
                  IF VendorAgreement.INSERT THEN;
                  {
                  PurchSetup.GET;
                  DefaultDimension.INIT;
                  DefaultDimension."Table ID" := DATABASE::"Vendor Agreement";
                  DefaultDimension."No." := VendorAgreement."No.";
                  DefaultDimension."Dimension Code" := PurchSetup."Vendor Agreement Dim. Code";
                  DefaultDimension."Dimension Value Code" := VendorAgreement."No.";
                  DefaultDimension."Value Posting" := DefaultDimension."Value Posting"::"Same Code";
                  DefaultDimension.INSERT;
                  }
                END;
                {
                PostingGroup := GenJournalLine."Posting Group";
                GenJournalLine.VALIDATE("Agreement No.", JournalLineDimension."Dimension Value Code");
                GenJournalLine.VALIDATE("Posting Group", PostingGroup);
                }
                GenJournalLine."Agreement No." := JournalLineDimension."Dimension Value Code";
                //NC NCS-2312 > DP
                {
                DefaultDimension.RESET;
                DefaultDimension.SETRANGE("Table ID", 14901);
                DefaultDimension.SETRANGE("No.", GenJournalLine."Agreement No.");
                IF DefaultDimension.FINDSET THEN
                REPEAT
                  JournalLineDimension.INIT;
                  JournalLineDimension."Table ID" := 81;
                  JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
                  JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
                  JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                  JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
                  JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                  IF JournalLineDimension.INSERT THEN;
                UNTIL DefaultDimension.NEXT = 0;
                }
                DefaultDimensionAdvanced.RESET;
                DefaultDimensionAdvanced.SETRANGE("Table ID", 14901);
                DefaultDimensionAdvanced.SETRANGE("Source No.",GenJournalLine."Account No.");
                DefaultDimensionAdvanced.SETRANGE("No.", GenJournalLine."Agreement No.");
                DefaultDimensionAdvanced.SETFILTER("Dimension Value Code",'<>%1','');
                DefaultDimensionAdvanced.SETFILTER("Value Posting",'%1|%2',
                      DefaultDimensionAdvanced."Value Posting"::"Code Mandatory",
                      DefaultDimensionAdvanced."Value Posting"::"Same Code");
                IF DefaultDimensionAdvanced.FINDSET THEN
                REPEAT
                  IsModify := TRUE;
                  JournalLineDimension.INIT;
                  JournalLineDimension."Table ID" := 81;
                  JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
                  JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
                  JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                  JournalLineDimension."Dimension Code" := DefaultDimensionAdvanced."Dimension Code";
                  JournalLineDimension."Dimension Value Code" := DefaultDimensionAdvanced."Dimension Value Code";
                  IF NOT JournalLineDimension.INSERT THEN BEGIN
                    IF DefaultDimensionAdvanced."Value Posting"=DefaultDimensionAdvanced."Value Posting"::"Same Code" THEN
                      JournalLineDimension.MODIFY;
                  END ELSE
                    IsModify := FALSE;

                  IF IsModify THEN BEGIN
                    IF GLSetup."Global Dimension 1 Code" <> '' THEN
                      IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN BEGIN
                        GenJournalLine."Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";

                      END;
                    IF GLSetup."Global Dimension 2 Code" <> '' THEN
                      IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN BEGIN
                        GenJournalLine."Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";

                      END;
                  END;
                UNTIL DefaultDimensionAdvanced.NEXT = 0;
                //NC NCS-2312 < DP

              END;
              IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN BEGIN
                {
                Customer.GET(GenJournalLine."Account No.");
                Customer."Agreement Posting" := Customer."Agreement Posting"::Mandatory;
                IF Customer.MODIFY THEN;
                }
                IF (JournalLineDimension."Dimension Value Code" <> '') AND
                   NOT CustomerAgreement.GET(GenJournalLine."Account No.", JournalLineDimension."Dimension Value Code") THEN BEGIN

                  CustomerAgreement.INIT;
                  CustomerAgreement."Customer No." := GenJournalLine."Account No.";
                  CustomerAgreement."No." := JournalLineDimension."Dimension Value Code";
                  CustomerAgreement.Description := JournalLineDimension."Dimension Value Name";
                  CustomerAgreement.Active := TRUE;
                  CustomerAgreement."Customer Posting Group" := GenJournalLine."Posting Group";
                  CustomerAgreement."Deal No." := JournalLineDimension."Dimension Value Code";
                  CustomerAgreement."Currency Code" := ConsBuffer."Credit Currency Code";
                  CustomerAgreement."Agreement Type" := CustomerAgreement."Agreement Type"::Trade;
                  IF CustomerAgreement.INSERT THEN;
                  {
                  SalesSetup.GET;
                  DefaultDimension.INIT;
                  DefaultDimension."Table ID" := DATABASE::"Customer Agreement";
                  DefaultDimension."No." := CustomerAgreement."No.";
                  DefaultDimension."Dimension Code" := SalesSetup."Customer Agreement Dim. Code";
                  DefaultDimension."Dimension Value Code" := CustomerAgreement."No.";
                  DefaultDimension."Value Posting" := DefaultDimension."Value Posting"::"Same Code";
                  DefaultDimension.INSERT;
                  }
                END;
                {
                PostingGroup := GenJournalLine."Posting Group";
                GenJournalLine.VALIDATE("Agreement No.", JournalLineDimension."Dimension Value Code");
                GenJournalLine.VALIDATE("Posting Group", PostingGroup);
                }
                GenJournalLine."Agreement No." := JournalLineDimension."Dimension Value Code";

                //NC NCS-2312 > DP
                {
                DefaultDimension.RESET;
                DefaultDimension.SETRANGE("Table ID", 14902);
                DefaultDimension.SETRANGE("No.", GenJournalLine."Agreement No.");
                IF DefaultDimension.FINDSET THEN
                REPEAT
                  JournalLineDimension.INIT;
                  JournalLineDimension."Table ID" := 81;
                  JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
                  JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
                  JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                  JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
                  JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                  IF JournalLineDimension.INSERT THEN;
                UNTIL DefaultDimension.NEXT = 0;
                }
                DefaultDimensionAdvanced.RESET;
                DefaultDimensionAdvanced.SETRANGE("Table ID", 14902);
                DefaultDimensionAdvanced.SETRANGE("Source No.",GenJournalLine."Account No.");
                DefaultDimensionAdvanced.SETRANGE("No.", GenJournalLine."Agreement No.");
                DefaultDimensionAdvanced.SETFILTER("Dimension Value Code",'<>%1','');
                DefaultDimensionAdvanced.SETFILTER("Value Posting",'%1|%2',
                      DefaultDimensionAdvanced."Value Posting"::"Code Mandatory",
                      DefaultDimensionAdvanced."Value Posting"::"Same Code");
                IF DefaultDimensionAdvanced.FINDSET THEN
                REPEAT
                  IsModify := TRUE;
                  JournalLineDimension.INIT;
                  JournalLineDimension."Table ID" := 81;
                  JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
                  JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
                  JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                  JournalLineDimension."Dimension Code" := DefaultDimensionAdvanced."Dimension Code";
                  JournalLineDimension."Dimension Value Code" := DefaultDimensionAdvanced."Dimension Value Code";
                  IF NOT JournalLineDimension.INSERT THEN BEGIN
                    IF DefaultDimensionAdvanced."Value Posting"=DefaultDimensionAdvanced."Value Posting"::"Same Code" THEN
                      JournalLineDimension.MODIFY;
                  END ELSE
                    IsModify := FALSE;

                  IF IsModify THEN BEGIN
                    IF GLSetup."Global Dimension 1 Code" <> '' THEN
                      IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN BEGIN
                        GenJournalLine."Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";

                      END;
                    IF GLSetup."Global Dimension 2 Code" <> '' THEN
                      IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN BEGIN
                        GenJournalLine."Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";

                      END;
                  END;
                UNTIL DefaultDimensionAdvanced.NEXT = 0;
                //NC NCS-2312 < DP

              END;
            END;
            //NC MTD03 < AIG
          UNTIL TempCreditLedgEntryDim.NEXT = 0;
      END;
      //NC MTD11 > AIG
      //добавление стандартной аналитики с карточки фин. инструмента
      DefaultDimension.RESET;
      DefaultDimension.SETRANGE("Table ID", 50021);
      DefaultDimension.SETRANGE("No.", GenJournalLine."Financial Instrument No.");
      // NC NC-973 > SKV
      // 2-й случай обрабоки стандартных измерений ФИ
      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
      // Это измерение будет обработанно особенным образом
      DefaultDimension.SETFILTER("Dimension Code", '<>%1', MovingDataSetup."INC.TAX Dimension Code");
      // NC NC-973 < SKV

      IF DefaultDimension.FINDFIRST THEN
      REPEAT
        JournalLineDimension.INIT;
        JournalLineDimension."Table ID" := 81;
        JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
        JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
        JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
        JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
        JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
        IF NOT JournalLineDimension.INSERT THEN;
      UNTIL DefaultDimension.NEXT = 0;
      // NC NC-973 > SKV
      // считаем, что если по мэппнгу измерение проставилось - ничего делать не надо
      IncTaxDimCode := GenJournalLine.GetIncTaxDimCode(JnlLineDimExists);
        IF IncTaxDimCode = '' THEN BEGIN
          IF JnlLineDimExists THEN
          // Измерение может быть пустым, но запись в таблице существует
            GenJournalLine.DeleteIncTaxDimCode;
          GenJournalLine.InsertIncTaxDimCode;
        END;
      // NC NC-973 < SKV

      //NC MTD11 < AIG


      GenJournalLine.INSERT;

      //NC MDTY01 > MP
      IF ConsolidationSource."Use GL Mapping" AND (NOT GenJournalLine."Except Correspondence") THEN BEGIN
        FXAmountLCY += ROUND(GenJournalLine."Amount (LCY)",0.01);
        IF ROUND(FXAmountLCY,0.01) <> 0 THEN
          CreateJnlLineFX(GenJournalLine,ConsBuffer, ConsolidationSource,
          //NC MTD02 > AIG
          {
                          TempDebitLedgEntryDim,TempCreditLedgEntryDim,FXAmountLCY,DTGLAccCode,GenJournalLine."Account No.",
          }
                          TempDebitLedgEntryDim,TempCreditLedgEntryDim,FXAmountLCY,DTGLAccCode,GetFXAccount(GenJournalLine),
          //NC MTD02 < AIG
                          //OffBSTransaction);
                          FALSE); //по результатам статуса 11.02.2010 всегда постим на балансовый ПЛ
      END;
      //NC MDTY01 < MP

      //NC MDTC01 < MP
    END;

    PROCEDURE GetAmountsNone@1000000042(GLBuff@1000000003 : Record 50008;ConsSourceCurrencyCode@1000000000 : Code[20];MappingCode@1000000004 : Code[20];VAR GLEntryTemp@1000000001 : TEMPORARY Record 17;Type@1000000002 : 'Debit,Credit');
    VAR
      GLMapp@1000000005 : Record 50002;
      CurrExchRate@1000000006 : Record 330;
      GLAcc@1000000007 : Record 15;
      AccType@1000000009 : 'IncSt,BS,OffBS,None';
    BEGIN
      //NC MDTY01 > MP
      IF GLBuff."Amount Difference" THEN BEGIN
        GetAmountsDiff(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
        EXIT;
      END;

      //NC MIO-10 > DP

      //NC MIO-10.13 > DP
      IF (Type = Type::Debit) AND (DTMappLineNo<>2147483647) THEN BEGIN
      {
      IF Type = Type::Debit THEN BEGIN
      }
      //NC MIO-10.13 < DP

        GLMapp.GET(MappingCode,DTMappLineNo);

      //NC MIO-10.13 > DP
      END ELSE
      IF (Type = Type::Credit) AND (CTMappLineNo<>2147483647) THEN BEGIN
      {
      END ELSE BEGIN
      }
      //NC MIO-10.13 < DP

        GLMapp.GET(MappingCode,CTMappLineNo);
      END;

      //NC MIO-10.13 > DP
      IF ((Type = Type::Debit) AND (DTMappLineNo<>2147483647)) OR ((Type = Type::Credit) AND (CTMappLineNo<>2147483647)) THEN
      //NC MIO-10.13 < DP

      IF GLMapp."Convert to Currency Code" <>'' THEN BEGIN
        GetAmountsConvert(GLBuff,ConsSourceCurrencyCode,GLMapp,GLEntryTemp,Type);
        EXIT;
      END;
      //NC MIO-10 < DP

      IF Type = Type::Debit THEN BEGIN
        IF ConsSourceCurrencyCode = '' THEN BEGIN //локальные валюты во внешней системе и в нав совпадают
          IF ((GLBuff."Debit Currency Code" = '') AND
               ((GLBuff."Debit Original Amount" = 0) OR (GLBuff."Debit Original Amount" = GLBuff."Amount (LCY)"))
              OR
              ((GLBuff."Debit Currency Code" = GLSetup."LCY Code") AND
               (GLBuff."Debit Original Amount" = GLBuff."Amount (LCY)")))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := GLBuff."Amount (LCY)";
            GLEntryTemp.Amount := GLBuff."Amount (LCY)";
            GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)";
          END;
          IF ((GLBuff."Debit Currency Code" <> '') AND (GLBuff."Debit Currency Code" <> GLSetup."LCY Code")) THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConvertCurrencyCode(GLBuff."Debit Currency Code");
            GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";
            GLEntryTemp.Amount := GLBuff."Amount (LCY)";
            GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)";
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN

                //NC NCS-953 > DP
                IF GLBuff.Reverse THEN
                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                ELSE
                //NC NCS-953 < DP

                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
          END;
        END ELSE BEGIN //локальные валюты во внешней системе и в нав НЕ совпадают
          IF ((GLBuff."Debit Currency Code" = '') AND
               ((GLBuff."Debit Original Amount" = 0) OR (GLBuff."Debit Original Amount" = GLBuff."Amount (LCY)"))
              OR
              ((GLBuff."Debit Currency Code" = ConsSourceCurrencyCode) AND
               (GLBuff."Debit Original Amount" = GLBuff."Amount (LCY)")))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
            GLEntryTemp."Original Amount" := GLBuff."Amount (LCY)";
            //GLEntryTemp.Amount := //GLBuff."Amount (LCY)"; //тут все равно, какой счет - BS или PL

            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
            ELSE
            //NC NCS-953 < DP

            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLBuff."Document Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLBuff."Document Date",
                                       GLEntryTemp."Original Currency Code"));

            GLEntryTemp."Debit Amount" := GLEntryTemp.Amount;
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN

                //NC NCS-953 > DP
                IF GLBuff.Reverse THEN
                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                ELSE
                //NC NCS-953 < DP

                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
          END;
          IF GLBuff."Debit Currency Code" = GLSetup."LCY Code" THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";
            GLEntryTemp.Amount := GLBuff."Debit Original Amount";
            GLEntryTemp."Debit Amount" := GLBuff."Debit Original Amount";
          END;
          IF (GLBuff."Debit Currency Code" <> '') AND (GLBuff."Debit Currency Code" <> GLSetup."LCY Code") AND
             (GLBuff."Debit Currency Code" <> ConsSourceCurrencyCode)
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConvertCurrencyCode(GLBuff."Debit Currency Code");
            GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";
            {
            IF PlBS = PlBS::None THEN BEGIN
              GLMapp.GET(MappingCode,DTMappLineNo);
              GLAcc.GET(GLMapp."Receiver Account Code");
              AccType := GLAcc."Income/Balance";
            END ELSE
              AccType := PlBS;
            IF (AccType = AccType::BS) OR (AccType = AccType::OffBS) THEN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                       GLBuff."Document Date",
                                       GLEntryTemp."Original Currency Code",
                                       GLEntryTemp."Original Amount",
                                       CurrExchRate.ExchangeRate(
                                         GLBuff."Document Date",
                                         GLEntryTemp."Original Currency Code"))
            ELSE
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                       GLBuff."Document Date",
                                       ConsSourceCurrencyCode,
                                       GLBuff."Amount (LCY)",
                                       CurrExchRate.ExchangeRate(
                                         GLBuff."Document Date",
                                         ConsSourceCurrencyCode));
            }

            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
            ELSE
            //NC NCS-953 < DP

            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLBuff."Document Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLBuff."Document Date",
                                       GLEntryTemp."Original Currency Code"));
            IF GLBuff."Amount (LCY)" <> 0 THEN
              GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") *
                                          ABS(GLEntryTemp.Amount);
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN

                //NC NCS-953 > DP
                IF GLBuff.Reverse THEN
                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                ELSE
                //NC NCS-953 < DP

                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
          END;
        END;
      END ELSE BEGIN
        IF ConsSourceCurrencyCode = '' THEN BEGIN //локальные валюты во внешней системе и в нав совпадают
          IF ((GLBuff."Credit Currency Code" = '') AND
               ((GLBuff."Credit Original Amount" = 0) OR (GLBuff."Credit Original Amount" = GLBuff."Amount (LCY)"))
              OR
              ((GLBuff."Credit Currency Code" = GLSetup."LCY Code") AND
               (GLBuff."Credit Original Amount" = GLBuff."Amount (LCY)")))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := -GLBuff."Amount (LCY)";
            GLEntryTemp.Amount := -GLBuff."Amount (LCY)";
            GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)";
          END;
          IF ((GLBuff."Credit Currency Code" <> '') AND (GLBuff."Credit Currency Code" <> GLSetup."LCY Code")) THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConvertCurrencyCode(GLBuff."Credit Currency Code");
            GLEntryTemp."Original Amount" := -GLBuff."Credit Original Amount";
            GLEntryTemp.Amount := -GLBuff."Amount (LCY)";
            GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)";
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN

                //NC NCS-953 > DP
                IF GLBuff.Reverse THEN
                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                ELSE
                //NC NCS-953 < DP

                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
          END;
        END ELSE BEGIN //локальные валюты во внешней системе и в нав НЕ совпадают
          IF ((GLBuff."Credit Currency Code" = '') AND
               ((GLBuff."Credit Original Amount" = 0) OR (GLBuff."Credit Original Amount" = GLBuff."Amount (LCY)"))
              OR
              ((GLBuff."Credit Currency Code" = ConsSourceCurrencyCode) AND
               (GLBuff."Credit Original Amount" = GLBuff."Amount (LCY)")))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
            GLEntryTemp."Original Amount" := -GLBuff."Amount (LCY)";

            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
            ELSE
            //NC NCS-953 < DP

            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLBuff."Document Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLBuff."Document Date",
                                       GLEntryTemp."Original Currency Code"));

            GLEntryTemp."Credit Amount" := -GLEntryTemp.Amount;
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN

                //NC NCS-953 > DP
                IF GLBuff.Reverse THEN
                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                ELSE
                //NC NCS-953 < DP

                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
          END;
          IF GLBuff."Credit Currency Code" = GLSetup."LCY Code" THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := -GLBuff."Credit Original Amount";
            GLEntryTemp.Amount := -GLBuff."Credit Original Amount";
            GLEntryTemp."Credit Amount" := GLBuff."Credit Original Amount";
          END;
          IF (GLBuff."Credit Currency Code" <> '') AND (GLBuff."Credit Currency Code" <> GLSetup."LCY Code") AND
             (GLBuff."Credit Currency Code" <> ConsSourceCurrencyCode)
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConvertCurrencyCode(GLBuff."Credit Currency Code");
            GLEntryTemp."Original Amount" := - GLBuff."Credit Original Amount";
            {
            IF PlBS = PlBS::None THEN BEGIN
              GLMapp.GET(MappingCode,CTMappLineNo);
              GLAcc.GET(GLMapp."Receiver Account Code");
              AccType := GLAcc."Income/Balance";
            END ELSE
              AccType := PlBS;
            IF (AccType = AccType::BS) OR (AccType = AccType::OffBS) THEN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                       GLBuff."Document Date",
                                       GLEntryTemp."Original Currency Code",
                                       GLEntryTemp."Original Amount",
                                       CurrExchRate.ExchangeRate(
                                         GLBuff."Document Date",
                                         GLEntryTemp."Original Currency Code"))
            ELSE
              GLEntryTemp.Amount := -CurrExchRate.ExchangeAmtFCYToLCY(
                                       GLBuff."Document Date",
                                       ConsSourceCurrencyCode,
                                       GLBuff."Amount (LCY)",
                                       CurrExchRate.ExchangeRate(
                                         GLBuff."Document Date",
                                         ConsSourceCurrencyCode));
            }
            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
            ELSE
            //NC NCS-953 < DP

            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLBuff."Document Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLBuff."Document Date",
                                       GLEntryTemp."Original Currency Code"));
            IF GLBuff."Amount (LCY)" <> 0 THEN
              GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") *
                                          ABS(GLEntryTemp.Amount);
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN

                //NC NCS-953 > DP
                IF GLBuff.Reverse THEN
                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                ELSE
                //NC NCS-953 < DP

                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
          END;
        END;
      END;
      //NC MDTY01 < MP
    END;

    PROCEDURE GetAmountsPosition@1101495000(GLBuff@1000000003 : Record 50008;ConsSourceCurrencyCode@1000000000 : Code[20];MappingCode@1000000004 : Code[20];VAR GLEntryTemp@1000000001 : TEMPORARY Record 17;Type@1000000002 : 'Debit,Credit');
    VAR
      GLMapp@1000000005 : Record 50002;
      CurrExchRate@1000000006 : Record 330;
      GLAcc@1000000007 : Record 15;
      LocGLAccTmp@1101495000 : TEMPORARY Record 15;
      FICode@1101495001 : Code[20];
      FI@1101495002 : Record 50021;
      FIType@1101495003 : Record 50051;
      Emitent@1101495004 : Record 18;
      Country@1101495005 : Record 9;
      NewOriginalCurrencyCode@1101495006 : Code[10];
      l_recDeal@1000000010 : Record 50037;
      l_recDealType@1000000009 : Record 50038;
      l_codeDeal@1000000008 : Code[20];
    BEGIN
      //NC MDTY01 > MP
      IF GLBuff."Amount Difference" THEN BEGIN
        GetAmountsDiff(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
        EXIT;
      END;
      IF Type = Type::Debit THEN BEGIN
        //NC MTD06 > AIG
        IF OffsetExceptionsDT THEN BEGIN
          GetAmountsNone(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
          EXIT;
         END;
        //NC MTD06 < AIG
        GLMapp.GET(MappingCode,DTMappLineNo);
      END ELSE BEGIN
        //NC MTD06 > AIG
        IF OffsetExceptionsCT THEN BEGIN
          GetAmountsNone(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
          EXIT;
         END;
        //NC MTD06 < AIG
        GLMapp.GET(MappingCode,CTMappLineNo);
      END;

      GLAcc.GET(GLMapp."Receiver Account Code");
      IF NOT GLAcc."FI Required" THEN BEGIN
        GetAmountsNone(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
        EXIT;
      END;

      LocGLAccTmp.RESET;
      LocGLAccTmp.DELETEALL;
      IF Type = Type::Debit THEN BEGIN
        LocGLAccTmp."No." := GLBuff."Debit G/L Account No.";
      END ELSE BEGIN
        LocGLAccTmp."No." := GLBuff."Credit G/L Account No.";
      END;

      LocGLAccTmp.INSERT;
      LocGLAccTmp.SETFILTER("No.",ConsolidationSetup."Position Ext. G/L Account Filt");
      IF LocGLAccTmp.ISEMPTY THEN BEGIN
        GetAmountsNone(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
        EXIT;
      END;

      IF Type = Type::Debit THEN BEGIN
        TempDebitLedgEntryDim.GET(17,GLBuff."Entry No.",ConsolidationSetup."Fin. Instrument Dimension Code");
        FICode := TempDebitLedgEntryDim."Dimension Value Code";
        //TDRANCS-1269>
        IF TempDebitLedgEntryDim.GET(17,GLBuff."Entry No.",ConsolidationSetup."Deal Dimension Code") THEN
          l_codeDeal := TempDebitLedgEntryDim."Dimension Value Code";
        //TDRANCS-1269<
      END ELSE BEGIN
        TempCreditLedgEntryDim.GET(17,GLBuff."Entry No.",ConsolidationSetup."Fin. Instrument Dimension Code");
        FICode := TempCreditLedgEntryDim."Dimension Value Code";
        //TDRANCS-1269>
        IF TempCreditLedgEntryDim.GET(17,GLBuff."Entry No.",ConsolidationSetup."Deal Dimension Code") THEN
          l_codeDeal := TempCreditLedgEntryDim."Dimension Value Code";
        //TDRANCS-1269<
      END;

      IF NOT FI.GET(FICode) THEN BEGIN
        GetAmountsNone(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
        EXIT;
      END;
      IF NOT FIType.GET(FI."Type FI") THEN BEGIN
        GetAmountsNone(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
        EXIT;
      END;
      IF NOT FIType."Change Original Currency" THEN BEGIN
        GetAmountsNone(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
        EXIT;
      //TDRANCS-1269>
      END ELSE BEGIN
        IF l_recDeal.GET(l_codeDeal) THEN
          IF l_recDealType.GET(l_recDeal."Type Deal") THEN
            IF NOT l_recDealType."Change Original Currency" THEN BEGIN
              GetAmountsNone(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
              EXIT;
            END;
      END;
      //TDRANCS-1269<


      //NC MDTY01 > MP
      {
      Emitent.GET(FI."Customer No.");
      Country.GET(Emitent."Country/Region Code");
      NewOriginalCurrencyCode := GetCurrencyCode2(Country."Currency Code");
      }
      NewOriginalCurrencyCode := ConvertCurrencyCode2(FI."Currency of Nominal");
      //NC MDTY01 < MP eeee

      IF Type = Type::Debit THEN BEGIN
        GLEntryTemp."Original Currency Code" := NewOriginalCurrencyCode;
        //NC MTD06.1 > DP
        {
        IF NewOriginalCurrencyCode <> ConvertCurrencyCode2(GLBuff."Debit Currency Code") THEN
        }
        IF ((NewOriginalCurrencyCode <> ConvertCurrencyCode2(GLBuff."Debit Currency Code")) AND (GLBuff."Debit Currency Code"<>'')) OR
          ((NewOriginalCurrencyCode <> ConsSourceCurrencyCode) AND (GLBuff."Debit Currency Code"=''))
        THEN
        //NC MTD06.1 < DP
          //NC NCS-953 > DP
          IF GLBuff.Reverse THEN
            GLEntryTemp."Original Amount" := ROUND(CurrExchRate.ExchangeAmtFCYToFCY(GLEntryTemp."Historical Date",
                                                                                  ConsSourceCurrencyCode,
                                                                                  NewOriginalCurrencyCode,
                                                                                  GLBuff."Amount (LCY)"),0.01)
          ELSE
          //NC NCS-953 < DP

          GLEntryTemp."Original Amount" := ROUND(CurrExchRate.ExchangeAmtFCYToFCY(GLBuff."Document Date",
                                                                                  ConsSourceCurrencyCode,
                                                                                  NewOriginalCurrencyCode,
                                                                                  GLBuff."Amount (LCY)"),0.01)
        ELSE
          GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";

        //NC NCS-953 > DP
        IF GLBuff.Reverse THEN
          GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
        ELSE
        //NC NCS-953 < DP

        GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                 GLBuff."Document Date",
                                 GLEntryTemp."Original Currency Code",
                                 GLEntryTemp."Original Amount",
                                 CurrExchRate.ExchangeRate(
                                   GLBuff."Document Date",
                                   GLEntryTemp."Original Currency Code"));
        IF GLBuff."Amount (LCY)" <> 0 THEN
          GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") * ABS(GLEntryTemp.Amount);
        IF GLEntryTemp.Amount <> 0 THEN
          GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
        ELSE

          //NC NCS-953 > DP
          IF GLBuff.Reverse THEN
            GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
          ELSE
          //NC NCS-953 < DP

          GLEntryTemp."Original Currency Factor" :=
            CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
        //NC MDTC01.01 > MP
        IsDebitPositionAmount := TRUE;
        //NC MDTC01.01 < MP
      END ELSE BEGIN
        GLEntryTemp."Original Currency Code" := NewOriginalCurrencyCode;
        //NC MTD06.1 > DP
        {
        IF NewOriginalCurrencyCode <> ConvertCurrencyCode2(GLBuff."Credit Currency Code") THEN
        }
        IF ((NewOriginalCurrencyCode <> ConvertCurrencyCode2(GLBuff."Credit Currency Code")) AND (GLBuff."Credit Currency Code"<>'')) OR
          ((NewOriginalCurrencyCode <> ConsSourceCurrencyCode) AND (GLBuff."Credit Currency Code"=''))
        THEN
        //NC MTD06.1 < DP

        //NC NCS-953 > DP
        IF GLBuff.Reverse THEN
          GLEntryTemp."Original Amount" := -ROUND(CurrExchRate.ExchangeAmtFCYToFCY(GLEntryTemp."Historical Date",
                                                                                 ConsSourceCurrencyCode,
                                                                                 NewOriginalCurrencyCode,
                                                                                 GLBuff."Amount (LCY)"),0.01)
        ELSE
        //NC NCS-953 < DP

          GLEntryTemp."Original Amount" := -ROUND(CurrExchRate.ExchangeAmtFCYToFCY(GLBuff."Document Date",
                                                                                   ConsSourceCurrencyCode,
                                                                                   NewOriginalCurrencyCode,
                                                                                   GLBuff."Amount (LCY)"),0.01)
        ELSE
          GLEntryTemp."Original Amount" := -GLBuff."Credit Original Amount";

        //NC NCS-953 > DP
        IF GLBuff.Reverse THEN
          GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
        ELSE
        //NC NCS-953 < DP

        GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                 GLBuff."Document Date",
                                 GLEntryTemp."Original Currency Code",
                                 GLEntryTemp."Original Amount",
                                 CurrExchRate.ExchangeRate(
                                   GLBuff."Document Date",
                                   GLEntryTemp."Original Currency Code"));
        IF GLBuff."Amount (LCY)" <> 0 THEN
          GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") * ABS(GLEntryTemp.Amount);
        IF GLEntryTemp.Amount <> 0 THEN
          GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
        ELSE
          //NC NCS-953 > DP
          IF GLBuff.Reverse THEN
            GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
          ELSE
          //NC NCS-953 < DP

          GLEntryTemp."Original Currency Factor" :=
            CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
        //NC MDTC01.01 > MP
        IsCreditPositionAmount := TRUE;
        //NC MDTC01.01 < MP
      END;
      //NC MDTY01 < MP
    END;

    PROCEDURE GetAmountsRates@1101495001(GLBuff@1000000003 : Record 50008;ConsSourceCurrencyCode@1000000000 : Code[20];MappingCode@1000000004 : Code[20];VAR GLEntryTemp@1000000001 : TEMPORARY Record 17;Type@1000000002 : 'Debit,Credit');
    VAR
      GLMapp@1000000005 : Record 50002;
      CurrExchRate@1000000006 : Record 330;
      GLAcc@1000000007 : Record 15;
      ExchRate@1101495000 : Decimal;
      OrigCurrCode@1101495001 : Code[10];
      CurrExchRateDate@1101495002 : Date;
    BEGIN
      //NC MDTY01 > MP
      IF GLBuff."Amount Difference" THEN BEGIN
        GetAmountsDiff(GLBuff,ConsSourceCurrencyCode,MappingCode,GLEntryTemp,Type);
        EXIT;
      END;
      IF Type = Type::Debit THEN BEGIN
        IF ConsSourceCurrencyCode = '' THEN BEGIN //локальные валюты во внешней системе и в нав совпадают
          IF ((GLBuff."Debit Currency Code" = '') AND
               ((GLBuff."Debit Original Amount" = 0) OR (GLBuff."Debit Original Amount" = GLBuff."Amount (LCY)"))
              OR
              ((GLBuff."Debit Currency Code" = GLSetup."LCY Code") AND
               (GLBuff."Debit Original Amount" = GLBuff."Amount (LCY)")))
          THEN BEGIN //Тут курс проверять не надо, всегда совпадают!
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := GLBuff."Amount (LCY)";
            GLEntryTemp.Amount := GLBuff."Amount (LCY)";
            GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)";
          END;

          //NC NCS-953 > DP
          IF GLBuff.Reverse THEN
            CurrExchRateDate := GLEntryTemp."Historical Date"
          ELSE
            CurrExchRateDate := GLBuff."Document Date";

          IF ((GLBuff."Debit Currency Code" <> '') AND (GLBuff."Debit Currency Code" <> GLSetup."LCY Code")) THEN BEGIN
            IF IsCBRates(ConvertCurrencyCode2(GLBuff."Debit Currency Code"),ConsSourceCurrencyCode,
                         GLBuff."Debit Original Amount",GLBuff."Amount (LCY)",CurrExchRateDate)
          {
          IF ((GLBuff."Debit Currency Code" <> '') AND (GLBuff."Debit Currency Code" <> GLSetup."LCY Code")) THEN BEGIN
            IF IsCBRates(ConvertCurrencyCode2(GLBuff."Debit Currency Code"),ConsSourceCurrencyCode,
                         GLBuff."Debit Original Amount",GLBuff."Amount (LCY)",GLBuff."Document Date")
          }
          //NC NCS-953 < DP

            THEN BEGIN
              GLEntryTemp."Original Currency Code" := ConvertCurrencyCode2(GLBuff."Debit Currency Code");
              GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";
              //GLEntryTemp.Amount := GLBuff."Amount (LCY)";

              //NC NCS-953 > DP
              IF GLBuff.Reverse THEN BEGIN
                ExchRate := CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",ConsSourceCurrencyCode);
                GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
              END ELSE BEGIN
              //NC NCS-953 < DP

              ExchRate := CurrExchRate.ExchangeRate(GLBuff."Document Date",ConsSourceCurrencyCode);
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLBuff."Document Date",
                                                                     GLEntryTemp."Original Currency Code",
                                                                     GLEntryTemp."Original Amount",
                                                                     CurrExchRate.ExchangeRate(GLBuff."Document Date",
                                                                                               GLEntryTemp."Original Currency Code"));

              //NC NCS-953 > DP
              END;
              //NC NCS-953 < DP

              IF GLBuff."Amount (LCY)" <> 0 THEN
                GLEntryTemp."Debit Amount" := ABS(GLEntryTemp.Amount) * GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)");
              IF GLEntryTemp.Amount <> 0 THEN
                GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
              ELSE
                IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
            END ELSE BEGIN
              GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;

              //NC NCS-953 > DP
              IF GLBuff.Reverse THEN BEGIN
                ExchRate := CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",ConsSourceCurrencyCode);
                GLEntryTemp."Original Amount" := CurrExchRate.ExchangeAmtLCYToFCY(GLEntryTemp."Historical Date",
                                                                                ConsSourceCurrencyCode,
                                                                                GLBuff."Amount (LCY)",
                                                                                ExchRate);
                GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     ConsSourceCurrencyCode,
                                     GLEntryTemp."Original Amount",
                                     ExchRate);

              END ELSE BEGIN
              //NC NCS-953 < DP

              ExchRate := CurrExchRate.ExchangeRate(GLBuff."Document Date",ConsSourceCurrencyCode);
              GLEntryTemp."Original Amount" := CurrExchRate.ExchangeAmtLCYToFCY(GLBuff."Document Date",
                                                                                ConsSourceCurrencyCode,
                                                                                GLBuff."Amount (LCY)",
                                                                                ExchRate);
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLBuff."Document Date",
                                                                     ConsSourceCurrencyCode,
                                                                     GLEntryTemp."Original Amount",
                                                                     ExchRate);
              //NC NCS-953 > DP
              END;
              //NC NCS-953 < DP

              IF GLBuff."Amount (LCY)" <> 0 THEN
                GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") * ABS(GLEntryTemp.Amount);
              IF GLEntryTemp.Amount <> 0 THEN
                GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
              ELSE
                IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
            END;
          END;
        END ELSE BEGIN //локальные валюты во внешней системе и в нав НЕ совпадают
          IF ((GLBuff."Debit Currency Code" = '') AND
               ((GLBuff."Debit Original Amount" = 0) OR (GLBuff."Debit Original Amount" = GLBuff."Amount (LCY)"))
              OR
              ((GLBuff."Debit Currency Code" = ConsSourceCurrencyCode) AND
               (GLBuff."Debit Original Amount" = GLBuff."Amount (LCY)")))
          THEN BEGIN // тут курс проверять не надо, они всегда совпадают
            GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
            GLEntryTemp."Original Amount" := GLBuff."Amount (LCY)";
            //GLEntryTemp.Amount := //GLBuff."Amount (LCY)"; //тут все равно, какой счет - BS или PL

            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
            ELSE
            //NC NCS-953 < DP
            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Posting Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Posting Date",
                                       GLEntryTemp."Original Currency Code"));

            GLEntryTemp."Debit Amount" := GLEntryTemp.Amount;
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
          END;
          {
          IF GLBuff."Debit Currency Code" = GLSetup."LCY Code" THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";
            GLEntryTemp.Amount := GLBuff."Debit Original Amount";
            GLEntryTemp."Debit Amount" := GLBuff."Debit Original Amount";
          END;
          }
          IF ((GLBuff."Debit Currency Code" <> '') AND (GLBuff."Debit Currency Code" <> ConsSourceCurrencyCode)) OR
           (GLBuff."Debit Currency Code" = GLSetup."LCY Code")
          THEN BEGIN

            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              CurrExchRateDate := GLEntryTemp."Historical Date"
            ELSE
              CurrExchRateDate := GLBuff."Document Date";

            IF IsCBRates(ConvertCurrencyCode2(GLBuff."Debit Currency Code"),ConsSourceCurrencyCode,
                         GLBuff."Debit Original Amount",GLBuff."Amount (LCY)",CurrExchRateDate)
            {
            IF IsCBRates(ConvertCurrencyCode2(GLBuff."Debit Currency Code"),ConsSourceCurrencyCode,
                         GLBuff."Debit Original Amount",GLBuff."Amount (LCY)",GLBuff."Document Date")
            }
            //NC NCS-953 < DP

            THEN BEGIN
              GLEntryTemp."Original Currency Code" := ConvertCurrencyCode2(GLBuff."Debit Currency Code");
              GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";
              //GLEntryTemp.Amount := GLBuff."Amount (LCY)";

              //NC NCS-953 > DP
              IF GLBuff.Reverse THEN BEGIN
                ExchRate := CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",ConsSourceCurrencyCode);
                GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLEntryTemp."Historical Date",
                                                                     GLEntryTemp."Original Currency Code",
                                                                     GLEntryTemp."Original Amount",
                                                                     CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",
                                                                                               GLEntryTemp."Original Currency Code"));

              END ELSE BEGIN
              //NC NCS-953 < DP

              ExchRate := CurrExchRate.ExchangeRate(GLBuff."Document Date",ConsSourceCurrencyCode);
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLBuff."Document Date",
                                                                     GLEntryTemp."Original Currency Code",
                                                                     GLEntryTemp."Original Amount",
                                                                     CurrExchRate.ExchangeRate(GLBuff."Document Date",
                                                                                               GLEntryTemp."Original Currency Code"));
              //NC NCS-953 > DP
              END;
              //NC NCS-953 < DP

              IF GLBuff."Amount (LCY)" <> 0 THEN
                GLEntryTemp."Debit Amount" := ABS(GLEntryTemp.Amount) * GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)");
              IF GLEntryTemp.Amount <> 0 THEN
                GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
              ELSE
                IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
            END ELSE BEGIN
              GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;

              //NC NCS-953 > DP
              IF GLBuff.Reverse THEN BEGIN
                ExchRate := CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",ConsSourceCurrencyCode);
                GLEntryTemp."Original Amount" := GLBuff."Amount (LCY)";
                GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLEntryTemp."Historical Date",
                                                                     ConsSourceCurrencyCode,
                                                                     GLEntryTemp."Original Amount",
                                                                     ExchRate);

              END ELSE BEGIN
              //NC NCS-953 < DP

              ExchRate := CurrExchRate.ExchangeRate(GLBuff."Document Date",ConsSourceCurrencyCode);
              GLEntryTemp."Original Amount" := GLBuff."Amount (LCY)";
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLBuff."Document Date",
                                                                     ConsSourceCurrencyCode,
                                                                     GLEntryTemp."Original Amount",
                                                                     ExchRate);
              //NC NCS-953 > DP
              END;
              //NC NCS-953 < DP

              IF GLBuff."Amount (LCY)" <> 0 THEN
                GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") * ABS(GLEntryTemp.Amount);
              IF GLEntryTemp.Amount <> 0 THEN
                GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
              ELSE
                IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
            END;
          END;
        END;
      END ELSE BEGIN
        IF ConsSourceCurrencyCode = '' THEN BEGIN //локальные валюты во внешней системе и в нав совпадают
          IF ((GLBuff."Credit Currency Code" = '') AND
               ((GLBuff."Credit Original Amount" = 0) OR (GLBuff."Credit Original Amount" = GLBuff."Amount (LCY)"))
              OR
              ((GLBuff."Credit Currency Code" = GLSetup."LCY Code") AND
               (GLBuff."Credit Original Amount" = GLBuff."Amount (LCY)")))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := -GLBuff."Amount (LCY)";
            GLEntryTemp.Amount := -GLBuff."Amount (LCY)";
            GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)";
          END;
          IF ((GLBuff."Credit Currency Code" <> '') AND (GLBuff."Credit Currency Code" <> GLSetup."LCY Code")) THEN BEGIN

            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              CurrExchRateDate := GLEntryTemp."Historical Date"
            ELSE
              CurrExchRateDate := GLBuff."Document Date";
            IF IsCBRates(ConvertCurrencyCode2(GLBuff."Credit Currency Code"),ConsSourceCurrencyCode,
                         GLBuff."Credit Original Amount",GLBuff."Amount (LCY)",CurrExchRateDate)
            {
            IF IsCBRates(ConvertCurrencyCode2(GLBuff."Credit Currency Code"),ConsSourceCurrencyCode,
                         GLBuff."Credit Original Amount",GLBuff."Amount (LCY)",GLBuff."Document Date")
            }
            //NC NCS-953 < DP

            THEN BEGIN
              GLEntryTemp."Original Currency Code" := ConvertCurrencyCode2(GLBuff."Credit Currency Code");
              GLEntryTemp."Original Amount" := -GLBuff."Credit Original Amount";
              //GLEntryTemp.Amount := -GLBuff."Amount (LCY)";

              //NC NCS-953 > DP
              IF GLBuff.Reverse THEN BEGIN
                ExchRate := CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",ConsSourceCurrencyCode);
                GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLEntryTemp."Historical Date",
                                                                     GLEntryTemp."Original Currency Code",
                                                                     GLEntryTemp."Original Amount",
                                                                     CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",
                                                                                               GLEntryTemp."Original Currency Code"));

              END ELSE BEGIN
              //NC NCS-953 < DP

              ExchRate := CurrExchRate.ExchangeRate(GLBuff."Document Date",ConsSourceCurrencyCode);
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLBuff."Document Date",
                                                                     GLEntryTemp."Original Currency Code",
                                                                     GLEntryTemp."Original Amount",
                                                                     CurrExchRate.ExchangeRate(GLBuff."Document Date",
                                                                                               GLEntryTemp."Original Currency Code"));

              //NC NCS-953 > DP
              END;
              //NC NCS-953 < DP

              IF GLBuff."Amount (LCY)" <> 0 THEN
                GLEntryTemp."Credit Amount" := ABS(GLEntryTemp.Amount) * GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)");
              IF GLEntryTemp.Amount <> 0 THEN
                GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
              ELSE
                IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
            END ELSE BEGIN
              GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;

              //NC NCS-953 > DP
              IF GLBuff.Reverse THEN BEGIN
                ExchRate := CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",ConsSourceCurrencyCode);
                GLEntryTemp."Original Amount" := -CurrExchRate.ExchangeAmtLCYToFCY(GLEntryTemp."Historical Date",
                                                                                ConsSourceCurrencyCode,
                                                                                GLBuff."Amount (LCY)",
                                                                                ExchRate);
                GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLEntryTemp."Historical Date",
                                                                     ConsSourceCurrencyCode,
                                                                     GLEntryTemp."Original Amount",
                                                                     ExchRate);
              END ELSE BEGIN
              //NC NCS-953 < DP
              ExchRate := CurrExchRate.ExchangeRate(GLBuff."Document Date",ConsSourceCurrencyCode);
              GLEntryTemp."Original Amount" := -CurrExchRate.ExchangeAmtLCYToFCY(GLBuff."Document Date",
                                                                                ConsSourceCurrencyCode,
                                                                                GLBuff."Amount (LCY)",
                                                                                ExchRate);
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLBuff."Document Date",
                                                                     ConsSourceCurrencyCode,
                                                                     GLEntryTemp."Original Amount",
                                                                     ExchRate);
              //NC NCS-953 > DP
              END;
              //NC NCS-953 < DP

              IF GLBuff."Amount (LCY)" <> 0 THEN
                GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") * ABS(GLEntryTemp.Amount);
              IF GLEntryTemp.Amount <> 0 THEN
                GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
              ELSE
                IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
            END;
          END;
        END ELSE BEGIN //локальные валюты во внешней системе и в нав НЕ совпадают
          IF ((GLBuff."Credit Currency Code" = '') AND
               ((GLBuff."Credit Original Amount" = 0) OR (GLBuff."Credit Original Amount" = GLBuff."Amount (LCY)"))
              OR
              ((GLBuff."Credit Currency Code" = ConsSourceCurrencyCode) AND
               (GLBuff."Credit Original Amount" = GLBuff."Amount (LCY)")))
          THEN BEGIN // тут курс проверять не надо, они всегда совпадают
            GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
            GLEntryTemp."Original Amount" := -GLBuff."Amount (LCY)";
            //GLEntryTemp.Amount := //GLBuff."Amount (LCY)"; //тут все равно, какой счет - BS или PL

            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Historical Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Historical Date",
                                       GLEntryTemp."Original Currency Code"))
            ELSE
            //NC NCS-953 < DP

            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLEntryTemp."Posting Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       GLEntryTemp."Posting Date",
                                       GLEntryTemp."Original Currency Code"));

            GLEntryTemp."Credit Amount" := -GLEntryTemp.Amount;
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
          END;
          {
          IF GLBuff."Credit Currency Code" = GLSetup."LCY Code" THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := -GLBuff."Credit Original Amount";
            GLEntryTemp.Amount := GLBuff."Credit Original Amount";
            GLEntryTemp."Credit Amount" := -GLBuff."Credit Original Amount";
          END;
          }
          IF ((GLBuff."Credit Currency Code" <> '') AND (GLBuff."Credit Currency Code" <> ConsSourceCurrencyCode)) OR
           (GLBuff."Credit Currency Code" = GLSetup."LCY Code")
          THEN BEGIN
            //NC NCS-953 > DP
            IF GLBuff.Reverse THEN
              CurrExchRateDate := GLEntryTemp."Historical Date"
            ELSE
              CurrExchRateDate := GLBuff."Document Date";

            IF IsCBRates(ConvertCurrencyCode2(GLBuff."Credit Currency Code"),ConsSourceCurrencyCode,
                         GLBuff."Credit Original Amount",GLBuff."Amount (LCY)",CurrExchRateDate)
            {
            IF IsCBRates(ConvertCurrencyCode2(GLBuff."Credit Currency Code"),ConsSourceCurrencyCode,
                         GLBuff."Credit Original Amount",GLBuff."Amount (LCY)",GLBuff."Document Date")
            }
            //NC NCS-953 < DP
            THEN BEGIN
              GLEntryTemp."Original Currency Code" := ConvertCurrencyCode2(GLBuff."Credit Currency Code");
              GLEntryTemp."Original Amount" := -GLBuff."Credit Original Amount";
              //GLEntryTemp.Amount := GLBuff."Amount (LCY)";
              //NC NCS-953 > DP
              IF GLBuff.Reverse THEN BEGIN
                ExchRate := CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",ConsSourceCurrencyCode);
                GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLEntryTemp."Historical Date",
                                                                     GLEntryTemp."Original Currency Code",
                                                                     GLEntryTemp."Original Amount",
                                                                     CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",
                                                                                               GLEntryTemp."Original Currency Code"));

              END ELSE BEGIN
              //NC NCS-953 < DP
              ExchRate := CurrExchRate.ExchangeRate(GLBuff."Document Date",ConsSourceCurrencyCode);
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLBuff."Document Date",
                                                                     GLEntryTemp."Original Currency Code",
                                                                     GLEntryTemp."Original Amount",
                                                                     CurrExchRate.ExchangeRate(GLBuff."Document Date",
                                                                                               GLEntryTemp."Original Currency Code"));
              //NC NCS-953 > DP
              END;
              //NC NCS-953 < DP

              IF GLBuff."Amount (LCY)" <> 0 THEN
                GLEntryTemp."Credit Amount" := ABS(GLEntryTemp.Amount) * GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)");
              IF GLEntryTemp.Amount <> 0 THEN
                GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount;
            END ELSE BEGIN
              GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
              //NC NCS-953 > DP
              IF GLBuff.Reverse THEN BEGIN
                ExchRate := CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",ConsSourceCurrencyCode);
                GLEntryTemp."Original Amount" := -GLBuff."Amount (LCY)";
                GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLEntryTemp."Historical Date",
                                                                     ConsSourceCurrencyCode,
                                                                     GLEntryTemp."Original Amount",
                                                                     ExchRate);


              END ELSE BEGIN
              //NC NCS-953 < DP
              ExchRate := CurrExchRate.ExchangeRate(GLBuff."Document Date",ConsSourceCurrencyCode);
              GLEntryTemp."Original Amount" := -GLBuff."Amount (LCY)";
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(GLBuff."Document Date",
                                                                     ConsSourceCurrencyCode,
                                                                     GLEntryTemp."Original Amount",
                                                                     ExchRate);
              //NC NCS-953 > DP
              END;
              //NC NCS-953 < DP

              IF GLBuff."Amount (LCY)" <> 0 THEN
                GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") * ABS(GLEntryTemp.Amount);
              IF GLEntryTemp.Amount <> 0 THEN
                GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
              ELSE
                IF GLEntryTemp."Original Currency Code" <> '' THEN

                 //NC NCS-953 > DP
                 IF GLBuff.Reverse THEN
                   GLEntryTemp."Original Currency Factor" :=
                      CurrExchRate.ExchangeRate(GLEntryTemp."Historical Date",GLEntryTemp."Original Currency Code")
                 ELSE
                 //NC NCS-953 < DP

                  GLEntryTemp."Original Currency Factor" :=
                    CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
            END;
          END;
        END;
      END;
      //NC MDTY01 < MP
    END;

    PROCEDURE IsCBRates@1101495002(CurrencyCodeCheck@1101495000 : Code[10];ConsSourceCurrencyCode@1101495001 : Code[10];OriginalAmt@1101495002 : Decimal;AmountLCY@1101495003 : Decimal;PostingDate@1101495008 : Date) : Boolean;
    VAR
      CurrencyRate@1101495004 : Record 330;
      FromCurrency@1101495005 : Record 4;
      ToCurrency@1101495006 : Record 4;
      AmtLCY2Check@1101495007 : Decimal;
      FromCurrencyCode@1101495010 : Code[10];
      ToCurrencyCode@1101495009 : Code[10];
    BEGIN
      //NC MDTY01 > MP
      IF CurrencyCodeCheck <> '' THEN BEGIN
        FromCurrency.GET(CurrencyCodeCheck);
        FromCurrencyCode := FromCurrency."Check Currency Code";
      END;
      IF ConsSourceCurrencyCode <> '' THEN BEGIN
        ToCurrency.GET(ConsSourceCurrencyCode);
        ToCurrencyCode := ToCurrency."Check Currency Code";
      END;
      AmtLCY2Check := ROUND(CurrencyRate.ExchangeAmtFCYToFCY(PostingDate,
                                                             FromCurrencyCode,
                                                             ToCurrencyCode,OriginalAmt),0.01);
      EXIT(AmtLCY2Check = ROUND(AmountLCY,0.01));
      //NC MDTY01 < MP
    END;

    PROCEDURE CreateJnlLineFX@1101495004(SourceGenJnlLine@1101495001 : Record 81;GLBuffer@1101495004 : Record 50008;ConsolidationSource@1101495005 : Record 50001;VAR DebitLedgEntryDimTMP@1000000014 : Record 355;VAR CreditLedgEntryDimTMP@1101495000 : Record 355;FXAmountLCY@1101495006 : Decimal;DTAccountCode@1101495002 : Code[20];CTAccountCode@1101495003 : Code[20];OffBSTr@1000000001 : Boolean);
    VAR
      GenJnlLine@1101495008 : Record 81;
      DimMgt@1101495007 : Codeunit 408;
      GenJnlLineDim@1101495009 : Record 356;
      DimValue@1000000000 : Record 349;
      DefaultDimension@1000000002 : Record 352;
      DefDim@1101495011 : Record 352;
      oldDimValueCode@1101495010 : Code[20];
      GenJournalBatch@1101495012 : Record 232;
      JnlLineDimExists@1101495013 : Boolean;
      IncTaxDimCode@1101495014 : Code[20];
      IsCounterpartyDim@1101495015 : Boolean;
      CounterpartyDimCode@1101495016 : Code[20];
      RealCounterpartyDimCode@1101495017 : Code[20];
    BEGIN
      //NC MDTY01 > MP
      GenJnlLine.INIT;
      GenJnlLine."Journal Template Name" := SourceGenJnlLine."Journal Template Name";
      //NC MTD06 > AIG
      IF OffsetExceptionsDT OR OffsetExceptionsCT THEN
        GenJnlLine."Journal Batch Name" := ConsolidationSource."Offset Accounts Journal Batch"
      ELSE
      //NC MTD06 < AIG
      GenJnlLine."Journal Batch Name" := SourceGenJnlLine."Journal Batch Name";

      GenJnlLine."Line No." := GetNextLineNo(SourceGenJnlLine."Journal Template Name",SourceGenJnlLine."Journal Batch Name");
      //NC MDA01 > MP
      {
      GenJnlLine."Source Code" := ConsolidationSetup."Source Code";
      }
      GenJnlLine."Source Code" := SourceCodeSetup.Transformation;
      //NC MDA01 < MP

      GenJnlLine."Posting Date" := SourceGenJnlLine."Posting Date";
      //NC S1304 > PCH
      GenJnlLine."Document Date" := SourceGenJnlLine."Document Date";
      //NC S1304 < PCH
      GenJnlLine."Source Historical Date" := SourceGenJnlLine."Source Historical Date";
      GenJnlLine."Document Type" := SourceGenJnlLine."Document Type";
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      IF NOT OffBSTr THEN
        GenJnlLine."Account No." := ConsolidationSetup."FX Difference G/L Account No."
      ELSE
        GenJnlLine."Account No." := ConsolidationSetup."FX OffBS Diff. G/L Account No.";

      GenJnlLine.Description := SourceGenJnlLine.Description;
      GenJnlLine."Business Unit Code" := SourceGenJnlLine."Business Unit Code";

      GenJnlLine."Special Correspondense" := SourceGenJnlLine."Special Correspondense";
      GenJnlLine.Amount := -FXAmountLCY;
      GenJnlLine.Correction := SourceGenJnlLine.Correction;

      GenJnlLine."Document No." := SourceGenJnlLine."Document No.";
      GenJnlLine."Export Cons. Source Code" := SourceGenJnlLine."Export Cons. Source Code";
      GenJnlLine."Source Entry No." := SourceGenJnlLine."Source Entry No.";
      GenJnlLine."Register No." := SourceGenJnlLine."Register No.";
      GenJnlLine."Export Register No." := SourceGenJnlLine."Export Register No.";
      GenJnlLine."External Document Type" := SourceGenJnlLine."External Document Type";
      GenJnlLine."External Document ID" := SourceGenJnlLine."External Document ID";
      GenJnlLine."External Document Date" := SourceGenJnlLine."External Document Date";
      GenJnlLine."External Operation No" := SourceGenJnlLine."External Operation No";
      GenJnlLine."External Document No." := SourceGenJnlLine."External Document No.";
      GenJnlLine.Removed := SourceGenJnlLine.Removed;
      GenJnlLine.Reposted := SourceGenJnlLine.Reposted;
      GenJnlLine."Balance Entry" := TRUE;
      //NC > PCH
      GenJnlLine."External System ID" := SourceGenJnlLine."External System ID";
      //NC < PCH

      GenJnlLine."FA Operation" := SourceGenJnlLine."FA Operation";

      GenJnlLine."Buffer Entry No." := SourceGenJnlLine."Buffer Entry No.";
      GenJnlLine."Cons. Source Code" := SourceGenJnlLine."Cons. Source Code";
      GenJnlLine."Begining Date" := SourceGenJnlLine."Begining Date";
      GenJnlLine."Ending Date" := SourceGenJnlLine."Ending Date";
      GenJnlLine."Description 2" := SourceGenJnlLine."Description 2";
      GenJnlLine."Transaction Type" := GenJnlLine."Transaction Type"::Automatic;

      //NC APCOC-65 > DP
      IF GenJnlLine.Amount>0 THEN
        GenJnlLine."Local G/L Account" := GLBuffer."Debit G/L Account No."
      ELSE
        GenJnlLine."Local G/L Account" := GLBuffer."Credit G/L Account No.";
      //NC APCOC-65 < DP

      //NC APCOC-94 < DP
      GenJnlLine."Not Translate" := ConsolidationSource."Not Translate";
      //NC APCOC-94 > DP
      //NC APCOC-117 > RD
      GenJnlLine."Not Translate IFRS" := ConsolidationSource."Not Translate IFRS";
      //NC APCOC-117 < RD

      //NC PACOC-112 > PCH
      IF (OffsetExceptionsDT OR OffsetExceptionsCT) AND
         GenJournalBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") THEN
        GenJnlLine."Bal. Account No." := GenJournalBatch."Bal. Account No.";
      //NC PACOC-112 < PCH

      GenJnlLine.VALIDATE(Quantity,0);
      //GenJnlLine.INSERT;

      //NC NCS-1604 > DP
      IsCounterpartyDim := FALSE;
      CounterpartyDimCode :='';

      //NC NCS-1721 > DP
      {
      IF DebitLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN BEGIN
        IsCounterpartyDim := IsCounterpartyDim OR IsIC(DebitLedgEntryDimTMP."Dimension Value Code");
        CounterpartyDimCode := DebitLedgEntryDimTMP."Dimension Value Code";
      END;
                                  IF NOT IsCounterpartyDim AND CreditLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Customer
      D
      im
      en
      si
      on
      C
      od
      e"
      )
      TH
      EN
      B
      EG
      IN
        IsCounterpartyDim := IsCounterpartyDim OR IsIC(CreditLedgEntryDimTMP."Dimension Value Code");
        CounterpartyDimCode := CreditLedgEntryDimTMP."Dimension Value Code";
      END;
      }
      //NC NCS-1721 < DP

      //NC NCS-1604 < DP

      //NC NCS-1721 > DP
      RealCounterpartyDimCode :='';
      IF DebitLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN BEGIN
        IsCounterpartyDim := IsCounterpartyDim OR IsIC(DebitLedgEntryDimTMP."Dimension Value Code");
        IF IsCounterpartyDim THEN BEGIN
          CounterpartyDimCode := DebitLedgEntryDimTMP."Dimension Value Code";
          IF DebitLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Real Counterparty Dim. Code") THEN
            RealCounterpartyDimCode :=DebitLedgEntryDimTMP."Dimension Value Code";
        END;
      END;
      IF NOT IsCounterpartyDim AND
        DebitLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Real Counterparty Dim. Code") THEN BEGIN
        IsCounterpartyDim := IsCounterpartyDim OR IsIC(DebitLedgEntryDimTMP."Dimension Value Code");
        IF IsCounterpartyDim THEN BEGIN
          RealCounterpartyDimCode := DebitLedgEntryDimTMP."Dimension Value Code";
          IF DebitLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN
            CounterpartyDimCode :=DebitLedgEntryDimTMP."Dimension Value Code";
        END;
      END;
      IF NOT IsCounterpartyDim AND
        CreditLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN BEGIN
        IsCounterpartyDim := IsCounterpartyDim OR IsIC(CreditLedgEntryDimTMP."Dimension Value Code");
        IF IsCounterpartyDim THEN BEGIN
          CounterpartyDimCode := CreditLedgEntryDimTMP."Dimension Value Code";
          IF CreditLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Real Counterparty Dim. Code") THEN
            RealCounterpartyDimCode :=CreditLedgEntryDimTMP."Dimension Value Code";
        END;
      END;
      IF NOT IsCounterpartyDim AND
        CreditLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Real Counterparty Dim. Code") THEN BEGIN
        IsCounterpartyDim := IsCounterpartyDim OR IsIC(CreditLedgEntryDimTMP."Dimension Value Code");
        IF IsCounterpartyDim THEN BEGIN
          RealCounterpartyDimCode := CreditLedgEntryDimTMP."Dimension Value Code";
          IF CreditLedgEntryDimTMP.GET(17,GLBuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN
            CounterpartyDimCode :=CreditLedgEntryDimTMP."Dimension Value Code";
        END;
      END;
      //NC NCS-1721 < DP

      DebitLedgEntryDimTMP.SETRANGE("Table ID",17);
      DebitLedgEntryDimTMP.SETRANGE("Entry No.",GLBuffer."Entry No.");
      IF DebitLedgEntryDimTMP.FINDSET THEN
        REPEAT
          IF DimValue.GET(DebitLedgEntryDimTMP."Dimension Code",DebitLedgEntryDimTMP."Dimension Value Code") THEN BEGIN

            //NC NCS-1604 > DP
            IF ((DebitLedgEntryDimTMP."Dimension Code" IN [MovingDataSetup."Customer Dimension Code",
                    MovingDataSetup."Real Counterparty Dim. Code"]) AND IsCounterpartyDim)
            OR NOT (DebitLedgEntryDimTMP."Dimension Code" IN [MovingDataSetup."Customer Dimension Code",
                   MovingDataSetup."Real Counterparty Dim. Code"]) THEN BEGIN
            //NC NCS-1604 < DP

            GenJnlLineDim.INIT;
            GenJnlLineDim."Table ID" := 81;
            GenJnlLineDim."Journal Template Name" := SourceGenJnlLine."Journal Template Name";
            GenJnlLineDim."Journal Batch Name" := SourceGenJnlLine."Journal Batch Name";
            GenJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
            GenJnlLineDim."Dimension Code" := DebitLedgEntryDimTMP."Dimension Code";

            //NC NCS-1721 > DP
            IF (DebitLedgEntryDimTMP."Dimension Code"=MovingDataSetup."Customer Dimension Code") AND
            (CounterpartyDimCode<>'') THEN GenJnlLineDim."Dimension Value Code" := CounterpartyDimCode
            ELSE
              IF (DebitLedgEntryDimTMP."Dimension Code"=MovingDataSetup."Real Counterparty Dim. Code") AND
                 (RealCounterpartyDimCode <>'') THEN GenJnlLineDim."Dimension Value Code" := RealCounterpartyDimCode
              ELSE

            {
            //NC NCS-1604 > DP
            IF (DebitLedgEntryDimTMP."Dimension Code" IN [MovingDataSetup."Customer Dimension Code",
              MovingDataSetup."Real Counterparty Dim. Code"]) AND (CounterpartyDimCode<>'') THEN BEGIN
               GenJnlLineDim."Dimension Value Code" := CounterpartyDimCode;
            END ELSE
            //NC NCS-1604 < DP
            }

            //NC NCS-1721 < DP
            GenJnlLineDim."Dimension Value Code" := DebitLedgEntryDimTMP."Dimension Value Code";
            // NC SB !!!
            // GenJnlLineDim.INSERT;
            IF NOT GenJnlLineDim.INSERT THEN;
            IF GenJnlLineDim."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
              GenJnlLine."Shortcut Dimension 1 Code" := GenJnlLineDim."Dimension Value Code";
            IF GenJnlLineDim."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
              GenJnlLine."Shortcut Dimension 2 Code" := GenJnlLineDim."Dimension Value Code";
            IF GenJnlLineDim."Dimension Code" = MovingDataSetup."FI Dimension Code" THEN
            // NC MTD11 > AIG
            BEGIN
            // NC MTD11 < AIG
              GenJnlLine."Financial Instrument No." := GenJnlLineDim."Dimension Value Code";
            // NC MTD11 > AIG

              //NC NCS-733.1 > DP
              //перемещено ниже
              {
              //Добавляем стандартную аналитику
              DefaultDimension.RESET;
              DefaultDimension.SETRANGE("Table ID", 50021);
              DefaultDimension.SETRANGE("No.", GenJnlLineDim."Dimension Value Code");
              IF DefaultDimension.FINDSET THEN
              REPEAT
                GenJnlLineDim.INIT;
                GenJnlLineDim."Table ID" := 81;
                GenJnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
                GenJnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
                GenJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
                GenJnlLineDim."Dimension Code" := DefaultDimension."Dimension Code";
                GenJnlLineDim."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                IF NOT GenJnlLineDim.INSERT THEN;
              UNTIL DefaultDimension.NEXT = 0;
              }
              //NC NCS-733.1 > DP

            END;
            // NC MTD11 < AIG

            //NC NCS-1604 > DP
            END;
            //NC NCS-1604 < DP

          END;
        UNTIL DebitLedgEntryDimTMP.NEXT = 0;
      CreditLedgEntryDimTMP.SETRANGE("Table ID",17);
      CreditLedgEntryDimTMP.SETRANGE("Entry No.",GLBuffer."Entry No.");
      IF CreditLedgEntryDimTMP.FINDSET THEN
        REPEAT
          //IF NOT GenJnlLineDim.GET(81,GenJnlLine."Journal Template Name",
          //                         GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",0,
          //                         CreditLedgEntryDimTMP."Dimension Code")
          //THEN BEGIN
          IF DimValue.GET(CreditLedgEntryDimTMP."Dimension Code",CreditLedgEntryDimTMP."Dimension Value Code") THEN BEGIN

            //NC NCS-1604 > DP
            IF ((CreditLedgEntryDimTMP."Dimension Code" IN [MovingDataSetup."Customer Dimension Code",
                    MovingDataSetup."Real Counterparty Dim. Code"]) AND IsCounterpartyDim)
            OR NOT (CreditLedgEntryDimTMP."Dimension Code" IN [MovingDataSetup."Customer Dimension Code",
                   MovingDataSetup."Real Counterparty Dim. Code"]) THEN BEGIN
            //NC NCS-1604 < DP

            GenJnlLineDim.INIT;
            GenJnlLineDim."Table ID" := 81;
            GenJnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
            GenJnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
            GenJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
            GenJnlLineDim."Dimension Code" := CreditLedgEntryDimTMP."Dimension Code";

            //NC NCS-1721 > DP
            IF (CreditLedgEntryDimTMP."Dimension Code"=MovingDataSetup."Customer Dimension Code") AND
            (CounterpartyDimCode<>'') THEN GenJnlLineDim."Dimension Value Code" := CounterpartyDimCode
            ELSE
              IF (CreditLedgEntryDimTMP."Dimension Code"=MovingDataSetup."Real Counterparty Dim. Code") AND
                 (RealCounterpartyDimCode <>'') THEN GenJnlLineDim."Dimension Value Code" := RealCounterpartyDimCode
              ELSE
                  {
            //NC NCS-1604 > DP
            IF (CreditLedgEntryDimTMP."Dimension Code" IN [MovingDataSetup."Customer Dimension Code",
              MovingDataSetup."Real Counterparty Dim. Code"]) AND (CounterpartyDimCode<>'') THEN BEGIN
               GenJnlLineDim."Dimension Value Code" := CounterpartyDimCode;
            END ELSE
            //NC NCS-1604 < DP
            }
            //NC NCS-1721 < DP

            GenJnlLineDim."Dimension Value Code" := CreditLedgEntryDimTMP."Dimension Value Code";
            IF NOT GenJnlLineDim.INSERT THEN BEGIN
            END ELSE BEGIN
              IF GenJnlLineDim."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                GenJnlLine."Shortcut Dimension 1 Code" := GenJnlLineDim."Dimension Value Code";
              IF GenJnlLineDim."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                GenJnlLine."Shortcut Dimension 2 Code" := GenJnlLineDim."Dimension Value Code";
              IF GenJnlLineDim."Dimension Code" = MovingDataSetup."FI Dimension Code" THEN
            // NC MTD11 > AIG
              BEGIN
            // NC MTD11 < AIG
                GenJnlLine."Financial Instrument No." := GenJnlLineDim."Dimension Value Code";
            // NC MTD11 > AIG

              //NC NCS-733.1 > DP
              //перемещено ниже
              {
              //Добавляем стандартную аналитику
              DefaultDimension.RESET;
              DefaultDimension.SETRANGE("Table ID", 50021);
              DefaultDimension.SETRANGE("No.", GenJnlLineDim."Dimension Value Code");
              IF DefaultDimension.FINDSET THEN
              REPEAT
                GenJnlLineDim.INIT;
                GenJnlLineDim."Table ID" := 81;
                GenJnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
                GenJnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
                GenJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
                GenJnlLineDim."Dimension Code" := DefaultDimension."Dimension Code";
                GenJnlLineDim."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                IF NOT GenJnlLineDim.INSERT THEN;
              UNTIL DefaultDimension.NEXT = 0;
              }
              //NC NCS-733.1 > DP

            END;
            // NC MTD11 < AIG

            END;

            //NC NCS-1604 > DP
            END;
            //NC NCS-1604 < DP

          END;
          //GenJnlLineDim.INSERT;
        UNTIL CreditLedgEntryDimTMP.NEXT = 0;


      //NC NCS-733.1 > DP
      //Добавляем стандартную аналитику ФИ
      IF GenJnlLine."Financial Instrument No."<>'' THEN BEGIN
        DefaultDimension.RESET;
        DefaultDimension.SETRANGE("Table ID", 50021);
        DefaultDimension.SETRANGE("No.", GenJnlLine."Financial Instrument No.");

        // NC NC-973 > SKV
        // 3-й случай обрабоки стандартных измерений ФИ
        MovingDataSetup.GET;
        MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
        // Это измерение будет обработанно особенным образом
        DefaultDimension.SETFILTER("Dimension Code", '<>%1', MovingDataSetup."INC.TAX Dimension Code");
        // NC NC-973 < SKV

        IF DefaultDimension.FINDSET THEN
        REPEAT
          GenJnlLineDim.INIT;
          GenJnlLineDim."Table ID" := 81;
          GenJnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
          GenJnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
          GenJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
          GenJnlLineDim."Dimension Code" := DefaultDimension."Dimension Code";
          GenJnlLineDim."Dimension Value Code" := DefaultDimension."Dimension Value Code";
          IF NOT GenJnlLineDim.INSERT THEN;
        UNTIL DefaultDimension.NEXT = 0;
        // NC NC-973 > SKV
        // считаем, что если по мэппнгу измерение проставилось - ничего делать не надо
        IncTaxDimCode := GenJnlLine.GetIncTaxDimCode(JnlLineDimExists);
        IF IncTaxDimCode = '' THEN BEGIN
          IF JnlLineDimExists THEN
          // Измерение может быть пустым, но запись в таблице существует
            GenJnlLine.DeleteIncTaxDimCode;
          GenJnlLine.InsertIncTaxDimCode;
        END;
        // NC NC-973 < SKV

      END;
      //NC NCS-733.1 > DP

      //NC MTD02 > AIG
      InsertFXDim(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
                  ConsolidationSetup."Debit FX Diff. Dim. Code",DTAccountCode);
      InsertFXDim(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
                  ConsolidationSetup."Credit FX Diff. Dim. Code",CTAccountCode);
      //NC MTD02 < AIG

      //NC APCOC-72 > DP
      DefDim.RESET;
      DefDim.SETRANGE("Table ID",50064);
      DefDim.SETRANGE("No.",'');
      DefDim.SETFILTER("Value Posting",'%1|%2',DefDim."Value Posting"::"Code Mandatory",
                                                    DefDim."Value Posting"::"Same Code");
      DefDim.SETFILTER("Dimension Value Code",'<>%1','');
      IF DefDim.FINDSET THEN
        REPEAT
           GenJnlLineDim.RESET;
           IF NOT GenJnlLineDim.GET(81,
                                           GenJnlLine."Journal Template Name",
                                           GenJnlLine."Journal Batch Name",
                                           GenJnlLine."Line No.",
                                           0,
                                           DefDim."Dimension Code") THEN BEGIN
             GenJnlLineDim.INIT;
             GenJnlLineDim."Table ID":= 81;
             GenJnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
             GenJnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
             GenJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
             GenJnlLineDim."Allocation Line No." := 0;
             GenJnlLineDim."Dimension Code" := DefDim."Dimension Code";
             GenJnlLineDim."Dimension Value Code" := DefDim."Dimension Value Code";
             IF GenJnlLineDim.INSERT THEN;
           END ELSE BEGIN
             oldDimValueCode := GenJnlLineDim."Dimension Value Code";
             GenJnlLineDim."Dimension Value Code" := DefDim."Dimension Value Code";
             CASE DefDim."Value Posting" OF
               DefDim."Value Posting"::"Same Code": GenJnlLineDim.MODIFY;
             ELSE
               IF oldDimValueCode='' THEN GenJnlLineDim.MODIFY;
             END;
           END;
         UNTIL DefDim.NEXT = 0;
      //NC APCOC-72 < DP

      GenJnlLine.INSERT;
      //NC MDTY01 < MP
    END;

    PROCEDURE InsertFXDim@1101495003(JnlTemplateCode@1101495000 : Code[10];JnlBatchCode@1101495001 : Code[10];JnlLineNo@1101495002 : Integer;DimCode@1101495003 : Code[20];DimValueCode@1101495004 : Code[20]);
    VAR
      GenJnlLineDim@1101495005 : Record 356;
    BEGIN
      //NC MDTY01 > MP
      GenJnlLineDim.INIT;
      GenJnlLineDim."Table ID" := 81;
      GenJnlLineDim."Journal Template Name" := JnlTemplateCode;
      GenJnlLineDim."Journal Batch Name" := JnlBatchCode;
      GenJnlLineDim."Journal Line No." := JnlLineNo;
      GenJnlLineDim."Dimension Code" := DimCode;
      GenJnlLineDim."Dimension Value Code" := DimValueCode;
      GenJnlLineDim.INSERT;
      //NC MDTY01 < MP
    END;

    PROCEDURE CheckExceptionCorrespondense3@1101495005(GLBuffer@1210003 : Record 50008;ConsSource@1210012 : Record 50001;UseCoAMappingMask@1000000005 : Boolean;NoOfSymbolsInMask@1000000004 : Integer;VAR DtExtAccCode@1000000006 : Code[20];VAR CtExtAccCode@1000000007 : Code[20];MappingCode@1000000008 : Code[20]) : Boolean;
    VAR
      SpecCorrespondense@1210002 : Record 50009;
      SpecCorrespondense1@1210011 : Record 50009;
      DebitAccount@1210001 : Code[20];
      CreditAccount@1210000 : Code[20];
      DocumentType1C@1210006 : Text[30];
      CorrespondenseType@1210005 : 'CurExchange,Exception,Reclassification';
      LedgEntryDim@1210007 : Record 355;
      DimCode@1210009 : Code[20];
      DimVal@1210010 : Code[20];
      GLEntry1@1210013 : Record 17;
      GLFilter@1210014 : Text[90];
      SpecNotExcept@1000000000 : Boolean;
      SpecDim@1000000001 : Boolean;
      Spec@1000000002 : Boolean;
      SelectedExceptDim@1000000003 : Record 369;
    BEGIN
      //NC MDTX02 > MP
      //NC MDTM02.1 > MP
      IF NOT UseCoAMappingMask THEN BEGIN
        DtExtAccCode := GLBuffer."Debit G/L Account No.";
        CtExtAccCode := GLBuffer."Credit G/L Account No.";
      END ELSE BEGIN
        DtExtAccCode := FindAccountFromMask(GLBuffer."Debit G/L Account No.",
                                            MappingCode,
                                            NoOfSymbolsInMask,0);
        CtExtAccCode := FindAccountFromMask(GLBuffer."Credit G/L Account No.",
                                            MappingCode,
                                            NoOfSymbolsInMask,0);
      END;
      //NC MDTM02.1 < MP

      SpecCorrespondense1.SETRANGE("Mapping Code", MappingCode);
      IF NOT SpecCorrespondense1.FINDFIRST THEN
        EXIT(FALSE);

      SpecNotExcept := FALSE;
      TempDebitLedgEntryDim.SETRANGE("Table ID", 17);
      TempDebitLedgEntryDim.SETRANGE("Entry No.", GLBuffer."Entry No.");

      //NC MTD06 > AIG
      OffsetExceptionsDT := FALSE;
      OffsetExceptionsCT := FALSE;
      OffsetFromDate := 0D;
      OffsetToDate := 0D;
      IsSpeshialControl := FALSE;
      //NC MTD06 < AIG

      SpecDim := CheckCorr3(MappingCode,
                            DtExtAccCode,CtExtAccCode,
                            SpecNotExcept,TempDebitLedgEntryDim,TRUE);


      IF (NOT SpecNotExcept) AND (NOT SpecDim) THEN BEGIN
        TempCreditLedgEntryDim.SETRANGE("Table ID", 17);
        TempCreditLedgEntryDim.SETRANGE("Entry No.", GLBuffer."Entry No.");
          SpecDim := CheckCorr3(MappingCode,
                                DtExtAccCode,CtExtAccCode,
                                SpecNotExcept,TempCreditLedgEntryDim,TRUE);
      END;

      IF (NOT SpecNotExcept) AND (NOT SpecDim) THEN BEGIN
          Spec := CheckCorr3(MappingCode,
                             DtExtAccCode,CtExtAccCode,
                             SpecNotExcept,TempCreditLedgEntryDim,FALSE);
      END;

      //NC MTD06 > AIG
      IF (OffsetExceptionsDT OR OffsetExceptionsCT) AND NOT (
         (NOT (OffsetFromDate <> 0D) OR (OffsetFromDate <= GLBuffer."Document Date")) AND
         (NOT (OffsetToDate <> 0D) OR (OffsetToDate >= GLBuffer."Document Date"))) THEN BEGIN
        OffsetExceptionsDT := FALSE;
        OffsetExceptionsCT := FALSE;
        SpecNotExcept := TRUE;
        SpecDim :=FALSE;
        Spec := FALSE;
      END;
      //NC MTD06 < AIG

      Log.StartCounter(6);

      //NC MTD06 > AIG
      IF (Spec OR SpecDim) AND (NOT SpecNotExcept) AND (NOT OffsetExceptionsDT) AND (NOT OffsetExceptionsCT) THEN BEGIN
      {
      IF (Spec OR SpecDim) AND (NOT SpecNotExcept) THEN BEGIN
      }
      //NC MTD06 < AIG
        //NC MDTM02 > MP
        {
        SpecCorrespondense.TESTFIELD("Gen. Journal  Batch Name");
        }
        //NC MDTM02 < MP
        TMPGLEntryException.INIT;
        TMPGLEntryException."Entry No." := GLBuffer."Entry No.";
        //NC MDTM02 > MP
        {
        TMPGLEntryException."Journal Batch Name" := SpecCorrespondense."Gen. Journal  Batch Name";
        }
        TMPGLEntryException."Journal Batch Name" := ConsolidationSetup."Exception Batch Name";
        //NC MDTM02 < MP
        TMPGLEntryException.INSERT;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
      //NC PIF010 < MP
    END;

    PROCEDURE CheckCorr3@1101495006(MappingCode@1210005 : Code[20];DebitAccount@1210007 : Code[20];CreditAccount@1210006 : Code[20];VAR SpecNotExcept@1000000000 : Boolean;VAR LedgEntryDim@1101495000 : Record 355;UseDimFilter@1101495001 : Boolean) Spec : Boolean;
    VAR
      Exceptions@1000000001 : Record 50009;
      IsFound@1101495002 : Boolean;
    BEGIN
      //NC MDTX02 > MP
      Spec := FALSE;
      IsFound := FALSE;
      Exceptions.SETCURRENTKEY("Company Name","Ext. Debit Account No.","Ext. Credit Account No.","Dimension Code","Dimension Value Code"
      );
      //NC MDTX02 < MP
      Exceptions.SETRANGE("Mapping Code",MappingCode);
      //NC MDTX02 > MP
      Exceptions.SETRANGE("Company Name",COMPANYNAME);
      //NC MDTX02 < MP
      Exceptions.SETRANGE("Ext. Debit Account No.",DebitAccount);
      Exceptions.SETRANGE("Ext. Credit Account No.",CreditAccount);
      IF UseDimFilter THEN BEGIN
        Exceptions.SETFILTER("Dimension Code",'<>%1','');
        Exceptions.SETFILTER("Dimension Value Code",'<>%1','');
      END ELSE BEGIN
        Exceptions.SETRANGE("Dimension Code",'');
        Exceptions.SETRANGE("Dimension Value Code",'');
      END;
      IF Exceptions.FINDSET THEN
        REPEAT
          IF Exceptions."Dimension Code" <> '' THEN BEGIN
            LedgEntryDim.SETRANGE("Dimension Code",Exceptions."Dimension Code");
            LedgEntryDim.SETRANGE("Dimension Value Code",Exceptions."Dimension Value Code");
            IsFound := NOT LedgEntryDim.ISEMPTY;
            IF IsFound THEN BEGIN
              //NC MTD06 > AIG
              IF Exceptions."Offset Exception Debit" THEN BEGIN
                OffsetExceptionsDT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              IF Exceptions."Offset Exception Credit" THEN BEGIN
                OffsetExceptionsCT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              //NC MTD06 < AIG
              IF NOT Exceptions."Not Except" THEN
                Spec := TRUE
              ELSE
                SpecNotExcept := TRUE;
              EXIT;
            END;
          END ELSE BEGIN
            //NC MTD06 > AIG
            IF Exceptions."Offset Exception Debit" THEN BEGIN
              OffsetExceptionsDT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            IF Exceptions."Offset Exception Credit" THEN BEGIN
              OffsetExceptionsCT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            //NC MTD06 < AIG

            IF NOT Exceptions."Not Except" THEN
              Spec := TRUE
            ELSE
              SpecNotExcept := TRUE;
            EXIT;
          END;
        UNTIL (Exceptions.NEXT = 0) OR IsFound;

      Exceptions.SETRANGE("Ext. Credit Account No.",'');
      IF Exceptions.FINDSET THEN
        REPEAT
          IF Exceptions."Dimension Code" <> '' THEN BEGIN
            LedgEntryDim.SETRANGE("Dimension Code",Exceptions."Dimension Code");
            LedgEntryDim.SETRANGE("Dimension Value Code",Exceptions."Dimension Value Code");
            IsFound := NOT LedgEntryDim.ISEMPTY;
            IF IsFound THEN BEGIN
              //NC MTD06 > AIG
              IF Exceptions."Offset Exception Debit" THEN BEGIN
                OffsetExceptionsDT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              IF Exceptions."Offset Exception Credit" THEN BEGIN
                OffsetExceptionsCT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              //NC MTD06 < AIG

              IF NOT Exceptions."Not Except" THEN
                Spec := TRUE
              ELSE
                SpecNotExcept := TRUE;
              EXIT;
            END;
          END ELSE BEGIN
            //NC MTD06 > AIG
            IF Exceptions."Offset Exception Debit" THEN BEGIN
              OffsetExceptionsDT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            IF Exceptions."Offset Exception Credit" THEN BEGIN
              OffsetExceptionsCT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            //NC MTD06 < AIG

            IF NOT Exceptions."Not Except" THEN
              Spec := TRUE
            ELSE
              SpecNotExcept := TRUE;
            EXIT;
          END;
        UNTIL (Exceptions.NEXT = 0) OR IsFound;

      Exceptions.SETRANGE("Ext. Debit Account No.",'');
      Exceptions.SETRANGE("Ext. Credit Account No.",CreditAccount);
      IF Exceptions.FINDSET THEN
        REPEAT
          IF Exceptions."Dimension Code" <> '' THEN BEGIN
            LedgEntryDim.SETRANGE("Dimension Code",Exceptions."Dimension Code");
            LedgEntryDim.SETRANGE("Dimension Value Code",Exceptions."Dimension Value Code");
            IsFound := NOT LedgEntryDim.ISEMPTY;
            IF IsFound THEN BEGIN
              //NC MTD06 > AIG
              IF Exceptions."Offset Exception Debit" THEN BEGIN
                OffsetExceptionsDT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              IF Exceptions."Offset Exception Credit" THEN BEGIN
                OffsetExceptionsCT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              //NC MTD06 < AIG

              IF NOT Exceptions."Not Except" THEN
                Spec := TRUE
              ELSE
                SpecNotExcept := TRUE;
              EXIT;
            END;
          END ELSE BEGIN
            //NC MTD06 > AIG
            IF Exceptions."Offset Exception Debit" THEN BEGIN
              OffsetExceptionsDT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            IF Exceptions."Offset Exception Credit" THEN BEGIN
              OffsetExceptionsCT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            //NC MTD06 < AIG

            IF NOT Exceptions."Not Except" THEN
              Spec := TRUE
            ELSE
              SpecNotExcept := TRUE;
            EXIT;
          END;
        UNTIL (Exceptions.NEXT = 0) OR IsFound;

      //NC MDTX02 > MP
      Exceptions.SETRANGE("Company Name",'');
      Exceptions.SETRANGE("Ext. Debit Account No.",DebitAccount);
      Exceptions.SETRANGE("Ext. Credit Account No.",CreditAccount);
      IF Exceptions.FINDSET THEN
        REPEAT
          IF Exceptions."Dimension Code" <> '' THEN BEGIN
            LedgEntryDim.SETRANGE("Dimension Code",Exceptions."Dimension Code");
            LedgEntryDim.SETRANGE("Dimension Value Code",Exceptions."Dimension Value Code");
            IsFound := NOT LedgEntryDim.ISEMPTY;
            IF IsFound THEN BEGIN
              //NC MTD06 > AIG
              IF Exceptions."Offset Exception Debit" THEN BEGIN
                OffsetExceptionsDT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              IF Exceptions."Offset Exception Credit" THEN BEGIN
                OffsetExceptionsCT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              //NC MTD06 < AIG

              IF NOT Exceptions."Not Except" THEN
                Spec := TRUE
              ELSE
                SpecNotExcept := TRUE;
              EXIT;
            END;
          END ELSE BEGIN
            //NC MTD06 > AIG
            IF Exceptions."Offset Exception Debit" THEN BEGIN
              OffsetExceptionsDT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            IF Exceptions."Offset Exception Credit" THEN BEGIN
              OffsetExceptionsCT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            //NC MTD06 < AIG

            IF NOT Exceptions."Not Except" THEN
              Spec := TRUE
            ELSE
              SpecNotExcept := TRUE;
            EXIT;
          END;
        UNTIL (Exceptions.NEXT = 0) OR IsFound;

      Exceptions.SETRANGE("Ext. Credit Account No.",'');
      IF Exceptions.FINDSET THEN
        REPEAT
          IF Exceptions."Dimension Code" <> '' THEN BEGIN
            LedgEntryDim.SETRANGE("Dimension Code",Exceptions."Dimension Code");
            LedgEntryDim.SETRANGE("Dimension Value Code",Exceptions."Dimension Value Code");
            IsFound := NOT LedgEntryDim.ISEMPTY;
            IF IsFound THEN BEGIN
              //NC MTD06 > AIG
              IF Exceptions."Offset Exception Debit" THEN BEGIN
                OffsetExceptionsDT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              IF Exceptions."Offset Exception Credit" THEN BEGIN
                OffsetExceptionsCT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              //NC MTD06 < AIG

              IF NOT Exceptions."Not Except" THEN
                Spec := TRUE
              ELSE
                SpecNotExcept := TRUE;
              EXIT;
            END;
          END ELSE BEGIN
            //NC MTD06 > AIG
            IF Exceptions."Offset Exception Debit" THEN BEGIN
              OffsetExceptionsDT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            IF Exceptions."Offset Exception Credit" THEN BEGIN
              OffsetExceptionsCT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            //NC MTD06 < AIG

            IF NOT Exceptions."Not Except" THEN
              Spec := TRUE
            ELSE
              SpecNotExcept := TRUE;
            EXIT;
          END;
        UNTIL (Exceptions.NEXT = 0) OR IsFound;

      Exceptions.SETRANGE("Ext. Debit Account No.",'');
      Exceptions.SETRANGE("Ext. Credit Account No.",CreditAccount);
      IF Exceptions.FINDSET THEN
        REPEAT
          IF Exceptions."Dimension Code" <> '' THEN BEGIN
            LedgEntryDim.SETRANGE("Dimension Code",Exceptions."Dimension Code");
            LedgEntryDim.SETRANGE("Dimension Value Code",Exceptions."Dimension Value Code");
            IsFound := NOT LedgEntryDim.ISEMPTY;
            IF IsFound THEN BEGIN
              //NC MTD06 > AIG
              IF Exceptions."Offset Exception Debit" THEN BEGIN
                OffsetExceptionsDT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              IF Exceptions."Offset Exception Credit" THEN BEGIN
                OffsetExceptionsCT := TRUE;
                OffsetFromDate := Exceptions."From Date";
                OffsetToDate := Exceptions."To Date";
              END;
              //NC MTD06 < AIG

              IF NOT Exceptions."Not Except" THEN
                Spec := TRUE
              ELSE
                SpecNotExcept := TRUE;
              EXIT;
            END;
          END ELSE BEGIN
            //NC MTD06 > AIG
            IF Exceptions."Offset Exception Debit" THEN BEGIN
              OffsetExceptionsDT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            IF Exceptions."Offset Exception Credit" THEN BEGIN
              OffsetExceptionsCT := TRUE;
              OffsetFromDate := Exceptions."From Date";
              OffsetToDate := Exceptions."To Date";
            END;
            //NC MTD06 < AIG

            IF NOT Exceptions."Not Except" THEN
              Spec := TRUE
            ELSE
              SpecNotExcept := TRUE;
            EXIT;
          END;
        UNTIL (Exceptions.NEXT = 0) OR IsFound;

      //NC MDTX02 < MP
    END;

    PROCEDURE ConvertCurrencyCode@1101495007(BufferCode@1210000 : Code[10]) : Code[10];
    VAR
      Currency@1210001 : Record 4;
    BEGIN
      //NC PIF010 > MP
      IF BufferCode='' THEN EXIT(BufferCode);
      GLSetup.GET;
      IF GLSetup."LCY Code" = BufferCode THEN
        EXIT('');
      Currency.SETFILTER(Currency."Source Currency Code",'%1',BufferCode);
      IF Currency.FINDFIRST THEN
        EXIT(Currency.Code);
      //NC PIF010.1 > MP
      {
      EXIT('');
      }
      ERROR(STRSUBSTNO(Text040,BufferCode))
      //NC PIF010.1 < MP
      //NC PIF001 < MP
    END;

    PROCEDURE ConvertCurrencyCode2@1000000035(BufferCode@1210000 : Code[10]) : Code[10];
    VAR
      Currency@1210001 : Record 4;
    BEGIN
      //NC PIF010 > MP
      IF BufferCode='' THEN EXIT(BufferCode);
      IF GLSetup."LCY Code" = BufferCode THEN
        EXIT('');
      Currency.SETFILTER(Currency."Source Currency Code",'%1',BufferCode);
      IF Currency.FINDFIRST THEN
        EXIT(Currency.Code);
      //NC PIF010.1 > MP
      {
      EXIT('');
      }
      ERROR(STRSUBSTNO(Text040,BufferCode))
      //NC PIF010.1 < MP
      //NC PIF001 < MP
    END;

    PROCEDURE CheckConvertCurrencyCode@1000000022(BufferCode@1210000 : Code[10];GLBuffer@1000000000 : Record 50008;ConsRegNo@1000000001 : Integer;ConsSourceCode@1000000002 : Code[20]) : Code[10];
    VAR
      Currency@1210001 : Record 4;
    BEGIN
      //NC PIF010 > MP
      IF BufferCode='' THEN EXIT(BufferCode);
      IF GLSetup."LCY Code" = BufferCode THEN
        EXIT('');
      Currency.SETFILTER(Currency."Source Currency Code",'%1',BufferCode);
      IF Currency.FINDFIRST THEN
        EXIT(Currency.Code);
      IsGlobalError := TRUE;
      ErrorJournal.AddErrorBuferCurrency(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsSourceCode,ConsRegNo,'EDTC14',
                                         STRSUBSTNO(Text040,BufferCode),
                                         COMPANYNAME,GLBuffer,Currency,JobProcStatusLineNo);

      //NC PIF001 < MP
    END;

    PROCEDURE CheckCurrency@1000000038(GLBuffer@1000000000 : Record 50008;ConsSource@1000000006 : Record 50001;ConsRegNo@1000000005 : Integer);
    VAR
      DTCurrencyCode@1000000001 : Code[10];
      CTCurrencyCode@1000000002 : Code[10];
      Currency@1000000003 : Record 4;
      CurrencyRate@1000000004 : Record 330;
    BEGIN
      //NC MDTC08 > MP
      DTCurrencyCode := CheckConvertCurrencyCode(GLBuffer."Debit Currency Code",GLBuffer,ConsRegNo,ConsSource.Code);
      IF Currency.GET(DTCurrencyCode) THEN BEGIN
        IF Currency."Search Method" = Currency."Search Method"::"As of Date" THEN BEGIN
          IF NOT CurrencyRate.GET(Currency.Code,GLBuffer."Document Date") THEN BEGIN
            IsGlobalError := TRUE;
            ErrorJournal.AddErrorBuferCurrency(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                               ConsSource.Code,ConsRegNo,'EDTC11',
                                               STRSUBSTNO(Text036,Currency.Code,GLBuffer."Document Date"),
                                               COMPANYNAME,GLBuffer,Currency,JobProcStatusLineNo);

          END ELSE BEGIN
            IF CurrencyRate."Exchange Rate Amount" = 0 THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferCurCurRate(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSource.Code,ConsRegNo,'EDTC12',
                                                   STRSUBSTNO(Text037,CurrencyRate.FIELDCAPTION("Exchange Rate Amount"),Currency.Code,
                                                     GLBuffer."Document Date"),
                                                   COMPANYNAME,GLBuffer,Currency,CurrencyRate,JobProcStatusLineNo);
            END;
            IF CurrencyRate."Relational Exch. Rate Amount" = 0 THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferCurCurRate(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSource.Code,ConsRegNo,'EDTC12',
                                                   STRSUBSTNO(Text037,CurrencyRate.FIELDCAPTION("Relational Exch. Rate Amount"),
                                                    Currency.Code,
                                                    GLBuffer."Document Date"),
                                                   COMPANYNAME,GLBuffer,Currency,CurrencyRate,JobProcStatusLineNo);
            END;
          END;
        END;
      END;
      CTCurrencyCode := CheckConvertCurrencyCode(GLBuffer."Credit Currency Code",GLBuffer,ConsRegNo,ConsSource.Code);
      IF Currency.GET(CTCurrencyCode) THEN BEGIN
        IF Currency."Search Method" = Currency."Search Method"::"As of Date" THEN BEGIN
          IF NOT CurrencyRate.GET(Currency.Code,GLBuffer."Document Date") THEN BEGIN
            IsGlobalError := TRUE;
            ErrorJournal.AddErrorBuferCurrency(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                               ConsSource.Code,ConsRegNo,'EDTC11',
                                               STRSUBSTNO(Text036,Currency.Code,GLBuffer."Document Date"),
                                               COMPANYNAME,GLBuffer,Currency,JobProcStatusLineNo);

          END ELSE BEGIN
            IF CurrencyRate."Exchange Rate Amount" = 0 THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferCurCurRate(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSource.Code,ConsRegNo,'EDTC12',
                                                   STRSUBSTNO(Text037,CurrencyRate.FIELDCAPTION("Exchange Rate Amount"),Currency.Code,
                                                     GLBuffer."Document Date"),
                                                   COMPANYNAME,GLBuffer,Currency,CurrencyRate,JobProcStatusLineNo);
            END;
            IF CurrencyRate."Relational Exch. Rate Amount" = 0 THEN BEGIN
              IsGlobalError := TRUE;
              ErrorJournal.AddErrorBuferCurCurRate(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSource.Code,ConsRegNo,'EDTC12',
                                                   STRSUBSTNO(Text037,CurrencyRate.FIELDCAPTION("Relational Exch. Rate Amount"),
                                                    Currency.Code,
                                                    GLBuffer."Document Date"),
                                                   COMPANYNAME,GLBuffer,Currency,CurrencyRate,JobProcStatusLineNo);
            END;
          END;
        END;
      END;

      IF (ConsSource."LCY Code" <> '') AND (ConsSource."LCY Code" <> CTCurrencyCode) AND (ConsSource."LCY Code" <> DTCurrencyCode)
      THEN BEGIN
      Currency.GET(ConsSource."LCY Code");
      IF Currency."Search Method" = Currency."Search Method"::"As of Date" THEN BEGIN
        IF NOT CurrencyRate.GET(Currency.Code,GLBuffer."Document Date") THEN BEGIN
          IsGlobalError := TRUE;
          ErrorJournal.AddErrorBuferCurrency(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                             ConsSource.Code,ConsRegNo,'EDTC11',
                                             STRSUBSTNO(Text036,Currency.Code,GLBuffer."Document Date"),
                                             COMPANYNAME,GLBuffer,Currency,JobProcStatusLineNo);

        END ELSE BEGIN
          IF CurrencyRate."Exchange Rate Amount" = 0 THEN BEGIN
            IsGlobalError := TRUE;
            ErrorJournal.AddErrorBuferCurCurRate(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                 ConsSource.Code,ConsRegNo,'EDTC12',
                                                 STRSUBSTNO(Text037,CurrencyRate.FIELDCAPTION("Exchange Rate Amount"),Currency.Code,
                                                   GLBuffer."Document Date"),
                                                 COMPANYNAME,GLBuffer,Currency,CurrencyRate,JobProcStatusLineNo);
          END;
          IF CurrencyRate."Relational Exch. Rate Amount" = 0 THEN BEGIN
            IsGlobalError := TRUE;
            ErrorJournal.AddErrorBuferCurCurRate(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                 ConsSource.Code,ConsRegNo,'EDTC12',
                                                 STRSUBSTNO(Text037,CurrencyRate.FIELDCAPTION("Relational Exch. Rate Amount"),
                                                  Currency.Code,
                                                  GLBuffer."Document Date"),
                                                 COMPANYNAME,GLBuffer,Currency,CurrencyRate,JobProcStatusLineNo);
          END;
        END;
      END;
      END;
      //NC MDTC08 < MP
    END;

    PROCEDURE GetAmountsDiff@1000000037(GLBuff@1000000003 : Record 50008;ConsSourceCurrencyCode@1000000000 : Code[20];MappingCode@1000000004 : Code[20];VAR GLEntryTemp@1000000001 : TEMPORARY Record 17;Type@1000000002 : 'Debit,Credit');
    VAR
      GLMapp@1000000005 : Record 50002;
      CurrExchRate@1000000006 : Record 330;
      GLAcc@1000000007 : Record 15;
      AccType@1000000009 : 'IncSt,BS,OffBS,None';
    BEGIN
      //NC MDTY01 > MP
      //Протестить
      IF Type = Type::Debit THEN BEGIN
        IF ConsSourceCurrencyCode = '' THEN BEGIN //локальные валюты во внешней системе и в нав совпадают
          GLEntryTemp."Original Currency Code" := ConvertCurrencyCode2(GLBuff."Debit Currency Code");
          GLEntryTemp."Original Amount" := 0;
          GLEntryTemp.Amount := GLBuff."Amount (LCY)";
          GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)";
          GLEntryTemp."Use Tax" := TRUE;
        END ELSE BEGIN //локальные валюты во внешней системе и в нав НЕ совпадают
          IF ((GLBuff."Debit Currency Code" = '')
             OR
             (GLBuff."Debit Currency Code" = ConsSourceCurrencyCode))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
            GLEntryTemp."Original Amount" := 0;
            //GLEntryTemp.Amount := //GLBuff."Amount (LCY)"; //тут все равно, какой счет - BS или PL
            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLBuff."Document Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLBuff."Amount (LCY)",
                                     CurrExchRate.ExchangeRate(
                                       GLBuff."Document Date",
                                       GLEntryTemp."Original Currency Code"));

            GLEntryTemp."Debit Amount" := GLEntryTemp.Amount;
            GLEntryTemp."Use Tax" := TRUE;
          END;
          IF GLBuff."Debit Currency Code" = GLSetup."LCY Code" THEN BEGIN //По идее это error
            GLEntryTemp."Original Currency Code" := '';
            IF GLBuff."Debit Original Amount" <> 0 THEN BEGIN
              GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";
              GLEntryTemp.Amount := GLBuff."Debit Original Amount";
            END ELSE BEGIN
              GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                       GLBuff."Document Date",
                                       ConsSourceCurrencyCode,
                                       GLBuff."Amount (LCY)",
                                       CurrExchRate.ExchangeRate(
                                         GLBuff."Document Date",
                                         ConsSourceCurrencyCode));
              GLEntryTemp."Original Amount" := GLEntryTemp.Amount;
            END;
            IF GLBuff."Amount (LCY)" <> 0 THEN
              GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") *
                                          ABS(GLEntryTemp.Amount);

          END;
          IF (GLBuff."Debit Currency Code" <> '') AND (GLBuff."Debit Currency Code" <> GLSetup."LCY Code") AND
             (GLBuff."Debit Currency Code" <> ConsSourceCurrencyCode)
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConvertCurrencyCode2(GLBuff."Debit Currency Code");
            GLEntryTemp."Original Amount" := 0;
            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLBuff."Document Date",
                                     ConsSourceCurrencyCode,
                                     GLBuff."Amount (LCY)",
                                     CurrExchRate.ExchangeRate(
                                       GLBuff."Document Date",
                                       ConsSourceCurrencyCode));
            IF GLBuff."Amount (LCY)" <> 0 THEN
              GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") *
                                          ABS(GLEntryTemp.Amount);
            GLEntryTemp."Use Tax" := TRUE;
          END;
        END;
      END ELSE BEGIN
        IF ConsSourceCurrencyCode = '' THEN BEGIN //локальные валюты во внешней системе и в нав совпадают
          GLEntryTemp."Original Currency Code" := ConvertCurrencyCode2(GLBuff."Credit Currency Code");
          GLEntryTemp."Original Amount" := 0;
          GLEntryTemp.Amount := -GLBuff."Amount (LCY)";
          GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)";
          GLEntryTemp."Use Tax" := TRUE;
        END ELSE BEGIN //локальные валюты во внешней системе и в нав НЕ совпадают
          IF ((GLBuff."Credit Currency Code" = '')
             OR
             (GLBuff."Credit Currency Code" = ConsSourceCurrencyCode))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
            GLEntryTemp."Original Amount" := 0;
            //GLEntryTemp.Amount := //GLBuff."Amount (LCY)"; //тут все равно, какой счет - BS или PL
            GLEntryTemp.Amount := -CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLBuff."Document Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLBuff."Amount (LCY)",
                                     CurrExchRate.ExchangeRate(
                                       GLBuff."Document Date",
                                       GLEntryTemp."Original Currency Code"));

            GLEntryTemp."Credit Amount" := -GLEntryTemp.Amount;
            GLEntryTemp."Use Tax" := TRUE;
          END;
          IF GLBuff."Credit Currency Code" = GLSetup."LCY Code" THEN BEGIN //По идее это error
            GLEntryTemp."Original Currency Code" := '';
            IF GLBuff."Credit Original Amount" <> 0 THEN BEGIN
              GLEntryTemp."Original Amount" := -GLBuff."Credit Original Amount";
              GLEntryTemp.Amount := -GLBuff."Credit Original Amount"
            END ELSE BEGIN
              GLEntryTemp.Amount := -CurrExchRate.ExchangeAmtFCYToLCY(
                                       GLBuff."Document Date",
                                       ConsSourceCurrencyCode,
                                       GLBuff."Amount (LCY)",
                                       CurrExchRate.ExchangeRate(
                                         GLBuff."Document Date",
                                         ConsSourceCurrencyCode));
              GLEntryTemp."Original Amount" := GLEntryTemp.Amount;
            END;
            IF GLBuff."Amount (LCY)" <> 0 THEN
              GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") *
                                          ABS(GLEntryTemp.Amount);
          END;
          IF (GLBuff."Credit Currency Code" <> '') AND (GLBuff."Credit Currency Code" <> GLSetup."LCY Code") AND
             (GLBuff."Credit Currency Code" <> ConsSourceCurrencyCode)
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConvertCurrencyCode2(GLBuff."Credit Currency Code");
            GLEntryTemp."Original Amount" := 0;
            GLEntryTemp.Amount := -CurrExchRate.ExchangeAmtFCYToLCY(
                                     GLBuff."Document Date",
                                     ConsSourceCurrencyCode,
                                     GLBuff."Amount (LCY)",
                                     CurrExchRate.ExchangeRate(
                                       GLBuff."Document Date",
                                       ConsSourceCurrencyCode));
            IF GLBuff."Amount (LCY)" <> 0 THEN
              GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") *
                                          ABS(GLEntryTemp.Amount);
            GLEntryTemp."Use Tax" := TRUE;
          END;
        END;
      END;

      //NC MDTY01 < MP
    END;

    PROCEDURE GetAccountFromMask@1000000039(MaskCode@1000000000 : Code[20];AccountCode@1000000001 : Code[20]) Result : Code[20];
    VAR
      MinLength@1000000002 : Integer;
      PositionInString@1000000003 : Integer;
    BEGIN
      //NC MDTC01.1 > AKO
      IF STRLEN(MaskCode) <= STRLEN(AccountCode) THEN
        MinLength := STRLEN(MaskCode)
      ELSE
        MinLength := STRLEN(AccountCode);

      PositionInString := 1;

      WHILE PositionInString <= MinLength DO BEGIN
        IF COPYSTR(MaskCode, PositionInString, 1) <> '0' THEN
          Result := Result + COPYSTR(AccountCode, PositionInString, 1);
        PositionInString := PositionInString + 1;
      END;
      //NC MDTC01.1 < AKO
    END;

    PROCEDURE CheckUseOfMask@1000000043(VAR TempMapping@1000000000 : TEMPORARY Record 50022;BaseMappingCode@1000000002 : Code[20];Scope@1000000004 : 'GL,FA';VAR OneMapping@1000000009 : Boolean) : Boolean;
    VAR
      CoAMappingMask@1000000001 : Record 50020;
      SymbolPos@1000000003 : Integer;
      NoOfSymb@1000000005 : Integer;
      Mapping@1000000006 : Record 50022;
      LastExpDate@1000000007 : Date;
      Text550001@1000000008 : TextConst 'ENU=Error in Mapping Expiration Date Setup. Please Check Mapping %1 and it''s neigbour.;RUS=Ошибка в последовательности дат действия Схем Трансформации. Проверьте настройку для схемы %1 и соседних.';
    BEGIN
      //NC MDTM02.1 > MP
      Mapping.GET(BaseMappingCode);
      REPEAT
        NoOfSymb := 0;
        TempMapping.INIT;
        TempMapping.Code := Mapping.Code;
        IF Mapping."Expiration Date" <> 0D THEN BEGIN
          IF Mapping."Expiration Date" <= LastExpDate THEN
            ERROR(Text550001,Mapping.Code);
          TempMapping."Expiration Date" := Mapping."Expiration Date";
          LastExpDate := Mapping."Expiration Date";
        END ELSE
          TempMapping."Expiration Date" := 31122099D;//Подумать, какую дату сюда записать!!!

        CoAMappingMask.SETRANGE("Mapping Code",Mapping.Code);
        CoAMappingMask.SETRANGE(Scope,Scope);

        IF CoAMappingMask.FINDFIRST THEN BEGIN
          NoOfSymb := 20;
          REPEAT
            IF STRPOS(CoAMappingMask."Ext. G/L Account Filter",'*') = 0 THEN
              ERROR(Text038,CoAMappingMask.TABLECAPTION,Mapping.Code,CoAMappingMask."Line No.");
            SymbolPos := STRPOS(CoAMappingMask."Ext. G/L Account Filter",'*');
            IF NoOfSymb > SymbolPos THEN
              NoOfSymb := SymbolPos;
          UNTIL CoAMappingMask.NEXT = 0;
          NoOfSymb := NoOfSymb - 1;
          TempMapping."Temp Use Masks" := TRUE;
          TempMapping."Temp No. Of Symb. In Masks" := NoOfSymb;
        END;
        TempMapping.INSERT;
      UNTIL (NOT Mapping.GET(Mapping."New Mapping Code")) OR (TempMapping."Expiration Date" = 0D);
      IF TempMapping.COUNT = 1 THEN BEGIN
        OneMapping := TRUE;
        TempMapping.FINDFIRST;
      END;
      //NC MDTM02.1 < MP
    END;

    PROCEDURE FindAccountFromMask@1000000041(ExtAccountCode@1000000002 : Code[20];MappingCode@1000000000 : Code[20];NoOfSymb@1000000001 : Integer;Scope@1000000007 : 'GL,FA') : Code[20];
    VAR
      CoAMappingMask@1000000003 : Record 50020;
      TmpGLAcc@1000000004 : TEMPORARY Record 15;
      ExtGLAccFilter@1000000005 : Code[21];
      ExtAccMaskCode@1000000006 : Code[20];
    BEGIN
      //NC MDTM02.1 > MP
      ExtGLAccFilter := COPYSTR(ExtAccountCode,1,NoOfSymb) + '*';
      CoAMappingMask.SETRANGE("Mapping Code",MappingCode);
      CoAMappingMask.SETRANGE(Scope,Scope);
      CoAMappingMask.SETFILTER("Ext. G/L Account Filter",ExtGLAccFilter);
      IF NOT CoAMappingMask.FINDFIRST THEN
        EXIT(ExtAccountCode);

      TmpGLAcc."No." := ExtAccountCode;
      TmpGLAcc.INSERT;

      REPEAT
        TmpGLAcc.SETFILTER("No.",CoAMappingMask."Ext. G/L Account Filter");
        IF TmpGLAcc.FINDFIRST THEN BEGIN
          ExtAccMaskCode := GetAccountFromMask(CoAMappingMask.Mask,ExtAccountCode);
          EXIT(ExtAccMaskCode);
        END;
      UNTIL CoAMappingMask.NEXT = 0;

      EXIT(ExtAccountCode);
      //NC MDTM02.1 < MP
    END;

    PROCEDURE CheckGLAccountTypes@1000000040(ConsSource@1000000000 : Record 50001;GLBuffer@1000000001 : Record 50008;ConsRegNo@1000000004 : Integer;MappingCode@1000000009 : Code[20]);
    VAR
      GLMapp1@1000000002 : Record 50002;
      GLMapp2@1000000008 : Record 50002;
      GLAcc1@1000000006 : Record 15;
      GLAcc2@1000000007 : Record 15;
      DtAccOffBS@1000000003 : Boolean;
      CtAccOffBS@1000000005 : Boolean;
    BEGIN
      //NC MDTM02.1 > MP
      IF (DTMappLineNo = 0) OR (CTMappLineNo = 0) THEN
        EXIT;
      IF (DTMappLineNo <> 0) AND GLMapp1.GET(MappingCode,DTMappLineNo) THEN BEGIN
        IF (GLMapp1."Receiver Account Code" <> '') AND GLAcc1.GET(GLMapp1."Receiver Account Code") THEN
          DtAccOffBS := GLAcc1."Income/Balance" = GLAcc1."Income/Balance"::"Off Balance Sheet";
      END;
      IF (CTMappLineNo <> 0) AND GLMapp2.GET(MappingCode,CTMappLineNo) THEN BEGIN
        IF (GLMapp2."Receiver Account Code" <> '') AND GLAcc2.GET(GLMapp2."Receiver Account Code") THEN
          CtAccOffBS := GLAcc2."Income/Balance" = GLAcc2."Income/Balance"::"Off Balance Sheet";
      END;

      IF DtAccOffBS <> CtAccOffBS THEN BEGIN
          IsGlobalError := TRUE;
          ErrMessage := STRSUBSTNO(Text039,GLAcc1."No.",GLAcc2."No.");
          //IF NOT GLAcc.GET(GLMapp."Receiver Account Code") THEN;
          //IF NOT Dim.GET(DefDim."Dimension Code") THEN;
          ErrorJournal.AddErrorBuferGLMapp1GLMapp2(COMPANYNAME,
                                           ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                           ConsSource.Code,ConsRegNo,'EDTC13',
                                           ErrMessage,COMPANYNAME,GLBuffer,GLMapp1,GLMapp2,JobProcStatusLineNo);
        END;
      //NC MDTM02.1 < MP
    END;

    PROCEDURE UpdateLedgEntryDim@1000000044(VAR LedgDimensionTMP@1000000010 : TEMPORARY Record 355;EntryNo@1000000009 : Integer;ConsolidationSource1@1000000000 : Record 50001;MappLineNo@1000000001 : Integer;MappingCode@1000000004 : Code[20]);
    VAR
      ConvOfChartOfAccounts@1000000008 : Record 50002;
      Text50055@1210006 : TextConst 'ENU="You should define Dimension %1 %2/%3/%4 in table %5 ";RUS=Вы должны определить Измерение %1 в %2 или в %3 или в %4 таблицы %5.';
      cConsAcc@1210010 : Code[20];
      SourceGLAccountNo@1000000003 : Code[20];
      CountLEDim@1101495000 : Integer;
      Rating@1101495001 : Integer;
      SourceCorrGLAccountNo@1000000005 : Code[20];
      DimValue@1000000007 : Record 349;
      DefDim@1000000011 : Record 352;
      LinkedDim@1000000012 : Record 50016;
      TempBool@1000000002 : Boolean;
      FinancialInstrument@1000000006 : Record 50021;
      FI_No@1101495002 : Code[20];
      FI@1101495003 : Record 50021;
      IncTaxDimCode@1101495004 : Code[20];
      GLEntryBufEmpty@1101495006 : Record 50093;
      locGLBuffer@1101495005 : Record 50008;
    BEGIN
      //NC PIF010 > MP
      //NC MDTC03 > MP
      IF (ConsolidationSource1."Import Format" = ConsolidationSource1."Import Format"::FromBuffer) AND
         ConsolidationSource1."Use GL Mapping" AND (MappLineNo <> 0)
      THEN BEGIN
        ConvOfChartOfAccounts.GET(MappingCode,MappLineNo);
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 1" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 1" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(1,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(1,EntryNo,gConsBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimensionTMP.INIT;
          LedgDimensionTMP."Table ID" := 17;
          LedgDimensionTMP."Entry No." := EntryNo;
          LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 1";
          LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 1";
          IF NOT LedgDimensionTMP.INSERT THEN BEGIN
            TempBool := TRUE; //LedgDimensionTMP.MODIFY;
            //NCS-2345 > AAP
            IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 1" THEN BEGIN
              LedgDimensionTMP.MODIFY;
            END;
            //NCS-2345 < AAP
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 1");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 1");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := EntryNo;
                LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimensionTMP.INSERT THEN;
                //  LedgDimensionTMP.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 2" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 2" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(2,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(2,EntryNo,gConsBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimensionTMP.INIT;
          LedgDimensionTMP."Table ID" := 17;
          LedgDimensionTMP."Entry No." := EntryNo;
          LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 2";
          LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 2";
          IF NOT LedgDimensionTMP.INSERT THEN BEGIN
            TempBool := TRUE; //LedgDimensionTMP.MODIFY;
            //NCS-2345 > AAP
            IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 2" THEN BEGIN
              LedgDimensionTMP.MODIFY;
            END;
            //NCS-2345 < AAP
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 2");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 2");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := EntryNo;
                LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 2";
                LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 2";
                LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimensionTMP.INSERT THEN;
                //  LedgDimensionTMP.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 3" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 3" <> '')
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(3,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(3,EntryNo,gConsBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimensionTMP.INIT;
          LedgDimensionTMP."Table ID" := 17;
          LedgDimensionTMP."Entry No." := EntryNo;
          LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 3";
          LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 3";
          IF NOT LedgDimensionTMP.INSERT THEN BEGIN
            TempBool := TRUE; //LedgDimensionTMP.MODIFY;
            //NCS-2345 > AAP
            IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 3" THEN BEGIN
              LedgDimensionTMP.MODIFY;
            END;
            //NCS-2345 < AAP
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 3");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 3");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := EntryNo;
                LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 3";
                LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 3";
                LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimensionTMP.INSERT THEN;
                //  LedgDimensionTMP.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
        //NC MDTC01 > MP Добавляем стандартные измерения со счета
        DefDim.SETRANGE("Table ID",15);
        DefDim.SETRANGE("No.",cConsAcc);
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        IF DefDim.FINDSET THEN
          REPEAT
            LedgDimensionTMP.INIT;
            LedgDimensionTMP."Table ID" := 17;
            LedgDimensionTMP."Entry No." := EntryNo;
            LedgDimensionTMP."Dimension Code" := DefDim."Dimension Code";
            LedgDimensionTMP."Dimension Value Code" := DefDim."Dimension Value Code";

            //NC NCS-1002.2 > DP
            IF DefDim."Value Posting" = DefDim."Value Posting"::"Same Code" THEN BEGIN
              LedgDimensionTMP."Dim in Source" :=DefDim."Dimension Code";
              LedgDimensionTMP."Dim Value Code in Source" := DefDim."Dimension Value Code";
            END;
            //NC NCS-1002.2 < DP

            //NC NCS-1002 > DP
            IF NOT LedgDimensionTMP.INSERT THEN
              IF DefDim."Value Posting" = DefDim."Value Posting"::"Same Code" THEN
                LedgDimensionTMP.MODIFY;
            {
            IF NOT LedgDimensionTMP.INSERT THEN;
            }
            //NC NCS-1002 < DP

          UNTIL DefDim.NEXT = 0;
        //NC MDTC01 < MP
      END;
      //NC MDTC03 < MP
      //NC PIF010 < MP

      // NC MTD11 > AIG
      LedgDimensionTMP.RESET;
      LedgDimensionTMP.SETRANGE("Table ID",17);
      LedgDimensionTMP.SETRANGE("Entry No.", EntryNo);
      LedgDimensionTMP.SETRANGE("Dimension Code", ConsolidationSetup."Fin. Instrument Dimension Code");
      IF LedgDimensionTMP.FINDFIRST THEN BEGIN
        DefDim.RESET;
        DefDim.SETRANGE("Table ID", 50021);
        DefDim.SETRANGE("No.", LedgDimensionTMP."Dimension Value Code");
        // NC NC-973 > SKV
        FI_No := LedgDimensionTMP."Dimension Value Code";
        // NC NC-973 < SKV
        IF DefDim.FINDSET THEN
        REPEAT
          LedgDimensionTMP.INIT;
          LedgDimensionTMP."Table ID" := 17;
          LedgDimensionTMP."Entry No." := EntryNo;
          LedgDimensionTMP."Dimension Code" := DefDim."Dimension Code";
          LedgDimensionTMP."Dimension Value Code" := DefDim."Dimension Value Code";

          // NC NC-973 > SKV
          // 4-й случай обрабоки стандартных измерений ФИ
          IF LedgDimensionTMP."Dimension Code" = MovingDataSetup."INC.TAX Dimension Code" THEN BEGIN
            FI.GET(FI_No);
            IncTaxDimCode := FI.GetIncTaxDimCode;
            IF IncTaxDimCode IN ['','MIXED'] THEN BEGIN
              IF FI."Underlying Asset" <> '' THEN BEGIN
                FI.GET(FI."Underlying Asset");
                IncTaxDimCode := FI.GetIncTaxDimCode;
              END;
            END;
            IF IncTaxDimCode <> '' THEN
              LedgDimensionTMP."Dimension Value Code" := IncTaxDimCode;
          END;
          // NC NC-973 < SKV

          IF NOT LedgDimensionTMP.INSERT THEN
            //NC NCS-733 > DP
            IF NOT (DefDim."Dimension Code"=MovingDataSetup."INC.TAX Dimension Code") THEN
            //NC NCS-733 > DP
            LedgDimensionTMP.MODIFY;
        UNTIL DefDim.NEXT = 0;

        // NC NC-973 > SKV
        // 4-й случай обрабоки стандартных измерений ФИ
        //MovingDataSetup.GET;
        //MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
        // Это измерение будет обработанно особенным образом
        //DefDim.SETFILTER("Dimension Code", '<>%1', MovingDataSetup."INC.TAX Dimension Code");
        //
        //   LedgDimensionTMP."Dimension Value Code" - код финансового инструмента, умолчательные измерения с которого вставляем
        // NC NC-973 < SKV



      END;
      // NC MTD11 < AIG
    END;

    PROCEDURE CheckMappingIsBlocked@1000000045(MappingCode@1000000000 : Code[20]);
    VAR
      JobProcessesStatus@1000000001 : Record 50063;
      ConsSource@1000000002 : Record 50001;
      Text55010@1000000003 : TextConst 'ENU=Cannot modify. There is a proccess which uses it by source %1 in company %2.;RUS=Невозможно редактировать настройку. Рабочий процесс использует ее по источнику %1 в фирме %2.';
    BEGIN
      //NC MDTC10 > MP
      JobProcessesStatus.RESET;
      JobProcessesStatus.SETRANGE(Status,JobProcessesStatus.Status::Working);
      JobProcessesStatus.SETRANGE("Type Processing",JobProcessesStatus."Type Processing"::"Cons. Source");
      JobProcessesStatus.SETRANGE("Status Monitor",JobProcessesStatus."Status Monitor"::Transformation);
      IF JobProcessesStatus.FINDSET THEN
        REPEAT
          ConsSource.CHANGECOMPANY(JobProcessesStatus."Company No.");
          IF ConsSource.GET(JobProcessesStatus.Processor) THEN
            IF ConsSource."Mapping Code" = MappingCode THEN
              ERROR(STRSUBSTNO(Text55010,JobProcessesStatus.Processor,JobProcessesStatus."Company No."));
        UNTIL JobProcessesStatus.NEXT = 0;
      //NC MDTC10 < MP
    END;

    PROCEDURE GetMapping@1000000047(PostingDate@1000000000 : Date;VAR TempMapping@1000000001 : TEMPORARY Record 50022);
    BEGIN
      //NC MDTM11 > MP
      TempMapping.SETCURRENTKEY("Expiration Date");
      //TempMapping.SETRANGE("Expiration Date",CALCDATE('<1D>',PostingDate),31122099D);
      TempMapping.SETRANGE("Expiration Date",PostingDate,31122099D);
      TempMapping.FINDFIRST;
      //NC MDTM11 < MP
    END;

    PROCEDURE SetAccountTypeAccountNo2@1000000046(VAR GenJournalLine@1000000004 : Record 81;GLEntry@1000000000 : Record 17;VAR LedgEntryDim@1000000008 : Record 355;CoA_Mapping@1000000001 : Record 50002) : Boolean;
    VAR
      ConsDataBuffer@1000000002 : Record 50008;
      GLAccount@1000000009 : Record 15;
      IsSpecialAccountType@1000000010 : Boolean;
      VendorPostingGroup@1000000003 : Record 93;
      CustomerPostingGroup@1000000005 : Record 92;
    BEGIN
      //NC MTD02 > AIG
      IsSpecialAccountType := FALSE;

      //NC MIO-10.1 > DP
      CurrCompany.GET(COMPANYNAME);
      IF NOT CurrCompany."G/L Accounting Only" THEN
      //NC MIO-10.1 < DP

      IF GLAccount.GET(CoA_Mapping."Receiver Account Code") THEN
        IF NOT (GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"G/L Account") THEN
          //NC NCS-2044 > DP
          {
          IF CoA_Mapping."Ext. Source Type" <> CoA_Mapping."Ext. Source Type"::"G/L Account" THEN BEGIN
          }
          IF (CoA_Mapping."Ext. Source Type" IN  [CoA_Mapping."Ext. Source Type"::Customer,
                                                  CoA_Mapping."Ext. Source Type"::Vendor,
                                                  CoA_Mapping."Ext. Source Type"::"Bank Account"])
          THEN BEGIN
          //NC NCS-2044 < DP
            IsSpecialAccountType := TRUE;
            // определяем сущность из настроек меппинга
            GenJournalLine.VALIDATE("Account Type", CoA_Mapping."Ext. Source Type");
            GenJournalLine."Account No." :=
                     SetAccountNo2(GLEntry,CoA_Mapping."Ext. Source Type",LedgEntryDim,CoA_Mapping."Source Posting Group");
            GenJournalLine."Posting Group" := CoA_Mapping."Source Posting Group";

            //NC MTD02.1 > DP Смена учетной группы только при наличии аналитики AC.COMP=INT
            IF IsInterest(GLEntry,GLAccount."Ext. Source Type",LedgEntryDim) THEN BEGIN
            //NC MTD02.1 < DP

            IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN BEGIN
              IF CustomerPostingGroup.GET(GenJournalLine."Posting Group") THEN
                IF CustomerPostingGroup."Loan Princ/Int. Posting Group" <>  '' THEN
                  GenJournalLine."Posting Group" := CustomerPostingGroup."Loan Princ/Int. Posting Group";
            END;
            IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN BEGIN
              IF VendorPostingGroup.GET(GenJournalLine."Posting Group") THEN
                IF VendorPostingGroup."Loan Princ/Int. Posting Group" <>  '' THEN
                  GenJournalLine."Posting Group" := VendorPostingGroup."Loan Princ/Int. Posting Group";
            END;

            //NC MTD02.1 > DP
            END;
            //NC MTD02.1 < DP

          END ELSE

          //NC NCS-2044 > DP
          IF ((GLAccount."Ext. Source Type" <> GLAccount."Ext. Source Type"::"G/L Account")
          AND (CoA_Mapping."Ext. Source Type" = CoA_Mapping."Ext. Source Type"::"G/L Account"))
          OR ((CoA_Mapping."Ext. Source Type" = CoA_Mapping."Ext. Source Type"::"G/L Account(force)")
          AND NOT GLAccount."Direct Posting") THEN BEGIN
          {
          IF GLAccount."Ext. Source Type" <> GLAccount."Ext. Source Type"::"G/L Account" THEN BEGIN
          }
          //NC NCS-2044 < DP

            IsSpecialAccountType := TRUE;
            // определяем сущность из настроек плана счетов
            GenJournalLine.VALIDATE("Account Type", GLAccount."Ext. Source Type");
            GenJournalLine."Account No." :=
                     SetAccountNo2(GLEntry,GLAccount."Ext. Source Type",LedgEntryDim,GLAccount."Source Posting Group");

            GenJournalLine."Posting Group" := GLAccount."Source Posting Group";

            //NC MTD02.1 > DP Смена учетной группы только при наличии аналитики AC.COMP=INT
            IF IsInterest(GLEntry,GLAccount."Ext. Source Type",LedgEntryDim) THEN BEGIN
            //NC MTD02.1 < DP

            IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN BEGIN

              //NC MTD02.2 > DP
              CustomerPostingGroup.RESET;
              CustomerPostingGroup.SETRANGE("Loan Princ/Int. Posting Group",GenJournalLine."Posting Group");
              CustomerPostingGroup.SETRANGE("Loan Interest",TRUE);
              IF CustomerPostingGroup.FINDFIRST THEN
                GenJournalLine."Posting Group" := CustomerPostingGroup.Code;
              {
              IF CustomerPostingGroup.GET(GenJournalLine."Posting Group") THEN
                IF CustomerPostingGroup."Loan Princ/Int. Posting Group" <>  '' THEN
                  GenJournalLine."Posting Group" := CustomerPostingGroup."Loan Princ/Int. Posting Group";
              }
              //NC MTD02.2 < DP

            END;
            IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN BEGIN
              //NC MTD02.2 > DP
              VendorPostingGroup.RESET;
              VendorPostingGroup.SETRANGE("Loan Princ/Int. Posting Group",GenJournalLine."Posting Group");
              VendorPostingGroup.SETRANGE("Loan Interest",TRUE);
              IF VendorPostingGroup.FINDFIRST THEN
                GenJournalLine."Posting Group" := VendorPostingGroup.Code;
              {
              IF VendorPostingGroup.GET(GenJournalLine."Posting Group") THEN
                IF VendorPostingGroup."Loan Princ/Int. Posting Group" <>  '' THEN
                  GenJournalLine."Posting Group" := VendorPostingGroup."Loan Princ/Int. Posting Group";
              }
              //NC MTD02.2 < DP
            END;

            //NC MTD02.1 > DP
            END;
            //NC MTD02.1 < DP

          END;
      EXIT(IsSpecialAccountType);
      //NC MTD02 < AIG
    END;

    PROCEDURE SetAccountNo2@1000000051(GLEntry@1000000003 : Record 17;AccountType@1000000001 : 'G/L Account,Customer,Vendor,Bank Account';VAR LedgEntryDim@1000000000 : Record 355;PostingGroup@1000000009 : Code[20]) : Code[20];
    VAR
      Customer@1000000004 : Record 18;
      Vendor@1000000005 : Record 23;
      BankAccount@1000000006 : Record 270;
      ConsSetup@1000000002 : Record 50000;
      DefaultDimension@1000000007 : Record 352;
      DefaultDimension1@1000000008 : Record 352;
      DimensionValue@1000000010 : Record 349;
      AccNo@1000000011 : Code[20];
      EntryNo@1000000012 : Integer;
    BEGIN
      //NC MTD02 > AIG
      CASE AccountType OF
        AccountType::Customer:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Buffer Entry No.",ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
            EXIT(LedgEntryDim."Dimension Value Code");
          END;
        AccountType::Vendor:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Buffer Entry No.",ConsolidationSetup."Counterparty Dim Code") THEN BEGIN
            //CreateVendorCard(ConsolidationSetup."Counterparty Dim Code", LedgEntryDim."Dimension Value Code");
            EXIT(LedgEntryDim."Dimension Value Code");
          END;
        AccountType::"Bank Account":
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Buffer Entry No.",ConsolidationSetup."Bank Account Dimension Code") THEN
          BEGIN
            EXIT(LedgEntryDim."Dimension Value Code");
          END;
      END;
      //NC MTD02 < AIG
    END;

    PROCEDURE CreateVendorCard@1000000050(DimCode@1000000004 : Code[20];CustomerNo@1000000002 : Code[20]);
    VAR
      Customer@1000000000 : Record 18;
      Vendor@1000000001 : Record 23;
      DefaultDimension@1000000003 : Record 352;
    BEGIN
      //NC MTD02 > AIG
      IF Customer.GET(CustomerNo) THEN
      IF NOT Vendor.GET(CustomerNo) THEN BEGIN

        Vendor.INIT;
        Vendor."No." := CustomerNo;
        Vendor.Name := Customer.Name;
        Vendor."Search Name" := Customer."Search Name";
        Vendor."Name 2" := Customer."Name 2";
        Vendor.Address := Customer.Address;
        Vendor."Address 2" := Customer."Address 2";
        Vendor.City := Customer.City;
        Vendor."Phone No." := Customer."Phone No.";
        Vendor."Telex No." := Customer."Telex No.";
        Vendor."Currency Code" := Customer."Currency Code";
        //Vendor."Agreement Posting" := Customer."Agreement Posting";
        Vendor."Agreement Posting" := Vendor."Agreement Posting"::Mandatory;
        Vendor.INSERT(TRUE);
        {
        DefaultDimension.INIT;
        DefaultDimension."Table ID" :=DATABASE::Vendor;
        DefaultDimension."No." := CustomerNo;
        DefaultDimension."Dimension Code" := DimCode;
        DefaultDimension."Dimension Value Code" := CustomerNo;
        DefaultDimension.INSERT(TRUE);
        }
      END;
      //NC MTD02 < AIG
    END;

    PROCEDURE CreateVendorBuffer@1101495022(CustomerNo@1000000002 : Code[20]);
    VAR
      Customer@1000000000 : Record 18;
      Vendor@1000000001 : Record 23;
      DefaultDimension@1000000003 : Record 352;
      BufferCustomer@1101495000 : Record 50045;
    BEGIN
      //NC S1471 > PCH
      NoVendErr := '';
      IF Customer.GET(CustomerNo) THEN
      IF NOT Vendor.GET(CustomerNo) THEN BEGIN

        VendorForCustomerTemp.INIT;
        VendorForCustomerTemp."No." := CustomerNo;
        VendorForCustomerTemp.Name := Customer.Name;
        VendorForCustomerTemp."Search Name" := Customer."Search Name";
        VendorForCustomerTemp."Name 2" := Customer."Name 2";
        VendorForCustomerTemp.Address := Customer.Address;
        VendorForCustomerTemp."Address 2" := Customer."Address 2";
        VendorForCustomerTemp.City := Customer.City;
        VendorForCustomerTemp."Phone No." := Customer."Phone No.";
        VendorForCustomerTemp."Telex No." := Customer."Telex No.";
        VendorForCustomerTemp."Fax No." := Customer."Fax No.";
        VendorForCustomerTemp."Currency Code" := Customer."Currency Code";
        //VendorForCustomerTemp."Agreement Posting" := Customer."Agreement Posting";
        VendorForCustomerTemp."Agreement Posting" := Vendor."Agreement Posting"::Mandatory;

        VendorForCustomerTemp."Relationship to the Group" := Customer."Relationship to the Group";
        VendorForCustomerTemp."Counterparty Category" := Customer."Counterparty Category";
        VendorForCustomerTemp."Name ENG" := Customer."Name ENG";
        VendorForCustomerTemp."Counterparty Type" := Customer."Counterparty Type";
        VendorForCustomerTemp.Industry := Customer.Industry;
        VendorForCustomerTemp."Vendor Segment" := Customer."Customer Segment";
        VendorForCustomerTemp."Vendor ID" := Customer."Customer ID";
        IF VendorForCustomerTemp.INSERT THEN
          NoVendErr := Text071;

      END;
      //NC S1471 < PCH
    END;

    PROCEDURE CheckAgreementPosting@1000000048(ConsSource@1000000003 : Record 50001;GLBuffer@1000000004 : Record 50008;ConsRegNo@1000000005 : Integer;MappingCode@1000000002 : Code[20]);
    VAR
      GLAccount@1000000000 : Record 15;
      GLMapp@1000000001 : Record 50002;
    BEGIN
      //NC MTD03 > AIG
      {
      IF (DTMappLineNo <> 0) AND GLMapp.GET(MappingCode,DTMappLineNo) AND (GLAccount.GET(GLMapp."Receiver Account Code")) AND
         ((GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"0")) AND
         ((GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::Vendor) OR
          (GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::Customer)) THEN BEGIN
         TempDebitLedgEntryDim.RESET;
         TempDebitLedgEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
         TempDebitLedgEntryDim.SETRANGE("Entry No.",GLBuffer."Entry No.");
         TempDebitLedgEntryDim.SETRANGE("Dimension Code",ConsolidationSetup."Deal Dimension Code");
         IF NOT TempDebitLedgEntryDim.FINDFIRST THEN BEGIN
           TempDebitLedgEntryDim.RESET;
           TempDebitLedgEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
           TempDebitLedgEntryDim.SETRANGE("Entry No.",GLBuffer."Entry No.");
           TempDebitLedgEntryDim.SETRANGE("Dimension Code",ConsolidationSetup."Counterparty Dim Code");
      //     IF (TempDebitLedgEntryDim.FINDFIRST) ANG Клиент THEN BEGIN

             IsGlobalError := TRUE;
        //     ErrMessage := Text020 + FORMAT(GLMapp."Receiver Account Code") + Text019 + FORMAT(DefDim."Dimension Code");
             ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                   ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSource.Code,ConsRegNo,'EDTC10',
                                                   ErrMessage,COMPANYNAME,GLBuffer,GLAccount,
                                                   GLMapp,JobProcStatusLineNo);
           END;
      END;

      IF (CTMappLineNo <> 0) AND GLMapp.GET(MappingCode,CTMappLineNo) AND (GLAccount.GET(GLMapp."Receiver Account Code")) AND
         ((GLAccount."Ext. Source Type"=GLAccount."Ext. Source Type"::"0")) AND
         ((GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::Vendor) OR
          (GLAccount."Ext. Source Type" = GLAccount."Ext. Source Type"::Customer)) THEN BEGIN
      //TempCreditLedgEntryDim
      END;
      }
      //NC MTD03 < AIG
    END;

    PROCEDURE GetFXAccount@1000000049(GenJournalLine@1000000000 : Record 81) Acc : Code[20];
    VAR
      BAPostingGroup@1000000001 : Record 277;
      CustomerPostingGroup@1000000002 : Record 92;
      VendorPostingGroup@1000000003 : Record 93;
    BEGIN
      //NC MTD02 > AIG
      CASE GenJournalLine."Account Type" OF
        GenJournalLine."Account Type"::"G/L Account":
          EXIT(GenJournalLine."Account No.");
        GenJournalLine."Account Type"::"Bank Account": BEGIN
          BAPostingGroup.GET(GenJournalLine."Posting Group");
          EXIT(BAPostingGroup."G/L Bank Account No.");
        END;
        GenJournalLine."Account Type"::Customer: BEGIN
          CustomerPostingGroup.GET(GenJournalLine."Posting Group");
          EXIT(CustomerPostingGroup."Receivables Account");
        END;
        GenJournalLine."Account Type"::Vendor: BEGIN
          VendorPostingGroup.GET(GenJournalLine."Posting Group");
          EXIT(VendorPostingGroup."Payables Account");
        END;
      END;
      //NC MTD02 < AIG
    END;

    PROCEDURE IsInterest@1101495008(GLEntry@1000000003 : Record 17;AccountType@1000000001 : 'G/L Account,Customer,Vendor,Bank Account';VAR LedgEntryDim@1000000000 : Record 355) : Boolean;
    VAR
      Customer@1000000004 : Record 18;
      Vendor@1000000005 : Record 23;
      BankAccount@1000000006 : Record 270;
      ConsSetup@1000000002 : Record 50000;
      DefaultDimension@1000000007 : Record 352;
      DefaultDimension1@1000000008 : Record 352;
      DimensionValue@1000000010 : Record 349;
      AccNo@1000000011 : Code[20];
      EntryNo@1000000012 : Integer;
      IsInterest@1101495000 : Boolean;
    BEGIN
      //NC MTD02.1 > DP
      MovingDataSetup.GET;
      CASE AccountType OF
        AccountType::Customer:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Buffer Entry No.",
            MovingDataSetup."Body/Percentage Dimension Code") THEN BEGIN
            EXIT((MovingDataSetup."Percentage Dimencion Value"=LedgEntryDim."Dimension Value Code"));
          END;
        AccountType::Vendor:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Buffer Entry No.",
            MovingDataSetup."Body/Percentage Dimension Code") THEN BEGIN
              EXIT((MovingDataSetup."Percentage Dimencion Value"=LedgEntryDim."Dimension Value Code"));
          END;
      END;
      EXIT(FALSE);
      //NC MTD02.1 < DP
    END;

    PROCEDURE SetTempLedgEntryDim@1101495009(VAR Dt_LED@1101495000 : Record 355;VAR Ct_LED@1101495001 : Record 355);
    BEGIN
      //NC > AIG
      // временная функция
      TempDebitLedgEntryDim := Dt_LED;
      TempCreditLedgEntryDim := Ct_LED;
      //NC < AIG
    END;

    PROCEDURE CreateDebitDimBuffer3@1101495011(ConsBuffer@1210000 : Record 50008;VAR LedgerEntryDimTmp@1210001 : TEMPORARY Record 355;ConsRegister@1210003 : Record 50005;EntryNo@1000000000 : Integer;UseCheck@1000000001 : Boolean;MappingCode@1000000002 : Code[20]) nErr : Integer;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      //NC PIF001 > DP
      IF (ConsBuffer."Dimension 1 Code" <> '') AND
         (ConsBuffer."Debit Dimension 1 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 1 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 1 Code",ConsBuffer."Debit Dimension 1 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 2 Code" <> '') AND
         (ConsBuffer."Debit Dimension 2 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 2 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 2 Code",ConsBuffer."Debit Dimension 2 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 3 Code" <> '') AND
         (ConsBuffer."Debit Dimension 3 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 3 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 3 Code",ConsBuffer."Debit Dimension 3 Value Code",
                       '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 4 Code" <> '') AND
         (ConsBuffer."Debit Dimension 4 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 4 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 4 Code",ConsBuffer."Debit Dimension 4 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 5 Code" <> '') AND
         (ConsBuffer."Debit Dimension 5 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 5 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 5 Code",ConsBuffer."Debit Dimension 5 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 6 Code" <> '') AND                  //Контрагент
         (ConsBuffer."Debit Dimension 6 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 6 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 6 Code",ConsBuffer."Debit Dimension 6 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 7 Code" <> '') AND
         (ConsBuffer."Debit Dimension 7 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 7 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 7 Code",ConsBuffer."Debit Dimension 7 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 8 Code" <> '') AND
         (ConsBuffer."Debit Dimension 8 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 8 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 8 Code",ConsBuffer."Debit Dimension 8 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 9 Code" <> '') AND                 //Банки
         (ConsBuffer."Debit Dimension 9 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 9 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 9 Code",ConsBuffer."Debit Dimension 9 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 10 Code" <> '') AND
         (ConsBuffer."Debit Dimension 10 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 10 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 10 Code",ConsBuffer."Debit Dimension 10 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 11 Code" <> '') AND
         (ConsBuffer."Debit Dimension 11 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 11 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 11 Code",ConsBuffer."Debit Dimension 11 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 12 Code" <> '') AND
         (ConsBuffer."Debit Dimension 12 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 12 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 12 Code",ConsBuffer."Debit Dimension 12 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 13 Code" <> '') AND
         (ConsBuffer."Debit Dimension 13 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 13 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 13 Code",ConsBuffer."Debit Dimension 13 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 14 Code" <> '') AND
         (ConsBuffer."Debit Dimension 14 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 14 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 14 Code",ConsBuffer."Debit Dimension 14 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 15 Code" <> '') AND
         (ConsBuffer."Debit Dimension 15 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 15 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 15 Code",ConsBuffer."Debit Dimension 15 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 16 Code" <> '') AND
         (ConsBuffer."Debit Dimension 16 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 16 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 16 Code",ConsBuffer."Debit Dimension 16 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 17 Code" <> '') AND
         (ConsBuffer."Debit Dimension 17 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 17 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 17 Code",ConsBuffer."Debit Dimension 17 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      //NC MDB01 > MP
      IF (ConsBuffer."Dimension 18 Code" <> '') AND
         (ConsBuffer."Debit Dimension 18 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 18 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 18 Code",ConsBuffer."Debit Dimension 18 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 19 Code" <> '') AND
         (ConsBuffer."Debit Dimension 19 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 19 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 19 Code",ConsBuffer."Debit Dimension 19 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 20 Code" <> '') AND
         (ConsBuffer."Debit Dimension 20 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 20 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 20 Code",ConsBuffer."Debit Dimension 20 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      //NC MDB01 < MP
      //NC PIF001 < DP
    END;

    PROCEDURE CreateCreditDimBuffer3@1101495010(ConsBuffer@1210001 : Record 50008;VAR LedgerEntryDimTmp@1210000 : TEMPORARY Record 355;ConsRegister@1210003 : Record 50005;EntryNo@1000000000 : Integer;UseCheck@1000000001 : Boolean;MappingCode@1000000002 : Code[20]) nErr : Integer;
    VAR
      IntContrValue@1210002 : Code[20];
      ReclAcc@1210004 : Code[20];
    BEGIN
      //NC PIF001 > DP
      IF (ConsBuffer."Dimension 1 Code" <> '') AND
         (ConsBuffer."Credit Dimension 1 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 1 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 1 Code",ConsBuffer."Credit Dimension 1 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 2 Code" <> '') AND
         (ConsBuffer."Credit Dimension 2 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 2 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 2 Code",ConsBuffer."Credit Dimension 2 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 3 Code" <> '') AND
         (ConsBuffer."Credit Dimension 3 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 3 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 3 Code",ConsBuffer."Credit Dimension 3 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 4 Code" <> '') AND
         (ConsBuffer."Credit Dimension 4 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 4 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 4 Code",ConsBuffer."Credit Dimension 4 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 5 Code" <> '') AND
         (ConsBuffer."Credit Dimension 5 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 5 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 5 Code",ConsBuffer."Credit Dimension 5 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 6 Code" <> '') AND      //Контрагент
         (ConsBuffer."Credit Dimension 6 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 6 Code"))
       THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 6 Code",ConsBuffer."Credit Dimension 6 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 7 Code" <> '') AND
         (ConsBuffer."Credit Dimension 7 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 7 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 7 Code",ConsBuffer."Credit Dimension 7 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 8 Code" <> '') AND
         (ConsBuffer."Credit Dimension 8 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 8 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 8 Code",ConsBuffer."Credit Dimension 8 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 9 Code" <> '') AND         //Банки
         (ConsBuffer."Credit Dimension 9 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 9 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 9 Code",ConsBuffer."Credit Dimension 9 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 10 Code" <> '') AND
         (ConsBuffer."Credit Dimension 10 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 10 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 10 Code",ConsBuffer."Credit Dimension 10 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 11 Code" <> '') AND
         (ConsBuffer."Credit Dimension 11 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 11 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 11 Code",ConsBuffer."Credit Dimension 11 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 12 Code" <> '') AND
         (ConsBuffer."Credit Dimension 12 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 12 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 12 Code",ConsBuffer."Credit Dimension 12 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 13 Code" <> '') AND
         (ConsBuffer."Credit Dimension 13 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 13 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 13 Code",ConsBuffer."Credit Dimension 13 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 14 Code" <> '') AND
         (ConsBuffer."Credit Dimension 14 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 14 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 14 Code",ConsBuffer."Credit Dimension 14 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 15 Code" <> '') AND
         (ConsBuffer."Credit Dimension 15 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 15 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 15 Code",ConsBuffer."Credit Dimension 15 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 16 Code" <> '') AND
         (ConsBuffer."Credit Dimension 16 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 16 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 16 Code",ConsBuffer."Credit Dimension 16 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);

      IF (ConsBuffer."Dimension 17 Code" <> '') AND
         (ConsBuffer."Credit Dimension 17 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 17 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 17 Code",ConsBuffer."Credit Dimension 17 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      //NC MDB01 > MP
      IF (ConsBuffer."Dimension 18 Code" <> '') AND
         (ConsBuffer."Credit Dimension 18 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 18 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 18 Code",ConsBuffer."Credit Dimension 18 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 19 Code" <> '') AND
         (ConsBuffer."Credit Dimension 19 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 19 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 19 Code",ConsBuffer."Credit Dimension 19 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      IF (ConsBuffer."Dimension 20 Code" <> '') AND
         (ConsBuffer."Credit Dimension 20 Value Code" <> '') AND (NOT TMPDimNotToCopy.GET(ConsBuffer."Dimension 20 Code"))
      THEN
        CreateDimBuffer(LedgerEntryDimTmp,DATABASE::"G/L Entry",EntryNo,
                        ConsBuffer."Dimension 20 Code",ConsBuffer."Credit Dimension 20 Value Code",
                        '',ConsRegister."No.",ConsBuffer."Document No.",ConsBuffer."Document Date",
                        ConsRegister."Cons. Source Code",ConsBuffer,UseCheck,MappingCode);
      //NC MDB01 < MP
      //NC PIF010 < MP
    END;

    PROCEDURE UpdateLedgEntryDim3@1101495012(VAR LedgDimensionTMP@1000000010 : TEMPORARY Record 355;EntryNo@1000000009 : Integer;ConsolidationSource1@1000000000 : Record 50001;MappLineNo@1000000001 : Integer;MappingCode@1000000004 : Code[20]);
    VAR
      ConvOfChartOfAccounts@1000000008 : Record 50002;
      Text50055@1210006 : TextConst 'ENU="You should define Dimension %1 %2/%3/%4 in table %5 ";RUS=Вы должны определить Измерение %1 в %2 или в %3 или в %4 таблицы %5.';
      cConsAcc@1210010 : Code[20];
      SourceGLAccountNo@1000000003 : Code[20];
      CountLEDim@1101495000 : Integer;
      Rating@1101495001 : Integer;
      SourceCorrGLAccountNo@1000000005 : Code[20];
      DimValue@1000000007 : Record 349;
      DefDim@1000000011 : Record 352;
      LinkedDim@1000000012 : Record 50016;
      TempBool@1000000002 : Boolean;
      GLEntryBufEmpty@1101495002 : Record 50093;
    BEGIN
      //NC PIF010 > MP
      //NC MDTC03 > MP
      IF (ConsolidationSource1."Import Format" = ConsolidationSource1."Import Format"::FromBuffer) AND
         ConsolidationSource1."Use GL Mapping" AND (MappLineNo <> 0)
      THEN BEGIN
        ConvOfChartOfAccounts.GET(MappingCode,MappLineNo);
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 1" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 1" <> '') AND
           NOT TMPDimNotToCopy.GET(ConvOfChartOfAccounts."Receiver Dimension Code 1")
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(1,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(1,EntryNo,gConsBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimensionTMP.INIT;
          LedgDimensionTMP."Table ID" := 17;
          LedgDimensionTMP."Entry No." := EntryNo;
          LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 1";
          LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 1";
          IF NOT LedgDimensionTMP.INSERT THEN BEGIN
            TempBool := TRUE; //LedgDimensionTMP.MODIFY;
            //NCS-2345 > AAP
            IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 1" THEN BEGIN
              LedgDimensionTMP.MODIFY;
            END;
            //NCS-2345 < AAP
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 1");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 1");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := EntryNo;
                LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimensionTMP.INSERT THEN;
                //  LedgDimensionTMP.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 2" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 2" <> '') AND
           NOT TMPDimNotToCopy.GET(ConvOfChartOfAccounts."Receiver Dimension Code 2")
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(2,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(2,EntryNo,gConsBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimensionTMP.INIT;
          LedgDimensionTMP."Table ID" := 17;
          LedgDimensionTMP."Entry No." := EntryNo;
          LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 2";
          LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 2";
          IF NOT LedgDimensionTMP.INSERT THEN BEGIN
            TempBool := TRUE; //LedgDimensionTMP.MODIFY;
            //NCS-2345 > AAP
            IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 2" THEN BEGIN
              LedgDimensionTMP.MODIFY;
            END;
            //NCS-2345 < AAP
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 2");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 2");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := EntryNo;
                LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 2";
                LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 2";
                LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimensionTMP.INSERT THEN;
                //  LedgDimensionTMP.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
        IF (ConvOfChartOfAccounts."Receiver Dimension Code 3" <> '') AND
           (ConvOfChartOfAccounts."Receiver Dim. Value Code 3" <> '') AND
           NOT TMPDimNotToCopy.GET(ConvOfChartOfAccounts."Receiver Dimension Code 1")
        THEN BEGIN

          //NCS-2089 > AAP
          //NCS-2345 > AAP
          //ConvOfChartOfAccounts.ReceiverDimValueCode(3,GLEntryBufEmpty);
          ConvOfChartOfAccounts.ReceiverDimValueCode2(3,EntryNo,gConsBuffer,LedgDimensionTMP);
          //NCS-2345 < AAP
          //NCS-2089 < AAP

          LedgDimensionTMP.INIT;
          LedgDimensionTMP."Table ID" := 17;
          LedgDimensionTMP."Entry No." := EntryNo;
          LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 3";
          LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 3";
          IF NOT LedgDimensionTMP.INSERT THEN BEGIN
            TempBool := TRUE; //LedgDimensionTMP.MODIFY;
            //NCS-2345 > AAP
            IF ConvOfChartOfAccounts."Receiver Forced Dim. Value 3" THEN BEGIN
              LedgDimensionTMP.MODIFY;
            END;
            //NCS-2345 < AAP
          END ELSE BEGIN
            LinkedDim.RESET;
            LinkedDim.SETRANGE("Dimension Code",ConvOfChartOfAccounts."Receiver Dimension Code 3");
            LinkedDim.SETRANGE("Dimension Value",ConvOfChartOfAccounts."Receiver Dim. Value Code 3");
            IF LinkedDim.FINDSET THEN
              REPEAT
                LedgDimensionTMP.INIT;
                LedgDimensionTMP."Table ID" := 17;
                LedgDimensionTMP."Entry No." := EntryNo;
                LedgDimensionTMP."Dimension Code" := ConvOfChartOfAccounts."Receiver Dimension Code 3";
                LedgDimensionTMP."Dimension Value Code" := ConvOfChartOfAccounts."Receiver Dim. Value Code 3";
                LedgDimensionTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
                LedgDimensionTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
                IF NOT LedgDimensionTMP.INSERT THEN;
                //  LedgDimensionTMP.MODIFY;
              UNTIL LinkedDim.NEXT = 0;
          END;
        END;
        //NC MDTC01 > MP Добавляем стандартные измерения со счета
        DefDim.SETRANGE("Table ID",15);
        DefDim.SETRANGE("No.",cConsAcc);
        DefDim.SETFILTER("Dimension Value Code",'<>%1','');
        IF DefDim.FINDSET THEN
          REPEAT
            LedgDimensionTMP.INIT;
            LedgDimensionTMP."Table ID" := 17;
            LedgDimensionTMP."Entry No." := EntryNo;
            LedgDimensionTMP."Dimension Code" := DefDim."Dimension Code";
            LedgDimensionTMP."Dimension Value Code" := DefDim."Dimension Value Code";

            //NC NCS-1002.2 > DP
            IF DefDim."Value Posting" = DefDim."Value Posting"::"Same Code" THEN BEGIN
              LedgDimensionTMP."Dim in Source" :=DefDim."Dimension Code";
              LedgDimensionTMP."Dim Value Code in Source" := DefDim."Dimension Value Code";
            END;
            //NC NCS-1002.2 < DP

            //NC NCS-1002 > DP
            IF NOT LedgDimensionTMP.INSERT THEN
              IF DefDim."Value Posting" = DefDim."Value Posting"::"Same Code" THEN
                LedgDimensionTMP.MODIFY;
            {
            IF NOT LedgDimensionTMP.INSERT THEN;
            }
            //NC NCS-1002 < DP

          UNTIL DefDim.NEXT = 0;
        //NC MDTC01 < MP
      END;
      //NC MDTC03 < MP
      //NC PIF010 < MP
    END;

    PROCEDURE SetGlobal@1101495013();
    BEGIN
      //NC S622 > PCH
      GLSetup.GET;
      ConsolidationSetup.GET;
      MovingDataSetup.GET;
      //NC S622 < PCH
    END;

    PROCEDURE CheckAccountSameCodeDim@1101495015(AccNo@1101495000 : Code[20];DimCode@1101495001 : Code[20]) : Boolean;
    VAR
      locDefDim@1101495002 : Record 352;
      IsSameCode@1101495003 : Boolean;
    BEGIN
      //NC NCS-1002.3 > DP
      IsSameCode := FALSE;
      locDefDim.SETRANGE("Table ID",15);
      locDefDim.SETRANGE("No.",AccNo);
      locDefDim.SETRANGE("Dimension Code",DimCode);
      locDefDim.SETRANGE("Value Posting",locDefDim."Value Posting"::"Same Code");
      locDefDim.SETFILTER("Dimension Value Code",'<>%1','');
      IF locDefDim.FINDFIRST THEN
        IsSameCode := TRUE;
      EXIT(IsSameCode);
      //NC NCS-1002.3 < DP
    END;

    PROCEDURE CheckFICurrency@1101495014(VAR GLBuff@1000000003 : Record 50008;ConsSource@1000000000 : Record 50001;ConsRegisterNo@1000000001 : Integer;MappingCode@1101495008 : Code[20];Type@1000000002 : 'Debit,Credit');
    VAR
      GLMapp@1000000005 : Record 50002;
      CurrExchRate@1000000006 : Record 330;
      GLAcc@1000000007 : Record 15;
      LocGLAccTmp@1101495000 : TEMPORARY Record 15;
      FICode@1101495001 : Code[20];
      FI@1101495002 : Record 50021;
      FIType@1101495003 : Record 50051;
      Emitent@1101495004 : Record 18;
      Country@1101495005 : Record 9;
      NewOriginalCurrencyCode@1101495006 : Code[10];
    BEGIN
      //NC NCS-720 > DP
      IF GLBuff."Amount Difference" THEN
        EXIT;

      IF Type = Type::Debit THEN BEGIN
        IF OffsetExceptionsDT THEN
          EXIT;

        //NC NCS-720.1 > DP
        IF DTMappLineNo=0 THEN
          EXIT;
        //NC NCS-720.1 < DP

        GLMapp.GET(MappingCode,DTMappLineNo);
      END ELSE BEGIN
        IF OffsetExceptionsCT THEN
          EXIT;

        //NC NCS-720.1 > DP
        IF CTMappLineNo=0 THEN
          EXIT;
        //NC NCS-720.1 < DP

        GLMapp.GET(MappingCode,CTMappLineNo);
      END;

      GLAcc.GET(GLMapp."Receiver Account Code");
      IF NOT GLAcc."FI Required" THEN
        EXIT;

      LocGLAccTmp.RESET;
      LocGLAccTmp.DELETEALL;
      IF Type = Type::Debit THEN
        LocGLAccTmp."No." := GLBuff."Debit G/L Account No."
      ELSE
        LocGLAccTmp."No." := GLBuff."Credit G/L Account No.";

      LocGLAccTmp.INSERT;
      LocGLAccTmp.SETFILTER("No.",ConsolidationSetup."Position Ext. G/L Account Filt");
      IF LocGLAccTmp.ISEMPTY THEN
        EXIT;


      IF Type = Type::Debit THEN BEGIN
        TempDebitLedgEntryDim.GET(17,GLBuff."Entry No.",ConsolidationSetup."Fin. Instrument Dimension Code");
        FICode := TempDebitLedgEntryDim."Dimension Value Code";
      END ELSE BEGIN
        TempCreditLedgEntryDim.GET(17,GLBuff."Entry No.",ConsolidationSetup."Fin. Instrument Dimension Code");
        FICode := TempCreditLedgEntryDim."Dimension Value Code";
      END;

      IF NOT FI.GET(FICode) THEN
        EXIT;

      IF NOT FIType.GET(FI."Type FI") THEN
        EXIT;

      IF NOT FIType."Change Original Currency" THEN
        EXIT;

      NewOriginalCurrencyCode := ConvertCurrencyCode2(FI."Currency of Nominal");

      IF Type = Type::Debit THEN
        GLBuff."Debit Currency Code" := NewOriginalCurrencyCode
      ELSE
        GLBuff."Credit Currency Code" := NewOriginalCurrencyCode;


      //NC NCS-720.2 > DP
      //Проверку курсов валют осуществляем 1 раз
      {
      CheckCurrency(GLBuff,ConsSource,ConsRegisterNo);
      }
      //NC NCS-720.2 < DP

      //NC NCS-720 < DP
    END;

    PROCEDURE GetAmountsConvert@1101495021(GLBuff@1000000003 : Record 50008;ConsSourceCurrencyCode@1000000000 : Code[20];rGLMapp@1000000004 : Record 50002;VAR GLEntryTemp@1000000001 : TEMPORARY Record 17;Type@1000000002 : 'Debit,Credit');
    VAR
      GLMapp@1000000005 : Record 50002;
      CurrExchRate@1000000006 : Record 330;
      GLAcc@1000000007 : Record 15;
      LocGLAccTmp@1101495000 : TEMPORARY Record 15;
      FICode@1101495001 : Code[20];
      FI@1101495002 : Record 50021;
      FIType@1101495003 : Record 50051;
      Emitent@1101495004 : Record 18;
      Country@1101495005 : Record 9;
      NewOriginalCurrencyCode@1101495006 : Code[10];
    BEGIN
      //NC MIO-10 > DP
      NewOriginalCurrencyCode := rGLMapp."Convert to Currency Code";
      IF Type = Type::Debit THEN BEGIN
        GLEntryTemp."Original Currency Code" := NewOriginalCurrencyCode;
        IF NewOriginalCurrencyCode <> ConvertCurrencyCode2(GLBuff."Debit Currency Code") THEN
          GLEntryTemp."Original Amount" := ROUND(CurrExchRate.ExchangeAmtFCYToFCY(GLBuff."Document Date",
                                                                                  ConvertCurrencyCode2(GLBuff."Debit Currency Code"),
                                                                                  NewOriginalCurrencyCode,
                                                                                  GLBuff."Debit Original Amount"),0.01)
        ELSE
          GLEntryTemp."Original Amount" := GLBuff."Debit Original Amount";
        GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                 GLBuff."Document Date",
                                 GLEntryTemp."Original Currency Code",
                                 GLEntryTemp."Original Amount",
                                 CurrExchRate.ExchangeRate(
                                   GLBuff."Document Date",
                                   GLEntryTemp."Original Currency Code"));
        IF GLBuff."Amount (LCY)" <> 0 THEN
          GLEntryTemp."Debit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") * ABS(GLEntryTemp.Amount);
        IF GLEntryTemp.Amount <> 0 THEN
          GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
        ELSE
          GLEntryTemp."Original Currency Factor" :=
            CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
        IsDebitConvertAmount := TRUE;
      END ELSE BEGIN
        GLEntryTemp."Original Currency Code" := NewOriginalCurrencyCode;
        IF NewOriginalCurrencyCode <> ConvertCurrencyCode2(GLBuff."Credit Currency Code") THEN
          GLEntryTemp."Original Amount" := -ROUND(CurrExchRate.ExchangeAmtFCYToFCY(GLBuff."Document Date",
                                                                                   ConvertCurrencyCode2(GLBuff."Credit Currency Code"),
                                                                                   NewOriginalCurrencyCode,
                                                                                   GLBuff."Credit Original Amount"),0.01)
        ELSE
          GLEntryTemp."Original Amount" := -GLBuff."Credit Original Amount";
        GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                 GLBuff."Document Date",
                                 GLEntryTemp."Original Currency Code",
                                 GLEntryTemp."Original Amount",
                                 CurrExchRate.ExchangeRate(
                                   GLBuff."Document Date",
                                   GLEntryTemp."Original Currency Code"));
        IF GLBuff."Amount (LCY)" <> 0 THEN
          GLEntryTemp."Credit Amount" := GLBuff."Amount (LCY)" / ABS(GLBuff."Amount (LCY)") * ABS(GLEntryTemp.Amount);
        IF GLEntryTemp.Amount <> 0 THEN
          GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
        ELSE
          GLEntryTemp."Original Currency Factor" :=
            CurrExchRate.ExchangeRate(GLBuff."Document Date",GLEntryTemp."Original Currency Code");
        IsCreditConvertAmount := TRUE;
      END;
      //NC MIO-10 < DP
    END;

    PROCEDURE CheckRealDimensions@1101495023(ConsSource@1000000000 : Record 50001;GLBuffer@1000000001 : Record 50008;ConsRegNo@1000000004 : Integer;MappingCode@1000000007 : Code[20]);
    VAR
      GLMapp@1000000002 : Record 50002;
      DefDim@1000000003 : Record 352;
      AccDim@1000000005 : Record 50030;
      GLAcc@1000000006 : Record 15;
      DimValueCode@1101495000 : Code[20];
    BEGIN
      //NC MIO-34 > DP
      IF (DTMappLineNo <> 0) AND GLMapp.GET(MappingCode,DTMappLineNo) THEN
        IF GLMapp."Receiver Account Code" <> '' THEN BEGIN
          IF GLAcc.GET(GLMapp."Receiver Account Code") AND
            (GLAcc."Real Counterparty Value"=GLAcc."Real Counterparty Value"::"Same Value") THEN BEGIN
            DimValueCode := '';
            IF TempDebitLedgEntryDim.GET(17,GLBuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN BEGIN
              DimValueCode := TempDebitLedgEntryDim."Dimension Value Code";
              IF TempDebitLedgEntryDim.GET(17,GLBuffer."Entry No.",MovingDataSetup."Real Counterparty Dim. Code") AND
                (TempDebitLedgEntryDim."Dimension Value Code"<> DimValueCode)
              THEN BEGIN
                  IsGlobalError := TRUE;
                  ErrMessage := Text033 + FORMAT(GLMapp."Receiver Account Code") + Text026 + Text013 +
                    FORMAT(TempDebitLedgEntryDim."Dimension Code") +
                    Text061 + FORMAT(MovingDataSetup."Customer Dimension Code") + ' (' + DimValueCode + ').';
                  ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                     ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                     ConsSource.Code,ConsRegNo,'EDTC08',
                                                     ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);

              END;
            END;
          END;
        END;

      IF (CTMappLineNo <> 0) AND GLMapp.GET(MappingCode,CTMappLineNo) THEN
        IF GLMapp."Receiver Account Code" <> '' THEN BEGIN
          IF GLAcc.GET(GLMapp."Receiver Account Code") AND
            (GLAcc."Real Counterparty Value"=GLAcc."Real Counterparty Value"::"Same Value") THEN BEGIN
            DimValueCode := '';
            IF TempCreditLedgEntryDim.GET(17,GLBuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN BEGIN
              DimValueCode := TempCreditLedgEntryDim."Dimension Value Code";
              IF TempCreditLedgEntryDim.GET(17,GLBuffer."Entry No.",MovingDataSetup."Real Counterparty Dim. Code") AND
                (TempCreditLedgEntryDim."Dimension Value Code"<> DimValueCode)
              THEN BEGIN
                  IsGlobalError := TRUE;
                  ErrMessage := Text033 + FORMAT(GLMapp."Receiver Account Code") + Text026 + Text013 +
                    FORMAT(TempCreditLedgEntryDim."Dimension Code") +
                    Text026 + Text061 + FORMAT(MovingDataSetup."Customer Dimension Code") + ' (' + DimValueCode + ').';
                  ErrorJournal.AddErrorBuferGLAccGLMapp(COMPANYNAME,
                                                     ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                     ConsSource.Code,ConsRegNo,'EDTC08',
                                                     ErrMessage,COMPANYNAME,GLBuffer,GLAcc,GLMapp,JobProcStatusLineNo);

              END;
            END;
          END;
        END;

      //NC MIO-34 < DP
    END;

    PROCEDURE SetOffset@1101495024(NewOffsetExceptionsDT@1101495003 : Boolean;NewOffsetExceptionsCT@1101495002 : Boolean;NewOffsetFromDate@1101495001 : Date;NewOffsetToDate@1101495000 : Date);
    BEGIN
      //NC MIO-10.7 > PCH
      OffsetExceptionsDT := NewOffsetExceptionsDT;
      OffsetExceptionsCT := NewOffsetExceptionsCT;
      OffsetFromDate := NewOffsetFromDate;
      OffsetToDate := NewOffsetToDate;
      //NC MIO-10.7 < PCH
    END;

    PROCEDURE IsIC@1101495025(CPCode@1101495000 : Code[20]) : Boolean;
    VAR
      LinkedDimValue@1101495001 : Record 50016;
    BEGIN
      //NC NCS-1604 > DP
      IF LinkedDimValue.GET(ConsolidationSetup."Counterparty Dim Code",CPCode,ConsolidationSetup."IC Dimension Code") THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
      //NC NCS-1604 < DP
    END;

    BEGIN
    {
      NC PIF001 NaviCon Holding
      NC PIF010 MP Версия 0 решения Тройки
      NC OPT PCH
      ----------------------------------------------------------
      NC MDTM02 MP Концепция общий мэппинг
      NC MDTM03 MP Мэппинг плана счетов в зависимости от фирмы NAV
      NC MDTC02 MP Если счета-приемника нет в МСФО, ошибка
      NC MDTC03 MP Проверка обязательных измерений для счета "Код Обязателен"
      NC MDTC04 MP Проверка измерения для счета "Единый Код"
      NC MDTC05 MP Проверка наличия значения измерения в NAV.
      NC MDTC06 MP Проверка блокировки значения измерения
      NC MDTC07 MP Проверка разрешенных значений измерений
      NC MDTA02 MP Мэппинг измерения в зависимости от фирмы NAV
      NC BLD001 MP Создан билд NCPIF001,PIF003,MDTM02,MDTM03,MDTC02,MDTC03,MDTC04,MDTC05,MDTC06,MDTC07,MDTA02
      ----------------------------------------------------------
      NC MDTX02 MP Исключение в зависимости от фирмы NAV
      NC MDTM04 MP Мэппинг по второй ноге проводки.
      NC MDM04 MP Новый журнал ошибок
      NC MDTY01 MP Трансляция валют
      NC MDR01 MP Загрузка изменений
      NC MAU02 MP Загрузка в закрытом периоде
      NC MDTC08 MP Проверка курсов валют
      NC MDTC01.1 AKO Добавлена функция GetAccountFromMask
      NC MDTC05.1 MP Проверка только для немепируемых значений
      NC BLD002 AIG Создан билд MDTX02,MDTM04,MDM04,MDTY01,MDR01,MAU02,MDTC08,MDTC01.1,MDTC05.1
      ----------------------------------------------------------
      NC MDTC09 MP Доработка мэппинга измерений - сохранение исходного значения на проводке
      NC MDM02 PCH подключение к интеграции
      NC MDTM02.1 MP Добавлен мэппинг плана счетов и исключений в зависимости от маски
      NC MDTC01.1 AKO Заполняем поле Error in Import
      NC MDTC10 Проверка блокировки мэппинга
      NC MDTM02.2 PCH Перенос мэппинга измерений на таблицу "Dim. Mapping Selection"
      NC MDTM02.3 MP Доработан мэппинг измерений
      NC MDTC02.1 MP Проверка блокировки счета из мэппинга
      NC MDTM11 MP Доработка мэппинга по дате
      NC MTD02 AIG Учет по карточкам
      NC MTD06 AIG Обработка Offset счетов
      NC MTD11 AIG Доопределение аналитики с карточки фин. инструмента
      NC MTD03 AIG Создание карточки договора по номеру сделки
      NC MTF01 PCH изменения для трансформации фактов
      ---------------------------------------------------------
      NC BLD003 DP Создан билд, объедин. модификации BLD001, BLD002,MDTM04,MDA01,MDTC09,MDTM02.1,MDTM11,MTD02,MTD11,MTD03,MTF01,02.1
      NC MTD02.1 DP Смена учетной группы только при наличии аналитики AC.COMP=INT
      NC MTD03.1 DP Наименование договора из наименования аналитики
      NC MTD02.2 DP Изменен код функции SetAccountTypeAccountNo2
      NC MTD02.3 DP Изменен код функции CreateCorrectionLine
      NC MDTC01.01 MP Изменения в коде: решение проблемы не балансирующих в оригинальной валюте проводок.
      NC MDTC01.02 MP Модификация функции CheckGLMapp2
      NC MDTC01.03 DP Модификация функции CheckGLMapp2
      NC OAM46 DP Модификация функции CheckExceptionCorrespondense
      NC MDTC01.04 DP Точность не балансирующих в оригинальной валюте проводок вынесена в настройки
      NC APCOC-65 DP Ориг. счет внеш. системы на операциях
      NC APCOC-72 DP Измерения на балансировочной строке
      ---------------------------------------------------------
      NC BLD004 DP Создан билд,  объедин. модификации  BLD003,MTD02.1, MTD03.1,MTD02.3,MDTC01.03,OAM46,MDTC01.04,APCOC65,APCOC72,1513
      NC APCOC-94 DP Установка признака "Не транслировать" на проводках для источника консолидации
      NC APCOC-112 PCH изменение логики обработки офсетов

      NC APCOC-115 AIG Запрет переопределния аналитики с Дт. на Кт. и наоборот
      NC APCOC-120 DP Отмена операции, учтенной в одну строку, в части определения модуля и учетных групп
      NC APCOC-115.1 DP Запрет переопределния аналитики с Дт. на Кт. и наоборот для офсетных счетов
      NC APCOC-124 DP убираем лок. счет с офсета
      NC APCOC-117 RD Установка признака "Не транслировать в IFRS" на проводках для источника консолидации

      NC BLD005 DP Создан билд,  объедин. модификации NCBLD004,APCOC-94,APCOC-112,APCOC-115,APCOC-120,APCOC-115.1,APCOC-124,APCOC-117
      NC S622 PCH Добавлена функция SetGlobal, контроль настроек счетов округления
      NC NCS-733 DP Не доопределяется аналитика INC.TAX с карточки ФИ, если она уже есть в буфере обработки
      NC NCS-733.1 DP Не доопределяется аналитика INC.TAX с карточки ФИ на курс. разницах, если она уже есть в буфере обработки
      NC NCS-720 DP Проверка курсов валют для валюты номинала ФИ
      NC NCS-806 DP Установка Количество Дебет/Кредит на операциях удаления
      NC NCS-720.1 DP Выход из проверки, если не определен мэппинг плана счетов
      NC NCS-720.2 DP Изменена логика из проверки курсов валют для валюты номинала ФИ
      NC NCS-894 DP Изменена функция CopyEntryDim
      NC NCS-720.3 DP Использование сохранения параметров буфера при проверке курсов валют
      ------------------------------------------------------------
      TDRA> created BLD006
        NCBLD005,S622,NCS-894,NCS-959,NCS-733,NCS-733.1,NCS-806
      NC NCS-953 DP Расчет лок. сумм по курсу на заданую дату(реверс) при трансформации
      NC NCS-959 DP Опеределение даты для удаляемых операций по сделкам (FromBufferDeal) в функции CreateCorrectionLine
      NC NC-973 SKV
        в 3-х местах модифицировано добавление ст. изм. ФИ
      NC NCS-999 DP Изменение номера документа(вставка _) при обработке изменения/удаления
      ------------------------------------------------------------
      NC BLD 007 KP NCBLD006,S953,S959,S973,S999
      NC NCS-1002 DP Измерения на плане счетов "Единый Код"
      TDRANCS-1071 > Modified function CheckDimensions
      NC S1245 PCH заполнение статистики
      TDRANCS-1269>
        Modified func GETAmountsPosition, changing currency for entries depends on Deal Type
      NC S1304 PCH
      -------------------------------------------------------
      NC BLD008 DP Создан билд,  объедин. модификации
                   NCBLD07,NCS-1002,NCS-S1002.4,TDRANCS-1071,S1245,TDRANCS-1269,S1304
      NC MIO-10 DP загрузка из Буфера NAV: добавлена функция GetAmountsConvert, изменены функции
                  CreateConsDimList
                  CreateJnlLineDimensions
                  CreateJnlLine
                  CreateCorrectionLine
                  CheckGLMapp2
                  ImportNewRecord2
                  GetAmountsNone
      NC MIO-10.1 DP трансформация для фирм Только прямой учет: изменена функция SetAccountTypeAccountNo2
      NC MIO-34 DP Добавлена функция CheckRealDimensions, изменена функция CheckErrorsConsFromBuffer3
      NC MIO-10.7 PCH оптимизация
      NC MIO-10.13 DP Изменена функция GetAmountsNone
      NC NCS-1604 DP Добавлена функция IsIC, изменена функция CreateJnlLineFX
      NC NCS-1721 DP Изменена функция CreateJnlLineFX
      NC NCS-1746.1 DP Изменена функцияCreateDimBuffer
      NC NCS-1753 PCH
      NC S1893 PCH
      NC NCS-1908 DP Изменены функции CreateJnlLine, CheckGLMapp2
      NC S1896 PCH протягивание "Source G/L Account No."
      NC NCS-2044 DP Изменена функция SetAccountTypeAccountNo2
      NCS-2089 AAP Изменены функции: MappChartsOfAccount, CheckGLMapp2, UpdateLedgEntryDim, UpdateLedgEntryDim3
      BLD09 - BLD08,MIO-10.1,MIO-34,MIO-10.13,1604,1721,1746.1,1753
      NC NCS-2166 DP Изменена функция CreateJnlLine
      NC NCS-2253 DP Изменена функция CheckDefaultDimensions
      NC NCS-2312 DP Изменена функция ImportNewRecord2
      NC NCS-2335 DP Изменена функция CopyEntryDim
      NC NCS-2345 AAP Изменены функции: ImportFromBufferTable, MappChartsOfAccount, CheckGLMapp2, UpdateLedgEntryDim, UpdateLedgEntryDim3
    }
    END.
  }
}

