OBJECT Page 14970 Payroll Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payroll Analysis by Dimensions;
               RUS=Анализ зарплаты по измерениям];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=CurrPayrollAnalysisViewCode;
    PageType=Card;
    OnInit=BEGIN
             Dim4FilterEnable := TRUE;
             Dim3FilterEnable := TRUE;
             Dim2FilterEnable := TRUE;
             Dim1FilterEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 GLSetup.GET;

                 PayrollAnalysisMgt.AnalysisViewSelection(
                   CurrPayrollAnalysisViewCode,PayrollAnalysisView,PayrollStatisticsBuffer,
                   Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter);

                 IF (NewPayrollAnalysisCode <> '') AND (NewPayrollAnalysisCode <> CurrPayrollAnalysisViewCode) THEN BEGIN
                   CurrPayrollAnalysisViewCode := NewPayrollAnalysisCode;
                   PayrollAnalysisMgt.CheckAnalysisView(CurrPayrollAnalysisViewCode,PayrollAnalysisView);
                   PayrollAnalysisMgt.SetPayrollAnalysisView(
                     CurrPayrollAnalysisViewCode,PayrollAnalysisView,PayrollStatisticsBuffer,
                     Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter);
                 END;

                 PayrollAnalysisMgt.SetLineAndColDim(
                   PayrollAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                 UpdateFilterFields;

                 FindPeriod('');

                 NoOfColumns := 32;
                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
               END;

    OnFindRecord=BEGIN
                   EXIT(
                     PayrollAnalysisMgt.FindRec(
                       PayrollAnalysisView,LineDimOption,Rec,Which,
                       ElementFilter,ElementGroupFilter,EmployeeFilter,OrgUnitFilter,
                       PeriodType,DateFilter,PeriodInitialized,InternalDateFilter,
                       Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter));
                 END;

    OnNextRecord=BEGIN
                   EXIT(
                     PayrollAnalysisMgt.NextRec(
                       PayrollAnalysisView,LineDimOption,Rec,Steps,
                       ElementFilter,ElementGroupFilter,EmployeeFilter,OrgUnitFilter,
                       PeriodType,DateFilter,
                       Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter));
                 END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 12      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Actions;
                                 RUS=&Действия];
                      Image=Action }
      { 15      ;2   ;Action    ;
                      CaptionML=[ENU=Reverse Lines and Columns;
                                 RUS=Поменять местами строки и столбцы];
                      ApplicationArea=#Basic,#Suite;
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 PayrollAnalysisMgt.ValidateLineDimCode(
                                   PayrollAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                   InternalDateFilter,DateFilter,PayrollStatisticsBuffer,PeriodInitialized);
                                 PayrollAnalysisMgt.ValidateColumnDimCode(
                                   PayrollAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                   InternalDateFilter,DateFilter,PayrollStatisticsBuffer,PeriodInitialized);
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;Action    ;
                      CaptionML=[ENU=&Show Matrix;
                                 RUS=&Показать];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CLEAR(PayrollAnalysisByDimMatrix);
                                 ShowMatrix;
                               END;
                                }
      { 21      ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 RUS=Пред. набор];
                      ToolTipML=[ENU=Previous Set;
                                 RUS=Пред. набор];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Previous);
                               END;
                                }
      { 22      ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 RUS=След. набор];
                      ToolTipML=[ENU=Next Set;
                                 RUS=След. набор];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Next);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           RUS=Общее] }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Analysis View Code;
                           RUS=Код аналит. отчета];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrPayrollAnalysisViewCode;
                OnValidate=BEGIN
                             PayrollAnalysisMgt.CheckAnalysisView(CurrPayrollAnalysisViewCode,PayrollAnalysisView);
                             CurrPayrollAnalysisViewCodeOnA;
                           END;

                OnLookup=BEGIN
                           PayrollAnalysisMgt.LookupPayrollAnalysisView(
                             CurrPayrollAnalysisViewCode,PayrollAnalysisView,PayrollStatisticsBuffer,
                             Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter);
                           PayrollAnalysisMgt.SetLineAndColDim(
                             PayrollAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                           UpdateFilterFields;
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Show as Lines;
                           RUS=Показывать в строках];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               PayrollAnalysisMgt.ValidateColumnDimCode(
                                 PayrollAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                 InternalDateFilter,DateFilter,PayrollStatisticsBuffer,PeriodInitialized);
                             END;
                             PayrollAnalysisMgt.ValidateLineDimCode(
                               PayrollAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                               InternalDateFilter,DateFilter,PayrollStatisticsBuffer,PeriodInitialized);
                             IF LineDimOption = LineDimOption::Period THEN
                               SETCURRENTKEY("Period Start")
                             ELSE
                               SETCURRENTKEY(Code);
                             LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := PayrollAnalysisMgt.GetDimSelection(LineDimCode,PayrollAnalysisView);
                           IF NewCode <> LineDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Show as Columns;
                           RUS=Показывать в столбцах];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               PayrollAnalysisMgt.ValidateLineDimCode(
                                 PayrollAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                 InternalDateFilter,DateFilter,PayrollStatisticsBuffer,PeriodInitialized);
                             END;
                             PayrollAnalysisMgt.ValidateColumnDimCode(
                               PayrollAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                               InternalDateFilter,DateFilter,PayrollStatisticsBuffer,PeriodInitialized);
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := PayrollAnalysisMgt.GetDimSelection(ColumnDimCode,PayrollAnalysisView);
                           IF NewCode <> ColumnDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 47  ;2   ;Field     ;
                CaptionML=[ENU=Show Value As;
                           RUS=Показать сумму как];
                OptionCaptionML=[ENU=Payroll Amount,Taxable Amount;
                                 RUS=Сумма зарплаты,Налогооблагаемая сумма];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ValueType }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           RUS=Фильтры] }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           RUS=Фильтр по дате];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DateFilter;
                OnValidate=VAR
                             ApplicationManagement@1002 : Codeunit 1;
                           BEGIN
                             IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                             PayrollStatisticsBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := PayrollStatisticsBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=Element Type Filter;
                           RUS=Фильтр по типу элемента];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ElementTypeFilter;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             PayrollStatisticsBuffer.SETFILTER("Element Type Filter",ElementTypeFilter);
                             ElementTypeFilter := PayrollStatisticsBuffer.GETFILTER("Element Type Filter");
                             ElementTypeFilterOnAfterValida;
                           END;
                            }

    { 1210002;2;Field     ;
                CaptionML=[ENU=Element Filter;
                           RUS=Фильтр по элементу];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ElementFilter;
                TableRelation="Payroll Element";
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             ElementFilterOnAfterValidate;
                           END;
                            }

    { 1210004;2;Field     ;
                CaptionML=[ENU=Element Group Filter;
                           RUS=Фильтр по группе элементов];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ElementGroupFilter;
                TableRelation="Payroll Element Group";
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             ElementGroupFilterOnAfterValid;
                           END;
                            }

    { 1210008;2;Field     ;
                CaptionML=[ENU=Employee Filter;
                           RUS=Фильтр по сотруднику];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=EmployeeFilter;
                TableRelation=Employee;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             EmployeeFilterOnAfterValidate;
                           END;
                            }

    { 1210006;2;Field     ;
                CaptionML=[ENU=Org. Unit Filter;
                           RUS=Фильтр по подразделению];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OrgUnitFilter;
                TableRelation="Organizational Unit";
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             OrgUnitFilterOnAfterValidate;
                           END;
                            }

    { 1210010;2;Field     ;
                CaptionML=[ENU=Use PF Accum. System Filter;
                           RUS=Фильтр по исп. накопит. системы ПФ];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=UsePFAccumSystemFilter;
                OnValidate=BEGIN
                             UsePFAccumSystemFilterOnAfterV;
                           END;
                            }

    { 34  ;2   ;Field     ;
                Name=Dim1Filter;
                CaptionML=[ENU=Dimension 1 Filter;
                           RUS=Фильтр измерения 1];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Dim1Filter;
                CaptionClass=PayrollAnalysisMgt.GetCaptionClass(1,PayrollAnalysisView);
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             Dim1FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(PayrollAnalysisMgt.LookUpDimFilter(PayrollAnalysisView."Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=Dim2Filter;
                CaptionML=[ENU=Dimension 2 Filter;
                           RUS=Фильтр измерения 2];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Dim2Filter;
                CaptionClass=PayrollAnalysisMgt.GetCaptionClass(2,PayrollAnalysisView);
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             Dim2FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(PayrollAnalysisMgt.LookUpDimFilter(PayrollAnalysisView."Dimension 2 Code",Text));
                         END;
                          }

    { 46  ;2   ;Field     ;
                Name=Dim3Filter;
                CaptionML=[ENU=Dimension 3 Filter;
                           RUS=Фильтр измерения 3];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Dim3Filter;
                CaptionClass=PayrollAnalysisMgt.GetCaptionClass(3,PayrollAnalysisView);
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             Dim3FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(PayrollAnalysisMgt.LookUpDimFilter(PayrollAnalysisView."Dimension 3 Code",Text));
                         END;
                          }

    { 1210000;2;Field     ;
                Name=Dim4Filter;
                CaptionML=[ENU=Dimension 4 Filter;
                           RUS=Фильтр измерения 4];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Dim4Filter;
                CaptionClass=PayrollAnalysisMgt.GetCaptionClass(3,PayrollAnalysisView);
                Enabled=Dim4FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             Dim4FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(PayrollAnalysisMgt.LookUpDimFilter(PayrollAnalysisView."Dimension 3 Code",Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           RUS=Параметры] }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Rounding Factor;
                           RUS=Коэфф. округления];
                OptionCaptionML=[ENU=None,1,1000,1000000;
                                 RUS=Нет,1,1000,1000000];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=RoundingFactor }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Show Column Name;
                           RUS=Показать название столбца];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnAfterValidate;
                           END;
                            }

    { 50  ;2   ;Field     ;
                CaptionML=[ENU=Show Opposite Sign;
                           RUS=Показать с против. знаком];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShowOppositeSign;
                MultiLine=Yes }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           RUS=Параметры матрицы] }

    { 19  ;2   ;Field     ;
                Name=ViewBy;
                CaptionML=[ENU=View by;
                           RUS=Просмотр по];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 RUS=День,Неделя,Месяц,Квартал,Год,Учетный период];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=ColumnSet;
                CaptionML=[ENU=Column Set;
                           RUS=Набор столбцов];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MATRIX_CaptionRange;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      GLSetup@1025 : Record 98;
      PayrollAnalysisView@1011 : Record 14965;
      PayrollStatisticsBuffer@1002 : Record 14969;
      DimCodeBufferColumn@1034 : Record 367;
      MATRIX_PeriodRecords@1210012 : ARRAY [32] OF Record 2000000007;
      PayrollAnalysisMgt@1038 : Codeunit 14964;
      MatrixMgt@1031 : Codeunit 9200;
      PayrollAnalysisByDimMatrix@1210014 : Page 35663;
      CurrPayrollAnalysisViewCode@1016 : Code[10];
      ValueType@1004 : 'Payroll Amount,Taxable Amount';
      RoundingFactor@1005 : 'None,1,1000,1000000';
      LineDimOption@1007 : 'Element,Element Group,Employee,Org. Unit,Period,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      ColumnDimOption@1006 : 'Element,Element Group,Employee,Org. Unit,Period,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      UsePFAccumSystemFilter@1210013 : ' ,Yes,No';
      LineDimCode@1020 : Text[30];
      ColumnDimCode@1019 : Text[30];
      InternalDateFilter@1014 : Text;
      MatrixColumnCaptions@1022 : ARRAY [32] OF Text[1024];
      PeriodInitialized@1015 : Boolean;
      ShowColumnName@1029 : Boolean;
      ShowOppositeSign@1030 : Boolean;
      ElementTypeFilter1@1210004 : Text;
      ElementFilter1@1210003 : Text;
      ElementGroupFilter1@1210002 : Text;
      EmployeeFilter1@1210001 : Text;
      OrgUnitFilter1@1210000 : Text;
      Dim1Filter1@1017 : Text;
      Dim2Filter1@1012 : Text;
      Dim3Filter1@1010 : Text;
      Dim4Filter1@1210005 : Text;
      DateFilter1@1013 : Text;
      ElementTypeFilter@1210011 : Text;
      ElementFilter@1210010 : Text;
      ElementGroupFilter@1210009 : Text;
      EmployeeFilter@1210008 : Text;
      OrgUnitFilter@1210007 : Text;
      DateFilter@1021 : Text;
      Dim1Filter@1043 : Text;
      Dim2Filter@1042 : Text;
      Dim3Filter@1041 : Text;
      Dim4Filter@1210006 : Text;
      FirstColumn@1044 : Text[1024];
      LastColumn@1045 : Text[1024];
      FirstColumnDate@1035 : Date;
      LastColumnDate@1032 : Date;
      NoOfColumns@1047 : Integer;
      MATRIX_PKFirstRecInCurrSet@1046 : Text[100];
      MATRIX_CurrSetLength@1048 : Integer;
      MATRIX_CaptionRange@1049 : Text[100];
      MATRIX_SetWanted@1051 : 'Initial,Previous,Same,Next';
      NewPayrollAnalysisCode@1036 : Code[10];
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;
      Dim4FilterEnable@19064250 : Boolean INDATASET;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Employee@1003 : Record 5200;
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
      Employee.SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      IF Employee.GETRANGEMIN("Date Filter") = Employee.GETRANGEMAX("Date Filter") THEN
        Employee.SETRANGE("Date Filter",Employee.GETRANGEMIN("Date Filter"));
      InternalDateFilter := Employee.GETFILTER("Date Filter");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
    END;

    LOCAL PROCEDURE UpdateFilterFields@4();
    VAR
      PayrollAnalysisViewFilter@1000 : Record 14967;
    BEGIN
      ElementFilter := PayrollAnalysisView."Payroll Element Filter";
      EmployeeFilter := PayrollAnalysisView."Employee Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';
      Dim4Filter := '';

      Dim1FilterEnable := PayrollAnalysisView."Dimension 1 Code" <> '';
      Dim2FilterEnable := PayrollAnalysisView."Dimension 2 Code" <> '';
      Dim3FilterEnable := PayrollAnalysisView."Dimension 3 Code" <> '';
      Dim4FilterEnable := PayrollAnalysisView."Dimension 4 Code" <> '';

      IF Dim1FilterEnable THEN
        IF PayrollAnalysisViewFilter.GET(
             PayrollAnalysisView.Code,PayrollAnalysisView."Dimension 1 Code")
        THEN
          Dim1Filter := PayrollAnalysisViewFilter."Dimension Value Filter";

      IF Dim2FilterEnable THEN
        IF PayrollAnalysisViewFilter.GET(
             PayrollAnalysisView.Code,PayrollAnalysisView."Dimension 2 Code")
        THEN
          Dim2Filter := PayrollAnalysisViewFilter."Dimension Value Filter";

      IF Dim3FilterEnable THEN
        IF PayrollAnalysisViewFilter.GET(
             PayrollAnalysisView.Code,PayrollAnalysisView."Dimension 3 Code")
        THEN
          Dim3Filter := PayrollAnalysisViewFilter."Dimension Value Filter";

      IF Dim4FilterEnable THEN
        IF PayrollAnalysisViewFilter.GET(
             PayrollAnalysisView.Code,PayrollAnalysisView."Dimension 4 Code")
        THEN
          Dim4Filter := PayrollAnalysisViewFilter."Dimension Value Filter";
    END;

    PROCEDURE MATRIX_GenerateColumnCaptions@5(SetWanted@1001 : 'Initial,Previous,Same,Next');
    BEGIN
      CASE ColumnDimOption OF
        ColumnDimOption::Element:
          SetPointsElement(SetWanted);
        ColumnDimOption::"Element Group":
          SetPointsElementGroup(SetWanted);
        ColumnDimOption::Employee:
          SetPointsEmployee(SetWanted);
        ColumnDimOption::"Org. Unit":
          SetPointsOrgUnit(SetWanted);
        ColumnDimOption::Period:
          BEGIN
            FirstColumn := '';
            LastColumn := '';
            MatrixMgt.GeneratePeriodMatrixData(SetWanted,NoOfColumns,ShowColumnName,PeriodType,DateFilter,MATRIX_PKFirstRecInCurrSet,
              MatrixColumnCaptions,MATRIX_CaptionRange,MATRIX_CurrSetLength,MATRIX_PeriodRecords);
            IF MATRIX_CurrSetLength > 0 THEN BEGIN
              FirstColumnDate := MATRIX_PeriodRecords[1]."Period Start";
              LastColumnDate := MATRIX_PeriodRecords[MATRIX_CurrSetLength]."Period Start";
              FirstColumn := MatrixColumnCaptions[1];
              LastColumn := FORMAT(MATRIX_PeriodRecords[MATRIX_CurrSetLength]."Period End");
            END;
          END;
        ColumnDimOption::"Dimension 1":
          SetPointsDim(PayrollAnalysisView."Dimension 1 Code",Dim1Filter,SetWanted);
        ColumnDimOption::"Dimension 2":
          SetPointsDim(PayrollAnalysisView."Dimension 2 Code",Dim2Filter,SetWanted);
        ColumnDimOption::"Dimension 3":
          SetPointsDim(PayrollAnalysisView."Dimension 3 Code",Dim3Filter,SetWanted);
        ColumnDimOption::"Dimension 4":
          SetPointsDim(PayrollAnalysisView."Dimension 4 Code",Dim4Filter,SetWanted);
      END;
    END;

    LOCAL PROCEDURE SetPointsElement@22(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      PayrollElement@1013 : Record 17400;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1003 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      PayrollElement.SETFILTER(Code,ElementFilter);
      RecRef.GETTABLE(PayrollElement);
      RecRef.SETTABLE(PayrollElement);
      IF ShowColumnName THEN
        CaptionFieldNo := PayrollElement.FIELDNO(Description)
      ELSE
        CaptionFieldNo := PayrollElement.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE SetPointsElementGroup@6(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      PayrollElementGroup@1013 : Record 17412;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1002 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      PayrollElementGroup.SETFILTER(Code,ElementGroupFilter);
      RecRef.GETTABLE(PayrollElementGroup);
      RecRef.SETTABLE(PayrollElementGroup);
      IF ShowColumnName THEN
        CaptionFieldNo := PayrollElementGroup.FIELDNO(Name)
      ELSE
        CaptionFieldNo := PayrollElementGroup.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE SetPointsEmployee@1210004(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      Employee@1013 : Record 5200;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1003 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      Employee.SETFILTER("No.",EmployeeFilter);
      RecRef.GETTABLE(Employee);
      RecRef.SETTABLE(Employee);
      IF ShowColumnName THEN
        CaptionFieldNo := Employee.FIELDNO("Short Name")
      ELSE
        CaptionFieldNo := Employee.FIELDNO("No.");

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE SetPointsOrgUnit@1210005(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      OrgUnit@1013 : Record 12422;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1003 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      OrgUnit.SETFILTER(Code,OrgUnitFilter);
      RecRef.GETTABLE(OrgUnit);
      RecRef.SETTABLE(OrgUnit);
      IF ShowColumnName THEN
        CaptionFieldNo := OrgUnit.FIELDNO(Name)
      ELSE
        CaptionFieldNo := OrgUnit.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE SetPointsDim@17(DimensionCode@1003 : Code[20];DimFilter@1002 : Text;SetWanted@1004 : 'Initial,Previous,Same,Next');
    VAR
      DimVal@1001 : Record 349;
      MatrixMgt@1210000 : Codeunit 9200;
      RecRef@1005 : RecordRef;
      CaptionFieldNo@1006 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      DimVal.SETRANGE("Dimension Code",DimensionCode);
      IF DimFilter <> '' THEN
        DimVal.SETFILTER(Code,DimFilter);
      RecRef.GETTABLE(DimVal);
      RecRef.SETTABLE(DimVal);

      IF ShowColumnName THEN
        CaptionFieldNo := DimVal.FIELDNO(Name)
      ELSE
        CaptionFieldNo := DimVal.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    PROCEDURE ShowMatrix@10();
    BEGIN
      ApplyColumnFilter;
      IF ColumnDimOption = ColumnDimOption::Period THEN BEGIN
        FirstColumn := FORMAT(FirstColumnDate);
        LastColumn := FORMAT(LastColumnDate);
      END;

      PayrollAnalysisByDimMatrix.LoadVariables(PayrollAnalysisView,
        LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,PeriodType,ValueType,
        RoundingFactor,MatrixColumnCaptions,
        ShowOppositeSign,PeriodInitialized,FirstColumn,LastColumn,ShowColumnName,MATRIX_CurrSetLength);

      PayrollAnalysisByDimMatrix.LoadFilters(
        ElementTypeFilter,ElementFilter,ElementGroupFilter,EmployeeFilter,OrgUnitFilter,UsePFAccumSystemFilter,
        Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter,
        DateFilter,InternalDateFilter);

      PayrollAnalysisByDimMatrix.RUNMODAL;
    END;

    PROCEDURE ApplyColumnFilter@13();
    BEGIN
      CLEAR(ElementTypeFilter1);
      CLEAR(ElementFilter1);
      CLEAR(ElementGroupFilter1);
      CLEAR(EmployeeFilter1);
      CLEAR(OrgUnitFilter1);
      CLEAR(DateFilter1);
      CLEAR(Dim1Filter1);
      CLEAR(Dim2Filter1);
      CLEAR(Dim3Filter1);
      CLEAR(Dim4Filter1);

      CASE ColumnDimOption OF
        ColumnDimOption::Element:
          ApplyElementFilter;
        ColumnDimOption::"Element Group":
          ApplyElementGroupFilter;
        ColumnDimOption::Employee:
          ApplyEmployeeFilter;
        ColumnDimOption::"Org. Unit":
          ApplyOrgUnitFilter;
        ColumnDimOption::Period:
          ApplyPeriodFilter;
        ColumnDimOption::"Dimension 1":
          ApplyDim1Filter;
        ColumnDimOption::"Dimension 2":
          ApplyDim2Filter;
        ColumnDimOption::"Dimension 3":
          ApplyDim3Filter;
        ColumnDimOption::"Dimension 4":
          ApplyDim4Filter;
      END;
    END;

    LOCAL PROCEDURE ApplyElementFilter@1210000();
    BEGIN
      ElementTypeFilter1 := ElementTypeFilter;
      IF ElementFilter <> '' THEN
        ElementFilter1 := ElementFilter + '&';
      ElementFilter1 := ElementFilter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
      ElementGroupFilter1 := ElementGroupFilter;
      EmployeeFilter1 := EmployeeFilter;
      OrgUnitFilter1 := OrgUnitFilter;
      DateFilter1 := DateFilter;
      AssignDimFilters;
    END;

    LOCAL PROCEDURE ApplyElementGroupFilter@1210001();
    BEGIN
      ElementTypeFilter1 := ElementTypeFilter;
      ElementFilter1 := ElementFilter;
      IF ElementGroupFilter <> '' THEN
        ElementGroupFilter1 := ElementGroupFilter + '&';
      ElementGroupFilter1 := ElementGroupFilter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
      EmployeeFilter1 := EmployeeFilter;
      OrgUnitFilter1 := OrgUnitFilter;
      DateFilter1 := DateFilter;
      AssignDimFilters;
    END;

    LOCAL PROCEDURE ApplyEmployeeFilter@1210002();
    BEGIN
      ElementTypeFilter1 := ElementTypeFilter;
      ElementFilter1 := ElementFilter;
      ElementGroupFilter1 := ElementGroupFilter;
      IF EmployeeFilter <> '' THEN
        EmployeeFilter1 := EmployeeFilter + '&';
      EmployeeFilter1 := EmployeeFilter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
      OrgUnitFilter1 := OrgUnitFilter;
      DateFilter1 := DateFilter;
      AssignDimFilters;
    END;

    LOCAL PROCEDURE ApplyOrgUnitFilter@1210003();
    BEGIN
      ElementTypeFilter1 := ElementTypeFilter;
      ElementFilter1 := ElementFilter;
      ElementGroupFilter1 := ElementGroupFilter;
      EmployeeFilter1 := EmployeeFilter;
      IF OrgUnitFilter <> '' THEN
        OrgUnitFilter1 := OrgUnitFilter + '&';
      OrgUnitFilter1 := OrgUnitFilter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
      DateFilter1 := DateFilter;
      AssignDimFilters;
    END;

    LOCAL PROCEDURE ApplyPeriodFilter@1210006();
    BEGIN
      ElementTypeFilter1 := ElementTypeFilter;
      ElementFilter1 := ElementFilter;
      ElementGroupFilter1 := ElementGroupFilter;
      EmployeeFilter1 := EmployeeFilter;
      OrgUnitFilter1 := OrgUnitFilter;
      IF DateFilter <> '' THEN
        DateFilter1 := DateFilter
      ELSE
        DateFilter1 := FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
      AssignDimFilters;
    END;

    LOCAL PROCEDURE ApplyDim1Filter@1210007();
    BEGIN
      AssignNonDimFilters;
      IF Dim1Filter <> '' THEN
        Dim1Filter1 := Dim1Filter + '&';
      Dim1Filter1 := Dim1Filter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
      Dim2Filter1 := Dim2Filter;
      Dim3Filter1 := Dim3Filter;
      Dim4Filter1 := Dim4Filter;
    END;

    LOCAL PROCEDURE ApplyDim2Filter@1210008();
    BEGIN
      AssignNonDimFilters;
      Dim1Filter1 := Dim1Filter;
      IF Dim2Filter <> '' THEN
        Dim2Filter1 := Dim2Filter + '&';
      Dim2Filter1 := Dim2Filter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
      Dim3Filter1 := Dim3Filter;
      Dim4Filter1 := Dim4Filter;
    END;

    LOCAL PROCEDURE ApplyDim3Filter@1210009();
    BEGIN
      AssignNonDimFilters;
      Dim1Filter1 := Dim1Filter;
      Dim2Filter1 := Dim2Filter;
      IF Dim3Filter <> '' THEN
        Dim3Filter1 := Dim3Filter + '&';
      Dim3Filter1 := Dim3Filter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
      Dim4Filter1 := Dim4Filter;
    END;

    LOCAL PROCEDURE ApplyDim4Filter@1210012();
    BEGIN
      AssignNonDimFilters;
      Dim1Filter1 := Dim1Filter;
      Dim2Filter1 := Dim2Filter;
      Dim3Filter1 := Dim3Filter;
      IF Dim4Filter <> '' THEN
        Dim4Filter1 := Dim4Filter + '&';
      Dim4Filter1 := Dim4Filter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
    END;

    PROCEDURE AssignDimFilters@1210014();
    BEGIN
      Dim1Filter1 := Dim1Filter;
      Dim2Filter1 := Dim2Filter;
      Dim3Filter1 := Dim3Filter;
      Dim4Filter1 := Dim4Filter;
    END;

    PROCEDURE AssignNonDimFilters@1210015();
    BEGIN
      ElementTypeFilter1 := ElementTypeFilter;
      ElementFilter1 := ElementFilter;
      ElementGroupFilter1 := ElementGroupFilter;
      EmployeeFilter1 := EmployeeFilter;
      OrgUnitFilter1 := OrgUnitFilter;
      DateFilter1 := DateFilter;
    END;

    PROCEDURE ClearPoints@21();
    BEGIN
      CLEAR(FirstColumn);
      CLEAR(LastColumn);
    END;

    LOCAL PROCEDURE CurrPayrollAnalysisViewCodeOnA@19065541();
    BEGIN
      PayrollAnalysisMgt.SetPayrollAnalysisView(
        CurrPayrollAnalysisViewCode,PayrollAnalysisView,PayrollStatisticsBuffer,
        Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter);
      PayrollAnalysisMgt.SetLineAndColDim(
        PayrollAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
      UpdateFilterFields;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE Dim2FilterOnAfterValidate@19005475();
    BEGIN
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE Dim1FilterOnAfterValidate@19005240();
    BEGIN
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE Dim3FilterOnAfterValidate@19064950();
    BEGIN
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE ElementTypeFilterOnAfterValida@19001539();
    BEGIN
      PayrollStatisticsBuffer.SETFILTER("Element Type Filter",ElementTypeFilter);
      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE Dim4FilterOnAfterValidate@19067462();
    BEGIN
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE ElementFilterOnAfterValidate@19028784();
    BEGIN
      PayrollStatisticsBuffer.SETFILTER("Element Filter",ElementFilter);
      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE ElementGroupFilterOnAfterValid@19012282();
    BEGIN
      PayrollStatisticsBuffer.SETFILTER("Element Group Filter",ElementGroupFilter);
      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE OrgUnitFilterOnAfterValidate@19067530();
    BEGIN
      PayrollStatisticsBuffer.SETFILTER("Org. Unit Filter",OrgUnitFilter);
      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE EmployeeFilterOnAfterValidate@19069183();
    BEGIN
      PayrollStatisticsBuffer.SETFILTER("Employee Filter",EmployeeFilter);
      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE UsePFAccumSystemFilterOnAfterV@19044365();
    BEGIN
      CASE UsePFAccumSystemFilter OF
        UsePFAccumSystemFilter::" ":
          PayrollStatisticsBuffer.SETRANGE("Use PF Accum. System Filter");
        UsePFAccumSystemFilter::Yes:
          PayrollStatisticsBuffer.SETRANGE("Use PF Accum. System Filter",TRUE);
        UsePFAccumSystemFilter::No:
          PayrollStatisticsBuffer.SETRANGE("Use PF Accum. System Filter",FALSE);
      END;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ShowColumnNameOnAfterValidate@19074585();
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Same);
    END;

    BEGIN
    END.
  }
}

