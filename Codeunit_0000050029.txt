OBJECT Codeunit 50029 Rename Element Reference
{
  OBJECT-PROPERTIES
  {
    Date=17.01.14;
    Time=17:35:30;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=50092;
    OnRun=BEGIN
            RenameJournal.GET("Company Name","Line No.");

            RenameJournal.RunRename;
          END;

  }
  CODE
  {
    VAR
      TextEDB11@1000000002 : TextConst 'ENU=In NAV is no element with such a code %1.;RUS=В NAV нет элемента справочника с кодом %1.';
      TextEDB11_@1101495000 : TextConst 'ENU=In NAV is no element with such a code %1.;RUS=В NAV нет элемента справочника с кодом %1 и ID %2.';
      TextEDB20@1000000000 : TextConst 'ENU=Element with code %1 already exists in the system.;RUS=Элемент справоника с кодом %1 уже есть в системе.';
      TextEDB21@1000000001 : TextConst 'ENU=In Load Duffer %1 is the raw elements of the code %2.;RUS=В Буфере Загрузки %1 есть необработанные элементы с кодом %2.';
      TextEDB22@1000000003 : TextConst 'ENU=Rename dimension %1 is only possible from the cards of directories.;RUS=Переименование измерения %1 возможно только из карточки соответствующего справочника.';
      RenameJournal@1000000004 : Record 50092;
      LoadElementRef@1000000005 : Codeunit 50013;
      TextEDB23@1000000006 : TextConst 'ENU=In the Journal Renaming a rough renaming.;RUS=В Журнале Переименования есть необработанные переименования.';
      TextEDB23_@1000000007 : TextConst 'ENU="In the Buffer of Loading directory %1 handed treatment of type %2 for the directory %3 Code = %4. In NAV is an element of the directory with this code. Record not processed.";RUS=В Буфере Загрузки справочника %1 передан элемент справочника %2. %3';

    PROCEDURE TestFI@1000000017(OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000008 : Boolean) : Boolean;
    VAR
      FI@1000000004 : Record 50021;
      BufferFI@1000000005 : Record 50052;
      BufferFIRate@1000000006 : Record 50057;
      BufferFIValue@1000000007 : Record 50091;
    BEGIN
      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        FI.RESET;
        FI.SETRANGE("Rec ID",OldID);
        IF NOT FI.FINDFIRST AND
           NOT FI.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        FI.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT FI.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF FI.GET(NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferFI.RESET;
      BufferFI.SETRANGE(Status,BufferFI.Status::New);
      BufferFI.SETRANGE("No.",OldNo);
      //NC S547 > PCH
      BufferFI.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferFI.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferFI.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferFI.SETRANGE("No.",NewNo);
      BufferFI.SETRANGE(Type,BufferFI.Type::New);
      IF NOT BufferFI.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferFI.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      BufferFIRate.RESET;
      BufferFIRate.SETRANGE(Status,BufferFIRate.Status::New);
      BufferFIRate.SETRANGE("No.",OldNo);
      IF NOT BufferFIRate.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferFIRate.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferFIValue.RESET;
      BufferFIValue.SETRANGE(Status,BufferFIRate.Status::New);
      BufferFIValue.SETRANGE("FI No.",OldNo);
      IF NOT BufferFIValue.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferFIValue.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestDeal@1000000001(OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000006 : Boolean) : Boolean;
    VAR
      Deal@1000000004 : Record 50037;
      BufferDeal@1000000005 : Record 50036;
    BEGIN
      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        Deal.RESET;
        Deal.SETRANGE("Rec ID",OldID);
        IF NOT Deal.FINDFIRST AND
           NOT Deal.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        Deal.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT Deal.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF Deal.GET(NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferDeal.RESET;
      BufferDeal.SETRANGE(Status,BufferDeal.Status::New);
      BufferDeal.SETRANGE("Deal ID",OldNo);
      //NC S547 > PCH
      BufferDeal.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferDeal.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferDeal.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferDeal.SETRANGE("Deal ID",NewNo);
      IF NOT BufferDeal.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferDeal.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestCust@1000000020(OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000007 : Boolean) : Boolean;
    VAR
      Cust@1000000004 : Record 18;
      BufferCust@1000000005 : Record 50045;
      BufferCustCreditRating@1000000006 : Record 50046;
    BEGIN
      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        Cust.RESET;
        Cust.SETRANGE("Rec ID",OldID);
        IF NOT Cust.FINDFIRST AND
           NOT Cust.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        Cust.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT Cust.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF Cust.GET(NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferCust.RESET;
      BufferCust.SETRANGE(Status,BufferCust.Status::New);
      BufferCust.SETRANGE("No.",OldNo);
      //NC S547 > PCH
      BufferCust.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferCust.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferCust.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferCust.SETRANGE("No.",NewNo);
      IF NOT BufferCust.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferCust.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      BufferCustCreditRating.RESET;
      BufferCustCreditRating.SETRANGE(Status,BufferCustCreditRating.Status::New);
      BufferCustCreditRating.SETRANGE("No.",OldNo);
      IF NOT BufferCustCreditRating.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferCustCreditRating.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestVend@1101495000(OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000007 : Boolean) : Boolean;
    VAR
      Vend@1000000004 : Record 23;
      BufferVend@1000000005 : Record 50118;
    BEGIN
      //NC MTF01 > PCH
      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        BufferVend.RESET;
        BufferVend.SETRANGE("Rec ID",OldID);
        IF NOT BufferVend.FINDFIRST AND
           NOT BufferVend.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        BufferVend.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT Vend.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF Vend.GET(NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferVend.RESET;
      BufferVend.SETRANGE(Status,BufferVend.Status::New);
      BufferVend.SETRANGE("No.",OldNo);
      //NC S547 > PCH
      BufferVend.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferVend.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferVend.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferVend.SETRANGE("No.",NewNo);
      IF NOT BufferVend.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferVend.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
      //NC MTF01 < PCH
    END;

    PROCEDURE TestBankAcc@1000000027(OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000006 : Boolean) : Boolean;
    VAR
      BankAcc@1000000004 : Record 270;
      BufferBankAcc@1000000005 : Record 50053;
    BEGIN
      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        BankAcc.RESET;
        BankAcc.SETRANGE("Rec ID",OldID);
        IF NOT BankAcc.FINDFIRST AND
           NOT BankAcc.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        BankAcc.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT BankAcc.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF BankAcc.GET(NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferBankAcc.RESET;
      BufferBankAcc.SETRANGE(Status,BufferBankAcc.Status::New);
      BufferBankAcc.SETRANGE("No.",OldNo);
      //NC S547 > PCH
      BufferBankAcc.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferBankAcc.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferBankAcc.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferBankAcc.SETRANGE("No.",NewNo);
      IF NOT BufferBankAcc.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferBankAcc.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestStock@1000000029(OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000006 : Boolean) : Boolean;
    VAR
      Stock@1000000004 : Record 50042;
      BufferStock@1000000005 : Record 50041;
    BEGIN
      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        Stock.RESET;
        Stock.SETRANGE("Rec ID",OldID);
        IF NOT Stock.FINDFIRST AND
           NOT Stock.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        Stock.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT Stock.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF Stock.GET(NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferStock.RESET;
      BufferStock.SETRANGE(Status,BufferStock.Status::New);
      BufferStock.SETRANGE(Code,OldNo);
      //NC S547 > PCH
      BufferStock.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferStock.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferStock.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferStock.SETRANGE(Code,NewNo);
      IF NOT BufferStock.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferStock.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestCountry@1000000033(OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000006 : Boolean) : Boolean;
    VAR
      Country@1000000004 : Record 9;
      BufferCountry@1000000005 : Record 50059;
    BEGIN
      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        Country.RESET;
        Country.SETRANGE("Rec ID",OldID);
        IF NOT Country.FINDFIRST AND
           NOT Country.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        Country.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT Country.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF Country.GET(NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferCountry.RESET;
      BufferCountry.SETRANGE(Status,BufferCountry.Status::New);
      BufferCountry.SETRANGE(Code,OldNo);
      //NC S547 > PCH
      BufferCountry.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferCountry.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferCountry.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferCountry.SETRANGE(Code,NewNo);
      IF NOT BufferCountry.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferCountry.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestIndustry@1000000035(OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000006 : Boolean) : Boolean;
    VAR
      Industry@1000000004 : Record 5057;
      BufferIndustry@1000000005 : Record 50060;
    BEGIN
      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        Industry.RESET;
        Industry.SETRANGE("Rec ID",OldID);
        IF NOT Industry.FINDFIRST AND
           NOT Industry.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        Industry.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT Industry.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF Industry.GET(NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferIndustry.RESET;
      BufferIndustry.SETRANGE(Status,BufferIndustry.Status::New);
      BufferIndustry.SETRANGE(Code,OldNo);
      //NC S547 > PCH
      BufferIndustry.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferIndustry.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferIndustry.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferIndustry.SETRANGE(Code,NewNo);
      IF NOT BufferIndustry.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferIndustry.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestDimValue@1000000038(DimCode@1000000006 : Code[20];OldNo@1000000000 : Code[20];OldID@1101495000 : Code[50];NewNo@1000000001 : Code[20];VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000003 : Text[250];TestBuffer@1000000008 : Boolean) : Boolean;
    VAR
      DimValue@1000000004 : Record 349;
      BufferDimValue@1000000005 : Record 50054;
      MovingDataSetup@1000000007 : Record 50064;
    BEGIN
      MovingDataSetup.GET;
      IF DimCode IN [MovingDataSetup."Customer Dimension Code",
                     MovingDataSetup."Deal Dimension Code",
                     MovingDataSetup."FA Dimension Code",
                     MovingDataSetup."FE Dimension Code",
                     MovingDataSetup."FI Dimension Code",
                     MovingDataSetup."Bank Account Dimension Code"] THEN BEGIN
        ErrorCode := 'EDB22';
        ErrorText := STRSUBSTNO(TextEDB22,DimCode);
        EXIT(FALSE);
      END;

      //NC S547 > PCH
      IF (OldID <> '') THEN BEGIN
        DimValue.RESET;
        DimValue.SETRANGE("Dimension Code",DimCode);
        DimValue.SETRANGE("Rec ID",OldID);
        IF NOT DimValue.FINDFIRST AND
           NOT DimValue.GET(OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11_,OldNo,OldID);
          EXIT(FALSE);
        END;
        DimValue.RESET;
      END ELSE
      //NC S547 < PCH
        IF NOT DimValue.GET(DimCode,OldNo) THEN BEGIN
          ErrorCode := 'EDB11';
          ErrorText := STRSUBSTNO(TextEDB11,OldNo);
          EXIT(FALSE);
        END;

      IF DimValue.GET(DimCode,NewNo) THEN BEGIN
        ErrorCode := 'EDB20';
        ErrorText := STRSUBSTNO(TextEDB20,NewNo);
        EXIT(FALSE);
      END;

      IF NOT TestBuffer THEN
        EXIT(TRUE);

      BufferDimValue.RESET;
      BufferDimValue.SETRANGE(Status,BufferDimValue.Status::New);
      BufferDimValue.SETRANGE("Dimension Code",DimCode);
      BufferDimValue.SETRANGE(Code,OldNo);
      //NC S547 > PCH
      BufferDimValue.SETFILTER("Rec ID",'%1','');
      //NC S547 < PCH
      IF NOT BufferDimValue.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferDimValue.TABLECAPTION,OldNo);
        EXIT(FALSE);
      END;

      BufferDimValue.SETRANGE(Code,NewNo);
      BufferDimValue.SETRANGE(Type,BufferDimValue.Type::New);
      IF NOT BufferDimValue.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB21';
        ErrorText := STRSUBSTNO(TextEDB21,BufferDimValue.TABLECAPTION,NewNo);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestRenameJournal@1000000000(RecRefBuffer@1000000000 : RecordRef;VAR RecRefReference@1101495002 : ARRAY [2] OF RecordRef;VAR isFind@1101495001 : ARRAY [2] OF Boolean;VAR ErrorCode@1000000002 : Code[10];VAR ErrorText@1000000001 : Text[250]) isOK : Boolean;
    VAR
      RenameJnl@1000000011 : Record 50092;
      BufferVendor@1101495000 : Record 50118;
      Vendor@1101495019 : Record 23;
      BufferCustomer@1101495018 : Record 50045;
      Customer@1101495017 : Record 18;
      BufferCountry@1101495016 : Record 50059;
      Country@1101495015 : Record 9;
      BufferIndustryGroup@1101495014 : Record 50060;
      IndustryGroup@1101495013 : Record 5057;
      BufferBankAccount@1101495012 : Record 50053;
      BankAccount@1101495011 : Record 270;
      BufferFI@1101495010 : Record 50052;
      FI@1101495009 : Record 50021;
      BufferDeal@1101495008 : Record 50036;
      Deal@1101495007 : Record 50037;
      BufferStockExchange@1101495006 : Record 50041;
      StockExchange@1101495005 : Record 50042;
      BufferDimValue@1101495004 : Record 50054;
      DimValue@1101495003 : Record 349;
      StrPrimaryKeyInfo@1000000012 : Text[250];
      StrPrimaryKeyInfoNew@1000000013 : Text[250];
      RefObjectNo@1000000014 : ARRAY [2] OF Integer;
    BEGIN
      isOK := TRUE;
      RenameJnl.RESET;
      LoadElementRef.GetReference(COMPANYNAME,RecRefBuffer.NUMBER,RefObjectNo);
      RenameJnl.SETRANGE("Table No.",RefObjectNo[1]);
      RenameJnl.SETRANGE(Status,RenameJnl.Status::New);
      CASE RecRefBuffer.NUMBER OF
        DATABASE::"Buffer Customer" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferCustomer);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(Customer);
              IF (Customer."Rec ID" <> '') AND (BufferCustomer."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferCustomer);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferCustomer."No.";
            StrPrimaryKeyInfoNew := BufferCustomer."No. New";
            RenameJnl.SETRANGE("Code New",BufferCustomer."No.");
          END;
        //NC MTF01 > PCH
        DATABASE::"Buffer Vendor" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferVendor);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(Vendor);
              IF (Vendor."Rec ID" <> '') AND (BufferVendor."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferVendor);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferVendor."No.";
            StrPrimaryKeyInfoNew := BufferVendor."No. New";
            RenameJnl.SETRANGE("Code New",BufferVendor."No.");
          END;
        //NC MTF01 < PCH
        DATABASE::"Buffer Country/Region" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferCountry);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(Country);
              IF (Country."Rec ID" <> '') AND (BufferCountry."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferCountry);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferCountry.Code;
            StrPrimaryKeyInfoNew := BufferCountry."Code New";
            RenameJnl.SETRANGE("Code New",BufferCountry.Code);
          END;
        DATABASE::"Buffer Industry Group" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferIndustryGroup);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(IndustryGroup);
              IF (IndustryGroup."Rec ID" <> '') AND (BufferIndustryGroup."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferIndustryGroup);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferIndustryGroup.Code;
            StrPrimaryKeyInfoNew := BufferIndustryGroup."Code New";
            RenameJnl.SETRANGE("Code New",BufferIndustryGroup.Code);
          END;
        DATABASE::"Buffer Bank Account" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferBankAccount);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(BankAccount);
              IF (BankAccount."Rec ID" <> '') AND (BufferBankAccount."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferBankAccount);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferBankAccount."No.";
            StrPrimaryKeyInfoNew := BufferBankAccount."No. New";
            RenameJnl.SETRANGE("Code New",BufferBankAccount."No.");
          END;
        DATABASE::"Buffer Financial Instrument" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferFI);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(FI);
              IF (FI."Rec ID" <> '') AND (BufferFI."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferFI);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferFI."No.";
            StrPrimaryKeyInfoNew := BufferFI."No. New";
            RenameJnl.SETRANGE("Code New",BufferFI."No.");
          END;
        DATABASE::"Buffer Deal" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferDeal);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(Deal);
              IF (Deal."Rec ID" <> '') AND (BufferDeal."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferDeal);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferDeal."Deal ID";
            StrPrimaryKeyInfoNew := BufferDeal."Deal ID New";
            RenameJnl.SETRANGE("Code New",BufferDeal."Deal ID");
          END;
        DATABASE::"Buffer Stock Exchange" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferStockExchange);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(StockExchange);
              IF (StockExchange."Rec ID" <> '') AND (BufferStockExchange."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferStockExchange);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferStockExchange.Code;
            StrPrimaryKeyInfoNew := BufferStockExchange."Code New";
            RenameJnl.SETRANGE("Code New",BufferStockExchange.Code);
          END;
        DATABASE::"Buffer Dimension Value" :
          BEGIN
            //NC MIO23 > PCH
            RecRefBuffer.SETTABLE(BufferDimValue);
            //NC MIO23 < PCH
            //NC S547 > PCH
            IF isFind[1] THEN BEGIN
              RecRefReference[1].SETTABLE(DimValue);
              IF (DimValue."Rec ID" <> '') AND (BufferDimValue."Rec ID" <> '') THEN
                EXIT(TRUE);
            END;
            //NC S547 < PCH
            //NC MIO23 > PCH
            //RecRefBuffer.SETTABLE(BufferDimValue);
            //NC MIO23 < PCH
            StrPrimaryKeyInfo := BufferDimValue."Dimension Code" + ',' + BufferDimValue.Code;
            StrPrimaryKeyInfoNew := BufferDimValue."Code New";
            RenameJnl.SETRANGE("Object Code",BufferDimValue."Dimension Code");
            RenameJnl.SETRANGE("Code New",BufferDimValue.Code);
          END;
      END;
      IF NOT RenameJnl.ISEMPTY THEN BEGIN
        ErrorCode := 'EDB23';
        ErrorText := STRSUBSTNO(TextEDB23_,RecRefBuffer.CAPTION,StrPrimaryKeyInfo,TextEDB23);
        isOK := FALSE;
      END;
      EXIT(isOK);
    END;

    PROCEDURE RenameDimValueInBuffer@1000000041(DimCode@1000000006 : Code[20];OldNo@1000000000 : Code[20];NewNo@1000000001 : Code[20]);
    VAR
      MovingDataSetup@1000000013 : Record 50064;
      PreBuffer@1000000002 : Record 50007;
      PreBuffer1@1000000005 : Record 50007;
      Company@1000000004 : Record 2000000006;
      Buffer@1000000003 : Record 50008;
      Buffer1@1000000007 : Record 50008;
      Indicator@1000000008 : Dialog;
      iObj@1000000009 : Integer;
      CountObj@1000000010 : Integer;
      i@1000000011 : Integer;
      Count@1000000012 : Integer;
      Deal@1000000014 : Record 50037;
      Deal1@1000000018 : Record 50037;
      BufferDeal@1000000015 : Record 50036;
      BufferDeal1@1000000019 : Record 50036;
      BufferFA@1000000016 : Record 50043;
      BufferFA1@1000000020 : Record 50043;
      CatalogFA@1000000017 : Record 50044;
      CatalogFA1@1000000021 : Record 50044;
    BEGIN
      MovingDataSetup.GET;
      IF GUIALLOWED THEN BEGIN
        Indicator.OPEN('Переименование буфера...'   + ' \ ' +
                       'Объект: ' + '#1################################' + ' \ ' +
                       'Объект: ' + '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' + ' \ ' +
                       'Процент:' + '@3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'   );
      END;

      IF GUIALLOWED THEN BEGIN
        iObj := 1;
        CountObj := Company.COUNT + 2;
        Indicator.UPDATE(1, PreBuffer.TABLECAPTION);
        Indicator.UPDATE(2, ROUND((iObj/CountObj)*10000, 1));
      END;

      IF GUIALLOWED THEN BEGIN
        i := 1;
        Count := 20;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 1 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 1 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 1 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 1 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 1 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 1 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 2 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 2 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 2 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 2 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 2 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 2 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 3 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 3 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 3 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 3 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 3 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 3 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 4 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 4 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 4 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 4 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 4 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 4 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 5 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 5 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 5 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 5 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 5 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 5 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 6 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 6 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 6 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 6 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 6 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 6 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 7 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 7 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 7 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 7 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 7 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 7 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 8 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 8 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 8 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 8 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 8 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 8 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 9 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 9 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 9 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 9 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 9 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 9 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 10 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 10 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 10 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 10 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 10 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 10 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 11 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 11 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 11 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 11 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 11 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 11 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 12 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 12 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 12 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 12 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 12 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 12 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 13 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 13 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 13 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 13 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 13 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 13 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 14 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 14 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 14 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 14 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 14 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 14 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 15 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 15 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 15 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 15 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 15 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 15 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 16 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 16 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 16 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 16 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 16 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 16 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 17 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 17 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 17 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 17 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 17 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 17 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 18 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 18 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 18 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 18 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 18 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 18 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 19 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 19 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 19 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 19 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 19 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 19 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;

      IF GUIALLOWED THEN BEGIN
        i += 1;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;
      PreBuffer.RESET;
      PreBuffer.SETRANGE(Status,PreBuffer.Status::New);
      PreBuffer.SETRANGE("Dimension 20 Code",DimCode);
      IF NOT PreBuffer.ISEMPTY THEN BEGIN
        PreBuffer.SETRANGE("Debit Dimension 20 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Debit Dimension 20 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
        PreBuffer.SETRANGE("Debit Dimension 20 Value Code");
        PreBuffer.SETRANGE("Credit Dimension 20 Value Code",OldNo);
        IF PreBuffer.FINDSET(TRUE) THEN REPEAT
          PreBuffer1 := PreBuffer;
          PreBuffer1."Credit Dimension 20 Value Code" := NewNo;
          PreBuffer1.MODIFY;
        UNTIL PreBuffer.NEXT = 0;
      END;


      IF GUIALLOWED THEN BEGIN
        iObj += 1;
        Indicator.UPDATE(1, 'Справочники');
        Indicator.UPDATE(2, ROUND((iObj/CountObj)*10000, 1));
      END;

      IF GUIALLOWED THEN BEGIN
        i := 1;
        Count := 8;
        Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
      END;

      IF DimCode = MovingDataSetup."BOOK Dimension Code" THEN BEGIN

        BufferDeal.RESET;
        BufferDeal.SETRANGE(Status,BufferDeal.Status::New);
        BufferDeal.SETRANGE(Book,OldNo);
        IF BufferDeal.FINDSET(TRUE) THEN REPEAT
          BufferDeal1 := BufferDeal;
          BufferDeal1.Book := NewNo;
          BufferDeal1.MODIFY;
        UNTIL BufferDeal.NEXT = 0;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        BufferDeal.RESET;
        BufferDeal.SETRANGE(Status,BufferDeal.Status::New);
        BufferDeal.SETRANGE("Book Rt.",OldNo);
        IF BufferDeal.FINDSET(TRUE) THEN REPEAT
          BufferDeal1 := BufferDeal;
          BufferDeal1."Book Rt." := NewNo;
          BufferDeal1.MODIFY;
        UNTIL BufferDeal.NEXT = 0;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Deal.RESET;
        Deal.SETRANGE(Book,OldNo);
        IF Deal.FINDSET(TRUE) THEN REPEAT
          Deal1 := Deal;
          Deal1.Book := NewNo;
          Deal1.MODIFY;
        UNTIL Deal.NEXT = 0;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Deal.RESET;
        Deal.SETRANGE("Book Rt.",OldNo);
        IF Deal.FINDSET(TRUE) THEN REPEAT
          Deal1 := Deal;
          Deal1."Book Rt." := NewNo;
          Deal1.MODIFY;
        UNTIL Deal.NEXT = 0;

      END;

      IF DimCode = MovingDataSetup."PROFIT CENTER Dimension Code" THEN BEGIN

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        BufferDeal.RESET;
        BufferDeal.SETRANGE(Status,BufferDeal.Status::New);
        BufferDeal.SETRANGE("Profit Center",OldNo);
        IF BufferDeal.FINDSET(TRUE) THEN REPEAT
          BufferDeal1 := BufferDeal;
          BufferDeal1."Profit Center" := NewNo;
          BufferDeal1.MODIFY;
        UNTIL BufferDeal.NEXT = 0;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Deal.RESET;
        Deal.SETRANGE("Profit Center",OldNo);
        IF Deal.FINDSET(TRUE) THEN REPEAT
          Deal1 := Deal;
          Deal1."Profit Center" := NewNo;
          Deal1.MODIFY;
        UNTIL Deal.NEXT = 0;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        BufferFA.RESET;
        BufferFA.SETRANGE(Status,BufferDeal.Status::New);
        BufferFA.SETRANGE("Profit Center",OldNo);
        IF BufferFA.FINDSET(TRUE) THEN REPEAT
          BufferFA1 := BufferFA;
          BufferFA1."Profit Center" := NewNo;
          BufferFA1.MODIFY;
        UNTIL BufferFA.NEXT = 0;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        CatalogFA.RESET;
        CatalogFA.SETRANGE("Profit Center",OldNo);
        IF CatalogFA.FINDSET(TRUE) THEN REPEAT
          CatalogFA1 := CatalogFA;
          CatalogFA1."Profit Center" := NewNo;
          CatalogFA.MODIFY;
        UNTIL CatalogFA.NEXT = 0;

      END;



      IF Company.FINDSET THEN REPEAT
        Buffer.CHANGECOMPANY(Company.Name);
        Buffer1.CHANGECOMPANY(Company.Name);

        IF GUIALLOWED THEN BEGIN
          iObj += 1;
          Indicator.UPDATE(1, Company.Name);
          Indicator.UPDATE(2, ROUND((iObj/CountObj)*10000, 1));
        END;


        IF GUIALLOWED THEN BEGIN
          i := 1;
          Count := 20;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 1 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 1 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 1 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 1 Value Code");
          Buffer.SETRANGE("Credit Dimension 1 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 1 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 2 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 2 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 2 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 2 Value Code");
          Buffer.SETRANGE("Credit Dimension 2 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 2 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 3 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 3 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 3 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 3 Value Code");
          Buffer.SETRANGE("Credit Dimension 3 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 3 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 4 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 4 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 4 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 4 Value Code");
          Buffer.SETRANGE("Credit Dimension 4 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 4 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 5 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 5 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 5 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 5 Value Code");
          Buffer.SETRANGE("Credit Dimension 5 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 5 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 6 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 6 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 6 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 6 Value Code");
          Buffer.SETRANGE("Credit Dimension 6 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 6 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 7 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 7 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 7 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 7 Value Code");
          Buffer.SETRANGE("Credit Dimension 7 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 7 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 8 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 8 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 8 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 8 Value Code");
          Buffer.SETRANGE("Credit Dimension 8 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 8 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 9 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 9 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 9 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 9 Value Code");
          Buffer.SETRANGE("Credit Dimension 9 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 9 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 10 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 10 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 10 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 10 Value Code");
          Buffer.SETRANGE("Credit Dimension 10 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 10 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 11 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 11 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 11 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 11 Value Code");
          Buffer.SETRANGE("Credit Dimension 11 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 11 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 12 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 12 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 12 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 12 Value Code");
          Buffer.SETRANGE("Credit Dimension 12 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 12 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 13 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 13 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 13 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 13 Value Code");
          Buffer.SETRANGE("Credit Dimension 13 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 13 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 14 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 14 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 14 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 14 Value Code");
          Buffer.SETRANGE("Credit Dimension 14 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 14 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 15 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 15 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 15 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 15 Value Code");
          Buffer.SETRANGE("Credit Dimension 15 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 15 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 16 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 16 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 16 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 16 Value Code");
          Buffer.SETRANGE("Credit Dimension 16 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 16 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 17 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 17 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 17 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 17 Value Code");
          Buffer.SETRANGE("Credit Dimension 17 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 17 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 18 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 18 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 18 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 18 Value Code");
          Buffer.SETRANGE("Credit Dimension 18 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 18 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 19 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 19 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 19 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 19 Value Code");
          Buffer.SETRANGE("Credit Dimension 19 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 19 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;

        IF GUIALLOWED THEN BEGIN
          i += 1;
          Indicator.UPDATE(3, ROUND((i/Count)*10000, 1));
        END;
        Buffer.RESET;
        Buffer.SETRANGE("Dimension 20 Code",DimCode);
        IF NOT Buffer.ISEMPTY THEN BEGIN
          Buffer.SETRANGE("Debit Dimension 20 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Debit Dimension 20 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
          Buffer.SETRANGE("Debit Dimension 20 Value Code");
          Buffer.SETRANGE("Credit Dimension 20 Value Code",OldNo);
          IF Buffer.FINDSET(TRUE) THEN REPEAT
            Buffer1 := Buffer;
            Buffer1."Credit Dimension 20 Value Code" := NewNo;
            Buffer1.MODIFY;
          UNTIL Buffer.NEXT = 0;
        END;


      UNTIL Company.NEXT = 0;

      IF GUIALLOWED THEN BEGIN
        Indicator.CLOSE;
      END;
    END;

    PROCEDURE RenameDimValueInBufferNAV@1101495001(DimCode@1101495002 : Code[20];OldNo@1101495001 : Code[20];NewNo@1101495000 : Code[20]);
    VAR
      MovingDataSetup@1101495004 : Record 50064;
      Indicator@1101495003 : Dialog;
      i@1101495006 : Integer;
      Count@1101495005 : Integer;
      BufferLE@1101495007 : Record 50093;
      BufferLEDim@1101495008 : Record 50094;
      BufferLEDim1@1101495009 : Record 50094;
    BEGIN
      MovingDataSetup.GET;
      IF GUIALLOWED THEN BEGIN
        Indicator.OPEN('Переименование буфера NAV...'   + ' \ ' +
                       'Процент:' + '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'   );
      END;

      BufferLEDim.RESET;
      BufferLEDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
      BufferLEDim.SETRANGE("Dimension Code",DimCode);
      BufferLEDim.SETRANGE("Dimension Value Code",OldNo);

      //NC MIO23 > PCH
      i += 0;
      //NC MIO23 < PCH
      Count := BufferLEDim.COUNT;

      IF BufferLEDim.FINDSET(TRUE) THEN REPEAT
        //NC MIO23 > PCH
        i += 1;
        IF GUIALLOWED THEN
        //NC MIO23 < PCH
        Indicator.UPDATE(1, ROUND((i/Count)*10000, 1));

        BufferLEDim1 := BufferLEDim;
        BufferLEDim1."Dimension Value Code" := NewNo;
        BufferLEDim1.MODIFY;
      UNTIL BufferLEDim.NEXT = 0;

      IF GUIALLOWED THEN BEGIN
        Indicator.CLOSE;
      END;
    END;

    BEGIN
    {
      NC MDB03 PCH Создан CU
      NC MTF01 PCH
      NC S547 PCH загрузка по ID
      NC MIO23 PCH перенос доработок из IFRS
    }
    END.
  }
}

