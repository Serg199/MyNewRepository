OBJECT Page 5915 Service Tasks
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Service Tasks;
               RUS=Сервисные задачи];
    SaveValues=Yes;
    InsertAllowed=No;
    SourceTable=Table5901;
    SourceTableView=SORTING(Response Date,Response Time,Priority);
    PageType=Worksheet;
    OnOpenPage=BEGIN
                 IF UserMgt.GetServiceFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetServiceFilter);
                   FILTERGROUP(0);
                 END;

                 SetAllFilters;

                 IF ISEMPTY THEN BEGIN
                   ServOrderFilter := '';
                   SetServOrderFilter;
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       ServHeader.GET("Document Type","Document No.");

                       IF NOT Cust.GET(ServHeader."Customer No.") THEN
                         CLEAR(Cust);

                       CALCFIELDS("No. of Active/Finished Allocs");
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 51      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Service Tasks;
                                 RUS=&Сервисные задачи];
                      Image=ServiceTasks }
      { 53      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=&Show Document;
                                 RUS=&Показать документ];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 PageManagement@1000 : Codeunit 700;
                               BEGIN
                                 IF ServHeader.GET("Document Type","Document No.") THEN BEGIN
                                   PageManagement.PageRunModal(ServHeader);

                                   IF ServOrderFilter <> '' THEN BEGIN
                                     ServItemLine.RESET;
                                     ServItemLine.COPYFILTERS(Rec);
                                     IF ServItemLine.GETRANGEMIN("Document No.") = ServItemLine.GETRANGEMAX("Document No.") THEN
                                       IF ServItemLine.ISEMPTY THEN BEGIN
                                         ServOrderFilter := '';
                                         SetServOrderFilter;
                                       END
                                   END;
                                 END;
                               END;
                                }
      { 54      ;2   ;Action    ;
                      CaptionML=[ENU=&Item Worksheet;
                                 RUS=&Товарный журнал];
                      RunObject=Page 5906;
                      RunPageLink=Document Type=FIELD(Document Type),
                                  Document No.=FIELD(Document No.),
                                  Line No.=FIELD(Line No.),
                                  Resource Filter=FIELD(Resource Filter);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ItemWorksheet;
                      PromotedCategory=Process }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 36      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Print;
                                 RUS=&Печать];
                      Image=Print }
      { 37      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Service &Tasks;
                                 RUS=&Сервисные задачи];
                      Image=ServiceTasks;
                      OnAction=BEGIN
                                 CLEAR(ServItemLine);
                                 FILTERGROUP(2);
                                 ServItemLine.SETVIEW(GETVIEW);
                                 FILTERGROUP(0);
                                 ServItemLine.SETRANGE("No. of Allocations");
                                 ServItemLine.SETRANGE("No. of Active/Finished Allocs");

                                 REPORT.RUN(REPORT::"Service Tasks",TRUE,TRUE,ServItemLine);
                               END;
                                }
      { 48      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Service Item &Worksheet;
                                 RUS=&Журнал сервисных товаров];
                      Image=ServiceItemWorksheet;
                      OnAction=BEGIN
                                 CLEAR(ServItemLine);
                                 ServItemLine.SETRANGE("Document Type","Document Type");
                                 ServItemLine.SETRANGE("Document No.","Document No.");
                                 ServItemLine.SETRANGE("Line No.","Line No.");
                                 REPORT.RUN(REPORT::"Service Item Worksheet",TRUE,TRUE,ServItemLine);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 29  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           RUS=Общее] }

    { 42  ;2   ;Field     ;
                CaptionML=[ENU=Resource Filter;
                           RUS=Фильтр по ресурсу];
                ToolTipML=[ENU=Specifies the filter that displays service tasks corresponding to service item lines that a certain resource is allocated to.;
                           RUS=Определяет фильтр, который позволяет просматривать сервисные задачи, соответствующие строкам сервисных товаров, на которые распределен определенный ресурс.];
                SourceExpr=ResourceFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Resource Filter");
                             FILTERGROUP(0);
                             SetResourceFilter;
                             IF NOT TestFilter THEN BEGIN
                               ResourceFilter := TempTextFilter;
                               SetResourceFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             ResourceFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           Res.RESET;
                           IF PAGE.RUNMODAL(0,Res) = ACTION::LookupOK THEN BEGIN
                             Text := Res."No.";
                             SetResourceFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 63  ;2   ;Field     ;
                CaptionML=[ENU=Resource Group Filter;
                           RUS=Фильтр по группе ресурсов];
                ToolTipML=[ENU=Specifies the filter that displays service tasks corresponding to service item lines with the specified resource group allocated to each of them.;
                           RUS=Определяет фильтр, который позволяет просматривать сервисные задачи, соответствующие строкам сервисных товаров, на которые распределены ресурсы определенной группы.];
                SourceExpr=ResourceGroupFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Resource Group Filter");
                             FILTERGROUP(0);
                             SetResourceGroupFilter;
                             IF NOT TestFilter THEN BEGIN
                               ResourceGroupFilter := TempTextFilter;
                               SetResourceGroupFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             ResourceGroupFilterOnAfterVali;
                           END;

                OnLookup=BEGIN
                           ResourceGroup.RESET;
                           IF PAGE.RUNMODAL(0,ResourceGroup) = ACTION::LookupOK THEN BEGIN
                             Text := ResourceGroup."No.";
                             SetResourceGroupFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Response Date Filter;
                           RUS=Фильтр по дате отклика];
                ToolTipML=[ENU=Specifies the filter that displays service tasks corresponding to service item lines with the specified value in the Response Date field.;
                           RUS=Определяет фильтр, который позволяет просматривать сервисные задачи, соответствующие строкам сервисных товаров с определенным значением в поле "Дата отклика".];
                SourceExpr=RespDateFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Response Date");
                             FILTERGROUP(0);
                             SetRespDateFilter;
                             IF NOT TestFilter THEN BEGIN
                               RespDateFilter := TempTextFilter;
                               SetRespDateFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             RespDateFilterOnAfterValidate;
                           END;
                            }

    { 39  ;2   ;Field     ;
                CaptionML=[ENU=Allocation Status Filter;
                           RUS=Фильтр по статусу распределения];
                ToolTipML=[ENU=Specifies the filter that displays the service tasks corresponding to service item lines with a certain value in the Status Code of Resource Allocations.;
                           RUS=Определяет фильтр, который позволяет просматривать сервисные задачи, соответствующие строкам сервисных товаров с определенным значением в поле "Код статуса" в окне "Распределение ресурсов".];
                OptionCaptionML=[ENU=" ,Nonactive,Active,Finished,Canceled,Reallocation Needed";
                                 RUS=" ,Неактивен,Активен,Завершен,Отменен,Требуется перераспределение"];
                SourceExpr=AllocationStatus;
                OnValidate=BEGIN
                             TempAllocationStatus := "Allocation Status Filter";
                             SetAllocationFilter;
                             IF NOT TestFilter THEN BEGIN
                               AllocationStatus := TempAllocationStatus;
                               SetAllocationFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             AllocationStatusOnAfterValidat;
                           END;
                            }

    { 56  ;2   ;Field     ;
                CaptionML=[ENU=Document Filter;
                           RUS=Фильтр по документу];
                ToolTipML=[ENU=Specifies the filter that displays all service tasks corresponding to documents of the specified type.;
                           RUS=Определяет фильтр, который позволяет просматривать все сервисные задачи, соответствующие документам указанного типа.];
                OptionCaptionML=[ENU=Order,Quote,All;
                                 RUS=Заказ,Предложение,Все];
                SourceExpr=DocFilter;
                OnValidate=BEGIN
                             ServOrderFilter := '';
                             SetServOrderFilter;
                             SetDocFilter;
                             DocFilterOnAfterValidate;
                           END;
                            }

    { 60  ;2   ;Field     ;
                CaptionML=[ENU=No. Filter;
                           RUS=Фильтр по номеру];
                ToolTipML=[ENU=Specifies the filter that displays service tasks corresponding to the service item lines within the specified document.;
                           RUS=Определяет фильтр, который позволяет просматривать сервисные задачи, соответствующие строкам сервисных товаров в указанном документе.];
                SourceExpr=ServOrderFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Document No.");
                             FILTERGROUP(0);
                             SetServOrderFilter;
                             IF NOT TestFilter THEN BEGIN
                               ServOrderFilter := TempTextFilter;
                               SetServOrderFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             ServOrderFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           ServHeader.RESET;
                           SetDocFilterHeader(ServHeader);
                           IF PAGE.RUNMODAL(0,ServHeader) = ACTION::LookupOK THEN BEGIN
                             Text := ServHeader."No.";
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 40  ;2   ;Field     ;
                CaptionML=[ENU=Repair Status Code Filter;
                           RUS=Фильтр по коду статуса ремонта];
                ToolTipML=[ENU=Specifies the Repair Status Code filter to view service tasks corresponding to service item lines with the specified repair status code.;
                           RUS=Определяет фильтр кода статуса ремонта для просмотра сервисных задач, соответствующих строкам сервисных товаров с определенным значением кода статуса ремонта.];
                SourceExpr=RepairStatusFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Repair Status Code");
                             FILTERGROUP(0);
                             SetRepStatFilter;
                             IF NOT TestFilter THEN BEGIN
                               RepairStatusFilter := TempTextFilter;
                               SetRepStatFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             RepairStatusFilterOnAfterValid;
                           END;

                OnLookup=BEGIN
                           RepairStatus.RESET;
                           IF PAGE.RUNMODAL(0,RepairStatus) = ACTION::LookupOK THEN BEGIN
                             Text := RepairStatus.Code;
                             SetRepStatFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the estimated date when service should start on this service item line.;
                           RUS=Определяет ожидаемую дату начала обслуживания для этой строки сервисного товара.];
                SourceExpr="Response Date" }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the estimated time when service should start on this service item.;
                           RUS=Определяет ожидаемое время начала обслуживания для этого сервисного товара.];
                SourceExpr="Response Time" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the service priority for this item.;
                           RUS=Определяет приоритет обслуживания для этого товара.];
                SourceExpr=Priority }

    { 57  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the service document is a service order or service quote.;
                           RUS=Указывает, является сервисный документ сервисным заказом или сервисным предложением.];
                SourceExpr="Document Type" }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the service order linked to this service item line.;
                           RUS=Определяет номер сервисного заказа, связанного с этой строкой сервисного товара.];
                SourceExpr="Document No." }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the repair status of this service item.;
                           RUS=Определяет статус ремонта этого сервисного товара.];
                SourceExpr="Repair Status Code" }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the service item number registered in the Service Item table.;
                           RUS=Определяет номер сервисного товара, зарегистрированного в таблице "Сервисный товар".];
                SourceExpr="Service Item No." }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer number associated with the service contract.;
                           RUS=Определяет номер клиента, связанный с сервисным контрактом.];
                SourceExpr="Customer No." }

    { 61  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ship-to code of the service item associated with the service contract or service order.;
                           RUS=Определяет код получателя сервисного товара, связанного с сервисным контрактом или сервисным заказом.];
                SourceExpr="Ship-to Code";
                Visible=FALSE }

    { 45  ;2   ;Field     ;
                CaptionML=[ENU=Customer Name;
                           RUS=Название клиента];
                SourceExpr=Cust.Name;
                Visible=FALSE }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the service shelf this item is stored on.;
                           RUS=Определяет номер полки, на которой хранится этот сервисный товар.];
                SourceExpr="Service Shelf No." }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the item number linked to this service item.;
                           RUS=Определяет номенклатурный номер, связанный с этим сервисным товаром.];
                SourceExpr="Item No." }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the service item group for this item.;
                           RUS=Определяет код группы сервисных товаров для этого товара.];
                SourceExpr="Service Item Group Code" }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the variant code for the item.;
                           RUS=Определяет код варианта товара.];
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the serial number of this item.;
                           RUS=Определяет серийный номер этого товара.];
                SourceExpr="Serial No.";
                OnAssistEdit=BEGIN
                               CLEAR(ItemLedgerEntry);
                               ItemLedgerEntry.SETRANGE("Item No.","Item No.");
                               ItemLedgerEntry.SETRANGE("Variant Code","Variant Code");
                               ItemLedgerEntry.SETRANGE("Serial No.","Serial No.");
                               PAGE.RUN(PAGE::"Item Ledger Entries",ItemLedgerEntry);
                             END;
                              }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of this service item.;
                           RUS=Определяет описание этого сервисного товара.];
                SourceExpr=Description;
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that warranty on either parts or labor exists for this item.;
                           RUS=Определяет, что для этого товара действует гарантия на запчасти или на работы.];
                SourceExpr=Warranty }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the service contract associated with the item or service on the line.;
                           RUS=Определяет номер сервисного контракта, связанного с товаром или услугой в этой строке.];
                SourceExpr="Contract No." }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of resource allocations with the allocation status specified in the Allocation Status Filter field.;
                           RUS=Определяет количество распределений ресурсов со статусом распределения, указанным в поле "Фильтр по статусу распределения".];
                SourceExpr="No. of Allocations" }

    { 44  ;1   ;Group      }

    { 31  ;2   ;Field     ;
                Name=Description2;
                ToolTipML=[ENU=Specifies a description of this service item.;
                           RUS=Определяет описание этого сервисного товара.];
                SourceExpr=Description;
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ItemLedgerEntry@1013 : Record 32;
      RepairStatus@1010 : Record 5927;
      Cust@1002 : Record 18;
      ServHeader@1000 : Record 5900;
      ServItemLine@1001 : Record 5901;
      Res@1011 : Record 156;
      ResourceGroup@1015 : Record 152;
      UserMgt@1003 : Codeunit 5700;
      RepairStatusFilter@1006 : Text;
      RespDateFilter@1007 : Text;
      ServOrderFilter@1008 : Text;
      ResourceFilter@1009 : Text;
      AllocationStatus@1005 : ' ,Nonactive,Active,Finished,Canceled,Reallocation Needed';
      DocFilter@1012 : 'Order,Quote,All';
      ResourceGroupFilter@1014 : Text;
      TempTextFilter@1016 : Text;
      Text000@1017 : TextConst 'ENU=There is no %1 within the filter.;RUS=Нет %1 в пределах фильтра.';
      TempAllocationStatus@1018 : ' ,Nonactive,Active,Finished,Canceled,Reallocation Needed';

    PROCEDURE SetAllFilters@5();
    BEGIN
      SetRepStatFilter;
      SetRespDateFilter;
      SetDocFilter;
      SetServOrderFilter;
      SetResourceFilter;
      SetResourceGroupFilter;
      SetAllocationFilter;
    END;

    PROCEDURE SetRepStatFilter@4();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Repair Status Code",RepairStatusFilter);
      RepairStatusFilter := GETFILTER("Repair Status Code");
      FILTERGROUP(0);
    END;

    PROCEDURE SetRespDateFilter@6();
    VAR
      ApplicationManagement@1000 : Codeunit 1;
    BEGIN
      FILTERGROUP(2);
      IF ApplicationManagement.MakeDateFilter(RespDateFilter) = 0 THEN;
      SETFILTER("Response Date",RespDateFilter);
      RespDateFilter := GETFILTER("Response Date");
      FILTERGROUP(0);
    END;

    PROCEDURE SetDocFilter@8();
    BEGIN
      FILTERGROUP(2);
      CASE DocFilter OF
        DocFilter::Order:
          SETRANGE("Document Type","Document Type"::Order);
        DocFilter::Quote:
          SETRANGE("Document Type","Document Type"::Quote);
        DocFilter::All:
          SETRANGE("Document Type");
      END;
      FILTERGROUP(0);
    END;

    PROCEDURE SetDocFilterHeader@2(VAR ServHeader@1000 : Record 5900);
    BEGIN
      WITH ServHeader DO BEGIN
        FILTERGROUP(2);
        CASE DocFilter OF
          DocFilter::Order:
            SETRANGE("Document Type","Document Type"::Order);
          DocFilter::Quote:
            SETRANGE("Document Type","Document Type"::Quote);
          DocFilter::All:
            SETRANGE("Document Type");
        END;
        FILTERGROUP(0);
      END;
    END;

    PROCEDURE SetServOrderFilter@7();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Document No.",ServOrderFilter);
      ServOrderFilter := GETFILTER("Document No.");
      FILTERGROUP(0);
    END;

    PROCEDURE SetResourceFilter@1();
    BEGIN
      FILTERGROUP(2);
      IF ResourceFilter <> '' THEN BEGIN
        SETFILTER("No. of Active/Finished Allocs",'>0');
        SETFILTER("Resource Filter",ResourceFilter);
        ResourceFilter := GETFILTER("Resource Filter");
      END ELSE BEGIN
        IF ResourceGroupFilter = '' THEN
          SETRANGE("No. of Active/Finished Allocs");
        SETRANGE("Resource Filter");
      END;
      FILTERGROUP(0);
    END;

    PROCEDURE SetResourceGroupFilter@9();
    BEGIN
      FILTERGROUP(2);
      IF ResourceGroupFilter <> '' THEN BEGIN
        SETFILTER("No. of Active/Finished Allocs",'>0');
        SETFILTER("Resource Group Filter",ResourceGroupFilter);
        ResourceGroupFilter := GETFILTER("Resource Group Filter");
      END ELSE BEGIN
        IF ResourceFilter = '' THEN
          SETRANGE("No. of Active/Finished Allocs");
        SETRANGE("Resource Group Filter");
      END;
      FILTERGROUP(0);
    END;

    PROCEDURE SetAllocationFilter@3();
    BEGIN
      FILTERGROUP(2);
      CASE AllocationStatus OF
        AllocationStatus::" ":
          BEGIN
            SETRANGE("Allocation Status Filter");
            SETRANGE("No. of Allocations");
          END;
        AllocationStatus::Nonactive:
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Nonactive);
            SETFILTER("No. of Allocations",'>0');
          END;
        AllocationStatus::Active:
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Active);
            SETFILTER("No. of Allocations",'>0');
          END;
        AllocationStatus::Finished:
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Finished);
            SETFILTER("No. of Allocations",'>0');
          END;
        AllocationStatus::Canceled:
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Canceled);
            SETFILTER("No. of Allocations",'>0');
          END;
        AllocationStatus::"Reallocation Needed":
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::"Reallocation Needed");
            SETFILTER("No. of Allocations",'>0');
          END;
      END;
      FILTERGROUP(0);
    END;

    LOCAL PROCEDURE TestFilter@10() : Boolean;
    BEGIN
      IF ServOrderFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        IF GETRANGEMIN("Document No.") = GETRANGEMAX("Document No.") THEN
          IF ISEMPTY THEN BEGIN
            FILTERGROUP(0);
            EXIT(FALSE);
          END;
        FILTERGROUP(0);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RepairStatusFilterOnAfterValid@19075265();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ResourceFilterOnAfterValidate@19005532();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE AllocationStatusOnAfterValidat@19046183();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE DocFilterOnAfterValidate@19004301();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ServOrderFilterOnAfterValidate@19063213();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE RespDateFilterOnAfterValidate@19063229();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ResourceGroupFilterOnAfterVali@19056724();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    BEGIN
    END.
  }
}

