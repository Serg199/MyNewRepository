OBJECT Table 1237 Transformation Rule
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    CaptionML=[ENU=Transformation Rule;
               RUS=Правило преобразования];
    LookupPageID=Page1237;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              RUS=Код];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 3   ;   ;Transformation Type ;Option        ;OnValidate=BEGIN
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::Replace,
                                                                                                  "Transformation Type"::"Regular Expression - Replace",
                                                                                                  "Transformation Type"::"Regular Expression - Match"])
                                                                THEN BEGIN
                                                                  "Find Value" := '';
                                                                  "Replace Value" := '';
                                                                END;
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::Substring]) THEN BEGIN
                                                                  "Start Position" := 0;
                                                                  Length := 0;
                                                                  "Ending Text" := '';
                                                                  "Starting Text" := '';
                                                                END;
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::"Date and Time Formatting","Transformation Type"::"Decimal Formatting"]) THEN BEGIN
                                                                  "Data Format" := '';
                                                                  "Data Formatting Culture" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transformation Type;
                                                              RUS=Тип преобразования];
                                                   OptionCaptionML=[ENU=Uppercase,Lowercase,Title Case,Trim,Substring,Replace,Regular Expression - Replace,Remove Non-Alphanumeric Characters,Date and Time Formatting,Decimal Formatting,Regular Expression - Match,Custom;
                                                                    RUS=Верхний регистр,Нижний регистр,Заглавные буквы,Усечь,Подстрока,Замена,Регулярное выражение - Замена,Удалить не буквенно-цифровые символы,Форматирование даты и времени,Десятичное форматирование,Регулярное выражение - Совпадение,Пользовательский];
                                                   OptionString=Uppercase,Lowercase,Title Case,Trim,Substring,Replace,Regular Expression - Replace,Remove Non-Alphanumeric Characters,Date and Time Formatting,Decimal Formatting,Regular Expression - Match,Custom }
    { 10  ;   ;Find Value          ;Text250       ;OnValidate=BEGIN
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::Replace,
                                                                                                  "Transformation Type"::"Regular Expression - Replace",
                                                                                                  "Transformation Type"::"Regular Expression - Match"])
                                                                THEN
                                                                  TESTFIELD("Find Value",'');
                                                              END;

                                                   CaptionML=[ENU=Find Value;
                                                              RUS=Найти значение] }
    { 11  ;   ;Replace Value       ;Text250       ;OnValidate=BEGIN
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::Replace,"Transformation Type"::"Regular Expression - Replace"]) THEN
                                                                  TESTFIELD("Replace Value",'');
                                                              END;

                                                   CaptionML=[ENU=Replace Value;
                                                              RUS=Заменить значение] }
    { 12  ;   ;Starting Text       ;Text250       ;OnValidate=BEGIN
                                                                IF "Starting Text" <> '' THEN BEGIN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);
                                                                  VALIDATE("Start Position",0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Text;
                                                              RUS=Начальный текст] }
    { 13  ;   ;Ending Text         ;Text250       ;OnValidate=BEGIN
                                                                IF "Ending Text" <> '' THEN BEGIN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);
                                                                  VALIDATE(Length,0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ending Text;
                                                              RUS=Заключительный текст] }
    { 15  ;   ;Start Position      ;Integer       ;OnValidate=BEGIN
                                                                IF "Transformation Type" = "Transformation Type"::Substring THEN
                                                                  IF "Start Position" < 0 THEN
                                                                    ERROR(MustBeGreaterThanZeroErr);

                                                                IF "Start Position" <> 0 THEN BEGIN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);
                                                                  VALIDATE("Starting Text",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Start Position;
                                                              RUS=Начальная позиция];
                                                   BlankZero=Yes }
    { 16  ;   ;Length              ;Integer       ;OnValidate=BEGIN
                                                                IF "Transformation Type" = "Transformation Type"::Substring THEN
                                                                  IF Length < 0 THEN
                                                                    ERROR(MustBeGreaterThanZeroErr);

                                                                IF Length <> 0 THEN BEGIN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);
                                                                  VALIDATE("Ending Text",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Length;
                                                              RUS=Длина];
                                                   BlankZero=Yes }
    { 18  ;   ;Data Format         ;Text100       ;OnValidate=BEGIN
                                                                IF "Data Format" <> '' THEN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::"Date and Time Formatting");
                                                              END;

                                                   CaptionML=[ENU=Data Format;
                                                              RUS=Формат данных] }
    { 20  ;   ;Data Formatting Culture;Text10     ;OnValidate=BEGIN
                                                                IF "Data Format" <> '' THEN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::"Date and Time Formatting");
                                                              END;

                                                   CaptionML=[ENU=Data Formatting Culture;
                                                              RUS=Языковой стандарт форматирования данных] }
    { 30  ;   ;Next Transformation Rule;Code20    ;TableRelation="Transformation Rule".Code;
                                                   CaptionML=[ENU=Next Transformation Rule;
                                                              RUS=Следующее правило преобразования] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MustBeGreaterThanZeroErr@1000 : TextConst 'ENU=The Value entered must be greater than zero.;RUS=Введенное значение должно быть больше нуля.';
      UPPERCASETxt@1001 : TextConst '@@@=Assigned to Transformation.Code field for Upper case;ENU=UPPERCASE;RUS=ВЕРХНИЙ_РЕГИСТР';
      UpperCaseDescTxt@1007 : TextConst 'ENU=Upper Case Text;RUS=Текст в верхнем регистре';
      LOWERCASETxt@1002 : TextConst '@@@=Assigned to Transformation.Code field for Lower case;ENU=LOWERCASE;RUS=НИЖНИЙ_РЕГИСТР';
      LowerCaseDescTxt@1008 : TextConst 'ENU=Lower Case Text;RUS=Текст в нижнем регистре';
      TITLECASETxt@1003 : TextConst '@@@=Assigned to Transformation.Code field for Title case;ENU=TITLECASE;RUS=ЗАГЛАВНЫЕ_БУКВЫ';
      TitleCaseDescTxt@1009 : TextConst 'ENU=Title Case Text;RUS=Текст с первыми заглавными буквами';
      TRIMTxt@1004 : TextConst '@@@=Assigned to Transformation.Code field for Trim;ENU=TRIM;RUS=УСЕЧЕНИЕ';
      TrimDescTxt@1010 : TextConst 'ENU=Trim Text;RUS=Усечение текста';
      FOURTH_TO_SIXTH_CHARTxt@1005 : TextConst '@@@=Assigned to Transformation.Code field for getting the 4th to 6th characters in a string;ENU=FOURTH_TO_SIXTH_CHAR;RUS=ЧЕТВЕРТЫЙ_ПО_ШЕСТОЙ';
      FourthToSixthCharactersDescTxt@1011 : TextConst 'ENU=Fourth to Sixth Characters Text;RUS=Текст символов с четвертого по шестой';
      YYYYMMDDDateTxt@1014 : TextConst '@@@=Assigned to Transformation.Code field for converting dates from yyyyMMdd format;ENU=YYYYMMDD_DATE;RUS=ДАТА_ДДММГГГГ';
      YYYYMMDDDateDescTxt@1013 : TextConst 'ENU=yyyyMMdd Date Text;RUS=Текст даты ДДММГГГГ';
      ALPHANUMERIC_ONLYTxt@1006 : TextConst '@@@=Assigned to Transformation.Code field for getting only the Alphanumeric characters in a string;ENU=ALPHANUMERIC_ONLY;RUS=ТОЛЬКО_БУКВ_ЦИФРОВОЙ';
      AlphaNumericDescTxt@1012 : TextConst 'ENU=Alphanumeric Text Only;RUS=Только буквенно-цифровой текст';
      DKNUMBERFORMATTxt@1015 : TextConst '@@@=Assigned to Transformation.Code field for getting decimal formatting rule for Danish numbers;ENU=DK_DECIMAL_FORMAT;RUS=ДАТСКИЙ_ДЕСЯТИЧНЫЙ';
      DKNUMBERFORMATDescTxt@1016 : TextConst 'ENU=Danish Decimal Format;RUS=Датский десятичный формат';
      USDATEFORMATTxt@1017 : TextConst '@@@=Assigned to Transformation.Code field for getting date formatting rule from U.S. dates;ENU=US_DATE_FORMAT;RUS=ФОРМАТ_ДАТЫ_США';
      USDATEFORMATDescTxt@1018 : TextConst 'ENU=U.S. Date Format;RUS=Формат даты в США';
      DeleteNOTPROVIDEDTxt@1019 : TextConst '@@@=NOTPROVIDED should stay in english because it is a constant value. DELETE should be translated.;ENU=DELETE_NOTPROVIDED;RUS=УДАЛИТЬ_NOTPROVIDED';
      DeleteNOTPROVIDEDDescriptionTxt@1020 : TextConst '@@@=NOTPROVIDED should stay in english because it is a constant value. ''Delete'' and ''value'' should be translated.;ENU=Delete NOTPROVIDED value;RUS=Удалить значение NOTPROVIDED';

    PROCEDURE CreateDefaultTransformations@3();
    BEGIN
      InsertRec(UPPERCASETxt,UpperCaseDescTxt,"Transformation Type"::Uppercase,0,0,'','');
      InsertRec(LOWERCASETxt,LowerCaseDescTxt,"Transformation Type"::Lowercase,0,0,'','');
      InsertRec(TITLECASETxt,TitleCaseDescTxt,"Transformation Type"::"Title Case",0,0,'','');
      InsertRec(TRIMTxt,TrimDescTxt,"Transformation Type"::Trim,0,0,'','');
      InsertRec(FOURTH_TO_SIXTH_CHARTxt,FourthToSixthCharactersDescTxt,"Transformation Type"::Substring,4,3,'','');
      InsertRec(YYYYMMDDDateTxt,YYYYMMDDDateDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'yyyyMMdd','');
      InsertRec(ALPHANUMERIC_ONLYTxt,AlphaNumericDescTxt,"Transformation Type"::"Remove Non-Alphanumeric Characters",0,0,'','');
      InsertRec(DKNUMBERFORMATTxt,DKNUMBERFORMATDescTxt,"Transformation Type"::"Decimal Formatting",0,0,'','da-DK');
      InsertRec(USDATEFORMATTxt,USDATEFORMATDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'','en-US');
      OnCreateTransformationRules;
      InsertFindAndReplaceRule(
        DeleteNOTPROVIDEDTxt,DeleteNOTPROVIDEDDescriptionTxt,"Transformation Type"::"Regular Expression - Replace",'NOTPROVIDED','');
    END;

    PROCEDURE InsertRec@8(NewCode@1000 : Code[20];NewDescription@1001 : Text[100];NewTransformationType@1002 : Option;NewStartPosition@1003 : Integer;NewLength@1004 : Integer;NewDataFormat@1006 : Text[100];NewDataFormattingCulture@1007 : Text[10]);
    VAR
      TransformationRule@1005 : Record 1237;
    BEGIN
      WITH TransformationRule DO BEGIN
        INIT;
        VALIDATE(Code,NewCode);
        VALIDATE(Description,NewDescription);
        VALIDATE("Transformation Type",NewTransformationType);
        VALIDATE("Start Position",NewStartPosition);
        VALIDATE(Length,NewLength);
        VALIDATE("Data Format",NewDataFormat);
        VALIDATE("Data Formatting Culture",NewDataFormattingCulture);
        IF INSERT(TRUE) THEN;
      END;
    END;

    LOCAL PROCEDURE InsertFindAndReplaceRule@27(NewCode@1000 : Code[20];NewDescription@1001 : Text[100];NewTransformationType@1002 : Option;NewFindValue@1003 : Text[250];NewReplaceValue@1004 : Text[250]);
    VAR
      TransformationRule@1005 : Record 1237;
    BEGIN
      WITH TransformationRule DO BEGIN
        INIT;
        VALIDATE(Code,NewCode);
        VALIDATE(Description,NewDescription);
        VALIDATE("Transformation Type",NewTransformationType);
        VALIDATE("Find Value",NewFindValue);
        VALIDATE("Replace Value",NewReplaceValue);
        IF INSERT(TRUE) THEN;
      END;
    END;

    PROCEDURE TransformText@5(OldValue@1001 : Text) : Text;
    VAR
      TransformationRule@1000 : Record 1237;
      NewValue@1002 : Text;
    BEGIN
      NewValue := OldValue;

      CASE "Transformation Type" OF
        "Transformation Type"::Uppercase:
          NewValue := UPPERCASE(OldValue);
        "Transformation Type"::Lowercase:
          NewValue := LOWERCASE(OldValue);
        "Transformation Type"::"Title Case":
          NewValue := TextToTitleCase(OldValue);
        "Transformation Type"::Trim:
          NewValue := DELCHR(OldValue,'<>');
        "Transformation Type"::Substring:
          NewValue := Substring(OldValue);
        "Transformation Type"::Replace:
          NewValue := StringReplace(OldValue,"Find Value","Replace Value");
        "Transformation Type"::"Regular Expression - Replace":
          NewValue := RegularExpressionReplace(OldValue,"Find Value","Replace Value");
        "Transformation Type"::"Regular Expression - Match":
          NewValue := RegularExpressionMatch(OldValue,"Find Value");
        "Transformation Type"::"Remove Non-Alphanumeric Characters":
          NewValue := RemoveNonAplhaNumericCharacters(OldValue);
        "Transformation Type"::"Date and Time Formatting":
          NewValue := DateTimeFormatting(OldValue);
        "Transformation Type"::"Decimal Formatting":
          NewValue := DecimalFormatting(OldValue);
        "Transformation Type"::Custom:
          OnTransformation(Code,OldValue,NewValue);
      END;

      IF "Next Transformation Rule" <> '' THEN
        IF TransformationRule.GET("Next Transformation Rule") THEN
          EXIT(TransformationRule.TransformText(NewValue));

      EXIT(NewValue);
    END;

    LOCAL PROCEDURE TextToTitleCase@17(OldValue@1001 : Text) : Text;
    VAR
      CultureInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo("Data Formatting Culture");
      EXIT(CultureInfo.TextInfo.ToTitleCase(OldValue));
    END;

    LOCAL PROCEDURE StringReplace@4(StringToReplace@1000 : Text;OldValue@1001 : Text;NewValue@1002 : Text) : Text;
    VAR
      DotNetString@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      NewString@1004 : Text;
    BEGIN
      DotNetString := StringToReplace;
      NewString := DotNetString.Replace(OldValue,NewValue);
      EXIT(NewString);
    END;

    LOCAL PROCEDURE RegularExpressionReplace@2(StringToReplace@1000 : Text;Pattern@1001 : Text;NewValue@1002 : Text) : Text;
    VAR
      Regex@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegexOptions@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.RegexOptions";
      NewString@1004 : Text;
    BEGIN
      Regex := Regex.Regex(Pattern,RegexOptions.IgnoreCase);
      NewString := Regex.Replace(StringToReplace,NewValue);
      EXIT(NewString);
    END;

    LOCAL PROCEDURE RegularExpressionMatch@21(StringToMatch@1000 : Text;Pattern@1001 : Text) : Text;
    VAR
      Regex@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegexOptions@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.RegexOptions";
      MatchCollection@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      Match@1007 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      Group@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Group";
      Capture@1011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Capture";
      NewString@1004 : Text;
      WholeExpressionGroup@1009 : Boolean;
    BEGIN
      NewString := '';

      Regex := Regex.Regex(Pattern,RegexOptions.IgnoreCase);
      MatchCollection := Regex.Matches(StringToMatch);
      IF ISNULL(MatchCollection) THEN
        EXIT(NewString);

      IF MatchCollection.Count = 0 THEN
        EXIT(NewString);

      WholeExpressionGroup := TRUE;
      FOREACH Match IN MatchCollection DO
        FOREACH Group IN Match.Groups DO BEGIN
          IF WholeExpressionGroup THEN
            WholeExpressionGroup := FALSE
          ELSE
            FOREACH Capture IN Group.Captures DO
              NewString += Capture.Value;
        END;

      EXIT(NewString);
    END;

    LOCAL PROCEDURE RemoveNonAplhaNumericCharacters@19(OldValue@1003 : Text) : Text;
    VAR
      DotNetChar@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
      NewValue@1001 : Text;
      I@1000 : Integer;
    BEGIN
      NewValue := '';
      FOR I := 1 TO STRLEN(OldValue) DO BEGIN
        IF DotNetChar.IsLetterOrDigit(OldValue[I]) THEN
          NewValue += FORMAT(OldValue[I]);
      END;

      EXIT(NewValue);
    END;

    LOCAL PROCEDURE DateTimeFormatting@20(OldValue@1001 : Text) : Text;
    VAR
      DotNetDateTime@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      CultureInfo@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDateTimeStyles@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeStyles";
      NewValue@1003 : Text;
    BEGIN
      NewValue := OldValue;

      DotNetDateTime := DotNetDateTime.DateTime(1);
      IF "Data Formatting Culture" = '' THEN BEGIN
        CultureInfo := CultureInfo.InvariantCulture;
        IF NOT DotNetDateTime.TryParseExact(
             OldValue,
             "Data Format",
             CultureInfo,
             DotNetDateTimeStyles.None,
             DotNetDateTime)
        THEN
          EXIT(NewValue);
      END ELSE BEGIN
        CultureInfo := CultureInfo.GetCultureInfo("Data Formatting Culture");
        IF NOT DotNetDateTime.TryParse(
             OldValue,
             CultureInfo,
             DotNetDateTimeStyles.None,
             DotNetDateTime)
        THEN
          EXIT(NewValue);
      END;

      NewValue := DotNetDateTime.ToString('yyyy-MM-dd',CultureInfo);
      EXIT(NewValue);
    END;

    LOCAL PROCEDURE DecimalFormatting@14(OldValue@1001 : Text) : Text;
    VAR
      TypeHelper@1006 : Codeunit 10;
      NewDecimalVariant@1000 : Variant;
      NewValue@1003 : Text;
      DummyDecimal@1007 : Decimal;
    BEGIN
      NewValue := OldValue;
      NewDecimalVariant := DummyDecimal;
      TypeHelper.Evaluate(NewDecimalVariant,OldValue,'',"Data Formatting Culture");

      NewValue := FORMAT(NewDecimalVariant,0,9);
      EXIT(NewValue);
    END;

    LOCAL PROCEDURE Substring@7(OldValue@1000 : Text) : Text;
    VAR
      StartPosition@1002 : Integer;
      NewLength@1003 : Integer;
    BEGIN
      StartPosition := SubstringGetStartPosition(OldValue);
      IF StartPosition <= 0 THEN
        EXIT('');

      NewLength := SubstringGetLength(OldValue,StartPosition);

      IF NewLength <= 0 THEN
        EXIT('');

      EXIT(COPYSTR(OldValue,StartPosition,NewLength));
    END;

    PROCEDURE GetFourthToSixthSubstringCode@6() : Code[20];
    BEGIN
      EXIT(FOURTH_TO_SIXTH_CHARTxt);
    END;

    PROCEDURE GetUSDateFormatCode@1() : Code[20];
    BEGIN
      EXIT(USDATEFORMATTxt);
    END;

    PROCEDURE GetUppercaseCode@10() : Code[20];
    BEGIN
      EXIT(UPPERCASETxt);
    END;

    PROCEDURE GetLowercaseCode@9() : Code[20];
    BEGIN
      EXIT(LOWERCASETxt);
    END;

    PROCEDURE GetTitlecaseCode@12() : Code[20];
    BEGIN
      EXIT(TITLECASETxt);
    END;

    PROCEDURE GetTrimCode@11() : Code[20];
    BEGIN
      EXIT(TRIMTxt);
    END;

    PROCEDURE GetAlphanumericCode@13() : Code[20];
    BEGIN
      EXIT(ALPHANUMERIC_ONLYTxt);
    END;

    PROCEDURE GetDanishDecimalFormatCode@15() : Code[20];
    BEGIN
      EXIT(DKNUMBERFORMATTxt);
    END;

    PROCEDURE GetYYYYMMDDCode@16() : Code[20];
    BEGIN
      EXIT(YYYYMMDDDateTxt);
    END;

    PROCEDURE GetDeleteNOTPROVIDEDCode@23() : Code[20];
    BEGIN
      EXIT(DeleteNOTPROVIDEDTxt);
    END;

    LOCAL PROCEDURE RemoveLeadingAndEndingQuotes@18(InputText@1000 : Text) : Text;
    VAR
      QuotedText@1002 : Boolean;
      InputTextLength@1001 : Integer;
    BEGIN
      InputTextLength := STRLEN(InputText);
      IF InputTextLength < 2 THEN
        EXIT(InputText);

      QuotedText := (InputText[1] = '''') AND (InputText[InputTextLength] = '''');
      IF NOT QuotedText THEN
        QuotedText := (InputText[1] = '"') AND (InputText[InputTextLength] = '"');

      IF QuotedText THEN
        EXIT(COPYSTR(InputText,2,InputTextLength - 2));

      EXIT(InputText);
    END;

    LOCAL PROCEDURE SubstringGetLength@25(OldValue@1000 : Text;StartPosition@1001 : Integer) : Integer;
    VAR
      SearchableText@1002 : Text;
    BEGIN
      IF (Length <= 0) AND ("Ending Text" = '') THEN
        EXIT(STRLEN(OldValue) - StartPosition + 1);

      IF Length > 0 THEN
        EXIT(Length);

      IF "Ending Text" <> '' THEN BEGIN
        SearchableText := COPYSTR(OldValue,StartPosition,STRLEN(OldValue) - StartPosition + 1);
        EXIT(STRPOS(SearchableText,RemoveLeadingAndEndingQuotes("Ending Text")) - 1);
      END;

      EXIT(-1);
    END;

    LOCAL PROCEDURE SubstringGetStartPosition@30(OldValue@1000 : Text) : Integer;
    VAR
      StartingText@1001 : Text;
      StartIndex@1002 : Integer;
    BEGIN
      IF ("Start Position" <= 0) AND ("Starting Text" = '') THEN
        EXIT(1);

      IF "Start Position" > 0 THEN
        EXIT("Start Position");

      StartingText := RemoveLeadingAndEndingQuotes("Starting Text");
      IF StartingText <> '' THEN BEGIN
        StartIndex := STRPOS(OldValue,StartingText);
        IF StartIndex > 0 THEN
          EXIT(StartIndex + STRLEN(StartingText));
      END;

      EXIT(-1);
    END;

    PROCEDURE EditNextTransformationRule@22();
    VAR
      TransformationRule@1000 : Record 1237;
    BEGIN
      IF "Next Transformation Rule" = '' THEN
        EXIT;

      TransformationRule.GET("Next Transformation Rule");
      PAGE.RUN(PAGE::"Transformation Rule Card",TransformationRule);
    END;

    [Integration]
    PROCEDURE OnTransformation@26(TransformationCode@1000 : Code[20];InputText@1001 : Text;VAR OutputText@1002 : Text);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCreateTransformationRules@24();
    BEGIN
    END;

    BEGIN
    END.
  }
}

