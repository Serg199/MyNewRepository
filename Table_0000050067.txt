OBJECT Table 50067 NAS Service Status
{
  OBJECT-PROPERTIES
  {
    Date=23.05.17;
    Time=18:33:12;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnDelete=BEGIN
               JobProcStatus.RESET;
               JobProcStatus.SETRANGE("Company No.","Company No.");
               JobProcStatus.SETRANGE("Name Service NAS","Name Service NAS");
               JobProcStatus.SETFILTER(Status,'%1|%2',JobProcStatus.Status::Scheduled,
                                                      JobProcStatus.Status::Working);
               //NC S1197,MIO55 > PCH
               JobProcStatus.MODIFYALL("Time Status",CURRENTDATETIME);
               //NC S1197,MIO55 < PCH
               JobProcStatus.MODIFYALL(Status,JobProcStatus.Status::Canceled);
             END;

    CaptionML=[ENU=NAS Service Status;
               RUS=NAS Статус];
    LookupPageID=Page50138;
    DrillDownPageID=Page50138;
  }
  FIELDS
  {
    { 1   ;   ;Company No.         ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company No.;
                                                              RUS=Фирма Но.] }
    { 5   ;   ;Name Service NAS    ;Code30        ;CaptionML=[ENU=Name Service NAS;
                                                              RUS=Название Сервиса NAS] }
    { 6   ;   ;Name Server NAS     ;Code30        ;CaptionML=[ENU=Name Server NAS;
                                                              RUS=Название Сервера NAS];
                                                   Description=NC MDM01 PCH }
    { 10  ;   ;NAS Mode            ;Option        ;CaptionML=[ENU=NAS Mode;
                                                              RUS=Режим NAS];
                                                   OptionCaptionML=[ENU=Flexible,Fixed;
                                                                    RUS=Гибкий,Фиксированный];
                                                   OptionString=Flexible,Fixed }
    { 15  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Planed,Scheduled,Working,Competed Successfully,Error Reported,Canceled;
                                                                    RUS=План,Запуск,Работает,Завершен Успешно,Ошибка Выполнения,Отменен];
                                                   OptionString=Planed,Scheduled,Working,Competed Successfully,Error Reported,Canceled }
    { 16  ;   ;Time Status         ;DateTime      ;CaptionML=[ENU=Time Status;
                                                              RUS=Время Статуса] }
    { 20  ;   ;Status NAS          ;Option        ;CaptionML=[ENU=Status NAS;
                                                              RUS=Статус NAS];
                                                   OptionCaptionML=[ENU=" ,Stopped,Start Pending,Stop Pending,Running,Continue Pending,Pause Pending,Paused";
                                                                    RUS=" ,Остановлена,Запускается,Останавливается,Запущена,Выход из Паузы,Переход в Паузу,Пауза"];
                                                   OptionString=[ ,Stopped,Start Pending,Stop Pending,Running,Continue Pending,Pause Pending,Paused] }
    { 21  ;   ;Async               ;Boolean       ;CaptionML=[ENU=Asynchronously;
                                                              RUS=Асинхронно] }
    { 25  ;   ;Status Monitor      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Job Processes Status"."Status Monitor" WHERE (Company No.=FIELD(Company No.),
                                                                                                                     Name Service NAS=FIELD(Name Service NAS),
                                                                                                                     Status=FILTER(Working)));
                                                   CaptionML=[ENU=Status Monitor;
                                                              RUS=Статус Монитора];
                                                   OptionCaptionML=[ENU=" ,Reference,Loading Buffer,Transformation,Posting Gen. Journal,Consolidation,Packet Task";
                                                                    RUS=" ,Справочник,Загрузка Буфера,Трансформация,Учет. Фин. Журнала,Консолидация,Пер.Задание"];
                                                   OptionString=[ ,Reference,Loading Buffer,Transformation,Posting Gen. Journal,Consolidation,Packet Task] }
  }
  KEYS
  {
    {    ;Company No.,Name Service NAS            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      JobProcStatus@1000000001 : Record 50063;
      MovingDataSetup@1000000002 : Record 50064;
      Text001@1000000003 : TextConst 'RUS=TASKKILL.EXE /s %1 /fi "Services eq %2" /f /t';

    PROCEDURE GetStatus@1000000000();
    BEGIN
      // IF ISCLEAR(ServicesController) THEN
      //  CREATE(ServicesController);
      // "Status NAS" := ServicesController.GetState("Name Service NAS","Name Server NAS");
      // CLEAR(ServicesController);
    END;

    PROCEDURE StartService@1000000001();
    BEGIN
      // IF ISCLEAR(ServicesController) THEN
      //  CREATE(ServicesController);
      // ServicesController.StartService("Name Service NAS","Name Server NAS");
      // CLEAR(ServicesController);
    END;

    PROCEDURE StopService@1000000002();
    BEGIN
      // IF ISCLEAR(ServicesController) THEN
      //  CREATE(ServicesController);
      // ServicesController.StopService("Name Service NAS","Name Server NAS");
      // CLEAR(ServicesController);
    END;

    PROCEDURE StartServiceAsync@1000000004();
    BEGIN
      // IF ISCLEAR(ServicesController) THEN
      //  CREATE(ServicesController);
      // ServicesController.StartServiceAsync("Name Service NAS","Name Server NAS");
      // CLEAR(ServicesController);
    END;

    PROCEDURE StopServiceAsync@1000000003();
    BEGIN
      // IF ISCLEAR(ServicesController) THEN
      //  CREATE(ServicesController);
      // ServicesController.StopServiceAsync("Name Service NAS","Name Server NAS");
      // CLEAR(ServicesController);
    END;

    PROCEDURE KillService@1000000005();
    BEGIN
      // IF ISCLEAR(ServicesController) THEN
      //  CREATE(ServicesController);
      // ServicesController.KillService("Name Service NAS","Name Server NAS");
      // CLEAR(ServicesController);
    END;

    PROCEDURE KillForcedService@1000000006();
    VAR
      WshShell@1000000000 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      VarVariant@1000000001 : Variant;
    BEGIN
      // IF ISCLEAR(WshShell) THEN
      //  CREATE(WshShell);
      // VarVariant := 0;
      // WshShell.Run(STRSUBSTNO(Text001,"Name Server NAS","Name Service NAS"),VarVariant,VarVariant);
    END;

    BEGIN
    {
      NC MDM01 PCH Создана таблица
      NC S1197 PCH
      NC MIO55 PCH объединино с доработкой S1197
    }
    END.
  }
}

