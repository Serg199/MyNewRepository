OBJECT Page 6702 Booking Sync. Setup
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rimd;
    CaptionML=[ENU=Booking Sync. Setup;
               RUS=Настройка синхронизации резервирования];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table6702;
    DataCaptionExpr="Booking Mailbox Name";
    PageType=Card;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Navigate,Filter;
                                RUS=Создать,Обработать,Отчет,Перейти,Фильтр];
    OnOpenPage=BEGIN
                 CheckExistingSetup;
                 GetExchangeAccount;
                 IsSyncUser := "User ID" = USERID;
               END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 18      ;1   ;ActionGroup;
                      CaptionML=[ENU=Process;
                                 RUS=Обработать];
                      Image=Action }
      { 22      ;2   ;Action    ;
                      Name=Validate Exchange Connection;
                      CaptionML=[ENU=Validate Exchange Connection;
                                 RUS=Проверить подключение к Exchange];
                      ToolTipML=[ENU=Test that the provided exchange server connection works.;
                                 RUS=Проверка работоспособности подключения к указанному серверу Exchange Server.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ValidateEmailLoggingSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF O365SyncManagement.IsO365Setup(FALSE) THEN
                                   O365SyncManagement.ValidateExchangeConnection(ExchangeAccountUserName,ExchangeSync);
                               END;
                                }
      { 28      ;2   ;Action    ;
                      Name=SyncWithBookings;
                      CaptionML=[ENU=Sync with Bookings;
                                 RUS=Синхронизация с резервированиями];
                      ToolTipML=[ENU=Synchronize changes made in Bookings since the last sync date and last modified date.;
                                 RUS=Синхронизация изменений, внесенных в Bookings с даты последней синхронизации и даты последнего изменения.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Refresh;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 O365SyncManagement@1002 : Codeunit 6700;
                               BEGIN
                                 CLEAR(O365SyncManagement);
                                 IF O365SyncManagement.IsO365Setup(FALSE) THEN BEGIN
                                   IF "Sync Customers" THEN
                                     O365SyncManagement.SyncBookingCustomers(Rec);
                                   IF "Sync Services" THEN
                                     O365SyncManagement.SyncBookingServices(Rec);
                                 END;
                               END;
                                }
      { 23      ;2   ;Action    ;
                      Name=SetSyncUser;
                      CaptionML=[ENU=Set Sync. User;
                                 RUS=Установить пользователя синхронизации];
                      ToolTipML=[ENU=Set the synchronization user to be you.;
                                 RUS=Установка вас в качестве пользователя синхронизации.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=NOT IsSyncUser;
                      Image=User;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF CONFIRM(SetSyncUserQst) THEN BEGIN
                                   VALIDATE("User ID",USERID);
                                   GetExchangeAccount;
                                 END;
                               END;
                                }
      { 16      ;1   ;ActionGroup;
                      CaptionML=[ENU=Filter;
                                 RUS=Фильтр] }
      { 17      ;2   ;Action    ;
                      Name=SetCustomerSyncFilter;
                      CaptionML=[ENU=Set Customer Sync Filter;
                                 RUS=Установить фильтр синхронизации клиентов];
                      ToolTipML=[ENU=Set a filter to use when syncing customers.;
                                 RUS=Установка фильтра для использования при синхронизации клиентов.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ContactFilter;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BookingCustomerSync@1000 : Codeunit 6704;
                               BEGIN
                                 CALCFIELDS("Customer Filter");
                                 BookingCustomerSync.GetRequestParameters(Rec);
                               END;
                                }
      { 20      ;2   ;Action    ;
                      Name=SetServiceSyncFilter;
                      CaptionML=[ENU=Set Service Sync Filter;
                                 RUS=Установить фильтр синхронизации услуг];
                      ToolTipML=[ENU=Set a filter to use when syncing service items.;
                                 RUS=Установка фильтра для использования при синхронизации сервисных товаров.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Filter;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BookingServiceSync@1004 : Codeunit 6705;
                               BEGIN
                                 CALCFIELDS("Item Filter");
                                 BookingServiceSync.GetRequestParameters(Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=[ENU=General;
                           RUS=Общее];
                GroupType=Group }

    { 3   ;2   ;Field     ;
                Name=Bookings Company;
                CaptionML=[ENU=Bookings Company;
                           RUS=Организация резервирования];
                ToolTipML=[ENU=Specifies the Bookings company with which to synchronize customers and services.;
                           RUS=Определяет организацию Bookings, с которой должны синхронизироваться клиенты и услуги.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Booking Mailbox Name";
                OnValidate=VAR
                             BookingMailbox@1001 : Record 6704;
                             BookingMailboxList@1000 : Page 6704;
                           BEGIN
                             IF FORMAT("Last Customer Sync") + FORMAT("Last Service Sync") <> '' THEN
                               IF NOT CONFIRM(ChangeCompanyQst) THEN BEGIN
                                 "Booking Mailbox Name" := xRec."Booking Mailbox Name";
                                 EXIT;
                               END;

                             O365SyncManagement.GetBookingMailboxes(Rec,TempBookingMailbox,"Booking Mailbox Name");

                             IF TempBookingMailbox.COUNT = 0 THEN
                               ERROR(NoMailboxErr);

                             IF TempBookingMailbox.COUNT = 1 THEN BEGIN
                               "Booking Mailbox Address" := TempBookingMailbox.SmtpAddress;
                               "Booking Mailbox Name" := TempBookingMailbox."Display Name";
                             END ELSE BEGIN
                               BookingMailboxList.SetMailboxes(TempBookingMailbox);
                               BookingMailboxList.LOOKUPMODE(TRUE);
                               IF BookingMailboxList.RUNMODAL IN [ACTION::LookupOK,ACTION::OK] THEN BEGIN
                                 BookingMailboxList.GETRECORD(BookingMailbox);
                                 "Booking Mailbox Address" := BookingMailbox.SmtpAddress;
                                 "Booking Mailbox Name" := BookingMailbox."Display Name";
                               END ELSE
                                 "Booking Mailbox Name" := xRec."Booking Mailbox Name";
                             END;

                             IF "Booking Mailbox Name" <> xRec."Booking Mailbox Name" THEN BEGIN
                               CLEAR("Last Customer Sync");
                               CLEAR("Last Service Sync");
                               MODIFY;
                               CurrPage.UPDATE;
                             END;
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=SyncUser;
                CaptionML=[ENU=Synchronization User;
                           RUS=Пользователь синхронизации];
                ToolTipML=[ENU=Specifies the user on behalf of which to run the synchronize operation.;
                           RUS=Определяет пользователя, от имени которого должна выполняться операция синхронизации.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User ID";
                Enabled=false;
                Editable=false }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Enable Background Synchronization;
                           RUS=Включить фоновую синхронизацию];
                ToolTipML=[ENU=Specifies whether to allow synchronization to occur periodically in the background.;
                           RUS=Указывает, должна ли быть разрешена периодическая синхронизация в фоновом режиме.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Enabled }

    { 19  ;1   ;Group     ;
                Name=Synchronize;
                CaptionML=[ENU=Synchronize;
                           RUS=Синхронизировать];
                GroupType=Group }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether to synchronize Bookings customers.;
                           RUS=Указывает, должны ли синхронизироваться клиенты Bookings.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sync Customers" }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Default Customer Template;
                           RUS=Шаблон клиента по умолчанию];
                ToolTipML=[ENU=Specifies the customer template to use when creating new Customers from the Bookings company.;
                           RUS=Определяет шаблон клиента для использования при создании клиентов из организации Bookings.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Template Code" }

    { 9   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether to synchronize services.;
                           RUS=Указывает, нужно ли синхронизировать услуги.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sync Services" }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Default Item Template;
                           RUS=Шаблон товара по умолчанию];
                ToolTipML=[ENU=Specifies the template to use when creating new service items from the Bookings company.;
                           RUS=Определяет шаблон для использования при создании сервисных товаров из организации Bookings.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Item Template Code" }

  }
  CODE
  {
    VAR
      ExchangeSync@1000 : Record 6700;
      TempBookingMailbox@1002 : TEMPORARY Record 6704;
      O365SyncManagement@1004 : Codeunit 6700;
      ExchangeAccountUserName@1001 : Text[250];
      ChangeCompanyQst@1003 : TextConst 'ENU=The synchronization has been run against the current company. The process will no longer synchronize customer and service records with the current company, and synchronize against the new selected company. Do you want to continue?;RUS="Была выполнена синхронизация для текущей организации. Процесс больше не будет синхронизировать записи клиентов и услуг с текущей организацией; синхронизация будет выполняться для новой выбранной организации. Продолжить?"';
      SetSyncUserQst@1008 : TextConst 'ENU=Setting the synchronization user will assign your Exchange email and password as the credentials that are used to synchronize customers and service items to Bookings for this company. Any user already assigned as the synchronization user will be replaced with your User ID. Do you want to continue?;RUS=При установке пользователя синхронизации ваши адрес эл. почты и пароль Exchange будут назначены в качестве учетных данных для синхронизации клиентов и сервисных товаров с резервированиями для этой организации. Если пользователь синхронизации уже был назначен, он будет заменен вашим ИД пользователя. Продолжить?';
      ExchangeSyncErr@1007 : TextConst 'ENU=Exchange sync. must be setup before using Bookings Sync.;RUS=Перед использованием синхронизации резервирований необходимо настроить синхронизацию Exchange.';
      NoMailboxErr@1010 : TextConst 'ENU=No matching mailboxes found.;RUS=Не найдены подходящие почтовые ящики.';
      IsSyncUser@1005 : Boolean;

    LOCAL PROCEDURE CheckExistingSetup@6();
    BEGIN
      IF NOT ExchangeSync.GET(USERID) OR NOT O365SyncManagement.IsO365Setup(FALSE) THEN
        ERROR(ExchangeSyncErr);

      IF NOT GET THEN BEGIN
        INIT;
        "User ID" := USERID;
        O365SyncManagement.GetBookingMailboxes(Rec,TempBookingMailbox,'');
        IF TempBookingMailbox.COUNT = 1 THEN BEGIN
          "Booking Mailbox Address" := TempBookingMailbox.SmtpAddress;
          "Booking Mailbox Name" := TempBookingMailbox."Display Name";
        END;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetExchangeAccount@1();
    VAR
      User@1000 : Record 2000000120;
    BEGIN
      User.SETRANGE("User Name",USERID);
      IF User.FINDFIRST THEN
        ExchangeAccountUserName := User."Authentication Email";
    END;

    BEGIN
    END.
  }
}

