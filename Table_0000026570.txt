OBJECT Table 26570 XML Element Line
{
  OBJECT-PROPERTIES
  {
    Date=24.11.16;
    Time=12:00:00;
    Version List=NAVRU10.00.00.14199;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Element Name");
               CheckReportDataExistence(Text002);
             END;

    OnModify=BEGIN
               CheckReportDataExistence(Text005);
             END;

    OnDelete=VAR
               XMLElementExpressionLine@1210000 : Record 26572;
             BEGIN
               CheckReportDataExistence(Text001);

               XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
               XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
               IF NOT XMLElementExpressionLine.ISEMPTY THEN
                 XMLElementExpressionLine.DELETEALL;
             END;

    CaptionML=[ENU=XML Element Line;
               RUS=Строка XML элемента];
    LookupPageID=Page26588;
  }
  FIELDS
  {
    { 1   ;   ;Report Code         ;Code20        ;TableRelation="Statutory Report".Code;
                                                   CaptionML=[ENU=Report Code;
                                                              RUS=Код отчета] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 3   ;   ;Element Name        ;Text150       ;CaptionML=[ENU=Element Name;
                                                              RUS=Имя элемента];
                                                   NotBlank=Yes }
    { 4   ;   ;Parent Line No.     ;Integer       ;CaptionML=[ENU=Parent Line No.;
                                                              RUS=Номер родительской строки] }
    { 5   ;   ;Parent Element Name ;Text150       ;CaptionML=[ENU=Parent Element Name;
                                                              RUS=Имя родительского элемента] }
    { 6   ;   ;Element Type        ;Option        ;OnValidate=BEGIN
                                                                IF "Element Type" <> xRec."Element Type" THEN
                                                                  IF "Element Type" = "Element Type"::Complex THEN BEGIN
                                                                    TESTFIELD("Data Type","Data Type"::" ");
                                                                    TESTFIELD("Source Type","Source Type"::" ");
                                                                    IF "Link Type" = "Link Type"::Value THEN
                                                                      FIELDERROR("Link Type");
                                                                  END ELSE BEGIN
                                                                    IF "Link Type" IN ["Link Type"::Table,"Link Type"::Grouping] THEN
                                                                      FIELDERROR("Link Type");
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Element Type;
                                                              RUS=Тип элемента];
                                                   OptionCaptionML=[ENU=Complex,Simple,Attribute;
                                                                    RUS=Сложный,Простой,Атрибут];
                                                   OptionString=Complex,Simple,Attribute }
    { 7   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 8   ;   ;Sequence No.        ;Integer       ;CaptionML=[ENU=Sequence No.;
                                                              RUS=Порядковый номер] }
    { 9   ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              RUS=Отступ] }
    { 10  ;   ;Data Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Data Type" <> xRec."Data Type" THEN BEGIN
                                                                  IF "Data Type" <> "Data Type"::" " THEN
                                                                    IF "Element Type" = "Element Type"::Complex THEN
                                                                      FIELDERROR("Element Type");
                                                                  "XML Export Date Format" := "XML Export Date Format"::" ";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Data Type;
                                                              RUS=Тип данных];
                                                   OptionCaptionML=[ENU=" ,Text,Integer,Decimal,Date";
                                                                    RUS=" ,Текст,Целое,Десятичное,Дата"];
                                                   OptionString=[ ,Text,Integer,Decimal,Date] }
    { 12  ;   ;Link Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Link Type" <> xRec."Link Type" THEN
                                                                  TESTFIELD("Source Type","Source Type"::" ");

                                                                CASE "Link Type" OF
                                                                  "Link Type"::" ":
                                                                    "Table Code" := '';
                                                                  "Link Type"::Value:
                                                                    BEGIN
                                                                      IF "Element Type" = "Element Type"::Complex THEN
                                                                        FIELDERROR("Element Type");

                                                                      IF "Source Type" = "Source Type"::" " THEN
                                                                        "Source Type" := "Source Type"::"Table Data";
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Link Type;
                                                              RUS=Тип связи];
                                                   OptionCaptionML=[ENU=" ,Value,Table,Grouping";
                                                                    RUS=" ,Значение,Таблица,Секция"];
                                                   OptionString=[ ,Value,Table,Grouping] }
    { 13  ;   ;Service Element     ;Boolean       ;CaptionML=[ENU=Service Element;
                                                              RUS=Служебный элемент] }
    { 15  ;   ;Table Code          ;Code20        ;TableRelation="Statutory Report Table".Code WHERE (Report Code=FIELD(Report Code));
                                                   OnValidate=VAR
                                                                StatReportTableColumn@1210000 : Record 26554;
                                                              BEGIN
                                                                IF "Table Code" <> xRec."Table Code" THEN BEGIN
                                                                  "Row Link No." := 0;
                                                                  "Column Link No." := 0;
                                                                END;

                                                                IF ("Table Code" <> '') AND
                                                                   ("Link Type" = "Link Type"::Value) AND
                                                                   ("Source Type" = "Source Type"::"Table Data")
                                                                THEN BEGIN
                                                                  StatReportTableColumn.SETRANGE("Report Code","Report Code");
                                                                  StatReportTableColumn.SETRANGE("Table Code","Table Code");
                                                                  IF StatReportTableColumn.COUNT = 1 THEN BEGIN
                                                                    StatReportTableColumn.FINDFIRST;
                                                                    "Column Link No." := StatReportTableColumn."Line No.";
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Table Code;
                                                              RUS=Код таблицы] }
    { 18  ;   ;Export Type         ;Option        ;CaptionML=[ENU=Export Type;
                                                              RUS=Тип экспорта];
                                                   OptionCaptionML=[ENU=Required,Optional;
                                                                    RUS=Обязательно,По выбору];
                                                   OptionString=Required,Optional }
    { 22  ;   ;Choice              ;Boolean       ;OnValidate=BEGIN
                                                                IF Choice THEN
                                                                  TESTFIELD("Element Type","Element Type"::Complex);
                                                              END;

                                                   CaptionML=[ENU=Choice;
                                                              RUS=Выбор] }
    { 30  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              RUS=Тип источника];
                                                   OptionCaptionML=[ENU=" ,Expression,Constant,Table Data,Individual Element,Inserted Element,Compound Element";
                                                                    RUS=" ,Выражение,Константа,Табличные данные,Индивидуальный показатель,Вписываемый показатель,Составной показатель"];
                                                   OptionString=[ ,Expression,Constant,Table Data,Individual Element,Inserted Element,Compound Element] }
    { 31  ;   ;Value               ;Text250       ;OnValidate=BEGIN
                                                                IF Value <> '' THEN
                                                                  TESTFIELD("Source Type","Source Type"::Constant);
                                                              END;

                                                   CaptionML=[ENU=Value;
                                                              RUS=Значение] }
    { 32  ;   ;Row Link No.        ;Integer       ;OnValidate=BEGIN
                                                                IF "Row Link No." <> 0 THEN BEGIN
                                                                  IF NOT ("Source Type" IN
                                                                          ["Source Type"::"Table Data","Source Type"::"Individual Element","Source Type"::"Inserted Element"])
                                                                  THEN
                                                                    FIELDERROR("Source Type");

                                                                  IF "Source Type" IN ["Source Type"::"Table Data","Source Type"::"Inserted Element"] THEN
                                                                    StatReportTableRow.GET("Report Code","Table Code","Row Link No.");

                                                                  IF "Source Type" = "Source Type"::"Individual Element" THEN
                                                                    TableIndividualRequisite.GET("Report Code","Table Code","Row Link No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Row Link No.;
                                                              RUS=Номер связанной строки] }
    { 33  ;   ;Column Link No.     ;Integer       ;OnValidate=BEGIN
                                                                IF "Column Link No." <> 0 THEN BEGIN
                                                                  TESTFIELD("Table Code");
                                                                  TESTFIELD("Source Type","Source Type"::"Table Data");

                                                                  IF "Column Link No." > 0 THEN
                                                                    StatReportTableColumn.GET("Report Code","Table Code","Column Link No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Column Link No.;
                                                              RUS=Номер связанного столбца] }
    { 34  ;   ;Excel Mapping Type  ;Option        ;OnValidate=BEGIN
                                                                IF "Excel Mapping Type" <> xRec."Excel Mapping Type" THEN BEGIN
                                                                  "Horizontal Cells Quantity" := 1;
                                                                  "Vertical Cells Quantity" := 1;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excel Mapping Type;
                                                              RUS=Тип соответствия Excel];
                                                   OptionCaptionML=[ENU=Single-cell,Multi-cell;
                                                                    RUS=Одна ячейка,Несколько ячеек];
                                                   OptionString=Single-cell,Multi-cell }
    { 35  ;   ;Excel Cell Name     ;Code10        ;CaptionML=[ENU=Excel Cell Name;
                                                              RUS=Имя ячейки Excel] }
    { 36  ;   ;Horizontal Cells Quantity;Integer  ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Excel Mapping Type","Excel Mapping Type"::"Multi-cell");
                                                              END;

                                                   CaptionML=[ENU=Horizontal Cells Quantity;
                                                              RUS=Количество ячеек по горизонтали];
                                                   MinValue=1 }
    { 37  ;   ;Vertical Cells Quantity;Integer    ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Excel Mapping Type","Excel Mapping Type"::"Multi-cell");
                                                              END;

                                                   CaptionML=[ENU=Vertical Cells Quantity;
                                                              RUS=Количество ячеек по вертикали];
                                                   MinValue=1 }
    { 38  ;   ;Excel Sheet Name    ;Text30        ;TableRelation="Stat. Report Excel Sheet"."Sheet Name" WHERE (Report Code=FIELD(Report Code),
                                                                                                                Report Data No.=CONST());
                                                   CaptionML=[ENU=Excel Sheet Name;
                                                              RUS=Имя листа Excel] }
    { 40  ;   ;Fraction Digits     ;Integer       ;CaptionML=[ENU=Fraction Digits;
                                                              RUS=Цифр после запятой] }
    { 41  ;   ;OKEI Scaling        ;Boolean       ;CaptionML=[ENU=OKEI Scaling;
                                                              RUS=Масштабирование ОКЕИ] }
    { 42  ;   ;XML Export Date Format;Option      ;OnValidate=BEGIN
                                                                IF "XML Export Date Format" <> "XML Export Date Format"::" " THEN
                                                                  TESTFIELD("Data Type","Data Type"::Date);
                                                              END;

                                                   CaptionML=[ENU=XML Export Date Format;
                                                              RUS=Формат даты экспорта XML];
                                                   OptionCaptionML=[ENU=" ,YYYY-MM-DD";
                                                                    RUS=" ,ГГГГ-ММ-ДД"];
                                                   OptionString=[ ,YYYY-MM-DD] }
    { 43  ;   ;Alignment           ;Option        ;CaptionML=[ENU=Alignment;
                                                              RUS=Выравнивание];
                                                   OptionCaptionML=[ENU=Left,Right;
                                                                    RUS=По левому краю,По правому краю];
                                                   OptionString=Left,Right }
    { 44  ;   ;Pad Character       ;Text1         ;CaptionML=[ENU=Pad Character;
                                                              RUS=Заполнитель] }
    { 45  ;   ;Template Data       ;Boolean       ;CaptionML=[ENU=Template Data;
                                                              RUS=Шаблон данных] }
  }
  KEYS
  {
    {    ;Report Code,Line No.                    ;Clustered=Yes }
    {    ;Report Code,Parent Line No.,Sequence No. }
    {    ;Report Code,Sequence No.                 }
    {    ;Report Code,Table Code,Row Link No.,Column Link No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      StatutoryReport@1210001 : Record 26550;
      StatReportTableRow@1210007 : Record 26553;
      TableIndividualRequisite@1210009 : Record 26556;
      StatReportTableColumn@1210008 : Record 26554;
      StatutoryReportSetup@1210014 : Record 26569;
      FormatVersion@1210010 : Record 26573;
      ExcelMgt@1210002 : Codeunit 12416;
      Text001@1210000 : TextConst 'ENU=%1 cannot be deleted because %2 %3 contains report data.;RUS=Нельзя удалить %1, поскольку в %2 %3 содержатся данные отчета.';
      Text002@1210011 : TextConst 'ENU=%1 cannot be inserted because %2 %3 contains report data.;RUS=Нельзя вставить %1, поскольку в %2 %3 содержатся данные отчета.';
      Text003@1210003 : TextConst 'ENU=''%1'' can not be formated to %2 for %3.;RUS=''%1'' нельзя отформатировать как %2 для %3.';
      EntryNo@1210006 : Integer;
      Text004@1210004 : TextConst 'ENU=You must specify %1 in %2.;RUS=Необходимо указать %1 в %2.';
      Text005@1210012 : TextConst 'ENU=%1 cannot be modified because %2 %3 contains report data.;RUS=Изменение %1 невозможно, так как %2 %3 содержит данные отчета.';
      Text006@1210013 : TextConst 'ENU=%1 is not defined in %2.;RUS=%1 не определено в %2.';

    PROCEDURE ExportValue@1210000(VAR XMLNode@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";StatRepBuffer@1210007 : Record 26568;VAR ElementValueBuffer@1210006 : Record 26568);
    VAR
      CreatedXMLNode@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      CASE "Element Type" OF
        "Element Type"::Complex:
          CASE "Link Type" OF
            "Link Type"::Grouping:
              ProcessGrouping(XMLNode,StatRepBuffer,ElementValueBuffer);
            "Link Type"::Table:
              ProcessTable(XMLNode,StatRepBuffer,ElementValueBuffer);
            ELSE BEGIN
              AddElement(XMLNode,"Element Name",'','',CreatedXMLNode);
              IF "Element Name" = 'Файл' THEN BEGIN
                StatutoryReport.GET("Report Code");
                FormatVersion.GET(StatutoryReport."Format Version Code");
                FormatVersion.TESTFIELD("Version No.");
                IF FormatVersion."Version No."[1] = '4' THEN BEGIN
                  AddAttribute(
                    CreatedXMLNode,
                    'xmlns:xsi',
                    'http://www.w3.org/2001/XMLSchema-instance');

                  AddAttribute(
                    CreatedXMLNode,
                    'xsi:noNamespaceSchemaLocation',
                    FormatVersion."XML Schema File Name");
                END;
              END;

              ProcessChildren(CreatedXMLNode,StatRepBuffer,ElementValueBuffer);
              CheckEmptyNode(XMLNode,CreatedXMLNode);
            END;
          END;
        "Element Type"::Attribute:
          AddAttribute(XMLNode,"Element Name",GetElementFormattedValue(StatRepBuffer,ElementValueBuffer));
        "Element Type"::Simple:
          AddElement(XMLNode,"Element Name",GetElementFormattedValue(StatRepBuffer,ElementValueBuffer),'',CreatedXMLNode);
      END;
    END;

    PROCEDURE ProcessGrouping@1210003(VAR XMLNode@1210008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";StatRepBuffer@1210001 : Record 26568;VAR ElementValueBuffer@1210003 : Record 26568);
    VAR
      StatutoryReportTable@1210009 : Record 26552;
      ScalableTableRow@1210010 : Record 26555;
      StatReportExcelSheet@1210004 : Record 26562;
      PageIndicBuffer@1210005 : TEMPORARY Record 26568;
      XMLElementLine@1210013 : Record 26570;
      PageIndicationXMLElement@1210002 : Record 26571;
      CreatedXMLNode@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      EntryNo@1210006 : Integer;
      IndicElementValue@1210011 : Text[250];
    BEGIN
      TESTFIELD("Table Code");

      StatutoryReportTable.GET("Report Code","Table Code");

      IF StatutoryReportTable."Vertical Table" THEN BEGIN
        StatReportExcelSheet.SETCURRENTKEY("Report Code","Report Data No.","Sequence No.");
        StatReportExcelSheet.SETRANGE("Report Code","Report Code");
        StatReportExcelSheet.SETRANGE("Report Data No.",StatRepBuffer."Report Data No.");
        StatReportExcelSheet.SETRANGE("Table Code","Table Code");
        IF StatReportExcelSheet.FINDSET THEN
          REPEAT
            // collect indication values from scalable table rows
            ScalableTableRow.SETRANGE("Report Code","Report Code");
            ScalableTableRow.SETRANGE("Report Data No.",StatRepBuffer."Report Data No.");
            ScalableTableRow.SETRANGE("Table Code",StatutoryReportTable.Code);
            IF ScalableTableRow.FINDSET THEN
              REPEAT
                StatRepBuffer."Scalable Table Row No." := ScalableTableRow."Line No.";
                StatRepBuffer."Excel Sheet Name" := StatReportExcelSheet."Sheet Name";

                IndicElementValue := '';
                PageIndicationXMLElement.SETRANGE("Report Code","Report Code");
                PageIndicationXMLElement.SETRANGE("Table Code","Table Code");
                IF PageIndicationXMLElement.FINDSET THEN
                  REPEAT
                    XMLElementLine.GET("Report Code",PageIndicationXMLElement."XML Element Line No.");
                    IndicElementValue := IndicElementValue + XMLElementLine.GetElementValue(StatRepBuffer);
                  UNTIL PageIndicationXMLElement.NEXT = 0;

                IF IndicElementValue <> '' THEN BEGIN
                  PageIndicBuffer.SETRANGE("Page Indic. Requisite Value",IndicElementValue);
                  IF PageIndicBuffer.ISEMPTY THEN BEGIN
                    EntryNo := EntryNo + 1;
                    PageIndicBuffer."Entry No." := EntryNo;
                    PageIndicBuffer."Page Indic. Requisite Value" := IndicElementValue;
                    PageIndicBuffer."Excel Sheet Name" := StatReportExcelSheet."Sheet Name";
                    PageIndicBuffer.INSERT;
                  END;
                END;
              UNTIL ScalableTableRow.NEXT = 0;
          UNTIL StatReportExcelSheet.NEXT = 0;

        PageIndicBuffer.RESET;
        IF PageIndicBuffer.FINDSET THEN BEGIN
          AddElement(XMLNode,"Element Name",'','',CreatedXMLNode);

          REPEAT
            StatRepBuffer."Excel Sheet Name" := PageIndicBuffer."Excel Sheet Name";
            StatRepBuffer."Page Indic. Requisite Value" := PageIndicBuffer."Page Indic. Requisite Value";
            StatRepBuffer."Scalable Table Row No." := 0;

            ProcessChildren(CreatedXMLNode,StatRepBuffer,ElementValueBuffer);
          UNTIL PageIndicBuffer.NEXT = 0;

          CheckEmptyNode(XMLNode,CreatedXMLNode);
        END;
      END ELSE BEGIN
        // collect indication values from Excel sheets
        StatReportExcelSheet.SETCURRENTKEY("Report Code","Report Data No.","Sequence No.");
        StatReportExcelSheet.SETRANGE("Report Code","Report Code");
        StatReportExcelSheet.SETRANGE("Report Data No.",StatRepBuffer."Report Data No.");
        StatReportExcelSheet.SETRANGE("Table Code","Table Code");
        IF StatReportExcelSheet.FINDSET THEN
          REPEAT
            IF StatutoryReportTable."Multipage Table" AND (NOT StatutoryReportTable."Scalable Table") AND
               (StatReportExcelSheet."Page Indic. Requisite Value" = '')
            THEN BEGIN
              // для реализации стр. 16 лист 03 продолжение
              EntryNo := EntryNo + 1;
              PageIndicBuffer."Entry No." := EntryNo;
              PageIndicBuffer."Excel Sheet Name" := StatReportExcelSheet."Sheet Name";
              PageIndicBuffer."Page Indic. Requisite Value" := StatReportExcelSheet."Page Indic. Requisite Value";
              PageIndicBuffer.INSERT;
            END ELSE BEGIN
              PageIndicBuffer.SETRANGE("Page Indic. Requisite Value",StatReportExcelSheet."Page Indic. Requisite Value");
              IF PageIndicBuffer.ISEMPTY THEN BEGIN
                EntryNo := EntryNo + 1;
                PageIndicBuffer."Entry No." := EntryNo;
                PageIndicBuffer."Excel Sheet Name" := StatReportExcelSheet."Sheet Name";
                PageIndicBuffer."Page Indic. Requisite Value" := StatReportExcelSheet."Page Indic. Requisite Value";
                PageIndicBuffer.INSERT;
              END;
            END;
          UNTIL StatReportExcelSheet.NEXT = 0;

        PageIndicBuffer.RESET;
        IF PageIndicBuffer.FINDSET THEN
          REPEAT
            AddElement(XMLNode,"Element Name",'','',CreatedXMLNode);

            StatRepBuffer."Excel Sheet Name" := PageIndicBuffer."Excel Sheet Name";
            StatRepBuffer."Page Indic. Requisite Value" := PageIndicBuffer."Page Indic. Requisite Value";
            StatRepBuffer."Scalable Table Row No." := 0;

            ProcessChildren(CreatedXMLNode,StatRepBuffer,ElementValueBuffer);
            CheckEmptyNode(XMLNode,CreatedXMLNode);
          UNTIL PageIndicBuffer.NEXT = 0;
      END;
    END;

    PROCEDURE ProcessTable@1210004(VAR XMLNode@1210004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";StatRepBuffer@1210009 : Record 26568;VAR ElementValueBuffer@1210010 : Record 26568);
    VAR
      ScalableTableRow@1210005 : Record 26555;
      StatutoryReportTable@1210006 : Record 26552;
      StatReportExcelSheet@1210008 : Record 26562;
      XMLElementLine@1210002 : Record 26570;
      PageIndicationXMLElement@1210007 : Record 26571;
      CreatedXMLNode@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      IndicElementValue@1210001 : Text[250];
    BEGIN
      TESTFIELD("Table Code");
      StatutoryReportTable.GET("Report Code","Table Code");

      IF StatutoryReportTable."Vertical Table" THEN BEGIN
        ScalableTableRow.SETRANGE("Report Code","Report Code");
        ScalableTableRow.SETRANGE("Report Data No.",StatRepBuffer."Report Data No.");
        ScalableTableRow.SETRANGE("Table Code","Table Code");
        ScalableTableRow.SETRANGE("Excel Sheet Name",StatRepBuffer."Excel Sheet Name");
        IF ScalableTableRow.FINDSET THEN
          REPEAT
            StatRepBuffer."Scalable Table Row No." := ScalableTableRow."Line No.";

            IndicElementValue := '';
            PageIndicationXMLElement.SETRANGE("Report Code","Report Code");
            PageIndicationXMLElement.SETRANGE("Table Code","Table Code");
            IF PageIndicationXMLElement.FINDSET THEN
              REPEAT
                XMLElementLine.GET("Report Code",PageIndicationXMLElement."XML Element Line No.");
                IndicElementValue := IndicElementValue + XMLElementLine.GetElementValue(StatRepBuffer);
              UNTIL PageIndicationXMLElement.NEXT = 0;

            IF IndicElementValue = StatRepBuffer."Page Indic. Requisite Value" THEN BEGIN
              AddElement(XMLNode,"Element Name",'','',CreatedXMLNode);

              StatRepBuffer."Scalable Table Row No." := ScalableTableRow."Line No.";

              ProcessChildren(CreatedXMLNode,StatRepBuffer,ElementValueBuffer);
              CheckEmptyNode(XMLNode,CreatedXMLNode);
            END;
          UNTIL ScalableTableRow.NEXT = 0;
      END ELSE BEGIN
        StatReportExcelSheet.SETRANGE("Report Code","Report Code");
        StatReportExcelSheet.SETRANGE("Report Data No.",StatRepBuffer."Report Data No.");
        StatReportExcelSheet.SETRANGE("Table Code","Table Code");
        IF StatRepBuffer."Page Indic. Requisite Value" <> '' THEN
          StatReportExcelSheet.SETRANGE("Page Indic. Requisite Value",StatRepBuffer."Page Indic. Requisite Value");
        IF StatReportExcelSheet.FINDSET THEN
          REPEAT
            IF StatutoryReportTable."Scalable Table" THEN BEGIN
              ScalableTableRow.SETRANGE("Report Code","Report Code");
              ScalableTableRow.SETRANGE("Report Data No.",StatRepBuffer."Report Data No.");
              ScalableTableRow.SETRANGE("Table Code","Table Code");
              ScalableTableRow.SETRANGE("Excel Sheet Name",StatReportExcelSheet."Sheet Name");
              IF ScalableTableRow.FINDSET THEN
                REPEAT
                  StatRepBuffer."Scalable Table Row No." := ScalableTableRow."Line No.";
                  StatRepBuffer."Excel Sheet Name" := StatReportExcelSheet."Sheet Name";
                  IF NOT ((NOT StatRepBuffer."Calculation Values Mode") AND
                          ElementIsEmpty(StatRepBuffer))
                  THEN BEGIN
                    AddElement(XMLNode,"Element Name",'','',CreatedXMLNode);

                    ProcessChildren(CreatedXMLNode,StatRepBuffer,ElementValueBuffer);
                    CheckEmptyNode(XMLNode,CreatedXMLNode);
                  END;
                UNTIL ScalableTableRow.NEXT = 0;
            END ELSE BEGIN
              AddElement(XMLNode,"Element Name",'','',CreatedXMLNode);

              StatRepBuffer."Excel Sheet Name" := StatReportExcelSheet."Sheet Name";
              StatRepBuffer."Scalable Table Row No." := 0;

              ProcessChildren(CreatedXMLNode,StatRepBuffer,ElementValueBuffer);
              CheckEmptyNode(XMLNode,CreatedXMLNode);
            END;
          UNTIL StatReportExcelSheet.NEXT = 0;
      END;
    END;

    PROCEDURE GetElementValue@1210009(StatRepBuffer@1210000 : Record 26568) ElementValue : Text[250];
    VAR
      StatutoryReportTable@1210001 : Record 26552;
      StatutoryReportDataValue@1210005 : Record 26564;
      XMLElementLine@1210007 : Record 26570;
      XMLElementExpressionLine@1210002 : Record 26572;
      RowNo@1210004 : Integer;
    BEGIN
      IF StatRepBuffer."Excel Sheet Name" = '' THEN BEGIN
        IF "Table Code" <> '' THEN
          IF StatutoryReportTable.GET("Report Code","Table Code") THEN
            StatRepBuffer."Excel Sheet Name" := StatutoryReportTable."Excel Sheet Name";
      END;

      IF (StatRepBuffer."Scalable Table Row No." = 0) OR ("Source Type" = "Source Type"::"Individual Element") THEN
        RowNo := "Row Link No."
      ELSE
        RowNo := StatRepBuffer."Scalable Table Row No.";

      ElementValue := '';

      CASE "Source Type" OF
        "Source Type"::Constant:
          ElementValue := Value;
        "Source Type"::Expression:
          BEGIN
            XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
            XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
            IF XMLElementExpressionLine.FINDSET THEN
              REPEAT
                ElementValue :=
                  ElementValue +
                  XMLElementExpressionLine."String Before" +
                  XMLElementExpressionLine.GetReferenceValue(StatRepBuffer."Report Data No.",'') +
                  XMLElementExpressionLine."String After";
              UNTIL XMLElementExpressionLine.NEXT = 0;
          END;
        "Source Type"::"Table Data",
        "Source Type"::"Individual Element",
        "Source Type"::"Inserted Element":
          IF StatutoryReportDataValue.GET(
               StatRepBuffer."Report Data No.",
               "Report Code",
               "Table Code",
               StatRepBuffer."Excel Sheet Name",
               RowNo,
               "Column Link No.")
          THEN
            ElementValue := StatutoryReportDataValue.Value;
        "Source Type"::"Compound Element":
          BEGIN
            XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
            XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
            IF XMLElementExpressionLine.FINDSET THEN
              REPEAT
                IF XMLElementLine.GET("Report Code",XMLElementExpressionLine."XML Element Line No.") THEN
                  ElementValue :=
                    ElementValue +
                    XMLElementExpressionLine."String Before" +
                    XMLElementLine.GetElementValue(StatRepBuffer) +
                    XMLElementExpressionLine."String After";
              UNTIL XMLElementExpressionLine.NEXT = 0;

            IF STRLEN(ElementValue) <> 0 THEN
              IF "Data Type" = "Data Type"::Integer THEN BEGIN
                IF STRPOS(ElementValue,'-') = STRLEN(ElementValue) THEN
                  ElementValue := COPYSTR(ElementValue,1,STRLEN(ElementValue) - 1);

                IF STRPOS(ElementValue,'-0') > 0 THEN
                  ElementValue := COPYSTR(ElementValue,1,STRLEN(ElementValue) - 2);

                IF STRPOS(ElementValue,'0-') > 0 THEN
                  ElementValue := COPYSTR(ElementValue,2,STRLEN(ElementValue) - 1);
              END;
          END;
      END;
    END;

    PROCEDURE GetTableCode@1210005() : Code[20];
    VAR
      ParentRequisiteLine@1210000 : Record 26570;
    BEGIN
      TESTFIELD("Parent Line No.");
      IF "Parent Line No." <> 0 THEN BEGIN
        ParentRequisiteLine.GET("Report Code","Parent Line No.");
        IF ParentRequisiteLine."Link Type" = ParentRequisiteLine."Link Type"::Table THEN BEGIN
          ParentRequisiteLine.TESTFIELD("Table Code");
          EXIT(ParentRequisiteLine."Table Code");
        END;

        EXIT(ParentRequisiteLine.GetTableCode);
      END;
    END;

    PROCEDURE AddElement@1(VAR XMLNode@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1002 : Text[250];NodeText@1003 : Text[250];NameSpace@1004 : Text[250];VAR CreatedXMLNode@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") ExitStatus@1000 : Integer;
    VAR
      NewChildNode@1210002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeType@1210003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeType";
    BEGIN
      IF "Service Element" THEN
        EXIT;

      NewChildNode := XMLNode.OwnerDocument.CreateNode(XmlNodeType.Element,NodeName,NameSpace);

      IF ISNULL(NewChildNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF NodeText <> '' THEN
        NewChildNode.InnerText := NodeText;

      IF XMLNode.NodeType.Equals(XmlNodeType.ProcessingInstruction) THEN
        CreatedXMLNode := XMLNode.OwnerDocument.AppendChild(NewChildNode)
      ELSE BEGIN
        XMLNode.AppendChild(NewChildNode);
        CreatedXMLNode := NewChildNode;
      END;

      ExitStatus := 0;
    END;

    PROCEDURE AddAttribute@2(VAR XMLNode@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text[260];NodeValue@1003 : Text[260]) ExitStatus@1000 : Integer;
    VAR
      XMLNewAttributeNode@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF "Service Element" THEN
        EXIT;

      IF IsValueEmpty(NodeValue) THEN
        IF "Export Type" = "Export Type"::Optional THEN
          EXIT;

      XMLNewAttributeNode := XMLNode.OwnerDocument.CreateAttribute(Name);

      IF ISNULL(XMLNewAttributeNode) THEN BEGIN
        ExitStatus := 60;
        EXIT(ExitStatus)
      END;

      IF NodeValue <> '' THEN
        XMLNewAttributeNode.Value := NodeValue;

      XMLNode.Attributes.SetNamedItem(XMLNewAttributeNode);
    END;

    PROCEDURE ElementIsEmpty@1470000(StatRepBuffer@1470001 : Record 26568) : Boolean;
    VAR
      ChildSchemaLine@1470000 : Record 26570;
    BEGIN
      CASE "Element Type" OF
        "Element Type"::Complex:
          BEGIN
            ChildSchemaLine.SETCURRENTKEY("Report Code","Sequence No.");
            ChildSchemaLine.SETRANGE("Report Code","Report Code");
            ChildSchemaLine.SETRANGE("Parent Line No.","Line No.");
            IF ChildSchemaLine.FINDSET THEN
              REPEAT
                IF NOT ChildSchemaLine.ElementIsEmpty(StatRepBuffer) THEN
                  EXIT(FALSE);
              UNTIL ChildSchemaLine.NEXT = 0;
          END;
        "Element Type"::Attribute,
        "Element Type"::Simple:
          BEGIN
            IF GetElementValue(StatRepBuffer) <> '' THEN
              EXIT(FALSE);
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE NodeIsEmpty@1210026(VAR XMLNode@1210007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NodeList@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      AttributeList@1210008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      ChildNode@1210009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1210001 : Integer;
      NodeValue@1210004 : Text[1024];
      AttrValue@1210006 : Text[1024];
    BEGIN
      IF NOT XMLNode.HasChildNodes THEN BEGIN
        NodeValue := COPYSTR(XMLNode.InnerText,1,MAXSTRLEN(NodeValue));
        IF NodeValue <> '' THEN
          EXIT(FALSE);
      END;

      AttributeList := XMLNode.Attributes;
      FOR i := 0 TO AttributeList.Count - 1 DO BEGIN
        ChildNode := AttributeList.Item(i);
        AttrValue := COPYSTR(ChildNode.InnerText,1,MAXSTRLEN(AttrValue));
        IF AttrValue <> '' THEN
          EXIT(FALSE);
      END;

      NodeList := XMLNode.ChildNodes;
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        ChildNode := NodeList.Item(i);
        IF NOT NodeIsEmpty(ChildNode) THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckEmptyNode@1210023(VAR XMLNode@1210002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR CreatedXMLNode@1210003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      IF Choice OR ("Export Type" = "Export Type"::Optional) THEN
        IF NodeIsEmpty(CreatedXMLNode) THEN
          XMLNode.RemoveChild(CreatedXMLNode);
    END;

    PROCEDURE UpdateElementValue@1210001(ChangedRequisiteExpressionLine@1210001 : Record 26572;DeleteRecord@1210002 : Boolean);
    VAR
      XMLElementExpressionLine@1210000 : Record 26572;
    BEGIN
      TESTFIELD("Source Type","Source Type"::Expression);
      Value := '';
      XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
      XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
      IF XMLElementExpressionLine.FINDSET THEN
        REPEAT
          IF XMLElementExpressionLine."Line No." <> ChangedRequisiteExpressionLine."Line No." THEN
            Value := Value + XMLElementExpressionLine."String Before" +
              XMLElementExpressionLine.Value + XMLElementExpressionLine."String After"
          ELSE
            IF NOT DeleteRecord THEN
              Value := Value + ChangedRequisiteExpressionLine."String Before" +
                ChangedRequisiteExpressionLine.Value + ChangedRequisiteExpressionLine."String After";
        UNTIL XMLElementExpressionLine.NEXT = 0;
    END;

    PROCEDURE UpdateExpression@1210022();
    VAR
      XMLElementExpressionLine@1210000 : Record 26572;
    BEGIN
      TESTFIELD("Source Type","Source Type"::Expression);
      XMLElementExpressionLine.SETRANGE("Report Code","Report Code");
      XMLElementExpressionLine.SETRANGE("Base XML Element Line No.","Line No.");
      IF XMLElementExpressionLine.FINDSET THEN
        REPEAT
          XMLElementExpressionLine.Value := XMLElementExpressionLine.GetReferenceValue('','');
          XMLElementExpressionLine.MODIFY;
        UNTIL XMLElementExpressionLine.NEXT = 0;

      CLEAR(XMLElementExpressionLine);
      UpdateElementValue(XMLElementExpressionLine,FALSE);
    END;

    PROCEDURE LookupRow@1210007();
    VAR
      StatReportTableRow@1210000 : Record 26553;
      TableIndividualRequisite@1210001 : Record 26556;
      ReportTableRows@1210002 : Page 26553;
      TableIndividualRequisites@1210003 : Page 26555;
    BEGIN
      IF NOT ("Source Type" IN
              ["Source Type"::"Table Data","Source Type"::"Individual Element","Source Type"::"Inserted Element"])
      THEN
        FIELDERROR("Source Type");

      TESTFIELD("Table Code");

      CASE "Source Type" OF
        "Source Type"::"Table Data",
        "Source Type"::"Inserted Element":
          BEGIN
            ReportTableRows.EDITABLE := FALSE;
            ReportTableRows.LOOKUPMODE := TRUE;
            StatReportTableRow.SETRANGE("Report Code","Report Code");
            StatReportTableRow.SETRANGE("Table Code","Table Code");
            ReportTableRows.SETTABLEVIEW(StatReportTableRow);
            IF "Row Link No." <> 0 THEN BEGIN
              StatReportTableRow.GET("Report Code","Table Code","Row Link No.");
              ReportTableRows.SETRECORD(StatReportTableRow);
            END;
            IF ReportTableRows.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ReportTableRows.GETRECORD(StatReportTableRow);
              "Row Link No." := StatReportTableRow."Line No.";
            END;
          END;
        "Source Type"::"Individual Element":
          BEGIN
            TableIndividualRequisites.EDITABLE := FALSE;
            TableIndividualRequisites.LOOKUPMODE := TRUE;
            TableIndividualRequisite.SETRANGE("Report Code","Report Code");
            TableIndividualRequisite.SETRANGE("Table Code","Table Code");
            TableIndividualRequisites.SETTABLEVIEW(TableIndividualRequisite);
            IF "Row Link No." <> 0 THEN
              IF NOT TableIndividualRequisite.GET("Report Code","Table Code","Row Link No.") THEN BEGIN
                "Row Link No." := 0;
                MODIFY;
                COMMIT;
              END ELSE
                TableIndividualRequisites.SETRECORD(TableIndividualRequisite);
            IF TableIndividualRequisites.RUNMODAL = ACTION::LookupOK THEN BEGIN
              TableIndividualRequisites.GETRECORD(TableIndividualRequisite);
              "Row Link No." := TableIndividualRequisite."Line No.";
            END;
          END;
      END;
    END;

    PROCEDURE LookupColumn@1210013();
    VAR
      StatReportTableColumn@1210001 : Record 26554;
      ReportTableColumns@1210000 : Page 26554;
    BEGIN
      CASE "Source Type" OF
        "Source Type"::Expression,
        "Source Type"::Constant,
        "Source Type"::"Individual Element",
        "Source Type"::"Compound Element",
        "Source Type"::"Inserted Element":
          TESTFIELD("Source Type","Source Type"::"Table Data");
        "Source Type"::"Table Data":
          BEGIN
            TESTFIELD("Table Code");
            StatReportTableColumn.SETRANGE("Report Code","Report Code");
            StatReportTableColumn.SETRANGE("Table Code","Table Code");
            ReportTableColumns.SETTABLEVIEW(StatReportTableColumn);
            IF "Column Link No." <> 0 THEN BEGIN
              StatReportTableColumn.GET("Report Code","Table Code","Column Link No.");
              ReportTableColumns.SETRECORD(StatReportTableColumn);
            END;
            ReportTableColumns.EDITABLE := FALSE;
            ReportTableColumns.LOOKUPMODE := TRUE;
            IF ReportTableColumns.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ReportTableColumns.GETRECORD(StatReportTableColumn);
              "Column Link No." := StatReportTableColumn."Line No.";
            END;
          END;
      END;
    END;

    PROCEDURE FormatValue@1210008(FormatType@1210000 : 'File,Excel,Storage';ValueToFormat@1210005 : Text[250];VAR FormattedValue@1210003 : Text[250];VAR ErrorMessage@1210004 : Text[250]) : Boolean;
    VAR
      IntegerValue@1210007 : BigInteger;
      DecimalValue@1210001 : Decimal;
      FractionValue@1210008 : Decimal;
      DateValue@1210002 : Date;
    BEGIN
      IF FormatType = FormatType::Storage THEN BEGIN
        IF "Data Type" <> "Data Type"::Text THEN BEGIN
          IF "Excel Mapping Type" <> "Excel Mapping Type"::"Single-cell" THEN
            ValueToFormat := DELCHR(ValueToFormat,'=','-')
        END ELSE
          ValueToFormat := DELCHR(ValueToFormat,'>','-');
      END;

      CASE "Data Type" OF
        "Data Type"::" ":
          BEGIN
            ErrorMessage := STRSUBSTNO(Text006,FIELDCAPTION("Data Type"),GetRecordDescription);
            EXIT(FALSE);
          END;
        "Data Type"::Text:
          BEGIN
            StatutoryReport.GET("Report Code");
            IF (FormatType = FormatType::Excel) AND StatutoryReport."Uppercase Text Excel Format" THEN
              FormattedValue := AlignFormattedValue(UPPERCASE(ValueToFormat))
            ELSE
              IF (FormatType = FormatType::File) AND StatutoryReport."Uppercase Text XML Format" THEN
                FormattedValue := UPPERCASE(ValueToFormat)
              ELSE
                FormattedValue := ValueToFormat;
          END;
        "Data Type"::Integer:
          BEGIN
            ValueToFormat := DELCHR(ValueToFormat,'<>',' ');
            ValueToFormat := DELCHR(ValueToFormat,'>','-');
            IF ValueToFormat = '' THEN BEGIN
              FormattedValue := FormatEmptyValue;
              EXIT(TRUE);
            END;
            IF NOT EVALUATE(IntegerValue,ValueToFormat) THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text003,ValueToFormat,"Data Type",GetRecordDescription);
              EXIT(FALSE);
            END;

            IF FormatType = FormatType::Excel THEN
              FormattedValue := AlignFormattedValue(FORMAT(IntegerValue))
            ELSE
              FormattedValue := FORMAT(IntegerValue);
          END;
        "Data Type"::Decimal:
          BEGIN
            ValueToFormat := DELCHR(ValueToFormat,'<>',' ');
            IF ValueToFormat = '' THEN BEGIN
              FormattedValue := FormatEmptyValue;
              EXIT(TRUE);
            END;

            IF NOT EVALUATE(DecimalValue,ValueToFormat) THEN
              IF NOT EVALUATE(DecimalValue,ValueToFormat,9) THEN BEGIN
                ErrorMessage := STRSUBSTNO(Text003,ValueToFormat,"Data Type",GetRecordDescription);
                EXIT(FALSE);
              END;

            CASE FormatType OF
              FormatType::File:
                FormattedValue := FORMAT(DecimalValue,0,STRSUBSTNO('<Precision,%1:%1><Standard Format,9>',"Fraction Digits"));
              FormatType::Excel:
                BEGIN
                  IF "Excel Mapping Type" = "Excel Mapping Type"::"Multi-cell" THEN BEGIN
                    IntegerValue := ROUND(DecimalValue,1,'<');
                    FractionValue := DecimalValue - IntegerValue;

                    FormattedValue :=
                      AlignFormattedValue(FORMAT(IntegerValue) + '.' + COPYSTR(FORMAT(FractionValue),3));
                  END ELSE
                    FormattedValue := FORMAT(DecimalValue);
                END;
              FormatType::Storage:
                BEGIN
                  DecimalValue := ROUND(DecimalValue,POWER(10,-"Fraction Digits"));
                  FormattedValue := FORMAT(DecimalValue,0,1);
                END;
            END;
          END;
        "Data Type"::Date:
          BEGIN
            ValueToFormat := DELCHR(ValueToFormat,'<>',' ');
            IF NOT EVALUATE(DateValue,ValueToFormat) THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text003,ValueToFormat,"Data Type",GetRecordDescription);
              EXIT(FALSE);
            END;
            IF (DateValue = 0D) AND (FormatType = FormatType::Excel) THEN
              FormattedValue := '--.--.----'
            ELSE
              FormattedValue := FORMAT(DateValue,0,'<Day,2>.<Month,2>.<Year4>');
            IF FormatType = FormatType::File THEN
              CASE "XML Export Date Format" OF
                "XML Export Date Format"::"YYYY-MM-DD":
                  FormattedValue := FORMAT(DateValue,0,9);
              END;
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ExportToExcel@1210016(VAR XlWrkSht@1210001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;ElementValue@1210004 : Text[250];VAR ErrorMessage@1210009 : Text[250];ExcelCellName@1210000 : Code[10]) : Boolean;
    VAR
      StatutoryReportTable@1210021 : Record 26552;
      CurrCellName@1210007 : Code[10];
      NextRowFirstCellName@1210008 : Code[10];
      CellsQty@1210012 : Integer;
      i@1210003 : Integer;
      j@1210018 : Integer;
      index@1210022 : Integer;
      VerticalTable@1210020 : Boolean;
      MultiCellMappingType@1210006 : 'Row,Column,Area';
    BEGIN
      CASE "Excel Mapping Type" OF
        "Excel Mapping Type"::"Single-cell":
          BEGIN
            IF ExcelCellName = '' THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text004,FIELDCAPTION("Excel Cell Name"),GetRecordDescription);
              EXIT(FALSE);
            END;
            XlWrkSht.Range(ExcelCellName).Value := ElementValue;
          END;
        "Excel Mapping Type"::"Multi-cell":
          BEGIN
            IF "Horizontal Cells Quantity" = 0 THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text004,FIELDCAPTION("Horizontal Cells Quantity"),GetRecordDescription);
              EXIT(FALSE);
            END;

            IF "Table Code" <> '' THEN BEGIN
              StatutoryReportTable.GET("Report Code","Table Code");
              VerticalTable := StatutoryReportTable."Vertical Table";
            END;

            CellsQty := "Horizontal Cells Quantity" * "Vertical Cells Quantity";
            MultiCellMappingType := GetMultiCellMappingType;

            CASE MultiCellMappingType OF
              MultiCellMappingType::Row:
                BEGIN
                  IF VerticalTable OR StatutoryReportTable."Scalable Table" THEN
                    CurrCellName := ExcelCellName
                  ELSE
                    CurrCellName := "Excel Cell Name";

                  FOR i := 1 TO CellsQty DO BEGIN
                    IF NOT IsEmptySymbol(FORMAT(ElementValue[i])) THEN
                      XlWrkSht.Range(CurrCellName).Value := FORMAT(ElementValue[i]);
                    CurrCellName := ExcelMgt.GetNextCellHoriz(XlWrkSht,CurrCellName);
                  END;
                END;
              MultiCellMappingType::Column:
                BEGIN
                  CurrCellName := "Excel Cell Name";

                  FOR i := 1 TO CellsQty DO BEGIN
                    IF NOT IsEmptySymbol(FORMAT(ElementValue[i])) THEN
                      XlWrkSht.Range(CurrCellName).Value := FORMAT(ElementValue[i]);
                    CurrCellName := ExcelMgt.GetNextCellVert(XlWrkSht,CurrCellName);
                  END;
                END;
              MultiCellMappingType::Area:
                BEGIN
                  CurrCellName := "Excel Cell Name";

                  FOR j := 1 TO "Vertical Cells Quantity" DO BEGIN
                    IF j > 1 THEN BEGIN
                      NextRowFirstCellName :=
                        ExcelMgt.CellName2ColumnName("Excel Cell Name") +
                        FORMAT(ExcelMgt.CellName2RowNo(CurrCellName));

                      REPEAT
                        NextRowFirstCellName := ExcelMgt.GetNextCellVert(XlWrkSht,NextRowFirstCellName);
                      UNTIL CheckBorders(XlWrkSht,NextRowFirstCellName);

                      CurrCellName := NextRowFirstCellName;
                    END;

                    FOR i := 1 TO "Horizontal Cells Quantity" DO BEGIN
                      index := i + (j - 1) * "Horizontal Cells Quantity";
                      IF NOT IsEmptySymbol(FORMAT(ElementValue[index])) THEN
                        XlWrkSht.Range(CurrCellName).Value := FORMAT(ElementValue[index]);
                      CurrCellName := ExcelMgt.GetNextCellHoriz(XlWrkSht,CurrCellName);
                    END;
                  END;
                END;
            END;
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ImportFromExcel@1210006(VAR XlWrkSht@1210001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;VAR ElementValue@1210004 : Text[250];VAR ErrorMessage@1210009 : Text[250];ExcelCellName@1210000 : Code[10]) : Boolean;
    VAR
      StatutoryReportTable@1210017 : Record 26552;
      CurrCellName@1210007 : Code[10];
      NextRowFirstCellName@1210019 : Code[10];
      i@1210003 : Integer;
      j@1210016 : Integer;
      CellValue@1210015 : Text[250];
      VerticalTable@1210018 : Boolean;
      MultiCellMappingType@1210010 : 'Row,Column,Area';
    BEGIN
      CASE "Excel Mapping Type" OF
        "Excel Mapping Type"::"Single-cell":
          BEGIN
            IF ExcelCellName = '' THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text004,FIELDCAPTION("Excel Cell Name"),GetRecordDescription);
              EXIT(FALSE);
            END;
            IF NOT ISNULL(XlWrkSht.Range(ExcelCellName).Value) THEN
              ElementValue := FORMAT(XlWrkSht.Range(ExcelCellName).Value,0,2)
            ELSE
              ElementValue := '';
          END;
        "Excel Mapping Type"::"Multi-cell":
          BEGIN
            IF "Excel Cell Name" = '' THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text004,FIELDCAPTION("Excel Cell Name"),GetRecordDescription);
              EXIT(FALSE);
            END;

            IF "Horizontal Cells Quantity" = 0 THEN BEGIN
              ErrorMessage := STRSUBSTNO(Text004,FIELDCAPTION("Horizontal Cells Quantity"),GetRecordDescription);
              EXIT(FALSE);
            END;

            IF "Table Code" <> '' THEN BEGIN
              StatutoryReportTable.GET("Report Code","Table Code");
              VerticalTable := StatutoryReportTable."Vertical Table";
            END;

            MultiCellMappingType := GetMultiCellMappingType;

            CASE MultiCellMappingType OF
              MultiCellMappingType::Row:
                BEGIN
                  IF VerticalTable OR StatutoryReportTable."Scalable Table" THEN
                    CurrCellName := ExcelCellName
                  ELSE
                    CurrCellName := "Excel Cell Name";

                  FOR i := 1 TO "Horizontal Cells Quantity" DO BEGIN
                    IF NOT ISNULL(XlWrkSht.Range(CurrCellName).Value) THEN
                      ElementValue := ElementValue + FORMAT(XlWrkSht.Range(CurrCellName).Value);
                    CurrCellName := ExcelMgt.GetNextCellHoriz(XlWrkSht,CurrCellName);
                  END;
                END;
              MultiCellMappingType::Column:
                FOR i := 1 TO "Vertical Cells Quantity" DO BEGIN
                  IF NOT ISNULL(XlWrkSht.Range(CurrCellName).Value) THEN
                    ElementValue := ElementValue + FORMAT(XlWrkSht.Range(CurrCellName).Value);
                  CurrCellName := ExcelMgt.GetNextCellVert(XlWrkSht,CurrCellName);
                END;
              MultiCellMappingType::Area:
                BEGIN
                  CurrCellName := "Excel Cell Name";

                  FOR j := 1 TO "Vertical Cells Quantity" DO BEGIN
                    IF j > 1 THEN BEGIN
                      NextRowFirstCellName :=
                        ExcelMgt.CellName2ColumnName("Excel Cell Name") +
                        FORMAT(ExcelMgt.CellName2RowNo(CurrCellName));

                      REPEAT
                        NextRowFirstCellName := ExcelMgt.GetNextCellVert(XlWrkSht,NextRowFirstCellName);
                      UNTIL CheckBorders(XlWrkSht,NextRowFirstCellName);

                      CurrCellName := NextRowFirstCellName;
                    END;

                    FOR i := 1 TO "Horizontal Cells Quantity" DO BEGIN
                      IF i > 1 THEN
                        REPEAT
                          CurrCellName := ExcelMgt.GetNextCellHoriz(XlWrkSht,CurrCellName);
                        UNTIL CheckBorders(XlWrkSht,CurrCellName);

                      CellValue := FORMAT(XlWrkSht.Range(CurrCellName).Value);
                      IF (CellValue = '') OR ISNULL(XlWrkSht.Range(CurrCellName).Value) THEN
                        CellValue := ' ';
                      ElementValue := ElementValue + CellValue;
                    END;
                  END;
                END;
            END;

            ElementValue := DELCHR(ElementValue,'<>',' ');
          END;
      END;

      IF IsValueEmpty(ElementValue) THEN
        ElementValue := '';

      EXIT(TRUE);
    END;

    PROCEDURE GetRecordDescription@1210002() : Text[250];
    BEGIN
      EXIT(STRSUBSTNO('%1 %2=''%3'', %4=''%5'', %6=''%7''',TABLECAPTION,
          FIELDCAPTION("Report Code"),"Report Code",
          FIELDCAPTION("Line No."),"Line No.",
          FIELDCAPTION("Element Name"),"Element Name"));
    END;

    PROCEDURE UpdateTableCode@1210010(TableCode@1210001 : Code[20]);
    VAR
      ChildRequisiteLine@1210000 : Record 26570;
    BEGIN
      ChildRequisiteLine.SETRANGE("Report Code","Report Code");
      ChildRequisiteLine.SETRANGE("Parent Line No.","Line No.");
      IF ChildRequisiteLine.FINDSET THEN
        REPEAT
          IF ChildRequisiteLine."Element Type" = ChildRequisiteLine."Element Type"::Complex THEN
            ChildRequisiteLine.UpdateTableCode(TableCode)
          ELSE
            IF ChildRequisiteLine."Table Code" = '' THEN BEGIN
              ChildRequisiteLine.VALIDATE("Table Code",TableCode);
              ChildRequisiteLine.MODIFY;
            END;
        UNTIL ChildRequisiteLine.NEXT = 0;
    END;

    PROCEDURE IsValueEmpty@1210015(ElementValue@1210000 : Text[250]) : Boolean;
    BEGIN
      IF ElementValue = '' THEN
        EXIT(TRUE);

      CASE "Data Type" OF
        "Data Type"::Date:
          BEGIN
            IF ElementValue = '..' THEN
              EXIT(TRUE);
          END;
        "Data Type"::Decimal:
          BEGIN
            IF ElementValue = '.' THEN
              EXIT(TRUE);
          END;
        "Data Type"::Text:
          BEGIN
            IF ElementValue = '/' THEN
              EXIT(TRUE);
          END;
        "Data Type"::Integer:
          BEGIN
            IF ElementValue = '0' THEN
              EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ProcessChildren@1210012(VAR XMLNode@1210004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";StatRepBuffer@1210000 : Record 26568;VAR ElementValueBuffer@1210003 : Record 26568);
    VAR
      ChildRequisiteLine@1210002 : Record 26570;
    BEGIN
      ChildRequisiteLine.SETCURRENTKEY("Report Code","Sequence No.");
      ChildRequisiteLine.SETRANGE("Report Code","Report Code");
      ChildRequisiteLine.SETRANGE("Parent Line No.","Line No.");
      IF ChildRequisiteLine.FINDSET THEN
        REPEAT
          ChildRequisiteLine.CheckComplexTable(StatRepBuffer);
          ChildRequisiteLine.ExportValue(XMLNode,StatRepBuffer,ElementValueBuffer);
        UNTIL ChildRequisiteLine.NEXT = 0;
    END;

    PROCEDURE CheckComplexTable@1210017(VAR StatRepBuffer@1210000 : Record 26568);
    VAR
      StatReportExcelSheet@1210001 : Record 26562;
      StatutoryReportTable@1210002 : Record 26552;
    BEGIN
      IF "Table Code" <> '' THEN BEGIN
        StatutoryReportTable.GET("Report Code","Table Code");
        IF ((NOT StatutoryReportTable."Scalable Table") AND (StatutoryReportTable."Parent Table Code" <> '')) OR
           (StatutoryReportTable."Scalable Table" AND
            ("Source Type" = "Source Type"::"Individual Element")) AND
           (NOT StatutoryReportTable."Vertical Table") OR
           (StatutoryReportTable."Multipage Table" AND
            NOT StatutoryReportTable."Scalable Table" AND
            NOT StatutoryReportTable."Vertical Table" AND
            NOT ("Link Type" = "Link Type"::Table) AND
            (StatRepBuffer."Page Indic. Requisite Value" <> ''))
        THEN BEGIN
          StatReportExcelSheet.SETRANGE("Report Code","Report Code");
          StatReportExcelSheet.SETRANGE("Report Data No.",StatRepBuffer."Report Data No.");
          StatReportExcelSheet.SETRANGE("Table Code","Table Code");
          StatReportExcelSheet.SETRANGE("Page Indic. Requisite Value",StatRepBuffer."Page Indic. Requisite Value");
          IF StatReportExcelSheet.FINDFIRST THEN BEGIN
            StatRepBuffer."Excel Sheet Name" := StatReportExcelSheet."Sheet Name";
            StatRepBuffer."Table Code" := "Table Code";
            StatutoryReportTable.GET("Report Code","Table Code");
            IF NOT StatutoryReportTable."Scalable Table" THEN
              StatRepBuffer."Scalable Table Row No." := 0;
          END ELSE
            IF "Excel Sheet Name" <> StatRepBuffer."Excel Sheet Name" THEN BEGIN
              StatReportExcelSheet.RESET;
              StatReportExcelSheet.SETRANGE("Report Code","Report Code");
              StatReportExcelSheet.SETRANGE("Report Data No.",StatRepBuffer."Report Data No.");
              StatReportExcelSheet.SETRANGE("Table Code","Table Code");
              StatReportExcelSheet.SETRANGE("Parent Sheet Name","Excel Sheet Name");
              StatReportExcelSheet.SETRANGE("Sheet Name",StatRepBuffer."Excel Sheet Name");
              IF StatReportExcelSheet.ISEMPTY THEN
                StatRepBuffer."Excel Sheet Name" := "Excel Sheet Name";
            END;
        END;
      END;
    END;

    PROCEDURE AddElementValueBufferLine@1210021(StatRepBuffer@1210004 : Record 26568;ElementValue@1210001 : Text[250];VAR ElementValueBuffer@1210003 : Record 26568);
    VAR
      StatutoryReportTable@1210000 : Record 26552;
      StatReportTableColumn@1210005 : Record 26554;
      ScalableTableRow@1210002 : Record 26555;
      VertTableRowShift@1210006 : Integer;
    BEGIN
      IF ElementValueBuffer.FINDLAST THEN;
      EntryNo := ElementValueBuffer."Entry No." + 1;

      ElementValueBuffer.INIT;
      ElementValueBuffer."Entry No." := EntryNo;
      IF (StatRepBuffer."Excel Sheet Name" = '') AND ("Excel Sheet Name" <> '') THEN
        ElementValueBuffer."Excel Sheet Name" := "Excel Sheet Name"
      ELSE
        ElementValueBuffer."Excel Sheet Name" := StatRepBuffer."Excel Sheet Name";
      ElementValueBuffer."XML Element Line No." := "Line No.";
      ElementValueBuffer.Value := ElementValue;
      ElementValueBuffer."Excel Cell Name" := "Excel Cell Name";
      ElementValueBuffer."Table Code" := "Table Code";

      IF ("Source Type" = "Source Type"::"Table Data") AND ("Table Code" <> '') THEN BEGIN
        StatutoryReportTable.GET("Report Code","Table Code");
        IF StatutoryReportTable."Scalable Table" THEN BEGIN
          IF "Column Link No." <> 0 THEN
            IF StatReportTableColumn.GET("Report Code","Table Code","Column Link No.") THEN
              VertTableRowShift := StatReportTableColumn."Vert. Table Row Shift";

          IF ScalableTableRow.GET(
               StatRepBuffer."Report Data No.",
               "Report Code",
               "Table Code",
               StatRepBuffer."Excel Sheet Name",
               StatRepBuffer."Scalable Table Row No.")
          THEN
            ElementValueBuffer."Excel Cell Name" :=
              ExcelMgt.CellName2ColumnName("Excel Cell Name") +
              FORMAT(ScalableTableRow."Excel Row No." + VertTableRowShift);
        END;
      END;
      ElementValueBuffer."Template Data" := "Template Data";
      ElementValueBuffer.INSERT;
    END;

    PROCEDURE GetElementFormattedValue@1210024(StatRepBuffer@1210003 : Record 26568;VAR ElementValueBuffer@1210004 : Record 26568) : Text[250];
    VAR
      ElementValue@1210002 : Text[250];
      FormattedValue@1210001 : Text[250];
      ErrorMessage@1210000 : Text[250];
    BEGIN
      ElementValue := GetElementValue(StatRepBuffer);

      IF StatRepBuffer."Calculation Values Mode" THEN BEGIN
        IF NOT FormatValue(1,ElementValue,FormattedValue,ErrorMessage) THEN
          ERROR(ErrorMessage);
        AddElementValueBufferLine(StatRepBuffer,FormattedValue,ElementValueBuffer);
      END ELSE BEGIN
        IF NOT FormatValue(0,ElementValue,FormattedValue,ErrorMessage) THEN
          ERROR(ErrorMessage);
      END;

      EXIT(FormattedValue);
    END;

    PROCEDURE IsEmptySymbol@1210019(ElementCharecter@1210000 : Text[1]) : Boolean;
    BEGIN
      IF ElementCharecter IN ['',' '] THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetMultiCellMappingType@1210025() : Integer;
    BEGIN
      CASE TRUE OF
        ("Horizontal Cells Quantity" > 1) AND ("Vertical Cells Quantity" = 1):
          EXIT(0);
        ("Horizontal Cells Quantity" = 1) AND ("Vertical Cells Quantity" > 1):
          EXIT(1);
        ("Horizontal Cells Quantity" > 1) AND ("Vertical Cells Quantity" > 1):
          EXIT(2);
      END;
    END;

    PROCEDURE CheckBorders@1210027(VAR XlWrkSht@1210007 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;CellName@1210000 : Code[10]) : Boolean;
    VAR
      XlRange@1210006 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      LineStyleRight@1210004 : Integer;
      LineStyleLeft@1210003 : Integer;
      LineStyleTop@1210002 : Integer;
      LineStyleBottom@1210001 : Integer;
    BEGIN
      XlRange := XlWrkSht.Range(CellName);

      LineStyleLeft := XlRange.Borders.Item(7).LineStyle;
      LineStyleTop := XlRange.Borders.Item(8).LineStyle;
      LineStyleBottom := XlRange.Borders.Item(9).LineStyle;
      LineStyleRight := XlRange.Borders.Item(10).LineStyle;

      EXIT(
        (LineStyleRight <> -4142) AND
        (LineStyleLeft <> -4142) AND
        (LineStyleTop <> -4142) AND
        (LineStyleBottom <> -4142));
    END;

    PROCEDURE IsReportDataExist@1210014() : Boolean;
    VAR
      StatutoryReportDataHeader@1210000 : Record 26563;
    BEGIN
      StatutoryReportDataHeader.SETRANGE("Report Code","Report Code");
      EXIT(NOT StatutoryReportDataHeader.ISEMPTY);
    END;

    PROCEDURE CopyElement@1210018(ReportFromCode@1210001 : Code[20]);
    VAR
      XMLElementExpressionLine@1210003 : Record 26572;
      XMLElementExpressionLineFrom@1210004 : Record 26572;
    BEGIN
      XMLElementExpressionLineFrom.SETRANGE("Report Code",ReportFromCode);
      XMLElementExpressionLineFrom.SETRANGE("Base XML Element Line No.","Line No.");
      IF XMLElementExpressionLineFrom.FINDSET THEN
        REPEAT
          XMLElementExpressionLine := XMLElementExpressionLineFrom;
          XMLElementExpressionLine."Report Code" := "Report Code";
          XMLElementExpressionLine.INSERT;
        UNTIL XMLElementExpressionLineFrom.NEXT = 0;
    END;

    PROCEDURE CheckReportDataExistence@1210020(ErrorMessage@1210000 : Text[250]);
    BEGIN
      StatutoryReportSetup.GET;
      IF NOT StatutoryReportSetup."Setup Mode" THEN BEGIN
        StatutoryReport.GET("Report Code");
        IF IsReportDataExist THEN
          ERROR(ErrorMessage,
            GetRecordDescription,
            StatutoryReport.TABLECAPTION,
            StatutoryReport.Code);
      END;
    END;

    PROCEDURE AlignFormattedValue@1210028(FormattedValue@1210000 : Text[250]) : Text[250];
    BEGIN
      IF ("Excel Mapping Type" <> "Excel Mapping Type"::"Multi-cell") OR
         ("Horizontal Cells Quantity" = 0) OR ("Vertical Cells Quantity" = 0) OR ("Template Data") OR
         (("Pad Character" = '') AND (FormattedValue = ''))
      THEN
        EXIT(FormattedValue);

      IF "Pad Character" = '' THEN
        "Pad Character" := ' ';

      IF "Horizontal Cells Quantity" * "Vertical Cells Quantity" > STRLEN(FormattedValue) THEN
        CASE Alignment OF
          Alignment::Left:
            EXIT(
              COPYSTR(FormattedValue,1,STRLEN(FormattedValue)) +
              PADSTR(
                '',
                "Horizontal Cells Quantity" * "Vertical Cells Quantity" - STRLEN(FormattedValue),
                "Pad Character"));
          Alignment::Right:
            EXIT(
              PADSTR(
                '',
                "Horizontal Cells Quantity" * "Vertical Cells Quantity" - STRLEN(FormattedValue),
                "Pad Character") +
              COPYSTR(FormattedValue,1,STRLEN(FormattedValue)));
        END
      ELSE
        EXIT(FormattedValue);
    END;

    PROCEDURE FormatEmptyValue@1210030() : Text[250];
    BEGIN
      IF ("Excel Mapping Type" <> "Excel Mapping Type"::"Multi-cell") OR ("Pad Character" = '') OR
         ("Horizontal Cells Quantity" = 0) OR ("Vertical Cells Quantity" = 0) OR ("Template Data")
      THEN
        EXIT('');

      EXIT(PADSTR('',"Horizontal Cells Quantity" * "Vertical Cells Quantity","Pad Character"));
    END;

    BEGIN
    END.
  }
}

