OBJECT Table 254 VAT Entry
{
  OBJECT-PROPERTIES
  {
    Date=17.04.17;
    Time=14:28:30;
    Modified=Yes;
    Version List=NAVW110.00,NAVRU10.00,NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=VAT Entry;
               RUS=Операция НДС];
    LookupPageID=Page315;
    DrillDownPageID=Page315;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              RUS=Номер операции];
                                                   Editable=No }
    { 2   ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              RUS=Общая бизнес-группа];
                                                   Editable=No }
    { 3   ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              RUS=Общая товарная группа];
                                                   Editable=No }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              RUS=Дата учета];
                                                   Editable=No }
    { 5   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа];
                                                   Editable=No }
    { 6   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Платеж,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund];
                                                   Editable=No }
    { 7   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::Settlement THEN
                                                                  ERROR(Text000,FIELDCAPTION(Type),Type);
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              RUS=Тип];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    RUS=" ,Покупка,Продажа,Зачет"];
                                                   OptionString=[ ,Purchase,Sale,Settlement];
                                                   Editable=No }
    { 8   ;   ;Base                ;Decimal       ;CaptionML=[ENU=Base;
                                                              RUS=База];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 9   ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 10  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              RUS=Тип расчета НДС];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    RUS=Обычный НДС,Обратный НДС,Полный НДС,Налог с продаж];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 12  ;   ;Bill-to/Pay-to No.  ;Code20        ;TableRelation=IF (Type=CONST(Purchase)) Vendor
                                                                 ELSE IF (Type=CONST(Sale)) Customer;
                                                   OnValidate=BEGIN
                                                                VALIDATE(Type);
                                                                IF "Bill-to/Pay-to No." = '' THEN BEGIN
                                                                  "Country/Region Code" := '';
                                                                  "VAT Registration No." := '';
                                                                END ELSE
                                                                  CASE Type OF
                                                                    Type::Purchase:
                                                                      BEGIN
                                                                        Vend.GET("Bill-to/Pay-to No.");
                                                                        "Country/Region Code" := Vend."Country/Region Code";
                                                                        "VAT Registration No." := Vend."VAT Registration No.";
                                                                      END;
                                                                    Type::Sale:
                                                                      BEGIN
                                                                        Cust.GET("Bill-to/Pay-to No.");
                                                                        "Country/Region Code" := Cust."Country/Region Code";
                                                                        "VAT Registration No." := Cust."VAT Registration No.";
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bill-to/Pay-to No.;
                                                              RUS=Код плательщика/получ. оплаты] }
    { 13  ;   ;EU 3-Party Trade    ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Type);
                                                              END;

                                                   CaptionML=[ENU=EU 3-Party Trade;
                                                              RUS=Торговля вне ЕС] }
    { 14  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              RUS=Код пользователя];
                                                   Editable=No }
    { 15  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              RUS=Код источника];
                                                   Editable=No }
    { 16  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              RUS=Код причины];
                                                   Editable=No }
    { 17  ;   ;Closed by Entry No. ;Integer       ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Closed by Entry No.;
                                                              RUS=Номер закрывающей операции];
                                                   Editable=No }
    { 18  ;   ;Closed              ;Boolean       ;CaptionML=[ENU=Closed;
                                                              RUS=Закрыто];
                                                   Editable=No }
    { 19  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE(Type);
                                                                VALIDATE("VAT Registration No.");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              RUS=Код страны/региона] }
    { 20  ;   ;Internal Ref. No.   ;Text30        ;CaptionML=[ENU=Internal Ref. No.;
                                                              RUS=Номер внутренней ссылки];
                                                   Editable=No }
    { 21  ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              RUS=Номер транзакции];
                                                   Editable=No }
    { 22  ;   ;Unrealized Amount   ;Decimal       ;CaptionML=[ENU=Unrealized Amount;
                                                              RUS=Нереал. сумма];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 23  ;   ;Unrealized Base     ;Decimal       ;CaptionML=[ENU=Unrealized Base;
                                                              RUS=Нереал. база];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 24  ;   ;Remaining Unrealized Amount;Decimal;CaptionML=[ENU=Remaining Unrealized Amount;
                                                              RUS=Оставшаяся нереализованная сумма];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 25  ;   ;Remaining Unrealized Base;Decimal  ;CaptionML=[ENU=Remaining Unrealized Base;
                                                              RUS=Оставшаяся нереализованная база];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 26  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              RUS=Номер внешнего документа];
                                                   Editable=No }
    { 28  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              RUS=Серия номеров];
                                                   Editable=No }
    { 29  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              RUS=Код налоговой области];
                                                   Editable=No }
    { 30  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              RUS=Облагается налогом];
                                                   Editable=No }
    { 31  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              RUS=Код налоговой группы];
                                                   Editable=No }
    { 32  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              RUS=Использовать налог];
                                                   Editable=No }
    { 33  ;   ;Tax Jurisdiction Code;Code10       ;TableRelation="Tax Jurisdiction";
                                                   CaptionML=[ENU=Tax Jurisdiction Code;
                                                              RUS=Код налоговой юрисдикции];
                                                   Editable=No }
    { 34  ;   ;Tax Group Used      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Used;
                                                              RUS=Использованная налоговая группа];
                                                   Editable=No }
    { 35  ;   ;Tax Type            ;Option        ;CaptionML=[ENU=Tax Type;
                                                              RUS=Тип налога];
                                                   OptionCaptionML=[ENU=Sales Tax,Excise Tax;
                                                                    RUS=Налог с продаж,Акциз];
                                                   OptionString=Sales Tax,Excise Tax;
                                                   Editable=No }
    { 36  ;   ;Tax on Tax          ;Boolean       ;CaptionML=[ENU=Tax on Tax;
                                                              RUS=Налог на налог];
                                                   Editable=No }
    { 37  ;   ;Sales Tax Connection No.;Integer   ;CaptionML=[ENU=Sales Tax Connection No.;
                                                              RUS=Номер связи налога с продаж];
                                                   Editable=No }
    { 38  ;   ;Unrealized VAT Entry No.;Integer   ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Unrealized VAT Entry No.;
                                                              RUS=Номер операции нереал. НДС];
                                                   Editable=No }
    { 39  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              RUS=НДС бизнес-группа];
                                                   Editable=No }
    { 40  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              RUS=НДС товарная группа];
                                                   Editable=No }
    { 43  ;   ;Additional-Currency Amount;Decimal ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Additional-Currency Amount;
                                                              RUS=Сумма (ДОВ)];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 44  ;   ;Additional-Currency Base;Decimal   ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Additional-Currency Base;
                                                              RUS=База (ДОВ)];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 45  ;   ;Add.-Currency Unrealized Amt.;Decimal;
                                                   CaptionML=[ENU=Add.-Currency Unrealized Amt.;
                                                              RUS=Нереал. сумма в дополнительной валюте];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 46  ;   ;Add.-Currency Unrealized Base;Decimal;
                                                   CaptionML=[ENU=Add.-Currency Unrealized Base;
                                                              RUS=Нереал. база в дополнительной валюте];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 48  ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              RUS=База НДС - скидка (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 49  ;   ;Add.-Curr. Rem. Unreal. Amount;Decimal;
                                                   CaptionML=[ENU=Add.-Curr. Rem. Unreal. Amount;
                                                              RUS=Оставшаяся нереал. сумма в доп. валюте];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 50  ;   ;Add.-Curr. Rem. Unreal. Base;Decimal;
                                                   CaptionML=[ENU=Add.-Curr. Rem. Unreal. Base;
                                                              RUS=Оставшаяся нереал. база в доп. валюте];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 51  ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              RUS=Разница НДС];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 52  ;   ;Add.-Curr. VAT Difference;Decimal  ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Add.-Curr. VAT Difference;
                                                              RUS=Разница НДС в дополнительной валюте];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 53  ;   ;Ship-to/Order Address Code;Code10  ;TableRelation=IF (Type=CONST(Purchase)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Type=CONST(Sale)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.));
                                                   CaptionML=[ENU=Ship-to/Order Address Code;
                                                              RUS=Код адреса получателя заказа] }
    { 54  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              RUS=Дата документа];
                                                   Editable=No }
    { 55  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',0);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              RUS=ИНН] }
    { 56  ;   ;Reversed            ;Boolean       ;CaptionML=[ENU=Reversed;
                                                              RUS=Сторнировано] }
    { 57  ;   ;Reversed by Entry No.;Integer      ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Reversed by Entry No.;
                                                              RUS=Номер сторнирующей операции];
                                                   BlankZero=Yes }
    { 58  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Reversed Entry No.;
                                                              RUS=Номер сторнированной операции];
                                                   BlankZero=Yes }
    { 59  ;   ;EU Service          ;Boolean       ;CaptionML=[ENU=EU Service;
                                                              RUS=Сервис ЕС];
                                                   Editable=No }
    { 12400;  ;Tax Invoice Amount Type;Option     ;CaptionML=[ENU=Tax Invoice Amount Type;
                                                              RUS=Тип суммы для счета-фактуры];
                                                   OptionCaptionML=[ENU=VAT,Excise,Sales Tax;
                                                                    RUS=НДС,Акциз,Налог с продаж];
                                                   OptionString=VAT,Excise,Sales Tax;
                                                   Editable=No }
    { 12401;  ;Prepayment          ;Boolean       ;CaptionML=[ENU=Prepayment;
                                                              RUS=Предоплата];
                                                   Editable=No }
    { 12406;  ;Prepmt. Diff.       ;Boolean       ;CaptionML=[ENU=Prepmt. Diff.;
                                                              RUS=Разн. по предопл.] }
    { 12407;  ;VAT Settlement Part ;Option        ;CaptionML=[ENU=VAT Settlement Part;
                                                              RUS=Часть зачета НДС];
                                                   OptionCaptionML=[ENU=" ,,,,,,,Custom";
                                                                    RUS=" ,,,,,,,Польз."];
                                                   OptionString=[ ,,,,,,,Custom] }
    { 12408;  ;VAT Settlement Type ;Option        ;CaptionML=[ENU=VAT Settlement Type;
                                                              RUS=Тип зачета НДС];
                                                   OptionCaptionML=[ENU=" ,by Act,Future Expenses";
                                                                    RUS=" ,По акту,Расходы будущих периодов"];
                                                   OptionString=[ ,by Act,Future Expenses] }
    { 12409;  ;Manual VAT Settlement;Boolean      ;CaptionML=[ENU=Manual VAT Settlement;
                                                              RUS=Зачет НДС вручную] }
    { 12410;  ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              RUS=Корректировка] }
    { 12411;  ;Initial VAT Transaction No.;Integer;CaptionML=[ENU=Initial VAT Transaction No.;
                                                              RUS=Номер начальной транзакции НДС] }
    { 12412;  ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              RUS=Номер строки документа] }
    { 12413;  ;Corrective Doc. Type;Option        ;CaptionML=[ENU=Corrective Doc. Type;
                                                              RUS=Тип корректирующего док.];
                                                   OptionCaptionML=[ENU=" ,Correction,Revision";
                                                                    RUS=" ,Коррекция,Редакция"];
                                                   OptionString=[ ,Correction,Revision] }
    { 12425;  ;CV Ledg. Entry No.  ;Integer       ;CaptionML=[ENU=CV Ledg. Entry No.;
                                                              RUS=Номер операции книги КП] }
    { 12426;  ;FA Ledger Entry No. ;Integer       ;CaptionML=[ENU=FA Ledger Entry No.;
                                                              RUS=Номер операции по книге ОС] }
    { 12440;  ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              RUS=Положит.];
                                                   Editable=No }
    { 12461;  ;For Document Type   ;Option        ;CaptionML=[ENU=For Document Type;
                                                              RUS=Для типа документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Платеж,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund];
                                                   Editable=No }
    { 12462;  ;For Document No.    ;Code20        ;CaptionML=[ENU=For Document No.;
                                                              RUS=Для документа номер];
                                                   Editable=No }
    { 12463;  ;VAT Charge Accept.  ;Boolean       ;CaptionML=[ENU=VAT Charge Accept.;
                                                              RUS=Зачет НДС при приемке] }
    { 12464;  ;VAT Correction      ;Boolean       ;CaptionML=[ENU=VAT Correction;
                                                              RUS=Корректировка НДС] }
    { 12482;  ;Additional VAT Ledger Sheet;Boolean;CaptionML=[ENU=Additional VAT Ledger Sheet;
                                                              RUS=Дополнительный лист книги НДС] }
    { 12483;  ;Corrected Document Date;Date       ;CaptionML=[ENU=Corrected Document Date;
                                                              RUS=Дата скорректированного документа] }
    { 12484;  ;Adjusted VAT Entry No.;Integer     ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Adjusted VAT Entry No.;
                                                              RUS=Номер скорректированной операции НДС] }
    { 12486;  ;Include In Other VAT Ledger;Boolean;CaptionML=[ENU=Include In Other VAT Ledger;
                                                              RUS=Включить в другую книгу НДС] }
    { 12491;  ;Object Type         ;Option        ;CaptionML=[ENU=Object Type;
                                                              RUS=Тип объекта];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,FI;
                                                                    RUS=Счет ГК,Клиент,Поставщик,Банк. счет,ОС,ФИ];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,FI }
    { 12492;  ;Object No.          ;Code20        ;TableRelation=IF (Object Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Object Type=CONST(Customer)) Customer
                                                                 ELSE IF (Object Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Object Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Object Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=[ENU=Object No.;
                                                              RUS=Номер объекта] }
    { 14925;  ;Amount To Allocate  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("VAT Allocation Line".Amount WHERE (CV Ledger Entry No.=FIELD(CV Ledg. Entry No.),
                                                                                                       VAT Entry No.=FIELD(Entry No.)));
                                                   CaptionML=[ENU=Amount To Allocate;
                                                              RUS=Сумма для распределения] }
    { 14927;  ;VAT Allocation Type ;Option        ;CaptionML=[ENU=VAT Allocation Type;
                                                              RUS=Тип распределения НДС];
                                                   OptionCaptionML=[ENU=VAT,Write-Off,Charge;
                                                                    RUS=НДС,Списание,Расходы];
                                                   OptionString=VAT,WriteOff,Charge }
    { 14929;  ;VAT Reinstatement   ;Boolean       ;CaptionML=[ENU=VAT Reinstatement;
                                                              RUS=Восстановление НДС] }
    { 14930;  ;VAT Agent           ;Boolean       ;CaptionML=[ENU=VAT Agent;
                                                              RUS=Налоговый агент] }
    { 50000;  ;Description         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Entry".Description WHERE (Transaction No.=FIELD(Transaction No.),
                                                                                                     Amount=FIELD(Base)));
                                                   CaptionML=[ENU=Description;
                                                              RUS=Описание];
                                                   Description=TDRANCA-918;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Type,Closed,VAT Bus. Posting Group,VAT Prod. Posting Group,Posting Date;
                                                   SumIndexFields=Base,Amount,Additional-Currency Base,Additional-Currency Amount,Remaining Unrealized Amount,Remaining Unrealized Base,Add.-Curr. Rem. Unreal. Amount,Add.-Curr. Rem. Unreal. Base }
    {    ;Type,Closed,Tax Jurisdiction Code,Use Tax,Posting Date;
                                                   SumIndexFields=Base,Amount,Unrealized Amount,Unrealized Base,Remaining Unrealized Amount }
    {    ;Type,Country/Region Code,VAT Registration No.,VAT Bus. Posting Group,VAT Prod. Posting Group,Posting Date;
                                                   SumIndexFields=Base,Additional-Currency Base }
    {    ;Document No.,Posting Date                }
    {    ;Transaction No.,CV Ledg. Entry No.       }
    {    ;Tax Jurisdiction Code,Tax Group Used,Tax Type,Use Tax,Posting Date }
    {    ;Unrealized VAT Entry No.                 }
    {    ;Type,Bill-to/Pay-to No.,Transaction No. ;MaintainSQLIndex=No }
    {    ;Posting Date,Type,VAT Bus. Posting Group,VAT Prod. Posting Group,Tax Invoice Amount Type,Prepayment,Positive;
                                                   SumIndexFields=Base,Amount,Unrealized Base,Unrealized Amount }
    {    ;Type,Object Type,Object No.,Manual VAT Settlement,Unrealized VAT Entry No.,FA Ledger Entry No.,Posting Date;
                                                   SumIndexFields=Remaining Unrealized Amount,Remaining Unrealized Base,Base,Unrealized Base }
    {    ;Type,CV Ledg. Entry No.,Manual VAT Settlement,VAT Settlement Type,VAT Bus. Posting Group,VAT Prod. Posting Group,Posting Date;
                                                   SumIndexFields=Amount,Unrealized Amount,Base,Unrealized Base,Remaining Unrealized Amount }
    {    ;Type,Posting Date,VAT Bus. Posting Group,VAT Prod. Posting Group,Gen. Bus. Posting Group,Gen. Prod. Posting Group,Object Type,Object No.,VAT Allocation Type,Prepayment;
                                                   SumIndexFields=Base,Amount,Unrealized Amount,Unrealized Base,Remaining Unrealized Amount,Remaining Unrealized Base }
    {    ;Reversed,Posting Date                    }
    {    ;Document Date                            }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Posting Date,Document Type,Document No.,Posting Date }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change the contents of this field when %1 is %2.;RUS=Изменение содержимого этого поля невозможно, если %1 равно %2.';
      Cust@1001 : Record 18;
      Vend@1002 : Record 23;
      GLSetup@1003 : Record 98;
      GLSetupRead@1004 : Boolean;
      Text12400@1470000 : TextConst 'ENU=%1 %2 is blocked. %3 must be less than %4 %5.;RUS=%1 %2 блокирован. %3 необходимо быть меньше, чем %4 %5.';

    LOCAL PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    PROCEDURE GetUnrealizedVATPart@2(SettledAmount@1003 : Decimal;Paid@1005 : Decimal;Full@1001 : Decimal;TotalUnrealVATAmountFirst@1006 : Decimal;TotalUnrealVATAmountLast@1007 : Decimal) : Decimal;
    VAR
      UnrealizedVATType@1000 : ' ,Percentage,First,Last,First (Fully Paid),Last (Fully Paid)';
    BEGIN
      IF (Type <> 0) AND
         (Amount = 0) AND
         (Base = 0)
      THEN BEGIN
        UnrealizedVATType := GetUnrealizedVATType;
        IF (UnrealizedVATType = UnrealizedVATType::" ") OR
           (("Remaining Unrealized Amount" = 0) AND
            ("Remaining Unrealized Base" = 0))
        THEN
          EXIT(0);

        IF ABS(Paid) = ABS(Full) THEN
          EXIT(1);

        CASE UnrealizedVATType OF
          UnrealizedVATType::Percentage:
            BEGIN
              IF ABS(Full) = ABS(Paid) - ABS(SettledAmount) THEN
                EXIT(1);
              EXIT(ABS(SettledAmount) / (ABS(Full) - (ABS(Paid) - ABS(SettledAmount))));
            END;
          UnrealizedVATType::First:
            BEGIN
              IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                EXIT(1);
              IF ABS(Paid) < ABS(TotalUnrealVATAmountFirst) THEN
                EXIT(ABS(SettledAmount) / ABS(TotalUnrealVATAmountFirst));
              EXIT(1);
            END;
          UnrealizedVATType::"First (Fully Paid)":
            BEGIN
              IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                EXIT(1);
              IF ABS(Paid) < ABS(TotalUnrealVATAmountFirst) THEN
                EXIT(0);
              EXIT(1);
            END;
          UnrealizedVATType::"Last (Fully Paid)":
            EXIT(0);
          UnrealizedVATType::Last:
            BEGIN
              IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                EXIT(0);
              IF ABS(Paid) > ABS(Full) - ABS(TotalUnrealVATAmountLast) THEN
                EXIT((ABS(Paid) - (ABS(Full) - ABS(TotalUnrealVATAmountLast))) / ABS(TotalUnrealVATAmountLast));
              EXIT(0);
            END;
        END;
      END ELSE
        EXIT(0);
    END;

    LOCAL PROCEDURE GetUnrealizedVATType@3() UnrealizedVATType : Integer;
    VAR
      VATPostingSetup@1001 : Record 325;
      TaxJurisdiction@1000 : Record 320;
    BEGIN
      IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN BEGIN
        TaxJurisdiction.GET("Tax Jurisdiction Code");
        UnrealizedVATType := TaxJurisdiction."Unrealized VAT Type";
      END ELSE BEGIN
        VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
        UnrealizedVATType := VATPostingSetup."Unrealized VAT Type";
      END;
    END;

    PROCEDURE CopyFromGenJnlLine@5(GenJnlLine@1000 : Record 81);
    BEGIN
      CopyPostingGroupsFromGenJnlLine(GenJnlLine);
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      "Document Type" := GenJnlLine."Document Type";
      Type := GenJnlLine."Gen. Posting Type";
      "VAT Calculation Type" := GenJnlLine."VAT Calculation Type";
      "Source Code" := GenJnlLine."Source Code";
      "Reason Code" := GenJnlLine."Reason Code";
      "Ship-to/Order Address Code" := GenJnlLine."Ship-to/Order Address Code";
      "EU 3-Party Trade" := GenJnlLine."EU 3-Party Trade";
      "User ID" := USERID;
      "No. Series" := GenJnlLine."Posting No. Series";
      "VAT Base Discount %" := GenJnlLine."VAT Base Discount %";
      "Bill-to/Pay-to No." := GenJnlLine."Bill-to/Pay-to No.";
      "Country/Region Code" := GenJnlLine."Country/Region Code";
      "VAT Registration No." := GenJnlLine."VAT Registration No.";
      Prepayment := GenJnlLine.Prepayment;
      "Object Type" := GenJnlLine."Account Type";
      "Object No." := GenJnlLine."Account No.";
    END;

    LOCAL PROCEDURE CopyPostingGroupsFromGenJnlLine@4(GenJnlLine@1000 : Record 81);
    BEGIN
      "Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GenJnlLine."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GenJnlLine."VAT Prod. Posting Group";
      "Tax Area Code" := GenJnlLine."Tax Area Code";
      "Tax Liable" := GenJnlLine."Tax Liable";
      "Tax Group Code" := GenJnlLine."Tax Group Code";
      "Use Tax" := GenJnlLine."Use Tax";
    END;

    PROCEDURE CopyAmountsFromVATEntry@6(VATEntry@1000 : Record 254;WithOppositeSign@1001 : Boolean);
    VAR
      Sign@1002 : Decimal;
    BEGIN
      IF WithOppositeSign THEN
        Sign := -1
      ELSE
        Sign := 1;
      Base := Sign * VATEntry.Base;
      Amount := Sign * VATEntry.Amount;
      "Unrealized Amount" := Sign * VATEntry."Unrealized Amount";
      "Unrealized Base" := Sign * VATEntry."Unrealized Base";
      "Remaining Unrealized Amount" := Sign * VATEntry."Remaining Unrealized Amount";
      "Remaining Unrealized Base" := Sign * VATEntry."Remaining Unrealized Base";
      "Additional-Currency Amount" := Sign * VATEntry."Additional-Currency Amount";
      "Additional-Currency Base" := Sign * VATEntry."Additional-Currency Base";
      "Add.-Currency Unrealized Amt." := Sign * VATEntry."Add.-Currency Unrealized Amt.";
      "Add.-Currency Unrealized Base" := Sign * VATEntry."Add.-Currency Unrealized Base";
      "Add.-Curr. Rem. Unreal. Amount" := Sign * VATEntry."Add.-Curr. Rem. Unreal. Amount";
      "Add.-Curr. Rem. Unreal. Base" := Sign * VATEntry."Add.-Curr. Rem. Unreal. Base";
      "VAT Difference" := Sign * VATEntry."VAT Difference";
      "Add.-Curr. VAT Difference" := Sign * VATEntry."Add.-Curr. VAT Difference";
    END;

    PROCEDURE SetUnrealAmountsToZero@7();
    BEGIN
      "Unrealized Amount" := 0;
      "Unrealized Base" := 0;
      "Remaining Unrealized Amount" := 0;
      "Remaining Unrealized Base" := 0;
      "Add.-Currency Unrealized Amt." := 0;
      "Add.-Currency Unrealized Base" := 0;
      "Add.-Curr. Rem. Unreal. Amount" := 0;
      "Add.-Curr. Rem. Unreal. Base" := 0;
    END;

    PROCEDURE IsUnapplied@1470000(VAR UnappliedEntryDate@1470002 : Date) : Boolean;
    VAR
      DtldVendLedgEntry@1470000 : Record 380;
      DtldCustLedgEntry@1470001 : Record 379;
      DtldCustLedgEntry2@1210000 : Record 379;
      DtldVendLedgEntry2@1210001 : Record 380;
    BEGIN
      IF ("Unrealized VAT Entry No." = 0) THEN
        EXIT(FALSE);

      CASE Type OF
        Type::Purchase:BEGIN
          DtldVendLedgEntry.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
          DtldVendLedgEntry.SETRANGE("Transaction No.","Transaction No.");
          DtldVendLedgEntry.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
          IF DtldVendLedgEntry.FIND('-') THEN BEGIN
            IF DtldVendLedgEntry.Unapplied THEN BEGIN
              DtldVendLedgEntry.GET(DtldVendLedgEntry."Unapplied by Entry No.");
              UnappliedEntryDate := DtldVendLedgEntry."Posting Date";
              EXIT(TRUE);
            END;
            EXIT(DtldVendLedgEntry.Unapplied);
          END;
        END;
        Type::Sale:BEGIN
          DtldCustLedgEntry.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
          DtldCustLedgEntry.SETRANGE("Transaction No.","Transaction No.");
          DtldCustLedgEntry.SETFILTER("Entry Type",'<>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
          IF DtldCustLedgEntry.FIND('-') THEN BEGIN
            IF DtldCustLedgEntry.Unapplied THEN BEGIN
              DtldCustLedgEntry.GET(DtldCustLedgEntry."Unapplied by Entry No.");
              UnappliedEntryDate := DtldCustLedgEntry."Posting Date";
              EXIT(TRUE);
            END;
            EXIT(DtldCustLedgEntry.Unapplied);
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetPurchPaymentDateDocNo@1210000(TransactionNo@1210000 : Integer;VAR PayDate@1210004 : Date;VAR PayDocNo@1210006 : Code[20]);
    VAR
      VendLedgEntry@1210001 : Record 25;
      DtldVendLedgEntry@1210002 : Record 380;
      VATBusinessPostingGroup@1210005 : Record 323;
      TempDate@1210003 : Date;
    BEGIN
      DtldVendLedgEntry.RESET;
      DtldVendLedgEntry.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
      DtldVendLedgEntry.SETRANGE("Transaction No.",TransactionNo);
      DtldVendLedgEntry.SETRANGE("Vendor No.","Bill-to/Pay-to No.");
      DtldVendLedgEntry.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type"::Application);
      IF DtldVendLedgEntry.FIND('-') THEN
        REPEAT
          IF NOT DtldVendLedgEntry.Unapplied AND
             NOT (DtldVendLedgEntry."Initial Document Type" IN
              [DtldVendLedgEntry."Initial Document Type"::Invoice,
               DtldVendLedgEntry."Initial Document Type"::"Credit Memo"])
          THEN BEGIN
            VendLedgEntry.GET(DtldVendLedgEntry."Vendor Ledger Entry No.");
            PayDate := VendLedgEntry."Posting Date";
            PayDocNo := VendLedgEntry."External Document No.";
            EXIT;
          END;
        UNTIL DtldVendLedgEntry.NEXT = 0;
    END;

    PROCEDURE GetSalesPaymentDate@1470001(TransactionNo@1210000 : Integer;VAR PayDate@1210004 : Date);
    VAR
      CustLedgEntry@1210001 : Record 21;
      DtldCustLedgEntry@1210002 : Record 379;
      TempDate@1210003 : Date;
    BEGIN
      DtldCustLedgEntry.RESET;
      DtldCustLedgEntry.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
      DtldCustLedgEntry.SETRANGE("Transaction No.",TransactionNo);
      DtldCustLedgEntry.SETRANGE("Customer No.","Bill-to/Pay-to No.");
      DtldCustLedgEntry.SETRANGE("Entry Type",DtldCustLedgEntry."Entry Type"::Application);
      IF DtldCustLedgEntry.FIND('-') THEN
        REPEAT
          IF NOT DtldCustLedgEntry.Unapplied AND
             NOT (DtldCustLedgEntry."Initial Document Type" IN
               [DtldCustLedgEntry."Initial Document Type"::Invoice,
                DtldCustLedgEntry."Initial Document Type"::"Credit Memo"])
          THEN BEGIN
            CustLedgEntry.GET(DtldCustLedgEntry."Cust. Ledger Entry No.");
            IF CustLedgEntry."Document Date" = 0D THEN
              TempDate := CustLedgEntry."Posting Date"
            ELSE
              TempDate := CustLedgEntry."Document Date";
            IF PayDate < TempDate THEN
              PayDate := TempDate;
          END;
        UNTIL DtldCustLedgEntry.NEXT = 0;
    END;

    PROCEDURE ShowAllocation@1470002();
    VAR
      VATAllocationForm@1470000 : Page 14926;
      VATAllocationLine@1470001 : Record 14925;
    BEGIN
      TESTFIELD("Remaining Unrealized Base");
      TESTFIELD("CV Ledg. Entry No.");
      VATAllocationLine.SETRANGE("VAT Entry No.","Entry No.");
      VATAllocationLine.SETFILTER("Posting Date Filter",GETFILTER("Posting Date"));
      VATAllocationForm.SETTABLEVIEW(VATAllocationLine);
      VATAllocationForm.RUNMODAL;
    END;

    PROCEDURE FindCVEntry@1210001(VAR CVEntryType@1210000 : ' ,Purchase,Sale';VAR CVEntryNo@1210001 : Integer) : Boolean;
    VAR
      VendLedgEntry@1210002 : Record 25;
      CustLedgEntry@1210003 : Record 21;
    BEGIN
      CVEntryNo := 0;
      CASE Type OF
        Type::Purchase:
          BEGIN
            CVEntryType := CVEntryType::Purchase;
            IF "CV Ledg. Entry No." <> 0 THEN BEGIN
              IF VendLedgEntry.GET("CV Ledg. Entry No.") THEN
                CVEntryNo := VendLedgEntry."Entry No.";
            END ELSE BEGIN
              VendLedgEntry.SETRANGE("Transaction No.","Transaction No.");
              IF VendLedgEntry.FINDFIRST THEN
                CVEntryNo := VendLedgEntry."Entry No.";
            END;
          END;
        Type::Sale:
          BEGIN
            CVEntryType := CVEntryType::Sale;
            IF "CV Ledg. Entry No." <> 0 THEN BEGIN
              IF CustLedgEntry.GET("CV Ledg. Entry No.") THEN
                CVEntryNo := CustLedgEntry."Entry No.";
            END ELSE BEGIN
              CustLedgEntry.SETRANGE("Transaction No.","Transaction No.");
              IF CustLedgEntry.FINDFIRST THEN
                CVEntryNo := CustLedgEntry."Entry No.";
            END;
          END;
      END;
      EXIT(CVEntryNo <> 0);
    END;

    PROCEDURE GetAmountOnBase@1210002(VATBase@1210000 : Decimal) : Decimal;
    BEGIN
      IF VATBase = "Remaining Unrealized Base" THEN
        EXIT("Remaining Unrealized Amount");
      EXIT(ROUND(VATBase * "Remaining Unrealized Amount" / "Remaining Unrealized Base"));
    END;

    PROCEDURE FullyRealizedOnDate@1210003(PostingDate@1210000 : Date) : Boolean;
    VAR
      VATEntry@1210001 : Record 254;
      TotalBase@1210002 : Decimal;
    BEGIN
      IF VATEntry."Remaining Unrealized Base" <> 0 THEN
        EXIT(FALSE);

      VATEntry.SETCURRENTKEY("Unrealized VAT Entry No.");
      VATEntry.SETRANGE("Unrealized VAT Entry No.","Entry No.");
      VATEntry.SETRANGE("Posting Date",PostingDate);
      VATEntry.SETRANGE(Reversed,FALSE);
      IF VATEntry.FINDSET THEN
        REPEAT
          TotalBase := TotalBase + VATEntry.Base;
        UNTIL VATEntry.NEXT = 0;
      EXIT(TotalBase = "Unrealized Base");
    END;

    BEGIN
    {
      NC MTF02 II Исправлено поле Object Type
      TDRANCS-918
        Add CalcField Description
    }
    END.
  }
}

