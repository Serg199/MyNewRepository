OBJECT Table 287 Customer Bank Account
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00,NAVRU10.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Customer No.,Code,Name;
    OnDelete=VAR
               CustLedgerEntry@1000 : Record 21;
               Customer@1001 : Record 18;
             BEGIN
               CustLedgerEntry.SETRANGE("Customer No.","Customer No.");
               CustLedgerEntry.SETRANGE("Recipient Bank Account",Code);
               CustLedgerEntry.SETRANGE(Open,TRUE);
               IF NOT CustLedgerEntry.ISEMPTY THEN
                 ERROR(BankAccDeleteErr);
               IF Customer.GET("Customer No.") AND (Customer."Preferred Bank Account Code" = Code) THEN BEGIN
                 Customer."Preferred Bank Account Code" := '';
                 Customer.MODIFY;
               END;
             END;

    CaptionML=[ENU=Customer Bank Account;
               RUS=Банковский счет клиента];
    LookupPageID=Page424;
    DrillDownPageID=Page424;
  }
  FIELDS
  {
    { 1   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              RUS=Код клиента];
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              RUS=Код];
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              RUS=Название] }
    { 5   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              RUS=Название 2] }
    { 6   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              RUS=Адрес] }
    { 7   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              RUS=Адрес 2] }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              RUS=Город] }
    { 9   ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              RUS=Индекс] }
    { 10  ;   ;Contact             ;Text50        ;CaptionML=[ENU=Contact;
                                                              RUS=Контакт] }
    { 11  ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              RUS=Телефон] }
    { 12  ;   ;Telex No.           ;Text20        ;CaptionML=[ENU=Telex No.;
                                                              RUS=Телекс] }
    { 13  ;   ;Bank Branch No.     ;Text60        ;CaptionML=[ENU=Bank Branch No.;
                                                              RUS=Номер отделения банка] }
    { 14  ;   ;Bank Account No.    ;Text30        ;OnValidate=BEGIN
                                                                IF "Country/Region Code" = '' THEN
                                                                  ValidateAccountNo;
                                                              END;

                                                   CaptionML=[ENU=Bank Account No.;
                                                              RUS=Код банк. счета] }
    { 15  ;   ;Transit No.         ;Text20        ;CaptionML=[ENU=Transit No.;
                                                              RUS=Номер транзитного счета] }
    { 16  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=Код валюты] }
    { 17  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              RUS=Код страны/региона] }
    { 18  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              RUS=Район] }
    { 19  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              RUS=Факс] }
    { 20  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              RUS=Телекс для ответа] }
    { 21  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              RUS=Код языка] }
    { 22  ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              RUS=Эл. почта] }
    { 23  ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              RUS=Интернет-адрес] }
    { 24  ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              RUS=IBAN] }
    { 25  ;   ;SWIFT Code          ;Code20        ;CaptionML=[ENU=SWIFT Code;
                                                              RUS=SWIFT-код] }
    { 1211;   ;Bank Clearing Code  ;Text50        ;CaptionML=[ENU=Bank Clearing Code;
                                                              RUS=Клиринговый код банка] }
    { 1212;   ;Bank Clearing Standard;Text50      ;TableRelation="Bank Clearing Standard";
                                                   CaptionML=[ENU=Bank Clearing Standard;
                                                              RUS=Клиринговый стандарт банка] }
    { 12400;  ;BIC                 ;Code9         ;TableRelation="Bank Directory";
                                                   OnValidate=BEGIN
                                                                IF BankDir.GET(BIC) THEN BEGIN
                                                                  "Bank Corresp. Account No." := BankDir."Corr. Account No.";
                                                                  IF Name = '' THEN
                                                                    Name := COPYSTR(BankDir."Full Name",1,MAXSTRLEN(Name));
                                                                  IF STRLEN(Name) < STRLEN(BankDir."Full Name") THEN
                                                                    "Name 2" := COPYSTR(BankDir."Full Name",STRLEN(Name) + 1,MAXSTRLEN("Name 2"));
                                                                  IF Address = '' THEN
                                                                    Address := COPYSTR(BankDir.Address,1,MAXSTRLEN(Address));
                                                                  IF STRLEN(Address) < STRLEN(BankDir.Address) THEN
                                                                    "Address 2" := COPYSTR(BankDir.Address,STRLEN(Address) + 1,MAXSTRLEN("Address 2"));
                                                                  IF "Phone No." = '' THEN
                                                                    "Phone No." := COPYSTR(BankDir.Telephone,1,MAXSTRLEN("Phone No."));
                                                                  City := BankDir."Area Name";
                                                                  "Abbr. City" := LOWERCASE(COPYSTR(FORMAT(BankDir."Area Type"),1,1));
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=BIC;
                                                              RUS=БИК] }
    { 12401;  ;Abbr. City          ;Text1         ;CaptionML=[ENU=Abbr. City;
                                                              RUS=Сокр. города] }
    { 12410;  ;Bank Corresp. Account No.;Code20   ;OnValidate=BEGIN
                                                                IF "Bank Corresp. Account No." <> '' THEN BEGIN
                                                                  BankDir.RESET;
                                                                  BankDir.SETCURRENTKEY("Corr. Account No.");
                                                                  BankDir.SETRANGE("Corr. Account No.","Bank Corresp. Account No.");
                                                                  IF BankDir.FIND('-') THEN
                                                                    IF BIC = '' THEN
                                                                      VALIDATE(BIC,BankDir.BIC)
                                                                    ELSE
                                                                      IF BIC <> BankDir.BIC THEN
                                                                        IF CONFIRM(Text12400,TRUE,BankDir."Corr. Account No.",BankDir.BIC,BankDir."Short Name") THEN
                                                                          VALIDATE(BIC,BankDir.BIC)
                                                                END;

                                                                IF "Country/Region Code" = '' THEN
                                                                  ValidateAccountNo;
                                                              END;

                                                   CaptionML=[ENU=Bank Corresp. Account No.;
                                                              RUS=Номер корр. счета банка] }
  }
  KEYS
  {
    {    ;Customer No.,Code                       ;Clustered=Yes }
    {    ;Bank Account No.                         }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Code,Name,Phone No.,Contact              }
  }
  CODE
  {
    VAR
      PostCode@1000 : Record 225;
      BankDir@1210000 : Record 12409;
      Text12400@1210001 : TextConst 'ENU=Corr. Account %1 corresponds to the bank %2 %3\Do you agree?;RUS=Корр. счет %1 соответствует банку %2 %3\Подтвердить?';
      BankAccIdentifierIsEmptyErr@1001 : TextConst 'ENU=You must specify either a Bank Account No. or an IBAN.;RUS=Необходимо указать либо № банковского счета, либо код IBAN.';
      BankAccDeleteErr@1002 : TextConst 'ENU=You cannot delete this bank account because it is associated with one or more open ledger entries.;RUS=Удалить этот банковский счет невозможно, так как он связан с одной или несколькими открытыми операциями ГК.';

    PROCEDURE ValidateAccountNo@1470000();
    BEGIN
      CASE CurrFieldNo OF
        FIELDNO("Bank Account No."):
          IF STRLEN("Bank Account No.") > 20 THEN
            FIELDERROR("Bank Account No.");
        FIELDNO("Bank Corresp. Account No."):
          IF STRLEN("Bank Corresp. Account No.") > 20 THEN
            FIELDERROR("Bank Corresp. Account No.");
      END;
    END;

    PROCEDURE GetBankAccountNoWithCheck@14() AccountNo : Text;
    BEGIN
      AccountNo := GetBankAccountNo;
      IF AccountNo = '' THEN
        ERROR(BankAccIdentifierIsEmptyErr);
    END;

    PROCEDURE GetBankAccountNo@1() : Text;
    BEGIN
      IF IBAN <> '' THEN
        EXIT(DELCHR(IBAN,'=<>'));

      IF "Bank Account No." <> '' THEN
        EXIT("Bank Account No.");
    END;

    BEGIN
    END.
  }
}

