OBJECT Report 50082 Loans - Create Reserve
{
  OBJECT-PROPERTIES
  {
    Date=10.08.17;
    Time=11:17:56;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Loans - Create Reserve;
               RUS=Кредит - Создание Резерва];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   GLSetup.GET;
                   StandParameter.RESET;
                   StandParameter.SETRANGE("Report ID",REPORT::"Loans - Create Reserve");
                   IF StandParameter.FINDFIRST THEN BEGIN
                     IF StandParameter."Gen. Journal Template"<>'' THEN
                       Template:=StandParameter."Gen. Journal Template";
                     IF StandParameter."Gen. Journal Batch"<>'' THEN
                       Batch:=StandParameter."Gen. Journal Batch";
                     IsPost:=StandParameter.Post;
                   END ELSE
                     ERROR(Text007+StandParameter.TABLECAPTION + Text008);
                 END;

    OnPreReport=BEGIN
                  IF NOT CurrReport.USEREQUESTPAGE THEN BEGIN
                    GLSetup.GET;
                    StandParameter.RESET;
                    StandParameter.SETRANGE("Report ID",REPORT::"Loans - Create Reserve");
                    IF StandParameter.FINDFIRST THEN BEGIN
                      IF StandParameter."Gen. Journal Template"<>'' THEN
                        Template:=StandParameter."Gen. Journal Template";
                      IF StandParameter."Gen. Journal Batch"<>'' THEN
                        Batch:=StandParameter."Gen. Journal Batch";
                      IsPost:=StandParameter.Post;
                    END ELSE
                      ERROR(Text007+StandParameter.TABLECAPTION + Text008);
                  END;
                  LineMin := 0;
                  LineMax := 0;
                END;

    OnPostReport=BEGIN
                   //формирование строк
                   NextLineNo :=0;
                   GenJnlLine.RESET;
                   GenJnlLine.SETRANGE("Journal Template Name",Template);
                   GenJnlLine.SETRANGE("Journal Batch Name",Batch);
                   IF GenJnlLine.FINDLAST THEN
                       NextLineNo := GenJnlLine."Line No.";

                   LineMin :=NextLineNo;
                   IF tmpGenJnlLine.FINDSET THEN
                     REPEAT
                       GenJnlLine.INIT;
                       GenJnlLine.TRANSFERFIELDS(tmpGenJnlLine);
                       NextLineNo := NextLineNo+10000;
                       GenJnlLine."Line No." := NextLineNo;
                       LineMax := GenJnlLine."Line No.";
                       //GenJnlLine.VALIDATE("Account No.");
                       //GenJnlLine.VALIDATE("Agreement No.");
                       GenJnlLine.VALIDATE(Amount);
                       GenJnlLine.INSERT(TRUE);
                       CopyLedgDimToJnlLineDim(GenJnlLine);
                     UNTIL tmpGenJnlLine.NEXT=0;

                   //учет
                   IF IsPost THEN BEGIN
                     GenJnlLine.SETRANGE("Journal Template Name",Template);
                     GenJnlLine.SETRANGE("Journal Batch Name",Batch);
                     GenJnlLine.SETRANGE("Line No.",LineMin,LineMax);
                     GenJnlLine.SETRANGE("Document No.", DocumentNo);
                     IF NOT GenJnlLine.ISEMPTY THEN BEGIN
                       GenJnlLinePost.SetNoMessage(TRUE);
                       GenJnlLinePost.RUN(GenJnlLine);
                     END;
                   END ELSE BEGIN
                     IF GUIALLOWED THEN
                     MESSAGE(
                     STRSUBSTNO(Text001,
                             GenJnlLine.FIELDCAPTION(GenJnlLine."Journal Template Name"),
                             Template,
                             GenJnlLine.FIELDCAPTION("Journal Batch Name"),
                             Batch));
                   END;
                 END;

  }
  DATASET
  {
    { 8586;    ;DataItem;CustLedgerEntry     ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Agreement No.,Agreement Condition No.,Amount Type,Posting Date,Positive,Currency Code,Customer Posting Group,Open)
                                 ORDER(Ascending);
               OnPreDataItem=BEGIN
                               tmpGenJnlLine.DELETEALL;
                               IF NOT IsCustReserve THEN
                                 CurrReport.BREAK;

                               CustLedgerEntry.COPYFILTERS(CLE);
                               CustLedgerEntry.SETRANGE("Amount Type",CustLedgerEntry."Amount Type"::Principal);
                               CustLedgerEntry.SETRANGE(Positive, TRUE);
                               CustLedgerEntry.SETRANGE(Open,TRUE);
                             END;

               OnAfterGetRecord=BEGIN
                                  CustLedgerEntry.CALCFIELDS(Amount, "Remaining Amount");
                                  IF CustAgreement.GET(CustLedgerEntry."Customer No.",CustLedgerEntry."Agreement No.") AND
                                    CustPostingGroup.GET(CustAgreement."Reserve Posting Group")
                                  THEN BEGIN
                                      CustPostingGroup.TESTFIELD("Loan Reserve Account");
                                      NextLineNo += 1000;
                                      tmpGenJnlLine.INIT;
                                      tmpGenJnlLine."Journal Template Name" := Template;
                                      tmpGenJnlLine."Journal Batch Name" := Batch;
                                      tmpGenJnlLine."Line No." := NextLineNo;
                                      tmpGenJnlLine."Account Type" := tmpGenJnlLine."Account Type"::Customer;
                                      tmpGenJnlLine."Account No." := CustLedgerEntry."Customer No.";
                                      tmpGenJnlLine."Posting Date" := CustLedgerEntry."Posting Date";
                                      tmpGenJnlLine."Document Type" := 0;
                                      tmpGenJnlLine."Document No." := CustLedgerEntry."Document No."+'-R';
                                      tmpGenJnlLine."Document Date" := CustLedgerEntry."Document Date";
                                      tmpGenJnlLine."External Document No." := CustLedgerEntry."Document No."+'-R';
                                      tmpGenJnlLine.Description := COPYSTR(CustLedgerEntry.Description+'-Reserve',1,MAXSTRLEN(tmpGenJnlLine.Description));
                                      tmpGenJnlLine."Currency Code" := CustLedgerEntry."Currency Code";
                                      tmpGenJnlLine."Agreement No." := CustLedgerEntry."Agreement No.";
                                      tmpGenJnlLine."Agreement Condition No." := CustLedgerEntry."Agreement Condition No.";
                                      tmpGenJnlLine."Posting Group" := CustAgreement."Reserve Posting Group";
                                      tmpGenJnlLine."Amount Type" := tmpGenJnlLine."Amount Type"::Reserve;
                                      tmpGenJnlLine."Currency Factor" := CustLedgerEntry."Original Currency Factor";
                                      tmpGenJnlLine.VALIDATE(Amount, - ROUND(CustLedgerEntry."Remaining Amount"*CustAgreement."Reserve %"/100));
                                      tmpGenJnlLine."Shortcut Dimension 1 Code" := CustLedgerEntry."Global Dimension 1 Code";
                                      tmpGenJnlLine."Shortcut Dimension 2 Code" := CustLedgerEntry."Global Dimension 2 Code";
                                      tmpGenJnlLine."Salespers./Purch. Code" := CustLedgerEntry."Salesperson Code";
                                      tmpGenJnlLine."Source Code" := CustLedgerEntry."Source Code";
                                      tmpGenJnlLine.Quantity := 0;
                                      tmpGenJnlLine."Source Entry No." := CustLedgerEntry."Entry No.";
                                      tmpGenJnlLine."Bal. Account Type" := tmpGenJnlLine."Bal. Account Type"::"G/L Account";
                                      tmpGenJnlLine."Bal. Account No." := CustPostingGroup."Loan Reserve Account";
                                      //NC S1893 > PCH
                                      tmpGenJnlLine."Business Unit Code" := CustLedgerEntry."Business Unit Code";
                                      //NC S1893 < PCH
                                      tmpGenJnlLine.INSERT(TRUE);
                                  END;
                                END;
                                 }

    { 7908;    ;DataItem;VendLedgerEntry     ;
               DataItemTable=Table25;
               DataItemTableView=SORTING(Vendor No.,Agreement No.,Agreement Condition No.,Amount Type,Posting Date,Positive,Currency Code,Vendor Posting Group,Open)
                                 ORDER(Ascending);
               OnPreDataItem=BEGIN
                               IF NOT IsVendReserve THEN
                                 CurrReport.BREAK;
                               VendLedgerEntry.COPYFILTERS(VLE);
                               VendLedgerEntry.SETRANGE("Amount Type",CustLedgerEntry."Amount Type"::Principal);
                               VendLedgerEntry.SETRANGE(Positive, FALSE);
                               VendLedgerEntry.SETRANGE(Open,TRUE);
                             END;

               OnAfterGetRecord=BEGIN
                                  VendLedgerEntry.CALCFIELDS(Amount, "Remaining Amount");
                                  IF VendAgreement.GET(VendLedgerEntry."Vendor No.",VendLedgerEntry."Agreement No.") AND
                                    VendPostingGroup.GET(VendAgreement."Reserve Posting Group") THEN BEGIN
                                      VendPostingGroup.TESTFIELD("Loan Reserve Account");
                                      NextLineNo += 1000;
                                      tmpGenJnlLine.INIT;
                                      tmpGenJnlLine."Journal Template Name" := Template;
                                      tmpGenJnlLine."Journal Batch Name" := Batch;
                                      tmpGenJnlLine."Line No." := NextLineNo;
                                      tmpGenJnlLine."Account Type" := tmpGenJnlLine."Account Type"::Vendor;
                                      tmpGenJnlLine."Account No." := VendLedgerEntry."Vendor No.";
                                      tmpGenJnlLine."Posting Date" := VendLedgerEntry."Posting Date";
                                      tmpGenJnlLine."Document Type" := 0;
                                      tmpGenJnlLine."Document No." := VendLedgerEntry."Document No."+'-R';
                                      tmpGenJnlLine."Document Date" := VendLedgerEntry."Document Date";
                                      tmpGenJnlLine."External Document No." := VendLedgerEntry."Document No."+'-R';
                                      tmpGenJnlLine.Description := COPYSTR(VendLedgerEntry.Description+'-Reserve',1,MAXSTRLEN(tmpGenJnlLine.Description));
                                      tmpGenJnlLine."Currency Code" := VendLedgerEntry."Currency Code";
                                      tmpGenJnlLine."Agreement No." := VendLedgerEntry."Agreement No.";
                                      tmpGenJnlLine."Agreement Condition No." := VendLedgerEntry."Agreement Condition No.";
                                      tmpGenJnlLine."Posting Group" := VendAgreement."Reserve Posting Group";
                                      tmpGenJnlLine."Amount Type" := tmpGenJnlLine."Amount Type"::Reserve;
                                      tmpGenJnlLine."Currency Factor" := VendLedgerEntry."Original Currency Factor";
                                      tmpGenJnlLine.VALIDATE(Amount, - ROUND(VendLedgerEntry."Remaining Amount"*VendAgreement."Reserve %"/100));
                                      tmpGenJnlLine."Shortcut Dimension 1 Code" := VendLedgerEntry."Global Dimension 1 Code";
                                      tmpGenJnlLine."Shortcut Dimension 2 Code" := VendLedgerEntry."Global Dimension 2 Code";
                                      tmpGenJnlLine."Salespers./Purch. Code" := VendLedgerEntry."Purchaser Code";
                                      tmpGenJnlLine."Source Code" := VendLedgerEntry."Source Code";
                                      tmpGenJnlLine."Source Entry No." := VendLedgerEntry."Entry No.";
                                      tmpGenJnlLine.Quantity := 0;
                                      tmpGenJnlLine."Bal. Account Type" := tmpGenJnlLine."Bal. Account Type"::"G/L Account";
                                      tmpGenJnlLine."Bal. Account No." := VendPostingGroup."Loan Reserve Account";
                                      //NC S1893 > PCH
                                      tmpGenJnlLine."Business Unit Code" := VendLedgerEntry."Business Unit Code";
                                      //NC S1893 < PCH
                                      tmpGenJnlLine.INSERT(TRUE);
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1101495000;;Container;
                  ContainerType=ContentArea }

      { 1101495003;1;Group  ;
                  CaptionML=[ENU=Report options;
                             RUS=Параметры отчета];
                  GroupType=Group }

      { 1101495001;2;Field  ;
                  CaptionML=[ENU=Gen. Journal Template;
                             RUS=Фин. Журнал Шаблон];
                  SourceExpr=Template;
                  TableRelation="Gen. Journal Template" }

      { 1101495002;2;Field  ;
                  CaptionML=[ENU=Gen. Journal Batch.;
                             RUS=Фин. Журнал Раздел];
                  SourceExpr=Batch;
                  OnValidate=BEGIN
                               //NC PIF001 > DP
                               IF Batch <> '' THEN BEGIN
                                 GenJnlBatch.GET(Template, Batch);
                               END;
                               //NC PIF001 < DP
                             END;

                  OnLookup=BEGIN
                             //NC PIF001 > DP
                             GenJnlBatch.SETRANGE("Journal Template Name", Template);
                             IF PAGE.RUNMODAL(PAGE::"General Journal Batches", GenJnlBatch) = ACTION::LookupOK THEN BEGIN
                               Batch := GenJnlBatch.Name;
                             END;
                             //NC PIF001 < DP
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      IsCustReserve@1101495000 : Boolean;
      IsVendReserve@1101495001 : Boolean;
      NextLineNo@1101495002 : Integer;
      GenJnlLine@1101495003 : Record 81;
      tmpGenJnlLine@1101495006 : TEMPORARY Record 81;
      DocumentNo@1101495018 : Code[20];
      Template@1101495004 : Code[10];
      Batch@1101495005 : Code[10];
      LineMin@1101495015 : Integer;
      LineMax@1101495007 : Integer;
      CustPostingGroup@1101495008 : Record 92;
      VendPostingGroup@1101495009 : Record 93;
      CustAgreement@1101495010 : Record 14902;
      VendAgreement@1101495011 : Record 14901;
      IsPost@1101495012 : Boolean;
      GenJnlLinePost@1101495013 : Codeunit 231;
      Text001@1101495014 : TextConst 'ENU=Accruals have been completed. You should post G/L Journal %1 %2, %3 %4.;RUS=Начисление завершено. Необходимо учесть строки Фин. Журнала %1 %2, %3 %4.';
      DimMgt@1101495016 : Codeunit 408;
      PostDescription@1101495019 : Text[50];
      StandParameter@1101495020 : Record 50076;
      GenJnlBatch@1101495029 : Record 232;
      GenJnlTemplate@1101495028 : Record 80;
      Text007@1101495022 : TextConst 'ENU="You should setup ";RUS="Не заполнены настройки в "';
      Text008@1101495021 : TextConst 'ENU=" for ''Loans - Reserve Create''";RUS=" для ''Кредиты/Займы - Резерв Создание''"';
      GLSetup@1101495023 : Record 98;
      CLE@1101495024 : Record 21;
      VLE@1101495025 : Record 25;

    PROCEDURE SetParameters@1101495000(IsCustReserve2@1101495000 : Boolean;IsVendReserve2@1101495001 : Boolean;VAR CLE2@1101495002 : Record 21;VAR VLE2@1101495003 : Record 25);
    BEGIN
      IsCustReserve := IsCustReserve2;
      IsVendReserve := IsVendReserve2;
      CLE.COPYFILTERS(CLE2);
      VLE.COPYFILTERS(VLE2);
    END;

    PROCEDURE CopyLedgDimToJnlLineDim@1101495001(VAR GenJnlLine2@1101495000 : Record 81);
    VAR
      RecRef@1101495001 : RecordRef;
      FldRef@1101495002 : FieldRef;
      DimSetID@1101495003 : ARRAY [10] OF Integer;
    BEGIN
      //NC NOS-26 > SPA
      CASE GenJnlLine."Account Type" OF
        GenJnlLine."Account Type"::Customer:
          RecRef.OPEN(DATABASE::Customer);
        GenJnlLine."Account Type"::Vendor:
          RecRef.OPEN(DATABASE::Vendor)
      END;
      FldRef := RecRef.FIELD(1); // Entry No.
      FldRef.SETRANGE(GenJnlLine2."Source Entry No.");
      IF RecRef.FINDFIRST THEN BEGIN
        DimSetID[1] := GenJnlLine2."Dimension Set ID";

        FldRef := RecRef.FIELD(480); // Dimension Set ID
        DimSetID[2] := FldRef.VALUE;

        GenJnlLine2."Dimension Set ID" :=
          DimMgt.GetCombinedDimensionSetID(DimSetID,
            GenJnlLine2."Shortcut Dimension 1 Code",
            GenJnlLine2."Shortcut Dimension 2 Code");
      END;

      {
      CVLedgEntryDim.RESET;
      CASE GenJnlLine."Account Type" OF
        GenJnlLine."Account Type"::Customer:
          CVLedgEntryDim.SETRANGE("Table ID",21);
        GenJnlLine."Account Type"::Vendor:
          CVLedgEntryDim.SETRANGE("Table ID",25);
      END;
      CVLedgEntryDim.SETRANGE("Entry No.",GenJnlLine2."Source Entry No.");
      IF NOT CVLedgEntryDim.ISEMPTY THEN
        DimMgt.MoveLedgEntryDimToJnlLineDim(CVLedgEntryDim,
                                           JnlLineDim,
                                           81,
                                           GenJnlLine2."Journal Template Name",
                                           GenJnlLine2."Journal Batch Name",
                                           GenJnlLine2."Line No.",
                                           0);
      }
      //NC NOS-26 < SPA

      CopyDefDimToJnlLineDim(GenJnlLine2);
    END;

    PROCEDURE CopyDefDimToJnlLineDim@1000000000(VAR GenJnlLine2@1210002 : Record 81);
    VAR
      DefDim@1000000000 : Record 352;
      TempDimSetEntry@1101495001 : TEMPORARY Record 480;
      DimSetEntry@1101495000 : Record 480;
    BEGIN
      DefDim.RESET;
      DefDim.SETRANGE("Table ID",DATABASE::"Period. Activities Stand. Par.");
      DefDim.SETRANGE("No.",StandParameter.Code);

      IF DefDim.FINDFIRST THEN BEGIN
        //NC NOS-26 > SPA
        DimMgt.GetDimensionSet(TempDimSetEntry,GenJnlLine2."Dimension Set ID");
        TempDimSetEntry.SetObject(GenJnlLine2);
        //NC NOS-26 < SPA
        REPEAT
          IF DefDim."Dimension Value Code"<>'' THEN BEGIN
            //NC NOS-26 > SPA
            TempDimSetEntry.VALIDATE("Dimension Code",DefDim."Dimension Code");
            //варианты перезаписи измерений в зависимости от типа учета значения
            CASE DefDim."Value Posting" OF
              DefDim."Value Posting"::"Code Mandatory": BEGIN
                IF TempDimSetEntry.FIND THEN
                  TempDimSetEntry.DELETE;
                TempDimSetEntry.VALIDATE("Dimension Value Code",DefDim."Dimension Value Code");
                TempDimSetEntry.INSERT(TRUE);
              END;

              ELSE BEGIN
                IF TempDimSetEntry.FIND THEN BEGIN
                  IF TempDimSetEntry."Dimension Value Code" = '' THEN BEGIN
                    TempDimSetEntry.DELETE;
                    TempDimSetEntry.VALIDATE("Dimension Value Code",DefDim."Dimension Value Code");
                    TempDimSetEntry.INSERT(TRUE);
                  END;
                END ELSE BEGIN
                  TempDimSetEntry.VALIDATE("Dimension Value Code",DefDim."Dimension Value Code");
                  TempDimSetEntry.INSERT(TRUE);
                END;
              END;
            END;
            {
            JnlLineDim.INIT;
            JnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
            JnlLineDim."Journal Template Name" := GenJnlLine2."Journal Template Name";
            JnlLineDim."Journal Batch Name" := GenJnlLine2."Journal Batch Name";
            JnlLineDim."Journal Line No." := GenJnlLine2."Line No.";
            JnlLineDim."Dimension Code" := DefDim."Dimension Code";
            JnlLineDim.VALIDATE("Dimension Value Code",DefDim."Dimension Value Code");
            IF NOT JnlLineDim.INSERT(TRUE) THEN
              //варианты перезаписи измерений в зависимости от типа учета значения
              CASE DefDim."Value Posting" OF
                DefDim."Value Posting"::"Code Mandatory": JnlLineDim.MODIFY(TRUE);
                ELSE
                  IF JnlLineDim2.GET(JnlLineDim."Table ID",JnlLineDim."Journal Template Name",JnlLineDim."Journal Batch Name",
                     JnlLineDim."Journal Line No.",JnlLineDim."Allocation Line No.",JnlLineDim."Dimension Code") THEN
                    IF JnlLineDim2."Dimension Value Code"='' THEN
                      JnlLineDim.MODIFY(TRUE);
              END;
            IF DefDim."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
              GenJnlLine2."Shortcut Dimension 1 Code" := DefDim."Dimension Value Code";
            IF DefDim."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
              GenJnlLine2."Shortcut Dimension 2 Code" := DefDim."Dimension Value Code";
            }
            //NC NOS-26 < SPA
          END;
        UNTIL DefDim.NEXT = 0;

        //NC NOS-26 > SPA
        DimMgt.UpdateGenJnlLineDim(GenJnlLine2,DimMgt.GetDimensionSetID(TempDimSetEntry));
        GenJnlLine2.MODIFY;
        //NC NOS-26 < SPA
      END;
    END;

    BEGIN
    {
      NC NCS-1268 DP Создан отчет для формирования резерва по основному долгу
      NC S1893 PCH
      -------------------
      NC NOS-26 SPA Миграция на NAV2017
    }
    END.
  }
  RDLDATA
  {
  }
}

