OBJECT Codeunit 17470 RSV Calculation Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15.09.15;
    Time=12:00:00;
    Version List=NAVRU9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      HumanResourcesSetup@1210000 : Record 5218;
      PayrollElementCode@1210001 : ARRAY [8] OF Code[50];

    PROCEDURE CalcDetailedBuffer@1210000(VAR DetailPayrollReportingBuffer@1210000 : Record 17470;VAR TotalPaidPayrollReportingBuffer@1210016 : Record 17470;VAR Person@1210012 : Record 17350;RepStartDate@1210001 : Date;RepEndDate@1210002 : Date);
    VAR
      TempDisabilityPersonMedicalInfo@1210006 : TEMPORARY Record 17353;
      TempSpecialConditionPersonMedicalInfo@1210009 : TEMPORARY Record 17353;
      PeriodStartDate@1210007 : ARRAY [4] OF Date;
      PeriodEndDate@1210005 : ARRAY [4] OF Date;
      PersonPeriodStartDate@1210015 : Date;
      PersonPeriodEndDate@1210014 : Date;
      PersonStartDate@1210011 : Date;
      PersonEndDate@1210010 : Date;
      StartDate@1210003 : Date;
      EndDate@1210013 : Date;
      PeriodCodes@1210008 : ARRAY [4] OF Code[20];
      PersonCount@1210019 : Integer;
      PackNo@1210020 : Integer;
      i@1210004 : Integer;
    BEGIN
      CheckHRSetup;
      DetailPayrollReportingBuffer.DELETEALL;
      TotalPaidPayrollReportingBuffer.DELETEALL;
      PreparePeriodDates(PeriodStartDate,PeriodEndDate,RepEndDate);
      PreparePeriodCodes(PeriodCodes);

      PersonCount := 0;
      PackNo := 1;
      IF Person.FINDSET THEN
        REPEAT
          IF GetPersonPeriodDates(PersonPeriodStartDate,PersonPeriodEndDate,Person."No.",RepStartDate,RepEndDate) THEN BEGIN
            GetDisabilityPeriods(TempDisabilityPersonMedicalInfo,Person."No.",PersonPeriodStartDate,PersonPeriodEndDate);
            IF TempDisabilityPersonMedicalInfo.FINDSET THEN
              REPEAT
                GetSpecialConditionPeriods(
                  TempSpecialConditionPersonMedicalInfo,Person."No.",
                  TempDisabilityPersonMedicalInfo."Starting Date",TempDisabilityPersonMedicalInfo."Ending Date");
                IF TempSpecialConditionPersonMedicalInfo.FINDSET THEN
                  REPEAT
                    PersonStartDate := TempSpecialConditionPersonMedicalInfo."Starting Date";
                    PersonEndDate := TempSpecialConditionPersonMedicalInfo."Ending Date";
                    FOR i := 1 TO ARRAYLEN(PeriodCodes) DO
                      IF (PersonStartDate <= PeriodEndDate[i]) AND
                         (PersonEndDate >= PeriodStartDate[i])
                      THEN BEGIN
                        StartDate := GetMaxDate(PeriodStartDate[i],PersonStartDate);
                        EndDate := GetMinDate(PeriodEndDate[i],PersonEndDate);
                        CalcAmountsForPeriod(
                          DetailPayrollReportingBuffer,
                          TotalPaidPayrollReportingBuffer,
                          Person."No.",i,StartDate,EndDate,PeriodCodes[i],
                          GetTariffCode(TempDisabilityPersonMedicalInfo."Disability Group"),
                          TempSpecialConditionPersonMedicalInfo."Insurer No.");
                      END;
                  UNTIL TempSpecialConditionPersonMedicalInfo.NEXT = 0;
              UNTIL TempDisabilityPersonMedicalInfo.NEXT = 0;
          END;

          IF UpdatePackNoInBuffer(DetailPayrollReportingBuffer,PackNo) OR
             UpdatePackNoInBuffer(TotalPaidPayrollReportingBuffer,PackNo)
          THEN
            GetNextPackNo(PackNo,PersonCount);
        UNTIL Person.NEXT = 0;
      DetailPayrollReportingBuffer.RESET;
      TotalPaidPayrollReportingBuffer.RESET;
    END;

    PROCEDURE CalcBeginBalanceBuffer@1210029(VAR TotalPaidPayrollReportingBuffer@1210016 : Record 17470;VAR Person@1210012 : Record 17350;RepStartDate@1210002 : Date);
    VAR
      StartDate@1210003 : Date;
      EndDate@1210013 : Date;
    BEGIN
      StartDate := 0D;
      EndDate := CALCDATE('<-CY-1D>',RepStartDate);

      IF Person.FINDSET THEN
        REPEAT
          CalcTotalAmountsForPeriod(TotalPaidPayrollReportingBuffer,Person."No.",StartDate,EndDate);
        UNTIL Person.NEXT = 0;

      PrepareTotalAmounts(TotalPaidPayrollReportingBuffer);
    END;

    LOCAL PROCEDURE CalcAmountsForPeriod@1210019(VAR DetailPayrollReportingBuffer@1210006 : Record 17470;VAR TotalPaidPayrollReportingBuffer@1210011 : Record 17470;PersonNo@1210000 : Code[20];PeriodNo@1210008 : Integer;StartDate@1210005 : Date;EndDate@1210004 : Date;PeriodCode@1210001 : Code[20];TariffCode@1210002 : Code[20];SpecialCode@1210003 : Code[20]);
    VAR
      PayrollAmounts@1210009 : ARRAY [8] OF Decimal;
      PaidAmounts@1210010 : ARRAY [8] OF Decimal;
      i@1210007 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(PayrollAmounts) DO
        CalcPayrollAmount(PayrollAmounts[i],PaidAmounts[i],PersonNo,StartDate,EndDate,PayrollElementCode[i]);

      // Detail Buffer
      IF CheckAmounts(PayrollAmounts) OR (PeriodNo = 1) THEN
        InsertPersRepBuffer(
          DetailPayrollReportingBuffer,PersonNo,PeriodCode,TariffCode,SpecialCode,PayrollAmounts);

      // Total Buffer
      InsertPersRepBuffer(
        TotalPaidPayrollReportingBuffer,'TOTAL_PAID',PeriodCode,'','',PaidAmounts);
    END;

    LOCAL PROCEDURE CalcTotalAmountsForPeriod@1210031(VAR TotalPaidPayrollReportingBuffer@1210011 : Record 17470;PersonNo@1210000 : Code[20];StartDate@1210005 : Date;EndDate@1210004 : Date);
    VAR
      PayrollAmounts@1210009 : ARRAY [8] OF Decimal;
      PaidAmounts@1210010 : ARRAY [8] OF Decimal;
      i@1210007 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(PayrollAmounts) DO
        CalcPayrollAmount(PayrollAmounts[i],PaidAmounts[i],PersonNo,StartDate,EndDate,PayrollElementCode[i]);

      InsertPersRepBuffer(
        TotalPaidPayrollReportingBuffer,'TOTAL_CHARGE','4','','',PayrollAmounts);

      InsertPersRepBuffer(
        TotalPaidPayrollReportingBuffer,'TOTAL_PAID','4','','',PaidAmounts);
    END;

    LOCAL PROCEDURE CalcPayrollAmount@1210001(VAR PayrollAmount@1210008 : Decimal;VAR PaidAmount@1210007 : Decimal;PersonNo@1210001 : Code[20];StartDate@1210000 : Date;EndDate@1210004 : Date;ElementCode@1210003 : Code[50]);
    VAR
      PayrollLedgEntry@1210002 : Record 17418;
      Employee@1210005 : Record 5200;
      VendorLedgerEntry@1210006 : Record 25;
    BEGIN
      WITH PayrollLedgEntry DO BEGIN
        PayrollAmount := 0;
        PaidAmount := 0;
        SETRANGE("Posting Date",StartDate,EndDate);
        SETFILTER("Element Code",ElementCode);

        Employee.SETRANGE("Person No.",PersonNo);
        IF Employee.FINDSET THEN
          REPEAT
            SETRANGE("Employee No.",Employee."No.");
            IF FINDSET THEN
              REPEAT
                PayrollAmount += "Payroll Amount";
                VendorLedgerEntry.SETRANGE("Payroll Ledger Entry No.","Entry No.");
                IF VendorLedgerEntry.FINDSET THEN
                  REPEAT
                    IF VendorLedgerEntry."Vendor No." = GetFundVendorNo("Element Code") THEN BEGIN
                      VendorLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
                      PaidAmount += ABS(VendorLedgerEntry.Amount - VendorLedgerEntry."Remaining Amount");
                    END;
                  UNTIL VendorLedgerEntry.NEXT = 0;
              UNTIL NEXT = 0;
          UNTIL Employee.NEXT = 0;
      END;
    END;

    PROCEDURE CalcTotals110_113@1210021(VAR DetailPayrollReportingBuffer@1210005 : Record 17470;VAR TotalChargeAmtPayrollReportingBuffer@1210006 : Record 17470);
    VAR
      i@1210004 : Integer;
    BEGIN
      TotalChargeAmtPayrollReportingBuffer.DELETEALL;
      DetailPayrollReportingBuffer.RESET;

      FOR i := 0 TO 3 DO BEGIN
        DetailPayrollReportingBuffer.SETRANGE("Code 2",FORMAT(i));
        DetailPayrollReportingBuffer.CALCSUMS("Amount 5","Amount 6","Amount 8","Amount 9");
        TotalChargeAmtPayrollReportingBuffer := DetailPayrollReportingBuffer;
        TotalChargeAmtPayrollReportingBuffer."Entry No." := i + 1;
        TotalChargeAmtPayrollReportingBuffer."Code 2" := FORMAT(i);
        TotalChargeAmtPayrollReportingBuffer.INSERT;
      END;

      PrepareTotalAmounts(TotalChargeAmtPayrollReportingBuffer);
    END;

    PROCEDURE CalcTotals100@1210036(VAR TotalPaidAmtPayrollReportingBuffer@1210001 : Record 17470;VAR TotalAmt100PayrollReportingBuffer@1210000 : Record 17470);
    VAR
      TempChargeBeginBalancePayrollReportingBuffer@1210002 : TEMPORARY Record 17470;
    BEGIN
      TotalPaidAmtPayrollReportingBuffer.SETRANGE("Code 1",'TOTAL_CHARGE');
      TotalPaidAmtPayrollReportingBuffer.SETRANGE("Code 2",'4');
      IF NOT TotalPaidAmtPayrollReportingBuffer.FINDFIRST THEN
        EXIT;

      TempChargeBeginBalancePayrollReportingBuffer := TotalPaidAmtPayrollReportingBuffer;

      TotalPaidAmtPayrollReportingBuffer.RESET;
      TotalPaidAmtPayrollReportingBuffer.SETRANGE("Code 1",'TOTAL_PAID');
      TotalPaidAmtPayrollReportingBuffer.SETRANGE("Code 2",'4');
      IF NOT TotalPaidAmtPayrollReportingBuffer.FINDFIRST THEN
        EXIT;

      CalcBufferSums(
        TotalAmt100PayrollReportingBuffer,
        TempChargeBeginBalancePayrollReportingBuffer,
        TotalPaidAmtPayrollReportingBuffer,-1);
    END;

    PROCEDURE CalcTotalsSums@1210037(VAR ResultPayrollReportingBuffer@1210000 : Record 17470;VAR FirstPayrollReportingBuffer@1210001 : Record 17470;VAR SecondPayrollReportingBuffer@1210002 : Record 17470;SignFactor@1210003 : Integer);
    BEGIN
      SecondPayrollReportingBuffer.RESET;
      SecondPayrollReportingBuffer.SETRANGE("Code 2",'0');
      IF NOT SecondPayrollReportingBuffer.FINDFIRST THEN
        EXIT;

      CalcBufferSums(ResultPayrollReportingBuffer,FirstPayrollReportingBuffer,SecondPayrollReportingBuffer,SignFactor);
    END;

    LOCAL PROCEDURE CalcBufferSums@1210039(VAR ResultPayrollReportingBuffer@1210000 : Record 17470;VAR FirstPayrollReportingBuffer@1210001 : Record 17470;VAR SecondPayrollReportingBuffer@1210002 : Record 17470;SignFactor@1210003 : Integer);
    BEGIN
      ResultPayrollReportingBuffer."Amount 1" :=
        FirstPayrollReportingBuffer."Amount 1" + SignFactor * SecondPayrollReportingBuffer."Amount 1";
      ResultPayrollReportingBuffer."Amount 2" :=
        FirstPayrollReportingBuffer."Amount 2" + SignFactor * SecondPayrollReportingBuffer."Amount 2";
      ResultPayrollReportingBuffer."Amount 3" :=
        FirstPayrollReportingBuffer."Amount 3" + SignFactor * SecondPayrollReportingBuffer."Amount 3";
      ResultPayrollReportingBuffer."Amount 4" :=
        FirstPayrollReportingBuffer."Amount 4" + SignFactor * SecondPayrollReportingBuffer."Amount 4";
      ResultPayrollReportingBuffer."Amount 5" :=
        FirstPayrollReportingBuffer."Amount 5" + SignFactor * SecondPayrollReportingBuffer."Amount 5";
      ResultPayrollReportingBuffer."Amount 6" :=
        FirstPayrollReportingBuffer."Amount 6" + SignFactor * SecondPayrollReportingBuffer."Amount 6";
    END;

    LOCAL PROCEDURE AddPersRepBuffAmounts@1210014(VAR RSVPayrollReportingBuffer@1210000 : Record 17470;PayrollAmounts@1210001 : ARRAY [8] OF Decimal);
    BEGIN
      WITH RSVPayrollReportingBuffer DO BEGIN
        "Amount 1" += PayrollAmounts[1] + PayrollAmounts[6];
        "Amount 2" += PayrollAmounts[1] - PayrollAmounts[2];
        "Amount 3" += PayrollAmounts[2];
        "Amount 4" += PayrollAmounts[3];
        "Amount 5" += PayrollAmounts[4];
        "Amount 6" += PayrollAmounts[5];
        "Amount 7" += PayrollAmounts[1];
        "Amount 8" += PayrollAmounts[7];
        "Amount 9" += PayrollAmounts[8];
      END;
    END;

    LOCAL PROCEDURE PreparePeriodDates@1210005(VAR PeriodStartDate@1210000 : ARRAY [4] OF Date;VAR PeriodEndDate@1210001 : ARRAY [4] OF Date;RepEndDate@1210003 : Date);
    VAR
      i@1210004 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(PeriodStartDate) DO
        GetPeriodDates(PeriodStartDate[i],PeriodEndDate[i],RepEndDate,i - 1);
    END;

    LOCAL PROCEDURE PreparePeriodCodes@1210017(VAR PeriodCodes@1210000 : ARRAY [4] OF Code[20]);
    BEGIN
      PeriodCodes[1] := '0';
      PeriodCodes[2] := '1';
      PeriodCodes[3] := '2';
      PeriodCodes[4] := '3';
    END;

    LOCAL PROCEDURE PrepareTotalAmounts@1210025(VAR AmountsPayrollReportingBuffer@1210000 : Record 17470);
    BEGIN
      WITH AmountsPayrollReportingBuffer DO BEGIN
        RESET;
        IF FINDSET THEN
          REPEAT
            "Amount 1" := ABS("Amount 8");
            "Amount 2" := 0;
            "Amount 3" := 0;
            "Amount 4" := ABS("Amount 5");
            "Amount 5" := ABS("Amount 6");
            "Amount 6" := ABS("Amount 9");
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetPersonPeriodDates@1210007(VAR StartDate@1210003 : Date;VAR EndDate@1210004 : Date;PersonNo@1210005 : Code[20];RepStartDate@1210001 : Date;RepEndDate@1210002 : Date) : Boolean;
    VAR
      LaborContractLine@1210000 : Record 17361;
    BEGIN
      WITH LaborContractLine DO BEGIN
        StartDate := 0D;
        EndDate := 0D;
        FilterLaborContractInfo(LaborContractLine,PersonNo,RepStartDate,RepEndDate);
        IF NOT FINDSET THEN
          EXIT(FALSE);

        REPEAT
          StartDate := GetMinDate("Starting Date",StartDate);
          EndDate := GetMaxDate("Ending Date",EndDate);
        UNTIL NEXT = 0;

        StartDate := GetMaxDate(StartDate,RepStartDate);
        EndDate := GetMinDate(EndDate,RepEndDate);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetDisabilityPeriods@1210045(VAR DisabilityPersonMedicalInfo@1210004 : Record 17353;PersonNo@1210000 : Code[20];StartDate@1210001 : Date;EndDate@1210002 : Date);
    VAR
      PersonMedicalInfo@1210005 : Record 17353;
      PeriodStartDate@1210007 : Date;
      PeriodEndDate@1210006 : Date;
    BEGIN
      // Supported only one type of disability
      // If Person with disability for specified period then "Disability Group" = "1", else = " "
      WITH DisabilityPersonMedicalInfo DO BEGIN
        DELETEALL;
        FilterPersonMedicalDisabilityInfo(PersonMedicalInfo,PersonNo,StartDate,EndDate);
        IF PersonMedicalInfo.FINDSET THEN BEGIN
          REPEAT
            PeriodStartDate := GetMaxDate(PersonMedicalInfo."Starting Date",StartDate);
            PeriodEndDate := GetMinDate(PersonMedicalInfo."Ending Date",EndDate);
            IF NOT FINDLAST THEN
              InsertDisabilityPeriod(DisabilityPersonMedicalInfo,PeriodStartDate,PeriodEndDate,"Disability Group"::"1")
            ELSE
              IF "Ending Date" < PeriodStartDate THEN BEGIN
                InsertDisabilityPeriod(
                  DisabilityPersonMedicalInfo,CALCDATE('<+1D>',"Ending Date"),
                  CALCDATE('<-1D>',PeriodStartDate),"Disability Group"::" ");
                InsertDisabilityPeriod(DisabilityPersonMedicalInfo,PeriodStartDate,PeriodEndDate,"Disability Group"::"1");
              END ELSE BEGIN
                "Ending Date" := PeriodEndDate;
                MODIFY;
              END;
          UNTIL PersonMedicalInfo.NEXT = 0;

          IF PeriodEndDate < EndDate THEN
            InsertDisabilityPeriod(
              DisabilityPersonMedicalInfo,CALCDATE('<+1D>',PeriodEndDate),EndDate,"Disability Group"::" ");

          FINDFIRST;
          IF "Starting Date" > StartDate THEN
            InsertDisabilityPeriod(
              DisabilityPersonMedicalInfo,StartDate,CALCDATE('<-1D>',"Starting Date"),"Disability Group"::" ");
        END ELSE
          InsertDisabilityPeriod(DisabilityPersonMedicalInfo,StartDate,EndDate,"Disability Group"::" ");
      END;
    END;

    LOCAL PROCEDURE GetSpecialConditionPeriods@1210015(VAR SpecialConditionPersonMedicalInfo@1210000 : Record 17353;PersonNo@1210004 : Code[20];StartDate@1210003 : Date;EndDate@1210002 : Date);
    VAR
      LaborContractLine@1210001 : Record 17361;
      PeriodStartDate@1210006 : Date;
      PeriodEndDate@1210005 : Date;
    BEGIN
      // Use the same method as in GetDisabilityPeriods()
      WITH SpecialConditionPersonMedicalInfo DO BEGIN
        DELETEALL;
        FilterLaborContractSpecialCondInfo(LaborContractLine,PersonNo,StartDate,EndDate);
        IF LaborContractLine.FINDSET THEN BEGIN
          REPEAT
            PeriodStartDate := GetMaxDate(LaborContractLine."Starting Date",StartDate);
            PeriodEndDate := GetMinDate(LaborContractLine."Ending Date",EndDate);
            IF NOT FINDLAST THEN
              InsertSpecialCondPeriod(
                SpecialConditionPersonMedicalInfo,PeriodStartDate,PeriodEndDate,LaborContractLine."Special Conditions")
            ELSE BEGIN
              IF "Ending Date" < PeriodStartDate THEN BEGIN
                InsertSpecialCondPeriod(
                  SpecialConditionPersonMedicalInfo,CALCDATE('<+1D>',"Ending Date"),CALCDATE('<-1D>',PeriodStartDate),'');
                InsertSpecialCondPeriod(
                  SpecialConditionPersonMedicalInfo,PeriodStartDate,PeriodEndDate,LaborContractLine."Special Conditions");
              END ELSE
                IF "Ending Date" < PeriodEndDate THEN
                  InsertSpecialCondPeriod(
                    SpecialConditionPersonMedicalInfo,
                    CALCDATE('<+1D>',"Ending Date"),PeriodEndDate,LaborContractLine."Special Conditions");
            END;
          UNTIL LaborContractLine.NEXT = 0;

          IF PeriodEndDate < EndDate THEN
            InsertSpecialCondPeriod(SpecialConditionPersonMedicalInfo,CALCDATE('<+1D>',PeriodEndDate),EndDate,'');

          FINDFIRST;
          IF "Starting Date" > StartDate THEN
            InsertSpecialCondPeriod(SpecialConditionPersonMedicalInfo,StartDate,CALCDATE('<-1D>',"Starting Date"),'');
        END ELSE
          InsertSpecialCondPeriod(SpecialConditionPersonMedicalInfo,StartDate,EndDate,'');
      END;
    END;

    LOCAL PROCEDURE GetPeriodDates@1210022(VAR StartDate@1210000 : Date;VAR EndDate@1210001 : Date;RepEndDate@1210003 : Date;PeriodCode@1210004 : Integer);
    BEGIN
      CASE PeriodCode OF
        0:
          BEGIN
            StartDate := CALCDATE('<-CY>',RepEndDate);
            EndDate := RepEndDate;
          END;
        1:
          BEGIN
            StartDate := CALCDATE('<-CM-2M>',RepEndDate);
            EndDate := CALCDATE('<-2M+CM>',RepEndDate);
          END;
        2:
          BEGIN
            StartDate := CALCDATE('<-CM-1M>',RepEndDate);
            EndDate := CALCDATE('<-1M+CM>',RepEndDate);
          END;
        3:
          BEGIN
            StartDate := CALCDATE('<-CM>',RepEndDate);
            EndDate := RepEndDate;
          END;
      END;
    END;

    LOCAL PROCEDURE GetTariffCode@1210003(DisabilityGroup@1210001 : Option) : Code[20];
    VAR
      PersonMedicalInfo@1210000 : Record 17353;
    BEGIN
      IF DisabilityGroup = PersonMedicalInfo."Disability Group"::" " THEN
        EXIT('01');
      EXIT('03');
    END;

    LOCAL PROCEDURE GetMinDate@1210008(Date1@1210000 : Date;Date2@1210001 : Date) : Date;
    BEGIN
      // In case of 0D return non-empty date
      IF Date1 = 0D THEN
        EXIT(Date2);
      IF (Date2 = 0D) OR (Date1 < Date2) THEN
        EXIT(Date1);
      EXIT(Date2);
    END;

    LOCAL PROCEDURE GetMaxDate@1210009(Date1@1210001 : Date;Date2@1210000 : Date) : Date;
    BEGIN
      IF Date1 > Date2 THEN
        EXIT(Date1);
      EXIT(Date2);
    END;

    PROCEDURE GetReportingPersonList@1210004(VAR ReportingPersonPayrollReportingBuffer@1210000 : Record 17470;VAR PersonifiedPayrollReportingBuffer@1210001 : Record 17470);
    BEGIN
      ReportingPersonPayrollReportingBuffer.DELETEALL;

      IF PersonifiedPayrollReportingBuffer.FINDSET THEN
        REPEAT
          FilterReportingBuffer(ReportingPersonPayrollReportingBuffer,PersonifiedPayrollReportingBuffer);
          IF ReportingPersonPayrollReportingBuffer.ISEMPTY THEN BEGIN
            ReportingPersonPayrollReportingBuffer := PersonifiedPayrollReportingBuffer;
            ReportingPersonPayrollReportingBuffer.INSERT;
          END;
        UNTIL PersonifiedPayrollReportingBuffer.NEXT = 0;

      ReportingPersonPayrollReportingBuffer.RESET;
    END;

    PROCEDURE GetReportingSheetCount@1210020(VAR PersonifiedPayrollReportingBuffer@1210001 : Record 17470;VAR ReportingPersonPayrollReportingBuffer@1210000 : Record 17470) SheetQty : Integer;
    BEGIN
      // Minimum number of pages = 3: Title, Section 1, Section 2.5
      SheetQty := 3;

      // Disability Tariff Code '01'
      PersonifiedPayrollReportingBuffer.SETRANGE("Code 3",'01');
      IF NOT PersonifiedPayrollReportingBuffer.ISEMPTY THEN
        SheetQty += 1;

      // Disability Tariff Code '03'
      PersonifiedPayrollReportingBuffer.SETRANGE("Code 3",'03');
      IF NOT PersonifiedPayrollReportingBuffer.ISEMPTY THEN
        SheetQty += 1;

      PersonifiedPayrollReportingBuffer.SETRANGE("Code 3");

      // Add two pages for each reporting person: Section 12, Section 13
      SheetQty += ReportingPersonPayrollReportingBuffer.COUNT * 2;
    END;

    LOCAL PROCEDURE GetFundVendorNo@1210024(PayrollElementCode@1210000 : Code[20]) : Code[20];
    VAR
      PayrollElement@1210001 : Record 17400;
      PayrollPostingGroup@1210002 : Record 17401;
    BEGIN
      IF PayrollElement.GET(PayrollElementCode) THEN
        IF PayrollPostingGroup.GET(PayrollElement."Payroll Posting Group") THEN
          EXIT(PayrollPostingGroup."Fund Vendor No.");
    END;

    LOCAL PROCEDURE GetNextPackNo@1210033(VAR PackNo@1210000 : Integer;VAR PersonNo@1210001 : Integer);
    BEGIN
      PersonNo += 1;
      IF PersonNo = MaxNoOfPersonsPerRSVFile THEN BEGIN
        PackNo += 1;
        PersonNo := 0;
      END;
    END;

    PROCEDURE MaxNoOfPersonsPerRSVFile@1210030() : Integer;
    BEGIN
      EXIT(200);
    END;

    LOCAL PROCEDURE FilterPersonMedicalDisabilityInfo@1210006(VAR PersonMedicalInfo@1210000 : Record 17353;PersonNo@1210001 : Code[20];StartDate@1210002 : Date;EndDate@1210003 : Date);
    BEGIN
      WITH PersonMedicalInfo DO BEGIN
        SETRANGE("Person No.",PersonNo);
        SETRANGE(Type,Type::Disability);
        SETFILTER("Disability Group",'>0');
        SETFILTER("Starting Date",'..%1',EndDate);
        SETFILTER("Ending Date",'%1..|%2',StartDate,0D);
      END;
    END;

    LOCAL PROCEDURE FilterLaborContractSpecialCondInfo@1210023(VAR LaborContractLine@1210000 : Record 17361;PersonNo@1210001 : Code[20];StartDate@1210002 : Date;EndDate@1210003 : Date);
    BEGIN
      WITH LaborContractLine DO BEGIN
        SETRANGE("Person No.",PersonNo);
        SETRANGE("Operation Type","Operation Type"::Hire,"Operation Type"::Combination);
        SETFILTER("Starting Date",'..%1',EndDate);
        SETFILTER("Ending Date",'%1..|%2',StartDate,0D);
        SETFILTER("Special Conditions",'<>%1','');
      END;
    END;

    LOCAL PROCEDURE FilterLaborContractInfo@1210013(VAR LaborContractLine@1210000 : Record 17361;PersonNo@1210001 : Code[20];StartDate@1210002 : Date;EndDate@1210003 : Date);
    BEGIN
      WITH LaborContractLine DO BEGIN
        SETRANGE("Person No.",PersonNo);
        SETRANGE("Operation Type","Operation Type"::Hire,"Operation Type"::Combination);
        SETFILTER("Starting Date",'..%1',EndDate);
        SETFILTER("Ending Date",'%1..|%2',StartDate,0D);
      END;
    END;

    PROCEDURE FilterReportingBuffer@1210016(VAR ToPayrollReportingBuffer@1210001 : Record 17470;VAR FromPayrollReportingBuffer@1210000 : Record 17470);
    BEGIN
      ToPayrollReportingBuffer.SETRANGE("Code 1",FromPayrollReportingBuffer."Code 1");
      ToPayrollReportingBuffer.SETRANGE("Code 3",FromPayrollReportingBuffer."Code 3");
      ToPayrollReportingBuffer.SETRANGE("Code 4",FromPayrollReportingBuffer."Code 4");
    END;

    LOCAL PROCEDURE InsertDisabilityPeriod@1210011(VAR PersonMedicalInfo@1210000 : Record 17353;StartDate@1210002 : Date;EndDate@1210003 : Date;DisabilityGroup@1210001 : Option);
    BEGIN
      WITH PersonMedicalInfo DO BEGIN
        INIT;
        "Starting Date" := StartDate;
        "Ending Date" := EndDate;
        "Disability Group" := DisabilityGroup;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertSpecialCondPeriod@1210018(VAR SpecialConditionPersonMedicalInfo@1210000 : Record 17353;StartDate@1210003 : Date;EndDate@1210002 : Date;SpecialCode@1210001 : Code[20]);
    BEGIN
      // Use field "Person Medical Info"."Insurer No." as a Special Condition Code
      WITH SpecialConditionPersonMedicalInfo DO BEGIN
        INIT;
        "Starting Date" := StartDate;
        "Ending Date" := EndDate;
        "Insurer No." := SpecialCode;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertPersRepBuffer@1210010(VAR RSVPayrollReportingBuffer@1210000 : Record 17470;PersonNo@1210001 : Code[20];PeriodCode@1210002 : Code[20];TariffCode@1210003 : Code[20];SpecialCode@1210006 : Code[20];PayrollAmounts@1210005 : ARRAY [8] OF Decimal);
    VAR
      LastEntryNo@1210004 : Integer;
    BEGIN
      WITH RSVPayrollReportingBuffer DO BEGIN
        SETRANGE("Pack No.");
        SETRANGE("Code 1",PersonNo);
        SETRANGE("Code 2",PeriodCode);
        SETRANGE("Code 3",TariffCode);
        SETRANGE("Code 4",SpecialCode);
        IF FINDFIRST THEN BEGIN
          AddPersRepBuffAmounts(RSVPayrollReportingBuffer,PayrollAmounts);
          MODIFY;
        END ELSE BEGIN
          LastEntryNo := 0;
          RESET;
          IF FINDLAST THEN
            LastEntryNo := "Entry No.";
          INIT;
          "Entry No." := LastEntryNo + 1;
          "Code 1" := PersonNo;
          "Code 2" := PeriodCode;
          "Code 3" := TariffCode;
          "Code 4" := SpecialCode;
          AddPersRepBuffAmounts(RSVPayrollReportingBuffer,PayrollAmounts);
          "Pack No." := 0;
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckHRSetup@1210012();
    BEGIN
      WITH HumanResourcesSetup DO BEGIN
        GET;

        TESTFIELD("PF BASE Element Code"); // RSV-2014-6.4-4
        TESTFIELD("PF OVER Limit Element Code"); // RSV-2014-6.4-7
        TESTFIELD("PF INS Limit Element Code"); // RSV-2014-6.5
        TESTFIELD("PF SPECIAL 1 Element Code"); // RSV-2014-6.7-4
        TESTFIELD("PF SPECIAL 2 Element Code"); // RSV-2014-6.7-5
        TESTFIELD("PF MI NO TAX Element Code");
        TESTFIELD("TAX PF INS Element Code");
        TESTFIELD("TAX FED FMI Element Code");

        PayrollElementCode[1] := "PF BASE Element Code";
        PayrollElementCode[2] := "PF OVER Limit Element Code";
        PayrollElementCode[3] := "PF INS Limit Element Code";
        PayrollElementCode[4] := "PF SPECIAL 1 Element Code";
        PayrollElementCode[5] := "PF SPECIAL 2 Element Code";
        PayrollElementCode[6] := "PF MI NO TAX Element Code";
        PayrollElementCode[7] := "TAX PF INS Element Code";
        PayrollElementCode[8] := "TAX FED FMI Element Code";
      END;
    END;

    LOCAL PROCEDURE CheckAmounts@1210002(Amounts@1210001 : ARRAY [8] OF Decimal) : Boolean;
    VAR
      i@1210000 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(Amounts) DO
        IF Amounts[i] <> 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE CreatePersonExperienceBuffer@1210046(VAR ExperienceLaborContractLine@1210003 : Record 17361;PersonNo@1210002 : Code[20];StartDate@1210001 : Date;EndDate@1210000 : Date);
    VAR
      Employee@1210004 : Record 5200;
      PersonifiedAccountingMgt@1210005 : Codeunit 17460;
    BEGIN
      WITH Employee DO BEGIN
        SETRANGE("No.",PersonNo);
        IF FINDSET THEN
          REPEAT
            PersonifiedAccountingMgt.CreateExperienceBuffer(ExperienceLaborContractLine,"No.",StartDate,EndDate);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePackNoInBuffer@1210028(VAR PayrollReportingBuffer@1210000 : Record 17470;PackNo@1210002 : Integer) EntryIsAdded : Boolean;
    BEGIN
      WITH PayrollReportingBuffer DO BEGIN
        RESET;
        SETRANGE("Pack No.",0);
        EntryIsAdded := NOT ISEMPTY;
        MODIFYALL("Pack No.",PackNo);
        EXIT(EntryIsAdded);
      END;
    END;

    BEGIN
    {
      Using of TAB17470 "Personified Reporting Buffer":
        Code1   = Person No.
        Code2   = Reporting Period Code: "0" - Total, "1" - FirstPayrollReportingBuffer Month, "2" - SecondPayrollReportingBuffer Month, "3" - Third Month, "4" - Begin Balance
        Code3   = Tariff Code (Disability attribute): "01" - normal, "03" - disability
        Code4   = Special Condition Code  (RSV-2014 6.7-3)
        Amount1 = PF_BASE + PF_MI_NO_TAX  (RSV-2014 6.4-4)
        Amount2 = PF_BASE - PF_OVER       (RSV-2014 6.4-5)
        Amount3 = PF_OVER                 (RSV-2014 6.4-7)
        Amount4 = PF_INS_LIMIT            (RSV-2014 6.5)
        Amount5 = PF_SPECIAL1             (RSV-2014 6.7-4)
        Amount6 = PF_SPECIAL2             (RSV-2014 6.7-5)
        Amount7 = PF_BASE
        Amount8 = PF_INS
        Amount9 = TAX_FED_FMI
    }
    END.
  }
}

