OBJECT Codeunit 50040 FI G/L Jnl.-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=26.12.16;
    Time=13:09:28;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=81;
    OnRun=VAR
            FISetup@1000000000 : Record 50100;
            FI@1000000001 : Record 50021;
            AccountingPeriod@1000000002 : Record 50;
            GenJnlLine2@1000000003 : Record 81;
            JnlQty@1000000004 : Decimal;
            FILedgerEntry@1101495000 : Record 50106;
          BEGIN
            // TESTFIELD("FI EntryType"); С пустым типом могут быть операции, коррекции суммы остатка
            TESTFIELD("Amount Type");
            IF "FI EntryType" <> "FI EntryType"::"0" THEN
              TESTFIELD(Quantity);
            TESTFIELD("Job No.",'');
            TESTFIELD("Cons. Register Error Entry No.",0);

            FIPostingDate := "Posting Date";
            IF FIPostingDate = 0D THEN
              FIPostingDate := "Posting Date";

            IF "Account Type" = "Bal. Account Type" THEN
              ERROR(
                Text001,
                FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"),"Account Type");

            //Проверка на наличие флага "Фин. Инструмент Обязателен" на фин. счете учета позиции
            FIPostingSetup.GET("FI Posting Group", "FI Posting Book", "FI Portfolio");
            IF "Short Position" THEN
              GLAccount.GET(FIPostingSetup."Short Account")
            ELSE
              GLAccount.GET(FIPostingSetup."FI Account");
            GLAccount.TESTFIELD("FI Required");

            GenPostSetup.GET("Gen. Bus. Posting Group", "Gen. Prod. Posting Group");

            AccountingPeriod.GET(DMY2DATE(1, DATE2DMY("Posting Date", 2), DATE2DMY("Posting Date", 3)));
            AccountingPeriod.TESTFIELD("Closed Period", FALSE);
            AccountingPeriod.TESTFIELD(Closed, FALSE);

            IF Correction = FALSE THEN BEGIN
              FISetup.GET;
              //NC MTF01 > AKU
              IF NOT GlobalVariables.Get_SkipCheckFIQty() THEN
              //NC MTF01 < AKU
                IF (FISetup."Check Qty" > 0) AND ("Amount Type" = "Amount Type"::"1") THEN BEGIN
                  JnlQty := 0;
                  IF FISetup."Check Qty" > 1 THEN BEGIN
                    GenJnlLine2.RESET;
                    GenJnlLine2.SETCURRENTKEY("Financial Instrument No.","FI Posting Book","FI Portfolio",
                                              "Amount Type", "Posting Date", "Short Position");
                    GenJnlLine2.SETRANGE("Financial Instrument No.", "Financial Instrument No.");
                    GenJnlLine2.SETRANGE("FI Posting Book", "FI Posting Book");
                    GenJnlLine2.SETRANGE("FI Portfolio", "FI Portfolio");
                    GenJnlLine2.SETRANGE("Journal Template Name", "Journal Template Name");
                    GenJnlLine2.SETRANGE("Journal Batch Name", "Journal Batch Name");
                    GenJnlLine2.SETRANGE("Posting Date", 0D, "Posting Date");
                    GenJnlLine2.SETRANGE("Amount Type",GenJnlLine2."Amount Type"::"1");
                    GenJnlLine2.SETRANGE("Short Position", "Short Position");
                    GenJnlLine2.SETFILTER("Line No.", '<>%1', "Line No.");
                    GenJnlLine2.CALCSUMS(Quantity);
                    JnlQty := GenJnlLine2.Quantity;
                  END;
                  FILedgerEntry.RESET;
                  FILedgerEntry.SETCURRENTKEY("FI No.", "FI Posting Book", "FI Portfolio", "Amount Type", "Posting Date",
                                              Reversed, "Short Position", Positive);
                  FILedgerEntry.SETRANGE("FI No.", "Financial Instrument No.");
                  FILedgerEntry.SETRANGE("FI Posting Book", "FI Posting Book");
                  FILedgerEntry.SETRANGE("FI Portfolio", "FI Portfolio");
                  FILedgerEntry.SETRANGE("Amount Type", FILedgerEntry."Amount Type"::Principal);
                  FILedgerEntry.SETRANGE(Reversed, FALSE);
                  FILedgerEntry.SETRANGE("Short Position", "Short Position");
                  FILedgerEntry.SETRANGE("Posting Date", 0D, "Posting Date");
                  FILedgerEntry.CALCSUMS(Quantity);

                  IF ("FI EntryType" = "FI EntryType"::"2") AND
                     ("Short Position" = FALSE) AND
                     (FILedgerEntry.Quantity + JnlQty + Quantity < 0) THEN
                    ERROR(Text50101, FILedgerEntry.Quantity + JnlQty + Quantity);

                  IF ("FI EntryType" = "FI EntryType"::"2") AND
                     ("Short Position" = TRUE) AND
                     (FILedgerEntry.Quantity + JnlQty + Quantity > 0) THEN
                    ERROR(Text50102, FILedgerEntry.Quantity + JnlQty + Quantity);

                  IF ("FI EntryType" = "FI EntryType"::"1") AND
                     ("Short Position" = FALSE) AND
                     (FILedgerEntry.Quantity + JnlQty + Quantity < 0) THEN
                    ERROR(Text50101, FILedgerEntry.Quantity + JnlQty + Quantity);

                  IF ("FI EntryType" = "FI EntryType"::"1") AND
                     ("Short Position" = TRUE) AND
                     (FILedgerEntry.Quantity + JnlQty + Quantity > 0) THEN
                    ERROR(Text50102, FILedgerEntry.Quantity + JnlQty + Quantity);

                END; //Проверка количества по расходным операциям

              IF ((Quantity < 0) AND (Amount > 0)) OR ((Quantity > 0) AND (Amount < 0)) THEN
                ERROR(Text50103, "Line No.");

              CASE "FI EntryType" OF
                "FI EntryType"::"0": ;
                "FI EntryType"::"1":
                  BEGIN
                    IF Quantity < 0 THEN
                      ERROR(Text50104, "FI EntryType", "Line No.");
                  END;
                "FI EntryType"::"2":
                  BEGIN
                    IF Quantity >0 THEN
                      ERROR(Text50105, "FI EntryType", "Line No.");
                  END;
                "FI EntryType"::"4":
                  BEGIN
                    IF (Quantity >0) AND ("Short Position" = FALSE) THEN
                      ERROR(Text50105, "FI EntryType", "Line No.")
                    ELSE IF (Quantity <0) AND ("Short Position" = TRUE) THEN
                      ERROR(Text50104, "FI EntryType", "Line No.");
                    //TESTFIELD("Short Position", FALSE);
                    TESTFIELD(Conversation, TRUE);
                  END;
                "FI EntryType"::"3":
                  BEGIN
                    IF (Quantity <0) AND ("Short Position" = FALSE) THEN
                      ERROR(Text50104, "FI EntryType", "Line No.")
                    ELSE IF (Quantity >0) AND ("Short Position" = TRUE) THEN
                      ERROR(Text50105, "FI EntryType", "Line No.");
                    //TESTFIELD("Short Position", FALSE);
                    TESTFIELD(Conversation, TRUE);
                  END;
                "FI EntryType"::"5", "FI EntryType"::"6":
                  TESTFIELD("Amount Type", "Amount Type"::"2");
                ELSE
                  ERROR(Text50100, "FI EntryType");
              END;

            END ELSE BEGIN
              TESTFIELD("Appl. to FI Entry No.");
              FILedgerEntry.GET("Appl. to FI Entry No.");
              FILedgerEntry.TESTFIELD(Reversed, FALSE);
              TESTFIELD("Account No.", FILedgerEntry."FI No.");
            //  TESTFIELD("Posting Date", FILedgerEntry."Posting Date");
              TESTFIELD("FI EntryType", FILedgerEntry."FI EntryType");
              TESTFIELD("Amount Type", FILedgerEntry."Amount Type");

              IF "Amount Type" = "Amount Type"::"1" THEN
                TESTFIELD(Quantity, -FILedgerEntry.Quantity)
              ELSE
                TESTFIELD(Quantity, -FILedgerEntry."Cupon Quantity");
              FILedgerEntry.CALCFIELDS(Amount, "Amount (CFI)");
              TESTFIELD("Amount (LCY)", -FILedgerEntry.Amount);
              //AKU TESTFIELD("Currency Code",FILedgerEntry."FI Currency Code");
            END;

            {---------- Остатки от проверки учета ОС
            IF "Account No." <> '' THEN
              IF "Account Type" = "Account Type"::"Fixed Asset" THEN BEGIN
                IF "FA Posting Type" IN
                  ["FA Posting Type"::"Acquisition Cost",
                  "FA Posting Type"::Disposal,
                  "FA Posting Type"::Maintenance]
                THEN  BEGIN
                  IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') THEN
                    TESTFIELD("Gen. Posting Type");
                END ELSE BEGIN
                  TESTFIELD("Gen. Posting Type",0);
                  TESTFIELD("Gen. Bus. Posting Group",'');
                  TESTFIELD("Gen. Prod. Posting Group",'');
                END;
                FANo := "Account No.";
              END;

            IF "Bal. Account No." <> '' THEN
              IF "Bal. Account Type" = "Bal. Account Type"::"Fixed Asset" THEN BEGIN
                IF "FA Posting Type" IN
                  ["FA Posting Type"::"Acquisition Cost",
                  "FA Posting Type"::Disposal,
                  "FA Posting Type"::Maintenance]
                THEN  BEGIN
                  IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') THEN
                    TESTFIELD("Bal. Gen. Posting Type");
                END ELSE BEGIN
                  TESTFIELD("Bal. Gen. Posting Type",0);
                  TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                  TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                END;
                FANo := "Bal. Account No.";
              END;

            FIPostingDate := "Posting Date";
            PostingDate := "Posting Date";
            IF FIPostingDate = 0D THEN
              FIPostingDate := "Posting Date";
            GenJnlPosting := TRUE;
            GenJnlLine := Rec;
            CheckJnlLine;
            --------------------------------}
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=is not different than %1;RUS=не отличается от %1';
      Text001@1001 : TextConst 'ENU=%1 and %2 must not both be %3.;RUS=%1 и %2 не должны быть одновременно %3.';
      Text002@1002 : TextConst 'ENU=must not be %1 when %2 or %3 are %4;RUS=не должно быть %1, когда %2 или %3 равно %4';
      Text003@1003 : TextConst 'ENU=can only be a closing date for G/L entries;RUS=может быть закрывающей датой только для финансовых операций';
      Text004@1004 : TextConst 'ENU=is not within your range of allowed posting dates;RUS=за пределами вашего разрешенного периода учета';
      Text005@1005 : TextConst 'ENU=must be identical to %1;RUS=должно совпадать с %1';
      Text006@1006 : TextConst 'ENU=must not be a %1;RUS=не должно быть %1';
      Text007@1007 : TextConst 'ENU=%1 must be posted in the general journal;RUS=%1 должна быть учтена в финансовом журнале';
      Text008@1008 : TextConst 'ENU=%1 must be posted in the FA journal;RUS=%1 должна быть учтена в журнале ОС';
      Text009@1009 : TextConst 'ENU="must not be specified when %1 = %2 in %3";RUS="не должно быть определено когда %1 = %2 в %3"';
      Text010@1010 : TextConst 'ENU=must not be specified when %1 is specified;RUS=не должно быть определено, когда определено %1';
      Text011@1011 : TextConst 'ENU="must not be specified together with %1 = %2";RUS="не должно быть определено вместе с %1 = %2"';
      Text012@1012 : TextConst 'ENU=must not be specified when %1 is a %2;RUS=не должно быть определено когда %1 равно %2';
      Text013@1013 : TextConst 'ENU=is a %1;RUS=является %1';
      Text014@1014 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5;RUS=Комбинация измерений, используемая в %1 %2, %3, %4, блокирована. %5';
      Text015@1015 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5;RUS=Измерение, использованное в %1 %2, %3, %4 является причиной ошибки. %5';
      UserSetup@1016 : Record 91;
      FISetup@1017 : Record 50100;
      FI@1018 : Record 50021;
      GenJnlLine@1021 : Record 81;
      GenJnlline2@1022 : Record 81;
      DimMgt@1024 : Codeunit 408;
      AllowPostingFrom@1025 : Date;
      AllowPostingTo@1026 : Date;
      GenJnlPosting@1027 : Boolean;
      FANo@1028 : Code[20];
      DeprBookCode@1029 : Code[10];
      PostingDate@1030 : Date;
      FIPostingDate@1031 : Date;
      FieldErrorText@1033 : Text[250];
      Text12400@1210002 : TextConst 'ENU=Previous periods Depreciation wasn''t calculated.;RUS=Амортизация за предыдущие периоды не была начислена.';
      TaxDiff@1210003 : Record 17300;
      Text17300@1210000 : TextConst 'ENU=Norm Depreciation for Future Expense is not calculated.\Journal Template %1 Journal Batch %2\Future Expence No. %3 %4;RUS=Не выполнен пересчет нормы амортизации РБП.\Шаблон журнала %1 Пакет журналов %2\РБП Но. %3 %4';
      Text12401@1470000 : TextConst 'ENU=Fixed Asset No. %1 has been already purchased.;RUS=ОС Номер %1 уже было закуплено.';
      GLSetup@1210001 : Record 98;
      GenPostSetup@1000000000 : Record 252;
      Text50100@1000000001 : TextConst 'ENU=The lines of type% 1 is not processed;RUS=Строки с типом %1 пока не обрабатываются';
      Text50101@1000000002 : TextConst 'ENU=It is impossible to consider selling a long position, because of Fin. instrument after taking into account% 1;RUS=Невозможно учесть продажу в длинную позицию, т.к. количество фин. инструмента после учета %1';
      Text50102@1000000003 : TextConst 'ENU=It is impossible to take into account the sale in a short position, because of Fin. instrument after taking into account% 1;RUS=Невозможно учесть продажу в короткую позицию, т.к. количество фин. инструмента после учета %1';
      Text50103@1101495000 : TextConst 'ENU=The number and amount in line% 1 must be a sign;RUS=Количество и Сумма в строке %1 должны быть одного знака';
      Text50104@1101495001 : TextConst 'ENU=For operations of type% 1 at line% 2 number and amount must be positive;RUS=Для операций типа %1 в строке %2 количество и сумма должны быть положительными';
      Text50105@1101495002 : TextConst 'ENU=For operations of type% 1 at line% 2 of the sum should be negative;RUS=Для операций типа %1 в строке %2 количество и сумма должны быть отрицательными';
      FIPostingSetup@1101495003 : Record 50105;
      GLAccount@1101495004 : Record 15;
      GlobalVariables@1101495005 : Codeunit 50033;

    PROCEDURE CheckFAJnlLine_@2(VAR FAJnlLine2@1000 : Record 5621;VAR JnlLineDim@1001 : Record 356);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      {
      WITH FAJnlLine2 DO BEGIN
        IF "FA No." = '' THEN
          EXIT;
        TESTFIELD("FA Posting Date");
        TESTFIELD("Depreciation Book Code");
        TESTFIELD("Document No.");
        IF "Duplicate in Depreciation Book" = "Depreciation Book Code" THEN
          FIELDERROR("Duplicate in Depreciation Book",
            STRSUBSTNO(Text000,FIELDCAPTION("Depreciation Book Code")));
        FANo := "FA No.";
        PostingDate := "Posting Date";
        FIPostingDate := "FA Posting Date";
        IF PostingDate = 0D THEN
          PostingDate := FIPostingDate;
        DeprBookCode := "Depreciation Book Code";
        FAPostingType := "FA Posting Type";
        IF NOT DimMgt.CheckJnlLineDimComb(JnlLineDim) THEN
          ERROR(
            Text014,
            TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
            DimMgt.GetDimCombErr);

        TableID[1] := DATABASE::"Fixed Asset";
        No[1] := "FA No.";
        IF NOT DimMgt.CheckJnlLineDimValuePosting(JnlLineDim,TableID,No) THEN
          IF "Line No." <> 0 THEN
            ERROR(
              Text015,
              TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
              DimMgt.GetDimValuePostingErr)
          ELSE
            ERROR(DimMgt.GetDimValuePostingErr);
      END;
      GenJnlPosting := FALSE;
      FAJnlLine := FAJnlLine2;
      CheckJnlLine;
      }
    END;

    LOCAL PROCEDURE CheckJnlLine@4();
    BEGIN
      FI.GET(GenJnlLine."Account No.");
      FISetup.GET;
      {
      DeprBook.GET(DeprBookCode);
      FADeprBook.GET(FANo,DeprBookCode);
      }
      CheckFIPostingDate;
      {
      CheckFAIntegration;
      CheckConsistency;
      CheckErrorNo;
      CheckInitialAcquisition;
      CheckPrevDepreciation;
      }
    END;

    LOCAL PROCEDURE CheckFIPostingDate@7();
    BEGIN
      IF FIPostingDate <> NORMALDATE(FIPostingDate) THEN
          GenJnlLine.FIELDERROR("Posting Date",Text003);

      IF (FIPostingDate < 01010001D) OR
         (FIPostingDate > 31129998D)
      THEN
        IF GenJnlPosting THEN
          GenJnlLine.FIELDERROR("Posting Date",Text004);

      IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
        IF USERID <> '' THEN
          IF UserSetup.GET(USERID) THEN BEGIN
            AllowPostingFrom := UserSetup."Allow Posting From";
            AllowPostingTo := UserSetup."Allow Posting To";
          END;
        IF AllowPostingTo = 0D THEN
          AllowPostingTo := 31129998D;
      END;
      IF (FIPostingDate < AllowPostingFrom) OR
         (FIPostingDate > AllowPostingTo)
      THEN
        GenJnlLine.FIELDERROR("Posting Date",Text004);
    END;

    LOCAL PROCEDURE CheckFAIntegration_@5();
    VAR
      GLIntegration@1000 : Boolean;
    BEGIN
      {
      IF GenJnlPosting AND FA."Budgeted Asset" THEN
        GenJnlLine.FIELDERROR("Account No.",STRSUBSTNO(Text006,FA.FIELDCAPTION("Budgeted Asset")));
      IF FA."Budgeted Asset" THEN
        EXIT;
      CASE FAPostingType OF
        FAPostingType::"Acquisition Cost":
          GLIntegration := DeprBook."G/L Integration - Acq. Cost";
        FAPostingType::Depreciation:
          GLIntegration := DeprBook."G/L Integration - Depreciation";
        FAPostingType::"Write-Down":
          GLIntegration := DeprBook."G/L Integration - Write-Down";
        FAPostingType::Appreciation:
          GLIntegration := DeprBook."G/L Integration - Appreciation";
        FAPostingType::"Custom 1":
          GLIntegration := DeprBook."G/L Integration - Custom 1";
        FAPostingType::"Custom 2":
          GLIntegration := DeprBook."G/L Integration - Custom 2";
        FAPostingType::Disposal:
          GLIntegration := DeprBook."G/L Integration - Disposal";
        FAPostingType::Maintenance:
          GLIntegration := DeprBook."G/L Integration - Maintenance";
        FAPostingType::"Salvage Value":
          GLIntegration := FALSE;
      END;
      IF (FAJnlLine."FA No." <> '') AND (FAJnlLine."Reclas. without G/L") THEN
        GLIntegration := FALSE;
      IF GLIntegration AND NOT GenJnlPosting THEN
        FAJnlLine.FIELDERROR(
          "FA Posting Type",
          STRSUBSTNO(Text007,FAJnlLine."FA Posting Type"));
      IF NOT GLIntegration AND GenJnlPosting THEN
        GenJnlLine.FIELDERROR(
          "FA Posting Type",
          STRSUBSTNO(Text008,GenJnlLine."FA Posting Type"));

      GLIntegration := DeprBook."G/L Integration - Depreciation";
      IF GenJnlPosting THEN
        WITH GenJnlLine DO BEGIN
          IF "Depr. until FA Posting Date" AND NOT GLIntegration THEN
            FIELDERROR(
              "Depr. until FA Posting Date",STRSUBSTNO(Text009,
              DeprBook.FIELDCAPTION("G/L Integration - Depreciation"),FALSE,DeprBook.TABLECAPTION));
          IF "Depr. Acquisition Cost" AND NOT GLIntegration THEN
            FIELDERROR(
              "Depr. Acquisition Cost",STRSUBSTNO(Text009,
              DeprBook.FIELDCAPTION("G/L Integration - Depreciation"),FALSE,DeprBook.TABLECAPTION));
        END;
      IF NOT GenJnlPosting THEN
        WITH FAJnlLine DO BEGIN
          IF "Depr. until FA Posting Date" AND GLIntegration THEN
            FIELDERROR(
              "Depr. until FA Posting Date",STRSUBSTNO(Text009,
              DeprBook.FIELDCAPTION("G/L Integration - Depreciation"),TRUE,DeprBook.TABLECAPTION));
          IF "Depr. Acquisition Cost" AND GLIntegration THEN
            FIELDERROR(
              "Depr. Acquisition Cost",STRSUBSTNO(Text009,
              DeprBook.FIELDCAPTION("G/L Integration - Depreciation"),TRUE,DeprBook.TABLECAPTION));
        END;
      }
    END;

    LOCAL PROCEDURE CheckErrorNo_@8();
    BEGIN
      {
      IF GenJnlPosting AND (GenJnlLine."FA Error Entry No." > 0) THEN
        WITH GenJnlLine DO BEGIN
          FieldErrorText :=
            STRSUBSTNO(Text010,
            FIELDCAPTION("FA Error Entry No."));
          CASE TRUE OF
            "Depr. until FA Posting Date":
               FIELDERROR("Depr. until FA Posting Date",FieldErrorText);
             "Depr. Acquisition Cost":
               FIELDERROR("Depr. Acquisition Cost",FieldErrorText);
             "Duplicate in Depreciation Book" <> '':
               FIELDERROR("Duplicate in Depreciation Book",FieldErrorText);
             "Use Duplication List":
               FIELDERROR("Use Duplication List",FieldErrorText);
             "Salvage Value" <> 0:
               FIELDERROR("Salvage Value",FieldErrorText);
             "Insurance No." <> '':
               FIELDERROR("Insurance No.",FieldErrorText);
             "Budgeted FA No." <> '':
               FIELDERROR("Budgeted FA No.",FieldErrorText);
             "Recurring Method" > 0:
               FIELDERROR("Recurring Method",FieldErrorText);
          END;
        END;
      IF NOT GenJnlPosting AND (FAJnlLine."FA Error Entry No." > 0) THEN
        WITH FAJnlLine DO BEGIN
          FieldErrorText :=
            STRSUBSTNO(Text010,
            FIELDCAPTION("FA Error Entry No."));
          CASE TRUE OF
            "Depr. until FA Posting Date":
               FIELDERROR("Depr. until FA Posting Date",FieldErrorText);
             "Depr. Acquisition Cost":
               FIELDERROR("Depr. Acquisition Cost",FieldErrorText);
             "Duplicate in Depreciation Book" <> '':
               FIELDERROR("Duplicate in Depreciation Book",FieldErrorText);
             "Use Duplication List":
               FIELDERROR("Use Duplication List",FieldErrorText);
             "Salvage Value" <> 0:
               FIELDERROR("Salvage Value",FieldErrorText);
             "Insurance No." <> '':
               FIELDERROR("Insurance No.",FieldErrorText);
             "Budgeted FA No." <> '':
               FIELDERROR("Budgeted FA No.",FieldErrorText);
             "Recurring Method" > 0:
               FIELDERROR("Recurring Method",FieldErrorText);
          END;
        END;
       }
    END;

    LOCAL PROCEDURE CheckConsistency_@9();
    BEGIN
      {
      IF GenJnlPosting THEN
        WITH GenJnlLine DO BEGIN
          IF "Journal Template Name" = '' THEN
            Quantity := 0;
          FieldErrorText :=
            STRSUBSTNO(Text011,
            FIELDCAPTION("FA Posting Type"),"FA Posting Type");
          IF ("FA Error Entry No." > 0) AND ("FA Posting Type" = "FA Posting Type"::Maintenance) THEN
            FIELDERROR("FA Error Entry No.",FieldErrorText);
          IF "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" THEN
            CASE TRUE OF
              "Depr. Acquisition Cost":
                FIELDERROR("Depr. Acquisition Cost",FieldErrorText);
              "Salvage Value" <> 0:
                FIELDERROR("Salvage Value",FieldErrorText);
              "Insurance No." <> '':
                FIELDERROR("Insurance No.",FieldErrorText);
              Quantity <> 0:
                IF ("FA Posting Type" <> "FA Posting Type"::Maintenance) AND
                   (NOT FA."Undepreciable FA") AND
                   (FAJnlLine."FA Posting Type" <> FAJnlLine."FA Posting Type"::Transfer) THEN
                  FIELDERROR(Quantity,FieldErrorText);
            END;
          IF ("FA Posting Type" <> "FA Posting Type"::Maintenance) AND
             ("Maintenance Code" <> '')
          THEN
            FIELDERROR("Maintenance Code",FieldErrorText);
          IF "FA Posting Type" = "FA Posting Type"::Maintenance THEN BEGIN
            IF "Depr. until FA Posting Date" THEN
              FIELDERROR("Depr. until FA Posting Date",FieldErrorText);
          END;

          IF ("FA Posting Type" <> "FA Posting Type"::Depreciation) AND
             ("FA Posting Type" <> "FA Posting Type"::"Custom 1") AND
             ("No. of Depreciation Days" <> 0)
          THEN
             FIELDERROR("No. of Depreciation Days",FieldErrorText);

          IF ("FA Posting Type" = "FA Posting Type"::Disposal) THEN BEGIN
            IF "FA Reclassification Entry" THEN
              FIELDERROR("FA Reclassification Entry",FieldErrorText);
            IF  "Budgeted FA No." <> '' THEN
              FIELDERROR("Budgeted FA No.",FieldErrorText);
          END;

          FieldErrorText := STRSUBSTNO(Text012,
            FIELDCAPTION("Account No."),FA.FIELDCAPTION("Budgeted Asset"));

          IF FA."Budgeted Asset" AND ("Budgeted FA No." <> '') THEN
            FIELDERROR("Budgeted FA No.",FieldErrorText);

          IF ("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") AND
             ("Insurance No." <> '') AND
             (DeprBook.Code <> FASetup."Insurance Depr. Book")
          THEN
            TESTFIELD("Insurance No.",'');

          IF FA."Budgeted Asset" THEN
            FIELDERROR("Account No.",STRSUBSTNO(Text013,FA.FIELDCAPTION("Budgeted Asset")));

          {IF "FA Posting Type" = "FA Posting Type"::Disposal THEN BEGIN
            GLSetup.GET;
            IF GLSetup."Accounting Regulation" = GLSetup."Accounting Regulation"::Russian THEN
              TESTFIELD(Amount,0);
          END;}
        END;

      IF NOT GenJnlPosting THEN
        WITH FAJnlLine DO BEGIN
          FieldErrorText :=
            STRSUBSTNO(Text011,
            FIELDCAPTION("FA Posting Type"),"FA Posting Type");

          IF ("FA Error Entry No." > 0) AND ("FA Posting Type" = "FA Posting Type"::Maintenance) THEN
            FIELDERROR("FA Error Entry No.",FieldErrorText);

          IF "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" THEN
            CASE TRUE OF
              "Depr. Acquisition Cost":
                FIELDERROR("Depr. Acquisition Cost",FieldErrorText);
              "Salvage Value" <> 0:
                FIELDERROR("Salvage Value",FieldErrorText);
              Quantity <> 0:
                IF ("FA Posting Type" <> "FA Posting Type"::Maintenance) AND
                   (NOT FA."Undepreciable FA") AND
                   ("FA Posting Type" <> "FA Posting Type"::Transfer) THEN
                  FIELDERROR(Quantity,FieldErrorText);
              "Insurance No." <> '':
                FIELDERROR("Insurance No.",FieldErrorText);
            END;
          IF ("FA Posting Type" = "FA Posting Type"::Maintenance) AND
             "Depr. until FA Posting Date"
          THEN
            FIELDERROR("Depr. until FA Posting Date",FieldErrorText);
          IF ("FA Posting Type" <> "FA Posting Type"::Maintenance) AND
             ("Maintenance Code" <> '')
          THEN
            FIELDERROR("Maintenance Code",FieldErrorText);

          IF ("FA Posting Type" <> "FA Posting Type"::Depreciation) AND
             ("FA Posting Type" <> "FA Posting Type"::"Custom 1") AND
             ("No. of Depreciation Days" <> 0)
          THEN
             FIELDERROR("No. of Depreciation Days",FieldErrorText);

          IF "FA Posting Type" = "FA Posting Type"::Disposal THEN BEGIN
            IF "FA Reclassification Entry" THEN
              FIELDERROR("FA Reclassification Entry",FieldErrorText);
            IF  "Budgeted FA No." <> '' THEN
              FIELDERROR("Budgeted FA No.",FieldErrorText);
          END;

          FieldErrorText := STRSUBSTNO(Text012,
            FIELDCAPTION("FA No."),FA.FIELDCAPTION("Budgeted Asset"));

          IF FA."Budgeted Asset" AND ("Budgeted FA No." <> '') THEN
            FIELDERROR("Budgeted FA No.",FieldErrorText);

          IF ("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") AND
             ("Insurance No." <> '') AND
             (DeprBook.Code <> FASetup."Insurance Depr. Book")
          THEN
            TESTFIELD("Insurance No.",'');
        END;
       }
    END;

    PROCEDURE CheckInitialAcquisition_@1470000();
    BEGIN
      {
      FADeprBook.CALCFIELDS("Initial Acquisition Cost");
      IF GenJnlPosting THEN
        WITH GenJnlLine DO BEGIN
          IF "Amt. Diff. Appln. Entry No." <> 0 THEN // SE11155
            EXIT;
          IF "System-Created Entry" THEN
            IF ("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") AND (NOT "FA Reclassification Entry") THEN BEGIN
              FADeprBook.CALCFIELDS("Initial Acquisition Cost");
              IF (FADeprBook."Initial Acquisition") OR (FADeprBook."Initial Acquisition Cost" <> 0) THEN
                IF Amount > 0 THEN
                  IF (FA.Status <> FA.Status::Inventory) AND (FA.Status <> FA.Status::Montage) THEN
                    ERROR(Text12401,FA."No.");
            END;
        END;
       }
    END;

    PROCEDURE CheckPrevDepreciation_@1210000();
    VAR
      DepreciationCalc@1210001 : Codeunit 5616;
    BEGIN
      {
      IF (FA.Status = FA.Status::Operation) AND (NOT FA."Undepreciable FA") AND
         (FADeprBook."Depreciation Method" = FADeprBook."Depreciation Method"::"SL-RU")
      THEN BEGIN
        IF FADeprBook."Depreciation Starting Date" < PostingDate THEN
          IF DepreciationCalc.ExistingDeprPeriods(FANo, DeprBookCode, PostingDate) = 0 THEN
          BEGIN
            IF NOT ((CALCDATE('<CM>', FADeprBook."Depreciation Starting Date") <= PostingDate) AND
              (FAPostingType = FAPostingType::Depreciation)) THEN
            ERROR(Text12400);
          END;
      END;
      }
    END;

    BEGIN
    {
      NC MTF02 II Учет ФИ
      NC MTF02 AKU Доработка (маркировка по коду отсутствует)
      NC MTF01 AKU Отключение проверки по количеству при трансформации фактов
      NCS-2360 ORM Codeunit renamed to FI G/L Jnl.-Check Line
    }
    END.
  }
}

