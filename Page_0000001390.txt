OBJECT Page 1390 Generic Chart
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Key Performance Indicators;
               RUS=Ключевые индикаторы производительности];
    SourceTable=Table485;
    PageType=CardPart;
    ActionList=ACTIONS
    {
      { 6000    ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 6001    ;1   ;Action    ;
                      Name=Select Chart;
                      CaptionML=[ENU=Select Chart;
                                 RUS=Выбрать диаграмму];
                      ToolTipML=[ENU=Change the chart that is displayed. You can choose from several charts that show data for different performance indicators.;
                                 RUS=Изменение отображаемой диаграммы. Вы можете выбирать из нескольких типов диаграмм, показывающих данных для различных показателей эффективности.];
                      ApplicationArea=#Basic,#Suite;
                      Image=SelectChart;
                      OnAction=BEGIN
                                 ChartManagement.SelectChart(Rec,SelectedChartDefinition);
                                 InitializeSelectedChart;
                               END;
                                }
      { 7002    ;1   ;Action    ;
                      Name=Previous Chart;
                      CaptionML=[ENU=Previous Chart;
                                 RUS=Пред. диаграмма];
                      ToolTipML=[ENU=View the previous chart.;
                                 RUS=Просмотр предыдущей диаграммы.];
                      ApplicationArea=#Basic,#Suite;
                      Image=PreviousSet;
                      OnAction=BEGIN
                                 SelectedChartDefinition.SETRANGE(Enabled,TRUE);
                                 IF SelectedChartDefinition.NEXT(-1) = 0 THEN
                                   IF NOT SelectedChartDefinition.FINDLAST THEN
                                     EXIT;
                                 InitializeSelectedChart;
                               END;
                                }
      { 7000    ;1   ;Action    ;
                      Name=Next Chart;
                      CaptionML=[ENU=Next Chart;
                                 RUS=След. диаграмма];
                      ToolTipML=[ENU=View the next chart.;
                                 RUS=Просмотр следующей диаграммы.];
                      ApplicationArea=#Basic,#Suite;
                      Image=NextSet;
                      OnAction=BEGIN
                                 SelectedChartDefinition.SETRANGE(Enabled,TRUE);
                                 IF SelectedChartDefinition.NEXT = 0 THEN
                                   IF NOT SelectedChartDefinition.FINDFIRST THEN
                                     EXIT;
                                 InitializeSelectedChart;
                               END;
                                }
      { 7007    ;1   ;ActionGroup;
                      Name=PeriodLength;
                      CaptionML=[ENU=Period Length;
                                 RUS=Длина периода];
                      Image=Period }
      { 7006    ;2   ;Action    ;
                      Name=Day;
                      CaptionML=[ENU=Day;
                                 RUS=День];
                      ToolTipML=[ENU=Each stack covers one day.;
                                 RUS=Каждая область соответствует одному дню.];
                      ApplicationArea=#Basic,#Suite;
                      Image=DueDate;
                      OnAction=BEGIN
                                 SetPeriodAndUpdateChart("Period Length"::Day);
                               END;
                                }
      { 7005    ;2   ;Action    ;
                      Name=Week;
                      CaptionML=[ENU=Week;
                                 RUS=Неделя];
                      ToolTipML=[ENU=Each stack except for the last stack covers one week. The last stack contains data from the start of the week until the date that is defined by the Show option.;
                                 RUS=Каждая область, кроме последней, соответствует одной неделе. Последняя область содержит данные с начала недели до даты, заданной параметрами отображения.];
                      ApplicationArea=#Basic,#Suite;
                      Image=DateRange;
                      OnAction=BEGIN
                                 SetPeriodAndUpdateChart("Period Length"::Week);
                               END;
                                }
      { 7004    ;2   ;Action    ;
                      Name=Month;
                      CaptionML=[ENU=Month;
                                 RUS=Месяц];
                      ToolTipML=[ENU=Each stack except for the last stack covers one month. The last stack contains data from the start of the month until the date that is defined by the Show option.;
                                 RUS=Каждая область, кроме последней, соответствует одному месяцу. Последняя область содержит данные с начала месяца до даты, заданной параметрами отображения.];
                      ApplicationArea=#Basic,#Suite;
                      Image=DateRange;
                      OnAction=BEGIN
                                 SetPeriodAndUpdateChart("Period Length"::Month);
                               END;
                                }
      { 7003    ;2   ;Action    ;
                      Name=Quarter;
                      CaptionML=[ENU=Quarter;
                                 RUS=Квартал];
                      ToolTipML=[ENU=Each stack except for the last stack covers one quarter. The last stack contains data from the start of the quarter until the date that is defined by the Show option.;
                                 RUS=Каждая область, кроме последней, соответствует одному кварталу. Последняя область содержит данные с начала квартала до даты, заданной параметрами отображения.];
                      ApplicationArea=#Basic,#Suite;
                      Image=DateRange;
                      OnAction=BEGIN
                                 SetPeriodAndUpdateChart("Period Length"::Quarter);
                               END;
                                }
      { 7001    ;2   ;Action    ;
                      Name=Year;
                      CaptionML=[ENU=Year;
                                 RUS=Год];
                      ToolTipML=[ENU=Each stack except for the last stack covers one year. The last stack contains data from the start of the year until the date that is defined by the Show option.;
                                 RUS=Каждая область, кроме последней, соответствует одному году. Последняя область содержит данные с начала года до даты, заданной параметрами отображения.];
                      ApplicationArea=#Basic,#Suite;
                      Image=DateRange;
                      OnAction=BEGIN
                                 SetPeriodAndUpdateChart("Period Length"::Year);
                               END;
                                }
      { 6003    ;1   ;Action    ;
                      Name=PreviousPeriod;
                      CaptionML=[ENU=Previous Period;
                                 RUS=Предыдущий период];
                      ToolTipML=[ENU=Show the information based on the previous period. If you set the View by field to Day, the date filter changes to the day before.;
                                 RUS=Отображение информации на основании предыдущего периода. Если в поле "Просмотр по" выбрано значение "День", в фильтр дат подставляется предыдущий день.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=PreviousNextActionEnabled;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 ChartManagement.UpdateChart(SelectedChartDefinition,Rec,Period::Previous);
                                 Update(CurrPage.BusinessChart);
                               END;
                                }
      { 6002    ;1   ;Action    ;
                      Name=NextPeriod;
                      CaptionML=[ENU=Next Period;
                                 RUS=Следующий период];
                      ToolTipML=[ENU=Scroll the chart to the left to display the next period.;
                                 RUS=Прокрутка диаграммы влево для отображения следующего периода.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=PreviousNextActionEnabled;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 ChartManagement.UpdateChart(SelectedChartDefinition,Rec,Period::Next);
                                 Update(CurrPage.BusinessChart);
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=ChartInformation;
                      CaptionML=[ENU=Chart Information;
                                 RUS=Сведения диаграммы];
                      ToolTipML=[ENU=View a description of the chart.;
                                 RUS=Просмотр описания диаграммы.];
                      ApplicationArea=#Basic,#Suite;
                      Image=AboutNav;
                      OnAction=VAR
                                 Description@1000 : Text;
                               BEGIN
                                 IF StatusText = '' THEN
                                   EXIT;
                                 Description := ChartManagement.ChartDescription(SelectedChartDefinition);
                                 IF Description = '' THEN
                                   MESSAGE(NoDescriptionMsg)
                                 ELSE
                                   MESSAGE(Description);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Name=Status Text;
                CaptionML=[ENU=Status Text;
                           RUS=Текст статуса];
                ToolTipML=[ENU=Specifies the status of the chart.;
                           RUS=Определяет состояние диаграммы.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=StatusText;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                ShowCaption=No }

    { 3   ;1   ;Field     ;
                Name=BusinessChart;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      SelectedChartDefinition@1004 : Record 1310;
      ChartManagement@1002 : Codeunit 1315;
      StatusText@1001 : Text;
      Period@1005 : ' ,Next,Previous';
      PreviousNextActionEnabled@6000 : Boolean INDATASET;
      NoDescriptionMsg@1006 : TextConst 'ENU=A description was not specified for this chart.;RUS=Для этой диаграммы не введено описание.';
      IsChartAddInReady@1000 : Boolean;

    LOCAL PROCEDURE InitializeSelectedChart@7000();
    BEGIN
      ChartManagement.SetDefaultPeriodLength(SelectedChartDefinition,Rec);
      ChartManagement.UpdateChart(SelectedChartDefinition,Rec,Period::" ");
      PreviousNextActionEnabled := ChartManagement.UpdateNextPrevious(SelectedChartDefinition);
      ChartManagement.UpdateStatusText(SelectedChartDefinition,Rec,StatusText);
      UpdateChart;
    END;

    LOCAL PROCEDURE SetPeriodAndUpdateChart@1(PeriodLength@1000 : Option);
    BEGIN
      ChartManagement.SetPeriodLength(SelectedChartDefinition,Rec,PeriodLength,FALSE);
      ChartManagement.UpdateChart(SelectedChartDefinition,Rec,Period::" ");
      ChartManagement.UpdateStatusText(SelectedChartDefinition,Rec,StatusText);
      UpdateChart;
    END;

    LOCAL PROCEDURE UpdateChart@2();
    BEGIN
      IF NOT IsChartAddInReady THEN
        EXIT;
      Update(CurrPage.BusinessChart);
    END;

    EVENT BusinessChart@-5::DataPointClicked@12(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
      SetDrillDownIndexes(point);
      ChartManagement.DataPointClicked(Rec,SelectedChartDefinition);
    END;

    EVENT BusinessChart@-5::DataPointDoubleClicked@13(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT BusinessChart@-3::AddInReady@14();
    BEGIN
      IsChartAddInReady := TRUE;
      ChartManagement.AddinReady(SelectedChartDefinition,Rec);
      InitializeSelectedChart;
    END;

    EVENT BusinessChart@-5::Refresh@15();
    BEGIN
      InitializeSelectedChart;
    END;

    BEGIN
    END.
  }
}

