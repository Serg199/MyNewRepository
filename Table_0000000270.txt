OBJECT Table 270 Bank Account
{
  OBJECT-PROPERTIES
  {
    Date=17.07.17;
    Time=11:48:06;
    Modified=Yes;
    Version List=NAVW110.00.00.14199,NAVRU10.00.00.14199,NOS-26;
  }
  PROPERTIES
  {
    DataPerCompany=Yes;
    Permissions=TableData 271=r;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 GLSetup.GET;
                 GLSetup.TESTFIELD("Bank Account Nos.");
                 NoSeriesMgt.InitSeries(GLSetup."Bank Account Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF NOT InsertFromContact THEN
                 UpdateContFromBank.OnInsert(Rec);

               //NC MDB01 > PCH
               MovingDataSetup.GET;
               //NC NOS-26 > SPA
               IF NOT DimValue.GET(MovingDataSetup."Bank Account Dimension Code","No.") THEN BEGIN
               //NC NOS-26 < SPA
                 DimValue."Dimension Code" := MovingDataSetup."Bank Account Dimension Code";
                 DimValue.Code := "No.";
               //NC NOS-26 > SPA
               END;
               //NC NOS-26 < SPA
               DimValue.Name := Name;
               DimValue."Name 2" := "Name 2";
               DimValue."Company Name" := COMPANYNAME;
               //NC MTD02 > AIG
               {
               IF NOT DimValue.INSERT(TRUE) THEN
                 DimValue.MODIFY(TRUE);
               }
               //NC S547 > PCH
               DimValue."Rec ID" := "Rec ID";
               //NC S547 < PCH
               //TDRANCS-708>
               // Commented
               //IF DimValue.INSERT(TRUE) THEN;
               IF NOT DimValue.INSERT(TRUE) THEN BEGIN
                 DimValue."Company Name" := '';
                 DimValue.MODIFY(TRUE);
               END;
               //TDRANCS-708<
               //NC MTD02 < AIG
               //NC MDB01 < PCH

               //NC OAM02 > DP
               DefDim."Table ID" := DATABASE::"Bank Account";
               DefDim."No." := "No.";
               DefDim."Dimension Code" := MovingDataSetup."Bank Account Dimension Code";
               DefDim."Dimension Value Code" := "No.";
               DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
               IF NOT DefDim.INSERT(TRUE) THEN
                 DefDim.MODIFY(TRUE);
               //NC OAM02 < DP

               //NC OAM02.1 > DP
               IF "Account Type"="Account Type"::"Bank Account" THEN BEGIN
                 MovingDataSetup.TESTFIELD("Body/Percentage Dimension Code");
                 MovingDataSetup.TESTFIELD("Body Dimension Value");
                 DefDim.INIT;
                 DefDim."Table ID" := DATABASE::"Bank Account";
                 DefDim."No." := "No.";
                 DefDim."Dimension Code" := MovingDataSetup."Body/Percentage Dimension Code";
                 DefDim."Dimension Value Code" := MovingDataSetup."Body Dimension Value";
                 DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
                 IF NOT DefDim.INSERT(TRUE) THEN
                   DefDim.MODIFY(TRUE);
               END;
               //NC OAM02.1 > DP

               DimMgt.UpdateDefaultDim(
                 DATABASE::"Bank Account","No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;

               IF (Name <> xRec.Name) OR
                  ("Search Name" <> xRec."Search Name") OR
                  ("Name 2" <> xRec."Name 2") OR
                  (Address <> xRec.Address) OR
                  ("Address 2" <> xRec."Address 2") OR
                  (City <> xRec.City) OR
                  ("Phone No." <> xRec."Phone No.") OR
                  ("Telex No." <> xRec."Telex No.") OR
                  ("Territory Code" <> xRec."Territory Code") OR
                  ("Currency Code" <> xRec."Currency Code") OR
                  ("Language Code" <> xRec."Language Code") OR
                  ("Our Contact Code" <> xRec."Our Contact Code") OR
                  ("Country/Region Code" <> xRec."Country/Region Code") OR
                  ("Fax No." <> xRec."Fax No.") OR
                  ("Telex Answer Back" <> xRec."Telex Answer Back") OR
                  ("Post Code" <> xRec."Post Code") OR
                  (County <> xRec.County) OR
                  ("E-Mail" <> xRec."E-Mail") OR
                  ("Home Page" <> xRec."Home Page")
               THEN BEGIN
                 MODIFY;
                 UpdateContFromBank.OnModify(Rec);
               //NC NOS-26 > ENK
               {
                 IF NOT FIND THEN BEGIN
                   RESET;
                   IF FIND THEN;
                 END;
               END;
               }
               //NC NOS-26 < ENK
                 //TDRANCS-708>
                 MovingDataSetup.GET;
                 IF DimValue.GET(MovingDataSetup."Bank Account Dimension Code","No.") THEN BEGIN
                   DimValue.Name := Name;
                   DimValue."Name 2" := "Name 2";
                   //NC S547 > PCH
                   DimValue."Rec ID" := "Rec ID";
                   //NC S547 < PCH
                   IF DimValue."Company Name" <> COMPANYNAME THEN
                     DimValue."Company Name" := '';
                   DimValue.MODIFY(TRUE);
                 END;
                 //TDRANCS-708<
               END;

               //NC MDB01 > PCH
               oldBankAccount.GET("No.");
               //NC > EB не переименовывал
               {
               IF (Name <> oldBankAccount.Name) OR
                  ("Name 2" <> oldBankAccount."Name 2") THEN BEGIN
               }
                 //TDRANCS-708> Commented
                 {
                 MovingDataSetup.GET;
                 DimValue."Dimension Code" := MovingDataSetup."Bank Account Dimension Code";
                 DimValue.Code := "No.";
                 DimValue.Name := Name;
                 DimValue."Name 2" := "Name 2";
                 DimValue."Company Name" := COMPANYNAME;
                 IF NOT DimValue.INSERT(TRUE) THEN
                   DimValue.MODIFY(TRUE);
                 }
                 //TDRANCS-708<
               {
               END;
               NC > EB }
               //NC MDB01 < PCH
             END;

    OnDelete=BEGIN
               MoveEntries.MoveBankAccEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"Bank Account");
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               UpdateContFromBank.OnDelete(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::"Bank Account","No.");

               //NC MDB01 > PCH
               MovingDataSetup.GET;
               IF DimValue.GET(MovingDataSetup."Bank Account Dimension Code","No.") THEN
                 DimValue.DELETE(TRUE);
               //NC MDB01 < PCH
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
               //NC MDB03 > PCH
               //NC S547 > PCH
               //IF NOT RenameRef.TestBankAcc(xRec."No.","No.",ErrorCode,ErrorText,TRUE) THEN
               IF NOT RenameRef.TestBankAcc(xRec."No.",'',"No.",ErrorCode,ErrorText,TRUE) THEN
               //NC S547 < PCH
                 ERROR(ErrorText);
               //NC MDB03 < PCH
               //NC MDB01 > PCH
               MovingDataSetup.GET;
               DimValue.SetDoNotTestRename(TRUE);
               IF DimValue.GET(MovingDataSetup."Bank Account Dimension Code",xRec."No.") THEN
                 DimValue.RENAME(MovingDataSetup."Bank Account Dimension Code","No.");
               //NC MDB01 < PCH
             END;

    CaptionML=[ENU=Bank Account;
               RUS=Банковский счет];
    LookupPageID=Page371;
    DrillDownPageID=Page371;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  GLSetup.GET;
                                                                  NoSeriesMgt.TestManual(GLSetup."Bank Account Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              RUS=Код];
                                                   NotBlank=Yes;
                                                   Description=NOS-26 }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              RUS=Название] }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=[ENU=Search Name;
                                                              RUS=Имя поиска] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              RUS=Название 2] }
    { 5   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              RUS=Адрес] }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              RUS=Адрес 2] }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              RUS=Город];
                                                   Description=NOS-26 }
    { 8   ;   ;Contact             ;Text50        ;CaptionML=[ENU=Contact;
                                                              RUS=Контакт] }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              RUS=Телефон] }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=[ENU=Telex No.;
                                                              RUS=Телекс] }
    { 13  ;   ;Bank Account No.    ;Text30        ;OnValidate=BEGIN
                                                                IF "Country/Region Code" = '' THEN
                                                                  ValidateAccountNo();
                                                              END;

                                                   CaptionML=[ENU=Bank Account No.;
                                                              RUS=Код банк. счета] }
    { 14  ;   ;Transit No.         ;Text20        ;CaptionML=[ENU=Transit No.;
                                                              RUS=Номер транзитного счета] }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=[ENU=Territory Code;
                                                              RUS=Код территории] }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              RUS=Код глобального измерения 1];
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              RUS=Код глобального измерения 2];
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Chain Name          ;Code10        ;CaptionML=[ENU=Chain Name;
                                                              RUS=Название сети] }
    { 20  ;   ;Min. Balance        ;Decimal       ;CaptionML=[ENU=Min. Balance;
                                                              RUS=Миним. сальдо];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 21  ;   ;Bank Acc. Posting Group;Code10     ;TableRelation="Bank Account Posting Group";
                                                   CaptionML=[ENU=Bank Acc. Posting Group;
                                                              RUS=Банк. счет - учетная группа] }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" = xRec."Currency Code" THEN
                                                                  EXIT;

                                                                BankAcc.RESET;
                                                                BankAcc := Rec;
                                                                BankAcc.CALCFIELDS(Balance,"Balance (LCY)");
                                                                BankAcc.TESTFIELD(Balance,0);
                                                                BankAcc.TESTFIELD("Balance (LCY)",0);

                                                                IF NOT BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open) THEN
                                                                  BankAccLedgEntry.SETCURRENTKEY("Bank Account No.");
                                                                BankAccLedgEntry.SETRANGE("Bank Account No.","No.");
                                                                BankAccLedgEntry.SETRANGE(Open,TRUE);
                                                                IF BankAccLedgEntry.FINDLAST THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Currency Code"));
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=Код валюты] }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              RUS=Код языка] }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=[ENU=Statistics Group;
                                                              RUS=Статистическая группа] }
    { 29  ;   ;Our Contact Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Our Contact Code;
                                                              RUS=Код нашего контакта] }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              RUS=Код страны/региона] }
    { 37  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Bank Account),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              RUS=Комментарий];
                                                   Editable=No }
    { 39  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              RUS=Заблокировано] }
    { 41  ;   ;Last Statement No.  ;Code20        ;CaptionML=[ENU=Last Statement No.;
                                                              RUS=Номер посл. выписки] }
    { 42  ;   ;Last Payment Statement No.;Code20  ;OnValidate=VAR
                                                                TextManagement@1000 : Codeunit 41;
                                                              BEGIN
                                                                TextManagement.EvaluateIncStr("Last Payment Statement No.",FIELDCAPTION("Last Payment Statement No."));
                                                              END;

                                                   CaptionML=[ENU=Last Payment Statement No.;
                                                              RUS=Номер последней платежной ведомости] }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              RUS=Дата последнего изменения];
                                                   Editable=No }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              RUS=Фильтр по дате] }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              RUS=Фильтр глобального измерения 1];
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              RUS=Фильтр глобального измерения 2];
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE (Bank Account No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter)));
                                                   CaptionML=[ENU=Balance;
                                                              RUS=Сальдо];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter)));
                                                   CaptionML=[ENU=Balance (LCY);
                                                              RUS=Сальдо (руб.)];
                                                   Description=NOS-26;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass=['1,11,1,270,59' ] }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE (Bank Account No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Net Change;
                                                              RUS=Оборот];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Net Change (LCY);
                                                              RUS=Оборот (руб.)];
                                                   Description=NOS-26;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass=['1,11,1,270,61' ] }
    { 62  ;   ;Total on Checks     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Check Ledger Entry".Amount WHERE (Bank Account No.=FIELD(No.),
                                                                                                      Entry Status=FILTER(Posted),
                                                                                                      Statement Status=FILTER(<>Closed)));
                                                   CaptionML=[ENU=Total on Checks;
                                                              RUS=Итого по платежным документам];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              RUS=Факс] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              RUS=Телекс для ответа] }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              RUS=Рисунок];
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              RUS=Индекс] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              RUS=Район] }
    { 93  ;   ;Last Check No.      ;Code20        ;AccessByPermission=TableData 272=R;
                                                   CaptionML=[ENU=Last Check No.;
                                                              RUS=Номер последнего платежного документа] }
    { 94  ;   ;Balance Last Statement;Decimal     ;CaptionML=[ENU=Balance Last Statement;
                                                              RUS=Сальдо последней выписки];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 95  ;   ;Balance at Date     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE (Bank Account No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                             Bank Acc. Posting Group=FIELD(Bank Acc. Posting Group Filter)));
                                                   CaptionML=[ENU=Balance at Date;
                                                              RUS=Сальдо на дату];
                                                   Description=NOS-26;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 96  ;   ;Balance at Date (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(UPPERLIMIT(Date Filter))));
                                                   CaptionML=[ENU=Balance at Date (LCY);
                                                              RUS=Сальдо на дату (руб.)];
                                                   Description=NOS-26;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass=['1,11,1,270,96' ] }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Debit Amount" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Debit Amount;
                                                              RUS=Сумма по дебету];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Credit Amount" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                      Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                      Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Credit Amount;
                                                              RUS=Сумма по кредиту];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Debit Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                           Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                           Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                           Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              RUS=Сумма по дебету (руб.)];
                                                   BlankZero=Yes;
                                                   Description=NOS-26;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass=['1,11,1,270,99' ] }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Credit Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                            Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                            Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                            Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              RUS=Сумма по кредиту (руб.)];
                                                   BlankZero=Yes;
                                                   Description=NOS-26;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass=['1,11,1,270,100' ] }
    { 101 ;   ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              RUS=Номер отделения банка] }
    { 102 ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              RUS=Эл. почта] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              RUS=Интернет-адрес] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              RUS=Серия номеров];
                                                   Editable=No }
    { 108 ;   ;Check Report ID     ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Report));
                                                   CaptionML=[ENU=Check Report ID;
                                                              RUS=Номер отчета для платежей] }
    { 109 ;   ;Check Report Name   ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE (Object Type=CONST(Report),
                                                                                                             Object ID=FIELD(Check Report ID)));
                                                   CaptionML=[ENU=Check Report Name;
                                                              RUS=Название отчета для печати платежей];
                                                   Editable=No }
    { 110 ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                              BEGIN
                                                                //NC MTD02 > AIG
                                                                {
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                                }
                                                                //NC MTD02 < AIG
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              RUS=IBAN] }
    { 111 ;   ;SWIFT Code          ;Code20        ;CaptionML=[ENU=SWIFT Code;
                                                              RUS=SWIFT-код] }
    { 113 ;   ;Bank Statement Import Format;Code20;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Import));
                                                   CaptionML=[ENU=Bank Statement Import Format;
                                                              RUS=Формат импорта банковской выписки] }
    { 115 ;   ;Credit Transfer Msg. Nos.;Code10   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Credit Transfer Msg. Nos.;
                                                              RUS=Номера сообщ. кред. переводов] }
    { 116 ;   ;Direct Debit Msg. Nos.;Code10      ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Direct Debit Msg. Nos.;
                                                              RUS=Номера сообщ. прям. дебетования] }
    { 117 ;   ;SEPA Direct Debit Exp. Format;Code20;
                                                   TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Export));
                                                   CaptionML=[ENU=SEPA Direct Debit Exp. Format;
                                                              RUS=Формат экспорта прямого дебетования SEPA] }
    { 121 ;   ;Bank Stmt. Service Record ID;RecordID;
                                                   OnValidate=VAR
                                                                Handled@1000 : Boolean;
                                                              BEGIN
                                                                IF FORMAT("Bank Stmt. Service Record ID") = '' THEN
                                                                  OnUnlinkStatementProviderEvent(Rec,Handled);
                                                              END;

                                                   CaptionML=[ENU=Bank Stmt. Service Record ID;
                                                              RUS=Код записи службы банковских выписок] }
    { 123 ;   ;Transaction Import Timespan;Integer;OnValidate=BEGIN
                                                                IF NOT ("Transaction Import Timespan" IN [0..9999]) THEN
                                                                  ERROR(TransactionImportTimespanMustBePositiveErr);
                                                              END;

                                                   CaptionML=[ENU=Transaction Import Timespan;
                                                              RUS=Период импорта транзакций] }
    { 124 ;   ;Automatic Stmt. Import Enabled;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Automatic Stmt. Import Enabled" THEN BEGIN
                                                                  IF NOT IsAutoLogonPossible THEN
                                                                    ERROR(MFANotSupportedErr);

                                                                  IF NOT ("Transaction Import Timespan" IN [0..9999]) THEN
                                                                    ERROR(TransactionImportTimespanMustBePositiveErr);
                                                                  ScheduleBankStatementDownload
                                                                END ELSE
                                                                  UnscheduleBankStatementDownload;
                                                              END;

                                                   CaptionML=[ENU=Automatic Stmt. Import Enabled;
                                                              RUS=Автоматический импорт выписок включен] }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=[ENU=Image;
                                                              RUS=Изображение] }
    { 170 ;   ;Creditor No.        ;Code35        ;CaptionML=[ENU=Creditor No.;
                                                              RUS=Номер кредитора] }
    { 1210;   ;Payment Export Format;Code20       ;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Export));
                                                   CaptionML=[ENU=Payment Export Format;
                                                              RUS=Формат экспорта платежей] }
    { 1211;   ;Bank Clearing Code  ;Text50        ;CaptionML=[ENU=Bank Clearing Code;
                                                              RUS=Клиринговый код банка] }
    { 1212;   ;Bank Clearing Standard;Text50      ;TableRelation="Bank Clearing Standard";
                                                   CaptionML=[ENU=Bank Clearing Standard;
                                                              RUS=Клиринговый стандарт банка] }
    { 1213;   ;Bank Name - Data Conversion;Text50 ;TableRelation="Bank Data Conv. Bank" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Bank Name - Data Conversion;
                                                              RUS=Название банка - преобразование данных] }
    { 1250;   ;Match Tolerance Type;Option        ;OnValidate=BEGIN
                                                                IF "Match Tolerance Type" <> xRec."Match Tolerance Type" THEN
                                                                  "Match Tolerance Value" := 0;
                                                              END;

                                                   CaptionML=[ENU=Match Tolerance Type;
                                                              RUS=Тип доп. отклонения для соответствия];
                                                   OptionCaptionML=[ENU=Percentage,Amount;
                                                                    RUS=Процент,Сумма];
                                                   OptionString=Percentage,Amount }
    { 1251;   ;Match Tolerance Value;Decimal      ;OnValidate=BEGIN
                                                                IF "Match Tolerance Value" < 0 THEN
                                                                  ERROR(InvalidValueErr);

                                                                IF "Match Tolerance Type" = "Match Tolerance Type"::Percentage THEN
                                                                  IF "Match Tolerance Value" > 99 THEN
                                                                    ERROR(InvalidPercentageValueErr,FIELDCAPTION("Match Tolerance Type"),
                                                                      FORMAT("Match Tolerance Type"::Percentage));
                                                              END;

                                                   CaptionML=[ENU=Match Tolerance Value;
                                                              RUS=Значение доп. отклонения для соответствия];
                                                   DecimalPlaces=0:5 }
    { 1260;   ;Positive Pay Export Code;Code20    ;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Export-Positive Pay));
                                                   CaptionML=[ENU=Positive Pay Export Code;
                                                              RUS=Код экспорта Positive Pay] }
    { 12400;  ;Bank BIC            ;Code20        ;TableRelation="Bank Directory".BIC;
                                                   OnValidate=BEGIN
                                                                IF BankDir.GET("Bank BIC") THEN BEGIN
                                                                  "Bank Corresp. Account No." := BankDir."Corr. Account No.";
                                                                  IF Name = '' THEN
                                                                    Name := COPYSTR(BankDir."Full Name",1,MAXSTRLEN(Name));
                                                                  IF STRLEN(Name) < STRLEN(BankDir."Full Name") THEN
                                                                    "Name 2" := COPYSTR(BankDir."Full Name",STRLEN(Name) + 1,MAXSTRLEN("Name 2"));
                                                                  IF Address = '' THEN
                                                                    Address := COPYSTR(BankDir.Address,1,MAXSTRLEN(Address));
                                                                  IF STRLEN(Address) < STRLEN(BankDir.Address) THEN
                                                                    "Address 2" := COPYSTR(BankDir.Address,STRLEN(Address) + 1,MAXSTRLEN("Address 2"));
                                                                  IF "Phone No." = '' THEN
                                                                    "Phone No." := COPYSTR(BankDir.Telephone,1,MAXSTRLEN("Phone No."));
                                                                  City := BankDir."Area Name";
                                                                  "Abbr. City" := LOWERCASE(COPYSTR(FORMAT(BankDir."Area Type"),1,1));
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bank BIC;
                                                              RUS=БИК банка] }
    { 12401;  ;Account Type        ;Option        ;CaptionML=[ENU=Account Type;
                                                              RUS=Тип счета];
                                                   OptionCaptionML=[ENU=Bank Account,Cash Account;
                                                                    RUS=Банковский счет,Кассовый счет];
                                                   OptionString=Bank Account,Cash Account }
    { 12402;  ;Debit Cash Order No. Series;Code10 ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Debit Cash Order No. Series;
                                                              RUS=Серия номеров приходных ордеров] }
    { 12403;  ;Credit Cash Order No. Series;Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Credit Cash Order No. Series;
                                                              RUS=Серия номеров расходных ордеров] }
    { 12404;  ;Last Cash Report Page No.;Code20   ;CaptionML=[ENU=Last Cash Report Page No.;
                                                              RUS=Номер последней страницы кассового отчета] }
    { 12405;  ;Fin. Void with Correction;Boolean  ;CaptionML=[ENU=Fin. Void with Correction;
                                                              RUS=Фин. отмена как сторнирование] }
    { 12406;  ;VAT % for Document  ;Decimal       ;CaptionML=[ENU=VAT % for Document;
                                                              RUS=НДС (%) для документа] }
    { 12408;  ;Abbr. City          ;Text1         ;CaptionML=[ENU=Abbr. City;
                                                              RUS=Сокр. города] }
    { 12409;  ;Bank Payment Order No. Series;Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Bank Payment Order No. Series;
                                                              RUS=Серия номеров платежных поручений] }
    { 12410;  ;Bank Corresp. Account No.;Code20   ;OnValidate=BEGIN
                                                                IF "Transit No." <> '' THEN BEGIN
                                                                  BankDir.RESET;
                                                                  BankDir.SETCURRENTKEY("Corr. Account No.");
                                                                  BankDir.SETRANGE("Corr. Account No.","Transit No.");
                                                                  IF BankDir.FIND('-') THEN
                                                                    IF "Bank BIC" = '' THEN
                                                                      VALIDATE("Bank BIC",BankDir.BIC)
                                                                    ELSE
                                                                      IF "Bank BIC" <> BankDir.BIC THEN
                                                                        IF CONFIRM(Text12400,TRUE,BankDir."Corr. Account No.",BankDir.BIC,BankDir."Short Name") THEN
                                                                          VALIDATE("Bank BIC",BankDir.BIC)
                                                                END;

                                                                IF "Country/Region Code" = '' THEN
                                                                  ValidateAccountNo();
                                                              END;

                                                   CaptionML=[ENU=Bank Corresp. Account No.;
                                                              RUS=Номер корр. счета банка] }
    { 12411;  ;Use Client-Bank     ;Boolean       ;OnValidate=VAR
                                                                GenJnlLine@1210000 : Record 81;
                                                                GenJnlTemplate@1210001 : Record 80;
                                                              BEGIN
                                                                GenJnlLine.RESET;
                                                                GenJnlLine.SETRANGE("Bal. Account Type",GenJnlLine."Bal. Account Type"::"Bank Account");
                                                                GenJnlLine.SETRANGE("Bal. Account No.","No.");
                                                                IF NOT "Use Client-Bank" THEN BEGIN
                                                                  GenJnlLine.SETRANGE(
                                                                    "Export Status",
                                                                    GenJnlLine."Export Status"::New,
                                                                    GenJnlLine."Export Status"::"Bank Statement Found");
                                                                  IF NOT GenJnlLine.ISEMPTY THEN
                                                                    ERROR(Text12402,FIELDCAPTION("Use Client-Bank"),GenJnlLine.FIELDCAPTION("Export Status"));
                                                                END ELSE
                                                                  IF NOT GenJnlLine.ISEMPTY THEN
                                                                    ERROR(Text12403,FIELDCAPTION("Use Client-Bank"),GenJnlLine.FIELDCAPTION("Bal. Account Type"));
                                                              END;

                                                   CaptionML=[ENU=Use Client-Bank;
                                                              RUS=Использовать клиент-банк] }
    { 50001;  ;Extern. ID 1        ;Code40        ;CaptionML=[ENU=Extern. ID 1;
                                                              RUS=Внеш. Уник. Идентификатор 1] }
    { 50002;  ;Extern. ID 2        ;Code40        ;CaptionML=[ENU=Extern. ID 2;
                                                              RUS=Внеш. Уник. Идентификатор 2] }
    { 50003;  ;Rec ID              ;Code40        ;CaptionML=[ENU=Rec ID;
                                                              RUS=ID Записи];
                                                   Description=NC S547 PCH }
    { 50010;  ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              RUS=Клиент Но.];
                                                   Description=NC MDB01 PCH }
    { 50015;  ;Bank Acc. Posting Group Filter;Code10;
                                                   FieldClass=FlowFilter;
                                                   TableRelation="Bank Account Posting Group".Code;
                                                   CaptionML=[ENU=Bank Acc. Posting Group Filter;
                                                              RUS=Банк. Счет. Учетная Группа Фильтр];
                                                   Description=OAM38 DP }
    { 50020;  ;Account Type 2      ;Code10        ;TableRelation="Bank Account Type";
                                                   CaptionML=[ENU=Account Type 2;
                                                              RUS=Тип Счета 2];
                                                   Description=NC MDB01 PCH }
    { 50025;  ;Restricted          ;Boolean       ;CaptionML=[ENU=Restricted;
                                                              RUS=Ограничения на Использование Средств на Счете];
                                                   Description=NC MDB01 PCH }
    { 50040;  ;Opening Date        ;Date          ;CaptionML=[ENU=Opening Date;
                                                              RUS=Дата Открытия Счета];
                                                   Description=NC MDB01 PCH }
    { 50045;  ;Closing Date        ;Date          ;CaptionML=[ENU=Closing Date;
                                                              RUS=Дата Закрытия Счета];
                                                   Description=NC MDB01 PCH }
    { 50050;  ;Overdrafts Limit    ;Decimal       ;CaptionML=[ENU=Overdraft Limit;
                                                              RUS=Лимит Овердрафта];
                                                   Description=NC MDB01 PCH }
    { 50055;  ;Company No.         ;Text30        ;CaptionML=[ENU=Company No.;
                                                              RUS=Компания Но.];
                                                   Description=NC MDB06 PCH }
    { 50060;  ;Internal Code       ;Code20        ;CaptionML=[ENU=Internal Code;
                                                              RUS=Внутренний Код];
                                                   Description=NC EB }
    { 50061;  ;Diasoft No.         ;Text30        ;CaptionML=[ENU=Diasoft No.;
                                                              RUS=Код Диасофт];
                                                   Description=TRD }
    { 50062;  ;Era No.             ;Text22        ;CaptionML=[ENU=Era No.;
                                                              RUS=Код Эры];
                                                   Description=TRD }
    { 50063;  ;1C No.              ;Text30        ;CaptionML=[ENU=1C No.;
                                                              RUS=Код 1С];
                                                   Description=TRD }
    { 50064;  ;Pifagor No.         ;Text30        ;CaptionML=[ENU=Pifagor No.;
                                                              RUS=Код Пифагор];
                                                   Description=TRD }
    { 50065;  ;Excel No.           ;Text30        ;CaptionML=[ENU=Excel No.;
                                                              RUS=Код Внеш. Системы];
                                                   Description=TRD }
    { 50066;  ;Name RUS            ;Text100       ;CaptionML=[ENU=Russian Name;
                                                              RUS=Русское Название];
                                                   Description=TRD }
    { 50070;  ;FX Usage            ;Boolean       ;CaptionML=[ENU=FX Usage;
                                                              RUS=Использовать при конвертации] }
    { 50071;  ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              RUS=Вид счета];
                                                   OptionCaptionML=[ENU=Proprietary,Client,Mixed;
                                                                    RUS=Собственный,Клиентский,Смешанный];
                                                   OptionString=Proprietary,Client,Mixed;
                                                   Description=NCS-1128 }
    { 50075;  ;Bank Customer No.   ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                //NC NCS-1128 > DP
                                                                TESTFIELD(Type,Type::Client);
                                                                //NC NCS-1128 < DP
                                                              END;

                                                   CaptionML=[ENU=Bank Customer No.;
                                                              RUS=Банк Клиент Но.];
                                                   Description=NCS-1128 }
    { 50076;  ;Interest Rate       ;Decimal       ;CaptionML=[ENU=Interest Rate;
                                                              RUS=Процентная Ставка];
                                                   DecimalPlaces=3:3;
                                                   Description=NCS-1897 }
    { 50077;  ;Pledge              ;Boolean       ;CaptionML=[ENU=Pledge;
                                                              RUS=Залог];
                                                   Description=NCS-2056 }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Bank Acc. Posting Group                  }
    {    ;Currency Code                            }
    {    ;Country/Region Code                      }
    {    ;Internal Code                            }
    {    ;Rec ID                                   }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,Bank Account No.,Currency Code  }
    { 2   ;Brick               ;No.,Name,Bank Account No.,Currency Code,Image }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries for this bank account.;RUS=Нельзя изменить %1, так как есть открытые операции ГК для этого банковского счета.';
      Text003@1003 : TextConst 'ENU=Do you wish to create a contact for %1 %2?;RUS=Создать контакт для %1 %2?';
      GLSetup@1004 : Record 98;
      BankAcc@1005 : Record 270;
      BankAccLedgEntry@1006 : Record 271;
      CommentLine@1007 : Record 97;
      PostCode@1008 : Record 225;
      BankDir@1210000 : Record 12409;
      NoSeriesMgt@1009 : Codeunit 396;
      MoveEntries@1010 : Codeunit 361;
      UpdateContFromBank@1011 : Codeunit 5058;
      DimMgt@1012 : Codeunit 408;
      InsertFromContact@1013 : Boolean;
      Text004@1014 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;RUS=Прежде чем использовать Online Map, необходимо заполнить окно настройки Online Map.\См. раздел справки "Настройка Online Map".';
      Text12400@1210001 : TextConst 'ENU=Corr. Account %1 corresponds to the bank %2 %3\Do you agree?;RUS=Корр. счет %1 соответствует банку %2 %3\Подтвердить?';
      Text12401@1210002 : TextConst 'ENU=You cannot clear the %1 check box because there are bank payment orders with %2 set to G/L Account.;RUS=Невозможно убрать флажок %1, так как существуют платежные поручения с %2, установленные в значение "Счет ГК".';
      Text12402@1210003 : TextConst 'ENU=You cannot clear the %1 check box because there are bank payment orders with %2 set to New, Exported or Bank Statement Found.;RUS=Невозможно убрать флажок %1, так как существуют платежные поручения, у которых %2 имеет значение "Новый", "Экспортировано" или "Обнаружена выписка с банк. счета".';
      Text12403@1210004 : TextConst 'ENU=You cannot select the %1 check box because there are bank payment orders with %2 set to Bank Account.;RUS=Невозможно убрать флажок %1, так как существуют платежные поручения с %2, установленные в значение "Банковский счет".';
      BankAccIdentifierIsEmptyErr@1001 : TextConst 'ENU=You must specify either a %1 or an %2.;RUS=Необходимо указать либо %1, либо %2.';
      InvalidPercentageValueErr@1002 : TextConst '@@@=%1 is "field caption and %2 is "Percentage";ENU=If %1 is %2, then the value must be between 0 and 99.;RUS=Если %1 - %2, то значение должно быть от 0 до 99.';
      InvalidValueErr@1015 : TextConst 'ENU=The value must be positive.;RUS=Значение должно быть положительным.';
      DataExchNotSetErr@1016 : TextConst 'ENU=The Data Exchange Code field must be filled.;RUS=Поле "Код обмена данными" подлежит обязательному заполнению.';
      BankStmtScheduledDownloadDescTxt@1018 : TextConst '@@@=%1 - Bank Account name;ENU=%1 Bank Statement Import;RUS=%1 - импорт банковских выписок';
      JobQEntriesCreatedQst@1019 : TextConst 'ENU=A job queue entry for import of bank statements has been created.\\Do you want to open the Job Queue Entry window?;RUS=Операция очереди работ для импорта банковских выписок создана.\\Открыть окно операций очереди работ?';
      TransactionImportTimespanMustBePositiveErr@1020 : TextConst 'ENU=The value in the Number of Days Included field must be a positive number not greater than 9999.;RUS=Значение в поле "Включаемое количество дней" должно быть положительным числом не больше 9999.';
      MFANotSupportedErr@1021 : TextConst 'ENU=Cannot setup automatic bank statement import because the selected bank requires multi-factor authentication.;RUS=Не удается настроить автоматический импорт банковских выписок, так как для выбранного банка требуется многофакторная проверка подлинности.';
      BankAccNotLinkedErr@1023 : TextConst 'ENU=This bank account is not linked to an online bank account.;RUS=Этот банковский счет не связан с интерактивным банковским счетом.';
      AutoLogonNotPossibleErr@1024 : TextConst 'ENU=Automatic logon is not possible for this bank account.;RUS=Для этого банковского счета невозможен автоматический вход.';
      CancelTxt@1017 : TextConst 'ENU=Cancel;RUS=Отмена';
      OnlineFeedStatementStatus@1022 : 'Not Linked,Linked,Linked and Auto. Bank Statement Enabled';
      ">>>NOS-26"@1101495000 : Integer;
      "NCV>"@1101495008 : Integer;
      MovingDataSetup@1101495007 : Record 50064;
      DimValue@1101495006 : Record 349;
      oldBankAccount@1101495005 : Record 270;
      RenameRef@1101495004 : Codeunit 50029;
      ErrorCode@1101495003 : Code[10];
      ErrorText@1101495002 : Text[250];
      DefDim@1101495001 : Record 352;

    PROCEDURE AssistEdit@2(OldBankAcc@1000 : Record 270) : Boolean;
    BEGIN
      WITH BankAcc DO BEGIN
        BankAcc := Rec;
        GLSetup.GET;
        GLSetup.TESTFIELD("Bank Account Nos.");
        IF NoSeriesMgt.SelectSeries(GLSetup."Bank Account Nos.",OldBankAcc."No. Series","No. Series") THEN BEGIN
          GLSetup.GET;
          GLSetup.TESTFIELD("Bank Account Nos.");
          //NC NOS-26 > ENK
          {
          NoSeriesMgt.SetSeries("No.");
          }
          NoSeriesMgt.SetSeries("Internal Code");
          //NC NOS-26 < ENK
          Rec := BankAcc;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::"Bank Account","No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::"Bank Account");
      ContBusRel.SETRANGE("No.","No.");
      IF NOT ContBusRel.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text003,FALSE,TABLECAPTION,"No.") THEN
          EXIT;
        UpdateContFromBank.InsertNewContact(Rec,FALSE);
        ContBusRel.FINDFIRST;
      END;
      COMMIT;

      Cont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
      PAGE.RUN(PAGE::"Contact List",Cont);
    END;

    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    PROCEDURE GetPaymentExportCodeunitID@6() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      GetBankExportImportSetup(BankExportImportSetup);
      EXIT(BankExportImportSetup."Processing Codeunit ID");
    END;

    PROCEDURE GetPaymentExportXMLPortID@4() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      GetBankExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing XMLport ID");
      EXIT(BankExportImportSetup."Processing XMLport ID");
    END;

    PROCEDURE GetDDExportCodeunitID@11() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      GetDDExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing Codeunit ID");
      EXIT(BankExportImportSetup."Processing Codeunit ID");
    END;

    PROCEDURE GetDDExportXMLPortID@9() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      GetDDExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing XMLport ID");
      EXIT(BankExportImportSetup."Processing XMLport ID");
    END;

    PROCEDURE GetBankExportImportSetup@8(VAR BankExportImportSetup@1001 : Record 1200);
    BEGIN
      TESTFIELD("Payment Export Format");
      BankExportImportSetup.GET("Payment Export Format");
    END;

    PROCEDURE GetDDExportImportSetup@12(VAR BankExportImportSetup@1001 : Record 1200);
    BEGIN
      TESTFIELD("SEPA Direct Debit Exp. Format");
      BankExportImportSetup.GET("SEPA Direct Debit Exp. Format");
    END;

    PROCEDURE GetCreditTransferMessageNo@5() : Code[20];
    VAR
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      TESTFIELD("Credit Transfer Msg. Nos.");
      EXIT(NoSeriesManagement.GetNextNo("Credit Transfer Msg. Nos.",TODAY,TRUE));
    END;

    PROCEDURE GetDirectDebitMessageNo@10() : Code[20];
    VAR
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      TESTFIELD("Direct Debit Msg. Nos.");
      EXIT(NoSeriesManagement.GetNextNo("Direct Debit Msg. Nos.",TODAY,TRUE));
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Bank Account",GETPOSITION)
      ELSE
        MESSAGE(Text004);
    END;

    PROCEDURE ValidateAccountNo@1470000();
    BEGIN
      CASE CurrFieldNo OF
        FIELDNO("Bank Account No."):
      // NCSB      IF STRLEN("Bank Account No.") > 20 THEN
        IF STRLEN("Bank Account No.") > 30 THEN
            FIELDERROR("Bank Account No.");
        FIELDNO("Bank Corresp. Account No."):
          IF STRLEN("Bank Corresp. Account No.") > 20 THEN
            FIELDERROR("Bank Corresp. Account No.");
      END;
    END;

    PROCEDURE GetDataExchDef@13(VAR DataExchDef@1000 : Record 1222);
    VAR
      BankExportImportSetup@1001 : Record 1200;
      DataExchDefCodeResponse@1002 : Code[20];
      Handled@1003 : Boolean;
    BEGIN
      OnGetDataExchangeDefinitionEvent(DataExchDefCodeResponse,Handled);
      IF NOT Handled THEN BEGIN
        TESTFIELD("Bank Statement Import Format");
        DataExchDefCodeResponse := "Bank Statement Import Format";
      END;

      IF DataExchDefCodeResponse = '' THEN
        ERROR(DataExchNotSetErr);

      BankExportImportSetup.GET(DataExchDefCodeResponse);
      BankExportImportSetup.TESTFIELD("Data Exch. Def. Code");

      DataExchDef.GET(BankExportImportSetup."Data Exch. Def. Code");
      DataExchDef.TESTFIELD(Type,DataExchDef.Type::"Bank Statement Import");
    END;

    PROCEDURE GetBankAccountNoWithCheck@14() AccountNo : Text;
    BEGIN
      AccountNo := GetBankAccountNo;
      IF AccountNo = '' THEN
        ERROR(BankAccIdentifierIsEmptyErr,FIELDCAPTION("Bank Account No."),FIELDCAPTION(IBAN));
    END;

    PROCEDURE GetBankAccountNo@15() : Text;
    BEGIN
      IF IBAN <> '' THEN
        EXIT(DELCHR(IBAN,'=<>'));

      IF "Bank Account No." <> '' THEN
        EXIT("Bank Account No.");
    END;

    PROCEDURE IsInLocalCurrency@16() : Boolean;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(TRUE);

      GeneralLedgerSetup.GET;
      EXIT("Currency Code" = GeneralLedgerSetup.GetCurrencyCode(''));
    END;

    PROCEDURE GetPosPayExportCodeunitID@17() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      TESTFIELD("Positive Pay Export Code");
      BankExportImportSetup.GET("Positive Pay Export Code");
      EXIT(BankExportImportSetup."Processing Codeunit ID");
    END;

    PROCEDURE IsLinkedToBankStatementServiceProvider@27() : Boolean;
    VAR
      IsBankAccountLinked@1000 : Boolean;
    BEGIN
      OnCheckLinkedToStatementProviderEvent(Rec,IsBankAccountLinked);
      EXIT(IsBankAccountLinked);
    END;

    PROCEDURE StatementProvidersExist@37() : Boolean;
    VAR
      TempNameValueBuffer@1000 : TEMPORARY Record 823;
    BEGIN
      OnGetStatementProvidersEvent(TempNameValueBuffer);
      EXIT(NOT TempNameValueBuffer.ISEMPTY);
    END;

    PROCEDURE LinkStatementProvider@32(VAR BankAccount@1001 : Record 270);
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      IF StatementProvider <> '' THEN
        OnLinkStatementProviderEvent(BankAccount,StatementProvider);
    END;

    PROCEDURE SimpleLinkStatementProvider@39(VAR OnlineBankAccLink@1001 : Record 777);
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      IF StatementProvider <> '' THEN
        OnSimpleLinkStatementProviderEvent(OnlineBankAccLink,StatementProvider);
    END;

    PROCEDURE UnlinkStatementProvider@31();
    VAR
      Handled@1000 : Boolean;
    BEGIN
      OnUnlinkStatementProviderEvent(Rec,Handled);
    END;

    PROCEDURE UpdateBankAccountLinking@35();
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      IF StatementProvider <> '' THEN
        OnUpdateBankAccountLinkingEvent(Rec,StatementProvider);
    END;

    PROCEDURE GetUnlinkedBankAccounts@30(VAR TempUnlinkedBankAccount@1000 : TEMPORARY Record 270);
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      IF BankAccount.FINDSET THEN
        REPEAT
          IF NOT BankAccount.IsLinkedToBankStatementServiceProvider THEN BEGIN
            TempUnlinkedBankAccount := BankAccount;
            TempUnlinkedBankAccount.INSERT;
          END;
        UNTIL BankAccount.NEXT = 0;
    END;

    PROCEDURE GetLinkedBankAccounts@33(VAR TempUnlinkedBankAccount@1000 : TEMPORARY Record 270);
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      IF BankAccount.FINDSET THEN
        REPEAT
          IF BankAccount.IsLinkedToBankStatementServiceProvider THEN BEGIN
            TempUnlinkedBankAccount := BankAccount;
            TempUnlinkedBankAccount.INSERT;
          END;
        UNTIL BankAccount.NEXT = 0;
    END;

    LOCAL PROCEDURE SelectBankLinkingService@38() : Text;
    VAR
      TempNameValueBuffer@1002 : TEMPORARY Record 823;
      OptionStr@1001 : Text;
      OptionNo@1000 : Integer;
    BEGIN
      OnGetStatementProvidersEvent(TempNameValueBuffer);

      IF TempNameValueBuffer.ISEMPTY THEN
        EXIT(''); // Action should not be visible in this case so should not occur

      IF (TempNameValueBuffer.COUNT = 1) OR (NOT GUIALLOWED) THEN
        EXIT(TempNameValueBuffer.Name);

      TempNameValueBuffer.FINDSET;
      REPEAT
        OptionStr += STRSUBSTNO('%1,',TempNameValueBuffer.Value);
      UNTIL TempNameValueBuffer.NEXT = 0;
      OptionStr += CancelTxt;

      OptionNo := STRMENU(OptionStr);
      IF (OptionNo = 0) OR (OptionNo = TempNameValueBuffer.COUNT + 1) THEN
        EXIT;

      TempNameValueBuffer.SETRANGE(Value,SELECTSTR(OptionNo,OptionStr));
      TempNameValueBuffer.FINDFIRST;

      EXIT(TempNameValueBuffer.Name);
    END;

    PROCEDURE IsAutoLogonPossible@28() : Boolean;
    VAR
      AutoLogonPossible@1000 : Boolean;
    BEGIN
      AutoLogonPossible := TRUE;
      OnCheckAutoLogonPossibleEvent(Rec,AutoLogonPossible);
      EXIT(AutoLogonPossible)
    END;

    LOCAL PROCEDURE ScheduleBankStatementDownload@18();
    VAR
      JobQueueEntry@1002 : Record 472;
    BEGIN
      IF NOT IsLinkedToBankStatementServiceProvider THEN
        ERROR(BankAccNotLinkedErr);
      IF NOT IsAutoLogonPossible THEN
        ERROR(AutoLogonNotPossibleErr);

      JobQueueEntry.ScheduleRecurrentJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Automatic Import of Bank Stmt.",RECORDID);
      JobQueueEntry."Timeout (sec.)" := 1800;
      JobQueueEntry.Description :=
        COPYSTR(STRSUBSTNO(BankStmtScheduledDownloadDescTxt,Name),1,MAXSTRLEN(JobQueueEntry.Description));
      JobQueueEntry."Notify On Success" := FALSE;
      JobQueueEntry."No. of Minutes between Runs" := 121;
      JobQueueEntry.MODIFY;
      IF CONFIRM(JobQEntriesCreatedQst) THEN
        ShowBankStatementDownloadJobQueueEntry;
    END;

    LOCAL PROCEDURE UnscheduleBankStatementDownload@20();
    VAR
      JobQueueEntry@1002 : Record 472;
    BEGIN
      SetAutomaticImportJobQueueEntryFilters(JobQueueEntry);
      IF NOT JobQueueEntry.ISEMPTY THEN
        JobQueueEntry.DELETEALL;
    END;

    PROCEDURE CreateNewAccount@42(OnlineBankAccLink@1000 : Record 777);
    BEGIN
      INIT;
      VALIDATE("Bank Account No.",OnlineBankAccLink."Bank Account No.");
      VALIDATE(Name,OnlineBankAccLink.Name);
      VALIDATE("Currency Code",OnlineBankAccLink."Currency Code");
      VALIDATE(Contact,OnlineBankAccLink.Contact);
    END;

    LOCAL PROCEDURE ShowBankStatementDownloadJobQueueEntry@19();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      SetAutomaticImportJobQueueEntryFilters(JobQueueEntry);
      IF JobQueueEntry.FINDFIRST THEN
        PAGE.RUN(PAGE::"Job Queue Entry Card",JobQueueEntry);
    END;

    LOCAL PROCEDURE SetAutomaticImportJobQueueEntryFilters@21(VAR JobQueueEntry@1000 : Record 472);
    BEGIN
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Automatic Import of Bank Stmt.");
      JobQueueEntry.SETRANGE("Record ID to Process",RECORDID);
    END;

    PROCEDURE GetOnlineFeedStatementStatus@44(VAR OnlineFeedStatus@1000 : Option;VAR Linked@1001 : Boolean);
    BEGIN
      Linked := FALSE;
      OnlineFeedStatus := OnlineFeedStatementStatus::"Not Linked";
      IF IsLinkedToBankStatementServiceProvider THEN BEGIN
        Linked := TRUE;
        OnlineFeedStatus := OnlineFeedStatementStatus::Linked;
        IF IsScheduledBankStatement THEN
          OnlineFeedStatus := OnlineFeedStatementStatus::"Linked and Auto. Bank Statement Enabled";
      END;
    END;

    LOCAL PROCEDURE IsScheduledBankStatement@43() : Boolean;
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      JobQueueEntry.SETRANGE("Record ID to Process",RECORDID);
      EXIT(JobQueueEntry.FINDFIRST);
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckLinkedToStatementProviderEvent@22(VAR BankAccount@1000 : Record 270;VAR IsLinked@1002 : Boolean);
    BEGIN
      // The subscriber of this event should answer whether the bank account is linked to a bank statement provider service
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckAutoLogonPossibleEvent@23(VAR BankAccount@1000 : Record 270;VAR AutoLogonPossible@1001 : Boolean);
    BEGIN
      // The subscriber of this event should answer whether the bank account can be logged on to without multi-factor authentication
    END;

    [Integration]
    LOCAL PROCEDURE OnUnlinkStatementProviderEvent@24(VAR BankAccount@1000 : Record 270;VAR Handled@1002 : Boolean);
    BEGIN
      // The subscriber of this event should unlink the bank account from a bank statement provider service
    END;

    [Integration]
    PROCEDURE OnMarkAccountLinkedEvent@41(VAR OnlineBankAccLink@1000 : Record 777;VAR BankAccount@1001 : Record 270);
    BEGIN
      // The subscriber of this event should Mark the account linked to a bank statement provider service
    END;

    [Integration]
    LOCAL PROCEDURE OnSimpleLinkStatementProviderEvent@40(VAR OnlineBankAccLink@1000 : Record 777;VAR StatementProvider@1002 : Text);
    BEGIN
      // The subscriber of this event should link the bank account to a bank statement provider service
    END;

    [Integration]
    LOCAL PROCEDURE OnLinkStatementProviderEvent@25(VAR BankAccount@1000 : Record 270;VAR StatementProvider@1002 : Text);
    BEGIN
      // The subscriber of this event should link the bank account to a bank statement provider service
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnGetDataExchangeDefinitionEvent@26(VAR DataExchDefCodeResponse@1001 : Code[20];VAR Handled@1000 : Boolean);
    BEGIN
      // This event should retrieve the data exchange definition format for processing the online feeds
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateBankAccountLinkingEvent@34(VAR BankAccount@1000 : Record 270;VAR StatementProvider@1001 : Text);
    BEGIN
      // This event should handle updating of the single or multiple bank accounts
    END;

    [Integration]
    LOCAL PROCEDURE OnGetStatementProvidersEvent@36(VAR TempNameValueBuffer@1002 : TEMPORARY Record 823);
    BEGIN
      // The subscriber of this event should insert a unique identifier (Name) and friendly name of the provider (Value)
    END;

    LOCAL PROCEDURE ">NOS-26"@1101495000();
    BEGIN
    END;

    PROCEDURE SyncronizeIt@1000000000(Mode@1000000000 : 'Insert,Modify,Delete,Rename');
    VAR
      SyncBankAcc@1000000012 : Record 50124;
      SyncSetup@1000000003 : Record 50122;
      SyncFilter@1000000008 : Record 50123;
      BankAccTemp@1000000001 : TEMPORARY Record 270;
      xBankAccTemp@1000000013 : TEMPORARY Record 270;
      SyncLog@1000000005 : Record 50121;
      Recref@1000000006 : RecordRef;
      FldRef@1000000007 : FieldRef;
      Logged@1000000009 : Boolean;
      ToLog@1000000010 : Boolean;
    BEGIN
      {
      // TRD BMN 12.11.2010
      // Синхронизация справочника Bank Account с другими системами через промежуточную таблицу "Sync Bank Account" в текущей БД.
      //
      // Настройки синхронизации - в таблицах "Sync Table Setup" (выбор таблиц), "Sync Table Filter Setup" (фильтр записей)
      // Журнал событий для просмотра внешними системами - "Sync Log" (со ссылкой на соответствующую событию
      // буферную таблицу "Sync Bank Account")

      Logged := FALSE;
      SyncBankAcc.INIT;

      SyncSetup.RESET;
      SyncSetup.SETRANGE("Ext. System ID Filter", DATABASE::"Bank Account");

      IF SyncSetup.FINDFIRST THEN BEGIN             // Настройки синхронизации справочников
        BankAccTemp.RESET;
        BankAccTemp.DELETEALL;
        BankAccTemp := Rec;
        BankAccTemp.INSERT;

        xBankAccTemp.RESET;
        xBankAccTemp.DELETEALL;
        xBankAccTemp := xRec;
        xBankAccTemp.INSERT;

        REPEAT
          ToLog := TRUE;

          SyncFilter.RESET;
          SyncFilter.SETRANGE("Rule No.", SyncSetup."Rule No.");
          SyncFilter.SETRANGE("Table No.", DATABASE::"Bank Account");

          IF SyncFilter.FINDFIRST THEN BEGIN         // Проверка условия отбора записей для синхронизации
            BankAccTemp.RESET;
            Recref.GETTABLE(BankAccTemp);
            REPEAT
              FldRef := Recref.FIELD(SyncFilter."Field No.");
              FldRef.SETFILTER(SyncFilter."Filter Text");
            UNTIL SyncFilter.NEXT= 0;

            ToLog := Recref.FINDFIRST;
          END;

          IF (NOT ToLog) AND (Mode <> Mode::Insert)  THEN BEGIN
            SyncFilter.FINDFIRST;
            xBankAccTemp.RESET;
            Recref.GETTABLE(xBankAccTemp);
            REPEAT
              FldRef := Recref.FIELD(SyncFilter."Field No.");
              FldRef.SETFILTER(SyncFilter."Filter Text");
            UNTIL SyncFilter.NEXT= 0;
            ToLog := Recref.FINDFIRST;
          END;

          IF ToLog THEN BEGIN
            IF (NOT Logged)  AND SyncSetup."Detailed Log"  THEN BEGIN   // Подробный журнал изменений
              SyncBankAcc.Type := Mode;
              SyncBankAcc."Id External System" := 'OF';
              SyncBankAcc."Time Creation" := CURRENTDATETIME;
              SyncBankAcc.Status := 0;
              SyncBankAcc."No." := "No.";
              IF Mode = Mode::Rename THEN BEGIN
                SyncBankAcc."No." := xRec."No.";
                SyncBankAcc."No. New" := Rec."No.";
              END;
              SyncBankAcc.Name := Rec.Name;
              SyncBankAcc.Blocked := Blocked;
              SyncBankAcc."Search Name" := "Search Name";
              SyncBankAcc."Name 2" := "Name 2";
              SyncBankAcc.Address := Address;
              SyncBankAcc."Address 2" := "Address 2";
              SyncBankAcc.City := City;
              SyncBankAcc.Contact := Contact;
              SyncBankAcc."Phone No." := "Phone No.";
              SyncBankAcc."Telex No." := "Telex No.";
              SyncBankAcc."Bank Account No." := "Bank Account No.";
              SyncBankAcc."Transit No." := "Transit No.";
              SyncBankAcc."Territory Code" := "Territory Code";
              SyncBankAcc."Global Dimension 1 Code" := "Global Dimension 1 Code";
              SyncBankAcc."Global Dimension 2 Code" := "Global Dimension 2 Code";
              SyncBankAcc."Bank Acc. Posting Group" := "Bank Acc. Posting Group";
              SyncBankAcc."Currency Code" := "Currency Code";
              SyncBankAcc."Country/Region Code" := "Country/Region Code";
              SyncBankAcc."Fax No." := "Fax No.";
              SyncBankAcc."Post Code" := "Post Code";
              SyncBankAcc.County := County;
              SyncBankAcc."Bank Branch No." := "Bank Branch No.";
              SyncBankAcc."E-Mail" := "E-Mail";
              SyncBankAcc."Home Page" := "Home Page";
              SyncBankAcc.IBAN := IBAN;
              SyncBankAcc."SWIFT Code" := "SWIFT Code";
              SyncBankAcc."Bank BIC" := "Bank BIC";
              SyncBankAcc."Account Type" := "Account Type";
              SyncBankAcc."Bank Corresp. Account No." := "Bank Corresp. Account No.";
              SyncBankAcc."Use Client-Bank" := "Use Client-Bank";
              SyncBankAcc."Customer No." := "Customer No.";
              SyncBankAcc."Account Type 2" := "Account Type 2";
              SyncBankAcc.Restricted := Restricted;
              SyncBankAcc."Opening Date" := "Opening Date";
              SyncBankAcc."Closing Date" := "Closing Date";
              SyncBankAcc."Overdrafts Limit" := "Overdrafts Limit";
              SyncBankAcc."Company No." := "Company No.";

              SyncBankAcc.INSERT;
              Logged := TRUE;
            END;

            SyncLog.CreateSyncLog(SyncSetup, SyncBankAcc."Entry No.");        // Список событий
          END;
        UNTIL SyncSetup.NEXT = 0;
      END;
      }
    END;

    BEGIN
    {
      NC MDB01 PCH Добавлены поля: "Customer No.", "Type of Financial Institution", "Account Type 2", Restricted,
                                   "Opening Date", "Closing Date", "Overdrafts Limit"
      NC MDB01 PCH Работа с измернием BANK ACCOUNT
      NC MDB06 PCH Добавлено поле Company No.
      NC OAM01 PCH таблица унакальная для всех фирм
      NC OAM02 DP Создание связанной аналитики с карточкой
      NC MTD02 AIG Изменения в коде
      NC OAM22 DP Изменено свойство Caption Class полей ..(LCY)
      NC OAM02.1 DP Добавлена автоматическая простановка аналитики Тело/Процент
      //TDRANCS-708>
        Build NAVW15.00,NAVRU5.00.01.03,NCMDB01,MDB06,MDB03,OAM01,OAM02,MTD02,OAM22,OAM38
        Corrected filling Dimension Value
          Modify Trigger OnInsert, OnModify;
      NC S547 PCH добавлено поле Rec ID
      NC NCS-1128 DP Добавлены поля Type, "Bank Customer No."
      NC NCS-1897 SB Добавлено поле Interest Rate
      NC NCS-2056 SB Добавлено поле Pledge, Англ. заголовки для некоторых полей скорректированы
      -----
      NC NOS-26 ENK
      Change CalcFormula:   Field 95 Balance at Date;
                            Field 96 Balance at Date (LCY).
      New keys:             Internal Code;
                            Rec ID.
      Change function:      AssistEdit.
    }
    END.
  }
}

