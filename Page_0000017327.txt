OBJECT Page 17327 Tax Calc. FA Entries
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Tax Calc. FA Entries;
               RUS=Операции ОС налогового расчета];
    SourceTable=Table17318;
    DataCaptionExpr=FormTitle();
    SourceTableView=SORTING(Section Code);
    PageType=Worksheet;
    OnOpenPage=BEGIN
                 COPYFILTER("Date Filter",Calendar."Period End");
                 TaxRegMgt.SetPeriodAmountType(Calendar,DateFilterText,PeriodType,AmountType);
                 Calendar.RESET;
                 DateFilterText := '*';
               END;

    OnFindRecord=BEGIN
                   IF DateFilterText <> GETFILTER("Date Filter") THEN
                     ShowNewData;

                   EXIT(FIND(Which));
                 END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 30      ;1   ;ActionGroup;
                      CaptionML=[ENU=Fixed Asset;
                                 RUS=ОС];
                      Image=FixedAssets }
      { 31      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Card;
                                 RUS=Карточка];
                      RunObject=Page 5600;
                      RunPageLink=No.=FIELD(FA No.);
                      Image=EditLines }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 23      ;1   ;Action    ;
                      CaptionML=[ENU=Previous Period;
                                 RUS=Предыдущий период];
                      ToolTipML=[ENU=Previous Period;
                                 RUS=Предыдущий период];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FindPeriod('<=');
                               END;
                                }
      { 24      ;1   ;Action    ;
                      CaptionML=[ENU=Next Period;
                                 RUS=Следующий период];
                      ToolTipML=[ENU=Next Period;
                                 RUS=Следующий период];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FindPeriod('>=');
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Posting Date;
                           RUS=Дата учета];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetMonthYear() }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the fixed asset number associated with the tax calculation fixed asset entry.;
                           RUS=Определяет номер ОС, связанный с операцией ОС налогового расчета.];
                SourceExpr="FA No.";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Name;
                           RUS=Название];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ObjectName() }

    { 1000000006;2;Field  ;
                ToolTipML=[ENU=Specifies if the fixed asset has been disposed.;
                           RUS=Определяет, было ли реализовано основное средство.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Disposed }

    { 1000000022;2;Field  ;
                ToolTipML=[ENU=Specifies the depreciation book code that is based on book accounting transactions.;
                           RUS=Определяет код книги амортизации, основанный на транзакциях бухгалтерского учета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Depreciation Book Code (Base)" }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the depreciation amount that is based on book accounting transactions.;
                           RUS=Определяет сумму амортизации, основанную на транзакциях бухгалтерского учета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Depreciation Amount (Base)" }

    { 1000000008;2;Field  ;
                ToolTipML=[ENU=Specifies the total depreciation amount that is based on book accounting transactions.;
                           RUS=Определяет общую сумму амортизации, основанную на транзакциях бухгалтерского учета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Total Depr. Amount (Base)" }

    { 1000000004;2;Field  ;
                ToolTipML=[ENU=Specifies the depreciation book code that is based on tax accounting transactions.;
                           RUS=Определяет код книги амортизации, основанный на транзакциях налогового учета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Depreciation Book Code (Tax)" }

    { 1000000016;2;Field  ;
                ToolTipML=[ENU=Specifies the depreciation amount that is based on tax accounting transactions.;
                           RUS=Определяет сумму амортизации, основанную на транзакциях налогового учета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Depreciation Amount (Tax)" }

    { 1000000010;2;Field  ;
                ToolTipML=[ENU=Specifies the total depreciation amount that is based on tax accounting transactions.;
                           RUS=Определяет общую сумму амортизации, основанную на транзакциях налогового учета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Total Depr. Amount (Tax)" }

    { 1000000002;2;Field  ;
                ToolTipML=[ENU=Specifies the fixed asset type associated with the tax calculation fixed asset entry.;
                           RUS=Определяет тип ОС, связанный с операцией ОС налогового расчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="FA Type" }

    { 26  ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies if the fixed asset entry belongs to production or nonproduction.;
                           RUS=Определяет, относится ли операция ОС к производственным или непроизводственным.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Belonging to Manufacturing" }

    { 1000000000;2;Field  ;
                ToolTipML=[ENU=Specifies the depreciation group associated with the tax calculation fixed asset entry.;
                           RUS=Определяет группу амортизации, связанную с операцией ОС налогового расчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Depreciation Group" }

    { 1470000;2;Field     ;
                ToolTipML=[ENU=Specifies the depreciation group elimination that is based on tax accounting transactions.;
                           RUS=Определяет исключение группы амортизации, основанное на транзакциях налогового учета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Depr. Group Elimination" }

    { 20  ;1   ;Field     ;
                ToolTipML=[ENU=Month;
                           RUS=Месяц];
                OptionCaptionML=[ENU=,,Month,Quarter,Year;
                                 RUS=,,Месяц,Квартал,Год];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             IF PeriodType = PeriodType::Year THEN
                               YearPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Quarter THEN
                               QuarterPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Month THEN
                               MonthPeriodTypeOnValidate;
                           END;
                            }

    { 101 ;1   ;Field     ;
                ToolTipML=[ENU=Current Period;
                           RUS=Текущий период];
                OptionCaptionML=[ENU=Current Period,Tax Period;
                                 RUS=Текущий период,Налоговый период];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AmountType;
                OnValidate=BEGIN
                             IF AmountType = AmountType::"Tax Period" THEN
                               TaxPeriodAmountTypeOnValidate;
                             IF AmountType = AmountType::"Current Period" THEN
                               CurrentPeriodAmountTypeOnValid;
                           END;
                            }

  }
  CODE
  {
    VAR
      Calendar@1000 : Record 2000000007;
      TaxRegMgt@1001 : Codeunit 17201;
      DateFilterText@1002 : Text;
      PeriodType@1003 : ',,Month,Quarter,Year';
      AmountType@1004 : 'Current Period,Tax Period';

    PROCEDURE ShowNewData@1();
    BEGIN
      FindPeriod('');
      DateFilterText := GETFILTER("Date Filter");

      SETFILTER("Date Filter",DateFilterText);
      SETFILTER("Ending Date",DateFilterText);
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
    BEGIN
      IF GETFILTER("Date Filter") <> '' THEN BEGIN
        Calendar."Period End" := GETRANGEMAX("Date Filter");
        IF NOT TaxRegMgt.FindDate('',Calendar,PeriodType,AmountType) THEN
          TaxRegMgt.FindDate('',Calendar,PeriodType::Month,AmountType);
      END;
      TaxRegMgt.FindDate(SearchText,Calendar,PeriodType,AmountType);

      SETFILTER("Date Filter",'%1..%2',Calendar."Period Start",Calendar."Period End");
    END;

    LOCAL PROCEDURE MonthPeriodTypeOnPush@19047374();
    BEGIN
      FindPeriod('');
    END;

    LOCAL PROCEDURE QuarterPeriodTypeOnPush@19018850();
    BEGIN
      FindPeriod('');
    END;

    LOCAL PROCEDURE YearPeriodTypeOnPush@19051042();
    BEGIN
      FindPeriod('');
    END;

    LOCAL PROCEDURE TaxPeriodAmountTypeOnPush@19068511();
    BEGIN
      FindPeriod('');
    END;

    LOCAL PROCEDURE CurrentPeriodAmountTypeOnPush@19039366();
    BEGIN
      FindPeriod('');
    END;

    LOCAL PROCEDURE MonthPeriodTypeOnValidate@19021027();
    BEGIN
      MonthPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE QuarterPeriodTypeOnValidate@19015346();
    BEGIN
      QuarterPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE YearPeriodTypeOnValidate@19064743();
    BEGIN
      YearPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE CurrentPeriodAmountTypeOnValid@19036813();
    BEGIN
      CurrentPeriodAmountTypeOnPush;
    END;

    LOCAL PROCEDURE TaxPeriodAmountTypeOnValidate@19037601();
    BEGIN
      TaxPeriodAmountTypeOnPush;
    END;

    BEGIN
    END.
  }
}

