OBJECT Table 381 VAT Registration No. Format
{
  OBJECT-PROPERTIES
  {
    Date=27.06.17;
    Time=10:26:35;
    Modified=Yes;
    Version List=NAVW110.00,NAVRU10.00,NOS-26;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=[ENU=VAT Registration No. Format;
               RUS=Формат ИНН];
  }
  FIELDS
  {
    { 1   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              RUS=Код страны/региона];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 3   ;   ;Format              ;Text20        ;CaptionML=[ENU=Format;
                                                              RUS=Формат] }
  }
  KEYS
  {
    {    ;Country/Region Code,Line No.            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The entered VAT Registration number is not in agreement with the format specified for Country/Region Code %1.\;RUS=Введенный ИНН не согласуется с форматом, определенным для кода страны/региона %1.\';
      Text001@1001 : TextConst 'ENU=The following formats are acceptable: %2;RUS=Допустимы следующие форматы: %2';
      Text002@1002 : TextConst 'ENU=This VAT registration number has already been entered for the following customers:\ %1;RUS=Этот ИНН уже введен для следующих клиентов:\ %1';
      Text003@1003 : TextConst 'ENU=This VAT registration number has already been entered for the following vendors:\ %1;RUS=Этот ИНН уже введен для следующих поставщиков:\ %1';
      Text004@1004 : TextConst 'ENU=This VAT registration number has already been entered for the following contacts:\ %1;RUS=Этот ИНН уже введен для следующих контактов:\ %1';
      Text005@1005 : TextConst 'ENU=ABCDEFGHIJKLMNOPQRSTUVWXYZ;RUS=ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      Text17350@1210000 : TextConst 'ENU=This VAT registration number has already been entered for the following persons:\ %1;RUS=Этот ИНН уже введен для следующих физ. лиц:\ %1';
      LocalVATRegNoCheckSumErr@1210001 : TextConst 'ENU=The entered VAT registration number is incorrect (checksum error).;RUS=Введен неверный ИНН (ошибка контрольной суммы).';

    PROCEDURE Test@1(VATRegNo@1000 : Text[20];CountryCode@1001 : Code[10];Number@1002 : Code[20];TableID@1003 : Option) : Boolean;
    VAR
      CompanyInfo@1005 : Record 79;
      Check@1004 : Boolean;
      t@1006 : Text[250];
    BEGIN
      IF VATRegNo = '' THEN
        EXIT;
      Check := TRUE;

      IF CountryCode = '' THEN BEGIN
        IF NOT CompanyInfo.GET THEN
          EXIT;
        SETRANGE("Country/Region Code",CompanyInfo."Country/Region Code");
      END ELSE
        SETRANGE("Country/Region Code",CountryCode);
      SETFILTER(Format,'<> %1','');
      IF FIND('-') THEN
        REPEAT
          IF t = '' THEN
            t := Format
          ELSE
            IF STRLEN(t) + STRLEN(Format) + 5 <= MAXSTRLEN(t) THEN
              t := t + ', ' + Format
            ELSE
              t := t + '...';
          Check := Compare(VATRegNo,Format);
        UNTIL Check OR (NEXT = 0);

      IF NOT Check THEN
        ERROR(Text000 + Text001,"Country/Region Code",t);

      CASE TableID OF
        DATABASE::Customer:
          CheckCust(VATRegNo,Number);
        DATABASE::Vendor:
          CheckVendor(VATRegNo,Number);
        DATABASE::Contact:
          CheckContact(VATRegNo,Number);
        DATABASE::Person:
          CheckPerson(VATRegNo,Number);
      END;

      IF CountryCode = '' THEN
        IF CompanyInfo."Country/Region Code" = 'RU' THEN
          TestLocalVATRegNo(VATRegNo);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckCust@3(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Cust@1003 : Record 18;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      t@1005 : Text[250];
    BEGIN
      Check := TRUE;
      t := '';
      Cust.SETCURRENTKEY("VAT Registration No.");
      Cust.SETRANGE("VAT Registration No.",VATRegNo);
      Cust.SETFILTER("No.",'<>%1',Number);
      IF Cust.FIND('-') THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF Cust."No." <> Number THEN
            IF t = '' THEN
              t := Cust."No."
            ELSE
              IF STRLEN(t) + STRLEN(Cust."No.") + 5 <= MAXSTRLEN(t) THEN
                t := t + ', ' + Cust."No."
              ELSE BEGIN
                t := t + '...';
                Finish := TRUE;
              END;
        UNTIL (Cust.NEXT = 0) OR Finish;
      END;
      IF Check = FALSE THEN
        MESSAGE(Text002,t);
    END;

    LOCAL PROCEDURE CheckVendor@4(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Vend@1003 : Record 23;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      t@1005 : Text[250];
    BEGIN
      Check := TRUE;
      t := '';
      Vend.SETCURRENTKEY("VAT Registration No.");
      Vend.SETRANGE("VAT Registration No.",VATRegNo);
      Vend.SETFILTER("No.",'<>%1',Number);
      IF Vend.FIND('-') THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF Vend."No." <> Number THEN
            IF t = '' THEN
              t := Vend."No."
            ELSE
              IF STRLEN(t) + STRLEN(Vend."No.") + 5 <= MAXSTRLEN(t) THEN
                t := t + ', ' + Vend."No."
              ELSE BEGIN
                t := t + '...';
                Finish := TRUE;
              END;
        UNTIL (Vend.NEXT = 0) OR Finish;
      END;
      IF Check = FALSE THEN
        MESSAGE(Text003,t);
    END;

    LOCAL PROCEDURE CheckContact@5(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Cont@1003 : Record 5050;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      t@1005 : Text[250];
    BEGIN
      Check := TRUE;
      t := '';
      Cont.SETCURRENTKEY("VAT Registration No.");
      Cont.SETRANGE("VAT Registration No.",VATRegNo);
      Cont.SETFILTER("No.",'<>%1',Number);
      IF Cont.FIND('-') THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF Cont."No." <> Number THEN
            IF t = '' THEN
              t := Cont."No."
            ELSE
              IF STRLEN(t) + STRLEN(Cont."No.") + 5 <= MAXSTRLEN(t) THEN
                t := t + ', ' + Cont."No."
              ELSE BEGIN
                t := t + '...';
                Finish := TRUE;
              END;
        UNTIL (Cont.NEXT = 0) OR Finish;
      END;
      IF Check = FALSE THEN
        MESSAGE(Text004,t);
    END;

    PROCEDURE CheckPerson@1210001(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Person@1003 : Record 17350;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      t@1005 : Text[250];
    BEGIN
      Check := TRUE;
      t := '';
      Person.SETCURRENTKEY("VAT Registration No.");
      Person.SETRANGE("VAT Registration No.",VATRegNo);
      Person.SETFILTER("No.",'<>%1',Number);
      IF Person.FINDSET THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF Person."No." <> Number THEN BEGIN
            IF t = '' THEN
              t := Person."No."
            ELSE
              IF STRLEN(t) + STRLEN(Person."No.") + 5 <= MAXSTRLEN(t) THEN
                t := t + ', ' + Person."No."
              ELSE BEGIN
                t := t + '...';
                Finish := TRUE;
              END;
          END;
        UNTIL (Person.NEXT = 0) OR Finish;
      END;
      IF Check = FALSE THEN
        MESSAGE(Text17350,t);
    END;

    PROCEDURE Compare@2(VATRegNo@1000 : Text[20];Format@1001 : Text[20]) : Boolean;
    VAR
      i@1002 : Integer;
      Cf@1003 : Text[1];
      Ce@1004 : Text[1];
      Check@1005 : Boolean;
    BEGIN
      Check := TRUE;
      IF STRLEN(VATRegNo) = STRLEN(Format) THEN
        FOR i := 1 TO STRLEN(VATRegNo) DO BEGIN
          Cf := COPYSTR(Format,i,1);
          Ce := COPYSTR(VATRegNo,i,1);
          CASE Cf OF
            '#':
              IF NOT ((Ce >= '0') AND (Ce <= '9')) THEN
                Check := FALSE;
            '@':
              IF STRPOS(Text005,UPPERCASE(Ce)) = 0 THEN
                Check := FALSE;
            ELSE
              IF NOT ((Cf = Ce) OR (Cf = '?')) THEN
                Check := FALSE
          END;
        END
      ELSE
        Check := FALSE;
      EXIT(Check);
    END;

    PROCEDURE TestLocalVATRegNo@1210004(VAR VATRegistrationNo@1210000 : Text[12]);
    VAR
      VATMultiplier@1210001 : ARRAY [3,11] OF Integer;
      VATRegistNo@1210003 : ARRAY [12] OF Integer;
      I@1210002 : Integer;
      TotalAmount@1210004 : Integer;
      CheckAmount@1210005 : Integer;
    BEGIN
      IF (STRLEN(VATRegistrationNo) <> 10) AND (STRLEN(VATRegistrationNo) <> 12) THEN
        ERROR(Text001);

      CLEAR(VATRegistNo);

      // 10-digit TIN
      VATMultiplier[1,1] := 2;
      VATMultiplier[1,2] := 4;
      VATMultiplier[1,3] := 10;
      VATMultiplier[1,4] := 3;
      VATMultiplier[1,5] := 5;
      VATMultiplier[1,6] := 9;
      VATMultiplier[1,7] := 4;
      VATMultiplier[1,8] := 6;
      VATMultiplier[1,9] := 8;

      // 12-digit TIN - 1 digit
      VATMultiplier[2,1] := 7;
      VATMultiplier[2,2] := 2;
      VATMultiplier[2,3] := 4;
      VATMultiplier[2,4] := 10;
      VATMultiplier[2,5] := 3;
      VATMultiplier[2,6] := 5;
      VATMultiplier[2,7] := 9;
      VATMultiplier[2,8] := 4;
      VATMultiplier[2,9] := 6;
      VATMultiplier[2,10] := 8;

      // 12-digit TIN - 2 digit
      VATMultiplier[3,1] := 3;
      VATMultiplier[3,2] := 7;
      VATMultiplier[3,3] := 2;
      VATMultiplier[3,4] := 4;
      VATMultiplier[3,5] := 10;
      VATMultiplier[3,6] := 3;
      VATMultiplier[3,7] := 5;
      VATMultiplier[3,8] := 9;
      VATMultiplier[3,9] := 4;
      VATMultiplier[3,10] := 6;
      VATMultiplier[3,11] := 8;

      TotalAmount := 0;
      CheckAmount := 0;
      IF STRLEN(VATRegistrationNo) = 10 THEN BEGIN
        FOR I := 1 TO 10 DO BEGIN
          EVALUATE(VATRegistNo[I],COPYSTR(VATRegistrationNo,I,1));
        END;

        FOR I := 1 TO 9 DO BEGIN
          TotalAmount := TotalAmount + VATRegistNo[I] * VATMultiplier[1,I];
        END;

        CheckAmount := TotalAmount MOD 11;
        CheckAmount := CheckAmount MOD 10;

        IF CheckAmount <> VATRegistNo[10] THEN
          ERROR(LocalVATRegNoCheckSumErr);
      END;

      TotalAmount := 0;
      CheckAmount := 0;
      IF STRLEN(VATRegistrationNo) = 12 THEN BEGIN
        FOR I := 1 TO 12 DO BEGIN
          EVALUATE(VATRegistNo[I],COPYSTR(VATRegistrationNo,I,1));
        END;

        FOR I := 1 TO 10 DO BEGIN
          TotalAmount := TotalAmount + VATRegistNo[I] * VATMultiplier[2,I];
        END;

        CheckAmount := TotalAmount MOD 11;
        CheckAmount := CheckAmount MOD 10;

        IF CheckAmount <> VATRegistNo[11] THEN
          ERROR(LocalVATRegNoCheckSumErr);
      END;

      CheckAmount := 0;
      TotalAmount := 0;
      IF STRLEN(VATRegistrationNo) = 12 THEN BEGIN
        FOR I := 1 TO 11 DO BEGIN
          TotalAmount := TotalAmount + VATRegistNo[I] * VATMultiplier[3,I];
        END;

        CheckAmount := TotalAmount MOD 11;
        CheckAmount := CheckAmount MOD 10;

        IF CheckAmount <> VATRegistNo[12] THEN
          ERROR(LocalVATRegNoCheckSumErr);
      END;
    END;

    BEGIN
    END.
  }
}

