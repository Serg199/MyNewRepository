OBJECT Report 80000 Copy Settings
{
  OBJECT-PROPERTIES
  {
    Date=27.03.17;
    Time=14:18:25;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnPreReport=BEGIN
                  {
                  Vendor.RESET;
                  Vendor.SETRANGE("Agreement Posting", Vendor."Agreement Posting"::"No Agreement");
                  IF Vendor.FINDSET THEN REPEAT
                    Vendor."Agreement Posting" := Vendor."Agreement Posting"::Mandatory;
                    Vendor.MODIFY;
                  UNTIL Vendor.NEXT = 0;

                  Customer.RESET;
                  Customer.SETRANGE("Agreement Posting", Customer."Agreement Posting"::"No Agreement");
                  IF Customer.FINDSET THEN REPEAT
                    Customer."Agreement Posting" := Customer."Agreement Posting"::Mandatory;
                    Customer.MODIFY;
                  UNTIL Customer.NEXT = 0;
                  }

                  Company.RESET;
                  IF Company.FINDSET THEN
                  REPEAT
                    Deal.CHANGECOMPANY(Company.Name);
                    Deal.INIT;
                    Deal."Deal ID" := 'DUMMY';
                    IF Deal.INSERT(TRUE) THEN;
                  {
                    VendorAgreement.CHANGECOMPANY(MappingLE."Company No.");
                    VendorAgreement.INIT;
                    VendorAgreement."Vendor No." := BufferDeal."Customer No.";
                    VendorAgreement."No." := BufferDeal."Deal ID";
                    VendorAgreement."External Agreement No." := BufferDeal."Deal ID";
                    VendorAgreement.Description := BufferDeal."Deal ID";
                    VendorAgreement.Active := TRUE;
                    VendorAgreement."Deal No." := BufferDeal."Deal ID";
                    VendorAgreement."Currency Code" := BufferDeal.Currency;
                    VendorAgreement."Agreement Type" := VendorAgreement."Agreement Type"::Trade;
                    VendorAgreement.INSERT(TRUE);

                    CustomerAgreement.CHANGECOMPANY(MappingLE."Company No.");
                    CustomerAgreement.INIT;
                    CustomerAgreement."Customer No." := BufferDeal."Company No.";
                    CustomerAgreement."No." := BufferDeal."Deal ID";
                    CustomerAgreement."External Agreement No." := BufferDeal."Deal ID";
                    CustomerAgreement.Description := BufferDeal."Deal ID";
                    CustomerAgreement.Active := TRUE;
                    CustomerAgreement."Deal No." := BufferDeal."Deal ID";
                    CustomerAgreement."Currency Code" := BufferDeal.Currency;
                    CustomerAgreement."Agreement Type" := CustomerAgreement."Agreement Type"::Trade;
                    IF NOT CustomerAgreement.INSERT THEN;
                  }
                  UNTIL Company.NEXT = 0;

                  EXIT;
                  {
                  Company.RESET;
                  IF Company.FINDSET THEN
                  REPEAT
                    SalesReceivablesSetup.CHANGECOMPANY(Company.Name);
                    SalesReceivablesSetup.GET;
                    SalesReceivablesSetup."Stockout Warning" := FALSE;
                    SalesReceivablesSetup."Appln. between Currencies" := SalesReceivablesSetup."Appln. between Currencies"::All;
                    SalesReceivablesSetup."Synch. Agreement Dimension" := TRUE;
                    SalesReceivablesSetup."Customer Agreement Dim. Code" := 'DEAL';
                    SalesReceivablesSetup."Cust. Trade Agrmnt. Dim. Code" := 'DEAL';
                    SalesReceivablesSetup.MODIFY;

                    PurchasesPayablesSetup.CHANGECOMPANY(Company.Name);
                    PurchasesPayablesSetup.GET;
                    PurchasesPayablesSetup."Reporting Dimension" := 'AC.COMP';
                    PurchasesPayablesSetup."Synch. Agreement Dimension" := TRUE;
                    PurchasesPayablesSetup."Vendor Agreement Dim. Code" := 'DEAL';
                    PurchasesPayablesSetup."Appln. between Currencies" := PurchasesPayablesSetup."Appln. between Currencies"::All;
                    PurchasesPayablesSetup.MODIFY;

                    GLSetup.CHANGECOMPANY(Company.Name);
                    GLSetup.GET;
                    GLSetup."Use Application Postfix" := TRUE;
                    GLSetup.MODIFY;
                  UNTIL Company.NEXT = 0;
                  EXIT;
                  }
                  {
                  VendorLedgerEntry.RESET;
                  //VendorLedgerEntry.SETCURRENTKEY("Document No.");
                  //VendorLedgerEntry.SETRANGE("Document No.", '');
                  IF VendorLedgerEntry.FINDSET THEN REPEAT
                  {
                    DetVendorLedgEntry.RESET;
                    DetVendorLedgEntry.SETRANGE("Vendor Ledger Entry No.", VendorLedgerEntry."Entry No.");
                    IF DetVendorLedgEntry.FINDFIRST THEN BEGIN
                      VendorLedgerEntry1.GET(VendorLedgerEntry."Entry No.");
                      VendorLedgerEntry1."Document No." := DetVendorLedgEntry."Document No.";
                      VendorLedgerEntry1.MODIFY;
                    END;
                  }
                    VendorLedgerEntry.Open := FALSE;
                  UNTIL VendorLedgerEntry.NEXT = 0;
                  EXIT;
                  }
                  {
                  GenJournalLine.RESET;
                  GenJournalLine.SETRANGE("Journal Template Name", 'GENJL');
                  GenJournalLine.SETRANGE("Journal Batch Name", 'OFFSET');
                  //GenJournalLine.SETRANGE("Journal Batch Name", 'GJNEW_S');
                  IF GenJournalLine.FINDSET THEN
                  REPEAT
                    IF GenJournalLine."Account No." = '' THEN BEGIN
                      GenJournalLine."Account No." := '82300000';
                      GenJournalLine.MODIFY;
                    END;
                  {
                    JournalLineDimension.INIT;
                    JournalLineDimension."Table ID" := 81;
                    JournalLineDimension."Journal Template Name" := 'GENJL';
                    JournalLineDimension."Journal Batch Name" := 'GJNEW_S';
                    JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
                    JournalLineDimension."Dimension Code" := 'INC.TAX';
                    JournalLineDimension."Dimension Value Code" := 'NON TAXABLE';
                    JournalLineDimension.INSERT;
                  }
                  UNTIL GenJournalLine.NEXT = 0;
                  }

                  {
                  //доопределение связанной аналитики
                  DimensionValue.RESET;
                  DimensionValue.SETRANGE("Dimension Code", 'DEAL');
                  IF DimensionValue.FINDSET THEN REPEAT
                    DimensionValue1.INIT;
                    DimensionValue1."Dimension Code" := 'AGREEMENT';
                    DimensionValue1.Code := DimensionValue.Code;
                    IF DimensionValue1.INSERT(TRUE) THEN;
                    LinkedDimensionValue.INIT;
                    LinkedDimensionValue."Dimension Code" := 'DEAL';
                    LinkedDimensionValue."Dimension Value" := DimensionValue.Code;
                    LinkedDimensionValue."Linked Dimension Code" := 'AGREEMENT';
                    LinkedDimensionValue."Linked Dimension Value" := DimensionValue.Code;
                    IF LinkedDimensionValue.INSERT(TRUE) THEN;
                  UNTIL DimensionValue.NEXT = 0;
                  }
                  {
                  Company.RESET;
                  IF Company.FINDSET THEN
                  REPEAT
                    CurrencyExchangeRate.CHANGECOMPANY(Company.Name);
                    CurrencyExchangeRate.RESET;
                    CurrencyExchangeRate.SETRANGE("Currency Code", 'USD');
                    IF CurrencyExchangeRate.FINDSET THEN
                      CurrencyExchangeRate.DELETEALL;
                  UNTIL Company.NEXT = 0;
                  }
                  //EXIT;
                  {
                  VendorPostingGroup.RESET;
                  IF VendorPostingGroup.FINDSET THEN
                  REPEAT
                    IF VendorPostingGroup.Description = '' THEN BEGIN
                      GLAccount.GET(VendorPostingGroup."Payables Account");
                      VendorPostingGroup.Description := GLAccount.Name;
                      VendorPostingGroup.MODIFY;
                    END;
                  UNTIL VendorPostingGroup.NEXT = 0;

                  CustomerPostingGroup.RESET;
                  IF CustomerPostingGroup.FINDSET THEN
                  REPEAT
                    IF CustomerPostingGroup.Description = '' THEN BEGIN
                      GLAccount.GET(CustomerPostingGroup."Receivables Account");
                      CustomerPostingGroup.Description := GLAccount.Name;
                      CustomerPostingGroup.MODIFY;
                    END;
                  UNTIL CustomerPostingGroup.NEXT = 0;
                  EXIT;
                  }
                  //JobProcessesFrom.CHANGECOMPANY(CompanyFrom);
                  //JobProcessesTo.CHANGECOMPANY(CompanyTo);
                  {
                  JobProcessesFrom.RESET;
                  JobProcessesFrom.SETRANGE(Process,'ЗАДАНИЯ');
                  JobProcessesFrom.SETRANGE("Company No.", CompanyFrom);
                  JobProcessesFrom.SETRANGE("Auto Start", TRUE);
                  IF JobProcessesFrom.FINDSET THEN
                  REPEAT
                    JobProcessesTo.INIT;
                    JobProcessesTo.TRANSFERFIELDS(JobProcessesFrom);
                    JobProcessesTo.VALIDATE("Company No.", CompanyTo);
                    JobProcessesTo.INSERT(TRUE);
                  UNTIL JobProcessesFrom.NEXT = 0;
                  }
                  {
                  JobProcessesTo.RESET;
                  JobProcessesTo.SETRANGE("Company No.", CompanyTo);
                  JobProcessesTo.SETFILTER(Processor,'<>50031');
                  JobProcessesTo.SETRANGE(Processor, '50031');
                  IF JobProcessesTo.FINDSET THEN
                  REPEAT
                    JobProcessesTo."Auto Start" := TRUE;
                    JobProcessesTo.MODIFY;
                  UNTIL JobProcessesTo.NEXT = 0;
                  }
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      JobProcessesFrom@1000000000 : Record 50062;
      JobProcessesTo@1000000001 : Record 50062;
      CompanyFrom@1000000002 : Text[30];
      CompanyTo@1000000003 : Text[30];
      VendorPostingGroup@1000000004 : Record 93;
      CustomerPostingGroup@1000000005 : Record 92;
      GLAccount@1000000006 : Record 15;
      Company@1000000007 : Record 2000000006;
      CurrencyExchangeRate@1000000008 : Record 330;
      DimensionValue@1000000009 : Record 349;
      DimensionValue1@1000000011 : Record 349;
      LinkedDimensionValue@1000000010 : Record 50016;
      JournalLineDimension@1000000012 : Record 356;
      GenJournalLine@1000000013 : Record 81;
      SalesReceivablesSetup@1000000015 : Record 311;
      PurchasesPayablesSetup@1000000016 : Record 312;
      GLSetup@1000000014 : Record 98;
      VendorLedgerEntry@1000000017 : Record 25;
      VendorLedgerEntry1@1000000019 : Record 25;
      DetVendorLedgEntry@1000000018 : Record 380;
      Vendor@1101495000 : Record 23;
      Customer@1101495001 : Record 18;
      VendorAgreement@1101495002 : Record 14901;
      CustomerAgreement@1101495003 : Record 14902;
      Deal@1101495004 : Record 50037;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>1dd2dd32-d85e-4753-850d-474f97b3e369</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <Code>Public Function BlankZero(ByVal Value As Decimal)
    if Value = 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankPos(ByVal Value As Decimal)
    if Value &gt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankZeroAndPos(ByVal Value As Decimal)
    if Value &gt;= 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNeg(ByVal Value As Decimal)
    if Value &lt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNegAndZero(ByVal Value As Decimal)
    if Value &lt;= 0 then
        Return ""
    end if
    Return Value
End Function
</Code>
  <Language>=User!Language</Language>
  <ConsumeContainerWhitespace>true</ConsumeContainerWhitespace>
  <rd:ReportUnitType>Inch</rd:ReportUnitType>
  <rd:ReportID>0eeb6585-38ae-40f1-885b-8d50088d51b4</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

