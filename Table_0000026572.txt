OBJECT Table 26572 XML Element Expression Line
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckReportDataExistence;
             END;

    OnModify=BEGIN
               CheckReportDataExistence;
               IF XMLElementLine.GET("Report Code","Base XML Element Line No.") THEN
                 IF XMLElementLine."Source Type" = XMLElementLine."Source Type"::Expression THEN
                   UpdateRequisiteValue(FALSE);
             END;

    OnDelete=BEGIN
               CheckReportDataExistence;
               IF XMLElementLine.GET("Report Code","Base XML Element Line No.") THEN
                 IF XMLElementLine."Source Type" = XMLElementLine."Source Type"::Expression THEN
                   UpdateRequisiteValue(TRUE);
             END;

    CaptionML=[ENU=XML Element Expression Line;
               RUS=Строка выражения XML элемента];
  }
  FIELDS
  {
    { 1   ;   ;Report Code         ;Code20        ;TableRelation="Statutory Report";
                                                   CaptionML=[ENU=Report Code;
                                                              RUS=Код отчета] }
    { 3   ;   ;Base XML Element Line No.;Integer  ;CaptionML=[ENU=Base XML Element Line No.;
                                                              RUS=Базовый номер строки XML элемента] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 10  ;   ;XML Element Line No.;Integer       ;TableRelation="XML Element Line"."Line No." WHERE (Report Code=FIELD(Report Code));
                                                   CaptionML=[ENU=XML Element Line No.;
                                                              RUS=Номер строки XML элемента] }
    { 11  ;   ;XML Element Name    ;Text30        ;CaptionML=[ENU=XML Element Name;
                                                              RUS=Имя XML элемента] }
    { 20  ;   ;Value               ;Text250       ;CaptionML=[ENU=Value;
                                                              RUS=Значение];
                                                   Editable=No }
    { 21  ;   ;Source              ;Option        ;OnValidate=BEGIN
                                                                IF Source <> xRec.Source THEN BEGIN
                                                                  "Field ID" := 0;
                                                                  Value := '';
                                                                END;

                                                                UpdateReferences;
                                                              END;

                                                   CaptionML=[ENU=Source;
                                                              RUS=Источник];
                                                   OptionCaptionML=[ENU=Company Information,Director,Accountant,Sender,Export Log,Data Header,Report,Company Address;
                                                                    RUS=Сведения об организации,Руководитель,Бухгалтер,Отправитель,Журнал экспорта,Заголовок данных,Отчет,Адрес организации];
                                                   OptionString=Company Information,Director,Accountant,Sender,Export Log,Data Header,Report,Company Address }
    { 25  ;   ;Table ID            ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Table));
                                                   CaptionML=[ENU=Table ID;
                                                              RUS=Код таблицы] }
    { 27  ;   ;Field ID            ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   OnValidate=BEGIN
                                                                VALIDATE(Value,GetReferenceValue('',''));
                                                              END;

                                                   CaptionML=[ENU=Field ID;
                                                              RUS=Код поля] }
    { 28  ;   ;Field Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Table ID),
                                                                                             No.=FIELD(Field ID)));
                                                   CaptionML=[ENU=Field Name;
                                                              RUS=Имя поля];
                                                   Editable=No }
    { 29  ;   ;String Before       ;Text10        ;CaptionML=[ENU=String Before;
                                                              RUS=Строка до] }
    { 30  ;   ;String After        ;Text10        ;CaptionML=[ENU=String After;
                                                              RUS=Строка после] }
  }
  KEYS
  {
    {    ;Report Code,Base XML Element Line No.,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      StatutoryReport@1210002 : Record 26550;
      XMLElementLine@1210000 : Record 26570;
      Text001@1210001 : TextConst 'ENU=Expression cannot be modified because %1 %2 contains report data.;RUS=Невозможно изменить выражение, так как %1 %2 содержит данные отчета.';
      StatutoryReportSetup@1210003 : Record 26569;

    PROCEDURE LookupField@1210000(FieldId@1210001 : Integer) FieldNo : Integer;
    VAR
      Field@1210000 : Record 2000000041;
      FieldList@1210002 : Page 6218;
    BEGIN
      Field.RESET;
      Field.SETRANGE(TableNo,"Table ID");
      FieldList.EDITABLE := FALSE;
      FieldList.LOOKUPMODE := TRUE;
      FieldList.SETTABLEVIEW(Field);
      IF Field.GET("Table ID",FieldId) THEN
        FieldList.SETRECORD(Field);
      IF FieldList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        FieldList.GETRECORD(Field);
        FieldNo := Field."No.";
      END ELSE
        FieldNo := FieldId;
    END;

    PROCEDURE UpdateReferences@1210001();
    BEGIN
      CASE Source OF
        Source::"Company Information":
          "Table ID" := DATABASE::"Company Information";
        Source::Director,Source::Accountant,Source::Sender:
          "Table ID" := DATABASE::Employee;
        Source::"Export Log":
          "Table ID" := DATABASE::"Export Log Entry";
        Source::"Data Header":
          "Table ID" := DATABASE::"Statutory Report Data Header";
        Source::Report:
          "Table ID" := DATABASE::"Statutory Report";
        Source::"Company Address":
          "Table ID" := DATABASE::"Company Address";
      END;

      "Field ID" := 0;
    END;

    PROCEDURE GetReferenceValue@1210002(DataHeaderNo@1210006 : Code[20];ExportLogEntryNo@1210007 : Code[20]) : Text[250];
    VAR
      StatutoryReport@1210005 : Record 26550;
      CompInfo@1210004 : Record 79;
      Employee@1210003 : Record 5200;
      CompanyAddress@1210011 : Record 12425;
      StatutoryReportDataHeader@1210008 : Record 26563;
      ExportLogEntry@1210009 : Record 26567;
      RecordRef@1210000 : RecordRef;
      FieldRef@1210001 : FieldRef;
    BEGIN
      CompInfo.GET;
      CASE Source OF
        Source::"Company Information":
          RecordRef.GETTABLE(CompInfo);
        Source::Director:
          BEGIN
            CompInfo.TESTFIELD("Director No.");
            Employee.GET(CompInfo."Director No.");
            RecordRef.GETTABLE(Employee);
          END;
        Source::Accountant:
          BEGIN
            CompInfo.TESTFIELD("Accountant No.");
            Employee.GET(CompInfo."Accountant No.");
            RecordRef.GETTABLE(Employee);
          END;
        Source::Sender:
          BEGIN
            StatutoryReport.GET("Report Code");
            StatutoryReport.TESTFIELD("Sender No.");
            Employee.GET(StatutoryReport."Sender No.");
            RecordRef.GETTABLE(Employee);
          END;
        Source::"Export Log":
          BEGIN
            IF ExportLogEntryNo <> '' THEN BEGIN
              ExportLogEntry.GET(ExportLogEntryNo);
              RecordRef.GETTABLE(ExportLogEntry);
            END ELSE
              EXIT('');
          END;
        Source::"Data Header":
          BEGIN
            IF DataHeaderNo <> '' THEN BEGIN
              StatutoryReportDataHeader.GET(DataHeaderNo);
              StatutoryReportDataHeader.CALCFIELDS("Requisites Quantity","Set Requisites Quantity");
              RecordRef.GETTABLE(StatutoryReportDataHeader);
            END ELSE
              EXIT('');
          END;
        Source::Report:
          BEGIN
            StatutoryReport.GET("Report Code");
            RecordRef.GETTABLE(StatutoryReport);
          END;
        Source::"Company Address":
          BEGIN
            StatutoryReport.GET("Report Code");
            CompanyAddress.GET(
              StatutoryReport."Company Address Code",
              StatutoryReport."Company Address Language Code");
            RecordRef.GETTABLE(CompanyAddress);
          END;
        ELSE
          EXIT('');
      END;
      TESTFIELD("Field ID");
      FieldRef := RecordRef.FIELD("Field ID");
      EXIT(FORMAT(FieldRef.VALUE));
    END;

    PROCEDURE UpdateRequisiteValue@1210003(DeleteRecord@1210001 : Boolean) : Text[250];
    BEGIN
      XMLElementLine.GET("Report Code","Base XML Element Line No.");
      XMLElementLine.UpdateElementValue(Rec,DeleteRecord);
      XMLElementLine.MODIFY;
      EXIT(XMLElementLine.Value);
    END;

    PROCEDURE CheckReportDataExistence@1210020();
    BEGIN
      StatutoryReportSetup.GET;
      IF NOT StatutoryReportSetup."Setup Mode" THEN BEGIN
        XMLElementLine.GET("Report Code","Base XML Element Line No.");
        StatutoryReport.GET("Report Code");
        IF XMLElementLine.IsReportDataExist THEN
          ERROR(Text001,
            StatutoryReport.TABLECAPTION,
            StatutoryReport.Code);
      END;
    END;

    BEGIN
    END.
  }
}

