OBJECT Table 26555 Scalable Table Row
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    OnInsert=VAR
               StatutoryReportTable@1210000 : Record 26552;
               ScalableTableRow@1210001 : Record 26555;
             BEGIN
               StatutoryReportTable.GET("Report Code","Table Code");
               StatutoryReportTable.TESTFIELD("Scalable Table Max Rows Qty");
               ScalableTableRow.SETRANGE("Report Data No.","Report Data No.");
               ScalableTableRow.SETRANGE("Report Code","Report Code");
               ScalableTableRow.SETRANGE("Table Code","Table Code");
               ScalableTableRow.SETRANGE("Excel Sheet Name","Excel Sheet Name");
               IF ScalableTableRow.COUNT >= StatutoryReportTable."Scalable Table Max Rows Qty" THEN
                 ERROR(Text002,StatutoryReportTable.GetRecDescription,StatutoryReportTable."Scalable Table Max Rows Qty");
             END;

    OnDelete=VAR
               StatutoryReportDataValue@1210000 : Record 26564;
             BEGIN
               StatutoryReportDataValue.SETRANGE("Report Data No.","Report Data No.");
               StatutoryReportDataValue.SETRANGE("Report Code","Report Code");
               StatutoryReportDataValue.SETRANGE("Table Code","Table Code");
               StatutoryReportDataValue.SETRANGE("Excel Sheet Name","Excel Sheet Name");
               StatutoryReportDataValue.SETRANGE("Row No.","Line No.");
               StatutoryReportDataValue.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Scalable Table Row;
               RUS=Строка масштабируемой таблицы];
  }
  FIELDS
  {
    { 1   ;   ;Report Code         ;Code20        ;TableRelation="Statutory Report";
                                                   CaptionML=[ENU=Report Code;
                                                              RUS=Код отчета] }
    { 2   ;   ;Table Code          ;Code20        ;TableRelation="Statutory Report Table".Code WHERE (Report Code=FIELD(Report Code));
                                                   CaptionML=[ENU=Table Code;
                                                              RUS=Код таблицы] }
    { 3   ;   ;Report Data No.     ;Code20        ;CaptionML=[ENU=Report Data No.;
                                                              RUS=Номер данных отчета] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 5   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 10  ;   ;Excel Row No.       ;Integer       ;CaptionML=[ENU=Excel Row No.;
                                                              RUS=Номер строки Excel] }
    { 11  ;   ;Excel Sheet Name    ;Text30        ;TableRelation="Stat. Report Excel Sheet"."Sheet Name" WHERE (Report Code=FIELD(Report Code),
                                                                                                                Table Code=FIELD(Table Code),
                                                                                                                Report Data No.=FIELD(Report Data No.));
                                                   CaptionML=[ENU=Excel Sheet Name;
                                                              RUS=Имя листа Excel] }
  }
  KEYS
  {
    {    ;Report Data No.,Report Code,Table Code,Excel Sheet Name,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210000 : TextConst 'ENU=You must specify %1 in %2.;RUS=Необходимо указать %1 в %2.';
      Text002@1210001 : TextConst 'ENU=Table %1 can''t contain more then %2 rows.;RUS=В таблице %1 число строк не может превышать %2.';

    PROCEDURE ExportToExcel@1210000(VAR XlWrkSht@1210006 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;VAR ErrorMessage@1210002 : Text[250];ExcelLineNo@1210005 : Integer) : Boolean;
    VAR
      StatutoryReportTable@1210003 : Record 26552;
      StatReportTableColumn@1210001 : Record 26554;
      StatutoryReportDataValue@1210004 : Record 26564;
    BEGIN
      StatutoryReportTable.GET("Report Code","Table Code");

      StatReportTableColumn.SETRANGE("Report Code","Report Code");
      StatReportTableColumn.SETRANGE("Table Code","Table Code");
      IF StatReportTableColumn.FINDSET THEN
        REPEAT
          IF StatutoryReportDataValue.GET("Report Data No.","Report Code",
               "Table Code","Line No.",StatReportTableColumn."Line No.")
          THEN
            IF StatutoryReportDataValue.Value <> '' THEN BEGIN
              IF StatReportTableColumn."Excel Column Name" = '' THEN BEGIN
                ErrorMessage := STRSUBSTNO(Text001,
                    StatReportTableColumn.FIELDCAPTION("Excel Column Name"),
                    StatReportTableColumn.GetRecDescription);
                EXIT(FALSE);
              END;

              XlWrkSht.Range(StatReportTableColumn."Excel Column Name" + FORMAT(ExcelLineNo)).Value :=
                StatutoryReportDataValue.Value;
            END;
        UNTIL StatReportTableColumn.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE CreateRequisitesValues@1210001(DataHeaderNo@1210006 : Code[20];ExportLogEntryNo@1210012 : Code[20];ExcelLineNo@1210005 : Integer;VAR EntryNo@1210000 : Integer;RequisitesGroupName@1210007 : Text[30];ExcelSheetName@1210010 : Text[30];NewPage@1210011 : Boolean);
    VAR
      StatutoryReportTable@1210003 : Record 26552;
      StatReportTableColumn@1210001 : Record 26554;
      StatReportRequisite@1210008 : Record 26559;
      StatutoryReportDataValue@1210004 : Record 26564;
      StatReportRequisiteValue@1210002 : Record 26566;
    BEGIN
      StatutoryReportTable.GET("Report Code","Table Code");

      StatReportTableColumn.SETRANGE("Report Code","Report Code");
      StatReportTableColumn.SETRANGE("Table Code","Table Code");
      IF StatReportTableColumn.FINDSET THEN
        REPEAT
          StatReportRequisite.SETRANGE("Report Code","Report Code");
          StatReportRequisite.SETRANGE("Requisites Group Name",RequisitesGroupName);
          StatReportRequisite.SETRANGE("Scalable Table Row Template",TRUE);
          StatReportRequisite.SETRANGE("Column Link No.",StatReportTableColumn."Line No.");
          IF StatReportRequisite.FINDFIRST THEN BEGIN
            StatReportTableColumn.TESTFIELD("Excel Column Name");

            StatReportRequisiteValue.INIT;
            StatReportRequisiteValue."Report Data No." := DataHeaderNo;
            StatReportRequisiteValue."Entry No." := EntryNo;
            StatReportRequisiteValue."Report Code" := "Report Code";
            StatReportRequisiteValue."Table Code" := "Table Code";
            StatReportRequisiteValue."Excel Sheet Name" := ExcelSheetName;
            StatReportRequisiteValue."Requisites Group Name" := RequisitesGroupName;
            StatReportRequisiteValue.Name := StatReportRequisite.Name;
            IF StatutoryReportDataValue.GET("Report Data No.","Report Code",
                 "Table Code",ExcelSheetName,"Line No.",StatReportTableColumn."Line No.")
            THEN
              StatReportRequisiteValue.Value := StatutoryReportDataValue.Value;
            StatReportRequisiteValue."Excel Cell Name" :=
              StatReportTableColumn."Excel Column Name" + FORMAT(ExcelLineNo);
            StatReportRequisiteValue."Excel Only" := StatReportRequisite."Excel Only";
            IF (NOT NewPage) AND (StatReportRequisite."Source Type" = StatReportRequisite."Source Type"::"Individual Requisite") THEN
              StatReportRequisiteValue."Excel Only" := TRUE;
            StatReportRequisiteValue."Export Type" := StatReportRequisite."Export Type";
            StatReportRequisiteValue."Excel Mapping Type" := StatReportRequisite."Excel Mapping Type";
            IF StatReportRequisiteValue.CheckValue(ExportLogEntryNo) THEN
              StatReportRequisiteValue.INSERT;

            EntryNo := EntryNo + 1;
          END;
        UNTIL StatReportTableColumn.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

