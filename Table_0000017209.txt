OBJECT Table 17209 Tax Register G/L Entry
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Tax Register G/L Entry;
               RUS=Операции ГК налог. регистра];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              RUS=Номер операции] }
    { 2   ;   ;Section Code        ;Code10        ;TableRelation="Tax Register Section";
                                                   CaptionML=[ENU=Section Code;
                                                              RUS=Код секции] }
    { 4   ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              RUS=Дата начала];
                                                   Editable=No }
    { 5   ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              RUS=Дата окончания];
                                                   Editable=No }
    { 12  ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              RUS=Тип операции];
                                                   OptionCaptionML=[ENU=" ,Incoming,Spending";
                                                                    RUS=" ,Приход,Расход"];
                                                   OptionString=[ ,Incoming,Spending] }
    { 13  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              RUS=Дата учета] }
    { 15  ;   ;Amount (Document)   ;Decimal       ;CaptionML=[ENU=Amount (Document);
                                                              RUS=Сумма (документ)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 19  ;   ;Term Entry Line Code;Code10        ;CaptionML=[ENU=Term Entry Line Code;
                                                              RUS=Термин - код строки операции] }
    { 21  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   BlankZero=Yes }
    { 23  ;   ;Credit Amount       ;Decimal       ;CaptionML=[ENU=Credit Amount;
                                                              RUS=Сумма по кредиту];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 25  ;   ;Debit Amount        ;Decimal       ;CaptionML=[ENU=Debit Amount;
                                                              RUS=Сумма по дебету];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 38  ;   ;Where Used Register IDs;Code61     ;CaptionML=[ENU=Where Used Register IDs;
                                                              RUS=Коды регистра применимости] }
    { 50  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              RUS=Фильтр по дате] }
    { 60  ;   ;Debit Dimension 1 Value Code;Code20;CaptionML=[ENU=Debit Dimension 1 Value Code;
                                                              RUS=Код значения измерения 1 для дебета];
                                                   CaptionClass=GetDebitCaptionClass(1) }
    { 61  ;   ;Debit Dimension 2 Value Code;Code20;CaptionML=[ENU=Debit Dimension 2 Value Code;
                                                              RUS=Код значения измерения 2 для дебета];
                                                   CaptionClass=GetDebitCaptionClass(2) }
    { 62  ;   ;Debit Dimension 3 Value Code;Code20;CaptionML=[ENU=Debit Dimension 3 Value Code;
                                                              RUS=Код значения измерения 3 для дебета];
                                                   CaptionClass=GetDebitCaptionClass(3) }
    { 70  ;   ;Credit Dimension 1 Value Code;Code20;
                                                   CaptionML=[ENU=Credit Dimension 1 Value Code;
                                                              RUS=Код значения измерения 1 для кредита];
                                                   CaptionClass=GetCreditCaptionClass(1) }
    { 71  ;   ;Credit Dimension 2 Value Code;Code20;
                                                   CaptionML=[ENU=Credit Dimension 2 Value Code;
                                                              RUS=Код значения измерения 2 для кредита];
                                                   CaptionClass=GetCreditCaptionClass(2) }
    { 72  ;   ;Credit Dimension 3 Value Code;Code20;
                                                   CaptionML=[ENU=Credit Dimension 3 Value Code;
                                                              RUS=Код значения измерения 3 для кредита];
                                                   CaptionClass=GetCreditCaptionClass(3) }
    { 101 ;   ;Ledger Entry No.    ;Integer       ;TableRelation="G/L Entry"."Entry No.";
                                                   CaptionML=[ENU=Ledger Entry No.;
                                                              RUS=Номер операции ГК];
                                                   BlankZero=Yes }
    { 102 ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,Receipt,Shipment,Return Rcpt.,Return Shpt.,,,,,,,Positive Adj.,Negative Adj.";
                                                                    RUS=" ,Оплата,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение,,,,,Прих. накл.,Расх. накл.,Возвр. прих. накл.,Возврат поставки,,,,,,,Приход,Расход"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,Receipt,Shipment,Return Rcpt.,Return Shpt.,,,,,,,Positive Adj.,Negative Adj.] }
    { 103 ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 106 ;   ;Description         ;Text70        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 107 ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              RUS=Корректировка] }
    { 109 ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              RUS=Тип источника];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bank Account,Fixed Asset,Employee";
                                                                    RUS=" ,Клиент,Поставщик,Банковский счет,ОС,Сотрудник"];
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset,Employee] }
    { 110 ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=[ENU=Source No.;
                                                              RUS=Номер источника] }
    { 121 ;   ;Dimension 1 Value Code;Code20      ;CaptionML=[ENU=Dimension 1 Value Code;
                                                              RUS=Код значения измерения 1];
                                                   CaptionClass=TaxRegMgt.GetDimCaptionClass("Section Code",1) }
    { 122 ;   ;Dimension 2 Value Code;Code20      ;CaptionML=[ENU=Dimension 2 Value Code;
                                                              RUS=Код значения измерения 2];
                                                   CaptionClass=TaxRegMgt.GetDimCaptionClass("Section Code",2) }
    { 123 ;   ;Dimension 3 Value Code;Code20      ;CaptionML=[ENU=Dimension 3 Value Code;
                                                              RUS=Код значения измерения 3];
                                                   CaptionClass=TaxRegMgt.GetDimCaptionClass("Section Code",3) }
    { 124 ;   ;Dimension 4 Value Code;Code20      ;CaptionML=[ENU=Dimension 4 Value Code;
                                                              RUS=Код значения измерения 4];
                                                   CaptionClass=TaxRegMgt.GetDimCaptionClass("Section Code",4) }
    { 186 ;   ;Debit Account No.   ;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=[ENU=Debit Account No.;
                                                              RUS=Номер дебетового счета] }
    { 187 ;   ;Credit Account No.  ;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=[ENU=Credit Account No.;
                                                              RUS=Номер кредитового счета] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Section Code,Ending Date                 }
    {    ;Section Code,Starting Date               }
    {    ;Section Code,Posting Date                }
    {    ;Section Code,Dimension 1 Value Code,Posting Date }
    {    ;Section Code,Dimension 2 Value Code,Posting Date }
    {    ;Section Code,Dimension 3 Value Code,Posting Date }
    {    ;Section Code,Dimension 4 Value Code,Posting Date }
    {    ;Where Used Register IDs,Ledger Entry No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLCorrAnalysisView@1210007 : Record 14940;
      TaxRegisterName@1210006 : Record 17200;
      TaxRegMgt@1000 : Codeunit 17201;
      Text000@1210005 : TextConst 'ENU=1,5,,Debit Dimension 1 Value Code;RUS=1,5,,Код значения измерения 1 для дебета';
      Text001@1210004 : TextConst 'ENU=1,5,,Debit Dimension 2 Value Code;RUS=1,5,,Код значения измерения 2 для дебета';
      Text002@1210003 : TextConst 'ENU=1,5,,Debit Dimension 3 Value Code;RUS=1,5,,Код значения измерения 3 для дебета';
      Text003@1210002 : TextConst 'ENU=1,5,,Credit Dimension 1 Value Code;RUS=1,5,,Код значения измерения 1 для кредита';
      Text004@1210001 : TextConst 'ENU=1,5,,Credit Dimension 2 Value Code;RUS=1,5,,Код значения измерения 2 для кредита';
      Text005@1210000 : TextConst 'ENU=1,5,,Credit Dimension 3 Value Code;RUS=1,5,,Код значения измерения 3 для кредита';

    PROCEDURE Navigating@1();
    VAR
      Navigate@1000 : Page 344;
    BEGIN
      CLEAR(Navigate);
      Navigate.SetDoc("Posting Date","Document No.");
      Navigate.RUN;
    END;

    PROCEDURE DebitAccountName@2() : Text[100];
    VAR
      GLAcc@1000 : Record 15;
    BEGIN
      IF GLAcc.GET("Debit Account No.") THEN
        EXIT(GLAcc.Name);
    END;

    PROCEDURE CreditAccountName@3() : Text[100];
    VAR
      GLAcc@1000 : Record 15;
    BEGIN
      IF GLAcc.GET("Credit Account No.") THEN
        EXIT(GLAcc.Name);
    END;

    PROCEDURE SetFieldFilter@4(FieldNumber@1000 : Integer) FieldInList : Boolean;
    BEGIN
      FieldInList := FieldNumber = FIELDNO(Amount);
    END;

    PROCEDURE SourceName@5() Result : Text[250];
    VAR
      Employee@1000 : Record 270;
      Cust@1001 : Record 18;
      Vend@1002 : Record 23;
      FA@1003 : Record 5600;
    BEGIN
      CASE "Source Type" OF
        "Source Type"::Customer:
          IF Cust.GET("Source No.") THEN
            Result := COPYSTR(Cust.Name,1,MAXSTRLEN(Result));
        "Source Type"::Vendor:
          IF Vend.GET("Source No.") THEN
            Result := COPYSTR(Vend.Name,1,MAXSTRLEN(Result));
        "Source Type"::"Bank Account":
          IF Employee.GET("Source No.") THEN
            Result := COPYSTR(Employee.Name,1,MAXSTRLEN(Result));
        "Source Type"::"Fixed Asset":
          IF FA.GET("Source No.") THEN
            Result := COPYSTR(FA.Description,1,MAXSTRLEN(Result));
      END;
    END;

    PROCEDURE FormTitle@6() : Text[250];
    VAR
      TaxRegName@1000 : Record 17200;
    BEGIN
      TaxRegName.SETRANGE("Section Code","Section Code");
      TaxRegName.SETFILTER("Register ID",DELCHR(GETFILTER("Where Used Register IDs"),'=','~'));
      IF TaxRegName.FIND('-') THEN
        IF TaxRegName.NEXT = 0 THEN
          EXIT(TaxRegName.Description);
    END;

    PROCEDURE GetDebitCaptionClass@1210001(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      IF TaxRegisterName.GET("Section Code",FormTitle) THEN
        IF TaxRegisterName."G/L Corr. Analysis View Code" <> '' THEN
          GLCorrAnalysisView.GET(TaxRegisterName."G/L Corr. Analysis View Code");
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Debit Dimension 1 Code");
            EXIT(Text000);
          END;
        2:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Debit Dimension 2 Code");
            EXIT(Text001);
          END;
        3:
          BEGIN
            IF GLCorrAnalysisView."Debit Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Debit Dimension 3 Code");
            EXIT(Text002);
          END;
      END;
    END;

    PROCEDURE GetCreditCaptionClass@1210000(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      IF TaxRegisterName.GET("Section Code",FormTitle) THEN
        IF TaxRegisterName."G/L Corr. Analysis View Code" <> '' THEN
          GLCorrAnalysisView.GET(TaxRegisterName."G/L Corr. Analysis View Code");
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 1 Code");
            EXIT(Text003);
          END;
        2:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 2 Code");
            EXIT(Text004);
          END;
        3:
          BEGIN
            IF GLCorrAnalysisView."Credit Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + GLCorrAnalysisView."Credit Dimension 3 Code");
            EXIT(Text005);
          END;
      END;
    END;

    PROCEDURE CopyFromGLCorrEntry@1210002(GLCorrespondenceEntry@1210000 : Record 12401);
    VAR
      GLEntry@1210001 : Record 17;
    BEGIN
      "Posting Date" := GLCorrespondenceEntry."Posting Date";
      "Amount (Document)" := GLCorrespondenceEntry.Amount;
      Amount := GLCorrespondenceEntry.Amount;
      Correction := GLCorrespondenceEntry.Amount < 0;
      IF Correction THEN
        "Credit Amount" := -GLCorrespondenceEntry.Amount
      ELSE
        "Debit Amount" := GLCorrespondenceEntry.Amount;
      "Ledger Entry No." := GLCorrespondenceEntry."Debit Entry No.";
      "Document Type" := GLCorrespondenceEntry."Document Type";
      "Document No." := GLCorrespondenceEntry."Document No.";
      GLEntry.GET(GLCorrespondenceEntry."Debit Entry No.");
      Description := GLEntry.Description;
      "Source Type" := GLCorrespondenceEntry."Debit Source Type";
      "Source No." := GLCorrespondenceEntry."Debit Source No.";
      "Debit Account No." := GLCorrespondenceEntry."Debit Account No.";
      "Credit Account No." := GLCorrespondenceEntry."Credit Account No.";
    END;

    BEGIN
    END.
  }
}

