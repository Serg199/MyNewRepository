OBJECT Table 50063 Job Processes Status
{
  OBJECT-PROPERTIES
  {
    Date=23.05.17;
    Time=18:32:27;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=[ENU=Job Processes Status;
               RUS=Задачи по Процессам Выполнение];
    LookupPageID=Page50144;
    DrillDownPageID=Page50144;
  }
  FIELDS
  {
    { 1   ;   ;Company No.         ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company No.;
                                                              RUS=Фирма Но.] }
    { 5   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Строка Но.] }
    { 10  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              RUS=Блокирован] }
    { 15  ;   ;Process             ;Code20        ;TableRelation="Business Process";
                                                   CaptionML=[ENU=Process;
                                                              RUS=Процесс] }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 25  ;   ;Auto Start          ;Boolean       ;CaptionML=[ENU=Auto Start;
                                                              RUS=Автоматический Запуск] }
    { 30  ;   ;Dependency          ;Integer       ;CaptionML=[ENU=Dependency;
                                                              RUS=Зависимость] }
    { 35  ;   ;Type Processing     ;Option        ;CaptionML=[ENU=Type Processing;
                                                              RUS=Тип Обработки];
                                                   OptionCaptionML=[ENU=" ,Reference,Cons. Source,Posting,Packet Task,Program Module,Document Posting";
                                                                    RUS=" ,Справочник,Ист.Консолидации,Учет,Пакетное Задание,Программный Модуль,Учет Документов"];
                                                   OptionString=[ ,Reference,Cons. Source,Posting,Packet Task,Program Module,Document Posting] }
    { 36  ;   ;Type Reference      ;Option        ;CaptionML=[ENU=Type Reference;
                                                              RUS=Тип Справочника];
                                                   OptionCaptionML=[ENU=All,General,LE;
                                                                    RUS=Все,Общие,Юрлицо];
                                                   OptionString=All,General,LE }
    { 40  ;   ;Processor           ;Code20        ;CaptionML=[ENU=Processor;
                                                              RUS=Обработчик];
                                                   NotBlank=Yes }
    { 41  ;   ;Check If Data       ;Boolean       ;CaptionML=[ENU=Check If Data;
                                                              RUS=Проверка Наличия Данных] }
    { 42  ;   ;Check Uniqueness    ;Boolean       ;CaptionML=[ENU=Check Uniqueness;
                                                              RUS=Проверка Уникальности] }
    { 45  ;   ;Status Monitor      ;Option        ;CaptionML=[ENU=Status Monitor;
                                                              RUS=Статус Монитора];
                                                   OptionCaptionML=[ENU=" ,Reference,Loading Buffer,Transformation,Posting Gen. Journal,Consolidation,Packet Task";
                                                                    RUS=" ,Справочник,Загрузка Буфера,Трансформация,Учет. Фин. Журнала,Консолидация,Пер.Задание"];
                                                   OptionString=[ ,Reference,Loading Buffer,Transformation,Posting Gen. Journal,Consolidation,Packet Task] }
    { 50  ;   ;Import Format       ;Option        ;CaptionML=[ENU=Import Format;
                                                              RUS=Формат Импорта];
                                                   OptionCaptionML=[ENU=From Ext. System,From Buffer,From NAV,Operation From Ext. System,Operation From Buffer,From Buffer NAV,From PreBuffer Deal Entry,From Buffer Deal Entry,EventUpload,FIOperation;
                                                                    RUS=Загрузка из Внеш. Системы,Загрузка данных из Буфера,Загрузка из фирмы NAV,Загрузка Операций из Внеш. Системы,Загрузка Операций из Буфера,Загрузка данных из Буфера NAV,Загрузка Операций по Сделкам,Обработка Операций по Сделкам,Загрузка Событий,ФИОперации];
                                                   OptionString=FromExtSystem,FromBuffer,FromNavision,OperationFromExtSystem,OperationFromBuffer,FromBufferNAV,FromPreBufferDealEntry,FromBufferDealEntry,EventUpload,FIOperation;
                                                   Editable=No }
    { 55  ;   ;External Source     ;Text30        ;CaptionML=[ENU=External Source;
                                                              RUS=Внешний Источник] }
    { 60  ;   ;Name Service NAS    ;Code30        ;CaptionML=[ENU=Name Service NAS;
                                                              RUS=Название Сервиса NAS] }
    { 61  ;   ;Name Server NAS     ;Code30        ;CaptionML=[ENU=Name Server NAS;
                                                              RUS=Название Сервера NAS];
                                                   Description=NC MDM01 PCH }
    { 65  ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              RUS=Транзакция Но.] }
    { 70  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Planed,Scheduled,Working,Competed Successfully,Error Reported,Canceled;
                                                                    RUS=План,Запуск,Работает,Завершен Успешно,Ошибка Выполнения,Отменен];
                                                   OptionString=Planed,Scheduled,Working,Competed Successfully,Error Reported,Canceled }
    { 75  ;   ;Time Status         ;DateTime      ;CaptionML=[ENU=Time Status;
                                                              RUS=Время] }
    { 76  ;   ;Time Start          ;DateTime      ;CaptionML=[ENU=Time Start;
                                                              RUS=Время Старта];
                                                   Description=NC MDM01.1 PCH }
    { 80  ;   ;Cons. Register      ;Integer       ;CaptionML=[ENU=Cons. Register;
                                                              RUS=Конс. Регистр] }
    { 85  ;   ;User ID             ;Code20        ;TableRelation=Table2000000002;
                                                   OnLookup=VAR
                                                              LoginMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              LoginMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              RUS=Код Пользователя] }
    { 100 ;   ;Use Parameters      ;Boolean       ;CaptionML=[ENU=Use Parameters;
                                                              RUS=Использовать Параметры] }
    { 105 ;   ;Date Parameter      ;Date          ;CaptionML=[ENU=Date Parameter;
                                                              RUS=Дата Параметр] }
    { 110 ;   ;Report No. Parameter;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Report));
                                                   CaptionML=[ENU=Report No. Parameter;
                                                              RUS=Отчет Но. Параметр] }
    { 125 ;   ;Count Error         ;Integer       ;CaptionML=RUS=Количество Ошибок;
                                                   Description=NC S1185 PCH }
    { 50000;  ;Object No.          ;Integer       ;CaptionML=[ENU=Object No.;
                                                              RUS=Объект Но.] }
    { 50005;  ;Processing Mode     ;Option        ;CaptionML=[ENU=Processing Mode;
                                                              RUS=Режим Обработки];
                                                   OptionCaptionML=[ENU=Test,Load;
                                                                    RUS=Тест,Загрузка];
                                                   OptionString=Test,Load }
    { 50006;  ;Sub Mode            ;Option        ;CaptionML=RUS=Под Режим;
                                                   OptionString=Change Status,Only Modify }
    { 50010;  ;isOK                ;Boolean       ;CaptionML=[ENU=isOK;
                                                              RUS=isOK] }
    { 50015;  ;Record ID           ;RecordID      ;CaptionML=[ENU=Record ID;
                                                              RUS=Запись ID] }
    { 50020;  ;Begin Entry No.     ;Integer       ;CaptionML=[ENU=Last Entry No.;
                                                              RUS=Начальная Операция Но.] }
    { 50025;  ;Last Entry No.      ;Integer       ;CaptionML=[ENU=Last Entry No.;
                                                              RUS=Последняя Операция Но.] }
    { 50026;  ;NotificationID      ;DateTime      ;CaptionML=RUS=Идентификатор Оповещения Пользователя;
                                                   Description=TRD NCS-475 }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
    {    ;Company No.                              }
    {    ;Status,Name Service NAS,Process          }
    {    ;Transaction No.                          }
    {    ;Company No.,External Source,Status,Status Monitor,Processor }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      isSaveDependency@1000000001 : Boolean;
      JobProcTemp@1000000000 : TEMPORARY Record 50062;
      LoginMgt@1000000002 : Codeunit 418;

    PROCEDURE ClearDependency@1000000005();
    BEGIN
      isSaveDependency := TRUE;
      JobProcTemp.DELETEALL;
    END;

    PROCEDURE GetDependency@1000000004(varDependency@1000000000 : Integer) : Integer;
    BEGIN
      IF JobProcTemp.GET('',varDependency) THEN
        EXIT(JobProcTemp.Dependency)
      ELSE
        EXIT(0);
    END;

    PROCEDURE AddJob@1000000000(JobProc@1000000001 : Record 50062);
    BEGIN
      JobProc.CALCFIELDS("Name Server NAS");

      INIT;
      "Company No." := JobProc."Company No.";
      "Line No." := GetLastLineNo;

      Blocked := JobProc.Blocked;
      Process := JobProc.Process;
      Description := JobProc.Description;
      "Auto Start" := JobProc."Auto Start";
      IF isSaveDependency THEN BEGIN
        JobProcTemp.INIT;
        JobProcTemp."Company No." := '';
        JobProcTemp."Line No." := JobProc."Line No.";
        JobProcTemp.Dependency := "Line No.";
        JobProcTemp.INSERT;

        IF (JobProc.Dependency <> 0) THEN
          Dependency := GetDependency(JobProc.Dependency);
      END ELSE
        Dependency := 0;
      "Type Processing" := JobProc."Type Processing";
      "Type Reference" := JobProc."Type Reference";
      Processor := JobProc.Processor;
      "Check If Data" := JobProc."Data Check";
      "Check Uniqueness" := JobProc."Check Uniqueness";
      "Status Monitor" := JobProc."Status Monitor";
      "Import Format" := JobProc."Import Format";
      "External Source" := JobProc."External Source";
      "Name Service NAS" := JobProc."Name Service NAS";
      "Name Server NAS" := JobProc."Name Server NAS";
      "Use Parameters" := JobProc."Use Parameters";
      "Date Parameter" := JobProc."Date Parameter";
      "Report No. Parameter" := JobProc."Report No. Parameter";

      Status := Status::Planed;
      "Time Status" := CURRENTDATETIME;
      "User ID" := USERID;

      INSERT;
    END;

    PROCEDURE GetLastLineNo@1000000003() LastLineNo : Integer;
    VAR
      JobProcStatus@1000000002 : Record 50063;
    BEGIN
      JobProcStatus.RESET;
      IF JobProcStatus.FINDLAST THEN
        LastLineNo := JobProcStatus."Line No." + 1
      ELSE
        LastLineNo := 1;
    END;

    PROCEDURE GetLastTime@1000000001(CompanyName@1000000001 : Text[30];Proc@1000000000 : Code[20];NameServNAS@1000000003 : Text[30];ExternalSource@1000000004 : Text[30]) : DateTime;
    VAR
      JobProcStatus@1000000002 : Record 50063;
      Company@1000000005 : Record 2000000006;
    BEGIN
      JobProcStatus.RESET;
      Company.GET(CompanyName);
      JobProcStatus.SETRANGE("Company No.",CompanyName);
      IF Proc <> '' THEN
        JobProcStatus.SETRANGE(Process,Proc);
      IF NameServNAS <> '' THEN
        JobProcStatus.SETRANGE("Name Service NAS",NameServNAS);
      IF Company."Company Type" = Company."Company Type"::Consolidation THEN
        JobProcStatus.SETRANGE("External Source",ExternalSource);
      JobProcStatus.SETFILTER(Status,'>=%1',JobProcStatus.Status::"Competed Successfully");

      IF JobProcStatus.FINDLAST THEN
        EXIT(JobProcStatus."Time Status");

      EXIT(CREATEDATETIME(0D,0T));
    END;

    PROCEDURE IsStatusProc@1000000015(CompanyName@1000000001 : Text[30];Proc@1000000000 : Code[20];NameServNAS@1000000004 : Text[30];ExternalSource@1000000005 : Text[30];StatusFilter@1000000003 : Text[250]) : Boolean;
    VAR
      JobProcStatus@1000000002 : Record 50063;
      Company@1000000006 : Record 2000000006;
    BEGIN
      JobProcStatus.RESET;
      IF Company.GET(CompanyName) THEN BEGIN
        JobProcStatus.SETRANGE("Company No.",CompanyName);
        IF Company."Company Type" = Company."Company Type"::Consolidation THEN
          JobProcStatus.SETRANGE("External Source",ExternalSource);
      END ELSE IF ExternalSource <> '' THEN
        JobProcStatus.SETRANGE("External Source",ExternalSource);

      IF Proc <> '' THEN
        JobProcStatus.SETRANGE(Process,Proc);
      IF NameServNAS <> '' THEN
        JobProcStatus.SETRANGE("Name Service NAS",NameServNAS);
      IF StatusFilter <> '' THEN
        JobProcStatus.SETFILTER(Status,StatusFilter);

      IF JobProcStatus.FINDLAST THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE IsCheckUniq@1000000007(VAR JobProc@1000000000 : TEMPORARY Record 50062;StatusFilter@1000000001 : Text[250]) : Boolean;
    VAR
      JobProcStatus@1000000002 : Record 50063;
      Company@1000000006 : Record 2000000006;
      JobProc1@1000000003 : TEMPORARY Record 50062;
      JobProc2@1000000004 : TEMPORARY Record 50062;
    BEGIN
      JobProcStatus.RESET;

      JobProcStatus.SETRANGE("Type Processing",JobProc."Type Processing");

      CASE JobProc."Type Processing" OF
        JobProc."Type Processing"::" " :
          EXIT(TRUE);
        JobProc."Type Processing"::Reference :
          BEGIN
            IF JobProc."Type Reference" = JobProc."Type Reference"::All THEN BEGIN
              // запуск для Gen и LE
              JobProc1 := JobProc;
              JobProc1."Type Reference" := JobProc1."Type Reference"::General;
              JobProc2 := JobProc;
              JobProc2."Type Reference" := JobProc2."Type Reference"::LE;
              EXIT(IsCheckUniq(JobProc1,StatusFilter) AND IsCheckUniq(JobProc2,StatusFilter));
            END ELSE BEGIN
              JobProcStatus.SETFILTER("Type Reference",'%1|%2',JobProc."Type Reference",JobProc."Type Reference"::All);

              IF (JobProc."Type Reference" = JobProc."Type Reference"::LE) OR
                 (NOT JobProc."Check Uniqueness") THEN
                JobProcStatus.SETRANGE("Company No.",JobProc."Company No.");
            END;
          END;
        JobProc."Type Processing"::"Cons. Source" :
          BEGIN
            JobProcStatus.SETRANGE("Company No.",JobProc."Company No.");
            JobProcStatus.SETRANGE(Processor,JobProc.Processor);
            IF JobProc."Import Format" = JobProc."Import Format"::FromNavision THEN
              JobProcStatus.SETRANGE("External Source",JobProc."External Source");
          END;
        JobProc."Type Processing"::Posting :
          BEGIN
            JobProcStatus.SETRANGE("Company No.",JobProc."Company No.");
            JobProcStatus.SETRANGE(Processor,JobProc.Processor);
          END;
        JobProc."Type Processing"::"Packet Task",
        JobProc."Type Processing"::"Program Module" :
          BEGIN
            IF NOT JobProc."Check Uniqueness" THEN
              JobProcStatus.SETRANGE("Company No.",JobProc."Company No.");
            JobProcStatus.SETRANGE(Processor,JobProc.Processor);
            //NC S1197,MIO-20,MIO55 > PCH
            JobProcStatus.SETRANGE("Report No. Parameter",JobProc."Report No. Parameter");
            //NC S1197,MIO-20,MIO55 < PCH
          END;
      END;

      JobProcStatus.SETRANGE(Blocked,FALSE);

      IF StatusFilter <> '' THEN
        JobProcStatus.SETFILTER(Status,StatusFilter);

      IF JobProcStatus.FINDLAST THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GetNewTransactionNo@1000000002() TransactionNo : Integer;
    VAR
      JobProcStatus@1000000000 : Record 50063;
    BEGIN
      JobProcStatus.RESET;
      JobProcStatus.SETCURRENTKEY("Transaction No.");
      IF JobProcStatus.FINDLAST THEN
        EXIT(JobProcStatus."Transaction No." + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE AddJobDependency@1000000006(JobProc@1000000001 : Record 50062);
    BEGIN
      JobProc.CALCFIELDS("Name Server NAS");

      INIT;
      "Company No." := JobProc."Company No.";
      "Line No." := GetLastLineNo;

      Blocked := JobProc.Blocked;
      Process := JobProc.Process;
      Description := JobProc.Description;
      "Auto Start" := JobProc."Auto Start";
      "Type Processing" := JobProc."Type Processing";
      "Type Reference" := JobProc."Type Reference";
      Processor := JobProc.Processor;
      "Check If Data" := JobProc."Data Check";
      "Check Uniqueness" := JobProc."Check Uniqueness";
      "Status Monitor" := JobProc."Status Monitor";
      "Import Format" := JobProc."Import Format";
      "External Source" := JobProc."External Source";
      "Name Service NAS" := JobProc."Name Service NAS";
      "Name Server NAS" := JobProc."Name Server NAS";
      "Use Parameters" := JobProc."Use Parameters";
      "Date Parameter" := JobProc."Date Parameter";
      "Report No. Parameter" := JobProc."Report No. Parameter";
      IF JobProcTemp.FINDLAST THEN Dependency := JobProcTemp."Line No." ELSE Dependency := 0;

      Status := Status::Planed;
      "Time Status" := CURRENTDATETIME;
      "User ID" := USERID;

      INSERT;

      JobProcTemp.INIT;
      JobProcTemp."Company No." := '';
      JobProcTemp."Line No." := "Line No.";
      JobProcTemp.INSERT;
    END;

    PROCEDURE CalcCountError@1101495000();
    VAR
      ErrorJournal@1101495000 : Record 50023;
    BEGIN
      //NC S1185 > PCH
      ErrorJournal.RESET;
      ErrorJournal.SETRANGE("Job Proc. Status Line No.","Line No.");
      "Count Error" := ErrorJournal.COUNT;
      //NC S1185 < PCH
    END;

    BEGIN
    {
      NC MDM01 PCH Создана таблица
      NC MDM01.1 PCH Добавлено время старта
      NC S622 PCH Добавлены опции FromPreBufferDealEntry,FromBufferDealEntry в "Import Format"
      NC S1185 PCH Добавлено поле "Count Error"
      NC S1197 PCH
      NC MIO55 PCH объеденина с доработкой S1197
      NC S1753 PCH Добавлены опции FromBufferDealEntry2 в "Import Format"
      NC NCS-2360 AAP Добавлена опция в поле "Import Format".
    }
    END.
  }
}

