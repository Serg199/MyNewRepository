OBJECT Codeunit 8 AccSchedManagement
{
  OBJECT-PROPERTIES
  {
    Date=04.04.17;
    Time=12:50:25;
    Modified=Yes;
    Version List=NAVW110.00,NAVRU10.00,NOS-26;
  }
  PROPERTIES
  {
    TableNo=85;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=DEFAULT;RUS=СТАНДАРТ';
      Text001@1001 : TextConst 'ENU=Default Schedule;RUS=Отчет по умолчанию';
      Text002@1002 : TextConst 'ENU=Default Columns;RUS=Столбцы по умолчанию';
      Text012@1006 : TextConst 'ENU=You have entered an illegal value or a nonexistent row number.;RUS=Введено недопустимое значение или несуществующий номер строки.';
      Text013@1007 : TextConst 'ENU=You have entered an illegal value or a nonexistent column number.;RUS=Введено недопустимое значение или несуществующий номер столбца.';
      Text016@1003 : TextConst '@@@={Locked};ENU=%1\\ %2 %3 %4;RUS=%1\\ %2 %3 %4';
      Text017@1011 : TextConst 'ENU=The error occurred when the program tried to calculate:\;RUS=Ошибка при вычислении:\';
      Text018@1012 : TextConst '@@@="%1 = Row No., %2= Line No., %3 = Totaling";ENU="Acc. Sched. Line: Row No. = %1, Line No. = %2, Totaling = %3\";RUS="Строка фин. отчета: номер строки = %1, номер строки = %2, группировка = %3\"';
      Text019@1013 : TextConst '@@@="%1 = Column No., %2= Line No., %3 = Formula";ENU="Acc. Sched. Column: Column No. = %1, Line No. = %2, Formula  = %3";RUS="Столбец фин. отчета: номер столбца = %1, номер строки = %2, формула = %3"';
      Text020@1014 : TextConst 'ENU=Because of circular references, the program cannot calculate a formula.;RUS=Программе не удалось вычислить результат формулы из-за наличия циклических ссылок.';
      AccSchedName@1015 : Record 84;
      AccountScheduleLine@1016 : Record 85;
      ColumnLayoutName@1039 : Record 333;
      AccSchedCellValue@1017 : TEMPORARY Record 342;
      CurrExchRate@1018 : Record 330;
      GLSetup@1019 : Record 98;
      AddRepCurrency@1035 : Record 4;
      AnalysisView@1036 : Record 363;
      MatrixMgt@1009 : Codeunit 9200;
      AnalysisViewRead@1037 : Boolean;
      StartDate@1020 : Date;
      EndDate@1021 : Date;
      FiscalStartDate@1022 : Date;
      DivisionError@1023 : Boolean;
      PeriodError@1034 : Boolean;
      CallLevel@1024 : Integer;
      CallingAccSchedLineID@1025 : Integer;
      CallingColumnLayoutID@1026 : Integer;
      OldAccSchedLineFilters@1027 : Text;
      OldColumnLayoutFilters@1028 : Text;
      OldAccSchedLineName@1029 : Code[10];
      OldColumnLayoutName@1030 : Code[10];
      OldCalcAddCurr@1031 : Boolean;
      GLSetupRead@1033 : Boolean;
      Text021@1040 : TextConst 'ENU=Conversion of dimension totaling filter %1 results in a filter that becomes too long.;RUS=В результате преобразования итогового фильтра измерения %1 длина фильтра превышает максимально допустимую.';
      BasePercentLine@1038 : ARRAY [50] OF Integer;
      Text022@1041 : TextConst 'ENU=You cannot have more than %1 lines with %2 of %3.;RUS=Невозможно использовать более %1 строк с %2 типа %3.';
      Text023@1042 : TextConst 'ENU=Formulas ending with a percent sign require %2 %1 on a line before it.;RUS=Перед формулами, заканчивающимися знаком процента, в строке необходимо указывать %2 %1.';
      Text024@1043 : TextConst 'ENU=The %1 %3 on the %2 must equal the %4 %6 on the %5 when any Dimension Totaling is used in any Column.;RUS=%1 %3 в %2 должно равняться %4 %6 в %5 при использовании любого итогового фильтра измерения по любому столбцу.';
      ColumnFormulaMsg@1005 : TextConst 'ENU=Column formula: %1.;RUS=Формула столбца: %1.';
      RowConstantMsg@1210000 : TextConst 'ENU=Row constant: %1.;RUS=Константа строки: %1.';
      RowFormulaMsg@1004 : TextConst 'ENU=Row formula: %1.;RUS=Формула строки: %1.';
      ColumnFormulaErrorMsg@1008 : TextConst 'ENU=Column formula: %1. \Error: %2.;RUS=Column formula: %1. \Error: %2.';
      Recalculate@1049 : Boolean;
      SystemGeneratedAccSchedMsg@1010 : TextConst 'ENU=Warning: This account schedule may be automatically updated by the system, so any changes you make may be lost.;RUS=Внимание! Этот финансовый отчет может автоматически обновляться системой, поэтому все сделанные вами изменения могут быть потеряны.';
      "NCV>"@1101495009 : Integer;
      OldIsNotCalcElimination@1101495008 : Boolean;
      BUFilter@1101495007 : Text[20];
      ConsSetup@1101495006 : Record 50000;
      ColumnLayoutBase@1101495005 : Record 334;
      OldShowAmounts@1101495004 : 'Budget,Ledger';
      OldShowAlocation@1101495003 : 'All,OnlyGL,OnlyAlocGL';
      AnalysisViewRead2@1101495002 : Boolean;
      GLCorrAnalysisView@1101495001 : Record 14940;
      "NCV<"@1101495000 : Integer;

    PROCEDURE OpenSchedule@1(VAR CurrentSchedName@1000 : Code[10];VAR AccSchedLine@1001 : Record 85);
    BEGIN
      CheckTemplateAndSetFilter(CurrentSchedName,AccSchedLine);
    END;

    PROCEDURE OpenAndCheckSchedule@57(VAR CurrentSchedName@1000 : Code[10];VAR AccSchedLine@1001 : Record 85);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      CheckTemplateAndSetFilter(CurrentSchedName,AccSchedLine);
      IF AccSchedLine.ISEMPTY THEN
        EXIT;
      GeneralLedgerSetup.GET;
      IF CurrentSchedName IN
         [GeneralLedgerSetup."Acc. Sched. for Balance Sheet",GeneralLedgerSetup."Acc. Sched. for Cash Flow Stmt",
          GeneralLedgerSetup."Acc. Sched. for Income Stmt.",GeneralLedgerSetup."Acc. Sched. for Retained Earn."]
      THEN
        MESSAGE(SystemGeneratedAccSchedMsg);
    END;

    LOCAL PROCEDURE CheckTemplateAndSetFilter@46(VAR CurrentSchedName@1000 : Code[10];VAR AccSchedLine@1001 : Record 85);
    BEGIN
      CheckTemplateName(CurrentSchedName);
      AccSchedLine.FILTERGROUP(2);
      AccSchedLine.SETRANGE("Schedule Name",CurrentSchedName);
      AccSchedLine.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE CheckTemplateName@2(VAR CurrentSchedName@1000 : Code[10]);
    VAR
      AccSchedName@1001 : Record 84;
    BEGIN
      IF NOT AccSchedName.GET(CurrentSchedName) THEN BEGIN
        IF NOT AccSchedName.FINDFIRST THEN BEGIN
          AccSchedName.INIT;
          AccSchedName.Name := Text000;
          AccSchedName.Description := Text001;
          AccSchedName.INSERT;
          COMMIT;
        END;
        CurrentSchedName := AccSchedName.Name;
      END;
    END;

    PROCEDURE CheckName@3(CurrentSchedName@1000 : Code[10]);
    VAR
      AccSchedName@1001 : Record 84;
    BEGIN
      AccSchedName.GET(CurrentSchedName);
    END;

    PROCEDURE SetName@4(CurrentSchedName@1000 : Code[10];VAR AccSchedLine@1001 : Record 85);
    BEGIN
      AccSchedLine.FILTERGROUP(2);
      AccSchedLine.SETRANGE("Schedule Name",CurrentSchedName);
      AccSchedLine.FILTERGROUP(0);
      IF AccSchedLine.FIND('-') THEN;
    END;

    PROCEDURE LookupName@5(CurrentSchedName@1000 : Code[10];VAR EntrdSchedName@1001 : Text[10]) : Boolean;
    VAR
      AccSchedName@1002 : Record 84;
    BEGIN
      AccSchedName.Name := CurrentSchedName;
      IF PAGE.RUNMODAL(0,AccSchedName) <> ACTION::LookupOK THEN
        EXIT(FALSE);

      EntrdSchedName := AccSchedName.Name;
      EXIT(TRUE);
    END;

    PROCEDURE OpenColumns@16(VAR CurrentColumnName@1000 : Code[10];VAR ColumnLayout@1001 : Record 334);
    BEGIN
      CheckColumnTemplateName(CurrentColumnName);
      ColumnLayout.FILTERGROUP(2);
      ColumnLayout.SETRANGE("Column Layout Name",CurrentColumnName);
      ColumnLayout.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE CheckColumnTemplateName@15(VAR CurrentColumnName@1000 : Code[10]);
    VAR
      ColumnLayoutName@1001 : Record 333;
    BEGIN
      IF NOT ColumnLayoutName.GET(CurrentColumnName) THEN BEGIN
        IF NOT ColumnLayoutName.FINDFIRST THEN BEGIN
          ColumnLayoutName.INIT;
          ColumnLayoutName.Name := Text000;
          ColumnLayoutName.Description := Text002;
          ColumnLayoutName.INSERT;
          COMMIT;
        END;
        CurrentColumnName := ColumnLayoutName.Name;
      END;
    END;

    PROCEDURE CheckColumnName@14(CurrentColumnName@1000 : Code[10]);
    VAR
      ColumnLayoutName@1001 : Record 333;
    BEGIN
      ColumnLayoutName.GET(CurrentColumnName);
    END;

    PROCEDURE SetColumnName@13(CurrentColumnName@1000 : Code[10];VAR ColumnLayout@1001 : Record 334);
    BEGIN
      ColumnLayout.RESET;
      ColumnLayout.FILTERGROUP(2);
      ColumnLayout.SETRANGE("Column Layout Name",CurrentColumnName);
      ColumnLayout.FILTERGROUP(0);
    END;

    PROCEDURE CopyColumnsToTemp@21(NewColumnName@1000 : Code[10];VAR TempColumnLayout@1001 : Record 334);
    VAR
      ColumnLayout@1002 : Record 334;
    BEGIN
      TempColumnLayout.DELETEALL;
      ColumnLayout.SETRANGE("Column Layout Name",NewColumnName);
      IF ColumnLayout.FIND('-') THEN
        REPEAT
          TempColumnLayout := ColumnLayout;
          TempColumnLayout.INSERT;
        UNTIL ColumnLayout.NEXT = 0;
      IF TempColumnLayout.FIND('-') THEN;
    END;

    PROCEDURE LookupColumnName@11(CurrentColumnName@1000 : Code[10];VAR EntrdColumnName@1001 : Text[10]) : Boolean;
    VAR
      ColumnLayoutName@1002 : Record 333;
    BEGIN
      ColumnLayoutName.Name := CurrentColumnName;
      IF PAGE.RUNMODAL(0,ColumnLayoutName) <> ACTION::LookupOK THEN
        EXIT(FALSE);

      EntrdColumnName := ColumnLayoutName.Name;
      EXIT(TRUE);
    END;

    PROCEDURE CheckAnalysisView@36(CurrentSchedName@1000 : Code[10];CurrentColumnName@1001 : Code[10];TestColumnName@1002 : Boolean);
    VAR
      ColumnLayout2@1003 : Record 334;
      AnyColumnDimensions@1004 : Boolean;
    BEGIN
      IF NOT AnalysisViewRead THEN BEGIN
        AnalysisViewRead := TRUE;
        IF CurrentSchedName <> AccSchedName.Name THEN BEGIN
          CheckTemplateName(CurrentSchedName);
          AccSchedName.GET(CurrentSchedName);
        END;
        IF TestColumnName THEN
          IF CurrentColumnName <> ColumnLayoutName.Name THEN BEGIN
            CheckColumnTemplateName(CurrentColumnName);
            ColumnLayoutName.GET(CurrentColumnName);
          END;

        //NC NCS-1631 > DP
        IF (AccSchedName."G/L Corr. Analysis View Name" = '') AND (AccSchedName."Analysis View Name" = '') THEN BEGIN
        {
        IF AccSchedName."Analysis View Name" = '' THEN BEGIN
        }
        //NC NCS-1631 < DP
          IF NOT GLSetupRead THEN
            GLSetup.GET;
          GLSetupRead := TRUE;
          AnalysisView.INIT;
          AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        END ELSE

        //NC NCS-1631 > DP
        IF AccSchedName."Analysis View Name" <> '' THEN
        //NC NCS-1631 < DP

          AnalysisView.GET(AccSchedName."Analysis View Name");
        IF AccSchedName."Analysis View Name" <> ColumnLayoutName."Analysis View Name" THEN BEGIN
          AnyColumnDimensions := FALSE;
          ColumnLayout2.SETRANGE("Column Layout Name",ColumnLayoutName.Name);
          IF ColumnLayout2.FIND('-') THEN
            REPEAT
              AnyColumnDimensions :=
                (ColumnLayout2."Dimension 1 Totaling" <> '') OR
                (ColumnLayout2."Dimension 2 Totaling" <> '') OR
                (ColumnLayout2."Dimension 3 Totaling" <> '') OR
                (ColumnLayout2."Dimension 4 Totaling" <> '');
            UNTIL AnyColumnDimensions OR (ColumnLayout2.NEXT = 0);
          IF AnyColumnDimensions THEN
            ERROR(
              Text024,
              AccSchedName.FIELDCAPTION("Analysis View Name"),
              AccSchedName.TABLECAPTION,
              AccSchedName."Analysis View Name",
              ColumnLayoutName.FIELDCAPTION("Analysis View Name"),
              ColumnLayoutName.TABLECAPTION,
              ColumnLayoutName."Analysis View Name");
        END;
      END;
    END;

    PROCEDURE FindFiscalYear@10(BalanceDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record 50;
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      AccountingPeriod.SETRANGE("Starting Date",0D,BalanceDate);
      IF AccountingPeriod.FINDLAST THEN
        EXIT(AccountingPeriod."Starting Date");
      AccountingPeriod.RESET;
      AccountingPeriod.FINDFIRST;
      EXIT(AccountingPeriod."Starting Date");
    END;

    LOCAL PROCEDURE FindEndOfFiscalYear@27(BalanceDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record 50;
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      AccountingPeriod.SETFILTER("Starting Date",'>%1',FindFiscalYear(BalanceDate));
      IF AccountingPeriod.FINDFIRST THEN
        EXIT(CALCDATE('<-1D>',AccountingPeriod."Starting Date"));
      EXIT(DMY2DATE(31,12,9999));
    END;

    LOCAL PROCEDURE AccPeriodStartEnd@26(Formula@1002 : Code[20];Date@1000 : Date;VAR StartDate@1013 : Date;VAR EndDate@1014 : Date);
    VAR
      ColumnLayout@1006 : Record 334;
      AccountingPeriod@1001 : Record 50;
      AccountingPeriodFY@1007 : Record 50;
      Steps@1005 : Integer;
      Type@1004 : ' ,Period,Fiscal year,Fiscal Halfyear,Fiscal Quarter';
      CurrentPeriodNo@1003 : Integer;
      RangeFromType@1012 : 'Int,CP,LP';
      RangeToType@1011 : 'Int,CP,LP';
      RangeFromInt@1010 : Integer;
      RangeToInt@1009 : Integer;
    BEGIN
      IF Formula = '' THEN
        EXIT;

      ColumnLayout.ParsePeriodFormula(
        Formula,Steps,Type,RangeFromType,RangeToType,RangeFromInt,RangeToInt);

      // Find current period
      AccountingPeriod.SETFILTER("Starting Date",'<=%1',Date);
      IF NOT AccountingPeriod.FIND('+') THEN BEGIN
        AccountingPeriod.RESET;
        IF Steps < 0 THEN
          AccountingPeriod.FIND('-')
        ELSE
          AccountingPeriod.FIND('+')
      END;
      AccountingPeriod.RESET;

      CASE Type OF
        Type::Period:
          BEGIN
            IF AccountingPeriod.NEXT(Steps) <> Steps THEN
              PeriodError := TRUE;
            StartDate := AccountingPeriod."Starting Date";
            EndDate := AccPeriodEndDate(StartDate);
          END;
        Type::"Fiscal year":
          BEGIN
            AccountingPeriodFY := AccountingPeriod;
            WHILE NOT AccountingPeriodFY."New Fiscal Year" DO
              IF AccountingPeriodFY.FIND('<') THEN
                CurrentPeriodNo += 1
              ELSE
                AccountingPeriodFY."New Fiscal Year" := TRUE;
            AccountingPeriodFY.SETRANGE("New Fiscal Year",TRUE);
            AccountingPeriodFY.NEXT(Steps);

            AccPeriodStartOrEnd(AccountingPeriodFY,CurrentPeriodNo,RangeFromType,RangeFromInt,FALSE,StartDate);
            AccPeriodStartOrEnd(AccountingPeriodFY,CurrentPeriodNo,RangeToType,RangeToInt,TRUE,EndDate);
          END;
      END;
    END;

    LOCAL PROCEDURE AccPeriodEndDate@29(StartDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record 50;
    BEGIN
      AccountingPeriod."Starting Date" := StartDate;
      IF AccountingPeriod.FIND('>') THEN
        EXIT(AccountingPeriod."Starting Date" - 1);
      EXIT(DMY2DATE(31,12,9999));
    END;

    LOCAL PROCEDURE AccPeriodGetPeriod@35(VAR AccountingPeriod@1001 : Record 50;AccPeriodNo@1000 : Integer);
    BEGIN
      CASE TRUE OF
        AccPeriodNo > 0:
          BEGIN
            AccountingPeriod.NEXT(AccPeriodNo);
            EXIT;
          END;
        AccPeriodNo = 0:
          EXIT;
        AccPeriodNo < 0:
          BEGIN
            AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
            IF NOT AccountingPeriod.FIND('>') THEN BEGIN
              AccountingPeriod.RESET;
              AccountingPeriod.FIND('+');
              EXIT;
            END;
            AccountingPeriod.RESET;
            AccountingPeriod.FIND('<');
            EXIT;
          END;
      END;
    END;

    LOCAL PROCEDURE AccPeriodStartOrEnd@30(AccountingPeriod@1000 : Record 50;CurrentPeriodNo@1007 : Integer;RangeType@1006 : 'Int,CP,LP';RangeInt@1009 : Integer;EndDate@1003 : Boolean;VAR Date@1002 : Date);
    BEGIN
      CASE RangeType OF
        RangeType::CP:
          AccPeriodGetPeriod(AccountingPeriod,CurrentPeriodNo);
        RangeType::LP:
          AccPeriodGetPeriod(AccountingPeriod,-1);
        RangeType::Int:
          AccPeriodGetPeriod(AccountingPeriod,RangeInt - 1);
      END;
      IF EndDate THEN
        Date := AccPeriodEndDate(AccountingPeriod."Starting Date")
      ELSE
        Date := AccountingPeriod."Starting Date";
    END;

    LOCAL PROCEDURE InitBasePercents@33(AccSchedLine@1000 : Record 85;ColumnLayout@1001 : Record 334);
    VAR
      BaseIdx@1002 : Integer;
    BEGIN
      CLEAR(BasePercentLine);
      BaseIdx := 0;

      WITH AccSchedLine DO BEGIN
        SETRANGE("Schedule Name","Schedule Name");
        IF FIND('-') THEN
          REPEAT
            IF "Totaling Type" = "Totaling Type"::"Set Base For Percent" THEN BEGIN
              BaseIdx := BaseIdx + 1;
              IF BaseIdx > ARRAYLEN(BasePercentLine) THEN
                ShowError(
                  STRSUBSTNO(Text022,ARRAYLEN(BasePercentLine),FIELDCAPTION("Totaling Type"),"Totaling Type"),
                  AccSchedLine,ColumnLayout);
              BasePercentLine[BaseIdx] := "Line No.";
            END;
          UNTIL NEXT = 0;
      END;

      IF BaseIdx = 0 THEN BEGIN
        AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Set Base For Percent";
        ShowError(
          STRSUBSTNO(Text023,AccSchedLine.FIELDCAPTION("Totaling Type"),AccSchedLine."Totaling Type"),
          AccSchedLine,ColumnLayout);
      END;
    END;

    LOCAL PROCEDURE GetBasePercentLine@34(AccSchedLine@1000 : Record 85;ColumnLayout@1001 : Record 334) : Integer;
    VAR
      BaseIdx@1002 : Integer;
    BEGIN
      IF BasePercentLine[1] = 0 THEN
        InitBasePercents(AccSchedLine,ColumnLayout);

      BaseIdx := ARRAYLEN(BasePercentLine);
      REPEAT
        IF BasePercentLine[BaseIdx] <> 0 THEN
          IF BasePercentLine[BaseIdx] < AccSchedLine."Line No." THEN
            EXIT(BasePercentLine[BaseIdx]);
        BaseIdx := BaseIdx - 1;
      UNTIL BaseIdx = 0;

      AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Set Base For Percent";
      ShowError(
        STRSUBSTNO(Text023,AccSchedLine.FIELDCAPTION("Totaling Type"),AccSchedLine."Totaling Type"),
        AccSchedLine,ColumnLayout);
    END;

    PROCEDURE CalcCell@8(VAR AccSchedLine@1000 : Record 85;VAR ColumnLayout@1001 : Record 334;CalcAddCurr@1002 : Boolean;IsNotCalcElimination@1101495001 : Boolean;ShowAlocation@1101495000 : 'All,OnlyGL,OnlyAlocGL') : Decimal;
    VAR
      Result@1003 : Decimal;
    BEGIN
      AccountScheduleLine.COPYFILTERS(AccSchedLine);
      StartDate := AccountScheduleLine.GETRANGEMIN("Date Filter");
      IF EndDate <> AccountScheduleLine.GETRANGEMAX("Date Filter") THEN BEGIN
        EndDate := AccountScheduleLine.GETRANGEMAX("Date Filter");
        FiscalStartDate := FindFiscalYear(EndDate);
      END;
      DivisionError := FALSE;
      PeriodError := FALSE;
      CallLevel := 0;
      CallingAccSchedLineID := AccSchedLine."Line No.";
      CallingColumnLayoutID := ColumnLayout."Line No.";

      IF (OldAccSchedLineFilters <> AccSchedLine.GETFILTERS) OR
         (OldColumnLayoutFilters <> ColumnLayout.GETFILTERS) OR
         (OldAccSchedLineName <> AccSchedLine."Schedule Name") OR
         (OldColumnLayoutName <> ColumnLayout."Column Layout Name") OR
         (OldCalcAddCurr <> CalcAddCurr) OR
         Recalculate
         //NC PIF001 > MP
         OR (OldIsNotCalcElimination <> IsNotCalcElimination)
         OR (OldShowAlocation <> ShowAlocation)
         //NC PIF001 < MP
      THEN BEGIN
        AccSchedCellValue.RESET;
        AccSchedCellValue.DELETEALL;
        CLEAR(BasePercentLine);
        OldAccSchedLineFilters := AccSchedLine.GETFILTERS;
        OldColumnLayoutFilters := ColumnLayout.GETFILTERS;
        OldAccSchedLineName := AccSchedLine."Schedule Name";
        OldColumnLayoutName := ColumnLayout."Column Layout Name";
        OldCalcAddCurr := CalcAddCurr;
        //NC PIF001 > MP
        OldIsNotCalcElimination := IsNotCalcElimination;
        OldShowAlocation := ShowAlocation;
        //NC PIF001 < MP
      END;

      //NC PIF001 > MP
      {
      Result := CalcCellValue(AccSchedLine,ColumnLayout,CalcAddCurr);
      }
      Result := CalcCellValue(AccSchedLine,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation);
      //NC PIF001 < MP
      WITH ColumnLayout DO BEGIN
        CASE Show OF
          Show::"When Positive":
            IF Result < 0 THEN
              Result := 0;
          Show::"When Negative":
            IF Result > 0 THEN
              Result := 0;
        END;
        IF "Show Opposite Sign" THEN
          Result := -Result;
        CASE "Show Indented Lines" OF
          "Show Indented Lines"::"Indented Only":
            IF AccSchedLine.Indentation = 0 THEN
              Result := 0;
          "Show Indented Lines"::"Non-Indented Only":
            IF AccSchedLine.Indentation > 0 THEN
              Result := 0;
        END;
      END;
      IF AccSchedLine."Show Opposite Sign" THEN
        Result := -Result;
      EXIT(Result);
    END;

    LOCAL PROCEDURE CalcCellValue@6(AccSchedLine@1000 : Record 85;ColumnLayout@1001 : Record 334;CalcAddCurr@1002 : Boolean;IsNotCalcElimination@1101495001 : Boolean;ShowAlocation@1101495000 : 'All,OnlyGL,OnlyAlocGL') : Decimal;
    VAR
      GLAcc@1004 : Record 15;
      CostType@1005 : Record 1103;
      CFAccount@1003 : Record 841;
      Result@1015 : Decimal;
      AccSchedExtensionManagement@1470000 : Codeunit 26581;
    BEGIN
      Result := 0;
      IF AccSchedLine.Totaling <> '' THEN
        IF AccSchedCellValue.GET(AccSchedLine."Schedule Name",AccSchedLine."Line No.",ColumnLayout."Line No.") THEN BEGIN
          Result := AccSchedCellValue.Value;
          DivisionError := DivisionError OR AccSchedCellValue."Has Error";
          PeriodError := PeriodError OR AccSchedCellValue."Period Error";
        END ELSE BEGIN
          IF ColumnLayout."Column Type" = ColumnLayout."Column Type"::Formula THEN
            Result :=
              //NC PIF001 > MP
              {
              EvaluateExpression(
                FALSE,ColumnLayout.Formula,AccSchedLine,ColumnLayout,CalcAddCurr)
              }
              EvaluateExpression(
                FALSE,ColumnLayout.Formula,AccSchedLine,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation)
              //NC PIF001 < MP
          ELSE
            IF AccSchedLine."Totaling Type" = AccSchedLine."Totaling Type"::Constant THEN BEGIN
              IF NOT EVALUATE(Result, AccSchedLine.Totaling) THEN;
            END
            ELSE IF AccSchedLine."Totaling Type" = AccSchedLine."Totaling Type"::Custom THEN
            BEGIN
                Result := AccSchedExtensionManagement.CalcCustomFunc(AccSchedLine,ColumnLayout,StartDate,EndDate);
            END ELSE
            IF AccSchedLine."Totaling Type" IN
               [AccSchedLine."Totaling Type"::Formula,AccSchedLine."Totaling Type"::"Set Base For Percent"]
            THEN
              Result :=
                //NC PIF001 > MP
                {
                EvaluateExpression(
                  TRUE,AccSchedLine.Totaling,AccSchedLine,ColumnLayout,CalcAddCurr)
                }
                EvaluateExpression(
                  TRUE,AccSchedLine.Totaling,AccSchedLine,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation)
                //NC PIF001 < MP
            ELSE
              IF (StartDate = 0D) OR (EndDate = 0D) OR (EndDate = DMY2DATE(31,12,9999)) THEN BEGIN
                Result := 0;
                PeriodError := TRUE;
              END ELSE BEGIN
                IF AccSchedLine."Totaling Type" IN
                   [AccSchedLine."Totaling Type"::"Posting Accounts",AccSchedLine."Totaling Type"::"Total Accounts"]
                THEN BEGIN
                  AccSchedLine.COPYFILTERS(AccountScheduleLine);
                  SetGLAccRowFilters(GLAcc,AccSchedLine);
                  SetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout);
                  IF (AccSchedLine."Totaling Type" = AccSchedLine."Totaling Type"::"Posting Accounts") AND
                     (STRLEN(AccSchedLine.Totaling) <= MAXSTRLEN(GLAcc.Totaling)) AND (STRPOS(AccSchedLine.Totaling,'*') = 0)
                  THEN BEGIN
                    GLAcc."Account Type" := GLAcc."Account Type"::Total;
                    GLAcc.Totaling := AccSchedLine.Totaling;
                    //NC PIF001 > MP
                    {
                    Result := Result + CalcGLAcc(GLAcc,AccSchedLine,ColumnLayout,CalcAddCurr);
                    }
                    Result := Result + CalcGLAcc(GLAcc,AccSchedLine,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation);
                    //NC PIF001 < MP
                  END ELSE
                    IF GLAcc.FIND('-') THEN
                      REPEAT
                        //NC PIF001 > MP
                        {
                        Result := Result + CalcGLAcc(GLAcc,AccSchedLine,ColumnLayout,CalcAddCurr);
                        }
                        Result := Result + CalcGLAcc(GLAcc,AccSchedLine,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation);
                      UNTIL GLAcc.NEXT = 0;
                END;

                IF AccSchedLine."Totaling Type" IN
                   [AccSchedLine."Totaling Type"::"Cost Type",AccSchedLine."Totaling Type"::"Cost Type Total"]
                THEN BEGIN
                  AccSchedLine.COPYFILTERS(AccountScheduleLine);
                  SetCostTypeRowFilters(CostType,AccSchedLine,ColumnLayout);
                  SetCostTypeColumnFilters(CostType,AccSchedLine,ColumnLayout);

                  IF (AccSchedLine."Totaling Type" = AccSchedLine."Totaling Type"::"Cost Type") AND
                     (STRLEN(AccSchedLine.Totaling) <= MAXSTRLEN(GLAcc.Totaling)) AND (STRPOS(AccSchedLine.Totaling,'*') = 0)
                  THEN BEGIN
                    CostType.Type := CostType.Type::Total;
                    CostType.Totaling := AccSchedLine.Totaling;
                    Result := Result + CalcCostType(CostType,AccSchedLine,ColumnLayout,CalcAddCurr);
                  END ELSE BEGIN
                    IF CostType.FIND('-') THEN
                      REPEAT
                        Result := Result + CalcCostType(CostType,AccSchedLine,ColumnLayout,CalcAddCurr);
                      UNTIL CostType.NEXT = 0;
                  END;
                END;

                IF AccSchedLine."Totaling Type" IN
                   [AccSchedLine."Totaling Type"::"Cash Flow Entry Accounts",AccSchedLine."Totaling Type"::"Cash Flow Total Accounts"]
                THEN BEGIN
                  AccSchedLine.COPYFILTERS(AccountScheduleLine);
                  SetCFAccRowFilter(CFAccount,AccSchedLine);
                  SetCFAccColumnFilter(CFAccount,AccSchedLine,ColumnLayout);
                  IF (AccSchedLine."Totaling Type" = AccSchedLine."Totaling Type"::"Cash Flow Entry Accounts") AND
                     (STRLEN(AccSchedLine.Totaling) <= 30)
                  THEN BEGIN
                    CFAccount."Account Type" := CFAccount."Account Type"::Total;
                    CFAccount.Totaling := AccSchedLine.Totaling;
                    Result := Result + CalcCFAccount(CFAccount,AccSchedLine,ColumnLayout);
                  END ELSE
                    IF CFAccount.FIND('-') THEN
                      REPEAT
                        Result := Result + CalcCFAccount(CFAccount,AccSchedLine,ColumnLayout);
                      UNTIL CFAccount.NEXT = 0;
                END;
              END;

          AccSchedCellValue."Row No." := AccSchedLine."Line No.";
          AccSchedCellValue."Column No." := ColumnLayout."Line No.";
          AccSchedCellValue.Value := Result;
          AccSchedCellValue."Has Error" := DivisionError;
          AccSchedCellValue."Period Error" := PeriodError;
          AccSchedCellValue."Schedule Name" := AccSchedLine."Schedule Name";
          AccSchedCellValue.INSERT;
        END;
      EXIT(Result);
    END;

    LOCAL PROCEDURE CalcGLAcc@7(VAR GLAcc@1001 : Record 15;VAR AccSchedLine@1002 : Record 85;VAR ColumnLayout@1003 : Record 334;CalcAddCurr@1004 : Boolean;IsNotCalcElimination@1101495001 : Boolean;ShowAllocation@1101495000 : 'All,OnlyGL,OnlyAlocGL') ColValue@1000 : Decimal;
    VAR
      GLEntry@1005 : Record 17;
      GLBudgEntry@1006 : Record 96;
      AnalysisViewEntry@1007 : Record 365;
      AnalysisViewBudgetEntry@1008 : Record 366;
      GLCorrespondenceEntry@1470000 : Record 12401;
      AmountType@1009 : 'Net Amount,Debit Amount,Credit Amount';
      TestBalance@1010 : Boolean;
      Balance@1011 : Decimal;
      UseBusUnitFilter@1111 : Boolean;
      UseDimFilter@1012 : Boolean;
      GLCorrAnalysisViewEntry@1101495002 : Record 14942;
    BEGIN
      ColValue := 0;
      UseDimFilter := FALSE;
      IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
        AccSchedName.GET(AccSchedLine."Schedule Name");

      IF ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) THEN
        EXIT(0);
      TestBalance :=
        AccSchedLine.Show IN [AccSchedLine.Show::"When Positive Balance",AccSchedLine.Show::"When Negative Balance"];
      IF ColumnLayout."Column Type" <> ColumnLayout."Column Type"::Formula THEN BEGIN
        UseBusUnitFilter := (AccSchedLine.GETFILTER("Business Unit Filter") <> '') OR (ColumnLayout."Business Unit Totaling" <> '');
        UseDimFilter := HasDimFilter(AccSchedLine,ColumnLayout);

        //NC NCS-1631.2 > DP
        IF AccSchedLine."Column Ledger Entry Type" <> AccSchedLine."Column Ledger Entry Type"::" " THEN
          ColumnLayout."Ledger Entry Type" := AccSchedLine."Column Ledger Entry Type" - 1;
        //NC NCS-1631.2 < DP

        CASE ColumnLayout."Ledger Entry Type" OF
          ColumnLayout."Ledger Entry Type"::Entries:
            BEGIN
              //NC NCS-1701 > USE
              IF (AccSchedName."Analysis View Name Add." = '') AND (AccSchedName."Analysis View Name" = '') THEN
              {
              IF AccSchedName."Analysis View Name" = '' THEN
              }
              //NC NCS-1701 < USE
                WITH GLEntry DO BEGIN
                  IF UseBusUnitFilter THEN
                    IF UseDimFilter THEN
                      SETCURRENTKEY(
                        "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code")
                    ELSE
                      SETCURRENTKEY(
                        "G/L Account No.","Business Unit Code","Posting Date")
                  ELSE
                    IF UseDimFilter THEN
                      SETCURRENTKEY("G/L Account No.","Global Dimension 1 Code","Global Dimension 2 Code")
                    ELSE
                      SETCURRENTKEY("G/L Account No.","Posting Date");
                  IF GLAcc.Totaling = '' THEN
                    SETRANGE("G/L Account No.",GLAcc."No.")
                  ELSE
                    SETFILTER("G/L Account No.",GLAcc.Totaling);
                  GLAcc.COPYFILTER("Date Filter","Posting Date");
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  AccSchedLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Code");
                  AccSchedLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Code");
                  FILTERGROUP(2);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"));
                  FILTERGROUP(8);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);
                  CASE AmountType OF
                    AmountType::"Net Amount":
                      BEGIN
                        IF CalcAddCurr THEN BEGIN
                          CALCSUMS("Additional-Currency Amount");
                          ColValue := "Additional-Currency Amount";
                        END ELSE BEGIN
                          CALCSUMS(Amount);
                          ColValue := Amount;
                        END;
                        Balance := ColValue;
                      END;
                    AmountType::"Debit Amount":
                      BEGIN
                        IF CalcAddCurr THEN BEGIN
                          IF TestBalance THEN BEGIN
                            CALCSUMS("Add.-Currency Debit Amount","Additional-Currency Amount");
                            Balance := "Additional-Currency Amount";
                          END ELSE
                            CALCSUMS("Add.-Currency Debit Amount");
                          ColValue := "Add.-Currency Debit Amount";
                        END ELSE BEGIN
                          IF TestBalance THEN BEGIN
                            CALCSUMS("Debit Amount",Amount);
                            Balance := Amount;
                          END ELSE
                            CALCSUMS("Debit Amount");
                          ColValue := "Debit Amount";
                        END;
                      END;
                    AmountType::"Credit Amount":
                      BEGIN
                        IF CalcAddCurr THEN BEGIN
                          IF TestBalance THEN BEGIN
                            CALCSUMS("Add.-Currency Credit Amount","Additional-Currency Amount");
                            Balance := "Additional-Currency Amount";
                          END ELSE
                            CALCSUMS("Add.-Currency Credit Amount");
                          ColValue := "Add.-Currency Credit Amount";
                        END ELSE BEGIN
                          IF TestBalance THEN BEGIN
                            CALCSUMS("Credit Amount",Amount);
                            Balance := Amount;
                          END ELSE
                            CALCSUMS("Credit Amount");
                          ColValue := "Credit Amount";
                        END;
                      END;
                  END;
                END
              ELSE
                WITH AnalysisViewEntry DO BEGIN
                  //NC NCS-1701 > USE
                  IF (AccSchedName."Analysis View Name Add." <> '') THEN
                    SETRANGE("Analysis View Code",AccSchedName."Analysis View Name Add.")
                  ELSE
                    IF (AccSchedName."Analysis View Name" <> '') THEN
                  //NC NCS-1701 < USE
                  SETRANGE("Analysis View Code",AccSchedName."Analysis View Name");
                  SETRANGE("Account Source","Account Source"::"G/L Account");
                  IF GLAcc.Totaling = '' THEN
                    SETRANGE("Account No.",GLAcc."No.")
                  ELSE
                    SETFILTER("Account No.",GLAcc.Totaling);
                  GLAcc.COPYFILTER("Date Filter","Posting Date");
                  //NC PIF001 > MP
                  CASE ColumnLayout."Opposite Dimension Type" OF
                    ColumnLayout."Opposite Dimension Type"::" " :
                    BEGIN
                  //NC PIF001 < MP
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  CopyDimFilters(AccSchedLine);
                  FILTERGROUP(2);
                  SetDimFilters(
                    GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,AccSchedLine."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,AccSchedLine."Dimension 4 Totaling"));
                  //NC PIF001 > MP
                  SETFILTER("Business Unit Code",GetBusUnitTotalingFilter(AccSchedLine."Business Unit Totaling"));
                  //NC PIF001 < MP
                  FILTERGROUP(8);
                  SetDimFilters(
                    GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,ColumnLayout."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);
                  //NC PIF001 > MP
                    END;
                    ColumnLayout."Opposite Dimension Type"::"Dimension 21" :
                      BEGIN
                        AccSchedLine.COPYFILTER("Business Unit Filter","Dimension 1 Value Code");
                        BUFilter := AccSchedLine.GETFILTER("Dimension 1 Filter");
                        SETFILTER("Business Unit Code",BUFilter);
                        AccSchedLine.COPYFILTER("Dimension 2 Filter","Dimension 2 Value Code");
                        AccSchedLine.COPYFILTER("Dimension 3 Filter","Dimension 3 Value Code");
                        AccSchedLine.COPYFILTER("Dimension 4 Filter","Dimension 4 Value Code");
                        FILTERGROUP(2);
                        SETFILTER("Dimension 1 Value Code",GetBusUnitTotalingFilter(AccSchedLine."Business Unit Totaling"));
                        SETFILTER("Dimension 2 Value Code",GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"));
                        SETFILTER("Dimension 3 Value Code",GetDimTotalingFilter(3,AccSchedLine."Dimension 3 Totaling"));
                        SETFILTER("Dimension 4 Value Code",GetDimTotalingFilter(4,AccSchedLine."Dimension 4 Totaling"));
                        SETFILTER("Business Unit Code",GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"));
                        //NC NOS-26 > SPA
                        {
                        FILTERGROUP(6);
                        }
                        FILTERGROUP(8);
                        //NC NOS-26 < SPA
                        SETFILTER("Dimension 1 Value Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                        SETFILTER("Dimension 2 Value Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                        SETFILTER("Dimension 3 Value Code",GetDimTotalingFilter(3,ColumnLayout."Dimension 3 Totaling"));
                        SETFILTER("Dimension 4 Value Code",GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
                        SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                        FILTERGROUP(0);
                     END;
                  END;
                  IF IsNotCalcElimination THEN;
                   // SETRANGE(Elimination,NOT IsNotCalcElimination)
                  //ELSE;
                   // SETRANGE(Elimination);
                  CASE ShowAllocation OF
                    ShowAllocation::All :;
                   //  SETRANGE(Allocation);
                    ShowAllocation::OnlyGL :;
                   //  SETRANGE(Allocation,FALSE);
                    ShowAllocation::OnlyAlocGL :;
                   //  SETRANGE(Allocation,TRUE);
                  END;
                  //NC PIF001 < MP

                  CASE AmountType OF
                    AmountType::"Net Amount":
                      BEGIN
                        IF CalcAddCurr THEN BEGIN
                          CALCSUMS("Add.-Curr. Amount");
                          ColValue := "Add.-Curr. Amount";
                        END ELSE BEGIN
                          CALCSUMS(Amount);
                          ColValue := Amount;
                        END;
                        Balance := ColValue;
                      END;
                    AmountType::"Debit Amount":
                      BEGIN
                        IF CalcAddCurr THEN BEGIN
                          IF TestBalance THEN BEGIN
                            CALCSUMS("Add.-Curr. Debit Amount","Add.-Curr. Amount");
                            Balance := "Add.-Curr. Amount";
                          END ELSE
                            CALCSUMS("Add.-Curr. Debit Amount");
                          ColValue := "Add.-Curr. Debit Amount";
                        END ELSE BEGIN
                          IF TestBalance THEN BEGIN
                            CALCSUMS("Debit Amount",Amount);
                            Balance := Amount;
                          END ELSE
                            CALCSUMS("Debit Amount");
                          ColValue := "Debit Amount";
                        END;
                      END;
                    AmountType::"Credit Amount":
                      BEGIN
                        IF CalcAddCurr THEN BEGIN
                          IF TestBalance THEN BEGIN
                            CALCSUMS("Add.-Curr. Credit Amount","Add.-Curr. Amount");
                            Balance := "Add.-Curr. Amount";
                          END ELSE
                            CALCSUMS("Add.-Curr. Credit Amount");
                          ColValue := "Add.-Curr. Credit Amount";
                        END ELSE BEGIN
                          IF TestBalance THEN BEGIN
                            CALCSUMS("Credit Amount",Amount);
                            Balance := Amount;
                          END ELSE
                            CALCSUMS("Credit Amount");
                          ColValue := "Credit Amount";
                        END;
                      END;
                  END;
                END;
            END;
          ColumnLayout."Ledger Entry Type"::"Budget Entries":
            BEGIN
              IF AccSchedName."Analysis View Name" = '' THEN
                WITH GLBudgEntry DO BEGIN
                  IF UseBusUnitFilter OR UseDimFilter THEN
                    SETCURRENTKEY(
                      "Budget Name","G/L Account No.","Business Unit Code",
                      "Global Dimension 1 Code","Global Dimension 2 Code",
                      "Budget Dimension 1 Code","Budget Dimension 2 Code",
                      "Budget Dimension 3 Code","Budget Dimension 4 Code",Date)
                  ELSE
                    SETCURRENTKEY("Budget Name","G/L Account No.",Date);
                  IF GLAcc.Totaling = '' THEN
                    SETRANGE("G/L Account No.",GLAcc."No.")
                  ELSE
                    SETFILTER("G/L Account No.",GLAcc.Totaling);
                  GLAcc.COPYFILTER("Date Filter",Date);
                  AccSchedLine.COPYFILTER("G/L Budget Filter","Budget Name");
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  AccSchedLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Code");
                  AccSchedLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Code");
                  FILTERGROUP(2);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"));
                  FILTERGROUP(8);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);

                  CASE AmountType OF
                    AmountType::"Net Amount":
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := Amount;
                      END;
                    AmountType::"Debit Amount":
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := Amount;
                        IF ColValue < 0 THEN
                          ColValue := 0;
                      END;
                    AmountType::"Credit Amount":
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := -Amount;
                        IF ColValue < 0 THEN
                          ColValue := 0;
                      END;
                  END;
                  Balance := Amount;
                END
              ELSE
                WITH AnalysisViewBudgetEntry DO BEGIN
                  IF GLAcc.Totaling = '' THEN
                    SETRANGE("G/L Account No.",GLAcc."No.")
                  ELSE
                    SETFILTER("G/L Account No.",GLAcc.Totaling);
                  SETRANGE("Analysis View Code",AccSchedName."Analysis View Name");
                  GLAcc.COPYFILTER("Date Filter","Posting Date");
                  AccSchedLine.COPYFILTER("G/L Budget Filter","Budget Name");
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  CopyDimFilters(AccSchedLine);
                  FILTERGROUP(2);
                  SetDimFilters(
                    GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,AccSchedLine."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,AccSchedLine."Dimension 4 Totaling"));
                  FILTERGROUP(8);
                  SetDimFilters(
                    GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,ColumnLayout."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);

                  CASE AmountType OF
                    AmountType::"Net Amount":
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := Amount;
                      END;
                    AmountType::"Debit Amount":
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := Amount;
                        IF ColValue < 0 THEN
                          ColValue := 0;
                      END;
                    AmountType::"Credit Amount":
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := -Amount;
                        IF ColValue < 0 THEN
                          ColValue := 0;
                      END;
                  END;
                  Balance := Amount;
                END;
              IF CalcAddCurr THEN
                ColValue := CalcLCYToACY(ColValue);
            END;
          ColumnLayout."Ledger Entry Type"::"Corr. Entries" :
            BEGIN

              //NC NCS-1631 > DP
              IF AccSchedName."G/L Corr. Analysis View Name" = '' THEN BEGIN
              //NC NCS-1631 < DP

              WITH GLCorrespondenceEntry DO BEGIN
                SETCURRENTKEY("Debit Account No.","Credit Account No.","Debit Global Dimension 1 Code",
                  "Debit Global Dimension 2 Code", "Business Unit Code","Posting Date");
                IF GLAcc."No." <> '' THEN
                  SETFILTER("Debit Account No.",GLAcc."No.")
                ELSE
                  GLAcc.COPYFILTER("No.","Debit Account No.");
                GLCorrespondenceEntry.SETFILTER("Posting Date",GetPostingDateFilter(AccSchedLine,ColumnLayout));
                SETFILTER("Business Unit Code",AccSchedLine."Business Unit Filter");
                SETFILTER("Credit Account No.",AccSchedLine."Corr. Totaling");
                AccSchedLine.COPYFILTER("Dimension 1 Filter","Debit Global Dimension 1 Code");
                AccSchedLine.COPYFILTER("Dimension 2 Filter","Debit Global Dimension 2 Code");
                AccSchedLine.COPYFILTER("Corr. Dimension 1 Filter","Credit Global Dimension 1 Code");
                AccSchedLine.COPYFILTER("Corr. Dimension 2 Filter","Credit Global Dimension 2 Code");
                FILTERGROUP(2);
                SETFILTER("Debit Global Dimension 1 Code",GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"));
                SETFILTER("Debit Global Dimension 2 Code",GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"));
                SETFILTER("Credit Global Dimension 1 Code",GetDimTotalingFilter(12401,AccSchedLine."Dimension 1 Corr. Totaling"));
                SETFILTER("Credit Global Dimension 2 Code",GetDimTotalingFilter(12402,AccSchedLine."Dimension 2 Corr. Totaling"));
                FILTERGROUP(6);
                SETFILTER("Debit Global Dimension 1 Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                SETFILTER("Debit Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                SETFILTER("Credit Global Dimension 1 Code",GetDimTotalingFilter(12401,ColumnLayout."Dimension 1 Corr. Totaling"));
                SETFILTER("Credit Global Dimension 2 Code",GetDimTotalingFilter(12402,ColumnLayout."Dimension 2 Corr. Totaling"));
                FILTERGROUP(0);

                CALCSUMS(Amount, "Amount (ACY)");
                IF CalcAddCurr THEN
                  ColValue := "Amount (ACY)"
                ELSE
                  ColValue := Amount;
              END;

              //NC NCS-1631 > DP
              END ELSE
                WITH GLCorrAnalysisViewEntry DO BEGIN
                  SETRANGE("G/L Corr. Analysis View Code",AccSchedName."G/L Corr. Analysis View Name");
                  IF GLAcc."No." <> '' THEN
                      SETFILTER("Debit Account No.",GLAcc."No.")
                    ELSE
                      GLAcc.COPYFILTER("No.","Debit Account No.");
                  SETFILTER("Credit Account No.",AccSchedLine."Corr. Totaling");
                  SETFILTER("Posting Date",GetPostingDateFilter(AccSchedLine,ColumnLayout));
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  AccSchedLine.COPYFILTER("Dimension 1 Filter","Debit Dimension 1 Value Code");
                  AccSchedLine.COPYFILTER("Dimension 2 Filter","Debit Dimension 2 Value Code");
                  AccSchedLine.COPYFILTER("Dimension 3 Filter","Debit Dimension 3 Value Code");
                  AccSchedLine.COPYFILTER("Corr. Dimension 1 Filter","Credit Dimension 1 Value Code");
                  AccSchedLine.COPYFILTER("Corr. Dimension 2 Filter","Credit Dimension 2 Value Code");
                  AccSchedLine.COPYFILTER("Corr. Dimension 3 Filter","Credit Dimension 3 Value Code");
                  FILTERGROUP(2);
                  SETFILTER("Business Unit Code",AccSchedLine."Business Unit Totaling");
                  SETFILTER("Debit Dimension 1 Value Code",GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"));
                  SETFILTER("Debit Dimension 2 Value Code",GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"));
                  SETFILTER("Debit Dimension 3 Value Code",GetDimTotalingFilter(3,AccSchedLine."Dimension 3 Totaling"));
                  SETFILTER("Credit Dimension 1 Value Code",GetDimTotalingFilter(12401,AccSchedLine."Dimension 1 Corr. Totaling"));
                  SETFILTER("Credit Dimension 2 Value Code",GetDimTotalingFilter(12402,AccSchedLine."Dimension 2 Corr. Totaling"));
                  SETFILTER("Credit Dimension 3 Value Code",GetDimTotalingFilter(12403,AccSchedLine."Dimension 3 Corr. Totaling"));
                  FILTERGROUP(6);
                  SETFILTER("Debit Dimension 1 Value Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                  SETFILTER("Debit Dimension 2 Value Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                  SETFILTER("Debit Dimension 3 Value Code",GetDimTotalingFilter(3,ColumnLayout."Dimension 3 Totaling"));
                  SETFILTER("Credit Dimension 1 Value Code",GetDimTotalingFilter(12401,ColumnLayout."Dimension 1 Corr. Totaling"));
                  SETFILTER("Credit Dimension 2 Value Code",GetDimTotalingFilter(12402,ColumnLayout."Dimension 2 Corr. Totaling"));
                  SETFILTER("Credit Dimension 3 Value Code",GetDimTotalingFilter(12403,ColumnLayout."Dimension 3 Corr. Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);
                  CALCSUMS(Amount,"Amount (ACY)");
                  IF CalcAddCurr THEN
                    ColValue := "Amount (ACY)"
                  ELSE
                    ColValue := Amount;

                  IF AccSchedLine."Opposite Value" THEN
                    ColValue := -ColValue;
                END;
              //NC NCS-1631 < DP
            END;
        END;
        IF TestBalance THEN BEGIN
          IF AccSchedLine.Show = AccSchedLine.Show::"When Positive Balance" THEN
            IF Balance < 0 THEN
              EXIT(0);
          IF AccSchedLine.Show = AccSchedLine.Show::"When Negative Balance" THEN
            IF Balance > 0 THEN
              EXIT(0);
        END;
      END;
      EXIT(ColValue);
    END;

    LOCAL PROCEDURE CalcCFAccount@39(VAR CFAccount@1000 : Record 841;VAR AccSchedLine@1001 : Record 85;VAR ColumnLayout@1002 : Record 334) ColValue@1003 : Decimal;
    VAR
      CFForecastEntry@1004 : Record 847;
      AnalysisViewEntry@1007 : Record 365;
      AmountType@1009 : 'Net Amount,Debit Amount,Credit Amount';
    BEGIN
      ColValue := 0;
      IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
        AccSchedName.GET(AccSchedLine."Schedule Name");

      IF ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) THEN
        EXIT(0);

      IF ColumnLayout."Column Type" <> ColumnLayout."Column Type"::Formula THEN
        CASE ColumnLayout."Ledger Entry Type" OF
          ColumnLayout."Ledger Entry Type"::Entries:
            BEGIN
              IF AccSchedName."Analysis View Name" = '' THEN
                WITH CFForecastEntry DO BEGIN
                  SETCURRENTKEY(
                    "Cash Flow Account No.","Cash Flow Forecast No.","Global Dimension 1 Code",
                    "Global Dimension 2 Code","Cash Flow Date");
                  IF CFAccount.Totaling = '' THEN
                    SETRANGE("Cash Flow Account No.",CFAccount."No.")
                  ELSE
                    SETFILTER("Cash Flow Account No.",CFAccount.Totaling);
                  CFAccount.COPYFILTER("Date Filter","Cash Flow Date");
                  AccSchedLine.COPYFILTER("Cash Flow Forecast Filter","Cash Flow Forecast No.");
                  AccSchedLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Code");
                  AccSchedLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Code");
                  FILTERGROUP(2);
                  SETFILTER("Global Dimension 1 Code",AccSchedLine."Dimension 1 Totaling");
                  SETFILTER("Global Dimension 2 Code",AccSchedLine."Dimension 2 Totaling");
                  FILTERGROUP(8);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                  FILTERGROUP(0);
                  CASE ColumnLayout."Amount Type" OF
                    ColumnLayout."Amount Type"::"Net Amount":
                      BEGIN
                        CALCSUMS("Amount (LCY)");
                        ColValue := "Amount (LCY)";
                      END;
                  END;
                END
              ELSE
                WITH AnalysisViewEntry DO BEGIN
                  SETRANGE("Analysis View Code",AccSchedName."Analysis View Name");

                  SETRANGE("Account Source","Account Source"::"Cash Flow Account");
                  IF CFAccount.Totaling = '' THEN
                    SETRANGE("Account No.",CFAccount."No.")
                  ELSE
                    SETFILTER("Account No.",CFAccount.Totaling);
                  CFAccount.COPYFILTER("Date Filter","Posting Date");
                  AccSchedLine.COPYFILTER("Cash Flow Forecast Filter","Cash Flow Forecast No.");
                  CopyDimFilters(AccSchedLine);
                  FILTERGROUP(2);
                  SetDimFilters(
                    GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,AccSchedLine."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,AccSchedLine."Dimension 4 Totaling"));
                  FILTERGROUP(8);
                  SetDimFilters(
                    GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,ColumnLayout."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
                  FILTERGROUP(0);

                  CASE ColumnLayout."Amount Type" OF
                    ColumnLayout."Amount Type"::"Net Amount":
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := Amount;
                      END;
                  END;
                END;
            END;
        END;

      EXIT(ColValue);
    END;

    PROCEDURE SetGLAccRowFilters@17(VAR GLAcc@1000 : Record 15;VAR AccSchedLine2@1001 : Record 85);
    BEGIN
      WITH AccSchedLine2 DO
        CASE "Totaling Type" OF
          "Totaling Type"::"Posting Accounts":
            BEGIN
              GLAcc.SETFILTER("No.",Totaling);
              GLAcc.SETRANGE("Account Type",GLAcc."Account Type"::Posting);
            END;
          "Totaling Type"::"Total Accounts":
            BEGIN
              GLAcc.SETFILTER("No.",Totaling);
              GLAcc.SETFILTER("Account Type",'<>%1',GLAcc."Account Type"::Posting);
            END;
        END;
    END;

    PROCEDURE SetCFAccRowFilter@817(VAR CFAccount@1000 : Record 841;VAR AccSchedLine2@1001 : Record 85);
    BEGIN
      WITH AccSchedLine2 DO BEGIN
        COPYFILTER("Cash Flow Forecast Filter",CFAccount."Cash Flow Forecast Filter");

        CASE "Totaling Type" OF
          "Totaling Type"::"Cash Flow Entry Accounts":
            BEGIN
              CFAccount.SETFILTER("No.",Totaling);
              CFAccount.SETRANGE("Account Type",CFAccount."Account Type"::Entry);
            END;
          "Totaling Type"::"Cash Flow Total Accounts":
            BEGIN
              CFAccount.SETFILTER("No.",Totaling);
              CFAccount.SETFILTER("Account Type",'<>%1',CFAccount."Account Type"::Entry);
            END;
        END;
      END;
    END;

    PROCEDURE SetGLAccColumnFilters@20(VAR GLAcc@1000 : Record 15;AccSchedLine2@1005 : Record 85;VAR ColumnLayout@1001 : Record 334);
    VAR
      FromDate@1002 : Date;
      ToDate@1003 : Date;
      FiscalStartDate2@1004 : Date;
    BEGIN
      WITH ColumnLayout DO BEGIN
        CalcColumnDates("Comparison Date Formula","Comparison Period Formula",FromDate,ToDate,FiscalStartDate2);
        CASE "Column Type" OF
          "Column Type"::"Net Change":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                GLAcc.SETRANGE("Date Filter",FromDate,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                GLAcc.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FromDate - 1)); // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                GLAcc.SETRANGE("Date Filter",0D,ToDate);
            END;
          "Column Type"::"Balance at Date":
            IF AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Beginning Balance" THEN
              GLAcc.SETRANGE("Date Filter",0D) // Force a zero return
            ELSE
              GLAcc.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            IF AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Balance at Date" THEN
              GLAcc.SETRANGE("Date Filter",0D) // Force a zero return
            ELSE
              GLAcc.SETRANGE(
                "Date Filter",0D,CLOSINGDATE(FromDate - 1));
          "Column Type"::"Year to Date":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                GLAcc.SETRANGE("Date Filter",FiscalStartDate2,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                GLAcc.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FiscalStartDate2 - 1)); // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                GLAcc.SETRANGE("Date Filter",0D,ToDate);
            END;
          "Column Type"::"Rest of Fiscal Year":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                GLAcc.SETRANGE(
                  "Date Filter",CALCDATE('<+1D>',ToDate),FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                GLAcc.SETRANGE("Date Filter",0D,ToDate);
              AccSchedLine2."Row Type"::"Balance at Date":
                GLAcc.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            END;
          "Column Type"::"Entire Fiscal Year":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                GLAcc.SETRANGE(
                  "Date Filter",
                  FiscalStartDate2,
                  FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                GLAcc.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FiscalStartDate2 - 1)); // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                GLAcc.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            END;
        END;
      END;
    END;

    PROCEDURE SetCFAccColumnFilter@38(VAR CFAccount@1000 : Record 841;AccSchedLine2@1005 : Record 85;VAR ColumnLayout2@1001 : Record 334);
    VAR
      FromDate@1002 : Date;
      ToDate@1003 : Date;
      FiscalStartDate2@1004 : Date;
    BEGIN
      WITH ColumnLayout2 DO BEGIN
        CalcColumnDates("Comparison Date Formula","Comparison Period Formula",FromDate,ToDate,FiscalStartDate2);
        CASE "Column Type" OF
          "Column Type"::"Net Change":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                CFAccount.SETRANGE("Date Filter",FromDate,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                CFAccount.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FromDate - 1));
              AccSchedLine2."Row Type"::"Balance at Date":
                CFAccount.SETRANGE("Date Filter",0D,ToDate);
            END;
          "Column Type"::"Balance at Date":
            IF AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Beginning Balance" THEN
              CFAccount.SETRANGE("Date Filter",0D) // Force a zero return
            ELSE
              CFAccount.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            IF AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Balance at Date" THEN
              CFAccount.SETRANGE("Date Filter",0D) // Force a zero return
            ELSE
              CFAccount.SETRANGE(
                "Date Filter",0D,CALCDATE('<-1D>',FromDate));
          "Column Type"::"Year to Date":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                CFAccount.SETRANGE("Date Filter",FiscalStartDate2,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                CFAccount.SETFILTER("Date Filter",'..%1',FiscalStartDate2 - 1);
              AccSchedLine2."Row Type"::"Balance at Date":
                CFAccount.SETRANGE("Date Filter",0D,ToDate);
            END;
          "Column Type"::"Rest of Fiscal Year":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                CFAccount.SETRANGE(
                  "Date Filter",
                  CALCDATE('<+1D>',ToDate),FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                CFAccount.SETRANGE("Date Filter",0D,ToDate);
              AccSchedLine2."Row Type"::"Balance at Date":
                CFAccount.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            END;
          "Column Type"::"Entire Fiscal Year":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                CFAccount.SETRANGE(
                  "Date Filter",
                  FiscalStartDate2,FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                CFAccount.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FiscalStartDate2 - 1));
              AccSchedLine2."Row Type"::"Balance at Date":
                CFAccount.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE EvaluateExpression@9(IsAccSchedLineExpression@1000 : Boolean;Expression@1001 : Text;AccSchedLine@1002 : Record 85;ColumnLayout@1003 : Record 334;CalcAddCurr@1004 : Boolean;IsNotCalcElimination@1101495001 : Boolean;ShowAlocation@1101495000 : 'All,OnlyGL,OnlyAlocGL') : Decimal;
    VAR
      AccSchedLine2@1018 : Record 85;
      Result@1005 : Decimal;
      Parantheses@1006 : Integer;
      Operator@1007 : Char;
      LeftOperand@1008 : Text;
      RightOperand@1009 : Text;
      LeftResult@1010 : Decimal;
      RightResult@1011 : Decimal;
      i@1012 : Integer;
      IsExpression@1013 : Boolean;
      IsFilter@1014 : Boolean;
      Operators@1015 : Text[8];
      OperatorNo@1016 : Integer;
      AccSchedLineID@1017 : Integer;
      Show@1210000 : Integer;
    BEGIN
      Result := 0;

      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      Show := AccSchedLine.Show;

      CallLevel := CallLevel + 1;
      IF CallLevel > 25 THEN
        ShowError(Text020,
          AccSchedLine,ColumnLayout);

      Expression := DELCHR(Expression,'<>',' ');
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^%';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult :=
            //NC PIF001 > MP
            {
            EvaluateExpression(
              IsAccSchedLineExpression,LeftOperand,AccSchedLine,ColumnLayout,CalcAddCurr);
            }
            EvaluateExpression(
              IsAccSchedLineExpression,LeftOperand,AccSchedLine,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation);
            //NC PIF001 < MP
          IF (RightOperand = '') AND (Operator = '%') AND NOT IsAccSchedLineExpression AND
             (AccSchedLine."Totaling Type" <> AccSchedLine."Totaling Type"::"Set Base For Percent")
          THEN BEGIN
            AccSchedLine2.COPY(AccSchedLine);
            AccSchedLine2."Line No." := GetBasePercentLine(AccSchedLine,ColumnLayout);
            AccSchedLine2.FIND;
            RightResult :=
              //NC PIF001 > MP
              {
              EvaluateExpression(
                IsAccSchedLineExpression,LeftOperand,AccSchedLine2,ColumnLayout,CalcAddCurr);
              }
              EvaluateExpression(
                IsAccSchedLineExpression,LeftOperand,AccSchedLine2,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation);
              //NC PIF001 < MP
          END ELSE
            RightResult :=
              //NC PIF001 > MP
              {
              EvaluateExpression(
                IsAccSchedLineExpression,RightOperand,AccSchedLine,ColumnLayout,CalcAddCurr);
              }
              EvaluateExpression(
                IsAccSchedLineExpression,RightOperand,AccSchedLine,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation);
              //NC PIF001 < MP
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '%':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := 100 * LeftResult / RightResult;
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              //NC PIF001 > MP
              {
              EvaluateExpression(
                IsAccSchedLineExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                AccSchedLine,ColumnLayout,CalcAddCurr)
              }
              EvaluateExpression(
                IsAccSchedLineExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                AccSchedLine,ColumnLayout,CalcAddCurr,IsNotCalcElimination,ShowAlocation)
              //NC PIF001 < MP
          ELSE BEGIN
            IsFilter :=
              (STRPOS(Expression,'..') +
               STRPOS(Expression,'|') +
               STRPOS(Expression,'<') +
               STRPOS(Expression,'>') +
               STRPOS(Expression,'&') +
               STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 20) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsAccSchedLineExpression THEN BEGIN
                AccSchedLine.SETRANGE("Schedule Name",AccSchedLine."Schedule Name");
                AccSchedLine.SETFILTER("Row No.",Expression);
                AccSchedLineID := AccSchedLine."Line No.";
                IF AccSchedLine.FIND('-') THEN
                  REPEAT
                    IF AccSchedLine."Line No." <> AccSchedLineID THEN
                      Result := Result + CalcCellValue(AccSchedLine,ColumnLayout,CalcAddCurr,
                        IsNotCalcElimination,ShowAlocation); // NC PIF001 MP
                  UNTIL AccSchedLine.NEXT = 0
                ELSE BEGIN
                  AccSchedLine.SETRANGE("Schedule Name",GLSetup."Shared Account Schedule");
                  IF AccSchedLine.FIND('-') THEN
                    REPEAT
                      //IF AccSchedLine."Line No." <> AccSchedLineID THEN
                        Result := Result + CalcCellValue(AccSchedLine,ColumnLayout,CalcAddCurr,
                          IsNotCalcElimination,ShowAlocation); // NC PIF001 MP
                    UNTIL AccSchedLine.NEXT = 0
                  ELSE IF IsFilter OR (NOT EVALUATE(Result,Expression)) THEN
                    ShowError(Text012,AccSchedLine,ColumnLayout);
                END;
              END ELSE BEGIN
                ColumnLayout.SETRANGE("Column Layout Name",ColumnLayout."Column Layout Name");
                ColumnLayout.SETFILTER("Column No.",Expression);
                AccSchedLineID := ColumnLayout."Line No.";
                IF ColumnLayout.FIND('-') THEN
                  REPEAT
                    IF ColumnLayout."Line No." <> AccSchedLineID THEN
                      Result := Result + CalcCellValue(AccSchedLine,ColumnLayout,CalcAddCurr,
                        IsNotCalcElimination,ShowAlocation); // NC PIF001 MP
                  UNTIL ColumnLayout.NEXT = 0
                ELSE
                  IF IsFilter OR (NOT EVALUATE(Result,Expression)) THEN
                    ShowError(Text013,AccSchedLine,ColumnLayout);
              END;
          END;
      END;
      CallLevel := CallLevel - 1;

      IF Show = AccSchedLine.Show::"When Positive Balance" THEN
        IF Result < 0 THEN
          EXIT(0);
      IF Show = AccSchedLine.Show::"When Negative Balance" THEN
        IF Result > 0 THEN
          EXIT(0);

      EXIT(Result);
    END;

    PROCEDURE FormatCellAsText@24(VAR ColumnLayout2@1000 : Record 334;Value@1001 : Decimal;CalcAddCurr@1002 : Boolean) : Text[30];
    VAR
      ValueAsText@1003 : Text[30];
    BEGIN
      ValueAsText := MatrixMgt.FormatValue(Value,ColumnLayout2."Rounding Factor",CalcAddCurr);

      IF (ValueAsText <> '') AND
         (ColumnLayout2."Column Type" = ColumnLayout2."Column Type"::Formula) AND
         (STRPOS(ColumnLayout2.Formula,'%') > 1)
      THEN
        ValueAsText := ValueAsText + '%';

      EXIT(ValueAsText);
    END;

    PROCEDURE GetDivisionError@18() : Boolean;
    BEGIN
      EXIT(DivisionError);
    END;

    PROCEDURE GetPeriodError@31() : Boolean;
    BEGIN
      EXIT(PeriodError);
    END;

    LOCAL PROCEDURE ShowError@19(MessageLine@1000 : Text[100];VAR AccSchedLine@1001 : Record 85;VAR ColumnLayout@1002 : Record 334);
    BEGIN
      AccSchedLine.SETRANGE("Schedule Name",AccSchedLine."Schedule Name");
      AccSchedLine.SETRANGE("Line No.",CallingAccSchedLineID);
      IF AccSchedLine.FINDFIRST THEN;
      ColumnLayout.SETRANGE("Column Layout Name",ColumnLayout."Column Layout Name");
      ColumnLayout.SETRANGE("Line No.",CallingColumnLayoutID);
      IF ColumnLayout.FINDFIRST THEN;
      ERROR(
        STRSUBSTNO(
          Text016,
          MessageLine,
          Text017,
          STRSUBSTNO(Text018,AccSchedLine."Row No.",AccSchedLine."Line No.",AccSchedLine.Totaling),
          STRSUBSTNO(Text019,ColumnLayout."Column No.",ColumnLayout."Line No.",ColumnLayout.Formula)));
    END;

    PROCEDURE InsertGLAccounts@12(VAR AccSchedLine@1000 : Record 85);
    VAR
      GLAcc@1001 : Record 15;
      GLAccList@1002 : Page 18;
      AccCounter@1003 : Integer;
      AccSchedLineNo@1004 : Integer;
    BEGIN
      GLAccList.LOOKUPMODE(TRUE);
      IF GLAccList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        GLAccList.SetSelection(GLAcc);
        AccCounter := GLAcc.COUNT;
        IF AccCounter > 0 THEN BEGIN
          AccSchedLineNo := AccSchedLine."Line No.";
          MoveAccSchedLines(AccSchedLine,AccCounter);
          IF GLAcc.FINDSET THEN
            REPEAT
              AccSchedLine.INIT;
              AccSchedLineNo := AccSchedLineNo + 10000;
              AccSchedLine."Line No." := AccSchedLineNo;
              AccSchedLine.Description := GLAcc.Name;
              AccSchedLine.Indentation := GLAcc.Indentation;
              AccSchedLine.Bold := GLAcc."Account Type" <> GLAcc."Account Type"::Posting;
              IF GLAcc."Account Type" IN
                 [GLAcc."Account Type"::Posting,GLAcc."Account Type"::Total,GLAcc."Account Type"::"End-Total"]
              THEN BEGIN
                AccSchedLine.Totaling := GLAcc."No.";
                AccSchedLine."Row No." := COPYSTR(GLAcc."No.",1,MAXSTRLEN(AccSchedLine."Row No."));
              END;
              IF GLAcc."Account Type" IN
                 [GLAcc."Account Type"::Total,GLAcc."Account Type"::"End-Total"]
              THEN
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Total Accounts"
              ELSE
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Posting Accounts";
              AccSchedLine.INSERT;
            UNTIL GLAcc.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertCFAccounts@47(VAR AccSchedLine@1000 : Record 85);
    VAR
      CashFlowAcc@1001 : Record 841;
      CashFlowAccList@1002 : Page 855;
      AccCounter@1003 : Integer;
      AccSchedLineNo@1004 : Integer;
    BEGIN
      CashFlowAccList.LOOKUPMODE(TRUE);
      IF CashFlowAccList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        CashFlowAccList.SetSelection(CashFlowAcc);
        AccCounter := CashFlowAcc.COUNT;
        IF AccCounter > 0 THEN BEGIN
          AccSchedLineNo := AccSchedLine."Line No.";
          MoveAccSchedLines(AccSchedLine,AccCounter);
          IF CashFlowAcc.FINDSET THEN
            REPEAT
              AccSchedLine.INIT;
              AccSchedLineNo := AccSchedLineNo + 10000;
              AccSchedLine."Line No." := AccSchedLineNo;
              AccSchedLine.Description := CashFlowAcc.Name;
              IF CashFlowAcc."Account Type" IN
                 [CashFlowAcc."Account Type"::Entry,CashFlowAcc."Account Type"::Total,CashFlowAcc."Account Type"::"End-Total"]
              THEN BEGIN
                AccSchedLine.Totaling := CashFlowAcc."No.";
                AccSchedLine."Row No." := COPYSTR(CashFlowAcc."No.",1,MAXSTRLEN(AccSchedLine."Row No."));
              END;
              IF CashFlowAcc."Account Type" IN
                 [CashFlowAcc."Account Type"::Total,CashFlowAcc."Account Type"::"End-Total"]
              THEN
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Cash Flow Total Accounts"
              ELSE
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Cash Flow Entry Accounts";
              AccSchedLine.INSERT;
            UNTIL CashFlowAcc.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertCostTypes@43(VAR AccSchedLine@1000 : Record 85);
    VAR
      CostType@1001 : Record 1103;
      CostTypeList@1002 : Page 1124;
      AccCounter@1003 : Integer;
      AccSchedLineNo@1004 : Integer;
    BEGIN
      CostTypeList.LOOKUPMODE(TRUE);
      IF CostTypeList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        CostTypeList.SetSelection(CostType);
        AccCounter := CostType.COUNT;
        IF AccCounter > 0 THEN BEGIN
          AccSchedLineNo := AccSchedLine."Line No.";
          MoveAccSchedLines(AccSchedLine,AccCounter);
          IF CostType.FINDSET THEN
            REPEAT
              AccSchedLine.INIT;
              AccSchedLineNo := AccSchedLineNo + 10000;
              AccSchedLine."Line No." := AccSchedLineNo;
              AccSchedLine.Description := CostType.Name;
              IF CostType.Type IN
                 [CostType.Type::"Cost Type",CostType.Type::Total,CostType.Type::"End-Total"]
              THEN BEGIN
                AccSchedLine.Totaling := CostType."No.";
                AccSchedLine."Row No." := COPYSTR(CostType."No.",1,MAXSTRLEN(AccSchedLine."Row No."));
              END;
              IF CostType.Type IN
                 [CostType.Type::Total,CostType.Type::"End-Total"]
              THEN
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Cost Type Total"
              ELSE
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Cost Type";
              AccSchedLine.INSERT;
            UNTIL CostType.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE ExchangeAmtAddCurrToLCY@23(AmountLCY@1000 : Decimal) : Decimal;
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;

      EXIT(
        CurrExchRate.ExchangeAmtLCYToFCY(
          WORKDATE,GLSetup."Additional Reporting Currency",AmountLCY,
          CurrExchRate.ExchangeRate(WORKDATE,GLSetup."Additional Reporting Currency")));
    END;

    PROCEDURE SetAccSchedName@22(VAR NewAccSchedName@1000 : Record 84);
    BEGIN
      AccSchedName := NewAccSchedName;
    END;

    PROCEDURE GetDimTotalingFilter@32(DimNo@1001 : Integer;DimTotaling@1000 : Text[250]) : Text[1024];
    VAR
      DimTotaling2@1002 : Text[250];
      DimTotalPart@1005 : Text[250];
      ResultFilter@1003 : Text[1024];
      ResultFilter2@1006 : Text[1024];
      i@1004 : Integer;
    BEGIN
      IF DimTotaling = '' THEN
        EXIT(DimTotaling);
      DimTotaling2 := DimTotaling;
      REPEAT
        i := STRPOS(DimTotaling2,'|');
        IF i > 0 THEN BEGIN
          DimTotalPart := COPYSTR(DimTotaling2,1,i - 1);
          IF i < STRLEN(DimTotaling2) THEN
            DimTotaling2 := COPYSTR(DimTotaling2,i + 1)
          ELSE
            DimTotaling2 := '';
        END ELSE
          DimTotalPart := DimTotaling2;
        ResultFilter2 := ConvDimTotalingFilter(DimNo,DimTotalPart);
        IF ResultFilter2 <> '' THEN
          IF STRLEN(ResultFilter) + STRLEN(ResultFilter2) + 1 > MAXSTRLEN(ResultFilter) THEN
            ERROR(Text021,DimTotaling);

        IF ResultFilter <> '' THEN
          ResultFilter := ResultFilter + '|';
        ResultFilter := COPYSTR(ResultFilter + ResultFilter2,1,MAXSTRLEN(ResultFilter));
      UNTIL i <= 0;
      EXIT(ResultFilter);
    END;

    LOCAL PROCEDURE ConvDimTotalingFilter@28(DimNo@1000 : Integer;DimTotaling@1001 : Text[250]) : Text[1024];
    VAR
      DimVal@1003 : Record 349;
      CostAccSetup@1006 : Record 1108;
      DimCode@1002 : Code[20];
      ResultFilter@1004 : Text[1024];
      DimValTotaling@1005 : Boolean;
    BEGIN
      IF CostAccSetup.GET THEN;
      IF DimTotaling = '' THEN
        EXIT(DimTotaling);

      CheckAnalysisView(AccSchedName.Name,'',FALSE);

      //NC NCS-1631 > DP
      CheckAnalysisView2(AccSchedName.Name,'',FALSE);
      //NC NCS-1631 < DP

      //NC NCS-1631 > DP
      IF AccSchedName."G/L Corr. Analysis View Name"='' THEN BEGIN
      //NC NCS-1631 < DP

        CASE DimNo OF
          1:
            DimCode := AnalysisView."Dimension 1 Code";
          2:
            DimCode := AnalysisView."Dimension 2 Code";
          3:
            DimCode := AnalysisView."Dimension 3 Code";
          4:
            DimCode := AnalysisView."Dimension 4 Code";
          5:
            DimCode := CostAccSetup."Cost Center Dimension";
          6:
            DimCode := CostAccSetup."Cost Object Dimension";
          12401:
            DimCode := GLSetup."Global Dimension 1 Code";
          12402:
            DimCode := GLSetup."Global Dimension 1 Code";
        END;

      //NC NCS-1631 > DP
      END ELSE
        CASE DimNo OF
          1:
            DimCode := GLCorrAnalysisView."Debit Dimension 1 Code";
          2:
            DimCode := GLCorrAnalysisView."Debit Dimension 2 Code";
          3:
            DimCode := GLCorrAnalysisView."Debit Dimension 3 Code";
          12401:
            DimCode := GLCorrAnalysisView."Credit Dimension 1 Code";
          12402:
            DimCode := GLCorrAnalysisView."Credit Dimension 2 Code";
          12403:
            DimCode :=  GLCorrAnalysisView."Credit Dimension 3 Code"
        END;
      //NC NCS-1631 < DP

      IF DimCode = '' THEN
        EXIT(DimTotaling);

      DimVal.SETRANGE("Dimension Code",DimCode);
      DimVal.SETFILTER(Code,DimTotaling);
      IF DimVal.FIND('-') THEN
        REPEAT
          DimValTotaling :=
            DimVal."Dimension Value Type" IN
            [DimVal."Dimension Value Type"::Total,DimVal."Dimension Value Type"::"End-Total"];
          IF DimValTotaling AND (DimVal.Totaling <> '') THEN BEGIN
            IF STRLEN(ResultFilter) + STRLEN(DimVal.Totaling) + 1 > MAXSTRLEN(ResultFilter) THEN
              ERROR(Text021,DimTotaling);
            IF ResultFilter <> '' THEN
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + DimVal.Totaling;
          END;
        UNTIL (DimVal.NEXT = 0) OR NOT DimValTotaling;

      IF DimValTotaling THEN
        EXIT(ResultFilter);

      EXIT(DimTotaling);
    END;

    LOCAL PROCEDURE CalcCostType@25(VAR CostType@1000 : Record 1103;VAR AccSchedLine@1001 : Record 85;VAR ColumnLayout@1002 : Record 334;CalcAddCurr@1003 : Boolean) ColValue@1004 : Decimal;
    VAR
      CostEntry@1005 : Record 1104;
      CostBudgEntry@1006 : Record 1109;
      AmountType@1008 : 'Net Amount,Debit Amount,Credit Amount';
      UseDimFilter@1007 : Boolean;
      TestBalance@1009 : Boolean;
      Balance@1010 : Decimal;
    BEGIN
      ColValue := 0;
      IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
        AccSchedName.GET(AccSchedLine."Schedule Name");

      IF ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) THEN
        EXIT(0);

      TestBalance :=
        AccSchedLine.Show IN [AccSchedLine.Show::"When Positive Balance",AccSchedLine.Show::"When Negative Balance"];

      IF ColumnLayout."Column Type" <> ColumnLayout."Column Type"::Formula THEN BEGIN
        UseDimFilter := HasDimFilter(AccSchedLine,ColumnLayout) OR HasCostDimFilter(AccSchedLine);
        IF ColumnLayout."Ledger Entry Type" = ColumnLayout."Ledger Entry Type"::Entries THEN BEGIN
          WITH CostEntry DO BEGIN
            IF UseDimFilter THEN
              SETCURRENTKEY("Cost Type No.","Cost Center Code","Cost Object Code")
            ELSE
              SETCURRENTKEY("Cost Type No.","Posting Date");
            IF CostType.Totaling = '' THEN
              SETRANGE("Cost Type No.",CostType."No.")
            ELSE
              SETFILTER("Cost Type No.",CostType.Totaling);
            CostType.COPYFILTER("Date Filter","Posting Date");
            AccSchedLine.COPYFILTER("Cost Center Filter","Cost Center Code");
            AccSchedLine.COPYFILTER("Cost Object Filter","Cost Object Code");
            FILTERGROUP(2);
            SETFILTER("Cost Center Code",GetDimTotalingFilter(5,AccSchedLine."Cost Center Totaling"));
            SETFILTER("Cost Object Code",GetDimTotalingFilter(6,AccSchedLine."Cost Object Totaling"));
            FILTERGROUP(8);
            SETFILTER("Cost Center Code",GetDimTotalingFilter(5,ColumnLayout."Cost Center Totaling"));
            SETFILTER("Cost Object Code",GetDimTotalingFilter(6,ColumnLayout."Cost Object Totaling"));
            FILTERGROUP(0);
          END;
          CASE AmountType OF
            AmountType::"Net Amount":
              BEGIN
                IF CalcAddCurr THEN BEGIN
                  CostEntry.CALCSUMS("Additional-Currency Amount");
                  ColValue := CostEntry."Additional-Currency Amount";
                END ELSE BEGIN
                  CostEntry.CALCSUMS(Amount);
                  ColValue := CostEntry.Amount;
                END;
                Balance := ColValue;
              END;
            AmountType::"Debit Amount":
              BEGIN
                IF CalcAddCurr THEN BEGIN
                  CostEntry.CALCSUMS("Add.-Currency Debit Amount","Additional-Currency Amount");
                  IF TestBalance THEN
                    Balance := CostEntry."Additional-Currency Amount";
                  ColValue := CostEntry."Add.-Currency Debit Amount";
                END ELSE BEGIN
                  IF TestBalance THEN BEGIN
                    CostEntry.CALCSUMS("Debit Amount",Amount);
                    Balance := CostEntry.Amount;
                  END ELSE
                    CostEntry.CALCSUMS("Debit Amount");
                  ColValue := CostEntry."Debit Amount";
                END;
              END;
            AmountType::"Credit Amount":
              BEGIN
                IF CalcAddCurr THEN BEGIN
                  CostEntry.CALCSUMS("Add.-Currency Credit Amount","Additional-Currency Amount");
                  IF TestBalance THEN
                    Balance := CostEntry."Additional-Currency Amount";
                  ColValue := CostEntry."Add.-Currency Credit Amount";
                END ELSE BEGIN
                  IF TestBalance THEN BEGIN
                    CostEntry.CALCSUMS("Credit Amount",Amount);
                    Balance := CostEntry.Amount;
                  END ELSE
                    CostEntry.CALCSUMS("Credit Amount");
                  ColValue := CostEntry."Credit Amount";
                END;
              END;
          END;
        END;

        IF ColumnLayout."Ledger Entry Type" = ColumnLayout."Ledger Entry Type"::"Budget Entries" THEN BEGIN
          WITH CostBudgEntry DO BEGIN
            SETCURRENTKEY("Budget Name","Cost Type No.","Cost Center Code","Cost Object Code",Date);

            IF CostType.Totaling = '' THEN
              SETRANGE("Cost Type No.",CostType."No.")
            ELSE
              SETFILTER("Cost Type No.",CostType.Totaling);

            CostType.COPYFILTER("Date Filter",Date);
            AccSchedLine.COPYFILTER("Cost Budget Filter","Budget Name");
            AccSchedLine.COPYFILTER("Cost Center Filter","Cost Center Code");
            AccSchedLine.COPYFILTER("Cost Object Filter","Cost Object Code");

            FILTERGROUP(2);
            SETFILTER("Cost Center Code",GetDimTotalingFilter(5,AccSchedLine."Cost Center Totaling"));
            SETFILTER("Cost Object Code",GetDimTotalingFilter(6,AccSchedLine."Cost Object Totaling"));
            FILTERGROUP(8);
            SETFILTER("Cost Center Code",GetDimTotalingFilter(5,ColumnLayout."Cost Center Totaling"));
            SETFILTER("Cost Object Code",GetDimTotalingFilter(6,ColumnLayout."Cost Object Totaling"));
            FILTERGROUP(0);
          END;

          CostBudgEntry.CALCSUMS(Amount);

          CASE AmountType OF
            AmountType::"Net Amount":
              ColValue := CostBudgEntry.Amount;
            AmountType::"Debit Amount":
              IF CostBudgEntry.Amount > 0 THEN
                ColValue := CostBudgEntry.Amount;
            AmountType::"Credit Amount":
              IF CostBudgEntry.Amount < 0 THEN
                ColValue := CostBudgEntry.Amount;
          END;
          Balance := CostBudgEntry.Amount;
          IF CalcAddCurr THEN
            ColValue := CalcLCYToACY(ColValue);
        END;

        IF TestBalance THEN BEGIN
          IF AccSchedLine.Show = AccSchedLine.Show::"When Positive Balance" THEN
            IF Balance < 0 THEN
              EXIT(0);
          IF AccSchedLine.Show = AccSchedLine.Show::"When Negative Balance" THEN
            IF Balance > 0 THEN
              EXIT(0);
        END;
      END;
      EXIT(ColValue);
    END;

    PROCEDURE SetCostTypeRowFilters@37(VAR CostType@1000 : Record 1103;VAR AccSchedLine2@1001 : Record 85;VAR ColumnLayout@1002 : Record 334);
    BEGIN
      WITH AccSchedLine2 DO BEGIN
        CASE "Totaling Type" OF
          "Totaling Type"::"Cost Type":
            BEGIN
              CostType.SETFILTER("No.",Totaling);
              CostType.SETRANGE(Type,CostType.Type::"Cost Type");
            END;
          "Totaling Type"::"Cost Type Total":
            BEGIN
              CostType.SETFILTER("No.",Totaling);
              CostType.SETFILTER(Type,'<>%1',CostType.Type::"Cost Type");
            END;
        END;

        CostType.SETFILTER("Cost Center Filter",GETFILTER("Cost Center Filter"));
        CostType.SETFILTER("Cost Object Filter",GETFILTER("Cost Object Filter"));
        IF ColumnLayout."Ledger Entry Type" = ColumnLayout."Ledger Entry Type"::"Budget Entries" THEN
          CostType.SETFILTER("Budget Filter",GETFILTER("Cost Budget Filter"));
      END;
    END;

    PROCEDURE SetCostTypeColumnFilters@838(VAR CostType@1000 : Record 1103;AccSchedLine2@1001 : Record 85;VAR ColumnLayout@1002 : Record 334);
    VAR
      FromDate@1003 : Date;
      ToDate@1004 : Date;
      FiscalStartDate2@1005 : Date;
    BEGIN
      WITH ColumnLayout DO BEGIN
        CalcColumnDates("Comparison Date Formula","Comparison Period Formula",FromDate,ToDate,FiscalStartDate2);
        CASE "Column Type" OF
          "Column Type"::"Net Change":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                CostType.SETRANGE("Date Filter",FromDate,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                CostType.SETFILTER("Date Filter",'<%1',FromDate);
              AccSchedLine2."Row Type"::"Balance at Date":
                CostType.SETRANGE("Date Filter",0D,ToDate);
            END;
          "Column Type"::"Balance at Date":
            IF AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Beginning Balance" THEN
              CostType.SETRANGE("Date Filter",0D) // Force a zero return
            ELSE
              CostType.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            IF AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Balance at Date" THEN
              CostType.SETRANGE("Date Filter",0D) // Force a zero return
            ELSE
              CostType.SETRANGE(
                "Date Filter",0D,CALCDATE('<-1D>',FromDate));
          "Column Type"::"Year to Date":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                CostType.SETRANGE("Date Filter",FiscalStartDate2,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                CostType.SETFILTER("Date Filter",'<%1',FiscalStartDate2);
              AccSchedLine2."Row Type"::"Balance at Date":
                CostType.SETRANGE("Date Filter",0D,ToDate);
            END;
          "Column Type"::"Rest of Fiscal Year":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                CostType.SETRANGE(
                  "Date Filter",CALCDATE('<+1D>',ToDate),FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                CostType.SETRANGE("Date Filter",0D,ToDate);
              AccSchedLine2."Row Type"::"Balance at Date":
                CostType.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            END;
          "Column Type"::"Entire Fiscal Year":
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                CostType.SETRANGE(
                  "Date Filter",FiscalStartDate2,FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                CostType.SETFILTER("Date Filter",'<%1',FiscalStartDate2);
              AccSchedLine2."Row Type"::"Balance at Date":
                CostType.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE HasDimFilter@42(VAR AccSchedLine@1001 : Record 85;VAR ColumnLayout@1000 : Record 334) : Boolean;
    BEGIN
      EXIT((AccSchedLine."Dimension 1 Totaling" <> '') OR
        (AccSchedLine."Dimension 2 Totaling" <> '') OR
        (AccSchedLine."Dimension 3 Totaling" <> '') OR
        (AccSchedLine."Dimension 4 Totaling" <> '') OR
        (AccSchedLine.GETFILTER("Dimension 1 Filter") <> '') OR
        (AccSchedLine.GETFILTER("Dimension 2 Filter") <> '') OR
        (AccSchedLine.GETFILTER("Dimension 3 Filter") <> '') OR
        (AccSchedLine.GETFILTER("Dimension 4 Filter") <> '') OR
        (ColumnLayout."Dimension 1 Totaling" <> '') OR
        (ColumnLayout."Dimension 2 Totaling" <> '') OR
        (ColumnLayout."Dimension 3 Totaling" <> '') OR
        (ColumnLayout."Dimension 4 Totaling" <> '') OR
        (ColumnLayout."Cost Center Totaling" <> '') OR
        (ColumnLayout."Cost Object Totaling" <> ''));
    END;

    LOCAL PROCEDURE HasCostDimFilter@40(VAR AccSchedLine@1001 : Record 85) : Boolean;
    BEGIN
      EXIT((AccSchedLine."Cost Center Totaling" <> '') OR
        (AccSchedLine."Cost Object Totaling" <> '') OR
        (AccSchedLine.GETFILTER("Cost Center Filter") <> '') OR
        (AccSchedLine.GETFILTER("Cost Object Filter") <> ''));
    END;

    PROCEDURE CalcColumnDates@41(ComparisonDateFormula@1000 : DateFormula;ComparisonPeriodFormula@1006 : Code[20];VAR FromDate@1001 : Date;VAR ToDate@1002 : Date;VAR FiscalStartDate2@1005 : Date);
    BEGIN
      IF (FORMAT(ComparisonDateFormula) <> '0') AND (FORMAT(ComparisonDateFormula) <> '') THEN BEGIN
        FromDate := CALCDATE(ComparisonDateFormula,StartDate);
        ToDate := CALCDATE(ComparisonDateFormula,EndDate);
        IF (StartDate = CALCDATE('<-CM>',StartDate)) AND
           (FromDate = CALCDATE('<-CM>',FromDate)) AND
           (EndDate = CALCDATE('<CM>',EndDate))
        THEN
          ToDate := CALCDATE('<CM>',ToDate);
        FiscalStartDate2 := FindFiscalYear(ToDate);
      END ELSE
        IF ComparisonPeriodFormula <> '' THEN BEGIN
          AccPeriodStartEnd(ComparisonPeriodFormula,StartDate,FromDate,ToDate);
          FiscalStartDate2 := FindFiscalYear(ToDate);
        END ELSE BEGIN
          FromDate := StartDate;
          ToDate := EndDate;
          FiscalStartDate2 := FiscalStartDate;
        END;
    END;

    LOCAL PROCEDURE MoveAccSchedLines@44(VAR AccSchedLine@1000 : Record 85;Place@1001 : Integer);
    VAR
      AccSchedLineNo@1002 : Integer;
      I@1003 : Integer;
    BEGIN
      AccSchedLineNo := AccSchedLine."Line No.";
      AccSchedLine.SETRANGE("Schedule Name",AccSchedLine."Schedule Name");
      IF AccSchedLine.FIND('+') THEN
        REPEAT
          I := AccSchedLine."Line No.";
          IF I > AccSchedLineNo THEN BEGIN
            AccSchedLine.DELETE;
            AccSchedLine."Line No." := I + 10000 * Place;
            AccSchedLine.INSERT;
          END;
        UNTIL (I <= AccSchedLineNo) OR (AccSchedLine.NEXT(-1) = 0);
    END;

    PROCEDURE SetStartDateEndDate@50(NewStartDate@1000 : Date;NewEndDate@1001 : Date);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
    END;

    LOCAL PROCEDURE ConflictAmountType@45(AccSchedLine@1000 : Record 85;ColumnLayoutAmtType@1001 : 'Net Amount,Debit Amount,Credit Amount';VAR AmountType@1002 : Option) : Boolean;
    BEGIN
      IF (ColumnLayoutAmtType = AccSchedLine."Amount Type") OR
         (AccSchedLine."Amount Type" = AccSchedLine."Amount Type"::"Net Amount")
      THEN
        AmountType := ColumnLayoutAmtType
      ELSE
        IF ColumnLayoutAmtType = ColumnLayoutAmtType::"Net Amount" THEN
          AmountType := AccSchedLine."Amount Type"
        ELSE
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE DrillDown@52(TempColumnLayout@1001 : TEMPORARY Record 334;VAR AccScheduleLine@1000 : Record 85;PeriodLength@1002 : Option);
    VAR
      GLCorrespondenceEntry@1210001 : Record 12401;
      AccSchedCellValue@1210004 : TEMPORARY Record 342;
      AccSchedExtensionMgt@1210000 : Codeunit 26581;
      AccScheduleOverview@1003 : Page 490;
      GLCorrespondenceEntries@1210002 : Page 12401;
      FormulaDrillDown@1210003 : Page 26591;
      ErrorType@1004 : 'None,Division by Zero,Period Error,Both';
    BEGIN
      WITH AccScheduleLine DO BEGIN
        IF TempColumnLayout."Column Type" = TempColumnLayout."Column Type"::Formula THEN BEGIN
          CalcFieldError(ErrorType,"Line No.",TempColumnLayout."Line No.");
          IF ErrorType <> ErrorType::None THEN
            MESSAGE(STRSUBSTNO(ColumnFormulaErrorMsg,TempColumnLayout.Formula,FORMAT(ErrorType)))
          ELSE
            MESSAGE(ColumnFormulaMsg,TempColumnLayout.Formula);
          EXIT;
        END;

        IF (TempColumnLayout."Ledger Entry Type" = TempColumnLayout."Ledger Entry Type"::"Corr. Entries") AND
           ("Totaling Type" <> "Totaling Type"::Formula)
            //NC NCS-1631 > DP
            AND (AccSchedName."G/L Corr. Analysis View Name" = '')
            //NC NCS-1631 < DP
        THEN BEGIN
          GLCorrespondenceEntry.SETFILTER("Debit Account No.",Totaling);
          GLCorrespondenceEntry.SETFILTER("Credit Account No.","Corr. Totaling");
          COPYFILTER("Dimension 1 Filter",GLCorrespondenceEntry."Debit Global Dimension 1 Code");
          COPYFILTER("Dimension 2 Filter",GLCorrespondenceEntry."Debit Global Dimension 2 Code");
          COPYFILTER("Corr. Dimension 1 Filter",GLCorrespondenceEntry."Credit Global Dimension 1 Code");
          COPYFILTER("Corr. Dimension 2 Filter",GLCorrespondenceEntry."Credit Global Dimension 2 Code");
          GLCorrespondenceEntry.FILTERGROUP(2);
          GLCorrespondenceEntry.SETFILTER(
            "Debit Global Dimension 1 Code",
            GetDimTotalingFilter(1,"Dimension 1 Totaling"));
          GLCorrespondenceEntry.SETFILTER(
            "Debit Global Dimension 2 Code",
            GetDimTotalingFilter(2,"Dimension 2 Totaling"));
          GLCorrespondenceEntry.SETFILTER(
            "Credit Global Dimension 1 Code",
            GetDimTotalingFilter(1,"Dimension 1 Corr. Totaling"));
          GLCorrespondenceEntry.SETFILTER(
            "Credit Global Dimension 2 Code",
            GetDimTotalingFilter(2,"Dimension 2 Corr. Totaling"));
          GLCorrespondenceEntry.FILTERGROUP(6);
          GLCorrespondenceEntry.SETFILTER(
            "Debit Global Dimension 1 Code",
            GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"));
          GLCorrespondenceEntry.SETFILTER(
            "Debit Global Dimension 2 Code",
            GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"));
          GLCorrespondenceEntry.SETFILTER(
            "Credit Global Dimension 1 Code",
            GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Corr. Totaling"));
          GLCorrespondenceEntry.SETFILTER(
            "Credit Global Dimension 2 Code",
            GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Corr. Totaling"));
          GLCorrespondenceEntry.FILTERGROUP(0);

          GLCorrespondenceEntry.SETFILTER("Posting Date",
            GetPostingDateFilter(AccScheduleLine,TempColumnLayout));
          GLCorrespondenceEntries.SETTABLEVIEW(GLCorrespondenceEntry);
          GLCorrespondenceEntries.RUN;
          EXIT;
        END;

        CASE "Totaling Type" OF
          "Totaling Type"::Constant:
            BEGIN
              MESSAGE(RowConstantMsg,Totaling);
              EXIT;
            END;
          "Totaling Type"::Formula:
            BEGIN
              GetCellValuesBuffer(AccSchedCellValue);
              FormulaDrillDown.InitParameters(AccScheduleLine,TempColumnLayout,AccSchedCellValue);
              FormulaDrillDown.RUN;
              EXIT;
            END;
          "Totaling Type"::Custom:
            BEGIN
              AccSchedExtensionMgt.DrillDownAmount(
                AccScheduleLine,
                TempColumnLayout,
                Totaling,
                GETRANGEMIN("Date Filter"),
                GETRANGEMAX("Date Filter"));
              EXIT;
            END;
          "Totaling Type"::"Set Base For Percent":
            BEGIN
              AccScheduleOverview.SetAccSchedName("Schedule Name");
              AccScheduleOverview.SETTABLEVIEW(AccScheduleLine);
              AccScheduleOverview.SETRECORD(AccScheduleLine);
              AccScheduleOverview.SetPeriodType(PeriodLength);
              AccScheduleOverview.RUN;
              EXIT;
            END;
        END;

        IF Totaling = '' THEN
          EXIT;

        CASE "Totaling Type" OF
          "Totaling Type"::"Cash Flow Entry Accounts","Totaling Type"::"Cash Flow Total Accounts":
            DrillDownOnCFAccount(TempColumnLayout,AccScheduleLine);
          "Totaling Type"::Custom:
            AccSchedExtensionMgt.DrillDownAmount(
              AccScheduleLine,TempColumnLayout,Totaling,GETRANGEMIN("Date Filter"),GETRANGEMAX("Date Filter"));
          ELSE
            DrillDownOnGLAccount(TempColumnLayout,AccScheduleLine);
        END;
      END;
    END;

    PROCEDURE DrillDownFromOverviewPage@54(TempColumnLayout@1001 : TEMPORARY Record 334;VAR AccScheduleLine@1000 : Record 85;PeriodLength@1002 : Option);
    BEGIN
      WITH AccScheduleLine DO BEGIN
        IF "Totaling Type" IN ["Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent"] THEN
          MESSAGE(RowFormulaMsg,Totaling)
        ELSE BEGIN
          //NC NOS-26 > SPA
          AccSchedName.GET(AccScheduleLine."Schedule Name");
          //NC NOS-26 < SPA
          DrillDown(TempColumnLayout,AccScheduleLine,PeriodLength);
        END;
      END;
    END;

    LOCAL PROCEDURE DrillDownOnGLAccount@51(TempColumnLayout@1007 : TEMPORARY Record 334;VAR AccScheduleLine@1003 : Record 85);
    VAR
      GLAcc@1006 : Record 15;
      GLAccAnalysisView@1005 : Record 376;
      CostType@1004 : Record 1103;
      ChartOfAccsAnalysisView@1002 : Page 569;
      GLCorrespondence@1101495000 : Record 12400;
      GLCorrespAnalysisView@1101495001 : Record 50147;
      CorrAnalysisView@1101495002 : Page 50107;
    BEGIN
      WITH AccScheduleLine DO
        IF "Totaling Type" IN ["Totaling Type"::"Cost Type","Totaling Type"::"Cost Type Total"] THEN BEGIN
          SetCostTypeRowFilters(CostType,AccScheduleLine,TempColumnLayout);
          SetCostTypeColumnFilters(CostType,AccScheduleLine,TempColumnLayout);
          COPYFILTER("Cost Center Filter",CostType."Cost Center Filter");
          COPYFILTER("Cost Object Filter",CostType."Cost Object Filter");
          COPYFILTER("Cost Budget Filter",CostType."Budget Filter");
          CostType.FILTERGROUP(2);
          CostType.SETFILTER("Cost Center Filter",GetDimTotalingFilter(1,"Cost Center Totaling"));
          CostType.SETFILTER("Cost Object Filter",GetDimTotalingFilter(1,"Cost Object Totaling"));
          CostType.FILTERGROUP(8);
          CostType.SETFILTER("Cost Center Filter",GetDimTotalingFilter(1,TempColumnLayout."Cost Center Totaling"));
          CostType.SETFILTER("Cost Object Filter",GetDimTotalingFilter(1,TempColumnLayout."Cost Object Totaling"));
          CostType.FILTERGROUP(0);
          PAGE.RUN(PAGE::"Chart of Cost Types",CostType);
        END ELSE BEGIN
          COPYFILTER("Business Unit Filter",GLAcc."Business Unit Filter");
          COPYFILTER("G/L Budget Filter",GLAcc."Budget Filter");
          SetGLAccRowFilters(GLAcc,AccScheduleLine);
          SetGLAccColumnFilters(GLAcc,AccScheduleLine,TempColumnLayout);
          AccSchedName.GET("Schedule Name");

          //NC NCS-1631 > DP
          {
          IF AccSchedName."Analysis View Name" = '' THEN BEGIN
          }
          IF (AccSchedName."Analysis View Name" = '') AND (AccSchedName."G/L Corr. Analysis View Name" = '')

            //NC NCS-1631.2 > DP
            OR (("Column Ledger Entry Type" IN ["Column Ledger Entry Type"::Entries,
            "Column Ledger Entry Type"::"Budget Entries"])
            //NC NCS-1631.2 < DP
            //NC NCS-1701 > DP
            AND (AccSchedName."Analysis View Name Add." = ''))
            //NC NCS-1701 < DP
          THEN BEGIN
          //NC NCS-1631 > DP
            COPYFILTER("Dimension 1 Filter",GLAcc."Global Dimension 1 Filter");
            COPYFILTER("Dimension 2 Filter",GLAcc."Global Dimension 2 Filter");
            COPYFILTER("Business Unit Filter",GLAcc."Business Unit Filter");
            GLAcc.FILTERGROUP(2);
            GLAcc.SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,"Dimension 1 Totaling"));
            GLAcc.SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,"Dimension 2 Totaling"));
            GLAcc.FILTERGROUP(8);
            GLAcc.SETFILTER("Business Unit Filter",TempColumnLayout."Business Unit Totaling");
            GLAcc.SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"));
            GLAcc.SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"));
            GLAcc.FILTERGROUP(0);
            PAGE.RUN(PAGE::"Chart of Accounts (G/L)",GLAcc)

          //NC NCS-1631 > DP
          {
          END ELSE BEGIN
          }
          END ELSE
          //NC NCS-1701 > DP
          //NC NCS-1701.2 > DP
          //NC NCS-1701.3 > DP
          IF (AccSchedName."Analysis View Name" <> '') OR ("Column Ledger Entry Type" <> "Column Ledger Entry Type"::" ") THEN BEGIN
          //NC NCS-1701.3 < DP
          //IF (AccSchedName."Analysis View Name" <> '') OR (AccSchedName."Analysis View Name Add." <> '') THEN BEGIN
          //NC NCS-1701.2 > DP
          //NC NCS-1701 > DP
          //NC NCS-1631 < DP

            GLAcc.COPYFILTER("Date Filter",GLAccAnalysisView."Date Filter");
            GLAcc.COPYFILTER("Budget Filter",GLAccAnalysisView."Budget Filter");
            //NC PIF001 > MP
            CASE TempColumnLayout."Opposite Dimension Type" OF
              TempColumnLayout."Opposite Dimension Type"::" ":
                BEGIN
                  //NC PIF001 < MP
                  GLAcc.COPYFILTER("Business Unit Filter",GLAccAnalysisView."Business Unit Filter");
                  //NC NCS-1701 > DP
                  IF (AccSchedName."Analysis View Name Add." <> '') THEN
                    GLAccAnalysisView.SETRANGE("Analysis View Filter",AccSchedName."Analysis View Name Add.")
                  ELSE
                  //NC NCS-1701 < DP
                    GLAccAnalysisView.SETRANGE("Analysis View Filter",AccSchedName."Analysis View Name");
                  GLAccAnalysisView.CopyDimFilters(AccScheduleLine);
                  GLAccAnalysisView.FILTERGROUP(2);
                  GLAccAnalysisView.SetDimFilters(
                    GetDimTotalingFilter(1,"Dimension 1 Totaling"),GetDimTotalingFilter(2,"Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,"Dimension 3 Totaling"),GetDimTotalingFilter(4,"Dimension 4 Totaling"));
                  GLAccAnalysisView.FILTERGROUP(8);
                  GLAccAnalysisView.SetDimFilters(
                    GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,TempColumnLayout."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,TempColumnLayout."Dimension 4 Totaling"));
                  GLAccAnalysisView.SETFILTER("Business Unit Filter",TempColumnLayout."Business Unit Totaling");
                  GLAccAnalysisView.FILTERGROUP(0);
            //NC PIF001 > MP
                END;

              TempColumnLayout."Opposite Dimension Type"::"Dimension 21" :
                BEGIN
                  GLAcc.COPYFILTER("Business Unit Filter",GLAccAnalysisView."Dimension 1 Filter");
                  GLAccAnalysisView.SETRANGE("Analysis View Filter",AccSchedName."Analysis View Name");
                  BUFilter := GETFILTER("Dimension 1 Filter");
                  GLAccAnalysisView.SETFILTER("Business Unit Filter",BUFilter);
                  GLAccAnalysisView.CopyDimFilters(AccScheduleLine);
                  GLAccAnalysisView.FILTERGROUP(2);
                  GLAccAnalysisView.SetDimFilters(
                    GetDimTotalingFilter(1,"Dimension 1 Totaling"),GetDimTotalingFilter(2,"Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,"Dimension 3 Totaling"),GetDimTotalingFilter(4,"Dimension 4 Totaling"));
                  GLAccAnalysisView.FILTERGROUP(8);
                  GLAccAnalysisView.SetDimFilters(
                    GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,TempColumnLayout."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,TempColumnLayout."Dimension 4 Totaling"));
                  //GLAccAnalysisView.SETFILTER("Business Unit Filter",CurrForm.AccSchedMatrix.MatrixRec."Business Unit Totaling");
                  GLAccAnalysisView.FILTERGROUP(0);
                END;
            END;
            //NC PIF001 < MP
            CLEAR(ChartOfAccsAnalysisView);
            ChartOfAccsAnalysisView.InsertTempGLAccAnalysisViews(GLAcc);
            ChartOfAccsAnalysisView.SETTABLEVIEW(GLAccAnalysisView);
            ChartOfAccsAnalysisView.RUN;

            //NC NCS-1631 > DP
            END ELSE BEGIN
              GLCorrespondence.SETFILTER("Debit Account No.",Totaling);
              GLCorrespondence.SETFILTER("Credit Account No.","Corr. Totaling");
              GLCorrespondence.SETFILTER("Business Unit Filter","Business Unit Totaling");
              GLAcc.COPYFILTER("Date Filter",GLCorrespAnalysisView."Date Filter");
              GLAcc.COPYFILTER("Date Filter",GLCorrespondence."Date Filter");
              GLCorrespAnalysisView.SETFILTER("Analysis View Filter",AccSchedName."G/L Corr. Analysis View Name");

              COPYFILTER("Dimension 1 Filter",GLCorrespAnalysisView."Debit Dimension 1 Filter");
              COPYFILTER("Dimension 2 Filter",GLCorrespAnalysisView."Debit Dimension 2 Filter");
              COPYFILTER("Dimension 3 Filter",GLCorrespAnalysisView."Debit Dimension 3 Filter");
              COPYFILTER("Corr. Dimension 1 Filter",GLCorrespAnalysisView."Credit Dimension 1 Filter");
              COPYFILTER("Corr. Dimension 2 Filter",GLCorrespAnalysisView."Credit Dimension 2 Filter");
              COPYFILTER("Corr. Dimension 3 Filter",GLCorrespAnalysisView."Credit Dimension 3 Filter");

              GLCorrespAnalysisView.FILTERGROUP(2);
              GLCorrespAnalysisView.SETFILTER("Business Unit Filter","Business Unit Totaling");
              GLCorrespAnalysisView.SETFILTER("Debit Dimension 1 Filter",GetDimTotalingFilter(1,"Dimension 1 Totaling"));
              GLCorrespAnalysisView.SETFILTER("Debit Dimension 2 Filter",GetDimTotalingFilter(2,"Dimension 2 Totaling"));
              GLCorrespAnalysisView.SETFILTER("Debit Dimension 3 Filter",GetDimTotalingFilter(3,"Dimension 3 Totaling"));
              GLCorrespAnalysisView.SETFILTER("Credit Dimension 1 Filter",GetDimTotalingFilter(12401,"Dimension 1 Corr. Totaling"));
              GLCorrespAnalysisView.SETFILTER("Credit Dimension 2 Filter",GetDimTotalingFilter(12402,"Dimension 2 Corr. Totaling"));
              GLCorrespAnalysisView.SETFILTER("Credit Dimension 3 Filter",GetDimTotalingFilter(12403,"Dimension 3 Corr. Totaling"));
              GLCorrespAnalysisView.FILTERGROUP(8);
              GLCorrespAnalysisView.SETFILTER(
                "Debit Dimension 1 Filter",GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"));
              GLCorrespAnalysisView.SETFILTER(
                "Debit Dimension 2 Filter",GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"));
              GLCorrespAnalysisView.SETFILTER(
                "Debit Dimension 3 Filter",GetDimTotalingFilter(3,TempColumnLayout."Dimension 3 Totaling"));
              GLCorrespAnalysisView.SETFILTER(
                "Credit Dimension 1 Filter",GetDimTotalingFilter(12401,TempColumnLayout."Dimension 1 Corr. Totaling"));
              GLCorrespAnalysisView.SETFILTER(
                "Credit Dimension 2 Filter",GetDimTotalingFilter(12402,TempColumnLayout."Dimension 2 Corr. Totaling"));
              GLCorrespAnalysisView.SETFILTER(
                "Credit Dimension 3 Filter",GetDimTotalingFilter(12403,TempColumnLayout."Dimension 3 Corr. Totaling"));
              GLCorrespAnalysisView.SETFILTER("Business Unit Filter",TempColumnLayout."Business Unit Totaling");
              GLCorrespAnalysisView.FILTERGROUP(0);

              CLEAR(CorrAnalysisView);
              CorrAnalysisView.InsertTempGLCorrAnalysisViews(GLCorrespondence);
              CorrAnalysisView.SETTABLEVIEW(GLCorrespAnalysisView);
              CorrAnalysisView.RUN;
            //NC NCS-1631 < DP
            END;
          END;
        //END;
    END;

    LOCAL PROCEDURE DrillDownOnCFAccount@49(TempColumnLayout@1001 : TEMPORARY Record 334;VAR AccScheduleLine@1000 : Record 85);
    VAR
      CFAccount@1004 : Record 841;
      GLAccAnalysisView@1003 : Record 376;
      ChartOfAccsAnalysisView@1002 : Page 569;
    BEGIN
      WITH AccScheduleLine DO BEGIN
        COPYFILTER("Cash Flow Forecast Filter",CFAccount."Cash Flow Forecast Filter");

        SetCFAccRowFilter(CFAccount,AccScheduleLine);
        SetCFAccColumnFilter(CFAccount,AccScheduleLine,TempColumnLayout);
        AccSchedName.GET("Schedule Name");
        IF AccSchedName."Analysis View Name" = '' THEN BEGIN
          COPYFILTER("Dimension 1 Filter",CFAccount."Global Dimension 1 Filter");
          COPYFILTER("Dimension 2 Filter",CFAccount."Global Dimension 2 Filter");
          CFAccount.FILTERGROUP(2);
          CFAccount.SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,"Dimension 1 Totaling"));
          CFAccount.SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,"Dimension 2 Totaling"));
          CFAccount.FILTERGROUP(8);
          CFAccount.SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"));
          CFAccount.SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"));
          CFAccount.FILTERGROUP(0);
          PAGE.RUN(PAGE::"Chart of Cash Flow Accounts",CFAccount)
        END ELSE BEGIN
          CFAccount.COPYFILTER("Date Filter",GLAccAnalysisView."Date Filter");
          CFAccount.COPYFILTER("Cash Flow Forecast Filter",GLAccAnalysisView."Cash Flow Forecast Filter");
          GLAccAnalysisView.SETRANGE("Analysis View Filter",AccSchedName."Analysis View Name");
          GLAccAnalysisView.CopyDimFilters(AccScheduleLine);
          GLAccAnalysisView.FILTERGROUP(2);
          GLAccAnalysisView.SetDimFilters(
            GetDimTotalingFilter(1,"Dimension 1 Totaling"),
            GetDimTotalingFilter(2,"Dimension 2 Totaling"),
            GetDimTotalingFilter(3,"Dimension 3 Totaling"),
            GetDimTotalingFilter(4,"Dimension 4 Totaling"));
          GLAccAnalysisView.FILTERGROUP(8);
          GLAccAnalysisView.SetDimFilters(
            GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"),
            GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"),
            GetDimTotalingFilter(3,TempColumnLayout."Dimension 3 Totaling"),
            GetDimTotalingFilter(4,TempColumnLayout."Dimension 4 Totaling"));
          GLAccAnalysisView.FILTERGROUP(0);
          CLEAR(ChartOfAccsAnalysisView);
          ChartOfAccsAnalysisView.InsertTempCFAccountAnalysisVie(CFAccount);
          ChartOfAccsAnalysisView.SETTABLEVIEW(GLAccAnalysisView);
          ChartOfAccsAnalysisView.RUN;
        END;
      END;
    END;

    PROCEDURE FindPeriod@48(VAR AccScheduleLine@1004 : Record 85;SearchText@1003 : Text[3];PeriodType@1000 : 'Day,Week,Month,Quarter,Year,Accounting Period');
    VAR
      Calendar@1002 : Record 2000000007;
      PeriodFormMgt@1001 : Codeunit 359;
    BEGIN
      WITH AccScheduleLine DO BEGIN
        IF GETFILTER("Date Filter") <> '' THEN BEGIN
          Calendar.SETFILTER("Period Start",GETFILTER("Date Filter"));
          IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
            PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
          Calendar.SETRANGE("Period Start");
        END;
        PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
        SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
        IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
          SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
      END;
    END;

    PROCEDURE ValidateFormula@1470000(AccScheduleLine@1470000 : Record 85);
    VAR
      AccScheduleName@1470002 : Record 84;
      ColumnLayout@1470001 : Record 334;
      SavedAccountScheduleLine@1470005 : Record 85;
    BEGIN
      AccScheduleName.GET(AccScheduleLine."Schedule Name");
      ColumnLayout."Column Type" := ColumnLayout."Column Type"::"Net Change";
      AccScheduleLine.SETRANGE("Date Filter",TODAY);
      SavedAccountScheduleLine := AccScheduleLine;
      //NC PIF001 > MP
      {
      CalcCell(AccScheduleLine,ColumnLayout,FALSE);
      }
      CalcCell(AccScheduleLine,ColumnLayout,FALSE,FALSE,0);
      AccScheduleLine := SavedAccountScheduleLine;
    END;

    PROCEDURE GetCellValuesBuffer@1470005(VAR Buffer@1470000 : Record 342);
    BEGIN
      IF AccSchedCellValue.FINDSET THEN
        REPEAT
          Buffer := AccSchedCellValue;
          Buffer.INSERT;
        UNTIL AccSchedCellValue.NEXT = 0;
    END;

    PROCEDURE SetDateParameters@1470006(NewStartDate@1470000 : Date;NewEndDate@1470001 : Date);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
      FiscalStartDate := FindFiscalYear(EndDate);
    END;

    PROCEDURE GetPostingDateFilter@1210001(AccSchedLine2@1005 : Record 85;VAR ColumnLayout@1001 : Record 334) : Text[100];
    VAR
      FromDate@1002 : Date;
      ToDate@1003 : Date;
      FiscalStartDate2@1004 : Date;
    BEGIN
      WITH ColumnLayout DO BEGIN
        IF (FORMAT("Comparison Date Formula") <> '0') AND (FORMAT("Comparison Date Formula") <> '') THEN BEGIN
          FromDate := CALCDATE("Comparison Date Formula",StartDate);
          IF (StartDate = CALCDATE('<-CM>',StartDate)) AND
             (FromDate = CALCDATE('<-CM>',FromDate)) AND
             (EndDate = CALCDATE('<CM>',EndDate))
          THEN
            ToDate := CALCDATE('<CM>',CALCDATE("Comparison Date Formula",EndDate))
          ELSE
            ToDate := CALCDATE("Comparison Date Formula",EndDate);
          FiscalStartDate2 := FindFiscalYear(ToDate);
        END ELSE IF "Comparison Period Formula" <> '' THEN BEGIN
          AccPeriodStartEnd("Comparison Period Formula",StartDate,FromDate,ToDate);
          FiscalStartDate2 := FindFiscalYear(ToDate);
        END ELSE BEGIN
          FromDate := StartDate;
          ToDate := EndDate;
          FiscalStartDate2 := FiscalStartDate;
        END;
        CASE "Column Type" OF
          "Column Type"::"Net Change" :
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                EXIT(STRSUBSTNO('%1..%2',FromDate,ToDate));
              AccSchedLine2."Row Type"::"Beginning Balance":
                EXIT(STRSUBSTNO('<%1',FromDate));  // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                EXIT(STRSUBSTNO('..%1',ToDate));
            END;
          "Column Type"::"Balance at Date" :
            IF AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Beginning Balance" THEN
              EXIT('''''')   // Force a zero return
            ELSE
              EXIT(STRSUBSTNO('..%1',ToDate));
          "Column Type"::"Beginning Balance" :
            IF AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Balance at Date" THEN
              EXIT('''''')   // Force a zero return
            ELSE
              EXIT(STRSUBSTNO('..%1',CLOSINGDATE(FromDate-1)));
          "Column Type"::"Year to Date" :
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                EXIT(STRSUBSTNO('%1..%2',FiscalStartDate2,ToDate));
              AccSchedLine2."Row Type"::"Beginning Balance":
                EXIT(STRSUBSTNO('<%1',FiscalStartDate2));  // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                EXIT(STRSUBSTNO('..%1',ToDate));
            END;
          "Column Type"::"Rest of Fiscal Year" :
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                EXIT(STRSUBSTNO('%1..%2',CALCDATE('<+1D>',ToDate),FindEndOfFiscalYear(FiscalStartDate2)));
              AccSchedLine2."Row Type"::"Beginning Balance":
                EXIT(STRSUBSTNO('..%1',ToDate));
              AccSchedLine2."Row Type"::"Balance at Date":
                EXIT(STRSUBSTNO('..%1',FindEndOfFiscalYear(ToDate)));
            END;
          "Column Type"::"Entire Fiscal Year" :
            CASE AccSchedLine2."Row Type" OF
              AccSchedLine2."Row Type"::"Net Change":
                EXIT(STRSUBSTNO('%1..%2',FiscalStartDate2,FindEndOfFiscalYear(FiscalStartDate2)));
              AccSchedLine2."Row Type"::"Beginning Balance":
                EXIT(STRSUBSTNO('<%1',FiscalStartDate2));  // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                EXIT(STRSUBSTNO('..%1',FindEndOfFiscalYear(ToDate)));
            END;
        END;
      END;
    END;

    PROCEDURE CalcFieldError@53(VAR ErrorType@1002 : 'None,Division by Zero,Period Error,Both';RowNo@1000 : Integer;ColumnNo@1001 : Integer);
    BEGIN
      AccSchedCellValue.SETRANGE("Row No.",RowNo);
      AccSchedCellValue.SETRANGE("Column No.",ColumnNo);
      ErrorType := ErrorType::None;
      IF AccSchedCellValue.FINDFIRST THEN
        CASE TRUE OF
          AccSchedCellValue."Has Error":
            ErrorType := ErrorType::"Division by Zero";
          AccSchedCellValue."Period Error":
            ErrorType := ErrorType::"Period Error";
          AccSchedCellValue."Has Error" AND AccSchedCellValue."Period Error":
            ErrorType := ErrorType::Both;
        END;

      AccSchedCellValue.SETRANGE("Row No.");
      AccSchedCellValue.SETRANGE("Column No.");
    END;

    PROCEDURE ForceRecalculate@55(NewRecalculate@1000 : Boolean);
    BEGIN
      Recalculate := NewRecalculate;
    END;

    LOCAL PROCEDURE CalcLCYToACY@56(ColValue@1000 : Decimal) : Decimal;
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
        IF GLSetup."Additional Reporting Currency" <> '' THEN
          AddRepCurrency.GET(GLSetup."Additional Reporting Currency");
      END;
      IF GLSetup."Additional Reporting Currency" <> '' THEN
        EXIT(ROUND(ExchangeAmtAddCurrToLCY(ColValue),AddRepCurrency."Amount Rounding Precision"));
      EXIT(0);
    END;

    PROCEDURE "NCF>"@1000000000();
    BEGIN
    END;

    PROCEDURE GetBusUnitTotalingFilter@1210003(BusUnitTotaling@1210000 : Text[1024]) ResultFilter : Text[80];
    BEGIN
      IF BusUnitTotaling = '' THEN
        EXIT(BusUnitTotaling);
      ResultFilter := BusUnitTotaling;
      EXIT(ResultFilter);
    END;

    PROCEDURE CheckAnalysisView2@1101495000(CurrentSchedName@1000 : Code[10];CurrentColumnName@1001 : Code[10];TestColumnName@1002 : Boolean);
    VAR
      ColumnLayout2@1003 : Record 334;
      AnyColumnDimensions@1004 : Boolean;
    BEGIN
      //NC NCS-1631 > DP
      IF NOT AnalysisViewRead2 THEN BEGIN
        AnalysisViewRead2 := TRUE;
        IF CurrentSchedName <> AccSchedName.Name THEN BEGIN
          CheckTemplateName(CurrentSchedName);
          AccSchedName.GET(CurrentSchedName);
        END;
        IF TestColumnName THEN
          IF CurrentColumnName <> ColumnLayoutName.Name THEN BEGIN
            CheckColumnTemplateName(CurrentColumnName);
            ColumnLayoutName.GET(CurrentColumnName);
          END;
        IF (AccSchedName."G/L Corr. Analysis View Name" = '') AND (AccSchedName."Analysis View Name"='') THEN BEGIN
          IF NOT GLSetupRead THEN
            GLSetup.GET;
          GLSetupRead := TRUE;
          AnalysisView.INIT;
          AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        END ELSE
          IF (AccSchedName."G/L Corr. Analysis View Name" <> '') THEN
          GLCorrAnalysisView.GET(AccSchedName."G/L Corr. Analysis View Name");
        IF (AccSchedName."G/L Corr. Analysis View Name" <> ColumnLayoutName."G/L Corr. Analysis View Name") THEN BEGIN
          AnyColumnDimensions := FALSE;
          ColumnLayout2.SETRANGE("Column Layout Name",ColumnLayoutName.Name);
          IF ColumnLayout2.FIND('-') THEN
            REPEAT
              AnyColumnDimensions :=
                (ColumnLayout2."Dimension 1 Totaling" <> '') OR
                (ColumnLayout2."Dimension 2 Totaling" <> '') OR
                (ColumnLayout2."Dimension 3 Totaling" <> '') OR
                (ColumnLayout2."Dimension 1 Corr. Totaling" <>'') OR
                (ColumnLayout2."Dimension 2 Corr. Totaling" <>'') OR
                (ColumnLayout2."Dimension 3 Corr. Totaling" <>'');
            UNTIL AnyColumnDimensions OR (ColumnLayout2.NEXT = 0);
          IF AnyColumnDimensions THEN
            ERROR(
              Text024,
              AccSchedName.FIELDCAPTION("G/L Corr. Analysis View Name"),
              AccSchedName.TABLECAPTION,
              AccSchedName."G/L Corr. Analysis View Name",
              ColumnLayoutName.FIELDCAPTION("G/L Corr. Analysis View Name"),
              ColumnLayoutName.TABLECAPTION,
              ColumnLayoutName."G/L Corr. Analysis View Name");
        END;
      END;
      //NC NCS-1631 < DP
    END;

    BEGIN
    {
      NC NCS-1631 DP Изменены функции CalcGLAcc,CheckAnalysisView, ConvDimTotalingFilter, добавлена функция CheckAnalysisView2
      NC NCS-1631.2 DP Изменена функция CalcGLAcc
      NC NCS-1701 USE Изменена функция CalcGLAcc
      ---------------------------------------------
      NC NOS-26 SPA Изменения, связанные с различиями между версиями
    }
    END.
  }
}

