OBJECT Table 274 Bank Acc. Reconciliation Line
{
  OBJECT-PROPERTIES
  {
    Date=22.05.17;
    Time=11:53:26;
    Modified=Yes;
    Version List=NAVW110.00.00.15601,NAVRU10.00.00.15601,NOS-26;
  }
  PROPERTIES
  {
    Permissions=TableData 1221=rimd;
    OnInsert=BEGIN
               BankAccRecon.GET("Statement Type","Bank Account No.","Statement No.");
               "Applied Entries" := 0;
               VALIDATE("Applied Amount",0);
             END;

    OnModify=BEGIN
               IF xRec."Statement Amount" <> "Statement Amount" THEN
                 RemoveApplication(Type);
             END;

    OnDelete=BEGIN
               RemoveApplication(Type);
               ClearDataExchEntries;
               RemoveAppliedPaymentEntries;
               DeletePaymentMatchingDetails;
               UpdateParentLineStatementAmount;
               IF FIND THEN;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Bank Acc. Reconciliation Line;
               RUS=Строка выверки банковского счета];
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=[ENU=Bank Account No.;
                                                              RUS=Код банк. счета] }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE (Bank Account No.=FIELD(Bank Account No.));
                                                   CaptionML=[ENU=Statement No.;
                                                              RUS=Номер выписки] }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=[ENU=Statement Line No.;
                                                              RUS=Номер строки выписки] }
    { 4   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 5   ;   ;Transaction Date    ;Date          ;CaptionML=[ENU=Transaction Date;
                                                              RUS=Дата транзакции] }
    { 6   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 7   ;   ;Statement Amount    ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   CaptionML=[ENU=Statement Amount;
                                                              RUS=Сумма по выписке];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 8   ;   ;Difference          ;Decimal       ;OnValidate=BEGIN
                                                                "Statement Amount" := "Applied Amount" + Difference;
                                                              END;

                                                   CaptionML=[ENU=Difference;
                                                              RUS=Разница];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 9   ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=[ENU=Applied Amount;
                                                              RUS=Примененная сумма];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (Type <> xRec.Type) AND
                                                                   ("Applied Entries" <> 0)
                                                                THEN
                                                                  IF CONFIRM(Text001,FALSE) THEN BEGIN
                                                                    RemoveApplication(xRec.Type);
                                                                    VALIDATE("Applied Amount",0);
                                                                    "Applied Entries" := 0;
                                                                    "Check No." := '';
                                                                  END ELSE
                                                                    ERROR(Text002);
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              RUS=Тип];
                                                   OptionCaptionML=[ENU=Bank Account Ledger Entry,Check Ledger Entry,Difference;
                                                                    RUS=Книга банковских операций,Книга платежных документов,Разница];
                                                   OptionString=Bank Account Ledger Entry,Check Ledger Entry,Difference }
    { 11  ;   ;Applied Entries     ;Integer       ;OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=[ENU=Applied Entries;
                                                              RUS=Примененные операции];
                                                   Editable=No }
    { 12  ;   ;Value Date          ;Date          ;CaptionML=[ENU=Value Date;
                                                              RUS=Дата стоимости] }
    { 13  ;   ;Ready for Application;Boolean      ;CaptionML=[ENU=Ready for Application;
                                                              RUS=Готово для применения] }
    { 14  ;   ;Check No.           ;Code20        ;CaptionML=[ENU=Check No.;
                                                              RUS=Номер платежного документа] }
    { 15  ;   ;Related-Party Name  ;Text250       ;CaptionML=[ENU=Related-Party Name;
                                                              RUS=Наименование связанной стороны] }
    { 16  ;   ;Additional Transaction Info;Text100;CaptionML=[ENU=Additional Transaction Info;
                                                              RUS=Дополнительная информация о транзакции] }
    { 17  ;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch. Entry No.;
                                                              RUS=Номер операции обмена данными];
                                                   Editable=No }
    { 18  ;   ;Data Exch. Line No. ;Integer       ;CaptionML=[ENU=Data Exch. Line No.;
                                                              RUS=Номер строки обмена данными];
                                                   Editable=No }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=[ENU=Statement Type;
                                                              RUS=Тип выписки];
                                                   OptionCaptionML=[ENU=Bank Reconciliation,Payment Application;
                                                                    RUS=Банковская выверка,Применение платежа];
                                                   OptionString=Bank Reconciliation,Payment Application }
    { 21  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Applied Amount",0);
                                                                IF "Account Type" <> xRec."Account Type" THEN
                                                                  VALIDATE("Account No.",'');
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              RUS=Тип счета];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    RUS=Счет ГК,Клиент,Поставщик,Банковский счет,Основное средство,МФ Партнер];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 22  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                           Blocked=CONST(No))
                                                                                                                           ELSE IF (Account Type=CONST(Customer)) Customer
                                                                                                                           ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                                                                           ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                           ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                           ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Applied Amount",0);
                                                                CreateDim;
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              RUS=Номер счета] }
    { 23  ;   ;Transaction Text    ;Text140       ;OnValidate=BEGIN
                                                                IF ("Statement Type" = "Statement Type"::"Payment Application") OR (Description = '') THEN
                                                                  Description := COPYSTR("Transaction Text",1,MAXSTRLEN(Description));
                                                              END;

                                                   CaptionML=[ENU=Transaction Text;
                                                              RUS=Текст транзакции] }
    { 24  ;   ;Related-Party Bank Acc. No.;Text100;CaptionML=[ENU=Related-Party Bank Acc. No.;
                                                              RUS=Номер расч. счета связанной стороны] }
    { 25  ;   ;Related-Party Address;Text100      ;CaptionML=[ENU=Related-Party Address;
                                                              RUS=Адрес связанной стороны] }
    { 26  ;   ;Related-Party City  ;Text50        ;CaptionML=[ENU=Related-Party City;
                                                              RUS=Город связанной стороны] }
    { 31  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              RUS=Код ярлыка измерения 1];
                                                   CaptionClass='1,2,1' }
    { 32  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              RUS=Код ярлыка измерения 2];
                                                   CaptionClass='1,2,2' }
    { 50  ;   ;Match Confidence    ;Option        ;FieldClass=FlowField;
                                                   InitValue=None;
                                                   CalcFormula=Max("Applied Payment Entry"."Match Confidence" WHERE (Statement Type=FIELD(Statement Type),
                                                                                                                     Bank Account No.=FIELD(Bank Account No.),
                                                                                                                     Statement No.=FIELD(Statement No.),
                                                                                                                     Statement Line No.=FIELD(Statement Line No.)));
                                                   CaptionML=[ENU=Match Confidence;
                                                              RUS=Достоверность совпадения];
                                                   OptionCaptionML=[ENU=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                                    RUS=Нет,Низкий,Средний,Высокий,Высокий - сопоставление текста со счетами,Вручную,Принят];
                                                   OptionString=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                   Editable=No }
    { 51  ;   ;Match Quality       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Applied Payment Entry".Quality WHERE (Bank Account No.=FIELD(Bank Account No.),
                                                                                                          Statement No.=FIELD(Statement No.),
                                                                                                          Statement Line No.=FIELD(Statement Line No.),
                                                                                                          Statement Type=FIELD(Statement Type)));
                                                   CaptionML=[ENU=Match Quality;
                                                              RUS=Качество совпадения];
                                                   Editable=No }
    { 60  ;   ;Sorting Order       ;Integer       ;CaptionML=[ENU=Sorting Order;
                                                              RUS=Порядок сортировки] }
    { 61  ;   ;Parent Line No.     ;Integer       ;CaptionML=[ENU=Parent Line No.;
                                                              RUS=Номер родительской строки];
                                                   Editable=No }
    { 70  ;   ;Transaction ID      ;Text50        ;CaptionML=[ENU=Transaction ID;
                                                              RUS=Код транзакции] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              RUS=Код набора измерений];
                                                   Editable=No }
    { 12400;  ;Operation Date      ;Date          ;CaptionML=[ENU=Operation Date;
                                                              RUS=Дата операции] }
    { 12401;  ;Sender Account No.  ;Code20        ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                                  GetPaymentDirection;
                                                                  GetContractor;
                                                              END;

                                                   CaptionML=[ENU=Sender Account No.;
                                                              RUS=Номер счета отправителя] }
    { 12402;  ;Sender VAT Reg. No. ;Text20        ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                                  GetPaymentDirection;
                                                                  GetContractor;
                                                              END;

                                                   CaptionML=[ENU=Sender VAT Reg. No.;
                                                              RUS=ИНН отправителя] }
    { 12403;  ;Sender Party Name   ;Text150       ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Sender Party Name;
                                                              RUS=Наименование отправителя] }
    { 12404;  ;Sender BIC          ;Code9         ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Sender BIC;
                                                              RUS=БИК отправителя] }
    { 12405;  ;Sender Bank Name    ;Text150       ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Sender Bank Name;
                                                              RUS=Название банка отправителя] }
    { 12406;  ;Sender Bank City    ;Text50        ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Sender Bank City;
                                                              RUS=Город отправителя] }
    { 12407;  ;Sender Transit No.  ;Code20        ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Sender Transit No.;
                                                              RUS=Номер транзитного счета отправителя] }
    { 12408;  ;Sender KPP          ;Code20        ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                                  GetContractor;
                                                              END;

                                                   CaptionML=[ENU=Sender KPP;
                                                              RUS=КПП отправителя] }
    { 12409;  ;Recipient Account No.;Code20       ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                                  GetPaymentDirection;
                                                                  GetContractor;
                                                              END;

                                                   CaptionML=[ENU=Recipient Account No.;
                                                              RUS=Номер счета получателя] }
    { 12410;  ;Recipient VAT Reg. No.;Text20      ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                                  GetPaymentDirection;
                                                                  GetContractor;
                                                              END;

                                                   CaptionML=[ENU=Recipient VAT Reg. No.;
                                                              RUS=ИНН получателя] }
    { 12411;  ;Recipient Name      ;Text150       ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Recipient Name;
                                                              RUS=Имя получателя] }
    { 12412;  ;Recipient BIC       ;Code9         ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Recipient BIC;
                                                              RUS=БИК получателя] }
    { 12413;  ;Recipient Bank Name ;Text150       ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Recipient Bank Name;
                                                              RUS=Название банка получателя] }
    { 12414;  ;Recipient Bank City ;Text50        ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Recipient Bank City;
                                                              RUS=Город банка получателя] }
    { 12415;  ;Recipient Transit No.;Code20       ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Recipient Transit No.;
                                                              RUS=Номер транзитного счета получателя] }
    { 12416;  ;Recipient KPP       ;Code20        ;OnValidate=BEGIN
                                                                  CheckLineStatus;
                                                                  GetContractor;
                                                              END;

                                                   CaptionML=[ENU=Recipient KPP;
                                                              RUS=КПП получателя] }
    { 12417;  ;Status Parameter    ;Option        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Status Parameter;
                                                              RUS=Параметр статуса];
                                                   OptionCaptionML=[ENU=" ,01-taxpayer (charges payer),02-tax agent,03-collector of taxes and charges,04-tax authority,05-service of officers of justice of Department of Justice of Russian Federation,06-participant of foreign-economic activity,07-tax authority,08-payer of other mandatory payments";
                                                                    RUS=" ,01-налогоплательщик (плательщик сборов),02-налоговый агент,03-сборщик налогов и сборов,04-налоговый орган,05-Федеральная служба судебных приставов,06-участник внешнеэкономической деятельности,07-таможенный орган,08-плательщик иных обязательных платежей"];
                                                   OptionString=[ ,01,02,03,04,05,06,07,08] }
    { 12418;  ;KBK                 ;Code20        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=KBK;
                                                              RUS=КБК] }
    { 12419;  ;OKATO               ;Code11        ;TableRelation=OKATO;
                                                   OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=OKATO;
                                                              RUS=ОКАТО] }
    { 12420;  ;Payment Reason Code ;Option        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Payment Reason Code;
                                                              RUS=Код основания платежа];
                                                   OptionCaptionML=[ENU=" ,0,TP-payments of current period,ZD-voluntary offset of debt for the pass tax period,TR-offset of debt by demand of tax authorities about tax payments,RS-offset of installment debt,OT-offset of deferred debt,VU-offset of deferred debt in connection with implementation of external management,PR-offset of debt suspended for penalty,AP-offset of debt via audit act,AR-offset of debt via executive act,BF,RT";
                                                                    RUS=" ,0,ТП-платежи текущего периода,ЗД-добровольное погашение задолженности по истекшим налоговым периодам,ТР-погашение задолженности по требованию налогового органа по уплате налога,РС-погашение очередного платежа рассроченной задолженности,ОТ-погашение отсроченной задолженности,ВУ-погашение отсроченной задолженности в связи с внедрением внешнего управления,ПР-погашение подвешенной задолженности по штрафу,АП-погашение задолженности через акт аудита,АР-погашение задолженности через исполнительный акт,БФ,РТ"];
                                                   OptionString=[ ,0,TP,ZD,TR,RS,OT,VU,PR,AP,AR,BF,RT] }
    { 12421;  ;Tax Period          ;Code10        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Tax Period;
                                                              RUS=Налоговый период] }
    { 12422;  ;Period Code         ;Option        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Period Code;
                                                              RUS=Код периода];
                                                   OptionCaptionML=[ENU=" ,0,D1-payment for the first decade of month,D2-payment for the second decade of month,D3-payment for the third decade of month,MH-monthly payments,QT-quarter payment,HY-half-year payments,YR-year payments";
                                                                    RUS=" ,0,Д1-платеж за первую декаду месяца,Д2-платеж за вторую декаду месяца,Д3-платеж за третью декаду месяца,МС-месячный платеж,КВ-квартальный платеж,ПЛ-полугодовой платеж,ГД-годовой платеж"];
                                                   OptionString=[ ,0,D1,D2,D3,MH,QT,HY,YR] }
    { 12423;  ;Reason Document No. ;Code15        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Reason Document No.;
                                                              RUS=Номер документа-основания] }
    { 12424;  ;Reason Document Date;Date          ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Reason Document Date;
                                                              RUS=Дата документа-основания] }
    { 12425;  ;Reason Document Type;Option        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Reason Document Type;
                                                              RUS=Тип документа-основания];
                                                   OptionCaptionML=[ENU=" ,TR-Number of requirement about taxes payment from TA,RS-Number of decision about installment,OT-Number of decision about deferral,VU-Number of act of materials in court,PR-Number of decision about suspension of penalty,AP-Number of control act,AR-number of executive document";
                                                                    RUS=" ,ТР - номер требования об уплате налогов,РС - номер решения о рассрочке,ОТ - номер решения об отсрочке,ВУ - номер дела или материала дела в суде,ПР - номер решения о приостановлении взыскания,АП - номер акта проверки,АР - номер исполнительного документа"];
                                                   OptionString=[ ,TR,RS,OT,VU,PR,AP,AR] }
    { 12426;  ;Pay Type            ;Option        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Pay Type;
                                                              RUS=Тип оплаты];
                                                   OptionCaptionML=[ENU=" ,0,NS-discharge of tax or charge,AV-advance payment or prepayment,PE-penalty fees payment,PC-interests payment,SA-tax sanctions according Tax Code RF,ASH-administrative penalties,ISH-other penalties,PL,GR,VZ";
                                                                    RUS=" ,0,НС-уплата налога или сбора,АВ-уплата аванса или предоплата,ПЕ-уплата пени,ПЦ-уплата процентов,СА-налоговые санкции в соответствии с НК РФ,АШ-административные штрафы,ИШ-иные штрафы,ПЛ,ГП,ВЗ"];
                                                   OptionString=[ ,0,NS,AV,PE,PC,SA,ASH,ISH,PL,GR,VZ] }
    { 12427;  ;Payment Method      ;Option        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Payment Method;
                                                              RUS=Способ платежа];
                                                   OptionCaptionML=[ENU=" ,Mail,Telegraph,Through Moscow,Clearing,Electronic";
                                                                    RUS=" ,Почтой,Телеграфом,Через Москву,Клиринг,Электронный"];
                                                   OptionString=[ ,Mail,Telegraph,Through Moscow,Clearing,Electronic] }
    { 12428;  ;Payment Variant     ;Code10        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Payment Variant;
                                                              RUS=Вариант оплаты] }
    { 12429;  ;Payment Date        ;Date          ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Payment Date;
                                                              RUS=Дата платежа] }
    { 12430;  ;Payment Subsequence ;Code10        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Payment Subsequence;
                                                              RUS=Очередность платежа] }
    { 12431;  ;Line Status         ;Option        ;CaptionML=[ENU=Line Status;
                                                              RUS=Статус строки];
                                                   OptionCaptionML=[ENU=" ,Imported,Contractor Undefined,Contractor Confirmed,Payment Order Found,Transferred to Gen. Journal,Posted";
                                                                    RUS=" ,Импортировано,Контрагент не определен,Контрагент подтвержден,Платежное поручение найдено,Перенесена в фин. журнал,Учтена"];
                                                   OptionString=[ ,Imported,Contractor Undefined,Contractor Confirmed,Payment Order Found,Transferred to Gen. Journal,Posted];
                                                   Editable=No }
    { 12432;  ;Payment Direction   ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Entity No.");
                                                              END;

                                                   CaptionML=[ENU=Payment Direction;
                                                              RUS=Направление платежа];
                                                   OptionCaptionML=[ENU=" ,Incoming,Outgoing";
                                                                    RUS=" ,Входящий,Исходящий"];
                                                   OptionString=[ ,Incoming,Outgoing];
                                                   Editable=No }
    { 12433;  ;Entity Type         ;Option        ;OnValidate=BEGIN
                                                                CheckLineStatus;
                                                                IF "Entity Type" <> xRec."Entity Type" THEN BEGIN
                                                                  VALIDATE("Entity No.",'');
                                                                  IF "Entity Type" = "Entity Type"::Customer THEN BEGIN
                                                                    IF "Payment Direction" = "Payment Direction"::Incoming THEN
                                                                      "Document Type" := "Document Type"::Payment;
                                                                    IF "Payment Direction" = "Payment Direction"::Outgoing THEN
                                                                      "Document Type" := "Document Type"::Refund;
                                                                  END;
                                                                  IF "Entity Type" = "Entity Type"::Vendor THEN BEGIN
                                                                    IF "Payment Direction" = "Payment Direction"::Incoming THEN
                                                                      "Document Type" := "Document Type"::Refund;
                                                                    IF "Payment Direction" = "Payment Direction"::Outgoing THEN
                                                                      "Document Type" := "Document Type"::Payment;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Entity Type;
                                                              RUS=Тип объекта];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor;
                                                                    RUS=Счет ГК,Клиент,Поставщик];
                                                   OptionString=G/L Account,Customer,Vendor }
    { 12434;  ;Entity No.          ;Code20        ;TableRelation=IF (Entity Type=CONST(Customer)) Customer.No.
                                                                 ELSE IF (Entity Type=CONST(Vendor)) Vendor.No.
                                                                 ELSE IF (Entity Type=CONST(G/L Account)) "G/L Account".No.;
                                                   OnValidate=VAR
                                                                Vend@1210004 : Record 23;
                                                                Cust@1210005 : Record 18;
                                                                VendBankAcc@1210006 : Record 288;
                                                                CustBankAcc@1210007 : Record 287;
                                                                BankAccountDetail@1210008 : Record 12436;
                                                                BankAccountNo@1210002 : Code[20];
                                                                VATRegNo@1210001 : Text[20];
                                                                KPPCode@1210000 : Code[20];
                                                                ConfirmedEntityNo@1210003 : Boolean;
                                                              BEGIN
                                                                CheckLineStatus;
                                                                IF NOT ConfirmedEntityNo THEN
                                                                  IF "Entity No." <> '' THEN BEGIN
                                                                    BankAccountNo := '';
                                                                    VATRegNo := '';
                                                                    KPPCode := '';

                                                                    CASE "Payment Direction" OF
                                                                      "Payment Direction"::Outgoing:
                                                                        BEGIN
                                                                          BankAccountNo := "Recipient Account No.";
                                                                          VATRegNo := "Recipient VAT Reg. No.";
                                                                          KPPCode := "Recipient KPP";
                                                                        END;
                                                                      "Payment Direction"::Incoming:
                                                                        BEGIN
                                                                          BankAccountNo := "Sender Account No.";
                                                                          VATRegNo := "Sender VAT Reg. No.";
                                                                          KPPCode := "Sender KPP";
                                                                        END;
                                                                    END;

                                                                    CASE "Entity Type" OF
                                                                      "Entity Type"::Vendor:
                                                                        BEGIN
                                                                          Vend.RESET;
                                                                          Vend.SETRANGE("No.","Entity No.");
                                                                          IF VATRegNo <> '' THEN
                                                                            Vend.SETRANGE("VAT Registration No.",VATRegNo);
                                                                          IF KPPCode <> '' THEN
                                                                            Vend.SETRANGE("KPP Code",KPPCode);
                                                                          IF Vend.FINDFIRST THEN BEGIN
                                                                            VendBankAcc.SETRANGE("Vendor No.",Vend."No.");
                                                                            VendBankAcc.SETRANGE("Bank Account No.",BankAccountNo);
                                                                            IF VendBankAcc.FINDLAST THEN BEGIN
                                                                              "Line Status" := "Line Status"::"Contractor Confirmed";
                                                                            END ELSE
                                                                              IncorrectContractor;
                                                                          END ELSE
                                                                            IncorrectContractor;
                                                                        END;
                                                                      "Entity Type"::Customer:
                                                                        BEGIN
                                                                          Cust.RESET;
                                                                          Cust.SETRANGE("No.","Entity No.");
                                                                          IF VATRegNo <> '' THEN
                                                                            Cust.SETRANGE("VAT Registration No.",VATRegNo);
                                                                          IF KPPCode <> '' THEN
                                                                            Cust.SETRANGE("KPP Code",KPPCode);
                                                                          IF Cust.FINDFIRST THEN BEGIN
                                                                            CustBankAcc.SETRANGE("Customer No.",Cust."No.");
                                                                            CustBankAcc.SETRANGE("Bank Account No.",BankAccountNo);
                                                                            IF CustBankAcc.FINDLAST THEN BEGIN
                                                                              "Line Status" := "Line Status"::"Contractor Confirmed";
                                                                            END ELSE
                                                                              IncorrectContractor;
                                                                          END ELSE
                                                                            IncorrectContractor;
                                                                        END;
                                                                      "Entity Type"::"G/L Account":
                                                                        BEGIN
                                                                          BankAccountDetail.SETRANGE("G/L Account","Entity No.");
                                                                          BankAccountDetail.SETRANGE("Bank Account No.",BankAccountNo);
                                                                          IF VATRegNo <> '' THEN
                                                                            BankAccountDetail.SETRANGE("VAT Registration No.",VATRegNo);
                                                                          IF KPPCode <> '' THEN
                                                                            BankAccountDetail.SETRANGE("KPP Code",KPPCode);
                                                                          IF BankAccountDetail.FINDFIRST THEN BEGIN
                                                                            "Document Type" := BankAccountDetail."Document Type";
                                                                            "Line Status" := "Line Status"::"Contractor Confirmed";
                                                                          END ELSE
                                                                            IncorrectContractor;
                                                                        END;
                                                                    END;
                                                                  END ELSE
                                                                    IF "Line Status" = "Line Status"::"Contractor Confirmed" THEN BEGIN
                                                                      "Line Status" := "Line Status"::Imported;
                                                                    END;

                                                                IF "Entity No." <> xRec."Entity No." THEN
                                                                  CalculateDebitCreditAmount;
                                                              END;

                                                   CaptionML=[ENU=Entity No.;
                                                              RUS=Код объекта] }
    { 12435;  ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Refund";
                                                                    RUS=" ,Оплата,Возмещение"];
                                                   OptionString=[ ,Payment,Refund];
                                                   Editable=No }
    { 12436;  ;Debit Amount        ;Decimal       ;CaptionML=[ENU=Debit Amount;
                                                              RUS=Сумма по дебету] }
    { 12437;  ;Credit Amount       ;Decimal       ;CaptionML=[ENU=Credit Amount;
                                                              RUS=Сумма по кредиту] }
    { 12438;  ;Payment Code        ;Text20        ;CaptionML=[ENU=Payment Code;
                                                              RUS=Код платежа] }
  }
  KEYS
  {
    {    ;Statement Type,Bank Account No.,Statement No.,Statement Line No.;
                                                   SumIndexFields=Statement Amount,Difference;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.;RUS=Нельзя переименовать %1.';
      Text001@1001 : TextConst 'ENU=Delete application?;RUS=Удалить применение?';
      Text002@1002 : TextConst 'ENU=Update canceled.;RUS=Обновление отменено.';
      BankAccLedgEntry@1003 : Record 271;
      CheckLedgEntry@1004 : Record 272;
      BankAccRecon@1005 : Record 273;
      BankAccSetStmtNo@1006 : Codeunit 375;
      CheckSetStmtNo@1007 : Codeunit 376;
      DimMgt@1009 : Codeunit 408;
      AmountWithinToleranceRangeTok@1011 : TextConst '@@@={Locked};ENU=">=%1&<=%2";RUS=">=%1&<=%2"';
      AmountOustideToleranceRangeTok@1012 : TextConst '@@@={Locked};ENU=<%1|>%2;RUS=<%1|>%2';
      TransactionAmountMustNotBeZeroErr@1008 : TextConst 'ENU=The Transaction Amount field must have a value that is not 0.;RUS=Значение в поле "Сумма транзакции" должно быть не равно 0.';
      CreditTheAccountQst@1013 : TextConst '@@@=%1 is the account name, %2 is the amount that is not applied (there is filed on the page named Remaining Amount To Apply);ENU=The remaining amount to apply is %2.\\Do you want to create a new payment application line that will debit or credit %1 with the remaining amount when you post the payment?;RUS=Остаток суммы к применению равен %2.\\Создать новую строку применения платежа, которая будет дебетовать или кредитовать %1 на остаток суммы при учете платежа?';
      ExcessiveAmountErr@1010 : TextConst '@@@=%1 is the amount that is not applied (there is filed on the page named Remaining Amount To Apply);ENU=The remaining amount to apply is %1.;RUS=Остаток суммы к применению равен %1.';
      ImportPostedTransactionsQst@1014 : TextConst 'ENU=The bank statement contains payments that are already applied, but the related bank account ledger entries are not closed.\\Do you want to include these payments in the import?;RUS=Банковская выписка содержит уже примененные платежи, однако связанные операции книги операций по банку/кассе не закрыты.\\Включить эти платежи в импорт?';

    PROCEDURE DisplayApplication@2();
    VAR
      PaymentApplication@1000 : Page 1292;
    BEGIN
      CASE "Statement Type" OF
        "Statement Type"::"Bank Reconciliation":
          CASE Type OF
            Type::"Bank Account Ledger Entry":
              BEGIN
                BankAccLedgEntry.RESET;
                BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
                BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
                BankAccLedgEntry.SETRANGE(Open,TRUE);
                BankAccLedgEntry.SETRANGE(
                  "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
                BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
                BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
                PAGE.RUN(0,BankAccLedgEntry);
              END;
            Type::"Check Ledger Entry":
              BEGIN
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
                CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
                CheckLedgEntry.SETRANGE(Open,TRUE);
                CheckLedgEntry.SETRANGE(
                  "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
                CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
                CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
                PAGE.RUN(0,CheckLedgEntry);
              END;
          END;
        "Statement Type"::"Payment Application":
          BEGIN
            IF "Statement Amount" = 0 THEN
              ERROR(TransactionAmountMustNotBeZeroErr);
            PaymentApplication.SetBankAccReconcLine(Rec);
            PaymentApplication.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE GetCurrencyCode@3() : Code[10];
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      IF "Bank Account No." = BankAcc."No." THEN
        EXIT(BankAcc."Currency Code");

      IF BankAcc.GET("Bank Account No.") THEN
        EXIT(BankAcc."Currency Code");

      EXIT('');
    END;

    PROCEDURE GetStyle@35() : Text;
    BEGIN
      IF "Applied Entries" <> 0 THEN
        EXIT('Favorable');

      EXIT('');
    END;

    PROCEDURE ClearDataExchEntries@5();
    VAR
      DataExchField@1000 : Record 1221;
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      DataExchField.DeleteRelatedRecords("Data Exch. Entry No.","Data Exch. Line No.");

      BankAccReconciliationLine.SETRANGE("Statement Type","Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.","Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.","Statement No.");
      BankAccReconciliationLine.SETRANGE("Data Exch. Entry No.","Data Exch. Entry No.");
      BankAccReconciliationLine.SETFILTER("Statement Line No.",'<>%1',"Statement Line No.");
      IF BankAccReconciliationLine.ISEMPTY THEN
        DataExchField.DeleteRelatedRecords("Data Exch. Entry No.",0);
    END;

    LOCAL PROCEDURE GetContractor@12100017() : Boolean;
    VAR
      VendBankAcc@1210007 : Record 288;
      Vend@1210008 : Record 23;
      CustBankAcc@1210009 : Record 287;
      Cust@1210010 : Record 18;
      BankAccountDetail@1210011 : Record 12436;
      VendorFound@1210002 : Boolean;
      CustomerFound@1210003 : Boolean;
      GLAccountFound@1210004 : Boolean;
      BankAccountNo@1210005 : Code[20];
      VATRegNo@1210001 : Text[20];
      KPPCode@1210000 : Code[20];
      ConfirmedEntityNo@1210006 : Boolean;
    BEGIN
      ConfirmedEntityNo := FALSE;

      BankAccountNo := '';
      VATRegNo := '';
      KPPCode := '';
      VendorFound := FALSE;
      CustomerFound := FALSE;
      GLAccountFound := FALSE;

      CASE "Payment Direction" OF
        "Payment Direction"::Outgoing:
          BEGIN
            BankAccountNo := "Recipient Account No.";
            VATRegNo := "Recipient VAT Reg. No.";
            KPPCode := "Recipient KPP";
          END;
        "Payment Direction"::Incoming:
          BEGIN
            BankAccountNo := "Sender Account No.";
            VATRegNo := "Sender VAT Reg. No.";
            KPPCode := "Sender KPP";
          END;
      END;

      IF "Payment Direction" <> "Payment Direction"::" " THEN BEGIN
        VendBankAcc.RESET;
        VendBankAcc.SETCURRENTKEY("Bank Account No.");
        VendBankAcc.SETRANGE("Bank Account No.",BankAccountNo);
        IF VendBankAcc.FINDSET THEN
          REPEAT
            Vend.RESET;
            Vend.SETRANGE("No.",VendBankAcc."Vendor No.");
            IF VATRegNo <> '' THEN
              Vend.SETRANGE("VAT Registration No.",VATRegNo);
            IF KPPCode <> '' THEN
              Vend.SETRANGE("KPP Code",KPPCode);
            VendorFound := Vend.FINDFIRST;
          UNTIL (VendBankAcc.NEXT = 0) OR VendorFound;

        CustBankAcc.RESET;
        CustBankAcc.SETCURRENTKEY("Bank Account No.");
        CustBankAcc.SETRANGE("Bank Account No.",BankAccountNo);
        IF CustBankAcc.FINDSET THEN
          REPEAT
            Cust.RESET;
            Cust.SETRANGE("No.",CustBankAcc."Customer No.");
            IF VATRegNo <> '' THEN
              Cust.SETRANGE("VAT Registration No.",VATRegNo);
            IF KPPCode <> '' THEN
              Cust.SETRANGE("KPP Code",KPPCode);
            CustomerFound := Cust.FINDFIRST;
          UNTIL (CustBankAcc.NEXT = 0) OR CustomerFound;

        BankAccountDetail.RESET;
        BankAccountDetail.SETRANGE("Bank Account No.",BankAccountNo);
        IF VATRegNo <> '' THEN
          BankAccountDetail.SETRANGE("VAT Registration No.",VATRegNo);
        IF KPPCode <> '' THEN
          BankAccountDetail.SETRANGE("KPP Code",KPPCode);
        GLAccountFound := BankAccountDetail.FINDFIRST;
      END;

      IF (VendorFound AND CustomerFound) OR (VendorFound AND GLAccountFound) OR (GLAccountFound AND CustomerFound) THEN BEGIN
        VALIDATE("Entity No.",'');
        "Line Status" := "Line Status"::"Contractor Undefined";
        "Entity Type" := "Entity Type"::"G/L Account";
        EXIT(FALSE);
      END;

      IF VendorFound THEN BEGIN
        ConfirmedEntityNo := TRUE;
        "Entity Type" := "Entity Type"::Vendor;
        VALIDATE("Entity No.",Vend."No.");
        "Line Status" := "Line Status"::"Contractor Confirmed";
        IF "Payment Direction" = "Payment Direction"::Outgoing THEN
          "Document Type" := "Document Type"::Payment
        ELSE
          "Document Type" := "Document Type"::Refund;
        EXIT(TRUE);
      END;

      IF CustomerFound THEN BEGIN
        ConfirmedEntityNo := TRUE;
        "Entity Type" := "Entity Type"::Customer;
        VALIDATE("Entity No.",Cust."No.");
        "Line Status" := "Line Status"::"Contractor Confirmed";
        IF "Payment Direction" = "Payment Direction"::Incoming THEN
          "Document Type" := "Document Type"::Payment
        ELSE
          "Document Type" := "Document Type"::Refund;
        EXIT(TRUE);
      END;

      IF GLAccountFound THEN BEGIN
        ConfirmedEntityNo := TRUE;
        "Entity Type" := "Entity Type"::"G/L Account";
        VALIDATE("Entity No.",BankAccountDetail."G/L Account");
        "Line Status" := "Line Status"::"Contractor Confirmed";
        "Document Type" := BankAccountDetail."Document Type";
        EXIT(TRUE);
      END;

      "Line Status" := "Line Status"::Imported;
      "Entity Type" := "Entity Type"::"G/L Account";
      VALIDATE("Entity No.",'');
    END;

    LOCAL PROCEDURE IncorrectContractor@1210010();
    BEGIN
      "Line Status" := "Line Status"::Imported;
      "Entity Type" := 0;
      "Entity No." := '';
      "Document Type" := "Document Type"::" ";
    END;

    PROCEDURE CalculateDebitCreditAmount@1210000();
    BEGIN
      IF ("Payment Direction" <> "Payment Direction"::" ") AND ("Entity No." <> '') THEN BEGIN
        IF "Payment Direction" = "Payment Direction"::Outgoing THEN BEGIN
          IF ("Document Type" = "Document Type"::Refund) AND ("Entity Type" = "Entity Type"::"G/L Account") THEN BEGIN
            VALIDATE("Debit Amount","Statement Amount");
            VALIDATE("Credit Amount",0);
          END ELSE BEGIN
            VALIDATE("Debit Amount",0);
            VALIDATE("Credit Amount","Statement Amount");
          END;
        END ELSE BEGIN
          IF ("Document Type" = "Document Type"::Refund) AND ("Entity Type" = "Entity Type"::"G/L Account") THEN BEGIN
            VALIDATE("Debit Amount",0);
            VALIDATE("Credit Amount","Statement Amount");
          END ELSE BEGIN
            VALIDATE("Debit Amount","Statement Amount");
            VALIDATE("Credit Amount",0);
          END;
        END;
      END ELSE BEGIN
        VALIDATE("Debit Amount",0);
        VALIDATE("Credit Amount",0);
      END;
    END;

    PROCEDURE GetPaymentDirection@1210002();
    VAR
      CompanyInfo@1210000 : Record 79;
      BankAcc@1210001 : Record 270;
    BEGIN
      CompanyInfo.GET;
      BankAcc.GET("Bank Account No.");
      IF ("Sender VAT Reg. No." = CompanyInfo."VAT Registration No.") AND
         ("Sender Account No." = BankAcc."Bank Account No.")
      THEN
        "Payment Direction" := "Payment Direction"::Outgoing
      ELSE
        IF ("Recipient VAT Reg. No." = CompanyInfo."VAT Registration No.") AND
           ("Recipient Account No." = BankAcc."Bank Account No.")
        THEN
          "Payment Direction" := "Payment Direction"::Incoming
        ELSE
          "Payment Direction" := "Payment Direction"::" ";
    END;

    PROCEDURE CheckLineStatus@1210003();
    BEGIN
      IF "Line Status" IN ["Line Status"::"Payment Order Found".."Line Status"::Posted] THEN
        FIELDERROR("Line Status");
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.SetObjectFrom(Rec); // NC NOS-26 SPA
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Statement No.","Statement Line No."));
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE CreateDim@26();
    VAR
      SourceCodeSetup@1002 : Record 242;
      BankAccReconciliation@1005 : Record 273;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := DimMgt.TypeToTableID1("Account Type");
      No[1] := "Account No.";
      TableID[2] := DATABASE::"Salesperson/Purchaser";
      No[2] := GetSalepersonPurchaserCode;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup."Payment Reconciliation Journal",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",BankAccReconciliation."Dimension Set ID",DATABASE::"Bank Account");
    END;

    PROCEDURE SetUpNewLine@34();
    BEGIN
      "Transaction Date" := WORKDATE;
      "Match Confidence" := "Match Confidence"::None;
      "Document No." := '';
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@50(VAR ShortcutDimCode@1000 : ARRAY [20] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE AcceptAppliedPaymentEntriesSelectedLines@12();
    BEGIN
      IF FINDSET THEN
        REPEAT
          AcceptApplication;
        UNTIL NEXT = 0;
    END;

    PROCEDURE RejectAppliedPaymentEntriesSelectedLines@18();
    BEGIN
      IF FINDSET THEN
        REPEAT
          RejectAppliedPayment;
        UNTIL NEXT = 0;
    END;

    PROCEDURE RejectAppliedPayment@6();
    BEGIN
      RemoveAppliedPaymentEntries;
      DeletePaymentMatchingDetails;
    END;

    PROCEDURE AcceptApplication@4();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      // For customer payments, the applied amount is positive, so positive difference means excessive amount.
      // For vendor payments, the applied amount is negative, so negative difference means excessive amount.
      // If "Applied Amount" and Difference have the same sign, then this is an overpayment situation.
      // Two non-zero numbers have the same sign if and only if their product is a positive number.
      IF Difference * "Applied Amount" > 0 THEN BEGIN
        IF "Account Type" = "Account Type"::"Bank Account" THEN
          ERROR(ExcessiveAmountErr,Difference);
        IF NOT CONFIRM(STRSUBSTNO(CreditTheAccountQst,GetAppliedToName,Difference)) THEN
          EXIT;
        TransferRemainingAmountToAccount;
      END;

      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.MODIFYALL("Match Confidence","Match Confidence"::Accepted);
    END;

    LOCAL PROCEDURE RemoveApplication@1(AppliedType@1000 : Option);
    BEGIN
      IF "Statement Type" = "Statement Type"::"Bank Reconciliation" THEN
        CASE AppliedType OF
          Type::"Bank Account Ledger Entry":
            BEGIN
              BankAccLedgEntry.RESET;
              BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
              BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
              BankAccLedgEntry.SETRANGE(Open,TRUE);
              BankAccLedgEntry.SETRANGE(
                "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
              BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
              BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
              BankAccLedgEntry.LOCKTABLE;
              CheckLedgEntry.LOCKTABLE;
              IF BankAccLedgEntry.FIND('-') THEN
                REPEAT
                  BankAccSetStmtNo.RemoveReconNo(BankAccLedgEntry,Rec,TRUE);
                UNTIL BankAccLedgEntry.NEXT = 0;
              "Applied Entries" := 0;
              VALIDATE("Applied Amount",0);
              MODIFY;
            END;
          Type::"Check Ledger Entry":
            BEGIN
              CheckLedgEntry.RESET;
              CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
              CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
              CheckLedgEntry.SETRANGE(Open,TRUE);
              CheckLedgEntry.SETRANGE(
                "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
              CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
              CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
              BankAccLedgEntry.LOCKTABLE;
              CheckLedgEntry.LOCKTABLE;
              IF CheckLedgEntry.FIND('-') THEN
                REPEAT
                  CheckSetStmtNo.RemoveReconNo(CheckLedgEntry,Rec,TRUE);
                UNTIL CheckLedgEntry.NEXT = 0;
              "Applied Entries" := 0;
              VALIDATE("Applied Amount",0);
              "Check No." := '';
              MODIFY;
            END;
        END;
    END;

    PROCEDURE SetManualApplication@33();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.MODIFYALL("Match Confidence","Match Confidence"::Manual)
    END;

    LOCAL PROCEDURE RemoveAppliedPaymentEntries@9();
    VAR
      AppliedPmtEntry@1000 : Record 1294;
    BEGIN
      VALIDATE("Applied Amount",0);
      VALIDATE("Applied Entries",0);
      VALIDATE("Account No.",'');
      MODIFY(TRUE);

      AppliedPmtEntry.FilterAppliedPmtEntry(Rec);
      AppliedPmtEntry.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeletePaymentMatchingDetails@10();
    VAR
      PaymentMatchingDetails@1000 : Record 1299;
    BEGIN
      PaymentMatchingDetails.SETRANGE("Statement Type","Statement Type");
      PaymentMatchingDetails.SETRANGE("Bank Account No.","Bank Account No.");
      PaymentMatchingDetails.SETRANGE("Statement No.","Statement No.");
      PaymentMatchingDetails.SETRANGE("Statement Line No.","Statement Line No.");
      PaymentMatchingDetails.DELETEALL(TRUE);
    END;

    PROCEDURE GetAppliedEntryAccountName@47(AppliedToEntryNo@1000 : Integer) : Text;
    VAR
      AccountType@1005 : Option;
      AccountNo@1006 : Code[20];
    BEGIN
      AccountType := GetAppliedEntryAccountType(AppliedToEntryNo);
      AccountNo := GetAppliedEntryAccountNo(AppliedToEntryNo);
      EXIT(GetAccountName(AccountType,AccountNo));
    END;

    PROCEDURE GetAppliedToName@14() : Text;
    VAR
      AccountType@1005 : Option;
      AccountNo@1006 : Code[20];
    BEGIN
      AccountType := GetAppliedToAccountType;
      AccountNo := GetAppliedToAccountNo;
      EXIT(GetAccountName(AccountType,AccountNo));
    END;

    PROCEDURE GetAppliedEntryAccountType@43(AppliedToEntryNo@1000 : Integer) : Integer;
    VAR
      BankAccountLedgerEntry@1003 : Record 271;
    BEGIN
      IF "Account Type" = "Account Type"::"Bank Account" THEN
        IF BankAccountLedgerEntry.GET(AppliedToEntryNo) THEN
          EXIT(BankAccountLedgerEntry."Bal. Account Type");
      EXIT("Account Type");
    END;

    PROCEDURE GetAppliedToAccountType@36() : Integer;
    VAR
      BankAccountLedgerEntry@1003 : Record 271;
    BEGIN
      IF "Account Type" = "Account Type"::"Bank Account" THEN
        IF BankAccountLedgerEntry.GET(GetFirstAppliedToEntryNo) THEN
          EXIT(BankAccountLedgerEntry."Bal. Account Type");
      EXIT("Account Type");
    END;

    PROCEDURE GetAppliedEntryAccountNo@39(AppliedToEntryNo@1000 : Integer) : Code[20];
    VAR
      CustLedgerEntry@1001 : Record 21;
      VendorLedgerEntry@1002 : Record 25;
      BankAccountLedgerEntry@1003 : Record 271;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          IF CustLedgerEntry.GET(AppliedToEntryNo) THEN
            EXIT(CustLedgerEntry."Customer No.");
        "Account Type"::Vendor:
          IF VendorLedgerEntry.GET(AppliedToEntryNo) THEN
            EXIT(VendorLedgerEntry."Vendor No.");
        "Account Type"::"Bank Account":
          IF BankAccountLedgerEntry.GET(AppliedToEntryNo) THEN
            EXIT(BankAccountLedgerEntry."Bal. Account No.");
      END;
      EXIT("Account No.");
    END;

    PROCEDURE GetAppliedToAccountNo@37() : Code[20];
    VAR
      BankAccountLedgerEntry@1004 : Record 271;
    BEGIN
      IF "Account Type" = "Account Type"::"Bank Account" THEN
        IF BankAccountLedgerEntry.GET(GetFirstAppliedToEntryNo) THEN
          EXIT(BankAccountLedgerEntry."Bal. Account No.");
      EXIT("Account No.")
    END;

    LOCAL PROCEDURE GetAccountName@45(AccountType@1000 : Option;AccountNo@1001 : Code[20]) : Text;
    VAR
      Customer@1005 : Record 18;
      Vendor@1004 : Record 23;
      GLAccount@1003 : Record 15;
      BankAccount@1002 : Record 270;
      Name@1006 : Text;
    BEGIN
      CASE AccountType OF
        "Account Type"::Customer:
          IF Customer.GET(AccountNo) THEN
            Name := Customer.Name;
        "Account Type"::Vendor:
          IF Vendor.GET(AccountNo) THEN
            Name := Vendor.Name;
        "Account Type"::"G/L Account":
          IF GLAccount.GET(AccountNo) THEN
            Name := GLAccount.Name;
        "Account Type"::"Bank Account":
          IF BankAccount.GET(AccountNo) THEN
            Name := BankAccount.Name;
      END;

      EXIT(Name);
    END;

    PROCEDURE AppliedEntryAccountDrillDown@46(AppliedEntryNo@1000 : Integer);
    VAR
      AccountType@1004 : Option;
      AccountNo@1003 : Code[20];
    BEGIN
      AccountType := GetAppliedEntryAccountType(AppliedEntryNo);
      AccountNo := GetAppliedEntryAccountNo(AppliedEntryNo);
      OpenAccountPage(AccountType,AccountNo);
    END;

    PROCEDURE AppliedToDrillDown@16();
    VAR
      AccountType@1004 : Option;
      AccountNo@1003 : Code[20];
    BEGIN
      AccountType := GetAppliedToAccountType;
      AccountNo := GetAppliedToAccountNo;
      OpenAccountPage(AccountType,AccountNo);
    END;

    LOCAL PROCEDURE OpenAccountPage@40(AccountType@1006 : Option;AccountNo@1007 : Code[20]);
    VAR
      Customer@1002 : Record 18;
      Vendor@1001 : Record 23;
      GLAccount@1000 : Record 15;
      BankAccount@1005 : Record 270;
    BEGIN
      CASE AccountType OF
        "Account Type"::Customer:
          BEGIN
            Customer.GET(AccountNo);
            PAGE.RUN(PAGE::"Customer Card",Customer);
          END;
        "Account Type"::Vendor:
          BEGIN
            Vendor.GET(AccountNo);
            PAGE.RUN(PAGE::"Vendor Card",Vendor);
          END;
        "Account Type"::"G/L Account":
          BEGIN
            GLAccount.GET(AccountNo);
            PAGE.RUN(PAGE::"G/L Account Card",GLAccount);
          END;
        "Account Type"::"Bank Account":
          BEGIN
            BankAccount.GET(AccountNo);
            PAGE.RUN(PAGE::"Bank Account Card",BankAccount);
          END;
      END;
    END;

    PROCEDURE DrillDownOnNoOfLedgerEntriesWithinAmountTolerance@21();
    BEGIN
      DrillDownOnNoOfLedgerEntriesBasedOnAmount(AmountWithinToleranceRangeTok);
    END;

    PROCEDURE DrillDownOnNoOfLedgerEntriesOutsideOfAmountTolerance@23();
    BEGIN
      DrillDownOnNoOfLedgerEntriesBasedOnAmount(AmountOustideToleranceRangeTok);
    END;

    LOCAL PROCEDURE DrillDownOnNoOfLedgerEntriesBasedOnAmount@24(AmountFilter@1005 : Text);
    VAR
      CustLedgerEntry@1003 : Record 21;
      VendorLedgerEntry@1004 : Record 25;
      BankAccountLedgerEntry@1000 : Record 271;
      MinAmount@1001 : Decimal;
      MaxAmount@1002 : Decimal;
    BEGIN
      GetAmountRangeForTolerance(MinAmount,MaxAmount);

      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            GetCustomerLedgerEntriesInAmountRange(CustLedgerEntry,"Account No.",AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
          END;
        "Account Type"::Vendor:
          BEGIN
            GetVendorLedgerEntriesInAmountRange(VendorLedgerEntry,"Account No.",AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
          END;
        "Account Type"::"Bank Account":
          BEGIN
            GetBankAccountLedgerEntriesInAmountRange(BankAccountLedgerEntry,AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Bank Account Ledger Entries",BankAccountLedgerEntry);
          END;
      END;
    END;

    LOCAL PROCEDURE GetCustomerLedgerEntriesInAmountRange@41(VAR CustLedgerEntry@1004 : Record 21;AccountNo@1005 : Code[20];AmountFilter@1001 : Text;MinAmount@1002 : Decimal;MaxAmount@1003 : Decimal) : Integer;
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      CustLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      BankAccount.GET("Bank Account No.");
      GetApplicableCustomerLedgerEntries(CustLedgerEntry,BankAccount."Currency Code",AccountNo);

      IF BankAccount.IsInLocalCurrency THEN
        CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",AmountFilter,MinAmount,MaxAmount)
      ELSE
        CustLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      EXIT(CustLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetVendorLedgerEntriesInAmountRange@42(VAR VendorLedgerEntry@1004 : Record 25;AccountNo@1005 : Code[20];AmountFilter@1002 : Text;MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal) : Integer;
    VAR
      BankAccount@1003 : Record 270;
    BEGIN
      VendorLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");

      BankAccount.GET("Bank Account No.");
      GetApplicableVendorLedgerEntries(VendorLedgerEntry,BankAccount."Currency Code",AccountNo);

      IF BankAccount.IsInLocalCurrency THEN
        VendorLedgerEntry.SETFILTER("Remaining Amt. (LCY)",AmountFilter,MinAmount,MaxAmount)
      ELSE
        VendorLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      EXIT(VendorLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetBankAccountLedgerEntriesInAmountRange@7(VAR BankAccountLedgerEntry@1004 : Record 271;AmountFilter@1002 : Text;MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal) : Integer;
    VAR
      BankAccount@1003 : Record 270;
    BEGIN
      BankAccount.GET("Bank Account No.");
      GetApplicableBankAccountLedgerEntries(BankAccountLedgerEntry,BankAccount."Currency Code","Bank Account No.");

      BankAccountLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      EXIT(BankAccountLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetApplicableCustomerLedgerEntries@15(VAR CustLedgerEntry@1000 : Record 21;CurrencyCode@1001 : Code[10];AccountNo@1002 : Code[20]);
    BEGIN
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETRANGE("Applies-to ID",'');
      CustLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        CustLedgerEntry."Document Type"::Payment,
        CustLedgerEntry."Document Type"::Refund);

      IF CurrencyCode <> '' THEN
        CustLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      IF AccountNo <> '' THEN
        CustLedgerEntry.SETFILTER("Customer No.",AccountNo);
    END;

    LOCAL PROCEDURE GetApplicableVendorLedgerEntries@22(VAR VendorLedgerEntry@1000 : Record 25;CurrencyCode@1002 : Code[10];AccountNo@1001 : Code[20]);
    BEGIN
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.SETRANGE("Applies-to ID",'');
      VendorLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        VendorLedgerEntry."Document Type"::Payment,
        VendorLedgerEntry."Document Type"::Refund);

      IF CurrencyCode <> '' THEN
        VendorLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      IF AccountNo <> '' THEN
        VendorLedgerEntry.SETFILTER("Vendor No.",AccountNo);
    END;

    LOCAL PROCEDURE GetApplicableBankAccountLedgerEntries@11(VAR BankAccountLedgerEntry@1000 : Record 271;CurrencyCode@1002 : Code[10];AccountNo@1001 : Code[20]);
    BEGIN
      BankAccountLedgerEntry.SETRANGE(Open,TRUE);

      IF CurrencyCode <> '' THEN
        BankAccountLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      IF AccountNo <> '' THEN
        BankAccountLedgerEntry.SETRANGE("Bank Account No.",AccountNo);
    END;

    PROCEDURE FilterBankRecLines@20(BankAccRecon@1000 : Record 273);
    BEGIN
      RESET;
      SETRANGE("Statement Type",BankAccRecon."Statement Type");
      SETRANGE("Bank Account No.",BankAccRecon."Bank Account No.");
      SETRANGE("Statement No.",BankAccRecon."Statement No.");
    END;

    PROCEDURE LinesExist@19(BankAccRecon@1001 : Record 273) : Boolean;
    BEGIN
      FilterBankRecLines(BankAccRecon);
      EXIT(FINDSET);
    END;

    PROCEDURE GetAppliedToDocumentNo@30() : Text;
    VAR
      ApplyType@1002 : 'Document No.,Entry No.';
    BEGIN
      EXIT(GetAppliedNo(ApplyType::"Document No."));
    END;

    PROCEDURE GetAppliedToEntryNo@13() : Text;
    VAR
      ApplyType@1000 : 'Document No.,Entry No.';
    BEGIN
      EXIT(GetAppliedNo(ApplyType::"Entry No."));
    END;

    LOCAL PROCEDURE GetFirstAppliedToEntryNo@17() : Integer;
    VAR
      AppliedEntryNumbers@1001 : Text;
      AppliedToEntryNo@1003 : Integer;
    BEGIN
      AppliedEntryNumbers := GetAppliedToEntryNo;
      IF AppliedEntryNumbers = '' THEN
        EXIT(0);
      EVALUATE(AppliedToEntryNo,SELECTSTR(1,AppliedEntryNumbers));
      EXIT(AppliedToEntryNo);
    END;

    LOCAL PROCEDURE GetAppliedNo@32(ApplyType@1000 : 'Document No.,Entry No.') : Text;
    VAR
      AppliedPaymentEntry@1002 : Record 1294;
      AppliedNumbers@1001 : Text;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");

      AppliedNumbers := '';
      IF AppliedPaymentEntry.FINDSET THEN BEGIN
        REPEAT
          IF ApplyType = ApplyType::"Document No." THEN BEGIN
            IF AppliedPaymentEntry."Document No." <> '' THEN
              IF AppliedNumbers = '' THEN
                AppliedNumbers := AppliedPaymentEntry."Document No."
              ELSE
                AppliedNumbers := AppliedNumbers + ', ' + AppliedPaymentEntry."Document No.";
          END ELSE BEGIN
            IF AppliedPaymentEntry."Applies-to Entry No." <> 0 THEN
              IF AppliedNumbers = '' THEN
                AppliedNumbers := FORMAT(AppliedPaymentEntry."Applies-to Entry No.")
              ELSE
                AppliedNumbers := AppliedNumbers + ', ' + FORMAT(AppliedPaymentEntry."Applies-to Entry No.");
          END;
        UNTIL AppliedPaymentEntry.NEXT = 0;
      END;

      EXIT(AppliedNumbers);
    END;

    PROCEDURE TransferRemainingAmountToAccount@31();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      TESTFIELD("Account No.");

      AppliedPaymentEntry.TransferFromBankAccReconLine(Rec);
      AppliedPaymentEntry."Account Type" := GetAppliedToAccountType;
      AppliedPaymentEntry."Account No." := GetAppliedToAccountNo;
      AppliedPaymentEntry.VALIDATE("Applied Amount",Difference);
      AppliedPaymentEntry.VALIDATE("Match Confidence",AppliedPaymentEntry."Match Confidence"::Manual);
      AppliedPaymentEntry.INSERT(TRUE);
    END;

    PROCEDURE GetAmountRangeForTolerance@8(VAR MinAmount@1001 : Decimal;VAR MaxAmount@1002 : Decimal);
    VAR
      BankAccount@1000 : Record 270;
      TempAmount@1003 : Decimal;
    BEGIN
      BankAccount.GET("Bank Account No.");
      CASE BankAccount."Match Tolerance Type" OF
        BankAccount."Match Tolerance Type"::Amount:
          BEGIN
            MinAmount := "Statement Amount" - BankAccount."Match Tolerance Value";
            MaxAmount := "Statement Amount" + BankAccount."Match Tolerance Value";

            IF ("Statement Amount" >= 0) AND (MinAmount < 0) THEN
              MinAmount := 0
            ELSE
              IF ("Statement Amount" < 0) AND (MaxAmount > 0) THEN
                MaxAmount := 0;
          END;
        BankAccount."Match Tolerance Type"::Percentage:
          BEGIN
            MinAmount := "Statement Amount" * (1 - BankAccount."Match Tolerance Value" / 100);
            MaxAmount := "Statement Amount" * (1 + BankAccount."Match Tolerance Value" / 100);

            IF "Statement Amount" < 0 THEN BEGIN
              TempAmount := MinAmount;
              MinAmount := MaxAmount;
              MaxAmount := TempAmount;
            END;
          END;
      END;

      MinAmount := ROUND(MinAmount);
      MaxAmount := ROUND(MaxAmount);
    END;

    PROCEDURE UpdateGenJnlLine@1210001(VAR GenJnlLine@1210000 : Record 81;BankAccReconLine@1210001 : Record 274);
    BEGIN
      IF "Line Status" <> "Line Status"::"Contractor Confirmed" THEN
        EXIT;

      IF "Document Type" = "Document Type"::Refund THEN
        GenJnlLine.VALIDATE("Document Type",GenJnlLine."Document Type"::Refund)
      ELSE
        GenJnlLine.VALIDATE("Document Type","Document Type");
      GenJnlLine.VALIDATE("Account Type","Entity Type");
      GenJnlLine.VALIDATE("Account No.","Entity No.");
      GenJnlLine.VALIDATE("Document No.","Document No.");
      IF (("Entity Type" = "Entity Type"::Customer) AND
          ("Document Type" <> "Document Type"::Refund)) OR
         (("Entity Type" = "Entity Type"::Vendor) AND
          ("Document Type" = "Document Type"::Refund)) OR
         (("Entity Type" = "Entity Type"::"G/L Account") AND
          ("Document Type" <> "Document Type"::Refund) AND
          ("Payment Direction" = "Payment Direction"::Incoming)) OR
         (("Entity Type" = "Entity Type"::"G/L Account") AND
          ("Document Type" = "Document Type"::Refund) AND
          ("Payment Direction" = "Payment Direction"::Outgoing))
      THEN
        GenJnlLine.VALIDATE(Amount,GenJnlLine.Amount)
      ELSE
        GenJnlLine.VALIDATE(Amount,-GenJnlLine.Amount);
      GenJnlLine.VALIDATE("Payment Purpose",COPYSTR(Description,1,STRLEN(GenJnlLine."Payment Purpose")));
      GenJnlLine.VALIDATE("Payment Code",BankAccReconLine."Payment Code");
    END;

    PROCEDURE GetAppliedPmtData@52(VAR AppliedPmtEntry@1000 : Record 1294;VAR RemainingAmountAfterPosting@1002 : Decimal;VAR DifferenceStatementAmtToApplEntryAmount@1001 : Decimal;PmtAppliedToTxt@1004 : Text);
    VAR
      CurrRemAmtAfterPosting@1003 : Decimal;
    BEGIN
      AppliedPmtEntry.INIT;
      RemainingAmountAfterPosting := 0;
      DifferenceStatementAmtToApplEntryAmount := 0;

      AppliedPmtEntry.FilterAppliedPmtEntry(Rec);
      AppliedPmtEntry.SETFILTER("Applies-to Entry No.",'<>0');
      IF AppliedPmtEntry.FINDSET THEN BEGIN
        DifferenceStatementAmtToApplEntryAmount := "Statement Amount";
        REPEAT
          CurrRemAmtAfterPosting :=
            AppliedPmtEntry.GetRemAmt -
            AppliedPmtEntry.GetAmtAppliedToOtherStmtLines;

          RemainingAmountAfterPosting += CurrRemAmtAfterPosting - AppliedPmtEntry."Applied Amount";
          DifferenceStatementAmtToApplEntryAmount -= CurrRemAmtAfterPosting - AppliedPmtEntry."Applied Pmt. Discount";
        UNTIL AppliedPmtEntry.NEXT = 0;
      END;

      IF "Applied Entries" > 1 THEN
        AppliedPmtEntry.Description := STRSUBSTNO(PmtAppliedToTxt,"Applied Entries");
    END;

    LOCAL PROCEDURE UpdateParentLineStatementAmount@38();
    VAR
      BankAccReconciliationLine@1000 : Record 274;
    BEGIN
      IF BankAccReconciliationLine.GET("Statement Type","Bank Account No.","Statement No.","Parent Line No.") THEN BEGIN
        BankAccReconciliationLine.VALIDATE("Statement Amount","Statement Amount" + BankAccReconciliationLine."Statement Amount");
        BankAccReconciliationLine.MODIFY(TRUE)
      END
    END;

    PROCEDURE IsTransactionPostedAndReconciled@27() : Boolean;
    VAR
      PostedPaymentReconLine@1001 : Record 1296;
    BEGIN
      IF "Transaction ID" <> '' THEN BEGIN
        PostedPaymentReconLine.SETRANGE("Bank Account No.","Bank Account No.");
        PostedPaymentReconLine.SETRANGE("Transaction ID","Transaction ID");
        PostedPaymentReconLine.SETRANGE(Reconciled,TRUE);
        EXIT(PostedPaymentReconLine.FINDFIRST)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsTransactionPostedAndNotReconciled@48() : Boolean;
    VAR
      PostedPaymentReconLine@1001 : Record 1296;
    BEGIN
      IF "Transaction ID" <> '' THEN BEGIN
        PostedPaymentReconLine.SETRANGE("Bank Account No.","Bank Account No.");
        PostedPaymentReconLine.SETRANGE("Transaction ID","Transaction ID");
        PostedPaymentReconLine.SETRANGE(Reconciled,FALSE);
        EXIT(PostedPaymentReconLine.FINDFIRST)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsTransactionAlreadyImported@28() : Boolean;
    VAR
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      IF "Transaction ID" <> '' THEN BEGIN
        BankAccReconciliationLine.SETRANGE("Statement Type","Statement Type");
        BankAccReconciliationLine.SETRANGE("Bank Account No.","Bank Account No.");
        BankAccReconciliationLine.SETRANGE("Transaction ID","Transaction ID");
        EXIT(BankAccReconciliationLine.FINDFIRST)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AllowImportOfPostedNotReconciledTransactions@49() : Boolean;
    VAR
      BankAccReconciliation@1000 : Record 273;
    BEGIN
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      IF BankAccReconciliation."Import Posted Transactions" = BankAccReconciliation."Import Posted Transactions"::" " THEN BEGIN
        BankAccReconciliation."Import Posted Transactions" := BankAccReconciliation."Import Posted Transactions"::No;
        IF GUIALLOWED THEN
          IF CONFIRM(ImportPostedTransactionsQst) THEN
            BankAccReconciliation."Import Posted Transactions" := BankAccReconciliation."Import Posted Transactions"::Yes;
        BankAccReconciliation.MODIFY;
      END;

      EXIT(BankAccReconciliation."Import Posted Transactions" = BankAccReconciliation."Import Posted Transactions"::Yes);
    END;

    PROCEDURE CanImport@44() : Boolean;
    BEGIN
      IF IsTransactionPostedAndReconciled OR IsTransactionAlreadyImported THEN
        EXIT(FALSE);

      IF IsTransactionPostedAndNotReconciled THEN
        EXIT(AllowImportOfPostedNotReconciledTransactions);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetSalepersonPurchaserCode@51() : Code[20];
    VAR
      Customer@1002 : Record 18;
      Vendor@1003 : Record 23;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          IF Customer.GET("Account No.") THEN
            EXIT(Customer."Salesperson Code");
        "Account Type"::Vendor:
          IF Vendor.GET("Account No.") THEN
            EXIT(Vendor."Purchaser Code");
      END;
    END;

    PROCEDURE GetAppliesToID@62() : Code[50];
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      EXIT(COPYSTR(FORMAT("Statement No.") + '-' + FORMAT("Statement Line No."),1,MAXSTRLEN(CustLedgerEntry."Applies-to ID")));
    END;

    BEGIN
    {
      NC NOS-26 SPA
    }
    END.
  }
}

