OBJECT Codeunit 14934 TORG-12 Report Helper
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExcelReportBuilderManager@1210000 : Codeunit 14930;
      StdRepMgt@1210003 : Codeunit 12401;
      LocMgt@1210004 : Codeunit 12400;
      LastTotalAmount@1210001 : ARRAY [6] OF Decimal;
      TotalAmount@1210002 : ARRAY [6] OF Decimal;
      PrevDocPageNo@1210005 : Integer;
      PageNoTxt@1210006 : TextConst 'ENU=Waybill %1 Page %2;RUS=Транспортная накладная %1, стр. %2';
      DocumentNo@1210007 : Text;
      PageHeaderCurrencyText@1210008 : Text;

    PROCEDURE InitReportTemplate@1210001();
    VAR
      SalesReceivablesSetup@1210000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.TESTFIELD("TORG-12 Template Code");
      ExcelReportBuilderManager.InitTemplate(SalesReceivablesSetup."TORG-12 Template Code");
      ExcelReportBuilderManager.SetSheet('Sheet1');
    END;

    PROCEDURE IncreaseTotals@1210008(AmountValues@1210000 : ARRAY [6] OF Decimal);
    VAR
      I@1210001 : Integer;
    BEGIN
      FOR I := 1 TO 6 DO
        TotalAmount[I] += AmountValues[I];
    END;

    PROCEDURE SaveLastTotals@1210006();
    VAR
      I@1210001 : Integer;
    BEGIN
      FOR I := 1 TO 6 DO
        LastTotalAmount[I] := TotalAmount[I];
    END;

    PROCEDURE FillHeader@1210000(HeaderDetails@1210000 : ARRAY [15] OF Text);
    BEGIN
      CLEAR(TotalAmount);
      CLEAR(LastTotalAmount);
      DocumentNo := HeaderDetails[1];

      ExcelReportBuilderManager.AddSection('REPORTHEADER');

      ExcelReportBuilderManager.AddDataToSection('InvoiceId',HeaderDetails[1]);
      ExcelReportBuilderManager.AddDataToSection('InvoiceDate',HeaderDetails[2]);
      ExcelReportBuilderManager.AddDataToSection('ConsignorBankAddress',HeaderDetails[3]);
      ExcelReportBuilderManager.AddDataToSection('ConsigneeBankAddress',HeaderDetails[4]);
      ExcelReportBuilderManager.AddDataToSection('VendBankAddress',HeaderDetails[5]);
      ExcelReportBuilderManager.AddDataToSection('CustBankAddress',HeaderDetails[6]);
      ExcelReportBuilderManager.AddDataToSection('OrderDescription',HeaderDetails[7]);
      ExcelReportBuilderManager.AddDataToSection('ConsignorOKPO',HeaderDetails[8]);
      ExcelReportBuilderManager.AddDataToSection('ConsigneeOKPO',HeaderDetails[9]);
      ExcelReportBuilderManager.AddDataToSection('VendOKPO',HeaderDetails[10]);
      ExcelReportBuilderManager.AddDataToSection('CustOKPO',HeaderDetails[11]);
      ExcelReportBuilderManager.AddDataToSection('OrderNumber',HeaderDetails[12]);
      ExcelReportBuilderManager.AddDataToSection('BillOfLading',HeaderDetails[13]);
      ExcelReportBuilderManager.AddDataToSection('BillOfLadingDate',HeaderDetails[14]);
      ExcelReportBuilderManager.AddDataToSection('OrderDate',HeaderDetails[15]);
    END;

    PROCEDURE FillPageHeader@1210004(CurrencyText@1210000 : Text);
    BEGIN
      ExcelReportBuilderManager.AddSection('PAGEHEADER');

      PageHeaderCurrencyText := CurrencyText;
      ExcelReportBuilderManager.AddDataToSection('CurExtPrice',PageHeaderCurrencyText);
      ExcelReportBuilderManager.AddDataToSection('CurExtAmount',PageHeaderCurrencyText);
      ExcelReportBuilderManager.AddDataToSection('CurExtVAT',PageHeaderCurrencyText);
      ExcelReportBuilderManager.AddDataToSection('CurExtAmountWithVAT',PageHeaderCurrencyText);

      IF ExcelReportBuilderManager.GetLastPageNo - PrevDocPageNo <> 1 THEN
        ExcelReportBuilderManager.AddDataToSection(
          'PageNoText',
          STRSUBSTNO(
            PageNoTxt,
            DocumentNo,
            ExcelReportBuilderManager.GetLastPageNo - PrevDocPageNo));
    END;

    PROCEDURE FillLine@1210007(BodyDetails@1210000 : ARRAY [14] OF Text;AmountValues@1210001 : ARRAY [6] OF Decimal);
    BEGIN
      IF NOT ExcelReportBuilderManager.TryAddSectionWithPlaceForFooter('BODY','PAGEFOOTER') THEN BEGIN
        FillPageFooter;
        ExcelReportBuilderManager.AddPagebreak;
        FillPageHeader(PageHeaderCurrencyText);
        ExcelReportBuilderManager.AddSection('BODY');
      END;

      IncreaseTotals(AmountValues);

      ExcelReportBuilderManager.AddDataToSection('lineNo',BodyDetails[1]);
      ExcelReportBuilderManager.AddDataToSection('Name',BodyDetails[2]);
      ExcelReportBuilderManager.AddDataToSection('ItemId',BodyDetails[3]);
      ExcelReportBuilderManager.AddDataToSection('UnitId',BodyDetails[4]);
      ExcelReportBuilderManager.AddDataToSection('OKEI',BodyDetails[5]);
      ExcelReportBuilderManager.AddDataToSection('Packing','-');
      ExcelReportBuilderManager.AddDataToSection('TaxPackagingQty','-');
      ExcelReportBuilderManager.AddDataToSection('QtyNumber','-');
      ExcelReportBuilderManager.AddDataToSection('GrossWeight',BodyDetails[6]);
      ExcelReportBuilderManager.AddDataToSection('Qty',BodyDetails[7]);
      ExcelReportBuilderManager.AddDataToSection('Price',BodyDetails[8]);
      ExcelReportBuilderManager.AddDataToSection('Amount',BodyDetails[9]);
      ExcelReportBuilderManager.AddDataToSection('VATValue',BodyDetails[10]);
      ExcelReportBuilderManager.AddDataToSection('VATAmount',BodyDetails[11]);
      ExcelReportBuilderManager.AddDataToSection('AmountWithVAT',BodyDetails[12]);
    END;

    PROCEDURE FillPageFooter@1210012();
    BEGIN
      ExcelReportBuilderManager.AddSection('PAGEFOOTER');

      ExcelReportBuilderManager.AddDataToSection('QtyPage',FORMAT(TotalAmount[4] - LastTotalAmount[4]));
      ExcelReportBuilderManager.AddDataToSection(
        'AmountPage',StdRepMgt.FormatReportValue(TotalAmount[1] - LastTotalAmount[1],2));
      ExcelReportBuilderManager.AddDataToSection(
        'VATAmountPage',StdRepMgt.FormatReportValue(TotalAmount[2] - LastTotalAmount[2],2));
      ExcelReportBuilderManager.AddDataToSection(
        'AmountWithVATPage',StdRepMgt.FormatReportValue(TotalAmount[3] - LastTotalAmount[3],2));

      SaveLastTotals;
    END;

    PROCEDURE FillFooter@1210013(FooterDetails@1210001 : ARRAY [6] OF Text;VATExemptTotal@1210000 : Boolean;PrintWeightInfo@1210002 : Boolean);
    BEGIN
      IF NOT ExcelReportBuilderManager.TryAddSection('REPORTFOOTER') THEN BEGIN
        FillPageFooter;
        ExcelReportBuilderManager.AddPagebreak;
        FillPageHeader(PageHeaderCurrencyText);
        ExcelReportBuilderManager.AddSection('REPORTFOOTER');
      END;

      ExcelReportBuilderManager.AddDataToSection('QtyTotal',FORMAT(TotalAmount[4]));
      ExcelReportBuilderManager.AddDataToSection(
        'AmountTotal',StdRepMgt.FormatReportValue(TotalAmount[1],2));
      IF VATExemptTotal THEN
        ExcelReportBuilderManager.AddDataToSection('VATAmountTotal','-')
      ELSE
        ExcelReportBuilderManager.AddDataToSection('VATAmountTotal',StdRepMgt.FormatReportValue(TotalAmount[2],2));

      ExcelReportBuilderManager.AddDataToSection('AmountWithVATTotal',StdRepMgt.FormatReportValue(TotalAmount[3],2));

      ExcelReportBuilderManager.AddDataToSection(
        'PageTotal',LocMgt.Integer2Text(ExcelReportBuilderManager.GetLastPageNo - PrevDocPageNo,1,'','',''));
      ExcelReportBuilderManager.AddDataToSection('ItemQty',FooterDetails[1]);

      ExcelReportBuilderManager.AddDataToSection('NetWeightStr',TotalNetWeight(PrintWeightInfo));
      ExcelReportBuilderManager.AddDataToSection('GrossWeightStr',TotalGrossWeight(PrintWeightInfo));

      ExcelReportBuilderManager.AddDataToSection(
        'TotalAmountWithVATStr',LocMgt.Amount2Text(FooterDetails[2],TotalAmount[3]));

      ExcelReportBuilderManager.AddDataToSection('DeliveryAllowedName',FooterDetails[3]);
      ExcelReportBuilderManager.AddDataToSection('AccountantName',FooterDetails[4]);
      ExcelReportBuilderManager.AddDataToSection('SupplierName',FooterDetails[5]);
      ExcelReportBuilderManager.AddDataToSection('DocumentDate',FooterDetails[6]);
    END;

    PROCEDURE FinishDocument@1210005(FooterDetails@1210002 : ARRAY [6] OF Text;VATExemptTotal@1210001 : Boolean;PrintWeightInfo@1210000 : Boolean);
    BEGIN
      FillFooter(FooterDetails,VATExemptTotal,PrintWeightInfo);
      PrevDocPageNo := ExcelReportBuilderManager.GetLastPageNo;
      ExcelReportBuilderManager.AddPagebreak;
    END;

    PROCEDURE ExportData@1210002();
    BEGIN
      ExcelReportBuilderManager.ExportData;
    END;

    PROCEDURE ExportDataToClientFile@1210011(FileName@1210000 : Text);
    BEGIN
      ExcelReportBuilderManager.ExportDataToClientFile(FileName);
    END;

    PROCEDURE TotalGrossWeight@1210009(PrintWeightInfo@1210000 : Boolean) : Text[1024];
    BEGIN
      IF PrintWeightInfo THEN
        EXIT(LocMgt.Integer2Text(ROUND(TotalAmount[5],1),1,'','',''));

      EXIT('');
    END;

    PROCEDURE TotalNetWeight@1210010(PrintWeightInfo@1210000 : Boolean) : Text[1024];
    BEGIN
      IF PrintWeightInfo THEN
        EXIT(LocMgt.Integer2Text(ROUND(TotalAmount[6],1),1,'','',''));

      EXIT('');
    END;

    BEGIN
    END.
  }
}

