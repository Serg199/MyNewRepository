OBJECT Report 12459 Posted Bank Payment Order
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Posted Bank Payment Order;
               RUS=Учт. платежное поручение];
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   IF FileName <> '' THEN
                     BankPaymentOrderHelper.ExportDataFile(FileName)
                   ELSE
                     BankPaymentOrderHelper.ExportData;
                 END;

  }
  DATASET
  {
    { 5439;    ;DataItem;                    ;
               DataItemTable=Table272;
               DataItemTableView=SORTING(Entry No.)
                                 WHERE(Entry Status=CONST(Posted));
               PrintOnlyIfDetail=No;
               OnPreDataItem=BEGIN
                               BankPaymentOrderHelper.InitReportTemplate;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Amount >= 0 THEN
                                    FIELDERROR(Amount,AmountErr);

                                  CASE PaymentDocType OF
                                    PaymentDocType::"Payment Order":
                                      BEGIN
                                        TitleDoc := PayNoteTxt;
                                        OCUD := '0401060';
                                      END;
                                    PaymentDocType::"Collection Payment Order":
                                      BEGIN
                                        TitleDoc := InkPayNoteTxt;
                                        OCUD := '0401060';
                                      END;
                                    PaymentDocType::"Payment Requisition":
                                      BEGIN
                                        TitleDoc := PayingRequestTxt;
                                        OCUD := '0401061';
                                      END;
                                    ELSE
                                      CurrReport.SKIP;
                                  END;

                                  IF KBK <> '' THEN
                                    CompStat := COPYSTR(FORMAT("Check Ledger Entry"."Taxpayer Status"),1,2);

                                  SdandRepManagement.PostedCheckAttributes("Check Ledger Entry",
                                    PayerCode,PayerText,BenefeciaryCode,BenefeciaryText);

                                  DocAmount := ABS(Amount);

                                  CASE PaymentDocType OF
                                    PaymentDocType::"Payment Order":
                                      BEGIN
                                        PayerVATRegNo := PayerCode[1];
                                        PayerBIC := PayerCode[2];
                                        PayerCurrentAccNo := PayerCode[3];
                                        PayerGLAccNo := PayerCode[4];

                                        PayerName := PayerText[1];
                                        PayerName2 := PayerText[2];
                                        PayerBank := PayerText[3];
                                        PayerBank2 := PayerText[4] + ' ' + PayerText[5];
                                        PayerBank2 := DELCHR(PayerBank2,'<>',' ');

                                        PayerBankCity := PayerText[5];
                                        PayerBranch := PayerText[6];
                                        CompanyInf.GET;
                                        PayerKPP := '';
                                        PayerKPP := CompanyInf."KPP Code";
                                        IF Vendor.GET("Bal. Account No.") THEN BEGIN
                                          BeneficiaryKPP := Vendor."KPP Code";
                                          IF Vendor."Control Tax Organ" <> '' THEN
                                            ContrTaxOrgan := '(' + Vendor."Control Tax Organ" + ')';
                                        END;

                                        BeneficiaryVATRegNo := BenefeciaryCode[1];
                                        BeneficiaryBIC := BenefeciaryCode[2];
                                        BeneficiarySettlAccNo := BenefeciaryCode[3];
                                        BeneficiaryGLNo := BenefeciaryCode[4];

                                        BeneficiaryName := BenefeciaryText[1];
                                        BeneficiaryName2 := BenefeciaryText[2];
                                        BeneficiaryBank := BenefeciaryText[3];
                                        BeneficiaryBank2 := BenefeciaryText[4] + ' ' + BenefeciaryText[5];
                                        BeneficiaryBank2 := DELCHR(BeneficiaryBank2,'<>',' ');
                                        BeneficiaryBankCity := BenefeciaryText[5];
                                        BeneficiaryBranch := BenefeciaryText[6];
                                      END;
                                    ELSE
                                      IF (PaymentDocType = PaymentDocType::"Collection Payment Order") OR
                                         (PaymentDocType = PaymentDocType::"Payment Requisition")
                                      THEN BEGIN
                                        PayerVATRegNo := BenefeciaryCode[1];
                                        PayerBIC := BenefeciaryCode[2];
                                        PayerCurrentAccNo := BenefeciaryCode[3];
                                        PayerGLAccNo := BenefeciaryCode[4];

                                        PayerName := BenefeciaryText[1];
                                        PayerName2 := BenefeciaryText[2];
                                        PayerBank := BenefeciaryText[3];
                                        PayerBank2 := BenefeciaryText[4] + ' ' + BenefeciaryText[5];
                                        PayerBank2 := DELCHR(PayerBank2,'<>',' ');

                                        PayerKPP := '';
                                        PayerBankCity := BenefeciaryText[5];
                                        PayerBranch := BenefeciaryText[6];

                                        BeneficiaryVATRegNo := PayerCode[1];
                                        BeneficiaryBIC := PayerCode[2];
                                        BeneficiarySettlAccNo := PayerCode[3];
                                        BeneficiaryGLNo := PayerCode[4];

                                        BeneficiaryName := PayerText[1];
                                        BeneficiaryName2 := PayerText[2];
                                        BeneficiaryBank := PayerText[3];
                                        BeneficiaryBank2 := PayerText[4] + ' ' + PayerText[5];
                                        BeneficiaryBank2 := DELCHR(BeneficiaryBank2,'<>',' ');

                                        BeneficiaryBankCity := PayerText[5];
                                        BeneficiaryBranch := PayerText[6];
                                      END;
                                  END;

                                  WrittenAmount := LocMgt.Amount2Text(' ',ABS(DocAmount));

                                  "Document No." := LocMgt.DigitalPartCode("Document No.");

                                  IF PaymentDocType = PaymentDocType::"Payment Requisition" THEN
                                    BankMark := ReceiverBankMarkTxt
                                  ELSE
                                    BankMark := BankMarkTxt;
                                END;

               OnPostDataItem=VAR
                                LineValue@1210000 : ARRAY [28] OF Text;
                              BEGIN
                                BankPaymentOrderHelper.FillHeader(OCUD);

                                CASE PaymentDocType OF
                                  PaymentDocType::"Payment Order",PaymentDocType::"Collection Payment Order":
                                    BankPaymentOrderHelper.FillTitle(
                                      OCUD,STRSUBSTNO(TitleDoc,"Document No."),'',"Check Date",FORMAT("Payment Method"),CompStat);
                                  PaymentDocType::"Payment Requisition":
                                    BankPaymentOrderHelper.FillRequestTitle(
                                      OCUD,STRSUBSTNO(TitleDoc,"Document No."),'',"Check Date",FORMAT("Payment Method"),CompStat);
                                  ELSE
                                    CurrReport.BREAK;
                                END;

                                TransferLineValues(LineValue,"Check Ledger Entry");
                                BankPaymentOrderHelper.FillBody(LineValue);
                                IF PaymentDocType = PaymentDocType::"Payment Requisition" THEN
                                  BankPaymentOrderHelper.FillReqFooter
                                ELSE
                                  BankPaymentOrderHelper.FillFooter(BankMark,'');

                                CASE PaymentDocType OF
                                  PaymentDocType::"Collection Payment Order",PaymentDocType::"Payment Requisition":
                                    BankPaymentOrderHelper.FillMarks;
                                END;
                              END;

               ReqFilterFields=Entry No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры] }

      { 1210001;2;Field     ;
                  CaptionML=[ENU=Payment Document Type;
                             RUS=Тип платежного документа];
                  OptionCaptionML=[ENU=Payment Order,Collection Payment Order,Payment Requisition;
                                   RUS=Платежное поручение,Платежное поручение коллекции,Заявка на платеж];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PaymentDocType }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      BankMarkTxt@1210000 : TextConst '@@@=Must be translated: Отметки банка;ENU=Bank marks;RUS=Отметки банка';
      Vendor@1210004 : Record 23;
      CompanyInf@1210001 : Record 79;
      LocMgt@1210012 : Codeunit 12400;
      SdandRepManagement@1210013 : Codeunit 12401;
      BankPaymentOrderHelper@1210006 : Codeunit 14937;
      DocAmount@1210014 : Decimal;
      PaymentDocType@1210015 : 'Payment Order,Collection Payment Order,Payment Requisition';
      PayerCode@1210016 : ARRAY [4] OF Code[20];
      PayerVATRegNo@1210017 : Code[20];
      PayerGLAccNo@1210018 : Code[20];
      PayerBIC@1210019 : Code[20];
      PayerCurrentAccNo@1210020 : Code[20];
      BenefeciaryCode@1210021 : ARRAY [4] OF Code[20];
      BeneficiaryVATRegNo@1210022 : Code[20];
      BeneficiaryGLNo@1210023 : Code[20];
      BeneficiaryBIC@1210024 : Code[20];
      BeneficiarySettlAccNo@1210025 : Code[20];
      OCUD@1210026 : Code[10];
      TitleDoc@1210027 : Text;
      WrittenAmount@1210028 : Text;
      PayerName@1210030 : Text;
      PayerName2@1210031 : Text;
      PayerBank@1210032 : Text;
      PayerBank2@1210033 : Text;
      PayerText@1210034 : ARRAY [6] OF Text;
      BeneficiaryName@1210035 : Text;
      BeneficiaryName2@1210036 : Text;
      BeneficiaryBank@1210037 : Text;
      BeneficiaryBank2@1210038 : Text;
      BenefeciaryText@1210039 : ARRAY [6] OF Text;
      BankMark@1210040 : Text;
      AmountErr@1210042 : TextConst 'ENU=Cannot be less than 0;RUS=Не может быть меньше 0';
      ReceiverBankMarkTxt@1210043 : TextConst '@@@=Must be translated: Отметки банка получателя;ENU=Receiver bank marks;RUS=Отметки банка получателя';
      PayerBankCity@1210047 : Text;
      PayerKPP@1210051 : Code[30];
      PayerBranch@1210050 : Text;
      BeneficiaryBranch@1210049 : Text;
      BeneficiaryBankCity@1210048 : Text;
      BeneficiaryKPP@1210054 : Text;
      CompStat@1210053 : Text;
      ContrTaxOrgan@1210056 : Text;
      PayNoteTxt@1210005 : TextConst '@@@=Must be translated: Платежное поручение;ENU=PAYMENT ORDER # %1;RUS=ПЛАТЕЖНОЕ ПОРУЧЕНИЕ # %1';
      InkPayNoteTxt@1210003 : TextConst '@@@=Must be translated: Инкассовое\платежное поручение;ENU=COLLECTION\PAYMENT ORDER # %1;RUS=СБОР\ПЛАТЕЖНОЕ ПОРУЧЕНИЕ # %1';
      PayingRequestTxt@1210002 : TextConst '@@@=Must be translated: Платежное требование;ENU=PAYMENT REQUEST # %1;RUS=ЗАПРОС НА ПЛАТЕЖ # %1';
      FileName@1210007 : Text;

    PROCEDURE FormatAmount@1(Amount@1210000 : Decimal) : Text[30];
    BEGIN
      IF ROUND(Amount,1) = Amount THEN
        EXIT(FORMAT(Amount,0,1) + '-00');

      IF ROUND(Amount,0.1) = Amount THEN
        EXIT(CONVERTSTR(FORMAT(Amount,0,1) + '0','.,','--'));

      EXIT(CONVERTSTR(FORMAT(Amount,0,1),'.,','--') );
    END;

    LOCAL PROCEDURE TransferLineValues@1210001(VAR LineValue@1210000 : ARRAY [28] OF Text;CheckEntry@1210001 : Record 272);
    BEGIN
      LineValue[1] := WrittenAmount;
      LineValue[2] := PayerVATRegNo;
      LineValue[3] := PayerKPP;
      LineValue[4] := PayerName + ' ' + PayerName2 + '\' + PayerBranch;
      LineValue[5] := PayerBank + ' ' + PayerBank2 + '\' + PayerBankCity;
      LineValue[6] := BeneficiaryBank + ' ' + BeneficiaryBank2 + '\' + BeneficiaryBankCity;
      LineValue[7] := BeneficiaryVATRegNo ;
      LineValue[8] := BeneficiaryKPP;
      LineValue[9] := BeneficiaryName + ' ' + BeneficiaryName2 + '\' + BeneficiaryBranch;
      LineValue[10] := ContrTaxOrgan;
      LineValue[11] := FormatAmount(DocAmount);
      LineValue[12] := PayerGLAccNo;
      LineValue[13] := PayerBIC;
      LineValue[14] := PayerCurrentAccNo;
      LineValue[15] := BeneficiaryBIC;
      LineValue[16] := BeneficiarySettlAccNo;
      LineValue[17] := BeneficiaryGLNo;
      LineValue[18] := CheckEntry."Payment Type";
      LineValue[19] := CheckEntry."Payment Assignment";
      LineValue[20] := CheckEntry."Payment Code";
      LineValue[21] := LocMgt.Date2Text(CheckEntry."Payment Before Date");
      LineValue[22] := CheckEntry."Payment Subsequence";
      LineValue[23] := CheckEntry.KBK;
      LineValue[24] := CheckEntry.OKATO;
      LineValue[25] := CheckEntry."Tax Period";
      LineValue[26] := CheckEntry."Reason Document No.";
      LineValue[27] := LocMgt.Date2Text(CheckEntry."Reason Document Date");
      LineValue[28] := CheckEntry."Tax Payment Type";
    END;

    PROCEDURE SetFileNameSilent@1210002(NewFileName@1210001 : Text);
    BEGIN
      FileName := NewFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

