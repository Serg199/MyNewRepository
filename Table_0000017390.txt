OBJECT Table 17390 Sick Leave Setup
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sick Leave Setup;
               RUS=Настройка больничного];
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              RUS=Тип];
                                                   OptionCaptionML=[ENU=Payment Percent,Salary Limits,Sick Leave Care,Payment Source;
                                                                    RUS=Процент оплаты,Лимиты зарплаты,Больничный по уходу,Источник выплаты];
                                                   OptionString=Payment Percent,Salary Limits,Sick Leave Care,Payment Source }
    { 2   ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              RUS=Дата начала] }
    { 3   ;   ;Sick Leave Type     ;Option        ;CaptionML=[ENU=Sick Leave Type;
                                                              RUS=Тип больничного];
                                                   OptionCaptionML=[ENU=All,Common Disease,Common Injury,Professional Disease,Work Injury,Family Member Care,Post Vaccination,Quarantine,Sanatory Cure,Pregnancy Leave,Child Care 1.5 years,Child Care 3 years;
                                                                    RUS=Все,Общее заболевание,Общая травма,Проф. заболевание,Произв. травма,Уход за членом семьи,Поствакц. заболевание,Карантин,Санаторное лечение,Беременность,Уход за ребенком до 1.5 лет,Уход за ребенком до 3 лет];
                                                   OptionString=All,Common Disease,Common Injury,Professional Disease,Work Injury,Family Member Care,Post Vaccination,Quarantine,Sanatory Cure,Pregnancy Leave,Child Care 1.5 years,Child Care 3 years }
    { 4   ;   ;Insured Service (Years);Decimal    ;CaptionML=[ENU=Insured Service (Years);
                                                              RUS=Страховой стаж (лет)] }
    { 5   ;   ;Payment %           ;Decimal       ;CaptionML=[ENU=Payment %;
                                                              RUS=Процент оплаты] }
    { 6   ;   ;Payment Benefit Liable;Boolean     ;CaptionML=[ENU=Payment Benefit Liable;
                                                              RUS=Есть льгота по оплате] }
    { 7   ;   ;Minimal Wage Amount ;Decimal       ;CaptionML=[ENU=Minimal Wage Amount;
                                                              RUS=Мин. сумма начисления] }
    { 8   ;   ;Maximal Average Earning;Decimal    ;CaptionML=[ENU=Maximal Average Earning;
                                                              RUS=Макс. средний заработок] }
    { 9   ;   ;Age                 ;Decimal       ;CaptionML=[ENU=Age;
                                                              RUS=Возраст] }
    { 10  ;   ;Treatment Type      ;Option        ;CaptionML=[ENU=Treatment Type;
                                                              RUS=Тип лечения];
                                                   OptionCaptionML=[ENU=" ,Out-Patient,In-Patient";
                                                                    RUS=" ,Амбулаторно,Госпитализация"];
                                                   OptionString=[ ,Out-Patient,In-Patient] }
    { 11  ;   ;Max. Days per Year  ;Decimal       ;CaptionML=[ENU=Max. Days per Year;
                                                              RUS=Макс. дней за год] }
    { 12  ;   ;Max. Days per Document;Decimal     ;CaptionML=[ENU=Max. Days per Document;
                                                              RUS=Макс. дней по документу] }
    { 13  ;   ;Max. Paid Days by FSI;Decimal      ;CaptionML=[ENU=Max. Paid Days by FSI;
                                                              RUS=Макс. дней оплач. ФСС] }
    { 14  ;   ;Other Days Payment %;Decimal       ;CaptionML=[ENU=Other Days Payment %;
                                                              RUS=Процент оплаты прочих дней] }
    { 15  ;   ;Max. Days per Month ;Decimal       ;CaptionML=[ENU=Max. Days per Month;
                                                              RUS=Макс. дней за месяц] }
    { 16  ;   ;First Payment Days  ;Decimal       ;CaptionML=[ENU=First Payment Days;
                                                              RUS=Оплата первых дней] }
    { 17  ;   ;Days after Dismissal;Decimal       ;CaptionML=[ENU=Days after Dismissal;
                                                              RUS=Дни после увольнения] }
    { 18  ;   ;Dismissed           ;Boolean       ;CaptionML=[ENU=Dismissed;
                                                              RUS=Уволен] }
    { 19  ;   ;Disabled Person     ;Boolean       ;CaptionML=[ENU=Disabled Person;
                                                              RUS=Инвалид] }
    { 20  ;   ;Element Code        ;Code20        ;TableRelation="Payroll Element";
                                                   CaptionML=[ENU=Element Code;
                                                              RUS=Код элемента] }
    { 21  ;   ;Payment Source      ;Option        ;CaptionML=[ENU=Payment Source;
                                                              RUS=Источник оплаты];
                                                   OptionCaptionML=[ENU=Employeer,FSI;
                                                                    RUS=Работодатель,ФСС];
                                                   OptionString=Employeer,FSI }
    { 22  ;   ;Posting Group       ;Code20        ;TableRelation="Payroll Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              RUS=Учетная группа] }
    { 23  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
  }
  KEYS
  {
    {    ;Type,Line No.                           ;Clustered=Yes }
    {    ;Type,Starting Date,Sick Leave Type,Element Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1210001 : Record 5200;
      Person@1210000 : Record 17350;
      SickLeaveSetup@1210002 : Record 17390;
      EmployeeJobEntry@1210007 : Record 17363;
      RecordMgt@1210004 : Codeunit 17350;
      CalendarMgt@1210006 : Codeunit 17430;
      ServiceRecord@1210003 : ARRAY [3] OF Integer;
      ServiceYears@1210005 : Decimal;

    PROCEDURE GetPaymentPercent@1210000(VAR AbsenceLine@1210000 : Record 17386);
    VAR
      PrevPostedAbsenceLine@1210001 : Record 17388;
      StartingDate@1210002 : Date;
      EndingDate@1210003 : Date;
    BEGIN
      IF AbsenceLine.FindPreviousAbsenceHeader(PrevPostedAbsenceLine) THEN BEGIN
        AbsenceLine."Payment Percent" := PrevPostedAbsenceLine."Payment Percent"
      END ELSE BEGIN
        Employee.GET(AbsenceLine."Employee No.");
        Person.GET(Employee."Person No.");
        Employee.GetJobEntry(AbsenceLine."Employee No.",AbsenceLine."Start Date",EmployeeJobEntry);

        RecordMgt.CalcEmplInsuredService(Employee,AbsenceLine."Start Date",ServiceRecord);
        IF ServiceRecord[3] = 0 THEN
          ServiceYears := ServiceRecord[2] / 12
        ELSE
          ServiceYears := ServiceRecord[3];

        SickLeaveSetup.RESET;
        SickLeaveSetup.SETCURRENTKEY(Type,"Starting Date");
        SickLeaveSetup.SETRANGE(Type,SickLeaveSetup.Type::"Payment Percent");
        SickLeaveSetup.SETRANGE("Payment Benefit Liable",Person."Sick Leave Payment Benefit");
        SickLeaveSetup.SETRANGE("Starting Date",0D,AbsenceLine."Start Date");
        IF NOT
           (AbsenceLine."Sick Leave Type" = AbsenceLine."Sick Leave Type"::"Pregnancy Leave") OR
           (AbsenceLine."Sick Leave Type" = AbsenceLine."Sick Leave Type"::"Child Care 1.5 years")
        THEN
          SickLeaveSetup.SETRANGE("Insured Service (Years)",0,ServiceYears);
        IF Employee."Termination Date" <> 0D THEN BEGIN
          IF Employee."Termination Date" > AbsenceLine."Start Date" THEN BEGIN
            StartingDate := AbsenceLine."Start Date";
            EndingDate := Employee."Termination Date";
          END ELSE BEGIN
            StartingDate := Employee."Termination Date";
            EndingDate := AbsenceLine."Start Date";
          END;
          SickLeaveSetup.SETRANGE(Dismissed,TRUE);
          SickLeaveSetup.SETFILTER("Days after Dismissal",'%1..',
            CalendarMgt.GetPeriodInfo(
              Employee."Calendar Code",StartingDate,EndingDate,1));
        END ELSE
          SickLeaveSetup.SETRANGE(Dismissed,FALSE);
        SickLeaveSetup.SETRANGE("Sick Leave Type",AbsenceLine."Sick Leave Type");
        IF SickLeaveSetup.FINDLAST THEN
          AbsenceLine."Payment Percent" := SickLeaveSetup."Payment %"
        ELSE BEGIN
          SickLeaveSetup.SETRANGE("Sick Leave Type",SickLeaveSetup."Sick Leave Type"::All);
          IF SickLeaveSetup.FINDLAST THEN
            AbsenceLine."Payment Percent" := SickLeaveSetup."Payment %"
          ELSE
            AbsenceLine."Payment Percent" := 0;
        END;
      END;
    END;

    PROCEDURE GetCarePaymentPercent@1210007(VAR AbsenceLine@1210000 : Record 17386);
    BEGIN
      AbsenceLine.TESTFIELD("Relative Person No.");
      AbsenceLine.TESTFIELD("Start Date");
      Person.GET(AbsenceLine."Relative Person No.");
      Person.GetEntireAge(Person."Birth Date",AbsenceLine."Start Date");
      // check previous sick leave if any

      SickLeaveSetup.RESET;
      SickLeaveSetup.SETCURRENTKEY(Type,"Starting Date");
      SickLeaveSetup.SETRANGE(Type,SickLeaveSetup.Type::"Sick Leave Care");
      SickLeaveSetup.SETRANGE("Element Code",AbsenceLine."Element Code");
      SickLeaveSetup.SETRANGE("Sick Leave Type",AbsenceLine."Sick Leave Type");
      SickLeaveSetup.SETRANGE("Starting Date",0D,AbsenceLine."Start Date");
      SickLeaveSetup.SETRANGE("Treatment Type",AbsenceLine."Treatment Type");
      SickLeaveSetup.SETRANGE(Age,0,
        Person.GetEntireAge(Person."Birth Date",AbsenceLine."Start Date"));
      IF Person.IsDisabled(AbsenceLine."Start Date") THEN
        SickLeaveSetup.SETRANGE("Disabled Person",TRUE);
      IF SickLeaveSetup.FINDLAST THEN
        AbsenceLine."Special Payment Percent" := SickLeaveSetup."Other Days Payment %";
    END;

    PROCEDURE FindFirstAbsenceHeader@1210001(VAR AbsenceLine@1210000 : Record 17386;VAR FirstAbsenceLine@1210001 : Record 17386) Exist : Boolean;
    VAR
      AbsenceHeader@1210002 : Record 17385;
    BEGIN
      Exist := FALSE;
      AbsenceHeader.RESET;
      AbsenceHeader.SETRANGE("Document Type",AbsenceLine."Document Type");
      AbsenceHeader.SETRANGE("No.",AbsenceLine."Document No.");
      IF AbsenceHeader.FINDFIRST THEN
        IF AbsenceLine."Previous Document No." <> '' THEN BEGIN
          FirstAbsenceLine.RESET;
          FirstAbsenceLine.SETRANGE("Document Type",AbsenceHeader."Document Type");
          FirstAbsenceLine.SETRANGE("Document No.",AbsenceLine."Previous Document No.");
          IF FirstAbsenceLine.FINDFIRST THEN
            Exist := TRUE;
        END;
    END;

    PROCEDURE GetEmployerPaymentDay@1210002(VAR AbsenceLine@1210000 : Record 17386);
    VAR
      FirstPostedAbsenceLine@1210002 : Record 17388;
      Days@1210001 : Decimal;
    BEGIN
      SickLeaveSetup.RESET;
      SickLeaveSetup.SETCURRENTKEY(Type,"Starting Date","Sick Leave Type","Element Code");
      SickLeaveSetup.SETRANGE(Type,SickLeaveSetup.Type::"Payment Source");
      SickLeaveSetup.SETRANGE("Starting Date",0D,AbsenceLine."Start Date");
      SickLeaveSetup.SETRANGE("Element Code",AbsenceLine."Element Code");
      IF SickLeaveSetup.FINDLAST THEN
        Days := SickLeaveSetup."First Payment Days"
      ELSE
        Days := 0;
      IF AbsenceLine.FindPreviousAbsenceHeader(FirstPostedAbsenceLine) THEN BEGIN
        IF FirstPostedAbsenceLine."Days Paid by Employer" >= SickLeaveSetup."First Payment Days" THEN
          Days := 0
        ELSE
          Days := SickLeaveSetup."First Payment Days" - FirstPostedAbsenceLine."Days Paid by Employer";
      END;
      IF (Days <> 0) AND (Days >= AbsenceLine."Calendar Days") THEN
        Days := AbsenceLine."Calendar Days";

      AbsenceLine."Days Paid by Employer" := Days;
      AbsenceLine."Payment Days" := AbsenceLine."Calendar Days" - AbsenceLine."Days Paid by Employer";
    END;

    PROCEDURE GetFSIPaymentDays@1210003(VAR AbsenceLine@1210000 : Record 17386);
    VAR
      FirstPostedAbsenceLine@1210001 : Record 17388;
      StartSpecPaymentDate@1210002 : Date;
      PaymentDaysPerYear@1210003 : Decimal;
    BEGIN
      IF AbsenceLine."Sick Leave Type" IN
         [AbsenceLine."Sick Leave Type"::"Family Member Care",
          AbsenceLine."Sick Leave Type"::"Post Vaccination",
          AbsenceLine."Sick Leave Type"::Quarantine]
      THEN BEGIN
        Employee.GetJobEntry(AbsenceLine."Employee No.",AbsenceLine."Start Date",EmployeeJobEntry);
        AbsenceLine.TESTFIELD("Relative Person No.");
        Person.GET(AbsenceLine."Relative Person No.");
        Person.GetEntireAge(Person."Birth Date",AbsenceLine."Start Date");
        SickLeaveSetup.RESET;
        SickLeaveSetup.SETCURRENTKEY(Type,"Starting Date","Sick Leave Type","Element Code");
        SickLeaveSetup.SETRANGE(Type,SickLeaveSetup.Type::"Sick Leave Care");
        SickLeaveSetup.SETRANGE("Starting Date",0D,AbsenceLine."Start Date");
        SickLeaveSetup.SETRANGE("Sick Leave Type",AbsenceLine."Sick Leave Type");
        SickLeaveSetup.SETRANGE(Age,0,
          Person.GetEntireAge(Person."Birth Date",AbsenceLine."Start Date"));
        IF Person.IsDisabled(AbsenceLine."Start Date") THEN
          SickLeaveSetup.SETRANGE("Disabled Person",TRUE)
        ELSE
          SickLeaveSetup.SETRANGE("Treatment Type",AbsenceLine."Treatment Type");

        IF SickLeaveSetup.FINDLAST THEN BEGIN
          IF SickLeaveSetup."Max. Paid Days by FSI" <> 0 THEN BEGIN
            IF AbsenceLine.FindPreviousAbsenceHeader(FirstPostedAbsenceLine) THEN
              StartSpecPaymentDate :=
                CALCDATE('<' + FORMAT(SickLeaveSetup."Max. Paid Days by FSI") + 'D>',FirstPostedAbsenceLine."Start Date")
            ELSE
              StartSpecPaymentDate := CALCDATE('<' + FORMAT(SickLeaveSetup."Max. Paid Days by FSI") + 'D>',AbsenceLine."Start Date");
            IF StartSpecPaymentDate <= AbsenceLine."End Date" THEN BEGIN
              AbsenceLine."Special Payment Days" := CalendarMgt.GetPeriodInfo(
                  EmployeeJobEntry."Calendar Code",StartSpecPaymentDate,AbsenceLine."End Date",1);
              AbsenceLine."Payment Days" :=
                AbsenceLine."Calendar Days" - AbsenceLine."Days Paid by Employer" -
                AbsenceLine."Special Payment Days";
            END ELSE
              AbsenceLine."Payment Days" := AbsenceLine."Calendar Days" - AbsenceLine."Days Paid by Employer";
          END ELSE
            AbsenceLine."Payment Days" := AbsenceLine."Calendar Days" - AbsenceLine."Days Paid by Employer";
          IF AbsenceLine."Days Paid by Employer" >= SickLeaveSetup."Max. Days per Document" THEN BEGIN
            AbsenceLine."Days Paid by Employer" := SickLeaveSetup."Max. Days per Document";
            AbsenceLine."Payment Days" := 0;
            AbsenceLine."Special Payment Days" := 0;
            AbsenceLine."Days Not Paid" := AbsenceLine."Calendar Days" - AbsenceLine."Days Paid by Employer";
          END ELSE
            IF AbsenceLine."Days Paid by Employer" + AbsenceLine."Payment Days" >= SickLeaveSetup."Max. Days per Document" THEN BEGIN
              AbsenceLine."Payment Days" := SickLeaveSetup."Max. Days per Document" - AbsenceLine."Days Paid by Employer";
              AbsenceLine."Special Payment Days" := 0;
              AbsenceLine."Days Not Paid" :=
                AbsenceLine."Calendar Days" - AbsenceLine."Payment Days" - AbsenceLine."Days Paid by Employer";
            END ELSE
              IF AbsenceLine."Days Paid by Employer" + AbsenceLine."Payment Days" + AbsenceLine."Special Payment Days" >=
                 SickLeaveSetup."Max. Days per Document"
              THEN BEGIN
                AbsenceLine."Special Payment Days" :=
                  SickLeaveSetup."Max. Days per Document" - AbsenceLine."Payment Days" - AbsenceLine."Days Paid by Employer";
                AbsenceLine."Days Not Paid" :=
                  AbsenceLine."Calendar Days" - AbsenceLine."Payment Days" -
                  AbsenceLine."Special Payment Days" - AbsenceLine."Days Paid by Employer";
              END;
          IF SickLeaveSetup."Max. Days per Year" <> 0 THEN BEGIN
            PaymentDaysPerYear := AbsenceLine.GetPaymentDaysPerYear;
            IF PaymentDaysPerYear >= SickLeaveSetup."Max. Days per Year" THEN BEGIN
              AbsenceLine."Payment Days" := 0;
              AbsenceLine."Special Payment Days" := 0;
            END;
            IF PaymentDaysPerYear + AbsenceLine."Payment Days" >= SickLeaveSetup."Max. Days per Year" THEN BEGIN
              AbsenceLine."Payment Days" := SickLeaveSetup."Max. Days per Year" - PaymentDaysPerYear;
              AbsenceLine."Special Payment Days" := 0;
            END ELSE BEGIN
              IF PaymentDaysPerYear + AbsenceLine."Payment Days" + AbsenceLine."Special Payment Days" >=
                 SickLeaveSetup."Max. Days per Year"
              THEN
                AbsenceLine."Special Payment Days" :=
                  SickLeaveSetup."Max. Days per Year" - PaymentDaysPerYear - AbsenceLine."Payment Days";
            END;
          END;
        END;
        AbsenceLine."Days Not Paid" :=
          AbsenceLine."Calendar Days" - AbsenceLine."Payment Days" -
          AbsenceLine."Special Payment Days" - AbsenceLine."Days Paid by Employer";
      END;
    END;

    PROCEDURE GetMaxDailyPayment@1210004(PayrollDocLine@1210000 : Record 17415) : Decimal;
    VAR
      EmployeeLedgEntry@1210001 : Record 17413;
    BEGIN
      EmployeeLedgEntry.GET(PayrollDocLine."Employee Ledger Entry No.");

      SickLeaveSetup.RESET;
      SickLeaveSetup.SETRANGE(Type,SickLeaveSetup.Type::"Salary Limits");
      SickLeaveSetup.SETRANGE("Sick Leave Type",EmployeeLedgEntry."Sick Leave Type");
      SickLeaveSetup.SETRANGE("Starting Date",0D,EmployeeLedgEntry."Action Starting Date");
      IF SickLeaveSetup.FINDLAST THEN
        EXIT(SickLeaveSetup."Maximal Average Earning");

      SickLeaveSetup.SETRANGE("Sick Leave Type",SickLeaveSetup."Sick Leave Type"::All);
      IF SickLeaveSetup.FINDLAST THEN
        EXIT(SickLeaveSetup."Maximal Average Earning");

      EXIT(0);
    END;

    PROCEDURE GetMinWageAmount@1210005(PayrollDocLine@1210000 : Record 17415) : Decimal;
    VAR
      EmployeeLedgEntry@1210001 : Record 17413;
    BEGIN
      EmployeeLedgEntry.GET(PayrollDocLine."Employee Ledger Entry No.");

      SickLeaveSetup.RESET;
      SickLeaveSetup.SETRANGE(Type,SickLeaveSetup.Type::"Salary Limits");
      SickLeaveSetup.SETRANGE("Sick Leave Type",EmployeeLedgEntry."Sick Leave Type");
      SickLeaveSetup.SETRANGE("Starting Date",0D,EmployeeLedgEntry."Action Starting Date");

      Employee.GET(PayrollDocLine."Employee No.");
      Employee.GetJobEntry(PayrollDocLine."Employee No.",EmployeeLedgEntry."Action Starting Date",EmployeeJobEntry);

      RecordMgt.CalcEmplInsuredService(Employee,EmployeeLedgEntry."Action Starting Date",ServiceRecord);
      IF ServiceRecord[3] = 0 THEN
        ServiceYears := ServiceRecord[2] / 12
      ELSE
        ServiceYears := ServiceRecord[3];

      SickLeaveSetup.SETRANGE("Insured Service (Years)",0,ServiceYears);
      IF SickLeaveSetup.FINDLAST THEN
        EXIT(SickLeaveSetup."Minimal Wage Amount");

      SickLeaveSetup.SETRANGE("Sick Leave Type",SickLeaveSetup."Sick Leave Type"::All);
      IF SickLeaveSetup.FINDLAST THEN
        EXIT(SickLeaveSetup."Minimal Wage Amount");

      EXIT(0);
    END;

    BEGIN
    END.
  }
}

