OBJECT Page 12449 Item G/L Turnover
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Item G/L Turnover;
               RUS=Товары Оборотная ведомость по ГК];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table27;
    PageType=Worksheet;
    OnOpenPage=BEGIN
                 IF PeriodType = PeriodType::"Accounting Period" THEN
                   FindPeriodUser('')
                 ELSE
                   FindPeriod('');
               END;

    OnAfterGetRecord=BEGIN
                       CalcBalance;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1210010 ;1   ;ActionGroup;
                      CaptionML=[ENU=&Item;
                                 RUS=&Товар];
                      Image=Item }
      { 1210053 ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Card;
                                 RUS=Карточка];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 30;
                      RunPageLink=No.=FIELD(No.);
                      Image=EditLines }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210008 ;1   ;Action    ;
                      CaptionML=[ENU=Previous Period;
                                 RUS=Предыдущий период];
                      ToolTipML=[ENU=Previous Period;
                                 RUS=Предыдущий период];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FindPeriod('<=');
                               END;
                                }
      { 1210009 ;1   ;Action    ;
                      CaptionML=[ENU=Next Period;
                                 RUS=Следующий период];
                      ToolTipML=[ENU=Next Period;
                                 RUS=Следующий период];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FindPeriod('>=');
                               END;
                                }
      { 1210011 ;1   ;ActionGroup;
                      CaptionML=[ENU=&Print;
                                 RUS=&Печать];
                      Image=Print }
      { 1210054 ;2   ;Action    ;
                      CaptionML=[ENU=Turnover Sheet;
                                 RUS=Оборотная ведомость (кол-во)];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Turnover;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 Item.COPY(Rec);
                                 REPORT.RUNMODAL(REPORT::"Item Turnover (Qty.)",TRUE,FALSE,Item);
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210000;1;Group     ;
                CaptionML=[ENU=Options;
                           RUS=Параметры] }

    { 1210002;2;Field     ;
                CaptionML=[ENU=View by;
                           RUS=Просмотр по];
                ToolTipML=[ENU=Day;
                           RUS=День];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 RUS=День,Неделя,Месяц,Квартал,Год,Учетный период];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             CurrPage.UPDATE;
                           END;
                            }

    { 1210001;1;Group     ;
                Name=Matrix;
                Editable=FALSE;
                GroupType=Repeater }

    { 1210023;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="No." }

    { 1210025;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description }

    { 1210027;2;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Base Unit of Measure" }

    { 1210029;2;Field     ;
                CaptionML=[ENU=Starting Quantity;
                           RUS=Начальное количество];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=StartingQuantity;
                OnDrillDown=BEGIN
                              DrillDown(0,0);
                            END;
                             }

    { 1210031;2;Field     ;
                CaptionML=[ENU=Debit Quantity;
                           RUS=Количество по дебету];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=DebitQuantity;
                OnDrillDown=BEGIN
                              DrillDown(1,0);
                            END;
                             }

    { 1210033;2;Field     ;
                CaptionML=[ENU=Credit Quantity;
                           RUS=Количество по кредиту];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=CreditQuantity;
                OnDrillDown=BEGIN
                              DrillDown(2,0);
                            END;
                             }

    { 1210035;2;Field     ;
                CaptionML=[ENU=Ending Quantity;
                           RUS=Конечное количество];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=EndingQuantity;
                OnDrillDown=BEGIN
                              DrillDown(3,0);
                            END;
                             }

    { 1210039;2;Field     ;
                CaptionML=[ENU=Starting Cost;
                           RUS=Начальная себестоимость];
                ApplicationArea=#Basic,#Suite;
                BlankZero=Yes;
                SourceExpr=StartingCost;
                OnDrillDown=BEGIN
                              DrillDown(0,1);
                            END;
                             }

    { 1210049;2;Field     ;
                CaptionML=[ENU=Debit Cost;
                           RUS=Стоимость по дебету];
                ApplicationArea=#Basic,#Suite;
                BlankZero=Yes;
                SourceExpr=DebitCost;
                OnDrillDown=BEGIN
                              DrillDown(1,1);
                            END;
                             }

    { 1210052;2;Field     ;
                CaptionML=[ENU=Credit Cost;
                           RUS=Стоимость по кредиту];
                ApplicationArea=#Basic,#Suite;
                BlankZero=Yes;
                SourceExpr=CreditCost;
                OnDrillDown=BEGIN
                              DrillDown(2,1);
                            END;
                             }

    { 1210041;2;Field     ;
                CaptionML=[ENU=Ending Cost;
                           RUS=Конечная стоимость];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=EndingCost;
                OnDrillDown=BEGIN
                              DrillDown(3,1);
                            END;
                             }

  }
  CODE
  {
    VAR
      UserSetup@1210006 : Record 91;
      Item@1210001 : Record 27;
      ValueEntry@1210007 : Record 5802;
      PeriodType@1210000 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      StartDateFilter@1210004 : Text[50];
      EndDateFilter@1210005 : Text[50];
      DebitQuantity@1210013 : Decimal;
      CreditQuantity@1210012 : Decimal;
      StartingQuantity@1210014 : Decimal;
      EndingQuantity@1210015 : Decimal;
      DebitCost@1210019 : Decimal;
      CreditCost@1210018 : Decimal;
      StartingCost@1210002 : Decimal;
      EndingCost@1210003 : Decimal;

    LOCAL PROCEDURE FindPeriod@1(SearchText@1210000 : Code[10]);
    VAR
      Calendar@1210001 : Record 2000000007;
      PeriodFormManagement@1210003 : Codeunit 359;
    BEGIN
      IF GETFILTER("Date Filter") <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",GETFILTER("Date Filter"));
        IF NOT PeriodFormManagement.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormManagement.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      PeriodFormManagement.FindDate(SearchText,Calendar,PeriodType);
      SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
        SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));

      CalcFilters;
    END;

    PROCEDURE CalcBalance@2();
    BEGIN
      DebitQuantity := 0;
      CreditQuantity := 0;
      StartingQuantity := 0;
      EndingQuantity := 0;

      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY(
        "Item No.","Location Code",
        "Global Dimension 1 Code","Global Dimension 2 Code",
        "Expected Cost",Positive,"Posting Date","Red Storno");
      ValueEntry.SETRANGE("Item No.","No.");
      ValueEntry.SETRANGE("Expected Cost",FALSE);
      COPYFILTER("Global Dimension 1 Filter",ValueEntry."Global Dimension 1 Code");
      COPYFILTER("Global Dimension 2 Filter",ValueEntry."Global Dimension 2 Code");
      COPYFILTER("Location Filter",ValueEntry."Location Code");
      COPYFILTER("Date Filter",ValueEntry."Posting Date");

      CalculateAmounts(ValueEntry,DebitCost,CreditCost,DebitQuantity,CreditQuantity);

      IF EndDateFilter <> '' THEN
        ValueEntry.SETFILTER("Posting Date",EndDateFilter);
      ValueEntry.CALCSUMS("Invoiced Quantity","Cost Amount (Actual)");
      EndingQuantity := ValueEntry."Invoiced Quantity";
      EndingCost := ValueEntry."Cost Amount (Actual)";

      StartingQuantity := 0;
      StartingCost := 0;
      IF StartDateFilter <> '' THEN BEGIN
        ValueEntry.SETFILTER("Posting Date",StartDateFilter);
        ValueEntry.CALCSUMS("Invoiced Quantity","Cost Amount (Actual)");
        StartingQuantity := ValueEntry."Invoiced Quantity";
        StartingCost := ValueEntry."Cost Amount (Actual)";
      END;
    END;

    LOCAL PROCEDURE FindPeriodUser@3(SearchText@1210000 : Code[10]);
    VAR
      Calendar@1210001 : Record 2000000007;
      PeriodFormManagement@1210003 : Codeunit 359;
    BEGIN
      IF UserSetup.GET(USERID) THEN BEGIN
        SETRANGE("Date Filter",UserSetup."Allow Posting From",UserSetup."Allow Posting To");
        IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
          SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
      END ELSE BEGIN
        IF GETFILTER("Date Filter") <> '' THEN BEGIN
          Calendar.SETFILTER("Period Start",GETFILTER("Date Filter"));
          IF NOT PeriodFormManagement.FindDate('+',Calendar,PeriodType) THEN
            PeriodFormManagement.FindDate('+',Calendar,PeriodType::Day);
          Calendar.SETRANGE("Period Start");
        END;
        PeriodFormManagement.FindDate(SearchText,Calendar,PeriodType);
        SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
        IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
          SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
      END;
    END;

    PROCEDURE DrillDown@1210000(Show@1210000 : 'Start,Debit,Credit,Ending';Value@1210001 : 'Quantity,Cost');
    VAR
      TempValueEntry@1210002 : TEMPORARY Record 5802;
    BEGIN
      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY(
        "Item No.","Location Code",
        "Global Dimension 1 Code","Global Dimension 2 Code",
        "Expected Cost",Positive,"Posting Date");
      ValueEntry.SETRANGE("Item No.","No.");
      ValueEntry.SETFILTER("Location Code",GETFILTER("Location Filter"));
      ValueEntry.SETFILTER("Global Dimension 1 Code",GETFILTER("Global Dimension 1 Filter"));
      CASE Show OF
        Show::Start:
          ValueEntry.SETFILTER("Posting Date",StartDateFilter);
        Show::Debit,Show::Credit:
          FillTempValueEntry(Show,TempValueEntry);
        Show::Ending:
          ValueEntry.SETFILTER("Posting Date",EndDateFilter);
      END;
      ValueEntry.SETRANGE("Expected Cost",FALSE);

      IF (Show = Show::Debit) OR (Show = Show::Credit) THEN
        IF Value = Value::Quantity THEN
          PAGE.RUN(0,TempValueEntry,TempValueEntry."Invoiced Quantity")
        ELSE
          PAGE.RUN(0,TempValueEntry,TempValueEntry."Cost Amount (Actual)")
      ELSE
        IF Value = Value::Quantity THEN
          PAGE.RUN(0,ValueEntry,ValueEntry."Invoiced Quantity")
        ELSE
          PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Actual)");
    END;

    PROCEDURE CalcFilters@1470000();
    BEGIN
      StartDateFilter := '';
      EndDateFilter := '';
      IF GETFILTER("Date Filter") <> '' THEN BEGIN
        EndDateFilter := STRSUBSTNO('..%1',GETRANGEMAX("Date Filter"));
        IF GETRANGEMIN("Date Filter") > 0D THEN
          StartDateFilter := STRSUBSTNO('..%1',CALCDATE('<-1D>',GETRANGEMIN("Date Filter")));
      END;
    END;

    PROCEDURE FillTempValueEntry@1210042(Show@1210000 : 'Start,Debit,Credit,Ending';VAR TempValueEntry@1210001 : TEMPORARY Record 5802);
    BEGIN
      TempValueEntry.COPYFILTERS(ValueEntry);
      TempValueEntry.SETFILTER("Posting Date",GETFILTER("Date Filter"));
      IF ValueEntry.FINDSET THEN
        REPEAT
          TempValueEntry.INIT;
          TempValueEntry := ValueEntry;
          IF ((Show = Show::Debit) AND TempValueEntry.IsDebit) OR
             ((Show = Show::Credit) AND NOT TempValueEntry.IsDebit)
          THEN
            IF TempValueEntry.INSERT THEN;
        UNTIL ValueEntry.NEXT = 0;
    END;

    PROCEDURE CalculateAmounts@1210006(VAR ValueEntry@1210004 : Record 5802;VAR DebitCost@1210000 : Decimal;VAR CreditCost@1210001 : Decimal;VAR DebitQty@1210002 : Decimal;VAR CreditQty@1210003 : Decimal);
    VAR
      TempValueEntry@1210009 : Record 5802;
    BEGIN
      TempValueEntry.COPYFILTERS(ValueEntry);

      DebitCost := 0;
      CreditCost := 0;
      DebitQty := 0;
      CreditQty := 0;

      WITH TempValueEntry DO
        IF FINDSET THEN
          REPEAT
            IF IsDebit THEN BEGIN
              DebitCost := DebitCost + "Cost Amount (Actual)";
              DebitQty := DebitQty + "Invoiced Quantity";
            END ELSE BEGIN
              CreditCost := CreditCost - "Cost Amount (Actual)";
              CreditQty := CreditQty - "Invoiced Quantity";
            END;
          UNTIL NEXT = 0;
    END;

    BEGIN
    END.
  }
}

