OBJECT Report 50137 Acc. Schedule Alloc. Template
{
  OBJECT-PROPERTIES
  {
    Date=27.03.17;
    Time=14:18:13;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Acc. Schedule by Allocation Template;
               RUS=Создать Фин. Отчет по Шаблону Распределения];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 3756;    ;DataItem;                    ;
               DataItemTable=Table50025;
               OnPreDataItem=BEGIN
                               Indicator.OPEN(STRSUBSTNO(Text010) + '\' +
                                              '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');
                               LineCount := "Cover Sheet Template".COUNT;
                             END;

               OnAfterGetRecord=VAR
                                  AccShedLine1@1000000000 : Record 85;
                                  ColumnFormula@1000000001 : Text[250];
                                BEGIN
                                  LineCounter := LineCounter+1;
                                  AccScheduleName.INIT;
                                  AccScheduleName.Name :='AL-'+"Cover Sheet Template".Code;
                                  AccScheduleName.Description := "Cover Sheet Template".Description;
                                  AccScheduleName."Default Column Layout" := 'AL-'+"Cover Sheet Template".Code;
                                  IF NOT AccScheduleName.INSERT THEN AccScheduleName.MODIFY;

                                  AccShedLine1.RESET;
                                  AccShedLine1.SETRANGE("Schedule Name",AccScheduleName.Name);
                                  AccShedLine1.DELETEALL;

                                  AllocationofCost.RESET;
                                  AllocationofCost.SETRANGE("Allocation Dim. 1 Relation","Cover Sheet Template".Code);
                                  IF AllocationofCost.FINDFIRST THEN
                                  BEGIN
                                    IF (AllocationofCost."G/L Account Filter"<>'') THEN BEGIN
                                      GLAccount.RESET;
                                      GLAccount.SETFILTER("No.",AllocationofCost."G/L Account Filter");
                                      IF GLAccount.FINDSET THEN
                                        REPEAT
                                          LineNoAccSched := GetNextLineNo(AccScheduleName.Name);
                                          InsertAccSchedLine(AccScheduleName.Name,LineNoAccSched,GLAccount."No.",'','','','','',FALSE);

                                        UNTIL GLAccount.NEXT=0;

                                       IF NOT AllocationofCost."Not Change G/L Acc. No." THEN BEGIN
                                         LineNoAccSched := GetNextLineNo(AccScheduleName.Name);
                                         InsertAccSchedLine(AccScheduleName.Name,LineNoAccSched,AllocationofCost."G/L Account Filter",'','','','','',TRUE);
                                       END;

                                    END;
                                  END;

                                  ColumnLayoutName.INIT;
                                  ColumnLayoutName.Name := 'AL-'+"Cover Sheet Template".Code;
                                  ColumnLayoutName.Description := "Cover Sheet Template".Description;
                                  IF NOT ColumnLayoutName.INSERT THEN ColumnLayoutName.MODIFY;
                                  L:=0;

                                  ColumnLayout.RESET;
                                  ColumnLayout.SETRANGE("Column Layout Name",ColumnLayoutName.Name);
                                  ColumnLayout.DELETEALL;

                                  AllocationofCost.RESET;
                                  AllocationofCost.SETRANGE("Allocation Dim. 1 Relation","Cover Sheet Template".Code);
                                  IF AllocationofCost.FINDFIRST THEN
                                  BEGIN
                                    IF (AllocationofCost."Allocation Dim. 1 Filter"<>'') THEN BEGIN
                                      AllocationUnit.RESET;
                                      AllocationUnit.SETFILTER(AllocationUnit.Code,AllocationofCost."Allocation Dim. 1 Filter");
                                      ColumnFormula :='';
                                      IF AllocationUnit.FINDSET THEN
                                        REPEAT
                                          L +=10;
                                          LineNo +=1000;
                                          ColumnLayout.INIT;
                                          ColumnLayout."Column Layout Name" := ColumnLayoutName.Name;
                                          ColumnLayout."Line No." :=LineNo;
                                          IF STRLEN(FORMAT(L))=1 THEN
                                            ColumnLayout."Column No." :='L00'+ FORMAT(L);
                                          IF STRLEN(FORMAT(L))=2 THEN
                                            ColumnLayout."Column No." :='L0'+ FORMAT(L);
                                          IF STRLEN(FORMAT(L))=3 THEN
                                            ColumnLayout."Column No." :='L'+ FORMAT(L);
                                          ColumnLayout."Column Header" := AllocationUnit.Description;
                                          ColumnLayout."Column Type" :=ColumnLayout."Column Type"::"Net Change";
                                          ColumnLayout."Ledger Entry Type" := ColumnLayout."Ledger Entry Type"::Entries;
                                          ColumnLayout."Amount Type" := ColumnLayout."Amount Type"::"Net Amount";
                                          ColumnLayout."Dimension 1 Totaling" := AllocationUnit.Code;

                                          IF L=10 THEN
                                            ColumnFormula :=ColumnLayout."Column No."
                                          ELSE
                                            ColumnFormula :=ColumnFormula + '+' + ColumnLayout."Column No.";

                                          IF NOT ColumnLayout.INSERT THEN ColumnLayout.MODIFY;
                                        UNTIL AllocationUnit.NEXT=0;
                                        IF ColumnFormula<>'' THEN BEGIN
                                          LineNo +=1000;
                                          ColumnLayout.INIT;
                                          ColumnLayout."Column Layout Name" := ColumnLayoutName.Name;
                                          ColumnLayout."Line No." :=LineNo;
                                          IF STRLEN(FORMAT(L))=1 THEN
                                            ColumnLayout."Column No." :='L00'+ FORMAT(L);
                                          IF STRLEN(FORMAT(L))=2 THEN
                                            ColumnLayout."Column No." :='L0'+ FORMAT(L);
                                          IF STRLEN(FORMAT(L))=3 THEN
                                            ColumnLayout."Column No." :='L'+ FORMAT(L);
                                          ColumnLayout."Column Header" := 'TOTAL';
                                          ColumnLayout."Column Type" :=ColumnLayout."Column Type"::Formula;
                                          ColumnLayout."Ledger Entry Type" := ColumnLayout."Ledger Entry Type"::Entries;
                                          ColumnLayout."Amount Type" := ColumnLayout."Amount Type"::"Net Amount";
                                          ColumnLayout.Formula := COPYSTR(ColumnFormula,1,MAXSTRLEN(ColumnLayout.Formula));
                                          IF NOT ColumnLayout.INSERT THEN ColumnLayout.MODIFY;
                                        END;
                                    END;
                                    IF AllocationofCost."Allocation Dim. 1 General" THEN BEGIN
                                      AllocationUnit.RESET;
                                      AllocationUnit.SETRANGE(General,TRUE);
                                      IF AllocationUnit.FINDSET THEN
                                        REPEAT
                                          L +=10;
                                          LineNo +=1000;
                                          ColumnLayout.INIT;
                                          ColumnLayout."Column Layout Name" := ColumnLayoutName.Name;
                                          ColumnLayout."Line No." :=LineNo;

                                          IF STRLEN(FORMAT(L))=2 THEN
                                            ColumnLayout."Column No." :='L000'+ FORMAT(L);
                                          IF STRLEN(FORMAT(L))=3 THEN
                                            ColumnLayout."Column No." :='L00'+ FORMAT(L);
                                          IF STRLEN(FORMAT(L))=4 THEN
                                            ColumnLayout."Column No." :='L0'+ FORMAT(L);
                                          IF STRLEN(FORMAT(L))=5 THEN
                                            ColumnLayout."Column No." :='L'+ FORMAT(L);
                                          ColumnLayout."Column Header" := AllocationUnit.Description;
                                          ColumnLayout."Column Type" :=ColumnLayout."Column Type"::"Net Change";
                                          ColumnLayout."Ledger Entry Type" := ColumnLayout."Ledger Entry Type"::Entries;
                                          ColumnLayout."Amount Type" := ColumnLayout."Amount Type"::"Net Amount";
                                          ColumnLayout."Dimension 1 Totaling" := AllocationUnit.Code;

                                          IF NOT ColumnLayout.INSERT THEN ColumnLayout.MODIFY;
                                        UNTIL AllocationUnit.NEXT=0;
                                    END;

                                  END;
                                  Indicator.UPDATE(1, ROUND(LineCounter * (10000 / LineCount),1));
                                END;

               OnPostDataItem=BEGIN
                                Indicator.CLOSE;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      AllocationofCost@1101495000 : Record 50010;
      AllocationUnit@1101495001 : Record 50175;
      ColumnLayoutName@1101495002 : Record 333;
      ColumnLayout@1101495003 : Record 334;
      AccScheduleName@1101495006 : Record 84;
      L@1101495004 : Integer;
      LineNo@1101495005 : Integer;
      GLAccount@1101495007 : Record 15;
      LineNoAccSched@1101495008 : Integer;
      LineCount@1101495009 : Integer;
      Text010@1101495010 : TextConst 'ENU=Driver Value Calculation for Template %1;RUS=Создание Фин. Отчет для Шаблонов Распределения';
      LineCounter@1101495011 : Integer;
      Indicator@1101495012 : Dialog;

    PROCEDURE InsertAccSchedLine@1210001(AccSchedCode@1210000 : Code[10];LineNo@1210001 : Integer;AccountGrouping@1210002 : Text[80];BusinessUnit1@1210003 : Code[20];Dim1Totaling@1210004 : Code[20];Dim2Totaling@1210005 : Code[20];Dim3Totaling@1210006 : Code[20];Dim4Totaling@1210007 : Code[20];IsReallocation@1101495002 : Boolean);
    VAR
      Dim2TotalingName@1210008 : Text[250];
      DimValue3@1210009 : Record 349;
      GLAccount3@1210010 : Record 15;
      AccShedLine@1101495000 : Record 85;
      i@1101495001 : Integer;
    BEGIN

      AccShedLine.INIT;
      AccShedLine.VALIDATE("Schedule Name",AccSchedCode);
      AccShedLine.VALIDATE("Line No.",LineNo);

      Dim2TotalingName := AccountGrouping;
      IF NOT IsReallocation THEN BEGIN
        AccShedLine.VALIDATE("Row No.",AccountGrouping);
        IF GLAccount3.GET(AccountGrouping) THEN BEGIN
          Dim2TotalingName := GLAccount3.Name;
          IF GLAccount3.Indentation>0 THEN BEGIN
            FOR i:=1 TO GLAccount3.Indentation DO BEGIN
               Dim2TotalingName :=INSSTR(Dim2TotalingName,' ',1);
            END;
          END;
        END;
      END;
      IF IsReallocation THEN
        Dim2TotalingName := 'TOTAL';
      AccShedLine.VALIDATE(Description, COPYSTR(Dim2TotalingName,1,MAXSTRLEN(AccShedLine.Description)));
      AccShedLine.VALIDATE(Totaling,AccountGrouping);
      AccShedLine.VALIDATE("Totaling Type",AccShedLine."Totaling Type"::"Posting Accounts");
      AccShedLine.VALIDATE("Business Unit Totaling",BusinessUnit1);
      AccShedLine.VALIDATE("Dimension 1 Totaling",Dim1Totaling);
      AccShedLine.VALIDATE("Dimension 2 Totaling",Dim2Totaling);
      AccShedLine.VALIDATE("Dimension 3 Totaling",Dim3Totaling);
      AccShedLine.VALIDATE("Dimension 4 Totaling",Dim4Totaling);
      IF GLAccount3."Account Type"<>GLAccount3."Account Type"::Posting THEN
        AccShedLine.Bold :=TRUE;
      AccShedLine.INSERT;
    END;

    PROCEDURE GetNextLineNo@1210002(AccShedName@1210000 : Code[10]) : Integer;
    VAR
      AccShedLine@1210001 : Record 85;
    BEGIN
      AccShedLine.RESET;
      AccShedLine.SETRANGE("Schedule Name",AccShedName);
      IF AccShedLine.FINDLAST THEN
        EXIT(AccShedLine."Line No." + 1000);
      EXIT(1000);
    END;

    BEGIN
    {
      NC NCS-1820 DP Перенос функциональности MIS
    }
    END.
  }
  RDLDATA
  {
  }
}

