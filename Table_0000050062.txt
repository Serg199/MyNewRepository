OBJECT Table 50062 Job Processes
{
  OBJECT-PROPERTIES
  {
    Date=23.05.17;
    Time=18:32:20;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=[ENU=Job Processes;
               RUS=Задачи по Процессам];
    LookupPageID=Page50129;
    DrillDownPageID=Page50129;
  }
  FIELDS
  {
    { 1   ;   ;Company No.         ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company No.;
                                                              RUS=Фирма Но.] }
    { 5   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Строка Но.] }
    { 10  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              RUS=Блокирован] }
    { 15  ;   ;Process             ;Code20        ;TableRelation="Business Process";
                                                   CaptionML=[ENU=Process;
                                                              RUS=Процесс] }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 25  ;   ;Auto Start          ;Boolean       ;CaptionML=[ENU=Auto Start;
                                                              RUS=Автоматический Запуск] }
    { 30  ;   ;Dependency          ;Integer       ;TableRelation="Job Processes"."Line No." WHERE (Company No.=FIELD(Company No.),
                                                                                                   Dependency=CONST(0),
                                                                                                   Process=FIELD(Process));
                                                   CaptionML=[ENU=Dependency;
                                                              RUS=Зависимость] }
    { 35  ;   ;Type Processing     ;Option        ;OnValidate=BEGIN
                                                                Company.GET("Company No.");
                                                                "Name Service NAS" := Company."NAS Service Name";

                                                                IF "Type Processing" IN ["Type Processing"::" ","Type Processing"::Reference] THEN
                                                                  VALIDATE(Processor,'');
                                                              END;

                                                   CaptionML=[ENU=Type Processing;
                                                              RUS=Тип Обработки];
                                                   OptionCaptionML=[ENU=" ,Reference,Cons. Source,Posting,Packet Task,Program Module,Document Posting";
                                                                    RUS=" ,Справочник,Ист.Консолидации,Учет,Пакетное Задание,Программный Модуль,Учет Документов"];
                                                   OptionString=[ ,Reference,Cons. Source,Posting,Packet Task,Program Module,Document Posting] }
    { 36  ;   ;Type Reference      ;Option        ;OnValidate=BEGIN
                                                                IF "Type Processing" IN ["Type Processing"::" ","Type Processing"::Reference] THEN
                                                                  VALIDATE(Processor,'');
                                                              END;

                                                   CaptionML=[ENU=Type Reference;
                                                              RUS=Тип Справочника];
                                                   OptionCaptionML=[ENU=All,General,LE;
                                                                    RUS=Все,Общие,Юрлицо];
                                                   OptionString=All,General,LE }
    { 40  ;   ;Processor           ;Code20        ;OnValidate=BEGIN
                                                                {
                                                                Company.GET("Company No.");

                                                                CASE "Type Processing" OF
                                                                  "Type Processing"::" " :
                                                                     Description := '';
                                                                  "Type Processing"::Reference :
                                                                    BEGIN
                                                                      Description := STRSUBSTNO('%1-%2',"Type Processing","Type Reference");
                                                                      "Import Format" := 0;
                                                                      "Name Service NAS" := Company."NAS Service Name";
                                                                      "External Source" := '';
                                                                    END;
                                                                  "Type Processing"::"Cons. Source",
                                                                  "Type Processing"::Posting,
                                                                  //NC MTF01 > PCH
                                                                  "Type Processing"::"Document Posting" :
                                                                  //NC MTF01 < PCH
                                                                    BEGIN
                                                                      TESTFIELD("Company No.");
                                                                      ConsSource.CHANGECOMPANY("Company No.");
                                                                      ConsSource.GET(Processor);
                                                                      //NC S1893 > PCH
                                                                      GLSetup.CHANGECOMPANY("Company No.");
                                                                      GLSetup.GET;
                                                                      //NC S1893 < PCH

                                                                      Description := ConsSource.Name;
                                                                      "Import Format" := ConsSource."Import Format";
                                                                      "Name Service NAS" := Company."NAS Service Name";

                                                                      IF (ConsSource."Import Format" IN ["Import Format"::FromExtSystem,"Import Format"::OperationFromExtSystem]) AND
                                                                         NOT ConsSource."Use External File" THEN
                                                                        "External Source" := ConsSource."External System"
                                                                      //NC S1893 > PCH
                                                                      ELSE IF GLSetup."Use Bus.Unit for Separ. Trans." AND
                                                                              (ConsSource."Import Format" = "Import Format"::FromBufferNAV) AND
                                                                         NOT ConsSource."Use External File" THEN
                                                                        "External Source" := Company."Legal Entity Id"
                                                                      //NC S1893 < PCH
                                                                      //NC MIO20,MIO55 > PCH
                                                                      ELSE IF (ConsSource."Import Format" = "Import Format"::FromBufferNAV) AND
                                                                         NOT ConsSource."Use External File" THEN
                                                                        "External Source" := ConsSource."Business Unit Code"
                                                                      //NC MIO20,MIO55 < PCH
                                                                      ELSE
                                                                        "External Source" := ConsSource."Company Name";
                                                                    END;
                                                                  "Type Processing"::"Packet Task",
                                                                  "Type Processing"::"Program Module" :
                                                                    BEGIN
                                                                      Object.RESET;
                                                                      IF "Type Processing" = "Type Processing"::"Packet Task" THEN
                                                                        ObjectType := Object.Type::Report
                                                                      ELSE
                                                                        ObjectType := Object.Type::Codeunit;
                                                                      IF Processor <> '' THEN BEGIN
                                                                        EVALUATE(VarInt,Processor);
                                                                        Object.GET(ObjectType,'',VarInt);
                                                                        Object.CALCFIELDS(Caption);
                                                                        Description := Object.Caption;
                                                                      END ELSE
                                                                        Description := '';

                                                                      "Import Format" := 0;
                                                                      "Name Service NAS" := Company."NAS Service Name";
                                                                      "External Source" := '';
                                                                    END;
                                                                END;
                                                                }
                                                              END;

                                                   OnLookup=BEGIN
                                                              {
                                                              CASE "Type Processing" OF
                                                                "Type Processing"::" " :
                                                                  ;
                                                                "Type Processing"::Reference :
                                                                  ;
                                                                "Type Processing"::"Cons. Source",
                                                                "Type Processing"::Posting :
                                                                  BEGIN
                                                                    CLEAR(ConsSourceListForm);
                                                                    TESTFIELD("Company No.");
                                                                    ConsSource.CHANGECOMPANY("Company No.");
                                                                    IF ConsSource.GET(Processor) THEN ;
                                                                    ConsSourceListForm.SETTABLEVIEW(ConsSource);
                                                                    ConsSourceListForm.SETRECORD(ConsSource);
                                                                    ConsSourceListForm.ChangeComn("Company No.");
                                                                    ConsSourceListForm.LOOKUPMODE := TRUE;
                                                                    IF ACTION::LookupOK = ConsSourceListForm.RUNMODAL THEN BEGIN
                                                                      ConsSourceListForm.GETRECORD(ConsSource);
                                                                      VALIDATE(Processor,ConsSource.Code);
                                                                    END;
                                                                  END;
                                                                "Type Processing"::"Packet Task",
                                                                "Type Processing"::"Program Module" :
                                                                  BEGIN
                                                                    CLEAR(ObjectForm);
                                                                    Object.RESET;
                                                                    IF "Type Processing" = "Type Processing"::"Packet Task" THEN
                                                                      ObjectType := Object.Type::Report
                                                                    ELSE
                                                                      ObjectType := Object.Type::Codeunit;
                                                                    Object.SETRANGE(Type,ObjectType);
                                                                    IF Processor = '' THEN
                                                                      VarInt := 0
                                                                    ELSE
                                                                      EVALUATE(VarInt,Processor);
                                                                    IF Object.GET(ObjectType,'',VarInt) THEN ;
                                                                    ObjectForm.SETTABLEVIEW(Object);
                                                                    ObjectForm.SETRECORD(Object);
                                                                    ObjectForm.LOOKUPMODE := TRUE;
                                                                    IF ACTION::LookupOK = ObjectForm.RUNMODAL THEN BEGIN
                                                                      ObjectForm.GETRECORD(Object);
                                                                      VALIDATE(Processor,FORMAT(Object.ID));
                                                                    END;
                                                                  END;
                                                              END;
                                                              }
                                                            END;

                                                   CaptionML=[ENU=Processor;
                                                              RUS=Обработчик] }
    { 41  ;   ;Data Check          ;Boolean       ;CaptionML=[ENU=Check If Data;
                                                              RUS=Проверка Наличия Данных] }
    { 42  ;   ;Check Uniqueness    ;Boolean       ;CaptionML=[ENU=Check Uniqueness;
                                                              RUS=Проверка Уникальности] }
    { 45  ;   ;Status Monitor      ;Option        ;CaptionML=[ENU=Status Monitor;
                                                              RUS=Статус Монитора];
                                                   OptionCaptionML=[ENU=" ,Reference,Loading Buffer,Transformation,Posting Gen. Journal,Consolidation,Packet Task";
                                                                    RUS=" ,Справочник,Загрузка Буфера,Трансформация,Учет. Фин. Журнала,Консолидация,Пер.Задание"];
                                                   OptionString=[ ,Reference,Loading Buffer,Transformation,Posting Gen. Journal,Consolidation,Packet Task] }
    { 50  ;   ;Import Format       ;Option        ;CaptionML=[ENU=Import Format;
                                                              RUS=Формат Импорта];
                                                   OptionCaptionML=[ENU=From Ext. System,From Buffer,From NAV,Operation From Ext. System,Operation From Buffer,From Buffer NAV,From PreBuffer Deal Entry,From Buffer Deal Entry,EventUpload,FIOperation;
                                                                    RUS=Загрузка из Внеш. Системы,Загрузка данных из Буфера,Загрузка из фирмы NAV,Загрузка Операций из Внеш. Системы,Загрузка Операций из Буфера,Загрузка данных из Буфера NAV,Загрузка Операций по Сделкам,Обработка Операций по Сделкам,Загрузка Событий,ФИОперации];
                                                   OptionString=FromExtSystem,FromBuffer,FromNavision,OperationFromExtSystem,OperationFromBuffer,FromBufferNAV,FromPreBufferDealEntry,FromBufferDealEntry,EventUpload,FIOperation }
    { 55  ;   ;External Source     ;Text30        ;CaptionML=[ENU=External Source;
                                                              RUS=Внешний Источник] }
    { 60  ;   ;Name Service NAS    ;Code30        ;TableRelation="NAS Service"."Name Service NAS" WHERE (Company No.=FIELD(Company No.));
                                                   CaptionML=[ENU=Name Service NAS;
                                                              RUS=Название Сервиса NAS] }
    { 61  ;   ;Name Server NAS     ;Code30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("NAS Service"."Name Server NAS" WHERE (Name Service NAS=FIELD(Name Service NAS)));
                                                   CaptionML=[ENU=Name Server NAS;
                                                              RUS=Название Сервера NAS];
                                                   Description=NC MDM01 PCH;
                                                   Editable=No }
    { 100 ;   ;Use Parameters      ;Boolean       ;CaptionML=[ENU=Use Parameters;
                                                              RUS=Использовать Параметры] }
    { 105 ;   ;Date Parameter      ;Date          ;CaptionML=[ENU=Date Parameter;
                                                              RUS=Дата Параметр] }
    { 110 ;   ;Report No. Parameter;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Report));
                                                   CaptionML=[ENU=Report No. Parameter;
                                                              RUS=Отчет Но. Параметр] }
    { 50400;  ;Opened Period Start Date;Date      ;CaptionML=[ENU=Opened Period Start Date;
                                                              RUS=Начало Открытого Периода];
                                                   Description=NC MDM08 PCH }
    { 50401;  ;Legal Entity Type   ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Company."Legal Entity Type" WHERE (Name=FIELD(Company No.)));
                                                   TableRelation="Legal Entity Type";
                                                   CaptionML=[ENU=Legal Entity Type;
                                                              RUS=Тип Компании];
                                                   Description=NC PIF001;
                                                   Editable=No }
    { 50405;  ;Pending Transactions;Option        ;CaptionML=[ENU=Pending Transactions;
                                                              RUS=Необработанные Проводки];
                                                   OptionCaptionML=[ENU=OK,Buffer,Processing;
                                                                    RUS=OK,Буфер,Обработка];
                                                   OptionString=OK,Buffer,Processing;
                                                   Description=NC MDM08 PCH }
    { 50410;  ;Blocked Processiing ;Boolean       ;CaptionML=[ENU=Blocked Processiing;
                                                              RUS=Блокировка Обработки];
                                                   Description=NC MDM08 PCH }
    { 50415;  ;Processing Status   ;Option        ;CaptionML=[ENU=Processing Status;
                                                              RUS=Статус Обработки];
                                                   OptionCaptionML=[ENU=Idle,References,Buffer Processing,Transformation,Posting to G/L,Consolidation,Periodic Task;
                                                                    RUS=Простой,Справочник,Обработка Буфера,Трансформация,Учет. Фин. Журнала,Консолидация,Пер. Задание];
                                                   OptionString=Idle,References,Buffer Processing,Transformation,Posting to G/L,Consolidation,Periodic Task;
                                                   Description=NC MDM08 PCH }
    { 50420;  ;Proc. Status Changed;DateTime      ;CaptionML=[ENU=Proc. Status Changed;
                                                              RUS=Статус Обработки Изменен];
                                                   Description=NC MDM08 PCH }
    { 50425;  ;Entries in Load Buffer;Integer     ;CaptionML=[ENU=Entries in Load Buffer;
                                                              RUS=Нов. Проводок в Буф. Загрузки];
                                                   BlankZero=Yes;
                                                   Description=NC MDM08 PCH }
    { 50426;  ;Errors in Load Buffer;Integer      ;CaptionML=[ENU=Errors in Load Buffer;
                                                              RUS=Ошибок в Буф. Загрузки];
                                                   BlankZero=Yes;
                                                   Description=NC MDM08 PCH }
    { 50430;  ;Entries in Buffer   ;Integer       ;CaptionML=[ENU=Entries in Buffer;
                                                              RUS=Проводок в Буфере];
                                                   BlankZero=Yes;
                                                   Description=NC MDM08 PCH }
    { 50435;  ;Entries with an Error;Integer      ;CaptionML=[ENU=Entries with an Error;
                                                              RUS=Проводок с Ошибкой];
                                                   BlankZero=Yes;
                                                   Description=NC MDM08 PCH }
    { 50440;  ;Not Posted Entries  ;Integer       ;CaptionML=[ENU=Not Posted Entries;
                                                              RUS=Неучтенных Проводок в Фин. Журнале];
                                                   BlankZero=Yes;
                                                   Description=NC MDM08 PCH }
    { 50445;  ;Last Entry Posting Time;DateTime   ;CaptionML=[ENU=Last Entry Posting Time;
                                                              RUS=Последняя Проводка Учтена];
                                                   Description=NC MDM08 PCH }
    { 50450;  ;Recons. Status      ;Option        ;CaptionML=[ENU=Recons. Status;
                                                              RUS=Статус Выверки];
                                                   OptionCaptionML=[ENU=Data Processing & Verif.,Verification Completed,All Tasks Completed;
                                                                    RUS=Обработка и Выверка Данных,Выверка Завершена,Все Завершено];
                                                   OptionString=Data Processing & Verif.,Verification Completed,All Tasks Completed;
                                                   Description=NC MDM08 PCH }
    { 50455;  ;Recons. Status Changed;DateTime    ;CaptionML=[ENU=Recons. Status Changed;
                                                              RUS=Статус Выверки Изменен];
                                                   Description=NC MDM08 PCH }
    { 50500;  ;Cons. Blocked       ;Boolean       ;CaptionML=[ENU=Cons. Blocked;
                                                              RUS=Блокир. Консолидации];
                                                   Description=NC MDM08 PCH }
    { 50505;  ;Cons. Status        ;Option        ;CaptionML=[ENU=Cons. Status;
                                                              RUS=Статус Консолидации];
                                                   OptionCaptionML=[ENU=Idle,References,Buffer Processing,Transformation,Posting to G/L,Consolidation,Periodic Task;
                                                                    RUS=Простой,Справочник,Обработка Буфера,Трансформация,Учет. Фин. Журнала,Консолидация,Пер. Задание];
                                                   OptionString=Idle,References,Buffer Processing,Transformation,Posting to G/L,Consolidation,Periodic Task;
                                                   Description=NC MDM08 PCH }
    { 50510;  ;Cons. Status Changed;DateTime      ;CaptionML=[ENU=Cons. Status Changed;
                                                              RUS=Статус Консолидации Изменен];
                                                   Description=NC MDM08 PCH }
    { 50515;  ;Entries to Consolidate;Integer     ;CaptionML=[ENU=Entries to Consolidate;
                                                              RUS=Операций для Консолидации];
                                                   BlankZero=Yes;
                                                   Description=NC MDM08 PCH }
    { 50520;  ;Last Entry Consolidated;DateTime   ;CaptionML=[ENU=Last Entry Consolidated;
                                                              RUS=Последняя Операция Консолидирована];
                                                   Description=NC MDM08 PCH }
    { 50521;  ;Comments            ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Company.Comments WHERE (Name=FIELD(Company No.)));
                                                   CaptionML=[ENU=Comments;
                                                              RUS=Комментарии];
                                                   Description=NC PIF001 }
    { 51000;  ;Operations in Load Buffer;Integer  ;CaptionML=[ENU=Operations in Load Buffer;
                                                              RUS=Нов. Операций в Буф. Загрузки];
                                                   BlankZero=Yes;
                                                   Description=NC MTF01 PCH }
    { 51005;  ;Errors in Load Oper. Buffer;Integer;CaptionML=[ENU=Errors in Load Oper. Buffer;
                                                              RUS=Ошибок в Буф. Загрузки Операций];
                                                   BlankZero=Yes;
                                                   Description=NC MTF01 PCH }
    { 51010;  ;Operations in Buffer;Integer       ;CaptionML=[ENU=Operations in Buffer;
                                                              RUS=Операций в Буфере];
                                                   BlankZero=Yes;
                                                   Description=NC MTF01 PCH }
    { 51015;  ;Operations with an Error;Integer   ;CaptionML=[ENU=Operations with an Error;
                                                              RUS=Операций с Ошибкой];
                                                   BlankZero=Yes;
                                                   Description=NC MTF01 PCH }
    { 51020;  ;Not Posted Sales Documents;Integer ;CaptionML=[ENU=Not Posted Sales Documents;
                                                              RUS=Неучтенных Документов Продажи];
                                                   Description=NC MTF01 RD }
    { 51030;  ;Not Posted Purchase Documents;Integer;
                                                   CaptionML=[ENU=Not Posted Purchase Documents;
                                                              RUS=Неучтенных Документов Покупки];
                                                   Description=NC MTF01 RD }
    { 51035;  ;Entries in Buffer NAV;Integer      ;CaptionML=[ENU=Entries in Buffer NAV;
                                                              RUS=Полупроводок в Буфере NAV];
                                                   BlankZero=Yes;
                                                   Description=NC MIO-10 DP }
    { 51040;  ;Error in Buffer NAV ;Integer       ;CaptionML=[ENU=Error in Buffer NAV;
                                                              RUS=Ошибок в Буфере NAV];
                                                   BlankZero=Yes;
                                                   Description=NC MIO-10 DP }
    { 51045;  ;Entries in Load Buffer Deal;Integer;CaptionML=[ENU=Entries in Load Buffer Deal;
                                                              RUS=Нов. Проводок в Буф. Загрузки Сделок];
                                                   BlankZero=Yes;
                                                   Description=NC S622 PCH }
    { 51050;  ;Errors in Load Buffer Deal;Integer ;CaptionML=[ENU=Errors in Load Buffer Deal;
                                                              RUS=Ошибок в Буф. Загрузки Сделок];
                                                   Description=NC S622 PCH }
    { 51055;  ;Entries in Buffer Deal;Integer     ;CaptionML=[ENU=Entries in Buffer Deal;
                                                              RUS=Проводок в Буфере Сделок];
                                                   BlankZero=Yes;
                                                   Description=NC S622 PCH }
    { 51060;  ;Entries Deal with an Error;Integer ;CaptionML=[ENU=Entries Deal with an Error;
                                                              RUS=Проводок в Буфере Сделок с Ошибкой];
                                                   BlankZero=Yes;
                                                   Description=NC S622 PCH }
    { 51065;  ;Entries in Buffer XML;Integer      ;CaptionML=[ENU=Entries in Buffer XML;
                                                              RUS=Проводок в Буфере XML];
                                                   BlankZero=Yes;
                                                   Description=NC S1753 PCH }
    { 51070;  ;Entries XML with an Error;Integer  ;CaptionML=[ENU=Entries XML with an Error;
                                                              RUS=Проводок в Буфере XML с Ошибкой];
                                                   BlankZero=Yes;
                                                   Description=NC S1753 PCH }
  }
  KEYS
  {
    {    ;Company No.,Line No.                    ;Clustered=Yes }
    {    ;Name Service NAS,Process                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Company@1000000002 : Record 2000000006;
      ConsSource@1000000000 : Record 50001;
      Object@1000000004 : Record 2000000001;
      VarInt@1000000005 : Integer;
      Text001@1000000006 : TextConst 'ENU=Can not change because Service %1 started.;RUS=Нельзя менять т.к. сервис %1 запущен.';
      GLSetup@1101495000 : Record 98;

    PROCEDURE IsRun@1000000000() : Boolean;
    VAR
      ConsSetup@1000000003 : Record 50000;
      JobProcStatusTemp@1000000000 : TEMPORARY Record 50063;
      JobProcStatus@1000000006 : Record 50063;
      ConsSource@1000000001 : Record 50001;
      GenJournalLine@1000000002 : Record 81;
      ConsBuffer@1000000004 : Record 50008;
      GLEntry@1000000005 : Record 17;
      LoadAllRef@1000000007 : Codeunit 50011;
      LoadOperation@1000000008 : Codeunit 50016;
      SalesHeader@1000000009 : Record 36;
      PurchHeader@1000000010 : Record 38;
    BEGIN
      Company.GET("Company No.");
      ConsSetup.CHANGECOMPANY(Company.Name);
      ConsSetup.GET;
      ConsSource.CHANGECOMPANY(Company.Name);
      ConsBuffer.CHANGECOMPANY(Company.Name);
      GenJournalLine.CHANGECOMPANY(Company.Name);
      SalesHeader.CHANGECOMPANY(Company.Name);
      PurchHeader.CHANGECOMPANY(Company.Name);

      CASE "Type Processing" OF
        "Type Processing"::" " :
          EXIT(FALSE);
        "Type Processing"::Reference :
          BEGIN
            JobProcStatusTemp.TRANSFERFIELDS(Rec);
            JobProcStatusTemp."Company No." := "Company No.";
            JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Test;
            IF CODEUNIT.RUN(CODEUNIT::"Load All References",JobProcStatusTemp) THEN BEGIN
              EXIT(JobProcStatusTemp.isOK);
            END;
          END;
        "Type Processing"::"Cons. Source" :
          IF ConsSource.GET(Processor) THEN
            CASE TRUE OF
              (ConsSource."Import Format" = ConsSource."Import Format"::FromExtSystem) AND  //загрузка из буфера
              (NOT ConsSource."Use External File") :
                BEGIN
                   JobProcStatusTemp.TRANSFERFIELDS(Rec);
                   JobProcStatusTemp."Company No." := "Company No.";
                   JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Test;
                  IF CODEUNIT.RUN(CODEUNIT::"Load Operation",JobProcStatusTemp) THEN BEGIN
                    EXIT(JobProcStatusTemp.isOK);
                  END;
                END;
              //NC MIO20,MIO55 > PCH
              (ConsSource."Import Format" = ConsSource."Import Format"::FromBufferNAV) AND  //загрузка из буфера NAV
              (NOT ConsSource."Use External File") :
                BEGIN
                   JobProcStatusTemp.TRANSFERFIELDS(Rec);
                   JobProcStatusTemp."Company No." := "Company No.";
                   JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Test;
                  IF CODEUNIT.RUN(CODEUNIT::"Transformation From Buffer NAV",JobProcStatusTemp) THEN BEGIN
                    EXIT(JobProcStatusTemp.isOK);
                  END;
                END;
              //NC MIO20,MIO55 < PCH
              (ConsSource."Import Format" = ConsSource."Import Format"::FromBuffer) :  //трансформация
                BEGIN
                  ConsBuffer.RESET;
                  ConsBuffer.SETRANGE("Export Cons. Source Code", ConsSource.Code);
                  ConsBuffer.SETRANGE("Export Consolidation Register", 0);
                  IF NOT ConsBuffer.ISEMPTY THEN
                    EXIT(TRUE);
                END;
              (ConsSource."Import Format" = ConsSource."Import Format"::FromNavision) AND  //консолидация
              (ConsSource."Company Name" <> '') :
                BEGIN
                  GLEntry.RESET;
                  GLEntry.CHANGECOMPANY(ConsSource."Company Name");
                  GLEntry.SETFILTER("Entry No.", '>%1', ConsSource."Last G/L Entry No.");
                  IF Company."Company Type" = Company."Company Type"::Standalone THEN
                    GLEntry.SETRANGE("FA Operation",FALSE);
                  IF NOT GLEntry.ISEMPTY THEN
                    EXIT(TRUE);
                END;
              //NC MTF01 > PCH
              (ConsSource."Import Format" = ConsSource."Import Format"::OperationFromExtSystem) AND  //загрузка из буфера операций
              (NOT ConsSource."Use External File") :
                BEGIN
                   JobProcStatusTemp.TRANSFERFIELDS(Rec);
                   JobProcStatusTemp."Company No." := "Company No.";
                   JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Test;
                  IF CODEUNIT.RUN(CODEUNIT::"Load Operation Fact",JobProcStatusTemp) THEN BEGIN
                    EXIT(JobProcStatusTemp.isOK);
                  END;
                END;
              (ConsSource."Import Format" = ConsSource."Import Format"::OperationFromBuffer) :  //трансформация буфера операций
                BEGIN
                   JobProcStatusTemp.TRANSFERFIELDS(Rec);
                   JobProcStatusTemp."Company No." := "Company No.";
                   JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Test;
                  IF CODEUNIT.RUN(CODEUNIT::"Trans. One Operation Fact",JobProcStatusTemp) THEN BEGIN
                    EXIT(JobProcStatusTemp.isOK);
                  END;
                END;
              //NC MTF01 < PCH
              //NC S622.7 > PCH
              (ConsSource."Import Format" = ConsSource."Import Format"::FromPreBufferDealEntry) AND  //загрузка из буфера сделок
              (NOT ConsSource."Use External File") :
                BEGIN
                   JobProcStatusTemp.TRANSFERFIELDS(Rec);
                   JobProcStatusTemp."Company No." := "Company No.";
                   JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Test;
                  IF CODEUNIT.RUN(CODEUNIT::"Load Deal Entry",JobProcStatusTemp) THEN BEGIN
                    EXIT(JobProcStatusTemp.isOK);
                  END;
                END;
              (ConsSource."Import Format" = ConsSource."Import Format"::FromBufferDealEntry) :  //трансформация буфера операций
                BEGIN
                   JobProcStatusTemp.TRANSFERFIELDS(Rec);
                   JobProcStatusTemp."Company No." := "Company No.";
                   JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Test;
                  //NC NCS-813 > RD
                  {
                  IF CODEUNIT.RUN(CODEUNIT::"Transformation Operation Fact",JobProcStatusTemp) THEN BEGIN
                  }
                  IF CODEUNIT.RUN(CODEUNIT::"Transf. Deal Entry",JobProcStatusTemp) THEN BEGIN
                  //NC NCS-813 < RD
                    EXIT(JobProcStatusTemp.isOK);
                  END;
                END;
              //NC S622.7 < PCH
              //NC S1753 > PCH
              (ConsSource."Import Format" = ConsSource."Import Format"::EventUpload) :  //трансформация буфера операций
                BEGIN
                   JobProcStatusTemp.TRANSFERFIELDS(Rec);
                   JobProcStatusTemp."Company No." := "Company No.";
                   JobProcStatusTemp."Processing Mode" := JobProcStatusTemp."Processing Mode"::Test;
                  IF CODEUNIT.RUN(CODEUNIT::"Transf. Event Upload",JobProcStatusTemp) THEN BEGIN
                    EXIT(JobProcStatusTemp.isOK);
                  END;
                END;
              //NC S1753 < PCH
            END;
        "Type Processing"::Posting :
          IF ConsSource.GET(Processor) THEN
            CASE ConsSource."Import Format" OF
              //NC MIO55 > PCH
              {
              //NC S622.7 > PCH
              //ConsSource."Import Format"::FromBuffer :
              ConsSource."Import Format"::FromBuffer, ConsSource."Import Format"::FromBufferDealEntry:
              //NC S622.7 < PCH
              }
              ConsSource."Import Format"::OperationFromBuffer :
                BEGIN
                  GenJournalLine.RESET;
                  GenJournalLine.SETRANGE("Export Cons. Source Code",Processor);
                  GenJournalLine.SETRANGE("Except Correspondence",FALSE);
                  GenJournalLine.SETFILTER("Account No.",'<>%1','');
                  IF NOT GenJournalLine.ISEMPTY THEN
                    EXIT(TRUE);
                END;
              ELSE
              //NC MIO55 < PCH
                BEGIN
                  GenJournalLine.RESET;
                  GenJournalLine.SETRANGE("Journal Template Name",ConsSetup."Gen. Jnl. Template");

                  GenJournalLine.SETFILTER("Journal Batch Name",'%1|%2|%3',ConsSource."Gen. Journal Batch",
                                                                           ConsSource."Reposted Journal Batch",
                                                                           ConsSource."Removed Journal Batch");
                  GenJournalLine.SETRANGE("Except Correspondence",FALSE);
                  GenJournalLine.SETFILTER("Account No.",'<>%1','');
                  IF NOT GenJournalLine.ISEMPTY THEN
                    EXIT(TRUE);
                END;
              //NC MIO55 > PCH
              { перенесено выше
              ConsSource."Import Format"::OperationFromBuffer :
                BEGIN
                  GenJournalLine.RESET;
                  GenJournalLine.SETRANGE("Export Cons. Source Code",Processor);
                  GenJournalLine.SETRANGE("Except Correspondence",FALSE);
                  GenJournalLine.SETFILTER("Account No.",'<>%1','');
                  IF NOT GenJournalLine.ISEMPTY THEN
                    EXIT(TRUE);
                END;
              }
              //NC MIO55 < PCH
            END;
        "Type Processing"::"Packet Task",
        "Type Processing"::"Program Module" :
          EXIT(TRUE);
        "Type Processing"::"Document Posting" :
          IF ConsSource.GET(Processor) THEN
            IF ConsSource."Import Format" = ConsSource."Import Format"::OperationFromBuffer THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETRANGE("Export Cons. Source Code",Processor);
              IF NOT SalesHeader.ISEMPTY THEN
                EXIT(TRUE);
              PurchHeader.RESET;
              PurchHeader.SETRANGE("Export Cons. Source Code",Processor);
              IF NOT PurchHeader.ISEMPTY THEN
                EXIT(TRUE);
            END;
      END;
      EXIT(FALSE);
    END;

    BEGIN
    {
      NC MDM01 PCH Создана таблица
      NC MTF01 PCH загрузка операций
      NC MTF01 PCH добавлены поля для монитора
      NC S622 PCH Добавлены опции FromPreBufferDealEntry,FromBufferDealEntry в "Import Format"
      NC S622 PCH Добавлены поля: "Entries in Load Buffer Deal", "Errors in Load Buffer Deal"
                                  "Entries in Buffer Deal", "Entries Deal with an Error"
      NC S622.7 PCH планирование AE
      NC NCS-813 RD Исправлена ошибка при планировании трансформации из буфера сделок
      NC MIO20,MIO55 PCH перенос доработок
      NC MIO-10 Added Fields "Entries in Buffer NAV", "Error in Buffer NAV"
      NC MIO55 PCH проверка наличия данных для учета
      NC S1753 PCH Добавлены опции FromBufferDealEntry2 в "Import Format"
                   Добавлены поля: "Entries in Buffer XML", "Entries XML with an Error"
      NC S1893 PCH
      NC NCS-2360 AAP Добавлена опция в поле "Import Format".
    }
    END.
  }
}

