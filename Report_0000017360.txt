OBJECT Report 17360 Form 2-NDFL
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Form 2-NDFL;
               RUS=îÆ‡¨† 2-çÑîã];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF DocumentDate = 0D THEN
                    ERROR(Text000);

                  HumanResSetup.GET;
                  CompanyInfo.GET;

                  IF NOT PreviewMode THEN
                    HumanResSetup.TESTFIELD("Personal Information Nos.");

                  IF CreateRegister THEN
                    HumanResSetup.TESTFIELD("NDFL Register Template Code");

                  HumanResSetup.TESTFIELD("NDFL-2 Template Code");
                  FileName := ExcelTemplate.OpenTemplate(HumanResSetup."NDFL-2 Template Code");

                  ExcelMgt.OpenBook(FileName);
                  ExcelMgt.OpenSheet('Sheet1');
                END;

    OnPostReport=BEGIN
                   IF NOT TestMode THEN
                     ExcelMgt.GiveUserControl;

                   IF CreateRegister THEN
                     CreateNDFLRegister;
                 END;

  }
  DATASET
  {
    { 2091;    ;DataItem;PersonIncomeHeader  ;
               DataItemTable=Table17392;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               InitialSheetBeingCopied := FALSE;
                             END;

               OnAfterGetRecord=VAR
                                  Country@1210000 : Record 9;
                                BEGIN
                                  ExcelMgt.CopySheet('Sheet1','Sheet1',FORMAT(Year) + '_' + "Person No.");
                                  ExcelMgt.OpenSheet(FORMAT(Year) + '_' + "Person No.");

                                  InitialSheetBeingCopied := TRUE;

                                  IF PreviewMode THEN
                                    DocumentNo := 'XXXXXXXXXX'
                                  ELSE
                                    DocumentNo := NoSeriesMgt.GetNextNo(HumanResSetup."Personal Information Nos.",WORKDATE,TRUE);

                                  DirectoryStartDate := DMY2DATE(1,1,Year);
                                  DirectoryEndDate := CALCDATE('<+CY>',DMY2DATE(1,12,Year));

                                  Person.GET("Person No.");
                                  Employee.SETRANGE("Person No.",Person."No.");
                                  IF NOT Employee.FINDFIRST THEN
                                    ExcelMgt.ErrorExcelProcessing(STRSUBSTNO(Text026,Person."No."));

                                  ExcelMgt.FillCell('BE6',COPYSTR(FORMAT(Year),3,2));
                                  ExcelMgt.FillCell('BP6',DocumentNo);
                                  ExcelMgt.FillCell('CB6',FORMAT(DocumentDate,0,'<Day,2>'));
                                  ExcelMgt.FillCell('CG6',FORMAT(DocumentDate,0,'<Month,2>'));
                                  ExcelMgt.FillCell('CL6',FORMAT(DocumentDate,0,'<Year4>'));
                                  ExcelMgt.FillCell('DA6','1');
                                  ExcelMgt.FillCell('DE8',HumanResSetup."Tax Inspection Code");

                                  ExcelMgt.FillCell('BF9',CompanyInfo."VAT Registration No.");

                                  ExcelMgt.FillCell('A11',CompanyInfo.Name + CompanyInfo."Name 2");
                                  IF CompanyInfo."Separated Org. Unit" THEN BEGIN
                                    ExcelMgt.FillCell('CD9',CurrKPP);
                                    ExcelMgt.FillCell('P12',CurrOKATO);
                                  END ELSE BEGIN
                                    ExcelMgt.FillCell('CD9',CompanyInfo."KPP Code");
                                    ExcelMgt.FillCell('P12',CompanyInfo."OKATO Code");
                                  END;

                                  ExcelMgt.FillCell('CL12',CompanyInfo."Phone No.");

                                  IF Person."VAT Registration No." <> '' THEN
                                    ExcelMgt.FillCell('J15',Person."VAT Registration No.")
                                  ELSE
                                    ExcelMgt.ErrorExcelProcessing(
                                      STRSUBSTNO(Text027,
                                        Person.FIELDCAPTION("VAT Registration No."),Person.TABLECAPTION,
                                        Person.FIELDCAPTION("No."),Person."No."));

                                  ExcelMgt.FillCell('AZ15',Employee.GetFullNameOnDate(DocumentDate));
                                  IF Person."Non-Resident" THEN
                                    ExcelMgt.FillCell('AD16','2')
                                  ELSE
                                    ExcelMgt.FillCell('AD16','1');
                                  IF Person."Identity Document Type" <> '' THEN
                                    ExcelMgt.FillCell('AR17',Person."Identity Document Type")
                                  ELSE
                                    ExcelMgt.ErrorExcelProcessing(
                                      STRSUBSTNO(Text027,
                                        Person.FIELDCAPTION("Identity Document Type"),Person.TABLECAPTION,
                                        Person.FIELDCAPTION("No."),Person."No."));

                                  Person.GetIdentityDoc(DirectoryEndDate,PersonalDoc);
                                  ExcelMgt.FillCell(
                                    'CB17',PersonalDoc."Document Series" + ' ' + PersonalDoc."Document No.");

                                  IF Person.Citizenship <> '' THEN BEGIN
                                    IF Country.GET(Person."Citizenship Country/Region") THEN;
                                    IF Country."Local Country/Region Code" <> '' THEN
                                      ExcelMgt.FillCell('DB16',Country."Local Country/Region Code")
                                    ELSE
                                      ExcelMgt.ErrorExcelProcessing(
                                        STRSUBSTNO(Text027,
                                          Country.FIELDCAPTION("Local Country/Region Code"),Country.TABLECAPTION,
                                          Country.FIELDCAPTION(Code),Country.Code));
                                  END ELSE
                                    ExcelMgt.ErrorExcelProcessing(
                                      STRSUBSTNO(Text027,
                                        Person.FIELDCAPTION(Citizenship),Person.TABLECAPTION,
                                        Person.FIELDCAPTION("No."),Person."No."));

                                  IF Employee."Birth Date" <> 0D THEN BEGIN
                                    ExcelMgt.FillCell('BD16',FORMAT(Employee."Birth Date",0,'<Day,2>'));
                                    ExcelMgt.FillCell('BI16',FORMAT(Employee."Birth Date",0,'<Month,2>'));
                                    ExcelMgt.FillCell('BN16',FORMAT(Employee."Birth Date",0,'<Year4>'));
                                  END ELSE
                                    ExcelMgt.ErrorExcelProcessing(
                                      STRSUBSTNO(Text027,
                                        Person.FIELDCAPTION("Birth Date"),Person.TABLECAPTION,
                                        Person.FIELDCAPTION("No."),Person."No."));

                                  AltAddr.RESET;
                                  AltAddr.SETRANGE("Person No.",Employee."Person No.");
                                  AltAddr.SETRANGE("Address Type",AltAddr."Address Type"::Registration);
                                  IF AltAddr.FINDLAST THEN BEGIN
                                    IF AltAddr."Post Code" <> '' THEN
                                      ExcelMgt.FillCell('BX18',AltAddr."Post Code")
                                    ELSE
                                      ExcelMgt.ErrorExcelProcessing(
                                        STRSUBSTNO(Text027,
                                          AltAddr.FIELDCAPTION("Post Code"),AltAddr.TABLECAPTION,
                                          Person.FIELDCAPTION("No."),Person."No."));
                                    IF AltAddr."KLADR Code" <> '' THEN BEGIN
                                      IF AltAddr."Region Code" <> '' THEN
                                        ExcelMgt.FillCell('CT18',AltAddr."Region Code")
                                      ELSE
                                        ExcelMgt.ErrorExcelProcessing(
                                          STRSUBSTNO(Text027,
                                            AltAddr.FIELDCAPTION("Region Code"),AltAddr.TABLECAPTION,
                                            Person.FIELDCAPTION("No."),Person."No."));
                                      IF AltAddr.Area <> '' THEN
                                        ExcelMgt.FillCell('K19',AltAddr.Area + ' ' + AltAddr."Area Category");
                                      IF AltAddr.City <> '' THEN
                                        ExcelMgt.FillCell('AS19',AltAddr.City + ' ' + AltAddr."City Category");
                                      IF AltAddr.Locality <> '' THEN
                                        ExcelMgt.FillCell('CK19',AltAddr.Locality + ' ' + AltAddr."Locality Category");
                                      IF AltAddr.Street <> '' THEN
                                        ExcelMgt.FillCell('K20',AltAddr.Street + ' ' + AltAddr."Street Category");
                                      IF AltAddr.House <> '' THEN
                                        ExcelMgt.FillCell('BK20',AltAddr.House);
                                      IF AltAddr.Building <> '' THEN
                                        ExcelMgt.FillCell('CB20',AltAddr.Building);
                                      IF AltAddr.Apartment <> '' THEN
                                        ExcelMgt.FillCell('CU20',AltAddr.Apartment);
                                    END ELSE
                                      ExcelMgt.ErrorExcelProcessing(
                                        STRSUBSTNO(Text027,
                                          AltAddr.FIELDCAPTION("KLADR Code"),AltAddr.TABLECAPTION,
                                          Person.FIELDCAPTION("No."),Person."No."));
                                  END ELSE
                                    ExcelMgt.ErrorExcelProcessing(STRSUBSTNO(Text016,Employee."No."));
                                END;

               OnPostDataItem=BEGIN
                                IF InitialSheetBeingCopied THEN
                                  ExcelMgt.DeleteSheet('Sheet1');
                              END;

               ReqFilterFields=No.,Year }

    { 8573;1   ;DataItem;TaxIterator         ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=VAR
                               BaseAmount@1210005 : Decimal;
                               TaxAmount@1210004 : Decimal;
                               AccruedAmount@1210003 : Decimal;
                               PaidToPersonAmount@1210002 : Decimal;
                               TransferredAmount@1210001 : Decimal;
                               I@1210000 : Integer;
                               InitialBlockCovered@1210006 : Boolean;
                             BEGIN
                               InitialBlockCovered := FALSE;
                               FOR I := 0 TO 3 DO BEGIN
                                 PersentTax := 3 - I;
                                 BaseAmount := GetTotalTaxableIncomeForTax(PersonIncomeHeader,PersentTax);
                                 TaxAmount := GetTotalTaxDeduction(PersonIncomeHeader,PersentTax);
                                 AccruedAmount := GetTotalAccruedAmountForTax(PersonIncomeHeader,PersentTax);
                                 PaidToPersonAmount := GetTotalPaidToPersonForTax(PersonIncomeHeader,PersentTax);
                                 TransferredAmount := GetTotalPaidToBudgetForTax(PersonIncomeHeader,PersentTax);

                                 IF NOT ((BaseAmount = 0) AND (TaxAmount = 0) AND (AccruedAmount = 0) AND (PaidToPersonAmount = 0) AND (TransferredAmount = 0))
                                 THEN
                                   IF InitialBlockCovered THEN
                                     ExcelMgt.CopyRowsTo(22,41,42)
                                   ELSE
                                     InitialBlockCovered := TRUE;
                               END;

                               BlockNo := -1;
                               BlockSize := 20;
                               InitialBlockStart := 22;
                               TotalsBlockOffset := 12;
                               EarningsOffset := 3;
                               DeductsOffset := 8;
                               ExpandingOffset := 0;
                             END;

               OnAfterGetRecord=VAR
                                  BaseAmount@1210003 : Decimal;
                                  TaxAmount@1210002 : Decimal;
                                  AccruedAmount@1210001 : Decimal;
                                  PaidToPersonAmount@1210000 : Decimal;
                                  TransferredAmount@1210004 : Decimal;
                                BEGIN
                                  IF Number > 4 THEN
                                    CurrReport.BREAK;

                                  PersentTax := Number - 1;

                                  BaseAmount := GetTotalTaxableIncomeForTax(PersonIncomeHeader,PersentTax);
                                  TaxAmount := GetTotalTaxDeduction(PersonIncomeHeader,PersentTax);
                                  AccruedAmount := GetTotalAccruedAmountForTax(PersonIncomeHeader,PersentTax);
                                  PaidToPersonAmount := GetTotalPaidToPersonForTax(PersonIncomeHeader,PersentTax);
                                  TransferredAmount := GetTotalPaidToBudgetForTax(PersonIncomeHeader,PersentTax);

                                  IF (BaseAmount = 0) AND (TaxAmount = 0) AND (AccruedAmount = 0) AND (PaidToPersonAmount = 0) AND (TransferredAmount = 0)
                                  THEN
                                    CurrReport.SKIP;

                                  IF NOT Person."Non-Resident" AND (PersentTax = PersentTax::"30") THEN
                                    CurrReport.SKIP;

                                  BlockNo += 1;

                                  CASE PersentTax OF
                                    PersentTax::"13":
                                      BEGIN
                                        ExcelMgt.FillCell('AG' + FORMAT(GetCurrentBlockStartPosition),Text13Persent);
                                        ExcelMgt.FillCell('BT' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset - 1),Text13Persent);
                                      END;
                                    PersentTax::"30":
                                      BEGIN
                                        ExcelMgt.FillCell('AG' + FORMAT(GetCurrentBlockStartPosition),Text30Persent);
                                        ExcelMgt.FillCell('BT' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset - 1),Text30Persent);
                                      END;
                                    PersentTax::"9":
                                      BEGIN
                                        ExcelMgt.FillCell('AG' + FORMAT(GetCurrentBlockStartPosition),Text9Persent);
                                        ExcelMgt.FillCell('BT' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset - 1),Text9Persent);
                                      END;
                                    PersentTax::"35":
                                      BEGIN
                                        ExcelMgt.FillCell('AG' + FORMAT(GetCurrentBlockStartPosition),Text35Persent);
                                        ExcelMgt.FillCell('BT' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset - 1),Text35Persent);
                                      END;
                                  END;

                                  IF BaseAmount <> 0 THEN
                                    ExcelMgt.FillCell(
                                      'CM' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset),
                                      FORMAT(BaseAmount,0,1));
                                  IF (BaseAmount - TaxAmount) <> 0 THEN
                                    ExcelMgt.FillCell(
                                      'CM' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset + 1),
                                      FORMAT(BaseAmount - TaxAmount,0,1));
                                  IF AccruedAmount <> 0 THEN BEGIN
                                    ExcelMgt.FillCell(
                                      'CM' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset + 2),
                                      FORMAT(AccruedAmount,0,1));
                                    ExcelMgt.FillCell(
                                      'CM' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset + 3),
                                      FORMAT(AccruedAmount,0,1));
                                  END;
                                  IF TransferredAmount <> 0 THEN
                                    ExcelMgt.FillCell(
                                      'CM' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset + 4),
                                      FORMAT(ROUND(TransferredAmount,1),0,1));
                                  IF PaidToPersonAmount <> 0 THEN
                                    ExcelMgt.FillCell(
                                      'CM' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset + 6),
                                      FORMAT(PaidToPersonAmount,0,1));

                                  IF PaidToPersonAmount - AccruedAmount > 0 THEN BEGIN
                                    IF AccruedAmount - PaidToPersonAmount <> 0 THEN
                                      ExcelMgt.FillCell(
                                        'CM' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset + 7),
                                        FORMAT(ROUND(AccruedAmount - PaidToPersonAmount,1),0,1));
                                  END ELSE BEGIN
                                    IF PaidToPersonAmount - AccruedAmount <> 0 THEN
                                      ExcelMgt.FillCell(
                                        'CM' + FORMAT(GetCurrentBlockStartPosition + TotalsBlockOffset + 9),
                                        FORMAT(ROUND(PaidToPersonAmount - AccruedAmount,1),0,1));
                                  END;

                                  ExportEmpIncRegToExcel.AddEmployee(Employee."No.",DocumentNo);
                                END;
                                 }

    { 3544;2   ;DataItem;PersonIncomeEntry1  ;
               DataItemTable=Table17398;
               DataItemTableView=SORTING(Posting Date)
                                 WHERE(Entry Type=CONST(Taxable Income),
                                       Tax Code=FILTER(<>''),
                                       Advance Payment=CONST(No));
               OnPreDataItem=BEGIN
                               SETRANGE("Person Income No.",PersonIncomeHeader."No.");
                               SETRANGE("Person No.",PersonIncomeHeader."Person No.");
                               CASE PersentTax OF
                                 PersentTax::"13":
                                   SETRANGE("Tax %","Tax %"::"13");
                                 PersentTax::"30":
                                   SETRANGE("Tax %","Tax %"::"30");
                                 PersentTax::"9":
                                   SETRANGE("Tax %","Tax %"::"9");
                                 PersentTax::"35":
                                   SETRANGE("Tax %","Tax %"::"35");
                               END;

                               TempPersonIncomeEntry.RESET;
                               TempPersonIncomeEntry.SETRANGE("Person Income No.",PersonIncomeHeader."No.");
                               TempPersonIncomeEntry.SETRANGE("Person No.",PersonIncomeHeader."Person No.");
                             END;

               OnAfterGetRecord=BEGIN
                                  TempPersonIncomeEntry.SETRANGE("Period Code","Period Code");
                                  TempPersonIncomeEntry.SETRANGE("Tax Code","Tax Code");
                                  IF TempPersonIncomeEntry.FINDFIRST THEN BEGIN
                                    TempPersonIncomeEntry.Base += Base;
                                    TempPersonIncomeEntry.MODIFY;
                                  END ELSE BEGIN
                                    TempPersonIncomeEntry := PersonIncomeEntry1;
                                    TempPersonIncomeEntry.INSERT;
                                  END;
                                END;

               OnPostDataItem=VAR
                                I@1210000 : Integer;
                                TaxDeductCode@1210002 : Code[10];
                                TaxDeductAmount@1210001 : Decimal;
                                RowNo@1210003 : Integer;
                              BEGIN
                                LineNo := 0;
                                RowNo := GetCurrentBlockStartPosition + EarningsOffset;

                                TempPersonIncomeEntry.RESET;
                                TempPersonIncomeEntry.SETRANGE("Person Income No.",PersonIncomeHeader."No.");
                                TempPersonIncomeEntry.SETRANGE("Person No.",PersonIncomeHeader."Person No.");

                                FOR I := 1 TO (TempPersonIncomeEntry.COUNT DIV 2) - 1 DO // 2 entries per line, 2 lines already exists, +1 due to
                                  ExcelMgt.CopyRow(RowNo);

                                WITH TempPersonIncomeEntry DO BEGIN
                                  RESET;
                                  IF FINDSET THEN
                                    REPEAT
                                      LineNo := LineNo + 1;
                                      IF LineNo / 2 - LineNo DIV 2 <> 0 THEN BEGIN
                                        ExcelMgt.FillCell('A' + FORMAT(RowNo),CreateMonthText(GetPeriodCode("Period Code")));
                                        ExcelMgt.FillCell('H' + FORMAT(RowNo),"Tax Code");
                                        ExcelMgt.FillCell('P' + FORMAT(RowNo),FORMAT(Base,0,1));

                                        TaxDeductCode := GetLastPayrollDirDeductCode("Tax Code","Posting Date");
                                        IF TaxDeductCode <> '' THEN BEGIN
                                          TaxDeductAmount := GetTotalDeductAmount(TaxDeductCode,"Period Code");
                                          IF TaxDeductAmount <> 0 THEN BEGIN
                                            ExcelMgt.FillCell('AF' + FORMAT(RowNo),TaxDeductCode);
                                            ExcelMgt.FillCell('AN' + FORMAT(RowNo),FORMAT(TaxDeductAmount,0,1));
                                          END;
                                        END;
                                      END ELSE BEGIN
                                        ExcelMgt.FillCell('BH' + FORMAT(RowNo),CreateMonthText(GetPeriodCode("Period Code")));
                                        ExcelMgt.FillCell('BO' + FORMAT(RowNo),"Tax Code");
                                        ExcelMgt.FillCell('BW' + FORMAT(RowNo),FORMAT(Base,0,1));

                                        TaxDeductCode := GetLastPayrollDirDeductCode("Tax Code","Posting Date");
                                        IF TaxDeductCode <> '' THEN BEGIN
                                          TaxDeductAmount := GetTotalDeductAmount(TaxDeductCode,"Period Code");
                                          IF TaxDeductAmount <> 0 THEN BEGIN
                                            ExcelMgt.FillCell('CM' + FORMAT(RowNo),TaxDeductCode);
                                            ExcelMgt.FillCell('CU' + FORMAT(RowNo),FORMAT(TaxDeductAmount,0,1));
                                          END;
                                        END;

                                        RowNo := RowNo + 1;
                                        IF RowNo > GetCurrentBlockStartPosition + EarningsOffset + 1 THEN
                                          ExpandingOffset += 1;
                                      END;
                                    UNTIL NEXT = 0;
                                  DELETEALL;
                                END;
                              END;
                               }

    { 6476;2   ;DataItem;                    ;
               DataItemTable=Table17398;
               DataItemTableView=SORTING(Person Income No.,Person Income Line No.,Line No.)
                                 WHERE(Entry Type=CONST(Tax Deduction),
                                       Interim=CONST(No),
                                       Tax Deduction Code=FILTER(<>''));
               OnPreDataItem=BEGIN
                               LineNo := 0;

                               NonLinkedDeductDirectoryFilter := '';

                               IF PersentTax <> PersentTax::"13" THEN
                                 CurrReport.BREAK;

                               SETRANGE("Person Income No.",PersonIncomeHeader."No.");
                               SETRANGE("Person No.",PersonIncomeHeader."Person No.");
                             END;

               OnAfterGetRecord=BEGIN
                                  PayrollDirectory.RESET;
                                  PayrollDirectory.SETRANGE(Type,PayrollDirectory.Type::Income);
                                  PayrollDirectory.SETRANGE("Tax Deduction Code","Tax Deduction Code");
                                  PayrollDirectory.SETFILTER("Starting Date",'..%1',DirectoryStartDate);

                                  IF NOT PayrollDirectory.FINDLAST THEN
                                    AddToFilter(NonLinkedDeductDirectoryFilter,"Tax Deduction Code");
                                END;
                                 }

    { 4166;2   ;DataItem;PayrollDirectory2   ;
               DataItemTable=Table17425;
               DataItemTableView=SORTING(Type,Code,Starting Date)
                                 WHERE(Type=FILTER(Tax Deduction));
               OnPreDataItem=VAR
                               I@1210000 : Integer;
                             BEGIN
                               IF NonLinkedDeductDirectoryFilter = '' THEN
                                 CurrReport.BREAK;

                               SETFILTER("Starting Date",'..%1',DirectoryStartDate);
                               SETFILTER(Code,NonLinkedDeductDirectoryFilter);

                               FOR I := 1 TO (COUNT - 1) DIV 4 DO
                                 ExcelMgt.CopyRow(GetCurrentBlockStartPosition + DeductsOffset);
                             END;
                              }

    { 2592;3   ;DataItem;PersonIncomeEntry2  ;
               DataItemTable=Table17398;
               DataItemTableView=SORTING(Person Income No.,Person Income Line No.,Line No.)
                                 WHERE(Entry Type=CONST(Tax Deduction),
                                       Interim=CONST(No),
                                       Tax Deduction Code=FILTER(<>''));
               OnPreDataItem=BEGIN
                               SETRANGE("Person Income No.",PersonIncomeHeader."No.");

                               TaxDeductAmount := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  TaxDeductAmount := TaxDeductAmount + "Tax Deduction Amount";
                                END;

               OnPostDataItem=BEGIN
                                IF TaxDeductAmount <> 0 THEN BEGIN
                                  IF (LineNo MOD 4 = 0) AND (LineNo <> 0) THEN
                                    ExpandingOffset += 1;

                                  LineNo := LineNo + 1;

                                  PersonTaxDeduction.RESET;
                                  PersonTaxDeduction.SETRANGE("Person No.","Person No.");
                                  PersonTaxDeduction.SETRANGE(Year,PersonIncomeHeader.Year);
                                  PersonTaxDeduction.SETRANGE("Deduction Code",PayrollDirectory2.Code);
                                  IF PersonTaxDeduction.FINDFIRST THEN BEGIN
                                    PersonTaxDeduction.CALCSUMS("Deduction Amount");
                                    TaxDeductAmount := TaxDeductAmount + PersonTaxDeduction."Deduction Amount";
                                  END;

                                  TotalTaxDeductAmount := TotalTaxDeductAmount + TaxDeductAmount;
                                  TaxDeductCode := PayrollDirectory2.Code;
                                  FillTaxDeductionInfo;
                                END;
                              END;

               DataItemLink=Tax Deduction Code=FIELD(Code) }

    { 9075;2   ;DataItem;PayrollDirectory3   ;
               DataItemTable=Table17425;
               DataItemTableView=SORTING(Type,Code,Starting Date)
                                 WHERE(Type=FILTER(Tax Deduction),
                                       Tax Deduction Type=FILTER(<>Standart));
               OnPreDataItem=BEGIN
                               IF NonLinkedDeductDirectoryFilter = '' THEN
                                 CurrReport.BREAK;

                               SETFILTER("Starting Date",'..%1',DirectoryStartDate);
                             END;
                              }

    { 7501;3   ;DataItem;PersonIncomeEntry3  ;
               DataItemTable=Table17398;
               DataItemTableView=SORTING(Person Income No.,Person Income Line No.,Line No.)
                                 WHERE(Entry Type=CONST(Tax Deduction),
                                       Interim=CONST(No),
                                       Tax Deduction Code=FILTER(<>''));
               OnPreDataItem=BEGIN
                               SETRANGE("Person Income No.",PersonIncomeHeader."No.");

                               TaxDeductAmount := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  TaxDeductAmount := TaxDeductAmount + "Tax Deduction Amount";
                                END;

               OnPostDataItem=VAR
                                PayrollElement@1210000 : Record 17400;
                                RowNo@1210001 : Integer;
                              BEGIN
                                IF TaxDeductAmount > 0 THEN BEGIN
                                  RowNo := GetCurrentBlockStartPosition + DeductsOffset;

                                  PersonTaxDeduction.RESET;
                                  PersonTaxDeduction.SETRANGE("Document No.",PersonIncomeHeader."No.");
                                  PersonTaxDeduction.SETRANGE("Person No.",PersonIncomeHeader."Person No.");
                                  PersonTaxDeduction.SETRANGE("Deduction Code",PayrollDirectory3.Code);
                                  IF PersonTaxDeduction.FINDFIRST THEN BEGIN
                                    PersonTaxDeduction.CALCSUMS("Deduction Amount");
                                    TaxDeductAmount := TaxDeductAmount + PersonTaxDeduction."Deduction Amount";
                                  END;

                                  IF TaxDeductAmount <> 0 THEN BEGIN
                                    PayrollElement.RESET;
                                    PayrollElement.SETCURRENTKEY("Directory Code");
                                    PayrollElement.SETRANGE("Directory Code",PayrollDirectory3.Code);
                                    IF PayrollElement.FINDSET THEN
                                      REPEAT
                                        EmplLedgEntry.RESET;
                                        EmplLedgEntry.SETRANGE("Employee No.",Employee."No.");
                                        EmplLedgEntry.SETRANGE("Element Code",PayrollElement.Code);
                                        EmplLedgEntry.SETRANGE("Action Starting Date",DirectoryStartDate,DirectoryEndDate);
                                        IF EmplLedgEntry.FINDLAST THEN BEGIN
                                          IF EmplLedgEntry."External Document No." <> '' THEN
                                            ExcelMgt.FillCell('BW' + FORMAT(RowNo + 1),EmplLedgEntry."External Document No.");
                                          IF EmplLedgEntry."External Document Date" <> 0D THEN BEGIN
                                            ExcelMgt.FillCell('AC' + FORMAT(RowNo + 2),FORMAT(EmplLedgEntry."External Document Date",0,'<Day,2>'));
                                            ExcelMgt.FillCell('AG' + FORMAT(RowNo + 2),FORMAT(EmplLedgEntry."External Document Date",0,'<Month,2>'));
                                            ExcelMgt.FillCell('AK' + FORMAT(RowNo + 2),FORMAT(EmplLedgEntry."External Document Date",0,'<Year4>'));
                                          END;
                                          IF EmplLedgEntry."External Document Issued By" <> '' THEN
                                            ExcelMgt.FillCell('CY' + FORMAT(RowNo + 2),EmplLedgEntry."External Document Issued By");
                                        END;
                                      UNTIL PayrollElement.NEXT = 0;
                                  END;
                                END;
                              END;

               DataItemLink=Tax Deduction Code=FIELD(Code) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   DocumentDate := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=è†‡†¨•‚‡Î] }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Document Date;
                             RUS=Ñ†‚† §Æ™„¨•≠‚†];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocumentDate }

      { 1210002;2;Field     ;
                  CaptionML=[ENU=Preview;
                             RUS=è‡Æ·¨Æ‚‡];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PreviewMode }

      { 1210000;2;Field     ;
                  CaptionML=[ENU=Create Register;
                             RUS=ëÆß§†‚Ï ‡•£®·‚‡];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CreateRegister }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1470108 : TextConst 'ENU=Enter Create Date.;RUS=Ç¢•§®‚• §†‚„ ·Æß§†≠®Ô';
      Text016@1470123 : TextConst 'ENU=Registration address is missing for person %1;RUS=A§‡•· ‡•£®·‚‡†Ê®® §´Ô ‰®ß. ´®Ê† %1 Æ‚·„‚·‚¢„•‚';
      Text026@1210024 : TextConst 'ENU=There is no Employee No. associated with Person No. %1.;RUS=ç•‚ ™Æ§† ·Æ‚‡„§≠®™†, ·ÆÆ‚¢•‚·‚¢„ÓÈ•£Æ ™Æ§„ ‰®ß®Á•·™Æ£Æ ´®Ê† %1.';
      Text027@1210027 : TextConst 'ENU=Field %1 in table %2 for %3 %4 should not be empty.;RUS=èÆ´• %1 ¢ ‚†°´®Ê• %2 §´Ô %3 %4 ≠• §Æ´¶≠Æ °Î‚Ï Ø„·‚Î¨.';
      HumanResSetup@1470107 : Record 5218;
      CompanyInfo@1470106 : Record 79;
      Person@1210006 : Record 17350;
      Employee@1470105 : Record 5200;
      AltAddr@1470098 : Record 5201;
      PersonalDoc@1210000 : Record 17352;
      ExcelTemplate@1210002 : Record 14919;
      PersonTaxDeduction@1210023 : Record 17395;
      PayrollDirectory@1210005 : Record 17425;
      EmplLedgEntry@1210014 : Record 17413;
      TempPersonIncomeEntry@1210021 : TEMPORARY Record 17398;
      ExcelMgt@1210001 : Codeunit 12416;
      ExportEmpIncRegToExcel@1210041 : Codeunit 17373;
      NoSeriesMgt@1210007 : Codeunit 396;
      DocumentNo@1470096 : Code[20];
      DocumentDate@1470095 : Date;
      CurrOKATO@1210013 : Code[11];
      CurrKPP@1210012 : Code[10];
      TaxDeductCode@1210026 : Code[10];
      LineNo@1210010 : Integer;
      FileName@1210008 : Text[1024];
      TaxDeductAmount@1210020 : Decimal;
      PreviewMode@1210025 : Boolean;
      TotalTaxDeductAmount@1210017 : Decimal;
      DirectoryStartDate@1470012 : Date;
      DirectoryEndDate@1470011 : Date;
      PersentTax@1210028 : '13,30,35,9';
      Text13Persent@1210029 : TextConst 'ENU=13;RUS=13';
      Text9Persent@1210030 : TextConst 'ENU=9;RUS=9';
      Text35Persent@1210031 : TextConst 'ENU=35;RUS=35';
      Text30Persent@1210032 : TextConst 'ENU=30;RUS=30';
      NonLinkedDeductDirectoryFilter@1210033 : Text[1024];
      BlockNo@1210034 : Integer;
      BlockSize@1210035 : Integer;
      InitialBlockStart@1210036 : Integer;
      TotalsBlockOffset@1210037 : Integer;
      EarningsOffset@1210038 : Integer;
      DeductsOffset@1210039 : Integer;
      ExpandingOffset@1210040 : Integer;
      CreateRegister@1210009 : Boolean;
      InitialSheetBeingCopied@1170000000 : Boolean;
      TestMode@1210003 : Boolean;

    LOCAL PROCEDURE CreateMonthText@1470011(MonthNo@1470000 : Integer) MonthText : Text[30];
    BEGIN
      IF MonthNo < 10 THEN
        MonthText := '0' + FORMAT(MonthNo)
      ELSE
        MonthText := FORMAT(MonthNo);
    END;

    LOCAL PROCEDURE FillTaxDeductionInfo@1210001();
    VAR
      RowNo@1210000 : Integer;
    BEGIN
      RowNo := GetCurrentBlockStartPosition + DeductsOffset;
      CASE LineNo MOD 4 OF
        1:
          BEGIN
            ExcelMgt.FillCell('A' + FORMAT(RowNo),TaxDeductCode);
            ExcelMgt.FillCell('L' + FORMAT(RowNo),FORMAT(ABS(TaxDeductAmount),0,1));
          END;
        2:
          BEGIN
            ExcelMgt.FillCell('AD' + FORMAT(RowNo),TaxDeductCode);
            ExcelMgt.FillCell('AO' + FORMAT(RowNo),FORMAT(ABS(TaxDeductAmount),0,1));
          END;
        3:
          BEGIN
            ExcelMgt.FillCell('BH' + FORMAT(RowNo),TaxDeductCode);
            ExcelMgt.FillCell('BS' + FORMAT(RowNo),FORMAT(ABS(TaxDeductAmount),0,1));
          END;
        0:
          BEGIN
            ExcelMgt.FillCell('CK' + FORMAT(RowNo),TaxDeductCode);
            ExcelMgt.FillCell('CV' + FORMAT(RowNo),FORMAT(ABS(TaxDeductAmount),0,1));
          END;
      END;
    END;

    LOCAL PROCEDURE GetPeriodCode@1210007(PeriodCode@1210000 : Code[10]) : Integer;
    VAR
      PayrollPeriod@1210001 : Record 17426;
    BEGIN
      PayrollPeriod.GET(PeriodCode);
      EXIT(DATE2DMY(PayrollPeriod."Starting Date",2));
    END;

    LOCAL PROCEDURE GetTotalDeductAmount@1210002(TaxDeductCode@1210000 : Code[10];PeriodCode@1210001 : Code[10]) TotalAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Tax Deduction");
        SETRANGE("Tax Deduction Code",TaxDeductCode);
        SETRANGE("Period Code",PeriodCode);
        IF FINDSET THEN
          REPEAT
            TotalAmount += "Tax Deduction Amount";
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddToFilter@1210013(VAR Filter@1210000 : Text[1024];AdditionToFilter@1210001 : Text[30]);
    BEGIN
      IF Filter = '' THEN
        Filter := AdditionToFilter
      ELSE
        Filter += '|' + AdditionToFilter;
    END;

    LOCAL PROCEDURE GetTotalTaxableIncomeForTax@1210005(PersonIncomeHeader@1210000 : Record 17392;TaxPersent@1210001 : '13,30,35,9') TotalBaseAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Taxable Income");
        SETFILTER("Tax Code",'<>%1','');
        SETRANGE("Advance Payment",FALSE);
        CASE TaxPersent OF
          TaxPersent::"13":
            SETRANGE("Tax %","Tax %"::"13");
          TaxPersent::"30":
            SETRANGE("Tax %","Tax %"::"30");
          TaxPersent::"9":
            SETRANGE("Tax %","Tax %"::"9");
          TaxPersent::"35":
            SETRANGE("Tax %","Tax %"::"35");
        END;
        IF FINDSET THEN
          REPEAT
            TotalBaseAmount += Base;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTotalTaxDeduction@1210017(PersonIncomeHeader@1210003 : Record 17392;TaxPersent@1210000 : '13,30,35,9') TotalTaxDeductionAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
      PayrollDirectory@1210001 : Record 17425;
      TaxDeductionsFilter@1210004 : Text[1024];
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Tax Deduction");
        SETFILTER("Tax Deduction Code",'<>%1','');
        IF FINDSET THEN
          REPEAT
            PayrollDirectory.SETRANGE("Tax Deduction Code","Tax Deduction Code");
            PayrollDirectory.SETRANGE(Type,PayrollDirectory.Type::Income);
            PayrollDirectory.SETFILTER("Starting Date",'..%1',"Posting Date");
            IF PayrollDirectory.FINDLAST THEN
              CASE TaxPersent OF
                TaxPersent::"13":
                  IF PayrollDirectory."Income Tax Percent" = PayrollDirectory."Income Tax Percent"::"13" THEN
                    AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
                TaxPersent::"9":
                  IF PayrollDirectory."Income Tax Percent" = PayrollDirectory."Income Tax Percent"::"9" THEN
                    AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
                TaxPersent::"35":
                  IF PayrollDirectory."Income Tax Percent" = PayrollDirectory."Income Tax Percent"::"35" THEN
                    AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
                TaxPersent::"30":
                  IF PayrollDirectory."Income Tax Percent" = PayrollDirectory."Income Tax Percent"::"30" THEN
                    AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
              END
            ELSE
              IF TaxPersent = TaxPersent::"13" THEN // not linked added to total in 13% case
                AddToFilter(TaxDeductionsFilter,"Tax Deduction Code");
          UNTIL NEXT = 0;

        IF TaxDeductionsFilter = '' THEN
          EXIT(0);

        RESET;
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Tax Deduction");
        SETFILTER("Tax Deduction Code",TaxDeductionsFilter);
        IF FINDSET THEN
          REPEAT
            TotalTaxDeductionAmount += "Tax Deduction Amount";
          UNTIL NEXT = 0;
      END
    END;

    LOCAL PROCEDURE GetTotalAccruedAmountForTax@1210025(PersonIncomeHeader@1210001 : Record 17392;TaxPersent@1210000 : '13,30,35,9') TotalAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Accrued Income Tax");
        SETRANGE(Interim,FALSE);

        CASE TaxPersent OF
          TaxPersent::"13":
            SETRANGE("Tax %","Tax %"::"13");
          TaxPersent::"30":
            SETRANGE("Tax %","Tax %"::"30");
          TaxPersent::"9":
            SETRANGE("Tax %","Tax %"::"9");
          TaxPersent::"35":
            SETRANGE("Tax %","Tax %"::"35");
        END;
        IF FINDSET THEN
          REPEAT
            TotalAmount += Amount;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTotalPaidToPersonForTax@1210000(PersonIncomeHeader@1210001 : Record 17392;TaxPersent@1210000 : '13,30,35,9') TotalAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Paid Taxable Income");

        CASE TaxPersent OF
          TaxPersent::"13":
            SETRANGE("Tax %","Tax %"::"13");
          TaxPersent::"30":
            SETRANGE("Tax %","Tax %"::"30");
          TaxPersent::"9":
            SETRANGE("Tax %","Tax %"::"9");
          TaxPersent::"35":
            SETRANGE("Tax %","Tax %"::"35");
        END;
        IF FINDSET THEN
          REPEAT
            TotalAmount += Base;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTotalPaidToBudgetForTax@1210012(PersonIncomeHeader@1210001 : Record 17392;TaxPersent@1210000 : '13,30,35,9') TotalAmount : Decimal;
    VAR
      PersonIncomeEntry@1210002 : Record 17398;
    BEGIN
      WITH PersonIncomeEntry DO BEGIN
        SETRANGE("Person Income No.",PersonIncomeHeader."No.");
        SETRANGE("Entry Type","Entry Type"::"Paid Income Tax");

        CASE TaxPersent OF
          TaxPersent::"13":
            SETRANGE("Tax %","Tax %"::"13");
          TaxPersent::"30":
            SETRANGE("Tax %","Tax %"::"30");
          TaxPersent::"9":
            SETRANGE("Tax %","Tax %"::"9");
          TaxPersent::"35":
            SETRANGE("Tax %","Tax %"::"35");
        END;
        IF FINDSET THEN
          REPEAT
            TotalAmount += Amount;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetLastPayrollDirDeductCode@1210011(PayrollCode@1210000 : Code[10];StartDate@1210002 : Date) : Code[10];
    VAR
      PayrollDirectory@1210001 : Record 17425;
    BEGIN
      PayrollDirectory.SETRANGE(Type,PayrollDirectory.Type::Income);
      PayrollDirectory.SETRANGE(Code,PayrollCode);
      PayrollDirectory.SETFILTER("Starting Date",'..%1',StartDate);

      IF PayrollDirectory.FINDLAST THEN
        EXIT(PayrollDirectory."Tax Deduction Code");
    END;

    LOCAL PROCEDURE GetCurrentBlockStartPosition@1210034() : Integer;
    BEGIN
      EXIT(InitialBlockStart + BlockSize * BlockNo + ExpandingOffset);
    END;

    LOCAL PROCEDURE CreateNDFLRegister@1210104();
    VAR
      HumanResourcesSetup@1210001 : Record 5218;
    BEGIN
      HumanResourcesSetup.GET;

      IF NOT ExportEmpIncRegToExcel.BufferIsEmpty THEN BEGIN
        ExportEmpIncRegToExcel.SetParameters(
          '',
          CompanyInfo.Name + CompanyInfo."Name 2",
          CompanyInfo."VAT Registration No.",
          CompanyInfo."OKATO Code",
          '',
          TODAY,
          HumanResourcesSetup."Tax Inspection Code",
          PersonIncomeHeader.Year,
          1);
        ExportEmpIncRegToExcel.ExportRegisterToExcel;
      END;
    END;

    PROCEDURE SetTestMode@1210003(NewTestMode@1210000 : Boolean);
    BEGIN
      TestMode := NewTestMode;
      DocumentDate := WORKDATE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

