OBJECT Table 26563 Statutory Report Data Header
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               StatutoryReportDataHeader@1210000 : Record 26563;
               NoInYear@1210001 : Integer;
             BEGIN
               IF "No." = '' THEN BEGIN
                 SRSetup.GET;
                 SRSetup.TESTFIELD("Report Data Nos");
                 "No." :=
                   NoSeriesManagement.GetNextNo(SRSetup."Report Data Nos",WORKDATE,TRUE);
               END;

               StatutoryReportDataHeader.SETCURRENTKEY("Period Year","No. in Year");
               StatutoryReportDataHeader.SETRANGE("Period Year","Period Year");
               IF StatutoryReportDataHeader.FINDLAST THEN;
               IF EVALUATE(NoInYear,StatutoryReportDataHeader."No. in Year") THEN;
               "No. in Year" := FORMAT(NoInYear + 1,8,'<integer,8><Filler Character,0>');

               "GUID Value" := COPYSTR(FORMAT(CREATEGUID),2,36);
             END;

    OnDelete=VAR
               StatReportExcelSheet@1210000 : Record 26562;
               StatReportRequisiteValue@1210001 : Record 26566;
               ScalableTableRow@1210002 : Record 26555;
             BEGIN
               TESTFIELD(Status,Status::Open);

               StatutoryReportDataValue.SETRANGE("Report Data No.","No.");
               IF StatutoryReportDataValue.FINDFIRST THEN
                 StatutoryReportDataValue.DELETEALL;

               StatReportDataChangeLog.SETRANGE("Report Data No.","No.");
               IF StatReportDataChangeLog.FINDFIRST THEN
                 StatReportDataChangeLog.DELETEALL;

               StatReportExcelSheet.SETRANGE("Report Code","Report Code");
               StatReportExcelSheet.SETRANGE("Report Data No.","No.");
               StatReportExcelSheet.DELETEALL;

               StatReportRequisiteValue.SETRANGE("Report Code","Report Code");
               StatReportRequisiteValue.SETRANGE("Report Data No.","No.");
               StatReportRequisiteValue.DELETEALL;

               ScalableTableRow.SETRANGE("Report Code","Report Code");
               ScalableTableRow.SETRANGE("Report Data No.","No.");
               ScalableTableRow.DELETEALL;
             END;

    CaptionML=[ENU=Statutory Report Data Header;
               RUS=Заголовок данных регламентного отчета];
    LookupPageID=Page26562;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              RUS=Номер];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Description         ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 3   ;   ;Date Filter         ;Text30        ;CaptionML=[ENU=Date Filter;
                                                              RUS=Фильтр по дате];
                                                   Editable=No }
    { 6   ;   ;Report Code         ;Code20        ;TableRelation="Statutory Report";
                                                   CaptionML=[ENU=Report Code;
                                                              RUS=Код отчета] }
    { 8   ;   ;Document Type       ;Code3         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа] }
    { 9   ;   ;Correction Number   ;Integer       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Correction Number;
                                                              RUS=Номер корректировки] }
    { 12  ;   ;Dimension 1 Filter  ;Text50        ;CaptionML=[ENU=Dimension 1 Filter;
                                                              RUS=Фильтр измерения 1] }
    { 13  ;   ;Dimension 2 Filter  ;Text50        ;CaptionML=[ENU=Dimension 2 Filter;
                                                              RUS=Фильтр измерения 2] }
    { 14  ;   ;Dimension 3 Filter  ;Text50        ;CaptionML=[ENU=Dimension 3 Filter;
                                                              RUS=Фильтр измерения 3] }
    { 15  ;   ;Dimension 4 Filter  ;Text50        ;CaptionML=[ENU=Dimension 4 Filter;
                                                              RUS=Фильтр измерения 4] }
    { 20  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              RUS=Код пользователя];
                                                   Editable=No }
    { 21  ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              RUS=Дата создания];
                                                   Editable=No }
    { 23  ;   ;OKEI                ;Code3         ;CaptionML=[ENU=OKEI;
                                                              RUS=ОКЕИ];
                                                   Editable=No }
    { 24  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=Статус];
                                                   OptionCaptionML=[ENU=Open,Released,Sent;
                                                                    RUS=Открыт,Выпущен,Отправлен];
                                                   OptionString=Open,Released,Sent;
                                                   Editable=No }
    { 25  ;   ;No. in Year         ;Code8         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=No. in Year;
                                                              RUS=Номер за год];
                                                   Numeric=Yes }
    { 32  ;   ;Requisites Quantity ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Stat. Report Requisite Value" WHERE (Report Data No.=FIELD(No.),
                                                                                                           Separator=CONST(No),
                                                                                                           Excel Only=CONST(No)));
                                                   CaptionML=[ENU=Requisites Quantity;
                                                              RUS=Количество показателей] }
    { 33  ;   ;Set Requisites Quantity;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Stat. Report Requisite Value" WHERE (Report Data No.=FIELD(No.),
                                                                                                           Separator=CONST(No),
                                                                                                           Export Type=CONST(Set),
                                                                                                           Excel Only=CONST(No)));
                                                   CaptionML=[ENU=Set Requisites Quantity;
                                                              RUS=Заданное количество показателей] }
    { 34  ;   ;Period              ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Period;
                                                              RUS=Период] }
    { 35  ;   ;Report Type         ;Code1         ;CaptionML=[ENU=Report Type;
                                                              RUS=Тип отчета] }
    { 36  ;   ;Period Year         ;Code4         ;CaptionML=[ENU=Period Year;
                                                              RUS=Год периода];
                                                   Numeric=Yes }
    { 37  ;   ;Period Type         ;Code2         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Period Type;
                                                              RUS=Признак периода];
                                                   Numeric=Yes }
    { 38  ;   ;Period No.          ;Code3         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Period No.;
                                                              RUS=Номер периода] }
    { 39  ;   ;Start Period Date   ;Date          ;CaptionML=[ENU=Start Period Date;
                                                              RUS=Дата начала периода] }
    { 40  ;   ;End Period Date     ;Date          ;CaptionML=[ENU=End Period Date;
                                                              RUS=Дата окончания периода] }
    { 41  ;   ;Creation Day        ;Code2         ;CaptionML=[ENU=Creation Day;
                                                              RUS=День создания] }
    { 42  ;   ;Creation Month No.  ;Code2         ;CaptionML=[ENU=Creation Month No.;
                                                              RUS=Номер месяца создания] }
    { 43  ;   ;Creation Month in Words;Text20     ;CaptionML=[ENU=Creation Month in Words;
                                                              RUS=Название месяца создания] }
    { 44  ;   ;Creation Year       ;Code2         ;CaptionML=[ENU=Creation Year;
                                                              RUS=Год создания] }
    { 45  ;   ;Creation Date Code  ;Code8         ;CaptionML=[ENU=Creation Date Code;
                                                              RUS=Дата формирования файла] }
    { 50  ;   ;GUID Value          ;Code36        ;CaptionML=[ENU=GUID Value;
                                                              RUS=Значение GUID] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Period Year,No. in Year                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CompInfo@1210012 : Record 79;
      SRSetup@1210000 : Record 26569;
      StatutoryReport@1210008 : Record 26550;
      StatutoryReportDataValue@1470000 : Record 26564;
      StatReportDataChangeLog@1210002 : Record 26565;
      WorkbookSheetBuffer@1210020 : TEMPORARY Record 26568;
      FormatVersion@1210010 : Record 26573;
      BLOBRef@1210025 : TEMPORARY Record 99008535;
      TempNameValueBuffer@1210028 : TEMPORARY Record 823;
      NoSeriesManagement@1210001 : Codeunit 396;
      Text002@1210004 : TextConst 'ENU=You must specify the File Name.;RUS=Необходимо указать имя файла.';
      Text004@1210006 : TextConst 'ENU=File %1 couldn''t be created.;RUS=Не удалось создать файл %1.';
      FileMgt@1210021 : Codeunit 419;
      ReportFile@1210007 : File;
      Text005@1210011 : TextConst 'ENU=Excel not found.;RUS=Excel не установлен.';
      Text008@1210017 : TextConst 'ENU=Export to Excel\Processing sheet #1##############\Sheet progress   @2@@@@@@@@@@@@@@;RUS=Экспорт в Excel\Обработка листа #1##############\Ход обработки листов   @2@@@@@@@@@@@@@@';
      Text010@1210019 : TextConst 'ENU=Excel sheet %1 can''t be opened.;RUS=Не удается открыть лист Excel %1.';
      Text012@1210022 : TextConst 'ENU=Opening workbook;RUS=Открытие книги';
      Text013@1210023 : TextConst 'ENU=Value of the %1 cannot be empty.;RUS=Значение %1 не может быть пустым.';
      Text014@1210024 : TextConst 'ENU=XML file is verified.;RUS=Файл XML проверен.';
      Text015@1210003 : TextConst 'ENU=Data has been successfully updated.;RUS=Данные успешно обновлены.';
      Text016@1210018 : TextConst 'ENU=Report %1 does not have linked internal data sources.;RUS=Отчет %1 не содержит связанных внутренних источников данных.';
      Text006@1210027 : TextConst 'ENU=Export;RUS=Экспорт';
      Text009@1210026 : TextConst 'ENU=All Files (*.*)|*.*;RUS=Все файлы (*.*)|*.*';
      XlHelper@1210015 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      XlApp@1210014 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1210013 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorkbookClass" RUNONCLIENT;
      XlWrkSht@1210009 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      XlWrkshts@1210005 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheets" RUNONCLIENT;
      TypeMissing@1210016 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Helper";
      XmlReaderSettings@1210037 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReaderSettings" WITHEVENTS;
      ServerFileName@1210029 : Text;
      TestMode@1210030 : Boolean;

    PROCEDURE CreateReportHeader@1210024(StatutoryReport@1210013 : Record 26550;CreationDate@1210012 : Date;StartDate@1210011 : Date;EndDate@1210010 : Date;DocumentType@1210009 : 'Primary,Correction';OKEIType@1210008 : Option;CorrNumber@1210007 : Integer;DataDescription@1210005 : Text[250];PeriodNo@1210003 : Integer;PeriodType@1210002 : Code[2];PeriodName@1210001 : Text[30]);
    VAR
      LocalisationMgt@1210015 : Codeunit 12400;
    BEGIN
      INIT;
      "Report Code" := StatutoryReport.Code;
      IF StartDate = EndDate THEN
        "Date Filter" := FORMAT(StartDate)
      ELSE
        "Date Filter" := STRSUBSTNO('%1..%2',StartDate,EndDate);
      Description := DataDescription;
      "User ID" := USERID;
      IF StatutoryReport.IsXML THEN
        CASE DocumentType OF
          DocumentType::Primary:
            "Document Type" := '0';
          DocumentType::Correction:
            "Document Type" := FORMAT(CorrNumber);
        END
      ELSE
        CASE DocumentType OF
          DocumentType::Primary:
            "Document Type" := '1';
          DocumentType::Correction:
            "Document Type" := '3';
        END;
      "Correction Number" := CorrNumber;
      "Creation Date" := CreationDate;
      "Start Period Date" := StartDate;
      "End Period Date" := EndDate;
      "Period Type" := PeriodType;
      IF PeriodNo <> 0 THEN
        "Period No." := FORMAT(PeriodNo,2,'<Integer,2><Filler Character,0>');
      IF StatutoryReport."Report Type" <> StatutoryReport."Report Type"::" " THEN
        "Report Type" := FORMAT("Report Type",1,2);
      "Period Year" := FORMAT(StartDate,0,'<Year4>');
      "Creation Day" := FORMAT(CreationDate,0,'<Day,2><Filler Character,0>');
      "Creation Month No." := FORMAT(CreationDate,0,'<Month,2><Filler Character,0>');
      "Creation Month in Words" := COPYSTR(LocalisationMgt.Month2Text(CreationDate),1,MAXSTRLEN("Creation Month in Words"));
      "Creation Year" := FORMAT(CreationDate,0,'<Year><Filler Character,0>');
      "Creation Date Code" := FORMAT(CreationDate,0,'<Year4><Month,2><Day,2><Filler Character,0>');
      OKEI := FORMAT(OKEIType);
      Period := PeriodName;
      INSERT(TRUE);
    END;

    PROCEDURE CreateRequisiteValues@1210001(ExportLogEntryNo@1210010 : Code[20]);
    VAR
      StatutoryReportTable@1210004 : Record 26552;
      NextStatutoryReportTable@1210013 : Record 26552;
      ScalableTableRow@1210007 : Record 26555;
      RequisitesBuffer@1210005 : TEMPORARY Record 26568;
      RequisitesBufferCopy@1210008 : TEMPORARY Record 26568;
      StatReportRequisiteValue@1210000 : Record 26566;
      StatReportRequisitesGroup@1210001 : Record 26557;
      StatReportRequisite@1210002 : Record 26559;
      EntryNo@1210003 : Integer;
      ScalableTableRowNo@1210006 : Integer;
      AddSeparator@1210012 : Boolean;
    BEGIN
      SRSetup.GET;
      SRSetup.TESTFIELD("Group End Separator");
      SRSetup.TESTFIELD("Fragment End Separator");
      SRSetup.TESTFIELD("File End Separator");

      StatReportRequisiteValue.SETRANGE("Report Data No.","No.");
      StatReportRequisiteValue.DELETEALL;

      CreateRequisitesBuffer(RequisitesBuffer);

      EntryNo := 1;
      RequisitesBuffer.RESET;
      IF RequisitesBuffer.FINDSET THEN
        REPEAT
          RequisitesBufferCopy := RequisitesBuffer;
          RequisitesBufferCopy.INSERT;
        UNTIL RequisitesBuffer.NEXT = 0;

      IF RequisitesBuffer.FINDSET THEN
        REPEAT
          IF RequisitesBuffer.Separator THEN BEGIN
            AddSeparators(RequisitesBuffer."Group End",RequisitesBuffer."Fragment End",FALSE,EntryNo);
          END ELSE BEGIN
            StatReportRequisite.RESET;
            StatReportRequisite.SETCURRENTKEY("Report Code","Requisites Group Name","Table Code","Sequence No.");
            StatReportRequisite.SETRANGE("Report Code","Report Code");
            StatReportRequisite.SETRANGE("Requisites Group Name",RequisitesBuffer."Requisites Group Name");
            StatReportRequisite.SETRANGE("Table Code",RequisitesBuffer."Table Code");

            IF RequisitesBuffer."Table Code" <> '' THEN BEGIN
              StatutoryReportTable.GET("Report Code",RequisitesBuffer."Table Code");
              StatReportRequisite.SETRANGE("Scalable Table Row Template",FALSE);
              IF StatReportRequisite.FINDSET THEN
                REPEAT
                  StatReportRequisiteValue.INIT;
                  StatReportRequisiteValue."Report Data No." := "No.";
                  StatReportRequisiteValue."Entry No." := EntryNo;
                  StatReportRequisiteValue."Report Code" := "Report Code";
                  StatReportRequisiteValue."Table Code" := StatReportRequisite."Table Code";
                  StatReportRequisiteValue."Data Type" := StatReportRequisite."Data Type";
                  StatReportRequisiteValue."Excel Sheet Name" := RequisitesBuffer."Excel Sheet Name";
                  StatReportRequisiteValue.Name := StatReportRequisite.Name;
                  StatReportRequisiteValue.Description := StatReportRequisite.Description;
                  StatReportRequisiteValue."Requisites Group Name" := RequisitesBuffer."Requisites Group Name";
                  StatReportRequisiteValue.Recalculate := StatReportRequisite.GetValue("No.",
                      StatReportRequisite."Table Code",RequisitesBuffer."Excel Sheet Name",ExportLogEntryNo,
                      StatReportRequisiteValue.Value);
                  StatReportRequisiteValue."Excel Cell Name" := StatReportRequisite."Excel Cell Name";
                  StatReportRequisiteValue."Excel Only" := StatReportRequisite."Excel Only";
                  IF StatutoryReportTable."Scalable Table" THEN
                    IF (NOT StatReportRequisiteValue."Excel Only") AND
                       (StatReportRequisite."Source Type" <> StatReportRequisite."Source Type"::"Table Data")
                    THEN
                      StatReportRequisiteValue."Excel Only" := SkipRequisiteExportToFile(RequisitesBuffer,StatReportRequisite);
                  StatReportRequisiteValue."Export Type" := StatReportRequisite."Export Type";
                  StatReportRequisiteValue."Excel Mapping Type" := StatReportRequisite."Excel Mapping Type";
                  IF StatReportRequisiteValue.CheckValue(ExportLogEntryNo) THEN
                    StatReportRequisiteValue.INSERT;

                  EntryNo := EntryNo + 1;
                UNTIL StatReportRequisite.NEXT = 0;

              IF StatutoryReportTable."Scalable Table" THEN BEGIN
                StatutoryReportTable.TESTFIELD("Scalable Table First Row No.");
                ScalableTableRowNo := StatutoryReportTable."Scalable Table First Row No.";
                ScalableTableRow.SETRANGE("Report Data No.","No.");
                ScalableTableRow.SETRANGE("Report Code",StatutoryReportTable."Report Code");
                ScalableTableRow.SETRANGE("Table Code",StatutoryReportTable.Code);
                ScalableTableRow.SETRANGE("Excel Sheet Name",RequisitesBuffer."Excel Sheet Name");
                IF ScalableTableRow.FINDSET THEN BEGIN
                  REPEAT
                    ScalableTableRow.CreateRequisitesValues("No.",ExportLogEntryNo,ScalableTableRowNo,
                      EntryNo,RequisitesBuffer."Requisites Group Name",RequisitesBuffer."Excel Sheet Name",
                      RequisitesBuffer."New Page");
                    ScalableTableRowNo := ScalableTableRowNo + StatutoryReportTable."Scalable Table Row Step";
                    AddSeparators(TRUE,FALSE,FALSE,EntryNo);
                  UNTIL ScalableTableRow.NEXT = 0;
                END ELSE BEGIN
                  ScalableTableRow."Report Code" := "Report Code";
                  ScalableTableRow."Table Code" := StatutoryReportTable.Code;
                  ScalableTableRow.CreateRequisitesValues("No.",ExportLogEntryNo,ScalableTableRowNo,
                    EntryNo,RequisitesBuffer."Requisites Group Name",RequisitesBuffer."Excel Sheet Name",
                    RequisitesBuffer."New Page");
                END;
              END;

              IF StatutoryReportTable."Multipage Table" THEN BEGIN
                AddSeparator := TRUE;
                RequisitesBufferCopy.GET(RequisitesBuffer."Entry No.");
                IF RequisitesBufferCopy.NEXT <> 0 THEN
                  IF NOT RequisitesBufferCopy.Separator AND
                     (RequisitesBuffer."Requisites Group Name" = RequisitesBufferCopy."Requisites Group Name") AND
                     (RequisitesBuffer."Excel Sheet Name" = RequisitesBufferCopy."Excel Sheet Name") AND
                     (RequisitesBuffer."Table Code" <> RequisitesBufferCopy."Table Code") AND
                     (RequisitesBufferCopy."Table Code" <> '')
                  THEN BEGIN
                    NextStatutoryReportTable.GET("Report Code",RequisitesBufferCopy."Table Code");
                    IF NextStatutoryReportTable."Multipage Table" THEN
                      AddSeparator := FALSE;
                  END;
                IF AddSeparator THEN BEGIN
                  StatReportRequisitesGroup.GET("Report Code",RequisitesBuffer."Requisites Group Name");
                  AddSeparators(StatReportRequisitesGroup."Group End",FALSE,FALSE,EntryNo);
                END;
              END;
            END ELSE BEGIN
              IF StatReportRequisite.FINDSET THEN
                REPEAT
                  StatReportRequisitesGroup.GET("Report Code",StatReportRequisite."Requisites Group Name");
                  StatReportRequisiteValue.INIT;
                  StatReportRequisiteValue."Report Data No." := "No.";
                  StatReportRequisiteValue."Entry No." := EntryNo;
                  StatReportRequisiteValue."Report Code" := "Report Code";
                  StatReportRequisiteValue."Table Code" := StatReportRequisite."Table Code";
                  StatReportRequisiteValue."Data Type" := StatReportRequisite."Data Type";
                  StatReportRequisiteValue."Excel Sheet Name" := StatReportRequisitesGroup."Excel Sheet Name";
                  StatReportRequisiteValue.Name := StatReportRequisite.Name;
                  StatReportRequisiteValue.Description := StatReportRequisite.Description;
                  StatReportRequisiteValue."Requisites Group Name" := RequisitesBuffer."Requisites Group Name";
                  StatReportRequisiteValue.Recalculate := StatReportRequisite.GetValue("No.",StatReportRequisite."Table Code",'',
                      ExportLogEntryNo,StatReportRequisiteValue.Value);
                  StatReportRequisiteValue."Excel Cell Name" := StatReportRequisite."Excel Cell Name";
                  StatReportRequisiteValue."Excel Only" := StatReportRequisite."Excel Only";
                  StatReportRequisiteValue."Export Type" := StatReportRequisite."Export Type";
                  StatReportRequisiteValue."Excel Mapping Type" := StatReportRequisite."Excel Mapping Type";
                  IF StatReportRequisiteValue.CheckValue(ExportLogEntryNo) THEN
                    StatReportRequisiteValue.INSERT;

                  EntryNo := EntryNo + 1;
                UNTIL StatReportRequisite.NEXT = 0;
            END;
          END;
        UNTIL RequisitesBuffer.NEXT = 0;

      StatReportRequisiteValue.RESET;
      StatReportRequisiteValue.SETRANGE("Report Data No.","No.");
      StatReportRequisiteValue.SETRANGE(Recalculate,TRUE);
      IF StatReportRequisiteValue.FINDSET(TRUE) THEN
        REPEAT
          StatReportRequisite.GET("Report Code",StatReportRequisiteValue."Requisites Group Name",StatReportRequisiteValue.Name);
          StatReportRequisite.GetValue("No.",StatReportRequisite."Table Code",'',ExportLogEntryNo,
            StatReportRequisiteValue.Value);
          StatReportRequisiteValue.MODIFY;
        UNTIL StatReportRequisiteValue.NEXT = 0;

      AddSeparators(FALSE,FALSE,TRUE,EntryNo);
    END;

    PROCEDURE CreateRequisitesBuffer@1210007(VAR RequisitesBuffer@1210000 : Record 26568);
    VAR
      StatReportExcelSheet@1210005 : Record 26562;
      StatutoryReportTable@1210004 : Record 26552;
      StatReportRequisitesGroup@1210003 : Record 26557;
      StatReportRequisite@1210002 : Record 26559;
      SheetBuffer@1210006 : TEMPORARY Record 26568;
      TemplateRequisitesBuffer@1210007 : TEMPORARY Record 26568;
      EntryNo@1210001 : Integer;
    BEGIN
      EntryNo := 1;
      StatReportExcelSheet.SETRANGE("Report Code","Report Code");
      StatReportExcelSheet.SETRANGE("Report Data No.","No.");
      IF StatReportExcelSheet.FINDSET THEN
        REPEAT
          SheetBuffer.SETRANGE("Excel Sheet Name",StatReportExcelSheet."Sheet Name");
          SheetBuffer.SETRANGE("Table Code",StatReportExcelSheet."Table Code");
          IF NOT SheetBuffer.FINDFIRST THEN BEGIN
            SheetBuffer.INIT;
            SheetBuffer."Entry No." := EntryNo;
            SheetBuffer."Table Code" := StatReportExcelSheet."Table Code";
            SheetBuffer."Excel Sheet Name" := StatReportExcelSheet."Sheet Name";
            IF SheetBuffer."Table Code" <> '' THEN BEGIN
              StatutoryReportTable.GET("Report Code",SheetBuffer."Table Code");
              IF StatutoryReportTable."Scalable Table" OR StatutoryReportTable."Multipage Table" THEN
                SheetBuffer."Section No." := StatutoryReportTable.GetSectionNo;
              SheetBuffer."Table Sequence No." := StatutoryReportTable."Sequence No.";
            END;
            SheetBuffer."Sequence No." := StatReportExcelSheet."Sequence No.";
            SheetBuffer."New Page" := StatReportExcelSheet."New Page";
            SheetBuffer.INSERT;
            EntryNo := EntryNo + 1;
          END;
        UNTIL StatReportExcelSheet.NEXT = 0;

      EntryNo := 1;
      StatReportRequisitesGroup.SETCURRENTKEY("Report Code","Sequence No.");
      StatReportRequisitesGroup.SETRANGE("Report Code","Report Code");
      IF StatReportRequisitesGroup.FINDSET THEN
        REPEAT
          StatReportRequisite.SETCURRENTKEY("Report Code","Requisites Group Name","Table Code","Sequence No.");
          StatReportRequisite.SETRANGE("Report Code","Report Code");
          StatReportRequisite.SETRANGE("Requisites Group Name",StatReportRequisitesGroup.Name);
          IF StatReportRequisite.FINDSET THEN
            REPEAT
              TemplateRequisitesBuffer.SETRANGE("Requisites Group Name",StatReportRequisite."Requisites Group Name");
              TemplateRequisitesBuffer.SETRANGE("Table Code",StatReportRequisite."Table Code");
              IF NOT TemplateRequisitesBuffer.FINDFIRST THEN BEGIN
                TemplateRequisitesBuffer.INIT;
                TemplateRequisitesBuffer."Entry No." := EntryNo;
                TemplateRequisitesBuffer."Requisites Group Name" := StatReportRequisite."Requisites Group Name";
                TemplateRequisitesBuffer."Table Code" := StatReportRequisite."Table Code";
                IF TemplateRequisitesBuffer."Table Code" <> '' THEN
                  TemplateRequisitesBuffer."Section No." := StatReportRequisitesGroup."Section No.";
                TemplateRequisitesBuffer."Excel Sheet Name" := StatReportRequisitesGroup."Excel Sheet Name";
                TemplateRequisitesBuffer.INSERT;
                EntryNo := EntryNo + 1;
              END;
            UNTIL StatReportRequisite.NEXT = 0;

          IF StatReportRequisitesGroup."Group End" OR
             StatReportRequisitesGroup."Fragment End"
          THEN BEGIN
            TemplateRequisitesBuffer.INIT;
            TemplateRequisitesBuffer."Entry No." := EntryNo;
            TemplateRequisitesBuffer."Requisites Group Name" := StatReportRequisitesGroup.Name;
            TemplateRequisitesBuffer.Separator := TRUE;
            TemplateRequisitesBuffer."Excel Sheet Name" := StatReportRequisitesGroup."Excel Sheet Name";
            TemplateRequisitesBuffer."Group End" := StatReportRequisitesGroup."Group End";
            TemplateRequisitesBuffer."Fragment End" := StatReportRequisitesGroup."Fragment End";
            TemplateRequisitesBuffer.INSERT;
            EntryNo := EntryNo + 1;
          END;
        UNTIL StatReportRequisitesGroup.NEXT = 0;

      EntryNo := 0;
      SheetBuffer.RESET;
      TemplateRequisitesBuffer.RESET;
      IF TemplateRequisitesBuffer.FINDSET THEN BEGIN
        REPEAT
          IF TemplateRequisitesBuffer."Section No." <> '' THEN BEGIN
            TemplateRequisitesBuffer.SETRANGE("Section No.",TemplateRequisitesBuffer."Section No.");
            SheetBuffer.SETCURRENTKEY("Section No.","Sequence No.","Table Sequence No.");
            SheetBuffer.SETRANGE("Section No.",TemplateRequisitesBuffer."Section No.");
            IF SheetBuffer.FINDSET THEN BEGIN
              REPEAT
                TemplateRequisitesBuffer.SETRANGE("Table Code",SheetBuffer."Table Code");
                IF TemplateRequisitesBuffer.FINDSET THEN
                  REPEAT
                    EntryNo := EntryNo + 1;
                    RequisitesBuffer.INIT;
                    RequisitesBuffer := TemplateRequisitesBuffer;
                    RequisitesBuffer."Entry No." := EntryNo;
                    RequisitesBuffer."Excel Sheet Name" := SheetBuffer."Excel Sheet Name";
                    RequisitesBuffer."New Page" := SheetBuffer."New Page";
                    RequisitesBuffer.INSERT;
                  UNTIL TemplateRequisitesBuffer.NEXT = 0;
              UNTIL SheetBuffer.NEXT = 0;

              TemplateRequisitesBuffer.SETRANGE("Table Code");
              TemplateRequisitesBuffer.FINDLAST;
            END ELSE BEGIN
              EntryNo := EntryNo + 1;
              RequisitesBuffer.INIT;
              RequisitesBuffer := TemplateRequisitesBuffer;
              RequisitesBuffer."Entry No." := EntryNo;
              RequisitesBuffer."New Page" := TRUE;
              RequisitesBuffer.INSERT;
            END;
            TemplateRequisitesBuffer.SETRANGE("Section No.");
          END ELSE BEGIN
            EntryNo := EntryNo + 1;
            RequisitesBuffer.INIT;
            RequisitesBuffer := TemplateRequisitesBuffer;
            RequisitesBuffer."Entry No." := EntryNo;
            RequisitesBuffer."New Page" := TRUE;
            RequisitesBuffer.INSERT;
          END;
        UNTIL TemplateRequisitesBuffer.NEXT = 0;
      END;
    END;

    PROCEDURE ExportResultsToFile@1210000();
    VAR
      StatReportRequisiteValue@1210003 : Record 26566;
      ExportLogEntry@1210004 : Record 26567;
      FileName@1210008 : Text;
      LocalFileName@1210000 : Text;
      FormattedValue@1210013 : Text[250];
      ErrorMessage@1210014 : Text[250];
    BEGIN
      TESTFIELD(Status,Status::Released);
      CompInfo.GET;
      SRSetup.GET;
      SRSetup.TESTFIELD("Electronic Files Folder Name");
      StatutoryReport.GET("Report Code");
      StatutoryReport.TESTFIELD("Recipient Tax Authority SONO");
      StatutoryReport.TESTFIELD("Admin. Tax Authority SONO");
      FileName :=
        'O' +
        CompInfo."VAT Registration No." +
        '_' +
        CompInfo."KPP Code" +
        '_' +
        StatutoryReport."Recipient Tax Authority SONO" +
        StatutoryReport."Admin. Tax Authority SONO" +
        '_' +
        COPYSTR("Period Year",3,2) +
        '_' +
        "No. in Year" +
        '.txt';
      LocalFileName := FileName;
      IF NOT TestMode THEN
        FileName := FileMgt.ServerTempFileName('')
      ELSE
        FileName := ServerFileName;

      ReportFile.TEXTMODE(TRUE);
      IF NOT ReportFile.CREATE(FileName) THEN
        ERROR(Text004,FileName);

      ExportLogEntry."Report Code" := "Report Code";
      ExportLogEntry."Report Data No." := "No.";
      ExportLogEntry.Description := Description;
      ExportLogEntry.Year := "Period Year";
      ExportLogEntry."Sender No." := StatutoryReport."Sender No.";
      ExportLogEntry.INSERT(TRUE);

      CreateRequisiteValues(ExportLogEntry."No.");

      StatReportRequisiteValue.SETRANGE("Report Data No.","No.");
      StatReportRequisiteValue.SETRANGE("Report Code","Report Code");
      StatReportRequisiteValue.SETRANGE("Excel Only",FALSE);
      IF StatReportRequisiteValue.FINDSET THEN
        REPEAT
          IF StatReportRequisiteValue.Separator THEN
            WriteLine(StatReportRequisiteValue.Value)
          ELSE BEGIN
            IF NOT StatReportRequisiteValue.FormatValue(0,FormattedValue,ErrorMessage) THEN
              ERROR(ErrorMessage);
            WriteLine(StatReportRequisiteValue.Name + ':' + FormattedValue);
          END;
        UNTIL StatReportRequisiteValue.NEXT = 0;

      ReportFile.CLOSE;

      ExportLogEntry."Exported File".IMPORT(FileName);

      DOWNLOAD(FileName,Text006,SRSetup."Electronic Files Folder Name",Text009,LocalFileName);
      FileName := LocalFileName;

      WHILE STRPOS(FileName,'\') <> 0 DO
        FileName := COPYSTR(FileName,STRPOS(FileName,'\') + 1);
      ExportLogEntry."File Name" := FileName;
      ExportLogEntry.MODIFY;

      Status := Status::Sent;
      MODIFY;
    END;

    PROCEDURE ExportResultsToExcel@1210002();
    VAR
      StatReportExcelSheet@1210000 : Record 26562;
      ReportSheetBuffer@1210009 : TEMPORARY Record 26568;
      StatReportRequisiteValue@1210007 : Record 26566;
      XMLElementValueBuffer@1210010 : TEMPORARY Record 26568;
      XMLElementLine@1210011 : Record 26570;
      PageNumberElement@1210002 : Record 26570;
      Window@1210004 : Dialog;
      FileName@1210008 : Text;
      ErrorMessage@1210003 : Text[250];
      TotalElementsQty@1210013 : Integer;
      Counter@1210014 : Integer;
      PageNumberCellsQty@1210005 : Integer;
      PageNumber@1210015 : Integer;
      IsXML@1210012 : Boolean;
      PageNumberValue@1210006 : Code[20];
    BEGIN
      TESTFIELD("Report Code");
      IF Status = Status::Open THEN
        FIELDERROR(Status);

      StatutoryReport.GET("Report Code");
      IsXML := StatutoryReport.IsXML;

      StatutoryReport.TESTFIELD("Format Version Code");
      FormatVersion.GET(StatutoryReport."Format Version Code");
      FormatVersion.TESTFIELD("Excel File Name");

      FormatVersion.CALCFIELDS("Report Template");
      IF FormatVersion."Report Template".HASVALUE THEN BEGIN
        FileName := FileMgt.ServerTempFileName('');
        IF EXISTS(FileName) THEN
          ERASE(FileName);
        BLOBRef.Blob := FormatVersion."Report Template";
        FileName := FileMgt.BLOBExport(BLOBRef,FileName,FALSE);
        IF FileName = '' THEN
          EXIT;
      END;

      Window.OPEN(Text012);

      IF IsXML THEN
        CreateXMLElementValues(XMLElementValueBuffer)
      ELSE
        CreateRequisiteValues('');

      IF FileName = '' THEN
        ERROR(Text002);

      XlApp := XlApp.ApplicationClass;
      IF ISNULL(XlApp) THEN
        ERROR(Text005);

      XlHelper.CallOpen(XlApp,FileName);
      XlWrkBk := XlApp.ActiveWorkbook;

      FillWorkbookSheetBuffer;
      FillReportSheetBuffer(ReportSheetBuffer,XMLElementValueBuffer,IsXML);

      ProcessReportExcelSheets(ReportSheetBuffer);
      FillWorkbookSheetBuffer;

      Window.CLOSE;

      Window.OPEN(Text008);

      ReportSheetBuffer.RESET;
      IF ReportSheetBuffer.FINDSET THEN
        REPEAT
          IF OpenWorksheet(ReportSheetBuffer."Excel Sheet Name") THEN BEGIN
            Window.UPDATE(1,ReportSheetBuffer."Excel Sheet Name");
            StatReportExcelSheet.GET("Report Code",'','',ReportSheetBuffer."Parent Excel Sheet Name");

            IF (StatReportExcelSheet."Page Number Excel Cell Name" <> '') AND
               ExcelSheetHasValues(XMLElementValueBuffer,ReportSheetBuffer."Excel Sheet Name")
            THEN BEGIN
              PageNumber := PageNumber + 1;
              PageNumberElement."Excel Cell Name" := StatReportExcelSheet."Page Number Excel Cell Name";
              PageNumberElement."Horizontal Cells Quantity" := StatReportExcelSheet."Page Number Horiz. Cells Qty";
              PageNumberElement."Vertical Cells Quantity" := StatReportExcelSheet."Page Number Vertical Cells Qty";
              PageNumberCellsQty :=
                StatReportExcelSheet."Page Number Horiz. Cells Qty" *
                StatReportExcelSheet."Page Number Vertical Cells Qty";
              IF PageNumberCellsQty > 1 THEN
                PageNumberElement."Excel Mapping Type" := PageNumberElement."Excel Mapping Type"::"Multi-cell";
              PageNumberValue :=
                PADSTR('',PageNumberCellsQty - STRLEN(FORMAT(PageNumber)),'0') +
                FORMAT(PageNumber);
              PageNumberElement.ExportToExcel(XlWrkSht,PageNumberValue,ErrorMessage,PageNumberElement."Excel Cell Name");
            END;

            IF IsXML THEN BEGIN
              XMLElementValueBuffer.RESET;
              XMLElementValueBuffer.SETRANGE("Excel Sheet Name",ReportSheetBuffer."Excel Sheet Name");
              TotalElementsQty := XMLElementValueBuffer.COUNT;
              Counter := 0;
              IF XMLElementValueBuffer.FINDSET THEN
                REPEAT
                  XMLElementLine.GET("Report Code",XMLElementValueBuffer."XML Element Line No.");
                  IF XMLElementLine."Excel Cell Name" <> '' THEN
                    IF NOT XMLElementLine.ExportToExcel(
                         XlWrkSht,
                         XMLElementValueBuffer.Value,
                         ErrorMessage,
                         XMLElementValueBuffer."Excel Cell Name")
                    THEN
                      ErrorExcelProcessing(ErrorMessage,FileName);
                  Counter := Counter + 1;
                  Window.UPDATE(2,ROUND(Counter / TotalElementsQty * 10000,1));
                UNTIL XMLElementValueBuffer.NEXT = 0;
            END ELSE BEGIN
              StatReportRequisiteValue.SETRANGE("Report Code","Report Code");
              StatReportRequisiteValue.SETRANGE("Report Data No.","No.");
              StatReportRequisiteValue.SETRANGE("Excel Sheet Name",ReportSheetBuffer."Excel Sheet Name");
              TotalElementsQty := StatReportRequisiteValue.COUNT;
              Counter := 0;
              IF StatReportRequisiteValue.FINDSET THEN
                REPEAT
                  IF (StatReportRequisiteValue."Excel Cell Name" <> '') OR
                     (StatReportRequisiteValue."Excel Mapping Type" = StatReportRequisiteValue."Excel Mapping Type"::Option)
                  THEN
                    IF StatReportRequisiteValue.Value <> '' THEN
                      IF NOT StatReportRequisiteValue.ExportToExcel(XlWrkSht,ErrorMessage) THEN
                        ErrorExcelProcessing(ErrorMessage,FileName);
                  Counter := Counter + 1;
                  Window.UPDATE(2,ROUND(Counter / TotalElementsQty * 10000,1));
                UNTIL StatReportRequisiteValue.NEXT = 0;
            END;
          END ELSE
            ErrorExcelProcessing(STRSUBSTNO(Text010,ReportSheetBuffer."Excel Sheet Name"),FileName);
        UNTIL ReportSheetBuffer.NEXT = 0;

      XlWrkBk.SaveCopyAs(GetFileName);

      XlApp.Calculate;
      XlApp.Visible(TRUE);
      XlApp.UserControl(TRUE);
      CLEAR(XlWrkBk);
      CLEAR(XlApp);

      Window.CLOSE;
    END;

    PROCEDURE ExportResultsToXML@1210008();
    VAR
      TempBlob@1210003 : TEMPORARY Record 99008535;
      ExportLogEntry@1210001 : Record 26567;
      XMLElementLine@1210004 : Record 26570;
      StatRepBuffer@1210007 : Record 26568;
      ElementValueBuffer@1210009 : TEMPORARY Record 26568;
      XMLExcelReportsMgt@1210005 : Codeunit 12408;
      XmlDoc@1210002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      OutStr@1210006 : OutStream;
      InStr@1210008 : InStream;
      FileName@1210000 : Text[250];
    BEGIN
      TESTFIELD(Status,Status::Released);
      CompInfo.GET;
      SRSetup.GET;
      SRSetup.TESTFIELD("Electronic Files Folder Name");
      StatutoryReport.GET("Report Code");
      FormatVersion.GET(StatutoryReport."Format Version Code");
      FormatVersion.TESTFIELD("XML File Name Element Name");

      XMLElementLine.SETRANGE("Report Code","Report Code");
      XMLElementLine.SETRANGE("Element Name",FormatVersion."XML File Name Element Name");
      XMLElementLine.FINDFIRST;
      StatRepBuffer."Report Data No." := "No.";
      FileName := XMLElementLine.GetElementValue(StatRepBuffer);
      IF FileName = '' THEN
        ERROR(Text013,XMLElementLine.GetRecordDescription);
      FileName := FileName + '.xml';

      ExportLogEntry."Report Code" := "Report Code";
      ExportLogEntry."Report Data No." := "No.";
      ExportLogEntry.Description := Description;
      ExportLogEntry.Year := FORMAT("Creation Date",4,'<Year4>');
      ExportLogEntry."Sender No." := StatutoryReport."Sender No.";
      ExportLogEntry.INSERT(TRUE);

      CreateXML(XmlDoc,ElementValueBuffer,StatRepBuffer);

      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLExcelReportsMgt.SaveXMLDocWithEncoding(OutStr,XmlDoc,'windows-1251');

      IF NOT TestMode THEN BEGIN
        TempBlob.Blob.CREATEINSTREAM(InStr);
        DOWNLOADFROMSTREAM(InStr,Text006,SRSetup."Electronic Files Folder Name",Text009,FileName);
      END ELSE
        FileMgt.BLOBExportToServerFile(TempBlob,ServerFileName);

      ExportLogEntry."Exported File" := TempBlob.Blob;
      WHILE STRPOS(FileName,'\') <> 0 DO
        FileName := COPYSTR(FileName,STRPOS(FileName,'\') + 1);
      ExportLogEntry."File Name" := FileName;
      ExportLogEntry.MODIFY;
      Status := Status::Sent;
      MODIFY;
    END;

    PROCEDURE OpenWorksheet@1210009(ExcelSheetName@1210000 : Text[50]) : Boolean;
    BEGIN
      IF FindExcelSheet(ExcelSheetName) THEN
        XlWrkSht := XlWrkBk.Worksheets.Item(ExcelSheetName)
      ELSE
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FindExcelSheet@1210006(ExcelSheetName@1210000 : Text[50]) Found : Boolean;
    BEGIN
      WorkbookSheetBuffer.SETRANGE("Excel Sheet Name",ExcelSheetName);
      Found := WorkbookSheetBuffer.FINDFIRST;
    END;

    PROCEDURE FillWorkbookSheetBuffer@1210014();
    VAR
      i@1210000 : Integer;
    BEGIN
      WorkbookSheetBuffer.RESET;
      WorkbookSheetBuffer.DELETEALL;
      i := 1;
      WHILE i <= XlWrkBk.Worksheets.Count DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(i);
        WorkbookSheetBuffer."Entry No." := i;
        WorkbookSheetBuffer."Excel Sheet Name" := XlWrkSht.Name;
        WorkbookSheetBuffer.INSERT;
        i := i + 1;
      END;
    END;

    PROCEDURE ErrorExcelProcessing@1210003(ErrorMessage@1210002 : Text[250];FileName@1210000 : Text);
    BEGIN
      CLEAR(XlWrkSht);
      CLEAR(XlWrkBk);
      XlApp.Quit;
      CLEAR(XlApp);

      IF EXISTS(FileName) THEN
        IF ERASE(FileName) THEN;
      ERROR(ErrorMessage);
    END;

    PROCEDURE FillReportSheetBuffer@1210005(VAR ReportSheetBuffer@1210000 : Record 26568;VAR XMLElementValueBuffer@1210005 : Record 26568;IsXML@1210004 : Boolean);
    VAR
      StatReportRequisiteValue@1210001 : Record 26566;
    BEGIN
      IF IsXML THEN BEGIN
        XMLElementValueBuffer.RESET;
        XMLElementValueBuffer.SETFILTER("Excel Sheet Name",'<>''''');
        XMLElementValueBuffer.SETFILTER("Excel Cell Name",'<>''''');
        IF XMLElementValueBuffer.FINDSET THEN
          REPEAT
            AddReportSheetBufferLine(
              ReportSheetBuffer,
              XMLElementValueBuffer."Excel Sheet Name",
              XMLElementValueBuffer."Table Code");
          UNTIL XMLElementValueBuffer.NEXT = 0;
      END ELSE BEGIN
        StatReportRequisiteValue.SETRANGE("Report Code","Report Code");
        StatReportRequisiteValue.SETRANGE("Report Data No.","No.");
        StatReportRequisiteValue.SETFILTER("Excel Sheet Name",'<>''''');
        IF StatReportRequisiteValue.FINDSET THEN
          REPEAT
            IF (StatReportRequisiteValue."Excel Cell Name" <> '') OR
               (StatReportRequisiteValue."Excel Mapping Type" = StatReportRequisiteValue."Excel Mapping Type"::Option)
            THEN
              AddReportSheetBufferLine(
                ReportSheetBuffer,
                StatReportRequisiteValue."Excel Sheet Name",
                StatReportRequisiteValue."Table Code");
          UNTIL StatReportRequisiteValue.NEXT = 0;
      END;
    END;

    PROCEDURE AddReportSheetBufferLine@1210023(VAR ReportSheetBuffer@1210000 : Record 26568;ExcelSheetName@1210001 : Text[30];TableCode@1210002 : Code[20]);
    VAR
      StatReportExcelSheet@1210004 : Record 26562;
      EntryNo@1210003 : Integer;
    BEGIN
      ReportSheetBuffer.RESET;
      IF ReportSheetBuffer.FINDLAST THEN;
      EntryNo := ReportSheetBuffer."Entry No." + 1;

      ReportSheetBuffer.SETRANGE("Excel Sheet Name",ExcelSheetName);
      IF ReportSheetBuffer.ISEMPTY THEN BEGIN
        ReportSheetBuffer."Entry No." := EntryNo;
        ReportSheetBuffer."Table Code" := TableCode;
        ReportSheetBuffer."Excel Sheet Name" := ExcelSheetName;
        ReportSheetBuffer."Parent Excel Sheet Name" :=
          StatReportExcelSheet.GetParentExcelSheetName("Report Code","No.",TableCode,ExcelSheetName);
        IF ReportSheetBuffer."Parent Excel Sheet Name" = '' THEN
          ReportSheetBuffer."Parent Excel Sheet Name" := ReportSheetBuffer."Excel Sheet Name";
        ReportSheetBuffer.INSERT;
      END;
    END;

    PROCEDURE ProcessReportExcelSheets@1210012(VAR ReportSheetBuffer@1210000 : Record 26568);
    VAR
      xlSheetPlaceAfter@1210001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      xlSheetNew@1210002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
    BEGIN
      ReportSheetBuffer.RESET;
      ReportSheetBuffer.SETFILTER("Parent Excel Sheet Name",'<>''''');
      IF ReportSheetBuffer.FIND('+') THEN
        REPEAT
          IF NOT FindExcelSheet(ReportSheetBuffer."Excel Sheet Name") THEN BEGIN
            xlSheetPlaceAfter := XlWrkBk.Worksheets.Item(ReportSheetBuffer."Parent Excel Sheet Name");
            xlSheetPlaceAfter.Select(0);
            xlSheetPlaceAfter.Copy(TypeMissing.GetMissingValue,xlSheetPlaceAfter);

            xlSheetNew := XlWrkBk.ActiveSheet;
            xlSheetNew.Name := ReportSheetBuffer."Excel Sheet Name";
            xlSheetPlaceAfter.Move(TypeMissing.GetMissingValue,xlSheetNew);
          END;
        UNTIL ReportSheetBuffer.NEXT(-1) = 0;
    END;

    PROCEDURE AddSeparators@1210018(GroupEnd@1210000 : Boolean;FragmentEnd@1210004 : Boolean;FileEnd@1210005 : Boolean;VAR EntryNo@1210003 : Integer);
    BEGIN
      IF GroupEnd THEN
        AddSeparator(SRSetup."Group End Separator",EntryNo);
      IF FragmentEnd THEN
        AddSeparator(SRSetup."Fragment End Separator",EntryNo);
      IF FileEnd THEN
        AddSeparator(SRSetup."File End Separator",EntryNo);
    END;

    PROCEDURE AddSeparator@1210015(SeparatorValue@1210000 : Text[30];VAR EntryNo@1210001 : Integer);
    VAR
      StatReportRequisiteValue@1210002 : Record 26566;
    BEGIN
      StatReportRequisiteValue.SETRANGE("Report Data No.","No.");
      StatReportRequisiteValue.SETFILTER("Entry No.",'..%1',EntryNo);
      StatReportRequisiteValue.SETRANGE("Excel Only",FALSE);
      IF StatReportRequisiteValue.FINDLAST THEN
        IF StatReportRequisiteValue.Separator AND
           (StatReportRequisiteValue.Value = SeparatorValue)
        THEN
          EXIT;

      StatReportRequisiteValue.INIT;
      StatReportRequisiteValue."Report Data No." := "No.";
      StatReportRequisiteValue."Entry No." := EntryNo;
      StatReportRequisiteValue."Report Code" := "Report Code";
      StatReportRequisiteValue.Separator := TRUE;
      StatReportRequisiteValue.Value := SeparatorValue;
      StatReportRequisiteValue.INSERT;

      EntryNo := EntryNo + 1;
    END;

    PROCEDURE GetFileName@1210017() FileName : Text[250];
    VAR
      i@1210000 : Integer;
    BEGIN
      SRSetup.GET;
      SRSetup.TESTFIELD("Excel Reports Folder Name");

      FileName := FormatVersion."Excel File Name";

      IF STRPOS(FileName,'.') <> 0 THEN BEGIN
        i := STRLEN(FileName);
        REPEAT
          i := i - 1;
        UNTIL (i = 1) OR (FileName[i] = '.');
        FileName := "Report Code" + ' ' + Period + COPYSTR(FileName,i);
      END;

      FileName := SRSetup."Excel Reports Folder Name" + '\' + FileName;
    END;

    PROCEDURE SkipRequisiteExportToFile@1210004(RequisitesBuffer@1210010 : TEMPORARY Record 26568;AnalyzedStatReportRequisite@1210005 : Record 26559) : Boolean;
    VAR
      StatReportRequisitesGroup@1210000 : Record 26557;
      StatReportRequisite@1210004 : Record 26559;
      StatReportRequisiteBuffer@1210006 : TEMPORARY Record 26559;
      StatReportExcelSheet@1210009 : Record 26562;
      UpperIndRequisite@1210001 : Boolean;
      LowerIndRequisite@1210002 : Boolean;
      SequenceNo@1210007 : Integer;
      AnalyzedRequisiteSequenceNo@1210008 : Integer;
    BEGIN
      SequenceNo := 1;

      StatReportRequisitesGroup.SETCURRENTKEY("Report Code","Sequence No.");
      StatReportRequisitesGroup.SETRANGE("Report Code","Report Code");
      StatReportRequisitesGroup.SETRANGE("Section No.",RequisitesBuffer."Section No.");
      IF StatReportRequisitesGroup.FINDSET THEN
        REPEAT
          StatReportRequisite.SETCURRENTKEY("Report Code","Requisites Group Name","Table Code","Sequence No.");
          StatReportRequisite.SETRANGE("Report Code","Report Code");
          StatReportRequisite.SETRANGE("Requisites Group Name",StatReportRequisitesGroup.Name);
          IF StatReportRequisite.FINDSET THEN
            REPEAT
              StatReportRequisiteBuffer := StatReportRequisite;
              StatReportRequisiteBuffer."Sequence No." := SequenceNo;
              StatReportRequisiteBuffer.INSERT;
              SequenceNo := SequenceNo + 1;
            UNTIL StatReportRequisite.NEXT = 0;
        UNTIL StatReportRequisitesGroup.NEXT = 0;

      StatReportRequisiteBuffer.GET(
        AnalyzedStatReportRequisite."Report Code",
        AnalyzedStatReportRequisite."Requisites Group Name",
        AnalyzedStatReportRequisite.Name);
      AnalyzedRequisiteSequenceNo := StatReportRequisiteBuffer."Sequence No.";

      StatReportRequisiteBuffer.SETCURRENTKEY("Sequence No.");
      StatReportRequisiteBuffer.SETRANGE("Source Type",StatReportRequisiteBuffer."Source Type"::"Table Data");
      StatReportRequisiteBuffer.SETFILTER("Sequence No.",'..%1',AnalyzedRequisiteSequenceNo);
      IF NOT StatReportRequisiteBuffer.FINDFIRST THEN
        UpperIndRequisite := TRUE;

      StatReportRequisiteBuffer.SETFILTER("Sequence No.",'%1..',AnalyzedRequisiteSequenceNo);
      IF NOT StatReportRequisiteBuffer.FINDFIRST THEN
        LowerIndRequisite := TRUE;

      IF RequisitesBuffer."New Page" AND UpperIndRequisite THEN
        EXIT(FALSE);

      IF LowerIndRequisite THEN BEGIN
        StatReportExcelSheet.SETRANGE("Report Code","Report Code");
        StatReportExcelSheet.SETRANGE("Report Data No.","No.");
        StatReportExcelSheet.SETRANGE("Table Code",RequisitesBuffer."Table Code");
        IF NOT StatReportExcelSheet.GET(
             "Report Code","No.",RequisitesBuffer."Table Code",RequisitesBuffer."Excel Sheet Name")
        THEN
          EXIT(FALSE);
        IF StatReportExcelSheet.NEXT <> 0 THEN BEGIN
          IF StatReportExcelSheet."New Page" THEN
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CreateXMLElementValues@1210013(VAR ElementValueBuffer@1210010 : Record 26568);
    VAR
      StatRepBuffer@1210007 : Record 26568;
      XmlDoc@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CompInfo.GET;
      SRSetup.GET;
      StatRepBuffer."Calculation Values Mode" := TRUE;
      CreateXML(XmlDoc,ElementValueBuffer,StatRepBuffer);
    END;

    PROCEDURE CheckXML@1210020();
    VAR
      StatutoryReportBuffer@1210000 : Record 26568;
      TempStatutoryReportBufferElementValue@1210009 : TEMPORARY Record 26568;
      TempNameValueBufferValidation@1210001 : TEMPORARY Record 823;
      XmlDoc@1210005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      StatutoryReportBuffer.INIT;
      CreateXML(XmlDoc,TempStatutoryReportBufferElementValue,StatutoryReportBuffer);

      IF NOT ValidateXMLFile(XmlDoc,TempNameValueBufferValidation) THEN BEGIN
        // IF required to show page without extra buttons
        IF PAGE.RUNMODAL(PAGE::"Name/Value Lookup",TempNameValueBufferValidation) = ACTION::LookupOK THEN;
      END ELSE
        MESSAGE(Text014);
    END;

    PROCEDURE CreateXML@1210010(VAR XmlDoc@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ElementValueBuffer@1210010 : Record 26568;StatRepBuffer@1210007 : Record 26568);
    VAR
      XMLElementLine@1210004 : Record 26570;
      ProcInstr@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;

      ProcInstr := XmlDoc.CreateProcessingInstruction('xml',' version="1.0" encoding="windows-1251"');
      XmlDoc.AppendChild(ProcInstr);

      StatRepBuffer."Report Data No." := "No.";

      XMLElementLine.SETCURRENTKEY("Report Code","Sequence No.");
      XMLElementLine.SETRANGE("Report Code","Report Code");
      IF XMLElementLine.FINDFIRST THEN
        XMLElementLine.ExportValue(ProcInstr,StatRepBuffer,ElementValueBuffer);
    END;

    LOCAL PROCEDURE ValidateXMLFile@1210021(VAR XmlRequestDoc@1210003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR TempNameValueBufferValidation@1210011 : TEMPORARY Record 823) : Boolean;
    VAR
      FormatVersion@1210000 : Record 26573;
      TempBlob@1210004 : Record 99008535;
      XMLDOMManagement@1210006 : Codeunit 6224;
      XmlValidationDoc@1210008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlSchemaValidationFlags@1210009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Schema.XmlSchemaValidationFlags";
      ValidationType@1210010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.ValidationType";
      FileName@1210002 : Text;
      SchemaFileName@1210001 : Text;
    BEGIN
      TempNameValueBufferValidation.DELETEALL;

      StatutoryReport.GET("Report Code");
      StatutoryReport.TESTFIELD("Format Version Code");
      FormatVersion.GET(StatutoryReport."Format Version Code");
      FormatVersion.CALCFIELDS("XML Schema");
      IF NOT FormatVersion."XML Schema".HASVALUE THEN
        EXIT(TRUE);

      FileName := FileMgt.ServerTempFileName('xml');
      XmlRequestDoc.Save(FileName);

      TempBlob.Blob := FormatVersion."XML Schema";
      SchemaFileName := FileMgt.UploadFileSilent(FileMgt.BLOBExport(TempBlob,'',FALSE));

      XmlReaderSettings := XmlReaderSettings.XmlReaderSettings;
      XmlReaderSettings.Schemas.Add('',SchemaFileName);
      XmlReaderSettings.ValidationFlags := XmlSchemaValidationFlags.ReportValidationWarnings;
      XmlReaderSettings.ValidationType := ValidationType.Schema;

      TempNameValueBuffer.DELETEALL;

      // The XmlDocument validates the XML document contained
      // in the XmlReader as it is loaded into the DOM.
      XMLDOMManagement.LoadXMLDocumentFromFileWithXmlReaderSettings(FileName,XmlValidationDoc,XmlReaderSettings);
      IF TempNameValueBuffer.FINDSET THEN
        REPEAT
          TempNameValueBufferValidation := TempNameValueBuffer;
          TempNameValueBufferValidation.INSERT;
        UNTIL TempNameValueBuffer.NEXT = 0;

      FileMgt.DeleteServerFile(FileName);

      EXIT(TempNameValueBuffer.COUNT = 0);
    END;

    PROCEDURE UpdateData@1210016();
    BEGIN
      TESTFIELD(Status,Status::Open);
      StatutoryReport.GET("Report Code");
      IF StatutoryReport.CalculateDataFromIntSource("No.","Start Period Date","End Period Date") THEN
        MESSAGE(Text015)
      ELSE
        MESSAGE(Text016,"Report Code");
    END;

    LOCAL PROCEDURE ExcelSheetHasValues@1210028(VAR XMLElementValueBuffer@1210000 : TEMPORARY Record 26568;ExcelSheetName@1210001 : Text[30]) : Boolean;
    BEGIN
      XMLElementValueBuffer.SETRANGE("Excel Sheet Name",ExcelSheetName);
      XMLElementValueBuffer.SETRANGE("Template Data",FALSE);
      XMLElementValueBuffer.SETFILTER(Value,'<>%1','');
      EXIT(NOT XMLElementValueBuffer.ISEMPTY);
    END;

    PROCEDURE SetFileNameSilent@1210019(NewFileName@1210000 : Text);
    BEGIN
      ServerFileName := NewFileName;
    END;

    PROCEDURE SetTestMode@1210022(NewTestMode@1210000 : Boolean);
    BEGIN
      TestMode := NewTestMode;
    END;

    PROCEDURE WriteLine@1210011(LineText@1210000 : Text[1024]);
    BEGIN
      ReportFile.WRITE(LineText);
    END;

    EVENT XmlReaderSettings@1210037::ValidationEventHandler@28(sender@1210001 : Variant;e@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Schema.ValidationEventArgs");
    BEGIN
      TempNameValueBuffer.INIT;
      TempNameValueBuffer.ID := TempNameValueBuffer.COUNT + 1;
      TempNameValueBuffer.Name := e.Severity.ToString;
      TempNameValueBuffer.Value := e.Message;
      TempNameValueBuffer.INSERT;
    END;

    BEGIN
    END.
  }
}

