OBJECT Codeunit 14960 Payroll Analysis Report Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    TableNo=14962;
    OnRun=BEGIN
            SETFILTER("Row No.",TryExpression);
          END;

  }
  CODE
  {
    VAR
      Text001@1210002 : TextConst 'ENU=DEFAULT;RUS=СТАНДАРТ';
      Text002@1210001 : TextConst 'ENU=Default Lines;RUS=Строки по умолчанию';
      Text003@1210000 : TextConst 'ENU=Default Columns;RUS=Столбцы по умолчанию';
      Text005@1210028 : TextConst 'ENU=M;RUS=М';
      Text006@1210027 : TextConst 'ENU=Q;RUS=К';
      Text007@1210026 : TextConst 'ENU=Y;RUS=Г';
      Text021@1210025 : TextConst 'ENU=Conversion of dimension totaling filter %1 results in a filter that becomes too long.;RUS=В результате преобразования итогового фильтра измерения %1 длина фильтра превышает максимально допустимую.';
      Text023@1210004 : TextConst 'ENU=Column formula: %1;RUS=Формула столбца: %1';
      Text024@1210003 : TextConst 'ENU=Row formula: %1;RUS=Формула строки: %1';
      OrigPayrollAnalysisLineFilters@1210005 : Record 14962;
      PayrollAnalysisLineTemplate@1210022 : Record 14961;
      PayrollAnalysisCellValue@1210024 : TEMPORARY Record 14968;
      StartDate@1210007 : Date;
      EndDate@1210006 : Date;
      PayrollStartDate@1210008 : Date;
      DivisionError@1210017 : Boolean;
      PeriodError@1210016 : Boolean;
      FormulaError@1210015 : Boolean;
      CyclicError@1210014 : Boolean;
      CallLevel@1210013 : Integer;
      OldPayrollAnalysisLineFilters@1210010 : Text;
      OldPayrollAnalysisColumnFilters@1210009 : Text;
      OldPayrollAnalysisLineTemplate@1210018 : Code[10];
      TryExpression@1210019 : Text[250];
      Text025@1210029 : TextConst 'ENU=Analysis view cannot be used for %1 if %2 is not empty for %3.;RUS=Нельзя использовать аналитический отчет для %1, если %2 не пусто для %3.';
      Text026@1210030 : TextConst 'ENU=Analysis view cannot be used for %1 if %2 is %3 for %4.;RUS=Нельзя использовать аналитический отчет для %1, когда %2 для %4 - %3.';

    PROCEDURE LookupReportName@1(VAR CurrentReportName@1001 : Code[10]) : Boolean;
    VAR
      PayrollAnalysisReportName@1002 : Record 14960;
    BEGIN
      PayrollAnalysisReportName.Name := CurrentReportName;
      IF PAGE.RUNMODAL(0,PayrollAnalysisReportName) = ACTION::LookupOK THEN BEGIN
        CurrentReportName := PayrollAnalysisReportName.Name;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckReportName@69(CurrentReportName@1003 : Code[10]);
    VAR
      PayrollAnalysisReportName@1000 : Record 14960;
    BEGIN
      IF CurrentReportName <> '' THEN
        PayrollAnalysisReportName.GET(CurrentReportName);
    END;

    PROCEDURE OpenAnalysisLines@2(VAR CurrentLineTemplate@1000 : Code[10];VAR PayrollAnalysisLine@1001 : Record 14962);
    BEGIN
      CheckAnalysisLineTemplName2(CurrentLineTemplate);
      PayrollAnalysisLine.FILTERGROUP := 2;
      PayrollAnalysisLine.SETRANGE("Analysis Line Template Name",CurrentLineTemplate);
      PayrollAnalysisLine.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE CheckAnalysisLineTemplName2@3(VAR CurrentAnalysisLineTempl@1001 : Code[10]);
    VAR
      PayrollAnalysisLineTemplate@1002 : Record 14961;
    BEGIN
      IF NOT PayrollAnalysisLineTemplate.GET(CurrentAnalysisLineTempl) THEN BEGIN
        IF NOT PayrollAnalysisLineTemplate.FINDFIRST THEN BEGIN
          PayrollAnalysisLineTemplate.INIT;
          PayrollAnalysisLineTemplate.Name := Text001;
          PayrollAnalysisLineTemplate.Description := Text002;
          PayrollAnalysisLineTemplate.INSERT(TRUE);
          COMMIT;
        END;
        CurrentAnalysisLineTempl := PayrollAnalysisLineTemplate.Name;
      END;
    END;

    PROCEDURE CheckAnalysisLineTemplName@4(CurrentAnalysisLineTempl@1000 : Code[10];VAR PayrollAnalysisLine@1001 : Record 14962);
    VAR
      PayrollAnalysisLineTemplate@1002 : Record 14961;
    BEGIN
      PayrollAnalysisLineTemplate.GET(CurrentAnalysisLineTempl);
    END;

    PROCEDURE SetAnalysisLineTemplName@5(CurrentAnalysisLineTempl@1001 : Code[10];VAR PayrollAnalysisLine@1000 : Record 14962);
    BEGIN
      PayrollAnalysisLine.FILTERGROUP := 2;
      PayrollAnalysisLine.SETRANGE("Analysis Line Template Name",CurrentAnalysisLineTempl);
      PayrollAnalysisLine.FILTERGROUP := 0;
      IF PayrollAnalysisLine.FINDFIRST THEN;
    END;

    PROCEDURE LookupAnalysisLineTemplName@6(VAR CurrentAnalysisLineTempl@1001 : Code[10];VAR PayrollAnalysisLine@1000 : Record 14962) : Boolean;
    VAR
      PayrollAnalysisLineTemplate@1002 : Record 14961;
    BEGIN
      COMMIT;
      PayrollAnalysisLineTemplate.Name := PayrollAnalysisLine.GETRANGEMAX("Analysis Line Template Name");
      IF PAGE.RUNMODAL(0,PayrollAnalysisLineTemplate) = ACTION::LookupOK THEN BEGIN
        CheckAnalysisLineTemplName(PayrollAnalysisLineTemplate.Name,PayrollAnalysisLine);
        CurrentAnalysisLineTempl := PayrollAnalysisLineTemplate.Name;
        SetAnalysisLineTemplName(CurrentAnalysisLineTempl,PayrollAnalysisLine);
        EXIT(TRUE);
      END;
      OpenAnalysisLines(CurrentAnalysisLineTempl,PayrollAnalysisLine);
    END;

    PROCEDURE OpenAnalysisLinesForm@7(VAR PayrollAnalysisLine2@1000 : Record 14962;CurrentAnalysisLineTempl@1001 : Code[10]);
    VAR
      PayrollAnalysisLine@1002 : Record 14962;
      PayrollAnalysisLines@1003 : Page 14962;
    BEGIN
      COMMIT;
      PayrollAnalysisLine.COPY(PayrollAnalysisLine2);
      PayrollAnalysisLines.SetCurrentAnalysisLineTempl(CurrentAnalysisLineTempl);
      PayrollAnalysisLines.SETTABLEVIEW(PayrollAnalysisLine);
      PayrollAnalysisLines.RUNMODAL;
    END;

    PROCEDURE OpenAnalysisColumnsForm@9(VAR PayrollAnalysisLine@1000 : Record 14962;CurrentColumnTempl@1002 : Code[10]);
    VAR
      PayrollAnalysisColumn@1001 : Record 14964;
      PayrollAnalysisColumns@1003 : Page 14964;
    BEGIN
      COMMIT;
      PayrollAnalysisColumns.SETTABLEVIEW(PayrollAnalysisColumn);
      PayrollAnalysisColumns.SetCurrentColumnName(CurrentColumnTempl);
      PayrollAnalysisColumns.RUNMODAL;
    END;

    PROCEDURE OpenColumns@16(VAR CurrentColumnTempl@1000 : Code[10];VAR PayrollAnalysisLine@1002 : Record 14962;VAR PayrollAnalysisColumn@1001 : Record 14964);
    BEGIN
      CheckColumnTemplate(CurrentColumnTempl);
      PayrollAnalysisColumn.FILTERGROUP := 2;
      PayrollAnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnTempl);
      PayrollAnalysisColumn.FILTERGROUP := 0;
    END;

    PROCEDURE OpenColumns2@63(CurrentColumnTempl@1000 : Code[10];VAR PayrollAnalysisColumn@1001 : Record 14964);
    BEGIN
      PayrollAnalysisColumn.FILTERGROUP := 2;
      PayrollAnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnTempl);
      PayrollAnalysisColumn.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE CheckColumnTemplate@15(VAR CurrentColumnName@1002 : Code[10]);
    VAR
      PayrollAnalysisColumnTemplate@1001 : Record 14963;
    BEGIN
      IF NOT PayrollAnalysisColumnTemplate.GET(CurrentColumnName) THEN BEGIN
        IF NOT PayrollAnalysisColumnTemplate.FINDFIRST THEN BEGIN
          PayrollAnalysisColumnTemplate.INIT;
          PayrollAnalysisColumnTemplate.Name := Text001;
          PayrollAnalysisColumnTemplate.Description := Text003;
          PayrollAnalysisColumnTemplate.INSERT(TRUE);
          COMMIT;
        END;
        CurrentColumnName := PayrollAnalysisColumnTemplate.Name;
      END;
    END;

    PROCEDURE GetColumnTemplate@14(CurrentColumnTemplate@1000 : Code[10]);
    VAR
      PayrollAnalysisColumnTemplate@1001 : Record 14963;
    BEGIN
      PayrollAnalysisColumnTemplate.GET(CurrentColumnTemplate);
    END;

    PROCEDURE SetColumnName@13(CurrentColumnName@1000 : Code[10];VAR PayrollAnalysisColumn@1001 : Record 14964);
    BEGIN
      PayrollAnalysisColumn.FILTERGROUP := 2;
      PayrollAnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnName);
      PayrollAnalysisColumn.FILTERGROUP := 0;
      IF PayrollAnalysisColumn.FINDFIRST THEN;
    END;

    PROCEDURE LookupColumnName@11(VAR CurrentColumnName@1000 : Code[10]) : Boolean;
    VAR
      PayrollAnalysisColumnTemplate@1002 : Record 14963;
    BEGIN
      PayrollAnalysisColumnTemplate.Name := CurrentColumnName;
      IF PAGE.RUNMODAL(0,PayrollAnalysisColumnTemplate) = ACTION::LookupOK THEN BEGIN
        CurrentColumnName := PayrollAnalysisColumnTemplate.Name;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CopyColumnsToTemp@21(VAR PayrollAnalysisLine@1003 : Record 14962;ColumnName@1000 : Code[10];VAR TempPayrollAnalysisColumn@1001 : Record 14964);
    VAR
      PayrollAnalysisColumn@1002 : Record 14964;
    BEGIN
      TempPayrollAnalysisColumn.DELETEALL;
      PayrollAnalysisColumn.SETRANGE("Analysis Column Template",ColumnName);
      IF PayrollAnalysisColumn.FINDSET THEN
        REPEAT
          TempPayrollAnalysisColumn := PayrollAnalysisColumn;
          TempPayrollAnalysisColumn.INSERT;
        UNTIL PayrollAnalysisColumn.NEXT = 0;
      IF TempPayrollAnalysisColumn.FINDFIRST THEN;
    END;

    PROCEDURE FindPayrollYear@67(BalanceDate@1000 : Date) : Date;
    VAR
      PayrollPeriod@1001 : Record 17426;
    BEGIN
      PayrollPeriod.SETCURRENTKEY("Starting Date");
      PayrollPeriod.SETRANGE("New Payroll Year",TRUE);
      PayrollPeriod.SETRANGE("Starting Date",0D,BalanceDate);
      IF PayrollPeriod.FINDLAST THEN
        EXIT(PayrollPeriod."Starting Date");
      PayrollPeriod.RESET;
      PayrollPeriod.FINDFIRST;
      EXIT(PayrollPeriod."Starting Date");
    END;

    LOCAL PROCEDURE FindEndOfPayrollYear@66(BalanceDate@1000 : Date) : Date;
    VAR
      PayrollPeriod@1001 : Record 17426;
    BEGIN
      PayrollPeriod.SETRANGE("New Payroll Year",TRUE);
      PayrollPeriod.SETFILTER("Starting Date",'>%1',FindPayrollYear(BalanceDate));
      IF PayrollPeriod.FINDFIRST THEN
        EXIT(CALCDATE('<-1D>',PayrollPeriod."Starting Date"));
      EXIT(31129999D);
    END;

    LOCAL PROCEDURE AccPeriodStartEnd@65(Formula@1002 : Code[20];Date@1000 : Date;VAR StartDate@1013 : Date;VAR EndDate@1014 : Date);
    VAR
      PayrollAnalysisColumn@1006 : Record 14964;
      PayrollPeriod@1001 : Record 17426;
      PayrollPeriodPY@1007 : Record 17426;
      Steps@1005 : Integer;
      Type@1004 : ' ,Period,Payroll Year,Payroll Halfyear,Payroll Quarter';
      CurrentPeriodNo@1003 : Integer;
      RangeFromType@1012 : 'Int,CP,LP';
      RangeToType@1011 : 'Int,CP,LP';
      RangeFromInt@1010 : Integer;
      RangeToInt@1009 : Integer;
    BEGIN
      IF Formula = '' THEN
        EXIT;

      PayrollAnalysisColumn.ParsePeriodFormula(
        Formula,Steps,Type,RangeFromType,RangeToType,RangeFromInt,RangeToInt);

      // Find current period
      PayrollPeriod.SETFILTER("Starting Date",'<=%1',Date);
      IF NOT PayrollPeriod.FIND('+') THEN BEGIN
        PayrollPeriod.RESET;
        IF Steps < 0 THEN
          PayrollPeriod.FIND('-')
        ELSE
          PayrollPeriod.FIND('+')
      END;
      PayrollPeriod.RESET;

      CASE Type OF
        Type::Period:
          BEGIN
            IF PayrollPeriod.NEXT(Steps) <> Steps THEN
              PeriodError := TRUE;
            StartDate := PayrollPeriod."Starting Date";
            EndDate := PayrollPeriod."Ending Date";
          END;
        Type::"Payroll Year":
          BEGIN
            PayrollPeriodPY := PayrollPeriod;
            WHILE NOT PayrollPeriodPY."New Payroll Year" DO
              IF PayrollPeriodPY.FIND('<') THEN
                CurrentPeriodNo += 1
              ELSE
                PayrollPeriodPY."New Payroll Year" := TRUE;
            PayrollPeriodPY.SETRANGE("New Payroll Year",TRUE);
            PayrollPeriodPY.NEXT(Steps);

            AccPeriodStartOrEnd(PayrollPeriodPY,CurrentPeriodNo,RangeFromType,RangeFromInt,FALSE,StartDate);
            AccPeriodStartOrEnd(PayrollPeriodPY,CurrentPeriodNo,RangeToType,RangeToInt,TRUE,EndDate);
          END;
      END;
    END;

    LOCAL PROCEDURE AccPeriodEndDate@59(StartDate@1000 : Date) : Date;
    VAR
      PayrollPeriod@1001 : Record 17426;
    BEGIN
      PayrollPeriod."Starting Date" := StartDate;
      IF PayrollPeriod.FIND('>') THEN
        EXIT(PayrollPeriod."Starting Date" - 1);
      EXIT(31129999D);
    END;

    LOCAL PROCEDURE AccPeriodGetPeriod@35(VAR PayrollPeriod@1001 : Record 17426;AccPeriodNo@1000 : Integer);
    BEGIN
      CASE TRUE OF
        AccPeriodNo > 0:
          BEGIN
            PayrollPeriod.NEXT(AccPeriodNo);
            EXIT;
          END;
        AccPeriodNo = 0:
          EXIT;
        AccPeriodNo < 0:
          BEGIN
            PayrollPeriod.SETRANGE("New Payroll Year",TRUE);
            IF NOT PayrollPeriod.FIND('>') THEN BEGIN
              PayrollPeriod.RESET;
              PayrollPeriod.FIND('+');
              EXIT;
            END;
            PayrollPeriod.RESET;
            PayrollPeriod.FIND('<');
            EXIT;
          END;
      END;
    END;

    LOCAL PROCEDURE AccPeriodStartOrEnd@30(PayrollPeriod@1000 : Record 17426;CurrentPeriodNo@1007 : Integer;RangeType@1006 : 'Int,CP,LP';RangeInt@1009 : Integer;EndDate@1003 : Boolean;VAR Date@1002 : Date);
    BEGIN
      CASE RangeType OF
        RangeType::CP:
          AccPeriodGetPeriod(PayrollPeriod,CurrentPeriodNo);
        RangeType::LP:
          AccPeriodGetPeriod(PayrollPeriod,-1);
        RangeType::Int:
          AccPeriodGetPeriod(PayrollPeriod,RangeInt - 1);
      END;
      IF EndDate THEN
        Date := AccPeriodEndDate(PayrollPeriod."Starting Date")
      ELSE
        Date := PayrollPeriod."Starting Date";
    END;

    PROCEDURE CalcCell@29(VAR PayrollAnalysisLine@1000 : Record 14962;VAR PayrollAnalysisColumn@1001 : Record 14964;DrillDown@1004 : Boolean) : Decimal;
    VAR
      Result@1003 : Decimal;
    BEGIN
      IF DrillDown AND
         ((PayrollAnalysisColumn."Column Type" = PayrollAnalysisColumn."Column Type"::Formula) OR
          (PayrollAnalysisLine.Type = PayrollAnalysisLine.Type::Formula))
      THEN BEGIN
        IF PayrollAnalysisColumn."Column Type" = PayrollAnalysisColumn."Column Type"::Formula THEN
          MESSAGE(Text023,PayrollAnalysisColumn.Formula)
        ELSE
          MESSAGE(Text024,PayrollAnalysisLine.Expression);
        EXIT(0);
      END;

      OrigPayrollAnalysisLineFilters.COPYFILTERS(PayrollAnalysisLine);

      StartDate := PayrollAnalysisLine.GETRANGEMIN("Date Filter");
      IF EndDate <> PayrollAnalysisLine.GETRANGEMAX("Date Filter") THEN BEGIN
        EndDate := PayrollAnalysisLine.GETRANGEMAX("Date Filter");
        PayrollStartDate := FindPayrollYear(EndDate);
      END;
      DivisionError := FALSE;
      PeriodError := FALSE;
      FormulaError := FALSE;
      CyclicError := FALSE;
      CallLevel := 0;

      IF (OldPayrollAnalysisLineFilters <> PayrollAnalysisLine.GETFILTERS) OR
         (OldPayrollAnalysisColumnFilters <> PayrollAnalysisColumn.GETFILTERS) OR
         (OldPayrollAnalysisLineTemplate <> PayrollAnalysisLine."Analysis Line Template Name") OR
         (OldPayrollAnalysisLineTemplate <> PayrollAnalysisColumn."Analysis Column Template")
      THEN BEGIN
        PayrollAnalysisCellValue.RESET;
        PayrollAnalysisCellValue.DELETEALL;
        OldPayrollAnalysisLineFilters := PayrollAnalysisLine.GETFILTERS;
        OldPayrollAnalysisColumnFilters := PayrollAnalysisColumn.GETFILTERS;
        OldPayrollAnalysisLineTemplate := PayrollAnalysisLine."Analysis Line Template Name";
        OldPayrollAnalysisLineTemplate := PayrollAnalysisColumn."Analysis Column Template";
      END;

      Result := CalcCellValue(PayrollAnalysisLine,PayrollAnalysisColumn,DrillDown);
      WITH PayrollAnalysisColumn DO BEGIN
        CASE Show OF
          Show::"When Positive":
            IF Result < 0 THEN
              Result := 0;
          Show::"When Negative":
            IF Result > 0 THEN
              Result := 0;
        END;
        IF "Show Opposite Sign" THEN
          Result := -Result;
      END;
      IF PayrollAnalysisLine."Show Opposite Sign" THEN
        Result := -Result;
      EXIT(Result);
    END;

    LOCAL PROCEDURE CalcCellValue@27(PayrollAnalysisLine@1000 : Record 14962;PayrollAnalysisColumn@1001 : Record 14964;DrillDown@1100 : Boolean) : Decimal;
    VAR
      PayrollStatisticsBuf@1210000 : Record 14969;
      Result@1003 : Decimal;
    BEGIN
      Result := 0;
      IF PayrollAnalysisLine.Expression <> '' THEN BEGIN
        CASE TRUE OF
          PayrollAnalysisCellValue.GET(PayrollAnalysisLine."Line No.",PayrollAnalysisColumn."Line No.") AND NOT DrillDown:
            BEGIN
              Result := PayrollAnalysisCellValue.Value;
              DivisionError := DivisionError OR PayrollAnalysisCellValue.Error;
              PeriodError := PeriodError OR PayrollAnalysisCellValue."Period Error";
              FormulaError := FormulaError OR PayrollAnalysisCellValue."Formula Error";
              CyclicError := CyclicError OR PayrollAnalysisCellValue."Cyclic Error";
              EXIT(Result);
            END;
          PayrollAnalysisColumn."Column Type" = PayrollAnalysisColumn."Column Type"::Formula:
            Result :=
              EvaluateExpression(
                FALSE,PayrollAnalysisColumn.Formula,PayrollAnalysisLine,PayrollAnalysisColumn);
          PayrollAnalysisLine.Type = PayrollAnalysisLine.Type::Formula:
            Result :=
              EvaluateExpression(
                TRUE,PayrollAnalysisLine.Expression,PayrollAnalysisLine,PayrollAnalysisColumn);
          (StartDate = 0D) OR (EndDate IN [0D,31129999D]):
            BEGIN
              Result := 0;
              PeriodError := TRUE;
            END;
          ELSE
            IF PayrollAnalysisLineTemplate.Name <> PayrollAnalysisLine."Analysis Line Template Name" THEN
              PayrollAnalysisLineTemplate.GET(PayrollAnalysisLine."Analysis Line Template Name");
            PayrollAnalysisLine.COPYFILTERS(OrigPayrollAnalysisLineFilters);
            SetRowFilters(PayrollStatisticsBuf,PayrollAnalysisLine);
            SetColumnFilters(PayrollStatisticsBuf,PayrollAnalysisColumn);

            Result := Result + CalcPayrollStatistics(PayrollStatisticsBuf,PayrollAnalysisLine,PayrollAnalysisColumn,DrillDown);
        END;

        IF NOT DrillDown THEN BEGIN
          PayrollAnalysisCellValue."Row No." := PayrollAnalysisLine."Line No.";
          PayrollAnalysisCellValue."Column No." := PayrollAnalysisColumn."Line No.";
          PayrollAnalysisCellValue.Value := Result;
          PayrollAnalysisCellValue.Error := DivisionError;
          PayrollAnalysisCellValue."Period Error" := PeriodError;
          PayrollAnalysisCellValue."Formula Error" := FormulaError;
          PayrollAnalysisCellValue."Cyclic Error" := CyclicError;
          IF PayrollAnalysisCellValue.INSERT THEN;
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE SetRowFilters@17(VAR PayrollStatisticsBuf@1210000 : Record 14969;VAR PayrollAnalysisLine@1001 : Record 14962);
    BEGIN
      WITH PayrollAnalysisLine DO BEGIN
        IF "Element Type Filter" <> '' THEN
          PayrollStatisticsBuf.SETFILTER("Element Type Filter","Element Type Filter");

        IF "Element Filter" <> '' THEN
          PayrollStatisticsBuf.SETFILTER("Element Filter","Element Filter");

        IF "Calc Group Filter" <> '' THEN
          PayrollStatisticsBuf.SETFILTER("Calc Group Filter","Calc Group Filter");

        CASE "Use PF Accum. System Filter" OF
          "Use PF Accum. System Filter"::Yes:
            PayrollStatisticsBuf.SETRANGE("Use PF Accum. System Filter",TRUE);
          "Use PF Accum. System Filter"::No:
            PayrollStatisticsBuf.SETRANGE("Use PF Accum. System Filter",FALSE);
        END;

        CASE Type OF
          Type::"Payroll Element":
            PayrollStatisticsBuf.SETFILTER("Element Filter",Expression);
          Type::"Payroll Element Group":
            PayrollStatisticsBuf.SETFILTER("Element Group Filter",Expression);
          Type::Employee:
            PayrollStatisticsBuf.SETFILTER("Employee Filter",Expression);
          Type::"Org. Unit":
            PayrollStatisticsBuf.SETFILTER("Org. Unit Filter",Expression);
        END;

        IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" <> '' THEN
          CheckLineFilters(PayrollAnalysisLine);

        CASE "Income Tax Base Filter" OF
          "Income Tax Base Filter"::Yes:
            PayrollStatisticsBuf.SETRANGE("Income Tax Base Filter",TRUE);
          "Income Tax Base Filter"::No:
            PayrollStatisticsBuf.SETRANGE("Income Tax Base Filter",FALSE);
        END;

        IF "Work Mode Filter" <> '' THEN
          PayrollStatisticsBuf.SETFILTER("Work Mode Filter","Work Mode Filter");

        IF "Disability Group Filter" <> '' THEN
          PayrollStatisticsBuf.SETFILTER("Disability Group Filter","Disability Group Filter");

        IF "Contract Type Filter" <> '' THEN
          PayrollStatisticsBuf.SETFILTER("Contract Type Filter","Contract Type Filter");

        IF "Payment Source Filter" <> '' THEN
          PayrollStatisticsBuf.SETFILTER("Payment Source Filter","Payment Source Filter");

        IF "Insurance Fee Category Filter" <> '' THEN
          PayrollStatisticsBuf.SETFILTER("Insurance Fee Category Filter","Insurance Fee Category Filter");

        IF GETFILTER("Employee Filter") <> '' THEN BEGIN
          PayrollStatisticsBuf.FILTERGROUP := 2;
          COPYFILTER("Employee Filter",PayrollStatisticsBuf."Employee Filter");
          PayrollStatisticsBuf.FILTERGROUP := 0;
        END;
      END;
    END;

    PROCEDURE SetColumnFilters@20(VAR PayrollStatisticsBuf@1210000 : Record 14969;VAR PayrollAnalysisColumn@1210001 : Record 14964);
    VAR
      FromDate@1002 : Date;
      ToDate@1003 : Date;
      PayrollStartDate2@1004 : Date;
    BEGIN
      WITH PayrollAnalysisColumn DO BEGIN
        IF (FORMAT("Comparison Date Formula") <> '0') AND (FORMAT("Comparison Date Formula") <> '') THEN BEGIN
          FromDate := CALCDATE("Comparison Date Formula",StartDate);
          IF (EndDate = CALCDATE('<CM>',EndDate)) AND
             ((STRPOS(FORMAT("Comparison Date Formula"),Text005) > 0) OR
              (STRPOS(FORMAT("Comparison Date Formula"),Text006) > 0) OR
              (STRPOS(FORMAT("Comparison Date Formula"),Text007) > 0))
          THEN
            ToDate := CALCDATE('<CM>',CALCDATE("Comparison Date Formula",EndDate))
          ELSE
            ToDate := CALCDATE("Comparison Date Formula",EndDate);
          PayrollStartDate2 := FindPayrollYear(ToDate);
        END ELSE
          IF "Comparison Period Formula" <> '' THEN BEGIN
            AccPeriodStartEnd("Comparison Period Formula",StartDate,FromDate,ToDate);
            PayrollStartDate2 := FindPayrollYear(ToDate);
          END ELSE BEGIN
            FromDate := StartDate;
            ToDate := EndDate;
            PayrollStartDate2 := PayrollStartDate;
          END;
        CASE "Column Type" OF
          "Column Type"::"Net Change":
            PayrollStatisticsBuf.SETRANGE("Date Filter",FromDate,ToDate);
          "Column Type"::"Balance at Date":
            PayrollStatisticsBuf.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            PayrollStatisticsBuf.SETRANGE(
              "Date Filter",0D,CALCDATE('<-1D>',FromDate));
          "Column Type"::"Year to Date":
            PayrollStatisticsBuf.SETRANGE(
              "Date Filter",PayrollStartDate2,ToDate);
          "Column Type"::"Rest of Payroll Year":
            PayrollStatisticsBuf.SETRANGE(
              "Date Filter",
              CALCDATE('<+1D>',ToDate),
              FindEndOfPayrollYear(PayrollStartDate2));
          "Column Type"::"Entire Payroll Year":
            PayrollStatisticsBuf.SETRANGE(
              "Date Filter",
              PayrollStartDate2,
              FindEndOfPayrollYear(PayrollStartDate2));
        END;
      END;
    END;

    LOCAL PROCEDURE EvaluateExpression@10(IsAnalysisLineExpression@1000 : Boolean;Expression@1001 : Text[250];PayrollAnalysisLine@1002 : Record 14962;PayrollAnalysisColumn@1003 : Record 14964) : Decimal;
    VAR
      Result@1005 : Decimal;
      Parentheses@1006 : Integer;
      Operator@1007 : Char;
      LeftOperand@1008 : Text[250];
      RightOperand@1009 : Text[250];
      LeftResult@1010 : Decimal;
      RightResult@1011 : Decimal;
      i@1012 : Integer;
      IsExpression@1013 : Boolean;
      IsFilter@1014 : Boolean;
      Operators@1015 : Text[8];
      OperatorNo@1016 : Integer;
      PayrollAnalysisLineID@1017 : Integer;
    BEGIN
      Result := 0;

      CallLevel := CallLevel + 1;
      IF CallLevel > 25 THEN BEGIN
        CyclicError := TRUE;
        EXIT;
      END;

      Expression := DELCHR(Expression,'<>',' ');
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parentheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parentheses := Parentheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parentheses := Parentheses - 1;
            IF (Parentheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult :=
            EvaluateExpression(
              IsAnalysisLineExpression,LeftOperand,PayrollAnalysisLine,PayrollAnalysisColumn);
          RightResult :=
            EvaluateExpression(
              IsAnalysisLineExpression,RightOperand,PayrollAnalysisLine,PayrollAnalysisColumn);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpression(
                IsAnalysisLineExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                PayrollAnalysisLine,PayrollAnalysisColumn)
          ELSE BEGIN
            IsFilter :=
              (STRPOS(Expression,'..') +
               STRPOS(Expression,'|') +
               STRPOS(Expression,'<') +
               STRPOS(Expression,'>') +
               STRPOS(Expression,'&') +
               STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsAnalysisLineExpression THEN BEGIN
                PayrollAnalysisLine.SETRANGE("Analysis Line Template Name",PayrollAnalysisLine."Analysis Line Template Name");
                PayrollAnalysisLine.SETFILTER("Row No.",Expression);
                PayrollAnalysisLineID := PayrollAnalysisLine."Line No.";
                IF NOT FormulaError THEN BEGIN
                  IF PayrollAnalysisLine.FINDSET THEN
                    REPEAT
                      IF PayrollAnalysisLine."Line No." <> PayrollAnalysisLineID THEN
                        Result := Result + CalcCellValue(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
                    UNTIL PayrollAnalysisLine.NEXT = 0
                  ELSE
                    IF IsFilter OR (NOT EVALUATE(Result,Expression)) THEN
                      FormulaError := TRUE;
                END;
              END ELSE BEGIN
                PayrollAnalysisColumn.SETRANGE("Analysis Column Template",PayrollAnalysisColumn."Analysis Column Template");
                PayrollAnalysisColumn.SETFILTER("Column No.",Expression);
                PayrollAnalysisLineID := PayrollAnalysisColumn."Line No.";
                IF NOT FormulaError THEN BEGIN
                  IF PayrollAnalysisColumn.FINDSET THEN
                    REPEAT
                      IF PayrollAnalysisColumn."Line No." <> PayrollAnalysisLineID THEN
                        Result := Result + CalcCellValue(PayrollAnalysisLine,PayrollAnalysisColumn,FALSE);
                    UNTIL PayrollAnalysisColumn.NEXT = 0
                  ELSE
                    IF IsFilter OR (NOT EVALUATE(Result,Expression)) THEN
                      FormulaError := TRUE;
                END;
              END;
          END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    LOCAL PROCEDURE CalcPayrollStatistics@26(VAR PayrollStatisticsBuf@1210002 : Record 14969;VAR PayrollAnalysisLine@1002 : Record 14962;VAR PayrollAnalysisColumn@1003 : Record 14964;DrillDown@1100 : Boolean) : Decimal;
    VAR
      ColValue@1006 : Decimal;
    BEGIN
      ColValue := 0;

      IF PayrollAnalysisLineTemplate.Name <> PayrollAnalysisLine."Analysis Line Template Name" THEN
        PayrollAnalysisLineTemplate.GET(PayrollAnalysisLine."Analysis Line Template Name");

      IF PayrollAnalysisColumn."Column Type" <> PayrollAnalysisColumn."Column Type"::Formula THEN BEGIN
        WITH PayrollStatisticsBuf DO
          IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" = '' THEN BEGIN
            PayrollAnalysisLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Filter");
            PayrollAnalysisLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Filter");
            IF "Employee Filter" <> '' THEN
              PayrollAnalysisLine.COPYFILTER("Employee Filter","Employee Filter");
            PayrollAnalysisLine.COPYFILTER("Insurance Fee Category Filter","Insurance Fee Category Filter");
            FILTERGROUP := 2;
            SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(PayrollAnalysisLine."Dimension 1 Totaling"));
            SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(PayrollAnalysisLine."Dimension 2 Totaling"));
            FILTERGROUP := 0;
          END ELSE BEGIN
            SETFILTER("Analysis View Filter",PayrollAnalysisLineTemplate."Payroll Analysis View Code");
            PayrollAnalysisLine.COPYFILTER("Dimension 1 Filter","Dimension 1 Filter");
            PayrollAnalysisLine.COPYFILTER("Dimension 2 Filter","Dimension 2 Filter");
            PayrollAnalysisLine.COPYFILTER("Dimension 3 Filter","Dimension 3 Filter");
            PayrollAnalysisLine.COPYFILTER("Dimension 4 Filter","Dimension 4 Filter");
            FILTERGROUP := 2;
            SETFILTER("Dimension 1 Filter",GetDimTotalingFilter(PayrollAnalysisLine."Dimension 1 Totaling"));
            SETFILTER("Dimension 2 Filter",GetDimTotalingFilter(PayrollAnalysisLine."Dimension 2 Totaling"));
            SETFILTER("Dimension 3 Filter",GetDimTotalingFilter(PayrollAnalysisLine."Dimension 3 Totaling"));
            SETFILTER("Dimension 4 Filter",GetDimTotalingFilter(PayrollAnalysisLine."Dimension 4 Totaling"));
            FILTERGROUP := 0;
          END;

        IF DrillDown THEN
          DrillDownAmount(PayrollStatisticsBuf,PayrollAnalysisColumn)
        ELSE
          CASE PayrollAnalysisColumn."Amount Type" OF
            PayrollAnalysisColumn."Amount Type"::"Payroll Amount":
              ColValue := CalcPayrollAmount(PayrollStatisticsBuf);
            PayrollAnalysisColumn."Amount Type"::"Taxable Amount":
              ColValue := CalcTaxableAmount(PayrollStatisticsBuf);
            PayrollAnalysisColumn."Amount Type"::Quantity:
              BEGIN
                IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" <> '' THEN
                  ERROR(
                    Text026,
                    PayrollAnalysisLineTemplate.GetRecDescription,
                    PayrollAnalysisColumn.FIELDCAPTION("Amount Type"),
                    PayrollAnalysisColumn."Amount Type",
                    PayrollAnalysisColumn.GetRecDescription);

                ColValue := CalcQuantity(PayrollStatisticsBuf);
              END;
            PayrollAnalysisColumn."Amount Type"::"Payment Days":
              BEGIN
                IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" <> '' THEN
                  ERROR(
                    Text026,
                    PayrollAnalysisLineTemplate.GetRecDescription,
                    PayrollAnalysisColumn.FIELDCAPTION("Amount Type"),
                    PayrollAnalysisColumn."Amount Type",
                    PayrollAnalysisColumn.GetRecDescription);

                ColValue := CalcPaymentDays(PayrollStatisticsBuf);
              END;
            PayrollAnalysisColumn."Amount Type"::"Number of Employees":
              BEGIN
                IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" <> '' THEN
                  ERROR(
                    Text026,
                    PayrollAnalysisLineTemplate.GetRecDescription,
                    PayrollAnalysisColumn.FIELDCAPTION("Amount Type"),
                    PayrollAnalysisColumn."Amount Type",
                    PayrollAnalysisColumn.GetRecDescription);

                ColValue := CalcNumberOfEmployees(PayrollStatisticsBuf);
              END;
          END;
      END;
      EXIT(ColValue);
    END;

    PROCEDURE IsValidAnalysisExpression@12(VAR PayrollAnalysisLine@1000 : Record 14962;Expression@1001 : Text[250]) : Boolean;
    VAR
      PayrollAnalysisReportMgt@1002 : Codeunit 14960;
    BEGIN
      PayrollAnalysisReportMgt.SetExpression(Expression);
      IF PayrollAnalysisReportMgt.RUN(PayrollAnalysisLine) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE GetDimTotalingFilter@32(DimTotaling@1000 : Text[80]) : Text[1024];
    VAR
      DimTotaling2@1002 : Text[80];
      DimTotalPart@1005 : Text[80];
      ResultFilter@1003 : Text;
      ResultFilter2@1006 : Text;
      i@1004 : Integer;
    BEGIN
      IF DimTotaling = '' THEN
        EXIT(DimTotaling);
      DimTotaling2 := DimTotaling;
      REPEAT
        i := STRPOS(DimTotaling2,'|');
        IF i > 0 THEN BEGIN
          DimTotalPart := COPYSTR(DimTotaling2,1,i - 1);
          IF i < STRLEN(DimTotaling2) THEN
            DimTotaling2 := COPYSTR(DimTotaling2,i + 1)
          ELSE
            DimTotaling2 := '';
        END ELSE
          DimTotalPart := DimTotaling2;
        ResultFilter2 := ConvDimTotalingFilter(DimTotalPart);
        IF ResultFilter2 <> '' THEN
          IF STRLEN(ResultFilter) + STRLEN(ResultFilter2) + 1 > MAXSTRLEN(ResultFilter) THEN
            ERROR(Text021,DimTotaling);

        IF ResultFilter <> '' THEN
          ResultFilter := ResultFilter + '|';
        ResultFilter := ResultFilter + ResultFilter2;
      UNTIL i <= 0;
      EXIT(ResultFilter);
    END;

    LOCAL PROCEDURE ConvDimTotalingFilter@28(DimTotaling@1001 : Text[80]) : Text;
    VAR
      DimVal@1003 : Record 349;
      DimCode@1002 : Code[20];
      ResultFilter@1004 : Text[1024];
      DimValTotaling@1005 : Boolean;
    BEGIN
      IF DimTotaling = '' THEN
        EXIT(DimTotaling);

      IF DimCode = '' THEN
        EXIT(DimTotaling);

      DimVal.SETRANGE("Dimension Code",DimCode);
      DimVal.SETFILTER(Code,DimTotaling);
      IF DimVal.FINDSET THEN
        REPEAT
          DimValTotaling :=
            DimVal."Dimension Value Type" IN
            [DimVal."Dimension Value Type"::Total,DimVal."Dimension Value Type"::"End-Total"];
          IF DimValTotaling AND (DimVal.Totaling <> '') THEN BEGIN
            IF STRLEN(ResultFilter) + STRLEN(DimVal.Totaling) + 1 > MAXSTRLEN(ResultFilter) THEN
              ERROR(Text021,DimTotaling);
            IF ResultFilter <> '' THEN
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + DimVal.Totaling;
          END;
        UNTIL (DimVal.NEXT = 0) OR NOT DimValTotaling;

      IF DimValTotaling THEN
        EXIT(ResultFilter);

      EXIT(DimTotaling);
    END;

    LOCAL PROCEDURE CalcPayrollAmount@37(VAR PayrollStatisticsBuf@1000 : Record 14969) : Decimal;
    BEGIN
      WITH PayrollStatisticsBuf DO BEGIN
        IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" = '' THEN BEGIN
          CALCFIELDS("Payroll Amount");
          EXIT("Payroll Amount");
        END;

        CALCFIELDS("Analysis - Payroll Amount");
        EXIT("Analysis - Payroll Amount");
      END;
    END;

    LOCAL PROCEDURE CalcTaxableAmount@1210015(VAR PayrollStatisticsBuf@1000 : Record 14969) : Decimal;
    BEGIN
      WITH PayrollStatisticsBuf DO BEGIN
        IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" = '' THEN BEGIN
          CALCFIELDS("Taxable Amount");
          EXIT("Taxable Amount");
        END;

        CALCFIELDS("Analysis - Taxable Amount");
        EXIT("Analysis - Taxable Amount");
      END;
    END;

    LOCAL PROCEDURE CalcQuantity@1210007(VAR PayrollStatisticsBuf@1000 : Record 14969) : Decimal;
    BEGIN
      WITH PayrollStatisticsBuf DO
        IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" = '' THEN BEGIN
          CALCFIELDS(Quantity);
          EXIT(Quantity);
        END;
    END;

    LOCAL PROCEDURE CalcPaymentDays@1210002(VAR PayrollStatisticsBuf@1000 : Record 14969) : Decimal;
    BEGIN
      WITH PayrollStatisticsBuf DO
        IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" = '' THEN BEGIN
          CALCFIELDS("Payment Days");
          EXIT("Payment Days");
        END;
    END;

    LOCAL PROCEDURE CalcNumberOfEmployees@1210001(VAR PayrollStatisticsBuf@1000 : Record 14969) : Decimal;
    VAR
      PayrollLedgerEntry@1210000 : Record 17418;
      TempEmployee@1210001 : TEMPORARY Record 5200;
    BEGIN
      IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" = '' THEN BEGIN
        FilterPayrolLedterEntry(PayrollStatisticsBuf,PayrollLedgerEntry);
        IF PayrollLedgerEntry.FINDSET THEN
          REPEAT
            IF NOT TempEmployee.GET(PayrollLedgerEntry."Employee No.") THEN BEGIN
              TempEmployee."No." := PayrollLedgerEntry."Employee No.";
              TempEmployee.INSERT;
            END;
          UNTIL PayrollLedgerEntry.NEXT = 0;
        EXIT(TempEmployee.COUNT);
      END;
    END;

    LOCAL PROCEDURE DrillDownAmount@50(VAR PayrollStatisticsBuf@1000 : Record 14969;PayrollAnalysisColumn@1210000 : Record 14964);
    VAR
      PayrollLedgerEntry@1002 : Record 17418;
      PayrollAnalysisViewEntry@1003 : Record 14966;
    BEGIN
      WITH PayrollStatisticsBuf DO
        IF PayrollAnalysisLineTemplate."Payroll Analysis View Code" = '' THEN BEGIN
          FilterPayrolLedterEntry(PayrollStatisticsBuf,PayrollLedgerEntry);
          CASE PayrollAnalysisColumn."Amount Type" OF
            PayrollAnalysisColumn."Amount Type"::"Payroll Amount":
              PAGE.RUN(0,PayrollLedgerEntry,PayrollLedgerEntry."Payroll Amount");
            PayrollAnalysisColumn."Amount Type"::"Taxable Amount":
              PAGE.RUN(0,PayrollLedgerEntry,PayrollLedgerEntry."Taxable Amount");
            PayrollAnalysisColumn."Amount Type"::Quantity:
              PAGE.RUN(0,PayrollLedgerEntry,PayrollLedgerEntry.Quantity);
            PayrollAnalysisColumn."Amount Type"::"Payment Days":
              PAGE.RUN(0,PayrollLedgerEntry,PayrollLedgerEntry."Payment Days");
          END
        END ELSE BEGIN
          FilterPayrollAnalyViewEntry(PayrollStatisticsBuf,PayrollAnalysisViewEntry);
          CASE PayrollAnalysisColumn."Amount Type" OF
            PayrollAnalysisColumn."Amount Type"::"Payroll Amount":
              PAGE.RUN(0,PayrollAnalysisViewEntry,PayrollAnalysisViewEntry."Payroll Amount");
            PayrollAnalysisColumn."Amount Type"::"Taxable Amount":
              PAGE.RUN(0,PayrollAnalysisViewEntry,PayrollAnalysisViewEntry."Taxable Amount");
          END;
        END;
    END;

    PROCEDURE FilterPayrolLedterEntry@53(VAR PayrollStatisticsBuf@1210000 : Record 14969;VAR PayrollLedgerEntry@1210002 : Record 17418);
    BEGIN
      WITH PayrollStatisticsBuf DO BEGIN
        IF GETFILTER("Element Type Filter") <> '' THEN
          COPYFILTER("Element Type Filter",PayrollLedgerEntry."Element Type");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",PayrollLedgerEntry."Posting Date");

        IF GETFILTER("Element Filter") <> '' THEN
          COPYFILTER("Element Filter",PayrollLedgerEntry."Element Code");

        IF GETFILTER("Calc Group Filter") <> '' THEN
          COPYFILTER("Calc Group Filter",PayrollLedgerEntry."Calc Group");

        IF GETFILTER("Employee Filter") <> '' THEN
          COPYFILTER("Employee Filter",PayrollLedgerEntry."Employee No.");

        FILTERGROUP(2);
        IF GETFILTER("Employee Filter") <> '' THEN BEGIN
          PayrollLedgerEntry.FILTERGROUP(2);
          COPYFILTER("Employee Filter",PayrollLedgerEntry."Employee No.");
          PayrollLedgerEntry.FILTERGROUP(0);
        END;
        FILTERGROUP(0);

        IF GETFILTER("Org. Unit Filter") <> '' THEN
          COPYFILTER("Org. Unit Filter",PayrollLedgerEntry."Org. Unit Code");

        IF GETFILTER("Element Group Filter") <> '' THEN
          COPYFILTER("Element Group Filter",PayrollLedgerEntry."Element Group");

        IF GETFILTER("Use PF Accum. System Filter") <> '' THEN
          COPYFILTER("Use PF Accum. System Filter",PayrollLedgerEntry."Use PF Accum. System");

        IF GETFILTER("Work Mode Filter") <> '' THEN
          COPYFILTER("Work Mode Filter",PayrollLedgerEntry."Work Mode");

        IF GETFILTER("Disability Group Filter") <> '' THEN
          COPYFILTER("Disability Group Filter",PayrollLedgerEntry."Disability Group");

        IF GETFILTER("Contract Type Filter") <> '' THEN
          COPYFILTER("Contract Type Filter",PayrollLedgerEntry."Contract Type");

        IF GETFILTER("Payment Source Filter") <> '' THEN
          COPYFILTER("Payment Source Filter",PayrollLedgerEntry."Payment Source");

        IF GETFILTER("Insurance Fee Category Filter") <> '' THEN
          COPYFILTER("Insurance Fee Category Filter",PayrollLedgerEntry."Insurance Fee Category Code");

        IF GETFILTER("Income Tax Base Filter") <> '' THEN
          COPYFILTER("Income Tax Base Filter",PayrollLedgerEntry."Income Tax Base");

        IF GETFILTER("Global Dimension 1 Filter") <> '' THEN
          COPYFILTER("Global Dimension 1 Filter",PayrollLedgerEntry."Global Dimension 1 Code");

        IF GETFILTER("Global Dimension 2 Filter") <> '' THEN
          COPYFILTER("Global Dimension 2 Filter",PayrollLedgerEntry."Global Dimension 2 Code");

        FILTERGROUP := 2;
        PayrollLedgerEntry.FILTERGROUP := 2;
        IF GETFILTER("Global Dimension 1 Filter") <> '' THEN
          COPYFILTER("Global Dimension 1 Filter",PayrollLedgerEntry."Global Dimension 1 Code");
        IF GETFILTER("Global Dimension 2 Filter") <> '' THEN
          COPYFILTER("Global Dimension 2 Filter",PayrollLedgerEntry."Global Dimension 2 Code");
        FILTERGROUP := 0;
        PayrollLedgerEntry.FILTERGROUP := 0;
      END;
    END;

    PROCEDURE FilterPayrollAnalyViewEntry@75(VAR PayrollStatisticsBuf@1210000 : Record 14969;VAR PayrollAnalysisViewEntry@1210001 : Record 14966);
    BEGIN
      WITH PayrollStatisticsBuf DO BEGIN
        COPYFILTER("Analysis View Filter",PayrollAnalysisViewEntry."Analysis View Code");

        IF GETFILTER("Element Type Filter") <> '' THEN
          COPYFILTER("Element Type Filter",PayrollAnalysisViewEntry."Payroll Element Type");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",PayrollAnalysisViewEntry."Posting Date");

        IF GETFILTER("Element Filter") <> '' THEN
          COPYFILTER("Element Filter",PayrollAnalysisViewEntry."Element Code");

        IF GETFILTER("Calc Group Filter") <> '' THEN
          COPYFILTER("Calc Group Filter",PayrollAnalysisViewEntry."Calc Group");

        IF GETFILTER("Employee Filter") <> '' THEN
          COPYFILTER("Employee Filter",PayrollAnalysisViewEntry."Employee No.");

        FILTERGROUP(2);
        IF GETFILTER("Employee Filter") <> '' THEN BEGIN
          PayrollAnalysisViewEntry.FILTERGROUP(2);
          COPYFILTER("Employee Filter",PayrollAnalysisViewEntry."Employee No.");
          PayrollAnalysisViewEntry.FILTERGROUP(0);
        END;
        FILTERGROUP(0);

        IF GETFILTER("Org. Unit Filter") <> '' THEN
          COPYFILTER("Org. Unit Filter",PayrollAnalysisViewEntry."Org. Unit Code");

        IF GETFILTER("Element Group Filter") <> '' THEN
          COPYFILTER("Element Group Filter",PayrollAnalysisViewEntry."Element Group");

        IF GETFILTER("Use PF Accum. System Filter") <> '' THEN
          COPYFILTER("Use PF Accum. System Filter",PayrollAnalysisViewEntry."Use PF Accum. System");

        IF GETFILTER("Dimension 1 Filter") <> '' THEN
          COPYFILTER("Dimension 1 Filter",PayrollAnalysisViewEntry."Dimension 1 Value Code");

        IF GETFILTER("Dimension 2 Filter") <> '' THEN
          COPYFILTER("Dimension 2 Filter",PayrollAnalysisViewEntry."Dimension 2 Value Code");

        IF GETFILTER("Dimension 3 Filter") <> '' THEN
          COPYFILTER("Dimension 3 Filter",PayrollAnalysisViewEntry."Dimension 3 Value Code");

        FILTERGROUP := 2;
        PayrollAnalysisViewEntry.FILTERGROUP := 2;
        IF GETFILTER("Dimension 1 Filter") <> '' THEN
          COPYFILTER("Dimension 1 Filter",PayrollAnalysisViewEntry."Dimension 1 Value Code");
        IF GETFILTER("Dimension 2 Filter") <> '' THEN
          COPYFILTER("Dimension 2 Filter",PayrollAnalysisViewEntry."Dimension 2 Value Code");
        IF GETFILTER("Dimension 3 Filter") <> '' THEN
          COPYFILTER("Dimension 3 Filter",PayrollAnalysisViewEntry."Dimension 3 Value Code");
        FILTERGROUP := 0;
        PayrollAnalysisViewEntry.FILTERGROUP := 0;
      END;
    END;

    PROCEDURE SetExpression@23(Expression@1000 : Text[250]);
    BEGIN
      TryExpression := Expression;
    END;

    PROCEDURE GetDivisionError@18() : Boolean;
    BEGIN
      EXIT(DivisionError);
    END;

    PROCEDURE GetPeriodError@31() : Boolean;
    BEGIN
      EXIT(PeriodError);
    END;

    PROCEDURE GetFormulaError@54() : Boolean;
    BEGIN
      EXIT(FormulaError);
    END;

    PROCEDURE GetCyclicError@56() : Boolean;
    BEGIN
      EXIT(CyclicError);
    END;

    PROCEDURE ValidateFilter@71(VAR Filter@1000 : Text;RecNo@1001 : Integer;FieldNumber@1002 : Integer;ConvertToNumbers@1003 : Boolean);
    VAR
      PayrollAnalysisLine@1004 : Record 14962;
      PayrollStatisticsBuffer@1005 : Record 14969;
    BEGIN
      CASE RecNo OF
        DATABASE::"Payroll Analysis Line":
          CASE FieldNumber OF
            PayrollAnalysisLine.FIELDNO("Element Type Filter"):
              BEGIN
                PayrollStatisticsBuffer.SETFILTER("Element Type Filter",Filter);
                Filter := PayrollStatisticsBuffer.GETFILTER("Element Type Filter");
              END;
            PayrollAnalysisLine.FIELDNO("Work Mode Filter"):
              BEGIN
                PayrollStatisticsBuffer.SETFILTER("Work Mode Filter",Filter);
                Filter := PayrollStatisticsBuffer.GETFILTER("Work Mode Filter");
              END;
            PayrollAnalysisLine.FIELDNO("Disability Group Filter"):
              BEGIN
                PayrollStatisticsBuffer.SETFILTER("Disability Group Filter",Filter);
                Filter := PayrollStatisticsBuffer.GETFILTER("Disability Group Filter");
              END;
            PayrollAnalysisLine.FIELDNO("Contract Type Filter"):
              BEGIN
                PayrollStatisticsBuffer.SETFILTER("Contract Type Filter",Filter);
                Filter := PayrollStatisticsBuffer.GETFILTER("Contract Type Filter");
              END;
            PayrollAnalysisLine.FIELDNO("Payment Source Filter"):
              BEGIN
                PayrollStatisticsBuffer.SETFILTER("Payment Source Filter",Filter);
                Filter := PayrollStatisticsBuffer.GETFILTER("Payment Source Filter");
              END;
            PayrollAnalysisLine.FIELDNO("Calc Group Filter"):
              BEGIN
                PayrollStatisticsBuffer.SETFILTER("Calc Group Filter",Filter);
                Filter := PayrollStatisticsBuffer.GETFILTER("Calc Group Filter");
              END;
          END;
      END;

      IF ConvertToNumbers THEN
        ConvertOptionNameToNo(Filter,RecNo,FieldNumber);
    END;

    PROCEDURE ConvertOptionNameToNo@19(VAR Filter@1000 : Text[250];RecNo@1001 : Integer;FieldNumber@1008 : Integer);
    VAR
      PayrollAnalysisLine@1009 : Record 14962;
      PayrollStatisticsBuffer@1011 : Record 14969;
      VarInteger@1003 : Integer;
      OptionNo@1002 : Integer;
      OptionName@1004 : Text[30];
    BEGIN
      WHILE TRUE DO BEGIN
        CASE RecNo OF
          DATABASE::"Payroll Analysis Line":
            CASE FieldNumber OF
              PayrollAnalysisLine.FIELDNO("Element Type Filter"):
                BEGIN
                  PayrollStatisticsBuffer."Element Type Filter" := OptionNo;
                  OptionName := FORMAT(PayrollStatisticsBuffer."Element Type Filter");
                END;
              PayrollAnalysisLine.FIELDNO("Work Mode Filter"):
                BEGIN
                  PayrollStatisticsBuffer."Work Mode Filter" := OptionNo;
                  OptionName := FORMAT(PayrollStatisticsBuffer."Work Mode Filter");
                END;
              PayrollAnalysisLine.FIELDNO("Disability Group Filter"):
                BEGIN
                  PayrollStatisticsBuffer."Disability Group Filter" := OptionNo;
                  OptionName := FORMAT(PayrollStatisticsBuffer."Disability Group Filter");
                END;
              PayrollAnalysisLine.FIELDNO("Contract Type Filter"):
                BEGIN
                  PayrollStatisticsBuffer."Contract Type Filter" := OptionNo;
                  OptionName := FORMAT(PayrollStatisticsBuffer."Contract Type Filter");
                END;
              PayrollAnalysisLine.FIELDNO("Payment Source Filter"):
                BEGIN
                  PayrollStatisticsBuffer."Payment Source Filter" := OptionNo;
                  OptionName := FORMAT(PayrollStatisticsBuffer."Payment Source Filter");
                END;
            END;
        END;

        IF EVALUATE(VarInteger,OptionName) THEN
          IF VarInteger = OptionNo THEN
            EXIT;

        FindAndReplace(Filter,OptionName,FORMAT(OptionNo));
        OptionNo += 1;
      END;
    END;

    LOCAL PROCEDURE FindAndReplace@58(VAR Filter@1000 : Text[250];FindWhat@1001 : Text[30];ReplaceWith@1002 : Text[30]);
    VAR
      Position@1003 : Integer;
    BEGIN
      WHILE TRUE DO BEGIN
        Position := STRPOS(Filter,FindWhat);
        IF Position = 0 THEN
          EXIT;
        Filter := INSSTR(DELSTR(Filter,Position,STRLEN(FindWhat)),ReplaceWith,Position);
      END;
    END;

    PROCEDURE CheckLineFilters@1210000(PayrollAnalysisLine@1210001 : Record 14962);
    BEGIN
      IF PayrollAnalysisLine."Income Tax Base Filter" > 0 THEN
        ERROR(
          Text025,
          PayrollAnalysisLineTemplate.GetRecDescription,
          PayrollAnalysisLine.FIELDCAPTION("Income Tax Base Filter"),
          PayrollAnalysisLine.GetRecDescription);

      IF PayrollAnalysisLine."Work Mode Filter" <> '' THEN
        ERROR(
          Text025,
          PayrollAnalysisLineTemplate.GetRecDescription,
          PayrollAnalysisLine.FIELDCAPTION("Work Mode Filter"),
          PayrollAnalysisLine.GetRecDescription);

      IF PayrollAnalysisLine."Disability Group Filter" <> '' THEN
        ERROR(
          Text025,
          PayrollAnalysisLineTemplate.GetRecDescription,
          PayrollAnalysisLine.FIELDCAPTION("Disability Group Filter"),
          PayrollAnalysisLine.GetRecDescription);

      IF PayrollAnalysisLine."Contract Type Filter" <> '' THEN
        ERROR(
          Text025,
          PayrollAnalysisLineTemplate.GetRecDescription,
          PayrollAnalysisLine.FIELDCAPTION("Contract Type Filter"),
          PayrollAnalysisLine.GetRecDescription);

      IF PayrollAnalysisLine."Payment Source Filter" <> '' THEN
        ERROR(
          Text025,
          PayrollAnalysisLineTemplate.GetRecDescription,
          PayrollAnalysisLine.FIELDCAPTION("Payment Source Filter"),
          PayrollAnalysisLine.GetRecDescription);
    END;

    BEGIN
    END.
  }
}

