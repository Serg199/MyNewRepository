OBJECT Report 50024 FA Consolidation
{
  OBJECT-PROPERTIES
  {
    Date=13.07.17;
    Time=16:46:01;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    Permissions=TableData 349=rimd,
                TableData 5601=rimd;
    CaptionML=[ENU=FA Consolidation;
               RUS=Консолидация ОС];
    ProcessingOnly=Yes;
    OnPostReport=VAR
                   DateFltr@1101495000 : Text[30];
                 BEGIN
                   IF (BeginingDate <> 0D) AND (EndingDate <> 0D) THEN
                     NAVStartFAConsolidation(0, ExpType, FORMAT(BeginingDate)+'..'+FORMAT(EndingDate))
                   ELSE
                     NAVStartFAConsolidation(0, ExpType, '');
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1101495004;;Container;
                  ContainerType=ContentArea }

      { 1101495005;1;Group  ;
                  CaptionML=[ENU=Options;
                             RUS=Параметры];
                  GroupType=Group }

      { 1101495000;2;Field  ;
                  CaptionML=[ENU=Entry Type;
                             RUS=Тип операции];
                  OptionCaptionML=[ENU=Acquisition,Release,Write-off,Reverse Acquisition;
                                   RUS=Приобретение,Ввод в Эксплуатацию,Выбытие,Отмена Приобретения];
                  SourceExpr=ExpType }

      { 1101495001;2;Field  ;
                  CaptionML=[ENU=Change Detail;
                             RUS=Изменять детали];
                  SourceExpr=ChangeDetail }

      { 1101495002;2;Field  ;
                  CaptionML=[ENU=Starting Date;
                             RUS=Дата начала];
                  SourceExpr=BeginingDate }

      { 1101495003;2;Field  ;
                  CaptionML=[ENU=Ending Date;
                             RUS=Дата окончания];
                  SourceExpr=EndingDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FALE_Source@1101495069 : Record 50119;
      FALE_Source1@1101495068 : Record 50119;
      FASetup@1101495067 : Record 5603;
      FASetupSource@1101495066 : Record 5603;
      FixedAssetSource@1101495065 : Record 5600;
      FixedAssetSource1@1101495064 : Record 5600;
      FixedAssetReceiver@1101495063 : Record 5600;
      DeprBookSource@1101495062 : Record 5611;
      GLEntrySource@1101495061 : Record 50093;
      CurExchRate@1101495060 : Record 330;
      GLSetupSource@1101495059 : Record 98;
      Currency@1101495058 : Record 4;
      FALedgerEntryReceiver@1101495057 : Record 5601;
      CompanyLoc@1101495056 : Record 2000000006;
      ConsolidationSource@1101495055 : Record 50001;
      LEDimSource@1101495054 : Record 50094;
      FADeprBookReceiver@1101495053 : Record 5612;
      FABookSource@1101495052 : Record 5612;
      UserSetup@1101495051 : Record 91;
      ConsSetup@1101495050 : Record 50000;
      GLSetup@1101495049 : Record 98;
      DimMappingSelection@1101495048 : Record 50031;
      MappingFALE@1101495047 : Record 50120;
      MovingDataSetup@1101495046 : Record 50064;
      FA@1101495045 : Record 5600;
      FAConsRegister@1101495044 : Record 50006;
      ErrorJournal@1101495043 : Record 50023;
      LedgDimensionTmp@1101495042 : TEMPORARY Record 50094;
      DefDim@1101495041 : Record 352;
      NoSeriesMgt@1101495040 : Codeunit 396;
      ConsolidationMgt@1101495039 : Codeunit 50000;
      DimMgt@1101495134 : Codeunit 408;
      ExpType@1101495038 : 'Acquisition,Release,Disposal,Reverse Acquisition,Depreciation,Transfer';
      BeginingDate@1101495037 : Date;
      EndingDate@1101495036 : Date;
      SourceComp@1101495035 : Text[30];
      CurDocNo@1101495034 : Code[20];
      CurDocNoPrep@1101495033 : Code[20];
      CurDocNoFA@1101495032 : Code[20];
      GenJnlBatchToPost@1101495031 : Code[20];
      FAJnlBatchToPost@1101495030 : Code[20];
      GenJnlTemplateToPost@1101495029 : Code[10];
      FAJnlTemplateToPost@1101495028 : Code[10];
      VendorNo@1101495027 : Code[20];
      ExpOperTypeCode@1101495026 : Code[20];
      IncTaxTypeCode@1101495025 : Code[20];
      ProjectCode@1101495024 : Code[20];
      LineNo@1101495023 : Integer;
      LineNoPrep@1101495022 : Integer;
      LineNoFA@1101495021 : Integer;
      ExportedNum@1101495020 : Integer;
      ExportedNum1@1101495019 : Integer;
      iNumberOfRecs@1101495018 : Integer;
      iNumberProcessed@1101495017 : Integer;
      LineNoFAJnl@1101495016 : Integer;
      Exported@1101495015 : Boolean;
      ChangeDetail@1101495014 : Boolean;
      LoadedRecordsExist@1101495013 : Boolean;
      PostedRecordsExist@1101495012 : Boolean;
      RecordsToLoadExist@1101495011 : Boolean;
      IsAcceptOnly@1101495010 : Boolean;
      IsGlobalError@1101495009 : Boolean;
      IsErrorDim@1101495008 : Boolean;
      Window@1101495007 : Dialog;
      NoOfCurrentEntryToCheck@1101495006 : Integer;
      NoOfEntriesToCheck@1101495005 : Integer;
      NoOfEntriesToAccept@1101495004 : Integer;
      StringsToConsNum@1101495003 : Integer;
      NoOfCurrentEntryOK@1101495002 : Integer;
      NoOfCurrentEntryError@1101495001 : Integer;
      IndicatorCheckErrors@1101495000 : Dialog;
      Text001@1101495133 : TextConst 'ENU="There are not unloaded purchase operations ";RUS=Существуют невыгруженные операции приобретения';
      Text002@1101495132 : TextConst 'ENU=It is necessary to copy a FA card  %1 in Translation Company;RUS=Необходимо копировать карточку ОС %1 в Фирму Консолидации';
      Text003@1101495131 : TextConst 'ENU=FA Card %1 wasn''t found in comany. It is necessary to create a card;RUS=Карточка ОС %1 не была найдена. Необходимо создать карточку';
      Text004@1101495130 : TextConst 'ENU=The release amount for FA %1 is equal %2;RUS=Сумма ввода в эксплуатацию для ОС № %1 равна %2';
      Text005@1101495129 : TextConst 'ENU=In a FA card %1 there is no depreciation book of Purchase;RUS=В карточке ОС %1 отсутствует книга амортизации приобретения';
      Text006@1101495128 : TextConst 'ENU=In a FA card %1 there is no depreciation book of Release;RUS=В карточке ОС %1 отсутствует книга амортизации эксплуатации';
      Text007@1101495127 : TextConst 'ENU=Number of Exported Line in\ - FA Journal - %1\ - FA GL Journal - %2;RUS=Количество экспортированных строк в\ОС Журнале - %1\ОС Фин. Журнале - %2';
      Text008@1101495126 : TextConst 'ENU=There is no setup of the user %1;RUS=Отсутствует настройка пользователя %1';
      Text009@1101495125 : TextConst 'ENU=The release amount for FA %1 is equal %2. Amount of initial operation will be unloaded in Journal Line, to continue?;RUS=Сумма ввода в эксплуатацию для ОС № %1 равна %2. В журнал будет выгружена сумма исходной операции, продолжить?';
      Text010@1101495124 : TextConst 'ENU=Translation Type  #2##############################\;RUS=Трансляция Тип     #2##############################\';
      Text011@1101495123 : TextConst 'ENU=Company Name      #1##############################\;RUS=Фирма Название     #1##############################\';
      Text012@1101495122 : TextConst 'ENU=FA Entry No.      #3##########\;RUS=ОС Операциия Но.   #3##########\';
      Text013@1101495121 : TextConst 'ENU=FA Entry Transfer @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\;RUS=ОС Строка Перенос  @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\';
      Text018@1101495120 : TextConst 'ENU="For Entry on G/L Account ";RUS="Для операции по счету "';
      Text019@1101495119 : TextConst 'ENU=" there is no required dimension ";RUS=" нет обязательного измерения "';
      Text020@1101495118 : TextConst 'ENU="For Entry on G/L Account ";RUS="На операции по счету "';
      Text021@1101495117 : TextConst 'ENU=Do you want to create %1 copies of fixed asset %2?;RUS=Создать копию ОС в фирме %1?';
      Text022@1101495116 : TextConst 'ENU=The operation finished successfully, created %1 copies.;RUS=Операция успешно завершена';
      Text023@1101495115 : TextConst 'ENU=For FA %1 there is no Posting Group Setup for Translation Company %2. Continue?;RUS=Для ОС %1 отсутствуется настройка Учетной Группы Фирмы Консолидации %2. Продолжить?';
      Text026@1101495114 : TextConst 'ENU=" Value ";RUS=" значение "';
      Text028@1101495113 : TextConst 'ENU=" Dimension ";RUS=" Измерение "';
      Text029@1101495112 : TextConst 'ENU=" is not allowed for posting.";RUS=" не разрешено для учета."';
      Text040@1101495111 : TextConst 'ENU=External Currency Code %1 does not exist in NAV.;RUS=Внешний Код Валюта %1 отсутствует в справочнике NAV.';
      Text110@1101495110 : TextConst 'ENU="For G/L Account ";RUS="Для счета "';
      Text112@1101495109 : TextConst 'ENU="There is no mapping for value ";RUS="Для значения "';
      Text113@1101495108 : TextConst 'ENU=" of Dimension ";RUS=" измерения "';
      Text114@1101495107 : TextConst 'ENU=.;RUS=" не задано преобразование."';
      Text00001@1101495106 : TextConst 'ENU=Transformation setup wasn''t was found for FA Buffer Entry No.%1;RUS=Отсутствует строка настройки трансформации для ОС операции %1';
      Text00002@1101495105 : TextConst 'ENU=FA Catalog No. %1 wasn''t found;RUS=В ОС Каталоге отсутствует запись для карточки Но. %1.';
      Text00018@1101495104 : TextConst 'ENU=You should define Template or Batch for FA Reclass Journal.;RUS=В системе не настроены шаблоны или разделы для журнала реклассификации.';
      Text00102@1101495103 : TextConst 'ENU=Nothing to reclassify;RUS=Нечего реклассифицировать';
      Text00103@1101495102 : TextConst 'ENU="%1 %2 in %3 wasn''t found for %4 of %5 %6. ";RUS=Не найдена исходная операция %2 в %3 для операции %6.';
      Text00104@1101495101 : TextConst 'ENU="%1 %2 wasn''t found for %3 of %4 %5. ";RUS=Не найдена исходная операция %2 для операции %5.';
      Text00122@1101495100 : TextConst 'ENU="Dimension ";RUS="Для измерения "';
      Text00123@1101495099 : TextConst 'ENU=" value ";RUS="нет значения "';
      Text00124@1101495098 : TextConst 'ENU=" does no exist in NAV.";RUS=" в справочнике NAV."';
      Text00125@1101495097 : TextConst 'ENU="Dimension ";RUS="Измерение "';
      Text00126@1101495096 : TextConst 'ENU=" Value ";RUS=" значение "';
      Text00127@1101495095 : TextConst 'ENU=" is blocked in NAV.";RUS=" блокировано в справочнике NAV."';
      Text00128@1101495094 : TextConst 'ENU=Errors Checking for Consolidation Source %1 ...;RUS=Проверка наличия ошибок по источнику консолидации %1...';
      Text00129@1101495093 : TextConst 'ENU="Loading FA Operation for Consolidation Source ";RUS="Загрузка операций ОС по источнику консолидации "';
      Text00130@1101495092 : TextConst 'ENU=Data errors were found.;RUS=Обнаружены ошибки при загрузке данных.';
      Text00131@1101495091 : TextConst 'ENU="For Dimension Value ";RUS=Для значения измерения';
      Text00132@1101495090 : TextConst 'ENU=" Value Type must be Standart.";RUS=" Тип Значения должно быть Стандартный."';
      Text00133@1101495089 : TextConst 'ENU=FA acqusition operation wasn''t found.;RUS=Не найдены операции приобретения при вводе в эксплуатацию';
      Text00134@1101495088 : TextConst 'ENU=Depreciation was posted for FA No.%1.;RUS=Для ОС Но. %1 существуют операции начисления амортизации.';
      Text00135@1101495087 : TextConst 'ENU=FA No. %1 Depreciation Book %2 was disposed.;RUS=ОС Но. %1 по книге амортизации %2 было списано.';
      Text00136@1101495086 : TextConst 'ENU=FA No. %1 Disposal should be the last entry.;RUS=Операция списания ОС Но.%1 должна быть последней.';
      Text00137@1101495085 : TextConst 'ENU=Acquisition Cost is equal zero for FA No.%1 Depreciation Book %2.;RUS=Для ОС Но. %1 стоимость приобретения для Книги Амортизации %2 равна нулю.';
      Text00138@1101495084 : TextConst 'ENU=Credit;RUS=Кредиту';
      Text00139@1101495083 : TextConst 'ENU=Debit;RUS=Дебету';
      Text00140@1101495082 : TextConst 'ENU=" for debit ";RUS=" по дебету "';
      Text00141@1101495081 : TextConst 'ENU=" for credit ";RUS=" по кредиту "';
      Text00142@1101495080 : TextConst 'ENU=%2 of FA No. %1 should be the last entry.;RUS=%2 для ОС Но.%1 должна быть последней операцией.';
      Text00143@1101495079 : TextConst 'ENU=%2 of FA No. %1 should be the first entry.;RUS=%2 для ОС Но.%1 не должна быть первой операцией.';
      Text50001@1101495078 : TextConst 'ENU=Acquisition;RUS=Приобретение';
      Text50002@1101495077 : TextConst 'ENU=Release;RUS=Ввод в эксплуатацию';
      Text50003@1101495076 : TextConst 'ENU=Disposal;RUS=Выбытие';
      Text50004@1101495075 : TextConst 'ENU=Reverse Acquisition;RUS=Отмена Приобретения';
      Text50005@1101495074 : TextConst 'ENU=Depreciation;RUS=Амортизация';
      Text50006@1101495073 : TextConst 'ENU=Transfer;RUS=Перемещение';
      Text50010@1101495072 : TextConst 'ENU=No lines selected for posting;RUS=Нет строк, выбранных для учета.';
      Text50011@1101495071 : TextConst 'ENU=Selected lines has successfully unloaded and posted;RUS=Выбранные строки успешно выгружены и учтены.';
      Text50012@1101495070 : TextConst 'ENU=Selected lines has successfully unloaded.;RUS=Выбранные строки успешно выгружены.';

    PROCEDURE GetDimDimSetEntryNo@1000000001(EntryNo@1101495000 : Integer) : Integer;
    VAR
      TmpDimSetEntry@1101495001 : TEMPORARY Record 480;
    BEGIN
      TmpDimSetEntry.DELETEALL;

      LedgDimensionTmp.RESET;
      LedgDimensionTmp.SETRANGE("External System ID",ConsolidationSource."External System");
      LedgDimensionTmp.SETRANGE("Id Legal Entity",ConsolidationSource."Business Unit Code");
      LedgDimensionTmp.SETRANGE("Table ID",DATABASE::"FA Ledger Entry");
      LedgDimensionTmp.SETRANGE("Entry No.",EntryNo);

      IF LedgDimensionTmp.FINDSET THEN
        REPEAT
          TmpDimSetEntry.INIT;
          TmpDimSetEntry.VALIDATE("Dimension Code",LedgDimensionTmp."Dimension Code");
          TmpDimSetEntry.VALIDATE("Dimension Value Code",LedgDimensionTmp."Dimension Value Code");
          TmpDimSetEntry.INSERT(TRUE);
        UNTIL LedgDimensionTmp.NEXT = 0;

      EXIT(DimMgt.GetDimensionSetID(TmpDimSetEntry));
    END;

    LOCAL PROCEDURE NAVInsertFAJnlLine@6(VAR FALedgEntry@1000 : Record 50119;ExportType@1210005 : 'Acquisition,Release,Disposal,Reverse Acquisition,Depreciation,Transfer';MappingFALE@1101495000 : Record 50120);
    VAR
      FAJnlLine1@1210000 : Record 5621;
      FAJnlLine@1210001 : Record 5621;
      FAJnlBatch@1210002 : Record 5620;
      FABatchCode@1210004 : Code[20];
      FADeprBook@1210003 : Record 5612;
      FALedgerEntry1@1000000002 : Record 50119;
      FALedgerEntrySource1@1000000008 : Record 50119;
      DimCode5@1000000001 : Code[20];
      DimValueCode5@1000000000 : Code[20];
      FaJnlAmount@1000000004 : Decimal;
      FADeprBookFE@1000000006 : Record 5612;
      TestBool@1000000005 : Boolean;
      GLEntryTemp@1101495001 : TEMPORARY Record 17;
      locFALE@1101495002 : Record 5601;
      rCompany@1101495003 : Record 2000000006;
    BEGIN
      CLEAR(GLEntryTemp);
      TestBool :=
      (((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount > 0)) OR
         ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount < 0) AND (FALedgEntry."Document Type" IN
          [FALedgEntry."Document Type"::"Credit Memo",FALedgEntry."Document Type"::" ",
          FALedgEntry."Document Type"::Invoice])) OR
         ((FALedgEntry."Canceled from FA No." <> '') AND (FALedgEntry.Amount < 0)) AND
         (ExportType=ExportType::Acquisition));

      IF (((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount > 0)) OR
         ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount < 0) AND (FALedgEntry."Document Type" IN
          [FALedgEntry."Document Type"::"Credit Memo",FALedgEntry."Document Type"::" ",
          FALedgEntry."Document Type"::Invoice])) OR

         ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount < 0) AND (FALedgEntry."Document Type" =
          FALedgEntry."Document Type"::" ")) OR

         ((FALedgEntry."Canceled from FA No." <> '') AND (FALedgEntry.Amount < 0)) AND
         (ExportType=ExportType::Acquisition))
         OR ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount < 0) AND
         (FALedgEntry."FA Export Type"=FALedgEntry."FA Export Type"::"Reverse Acquisition") AND
         (ExportType=ExportType::"Reverse Acquisition"))
         OR ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount > 0) AND
         (FALedgEntry."FA Export Type"=FALedgEntry."FA Export Type"::Release) AND
         FALedgEntry."Reclassification Entry" AND (FALedgEntry."OVA No."='') AND
         (ExportType=ExportType::Release))
         OR ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount > 0) AND
         (FALedgEntry."FA Export Type"=FALedgEntry."FA Export Type"::Release) AND
         FALedgEntry."Reclassification Entry" AND (FALedgEntry."OVA No."<>'') AND
         (ExportType=ExportType::Release))
         OR (ExportType=ExportType::Depreciation)
         THEN BEGIN


      IF  FixedAssetReceiver."FA Type" = FixedAssetReceiver."FA Type"::"Future Expense" THEN
       FAJnlBatchToPost := ConsolidationSource."Acquisition FA Batch Name";

      Exported := TRUE;

      IF (FixedAssetReceiver."FA Type" = FixedAssetReceiver."FA Type"::"Future Expense") THEN
      BEGIN
        IF (CurDocNoPrep = '') THEN BEGIN
          FAJnlLine1.SETRANGE("Journal Template Name", FAJnlTemplateToPost);
          FAJnlLine1.SETRANGE("Journal Batch Name", FAJnlBatchToPost);
          IF FAJnlLine1.FIND('+') THEN BEGIN
            CurDocNoPrep := INCSTR(FAJnlLine1."Document No.");
            LineNoPrep := FAJnlLine1."Line No." + 10000
          END ELSE BEGIN
            LineNoPrep := 10000;
            FAJnlBatch.GET(ConsSetup."FA Import FA Jnl Template",FAJnlBatchToPost);
             FAJnlBatch.TESTFIELD("No. Series");
            CLEAR(NoSeriesMgt);
            CurDocNoPrep := NoSeriesMgt.GetNextNo(FAJnlBatch."No. Series", FALedgEntry."Posting Date",FALSE);
          END;
        END ELSE BEGIN
          CurDocNoPrep := INCSTR(CurDocNoPrep);
          FAJnlLine1.SETRANGE("Journal Template Name", FAJnlTemplateToPost);
          FAJnlLine1.SETRANGE("Journal Batch Name", FAJnlBatchToPost);
          LineNoPrep := 10000;
          IF FAJnlLine1.FINDLAST THEN BEGIN
            LineNoPrep := FAJnlLine1."Line No." + 10000;
          END;

        END;

        CurDocNo := CurDocNoPrep;
        LineNoFAJnl := LineNoPrep;
        CurDocNoFA := CurDocNoPrep;
        LineNoFA := LineNoPrep;
      END ELSE BEGIN
        IF (CurDocNoFA = '') THEN BEGIN
          FAJnlLine1.SETRANGE("Journal Template Name", FAJnlTemplateToPost);
          FAJnlLine1.SETRANGE("Journal Batch Name", FAJnlBatchToPost);
          IF FAJnlLine1.FIND('+') THEN BEGIN
            CurDocNoFA := INCSTR(FAJnlLine1."Document No.");
            LineNoFA := FAJnlLine1."Line No." + 10000
          END ELSE BEGIN
            LineNoFA := 10000;
            FAJnlBatch.GET(FAJnlTemplateToPost,FAJnlBatchToPost);
            FAJnlBatch.TESTFIELD("No. Series");
            CLEAR(NoSeriesMgt);
            CurDocNoFA := NoSeriesMgt.GetNextNo(FAJnlBatch."No. Series", FALedgEntry."Posting Date",FALSE);
          END;
        END ELSE BEGIN
          CurDocNoFA := INCSTR(CurDocNoFA);
          FAJnlLine1.SETRANGE("Journal Template Name", FAJnlTemplateToPost);
          FAJnlLine1.SETRANGE("Journal Batch Name", FAJnlBatchToPost);
          LineNoFA := 10000;
          IF FAJnlLine1.FINDLAST THEN BEGIN
            LineNoFA := FAJnlLine1."Line No." + 10000;
          END;
        END;

        CurDocNo := CurDocNoFA;
        LineNoFAJnl := LineNoFA;
        CurDocNoPrep := CurDocNoFA;
        LineNoPrep := LineNoFA;
      END;

          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", FAJnlTemplateToPost);
          FAJnlLine.VALIDATE("Journal Batch Name", FAJnlBatchToPost);
          FAJnlLine.VALIDATE("Line No.", LineNoFAJnl);
          FAJnlLine.VALIDATE("FA No.", FixedAssetReceiver."No.");
          FAJnlLine."Source FA Entry No." := FALedgEntry."Entry No.";

          IF FALedgEntry."Error Entry No."<>0 THEN BEGIN
            locFALE.RESET;
            locFALE.SETRANGE("Source FA Entry No.",FALedgEntry."Error Entry No.");
            IF locFALE.FINDFIRST THEN
              FAJnlLine."FA Error Entry No." := locFALE."Entry No.";
          END;

          IF ExportType=ExportType::Release THEN
            FAJnlLine.VALIDATE("Depreciation Book Code", MappingFALE."Acquisit. Receiver Depr. Book")
          ELSE

          FAJnlLine.VALIDATE("Depreciation Book Code", MappingFALE."Receiver Depreciation Book");
          IF ExportType=ExportType::Depreciation THEN
            FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::Depreciation)
          ELSE

          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE(FAJnlLine."Location Code", FALedgEntry."FA Location Code");
          FAJnlLine.VALIDATE("FA Posting Date", FALedgEntry."FA Posting Date");
          FAJnlLine.VALIDATE("Posting Date", FALedgEntry."Posting Date");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FALedgEntry."Document No.");
          FAJnlLine.VALIDATE(Description, FALedgEntry.Description);


          IF ExportType=ExportType::Release THEN BEGIN
            FALE_Source1.RESET;
            FALE_Source1.SETRANGE("Id Legal Entity",ConsolidationSource."Business Unit Code");
            FALE_Source1.SETRANGE("Transaction No.",FALedgEntry."Transaction No.");
            FALE_Source1.SETRANGE("Depreciation Book Code",MappingFALE."Acquisit. Receiver Depr. Book");
            FALE_Source1.SETRANGE("Document No.", FALedgEntry."Document No.");
            FALE_Source1.SETRANGE("FA Posting Date",FALedgEntry."FA Posting Date");
            FALE_Source1.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type");
            FALE_Source1.SETFILTER(Amount,'%1',-FALedgEntry.Amount);
            IF FALE_Source1.FINDFIRST THEN

              FAJnlLine."Source FA Entry No." := FALE_Source1."Entry No."
            ELSE
              FAJnlLine."Source FA Entry No." := FALedgEntry."Entry No.";
          END ELSE

          FAJnlLine."Source FA Entry No." := FALedgEntry."Entry No.";

          IF FixedAssetReceiver."FA Type" <> FixedAssetReceiver."FA Type"::"Future Expense" THEN BEGIN
             CASE ExportType OF
               ExportType::Acquisition:
                 BEGIN
                   IF (FALedgEntry."Canceled from FA No." = '') AND ((FALedgEntry.Amount > 0) OR ((FALedgEntry."Document Type" IN
                   [FALedgEntry."Document Type"::"Credit Memo", FALedgEntry."Document Type"::" ", FALedgEntry."Document Type"::Invoice])
                     AND (FALedgEntry.Amount < 0)))
                   THEN BEGIN
                   IF GLEntrySource.GET(ConsolidationSource."External System",
                                        ConsolidationSource."Business Unit Code",
                                         FALedgEntry."G/L Entry No.") THEN BEGIN
                     NAVGetAmountsNone(GLEntrySource,ConsolidationSource."LCY Code",GLEntryTemp);
                       FAJnlLine.VALIDATE(Amount,GLEntryTemp.Amount);
                     END ELSE BEGIN
                       IF Currency."Source Currency Code"=GLSetup."LCY Code" THEN
                         FAJnlLine.VALIDATE(Amount, FALedgEntry.Amount)
                       ELSE

                       FAJnlLine.VALIDATE(FAJnlLine.Amount,CurExchRate.ExchangeAmtFCYToFCY(FALedgEntry."FA Posting Date",
                            Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));
                     END;
                   END;
                   IF (FALedgEntry."Canceled from FA No." <> '') AND (FALedgEntry.Amount < 0) THEN
                     FAJnlLine.Correction := TRUE;
                   FAJnlLine.VALIDATE(Quantity,FALedgEntry.Quantity);
                 END;

               ExportType::Depreciation:
                 BEGIN
                   IF GLEntrySource.GET(ConsolidationSource."External System",
                                        ConsolidationSource."Business Unit Code",
                                         FALedgEntry."G/L Entry No.") THEN BEGIN

                     FAJnlLine.VALIDATE(Amount,CurExchRate.ExchangeAmtFCYToFCY(GLEntrySource."Posting Date",
                             Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));
                   END ELSE BEGIN
                     FAJnlLine.VALIDATE(Amount,CurExchRate.ExchangeAmtFCYToFCY(FALedgEntry."FA Posting Date",
                            Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));
                   END;
                   FAJnlLine.VALIDATE(Quantity,FALedgEntry.Quantity);
                 END;


               ExportType::"Reverse Acquisition":
                 BEGIN
                   IF ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount < 0) AND
                     (FALedgEntry."FA Export Type"=FALedgEntry."FA Export Type"::"Reverse Acquisition"))
                     THEN BEGIN

                     IF GLEntrySource.GET(ConsolidationSource."External System",
                                        ConsolidationSource."Business Unit Code",
                                         FALedgEntry."G/L Entry No.") THEN BEGIN
                          FAJnlLine.VALIDATE(Amount,CurExchRate.ExchangeAmtFCYToFCY(GLEntrySource."Posting Date",
                             Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));
                     END ELSE BEGIN
                       FAJnlLine.VALIDATE(Amount,CurExchRate.ExchangeAmtFCYToFCY(FALedgEntry."FA Posting Date",
                            Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));
                     END;
                   END;
                   FAJnlLine.VALIDATE(Quantity,FALedgEntry.Quantity);
                 END;
               ExportType::Release:
                 BEGIN
                   IF ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount > 0) AND
                     (FALedgEntry."FA Export Type"=FALedgEntry."FA Export Type"::Release) AND
                     FALedgEntry."Reclassification Entry") THEN
                   BEGIN

                     //Расчет суммы ввода в эксплуатацию
                     IF FALedgEntry."OVA No."='' THEN BEGIN
                       IF FADeprBook.GET(FixedAssetReceiver."No.",MappingFALE."Acquisit. Receiver Depr. Book") THEN BEGIN
                         FADeprBook.CALCFIELDS("Acquisition Cost");
                         FAJnlLine.VALIDATE(Amount,-FADeprBook."Acquisition Cost");
                         FAJnlLine."FA Reclassification Entry" := FALedgEntry."Reclassification Entry";
                       END;
                     END;
                   END ELSE

                   IF ((FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount > 0) AND
                     (FALedgEntry."FA Export Type"=FALedgEntry."FA Export Type"::Release) AND
                     NOT FALedgEntry."Reclassification Entry" AND (FALedgEntry."OVA No."<>'')) THEN BEGIN
                     //Расчет суммы ввода в эксплуатацию по необработанным операциям в карточке ОВА
                     FALedgerEntrySource1.RESET;
                     FALedgerEntrySource1.SETCURRENTKEY("FA No.","Depreciation Book Code","Reklass. Capital %","Reclassification Entry",
                       Processed,"Posting Date");
                     IF  FixedAssetSource1.GET(FALedgEntry."OVA No.") THEN BEGIN

                       FALedgerEntrySource1.SETRANGE("FA No.", FixedAssetSource1."No.");
                       FALedgerEntrySource1.SETRANGE("Transaction No.",FALedgEntry."Transaction No.");
                       FALedgerEntrySource1.SETRANGE("Document No.", FALedgEntry."Document No.");
                       FALedgerEntrySource1.SETRANGE("Document Type", FALedgEntry."Document Type");
                       FALedgerEntrySource1.SETRANGE("FA Posting Date",FALedgEntry."FA Posting Date");

                       IF NOT FALedgerEntrySource1.FINDSET(TRUE, TRUE) THEN BEGIN
                         //Не найдены операции приобретения при вводе в эксплуатацию
                         FAJnlLine.VALIDATE(Amount, 0);
                         FAJnlLine.VALIDATE(FAJnlLine."Location Code", FALedgerEntrySource1."FA Location Code");
                         FAJnlLine.VALIDATE(Description, FALedgerEntrySource1.Description);
                         FAJnlLine.VALIDATE("FA No.", FA."No.");
                         FAJnlLine."FA Reclassification Entry" := FALedgEntry."Reclassification Entry";
                       END ELSE BEGIN
                         FAJnlLine.VALIDATE("FA No.", FixedAssetSource1."No.");
                         FAJnlLine.VALIDATE(FAJnlLine."Location Code", FALedgerEntrySource1."FA Location Code");
                         FAJnlLine.VALIDATE(Description, FALedgerEntrySource1.Description);
                         IF GLEntrySource.GET(FALedgerEntrySource1."G/L Entry No.") THEN

                           IF Currency."Source Currency Code"=GLSetup."LCY Code" THEN
                             FAJnlLine.VALIDATE(Amount, FALedgEntry.Amount)
                           ELSE

                           FAJnlLine.VALIDATE(Amount,CurExchRate.ExchangeAmtFCYToFCY(GLEntrySource."Posting Date",
                             Currency."Source Currency Code",GLSetup."LCY Code",FALedgerEntrySource1.Amount))
                         ELSE
                           IF Currency."Source Currency Code"=GLSetup."LCY Code" THEN
                             FAJnlLine.VALIDATE(Amount, FALedgEntry.Amount)
                           ELSE

                           FAJnlLine.VALIDATE(Amount,CurExchRate.ExchangeAmtFCYToFCY(FALedgerEntrySource1."FA Posting Date",
                            Currency."Source Currency Code",GLSetup."LCY Code",FALedgerEntrySource1.Amount));
                         FAJnlLine.VALIDATE(Quantity, FALedgerEntrySource1.Quantity);
                         FAJnlLine."FA Reclassification Entry" := FALedgEntry."Reclassification Entry";
                       END;
                     END;
                   END;
                 END;
             END;
         END ELSE BEGIN
            IF Currency."Source Currency Code"=GLSetup."LCY Code" THEN
              FAJnlLine.VALIDATE(Amount, FALedgEntry.Amount)
            ELSE
            FAJnlLine.VALIDATE(FAJnlLine.Amount,CurExchRate.ExchangeAmtFCYToFCY(FALedgEntry."FA Posting Date",
                      Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));


            //disable Depreciation Starting Date setting for IFRS
            rCompany.GET(COMPANYNAME);
            IF NOT (rCompany."Posting Type" = rCompany."Posting Type"::IFRS) THEN BEGIN
              FADeprBookFE.GET(FixedAssetReceiver."No.",MappingFALE."Receiver Depreciation Book");
              FADeprBookFE.VALIDATE("Depreciation Starting Date",FALedgEntry."FA Posting Date");
              FADeprBookFE.MODIFY;
            END;
         END;


          FAJnlLine.VALIDATE(Amount, ROUND(FAJnlLine.Amount,0.01));
          IF FALedgEntry.Quantity <> 0 THEN
            IF ExportType=ExportType::Release THEN
              FAJnlLine.VALIDATE(Quantity,-FALedgEntry.Quantity)
            ELSE
            FAJnlLine.VALIDATE(Quantity,FALedgEntry.Quantity);

          FAJnlLine.INSERT;  //(TRUE);

        FAJnlLine."Dimension Set ID" := GetDimDimSetEntryNo(FALedgEntry."Entry No.");

        DimMgt.UpdateGlobalDimFromDimSetID(
          FAJnlLine."Dimension Set ID",
          FAJnlLine."Shortcut Dimension 1 Code",
          FAJnlLine."Shortcut Dimension 2 Code");

        FAJnlLine.MODIFY;

        ExportedNum += 1;
      END;
    END;

    LOCAL PROCEDURE NAVInsertGenJnlLine@7(VAR FALedgEntry@1000 : Record 50119;MappingFALE@1101495000 : Record 50120);
    VAR
      FAInsertGLAcc@1002 : Codeunit 5601;
      GenJnlLine1@1210000 : Record 81;
      GenJnlBatch@1210001 : Record 232;
      GenJnlLine@1210002 : Record 81;
      ReleaseAmount@1210003 : Decimal;
      BatchCode@1210004 : Code[20];
      CurrExchRate@1210005 : Record 330;
      DimCode4@1000000001 : Code[20];
      DimValueCode4@1000000000 : Code[20];
      locFALE@1101495001 : Record 5601;
      DeprBook@1101495002 : Record 5611;
      GLEntryTemp@1101495003 : TEMPORARY Record 17;
    BEGIN
      MappingFALE.TESTFIELD("Receiver Depreciation Book");

      //Определение номера документа и номера строки журнала

      IF CurDocNo = '' THEN BEGIN
      GenJnlLine1.SETRANGE("Journal Template Name",GenJnlTemplateToPost);
      GenJnlLine1.SETRANGE("Journal Batch Name", GenJnlBatchToPost);

      IF GenJnlLine1.FIND('+') THEN BEGIN
        CurDocNo := INCSTR(GenJnlLine1."Document No.");
        LineNo := GenJnlLine1."Line No." + 10000;
      END ELSE BEGIN
        LineNo := 10000;
        GenJnlBatch.GET(GenJnlTemplateToPost,GenJnlBatchToPost);
        GenJnlBatch.TESTFIELD(GenJnlBatch."No. Series");
        CLEAR(NoSeriesMgt);
        CurDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series", FALedgEntry."Posting Date",FALSE);
      END;
      END;
      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",GenJnlTemplateToPost);
      GenJnlLine.VALIDATE("Journal Batch Name",GenJnlBatchToPost);
      GenJnlLine."Line No." := LineNo;
      GenJnlLine.VALIDATE("Document No.",CurDocNo);
      GenJnlLine.VALIDATE("Posting Date", FALedgEntry."Posting Date");
      GenJnlLine.VALIDATE("FA Posting Date", FALedgEntry."FA Posting Date");
      GenJnlLine.VALIDATE("External Document No.", FALedgEntry."Document No.");
      GenJnlLine."Source FA Entry No." := FALedgEntry."Entry No.";

      IF FALedgEntry."Error Entry No."<>0 THEN BEGIN
        locFALE.RESET;
        locFALE.SETRANGE("Source FA Entry No.",FALedgEntry."Error Entry No.");
        IF locFALE.FINDFIRST THEN
          GenJnlLine."FA Error Entry No." := locFALE."Entry No.";
      END;

      GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"Fixed Asset");
      GenJnlLine.VALIDATE("Account No.", FixedAssetReceiver."No.");
      GenJnlLine.VALIDATE("Depreciation Book Code", MappingFALE."Receiver Depreciation Book");
      IF ExpType = ExpType::Disposal THEN BEGIN
        GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::Disposal);
        IF GenJnlLine."FA Error Entry No."=0 THEN
          GenJnlLine.VALIDATE("Depr. until FA Posting Date", TRUE)
        ELSE
          GenJnlLine.VALIDATE("Depr. until FA Posting Date", FALSE);
      END ELSE
        IF ExpType = ExpType::Release THEN BEGIN
          GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
          IF (FALedgEntry."Canceled from FA No." = '') AND (FALedgEntry.Amount > 0) THEN BEGIN
            FADeprBookReceiver.RESET;
            FADeprBookReceiver.SETRANGE("FA No.",FixedAssetReceiver."No.");
            FADeprBookReceiver.SETRANGE("Depreciation Book Code",MappingFALE."Acquisit. Receiver Depr. Book");
            IF NOT FADeprBookReceiver.FINDFIRST THEN
              ERROR(Text005, FixedAssetReceiver."No.");
            FADeprBookReceiver.CALCFIELDS(FADeprBookReceiver."Acquisition Cost");
            ReleaseAmount := FADeprBookReceiver."Acquisition Cost";

            FADeprBookReceiver.SETRANGE("Depreciation Book Code",MappingFALE."Receiver Depreciation Book");
            IF NOT FADeprBookReceiver.FINDFIRST THEN
              ERROR(Text006, FixedAssetReceiver."No.");

            FADeprBookReceiver.CALCFIELDS(FADeprBookReceiver."Acquisition Cost");
            ReleaseAmount -= FADeprBookReceiver."Acquisition Cost";
            IF ReleaseAmount <= 0 THEN BEGIN
              Currency.RESET;
              Currency.SETRANGE("Source Currency Code",GLSetupSource."LCY Code");
              GenJnlLine.VALIDATE(Amount, CurExchRate.ExchangeAmtFCYToFCY(FALedgEntry."Posting Date",
                           Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));
            END ELSE
              GenJnlLine.VALIDATE(Amount,ReleaseAmount);
          END ELSE
            IF (FALedgEntry."Canceled from FA No." <> '') AND (FALedgEntry.Amount < 0) THEN BEGIN
              IF DeprBook.GET(MappingFALE."Acquisit. Receiver Depr. Book") THEN
                GenJnlLine.Correction :=DeprBook."Mark Errors as Corrections"
              ELSE
                GenJnlLine.Correction := TRUE;
              GenJnlLine.Quantity := -locFALE.Quantity;
              GenJnlLine.VALIDATE(Amount,-locFALE.Amount);
            END;
        END ELSE
          IF ExpType = ExpType::Depreciation THEN BEGIN
            GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::Depreciation);
            IF (FALedgEntry."Canceled from FA No." <> '') AND (FALedgEntry.Amount < 0) THEN BEGIN
              IF DeprBook.GET(MappingFALE."Acquisit. Receiver Depr. Book") THEN
                GenJnlLine.Correction :=DeprBook."Mark Errors as Corrections"
              ELSE
                GenJnlLine.Correction := TRUE;
              GenJnlLine.Quantity := -locFALE.Quantity;
              GenJnlLine.VALIDATE(Amount,-locFALE.Amount);
            END ELSE BEGIN
              GenJnlLine.Quantity := FALedgEntry.Quantity;

              IF GLEntrySource.GET(ConsolidationSource."External System",
                                   ConsolidationSource."Business Unit Code",
                                         FALedgEntry."G/L Entry No.") THEN BEGIN
                NAVGetAmountsNone(GLEntrySource,ConsolidationSource."LCY Code",GLEntryTemp);
                GenJnlLine.VALIDATE(Amount,GLEntryTemp.Amount);
              END ELSE BEGIN
                IF Currency."Source Currency Code"=GLSetup."LCY Code" THEN
                  GenJnlLine.VALIDATE(Amount, FALedgEntry.Amount)
                ELSE
                  GenJnlLine.VALIDATE(Amount,CurExchRate.ExchangeAmtFCYToFCY(FALedgEntry."FA Posting Date",
                            Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));
              END;
            END;
          END ELSE
            IF ExpType = ExpType::Acquisition THEN BEGIN
              GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
              IF (FALedgEntry."Canceled from FA No." <> '') AND (FALedgEntry.Amount < 0) THEN BEGIN
                IF DeprBook.GET(MappingFALE."Acquisit. Receiver Depr. Book") THEN
                  GenJnlLine.Correction :=DeprBook."Mark Errors as Corrections"
                ELSE
                  GenJnlLine.Correction := TRUE;
                GenJnlLine.Quantity := -locFALE.Quantity;
                GenJnlLine.VALIDATE(Amount,-locFALE.Amount);
              END ELSE BEGIN
                GenJnlLine.Quantity := FALedgEntry.Quantity;

                IF GLEntrySource.GET(ConsolidationSource."External System",
                                   ConsolidationSource."Business Unit Code",
                                         FALedgEntry."G/L Entry No.") THEN BEGIN
                  NAVGetAmountsNone(GLEntrySource,ConsolidationSource."LCY Code",GLEntryTemp);
                  GenJnlLine.VALIDATE(Amount,GLEntryTemp.Amount);
                END ELSE BEGIN
                  IF Currency."Source Currency Code"=GLSetup."LCY Code" THEN
                    GenJnlLine.VALIDATE(Amount, FALedgEntry.Amount)
                  ELSE
                    GenJnlLine.VALIDATE(Amount,CurExchRate.ExchangeAmtFCYToFCY(FALedgEntry."FA Posting Date",
                            Currency."Source Currency Code",GLSetup."LCY Code",FALedgEntry.Amount));
                END;
              END;
            END;

      GenJnlLine."FA Operation" := TRUE;
      GenJnlLine.Description := FALedgEntry.Description;
      GenJnlLine.INSERT(TRUE);

      IF (ExpType = ExpType::Depreciation) OR (ExpType = ExpType::Acquisition) OR (ExpType=ExpType::Release) THEN BEGIN
        LineNo += 10000;
        FAInsertGLAcc.GetBalAcc2(GenJnlLine,LineNo);
        NAVCopyDimFromPostGr(GenJnlLine."Account No.",
                            GenJnlLine."Depreciation Book Code",
                            DATABASE::"Gen. Journal Line",
                            GenJnlLine."Journal Template Name",
                            GenJnlLine."Journal Batch Name", LineNo);
        //NC MIO-74 > DP
        //NC MIO-74.1 > DP
        {
        IF GenJnlLine.GET(DATABASE::"Gen. Journal Line",
        }
        IF GenJnlLine.GET(
        //NC MIO-74.1 < DP
                            GenJnlLine."Journal Template Name",
                            GenJnlLine."Journal Batch Name", LineNo) THEN BEGIN
           GenJnlLine."Gen. Prod. Posting Group" := '';
           GenJnlLine."VAT Prod. Posting Group" := '';
           GenJnlLine.MODIFY;
        END;
        //NC MIO-74 < DP

      END;

      ExportedNum1  += 1;
      LineNo        += 10000;

      ConsSetup.GET;

      GenJnlLine."Dimension Set ID" := GetDimDimSetEntryNo(FALedgEntry."Entry No.");

      DimMgt.UpdateGlobalDimFromDimSetID(
        GenJnlLine."Dimension Set ID",
        GenJnlLine."Shortcut Dimension 1 Code",
        GenJnlLine."Shortcut Dimension 2 Code");

      GenJnlLine.MODIFY;
    END;

    LOCAL PROCEDURE NAVInsertUndeprDisposal@1210000(VAR FALedgEntry@1000 : Record 50119;MappingFALE@1101495000 : Record 50120);
    VAR
      FAInsertGLAcc@1002 : Codeunit 5601;
      GenJnlLine1@1210000 : Record 81;
      GenJnlBatch@1210001 : Record 232;
      GenJnlLine@1210002 : Record 81;
      ReleaseAmount@1210003 : Decimal;
      BatchCode@1210004 : Code[20];
      DimCode2@1000000000 : Code[20];
      DimValueCode2@1000000001 : Code[20];
    BEGIN
      MappingFALE.TESTFIELD("Receiver Depreciation Book");

      //Определение номера документа и номера строки журнала

      IF CurDocNo = '' THEN BEGIN
      GenJnlLine1.SETRANGE("Journal Template Name",GenJnlTemplateToPost);
      GenJnlLine1.SETRANGE("Journal Batch Name", GenJnlBatchToPost);

      IF GenJnlLine1.FIND('+') THEN BEGIN
        CurDocNo := INCSTR(GenJnlLine1."Document No.");
        LineNo := GenJnlLine1."Line No." + 10000
      END ELSE BEGIN
        LineNo := 10000;
        GenJnlBatch.GET(GenJnlTemplateToPost,GenJnlBatchToPost);
        GenJnlBatch.TESTFIELD(GenJnlBatch."No. Series");
        CLEAR(NoSeriesMgt);
        CurDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series", FALedgEntry."Posting Date",FALSE);
      END;
      END;

      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",GenJnlTemplateToPost);
      GenJnlLine.VALIDATE("Journal Batch Name",GenJnlBatchToPost);
      GenJnlLine."Line No." := LineNo;
      GenJnlLine.VALIDATE("Document No.",CurDocNo);
      GenJnlLine.VALIDATE("Posting Date", FALedgEntry."Posting Date");
      GenJnlLine.VALIDATE("FA Posting Date", FALedgEntry."FA Posting Date");
      GenJnlLine.VALIDATE("External Document No.", FALedgEntry."Document No.");
      GenJnlLine."Source FA Entry No." := FALedgEntry."Entry No.";
      GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"Fixed Asset");
      GenJnlLine.VALIDATE("Account No.", FixedAssetReceiver."No.");
      GenJnlLine.VALIDATE("Depreciation Book Code", MappingFALE."Receiver Depreciation Book");
      GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::Disposal);
      IF GenJnlLine."FA Error Entry No."=0 THEN
        GenJnlLine.VALIDATE("Depr. until FA Posting Date", TRUE)
      ELSE
        GenJnlLine.VALIDATE("Depr. until FA Posting Date", FALSE);
      IF GenJnlLine."FA Error Entry No."=0 THEN
      GenJnlLine.VALIDATE("Depr. until FA Posting Date", TRUE);
      GenJnlLine.Description := FALedgEntry.Description;
      GenJnlLine.INSERT(TRUE);

      ExportedNum1 += 1;

      LineNo += 10000;

      ConsSetup.GET;

      GenJnlLine."Dimension Set ID" := GetDimDimSetEntryNo(FALedgEntry."Entry No.");

      DimMgt.UpdateGlobalDimFromDimSetID(
        GenJnlLine."Dimension Set ID",
        GenJnlLine."Shortcut Dimension 1 Code",
        GenJnlLine."Shortcut Dimension 2 Code");

      GenJnlLine.MODIFY;
    END;

    LOCAL PROCEDURE NAVInsertUndeprRelease@1210001(VAR FALedgEntry@1000 : Record 5601;MappingFALE@1101495000 : Record 50120);
    VAR
      FAInsertGLAcc@1002 : Codeunit 5601;
      GenJnlLine1@1210000 : Record 81;
      GenJnlBatch@1210001 : Record 232;
      GenJnlLine@1210002 : Record 81;
      ReleaseAmount@1210003 : Decimal;
      BatchCode@1210004 : Code[20];
      CurrExchRate@1210005 : Record 330;
      DimCode3@1000000000 : Code[20];
      DimValueCode3@1000000001 : Code[20];
    BEGIN
      BatchCode :=  ConsolidationSource."Dispose Gen. Batch Name";
      //Определение номера документа и номера строки журнала

      IF CurDocNo = '' THEN BEGIN
      GenJnlLine1.SETRANGE("Journal Template Name",GenJnlTemplateToPost);
      GenJnlLine1.SETRANGE("Journal Batch Name", GenJnlBatchToPost);

      IF GenJnlLine1.FIND('+') THEN BEGIN
        CurDocNo := INCSTR(GenJnlLine1."Document No.");
        LineNo := GenJnlLine1."Line No." + 10000
      END ELSE BEGIN
        LineNo := 10000;
        GenJnlBatch.GET(GenJnlTemplateToPost,GenJnlBatchToPost);
        GenJnlBatch.TESTFIELD(GenJnlBatch."No. Series");
        CLEAR(NoSeriesMgt);
        CurDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series", FALedgEntry."Posting Date",FALSE);
      END;
      END;

      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",GenJnlTemplateToPost);
      GenJnlLine.VALIDATE("Journal Batch Name",GenJnlBatchToPost);
      GenJnlLine."Line No." := LineNo;
      GenJnlLine.VALIDATE("Document No.",CurDocNo);
      GenJnlLine.VALIDATE("Posting Date", FALedgEntry."Posting Date");
      GenJnlLine.VALIDATE("FA Posting Date", FALedgEntry."FA Posting Date");
      GenJnlLine.VALIDATE("External Document No.", FALedgEntry."Document No.");
      GenJnlLine."Source FA Entry No." := FALedgEntry."Entry No.";
      GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"Fixed Asset");
      GenJnlLine.VALIDATE("Account No.", FixedAssetReceiver."No.");
      GenJnlLine.VALIDATE("Depreciation Book Code", MappingFALE."Receiver Depreciation Book");
      GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");

          FADeprBookReceiver.RESET;
          FADeprBookReceiver.SETRANGE(FADeprBookReceiver."FA No.",FixedAssetReceiver."No.");
          FADeprBookReceiver.SETRANGE(FADeprBookReceiver."Depreciation Book Code",MappingFALE."Acquisit. Receiver Depr. Book");
          IF NOT FADeprBookReceiver.FINDFIRST THEN
            ERROR(Text005, FixedAssetReceiver."No.");
          FADeprBookReceiver.CALCFIELDS(FADeprBookReceiver."Acquisition Cost");
          ReleaseAmount := FADeprBookReceiver."Acquisition Cost";


          CASE FixedAssetReceiver."FA Type" OF
            FixedAssetReceiver."FA Type"::"Fixed Assets":
            FADeprBookReceiver.SETRANGE(FADeprBookReceiver."Depreciation Book Code",MappingFALE."Receiver Depreciation Book");

            FixedAssetReceiver."FA Type"::"Intangible Asset":
            FADeprBookReceiver.SETRANGE(FADeprBookReceiver."Depreciation Book Code",MappingFALE."Receiver Depreciation Book");

            FixedAssetReceiver."FA Type"::"Future Expense":
            FADeprBookReceiver.SETRANGE(FADeprBookReceiver."Depreciation Book Code",MappingFALE."Receiver Depreciation Book");
          END;

          IF NOT FADeprBookReceiver.FINDFIRST THEN
            ERROR(Text006, FixedAssetReceiver."No.");

          FADeprBookReceiver.CALCFIELDS(FADeprBookReceiver."Acquisition Cost");

          ReleaseAmount -= FADeprBookReceiver."Acquisition Cost";

          IF ReleaseAmount <= 0 THEN BEGIN
            IF NOT CONFIRM(STRSUBSTNO(Text009, FixedAssetReceiver."No.", ReleaseAmount)) THEN
              ERROR('');

            Currency.RESET;
            Currency.SETRANGE(Currency."Source Currency Code",GLSetupSource."LCY Code");
            GenJnlLine.VALIDATE(Amount, CurExchRate.ExchangeAmtFCYToFCY(FALedgEntry."Posting Date",
                           Currency."Source Currency Code",'',FALedgEntry.Amount));
          END ELSE
            GenJnlLine.VALIDATE(Amount,ReleaseAmount);


        GenJnlLine.VALIDATE(GenJnlLine."Bal. Account No.", ConsSetup."Cons. FA Rel. Bal. Account No.");

      GenJnlLine.Description := FALedgEntry.Description;

      GenJnlLine.INSERT(TRUE);

      ExportedNum1 += 1;
      LineNo += 10000;

      ConsSetup.GET;
      GenJnlLine."Dimension Set ID" := GetDimDimSetEntryNo(FALedgEntry."Entry No.");

      DimMgt.UpdateGlobalDimFromDimSetID(
        GenJnlLine."Dimension Set ID",
        GenJnlLine."Shortcut Dimension 1 Code",
        GenJnlLine."Shortcut Dimension 2 Code");

      GenJnlLine.MODIFY;
    END;

    PROCEDURE NAVStartFAConsolidation@1000000010(ConsType@1000000002 : Integer;FAConsType@1000000001 : 'Acquisition,Release,Disposal,Reverse Acquisition,Depreciation,Transfer';FAConsDateFilter@1000000003 : Text[100]);
    VAR
      BufferFALEModify@1000000000 : Record 50119;
      FAJnlLine@1000000007 : Record 5621;
      GenJnlLine@1000000006 : Record 81;
      FAJnlPostBatch@1000000005 : Codeunit 5633;
      GenJnlPostBatch@1000000004 : Codeunit 13;
      ExpTypeText@1000000008 : Text[30];
      TempMapping@1101495001 : TEMPORARY Record 50022;
      OneMapping@1101495000 : Boolean;
      IsFATransSetupFound@1101495002 : Boolean;
      FACatalog@1101495003 : Record 50044;
      BufferFALECheck@1101495004 : Record 50119;
      BuffFALECheck@1101495005 : Record 50119;
      IsError@1101495006 : Boolean;
      ReceiverDeprBook@1101495007 : Record 5611;
      IsErrorSession@1101495008 : Boolean;
    BEGIN
      ExpType := FAConsType;
      ExportedNum := 0;

      RecordsToLoadExist := TRUE;
      LoadedRecordsExist := FALSE;
      PostedRecordsExist := FALSE;
      IsErrorSession := FALSE;

      CompanyLoc.GET(COMPANYNAME);
      CompanyLoc.TESTFIELD("Company Type",CompanyLoc."Company Type"::Standalone);
      GLSetup.GET;
      ConsSetup.GET;
      MovingDataSetup.GET;

      // > Проверка данных
      ConsolidationSource.RESET;
      ConsolidationSource.SETRANGE(ConsolidationSource."FA Source",TRUE);
      IF ConsolidationSource.FINDSET THEN
        REPEAT
          ConsolidationSource.TESTFIELD("Mapping Code");
          IsGlobalError := FALSE;
          ConsolidationMgt.CheckUseOfMask(TempMapping,ConsolidationSource."Mapping Code",1,OneMapping);
          BufferFALECheck.SETCURRENTKEY("Posting Date","FA Export Type",Processed);
          BufferFALECheck.SETRANGE("External System ID",ConsolidationSource."External System");
          BufferFALECheck.SETRANGE("Id Legal Entity",ConsolidationSource."Business Unit Code");
          BufferFALECheck.SETFILTER("Document Date",FAConsDateFilter);
          BufferFALECheck.SETRANGE(Processed,FALSE);
          BufferFALECheck.SETRANGE(Accept,TRUE);
          BufferFALECheck.SETRANGE("FA Export Type",ExpType+2);
          NoOfCurrentEntryToCheck :=0;
          NoOfEntriesToCheck := BufferFALECheck.COUNT;
          StringsToConsNum := BufferFALECheck.COUNT;
          NoOfEntriesToAccept := NoOfEntriesToAccept+BufferFALECheck.COUNT;
          IndicatorCheckErrors.OPEN(STRSUBSTNO(Text00128,ConsolidationSource.Code) + '\' +
                                   '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');
          IF BufferFALECheck.FINDSET(TRUE,FALSE) THEN BEGIN
            NAVCreateConsRegister(ConsolidationSource.Code, 0, 0,
               TODAY, 0D, 0D, FAConsRegister);
            REPEAT
              NoOfCurrentEntryToCheck += 1;
              BufferFALECheck."Error in Import" := FALSE;
              BufferFALECheck.MODIFY;
              ConsolidationMgt.GetMapping(BufferFALECheck."FA Posting Date",TempMapping);
              IsErrorDim := IsErrorDim AND NAVCheckBufferDimension(BufferFALECheck, TempMapping.Code);
              IF BufferFALECheck."Reversed by Entry No."<>0  THEN BEGIN

                IF BuffFALECheck.GET(ConsolidationSource."External System",
                                     ConsolidationSource."Business Unit Code",
                                     BufferFALECheck."Reversed by Entry No.") THEN
                  IsErrorDim := IsErrorDim AND NAVCheckBufferDimension(BuffFALECheck, TempMapping.Code);
              END;
              IsError := NAVCheckBufferFALE(BufferFALECheck,ExpType,TempMapping);

              IsErrorSession := IsErrorSession OR (IsErrorDim OR IsError);

              IF BufferFALECheck."FA No." = '' THEN
                NAVCheckBufferReversalEntry(BufferFALECheck,IsError);

              IF IsError OR IsErrorDim THEN BEGIN
                BufferFALECheck."Error in Import" :=TRUE;
                BufferFALECheck."Import Register No." :=FAConsRegister."No.";
                BufferFALECheck."Import Cons. Source Code" := ConsolidationSource.Code;
                BufferFALECheck.MODIFY;
                //IsGlobalError := TRUE;
              END;
              IndicatorCheckErrors.UPDATE(1, ROUND(NoOfCurrentEntryToCheck *
                                       (10000 / NoOfEntriesToCheck),1));
            UNTIL BufferFALECheck.NEXT = 0;
            ErrorJournal.RESET;
            ErrorJournal.SETRANGE("Cons. Source Code", ConsolidationSource.Code);
            ErrorJournal.SETRANGE("Cons. Register", FAConsRegister."No.");
            IF ErrorJournal.FINDSET THEN BEGIN
              //ErrorCounter := 1;
              // Основной блок получения данных  ---<
              FAConsRegister."Total Entries In Session" := StringsToConsNum;
              FAConsRegister."Total Succ. Loaded In Session" := NoOfCurrentEntryOK;
              FAConsRegister."Total Accept In Session" := NoOfEntriesToAccept;
              FAConsRegister."Total Unloaded In Session" := NoOfCurrentEntryError;
              FAConsRegister.MODIFY;
              //IsGlobalError := TRUE;
            END ELSE BEGIN
              //ErrorCounter := 0;
              FAConsRegister.GET(FAConsRegister."No.",ConsolidationSource.Code);
              FAConsRegister.DELETE;
              CLEAR(FAConsRegister);

            END;
          END;
      UNTIL ConsolidationSource.NEXT = 0;
      IndicatorCheckErrors.CLOSE;

      IF NOT IsGlobalError THEN BEGIN

      // < Проверка данных

      ConsSetup.TESTFIELD("FA Import Journal Template");
      GenJnlTemplateToPost := ConsSetup."FA Import Journal Template";
      ConsSetup.TESTFIELD("FA Import FA Jnl Template");
      FAJnlTemplateToPost := ConsSetup."FA Import FA Jnl Template";

      iNumberOfRecs := 0;
      iNumberProcessed :=0;
      Window.OPEN(Text011 + Text010 + Text012 + Text013);
      ConsolidationSource.RESET;
      ConsolidationSource.SETRANGE(ConsolidationSource."FA Source",TRUE);
      IF ConsolidationSource.FINDSET THEN
        REPEAT
        ConsolidationSource.TESTFIELD("Mapping Code");
        TempMapping.RESET;
        TempMapping.DELETEALL;
        ConsolidationMgt.CheckUseOfMask(TempMapping,ConsolidationSource."Mapping Code",1,OneMapping);

        SourceComp := ConsolidationSource."Company Name";
        CASE ExpType OF
          ExpType::Acquisition:
            ExpTypeText := Text50001;
          ExpType::Release:
            ExpTypeText := Text50002;
          ExpType::Disposal:
            ExpTypeText := Text50003;
          ExpType::"Reverse Acquisition":
            ExpTypeText := Text50004;
          ExpType::Depreciation:
            ExpTypeText := Text50005;
          ExpType::Transfer:
            ExpTypeText := Text50006;
        END;

        Window.UPDATE(2, ExpTypeText);
        Window.UPDATE(1, PADSTR(ConsolidationSource."Company Name",30));
        Window.UPDATE(3, 0);
        Window.UPDATE(4, 0);

        FALE_Source.RESET;
        FALE_Source.SETCURRENTKEY("Posting Date","FA Export Type",Processed);
        FALE_Source1.RESET;

        GLSetup.GET;
        FASetup.GET;
        GLEntrySource.RESET;
        LEDimSource.RESET;
        BufferFALEModify.RESET;

        IF ConsolidationSource."LCY Code" ='' THEN
          Currency.GET(GLSetup."LCY Code")
        ELSE
          Currency.GET(ConsolidationSource."LCY Code");
        FALE_Source.SETRANGE("External System ID",ConsolidationSource."External System");
        FALE_Source.SETRANGE("Id Legal Entity",ConsolidationSource."Business Unit Code");
        FALE_Source.SETRANGE("FA Export Type",ExpType+2);
        FALE_Source.SETRANGE("Error in Import",FALSE);
        FALE_Source.SETRANGE(Processed, FALSE);
        IF FAConsDateFilter<>'' THEN
          FALE_Source.SETFILTER(FALE_Source."Posting Date", FAConsDateFilter);
        IF IsAcceptOnly THEN
          FALE_Source.SETRANGE(Accept,TRUE)
        ELSE
          FALE_Source.SETRANGE(Accept);


        iNumberOfRecs :=FALE_Source.COUNT;

        IF FALE_Source.FINDFIRST THEN BEGIN
        REPEAT

        VendorNo := '';
        ExpOperTypeCode := '';
        IncTaxTypeCode :=  '';

        //NC NCS-2127.2 > DP
        ProjectCode :='';
        //NC NCS-2127.2 < DP

        MappingFALE.RESET;
        MappingFALE.SETCURRENTKEY("Company Name","Source Depreciation Book","Source Cons. FA LE Type","Source FA Posting Group");


        IsFATransSetupFound := FALSE;
        MappingFALE.SETRANGE("Mapping Code",TempMapping.Code);
        MappingFALE.SETFILTER("Company Name",COMPANYNAME);
        MappingFALE.SETRANGE("Source Depreciation Book",FALE_Source."Depreciation Book Code");
        IF FALE_Source."FA Export Type"<>FALE_Source."FA Export Type"::" " THEN
          MappingFALE.SETRANGE("Source Cons. FA LE Type",FALE_Source."Cons. FA Export Type");
        IF FALE_Source."FA Posting Group"<>'' THEN
          MappingFALE.SETRANGE("Source FA Posting Group",FALE_Source."FA Posting Group");
        IF MappingFALE.FINDFIRST THEN BEGIN
          IsFATransSetupFound := TRUE;
        END ELSE BEGIN
          MappingFALE.SETRANGE("Company Name");
          IF MappingFALE.FINDFIRST THEN
          BEGIN
            IsFATransSetupFound := TRUE;
          END ELSE BEGIN
            MappingFALE.SETRANGE("Source FA Posting Group");
            IF MappingFALE.FINDFIRST THEN
              IsFATransSetupFound := TRUE;
          END;
        END;
        IF IsFATransSetupFound THEN BEGIN


        //Не обрабатываем отмененные операции
        IF (FALE_Source."FA No." = '') AND
           NOT ((FALE_Source."FA Export Type"=FALE_Source."FA Export Type"::"Reverse Acquisition")
           OR (FALE_Source."FA Export Type" IN
           [FALE_Source."FA Export Type"::Disposal,
           FALE_Source."FA Export Type"::Transfer,
           FALE_Source."FA Export Type"::Release,
           FALE_Source."FA Export Type"::Depreciation]))
        THEN
          Exported := FALSE
        ELSE BEGIN
          CASE ExpType OF
            ExpType::Acquisition:
            BEGIN
              VendorNo := NAVGetVendorNo(FALE_Source);
              ExpOperTypeCode := NAVGetExpOper_Type(FALE_Source);
              IncTaxTypeCode :=  NAVGetIncTax_Type(FALE_Source);

              //NC NCS-2127.2 > DP
              ProjectCode :=NAVGetProjectCode(FALE_Source);
              //NC NCS-2127.2 < DP

              IF FALE_Source."Canceled from FA No." = '' THEN
                FACatalog.GET(FALE_Source."FA No.")
              ELSE
                FACatalog.GET(FALE_Source."Canceled from FA No.");

              IF NOT FixedAssetReceiver.GET(FACatalog."No.") THEN BEGIN
                IF IsAcceptOnly THEN
                  NAVCreateFA(FACatalog."No.",MappingFALE)
                ELSE
                  ERROR(Text003, FACatalog."No.");
              END ELSE
                IF IsAcceptOnly THEN
                  NAVUpdateFA(FACatalog."No.",FixedAssetReceiver,MappingFALE);
              FixedAssetReceiver.GET(FACatalog."No.");
              ConsolidationSource.TESTFIELD("Acquisition Gen. Batch Name");
              ConsolidationSource.TESTFIELD("Acquisition FA Batch Name");
              GenJnlBatchToPost  := ConsolidationSource."Acquisition Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Acquisition FA Batch Name";
              IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND ReceiverDeprBook."G/L Integration - Acq. Cost" THEN
                NAVInsertGenJnlLine(FALE_Source,MappingFALE)
              ELSE
                NAVInsertFAJnlLine(FALE_Source,ExpType::Acquisition,MappingFALE);
            END;

            ExpType::Depreciation:
            BEGIN
              IF FALE_Source."Canceled from FA No." = '' THEN
                FACatalog.GET(FALE_Source."FA No.")
              ELSE
                FACatalog.GET(FALE_Source."Canceled from FA No.");

              IF NOT FixedAssetReceiver.GET(FACatalog."No.") THEN BEGIN
                IF IsAcceptOnly THEN
                  NAVCreateFA(FACatalog."No.",MappingFALE)
                ELSE
                  ERROR(Text003, FACatalog."No.");
              END ELSE
                IF IsAcceptOnly THEN
                  NAVUpdateFA(FACatalog."No.",FixedAssetReceiver,MappingFALE);
              FixedAssetReceiver.GET(FACatalog."No.");
              ConsolidationSource.TESTFIELD("Acquisition Gen. Batch Name");
              ConsolidationSource.TESTFIELD("Acquisition FA Batch Name");
              GenJnlBatchToPost  := ConsolidationSource."Depreciation Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Depreciation FA Batch Name";

              IF FALE_Source."Error Entry No."<>0 THEN BEGIN
                NAVFALEReverse(FALE_Source);

               IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND
                  ReceiverDeprBook."G/L Integration - Depreciation" THEN
                  ExportedNum1 += 1
                ELSE
                  ExportedNum += 1;

              END ELSE
               IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND
                  ReceiverDeprBook."G/L Integration - Depreciation" THEN
                 NAVInsertGenJnlLine(FALE_Source,MappingFALE)
               ELSE
                 NAVInsertFAJnlLine(FALE_Source,ExpType::Depreciation,MappingFALE);
            END;
            ExpType::Release:
            BEGIN

              IF ((FALE_Source."Canceled from FA No." = '') AND (FALE_Source.Amount > 0))OR
               ((FALE_Source."Canceled from FA No." <> '') AND (FALE_Source.Amount < 0))  THEN BEGIN

              Exported := TRUE;

              IF FALE_Source."Canceled from FA No." = '' THEN
                FACatalog.GET(FALE_Source."FA No.")
              ELSE
                FACatalog.GET(FALE_Source."Canceled from FA No.");

              IF NOT FixedAssetReceiver.GET(FACatalog."No.") THEN BEGIN
                IF IsAcceptOnly THEN
                  NAVCreateFA(FACatalog."No.",MappingFALE)
                ELSE
                  ERROR(Text003, FACatalog."No.");
              END ELSE
                IF IsAcceptOnly THEN
                  NAVUpdateFA(FACatalog."No.",FixedAssetReceiver,MappingFALE);


              FixedAssetReceiver.GET(FACatalog."No.");
              ConsolidationSource.TESTFIELD("Release Gen. Batch Name");
              ConsolidationSource.TESTFIELD("Release FA Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Release Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Release FA Batch Name";

              IF FALE_Source."Error Entry No."<>0 THEN BEGIN
                NAVFALEReverse(FALE_Source);

                IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND
                  ReceiverDeprBook."G/L Integration - Acq. Cost" THEN
                  ExportedNum1 += 1
                ELSE
                  ExportedNum += 1;

              END ELSE BEGIN

                IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND ReceiverDeprBook."G/L Integration - Acq. Cost"
      THEN
                  NAVInsertGenJnlLine(FALE_Source,MappingFALE)
                ELSE
                  NAVInsertFAJnlLine(FALE_Source,ExpType::Release,MappingFALE);
                IF FixedAssetReceiver."Undepreciable FA" THEN BEGIN
                  NAVInsertUndeprDisposal(FALE_Source,MappingFALE);
                END;
                CurDocNoFA := CurDocNo;
                IF ReceiverDeprBook.GET(MappingFALE."Acquisit. Receiver Depr. Book") AND
                  ReceiverDeprBook."G/L Integration - Acq. Cost" THEN
                  NAVInsertGenJnlLine(FALE_Source,MappingFALE)
                ELSE
                  NAVInsertFAJnlLine(FALE_Source,ExpType::Release,MappingFALE);
                CurDocNo := '';
              END;

              END;

            END;
            ExpType::Disposal:
              BEGIN
                Exported := TRUE;
                IF FALE_Source."Canceled from FA No." = '' THEN
                  FACatalog.GET(FALE_Source."FA No.")
                ELSE
                  FACatalog.GET(FALE_Source."Canceled from FA No.");

                IF NOT FixedAssetReceiver.GET(FACatalog."No.") THEN BEGIN
                  IF IsAcceptOnly THEN
                    NAVCreateFA(FACatalog."No.",MappingFALE)
                  ELSE
                    ERROR(Text003, FACatalog."No.");
                END ELSE
                  IF IsAcceptOnly THEN
                    NAVUpdateFA(FACatalog."No.",FixedAssetReceiver,MappingFALE);

                FixedAssetReceiver.GET(FACatalog."No.");
                ConsolidationSource.TESTFIELD("Dispose Gen. Batch Name");
                ConsolidationSource.TESTFIELD("Dispose FA Batch Name");
                GenJnlBatchToPost := ConsolidationSource."Dispose Gen. Batch Name";
                FAJnlBatchToPost := ConsolidationSource."Dispose FA Batch Name";
                IF FALE_Source."Error Entry No."<>0 THEN BEGIN
                  NAVFALEReverse(FALE_Source);
                  IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND
                    ReceiverDeprBook."G/L Integration - Disposal" THEN
                    ExportedNum1 += 1
                  ELSE
                    ExportedNum += 1;

                END ELSE BEGIN
                  IF NOT FixedAssetReceiver."Undepreciable FA" THEN BEGIN
                    IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND
                      ReceiverDeprBook."G/L Integration - Disposal" THEN
                      NAVInsertGenJnlLine(FALE_Source,MappingFALE)
                    ELSE
                     NAVInsertFAJnlLine(FALE_Source,ExpType::Disposal,MappingFALE);
                  END ELSE
                    Exported := FALSE;
                END;
              END;
            ExpType::Transfer:
              BEGIN
                IF FALE_Source."Canceled from FA No." = '' THEN
                  FACatalog.GET(FALE_Source."FA No.")
                ELSE
                  FACatalog.GET(FALE_Source."Canceled from FA No.");

                IF NOT FixedAssetReceiver.GET(FACatalog."No.") THEN BEGIN
                  IF IsAcceptOnly THEN
                    NAVCreateFA(FACatalog."No.",MappingFALE)
                  ELSE
                    ERROR(Text003, FACatalog."No.");
                END ELSE
                  IF IsAcceptOnly THEN
                    NAVUpdateFA(FACatalog."No.",FixedAssetReceiver,MappingFALE);
                FixedAssetReceiver.GET(FACatalog."No.");
                ConsolidationSource.TESTFIELD("Reclass. FA Batch Name");
                ConsolidationSource.TESTFIELD("Reclass. Gen. Batch Name");
                GenJnlBatchToPost := ConsolidationSource."Reclass. Gen. Batch Name";
                FAJnlBatchToPost := ConsolidationSource."Reclass. FA Batch Name";
                IF FALE_Source."Error Entry No."<>0 THEN BEGIN
                  NAVFALEReverse(FALE_Source);

                  IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND
                    ReceiverDeprBook."G/L Integration - Acq. Cost" THEN
                    ExportedNum1 += 1
                  ELSE
                    ExportedNum += 1;

                END ELSE
                  IF (FALE_Source."FA Reclassification No."<>'') AND FALE_Source."FA Reclassification" THEN
                    NAVCreateReklass(FALE_Source."FA No.",FALE_Source."FA Reclassification No.",
                      FALE_Source,MappingFALE,ConsolidationSource."Mapping Code")
                  ELSE
                    NAVCreateReklass(FACatalog."No.",FACatalog."No.",FALE_Source,MappingFALE,ConsolidationSource."Mapping Code");
              END;
            ExpType::"Reverse Acquisition": BEGIN
              IF FALE_Source."Canceled from FA No." = '' THEN
                FACatalog.GET(FALE_Source."FA No.")
              ELSE
                FACatalog.GET(FALE_Source."Canceled from FA No.");


              IF NOT FixedAssetReceiver.GET(FACatalog."No.") THEN BEGIN
                IF IsAcceptOnly THEN
                  NAVCreateFA(FACatalog."No.",MappingFALE)
                ELSE
                  ERROR(Text003, FixedAssetSource."Inventory Number");
              END ELSE
                IF IsAcceptOnly THEN
                  NAVUpdateFA(FACatalog."No.",FixedAssetReceiver,MappingFALE);

              FixedAssetReceiver.GET(FACatalog."No.");
              ConsolidationSource.TESTFIELD("Acquisition Gen. Batch Name");
              ConsolidationSource.TESTFIELD("Acquisition FA Batch Name");
              GenJnlBatchToPost  := ConsolidationSource."Acquisition Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Acquisition FA Batch Name";
              IF ReceiverDeprBook.GET(MappingFALE."Receiver Depreciation Book") AND ReceiverDeprBook."G/L Integration - Acq. Cost" THEN
                NAVInsertGenJnlLine(FALE_Source,MappingFALE)
              ELSE
                NAVInsertFAJnlLine(FALE_Source,ExpType::"Reverse Acquisition",MappingFALE);
            END;
          END;
        END;


        BufferFALEModify.GET(ConsolidationSource."External System",
                             ConsolidationSource."Business Unit Code",FALE_Source."Entry No.");
        BufferFALEModify.VALIDATE(Processed,TRUE);
        BufferFALEModify.VALIDATE(Exported,Exported);
        BufferFALEModify.MODIFY;
        END;

        Exported := FALSE;
        iNumberProcessed +=1;
        Window.UPDATE(3, FALE_Source."Entry No.");
        Window.UPDATE(4, ROUND(iNumberProcessed/iNumberOfRecs*9999, 1) );

        UNTIL FALE_Source.NEXT = 0;
        END ELSE
        RecordsToLoadExist := FALSE;


        IF ConsType = 1 THEN BEGIN

          //Определение раздела для учета
          CASE ExpType OF
            ExpType::Acquisition: BEGIN
              ConsolidationSource.TESTFIELD("Acquisition Gen. Batch Name");
              ConsolidationSource.TESTFIELD("Acquisition FA Batch Name");
              GenJnlBatchToPost  := ConsolidationSource."Acquisition Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Acquisition FA Batch Name";
            END;

            ExpType::Release: BEGIN
              ConsolidationSource.TESTFIELD("Release Gen. Batch Name");
              ConsolidationSource.TESTFIELD("Release FA Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Release Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Release FA Batch Name";
            END;

            ExpType::Depreciation: BEGIN
              ConsolidationSource.TESTFIELD("Depreciation FA Batch Name");
              FAJnlBatchToPost := ConsolidationSource."Depreciation FA Batch Name";
              IF CompanyLoc."Company Type" = CompanyLoc."Company Type"::Standalone THEN BEGIN
                ConsolidationSource.TESTFIELD("Depreciation Gen. Batch Name");
                GenJnlBatchToPost := ConsolidationSource."Depreciation Gen. Batch Name";
              END;
            END;

            ExpType::Disposal: BEGIN
              ConsolidationSource.TESTFIELD("Dispose Gen. Batch Name");
              ConsolidationSource.TESTFIELD("Dispose FA Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Dispose Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Dispose FA Batch Name";
            END;

            ExpType::Transfer: BEGIN
              ConsolidationSource.TESTFIELD("Reclass. FA Batch Name");
              ConsolidationSource.TESTFIELD("Reclass. Gen. Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Reclass. Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Reclass. FA Batch Name";
            END;

          END;
            FAJnlLine.RESET;
            FAJnlLine.SETRANGE("Journal Template Name", FAJnlTemplateToPost);
            FAJnlLine.SETRANGE("Journal Batch Name",FAJnlBatchToPost);
            IF FAJnlLine.FIND('-') THEN
              FAJnlPostBatch.RUN(FAJnlLine);

            GenJnlLine.RESET;
            GenJnlLine.SETRANGE("Journal Template Name", GenJnlTemplateToPost);
            GenJnlLine.SETRANGE("Journal Batch Name", GenJnlBatchToPost);
            IF GenJnlLine.FIND('-') THEN
              GenJnlPostBatch.RUN(GenJnlLine);
            PostedRecordsExist := TRUE;
        END ELSE
          RecordsToLoadExist := FALSE;
        UNTIL ConsolidationSource.NEXT=0;

      Window.CLOSE;

        IF ConsType = 0 THEN BEGIN
          IF iNumberProcessed>0 THEN BEGIN
            LoadedRecordsExist := TRUE;
            MESSAGE(Text007, ExportedNum, ExportedNum1);
          END;
        END;

      IF (NOT RecordsToLoadExist) AND
         (NOT PostedRecordsExist) AND
         (NOT LoadedRecordsExist)
      THEN
        IF IsErrorSession THEN
          MESSAGE(Text00130)
        ELSE
          MESSAGE(Text50010);
      IF PostedRecordsExist THEN
        MESSAGE(Text50011);
      IF LoadedRecordsExist THEN
        MESSAGE(Text50012);

      END ELSE
        MESSAGE(Text00130);
    END;

    PROCEDURE NAVSetShowReqForm@1000000006(IsShow@1000000000 : Boolean);
    BEGIN
      IsAcceptOnly := TRUE;
      CurrReport.USEREQUESTPAGE :=IsShow;
    END;

    PROCEDURE NAVCreateFA@1000000003(FANo@1000000022 : Code[20];MappingFALE@1101495000 : Record 50120);
    VAR
      FATransformationSetup@1000000000 : Record 50004;
      DefaultDimension@1000000008 : Record 352;
      DefaultDimension2@1000000007 : Record 352;
      CountCopy@1000000006 : Integer;
      i@1000000005 : Integer;
      CopyDateDepr@1000000004 : Boolean;
      TranslationComp@1000000003 : Text[30];
      UseDeprPeriod@1000000002 : Boolean;
      DimFilter@1000000001 : Text[150];
      CurFA@1000000018 : Record 5600;
      NoSeriesMgt@1000000017 : Codeunit 396;
      DeprBookSource@1000000015 : Record 5611;
      FAPostingGroupSource@1000000014 : Record 5606;
      rCommentLineSource@1000000013 : Record 97;
      rCommentLine@1000000012 : Record 97;
      CopyDeprEndDate@1000000011 : Boolean;
      ConsSetup@1000000010 : Record 50000;
      ConsSetupSource@1000000009 : Record 50000;
      FA@1000000016 : Record 5600;
      FABook2@1000000019 : Record 5612;
      DimCode@1000000020 : Code[20];
      DimValueCode@1000000021 : Code[20];
      FACatalog@1101495001 : Record 50044;
    BEGIN
      ConsSetup.GET;
      MovingDataSetup.GET;
      FASetup.GET;

      IF FANo<>'' THEN
        IF FACatalog.GET(FANo) THEN BEGIN
          FA.INIT;
          FA."No." := FACatalog."No.";
          FA.Description := COPYSTR(FACatalog.Name,1,MAXSTRLEN(FA.Description));

          //NC NCS-2425 > DP
          {
          FA."Description 2" :=COPYSTR(FACatalog.Name,MAXSTRLEN(FA.Description));
          }
          FA."Description 2" :=COPYSTR(FACatalog.Name,MAXSTRLEN(FA.Description)+1,MAXSTRLEN(FA."Description 2"));
          //NC NCS-2425 < DP

          FA."FA Type" := FACatalog."Type FA";
          FA."Inventory Number" := FA."No.";
          FA.INSERT(TRUE);
          IF GLSetup."Global Dimension 1 Code"= MovingDataSetup."PROFIT CENTER Dimension Code" THEN
            FA.VALIDATE("Global Dimension 1 Code",FACatalog."Profit Center");
          IF GLSetup."Global Dimension 2 Code"= MovingDataSetup."PROFIT CENTER Dimension Code" THEN
            FA.VALIDATE("Global Dimension 2 Code",FACatalog."Profit Center");

          IF DefDim.GET(5600,FA."No.",MovingDataSetup."PROFIT CENTER Dimension Code") THEN BEGIN
            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            DefDim.MODIFY;
          END;

          FA."FA Type" :=FACatalog."Type FA";
          FA."FA Location Code" := '';
          FA."Responsible Employee" := '';
          FA."Last Date Modified" := 0D;
          FA.Blocked := FALSE;
          FA.Inactive := FALSE;
          FA.Status := 0;
          FA."Initial Release Date" := 0D;
          FA."Status Document No." := '';
          FA.Insured := FALSE;
          FA."Main Asset/Component" := 0;
          FA."Component of Main Asset" := '';

          //Вставка стандартного измерения Project

          //NC NCS-2127.2 > DP
          IF (ProjectCode<>'') THEN BEGIN
          {
          IF FACatalog.Project<>'' THEN BEGIN
          }
          //NC NCS-2127.2 < DP

            MovingDataSetup.TESTFIELD("Project Dimension Code");
            DefDim.INIT;
            DefDim."Table ID" := DATABASE::"Fixed Asset";
            DefDim."No." := FA."No.";
            DefDim."Dimension Code" := MovingDataSetup."Project Dimension Code";

            //NC NCS-2127.2 > DP
            DefDim."Dimension Value Code" := ProjectCode;
            {
            DefDim."Dimension Value Code" := FACatalog.Project;
            }
            //NC NCS-2127.2 < DP

            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            IF NOT DefDim.INSERT THEN DefDim.MODIFY;
          END;

          //NC NCS-2127.2 > DP
          IF (VendorNo<>'') THEN BEGIN
          {
          IF (FA."FA Type" =FA."FA Type"::"Future Expense") AND (VendorNo<>'') THEN BEGIN
          }
          //NC NCS-2127.2 > DP

            DefDim.INIT;
            DefDim."Table ID" := 5600;
            DefDim."No." :=FA."No.";
            DefDim."Dimension Code" := MovingDataSetup."Customer Dimension Code";
            DefDim."Dimension Value Code" :=VendorNo;
            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            IF NOT DefDim.INSERT THEN DefDim.MODIFY;
          END;

          IF (FA."FA Type" =FA."FA Type"::"Future Expense") AND (ExpOperTypeCode<>'') THEN BEGIN
            DefDim.INIT;
            DefDim."Table ID" := 5600;
            DefDim."No." :=FA."No.";
            DefDim."Dimension Code" := MovingDataSetup."Exp.Oper. Type Dimension Code";
            DefDim."Dimension Value Code" :=ExpOperTypeCode;
            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            IF NOT DefDim.INSERT THEN DefDim.MODIFY;
          END;
          IF (FA."FA Type" =FA."FA Type"::"Future Expense") AND (IncTaxTypeCode<>'') THEN BEGIN
            DefDim.INIT;
            DefDim."Table ID" := 5600;
            DefDim."No." :=FA."No.";
            DefDim."Dimension Code" := MovingDataSetup."INC.TAX Dimension Code";
            DefDim."Dimension Value Code" :=IncTaxTypeCode;
            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            IF NOT DefDim.INSERT THEN DefDim.MODIFY;
          END;

          DefDim.INIT;
          DefDim."Table ID" := 5600;
          DefDim."No." :=FA."No.";
          DefDim."Dimension Code" := MovingDataSetup."Reconcilation Dimension Code";
          DefDim."Dimension Value Code" := MovingDataSetup."Rec. Finance Dim. Value Code";
          DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
          IF NOT DefDim.INSERT THEN DefDim.MODIFY;

          FA.MODIFY;

          FABook2.INIT;
          FABook2."FA No." := FA."No.";
          FABook2."Depreciation Book Code" :='';
          FABook2."Inventory Number" := FA."Inventory Number";
          IF MappingFALE."Receiver Depreciation Book"<>'' THEN
            FABook2."Depreciation Book Code" := MappingFALE."Receiver Depreciation Book"
          ELSE
            IF (FASetup."Default Depr. Book" <> '') AND (FA."FA Type" = FA."FA Type"::"Fixed Assets") THEN
              FABook2."Depreciation Book Code" := FASetup."Default Depr. Book"
            ELSE
              IF (FASetup."Default Depr. Book" <> '') AND (FA."FA Type" = FA."FA Type"::"Intangible Asset") THEN
                FABook2."Depreciation Book Code" := FASetup."Default Depr. Book"
              ELSE
                IF (FASetup."Future Depr. Book"<>'') AND (FA."FA Type" = FA."FA Type"::"Future Expense") THEN
                  FABook2."Depreciation Book Code" := FASetup."Future Depr. Book";

          IF FACatalog."No of Depreciation Months"<>0 THEN BEGIN
            FABook2.VALIDATE("No. of Depreciation Months",FACatalog."No of Depreciation Months");
          END;
          IF MappingFALE."Receiver FA Posting Group"<>'' THEN
            FABook2."FA Posting Group" := MappingFALE."Receiver FA Posting Group";
          FABook2.Description :=  FA.Description;

          IF FACatalog."Depreciation Starting Date"<>0D THEN
            FABook2.VALIDATE("Depreciation Starting Date",FACatalog."Depreciation Starting Date");

          IF NOT (FABook2."Depreciation Book Code" ='') THEN
            IF NOT FABook2.INSERT THEN FABook2.MODIFY;
           FA.VALIDATE("FA Class Code",FACatalog."FA Class Code");
          FA.MODIFY;
        END;
    END;

    PROCEDURE NAVUpdateFA@1000000009(FANo@1000000022 : Code[20];FASource@1000000023 : Record 5600;MappingFALE@1101495000 : Record 50120);
    VAR
      FATransformationSetup@1000000000 : Record 50004;
      DefaultDimension@1000000008 : Record 352;
      DefaultDimension2@1000000007 : Record 352;
      CountCopy@1000000006 : Integer;
      i@1000000005 : Integer;
      CopyDateDepr@1000000004 : Boolean;
      TranslationComp@1000000003 : Text[30];
      UseDeprPeriod@1000000002 : Boolean;
      DimFilter@1000000001 : Text[150];
      CurFA@1000000018 : Record 5600;
      NoSeriesMgt@1000000017 : Codeunit 396;
      DeprBookSource@1000000015 : Record 5611;
      FAPostingGroupSource@1000000014 : Record 5606;
      rCommentLineSource@1000000013 : Record 97;
      rCommentLine@1000000012 : Record 97;
      CopyDeprEndDate@1000000011 : Boolean;
      ConsSetup@1000000010 : Record 50000;
      ConsSetupSource@1000000009 : Record 50000;
      FA@1000000016 : Record 5600;
      FABook2@1000000019 : Record 5612;
      DimCode@1000000020 : Code[20];
      DimValueCode@1000000021 : Code[20];
      FACatalog@1101495001 : Record 50044;
    BEGIN
      ConsSetup.GET;
      MovingDataSetup.GET;
      FASetup.GET;
      FA := FASource;
        IF FACatalog.GET(FANo) THEN  BEGIN

          FA.VALIDATE(Description,COPYSTR(FACatalog.Name,1,MAXSTRLEN(FA.Description)));

          //NC NCS-2425 > DP
          {
          FA."Description 2" :=COPYSTR(FACatalog.Name,MAXSTRLEN(FA.Description));
          }
          FA."Description 2" :=COPYSTR(FACatalog.Name,MAXSTRLEN(FA.Description)+1,MAXSTRLEN(FA."Description 2"));
          //NC NCS-2425 < DP

          FA."Inventory Number" := FA."No.";

          IF (GLSetup."Global Dimension 1 Code"= MovingDataSetup."PROFIT CENTER Dimension Code")
          AND (FA."Global Dimension 1 Code"='')
          THEN
            FA.VALIDATE("Global Dimension 1 Code",FACatalog."Profit Center");
          IF (GLSetup."Global Dimension 2 Code"= MovingDataSetup."PROFIT CENTER Dimension Code")
          AND (FA."Global Dimension 2 Code"='')
          THEN
            FA.VALIDATE("Global Dimension 2 Code",FACatalog."Profit Center");

          IF DefDim.GET(5600,FA."No.",MovingDataSetup."PROFIT CENTER Dimension Code") THEN BEGIN
            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            DefDim.MODIFY;
          END;

          FA."FA Type" :=FACatalog."Type FA";

          //Вставка стандартного измерения Project

          //NC NCS-2127.2 > DP
          IF (ProjectCode<>'') THEN BEGIN
          {
          IF FACatalog.Project<>'' THEN BEGIN
          }
          //NC NCS-2127.2 < DP

            MovingDataSetup.TESTFIELD("Project Dimension Code");
            DefDim.INIT;
            DefDim."Table ID" := DATABASE::"Fixed Asset";
            DefDim."No." := FA."No.";
            DefDim."Dimension Code" := MovingDataSetup."Project Dimension Code";

            //NC NCS-2127.2 > DP
            DefDim."Dimension Value Code" := ProjectCode;
            {
            DefDim."Dimension Value Code" := FACatalog.Project;
            }
            //NC NCS-2127.2 < DP

            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            IF NOT DefDim.INSERT THEN DefDim.MODIFY;
          END;

          //NC NCS-2127.2 > DP
          IF (VendorNo<>'') THEN BEGIN
          {
          IF (FA."FA Type" =FA."FA Type"::"Future Expense") AND (VendorNo<>'') THEN BEGIN
          }
          //NC NCS-2127.2 > DP

            DefDim.INIT;
            DefDim."Table ID" := 5600;
            DefDim."No." :=FA."No.";
            DefDim."Dimension Code" := MovingDataSetup."Customer Dimension Code";
            DefDim."Dimension Value Code" := VendorNo;
            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            IF NOT DefDim.INSERT THEN DefDim.MODIFY;
          END;

          IF (FA."FA Type" =FA."FA Type"::"Future Expense") AND (ExpOperTypeCode<>'') THEN BEGIN
            DefDim.INIT;
            DefDim."Table ID" := 5600;
            DefDim."No." :=FA."No.";
            DefDim."Dimension Code" := MovingDataSetup."Exp.Oper. Type Dimension Code";
            DefDim."Dimension Value Code" :=ExpOperTypeCode;
            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            IF NOT DefDim.INSERT THEN DefDim.MODIFY;
          END;
          IF (FA."FA Type" =FA."FA Type"::"Future Expense") AND (IncTaxTypeCode<>'') THEN BEGIN
            DefDim.INIT;
            DefDim."Table ID" := 5600;
            DefDim."No." :=FA."No.";
            DefDim."Dimension Code" := MovingDataSetup."INC.TAX Dimension Code";
            DefDim."Dimension Value Code" :=IncTaxTypeCode;
            DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
            IF NOT DefDim.INSERT THEN DefDim.MODIFY;
          END;
          DefDim.INIT;
          DefDim."Table ID" := 5600;
          DefDim."No." :=FA."No.";
          DefDim."Dimension Code" := MovingDataSetup."Reconcilation Dimension Code";
          DefDim."Dimension Value Code" := MovingDataSetup."Rec. Finance Dim. Value Code";
          DefDim."Value Posting" := DefDim."Value Posting"::"Code Mandatory";
          IF NOT DefDim.INSERT THEN DefDim.MODIFY;


          FA.MODIFY;


          FABook2.INIT;
          FABook2."FA No." := FA."No.";
          FABook2."Depreciation Book Code" :='';
          FABook2."Inventory Number" := FA."Inventory Number";
          IF MappingFALE."Receiver Depreciation Book"<>'' THEN
            FABook2."Depreciation Book Code" := MappingFALE."Receiver Depreciation Book"
          ELSE
            IF (FASetup."Default Depr. Book" <> '') AND (FA."FA Type" = FA."FA Type"::"Fixed Assets") THEN
              FABook2."Depreciation Book Code" := FASetup."Default Depr. Book"
            ELSE
              IF (FASetup."Default Depr. Book" <> '') AND (FA."FA Type" = FA."FA Type"::"Intangible Asset") THEN
                FABook2."Depreciation Book Code" := FASetup."Default Depr. Book"
              ELSE
                IF (FASetup."Future Depr. Book"<>'') AND (FA."FA Type" = FA."FA Type"::"Future Expense") THEN
                  FABook2."Depreciation Book Code" := FASetup."Future Depr. Book";


          IF MappingFALE."Receiver FA Posting Group"<>'' THEN
            FABook2."FA Posting Group" := MappingFALE."Receiver FA Posting Group";
          FABook2.Description :=  FA.Description;

          IF FACatalog."No of Depreciation Months"<>0 THEN BEGIN
            FABook2.VALIDATE("No. of Depreciation Months",FACatalog."No of Depreciation Months");
          END;

          IF FACatalog."Depreciation Starting Date"<>0D THEN
            FABook2."Depreciation Starting Date" := FACatalog."Depreciation Starting Date";

          IF NOT (FABook2."Depreciation Book Code" ='') THEN

            //NC NCS-2395 > DP
            {
            IF FABook2.INSERT THEN
            }
            IF NOT FABook2.INSERT THEN
             IF NAVCheckFALE(FABook2."FA No.",FABook2."Depreciation Book Code") THEN FABook2.MODIFY;
             //NC NCS-2395 < DP

          FA.VALIDATE("FA Class Code",FACatalog."FA Class Code");
          FA.MODIFY;
        END;
    END;

    PROCEDURE NAVCheckFAAcqCostValue@1000000024(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20];FABuffer@1000000003 : Record 50119;VAR IsError@1000000004 : Boolean);
    VAR
      FALedgEntry@1000000002 : Record 5601;
      FA@1000000005 : Record 5600;
    BEGIN
      IF FA.GET(FANo) THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type",
          "FA Posting Date","Depr. Bonus");
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Acquisition Cost");
        FALedgEntry.SETFILTER("FA Posting Date",'..%1',FABuffer."FA Posting Date");
        FALedgEntry.CALCSUMS(Amount);
        IF FALedgEntry.Amount=0 THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00137, FANo,DeprBook),'EFA10');
        END;
      END;
    END;

    PROCEDURE NAVCheckFAGlobalDisp@1000000023(FANo@1000000003 : Code[20];DeprBook@1000000002 : Code[20];FABuffer@1000000001 : Record 50119;VAR IsError@1000000000 : Boolean);
    VAR
      FALedgEntry@1000000004 : Record 5601;
      FA@1000000005 : Record 5600;
    BEGIN
      IF FA.GET(FANo) THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("FA Posting Category",FALedgEntry."FA Posting Category"::Disposal);
        IF FALedgEntry.FINDLAST THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00135, FANo),'EFA14');
        END;
      END;
    END;

    PROCEDURE NAVCheckFANextEntry@1000000031(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20];FABuffer@1000000003 : Record 50119;FABuff@1000000006 : Record 50119;VAR IsError@1000000004 : Boolean);
    VAR
      FALedgEntry@1000000002 : Record 5601;
      FALedgEntry1@1000000005 : Record 5601;
    BEGIN
      FALedgEntry.RESET;
      FALedgEntry.SETRANGE("FA No.",FANo);

      FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
      FALedgEntry.SETRANGE("Cons. Source Code",FABuff."Cons. Source Code");
      FALedgEntry.SETRANGE("Buffer Entry No.",FABuff."Entry No.");
      IF FALedgEntry.FINDFIRST THEN BEGIN
        FALedgEntry1.RESET;
        FALedgEntry1.SETRANGE("FA No.",FANo);
        FALedgEntry1.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry1.SETFILTER("Entry No.",'>%1',FALedgEntry."Entry No.");
        FALedgEntry1.SETFILTER("FA Posting Date",'>%1',FALedgEntry."Posting Date");
        IF FALedgEntry1.FINDFIRST THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00142, FANo, FORMAT(FABuffer."FA Export Type")),'EFA26');
        END;
      END ELSE BEGIN
        FALedgEntry1.RESET;
        FALedgEntry1.SETRANGE("FA No.",FANo);
        FALedgEntry1.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry1.SETFILTER("FA Posting Date",'>%1',FABuffer."FA Posting Date");
        IF FALedgEntry1.FINDFIRST THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00142, FANo, FORMAT(FABuffer."FA Export Type")),'EFA26');
        END;
      END;
    END;

    PROCEDURE NAVCheckFAFirstEntry@1000000033(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20];FABuffer@1000000003 : Record 50119;VAR IsError@1000000004 : Boolean);
    VAR
      FALedgEntry@1000000002 : Record 5601;
    BEGIN
      IF FANo<>'' THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry.SETFILTER("FA Posting Date",'..%1',FABuffer."FA Posting Date");
        IF NOT FALedgEntry.FINDFIRST THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00143, FANo, FORMAT(FABuffer."FA Export Type")),'EFA27');
        END;
      END ELSE BEGIN
        IsError := TRUE;
        NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00143, FANo, FORMAT(FABuffer."FA Export Type")),'EFA27');
      END;
    END;

    PROCEDURE NAVCreateErrorLogEntry1@1101495000(FABufferErr@1000000006 : Record 50119;ErrMessage@1000000008 : Text[250];ErrCode@1000000000 : Code[10]) : Integer;
    VAR
      ErrorJournal@1101495000 : Record 50023;
    BEGIN
      ErrorJournal.AddErrorBufferFA_1(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,FAConsRegister."No.",
                                       ErrCode,ErrMessage,COMPANYNAME,FABufferErr,0);
      //NC NOS-26 > SPA
      //EXIT(ErrorJournal."Line No.");
      EXIT(ErrorJournal."Entry No.");
      //NC NOS-26 < SPA
    END;

    PROCEDURE NAVCreateConsRegister@1210062(ConsSource@1000000004 : Code[20];FromEntryNo@1000000002 : Integer;ToEntryNo@1000000003 : Integer;PostDate@1210001 : Date;FromDate@1000000000 : Date;ToDate@1000000001 : Date;VAR FAConsReg@1210003 : Record 50006);
    VAR
      ConsolSource1@1000000008 : Record 50001;
      ConsolidationSetup@1210000 : Record 50000;
    BEGIN
      IF FromEntryNo > ToEntryNo THEN
        FromEntryNo := ToEntryNo;
      FAConsReg.INIT;
      FAConsReg."No." := NAVGetNextRegisterNo(ConsSource);
      FAConsReg."Cons. Source Code" := ConsSource;
      FAConsReg."Consolidation Date" := TODAY;
      FAConsReg."Consolidation Time" := TIME;
      FAConsReg."User ID" := USERID;
      FAConsReg."From Entry No." := FromEntryNo;
      FAConsReg."To Entry No." := ToEntryNo;
      FAConsReg."From Posting Date" := FromDate;
      FAConsReg."To Posting Date" := ToDate;
      ConsolidationSetup.GET;
      ConsolSource1.GET(ConsSource);
      FAConsReg."Gen. Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
      FAConsReg."Gen. Journal Batch" := ConsolSource1."Acquisition Gen. Batch Name";
      FAConsReg."Closed Period Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
      FAConsReg."Closed Period Journal Batch" := ConsolSource1."Closed Period Batch Name";
      FAConsReg.INSERT(TRUE);
    END;

    PROCEDURE NAVUpdateConsRegister@1000000025(ToEntryNo@1000000005 : Integer;PostDate@1000000004 : Date;FromDate@1000000003 : Date;ToDate@1000000002 : Date;VAR FAConsReg@1000000001 : Record 50006);
    BEGIN
      IF ToEntryNo > FAConsReg."To Entry No." THEN
        FAConsReg."To Entry No." := ToEntryNo;
      IF FromDate < FAConsReg."From Posting Date" THEN BEGIN
        FAConsReg."From Posting Date" := FromDate;
      END;
      IF ToDate > FAConsReg."To Posting Date" THEN BEGIN
        FAConsReg."To Posting Date" := ToDate;
      END;
      FAConsReg."Consolidation Date" := TODAY;
      FAConsReg."Consolidation Time" := TIME;
    END;

    PROCEDURE NAVGetNextRegisterNo@1210061(ConsSource@1210000 : Code[20]) : Integer;
    VAR
      FAConsReg1@1000000002 : Record 50006;
    BEGIN
      FAConsReg1.RESET;
      FAConsReg1.SETRANGE("Cons. Source Code", ConsSource);
      IF FAConsReg1.FINDLAST THEN
        EXIT(FAConsReg1."No." + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NAVCheckDimMapp@1000000032(VAR BufferFALE@1210001 : Record 50119;ConsolidationSource@1000000009 : Record 50001;ConsSession@1210000 : Integer;MappingCode@1000000005 : Code[20]) : Boolean;
    VAR
      ConvDimensions@1000000008 : Record 50003;
      DimensionCode@1000000014 : Code[20];
      DimVal@1000000013 : Code[20];
      tmp@1210002 : Integer;
      lDim1Exist@1210007 : Boolean;
      lDim2Exist@1210006 : Boolean;
      lDim3Exist@1210005 : Boolean;
      ConsDimCode@1210004 : Code[20];
      LedgDimension1@1210003 : Record 50094;
      DimensionValue@1101495000 : Record 349;
      Dimension@1000000001 : Record 348;
      DimMappingSel@1000000003 : Record 50031;
      NeedMapping@1000000004 : Boolean;
      ErrMessage@1101495001 : Text[100];
      DimCode@1101495002 : Integer;
      ErrorJournal@1101495003 : Record 50023;
      LedgDimension@1101495004 : Record 50094;
      IsErr@1101495005 : Boolean;
      LedgDimensionTmp1@1101495006 : TEMPORARY Record 50094;
    BEGIN
      MovingDataSetup.GET;
      IsErr := FALSE;

      LedgDimension.RESET;
      LedgDimension.SETRANGE("External System ID",ConsolidationSource."External System");
      LedgDimension.SETRANGE("Id Legal Entity",ConsolidationSource."Business Unit Code");
      LedgDimension.SETRANGE("Table ID", DATABASE::"FA Ledger Entry");
      LedgDimension.SETRANGE("Entry No.", BufferFALE."Entry No.");

      LedgDimensionTmp1.COPY(LedgDimension);
      IF LedgDimension.FINDSET THEN
        REPEAT
          DimensionCode := LedgDimension."Dimension Code";
          DimVal := LedgDimension."Dimension Value Code";


      NeedMapping := DimMappingSel.GET(MappingCode,DimensionCode);
      IF Dimension.GET(DimensionCode) AND NeedMapping THEN BEGIN

        IF ConsSetup."Mapping Dimension Type"=ConsSetup."Mapping Dimension Type"::"Combination-To-One" THEN BEGIN
          ConsDimCode :='';
          LedgDimensionTmp1.RESET;
          LedgDimensionTmp1.SETRANGE("External System ID",ConsolidationSource."External System");
          LedgDimensionTmp1.SETRANGE("Id Legal Entity",ConsolidationSource."Business Unit Code");
          LedgDimensionTmp1.SETRANGE("Table ID", DATABASE::"FA Ledger Entry");
          LedgDimensionTmp1.SETRANGE("Entry No.", BufferFALE."Entry No.");

          ConvDimensions.RESET;
          ConvDimensions.ASCENDING(FALSE);
          ConvDimensions.SETRANGE("Mapping Code",MappingCode);
          ConvDimensions.SETRANGE("Source Dimension Code",DimensionCode);
          ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
          IF ConvDimensions.FINDSET THEN
            REPEAT
            //проверяем, есть ли строка, соответствующая исключению, в измерениях в данной операции

              IF ConsDimCode='' THEN BEGIN
                //Проверка на соответствие до 3-х измерений
                lDim1Exist := TRUE;
                lDim2Exist := TRUE;
                lDim3Exist := TRUE;

                WITH LedgDimensionTmp1 DO BEGIN
                  IF ConvDimensions."Source Dimension Code" <> '' THEN BEGIN
                    SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code");
                  lDim1Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 2" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 2");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 3" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 3");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                END;
              END;
              IF (lDim1Exist AND lDim2Exist AND lDim3Exist) THEN
                ConsDimCode := ConvDimensions."Receiver Dimension Code";
              END;
            UNTIL (ConvDimensions.NEXT = 0) OR (ConsDimCode <> '');
            IF ConsDimCode='' THEN BEGIN
              ErrMessage := Text112 + FORMAT(DimVal) + Text113 + FORMAT(DimCode) + Text114;
              IsErr := TRUE;
              IF NOT DimensionValue.GET(DimensionCode,DimVal) THEN;
                ErrorJournal.AddErrorBufferFA_2(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EFA08',
                                       ErrMessage,COMPANYNAME,BufferFALE,DimensionValue,0);
                BufferFALE."Error in Import" := TRUE;
                BufferFALE.MODIFY;
            END ELSE BEGIN
              LedgDimensionTmp.GET(ConsolidationSource."External System",
                              ConsolidationSource."Business Unit Code",
                              DATABASE::"FA Ledger Entry",
                              LedgDimension."Entry No.",
                              LedgDimension."Dimension Code");
              LedgDimensionTmp.DELETE;
              LedgDimensionTmp.INIT;
              LedgDimensionTmp."External System ID" :=BufferFALE."External System ID";
              LedgDimensionTmp."Id Legal Entity" := BufferFALE."Id Legal Entity";
              LedgDimensionTmp."Table ID" := DATABASE::"FA Ledger Entry";
              LedgDimensionTmp."Entry No." := BufferFALE."Entry No.";
              LedgDimensionTmp."Dimension Code" := ConvDimensions."Receiver Dimension Code";
              LedgDimensionTmp."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
              IF NOT LedgDimensionTmp.INSERT THEN
                LedgDimensionTmp.MODIFY;
            END;
        END
        ELSE BEGIN

          ConvDimensions.SETCURRENTKEY("Company Name","Source Dimension Code","Source Dimension Value Code");
          ConvDimensions.SETRANGE("Mapping Code",MappingCode);
          ConvDimensions.SETRANGE("Company Name",COMPANYNAME);
          ConvDimensions.SETRANGE("Source Dimension Code",DimensionCode);
          ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
          IF NOT ConvDimensions.FINDFIRST THEN BEGIN
            ConvDimensions.SETRANGE("Company Name",'');
            IF NOT ConvDimensions.FINDFIRST THEN BEGIN
              ErrMessage := Text112 + FORMAT(DimVal) + Text113 + FORMAT(DimensionCode) + Text114;
              IsErr := TRUE;

              IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
                ErrorJournal.AddErrorBufferFA_2(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EFA08',
                                       ErrMessage,COMPANYNAME,BufferFALE,DimensionValue,0);
              BufferFALE."Error in Import" := TRUE;
              BufferFALE.MODIFY;
            END ELSE BEGIN
              IF (ConvDimensions."Receiver Dimension Code" = '') OR (ConvDimensions."Receiver Dimension Value Code" = '') THEN BEGIN
                ErrMessage := Text112 + FORMAT(DimVal) + Text113 + FORMAT(DimensionCode) +  Text114;
                IsErr := TRUE;
                IF NOT DimensionValue.GET(DimensionCode,DimVal) THEN;
                  ErrorJournal.AddErrorBufferFA_2(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource.Code,ConsSession,'EFA08',
                                         ErrMessage,COMPANYNAME,BufferFALE,DimensionValue,0);
                BufferFALE."Error in Import" := TRUE;
                BufferFALE.MODIFY;

              END ELSE BEGIN
                LedgDimensionTmp.GET(ConsolidationSource."External System",
                              ConsolidationSource."Business Unit Code",
                              DATABASE::"FA Ledger Entry",
                              LedgDimension."Entry No.",
                              LedgDimension."Dimension Code");
                LedgDimensionTmp.DELETE;
                LedgDimensionTmp.INIT;
                LedgDimensionTmp."External System ID" :=BufferFALE."External System ID";
                LedgDimensionTmp."Id Legal Entity" := BufferFALE."Id Legal Entity";
                LedgDimensionTmp."Table ID" := DATABASE::"FA Ledger Entry";
                LedgDimensionTmp."Entry No." := BufferFALE."Entry No.";
                LedgDimensionTmp."Dimension Code" := ConvDimensions."Receiver Dimension Code";
                LedgDimensionTmp."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
                IF NOT LedgDimensionTmp.INSERT THEN
                  LedgDimensionTmp.MODIFY;
              END;
            END;
        END ELSE BEGIN
          IF (ConvDimensions."Receiver Dimension Code" = '') OR (ConvDimensions."Receiver Dimension Value Code" = '') THEN BEGIN
            ErrMessage := Text112 + FORMAT(DimVal) + Text113 + FORMAT(DimensionCode) + Text114;
            IsErr := TRUE;
            IF NOT DimensionValue.GET(DimensionCode,DimVal) THEN;
            ErrorJournal.AddErrorBufferFA_2(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EFA08',
                                       ErrMessage,COMPANYNAME,BufferFALE,DimensionValue,0);
            BufferFALE."Error in Import" := TRUE;
            BufferFALE.MODIFY;
          END ELSE BEGIN
            LedgDimensionTmp.GET(ConsolidationSource."External System",
                              ConsolidationSource."Business Unit Code",
                              DATABASE::"FA Ledger Entry",
                              LedgDimension."Entry No.",
                              LedgDimension."Dimension Code");
            LedgDimensionTmp.DELETE;
            LedgDimensionTmp.INIT;
            LedgDimensionTmp."External System ID" :=BufferFALE."External System ID";
            LedgDimensionTmp."Id Legal Entity" := BufferFALE."Id Legal Entity";
            LedgDimensionTmp."Table ID" := DATABASE::"FA Ledger Entry";
            LedgDimensionTmp."Entry No." := BufferFALE."Entry No.";
            LedgDimensionTmp."Dimension Code" := ConvDimensions."Receiver Dimension Code";
            LedgDimensionTmp."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
            IF NOT LedgDimensionTmp.INSERT THEN
              LedgDimensionTmp.MODIFY;
          END;
         END;
      END;
      END;
      UNTIL LedgDimension.NEXT=0;
      EXIT(IsErr);
    END;

    PROCEDURE NAVCheckBufferDimension@1101495001(BufferFALEDimCheck@1101495000 : Record 50119;MappnigCode@1101495001 : Code[20]) : Boolean;
    VAR
      BufferLEDimension@1101495002 : Record 50094;
      IsErr@1101495003 : Boolean;
      Company@1101495004 : Record 2000000006;
    BEGIN
      IsErr := FALSE;

      BufferLEDimension.RESET;
      BufferLEDimension.SETRANGE("External System ID",BufferFALEDimCheck."External System ID");
      BufferLEDimension.SETRANGE("Id Legal Entity",BufferFALEDimCheck."Id Legal Entity");
      BufferLEDimension.SETRANGE("Table ID", DATABASE::"FA Ledger Entry");
      BufferLEDimension.SETRANGE("Entry No.", BufferFALEDimCheck."Entry No.");
      IF BufferLEDimension.FINDSET THEN
        REPEAT
          LedgDimensionTmp.INIT;
          LedgDimensionTmp.TRANSFERFIELDS(BufferLEDimension);
          LedgDimensionTmp.INSERT;
        UNTIL BufferLEDimension.NEXT=0;

          //NC MIO-9.5 > DP
          Company.GET(COMPANYNAME);
          DefDim.RESET;
          DefDim.SETRANGE("Table ID", DATABASE::"Legal Entity Type");
          DefDim.SETRANGE("No.", Company."Legal Entity Type");
          IF DefDim.FINDSET THEN
          REPEAT
            LedgDimensionTmp.INIT;
            LedgDimensionTmp."External System ID" := BufferFALEDimCheck."External System ID";
            LedgDimensionTmp."Id Legal Entity" := BufferFALEDimCheck."Id Legal Entity";
            LedgDimensionTmp."Table ID" := 5601;
            LedgDimensionTmp."Entry No." := BufferFALEDimCheck."Entry No.";
            LedgDimensionTmp."Dimension Code" := DefDim."Dimension Code";
            LedgDimensionTmp."Dimension Value Code" := DefDim."Dimension Value Code";
            IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
              (DefDim."Dimension Value Code" <> '') THEN BEGIN
              IF NOT LedgDimensionTmp.INSERT(TRUE) THEN BEGIN
                MovingDataSetup.GET;
                IF LedgDimensionTmp."Dimension Code" <> MovingDataSetup."INC.TAX Dimension Code" THEN
                  LedgDimensionTmp.MODIFY(TRUE);
              END;
            END ELSE
              IF LedgDimensionTmp.INSERT(TRUE) THEN;
          UNTIL DefDim.NEXT = 0;
          //NC MIO-9.5 < DP

      BufferLEDimension.RESET;
      BufferLEDimension.SETRANGE("External System ID",BufferFALEDimCheck."External System ID");
      BufferLEDimension.SETRANGE("Id Legal Entity",BufferFALEDimCheck."Id Legal Entity");
      BufferLEDimension.SETRANGE("Table ID", DATABASE::"FA Ledger Entry");
      BufferLEDimension.SETRANGE("Entry No.", BufferFALEDimCheck."Entry No.");
      IF BufferLEDimension.FINDSET THEN
        REPEAT
          IsErr := IsErr OR NAVCheckDimension(
          BufferLEDimension."Dimension Code",
          BufferLEDimension."Dimension Value Code",
          MappnigCode,BufferFALEDimCheck);
        UNTIL BufferLEDimension.NEXT=0;
      EXIT(IsErr);
    END;

    PROCEDURE NAVCheckDimension@1101495005(VAR DimCode@1000000000 : Code[20];VAR DimValueCode@1000000001 : Code[20];MappingCode@1000000002 : Code[20];VAR BufferFALECh@1101495000 : Record 50119) : Boolean;
    VAR
      DimensionCheck@1000000003 : Record 348;
      DimCodeInSource@1000000005 : Code[20];
      DimValueInSource@1000000004 : Code[20];
      IsErr@1101495001 : Boolean;
    BEGIN
      IsErr :=FALSE;
      IF DimensionCheck.GET(DimCode) AND DimMappingSelection.GET('',DimCode) AND
         (DimValueCode <> '')
      THEN
        IsErr := NAVCheckDimMapp(BufferFALECh,ConsolidationSource,FAConsRegister."No.",MappingCode)
      ELSE
        IsErr := NAVCheckDimValueID(DimCode, DimValueCode, '',BufferFALECh);
      EXIT(IsErr);
    END;

    PROCEDURE NAVCheckDimValueID@1101495004(DimCode@1000000000 : Code[20];VAR DimValueCode@1000000001 : Code[20];DimValueID@1000000002 : Code[40];VAR BufferFALECh@1101495000 : Record 50119) : Boolean;
    VAR
      DimensionValue@1000000005 : Record 349;
      FACatalog@1101495001 : Record 50044;
      IsFADim@1101495002 : Boolean;
      IsError@1101495003 : Boolean;
      IsCurrentError@1101495004 : Boolean;
      ErrMessage@1101495005 : Text[100];
    BEGIN
      IsError := FALSE;
      IsFADim := ((MovingDataSetup."FA Dimension Code"=DimCode) OR (MovingDataSetup."FE Dimension Code"=DimCode));
      IF IsFADim AND NOT DimensionValue.GET(DimCode, DimValueCode) THEN BEGIN
        IF NOT FACatalog.GET(DimValueCode) THEN BEGIN
          IsError := TRUE;
          IsCurrentError := TRUE;
          ErrMessage := Text00122 +' ' + FORMAT(DimCode) + ' ' + Text00123 + FORMAT(DimValueCode) + Text00124;
          ErrorJournal.AddErrorBufferFA_1(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsolidationSource.Code,FAConsRegister."No.",
                                     'EFA03',ErrMessage,COMPANYNAME,BufferFALECh,0);
          BufferFALECh."Error in Import" := TRUE;
          BufferFALECh.MODIFY;
        END ELSE BEGIN

          IF DimValueCode <> '' THEN BEGIN
            DimensionValue.INIT;
            DimensionValue."Dimension Code" := DimCode;
            DimensionValue.Code := FACatalog."No.";
            DimensionValue.Name := COPYSTR(FACatalog.Name,1,MAXSTRLEN(DimensionValue.Name));
            IF STRLEN(FACatalog.Name)>MAXSTRLEN(DimensionValue.Name) THEN
              DimensionValue."Name 2" := COPYSTR(FACatalog.Name,51,MAXSTRLEN(DimensionValue."Name 2"));
            DimensionValue."Company Name" := FACatalog."Company No.";
            DimensionValue.INSERT(TRUE);
          END;
        END;
      END;
      IF NOT IsFADim AND NOT DimensionValue.GET(DimCode, DimValueCode) THEN BEGIN
        IsError := TRUE;
        IsCurrentError := TRUE;
        ErrMessage := Text00122 +' ' + FORMAT(DimCode) + ' ' + Text00123 + FORMAT(DimValueCode) + Text00124;
        ErrorJournal.AddErrorBufferFA_1(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     ConsolidationSource.Code,FAConsRegister."No.",
                                     'EFA03',ErrMessage,COMPANYNAME,BufferFALECh,0);
        BufferFALECh."Error in Import" := TRUE;
        BufferFALECh.MODIFY;
      END ELSE BEGIN
        IF DimensionValue.Blocked THEN BEGIN
          IsCurrentError := TRUE;
          IsError := TRUE;
          ErrMessage := Text00125 +' ' + FORMAT(DimCode) + Text00126 + FORMAT(DimValueCode) +  Text00127;
          ErrorJournal.AddErrorBufferFA_1(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,FAConsRegister."No.",
                                       'EFA04',ErrMessage,COMPANYNAME,BufferFALECh,0);
          BufferFALECh."Error in Import" := TRUE;
          BufferFALECh.MODIFY;
        END;
        IF DimensionValue."Dimension Value Type" <> DimensionValue."Dimension Value Type"::Standard THEN BEGIN
          IsError := TRUE;
          IsCurrentError := TRUE;
          ErrMessage := Text00131 +' ' +  FORMAT(DimCode) + ' ' + FORMAT(DimValueCode) + Text00132;
          ErrorJournal.AddErrorBufferFA_1(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,FAConsRegister."No.",
                                       'EFA05',ErrMessage,COMPANYNAME,BufferFALECh,0);
          BufferFALECh."Error in Import" := TRUE;
          BufferFALECh.MODIFY;
        END;
      END;
      EXIT(IsError);
    END;

    PROCEDURE NAVCheckBufferFALE@1000000000(BufferFALE@1000000000 : Record 50119;FAConsType@1000000001 : 'Acquisition,Release,Disposal,Reverse Acquisition,Depreciation,Transfer';VAR Mapping@1000000002 : Record 50022) : Boolean;
    VAR
      FACatalog@1000000003 : Record 50044;
      IsFATransSetupFound@1101495000 : Boolean;
      IsErr@1101495001 : Boolean;
      FANo@1101495003 : Code[20];
    BEGIN
      IsErr := FALSE;
      MappingFALE.RESET;
      MappingFALE.SETCURRENTKEY("Company Name","Source Depreciation Book","Source Cons. FA LE Type","Source FA Posting Group");
      IsFATransSetupFound := FALSE;
      MappingFALE.SETFILTER("Company Name",COMPANYNAME);
      MappingFALE.SETRANGE("Source Depreciation Book",BufferFALE."Depreciation Book Code");

      // BMN IF BufferFALE."FA Export Type"<>BufferFALE."FA Export Type"::" " THEN
      IF BufferFALE."Cons. FA Export Type" <> BufferFALE."Cons. FA Export Type"::" " THEN
        MappingFALE.SETRANGE("Source Cons. FA LE Type",BufferFALE."Cons. FA Export Type");

      IF BufferFALE."FA Posting Group"<>'' THEN
        MappingFALE.SETRANGE("Source FA Posting Group",BufferFALE."FA Posting Group");

      IF MappingFALE.FINDFIRST THEN BEGIN
        IsFATransSetupFound := TRUE;
      END ELSE BEGIN
        MappingFALE.SETRANGE("Company Name",'');
        IF MappingFALE.FINDFIRST THEN BEGIN
          IsFATransSetupFound := TRUE;
        END;
      END;

      IF IsFATransSetupFound THEN BEGIN
        FANo :='';
        IF BufferFALE."Canceled from FA No." = '' THEN
          FANo := BufferFALE."FA No."
        ELSE
          FANo := BufferFALE."Canceled from FA No.";

        IF FACatalog.GET(FANo) THEN BEGIN
         IF NOT FixedAssetReceiver.GET(FACatalog."No.") THEN
            IF NOT IsAcceptOnly THEN BEGIN
              IsErr := TRUE;
              NAVCreateErrorLogEntry1(BufferFALE,STRSUBSTNO(Text003, FANo),'EFA51');
            END;


        CASE FAConsType OF
          FAConsType::Acquisition: BEGIN
            NAVCheckBufferGLEntry(BufferFALE,IsErr);
            NAVCheckFAGlobalDisp(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
          END;
          FAConsType::Depreciation: BEGIN
            NAVCheckFAFirstEntry(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
            NAVCheckFADisp(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
          END;
          FAConsType::Release: BEGIN
            NAVCheckFADisp(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
            NAVCheckFADepr(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
            IF BufferFALE."Canceled from FA No." = '' THEN BEGIN
              NAVCheckFAAcqCostValue(FANo,MappingFALE."Acquisit. Receiver Depr. Book",BufferFALE,IsErr);
              NAVCheckFAFirstEntry(FANo,MappingFALE."Acquisit. Receiver Depr. Book",BufferFALE,IsErr);
            END;
          END;
          FAConsType::Transfer:
          BEGIN
            NAVCheckFADisp(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
            NAVCheckFADepr(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
            NAVCheckReklass(FANo,BufferFALE,IsErr);
            IF BufferFALE."FA Reclassification" THEN BEGIN
              NAVCheckFAAcqCostValue(BufferFALE."FA Reclassification No.",MappingFALE."Acquisit. Receiver Depr. Book",BufferFALE,IsErr);
              NAVCheckFAFirstEntry(BufferFALE."FA Reclassification No.",MappingFALE."Acquisit. Receiver Depr. Book",BufferFALE,IsErr);
            END ELSE BEGIN
              NAVCheckFAAcqCostValue(FANo,MappingFALE."Acquisit. Receiver Depr. Book",BufferFALE,IsErr);
              NAVCheckFAFirstEntry(FANo,MappingFALE."Acquisit. Receiver Depr. Book",BufferFALE,IsErr);
            END;
          END;
          FAConsType::Disposal: BEGIN
            NAVCheckFAFirstEntry(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
            IF BufferFALE."Canceled from FA No." = '' THEN BEGIN
              NAVCheckFADisp(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
              NAVCheckFADispLast(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
            END;
          END;
          FAConsType::"Reverse Acquisition": BEGIN
            NAVCheckFADisp(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
            NAVCheckFADispLast(FANo,MappingFALE."Receiver Depreciation Book",BufferFALE,IsErr);
          END;
        END;


        END ELSE BEGIN
          IsErr := TRUE;
          NAVCreateErrorLogEntry1(BufferFALE,STRSUBSTNO(Text00002, FANo),'EFA52');
        END;

      END ELSE BEGIN
        IsErr := TRUE;
        NAVCreateErrorLogEntry1(BufferFALE,STRSUBSTNO(Text00001, BufferFALE."Entry No."),'EFA01');
      END;

      EXIT(IsErr);
    END;

    PROCEDURE NAVCheckFAJnlLine@1000000005(BufferFALE@1000000002 : Record 50119;MappingFALE@1000000000 : Record 50120;FAConsType@1000000001 : 'Acquisition,Release,Disposal,Reverse Acquisition,Depreciation,Transfer') : Boolean;
    VAR
      IsErr@1101495000 : Boolean;
    BEGIN
      IsErr := FALSE;
      EXIT(IsErr);
    END;

    PROCEDURE NAVCheckGenJnlLine@1000000007(BufferFALE@1000000002 : Record 50119;MappingFALE@1000000000 : Record 50120;FAConsType@1000000001 : 'Acquisition,Release,Disposal,Reverse Acquisition,Depreciation,Transfer') : Boolean;
    VAR
      IsErr@1101495000 : Boolean;
    BEGIN
      IsErr := FALSE;
      EXIT(IsErr);
    END;

    PROCEDURE NAVCheckFADepr@1000000017(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20];FABuffer@1000000003 : Record 50119;VAR IsError@1000000004 : Boolean);
    VAR
      FALedgEntry@1000000002 : Record 5601;
    BEGIN
      FALedgEntry.RESET;
      FALedgEntry.SETRANGE("FA No.",FANo);
      FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
      FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::Depreciation);
      FALedgEntry.SETFILTER("FA Posting Date",'%1..',FABuffer."FA Posting Date");
      FALedgEntry.SETRANGE("Reclassification Entry",FALSE);
      IF FALedgEntry.FINDFIRST THEN BEGIN
        IsError := TRUE;
        NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00134, FANo),'EFA13');
      END;
    END;

    PROCEDURE NAVCheckFADisp@1000000019(FANo@1000000003 : Code[20];DeprBook@1000000002 : Code[20];FABuffer@1000000001 : Record 50119;VAR IsError@1000000000 : Boolean);
    VAR
      FALedgEntry@1000000004 : Record 5601;
      FA@1000000005 : Record 5600;
    BEGIN

      IF FA.GET(FANo) THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Proceeds on Disposal");
        FALedgEntry.SETFILTER("FA Posting Date",'%1..',FABuffer."FA Posting Date");
        IF FALedgEntry.FINDLAST THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00135, FANo, DeprBook),'EFA14');
        END ELSE BEGIN
          FALedgEntry.RESET;
          FALedgEntry.SETRANGE("FA No.",FANo);
          FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
          FALedgEntry.SETRANGE(FALedgEntry."FA Posting Category",FALedgEntry."FA Posting Category"::Disposal);
          IF FALedgEntry.FINDLAST THEN BEGIN
            IsError := TRUE;
            NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00135, FANo, DeprBook),'EFA14');
          END;
        END;
      END;
    END;

    PROCEDURE NAVCheckFADispLast@1000000020(FANo@1000000003 : Code[20];DeprBook@1000000002 : Code[20];FABuffer@1000000001 : Record 50119;VAR IsError@1000000000 : Boolean);
    VAR
      FALedgEntry@1000000004 : Record 5601;
      FA@1000000005 : Record 5600;
    BEGIN

      IF FA.GET(FANo) THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry.SETFILTER("FA Posting Date",'..%1',FABuffer."FA Posting Date");
        IF NOT FALedgEntry.FINDFIRST THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00136, FANo),'EFA15');
        END;
      END ELSE BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(FABuffer,STRSUBSTNO(Text00136, FANo),'EFA15');
      END;
    END;

    PROCEDURE NAVGetAmountsNone@1000000042(BufferGLEntry@1000000003 : Record 50093;ConsSourceCurrencyCode@1000000000 : Code[20];VAR GLEntryTemp@1000000001 : TEMPORARY Record 17);
    VAR
      GLMapp@1000000005 : Record 50002;
      CurrExchRate@1000000006 : Record 330;
      GLAcc@1000000007 : Record 15;
      AccType@1000000009 : 'IncSt,BS,OffBS,None';
    BEGIN
      IF BufferGLEntry."Debit Amount" <>0 THEN BEGIN
        IF ConsSourceCurrencyCode = '' THEN BEGIN
        //локальные валюты во внешней системе и в нав совпадают
          IF ((BufferGLEntry."Original Currency Code" = '') AND
               ((BufferGLEntry."Original Debit Amount" = 0) OR
               (ROUND(BufferGLEntry."Original Debit Amount",0.01) = ROUND(BufferGLEntry."Debit Amount",0.01)))
              OR
              ((BufferGLEntry."Original Currency Code" = GLSetup."LCY Code") AND
               (ROUND(BufferGLEntry."Original Debit Amount",0.01) = ROUND(BufferGLEntry."Debit Amount",0.01))))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := ROUND(BufferGLEntry."Debit Amount",0.01);
            GLEntryTemp.Amount := ROUND(BufferGLEntry."Debit Amount",0.01);
            GLEntryTemp."Debit Amount" := ROUND(BufferGLEntry."Debit Amount",0.01);
          END;

          IF ((BufferGLEntry."Original Currency Code" <> '') AND
            (BufferGLEntry."Original Currency Code" <> GLSetup."LCY Code")) THEN BEGIN
            GLEntryTemp."Original Currency Code" := NAVConvertCurrencyCode(BufferGLEntry."Original Currency Code");
            GLEntryTemp."Original Amount" := BufferGLEntry."Original Debit Amount";
            GLEntryTemp.Amount := ROUND(BufferGLEntry.Amount,0.01);
            GLEntryTemp."Debit Amount" := ROUND(BufferGLEntry.Amount,0.01);
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN
                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(BufferGLEntry."Posting Date",GLEntryTemp."Original Currency Code");
          END;
        END ELSE BEGIN //локальные валюты во внешней системе и в нав НЕ совпадают
          IF ((BufferGLEntry."Original Currency Code" = '') AND
               ((BufferGLEntry."Original Debit Amount" = 0) OR
               (ROUND(BufferGLEntry."Original Debit Amount",0.01) = ROUND(BufferGLEntry.Amount,0.01)))
              OR
              ((BufferGLEntry."Original Currency Code" = ConsSourceCurrencyCode) AND
               (ROUND(BufferGLEntry."Original Debit Amount",0.01) = ROUND(BufferGLEntry.Amount,0.01))))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
            GLEntryTemp."Original Amount" := ROUND(BufferGLEntry.Amount,0.01);
            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     BufferGLEntry."Posting Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       BufferGLEntry."Posting Date",
                                       GLEntryTemp."Original Currency Code"));

            GLEntryTemp."Debit Amount" := GLEntryTemp.Amount;
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN
                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(BufferGLEntry."Posting Date",GLEntryTemp."Original Currency Code");
          END;
          IF BufferGLEntry."Original Currency Code" = GLSetup."LCY Code" THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := BufferGLEntry."Original Debit Amount";
            GLEntryTemp.Amount := BufferGLEntry."Original Debit Amount";
            GLEntryTemp."Debit Amount" := BufferGLEntry."Original Debit Amount";
          END;
          IF (BufferGLEntry."Original Currency Code" <> '') AND (BufferGLEntry."Original Currency Code" <> GLSetup."LCY Code") AND
             (BufferGLEntry."Original Currency Code" <> ConsSourceCurrencyCode)
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := NAVConvertCurrencyCode(BufferGLEntry."Original Currency Code");
            GLEntryTemp."Original Amount" := BufferGLEntry."Original Debit Amount";
            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     BufferGLEntry."Posting Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       BufferGLEntry."Posting Date",
                                       GLEntryTemp."Original Currency Code"));
            IF BufferGLEntry.Amount <> 0 THEN
              GLEntryTemp."Debit Amount" := BufferGLEntry.Amount / ABS(BufferGLEntry.Amount) *
                                          ABS(GLEntryTemp.Amount);
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN
                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(BufferGLEntry."Posting Date",GLEntryTemp."Original Currency Code");
          END;
        END;
      END ELSE BEGIN
        IF ConsSourceCurrencyCode = '' THEN BEGIN //локальные валюты во внешней системе и в нав совпадают
          IF ((BufferGLEntry."Original Currency Code" = '') AND
               ((ROUND(BufferGLEntry."Original Credit Amount",0.01) = 0) OR
               (BufferGLEntry."Original Credit Amount" = ROUND(BufferGLEntry.Amount,0.01)))
              OR
              ((BufferGLEntry."Original Currency Code" = GLSetup."LCY Code") AND
               (ROUND(BufferGLEntry."Original Credit Amount",0.01) = ROUND(BufferGLEntry.Amount,0.01))))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := -ROUND(BufferGLEntry."Credit Amount",0.01);
            GLEntryTemp.Amount := -ROUND(BufferGLEntry."Credit Amount",0.01);
            GLEntryTemp."Credit Amount" := ROUND(BufferGLEntry."Credit Amount",0.01);
          END;
          IF ((BufferGLEntry."Original Currency Code" <> '') AND
          (BufferGLEntry."Original Currency Code" <> GLSetup."LCY Code")) THEN BEGIN
            GLEntryTemp."Original Currency Code" := NAVConvertCurrencyCode(BufferGLEntry."Original Currency Code");
            GLEntryTemp."Original Amount" := -BufferGLEntry."Original Credit Amount";
            GLEntryTemp.Amount := ROUND(BufferGLEntry.Amount,0.01);
            GLEntryTemp."Credit Amount" := -ROUND(BufferGLEntry.Amount,0.01);
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN
                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(BufferGLEntry."Posting Date",GLEntryTemp."Original Currency Code");
          END;
        END ELSE BEGIN //локальные валюты во внешней системе и в нав НЕ совпадают
          IF ((BufferGLEntry."Original Currency Code" = '') AND
               ((ROUND(BufferGLEntry."Original Credit Amount",0.01) = 0) OR
               (ROUND(BufferGLEntry."Original Credit Amount",0.01) = -ROUND(BufferGLEntry.Amount,0.01)))
              OR
              ((BufferGLEntry."Original Currency Code" = ConsSourceCurrencyCode) AND
               (ROUND(BufferGLEntry."Original Credit Amount",0.01) = -ROUND(BufferGLEntry.Amount,0.01))))
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := ConsSourceCurrencyCode;
            GLEntryTemp."Original Amount" := ROUND(BufferGLEntry.Amount,0.01);
            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     BufferGLEntry."Posting Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       BufferGLEntry."Posting Date",
                                       GLEntryTemp."Original Currency Code"));

            GLEntryTemp."Credit Amount" := -GLEntryTemp.Amount;
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN
                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(BufferGLEntry."Posting Date",GLEntryTemp."Original Currency Code");
          END;
          IF BufferGLEntry."Original Currency Code" = GLSetup."LCY Code" THEN BEGIN
            GLEntryTemp."Original Currency Code" := '';
            GLEntryTemp."Original Amount" := -BufferGLEntry."Original Credit Amount";
            GLEntryTemp.Amount := -BufferGLEntry."Original Credit Amount";
            GLEntryTemp."Credit Amount" := BufferGLEntry."Original Credit Amount";
          END;
          IF (BufferGLEntry."Original Currency Code" <> '') AND (BufferGLEntry."Original Currency Code" <> GLSetup."LCY Code") AND
             (BufferGLEntry."Original Currency Code" <> ConsSourceCurrencyCode)
          THEN BEGIN
            GLEntryTemp."Original Currency Code" := NAVConvertCurrencyCode(BufferGLEntry."Original Currency Code");
            GLEntryTemp."Original Amount" := - BufferGLEntry."Original Credit Amount";
            GLEntryTemp.Amount := CurrExchRate.ExchangeAmtFCYToLCY(
                                     BufferGLEntry."Posting Date",
                                     GLEntryTemp."Original Currency Code",
                                     GLEntryTemp."Original Amount",
                                     CurrExchRate.ExchangeRate(
                                       BufferGLEntry."Posting Date",
                                       GLEntryTemp."Original Currency Code"));
            IF BufferGLEntry.Amount <> 0 THEN
              GLEntryTemp."Credit Amount" := BufferGLEntry.Amount / ABS(BufferGLEntry."Original Credit Amount") *
                                          ABS(GLEntryTemp.Amount);
            IF GLEntryTemp.Amount <> 0 THEN
              GLEntryTemp."Original Currency Factor" := GLEntryTemp."Original Amount" / GLEntryTemp.Amount
            ELSE
              IF GLEntryTemp."Original Currency Code" <> '' THEN
                GLEntryTemp."Original Currency Factor" :=
                  CurrExchRate.ExchangeRate(BufferGLEntry."Posting Date",GLEntryTemp."Original Currency Code");
          END;
        END;
      END;
    END;

    PROCEDURE NAVConvertCurrencyCode@1000000035(BufferCode@1210000 : Code[10]) : Code[10];
    VAR
      Currency@1210001 : Record 4;
    BEGIN
      IF BufferCode='' THEN EXIT(BufferCode);
      IF GLSetup."LCY Code" = BufferCode THEN
        EXIT('');
      Currency.SETFILTER(Currency."Source Currency Code",'%1',BufferCode);
      IF Currency.FINDFIRST THEN
        EXIT(Currency.Code);
      ERROR(STRSUBSTNO(Text040,BufferCode))
    END;

    PROCEDURE NAVCopyDimFromPostGr@1210002(FANo@1210001 : Code[20];FADeprBookCode@1210002 : Code[10];TabID@1210006 : Integer;JTemplName@1210008 : Code[10];JBatchName@1210009 : Code[10];LNo@1210010 : Integer);
    VAR
      FADeprBook@1210000 : Record 5612;
      FAPostGr@1210003 : Record 5606;
      GLAccount@1210004 : Record 15;
      DefDimension@1210005 : Record 352;
      DefDimensionFA@1210011 : Record 352;
      DimValue@1210012 : Record 349;
    BEGIN
      //если такое измерение существует, то меняем значение, если нет, то добавляем строку
      //если для фин счета значение измерения не заполнено, то берем значение из карточки ОС
      {
      IF FADeprBook.GET(FANo, FADeprBookCode) THEN
        IF FAPostGr.GET(FADeprBook."FA Posting Group") THEN BEGIN
          DefDimension.RESET;
          DefDimension.SETRANGE("Table ID", 5600);
          DefDimension.SETRANGE("No.", FANo);
          IF DefDimension.FIND('-') THEN REPEAT
            DefDimension.TESTFIELD("Dimension Value Code");
            JLDim.RESET;
            JLDim.SETRANGE("Table ID", TabID);
            JLDim.SETFILTER("Journal Template Name",JTemplName);
            JLDim.SETFILTER("Journal Batch Name", JBatchName);
            JLDim.SETRANGE("Journal Line No.", LNo);
            JLDim.SETFILTER("Dimension Code", DefDimension."Dimension Code");
            IF JLDim.FIND('-') THEN BEGIN
              IF (JLDim."Dimension Value Code" <> DefDimension."Dimension Value Code") AND
                 (DefDimension."Dimension Value Code" <> '') THEN
              BEGIN
                JLDim."Dimension Value Code" := DefDimension."Dimension Value Code";
                JLDim.MODIFY(TRUE);
              END;
            END ELSE BEGIN
              JLDim.INIT;
              JLDim."Table ID" := TabID;
              JLDim."Journal Template Name" := JTemplName;
              JLDim."Journal Batch Name" := JBatchName;
              JLDim."Journal Line No." := LNo;
              JLDim."Dimension Code" := DefDimension."Dimension Code";
              IF DefDimension."Dimension Value Code" <> '' THEN
                JLDim."Dimension Value Code" := DefDimension."Dimension Value Code"
              ELSE
                IF DefDimensionFA.GET(DATABASE::"Fixed Asset", FANo, DefDimension."Dimension Code") THEN BEGIN
                  IF DefDimensionFA."Dimension Value Code" <> '' THEN
                    JLDim."Dimension Value Code" := DefDimensionFA."Dimension Value Code";
                END;
              IF JLDim."Dimension Value Code" <> '' THEN
                JLDim.INSERT(TRUE)
              ELSE
                JLDim.INSERT;
            END;
          UNTIL DefDimension.NEXT = 0;
        END;
      }
    END;

    PROCEDURE NAVCreateReklass@1210011(FANo1@1210004 : Code[20];FANo2@1210003 : Code[20];BufferFALE@1210002 : Record 50119;VAR MappingFALE@1210001 : Record 50120;MappingCode@1000000002 : Code[20]);
    VAR
      FAReclassJnl@1210019 : Record 5624;
      FAReclassJnl1@1210018 : Record 5624;
      FASetup@1210017 : Record 5603;
      FixedAsset@1210016 : Record 5600;
      FAReclassTemplate@1210015 : Record 5622;
      FAReclassBatch@1210014 : Record 5623;
      LineNo@1210013 : Integer;
      FAReclassCheckLine@1210012 : Codeunit 5641;
      FAReclassTransferLine@1210011 : Codeunit 5642;
      ReclDone@1210010 : Boolean;
      GenJnlLine@1210009 : Record 81;
      DimMgt@1210006 : Codeunit 408;
      GenJnlPostLine@1210005 : Codeunit 12;
      DeprBookCode1@1210000 : Code[10];
      DimType@1210022 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210021 : Record 81;
      FADocLineFict@1210020 : Record 12477;
      FAJnlLineFict@1210023 : Record 5621;
      GenJnlLine1@1210024 : Record 81;
      GenJnlPostBatch@1210025 : Codeunit 13;
      FAJnlLine@1210026 : Record 5621;
      FAJnlLine1@1210027 : Record 5621;
      FAJnlPostBatch@1210028 : Codeunit 5633;
      NextGenJDocNo@1210029 : Code[20];
      NextFAJDocNo@1210030 : Code[20];
      GenJnlBatch2@1210033 : Record 232;
      FAJnlBatch2@1210034 : Record 5620;
      GenJnlLine2@1210035 : Record 81;
      FAJnlLine2@1210036 : Record 5621;
      BatchName1@1210037 : Code[10];
      NewDimValueCode@1000000000 : Code[20];
      OldDimValueCode@1000000001 : Code[20];
      DefDim@1101495000 : Record 352;
      DeprBook@1101495001 : Record 5611;
      DimCode@1101495002 : Code[20];
      DimValueCode@1101495003 : Code[20];
      IsGenJnl@1101495004 : Boolean;
      BufferFALE1@1101495005 : Record 50119;
      ReclassPercent@1101495006 : Decimal;
    BEGIN
      {
      FAReclassTemplate.SETRANGE("Form ID", FORM::"FA Reclass. Journal");
      IF NOT FAReclassTemplate.FIND('-') THEN BEGIN
        Window.CLOSE;
        ERROR(Text00018);
      END;
      FAReclassBatch.SETRANGE("Journal Template Name", FAReclassTemplate.Name);
      IF NOT FAReclassBatch.FIND('-') THEN BEGIN
        Window.CLOSE;
        ERROR(Text00018);
      END;

      GenJnlLine2.SETRANGE("Journal Template Name",ConsSetup."FA Import Journal Template");
      GenJnlLine2.SETRANGE("Journal Batch Name",ConsolidationSource."Reclass. Gen. Batch Name");
      IF GenJnlLine2.FINDLAST THEN
        NextGenJDocNo := INCSTR(GenJnlLine2."Document No.")
      ELSE BEGIN
        GenJnlBatch2.GET(ConsSetup."FA Import Journal Template",ConsolidationSource."Reclass. Gen. Batch Name");
        GenJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextGenJDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch2."No. Series",BufferFALE."FA Posting Date",FALSE);
      END;

      FAJnlLine2.SETRANGE("Journal Template Name",ConsSetup."FA Import FA Jnl Template");
      FAJnlLine2.SETRANGE("Journal Batch Name",ConsolidationSource."Reclass. FA Batch Name");
      IF FAJnlLine2.FINDLAST THEN
        NextFAJDocNo := INCSTR(FAJnlLine2."Document No.")
      ELSE BEGIN
        FAJnlBatch2.GET(ConsSetup."FA Import FA Jnl Template",ConsolidationSource."Reclass. FA Batch Name");
        FAJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextFAJDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch2."No. Series",BufferFALE."FA Posting Date",FALSE);
      END;

      FAReclassJnl1.SETRANGE("Journal Template Name", FAReclassJnl."Journal Template Name");
      FAReclassJnl1.SETRANGE("Journal Batch Name", FAReclassJnl."Journal Batch Name");
      IF FAReclassJnl1.FIND('+') THEN
        LineNo := FAReclassJnl1."Line No." + 10000
      ELSE
        LineNo := 10000;

      FAReclassJnl."Journal Template Name" := FAReclassTemplate.Name;
      FAReclassJnl."Journal Batch Name" :=  FAReclassBatch.Name;
      FAReclassJnl."Line No." := LineNo;
      FAReclassJnl.VALIDATE("FA Posting Date", BufferFALE."FA Posting Date");
      FAReclassJnl.VALIDATE("Posting Date", BufferFALE."FA Posting Date");
      FAReclassJnl.VALIDATE("FA No.", FANo2);
      FAReclassJnl.VALIDATE("New FA No.", FANo1);
      FAReclassJnl.VALIDATE("Depreciation Book Code", MappingFALE."Acquisit. Receiver Depr. Book");
      FAReclassJnl.VALIDATE("New Depreciation Book Code", MappingFALE."Receiver Depreciation Book");
      IF LedgDimensionTmp.GET(BufferFALE."External System ID",
                              BufferFALE."Id Legal Entity",5601,
                              BufferFALE."Entry No.",
                              BufferFALE."FA Def. Dim. Code") THEN
        NewDimValueCode := LedgDimensionTmp."Dimension Value Code";
      IF DefDim.GET(5600,FANo2,BufferFALE."FA Def. Dim. Code") THEN
        OldDimValueCode := DefDim."Dimension Value Code";

      IF NewDimValueCode<>OldDimValueCode THEN BEGIN
        FAReclassJnl."FA Dimension Code" := BufferFALE."FA Def. Dim. Code";
        FAReclassJnl."FA Dimension Value Code" :=OldDimValueCode;
        FAReclassJnl."New FA Dimension Value Code" := NewDimValueCode;
      END;

      FAReclassJnl."Source FA Entry No." := BufferFALE."Entry No.";

      FAReclassJnl."Cons. Source Code" := ConsolidationSource.Code;

      ReclassPercent := 100;
      IF BufferFALE."FA Part. Reclassification" THEN BEGIN
        BufferFALE1.RESET;
        BufferFALE1.SETRANGE("External System ID",BufferFALE."External System ID");
        BufferFALE1.SETRANGE("Id Legal Entity",BufferFALE."Id Legal Entity");
        BufferFALE1.SETFILTER("Entry No.",'..%1',BufferFALE."Entry No.");
        BufferFALE1.SETRANGE("FA No.",BufferFALE."FA No.");
        BufferFALE1.SETRANGE("FA Posting Category",BufferFALE1."FA Posting Category"::" ");
        BufferFALE1.SETFILTER("FA Posting Date",'..%1',BufferFALE."FA Posting Date");
        BufferFALE1.CALCSUMS(Amount);
        IF (BufferFALE1.Amount=0) THEN
          ReclassPercent := 100
        ELSE
          ReclassPercent :=ABS(BufferFALE.Amount/BufferFALE1.Amount*100);
      END;


      FAReclassJnl.VALIDATE("Reclassify Acq. Cost %", ReclassPercent);
      FAReclassJnl.VALIDATE("Reclassify Acquisition Cost", TRUE);
      FAReclassJnl.VALIDATE("Reclassify Depreciation", TRUE);

      IsGenJnl :=FALSE;
      IF DeprBook.GET(MappingFALE."Receiver Depreciation Book") AND DeprBook."G/L Integration - Acq. Cost" THEN
        IsGenJnl :=TRUE;

      IF IsGenJnl THEN
        BatchName1 := ConsolidationSource."Reclass. Gen. Batch Name"
      ELSE
        BatchName1 := ConsolidationSource."Reclass. FA Batch Name";

      //Учитываем заполненный журнал реклассификации -> создаются строки в фин. журнале.
      FAReclassCheckLine.RUN(FAReclassJnl);
      FAReclassTransferLine.FAReclassLine3(FAReclassJnl,ReclDone,NextFAJDocNo,NextGenJDocNo,BatchName1);

      IF IsGenJnl THEN BEGIN
        GenJnlLine.RESET;
        GenJnlLine.SETCURRENTKEY("Source FA Entry No.","Cons. Source Code");
        GenJnlLine.SETRANGE("Source FA Entry No.", BufferFALE."Entry No.");
        GenJnlLine.SETRANGE(GenJnlLine."Cons. Source Code", ConsolidationSource.Code);
        IF GenJnlLine.FIND('-') THEN
          REPEAT
            IF GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Depreciation THEN
              GenJnlLine.VALIDATE(Correction,TRUE);
            ExportedNum1 += 1;
            LedgDimensionTmp.SETRANGE("External System ID",ConsolidationSource."External System");
            LedgDimensionTmp.SETRANGE("Id Legal Entity",ConsolidationSource."Business Unit Code");
            LedgDimensionTmp.SETRANGE("Table ID",5601);
            LedgDimensionTmp.SETRANGE("Entry No.", BufferFALE."Entry No.");
            IF LedgDimensionTmp.FINDSET THEN
              REPEAT
                DimCode := LedgDimensionTmp."Dimension Code";
                DimValueCode :=LedgDimensionTmp."Dimension Value Code";

                IF DimCode= BufferFALE."FA Def. Dim. Code" THEN
                  IF (NOT BufferFALE.Correction AND
                    ((GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::"Acquisition Cost") AND (GenJnlLine.Amount<0))) OR
                    (BufferFALE.Correction AND
                    ((GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::"Acquisition Cost") AND (GenJnlLine.Amount>0))) OR
                    (NOT BufferFALE.Correction AND
                    ((GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Depreciation) AND (GenJnlLine.Amount>0))) OR
                    (BufferFALE.Correction AND
                    ((GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Depreciation) AND (GenJnlLine.Amount<0)))

                  THEN DimValueCode :=OldDimValueCode;

                NAVInsertDimension(DimCode, DimValueCode,GenJnlLine);
              UNTIL LedgDimensionTmp.NEXT = 0;

            IF GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Depreciation THEN
              GenJnlLine.VALIDATE(Correction,FALSE);
          UNTIL GenJnlLine.NEXT = 0;
      END ELSE BEGIN
        FAJnlLine.RESET;
        FAJnlLine.SETCURRENTKEY("Source FA Entry No.","Cons. Source Code");
        FAJnlLine.SETRANGE("Source FA Entry No.", BufferFALE."Entry No.");
        FAJnlLine.SETRANGE("Cons. Source Code", ConsolidationSource.Code);
        IF FAJnlLine.FIND('-') THEN
          REPEAT
            IF FAJnlLine."FA Posting Type" = FAJnlLine."FA Posting Type"::Depreciation THEN
              FAJnlLine.VALIDATE(Correction,TRUE);
            ExportedNum += 1;
            LedgDimensionTmp.SETRANGE("External System ID",ConsolidationSource."External System");
            LedgDimensionTmp.SETRANGE("Id Legal Entity",ConsolidationSource."Business Unit Code");
            LedgDimensionTmp.SETRANGE("Table ID",5601);
            LedgDimensionTmp.SETRANGE("Entry No.", BufferFALE."Entry No.");
            IF LedgDimensionTmp.FINDSET THEN
              REPEAT
                DimCode := LedgDimensionTmp."Dimension Code";
                DimValueCode :=LedgDimensionTmp."Dimension Value Code";
                NAVInsertFADimension(DimCode, DimValueCode,FAJnlLine);
              UNTIL LedgDimensionTmp.NEXT = 0;
            IF FAJnlLine."FA Posting Type" = FAJnlLine."FA Posting Type"::Depreciation THEN
              FAJnlLine.VALIDATE(Correction,FALSE);
          UNTIL FAJnlLine.NEXT = 0;
      END;
      }
    END;

    PROCEDURE NAVCheckReklass@1101495002(FANo1@1210004 : Code[20];BufferFALE@1210002 : Record 50119;VAR IsError@1101495001 : Boolean);
    VAR
      NewDimValueCode@1000000000 : Code[20];
      OldDimValueCode@1000000001 : Code[20];
      DefDim@1101495000 : Record 352;
      BufferLEDimension@1101495002 : Record 50094;
    BEGIN
      IF LedgDimensionTmp.GET(BufferFALE."External System ID",
                              BufferFALE."Id Legal Entity",5601,
                              BufferFALE."Entry No.",
                              BufferFALE."FA Def. Dim. Code") THEN
        NewDimValueCode := LedgDimensionTmp."Dimension Value Code";
      IF DefDim.GET(5600,FANo1,BufferFALE."FA Def. Dim. Code") THEN
        OldDimValueCode := DefDim."Dimension Value Code";
      IF (((NewDimValueCode=OldDimValueCode) AND NOT (BufferFALE."FA No."='')) OR
        ((NewDimValueCode<>OldDimValueCode) AND (BufferFALE."FA No."=''))) AND
        (BufferFALE."FA Reclassification" AND (BufferFALE."FA Reclassification No."= FANo1))
      THEN BEGIN
        IsError := TRUE;
        NAVCreateErrorLogEntry1(BufferFALE,STRSUBSTNO(Text00102, FANo1),'EFA41');
      END;
    END;

    PROCEDURE NAVFALEReverse@1101495003(BufferFALE@1101495000 : Record 50119);
    VAR
      FALE1@1101495002 : Record 5601;
      CancelFALedgerEntries@1101495001 : Codeunit 5624;
    BEGIN
      CLEAR(CancelFALedgerEntries);
      BufferFALE."Cons. Source Code" := ConsolidationSource.Code;
      FALE1.RESET;
      FALE1.SETCURRENTKEY("Source FA Entry No.");
      FALE1.SETRANGE("Source FA Entry No.",BufferFALE."Error Entry No.");
      IF FALE1.FINDFIRST THEN
        IF (BufferFALE."FA Export Type"=BufferFALE."FA Export Type"::Depreciation)
         OR (BufferFALE."FA Export Type"=BufferFALE."FA Export Type"::Release)
        THEN
          CancelFALedgerEntries.TransferLineFromBuffer1(FALE1,TRUE,BufferFALE)
        ELSE
          CancelFALedgerEntries.TransferLineFromBuffer1(FALE1,FALSE,BufferFALE);
    END;

    PROCEDURE NAVCheckBufferGLEntry@1000000002(BufferFALE@1000000000 : Record 50119;VAR IsError@1000000001 : Boolean);
    BEGIN
      IF NOT GLEntrySource.GET(ConsolidationSource."External System",
                               ConsolidationSource."Business Unit Code", BufferFALE."G/L Entry No.") THEN BEGIN
        IsError := TRUE;
        NAVCreateErrorLogEntry1(BufferFALE,STRSUBSTNO(Text00103,
         BufferFALE.FIELDCAPTION("G/L Entry No."),
         BufferFALE."G/L Entry No.",
         GLEntrySource.TABLECAPTION,
         BufferFALE.TABLECAPTION,
         BufferFALE.FIELDCAPTION("Entry No."),
         BufferFALE."Entry No."),'EFA40');
      END;
    END;

    PROCEDURE NAVCheckBufferReversalEntry@1000000004(BufferFALE@1000000001 : Record 50119;VAR IsError@1000000000 : Boolean);
    VAR
      BufferFALE_NonRev@1000000002 : Record 50119;
      BufferFALE_Rev@1000000003 : Record 50119;
    BEGIN
      IF BufferFALE."Error Entry No."<>0 THEN BEGIN
        BufferFALE_NonRev.RESET;
        BufferFALE_NonRev.SETRANGE("External System ID",BufferFALE."External System ID");
        BufferFALE_NonRev.SETRANGE("Id Legal Entity",BufferFALE."Id Legal Entity");
        BufferFALE_NonRev.SETRANGE("Entry No.",BufferFALE."Error Entry No.");
        IF NOT BufferFALE_NonRev.FINDFIRST THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(BufferFALE,STRSUBSTNO(Text00104,
           BufferFALE.FIELDCAPTION("Error Entry No."),
           BufferFALE."Error Entry No.",
           BufferFALE.TABLECAPTION,
           BufferFALE.FIELDCAPTION("Entry No."),
           BufferFALE."Entry No."),'EFA39');
        END ELSE
          IF NOT BufferFALE_NonRev.Processed THEN BEGIN
            BufferFALE_NonRev.Processed := TRUE;
            BufferFALE_NonRev.Exported := FALSE;
            BufferFALE_NonRev.MODIFY;
            IF BufferFALE_Rev.GET(BufferFALE."External System ID",BufferFALE."Id Legal Entity",BufferFALE."Entry No.") THEN BEGIN
              BufferFALE_Rev.Processed := TRUE;
              BufferFALE_Rev.Exported := FALSE;
              BufferFALE_Rev.MODIFY;
            END;
          END;
      END ELSE BEGIN
        BufferFALE_Rev.RESET;
        BufferFALE_Rev.SETRANGE("External System ID",BufferFALE."External System ID");
        BufferFALE_Rev.SETRANGE("Id Legal Entity",BufferFALE."Id Legal Entity");
        BufferFALE_Rev.SETRANGE("Error Entry No.",BufferFALE."Entry No.");
        IF NOT BufferFALE_Rev.FINDFIRST THEN BEGIN
          IsError := TRUE;
          NAVCreateErrorLogEntry1(BufferFALE,STRSUBSTNO(Text00104,
           BufferFALE.FIELDCAPTION("Error Entry No."),
           BufferFALE."Entry No.",
           BufferFALE.TABLECAPTION,
           BufferFALE.FIELDCAPTION("Entry No."),
           BufferFALE."Entry No."),'EFA38');
        END ELSE BEGIN
            BufferFALE_Rev.Processed := TRUE;
            BufferFALE_Rev.Exported := FALSE;
            BufferFALE_Rev.MODIFY;
            IF BufferFALE_NonRev.GET(BufferFALE."External System ID",BufferFALE."Id Legal Entity",BufferFALE."Entry No.") THEN BEGIN
              BufferFALE_NonRev.Processed := TRUE;
              BufferFALE_NonRev.Exported := FALSE;
              BufferFALE_NonRev.MODIFY;
            END;
          END;
      END;
    END;

    PROCEDURE NAVGetVendorNo@1101495006(BufferFALE@1101495000 : Record 50119) : Code[20];
    VAR
      NewVendorNo@1101495001 : Code[20];
      LEDimSource1@1101495002 : Record 50094;
    BEGIN
      MovingDataSetup.GET;
      NewVendorNo :='';
      IF LEDimSource1.GET(BufferFALE."External System ID", BufferFALE."Id Legal Entity",
                          5601,
                          BufferFALE."Entry No.",
                          MovingDataSetup."Customer Dimension Code") THEN
        NewVendorNo := LEDimSource1."Dimension Value Code";
      EXIT(NewVendorNo);
    END;

    PROCEDURE NAVGetExpOper_Type@1101495007(BufferFALE@1101495000 : Record 50119) : Code[20];
    VAR
      NewCode@1101495001 : Code[20];
      LEDimSource1@1101495002 : Record 50094;
    BEGIN
      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("Exp.Oper. Type Dimension Code");
      NewCode :='';
      IF LEDimSource1.GET(BufferFALE."External System ID", BufferFALE."Id Legal Entity",
                          5601,
                          BufferFALE."Entry No.",
                          MovingDataSetup."Exp.Oper. Type Dimension Code") THEN
        NewCode := LEDimSource1."Dimension Value Code";
      EXIT(NewCode);
    END;

    PROCEDURE NAVGetIncTax_Type@1101495009(BufferFALE@1101495000 : Record 50119) : Code[20];
    VAR
      NewCode@1101495001 : Code[20];
      LEDimSource1@1101495002 : Record 50094;
      Company@1101495003 : Record 2000000006;
      DefDim@1101495004 : Record 352;
    BEGIN
      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
      NewCode :='';
      IF LEDimSource1.GET(BufferFALE."External System ID", BufferFALE."Id Legal Entity",
                          5601,
                          BufferFALE."Entry No.",
                          MovingDataSetup."INC.TAX Dimension Code") THEN
        NewCode:= LEDimSource1."Dimension Value Code";

      //NC MIO-9.5 > DP
      IF NewCode ='' THEN BEGIN
        Company.GET(COMPANYNAME);
        IF DefDim.GET(DATABASE::"Legal Entity Type",Company."Legal Entity Type",MovingDataSetup."INC.TAX Dimension Code") THEN
          NewCode:=DefDim."Dimension Value Code";
      END;
      //NC MIO-9.5 < DP

      EXIT(NewCode);
    END;

    PROCEDURE NAVGetProjectCode@1101495008(BufferFALE@1101495000 : Record 50119) : Code[20];
    VAR
      NewProjectCode@1101495001 : Code[20];
      LEDimSource1@1101495002 : Record 50094;
    BEGIN
      //NC NCS-2127.2 > DP
      MovingDataSetup.GET;
      NewProjectCode :='';
      IF LEDimSource1.GET(BufferFALE."External System ID", BufferFALE."Id Legal Entity",
                          5601,
                          BufferFALE."Entry No.",
                          MovingDataSetup."Project Dimension Code") THEN
        NewProjectCode := LEDimSource1."Dimension Value Code";
      EXIT(NewProjectCode);
      //NC NCS-2127.2 < DP
    END;

    PROCEDURE NAVCheckFALE@1101495010(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20]) : Boolean;
    VAR
      FALedgEntry@1000000002 : Record 5601;
    BEGIN
      //NC NCS-2395 > DP
      FALedgEntry.RESET;
      FALedgEntry.SETRANGE("FA No.",FANo);
      FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
      FALedgEntry.SETFILTER("FA Posting Date",'%1..',FALE_Source."FA Posting Date");
      IF FALedgEntry.ISEMPTY THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
      //NC NCS-2395 < DP
    END;

    BEGIN
    {
      NC MIO-9 DP Перенос функциональности ОС Трнасформации (поная замена ранее существоввшего отчета)
      NC MIO-9.5 DP Изменена функция NAVCheckBufferDimension
      NC MIO-74 DP Изменена функция NAVInsertGenJnlLine
      NC MIO-74.1 DP Изменена функция NAVInsertGenJnlLine
      NC NCS-2127.2 DP Добавлена функция NAVGetProjectCode, изменены функции NAVStartFAConsolidation, NAVCreateFA, NAVUpdateFA
      NC NCS-2395 DP Added function NAVCheckFALE, changed function NAVUpdateFA
      NC NCS-2425 DP Changed functions NAVCreateFA, NAVUpdateFA
    }
    END.
  }
  RDLDATA
  {
  }
}

