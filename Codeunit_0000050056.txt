OBJECT Codeunit 50056 FiRe Management
{
  OBJECT-PROPERTIES
  {
    Date=24.02.16;
    Time=22:23:47;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GlobalReportingDate@1170000000 : Date;
      AccountNumberEvaluateErr@1170000002 : TextConst 'ENU=Cannot evaluate %1 value %2 to integer.';
      DataVerificationTxt@1170000003 : TextConst 'ENU=Data verification... @1@@@@@@@@@@';
      AtributeLengthErr@1170000004 : TextConst 'ENU=The length of %1 value %2 is greater then %3.';
      FixedAtributeLengthErr@1170000001 : TextConst 'ENU=The length of %1 value %2 must be %3.';

    PROCEDURE AddComma@1101495006(VAR FirstClause@1101495000 : Boolean) : Text[30];
    BEGIN
      IF NOT FirstClause THEN
        EXIT(',');

      FirstClause := FALSE;
      EXIT('');
    END;

    PROCEDURE AddDealTypeFilterScriptLines@1101495028(ScriptId@1101495000 : Code[20];DealTypeFilter@1101495001 : Code[250]);
    VAR
      DealType@1101495002 : Record 50038;
      i@1101495003 : Integer;
      RecordsInFilterQty@1101495004 : Integer;
    BEGIN
      AddSQLScriptLine(ScriptId,'AND');
      DealType.SETFILTER(Code,DealTypeFilter);
      RecordsInFilterQty := DealType.COUNT;
      AddSQLScriptLine(ScriptId,'(');
      IF DealType.FINDSET THEN
        REPEAT
          i += 1;
          IF i = 1 THEN
            AddSQLScriptLine(ScriptId,'Deal.[Type Deal] = ''' + DealType.Code + '''')
          ELSE
            AddSQLScriptLine(ScriptId,'OR Deal.[Type Deal] = ''' + DealType.Code + '''');
        UNTIL DealType.NEXT = 0;

      IF STRPOS(DealTypeFilter,'''') > 0 THEN BEGIN
        IF RecordsInFilterQty > 0 THEN
          AddSQLScriptLine(ScriptId,'OR ISNULL(Deal.[Type Deal],'''') = ''''')
        ELSE
          AddSQLScriptLine(ScriptId,'ISNULL(Deal.[Type Deal],'''') = ''''');
      END;

      AddSQLScriptLine(ScriptId,')');
    END;

    PROCEDURE AddError_TermCheck@1101495030(FiReTerm@1101495003 : Record 50183;ObjectNo@1101495000 : Code[20]);
    VAR
      ErrorJournal@1101495001 : Record 50023;
      RecRef@1101495002 : RecordRef;
    BEGIN
      FiReTerm.TESTFIELD("Table Id");
      RecRef.OPEN(FiReTerm."Table Id");
      FindRecord(ObjectNo,RecRef);
      ErrorJournal.AddError1(
        COMPANYNAME,
        ErrorJournal."Error Group"::System,
        ErrorJournal.Type::Error,
        '',0,
        'FIRE',
        FiReTerm.Name + ' is not defined for ' + FiReTerm."Test Mode SQL Clause",
        COMPANYNAME,RecRef,0);
    END;

    PROCEDURE AddError_BufferVerification@1170000003(ErrorMessage@1170000001 : Text[250];VAR FiReExportBuffer@1170000000 : Record 50181);
    VAR
      ErrorJournal@1101495001 : Record 50023;
      RecRef@1101495002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(FiReExportBuffer);

      ErrorJournal.AddError1(
        COMPANYNAME,
        ErrorJournal."Error Group"::System,
        ErrorJournal.Type::Error,
        '',0,
        'FIRE',
        ErrorMessage,
        COMPANYNAME,RecRef,0);
    END;

    PROCEDURE AddEmptyConstScriptLine@1170000004(ScriptId@1170000001 : Code[20];VAR FirstClause@1170000002 : Boolean;FiReAttribute@1170000000 : Record 50182);
    VAR
      NullValue@1170000003 : Text[30];
    BEGIN
      IF FiReAttribute."Default Value" <> '' THEN
        NullValue := FiReAttribute."Default Value"
      ELSE
        CASE FiReAttribute."Data Type" OF
          FiReAttribute."Data Type"::Decimal,
          FiReAttribute."Data Type"::Integer:
            NullValue := '0';
          FiReAttribute."Data Type"::Date:
            NullValue := '''01.01.1753''';
          ELSE
            NullValue := '''''';
        END;
      AddSQLScriptLine(ScriptId,AddComma(FirstClause) + FiReAttribute."SQL Result Column Name" + '= ' + NullValue);
    END;

    PROCEDURE AddGLFiReTypeFilterScriptLines@1101495005(ScriptId@1101495000 : Code[20];GLFiReAccountTypeFilter@1101495001 : Code[250]);
    VAR
      GLFireAccountType@1101495002 : Record 50188;
      i@1101495003 : Integer;
      RecordsInFilterQty@1101495004 : Integer;
      EmptyFilterExists@1170000000 : Boolean;
    BEGIN
      WITH GLFireAccountType DO BEGIN
        SETFILTER(Code,GLFiReAccountTypeFilter);
        RecordsInFilterQty := COUNT;
        EmptyFilterExists := STRPOS(GLFiReAccountTypeFilter,'''') > 0;
        IF (RecordsInFilterQty <> 0) OR EmptyFilterExists THEN BEGIN
          AddSQLScriptLine(ScriptId,'AND');
          AddSQLScriptLine(ScriptId,'(');
          IF FINDSET THEN
            REPEAT
              i += 1;
              IF i = 1 THEN
                AddSQLScriptLine(ScriptId,'GLAccount.[FiRe Type Code] = ''' + Code + '''')
              ELSE
                AddSQLScriptLine(ScriptId,'OR GLAccount.[FiRe Type Code] = ''' + Code + '''');
            UNTIL NEXT = 0;

          IF EmptyFilterExists THEN BEGIN
            IF RecordsInFilterQty > 0 THEN
              AddSQLScriptLine(ScriptId,'OR ISNULL(GLAccount.[FiRe Type Code],'''') = ''''')
            ELSE
              AddSQLScriptLine(ScriptId,'ISNULL(GLAccount.[FiRe Type Code],'''') = ''''');
          END;

          AddSQLScriptLine(ScriptId,')');
        END;
      END;
    END;

    PROCEDURE AddSQLScriptLine@1101495001(SchemeCode@1101495000 : Code[20];ScriptLine@1101495001 : Text[255]);
    VAR
      SQLScriptLine@1101495002 : Record 50187;
    BEGIN
      // skip comment line
      IF STRPOS(ScriptLine,'--') > 0 THEN
        EXIT;
      WITH SQLScriptLine DO BEGIN
        SETRANGE(Code,SchemeCode);
        IF FINDLAST THEN;
        INIT;
        Code := SchemeCode;
        "Line No." := "Line No." + 1;
        "Script Line Text" := ProcessSQLVariables(ScriptLine);
        INSERT;
      END;
    END;

    PROCEDURE AddSQLScriptLine_FROM@1101495025(SchemeCode@1101495003 : Code[20];ScriptLine@1101495001 : Text[250]);
    VAR
      SQLScriptLine@1101495002 : Record 50187;
    BEGIN
      WITH SQLScriptLine DO BEGIN
        // исключить дублирование частей JOIN ...
        SETRANGE(Code,SchemeCode);
        SETRANGE("Script Line Text",ScriptLine);
        IF ISEMPTY THEN
          AddSQLScriptLine(SchemeCode,ScriptLine);
      END;
    END;

    PROCEDURE AddTermToBuffer@1101495009(VAR FiReTermBuffer@1101495000 : Record 50183;TermCode@1101495001 : Code[20]);
    VAR
      FiReTerm@1101495002 : Record 50183;
    BEGIN
      IF TermCode = '' THEN
        EXIT;

      FiReTerm.GET(TermCode);

      IF FiReTermBuffer.GET(TermCode) THEN
        EXIT;

      FiReTermBuffer := FiReTerm;
      FiReTermBuffer.INSERT;
      EXIT;
    END;

    PROCEDURE AddTemplate_BEGIN_SELECT@1101495036(SQLScriptCode@1101495000 : Code[20];ScriptId@1101495001 : Code[20];SelectLineNo@1101495002 : Integer);
    VAR
      TemplateScriptLine@1101495003 : Record 50187;
    BEGIN
      // прочитать и вставить строки шаблона до <SELECT CLAUSE>
      TemplateScriptLine.SETRANGE(Code,SQLScriptCode);
      TemplateScriptLine.SETRANGE("Line No.",0,SelectLineNo - 1);
      IF TemplateScriptLine.FINDSET THEN
        REPEAT
          AddSQLScriptLine(ScriptId,TemplateScriptLine."Script Line Text");
        UNTIL TemplateScriptLine.NEXT = 0;
    END;

    PROCEDURE AddTemplate_SELECT_WHERE@1101495042(SQLScriptCode@1101495000 : Code[20];ScriptId@1101495001 : Code[20];SelectLineNo@1101495002 : Integer;WhereLineNo@1101495004 : Integer);
    VAR
      TemplateScriptLine@1101495003 : Record 50187;
    BEGIN
      // прочитать и вставить строки шаблона от <SELECT CLAUSE> до <WHERE CLAUSE>
      TemplateScriptLine.SETRANGE(Code,SQLScriptCode);
      TemplateScriptLine.SETRANGE("Line No.",SelectLineNo + 1,WhereLineNo - 1);
      IF TemplateScriptLine.FINDSET THEN
        REPEAT
          AddSQLScriptLine(ScriptId,TemplateScriptLine."Script Line Text");
        UNTIL TemplateScriptLine.NEXT = 0;
    END;

    PROCEDURE AddTemplate_WHERE_GROUPBY@1101495040(SQLScriptCode@1101495000 : Code[20];ScriptId@1101495001 : Code[20];WhereLineNo@1101495002 : Integer;GroupByLineNo@1101495004 : Integer);
    VAR
      TemplateScriptLine@1101495003 : Record 50187;
    BEGIN
      // прочитать и вставить строки шаблона от <WHERE CLAUSE> до <GROUP BY CLAUSE>
      TemplateScriptLine.SETRANGE(Code,SQLScriptCode);
      TemplateScriptLine.SETRANGE("Line No.",WhereLineNo + 1,GroupByLineNo - 1);
      IF TemplateScriptLine.FINDSET THEN
        REPEAT
          AddSQLScriptLine(ScriptId,TemplateScriptLine."Script Line Text");
        UNTIL TemplateScriptLine.NEXT = 0;
    END;

    PROCEDURE AddTemplate_GROUPBY_END@1101495041(SQLScriptCode@1101495000 : Code[20];ScriptId@1101495001 : Code[20];GroupByLineNo@1101495002 : Integer);
    VAR
      TemplateScriptLine@1101495003 : Record 50187;
    BEGIN
      // прочитать и вставить строки шаблона после <GROUP BY CLAUSE>
      TemplateScriptLine.SETRANGE(Code,SQLScriptCode);
      TemplateScriptLine.SETFILTER("Line No.",'%1..',GroupByLineNo + 1);
      IF TemplateScriptLine.FINDSET THEN
        REPEAT
          AddSQLScriptLine(ScriptId,TemplateScriptLine."Script Line Text");
        UNTIL TemplateScriptLine.NEXT = 0;
    END;

    PROCEDURE ClearFiReExportBuffer@1101495033();
    VAR
      FiReExportBuffer@1101495000 : Record 50181;
    BEGIN
      FiReExportBuffer.DELETEALL;
    END;

    PROCEDURE ClearSQLScript@1101495003(SchemeCode@1101495000 : Code[20]);
    VAR
      SQLScriptLine@1101495001 : Record 50187;
    BEGIN
      SQLScriptLine.SETRANGE(Code,SchemeCode);
      SQLScriptLine.DELETEALL;
    END;

    PROCEDURE ConvrertAliasName@1101495011(Name@1101495000 : Text[100]) : Text[100];
    BEGIN
      EXIT(CONVERTSTR(Name,' /.&()[]','________'));
    END;

    PROCEDURE ConvrertName@1101495022(Name@1101495000 : Text[100]) : Text[100];
    BEGIN
      EXIT(CONVERTSTR(Name,'/.&','___'));
    END;

    PROCEDURE CreateData@1101495002(FiReExportScheme@1101495000 : Record 50184;ReportingDate@1170000000 : Date);
    VAR
      RecSet@1101495003 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      AdoFunc@1101495002 : Codeunit 50024;
      ScriptId@1101495017 : Code[20];
    BEGIN
      SetGlobalReportingDate(ReportingDate);
      FiReExportScheme.CheckScheme;
      ScriptId := GenerateSQLScript(FiReExportScheme);
      COMMIT;
      AdoFunc.GetFiReDataset(COMPANYNAME,ReportingDate,ScriptId,RecSet);

      ClearSQLScript(ScriptId);
    END;

    PROCEDURE FindRecord@1101495027(ObjectNo@1101495001 : Code[20];VAR RecRef@1101495002 : RecordRef) : Boolean;
    VAR
      Key@1101495004 : Record 2000000063;
      Field@1101495005 : Record 2000000041;
      FieldRef@1101495003 : FieldRef;
    BEGIN
      Key.GET(RecRef.NUMBER,1);
      Field.SETRANGE(TableNo,RecRef.NUMBER);
      Field.SETFILTER(FieldName,COPYSTR(Key.Key,1,30));
      IF Field.FINDFIRST THEN // No Match if Dual PK
        FieldRef := RecRef.FIELD(Field."No.")
      ELSE
        EXIT(FALSE);

      FieldRef.SETFILTER(ObjectNo);
      IF NOT RecRef.FINDFIRST THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GenerateSQLScript@1101495000(FiReExportScheme@1101495002 : Record 50184) : Code[20];
    VAR
      ScriptId@1101495001 : Code[20];
      SelectLineNo@1101495007 : Integer;
      WhereLineNo@1101495008 : Integer;
      GroupByLineNo@1101495009 : Integer;
    BEGIN
      ScriptId := COPYSTR(FORMAT(CREATEGUID),1,20);

      FiReExportScheme.TESTFIELD("SQL Script Code");
      GetSQLTemplateMarkup(FiReExportScheme."SQL Script Code",SelectLineNo,WhereLineNo,GroupByLineNo);

      GenerateSQLScript_INSERT(FiReExportScheme,ScriptId);
      GenerateSQLScript_SELECT(FiReExportScheme,ScriptId,SelectLineNo,WhereLineNo);
      GenerateSQLScript_WHERE(FiReExportScheme,ScriptId);
      GenerateSQLScript_GROUPBY(FiReExportScheme,ScriptId,WhereLineNo,GroupByLineNo);

      EXIT(ScriptId);
    END;

    PROCEDURE GenerateSQLScript_INSERT@1101495023(FiReExportScheme@1101495002 : Record 50184;ScriptId@1101495003 : Code[20]) : Code[20];
    VAR
      Field@1101495000 : Record 2000000041;
      FirstClause@1101495004 : Boolean;
    BEGIN
      AddSQLScriptLine(ScriptId,'INSERT INTO [dbo].[' + COMPANYNAME + '$FiRe Export Buffer]');
      AddSQLScriptLine(ScriptId,'(');
      FirstClause := TRUE;
      WITH Field DO BEGIN
        SETRANGE(TableNo,DATABASE::"FiRe Export Buffer");
        IF FINDSET THEN
          REPEAT
            AddSQLScriptLine(ScriptId,AddComma(FirstClause) + '[' + ConvrertName(FieldName) + ']')
          UNTIL NEXT = 0;
      END;
      AddSQLScriptLine(ScriptId,')');
    END;

    PROCEDURE GenerateSQLScript_SELECT@1101495004(FiReExportScheme@1101495002 : Record 50184;ScriptId@1101495003 : Code[20];SelectLineNo@1101495004 : Integer;WhereLineNo@1101495013 : Integer) : Code[20];
    VAR
      FiReExportSchemeAttribute@1101495010 : Record 50185;
      FiReTerm@1101495011 : Record 50183;
      FiReAttribute@1101495012 : Record 50182;
      FirstClause@1101495001 : Boolean;
      SchemeAttributeType@1101495000 : 'Constant,Term,Function';
    BEGIN
      AddTemplate_BEGIN_SELECT(FiReExportScheme."SQL Script Code",ScriptId,SelectLineNo);

      // сформировать значение поля буфера Entry No.
      AddSQLScriptLine(ScriptId,'EntryNo = ROW_NUMBER() over (ORDER BY (SELECT 1)) ');
      AddSQLScriptLine(ScriptId,' + (SELECT ISNULL(MAX([Entry No_]),0) FROM [dbo].[' + COMPANYNAME + '$FiRe Export Buffer]),');
      AddSQLScriptLine(ScriptId,'Scheme_Code=''' + FiReExportScheme.Code + ''', ');

      // добавить строки из настройки схемы
      FirstClause := TRUE;
      FiReExportSchemeAttribute.SETCURRENTKEY("Scheme Code","Sequence No.");
      FiReExportSchemeAttribute.SETRANGE("Scheme Code",FiReExportScheme.Code);
      IF FiReExportSchemeAttribute.FINDSET THEN
        REPEAT
          FiReAttribute.GET(FiReExportSchemeAttribute."Attribute Code");
          CASE FiReExportSchemeAttribute.GetSchemeAttributeType OF
            SchemeAttributeType::Constant:
              BEGIN
                IF FiReExportSchemeAttribute."Constant Value" = '' THEN
                  AddEmptyConstScriptLine(ScriptId,FirstClause,FiReAttribute)
                ELSE
                  AddSQLScriptLine(ScriptId,AddComma(FirstClause) + FiReAttribute."SQL Result Column Name" + '=''' +
                    FiReExportSchemeAttribute."Constant Value" + '''');
              END;
            SchemeAttributeType::Term:
              BEGIN
                FiReExportSchemeAttribute.TESTFIELD("Term Code");
                FiReTerm.GET(FiReExportSchemeAttribute."Term Code");
                FiReTerm.TESTFIELD("SQL SELECT Clause");
                AddSQLScriptLine(ScriptId,AddComma(FirstClause) + WrapISNULL(FiReTerm,FiReAttribute) + ' AS ' +
                  FiReAttribute."SQL Result Column Name");
              END;
            SchemeAttributeType::"Function":
              BEGIN
                FiReExportSchemeAttribute.TESTFIELD("Function");
                AddSQLScriptLine(ScriptId,AddComma(FirstClause) +
                  FiReAttribute."SQL Result Column Name" + '= ''' + FORMAT(GlobalReportingDate) + '''');
              END;
          END;
        UNTIL FiReExportSchemeAttribute.NEXT = 0;

      AddTemplate_SELECT_WHERE(FiReExportScheme."SQL Script Code",ScriptId,SelectLineNo,WhereLineNo);
    END;

    PROCEDURE GenerateSQLScript_WHERE@1101495014(FiReExportScheme@1101495002 : Record 50184;ScriptId@1101495003 : Code[20]) : Code[20];
    BEGIN
      // добавить WHERE строки из настройки фильтров схемы
      IF FiReExportScheme."Deal Type Filter" <> '' THEN
        AddDealTypeFilterScriptLines(ScriptId,FiReExportScheme."Deal Type Filter");

      IF FiReExportScheme."G/L FiRe Account Type Filter" <> '' THEN
        AddGLFiReTypeFilterScriptLines(ScriptId,FiReExportScheme."G/L FiRe Account Type Filter");
    END;

    PROCEDURE GenerateSQLScript_GROUPBY@1101495016(FiReExportScheme@1101495002 : Record 50184;ScriptId@1101495003 : Code[20];WhereLineNo@1101495007 : Integer;GroupByLineNo@1101495004 : Integer) : Code[20];
    VAR
      FiReExportSchemeAttribute@1101495010 : Record 50185;
      FiReTerm@1101495011 : Record 50183;
      FirstClause@1101495001 : Boolean;
    BEGIN
      AddTemplate_WHERE_GROUPBY(FiReExportScheme."SQL Script Code",ScriptId,WhereLineNo,GroupByLineNo);

      // добавить GROUP BY строки из настройки схемы
      FirstClause := TRUE;
      FiReExportSchemeAttribute.SETCURRENTKEY("Scheme Code","Sequence No.");
      FiReExportSchemeAttribute.SETRANGE("Scheme Code",FiReExportScheme.Code);
      IF FiReExportSchemeAttribute.FINDSET THEN
        REPEAT
          IF FiReExportSchemeAttribute."Term Code" <> '' THEN BEGIN
            FiReTerm.GET(FiReExportSchemeAttribute."Term Code");
            IF FiReTerm."Attribute Type" = FiReTerm."Attribute Type"::Dimension THEN
              AddSQLScriptLine(ScriptId,AddComma(FirstClause) + FiReTerm."SQL SELECT Clause");
          END;
        UNTIL FiReExportSchemeAttribute.NEXT = 0;

      AddTemplate_GROUPBY_END(FiReExportScheme."SQL Script Code",ScriptId,GroupByLineNo);
    END;

    PROCEDURE GenerateSQLScript_TestMode@1101495021(FiReExportScheme@1101495002 : Record 50184;FiReTerm@1101495003 : Record 50183) : Code[20];
    VAR
      ScriptId@1101495001 : Code[20];
      SelectLineNo@1101495007 : Integer;
      WhereLineNo@1101495008 : Integer;
      GroupByLineNo@1101495009 : Integer;
    BEGIN
      ScriptId := COPYSTR(FORMAT(CREATEGUID),1,20);
      FiReTerm.TESTFIELD("Table Id");
      FiReTerm.TESTFIELD("Test Mode SQL Clause");
      FiReExportScheme.TESTFIELD("SQL Script Code");

      GetSQLTemplateMarkup(FiReExportScheme."SQL Script Code",SelectLineNo,WhereLineNo,GroupByLineNo);

      AddTemplate_BEGIN_SELECT(FiReExportScheme."SQL Script Code",ScriptId,SelectLineNo);

      // добавить конструкцию SELECT тестовой части термина
      AddSQLScriptLine(ScriptId,FiReTerm."Test Mode SQL Clause" + ' AS ' + FiReTerm.GetTestModeColumnName);

      AddTemplate_SELECT_WHERE(FiReExportScheme."SQL Script Code",ScriptId,SelectLineNo,WhereLineNo);

      GenerateSQLScript_WHERE(FiReExportScheme,ScriptId);

      // добавить конструкцию WHERE тестовой части термина
      AddSQLScriptLine(ScriptId,'AND (' +
        FiReTerm."SQL SELECT Clause" + '='''' OR ');
      AddSQLScriptLine(ScriptId,FiReTerm."SQL SELECT Clause" + ' IS NULL)');

      AddTemplate_WHERE_GROUPBY(FiReExportScheme."SQL Script Code",ScriptId,WhereLineNo,GroupByLineNo);

      // добавить конструкцию GROUP BY тестовой части термина
      AddSQLScriptLine(ScriptId,FiReTerm."Test Mode SQL Clause");

      AddTemplate_GROUPBY_END(FiReExportScheme."SQL Script Code",ScriptId,GroupByLineNo);

      EXIT(ScriptId);
    END;

    PROCEDURE GetClauseLineNo@1101495029(ScriptCode@1101495000 : Code[20];Clause@1101495001 : Text[30]) : Integer;
    VAR
      SQLScriptLine@1101495002 : Record 50187;
    BEGIN
      SQLScriptLine.SETRANGE(Code,ScriptCode);
      SQLScriptLine.SETFILTER("Script Line Text",'*' + Clause + '*');
      SQLScriptLine.FINDFIRST;
      EXIT(SQLScriptLine."Line No.");
    END;

    PROCEDURE GetDimFieldName@1101495020(DimCode@1101495000 : Code[20]) : Text[30];
    BEGIN
      EXIT('DIM_' + ConvrertName(DimCode));
    END;

    PROCEDURE GetDimTableName@1101495019(DimCode@1101495000 : Code[20]) : Text[30];
    BEGIN
      EXIT(ConvrertName(DimCode) + '_DIM');
    END;

    PROCEDURE GetFieldName@1101495026(TableId@1101495000 : Integer;FieldId@1101495001 : Integer) : Text[30];
    VAR
      Field@1101495002 : Record 2000000041;
    BEGIN
      Field.GET(TableId,FieldId);
      EXIT(ConvrertName(Field.FieldName));
    END;

    PROCEDURE GetGUIDCode@1101495017(StrLen@1101495000 : Integer) : Text[1024];
    BEGIN
      EXIT(COPYSTR(FORMAT(CREATEGUID),1,StrLen));
    END;

    PROCEDURE GetPrimaryKeyFieldName@1101495008(TableId@1101495000 : Integer) : Text[30];
    VAR
      Key@1101495001 : Record 2000000063;
    BEGIN
      Key.GET(TableId,1);

      EXIT(ConvrertName(Key.Key));
    END;

    PROCEDURE GetRecordSetTextValue@1101495013(VAR RecSet@1101495001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";TermCode@1101495000 : Code[20]) : Text[250];
    VAR
      AdoFunc@1101495002 : Codeunit 50024;
    BEGIN
      IF TermCode = '' THEN
        EXIT('');
      EXIT(AdoFunc.VarToText(RecSet.Fields.Item(GetTermSQLFieldName(TermCode)).Value));
    END;

    PROCEDURE GetSQLTemplateMarkup@1101495051(SQLScriptCode@1101495000 : Code[20];VAR SelectLineNo@1101495003 : Integer;VAR WhereLineNo@1101495002 : Integer;VAR GroupByLineNo@1101495001 : Integer);
    BEGIN
      SelectLineNo := GetClauseLineNo(SQLScriptCode,'SELECT CLAUSE');
      WhereLineNo := GetClauseLineNo(SQLScriptCode,'WHERE CLAUSE');
      GroupByLineNo := GetClauseLineNo(SQLScriptCode,'GROUP BY CLAUSE');
    END;

    PROCEDURE GetTableAliasName@1101495012(TableId@1101495000 : Integer) : Text[30];
    VAR
      Object@1101495001 : Record 2000000001;
    BEGIN
      Object.SETRANGE(Type,Object.Type::Table);
      Object.SETRANGE(ID,TableId);
      IF Object.FINDFIRST THEN
        EXIT(ConvrertAliasName(Object.Name));
    END;

    PROCEDURE GetTableName@1101495024(TableId@1101495000 : Integer) : Text[30];
    VAR
      Object@1101495001 : Record 2000000001;
    BEGIN
      Object.SETRANGE(Type,Object.Type::TableData);
      Object.SETRANGE("Company Name",'');
      Object.SETRANGE(ID,TableId);
      IF Object.FINDFIRST THEN
        // DataPerCompany = No
        EXIT(Object.Name);

      Object.SETRANGE("Company Name",COMPANYNAME);
      Object.FINDFIRST;
      // DataPerCompany = Yes
      EXIT(COMPANYNAME + '$' + Object.Name);
    END;

    PROCEDURE GetTermSQLFieldName@1101495010(TermCode@1101495000 : Code[20]) : Text[30];
    VAR
      FiReAttribute@1101495001 : Record 50182;
    BEGIN
      FiReAttribute.GET(TermCode);
      FiReAttribute.TESTFIELD("SQL Result Column Name");
      EXIT(ConvrertAliasName(FiReAttribute."SQL Result Column Name"));
    END;

    PROCEDURE InsertSchemeLines@1101495018(SchemeCode@1101495000 : Code[20]);
    VAR
      FiReExportSchemeAttribute@1101495001 : Record 50185;
      FiReAttribute@1101495002 : Record 50182;
    BEGIN
      FiReExportSchemeAttribute.SETRANGE("Scheme Code",SchemeCode);
      FiReExportSchemeAttribute.DELETEALL;

      IF FiReAttribute.FINDSET THEN
        REPEAT
          FiReExportSchemeAttribute."Scheme Code" := SchemeCode;
          FiReExportSchemeAttribute.VALIDATE("Attribute Code",FiReAttribute.Code);
          FiReExportSchemeAttribute.INSERT;
        UNTIL FiReAttribute.NEXT = 0;
    END;

    PROCEDURE FindSchemaLineByFieldNo@1101495032(FiReExportScheme@1101495000 : Record 50184;VAR FiReExportSchemeAttribute@1101495001 : Record 50185;FieldNo@1101495002 : Integer) : Boolean;
    VAR
      FiReAttribute@1101495003 : Record 50182;
    BEGIN
      FiReAttribute.SETRANGE("Export Buffer Field Id",FieldNo);
      IF NOT FiReAttribute.FINDFIRST THEN
        EXIT(FALSE);

      IF NOT FiReExportSchemeAttribute.GET(FiReExportScheme.Code,FiReAttribute.Code) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FormatVariant@1101495031(VariantValue@1101495000 : Variant) : Code[20];
    VAR
      CodeValue@1101495001 : Code[20];
    BEGIN
      CASE TRUE OF
        VariantValue.ISCODE,
        VariantValue.ISTEXT:
          BEGIN
            CodeValue := VariantValue;
            EXIT(CodeValue);
          END;
        VariantValue.ISINTEGER:
          EXIT(FORMAT(VariantValue));
      END;
    END;

    PROCEDURE LoadSQLScript@1101495015(ScriptCode@1101495000 : Code[20];FileName@1101495001 : Text[250]);
    VAR
      SQLScriptLine@1101495002 : Record 50187;
      File@1101495003 : File;
      TextLine@1101495004 : Text[250];
    BEGIN
      File.TEXTMODE(TRUE);
      File.WRITEMODE(FALSE);
      File.OPEN(FileName);
      WHILE File.POS <> File.LEN DO BEGIN
        File.READ(TextLine);
        IF TextLine <> '' THEN BEGIN
          SQLScriptLine.Code := ScriptCode;
          SQLScriptLine."Line No." += 10000;
          SQLScriptLine."Script Line Text" := TextLine;
          SQLScriptLine.INSERT;
        END;
      END;
      File.CLOSE;
    END;

    PROCEDURE ProcessSQLVariables@1101495034(ScriptLineText@1101495000 : Text[250]) : Text[250];
    VAR
      Result@1101495001 : Text[250];
    BEGIN
      Result :=
        ReplaceVariableByValue(
          ScriptLineText,
          '@ReportingDate','' + FORMAT(GlobalReportingDate,0,'<Year4><Month,2><Day,2>') + '');
      Result := ReplaceVariableByValue(Result,'@CompanyName',COMPANYNAME);

      EXIT(Result);
    END;

    PROCEDURE ReplaceVariableByValue@1101495037(ScriptLineText@1101495000 : Text[250];VariableName@1101495001 : Text[30];VariableValue@1101495002 : Text[30]) : Text[250];
    VAR
      i@1101495003 : Integer;
      VariableLenght@1101495004 : Integer;
      Result@1101495005 : Text[250];
    BEGIN
      i := STRPOS(ScriptLineText,VariableName);
      IF i = 0 THEN
        EXIT(ScriptLineText);

      VariableLenght := STRLEN(VariableName);

      Result :=
        COPYSTR(ScriptLineText,1,i - 1) +
        VariableValue +
        COPYSTR(ScriptLineText,i + VariableLenght);

      EXIT(ReplaceVariableByValue(Result,VariableName,VariableValue));
    END;

    PROCEDURE RunTestMode@1101495007(FiReExportScheme@1101495000 : Record 50184;ReportingDate@1170000000 : Date);
    VAR
      FiReExportSchemeAttribute@1101495015 : Record 50185;
      FiReTerm@1101495016 : Record 50183;
      RecSet@1101495003 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      AdoFunc@1101495002 : Codeunit 50024;
      RecordsQty@1101495005 : Integer;
      Counter@1101495004 : Integer;
      FieldRefValue@1101495018 : Variant;
      ScriptId@1101495017 : Code[20];
    BEGIN
      SetGlobalReportingDate(ReportingDate);
      FiReExportSchemeAttribute.SETCURRENTKEY("Scheme Code","Sequence No.");
      FiReExportSchemeAttribute.SETRANGE("Scheme Code",FiReExportScheme.Code);
      FiReExportSchemeAttribute.SETRANGE("Is Mandatory",TRUE);
      IF FiReExportSchemeAttribute.FINDSET THEN
        REPEAT
          FiReExportSchemeAttribute.TESTFIELD("Term Code");
          FiReTerm.GET(FiReExportSchemeAttribute."Term Code");
          ScriptId := GenerateSQLScript_TestMode(FiReExportScheme,FiReTerm);
          COMMIT;

          AdoFunc.GetFiReDataset(COMPANYNAME,ReportingDate,ScriptId,RecSet);
          RecordsQty := RecSet.RecordCount;
          IF RecordsQty > 0 THEN BEGIN
            RecSet.MoveFirst;
            WHILE NOT RecSet.EOF DO BEGIN
              Counter += 1;
              FieldRefValue := RecSet.Fields.Item(FiReTerm.GetTestModeColumnName).Value;
              AddError_TermCheck(FiReTerm,FormatVariant(FieldRefValue));
              RecSet.MoveNext;
            END;
            AdoFunc.CloseRecSet(RecSet);
          END;

          ClearSQLScript(ScriptId);
        UNTIL FiReExportSchemeAttribute.NEXT = 0;
    END;

    PROCEDURE SetGlobalReportingDate@1170000000(ReportingDate@1170000000 : Date);
    BEGIN
      GlobalReportingDate := ReportingDate;
    END;

    PROCEDURE VarToDate@1000000006(pVar@1210000 : Variant) : Date;
    VAR
      lResult@1210001 : Date;
    BEGIN
      IF NOT pVar.ISDATE THEN
        EXIT(0D);

      lResult := pVar;
      IF lResult = 01011753D THEN
        EXIT(0D);
      EXIT(lResult);
    END;

    PROCEDURE VarToText@1000000001(pVar@1210000 : Variant) : Text[1024];
    VAR
      lResult@1210001 : Text[1024];
    BEGIN
      IF pVar.ISTEXT OR pVar.ISCODE THEN BEGIN
        lResult := pVar;
        EXIT(lResult);
      END;

      EXIT('');
    END;

    PROCEDURE VerifyFiReExportBufferData@1170000001();
    VAR
      FiReExportBuffer@1170000000 : Record 50181;
      Window@1170000004 : Dialog;
      IntegerValue@1170000001 : Integer;
      TotalQty@1170000002 : Integer;
      Counter@1170000003 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(DataVerificationTxt);

      WITH FiReExportBuffer DO BEGIN
        TotalQty := COUNT;
        IF FINDSET THEN
          REPEAT
            Counter += 1;
            IF GUIALLOWED THEN
              Window.UPDATE(1,ROUND(Counter / TotalQty * 10000,1));

            VerifyAccountAttributeValue(
              "C001 Account number",6,FiReExportBuffer,FIELDNAME("C001 Account number"));

            VerifyAttributeValueLength(
              "C026 Central counterparties",2,FiReExportBuffer,FIELDNAME("C026 Central counterparties"));

            VerifyAttributeValueLength(
              "C510 Type of counterparty",4,FiReExportBuffer,FIELDNAME("C510 Type of counterparty"));

            VerifyAttributeValueLength(
              "C520 Business type",2,FiReExportBuffer,FIELDNAME("C520 Business type"));

            VerifyAttributeValueLength(
              "C522 IRB and EU",2,FiReExportBuffer,FIELDNAME("C522 IRB and EU"));

            VerifyAttributeValueLength(
              "C523 Subordination",1,FiReExportBuffer,FIELDNAME("C523 Subordination"));

            VerifyAttributeValueLength(
              "C524 Listed/not listed",1,FiReExportBuffer,FIELDNAME("C524 Listed/not listed"));

            VerifyAttributeValueLength(
              "C530 Type of coverage",2,FiReExportBuffer,FIELDNAME("C530 Type of coverage"));

            VerifyAttributeValueLength(
              "C532 Valuation method",1,FiReExportBuffer,FIELDNAME("C532 Valuation method"));

            VerifyAttributeValueLength(
              "C533 Related parties",1,FiReExportBuffer,FIELDNAME("C533 Related parties"));

            VerifyAttributeValueLength(
              "C534 Periodic reval. (cover)",2,FiReExportBuffer,FIELDNAME("C534 Periodic reval. (cover)"));

            VerifyAttributeValueLength(
              "C535 Degree of cover",2,FiReExportBuffer,FIELDNAME("C535 Degree of cover"));

            VerifyAttributeValueLength(
              "C536 Type of cover (mortgage)",2,FiReExportBuffer,FIELDNAME("C536 Type of cover (mortgage)"));

            VerifyAttributeValueLength(
              "C538 Rating",1,FiReExportBuffer,FIELDNAME("C538 Rating"));

            VerifyAccountAttributeValue(
              "C540 Account number",6,FiReExportBuffer,FIELDNAME("C540 Account number"));

            VerifyAttributeValueLength(
              "C541 Participation",1,FiReExportBuffer,FIELDNAME("C541 Participation"));

            VerifyAttributeValueLength(
              "C543 Type of underlying",2,FiReExportBuffer,FIELDNAME("C543 Type of underlying"));

            VerifyAttributeValueLength(
              "C545 Type of issuer",4,FiReExportBuffer,FIELDNAME("C545 Type of issuer"));

            VerifyAttributeValueLength(
              "C553 Netting contract",1,FiReExportBuffer,FIELDNAME("C553 Netting contract"));

            VerifyAttributeValueLength(
              "C555 Customer type",4,FiReExportBuffer,FIELDNAME("C555 Customer type"));

            VerifyAttributeValueLength(
              "C560 Liquidity flag",2,FiReExportBuffer,FIELDNAME("C560 Liquidity flag"));

            VerifyAttributeValueLength(
              "C572 Interest rate frequency",1,FiReExportBuffer,FIELDNAME("C572 Interest rate frequency"));

            VerifyAttributeValueLength(
              "C573 Interest rate type",1,FiReExportBuffer,FIELDNAME("C573 Interest rate type"));

            VerifyAttributeValueLength(
              "C576 Type of contract",1,FiReExportBuffer,FIELDNAME("C576 Type of contract"));

            VerifyAttributeValueLength(
              "C582 Size of counterparty",1,FiReExportBuffer,FIELDNAME("C582 Size of counterparty"));

            VerifyAttributeValueLength(
              "noga Industry sector NOGA 2008",6,FiReExportBuffer,FIELDNAME("noga Industry sector NOGA 2008"));

            VerifyAttributeValueLength(
              "User 4",6,FiReExportBuffer,FIELDNAME("User 4"));

            VerifyAttributeValueLength(
              "User 5",6,FiReExportBuffer,FIELDNAME("User 5"));
          UNTIL NEXT = 0;
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE VerifyAttributeValueLength@1170000002(AttributeValue@1170000000 : Integer;MaxLenght@1170000001 : Integer;VAR FiReExportBuffer@1170000002 : Record 50181;AttributeFieldName@1170000003 : Text[30]);
    BEGIN
      IF STRLEN(FORMAT(AttributeValue)) > MaxLenght THEN BEGIN
        AddError_BufferVerification(
          STRSUBSTNO(AtributeLengthErr,AttributeFieldName,AttributeValue,MaxLenght),
          FiReExportBuffer);
      END;
    END;

    PROCEDURE VerifyAccountAttributeValue@1170000031(AttributeValue@1170000000 : Text[30];MaxLenght@1170000001 : Integer;VAR FiReExportBuffer@1170000002 : Record 50181;AttributeFieldName@1170000003 : Text[30]);
    VAR
      IntegerValue@1170000004 : Integer;
    BEGIN
      IF NOT EVALUATE(IntegerValue,AttributeValue) THEN
        AddError_BufferVerification(
          STRSUBSTNO(
            AccountNumberEvaluateErr,
            AttributeFieldName,
            AttributeValue),
          FiReExportBuffer);

      VerifyAttributeValueLength(
        IntegerValue,MaxLenght,FiReExportBuffer,AttributeFieldName);
    END;

    PROCEDURE WrapISNULL@1101495050(FiReTerm@1101495000 : Record 50183;FiReAttribute@1170000000 : Record 50182) : Text[250];
    VAR
      NullValue@1101495001 : Text[30];
    BEGIN
      IF FiReAttribute."Default Value" <> '' THEN
        NullValue := FiReAttribute."Default Value"
      ELSE
        CASE FiReTerm."Data Type" OF
          FiReTerm."Data Type"::Decimal,
          FiReTerm."Data Type"::Integer:
            NullValue := '0';
          FiReTerm."Data Type"::Date:
            NullValue := '''01.01.1753''';
          ELSE
            NullValue := '''''';
        END;

      EXIT(STRSUBSTNO('ISNULL(%1,%2)',FiReTerm."SQL SELECT Clause",NullValue));
    END;

    BEGIN
    {
      NCS-1897 ORM Codeunit created
    }
    END.
  }
}

