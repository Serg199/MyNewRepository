OBJECT Codeunit 50002 FA Consolidation Mgt
{
  OBJECT-PROPERTIES
  {
    Date=09.08.17;
    Time=17:31:08;
    Modified=Yes;
    Version List=NOS-26;
  }
  PROPERTIES
  {
    Permissions=TableData 349=rimd,
                TableData 5601=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text00001@1210006 : TextConst 'ENU=Transformation setup wasn''t was found for FA Buffer Entry No.%1;RUS=Отсутствует строка настройки трансформации для ОС операции %1';
      Text00007@1210001 : TextConst 'ENU=Not found Lines selecting for posting by Consolidation Source %1;RUS=Нет строк, выбранных для учета по источнику консолидации %1';
      Text00008@1210000 : TextConst 'ENU=Selected Lines for Consosidation Source %1 were posted.;RUS=Выбранные строки по источнику консолидации %1  успешно учтены.';
      OperationCount@1210002 : Integer;
      CurrentOperation@1210003 : Integer;
      Indicator@1210004 : Dialog;
      FATransformationSetup@1210005 : Record 50004;
      FAType@1210007 : 'CIP,FA,IA,FE';
      FASetup@1210008 : Record 5603;
      NoSeriesManagement@1210009 : Codeunit 396;
      FADeprBook@1210010 : Record 5612;
      DimCode@1210011 : Code[20];
      DimValueCode@1210012 : Code[20];
      Text00003@1210014 : TextConst 'ENU=%1 or %2 should be filled in FA Transformation Setup Line %3;RUS=%1 либо %2 должно быть заполнено в строке настройки трансформации %3';
      Text00004@1210015 : TextConst 'ENU="%1 = %2 was not found in Currency list.";RUS="%1 = %2 не найден в справочнике валют."';
      Text00005@1000000052 : TextConst 'ENU=%1 for %2 should be filled in FA Transformation Setup Line %3;RUS=%1 для %2 должно быть заполнено в строке настройки трансформации %3';
      Text00006@1000000053 : TextConst 'ENU=%1 was not found for FA Transformation Setup Line %2;RUS=%1 не была найдена для строки настройки трансформации %2';
      Text00009@1000000054 : TextConst 'ENU="%1 = %2 was not found in Chart of account.";RUS="%1 = %2 не найден в плане счетов для строки настройки трансформации %3."';
      Text00100@1210018 : TextConst 'ENU="Intrest write-off from FA acqusition cost. ";RUS="Списание на расходы капитализации % "';
      ConsSetup@1210019 : Record 50000;
      NoSeriesMgt@1210020 : Codeunit 396;
      GlobalImportType@1210023 : 'Загрузка в Журнал,Загрузка и Учет';
      Text00101@1210021 : TextConst 'ENU="There are unloaded FA release into operation Entry in Buffer Table ";RUS=В буферной таблице присутствуют более ранние невыгруженные операции ввода в эксплуатацию';
      Text00102@1210022 : TextConst 'ENU="There are unloaded FA acquisition Entry in Buffer Table ";RUS=В буферной таблице присутствуют невыгруженные операции приобретения';
      Text00103@1210024 : TextConst 'ENU=You should setup dimension mapping for Dimension Code %1 Dimension Value %2;RUS=Введите настройку преобразования измерения для кода измерений %1, значения %2';
      GLSetup@1210025 : Record 98;
      Text00104@1210026 : TextConst 'ENU=You should define Accounting Period in General Ledger Setup.;RUS=Определите текущий учетный период в Финансовые Операции Настройка';
      CurrExchRate@1210027 : Record 330;
      Text00018@1210028 : TextConst 'ENU=You should define Template or Batch for FA Reclass Journal.;RUS=В системе не настроены шаблоны или разделы для журнала реклассификации.';
      Text00105@1210029 : TextConst 'ENU=Selected Lines for Consolidation Source %1 were uploaded;RUS=Выбранные строки по источнику консолидации %1 успешно выгружены';
      FALedgEntryError@1210031 : Record 5601;
      CancelFALedgEntries@1210030 : Codeunit 5624;
      FABuf@1210032 : Record 50008;
      Text00106@1210033 : TextConst 'ENU=Error Operation for deleting Buffer Entry No. %1 wasn''t found;RUS=Не найдена ошибочная операция для удаляющей операции в буфере %1';
      Text00107@1210034 : TextConst 'ENU=FA Ledger Entry for Buffer Entry No. %1 wasn''t found for deleting Entry No. %2;RUS=Не найдены ОС операции порожденные операцией в буфере %1 для удаляющей операции %2';
      GenJnlTemplateToPost@1210035 : Code[10];
      GenJnlBatchToPost@1210036 : Code[10];
      FAJnlTemplateToPost@1210038 : Code[10];
      FAJnlBatchToPost@1210037 : Code[10];
      ConsolidationSource@1210039 : Record 50001;
      Text00108@1210040 : TextConst 'ENU=For Buffer Entry No. %1 of Cons. Source %2 wasn''t defined Releated Consolidation Source Code;RUS=Для Операции %1 по источнику %2 не указан Код Связанного Источника Консолидации.';
      Text00109@1210041 : TextConst 'ENU=For Buffer Entry No. %1 of Cons. Source %2 wasn''t defined Releated Entry No.;RUS=Для Операции %1 по источнику %2 не указан Номер Связанной Операции.';
      Text00110@1210042 : TextConst 'ENU=For Buffer Entry No. %1 of Cons. Source %2 wasn''t found/accepted Releated Transfer Entry;RUS=Для Операции %1 по источнику %2 не найдена/не принята к загрузке Связанная Операция Перемещения.';
      Text00121@1000000001 : TextConst 'ENU=Releated FA Buffer Entry No. %1 of cons. source %2 should has Transfer FA Operation Type;RUS=Связанная ОС операция буфера %1 по источнику %2 должна иметь тип Перемещение.';
      Text00113@1000000051 : TextConst 'ENU=Releated FA Buffer Entry No. %1 of cons. source %2 should be Accepted.;RUS=Связанная ОС операция буфера %1 по источнику %2 должна иметь метку Принять.';
      Text00111@1210043 : TextConst 'ENU=Loading was aborted;RUS=Загрузка Прервана.';
      Text00112@1210044 : TextConst 'ENU=For the following associated operations are not the same amount. Continue? \ Source code:%1 Buffer Entry No.:%2, \ Source code: %3, Buffer Entry No.:%4;RUS="У следующих связанных операций не совпадает сумма. Продолжить?\Код Источника: %1, Операция Но.: %2;\Код Источника: %3, Операция Но.: %4"';
      NewCompName@1000000000 : Text[30];
      CurrCompany@1210046 : Record 2000000006;
      Text00114@1000000002 : TextConst 'ENU=There are not lines selected for posting.;RUS=Нет строк, выбранных для учета.';
      Text00115@1000000003 : TextConst 'ENU=%1 from %2 selected lines was successfully unloaded and posted.;RUS=%1 из %2 строк успешно выгружены и учтены.';
      Text00116@1000000004 : TextConst 'ENU=%1 from %2 selected lines was successfully unloaded.;RUS=%1 из %2 строк успешно выгружены.';
      ConsolidationMgt@1101495000 : Codeunit 50000;
      SourceCodeSetup@1101495001 : Record 242;
      Text00117@1000000005 : TextConst 'ENU=Unable to define amount of the release FA into operation for reversal entry.;RUS=Невозможно определить сумму ввода в эксплуатацию для операции сторнирования.';
      Text00118@1000000006 : TextConst 'ENU=Amount of release FA into operation is equal 0.;RUS=Сумма операции ввода в эксплуатацию для Книги Амортизации равна 0.';
      Text00119@1000000007 : TextConst 'ENU=You should select in the field "FA Error Operation No." the number for reversal operation of disposal.;RUS=Необходимо выбрать в поле "ОС Ошибка Операция Но" номер сторнируемой операции выбытия.';
      Text00120@1000000008 : TextConst 'ENU=Unable to define amount of the FA reclass for reversal entry.;RUS=Невозможно определить сумму реклассификации для операции сторнирования.';
      ErrorJournal@1000000009 : Record 50023;
      IsGlobalError@1000000010 : Boolean;
      ErrMessage@1000000011 : Text[250];
      Text00122@1000000022 : TextConst 'ENU="Dimension ";RUS="Для измерения "';
      Text00123@1000000021 : TextConst 'ENU=" value ";RUS="нет значения "';
      Text00124@1000000020 : TextConst 'ENU=" does no exist in NAV.";RUS=" в справочнике NAV."';
      Text00125@1000000019 : TextConst 'ENU="Dimension ";RUS="Измерение "';
      Text00126@1000000018 : TextConst 'ENU=" Value ";RUS=" значение "';
      Text00127@1000000017 : TextConst 'ENU=" is blocked in NAV.";RUS=" блокировано в справочнике NAV."';
      Text00132@1000000012 : TextConst 'ENU=" Value Type must be Standart.";RUS=" Тип Значения должно быть Стандартный."';
      Text00131@1000000023 : TextConst 'ENU="For Dimension Value ";RUS=Для значения измерения';
      Text00128@1000000013 : TextConst 'ENU=Errors Checking for Consolidation Source %1 ...;RUS=Проверка наличия ошибок по источнику консолидации %1...';
      Text00129@1000000014 : TextConst 'ENU="Loading FA Operation for Consolidation Source ";RUS="Загрузка операций ОС по источнику консолидации "';
      Text00130@1000000015 : TextConst 'ENU=Data errors were found.;RUS=Обнаружены ошибки при загрузке данных.';
      Text00133@1000000016 : TextConst 'ENU=FA acqusition operation wasn''t found.;RUS=Не найдены операции приобретения при вводе в эксплуатацию';
      Text00134@1000000024 : TextConst 'ENU=Depreciation was posted for FA No.%1 after %2. It should be revesed manually.;RUS=Для ОС Но. %1 существуют операции начисления амортизации. Начисление амортизации необходимо аннулировать.';
      Text00135@1000000025 : TextConst 'ENU=FA No. %1 Depreciation Book %2 was disposed. Disposal of FA should be reversed.;RUS=ОС Но. %1 по книге амортизации %2 было списано. Списание необходимо аннулировать.';
      Text00136@1000000026 : TextConst 'ENU=FA No. %1 Disposal should be the last entry.;RUS=Операция списания ОС Но.%1 должна быть последней.';
      NoOfCurrentEntryError@1000000027 : Integer;
      NoOfCurrentEntryOK@1000000028 : Integer;
      NoOfEntriesToAccept@1000000029 : Integer;
      Text018@1000000031 : TextConst 'ENU="For Entry on G/L Account ";RUS="Для операции по счету "';
      Text019@1000000030 : TextConst 'ENU=" there is no required dimension ";RUS=" нет обязательного измерения "';
      Text020@1000000032 : TextConst 'ENU="For Entry on G/L Account ";RUS="На операции по счету "';
      Text026@1000000036 : TextConst 'ENU=" Value ";RUS=" значение "';
      Text028@1000000034 : TextConst 'ENU=" Dimension ";RUS=" Измерение "';
      Text029@1000000033 : TextConst 'ENU=" is not allowed for posting.";RUS=" не разрешено для учета."';
      Text010@1000000035 : TextConst 'ENU="For G/L Account ";RUS="Для счета "';
      Text012@1000000041 : TextConst 'ENU="There is no mapping for value ";RUS="Для значения "';
      Text013@1000000040 : TextConst 'ENU=" of Dimension ";RUS=" измерения "';
      Text014@1000000039 : TextConst 'ENU=.;RUS=" не задано преобразование."';
      Text00137@1000000042 : TextConst 'ENU=Acquisition Cost is equal zero for FA No.%1 Depreciation Book %2.;RUS=Для ОС Но. %1 стоимость приобретения для Книги Амортизации %2 равна нулю.';
      MovingDataSetup@1000000043 : Record 50064;
      ErrorEntryNo@1000000044 : Integer;
      IsCredit@1000000045 : Boolean;
      FAConsRegister@1000000046 : Record 50006;
      Text00138@1000000047 : TextConst 'ENU=Credit;RUS=Кредиту';
      Text00139@1000000048 : TextConst 'ENU=Debit;RUS=Дебету';
      Text00140@1000000050 : TextConst 'ENU=" for debit ";RUS=" по дебету "';
      Text00141@1000000049 : TextConst 'ENU=" for credit ";RUS=" по кредиту "';
      Text00142@1000000055 : TextConst 'ENU=%2 of FA No. %1 should be the last entry.;RUS=%2 для ОС Но.%1 должна быть последней операцией.';
      Text00143@1000000056 : TextConst 'ENU=%2 of FA No. %1 should be the first entry.;RUS=%2 для ОС Но.%1 не должна быть первой операцией.';
      LineMin@1000000059 : Integer;
      LineMax@1000000060 : Integer;
      TempDebitLedgEntryDim@1101495002 : TEMPORARY Record 360;
      TempCreditLedgEntryDim@1101495003 : TEMPORARY Record 360;
      DimMgt@1101495004 : Codeunit 408;

    PROCEDURE PostFABuffer@1000000000(ImportType@1210001 : 'Загрузка в Журнал,Загрузка и Учет';ImportOperation@1210000 : 'Приобретение,Ввод в Эксплуатацию,Передача Лизингополучателю,Амортизация,Реклассификация,Выбытие,Перемещение';ConsSourceFilter@1210002 : Text[1000];DocDateFilter@1210007 : Text[100];Removed@1210008 : 'Yes,No,All');
    VAR
      FABuffer@1000000005 : Record 50008;
      FABuffer1@1000000004 : Record 50008;
      LineNo@1000000001 : Integer;
      PostNo@1000000000 : Integer;
      FixedAsset@1000000006 : Record 5600;
      NewLegal@1000000007 : Code[20];
      OldLegal@1000000008 : Code[20];
      DimensionValue@1000000009 : Record 349;
      FASetup@1000000010 : Record 5603;
      LegalCode@1000000011 : Code[20];
      OldCompany@1000000012 : Text[30];
      NewCompany@1000000013 : Text[30];
      FASource@1000000014 : Record 5600;
      FAJnlLine@1210003 : Record 5621;
      GenJnlLine@1210004 : Record 81;
      FAJnlPostBatch@1210005 : Codeunit 5633;
      GenJnlPostBatch@1210006 : Codeunit 13;
      FABuffer5@1210009 : Record 50008;
      EntriesNotInAccountPeriod@1210010 : Boolean;
      Text55001@1210014 : TextConst 'ENU=There are entries not in account period. Continue anyway?;RUS=Существуют операции вне открытого периода. Продолжить?';
      Text55002@1210013 : TextConst 'ENU=Consolidation was interupted.;RUS=Консолидация прервана.';
      RecordsToLoadExist@1000000002 : Boolean;
      PostedRecordsExist@1000000003 : Boolean;
      LoadedRecordsExist@1000000015 : Boolean;
      FABufferTransfer@1210011 : Record 50008;
      FABufferTransfer2@1210012 : Record 50008;
      IndicatorCheckErrors@1000000016 : Dialog;
      FABufferCheck@1000000017 : Record 50008;
      NoOfCurrentEntryToCheck@1000000018 : Integer;
      NoOfEntriesToCheck@1000000019 : Integer;
      ErrorCounter@1000000022 : Integer;
      FADocLineCheck@1000000023 : Record 12477;
      FAJnlLineCheck@1000000024 : Record 5621;
      ErrJournal@1000000021 : Record 50023;
      ConsStirngsNum@1000000025 : Integer;
      StringsToConsNum@1000000026 : Integer;
      LastNo@1000000027 : Integer;
      FirstNo@1000000028 : Integer;
      LastDate@1000000029 : Date;
      FirstDate@1000000030 : Date;
      IsErrorDim@1000000020 : Boolean;
      FABuffCheck@1000000031 : Record 50008;
      TempMapping@1000000032 : TEMPORARY Record 50022;
      OneMapping@1000000033 : Boolean;
    BEGIN
      CurrCompany.GET(COMPANYNAME);
      GlobalImportType := ImportType;
      ConsSetup.GET;
      FASetup.GET;
      GLSetup.GET;

      //NC MFA33 > DP
      LineMin :=0;
      LineMax :=0;
      //NC MFA33 < DP

      //NC MFA11 > DP
      NoOfCurrentEntryError :=0;
      NoOfCurrentEntryOK :=0;
      NoOfEntriesToAccept :=0;
      //NC MFA11 < DP

      ConsSetup.TESTFIELD(ConsSetup."FA Import Journal Template");
      //ConsSetup.TESTFIELD("Company for FA Import");
      //NC MDB01 > MP
      {
      ConsSetup.TESTFIELD("Cons. Local Currency Code");
      }
      //NC MDB01 < MP
      GenJnlTemplateToPost := ConsSetup."FA Import Journal Template";
      //IF CurrCompany.Type = CurrCompany.Type::"2" THEN BEGIN
        ConsSetup.TESTFIELD(ConsSetup."FA Import FA Jnl Template");
        FAJnlTemplateToPost := ConsSetup."FA Import FA Jnl Template";
      //END;

      //NC MDA01 > MP
      {
      ConsSetup.TESTFIELD("Source Code");
      }
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD("FA Transformation");
      //NC MDA01 < MP

      IF (GLSetup."Allow Posting From" = 0D) OR (GLSetup."Allow Posting To" = 0D) THEN
        ERROR(Text00104);

      //Проверка операций вне открытого периода
      EntriesNotInAccountPeriod := FALSE;
      FABuffer5.RESET;
      //FABuffer5.CHANGECOMPANY(ConsSetup."Company for FA Import");
      FABuffer5.SETCURRENTKEY("Document Date","FA Operation Type",Accept);
      FABuffer5.SETRANGE(Accept,TRUE);
      FABuffer5.SETRANGE("FA Operation Type",ImportOperation+1);

      IF FABuffer5.FINDFIRST AND (FABuffer5."Document Date" < GLSetup."Allow Posting From")
      THEN
        EntriesNotInAccountPeriod := TRUE;
      IF FABuffer5.FINDLAST AND (FABuffer5."Document Date" > GLSetup."Allow Posting To")
      THEN
        EntriesNotInAccountPeriod := TRUE;

      IF EntriesNotInAccountPeriod THEN
        IF NOT CONFIRM(Text55001) THEN BEGIN
          MESSAGE(Text55002);
          EXIT;
        END;

      //NC MFA01 > DP
      ConsolidationSource.RESET;
      //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsolidationSource.SETFILTER(ConsolidationSource.Code, ConsSourceFilter);
      IF ConsolidationSource.FINDSET THEN
      REPEAT

        IsGlobalError := FALSE;
        //NC MDTM02.1 > MP
        //NC MDTM11 > MP
        {
        UseMask := ConsolidationMgt.CheckUseOfMask(NoOfSymbInMask,ConsolidationSource."Mapping Code",1);
        }
        ConsolidationMgt.CheckUseOfMask(TempMapping,ConsolidationSource."Mapping Code",1,OneMapping);
        //NC MDTM11 < MP
        //NC MDTM02.1 < MP
        FABufferCheck.SETCURRENTKEY("Document Date","FA Operation Type",Accept);
        FABufferCheck.SETRANGE("Cons. Source Code",ConsolidationSource.Code);
        FABufferCheck.SETFILTER("Document Date",DocDateFilter);
        FABufferCheck.SETRANGE(Accept,TRUE);
        FABufferCheck.SETRANGE("FA Operation Exported",FALSE);
        FABufferCheck.SETRANGE("FA Operation Type",ImportOperation+1);
        CASE Removed OF
          Removed::All: FABufferCheck.SETRANGE(Removed);
          Removed::Yes: FABufferCheck.SETRANGE(Removed, TRUE);
          Removed::No: FABufferCheck.SETRANGE(Removed, FALSE);
        END;

        NoOfCurrentEntryToCheck :=0;
        NoOfEntriesToCheck := FABufferCheck.COUNT;
        NoOfEntriesToAccept := NoOfEntriesToAccept+FABufferCheck.COUNT;
        IndicatorCheckErrors.OPEN(STRSUBSTNO(Text00128,ConsolidationSource.Code) + '\' +
                                   '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');
        IF FABufferCheck.FINDSET(FALSE,FALSE) THEN BEGIN
          CreateConsRegister(ConsolidationSource.Code, 0, 0,
            TODAY, 0D, 0D, FAConsRegister);
        //NC MFA11 > DP
        TempDebitLedgEntryDim.DELETEALL;
        TempCreditLedgEntryDim.DELETEALL;
        IF ImportOperation = ImportOperation::Перемещение THEN BEGIN
          //FABufferTransfer2.CHANGECOMPANY(ConsSetup."Company for FA Import");
          FABufferTransfer2.COPY(FABufferCheck);
        END;
        //NC MFA11 < DP


          REPEAT
            NoOfCurrentEntryToCheck += 1;
            FABufferCheck."Error in Import" := FALSE;
            //NC MDTM11 > MP
            ConsolidationMgt.GetMapping(FABufferCheck."Document Date",TempMapping);
            //NC MDTM11 < MP

            //NC MFA15 < DP
            //Проверка связанности операций перемещения.
            IF ImportOperation = ImportOperation::Перемещение THEN BEGIN
              IF FABufferCheck."Related Cons. Source Code" = '' THEN BEGIN
                CreateErrorLogEntry2(FABufferCheck,
                STRSUBSTNO(Text00108,FABufferCheck."Entry No.",FABufferCheck."Cons. Source Code"),'EFA20');
                FABufferCheck."Error in Import":= TRUE;
                FABufferCheck.MODIFY;
              END;
              IF FABufferCheck."Related Entry No." = 0 THEN BEGIN
                CreateErrorLogEntry2(FABufferCheck,
                STRSUBSTNO(Text00109,FABufferCheck."Entry No.",FABufferCheck."Cons. Source Code"),'EFA21');
                FABufferCheck."Error in Import":= TRUE;
                FABufferCheck.MODIFY;
              END;
              FABufferTransfer2.SETRANGE("Cons. Source Code",FABufferCheck."Related Cons. Source Code");
              FABufferTransfer2.SETRANGE("Entry No.",FABufferCheck."Related Entry No.");
              IF NOT FABufferTransfer2.FINDFIRST THEN BEGIN
                CreateErrorLogEntry2(FABufferCheck,
                STRSUBSTNO(Text00110,FABufferCheck."Entry No.",FABufferCheck."Cons. Source Code"),'EFA22');
                FABufferCheck."Error in Import":= TRUE;
                FABufferCheck.MODIFY;
              END ELSE BEGIN
                IF NOT FABufferTransfer2.Accept THEN BEGIN
                  CreateErrorLogEntry2(FABufferCheck,
                  STRSUBSTNO(Text00113,FABufferCheck."Entry No.",FABufferCheck."Cons. Source Code"),'EFA23');
                  FABufferCheck."Error in Import":= TRUE;
                  FABufferCheck.MODIFY;
                END;
                IF FABufferTransfer2."FA Operation Type"<>FABufferTransfer2."FA Operation Type"::Transfer THEN BEGIN
                  CreateErrorLogEntry2(FABufferCheck,
                  STRSUBSTNO(Text00121,FABufferCheck."Entry No.",FABufferCheck."Cons. Source Code"),'EFA24');
                  FABufferCheck."Error in Import":= TRUE;
                  FABufferCheck.MODIFY;
                END;
              END;
            END;

            IsErrorDim := IsErrorDim AND CheckDimension(FABufferCheck, GenJnlLine, FADocLineCheck, FAJnlLineCheck,0,TRUE,
                                                        TempMapping.Code);

            //NC MFA34 > DP
            IF FABufferCheck."Source Operation No."<>0  THEN BEGIN
              IF FABuffCheck.GET(FABufferCheck."Cons. Source Code",FABufferCheck."Source Operation No.") THEN
                IsErrorDim := IsErrorDim AND CheckDimension(FABuffCheck, GenJnlLine, FADocLineCheck, FAJnlLineCheck,0,TRUE,
                                                            TempMapping.Code);

            END;
            //NC MFA34 < DP


            CheckFABuffer(FABufferCheck,ImportOperation,TempMapping);
            IndicatorCheckErrors.UPDATE(1, ROUND(NoOfCurrentEntryToCheck *
                                        (10000 / NoOfEntriesToCheck),1));
          UNTIL FABufferCheck.NEXT = 0;
          //NC MFA12 > DP
          ErrJournal.RESET;
          ErrJournal.SETRANGE("Cons. Source Code", ConsolidationSource.Code);
          ErrJournal.SETRANGE("Cons. Register", FAConsRegister."No.");
          IF ErrJournal.FINDSET THEN BEGIN
            ErrorCounter := 1;
            // Основной блок получения данных  ---<
            FAConsRegister."Total Entries In Session" := StringsToConsNum;
            FAConsRegister."Total Succ. Loaded In Session" := NoOfCurrentEntryOK;
            FAConsRegister."Total Accept In Session" := NoOfEntriesToAccept;
            FAConsRegister."Total Unloaded In Session" := NoOfCurrentEntryError;
            FAConsRegister.MODIFY;

          END ELSE BEGIN
            ErrorCounter := 0;
            FAConsRegister.GET(FAConsRegister."No.",ConsolidationSource.Code);
            FAConsRegister.DELETE;
            CLEAR(FAConsRegister);
          END;
          //NC MFA12 < DP
        END;

      UNTIL ConsolidationSource.NEXT = 0;

      IndicatorCheckErrors.CLOSE;

      IF NOT IsGlobalError THEN BEGIN
      //NC MFA01 < DP


      FABuffer.RESET;
      //FABuffer.CHANGECOMPANY(ConsSetup."Company for FA Import");
      FABuffer.SETCURRENTKEY("Document Date","FA Operation Type",Accept);
      FABuffer.SETFILTER("Document Date",DocDateFilter);
      FABuffer.SETRANGE(Accept,TRUE);
      //NC MFA11 > DP
      FABuffer.SETRANGE("Error in Import",FALSE);
      //NC MFA11 < DP
      FABuffer.SETRANGE("FA Operation Type",ImportOperation+1);

      IF ImportOperation = ImportOperation::"Ввод в Эксплуатацию" THEN BEGIN
        IF FABuffer.FINDFIRST THEN BEGIN
        //Проверка, нет ли в буфере невыгруженных операций ввода в эксплуатацию
        FABuffer1.RESET;
        //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuffer1.SETCURRENTKEY("Cons. Source Code","Document Date","FA Operation","FA Operation Type","FA Operation Processed");
        FABuffer1.SETRANGE("FA Operation Type",ImportOperation+1);
        FABuffer1.SETRANGE("FA Operation",TRUE);
        FABuffer1.SETRANGE("FA Operation Processed", FALSE);
        FABuffer1.SETRANGE(Removed, FALSE);

        //NC MFA11 > DP
        FABuffer1.SETRANGE("Error in Import",FALSE);
        //NC MFA11 < DP

        FABuffer1.SETFILTER("Cons. Source Code", ConsSourceFilter);
        FABuffer1.SETFILTER("Document Date",'<%1', FABuffer."Document Date");
        IF FABuffer1.FINDSET THEN
          ERROR(Text00101);
        {
        FABuffer.FINDLAST;
        //Проверка, нет ли в буфере невыгруженных операций приобретения
        FABuffer1.RESET;
        //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuffer1.SETCURRENTKEY("Cons. Source Code","Document Date","FA Operation","FA Operation Type","FA Operation Processed");
        FABuffer1.SETRANGE("FA Operation Type",ImportOperation);
        FABuffer1.SETRANGE("FA Operation",TRUE);
        FABuffer1.SETRANGE("FA Operation Processed", FALSE);
        FABuffer1.SETRANGE(Removed, FALSE);

        //NC MFA11 > DP
        FABuffer1.SETRANGE("Error in Import",FALSE);
        //NC MFA11 < DP

        FABuffer1.SETFILTER("Cons. Source Code", ConsSourceFilter);
        FABuffer1.SETFILTER("Document Date",'<=%1', FABuffer."Document Date");
        IF FABuffer1.FINDSET THEN
          ERROR(Text00102);
        }
        END;

      FABuffer1.RESET;
      END;

      RecordsToLoadExist := TRUE;
      LoadedRecordsExist := FALSE;
      PostedRecordsExist := FALSE;


      ConsolidationSource.RESET;
      //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsolidationSource.SETFILTER(ConsolidationSource.Code, ConsSourceFilter);
      IF ConsolidationSource.FINDSET THEN
      REPEAT
        //ConsolidationSource.TESTFIELD(ConsolidationSource."FA Import Company Name", COMPANYNAME);
        ConsolidationSource.TESTFIELD("FA Source", TRUE);
        ConsolidationSource.TESTFIELD("Mapping Code");
        //NC MDTM02.1 > MP
        //NC MDTM11 > MP
        {
        UseMask := ConsolidationMgt.CheckUseOfMask(NoOfSymbInMask,ConsolidationSource."Mapping Code",1);
        }
        TempMapping.RESET;
        TempMapping.DELETEALL;
        ConsolidationMgt.CheckUseOfMask(TempMapping,ConsolidationSource."Mapping Code",1,OneMapping);
        //NC MDTM11 < MP
        //NC MDTM02.1 < MP

        FABuffer.SETRANGE(FABuffer."Cons. Source Code",ConsolidationSource.Code);
        FABuffer.SETFILTER("Document Date",DocDateFilter);

        CASE Removed OF
          Removed::All: FABuffer.SETRANGE(Removed);
          Removed::Yes: FABuffer.SETRANGE(Removed, TRUE);
          Removed::No: FABuffer.SETRANGE(Removed, FALSE);
        END;
        OperationCount := FABuffer.COUNT;
        CurrentOperation := 0;

        //NC MFA12 > DP
        StringsToConsNum := FABuffer.COUNT;
        IF ErrorCounter = 1 THEN
          ConsStirngsNum := 1
        ELSE
          ConsStirngsNum := 0;
        IF FABuffer.FINDLAST THEN BEGIN
          LastNo := FABuffer."Entry No.";
          LastDate := FABuffer."Document Date";
        END ELSE BEGIN
          LastNo := 0;
          LastDate := 0D;
        END;

        IF FABuffer.FINDFIRST THEN BEGIN
          FirstNo := FABuffer."Entry No.";
          FirstDate := FABuffer."Document Date";
        END ELSE BEGIN
          FirstNo := 0;
          FirstDate := 0D;
        END;
        //NC MFA12 < DP

        //NC MFA33 > DP
        //Определение раздела для учета
        CASE ImportOperation OF
          ImportOperation::Приобретение: BEGIN
            ConsolidationSource.TESTFIELD(ConsolidationSource."Acquisition Gen. Batch Name");
            GenJnlBatchToPost  := ConsolidationSource."Acquisition Gen. Batch Name";
          END;
          ImportOperation::"Ввод в Эксплуатацию": BEGIN
            ConsolidationSource.TESTFIELD(ConsolidationSource."Release Gen. Batch Name");
            GenJnlBatchToPost := ConsolidationSource."Release Gen. Batch Name";
          END;
          ImportOperation::Амортизация: BEGIN
            ConsolidationSource.TESTFIELD(ConsolidationSource."Depreciation Gen. Batch Name");
            GenJnlBatchToPost := ConsolidationSource."Depreciation Gen. Batch Name";
          END;
          ImportOperation::Реклассификация,
          ImportOperation::"Передача Лизингополучателю": BEGIN
            ConsolidationSource.TESTFIELD(ConsolidationSource."Reclass. Gen. Batch Name");
            GenJnlBatchToPost := ConsolidationSource."Reclass. Gen. Batch Name";
          END;
          ImportOperation::Выбытие: BEGIN
            ConsolidationSource.TESTFIELD(ConsolidationSource."Dispose Gen. Batch Name");
            GenJnlBatchToPost := ConsolidationSource."Dispose Gen. Batch Name";
          END;
          ImportOperation::Перемещение: BEGIN
            ConsolidationSource.TESTFIELD(ConsolidationSource."Transfer Gen. Batch Name");
            GenJnlBatchToPost := ConsolidationSource."Transfer Gen. Batch Name";
          END;
        END;
        LineMin :=GetGenJnlLineNo(GenJnlTemplateToPost,GenJnlBatchToPost);
        //NC MFA33 > DP


        IF FABuffer.FIND('-') THEN BEGIN
          Indicator.OPEN(Text00129 +' '+ ConsolidationSource.Code + '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

          REPEAT
            //NC MFA12 > DP
            ConsStirngsNum += 1;
            //NC MFA12 < DP
            //NC MDTM11 > MP
            ConsolidationMgt.GetMapping(FABuffer."Document Date",TempMapping);
            //NC MDTM11 < MP

            CurrentOperation += 1;
            Indicator.UPDATE(1, ROUND(CurrentOperation * (10000 / OperationCount),1));

            //NC MFA12 > DP
            IF ConsStirngsNum = 1 THEN
              CreateConsRegister(ConsolidationSource.Code, FirstNo, LastNo,FABuffer."Document Date", FirstDate, LastDate, FAConsRegister);

            IF ConsStirngsNum = StringsToConsNum THEN
              UpdateConsRegister(FABuffer."Entry No.", FABuffer."Document Date", FirstDate, LastDate, FAConsRegister);
            //NC MFA12 < DP

            IF (NOT FABuffer.Reposted) AND (FABuffer."Remove Oper. No" = 0) THEN BEGIN
            //IF CurrCompany.Type IN [CurrCompany.Type::"2", CurrCompany.Type::"3"]  THEN BEGIN
              CASE FABuffer."FA Operation Type" OF
                FABuffer."FA Operation Type"::Acquisition:
                  PostAcquisition(FABuffer,FALSE,TempMapping);

                FABuffer."FA Operation Type"::Release:
                  PostRelease(FABuffer,FALSE,TempMapping);

                FABuffer."FA Operation Type"::LeasingRelease:
                  PostReclass(FABuffer,FALSE,TempMapping);

                FABuffer."FA Operation Type"::Depreciation:
                  PostDepriciation(FABuffer,FALSE,TempMapping);


                FABuffer."FA Operation Type"::Reclass:
                  PostReclass(FABuffer,FALSE,TempMapping);

                FABuffer."FA Operation Type"::WriteOff:
                  PostWriteOff(FABuffer, FALSE,TempMapping);


                FABuffer."FA Operation Type"::Transfer:
                  PostTransfer(FABuffer,TempMapping);
              END;
            //END;

            //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABuffer1.GET(FABuffer."Cons. Source Code", FABuffer."Entry No.");
            FABuffer1."FA Operation Exported" := TRUE;
            FABuffer1.MODIFY;

            END;

          //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
          FABuffer1.GET(FABuffer."Cons. Source Code", FABuffer."Entry No.");
          FABuffer1."FA Operation Processed" := TRUE;
          //NC MFA12 > DP
          FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
          //NC MFA12 < DP
          FABuffer1.Accept := FALSE;
          FABuffer1.MODIFY;
        UNTIL FABuffer.NEXT = 0;


        Indicator.CLOSE;

        IF GlobalImportType = GlobalImportType::"Загрузка в Журнал" THEN
          LoadedRecordsExist := TRUE


        ELSE BEGIN
          //Определение раздела для учета
          CASE ImportOperation OF
            ImportOperation::Приобретение: BEGIN
              ConsolidationSource.TESTFIELD(ConsolidationSource."Acquisition Gen. Batch Name");
              ConsolidationSource.TESTFIELD(ConsolidationSource."Acquisition FA Batch Name");
              GenJnlBatchToPost  := ConsolidationSource."Acquisition Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Acquisition FA Batch Name";
            END;

            ImportOperation::"Ввод в Эксплуатацию": BEGIN
              ConsolidationSource.TESTFIELD(ConsolidationSource."Release Gen. Batch Name");
              ConsolidationSource.TESTFIELD(ConsolidationSource."Release FA Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Release Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Release FA Batch Name";
            END;
            ImportOperation::Амортизация: BEGIN
              ConsolidationSource.TESTFIELD(ConsolidationSource."Depreciation FA Batch Name");
              FAJnlBatchToPost := ConsolidationSource."Depreciation FA Batch Name";
              ConsolidationSource.TESTFIELD(ConsolidationSource."Depreciation Gen. Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Depreciation Gen. Batch Name";
            END;
            ImportOperation::Реклассификация,
            ImportOperation::"Передача Лизингополучателю": BEGIN
              ConsolidationSource.TESTFIELD(ConsolidationSource."Reclass. Gen. Batch Name");
              ConsolidationSource.TESTFIELD(ConsolidationSource."Reclass. FA Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Reclass. Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Reclass. FA Batch Name";
            END;
            ImportOperation::Выбытие: BEGIN
              ConsolidationSource.TESTFIELD(ConsolidationSource."Dispose Gen. Batch Name");
              ConsolidationSource.TESTFIELD(ConsolidationSource."Dispose FA Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Dispose Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Dispose FA Batch Name";
            END;
            //NC PIF001 > DP
            ImportOperation::Перемещение: BEGIN
              ConsolidationSource.TESTFIELD(ConsolidationSource."Transfer Gen. Batch Name");
              ConsolidationSource.TESTFIELD(ConsolidationSource."Transfer FA Batch Name");
              GenJnlBatchToPost := ConsolidationSource."Transfer Gen. Batch Name";
              FAJnlBatchToPost := ConsolidationSource."Transfer FA Batch Name";
            END;
            //NC PIF001 < DP
          END;

          //NC MFA33 > DP
          LineMax :=GetGenJnlLineNo(GenJnlTemplateToPost,GenJnlBatchToPost);
          //NC MFA33 < DP

          FAJnlLine.RESET;
          FAJnlLine.SETRANGE("Journal Template Name", FAJnlTemplateToPost);
          FAJnlLine.SETRANGE("Journal Batch Name",FAJnlBatchToPost);
          IF FAJnlLine.FIND('-') THEN
            FAJnlPostBatch.RUN(FAJnlLine);

          GenJnlLine.RESET;
          GenJnlLine.SETRANGE("Journal Template Name", GenJnlTemplateToPost);
          GenJnlLine.SETRANGE("Journal Batch Name", GenJnlBatchToPost);

          //NC MFA33 > DP
          IF (LineMin<>0) AND (LineMax<>0) THEN
            GenJnlLine.SETRANGE("Line No.",LineMin,LineMax);
          //NC MFA33 < DP

          IF GenJnlLine.FIND('-') THEN
            GenJnlPostBatch.RUN(GenJnlLine);

          PostedRecordsExist := TRUE;
        END;
        // Основной блок получения данных  ---<
        FAConsRegister."Total Entries In Session" := StringsToConsNum;
        FAConsRegister."Total Succ. Loaded In Session" := NoOfCurrentEntryOK;
        FAConsRegister."Total Accept In Session" := NoOfEntriesToAccept;
        FAConsRegister."Total Unloaded In Session" := NoOfCurrentEntryError;
        FAConsRegister.MODIFY;

      END ELSE
        RecordsToLoadExist := FALSE;


      UNTIL ConsolidationSource.NEXT = 0;

      IF (NOT RecordsToLoadExist) AND
         (NOT PostedRecordsExist) AND
         (NOT LoadedRecordsExist)
      THEN
        IF NoOfCurrentEntryError>0 THEN
          MESSAGE(Text00130)
        ELSE
        MESSAGE(Text00114);
      IF PostedRecordsExist THEN
        MESSAGE(Text00115,NoOfCurrentEntryOK,NoOfEntriesToAccept);
      IF LoadedRecordsExist THEN
        MESSAGE(Text00116,NoOfCurrentEntryOK,NoOfEntriesToAccept);

      //NC MFA01 > DP
      END ELSE
        MESSAGE(Text00130);
      //NC MFA01 > DP
    END;

    PROCEDURE PostAcquisition@1210000(FABuffer@1210000 : Record 50008;CreateNew@1210003 : Boolean;TempMapping@1000000003 : TEMPORARY Record 50022);
    VAR
      SetupType@1210001 : 'Debit,Credit';
      CurFANo@1210002 : Code[20];
      FE@1210004 : Record 5600;
      FAClassCode@1000000000 : Code[20];
      IsFATransSetupFound@1000000001 : Boolean;
      IsFACorrTransSetupFound@1000000002 : Boolean;
    BEGIN
      IF ((FABuffer."Source Operation No." = 0) AND (NOT FABuffer.Removed)) OR CreateNew THEN BEGIN

        FATransformationSetup.RESET;
        FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
        "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
        //NC MFA01 > DP
        IsFATransSetupFound := FALSE;
        FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
        //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
        FATransformationSetup.SETFILTER("Company Name",COMPANYNAME);
        {
        FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuffer."Cons. Source Code");
        }
        //NC MFA01 < DP
        FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                                                                    TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                    TempMapping."Temp No. Of Symb. In Masks"));
        FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                                                                     TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                     TempMapping."Temp No. Of Symb. In Masks"));


        IF FABuffer."IC FA Operation" THEN
          FATransformationSetup.SETRANGE("Int. Contragent",TRUE)
        ELSE
          FATransformationSetup.SETRANGE("Int. Contragent",FALSE);

        FATransformationSetup.SETRANGE("FA Operation Type", FABuffer."FA Operation Type");
        FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
        //NC MFA03 > DP
        IF FABuffer."FA Class Code"<>'' THEN
          FATransformationSetup.SETRANGE("FA Class Code", FABuffer."FA Class Code");
        //NC MFA03 < DP

        IF FATransformationSetup.FINDFIRST THEN BEGIN

        //NC MFA01 > DP
          IsFATransSetupFound := TRUE;
        END ELSE BEGIN
          FATransformationSetup.SETRANGE("Company Name");
          IF FATransformationSetup.FINDFIRST THEN
          BEGIN
            IsFATransSetupFound := TRUE;
          END ELSE BEGIN
            FATransformationSetup.SETRANGE("FA Class Code");
            IF FATransformationSetup.FINDFIRST THEN
              IsFATransSetupFound := TRUE;
          END;
        END;
        IF IsFATransSetupFound THEN BEGIN
        //NC MFA01 < DP
          //NC MFA01.1 > DP
          IF FATransformationSetup."FA Card Type Debit"=FATransformationSetup."FA Card Type Debit"::" " THEN BEGIN
            CurFANo := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
            CreateGenJourLine('',CurFANo,FABuffer,FATransformationSetup,0,'',0,TempMapping);
          END ELSE BEGIN
          //NC MFA01.1 > DP

            CurFANo := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,0D);
            CreateGenJourLine(CurFANo,'',FABuffer,FATransformationSetup,0,'',0,TempMapping);

          //NC MFA01.1 > DP
          END;
          //NC MFA01.1 > DP
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00001, FABuffer."Entry No.");
        END;


      END ELSE
      IF FABuffer.Removed THEN BEGIN
        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETCURRENTKEY(FABuf."Remove Oper. No");
        FABuf.SETRANGE(FABuf."Remove Oper. No", FABuffer."Entry No.");
        FABuf.SETRANGE(FABuf."Cons. Source Code", FABuffer."Cons. Source Code");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
              FATransformationSetup.RESET;
              FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
              "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

              //NC MFA01 > DP
              IsFACorrTransSetupFound := FALSE;
              FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
              //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
              FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
              {
              FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
              }
              //NC MFA01 < DP
              FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                          TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                          TempMapping."Temp No. Of Symb. In Masks"));
              FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                           TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                           TempMapping."Temp No. Of Symb. In Masks"));

              IF FABuf."IC FA Operation" THEN
                FATransformationSetup.SETRANGE("Int. Contragent",TRUE)
              ELSE
                FATransformationSetup.SETRANGE("Int. Contragent",FALSE);
              FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
              FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");

              //NC MFA03 > DP
              IF FABuf."FA Class Code"<>'' THEN
                FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
              //NC MFA03 < DP

              IF FATransformationSetup.FIND('-') THEN BEGIN

              //NC MFA01 > DP
                IsFACorrTransSetupFound := TRUE;
              END ELSE BEGIN
                FATransformationSetup.SETRANGE("Company Name");
                IF FATransformationSetup.FINDFIRST THEN
                BEGIN
                  IsFACorrTransSetupFound := TRUE;
                END ELSE BEGIN
                  FATransformationSetup.SETRANGE("FA Class Code");
                  IF FATransformationSetup.FINDFIRST THEN
                    IsFACorrTransSetupFound := TRUE;
                END;
              END;
              IF IsFACorrTransSetupFound THEN BEGIN
              //NC MFA01 < DP

                CurFANo := CreateFACard(FABuf,SetupType::Debit,FATransformationSetup,0D);
                CreateGenJourLine(CurFANo,'',FABuf,FATransformationSetup,0,FABuffer."Cons. Source Code",FABuffer."Entry No.",TempMapping);
                IF FATransformationSetup."Capital. Percent" THEN
                 //ReklassCapitalPercent(CurFANo,FABuf,FATransformationSetup,FABuffer."Cons. Source Code",FABuffer."Entry No.")
                 ;

                IF FE.GET(CurFANo) AND (FE."FA Type" = FE."FA Type"::"Future Expense") THEN BEGIN
                  FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                                FATransformationSetup."Navision Document Type"::"FA Journal");
                  IF FATransformationSetup.FIND('-') THEN BEGIN
                    CurFANo := CreateFACard(FABuf,SetupType::Debit,FATransformationSetup,0D);
                    CreateAcquisitionFAJourLine(CurFANo,'',FABuf,FATransformationSetup,
                      FABuffer."Cons. Source Code",FABuffer."Entry No.",TempMapping.Code);
                  END ELSE BEGIN
                   Indicator.CLOSE;
                   ERROR(Text00001, FABuffer."Entry No.");
                  END;
                END;

              END;
          END;
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END ELSE
      IF (FABuffer."Source Operation No." <> 0)THEN BEGIN
        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");
        FABuf.SETRANGE("Entry No.",FABuffer."Source Operation No.");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
              FATransformationSetup.RESET;
              FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
              "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

              //NC MFA01 > DP
              IsFACorrTransSetupFound := FALSE;
              FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
              //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
              FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
              {
              FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
              }
              //NC MFA01 < DP
              FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                          TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                          TempMapping."Temp No. Of Symb. In Masks"));

              FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                           TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                           TempMapping."Temp No. Of Symb. In Masks"));

              IF FABuf."IC FA Operation" THEN
                FATransformationSetup.SETRANGE("Int. Contragent",TRUE)
              ELSE
                FATransformationSetup.SETRANGE("Int. Contragent",FALSE);
              FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
              FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
              //NC MFA03 > DP
              IF FABuf."FA Class Code"<>'' THEN
                FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
              //NC MFA03 < DP


              IF FATransformationSetup.FIND('-') THEN BEGIN

              //NC MFA01 > DP
                IsFACorrTransSetupFound := TRUE;
              END ELSE BEGIN
                FATransformationSetup.SETRANGE("Company Name");
                IF FATransformationSetup.FINDFIRST THEN
                BEGIN
                  IsFACorrTransSetupFound := TRUE;
                END ELSE BEGIN
                  FATransformationSetup.SETRANGE("FA Class Code");
                  IF FATransformationSetup.FINDFIRST THEN
                    IsFACorrTransSetupFound := TRUE;
                END;
              END;
              IF IsFACorrTransSetupFound THEN BEGIN
              //NC MFA01 < DP
                //NC MFA01.1 > DP
                IF FATransformationSetup."FA Card Type Debit"<>FATransformationSetup."FA Card Type Debit"::" " THEN
                //NC MFA01.1 > DP

                CurFANo := CreateFACard(FABuf,SetupType::Debit,FATransformationSetup,0D);
                CreateGenJourLine(CurFANo,'',FABuf,FATransformationSetup,0,FABuffer."Cons. Source Code",FABuffer."Entry No.",TempMapping);
                IF FATransformationSetup."Capital. Percent" THEN
                  //ReklassCapitalPercent(CurFANo,FABuf,FATransformationSetup,FABuffer."Cons. Source Code",FABuffer."Entry No.")
                  ;

                IF FE.GET(CurFANo) AND (FE."FA Type" = FE."FA Type"::"Future Expense") THEN BEGIN
                  FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                                FATransformationSetup."Navision Document Type"::"Gen. Journal");
                  IF FATransformationSetup.FIND('-') THEN BEGIN
                    CurFANo := CreateFACard(FABuf,SetupType::Debit,FATransformationSetup,0D);
                    CreateAcquisitionFAJourLine(CurFANo,'',FABuf,FATransformationSetup,
                      FABuffer."Cons. Source Code",FABuffer."Entry No.",TempMapping.Code);
                  END ELSE BEGIN
                   Indicator.CLOSE;
                   ERROR(Text00001, FABuffer."Entry No.");
                  END;
                END;

                PostAcquisition(FABuffer,TRUE,TempMapping);
              END;
          END ELSE
            PostAcquisition(FABuffer,TRUE,TempMapping);


        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END;
    END;

    PROCEDURE PostRelease@1000000003(FABuffer@1000000000 : Record 50008;CreateNew@1210007 : Boolean;TempMapping@1000000019 : TEMPORARY Record 50022);
    VAR
      FASetup@1000000001 : Record 5603;
      DeprBookCode@1000000002 : Code[20];
      DeprBook@1000000003 : Record 5611;
      FAJnlSetup@1000000004 : Record 5605;
      GenJnlLine@1000000005 : Record 81;
      NextLineNo@1000000006 : Integer;
      FixedAsset@1000000007 : Record 5600;
      FAPostingGroup@1000000008 : Record 5606;
      FADeprBook@1000000009 : Record 5612;
      GenJnlLine1@1000000010 : Record 81;
      LineNo@1000000011 : Integer;
      DimMgt@1000000014 : Codeunit 408;
      GenJnlPostLine@1000000015 : Codeunit 12;
      FAJnlAmountUSD@1210000 : Decimal;
      FAJnlAmountRUR@1210004 : Decimal;
      CurFANo1@1210001 : Code[20];
      CurFANo2@1210003 : Code[20];
      SetupType@1210002 : 'Debit,Credit';
      FAJnlAmountUSDFict@1210005 : Decimal;
      ErrorDocNo@1210006 : Code[20];
      FAClassCode@1000000016 : Code[20];
      IsFATransSetupFound@1000000017 : Boolean;
      IsFACorrTransSetupFound@1000000018 : Boolean;
    BEGIN
      IF ((FABuffer."Source Operation No." = 0) AND (NOT FABuffer.Removed)) OR CreateNew THEN BEGIN

        FAJnlAmountRUR := 0;
        FAJnlAmountUSD := 0;

        FATransformationSetup.RESET;
        FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
        "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

        //NC MFA01 > DP
        IsFATransSetupFound := FALSE;
        FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
        //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
        FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
        {
        FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuffer."Cons. Source Code");
        }
        //NC MFA01 < DP

        FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                                                                    TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                    TempMapping."Temp No. Of Symb. In Masks"));
        FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                                                                     TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                     TempMapping."Temp No. Of Symb. In Masks"));
        FATransformationSetup.SETRANGE("FA Operation Type", FABuffer."FA Operation Type");
        FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");


        //NC MFA03 > DP
        IF FABuffer."FA Class Code"<>'' THEN
           FATransformationSetup.SETRANGE("FA Class Code", FABuffer."FA Class Code");
        //NC MFA03 < DP

        IF FATransformationSetup.FINDFIRST THEN BEGIN

        //NC MFA01 > DP
          IsFATransSetupFound := TRUE;
        END ELSE BEGIN
          FATransformationSetup.SETRANGE("Company Name");
          IF FATransformationSetup.FINDFIRST THEN
          BEGIN
            IsFATransSetupFound := TRUE;
          END ELSE BEGIN
            FATransformationSetup.SETRANGE("FA Class Code");
            IF FATransformationSetup.FINDFIRST THEN
              IsFATransSetupFound := TRUE;
          END;
        END;

        IF IsFATransSetupFound THEN BEGIN
        //NC MFA01 < DP

          CurFANo1 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,0D);
          CurFANo2 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);

          //NC MFA05 > DP
          CalcFAReleaseAmount(CurFANo1,CurFANo2,FABuffer,FATransformationSetup,FAJnlAmountUSD);

          IF FATransformationSetup.FIND('-') THEN BEGIN
          CreateGenJourLine(CurFANo1,CurFANo2,FABuffer,FATransformationSetup,FAJnlAmountUSD,'',0,TempMapping);

          END ELSE BEGIN
          //NC MFA05 < DP
          FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"FA Journal");
          //NC MDB01 > MP
          {
          FATransformationSetup.SETRANGE(FATransformationSetup."Currency Code", ConsSetup."Cons. Local Currency Code");
          }
          //NC MDB01 < MP

          IF FATransformationSetup.FIND('-') THEN BEGIN
            CreateReleaseFAJourLine(CurFANo1,CurFANo2,FABuffer,FATransformationSetup,FAJnlAmountUSD,TempMapping.Code);

            FATransformationSetup.SETRANGE(FATransformationSetup."Currency Code",'');
            IF FATransformationSetup.FIND('-') THEN BEGIN
              CreateReleaseFAJourLine(CurFANo1,CurFANo2,FABuffer,FATransformationSetup, FAJnlAmountUSDFict,TempMapping.Code);
              FATransformationSetup.SETRANGE(FATransformationSetup."Currency Code");
              FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
              IF FATransformationSetup.FIND('-') THEN BEGIN
                CreateGenJourLine(CurFANo1,CurFANo2,FABuffer,FATransformationSetup,FAJnlAmountUSD,'',0,TempMapping);
              END ELSE BEGIN
                Indicator.CLOSE;
                ERROR(Text00001, FABuffer."Entry No.");
              END;
            END ELSE BEGIN
              Indicator.CLOSE;
              ERROR(Text00001, FABuffer."Entry No.");
            END;
          END ELSE BEGIN
            Indicator.CLOSE;
            ERROR(Text00001, FABuffer."Entry No.");
          END;
          END;
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00001, FABuffer."Entry No.");
        END;
      END ELSE
      IF FABuffer.Removed THEN BEGIN

        FAJnlAmountRUR := 0;
        FAJnlAmountUSD := 0;

        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETCURRENTKEY(FABuf."Remove Oper. No");
        FABuf.SETRANGE(FABuf."Remove Oper. No", FABuffer."Entry No.");
        FABuf.SETRANGE(FABuf."Cons. Source Code", FABuffer."Cons. Source Code");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
            FATransformationSetup.RESET;
            FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            IsFACorrTransSetupFound := FALSE;
            FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
            FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                        TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                        TempMapping."Temp No. Of Symb. In Masks"));
            FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                         TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                         TempMapping."Temp No. Of Symb. In Masks"));
            FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
            FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");

            //NC MFA03 > DP
            IF FABuf."FA Class Code"<>'' THEN
              FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
            //NC MFA03 < DP
            //NC MFA01 > DP
            IF FATransformationSetup.FINDFIRST THEN BEGIN
              IsFACorrTransSetupFound := TRUE;
            END ELSE BEGIN
              FATransformationSetup.SETRANGE("Company Name");
              IF FATransformationSetup.FINDFIRST THEN
              BEGIN
                IsFACorrTransSetupFound := TRUE;
              END ELSE BEGIN
                FATransformationSetup.SETRANGE("FA Class Code");
                IF FATransformationSetup.FINDFIRST THEN
                  IsFACorrTransSetupFound := TRUE;
              END;
           END;
          IF IsFACorrTransSetupFound THEN BEGIN
            //CreateRemoveReleaseFAJourLine(FABuf,FATransformationSetup,
            //                                    FABuffer."Cons. Source Code",FABuffer."Entry No.");
            FALedgEntryError.RESET;
            FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
            FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
            FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                 FATransformationSetup."Depreciation Book Debit",FATransformationSetup."Depreciation Book Credit");
            FALedgEntryError.SETFILTER("FA No.",'<>%1','');
            IF FALedgEntryError.FINDFIRST THEN BEGIN
              CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
            END ELSE BEGIN
              Indicator.CLOSE;
              ERROR(Text00107, FABuffer."Entry No.");
            END;
          END ELSE BEGIN
            Indicator.CLOSE;
            ERROR(Text00001, FABuffer."Entry No.");
          END;
         END;
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END ELSE
      IF (FABuffer."Source Operation No." <> 0) THEN BEGIN

        FAJnlAmountRUR := 0;
        FAJnlAmountUSD := 0;

        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");
        FABuf.SETRANGE("Entry No.",FABuffer."Source Operation No.");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
            FATransformationSetup.RESET;
            FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            IsFACorrTransSetupFound := FALSE;
            FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
            FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                        TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                        TempMapping."Temp No. Of Symb. In Masks"));

            FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                         TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                         TempMapping."Temp No. Of Symb. In Masks"));

            FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
            FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");

            //NC MFA03 > DP
            IF FABuf."FA Class Code"<>'' THEN
              FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
            //NC MFA03 < DP


            IF FATransformationSetup.FIND('-') THEN BEGIN

            //NC MFA01 > DP
              IsFACorrTransSetupFound := TRUE;
            END ELSE BEGIN
              FATransformationSetup.SETRANGE("Company Name");
              IF FATransformationSetup.FINDFIRST THEN
                BEGIN
                  IsFACorrTransSetupFound := TRUE;
                END ELSE BEGIN
                  FATransformationSetup.SETRANGE("FA Class Code");
                  IF FATransformationSetup.FINDFIRST THEN
                    IsFACorrTransSetupFound := TRUE;
                END;
            END;
            IF IsFACorrTransSetupFound THEN BEGIN
            //NC MFA01 < DP

              //CreateRemoveReleaseFAJourLine(FABuf,FATransformationSetup,
              //                                  FABuffer."Cons. Source Code",FABuffer."Entry No.");

              FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");

              IF FATransformationSetup.FIND('-') THEN BEGIN
                FALedgEntryError.RESET;
                FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                   FATransformationSetup."Depreciation Book Debit",FATransformationSetup."Depreciation Book Credit");
                FALedgEntryError.SETFILTER(FALedgEntryError."FA No.",'<>%1','');
                IF FALedgEntryError.FINDFIRST THEN BEGIN
                  CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                  PostRelease(FABuffer, TRUE,TempMapping);
                END ELSE BEGIN
                  Indicator.CLOSE;
                  ERROR(Text00107, FABuffer."Entry No.");
                END;
              END ELSE BEGIN
                Indicator.CLOSE;
                ERROR(Text00001, FABuffer."Entry No.");
              END
            END ELSE BEGIN
              Indicator.CLOSE;
              ERROR(Text00001, FABuffer."Entry No.");
            END
          END;
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END;
    END;

    PROCEDURE PostDepriciation@1210003(FABuffer@1210000 : Record 50008;CreateNew@1210017 : Boolean;TempMapping@1000000004 : TEMPORARY Record 50022);
    VAR
      CurFANo1@1210001 : Code[20];
      CurFANo2@1000000003 : Code[20];
      FAJnlAmountFict@1210002 : Decimal;
      SetupType@1210003 : 'Debit,Credit';
      CurTemplateCode@1210013 : Code[10];
      CurBatchCode@1210012 : Code[10];
      FAJnlBatch@1210009 : Record 5620;
      CurDocNo@1210008 : Code[20];
      LineNo@1210007 : Integer;
      DimType@1210006 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210005 : Record 81;
      FADocLineFict@1210004 : Record 12477;
      FAJnlLine1@1210014 : Record 5621;
      FAJnlLine@1210015 : Record 5621;
      FAJnlPostBatch@1210016 : Codeunit 5633;
      FixedAsset@1210018 : Record 5600;
      FADeprBookFE@1210019 : Record 5612;
      FAClassCode@1000000000 : Code[20];
      IsFATransSetupFound@1000000001 : Boolean;
      IsFACorrTransSetupFound@1000000002 : Boolean;
    BEGIN
      IF ((FABuffer."Source Operation No." = 0) AND (NOT FABuffer.Removed)) OR CreateNew THEN BEGIN

      FATransformationSetup.RESET;
      FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
      "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

      //NC MFA01 > DP
      IsFATransSetupFound := FALSE;
      FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
      //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
      FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
      {
      FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuffer."Cons. Source Code");
      }
      //NC MFA01 < DP

      FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                                                                  TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                  TempMapping."Temp No. Of Symb. In Masks"));

      FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                                                                   TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                   TempMapping."Temp No. Of Symb. In Masks"));
      FATransformationSetup.SETRANGE("FA Operation Type", FABuffer."FA Operation Type");
      FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
      //NC MFA03 > DP
      IF FABuffer."FA Class Code"<>'' THEN
        FATransformationSetup.SETRANGE("FA Class Code", FABuffer."FA Class Code");
      //NC MFA03 < DP

      IF FATransformationSetup.FINDFIRST THEN BEGIN

      //NC MFA01 > DP
        IsFATransSetupFound := TRUE;
      END ELSE BEGIN
        FATransformationSetup.SETRANGE("Company Name");
        IF FATransformationSetup.FINDFIRST THEN
          BEGIN
            IsFATransSetupFound := TRUE;
          END ELSE BEGIN
            FATransformationSetup.SETRANGE("FA Class Code");
            IF FATransformationSetup.FINDFIRST THEN
              IsFATransSetupFound := TRUE;
          END;
      END;
      IF IsFATransSetupFound THEN BEGIN
      //NC MFA01 < DP


        IF FATransformationSetup.Storno THEN BEGIN
          CurFANo1 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,0D);
          //CurFANo2 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
        END ELSE BEGIN
          CurFANo1 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
          //CurFANo2 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,0D);
        END;
        //Определение шаблона, раздела журнала, номера документа и строки
        FixedAsset.GET(CurFANo1);
        IF FixedAsset."Leasing Asset" THEN
          FATransformationSetup.SETRANGE("Leasing Object",TRUE)
        ELSE
          FATransformationSetup.SETRANGE("Leasing Object",FALSE);
        IF FATransformationSetup.FINDFIRST THEN;
          CreateGenJourLine('',CurFANo1,FABuffer,FATransformationSetup,0,'',0,TempMapping);

        //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
        {
        ConsolidationSource.GET(FABuffer."Cons. Source Code");
        ConsolidationSource.TESTFIELD(ConsolidationSource."Depreciation FA Batch Name");
        CurBatchCode := ConsolidationSource."Depreciation FA Batch Name";

        ConsolidationSetup.GET;
        ConsolidationSetup.TESTFIELD(ConsolidationSetup."FA Import FA Jnl Template");
        CurTemplateCode := ConsolidationSetup."FA Import FA Jnl Template";

        FAJnlLine1.SETRANGE("Journal Template Name", CurTemplateCode);
        FAJnlLine1.SETRANGE("Journal Batch Name", CurBatchCode);
        IF FAJnlLine1.FIND('+') THEN BEGIN
          CurDocNo := INCSTR(FAJnlLine1."Document No.");
          LineNo := FAJnlLine1."Line No." + 10000
        END ELSE BEGIN
          LineNo := 10000;
          FAJnlBatch.GET(CurTemplateCode,CurBatchCode);
          FAJnlBatch.TESTFIELD("No. Series");
          CLEAR(NoSeriesMgt);
          CurDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch."No. Series", FABuffer."Document Date",FALSE);
        END;

      //Создание одной операции РСБУ
          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", CurFANo1);
          IF FATransformationSetup.Storno THEN
            FAJnlLine.VALIDATE("Depreciation Book Code", FATransformationSetup."Depreciation Book Debit")
          ELSE
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransformationSetup."Depreciation Book Credit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::Depreciation);
          FAJnlLine.VALIDATE("FA Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");
          FAJnlLine.VALIDATE(Description, FABuffer.Description);
          IF FATransformationSetup.Storno THEN
            FAJnlLine.VALIDATE(Amount, FABuffer."Amount (LCY)")
          ELSE
          FAJnlLine.VALIDATE(Amount, - FABuffer."Amount (LCY)");
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";

          IF FABuffer."Amount (LCY)" < 0 THEN
            FAJnlLine.VALIDATE(FAJnlLine.Correction, TRUE);

          FixedAsset.GET(CurFANo1);
          //NC MDB01 > MP
          {
          IF FixedAsset."FA Type" = FixedAsset."FA Type"::"Future Expense" THEN BEGIN
            IF FADeprBookFE.GET(CurFANo1,FATransformationSetup."Depreciation Book Credit") AND
              (FADeprBookFE."No. of Depreciation Months" <> FABuffer."No. of Depreciation Months") AND
              (FABuffer."No. of Depreciation Months" <> 0)
            THEN BEGIN
              FADeprBookFE.VALIDATE("No. of Depreciation Months",FABuffer."No. of Depreciation Months");
              FADeprBookFE.MODIFY;
            END;
          END;
          }
          //NC MDB01 < MP


          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE);

        }
      END ELSE BEGIN
        Indicator.CLOSE;
        ERROR(Text00001, FABuffer."Entry No.");
      END;

      END ELSE
      IF FABuffer.Removed THEN BEGIN
        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETCURRENTKEY(FABuf."Remove Oper. No");
        FABuf.SETRANGE(FABuf."Remove Oper. No", FABuffer."Entry No.");
        FABuf.SETRANGE(FABuf."Cons. Source Code", FABuffer."Cons. Source Code");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
            FATransformationSetup.RESET;
            FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            IsFACorrTransSetupFound := FALSE;
            FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
            FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                        TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                        TempMapping."Temp No. Of Symb. In Masks"));

            FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                         TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                         TempMapping."Temp No. Of Symb. In Masks"));

            FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
            FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"FA Journal");

            IF FATransformationSetup.FIND('-') THEN BEGIN

            //NC MFA01 > DP
              IsFACorrTransSetupFound := TRUE;
            END ELSE BEGIN
              FATransformationSetup.SETRANGE("Company Name");
              IF FATransformationSetup.FINDFIRST THEN
                BEGIN
                  IsFACorrTransSetupFound := TRUE;
                END ELSE BEGIN
                  FATransformationSetup.SETRANGE("FA Class Code");
                  IF FATransformationSetup.FINDFIRST THEN
                    IsFACorrTransSetupFound := TRUE;
                END;
            END;
            IF IsFACorrTransSetupFound THEN BEGIN
            //NC MFA01 < DP

                FALedgEntryError.RESET;
                FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                FALedgEntryError.SETRANGE(FALedgEntryError."Depreciation Book Code",
                                          FATransformationSetup."Depreciation Book Credit");
                IF FALedgEntryError.FINDFIRST THEN BEGIN
                  CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                END ELSE BEGIN
                  Indicator.CLOSE;
                  ERROR(Text00107, FABuffer."Entry No.");
                END;
              END ELSE BEGIN
                Indicator.CLOSE;
                ERROR(Text00001, FABuffer."Entry No.");
              END
           END;
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END ELSE
      IF (FABuffer."Source Operation No." <> 0) THEN BEGIN
        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");
        FABuf.SETRANGE("Entry No.",FABuffer."Source Operation No.");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
            FATransformationSetup.RESET;
            FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            IsFACorrTransSetupFound := FALSE;
            FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
            FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                        TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                        TempMapping."Temp No. Of Symb. In Masks"));
            FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                         TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                         TempMapping."Temp No. Of Symb. In Masks"));
            FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
            FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"FA Journal");
            IF FATransformationSetup.FIND('-') THEN BEGIN

            //NC MFA01 > DP
              IsFACorrTransSetupFound := TRUE;
            END ELSE BEGIN
              FATransformationSetup.SETRANGE("Company Name");
              IF FATransformationSetup.FINDFIRST THEN
                BEGIN
                  IsFACorrTransSetupFound := TRUE;
                END ELSE BEGIN
                  FATransformationSetup.SETRANGE("FA Class Code");
                  IF FATransformationSetup.FINDFIRST THEN
                    IsFACorrTransSetupFound := TRUE;
                END;
            END;
            IF IsFACorrTransSetupFound THEN BEGIN
            //NC MFA01 < DP

                FALedgEntryError.RESET;
                FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                FALedgEntryError.SETRANGE(FALedgEntryError."Depreciation Book Code",
                                          FATransformationSetup."Depreciation Book Credit");
                IF FALedgEntryError.FINDFIRST THEN BEGIN
                  CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                  PostDepriciation(FABuffer, TRUE,TempMapping);
                END ELSE BEGIN
                  Indicator.CLOSE;
                  ERROR(Text00107, FABuffer."Entry No.");
                END;
            END ELSE BEGIN
              Indicator.CLOSE;
              ERROR(Text00001, FABuffer."Entry No.");
            END
          END;
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END;
    END;

    PROCEDURE PostReclass@1210004(FABuffer@1210000 : Record 50008;CreateNew@1000000000 : Boolean;TempMapping@1000000005 : TEMPORARY Record 50022);
    VAR
      CurFANo1@1210016 : Code[20];
      CurFANo2@1210017 : Code[20];
      FAJnlAmountFict@1210015 : Decimal;
      SetupType@1210014 : 'Debit,Credit';
      CurTemplateCode@1210013 : Code[10];
      CurBatchCode@1210012 : Code[10];
      FAJnlBatch@1210009 : Record 5620;
      CurDocNo@1210008 : Code[20];
      LineNo@1210007 : Integer;
      DimType@1210006 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210005 : Record 81;
      FADocLineFict@1210004 : Record 12477;
      FAJnlLine1@1210003 : Record 5621;
      FAJnlLine@1210002 : Record 5621;
      FAJnlPostBatch@1210001 : Codeunit 5633;
      FAClassCode@1000000001 : Code[20];
      IsFATransSetupFound@1000000002 : Boolean;
      IsFACorrTransSetupFound@1000000003 : Boolean;
      DefaultDim@1000000004 : Record 352;
    BEGIN
      IF ((FABuffer."Source Operation No." = 0) AND (NOT FABuffer.Removed)) OR CreateNew THEN BEGIN

      FATransformationSetup.RESET;
      FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
      "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

      //NC MFA01 > DP
      IsFATransSetupFound := FALSE;
      FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
      //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
      FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
      {
      FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuffer."Cons. Source Code");
      }
      //NC MFA01 < DP

      FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                                                                  TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                  TempMapping."Temp No. Of Symb. In Masks"));
      FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                                                                   TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                   TempMapping."Temp No. Of Symb. In Masks"));
      FATransformationSetup.SETRANGE("FA Operation Type", FABuffer."FA Operation Type");

      //NC MFA03 > DP
      IF FABuffer."FA Class Code"<>'' THEN
        FATransformationSetup.SETRANGE("FA Class Code", FABuffer."FA Class Code");
      //NC MFA03 < DP

      FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");

      IF FATransformationSetup.FINDFIRST THEN BEGIN

      //NC MFA01 > DP
        IsFATransSetupFound := TRUE;
      END ELSE BEGIN
        FATransformationSetup.SETFILTER("Company Name",'%1','');
        IF FATransformationSetup.FINDFIRST THEN
          BEGIN
            IsFATransSetupFound := TRUE;
          END ELSE BEGIN
            FATransformationSetup.SETFILTER("FA Class Code",'%1','');
            IF FATransformationSetup.FINDFIRST THEN
              IsFATransSetupFound := TRUE;
          END;
      END;
      IF IsFATransSetupFound THEN BEGIN
      //NC MFA01 < DP
        CurFANo1 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,0D);
        CurFANo2 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
        //не формируем строки реклассификации в фин. журнале для проводки c настройкой Not Reclass
        IF NOT FATransformationSetup."Not Reclass" THEN BEGIN
          IF (FABuffer."Amount (LCY)" > 0)  THEN
            CreateReklass(CurFANo1,CurFANo2,FABuffer,FATransformationSetup,TempMapping.Code)
          ELSE
            CreateCorrGLReklass(CurFANo1,CurFANo2,FABuffer,FATransformationSetup,TempMapping.Code);
        END;

        {
        FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                   FATransformationSetup."Navision Document Type"::"FA Journal");
        IF FATransformationSetup.FIND('-') THEN BEGIN
          IF (FABuffer."Amount (LCY)" > 0) THEN
            CreateReklass(CurFANo1,CurFANo2,FABuffer,FATransformationSetup)
          ELSE
            CreateCorrFAReklass(CurFANo1,CurFANo2,FABuffer,FATransformationSetup);
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00001, FABuffer."Entry No.");
        END
        }

      END ELSE BEGIN
        Indicator.CLOSE;
        ERROR(Text00001, FABuffer."Entry No.");
      END;
      END ELSE
      IF FABuffer.Removed THEN BEGIN
        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETCURRENTKEY(FABuf."Remove Oper. No");
        FABuf.SETRANGE(FABuf."Remove Oper. No", FABuffer."Entry No.");
        FABuf.SETRANGE(FABuf."Cons. Source Code", FABuffer."Cons. Source Code");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
            FATransformationSetup.RESET;
            FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            IsFACorrTransSetupFound := FALSE;
            FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
            FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                        TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                        TempMapping."Temp No. Of Symb. In Masks"));

            FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                         TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                         TempMapping."Temp No. Of Symb. In Masks"));

            FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
            FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
            //NC MFA03 > DP
            IF FABuf."FA Class Code"<>'' THEN
              FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
            //NC MFA03 < DP

            IF FATransformationSetup.FINDFIRST THEN BEGIN

            //NC MFA01 > DP
              IsFACorrTransSetupFound := TRUE;
            END ELSE BEGIN
              FATransformationSetup.SETFILTER("Company Name",'%1','');
              IF FATransformationSetup.FINDFIRST THEN
              BEGIN
                IsFACorrTransSetupFound := TRUE;
              END ELSE BEGIN
                FATransformationSetup.SETFILTER("FA Class Code",'%1','');
                IF FATransformationSetup.FINDFIRST THEN
                  IsFACorrTransSetupFound := TRUE;
              END;
            END;
            IF IsFACorrTransSetupFound THEN BEGIN
            //NC MFA01 < DP

                IF NOT FATransformationSetup."Not Reclass" THEN BEGIN
                  FALedgEntryError.RESET;
                  FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                  FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                  FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                  FATransformationSetup."Depreciation Book Credit", FATransformationSetup."Depreciation Book Debit");
                  FALedgEntryError.SETFILTER("FA No.",'<>%1','');
                  IF FALedgEntryError.FINDFIRST THEN BEGIN

                    //Изменение аналитики COSTCENTER >
                    MovingDataSetup.GET;
                    MovingDataSetup.TESTFIELD("PROFIT CENTER Dimension Code");
                    TempDebitLedgEntryDim.RESET;
                    TempDebitLedgEntryDim.SETRANGE("Table ID",17);
                    TempDebitLedgEntryDim.SETRANGE("Entry No.",FABuf."Entry No.");
                    TempDebitLedgEntryDim.SETRANGE("Dimension Code",MovingDataSetup."PROFIT CENTER Dimension Code");
                    IF TempDebitLedgEntryDim.FINDFIRST THEN BEGIN
                      TempCreditLedgEntryDim.RESET;
                      TempCreditLedgEntryDim.SETRANGE("Table ID",17);
                      TempCreditLedgEntryDim.SETRANGE("Entry No.",FABuf."Entry No.");
                      TempCreditLedgEntryDim.SETRANGE("Dimension Code",MovingDataSetup."PROFIT CENTER Dimension Code");
                      IF TempCreditLedgEntryDim.FINDFIRST THEN BEGIN
                        IF TempCreditLedgEntryDim."Dimension Value Code"<>TempDebitLedgEntryDim."Dimension Value Code" THEN BEGIN
                          DefaultDim.INIT;
                          DefaultDim.VALIDATE("Table ID",DATABASE::"Fixed Asset");
                          DefaultDim.VALIDATE("No.",FALedgEntryError."FA No.");
                          DefaultDim.VALIDATE("Dimension Code", TempDebitLedgEntryDim."Dimension Code");
                          DefaultDim.VALIDATE("Dimension Value Code", TempDebitLedgEntryDim."Dimension Value Code");
                         IF NOT DefaultDim.INSERT(TRUE) THEN  DefaultDim.MODIFY(TRUE);
                        END;
                      END;
                      TempCreditLedgEntryDim.RESET;
                      TempDebitLedgEntryDim.RESET;
                    END;
                    //Изменение аналитики COSTCENTER <

                    CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);

                  END ELSE BEGIN
                    Indicator.CLOSE;
                    ERROR(Text00107, FABuffer."Entry No.");
                  END;

                END;

                {
                FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"FA Journal");
                IF FATransformationSetup.FINDFIRST THEN BEGIN
                  FALedgEntryError.RESET;
                  FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                  FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                  FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                  FATransformationSetup."Depreciation Book Credit", FATransformationSetup."Depreciation Book Debit");
                  IF FALedgEntryError.FINDFIRST THEN BEGIN
                    CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                  END ELSE BEGIN
                    Indicator.CLOSE;
                    ERROR(Text00107, FABuffer."Entry No.");
                  END;
                END ELSE BEGIN
                  Indicator.CLOSE;
                  ERROR(Text00001, FABuffer."Entry No.");
                END;
                }
            END ELSE BEGIN
              Indicator.CLOSE;
              ERROR(Text00001, FABuffer."Entry No.");
            END;
          END;
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END ELSE
      IF (FABuffer."Source Operation No." <> 0) THEN BEGIN
        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");
        FABuf.SETRANGE("Entry No.",FABuffer."Source Operation No.");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
            FATransformationSetup.RESET;
            FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            IsFACorrTransSetupFound := FALSE;
            FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
            FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                        TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                        TempMapping."Temp No. Of Symb. In Masks"));
            FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                         TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                         TempMapping."Temp No. Of Symb. In Masks"));
            FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
            FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
            //NC MFA03 > DP
            IF FABuf."FA Class Code"<>'' THEN
              FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
            //NC MFA03 < DP

            IF FATransformationSetup.FIND('-') THEN BEGIN

            //NC MFA01 > DP
              IsFACorrTransSetupFound := TRUE;
            END ELSE BEGIN
              FATransformationSetup.SETRANGE("Company Name");
              IF FATransformationSetup.FINDFIRST THEN
              BEGIN
                IsFACorrTransSetupFound := TRUE;
              END ELSE BEGIN
                FATransformationSetup.SETRANGE("FA Class Code");
                IF FATransformationSetup.FINDFIRST THEN
                  IsFACorrTransSetupFound := TRUE;
              END;
            END;
            IF IsFACorrTransSetupFound THEN BEGIN
            //NC MFA01 < DP

              IF NOT FATransformationSetup."Not Reclass" THEN BEGIN
                FALedgEntryError.RESET;
                FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                FATransformationSetup."Depreciation Book Credit", FATransformationSetup."Depreciation Book Debit");
                IF FALedgEntryError.FINDFIRST THEN BEGIN
                  CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                  CurFANo1 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,0D);
                  CurFANo2 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
                  IF NOT FATransformationSetup."Not Reclass" THEN BEGIN
                    //CreateCorrGLReklass(CurFANo1,CurFANo2,FABuffer,FATransformationSetup);
                    CreateReklass(CurFANo1,CurFANo2,FABuffer,FATransformationSetup,TempMapping.Code)
                    //CreateGenJourLine(CurFANo1,CurFANo2,FABuffer,FATransformationSetup,ABS(FALedgEntryError.Amount),'',0);
                  END ELSE BEGIN
                    Indicator.CLOSE;
                    ERROR(Text00001, FABuffer."Entry No.");
                  END
                END ELSE BEGIN
                  Indicator.CLOSE;
                  ERROR(Text00107, FABuffer."Entry No.");
                END;
              END ELSE BEGIN
                Indicator.CLOSE;
                ERROR(Text00001, FABuffer."Entry No.");
              END;


                {
                FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"FA Journal");
                IF FATransformationSetup.FINDFIRST THEN BEGIN

                  FALedgEntryError.RESET;
                  FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                  FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                  FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                  FATransformationSetup."Depreciation Book Credit", FATransformationSetup."Depreciation Book Debit");
                  IF FALedgEntryError.FINDFIRST THEN BEGIN
                    CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);

                    FATransformationSetup.RESET;
                    FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                    "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

                    //NC MFA01 > DP
                    IsFACorrTransSetupFound := FALSE;
                    FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
                    FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
                    {
                    FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuffer."Cons. Source Code");
                    }
                    //NC MFA01 < DP
                    FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                                                                              TempMapping.Code,
                                                                                              TempMapping."Temp No. Of Symb. In Masks"));

                    FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                                                                              TempMapping.Code,
                                                                                              TempMapping."Temp No. Of Symb. In Masks"));
                    FATransformationSetup.SETRANGE("FA Operation Type", FABuffer."FA Operation Type");

                    //NC MFA03 > DP
                    IF FABuf."FA Class Code"<>'' THEN
                      FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
                    //NC MFA03 < DP

                    IF FATransformationSetup.FIND('-') THEN BEGIN
                    //NC MFA01 > DP
                      IsFACorrTransSetupFound := TRUE;
                    END ELSE BEGIN
                      FATransformationSetup.SETRANGE("Company Name");
                      IF FATransformationSetup.FINDFIRST THEN
                        IsFACorrTransSetupFound := TRUE;
                    END;
                    IF IsFACorrTransSetupFound THEN BEGIN
                    //NC MFA01 < DP

                  END ELSE BEGIN
                    Indicator.CLOSE;
                    ERROR(Text00107, FABuffer."Entry No.");
                  END;
                END ELSE BEGIN
                  Indicator.CLOSE;
                  ERROR(Text00001, FABuffer."Entry No.");
                END;
                }

            END ELSE BEGIN
              Indicator.CLOSE;
              ERROR(Text00001, FABuffer."Entry No.");
            END;
          END ELSE
            PostReclass(FABuffer,TRUE,TempMapping);
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END;
    END;

    PROCEDURE PostWriteOff@1000000086(FABuffer@1000000000 : Record 50008;CreateNew@1210018 : Boolean;TempMapping@1000000003 : TEMPORARY Record 50022);
    VAR
      CurFANo1@1210016 : Code[20];
      CurFANo2@1210015 : Code[20];
      FAJnlAmountFict@1210014 : Decimal;
      SetupType@1210013 : 'Debit,Credit';
      CurTemplateCode@1210012 : Code[10];
      CurBatchCode@1210011 : Code[10];
      ConsolidationSetup@1210009 : Record 50000;
      FAJnlBatch@1210008 : Record 5620;
      CurDocNo@1210007 : Code[20];
      LineNo@1210006 : Integer;
      DimType@1210005 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210004 : Record 81;
      FADocLineFict@1210003 : Record 12477;
      FAJnlLine1@1210002 : Record 5621;
      FAJnlLine@1210001 : Record 5621;
      FAJnlPostBatch@1210000 : Codeunit 5633;
      FixedAsset@1210017 : Record 5600;
      FAClassCode@1000000001 : Code[10];
      IsFATransSetupFound@1000000002 : Boolean;
    BEGIN
      IF ((FABuffer."Source Operation No." = 0) AND (NOT FABuffer.Removed)) OR CreateNew THEN BEGIN

      FATransformationSetup.RESET;
      FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
      "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

      //NC MFA01 > DP
      IsFATransSetupFound := FALSE;
      FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
      //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
      FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
      {
      FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuffer."Cons. Source Code");
      }
      //NC MFA01 < DP

      FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                                                                  TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                  TempMapping."Temp No. Of Symb. In Masks"));

      FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                                                                   TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                   TempMapping."Temp No. Of Symb. In Masks"));

      FATransformationSetup.SETRANGE("FA Operation Type", FABuffer."FA Operation Type");
      IF FATransformationSetup.FIND('-') THEN BEGIN

      //NC MFA01 > DP
        IsFATransSetupFound := TRUE;
      END ELSE BEGIN
        FATransformationSetup.SETRANGE("Company Name");
        IF FATransformationSetup.FINDFIRST THEN
          BEGIN
            IsFATransSetupFound := TRUE;
          END ELSE BEGIN
            FATransformationSetup.SETRANGE("FA Class Code");
            IF FATransformationSetup.FINDFIRST THEN
              IsFATransSetupFound := TRUE;
          END;
      END;
      IF IsFATransSetupFound THEN BEGIN
      //NC MFA01 < DP

        CurFANo1 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);

        FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
        FixedAsset.GET(CurFANo1);
        CreateGenJourLine('',CurFANo1,FABuffer,FATransformationSetup,0,'',0,TempMapping);
      END ELSE BEGIN
        Indicator.CLOSE;
        ERROR(Text00001, FABuffer."Entry No.");
      END;
      END ELSE
      IF FABuffer.Removed THEN BEGIN
        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETCURRENTKEY(FABuf."Remove Oper. No");
        FABuf.SETRANGE(FABuf."Remove Oper. No", FABuffer."Entry No.");
        FABuf.SETRANGE(FABuf."Cons. Source Code", FABuffer."Cons. Source Code");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
            FALedgEntryError.RESET;
            FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
            FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
            FALedgEntryError.SETRANGE("FA Posting Type",FALedgEntryError."FA Posting Type"::"Proceeds on Disposal");
            IF FALedgEntryError.FINDFIRST THEN BEGIN
              CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
            END ELSE BEGIN
              Indicator.CLOSE;
              ERROR(Text00107, FABuffer."Entry No.");
            END;
          END;
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END ELSE
      IF (FABuffer."Source Operation No." <> 0) THEN BEGIN
        FABuf.RESET;
        //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
        FABuf.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");
        FABuf.SETRANGE("Entry No.",FABuffer."Source Operation No.");
        IF FABuf.FINDFIRST THEN BEGIN
          IF FABuf."FA Operation Exported" THEN BEGIN
            FALedgEntryError.RESET;
            FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
            FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
            FALedgEntryError.SETRANGE("FA Posting Type",FALedgEntryError."FA Posting Type"::"Proceeds on Disposal");
            IF FALedgEntryError.FINDFIRST THEN BEGIN
              CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
              PostWriteOff(FABuffer, TRUE, TempMapping);
            END ELSE BEGIN
              Indicator.CLOSE;
              ERROR(Text00107, FABuffer."Entry No.");
            END;
          END ELSE
            PostWriteOff(FABuffer, TRUE, TempMapping);
        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00106, FABuffer."Entry No.");
        END;
      END;
    END;

    PROCEDURE CreateFACard@1210006(FABuffer@1210012 : Record 50008;SetupType@1210013 : 'Debit,Credit';VAR FATransformationSetup@1210014 : Record 50004;StartDepreciationDate@1210022 : Date) : Code[20];
    VAR
      DefaultDim@1210011 : Record 352;
      DefaultDim2@1210010 : Record 352;
      FA@1210009 : Record 5600;
      FA2@1210008 : Record 5600;
      FANo@1210005 : Code[20];
      FANo2@1210004 : Code[20];
      FirstFANo@1210003 : Code[20];
      UseFANoSeries@1210002 : Boolean;
      NumberofCopies@1210001 : Integer;
      I@1210000 : Integer;
      NewFANo@1210015 : Code[20];
      FADescr@1210016 : Text[50];
      FAClass@1210006 : Record 5607;
      FAClass1@1210007 : Record 5607;
      FAClassCode@1210017 : Code[10];
      DimValueCodeFE@1210018 : Code[20];
      DimCodeFE@1210019 : Code[20];
      DimValueCodeFEInSource@1210020 : Code[20];
      DimCodeFEInSource@1210021 : Code[20];
      DeprBeginDate@1000000000 : Date;
      DimValue@1210023 : Record 349;
      FACatalog@1000000001 : Record 50044;
    BEGIN
      IF SetupType = SetupType::Debit THEN BEGIN
        IF FABuffer."Debit Dimension 17 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Debit Dimension 17 Value Code";
          FAType := FAType::CIP;
          DimCode := FABuffer."Dimension 17 Code";
          DimValueCode := FABuffer."Debit Dimension 17 Value Code";
        END ELSE
        IF FABuffer."Debit Dimension 18 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Debit Dimension 18 Value Code";
          FAType := FAType::IA;
          DimCode := FABuffer."Dimension 18 Code";
          DimValueCode := FABuffer."Debit Dimension 18 Value Code";
        END ELSE
        IF FABuffer."Debit Dimension 19 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Debit Dimension 19 Value Code";
          FAType := FAType::FA;
          DimCode := FABuffer."Dimension 19 Code";
          DimValueCode := FABuffer."Debit Dimension 19 Value Code";
        END
        ELSE
        IF FABuffer."Debit Dimension 20 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Debit Dimension 20 Value Code";
          FAType := FAType::FE;
          DimCode := FABuffer."Dimension 20 Code";
          DimValueCode := FABuffer."Debit Dimension 20 Value Code";
        END
      END ELSE BEGIN
       IF FABuffer."Credit Dimension 17 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Credit Dimension 17 Value Code";
          FAType := FAType::CIP;
          DimCode := FABuffer."Dimension 17 Code";
          DimValueCode := FABuffer."Credit Dimension 17 Value Code";
        END ELSE
        IF FABuffer."Credit Dimension 18 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Credit Dimension 18 Value Code";
          FAType := FAType::IA;
          DimCode := FABuffer."Dimension 18 Code";
          DimValueCode := FABuffer."Credit Dimension 18 Value Code";
        END ELSE
        IF FABuffer."Credit Dimension 19 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Credit Dimension 19 Value Code";
          FAType := FAType::FA;
          DimCode := FABuffer."Dimension 19 Code";
          DimValueCode := FABuffer."Credit Dimension 19 Value Code";
        END ELSE
        IF FABuffer."Credit Dimension 20 Value Code" <> '' THEN BEGIN
          NewFANo := FABuffer."Credit Dimension 20 Value Code";
          FAType := FAType::FE;
          DimCode := FABuffer."Dimension 20 Code";
          DimValueCode := FABuffer."Credit Dimension 20 Value Code";
        END;

      END;
      IF (DimCode<>'') AND (DimValueCode<>'') THEN
        FADescr := GetDimValueName(DimCode,DimValueCode);

      //NC MFA11 > DP
      IF FACatalog.GET(NewFANo) THEN
        FAType := FACatalog."Type FA"+1;
      IF FATransformationSetup."FA Type"<>FATransformationSetup."FA Type"::" " THEN
        FAType := FATransformationSetup."FA Type"-1;
      //NC MFA11 < DP

      FA.RESET;
      FA.SETCURRENTKEY(FA."Inventory Number","FA Card Type");
      FA.SETRANGE(FA."Inventory Number",NewFANo);
      IF FAType = FAType::CIP THEN
        FA.SETRANGE(FA."FA Card Type",FA."FA Card Type"::CIP)
      ELSE
        FA.SETRANGE(FA."FA Card Type",FA."FA Card Type"::FA);

      IF FAType = FAType::FA THEN
        FA.SETRANGE(FA."FA Type",FA."FA Type"::"Fixed Assets");
      IF FAType = FAType::IA THEN
        FA.SETRANGE(FA."FA Type",FA."FA Type"::"Intangible Asset");
      IF FAType = FAType::FE THEN
        FA.SETRANGE(FA."FA Type",FA."FA Type"::"Future Expense");
      IF FA.FINDFIRST THEN BEGIN
        //Вставка новых книг амортизации в уже существующую карточку ОС

        FADeprBook.RESET;
        FADeprBook.SETRANGE(FADeprBook."FA No.",FA."No.");
        CLEAR(DeprBeginDate);
        IF FADeprBook.FINDFIRST THEN
          DeprBeginDate := FADeprBook."Depreciation Starting Date"; //эта дата используется при реклассификации

        FA.SetFADeprPeriod;

        IF FATransformationSetup.FINDSET THEN
        REPEAT
        IF (NOT FA."Leasing Asset") OR (FA."Leasing Asset" AND FATransformationSetup."Leasing Object") THEN BEGIN
          IF SetupType = SetupType::Debit THEN
            FADeprBook.SETRANGE(FADeprBook."Depreciation Book Code", FATransformationSetup."Depreciation Book Debit")
          ELSE
            FADeprBook.SETRANGE(FADeprBook."Depreciation Book Code", FATransformationSetup."Depreciation Book Credit");

          IF NOT FADeprBook.FINDFIRST THEN BEGIN
            FADeprBook.INIT;
            FADeprBook."FA No." := FA."No.";
            IF SetupType = SetupType::Debit THEN BEGIN
              FADeprBook.VALIDATE("Depreciation Book Code",FATransformationSetup."Depreciation Book Debit");
              FADeprBook.VALIDATE("FA Posting Group", FATransformationSetup."FA Posting Group Debit");
            END ELSE BEGIN
              FADeprBook.VALIDATE("Depreciation Book Code",FATransformationSetup."Depreciation Book Credit");
              FADeprBook.VALIDATE("FA Posting Group", FATransformationSetup."FA Posting Group Credit");
            END;
            FADeprBook.VALIDATE("Depreciation Method",FADeprBook."Depreciation Method"::"Straight-Line");

            IF StartDepreciationDate = 0D THEN BEGIN
              //NC MFA37 > DP
              IF FACatalog.GET(FA."Inventory Number") THEN;
              IF (DeprBeginDate=0D) OR FACatalog."Redefine Depr. Staring Date" THEN BEGIN
                IF  (FACatalog."Depreciation Starting Date"<>0D) THEN BEGIN
                  FADeprBook.VALIDATE("Depreciation Starting Date", FACatalog."Depreciation Starting Date");
                END ELSE BEGIN
                  FADeprBook.VALIDATE("Depreciation Starting Date",DeprBeginDate);
                END;
              END ELSE BEGIN
              //NC MFA37 < DP

                  FADeprBook.VALIDATE("Depreciation Starting Date",DeprBeginDate);
              END;
            END ELSE
              FADeprBook.VALIDATE("Depreciation Starting Date",StartDepreciationDate);

            //NC MFA05 > DP
            FADeprBook."Inventory Number" :=FA."Inventory Number";
            IF FATransformationSetup."FA Class Code"<>'' THEN
              IF FAClass.GET(FATransformationSetup."FA Class Code") THEN BEGIN
                IF FAClass."No. of Depreciation Months"<>0 THEN
                  FADeprBook.VALIDATE("No. of Depreciation Months", FAClass."No. of Depreciation Months");
                IF FAClass."Straight-Line %"<>0 THEN
                  FADeprBook.VALIDATE("Straight-Line %",FAClass."Straight-Line %");
              END;
            IF (FABuffer."FA Class Code"<>'') AND (FATransformationSetup."FA Class Code"='') THEN
              IF FAClass.GET(FABuffer."FA Class Code") THEN BEGIN
                IF FAClass."No. of Depreciation Months"<>0 THEN
                  FADeprBook.VALIDATE("No. of Depreciation Months", FAClass."No. of Depreciation Months");
                IF FAClass."Straight-Line %"<>0 THEN
                  FADeprBook.VALIDATE("Straight-Line %",FAClass."Straight-Line %");
              END;

            //NC MFA05 < DP



            //NC MFA04 > DP
            IF FAType = FAType::FE THEN

            //NC MFA04.1 > DP
            BEGIN
            //NC MFA04.1 < DP

              IF FACatalog.GET(FA."Inventory Number") THEN BEGIN
                IF FACatalog."No of Depreciation Months"<>0 THEN
                  FADeprBook.VALIDATE("No. of Depreciation Months", FACatalog."No of Depreciation Months");
                //NC MFA41 > DP
                IF FACatalog."FA Class Code"<>'' THEN
                  FA.VALIDATE("FA Class Code",FACatalog."FA Class Code");
                //NC MFA41 < DP
              END;
            //NC MFA04 < DP

            //NC MFA04.1 > DP
            END ELSE BEGIN
              IF FACatalog.GET(FA."Inventory Number") THEN BEGIN
                IF FACatalog."FA Class Code"<>'' THEN
                  FA.VALIDATE("FA Class Code",FACatalog."FA Class Code");
              END;
            END;
            //NC MFA04.1 < DP

            FADeprBook.INSERT(TRUE);
          END;
        END;

        UNTIL FATransformationSetup.NEXT = 0;

        IF NOT DimValue.GET(DimCode,DimValueCode) THEN BEGIN
          DimValue.INIT;
          DimValue."Dimension Code" := DimCode;
          DimValue.Code := DimValueCode;
          DimValue.Name := FADescr;
          DimValue.INSERT(TRUE);
        END;

        DefaultDim.RESET;
        DefaultDim.INIT;
        DefaultDim.VALIDATE("Table ID",DATABASE::"Fixed Asset");
        DefaultDim.VALIDATE("No.",NewFANo);
        DefaultDim.VALIDATE(DefaultDim."Dimension Code", DimCode);
        DefaultDim.VALIDATE(DefaultDim."Dimension Value Code", DimValueCode);

        //NC M1 > DP
        DefaultDim."Value Posting" := DefaultDim."Value Posting"::"Same Code";
        //NC M1 < DP

        IF NOT DefaultDim.INSERT(TRUE) THEN
          DefaultDim.MODIFY(TRUE);


      NewFANo := FA."No.";
      END ELSE BEGIN
      //Создание новой карточки ОС
        FA.RESET;
        FA.INIT;

        //NC MFA04 > DP
        IF FACatalog.GET(NewFANo) THEN BEGIN
          FASetup.GET;

          //NC MFA11 > DP
          IF FATransformationSetup."FA Type"<>FATransformationSetup."FA Type"::" " THEN
            FAType := FATransformationSetup."FA Type"-1
          ELSE
            FAType:=FACatalog."Type FA"+1;
          //NC MFA11 > DP

          FA."No." :=NewFANo;
          {
          IF FAType = FAType::CIP THEN BEGIN
            FASetup.TESTFIELD(FASetup."OVA Nos.");
            FA."No." := NoSeriesManagement.GetNextNo(FASetup."OVA Nos.",0D,TRUE);
          END ELSE BEGIN
            IF FAType = FAType::FE THEN BEGIN
              FASetup.TESTFIELD("Future Expencies Nos.");
              FA."No." := NoSeriesManagement.GetNextNo(FASetup."Future Expencies Nos.",0D,TRUE);
            END ELSE BEGIN
              FASetup.TESTFIELD("Fixed Asset Nos.");
              FA."No." := NoSeriesManagement.GetNextNo(FASetup."Fixed Asset Nos.",0D,TRUE);
            END;
          END;
          //NC MFA01 < DP

          FA.INSERT(TRUE);
          }
          FA.INSERT;
          //NC MFA01 < DP


          FA.Description := COPYSTR(FACatalog.Name,1,30);
          FA."Search Description" := FA.Description;
          IF (STRLEN (FADescr) > 30) THEN
            FA."Description 2" := COPYSTR (FACatalog.Name,31,MAXSTRLEN(FA."Description 2"));
          FA."Inventory Number" := NewFANo;

          IF FATransformationSetup."FA Type"<>FATransformationSetup."FA Type"::" " THEN BEGIN
            CASE FAType OF
              FAType::FA: FA."FA Type" := FA."FA Type"::"Fixed Assets";
              FAType::IA: FA."FA Type" := FA."FA Type"::"Intangible Asset";
              FAType::FE: FA."FA Type" := FA."FA Type"::"Future Expense";
            END;
          END ELSE
            CASE FACatalog."Type FA" OF
              FACatalog."Type FA"::FA: FA."FA Type" := FA."FA Type"::"Fixed Assets";
              FACatalog."Type FA"::IA: FA."FA Type" := FA."FA Type"::"Intangible Asset";
              FACatalog."Type FA"::FE: FA."FA Type" := FA."FA Type"::"Future Expense";
            END;

          IF FAType = FAType::CIP THEN
            FA."FA Card Type" := FA."FA Card Type"::CIP
          ELSE
            FA."FA Card Type" := FA."FA Card Type"::FA;
          FA.VALIDATE("FA Class Code", FACatalog."FA Class Code");


        //NC MFA04 < DP


        END ELSE BEGIN
          FASetup.GET;
          IF FAType = FAType::CIP THEN BEGIN
            FASetup.TESTFIELD(FASetup."OVA Nos.");
            FA."No." := NoSeriesManagement.GetNextNo(FASetup."OVA Nos.",0D,TRUE);
          END ELSE BEGIN
            IF FAType = FAType::FE THEN BEGIN
              FASetup.TESTFIELD("Future Expencies Nos.");
              FA."No." := NoSeriesManagement.GetNextNo(FASetup."Future Expencies Nos.",0D,TRUE);
            END ELSE BEGIN
              FASetup.TESTFIELD("Fixed Asset Nos.");
              FA."No." := NoSeriesManagement.GetNextNo(FASetup."Fixed Asset Nos.",0D,TRUE);
            END;
          END;
          //NC MFA01 < DP
          {
          FA.INSERT(TRUE);
          }
          FA.INSERT;
          //NC MFA01 < DP

          FA.Description := COPYSTR(FADescr,1,30);
          FA."Search Description" := FA.Description;
          IF (STRLEN (FADescr) > 30) THEN
            FA."Description 2" := COPYSTR (FADescr,31,STRLEN (FADescr));
          FA."Inventory Number" := NewFANo;
          CASE FAType OF
            FAType::FA: FA."FA Type" := FA."FA Type"::"Fixed Assets";
            FAType::IA: FA."FA Type" := FA."FA Type"::"Intangible Asset";
            FAType::FE: FA."FA Type" := FA."FA Type"::"Future Expense";
          END;
          IF FAType = FAType::CIP THEN
            FA."FA Card Type" := FA."FA Card Type"::CIP
          ELSE
            FA."FA Card Type" := FA."FA Card Type"::FA;
          FA.VALIDATE("FA Class Code", FATransformationSetup."FA Class Code")

        //NC MFA04 > DP
        END;
        //NC MFA04 < DP

        //NC MFA01 < DP
        {
        FA.MODIFY(TRUE);
        }
        FA.MODIFY;
        //NC MFA01 < DP

        NewFANo :=  FA."No.";

        //Вставка новых книг амортизации
        FADeprBook.RESET;
        FADeprBook.SETRANGE(FADeprBook."FA No.",FA."No.");
        IF FATransformationSetup.FINDSET THEN
        REPEAT
          IF SetupType = SetupType::Debit THEN
            FADeprBook.SETRANGE(FADeprBook."Depreciation Book Code", FATransformationSetup."Depreciation Book Debit")
          ELSE
            FADeprBook.SETRANGE(FADeprBook."Depreciation Book Code", FATransformationSetup."Depreciation Book Credit");

          IF NOT FADeprBook.FINDFIRST THEN BEGIN
            FADeprBook.INIT;
            FADeprBook."FA No." := FA."No.";
            IF SetupType = SetupType::Debit THEN BEGIN
              FADeprBook.VALIDATE("Depreciation Book Code",FATransformationSetup."Depreciation Book Debit");
              FADeprBook.VALIDATE("FA Posting Group", FATransformationSetup."FA Posting Group Debit");
            END ELSE BEGIN
              FADeprBook.VALIDATE("Depreciation Book Code",FATransformationSetup."Depreciation Book Credit");
              FADeprBook.VALIDATE("FA Posting Group", FATransformationSetup."FA Posting Group Credit");
            END;
            FADeprBook.VALIDATE("Depreciation Method",FADeprBook."Depreciation Method"::"Straight-Line");

            IF StartDepreciationDate <> 0D THEN
              FADeprBook.VALIDATE("Depreciation Starting Date",StartDepreciationDate);

            //NC MFA05 > DP
            FADeprBook."Inventory Number" :=FA."Inventory Number";
            IF FATransformationSetup."FA Class Code"<>'' THEN
              IF FAClass.GET(FATransformationSetup."FA Class Code") THEN BEGIN
                IF FAClass."No. of Depreciation Months"<>0 THEN
                  FADeprBook.VALIDATE("No. of Depreciation Months", FAClass."No. of Depreciation Months");
                IF FAClass."Straight-Line %"<>0 THEN
                  FADeprBook.VALIDATE("Straight-Line %",FAClass."Straight-Line %");
              END;

            //NC MFA04 > DP


            IF FAType = FAType::FE THEN

            //NC MFA04.1 > DP
            BEGIN
            //NC MFA04.1 < DP

              IF FACatalog.GET(FA."Inventory Number") THEN BEGIN
                IF FACatalog."No of Depreciation Months"<>0 THEN
                  FADeprBook.VALIDATE("No. of Depreciation Months", FACatalog."No of Depreciation Months");
                //NC MFA41 > DP
                IF FACatalog."FA Class Code"<>'' THEN
                  FA.VALIDATE("FA Class Code",FACatalog."FA Class Code");
                //NC MFA41 < DP
              END;

            //NC MFA04.1 > DP
            END ELSE BEGIN
              IF FACatalog.GET(FA."Inventory Number") THEN BEGIN
                IF FACatalog."FA Class Code"<>'' THEN
                  FA.VALIDATE("FA Class Code",FACatalog."FA Class Code");
              END;
            END;
            //NC MFA04.1 < DP
            //NC MFA04 < DP

            {
            FADeprBook.INSERT(TRUE);
            }
            FADeprBook.INSERT;
            //NC MFA05 < DP
          END;
        UNTIL FATransformationSetup.NEXT = 0;


        IF NOT DimValue.GET(DimCode,DimValueCode) THEN BEGIN
          DimValue.INIT;
          DimValue."Dimension Code" := DimCode;
          DimValue.Code := DimValueCode;
          DimValue.Name := FADescr;
          DimValue.INSERT(TRUE);
        END;

        DefaultDim.RESET;
        DefaultDim.INIT;
        DefaultDim.VALIDATE("Table ID",DATABASE::"Fixed Asset");
        DefaultDim.VALIDATE("No.",NewFANo);
        DefaultDim.VALIDATE(DefaultDim."Dimension Code", DimCode);
        DefaultDim.VALIDATE(DefaultDim."Dimension Value Code", DimValueCode);

        //NC M1 > DP
        DefaultDim."Value Posting" := DefaultDim."Value Posting"::"Same Code";
        //NC M1 < DP

        IF NOT DefaultDim.INSERT(TRUE) THEN
          DefaultDim.MODIFY(TRUE);

        //Вставка стандартного измерения CostCenter
        IF FACatalog.GET(FA."Inventory Number") THEN BEGIN
          IF FACatalog."Profit Center"<>'' THEN BEGIN
            MovingDataSetup.GET;
            MovingDataSetup.TESTFIELD("PROFIT CENTER Dimension Code");
            DefaultDim.INIT;
            DefaultDim.VALIDATE("Table ID",DATABASE::"Fixed Asset");
            DefaultDim.VALIDATE("No.",FA."No.");
            DefaultDim.VALIDATE(DefaultDim."Dimension Code", MovingDataSetup."PROFIT CENTER Dimension Code");
            DefaultDim.VALIDATE(DefaultDim."Dimension Value Code", FACatalog."Profit Center");

            //NC M1 > DP
            DefaultDim."Value Posting" := DefaultDim."Value Posting"::"Code Mandatory";
            //NC M1 < DP

            IF NOT DefaultDim.INSERT(TRUE) THEN
              DefaultDim.MODIFY(TRUE);
          END;
        END;

        //Вставка стандартного измерения Контрагент для РБП
        IF FAType = FAType::FE THEN BEGIN
          MovingDataSetup.GET;
          MovingDataSetup.TESTFIELD("Customer Dimension Code");
          TempCreditLedgEntryDim.RESET;
          TempCreditLedgEntryDim.SETRANGE("Entry No.", FABuffer."Entry No.");
          TempCreditLedgEntryDim.SETRANGE("Dimension Code", MovingDataSetup."Customer Dimension Code");
          IF TempCreditLedgEntryDim.FINDFIRST THEN BEGIN
            DefaultDim.INIT;
            DefaultDim.VALIDATE("Table ID",DATABASE::"Fixed Asset");
            DefaultDim.VALIDATE("No.",FA."No.");
            DefaultDim.VALIDATE(DefaultDim."Dimension Code", MovingDataSetup."Customer Dimension Code");
            DefaultDim.VALIDATE(DefaultDim."Dimension Value Code", TempCreditLedgEntryDim."Dimension Value Code");

            //NC M1 > DP
            DefaultDim."Value Posting" := DefaultDim."Value Posting"::"Code Mandatory";
            //NC M1 < DP

            IF NOT DefaultDim.INSERT(TRUE) THEN
              DefaultDim.MODIFY(TRUE);
          END;
        END;
      END;
      EXIT(NewFANo);
    END;

    PROCEDURE CreateGenJourLine@1210002(FANo1@1210001 : Code[20];FANo2@1210005 : Code[20];FABuffer@1210002 : Record 50008;VAR FATransSetup@1210000 : Record 50004;FaJnlAmountUSD@1210022 : Decimal;ErrorConsSourceCode@1210024 : Code[20];ErrorBufEntryNo@1210025 : Integer;TempMapping@1000000004 : TEMPORARY Record 50022);
    VAR
      FADeprBook@1210003 : Record 5612;
      OpType@1210004 : 'Debet,Credit';
      GenJnlLine@1210006 : Record 81;
      GenJnlLine1@1210007 : Record 81;
      Currency@1210008 : Record 4;
      GLSetup@1210010 : Record 98;
      LineNo@1210009 : Integer;
      FADocLineFict@1210011 : Record 12477;
      FAJnlLineFict@1210012 : Record 5621;
      DimType@1210013 : 'Journal,Document,FAJournal';
      CurDocNo@1210014 : Code[20];
      GenJnlBatch@1210015 : Record 232;
      NoSeriesMgt@1210016 : Codeunit 396;
      CurTemplateCode@1210017 : Code[10];
      CurBatchCode@1210018 : Code[10];
      ConsolidationSetup@1210020 : Record 50000;
      ConsolidationSource1@1000000003 : Record 50001;
      GenJnlPostBatch@1210021 : Codeunit 13;
      FixedAsset@1210023 : Record 5600;
      CorrCoef@1210026 : Decimal;
      FADeprBookFE@1210027 : Record 5612;
      GLEntryTemp@1101495000 : TEMPORARY Record 17;
      AccountType@1000000000 : 'Income Statement,Balance Sheet';
      FXAmountLCY@1000000001 : Decimal;
      DTGLAccCode@1000000002 : Code[20];
      CTGLAccCode@1000000007 : Code[20];
      ConsRegister@1000000005 : Record 50005;
      TempFALedgerEntry@1000000006 : TEMPORARY Record 5601;
    BEGIN
      GLSetup.GET;
      IF ErrorConsSourceCode <> '' THEN BEGIN
        CorrCoef := -1;
        FALedgEntryError.RESET;
        FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuffer."Cons. Source Code");
        FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuffer."Entry No.");
        FALedgEntryError.SETRANGE(FALedgEntryError."Reklass. Capital %",FALSE);
        FALedgEntryError.SETFILTER(FALedgEntryError."FA No.",'<>%1','');
        FALedgEntryError.SETRANGE("Depreciation Book Code",FATransSetup."Depreciation Book Debit");
        IF NOT FALedgEntryError.FINDFIRST THEN BEGIN
          Indicator.CLOSE;
          ERROR(Text00107, FABuffer."Entry No.", ErrorBufEntryNo);
        END;
      END ELSE
        CorrCoef := 1;

      IF (FABuffer."Amount (LCY)" < 0) AND (FABuffer."FA Operation Type" =
                                            FABuffer."FA Operation Type"::Release)
      THEN
        CorrCoef := -1;
      IF (FABuffer."Amount (LCY)" > 0) AND (FABuffer."FA Operation Type" =
                                            FABuffer."FA Operation Type"::Release)
      THEN
        CorrCoef := 1;

      //Определение шаблона и раздела журнала
      //ConsolidationSource1.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsolidationSource1.GET(FABuffer."Cons. Source Code");

      //NC MFA07 > DP
      //Сумма FX разницы расчитывается по каждой буферной записи
      FXAmountLCY := 0;
      //NC MFA07 < DP

      CASE FABuffer."FA Operation Type" OF
           FABuffer."FA Operation Type"::Acquisition:BEGIN
               ConsolidationSource1.TESTFIELD("Acquisition Gen. Batch Name");
               CurBatchCode := ConsolidationSource1."Acquisition Gen. Batch Name"
             END;
           FABuffer."FA Operation Type"::Release:BEGIN
               ConsolidationSource1.TESTFIELD("Release Gen. Batch Name");
               CurBatchCode := ConsolidationSource1."Release Gen. Batch Name";
             END;
           FABuffer."FA Operation Type"::Reclass,FABuffer."FA Operation Type"::LeasingRelease:BEGIN
               ConsolidationSource1.TESTFIELD("Reclass. Gen. Batch Name");
               CurBatchCode := ConsolidationSource1."Reclass. Gen. Batch Name";
            END;
           FABuffer."FA Operation Type"::WriteOff:BEGIN
               ConsolidationSource1.TESTFIELD("Dispose Gen. Batch Name");
               CurBatchCode := ConsolidationSource1."Dispose Gen. Batch Name";
            END;
           //NC MFA23 > DP
           FABuffer."FA Operation Type"::Depreciation:BEGIN
               ConsolidationSource1.TESTFIELD("Depreciation Gen. Batch Name");
               CurBatchCode := ConsolidationSource1."Depreciation Gen. Batch Name";
             END;
           //NC MFA23 < DP
      END;

      ConsolidationSetup.GET;
      ConsolidationSetup.TESTFIELD(ConsolidationSetup."FA Import Journal Template");
      CurTemplateCode := ConsolidationSetup."FA Import Journal Template";


      //Определение номера документа и номера строки журнала
      GenJnlLine1.SETRANGE("Journal Template Name", CurTemplateCode);
      GenJnlLine1.SETRANGE("Journal Batch Name", CurBatchCode);
      IF GenJnlLine1.FIND('+') THEN BEGIN
        CurDocNo := INCSTR(GenJnlLine1."Document No.");
        LineNo := GenJnlLine1."Line No." + 10000
      END ELSE BEGIN
        LineNo := 10000;
        GenJnlBatch.GET(CurTemplateCode,CurBatchCode);
        GenJnlBatch.TESTFIELD(GenJnlBatch."No. Series");
        CLEAR(NoSeriesMgt);
        CurDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series", FABuffer."Document Date",FALSE);
      END;

      //Создание строки для Дебета
      IF FABuffer."FA Operation Type" <> FABuffer."FA Operation Type"::WriteOff THEN BEGIN

      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",CurTemplateCode);
      GenJnlLine.VALIDATE("Journal Batch Name",CurBatchCode);
      GenJnlLine."Line No." := LineNo;
      GenJnlLine.VALIDATE("Document No.",CurDocNo);

      IF  FABuffer."Document Date" < GLSetup."Allow Posting From" THEN BEGIN
        GenJnlLine."Source Historical Date" :=  FABuffer."Document Date";
        GenJnlLine.VALIDATE("Posting Date", GLSetup."Allow Posting From");
      END ELSE
        GenJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");

      //NC MFA13 < DP
      IF FABuffer."Document Date" < GLSetup."Allow Transformation From" THEN BEGIN
        GenJnlLine.VALIDATE("Posting Date", GLSetup."Allow Transformation From");
        GenJnlLine."Source Historical Date" := FABuffer."Document Date";
        GenJnlLine."Journal Batch Name" := ConsolidationSource."Closed Period Batch Name";
      END;
      //NC MFA13 < DP

      GenJnlLine.VALIDATE("FA Posting Date", GenJnlLine."Posting Date");
      GenJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");

      IF ErrorConsSourceCode = '' THEN BEGIN
        GenJnlLine."Buffer Entry No." := FABuffer."Entry No.";
        GenJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
        GenJnlLine."External Document Type" := FABuffer."Document Type";
        GenJnlLine."External Document ID" := FABuffer."Document No.";
        GenJnlLine."External Document Date" := FABuffer."Document Date";
        GenJnlLine."External Operation No" := FABuffer."Operation No.";

      END ELSE BEGIN
        GenJnlLine."Buffer Entry No." := ErrorBufEntryNo;
        GenJnlLine."Cons. Source Code" := ErrorConsSourceCode;
        GenJnlLine.VALIDATE("FA Error Entry No.", FALedgEntryError."Entry No.");
      END;

      GenJnlLine."Capital %" := FATransSetup."Capital. Percent";

      IF FATransSetup."Depreciation Book Debit" <> '' THEN BEGIN
        GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"Fixed Asset");
        GenJnlLine.VALIDATE("Account No.", FANo1);
        GenJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");

        //Определение типа операции
        CASE FABuffer."FA Operation Type" OF
           FABuffer."FA Operation Type"::Acquisition:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
             GenJnlLine.VALIDATE(Quantity, CorrCoef*FABuffer.Quantity);

             FixedAsset.GET(FANo1);
             IF FixedAsset."FA Type" = FixedAsset."FA Type"::"Future Expense" THEN BEGIN
               FADeprBookFE.GET(FANo1,FATransSetup."Depreciation Book Debit");

               //NC 02/12/11 > DP
               {
               FADeprBookFE.VALIDATE("Depreciation Starting Date",FABuffer."Document Date");
               }
               IF FADeprBookFE."Depreciation Starting Date"=0D THEN
                 FADeprBookFE.VALIDATE("Depreciation Starting Date",CALCDATE('<+1D>',FABuffer."Document Date"));
               //NC 02/12/11 < DP

               FADeprBookFE.MODIFY;
             END;

           END;
           FABuffer."FA Operation Type"::Release:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
             GenJnlLine."FA Reclassification Entry" := TRUE;
             GenJnlLine.VALIDATE(Quantity, CorrCoef);
             //Проставление флажка "в лизинге"  карточке ОС
             IF FATransSetup."Leasing Object" THEN BEGIN
               FixedAsset.GET(FANo1);
               FixedAsset."Leasing Asset" := TRUE;
               FixedAsset.MODIFY;
             END;

             FixedAsset.GET(FANo1);
             IF FixedAsset."FA Type" = FixedAsset."FA Type"::"Future Expense" THEN BEGIN
               FADeprBookFE.GET(FANo1,FATransSetup."Depreciation Book Debit");
               FADeprBookFE.VALIDATE("Depreciation Starting Date",FABuffer."Document Date");
               FADeprBookFE.MODIFY;
             END;

           END;
           FABuffer."FA Operation Type"::Reclass,FABuffer."FA Operation Type"::LeasingRelease:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
             GenJnlLine."FA Reclassification Entry" := TRUE;
           END;
           //NC MFA23 > DP
           FABuffer."FA Operation Type"::Depreciation:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::Depreciation);
           END;
           //NC MFA23 > DP
        END;
      END ELSE
      IF FATransSetup."Receiver Debit Acc. No" <> '' THEN BEGIN
        IF NOT SetAccountTypeAccountNo2(GenJnlLine,FABuffer,TempDebitLedgEntryDim,FATransSetup."Receiver Debit Acc. No")
        THEN BEGIN
          GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"G/L Account");
          GenJnlLine.VALIDATE("Account No.", FATransSetup."Receiver Debit Acc. No" );
        END;
      END ELSE BEGIN
        Indicator.CLOSE;
        ERROR(STRSUBSTNO(Text00003,FATransSetup.FIELDCAPTION(FATransSetup."Depreciation Book Debit"),
                         FATransSetup.FIELDCAPTION(FATransSetup."Receiver Debit Acc. No"), FATransSetup."No."));
      END;

      //Расчет Суммы
      CASE FABuffer."FA Operation Type" OF
           FABuffer."FA Operation Type"::Acquisition:BEGIN
             //NC MFA05 > DP
             ConsolidationMgt.GetAmountsNone(FABuffer,ConsolidationSource1."LCY Code",TempMapping.Code,GLEntryTemp,
             OpType::Debet);

             //NC MFA23 > DP Обработка понижения стоимости
             IF FATransSetup.Storno THEN BEGIN
               GLEntryTemp."Original Amount" := -GLEntryTemp."Original Amount";
               GLEntryTemp.Amount :=-GLEntryTemp.Amount;
             END;
             //NC MFA23 < DP

             //NC OFA26 > DP
             IF GLEntryTemp."Original Currency Code"<>GLSetup."LCY Code" THEN
             //NC OFA26 > DP

             GenJnlLine.VALIDATE("Currency Code", GLEntryTemp."Original Currency Code");
             GenJnlLine.VALIDATE(Amount, CorrCoef*GLEntryTemp."Original Amount");
             GenJnlLine.VALIDATE("Amount (LCY)",CorrCoef*ROUND(GLEntryTemp.Amount,GLSetup."Amount Rounding Precision"))
             //NC MFA05 < DP
           END;

           FABuffer."FA Operation Type"::Release:BEGIN
             IF FaJnlAmountUSD <> 0 THEN
               GenJnlLine.VALIDATE(GenJnlLine.Amount, CorrCoef*FaJnlAmountUSD)
             ELSE
               IF (FaJnlAmountUSD = 0) AND (FABuffer."Amount (LCY)" < 0) THEN
                 //IF CurrCompany.Type = CurrCompany.Type::"2" THEN
                   GenJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry1(FABuffer,FixedAsset,Text00117,'EFA18')
                 //ELSE BEGIN
                 //  GenJnlLine.VALIDATE(GenJnlLine.Amount, FABuffer."Amount (LCY)")
                 //END
               ELSE
                 //IF CurrCompany.Type = CurrCompany.Type::"2" THEN
                   GenJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry1(FABuffer,FixedAsset,Text00118,'EFA11')
                 //ELSE BEGIN
                 //  GenJnlLine.VALIDATE(GenJnlLine.Amount, FABuffer."Amount (LCY)")
                 ;//END;
           END;

           FABuffer."FA Operation Type"::LeasingRelease,FABuffer."FA Operation Type"::Reclass:BEGIN
             IF FaJnlAmountUSD = 0 THEN
               //сторнирование реклассификации
               GenJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry2(FABuffer,Text00120,'EFA19')
             ELSE BEGIN
               //Создание измененной проводки для реклассификации
               GenJnlLine.VALIDATE(GenJnlLine.Amount, FaJnlAmountUSD)
             END;
           END;

           //NC MFA23 > DP
           FABuffer."FA Operation Type"::Depreciation:BEGIN
             ConsolidationMgt.GetAmountsNone(FABuffer,ConsolidationSource1."LCY Code",TempMapping.Code,GLEntryTemp,
             OpType::Debet);
             GenJnlLine.VALIDATE("Currency Code", GLEntryTemp."Original Currency Code");
             GenJnlLine.VALIDATE(Amount, CorrCoef*GLEntryTemp."Original Amount");
             GenJnlLine.VALIDATE("Amount (LCY)",CorrCoef*ROUND(GLEntryTemp.Amount,GLSetup."Amount Rounding Precision"))
           END;
           //NC MFA23 > DP

      END;

      IF  (CorrCoef*FABuffer."Amount (LCY)") < 0 THEN
        GenJnlLine.VALIDATE(GenJnlLine.Correction, TRUE);
      IF (FABuffer."Amount (LCY)" < 0) AND (FABuffer."FA Operation Type" =
                                            FABuffer."FA Operation Type"::Release)
      THEN
        GenJnlLine.VALIDATE(GenJnlLine.Correction, TRUE);
      IF (FABuffer."Amount (LCY)" > 0) AND (FABuffer."FA Operation Type" =
                                            FABuffer."FA Operation Type"::Release)
      THEN
        GenJnlLine.VALIDATE(GenJnlLine.Correction, FALSE);
      GenJnlLine.VALIDATE(Description, FABuffer.Description);
      GenJnlLine.VALIDATE("Gen. Posting Type", GenJnlLine."Gen. Posting Type"::" ");
      GenJnlLine.VALIDATE("Gen. Bus. Posting Group", '');
      GenJnlLine.VALIDATE("Gen. Prod. Posting Group",'');
      //NC MDA01 > MP
      {
      GenJnlLine."Source Code" := ConsSetup."Source Code";
      }
      GenJnlLine."Source Code" := SourceCodeSetup."FA Transformation";
      //NC MDA01 < MP

      //NC MFA25 > DP
      GenJnlLine."FA Operation" := TRUE;
      GenJnlLine."External System ID" := ConsolidationSource."External System";
      GenJnlLine."Local G/L Account" := FABuffer."Debit G/L Account No.";
      //NC MFA25 < DP

      GenJnlLine.INSERT;

      DimType := DimType::Journal;
      CheckDimension(FABuffer, GenJnlLine, FADocLineFict, FAJnlLineFict,DimType,FALSE,TempMapping.Code);


      LineNo += 10000;

      END;

      //NC MFA07 > DP
      IF NOT GenJnlLine."Except Correspondence" THEN BEGIN
        FXAmountLCY := GenJnlLine."Amount (LCY)";
        IF GenJnlLine."Account Type"=GenJnlLine."Account Type"::"Fixed Asset" THEN
          DTGLAccCode :=GetFAGLAccount(GenJnlLine)
        ELSE
          DTGLAccCode :=GenJnlLine."Account No.";

      END;
      //NC MFA07 < DP

      //Создание строки Кредита
      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",CurTemplateCode);
      GenJnlLine.VALIDATE("Journal Batch Name",CurBatchCode);
      GenJnlLine.VALIDATE("Document No.",CurDocNo);
      GenJnlLine."Line No." := LineNo;

      IF  FABuffer."Document Date" < GLSetup."Allow Posting From" THEN BEGIN
        GenJnlLine."Source Historical Date" :=  FABuffer."Document Date";
        GenJnlLine.VALIDATE("Posting Date", GLSetup."Allow Posting From");
      END ELSE
        GenJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");

      GenJnlLine.VALIDATE("FA Posting Date", GenJnlLine."Posting Date");

      GenJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");

      IF ErrorConsSourceCode = '' THEN BEGIN
        GenJnlLine."Buffer Entry No." := FABuffer."Entry No.";
        GenJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
        GenJnlLine."External Document Type" := FABuffer."Document Type";
        GenJnlLine."External Document ID" := FABuffer."Document No.";
        GenJnlLine."External Document Date" := FABuffer."Document Date";
        GenJnlLine."External Operation No" := FABuffer."Operation No.";
      END ELSE BEGIN
        GenJnlLine."Buffer Entry No." := ErrorBufEntryNo;
        GenJnlLine."Cons. Source Code" := ErrorConsSourceCode;
        GenJnlLine.VALIDATE("FA Error Entry No.", FALedgEntryError."Entry No.");
      END;
      GenJnlLine."Capital %" := FATransSetup."Capital. Percent";


      IF FATransSetup."Depreciation Book Credit" <> '' THEN BEGIN
        GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"Fixed Asset");
        GenJnlLine.VALIDATE("Account No.", FANo2);
        GenJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Credit");

        //Определение типа операции
        CASE FABuffer."FA Operation Type" OF
           FABuffer."FA Operation Type"::Acquisition:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
             GenJnlLine.VALIDATE(Quantity, CorrCoef*FABuffer.Quantity);
             //Сохранение счета внеш. системы
             GenJnlLine."Local G/L Account" := FABuffer."Credit G/L Account No.";
          END;
           FABuffer."FA Operation Type"::Release:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
             GenJnlLine."FA Reclassification Entry" := TRUE;
             GenJnlLine.VALIDATE(Quantity, (-1)*CorrCoef);
           END;
           FABuffer."FA Operation Type"::Reclass,FABuffer."FA Operation Type"::LeasingRelease:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
             GenJnlLine."FA Reclassification Entry" := TRUE;
           END;
           FABuffer."FA Operation Type"::WriteOff:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::Disposal);
             GenJnlLine.VALIDATE("Depr. until FA Posting Date", FALSE);
             IF NOT FATransSetup."Leasing Object" THEN

             //Возможность списания ОВА на материалы
             IF (FATransSetup."FA Card Type Credit" = FATransSetup."FA Card Type Credit"::FA) AND NOT FATransSetup.Acquisition THEN
               GenJnlLine.VALIDATE("Depr. until FA Posting Date", TRUE);
           END;
           //NC MFA23 > DP
           FABuffer."FA Operation Type"::Depreciation:BEGIN
             GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::Depreciation);
           END;
           //NC MFA23 > DP

        END;
      END ELSE
        IF FATransSetup."Receiver Credit Acc. No" <> '' THEN BEGIN
          IF NOT SetAccountTypeAccountNo2(GenJnlLine,FABuffer,TempCreditLedgEntryDim,FATransSetup."Receiver Credit Acc. No")
          THEN BEGIN
            GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"G/L Account");
            GenJnlLine.VALIDATE("Account No.", FATransSetup."Receiver Credit Acc. No" );
          END;
      END ELSE BEGIN
        Indicator.CLOSE;
        ERROR(STRSUBSTNO(Text00003,FATransSetup.FIELDCAPTION(FATransSetup."Depreciation Book Credit"),
                         FATransSetup.FIELDCAPTION(FATransSetup."Receiver Credit Acc. No"), FATransSetup."No."));
      END;
      //Расчет Суммы
      CASE FABuffer."FA Operation Type" OF
           FABuffer."FA Operation Type"::Acquisition:BEGIN
             //NC MFA05 > DP
             CLEAR(GLEntryTemp);
             ConsolidationMgt.GetAmountsNone(FABuffer,ConsolidationSource1."LCY Code",TempMapping.Code,GLEntryTemp,
             OpType::Credit);

             //NC MFA23 > DP Обработка понижения стоимости
             IF FATransSetup.Storno THEN BEGIN
               GLEntryTemp."Original Amount" := -GLEntryTemp."Original Amount";
               GLEntryTemp.Amount :=-GLEntryTemp.Amount;
             END;
             //NC MFA23 < DP
             //NC OFA26 > DP
             IF GLEntryTemp."Original Currency Code"<>GLSetup."LCY Code" THEN
             //NC OFA26 > DP
             GenJnlLine.VALIDATE("Currency Code", GLEntryTemp."Original Currency Code");
             GenJnlLine.VALIDATE(GenJnlLine.Amount, CorrCoef*GLEntryTemp."Original Amount");
             GenJnlLine.VALIDATE(GenJnlLine."Amount (LCY)",CorrCoef*ROUND(GLEntryTemp.Amount,GLSetup."Amount Rounding Precision"))
             //NC MFA05 < DP
           END;

           FABuffer."FA Operation Type"::Release:BEGIN
             IF FaJnlAmountUSD > 0 THEN
               GenJnlLine.VALIDATE(GenJnlLine.Amount, -CorrCoef*FaJnlAmountUSD)
             ELSE
               IF (FaJnlAmountUSD = 0) AND (FABuffer."Amount (LCY)" < 0) THEN
                 //IF CurrCompany.Type = CurrCompany.Type::"2" THEN
                   GenJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry1(FABuffer,FixedAsset,Text00117,'EFA18')
                 //ELSE BEGIN
                 //  GenJnlLine.VALIDATE(GenJnlLine.Amount, -FABuffer."Amount (LCY)")
                 //END
               ELSE
                 //IF CurrCompany.Type = CurrCompany.Type::"2" THEN
                   GenJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry1(FABuffer,FixedAsset,Text00118,'EFA11')
                 //ELSE BEGIN
                 //  GenJnlLine.VALIDATE(GenJnlLine.Amount, -FABuffer."Amount (LCY)")
                 ;//END;
           END;

           FABuffer."FA Operation Type"::Reclass,FABuffer."FA Operation Type"::LeasingRelease:BEGIN
             IF FaJnlAmountUSD = 0 THEN
               //сторнирование реклассификации
               GenJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry2(FABuffer,Text00120,'EFA19')
             ELSE BEGIN
               //Создание измененной проводки для реклассификации
               GenJnlLine.VALIDATE(GenJnlLine.Amount, -FaJnlAmountUSD);
             END;
           END;

           //NC MFA23 > DP
           FABuffer."FA Operation Type"::Depreciation:BEGIN
             ConsolidationMgt.GetAmountsNone(FABuffer,ConsolidationSource1."LCY Code",TempMapping.Code,GLEntryTemp,
             OpType::Credit);
             GenJnlLine.VALIDATE("Currency Code", GLEntryTemp."Original Currency Code");
             GenJnlLine.VALIDATE(Amount, CorrCoef*GLEntryTemp."Original Amount");
             GenJnlLine.VALIDATE("Amount (LCY)",CorrCoef*ROUND(GLEntryTemp.Amount,GLSetup."Amount Rounding Precision"))
           END;
           //NC MFA23 > DP

      END;


      IF  (CorrCoef*FABuffer."Amount (LCY)") < 0 THEN BEGIN
        GenJnlLine.VALIDATE(GenJnlLine.Correction, TRUE);
        IF  FABuffer."FA Operation Type" = FABuffer."FA Operation Type"::WriteOff THEN
          GenJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry1(FABuffer,FixedAsset,Text00119,'');
      END;

      IF (FABuffer."Amount (LCY)" < 0) AND (FABuffer."FA Operation Type" =
                                            FABuffer."FA Operation Type"::Release)
      THEN
        GenJnlLine.VALIDATE(GenJnlLine.Correction, TRUE);
      IF (FABuffer."Amount (LCY)" > 0) AND (FABuffer."FA Operation Type" =
                                            FABuffer."FA Operation Type"::Release)
      THEN
        GenJnlLine.VALIDATE(GenJnlLine.Correction, FALSE);



      GenJnlLine.VALIDATE(Description, FABuffer.Description);
      GenJnlLine.VALIDATE("Gen. Posting Type", GenJnlLine."Gen. Posting Type"::" ");
      GenJnlLine.VALIDATE("Gen. Bus. Posting Group", '');
      GenJnlLine.VALIDATE("Gen. Prod. Posting Group",'');
      //NC MDA01 > MP
      {
      GenJnlLine."Source Code" := ConsSetup."Source Code";
      }
      GenJnlLine."Source Code" := SourceCodeSetup."FA Transformation";
      //NC MDA01 < MP

      //NC MFA25 > DP
      GenJnlLine."FA Operation" := TRUE;
      GenJnlLine."External System ID" := ConsolidationSource."External System";
      GenJnlLine."Local G/L Account" := FABuffer."Credit G/L Account No.";
      //NC MFA25 > DP

      GenJnlLine.INSERT;

      DimType := DimType::Journal;
      CheckDimension(FABuffer, GenJnlLine, FADocLineFict, FAJnlLineFict,DimType,FALSE,TempMapping.Code);


      //NC MFA07 > DP
      IF NOT GenJnlLine."Except Correspondence" THEN BEGIN
        FXAmountLCY += GenJnlLine."Amount (LCY)";
        IF GenJnlLine."Account Type"=GenJnlLine."Account Type"::"Fixed Asset" THEN
          CTGLAccCode :=GetFAGLAccount(GenJnlLine)
        ELSE
          CTGLAccCode :=GenJnlLine."Account No.";
        IF ROUND(FXAmountLCY,0.01) <> 0 THEN  BEGIN
          CreateJnlLineFX(GenJnlLine,FABuffer,ConsolidationSource,
                          TempDebitLedgEntryDim,TempCreditLedgEntryDim,FXAmountLCY,DTGLAccCode,CTGLAccCode);
        END;
      END;
      //NC MFA07 < MP
    END;

    PROCEDURE InsertDimension@1000000026(VAR tmpLedgerEntryDimension@1000000000 : Record 360;EntryNo@1000000001 : Integer;VAR GenJournalLine@1000000005 : Record 81);
    VAR
      DimensionVal@1000000002 : Record 349;
      TempDimSetEntry@1101495000 : TEMPORARY Record 480;
    BEGIN
      //NC MFA11 > DP
      GLSetup.GET;
      tmpLedgerEntryDimension.SETRANGE("Table ID",17);
      tmpLedgerEntryDimension.SETRANGE("Entry No.",EntryNo);
      IF tmpLedgerEntryDimension.FINDSET THEN
        REPEAT
          IF DimensionVal.GET(tmpLedgerEntryDimension."Dimension Code",tmpLedgerEntryDimension."Dimension Value Code") THEN BEGIN
            //NC NOS-26 > SPA
            {
            JournalLineDimension.INIT;
            JournalLineDimension."Table ID" := 81;
            JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
            JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
            JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
            JournalLineDimension."Dimension Code" := tmpLedgerEntryDimension."Dimension Code";
            JournalLineDimension."Dimension Value Code" := tmpLedgerEntryDimension."Dimension Value Code";
            IF NOT JournalLineDimension.INSERT THEN
              JournalLineDimension.MODIFY;
            IF GLSetup."Global Dimension 1 Code" <> '' THEN
              IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN BEGIN
                GenJournalLine."Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";
                GenJournalLine.MODIFY;
              END;

            IF GLSetup."Global Dimension 2 Code" <> '' THEN
              IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN BEGIN
                GenJournalLine."Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";
                GenJournalLine.MODIFY;
              END;
            }
            TempDimSetEntry."Dimension Code" := tmpLedgerEntryDimension."Dimension Code";
            IF TempDimSetEntry.FIND THEN
              TempDimSetEntry.DELETE;
            TempDimSetEntry."Dimension Value Code" := tmpLedgerEntryDimension."Dimension Value Code";
            TempDimSetEntry."Dimension Value ID" := DimensionVal."Dimension Value ID";
            TempDimSetEntry.INSERT;
            //NC NOS-26 < SPA
            CreateAgreement(GenJournalLine,TempDimSetEntry);
        END;
        UNTIL tmpLedgerEntryDimension.NEXT =0;

      //NC NOS-26 > SPA
      DimMgt.UpdateGenJnlLineDim(GenJournalLine,DimMgt.GetDimensionSetID(TempDimSetEntry));
      GenJournalLine.MODIFY;
      //NC NOS-26 < SPA
      //NC MFA11 < DP
    END;

    PROCEDURE InsertFADimension@1000000022(VAR tmpLedgerEntryDimension@1000000002 : Record 360;EntryNo@1000000001 : Integer;VAR FAJnlLine@1000000000 : Record 5621);
    VAR
      DimensionVal@1000000004 : Record 349;
      TempDimSetEntry@1101495000 : TEMPORARY Record 480;
    BEGIN
      //NC MFA11 > DP
      GLSetup.GET;
      tmpLedgerEntryDimension.SETRANGE("Table ID",17);
      tmpLedgerEntryDimension.SETRANGE("Entry No.",EntryNo);
      IF tmpLedgerEntryDimension.FINDSET THEN
        REPEAT
          IF DimensionVal.GET(tmpLedgerEntryDimension."Dimension Code",tmpLedgerEntryDimension."Dimension Value Code") THEN BEGIN
            //NC NOS-26 > SPA
            {
            JournalLineDimension.INIT;
            JournalLineDimension."Table ID" := DATABASE::"FA Journal Line";
            JournalLineDimension."Journal Template Name" := FAJnlLine."Journal Template Name";
            JournalLineDimension."Journal Batch Name" := FAJnlLine."Journal Batch Name";
            JournalLineDimension."Journal Line No." := FAJnlLine."Line No.";
            JournalLineDimension."Dimension Code" := tmpLedgerEntryDimension."Dimension Code";
            JournalLineDimension."Dimension Value Code" := tmpLedgerEntryDimension."Dimension Value Code";
            IF NOT JournalLineDimension.INSERT THEN
              JournalLineDimension.MODIFY;
            IF GLSetup."Global Dimension 1 Code" <> '' THEN
              IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                FAJnlLine."Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";
            IF GLSetup."Global Dimension 2 Code" <> '' THEN
              IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                FAJnlLine."Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";
            }
            TempDimSetEntry."Dimension Code" := tmpLedgerEntryDimension."Dimension Code";
            IF TempDimSetEntry.FIND THEN
              TempDimSetEntry.DELETE;
            TempDimSetEntry."Dimension Value Code" := tmpLedgerEntryDimension."Dimension Value Code";
            TempDimSetEntry."Dimension Value ID" := DimensionVal."Dimension Value ID";
            TempDimSetEntry.INSERT;
            //NC NOS-26 < SPA
          END;
        UNTIL tmpLedgerEntryDimension.NEXT =0;

      //NC NOS-26 > SPA
      FAJnlLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      DimMgt.UpdateGlobalDimFromDimSetID(FAJnlLine."Dimension Set ID",
        FAJnlLine."Shortcut Dimension 1 Code",
        FAJnlLine."Shortcut Dimension 2 Code");
      FAJnlLine.MODIFY;
      //NC NOS-26 < SPA
      //NC MFA11 < DP
    END;

    PROCEDURE CheckDimension@1000000236(VAR FABuffer3@1000000000 : Record 50008;VAR GenJnlLine@1000000001 : Record 81;VAR FADocLine@1000000007 : Record 12477;VAR FAJnlLine@1000000009 : Record 5621;DimType@1000000008 : 'Journal,Document,FAJournal';IsCheck@1000000014 : Boolean;MappingCode@1000000017 : Code[20]) : Boolean;
    VAR
      i@1000000004 : Integer;
      DimensionCode@1000000005 : Code[20];
      ValueCode@1000000006 : Code[20];
      DimCaption@1000000003 : Text[90];
      ValueCaption@1000000002 : Text[90];
      DimensionValue@1210000 : Record 349;
      DimValueType@1210001 : 'Debit,Credit';
      ConsolSetup@1210002 : Record 50000;
      DimensionCheck@1210003 : Record 348;
      DimCodeInSource@1210004 : Code[20];
      DimValueInSource@1210005 : Code[20];
      ValueName@1101495000 : Text[50];
      ConsRegNo@1000000010 : Integer;
      Dimension@1000000011 : Record 348;
      IsError@1000000012 : Boolean;
      IsCurrentError@1000000013 : Boolean;
      IsFADim@1000000015 : Boolean;
      FACatalog@1000000016 : Record 50044;
    BEGIN
      //NC MFA11 > DP
      IF IsCheck THEN BEGIN
      //NC MFA11 < DP

      //NC MFA01 > DP
      IsError := FALSE;
      ConsRegNo :=0;
      //NC MFA01 < DP
        FOR i := 1 TO 40 DO BEGIN
        IsCurrentError := FALSE;
        ValueCode :='';
        CASE i OF
          1: BEGIN
            DimensionCode := FABuffer3."Dimension 1 Code";
            ValueCode := FABuffer3."Debit Dimension 1 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 1 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 1 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP
          END;
          2: BEGIN
            DimensionCode := FABuffer3."Dimension 2 Code";
            ValueCode := FABuffer3."Debit Dimension 2 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 2 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 2 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          3: BEGIN
            DimensionCode := FABuffer3."Dimension 3 Code";
            ValueCode := FABuffer3."Debit Dimension 3 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 3 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 3 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          4: BEGIN
            DimensionCode := FABuffer3."Dimension 4 Code";
            ValueCode := FABuffer3."Debit Dimension 4 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 4 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 4 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          5: BEGIN
            DimensionCode := FABuffer3."Dimension 5 Code";
            ValueCode := FABuffer3."Debit Dimension 5 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 5 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 5 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          6: BEGIN
            DimensionCode := FABuffer3."Dimension 6 Code";
            ValueCode := FABuffer3."Debit Dimension 6 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 6 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 6 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          7: BEGIN
            DimensionCode := FABuffer3."Dimension 7 Code";
            ValueCode := FABuffer3."Debit Dimension 7 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 7 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 7 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          8: BEGIN
            DimensionCode := FABuffer3."Dimension 8 Code";
            ValueCode := FABuffer3."Debit Dimension 8 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 8 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 8 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          9: BEGIN
            DimensionCode := FABuffer3."Dimension 9 Code";
            ValueCode := FABuffer3."Debit Dimension 9 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 9 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 9 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          10: BEGIN
            DimensionCode := FABuffer3."Dimension 10 Code";
            ValueCode := FABuffer3."Debit Dimension 10 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 10 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 10 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          11: BEGIN
            DimensionCode := FABuffer3."Dimension 11 Code";
            ValueCode := FABuffer3."Debit Dimension 11 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 11 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 11 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          12: BEGIN
            DimensionCode := FABuffer3."Dimension 12 Code";
            ValueCode := FABuffer3."Debit Dimension 12 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 12 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 12 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          13: BEGIN
            DimensionCode := FABuffer3."Dimension 13 Code";
            ValueCode := FABuffer3."Debit Dimension 13 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 13 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 13 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          14: BEGIN
            DimensionCode := FABuffer3."Dimension 14 Code";
            ValueCode := FABuffer3."Debit Dimension 14 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 14 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 14 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          15: BEGIN
            DimensionCode := FABuffer3."Dimension 15 Code";
            ValueCode := FABuffer3."Debit Dimension 15 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 15 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 15 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          16: BEGIN
            DimensionCode := FABuffer3."Dimension 16 Code";
            ValueCode := FABuffer3."Debit Dimension 16 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 16 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 16 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          17: BEGIN
            DimensionCode := FABuffer3."Dimension 17 Code";
            ValueCode := FABuffer3."Debit Dimension 17 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 17 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 17 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := TRUE;
            //NC MFA14 < DP

          END;
          18: BEGIN
            DimensionCode := FABuffer3."Dimension 18 Code";
            ValueCode := FABuffer3."Debit Dimension 18 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 18 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 18 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := TRUE;
            //NC MFA14 < DP

          END;
          19: BEGIN
            DimensionCode := FABuffer3."Dimension 19 Code";
            ValueCode := FABuffer3."Debit Dimension 19 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 19 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 19 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := TRUE;
            //NC MFA14 < DP

          END;
          20: BEGIN
            DimensionCode := FABuffer3."Dimension 20 Code";
            ValueCode := FABuffer3."Debit Dimension 20 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 20 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Debit Dimension 20 Value Code");
            DimValueType := DimValueType::Debit;
            //NC MFA14 > DP
            IsFADim := TRUE;
            //NC MFA14 < DP

          END;
          21: BEGIN
            DimensionCode := FABuffer3."Dimension 1 Code";
            ValueCode := FABuffer3."Credit Dimension 1 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 1 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 1 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          22: BEGIN
            DimensionCode := FABuffer3."Dimension 2 Code";
            ValueCode := FABuffer3."Credit Dimension 2 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 2 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 2 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          23: BEGIN
            DimensionCode := FABuffer3."Dimension 3 Code";
            ValueCode := FABuffer3."Credit Dimension 3 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 3 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 3 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          24: BEGIN
            DimensionCode := FABuffer3."Dimension 4 Code";
            ValueCode := FABuffer3."Credit Dimension 4 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 4 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 4 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          25: BEGIN
            DimensionCode := FABuffer3."Dimension 5 Code";
            ValueCode := FABuffer3."Credit Dimension 5 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 5 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 5 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          26: BEGIN
            DimensionCode := FABuffer3."Dimension 6 Code";
            ValueCode := FABuffer3."Credit Dimension 6 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 6 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 6 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          27: BEGIN
            DimensionCode := FABuffer3."Dimension 7 Code";
            ValueCode := FABuffer3."Credit Dimension 7 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 7 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 7 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          28: BEGIN
            DimensionCode := FABuffer3."Dimension 8 Code";
            ValueCode := FABuffer3."Credit Dimension 8 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 8 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 8 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          29: BEGIN
            DimensionCode := FABuffer3."Dimension 9 Code";
            ValueCode := FABuffer3."Credit Dimension 9 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 9 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 9 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          30: BEGIN
            DimensionCode := FABuffer3."Dimension 10 Code";
            ValueCode := FABuffer3."Credit Dimension 10 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 10 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 10 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          31: BEGIN
            DimensionCode := FABuffer3."Dimension 11 Code";
            ValueCode := FABuffer3."Credit Dimension 11 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 11 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 11 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          32: BEGIN
            DimensionCode := FABuffer3."Dimension 12 Code";
            ValueCode := FABuffer3."Credit Dimension 12 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 12 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 12 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;

          33: BEGIN
            DimensionCode := FABuffer3."Dimension 13 Code";
            ValueCode := FABuffer3."Credit Dimension 13 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 13 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 13 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;

          34: BEGIN
            DimensionCode := FABuffer3."Dimension 14 Code";
            ValueCode := FABuffer3."Credit Dimension 14 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 14 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 14 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          35: BEGIN
            DimensionCode := FABuffer3."Dimension 15 Code";
            ValueCode := FABuffer3."Credit Dimension 15 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 15 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 15 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          36: BEGIN
            DimensionCode := FABuffer3."Dimension 16 Code";
            ValueCode := FABuffer3."Credit Dimension 16 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 16 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 16 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := FALSE;
            //NC MFA14 < DP

          END;
          37: BEGIN
            DimensionCode := FABuffer3."Dimension 17 Code";
            ValueCode := FABuffer3."Credit Dimension 17 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 17 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 17 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := TRUE;
            //NC MFA14 < DP

          END;
          38: BEGIN
            DimensionCode := FABuffer3."Dimension 18 Code";
            ValueCode := FABuffer3."Credit Dimension 18 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 18 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 18 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := TRUE;
            //NC MFA14 < DP

          END;
          39: BEGIN
            DimensionCode := FABuffer3."Dimension 19 Code";
            ValueCode := FABuffer3."Credit Dimension 19 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 19 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 19 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := TRUE;
            //NC MFA14 < DP

          END;
          40: BEGIN
            DimensionCode := FABuffer3."Dimension 20 Code";
            ValueCode := FABuffer3."Credit Dimension 20 Value Code";
            DimCaption := FABuffer3.FIELDCAPTION("Dimension 20 Code");
            ValueCaption := FABuffer3.FIELDCAPTION("Credit Dimension 20 Value Code");
            DimValueType := DimValueType::Credit;
            //NC MFA14 > DP
            IsFADim := TRUE;
            //NC MFA14 < DP

          END;
        END;

        //NC MFA01 > DP

        IF (ValueCode <> '') AND IsCheck THEN BEGIN
          IF Dimension.GET(DimensionCode) THEN BEGIN
            //NC MFA14 > DP
            MovingDataSetup.GET;
            MovingDataSetup.TESTFIELD("PROFIT CENTER Dimension Code");

            IF IsFADim AND NOT DimensionValue.GET(DimensionCode, ValueCode) THEN BEGIN
              IF NOT FACatalog.GET(ValueCode) THEN BEGIN
                IsError := TRUE;
                IsCurrentError := TRUE;
                IF DimValueType = DimValueType::Debit THEN
                  ErrMessage := Text00122 +' ' + FORMAT(DimensionCode) + Text00140+ Text00123 + FORMAT(ValueCode) + Text00124
                ELSE
                  ErrMessage := Text00122 +' ' + FORMAT(DimensionCode) + Text00141+ Text00123 + FORMAT(ValueCode) + Text00124;
                ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     FABuffer3."Cons. Source Code",FAConsRegister."No.",
                                     'EFA03',ErrMessage,COMPANYNAME,FABuffer3,0);

                FABuffer3."Error in Import" := TRUE;
                FABuffer3.MODIFY;

              END ELSE BEGIN
                IF ValueCode <> '' THEN BEGIN
                  DimensionValue.INIT;
                  DimensionValue."Dimension Code" := DimensionCode;
                  DimensionValue.Code := FACatalog."No.";
                  DimensionValue.Name := COPYSTR(FACatalog.Name,1,MAXSTRLEN(DimensionValue.Name));
                  IF STRLEN(FACatalog.Name)>MAXSTRLEN(DimensionValue.Name) THEN
                    DimensionValue."Name 2" := COPYSTR(FACatalog.Name,51,MAXSTRLEN(DimensionValue."Name 2"));
                  DimensionValue."Company Name" := FACatalog."Company No.";
                  DimensionValue.INSERT(TRUE);
                END;
              END;
            END;
            IF NOT IsFADim AND NOT DimensionValue.GET(DimensionCode, ValueCode)
              AND NOT ((MovingDataSetup."PROFIT CENTER Dimension Code"=DimensionCode)
              AND ConsolidationSource."Catalog FA CostCenter") AND
              NOT (MovingDataSetup."PROFIT CENTER Dimension Code"=DimensionCode) THEN BEGIN
              IsError := TRUE;
              IsCurrentError := TRUE;
              IF DimValueType = DimValueType::Debit THEN
                ErrMessage := Text00122 + FORMAT(DimensionCode) + Text00140+ Text00123 + FORMAT(ValueCode) + Text00124
              ELSE
                ErrMessage := Text00122 + FORMAT(DimensionCode) + Text00141+ Text00123 + FORMAT(ValueCode) + Text00124;

              ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                     FABuffer3."Cons. Source Code",FAConsRegister."No.",
                                     'EFA03',ErrMessage,COMPANYNAME,FABuffer3,0);
              FABuffer3."Error in Import" := TRUE;
              FABuffer3.MODIFY;

            END ELSE BEGIN
              IF DimensionValue.Blocked THEN BEGIN
                IsCurrentError := TRUE;
                IsError := TRUE;
                IF DimValueType = DimValueType::Debit THEN
                  ErrMessage := Text00125 + FORMAT(DimensionCode) + Text00126 + FORMAT(ValueCode) + Text00140 + Text00127
                ELSE
                  ErrMessage := Text00125 + FORMAT(DimensionCode) + Text00126 + FORMAT(ValueCode) + Text00141 + Text00127;

                ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       FABuffer3."Cons. Source Code",FAConsRegister."No.",
                                       'EFA04',ErrMessage,COMPANYNAME,FABuffer3,DimensionValue,0);
                FABuffer3."Error in Import" := TRUE;
                FABuffer3.MODIFY;

              END;
              IF DimensionValue."Dimension Value Type" <> DimensionValue."Dimension Value Type"::Standard THEN BEGIN
                IsError := TRUE;
                IsCurrentError := TRUE;
                IF DimValueType = DimValueType::Debit THEN
                  ErrMessage := Text00131 +  Text00140 + FORMAT(DimensionCode) + ' ' + FORMAT(ValueCode) + Text00132
                ELSE
                  ErrMessage := Text00131 +  Text00141 + FORMAT(DimensionCode) + ' ' +  FORMAT(ValueCode) + Text00132;

                ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       FABuffer3."Cons. Source Code",FAConsRegister."No.",
                                       'EFA05',ErrMessage,COMPANYNAME,FABuffer3,DimensionValue,0);
                FABuffer3."Error in Import" := TRUE;
                FABuffer3.MODIFY;
              END;
            END;

            MovingDataSetup.GET;
            IF NOT (ConsolidationSource."Catalog FA CostCenter" AND
              (DimensionCode=MovingDataSetup."PROFIT CENTER Dimension Code")) THEN BEGIN

              IF DimValueType = DimValueType::Debit THEN
                CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode)
              ELSE
                CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode);

              IF FABuffer3."FA Operation Type"<>FABuffer3."FA Operation Type"::Reclass THEN BEGIN
                IF DimValueType = DimValueType::Debit THEN
                  CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode)
                ELSE
                  CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode);
              END;
            END ELSE
             IF ConsolidationSource."Catalog FA CostCenter" AND NOT
              (DimensionCode=MovingDataSetup."PROFIT CENTER Dimension Code") THEN BEGIN

              IF DimValueType = DimValueType::Debit THEN
                CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode)
              ELSE
                CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode);


              IF FABuffer3."FA Operation Type"<>FABuffer3."FA Operation Type"::Reclass THEN BEGIN
                IF DimValueType = DimValueType::Debit THEN
                  CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode)
                ELSE
                  CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode);
              END;
            END;

            //NC MFA22 > DP
            IF IsFADim AND ConsolidationSource."Catalog FA CostCenter" THEN BEGIN
              IF FACatalog.GET(ValueCode) AND (FACatalog."Profit Center"<>'') AND
              NOT (FABuffer3."FA Operation Type"=FABuffer3."FA Operation Type"::Reclass)
              THEN BEGIN
                MovingDataSetup.GET;
                MovingDataSetup.TESTFIELD("PROFIT CENTER Dimension Code");
                IF FABuffer3.Removed THEN BEGIN
                  //IF DimValueType = DimValueType::Debit THEN
                    CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Source Operation No.",
                                    MovingDataSetup."PROFIT CENTER Dimension Code",FACatalog."Profit Center")
                  ;
                  //ELSE
                    CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Source Operation No.",
                                    MovingDataSetup."PROFIT CENTER Dimension Code",FACatalog."Profit Center");

                END ELSE BEGIN
                  //IF DimValueType = DimValueType::Debit THEN
                    CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",
                                    MovingDataSetup."PROFIT CENTER Dimension Code",FACatalog."Profit Center")
                  ;
                  //ELSE
                    CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",
                                    MovingDataSetup."PROFIT CENTER Dimension Code",FACatalog."Profit Center");
                END;

              END;
            END;
            //NC MFA22 > DP


          END;
        END;
        //NC MFA01 < DP
        END;

        IF IsCheck THEN BEGIN
          CheckDimMapp(FABuffer3,TempDebitLedgEntryDim, ConsolidationSource, FAConsRegister."No.",DimValueType::Debit,MappingCode);
          CheckDimMapp(FABuffer3,TempCreditLedgEntryDim, ConsolidationSource, FAConsRegister."No.",DimValueType::Credit,MappingCode);
        END;




      //MFA11 > DP
      END ELSE BEGIN

        //Объединение измерений Дт/Кт
        {
        IF FABuffer3."FA Operation Type"<>FABuffer3."FA Operation Type"::Reclass THEN BEGIN
          IF FABuffer3.Removed THEN BEGIN
            IF DimValueType = DimValueType::Debit THEN
              CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Source Operation No.",DimensionCode,ValueCode)
            ELSE
              CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Source Operation No.",DimensionCode,ValueCode);
          END ELSE
            IF DimValueType = DimValueType::Debit THEN
              CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode)
            ELSE
              CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABuffer3."Entry No.",DimensionCode,ValueCode);
        END;
        }
        IF (DimType = DimType::Journal) AND (GenJnlLine."Debit Amount" <> 0) AND
           //(DimValueType = DimValueType::Debit) AND
           (NOT GenJnlLine."Reclass. Capital %")
        THEN
          InsertDimension(TempDebitLedgEntryDim, FABuffer3."Entry No.", GenJnlLine);


        IF (DimType = DimType::Journal) AND (GenJnlLine."Credit Amount" <> 0) AND
           //(DimValueType = DimValueType::Credit) AND
           (NOT GenJnlLine."Reclass. Capital %")
        THEN
          InsertDimension(TempCreditLedgEntryDim, FABuffer3."Entry No.", GenJnlLine);

        IF (DimType = DimType::Journal) AND (GenJnlLine."Credit Amount" <> 0) AND
           //(DimValueType = DimValueType::Debit) AND
           (GenJnlLine."Reclass. Capital %")
        THEN
          InsertDimension(TempCreditLedgEntryDim, FABuffer3."Entry No.", GenJnlLine);

        IF (DimType = DimType::Journal) AND (GenJnlLine."Debit Amount" <> 0) AND
           //(DimValueType = DimValueType::Credit) AND
           (GenJnlLine."Reclass. Capital %")
        THEN
          InsertDimension(TempDebitLedgEntryDim, FABuffer3."Entry No.", GenJnlLine);

        //NC MFA23 > DP
        IF (DimType = DimType::Journal) AND
          (GenJnlLine."Credit Amount" = 0) AND
          (GenJnlLine."Debit Amount" = 0) AND
          (GenJnlLine."FA Posting Type" =GenJnlLine."FA Posting Type"::Disposal) THEN
          InsertDimension(TempCreditLedgEntryDim, FABuffer3."Entry No.", GenJnlLine);
        //NC MFA23 < DP

        IF (DimType = DimType::FAJournal) AND (GenJnlLine."Debit Amount" <> 0) AND
           //(DimValueType = DimValueType::Debit) AND
           (NOT GenJnlLine."Reclass. Capital %")
        THEN
          InsertFADimension(TempDebitLedgEntryDim, FABuffer3."Entry No.", FAJnlLine);

        IF (DimType = DimType::FAJournal) AND (GenJnlLine."Credit Amount" <> 0) AND
           //(DimValueType = DimValueType::Credit) AND
           (NOT GenJnlLine."Reclass. Capital %")
        THEN
          InsertFADimension(TempCreditLedgEntryDim, FABuffer3."Entry No.", FAJnlLine);

        IF (DimType = DimType::FAJournal) AND (GenJnlLine."Credit Amount" <> 0) AND
           //(DimValueType = DimValueType::Debit) AND
           (GenJnlLine."Reclass. Capital %")
        THEN
          InsertFADimension(TempCreditLedgEntryDim, FABuffer3."Entry No.", FAJnlLine);

        IF (DimType = DimType::FAJournal) AND (GenJnlLine."Debit Amount" <> 0) AND
           //(DimValueType = DimValueType::Credit) AND
           (GenJnlLine."Reclass. Capital %")
        THEN
          InsertFADimension(TempDebitLedgEntryDim, FABuffer3."Entry No.", FAJnlLine);

      END;

      IF IsError THEN BEGIN
        FABuffer3."Error in Import" := TRUE;
        FABuffer3."FA Export Cons. Register" := FAConsRegister."No.";
        FABuffer3.MODIFY;
      END;
      EXIT(IsError);
      //MFA11 < DP
    END;

    PROCEDURE ReklassCapitalPercent@1210007(FANo@1210001 : Code[20];FABuffer@1210002 : Record 50008;VAR FATransSetup@1210000 : Record 50004;ErrorConsSourceCode@1210024 : Code[20];ErrorBufEntryNo@1210023 : Integer;MappingCode@1000000000 : Code[20]);
    VAR
      FADeprBook@1210003 : Record 5612;
      OpType@1210004 : 'Debet,Credit';
      GenJnlLine@1210006 : Record 81;
      GenJnlLine1@1210007 : Record 81;
      Currency@1210008 : Record 4;
      GLSetup@1210010 : Record 98;
      LineNo@1210009 : Integer;
      FADocLineFict@1210011 : Record 12477;
      FAJnlLineFict@1210012 : Record 5621;
      DimType@1210013 : 'Journal,Document,FAJournal';
      CurDocNo@1210014 : Code[20];
      GenJnlBatch@1210015 : Record 232;
      NoSeriesMgt@1210016 : Codeunit 396;
      CurTemplateCode@1210017 : Code[10];
      CurBatchCode@1210018 : Code[10];
      ConsolidationSource@1210019 : Record 50001;
      ConsolidationSetup@1210020 : Record 50000;
      GenJnlPostBatch@1210021 : Codeunit 13;
      CorrCoef@1210022 : Decimal;
    BEGIN
      GLSetup.GET;

      IF ErrorConsSourceCode <> '' THEN BEGIN
        CorrCoef := -1;
        FALedgEntryError.RESET;
        FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuffer."Cons. Source Code");
        FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuffer."Entry No.");
        FALedgEntryError.SETRANGE(FALedgEntryError."Reklass. Capital %",TRUE);
        IF NOT FALedgEntryError.FINDFIRST THEN BEGIN
          Indicator.CLOSE;
          ERROR(Text00107, FABuffer."Entry No.", ErrorBufEntryNo);
        END;
      END ELSE
        CorrCoef := 1;

      //Определение шаблона и раздела журнала
      //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsolidationSource.GET(FABuffer."Cons. Source Code");
      ConsolidationSource.TESTFIELD(ConsolidationSource."Acquisition Gen. Batch Name");
      CurBatchCode := ConsolidationSource."Acquisition Gen. Batch Name";

      ConsolidationSetup.GET;
      ConsolidationSetup.TESTFIELD(ConsolidationSetup."FA Import Journal Template");
      CurTemplateCode := ConsolidationSetup."FA Import Journal Template";

      //Создание строки для Дебета
      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",CurTemplateCode);
      GenJnlLine.VALIDATE("Journal Batch Name",CurBatchCode);

      GenJnlLine1.SETRANGE("Journal Template Name", GenJnlLine."Journal Template Name");
      GenJnlLine1.SETRANGE("Journal Batch Name", GenJnlLine."Journal Batch Name");
      IF GenJnlLine1.FIND('+') THEN BEGIN
        CurDocNo := INCSTR(GenJnlLine1."Document No.");
        LineNo := GenJnlLine1."Line No." + 10000
      END ELSE BEGIN
        LineNo := 10000;
        GenJnlBatch.GET(CurTemplateCode,CurBatchCode);
        GenJnlBatch.TESTFIELD(GenJnlBatch."No. Series");
        CLEAR(NoSeriesMgt);
        CurDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series", FABuffer."Document Date",FALSE);
      END;

      GenJnlLine."Line No." := LineNo;
      GenJnlLine.VALIDATE("Document No.",CurDocNo);

      IF  FABuffer."Document Date" < GLSetup."Allow Posting From" THEN BEGIN
        GenJnlLine."Source Historical Date" :=  FABuffer."Document Date";
        GenJnlLine.VALIDATE("Posting Date", GLSetup."Allow Posting From");
      END ELSE
        GenJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");

      GenJnlLine.VALIDATE("FA Posting Date", GenJnlLine."Posting Date");

      GenJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");

      IF ErrorConsSourceCode = '' THEN BEGIN
        GenJnlLine."Buffer Entry No." := FABuffer."Entry No.";
        GenJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
      END ELSE BEGIN
        GenJnlLine."Buffer Entry No." := ErrorBufEntryNo;
        GenJnlLine."Cons. Source Code" := ErrorConsSourceCode;
        GenJnlLine.VALIDATE("FA Error Entry No.", FALedgEntryError."Entry No.");
      END;

      GenJnlLine."Capital %" := TRUE;
      GenJnlLine."Reclass. Capital %" := TRUE;

      FATransSetup.TESTFIELD(FATransSetup."Reclass. Capital % Acc. No.");

      GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"G/L Account");
      GenJnlLine.VALIDATE("Account No.", FATransSetup."Reclass. Capital % Acc. No.");

      //Расчет Суммы

      IF FABuffer."Debit Currency Code" <> GLSetup."Extern. LCY Code" THEN BEGIN
        Currency.RESET;
        Currency.SETRANGE(Currency."Source Currency Code",FABuffer."Debit Currency Code");
        IF Currency.FINDFIRST THEN
          GenJnlLine.VALIDATE("Currency Code", Currency.Code)
        ELSE BEGIN
          Indicator.CLOSE;
          ERROR(STRSUBSTNO(Text00004, Currency.FIELDCAPTION("Source Currency Code"),FABuffer."Debit Currency Code"));
        END;
      END;


      IF FABuffer."Debit Currency Code" = '' THEN
        GenJnlLine.VALIDATE(GenJnlLine.Amount, CorrCoef*FABuffer."Amount (LCY)")
      ELSE
        GenJnlLine.VALIDATE(GenJnlLine.Amount, CorrCoef*FABuffer."Debit Original Amount");

      IF  (CorrCoef*FABuffer."Amount (LCY)") < 0 THEN
        GenJnlLine.VALIDATE(GenJnlLine.Correction, TRUE);


      GenJnlLine.VALIDATE(Description, Text00100);
      GenJnlLine.VALIDATE("Gen. Posting Type", GenJnlLine."Gen. Posting Type"::" ");
      GenJnlLine.VALIDATE("Gen. Bus. Posting Group", '');
      GenJnlLine.VALIDATE("Gen. Prod. Posting Group",'');
      GenJnlLine.INSERT;

      DimType := DimType::Journal;
      CheckDimension(FABuffer, GenJnlLine, FADocLineFict, FAJnlLineFict,DimType,FALSE,MappingCode);

      //Создание строки Кредита
      GenJnlLine.INIT;
      GenJnlLine.VALIDATE("Journal Template Name",CurTemplateCode);
      GenJnlLine.VALIDATE("Journal Batch Name",CurBatchCode);

      LineNo += 10000;

      GenJnlLine.VALIDATE("Document No.",CurDocNo);
      GenJnlLine."Line No." := LineNo;

      IF  FABuffer."Document Date" < GLSetup."Allow Posting From" THEN BEGIN
        GenJnlLine."Source Historical Date" :=  FABuffer."Document Date";
        GenJnlLine.VALIDATE("Posting Date", GLSetup."Allow Posting From");
      END ELSE
        GenJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");

      GenJnlLine.VALIDATE("FA Posting Date", GenJnlLine."Posting Date");

      GenJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");

      IF ErrorConsSourceCode = '' THEN BEGIN
        GenJnlLine."Buffer Entry No." := FABuffer."Entry No.";
        GenJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
      END ELSE BEGIN
        GenJnlLine."Buffer Entry No." := ErrorBufEntryNo;
        GenJnlLine."Cons. Source Code" := ErrorConsSourceCode;
        GenJnlLine.VALIDATE("FA Error Entry No.", FALedgEntryError."Entry No.");
      END;

      GenJnlLine."Capital %" := TRUE;
      GenJnlLine."Reclass. Capital %" := TRUE;

      GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"Fixed Asset");
      GenJnlLine.VALIDATE("Account No.", FANo);
      GenJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");

      GenJnlLine.VALIDATE("FA Posting Type", GenJnlLine."FA Posting Type"::"Acquisition Cost");
      GenJnlLine.VALIDATE(Quantity, CorrCoef*FABuffer.Quantity);

      //Расчет Суммы

      IF FABuffer."Debit Currency Code" <> GLSetup."Extern. LCY Code" THEN BEGIN
        Currency.RESET;
        Currency.SETRANGE(Currency."Source Currency Code",FABuffer."Debit Currency Code");
        IF Currency.FINDFIRST THEN
          GenJnlLine.VALIDATE("Currency Code", Currency.Code)
        ELSE BEGIN
          Indicator.CLOSE;
          ERROR(STRSUBSTNO(Text00004, FABuffer."Debit Currency Code"));
        END;
      END;

      IF FABuffer."Debit Currency Code" = '' THEN
        GenJnlLine.VALIDATE(GenJnlLine.Amount,-CorrCoef*FABuffer."Amount (LCY)")
      ELSE
        GenJnlLine.VALIDATE(GenJnlLine.Amount, -CorrCoef*FABuffer."Debit Original Amount");

      IF  (CorrCoef*FABuffer."Amount (LCY)") < 0 THEN
        GenJnlLine.VALIDATE(GenJnlLine.Correction, TRUE);

      GenJnlLine.VALIDATE(Description, Text00100);
      GenJnlLine.VALIDATE("Gen. Posting Type", GenJnlLine."Gen. Posting Type"::" ");
      GenJnlLine.VALIDATE("Gen. Bus. Posting Group", '');
      GenJnlLine.VALIDATE("Gen. Prod. Posting Group",'');
      GenJnlLine.INSERT;

      DimType := DimType::Journal;
      CheckDimension(FABuffer, GenJnlLine, FADocLineFict, FAJnlLineFict,DimType,FALSE,MappingCode);
    END;

    PROCEDURE CreateReleaseFAJourLine@1210008(FANo1@1210003 : Code[20];FANo2@1210002 : Code[20];FABuffer@1210001 : Record 50008;VAR FATransSetup@1210000 : Record 50004;VAR FaJnlAmountUSD@1210019 : Decimal;MappingCode@1000000003 : Code[20]);
    VAR
      CurTemplateCode@1210010 : Code[10];
      CurBatchCode@1210009 : Code[10];
      ConsolidationSource@1210008 : Record 50001;
      ConsolidationSetup@1210007 : Record 50000;
      FALedgerEntry@1210004 : Record 5601;
      Qty@1210005 : Decimal;
      FAJnlLine@1210006 : Record 5621;
      FAJnlLine1@1210011 : Record 5621;
      FAJnlBatch@1210012 : Record 5620;
      CurDocNo@1210013 : Code[20];
      LineNo@1210014 : Integer;
      DimType@1210015 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210016 : Record 81;
      FADocLineFict@1210017 : Record 12477;
      FALedgerEntry1@1210018 : Record 5601;
      FAJnlPostBatch@1210020 : Codeunit 5633;
      FixedAsset@1210021 : Record 5600;
      FADeprBookFE@1210022 : Record 5612;
      FALedgEntryError@1000000000 : Record 5601;
      FALedgerEntryOVA@1000000001 : Record 5601;
      FALedgerEntryOVA1@1000000002 : Record 5601;
    BEGIN
      //Определение шаблона, раздела журнала, номера документа и строки

      FaJnlAmountUSD := 0;
      //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsolidationSource.GET(FABuffer."Cons. Source Code");
      ConsolidationSource.TESTFIELD(ConsolidationSource."Release FA Batch Name");
      CurBatchCode := ConsolidationSource."Release FA Batch Name";

      ConsolidationSetup.GET;
      ConsolidationSetup.TESTFIELD(ConsolidationSetup."FA Import FA Jnl Template");
      CurTemplateCode := ConsolidationSetup."FA Import FA Jnl Template";

      FAJnlLine1.SETRANGE("Journal Template Name", CurTemplateCode);
      FAJnlLine1.SETRANGE("Journal Batch Name", CurBatchCode);
      IF FAJnlLine1.FIND('+') THEN BEGIN
        CurDocNo := INCSTR(FAJnlLine1."Document No.");
        LineNo := FAJnlLine1."Line No." + 10000
      END ELSE BEGIN
        LineNo := 10000;
        FAJnlBatch.GET(CurTemplateCode,CurBatchCode);
        FAJnlBatch.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        CurDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch."No. Series", FABuffer."Document Date",FALSE);
      END;

      IF FATransSetup."Currency Code" <> '' THEN BEGIN
      //создание нескольких операций по книге ПРИОБР_ОС (НМА)

      //Создание операции с пустой суммой, если загружается операция сторно ввода в эксплуатацию
      IF FABuffer."Amount (LCY)" < 0 THEN BEGIN
          FALedgEntryError.RESET;
          FALedgEntryError.SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type",
                                         "FA Posting Date");
          FALedgEntryError.SETRANGE("FA No.",FANo1);
          FALedgEntryError.SETRANGE("Depreciation Book Code",FATransSetup."Depreciation Book Debit");
          FALedgEntryError.SETRANGE("FA Posting Type",
                                    FALedgEntryError."FA Posting Type"::"Acquisition Cost");
          FALedgEntryError.SETFILTER("FA Posting Date",'<=%1',FABuffer."Document Date");
          IF FALedgEntryError.FINDLAST THEN BEGIN
            //Поиск операции приобретения, с которой нужно снять флаг Обработано
            FALedgerEntryOVA.RESET;
            FALedgerEntryOVA.SETCURRENTKEY("Cons. Source Code",Processed,"Processed by Buffer Entry No");
            FALedgerEntryOVA.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");
            FALedgerEntryOVA.SETRANGE("Processed by Buffer Entry No", FALedgEntryError."Buffer Entry No.");
            FALedgerEntryOVA.SETRANGE(Processed,TRUE);
            IF FALedgerEntryOVA.FINDSET(TRUE,TRUE) THEN
            REPEAT
              FALedgerEntryOVA1 := FALedgerEntryOVA;
              FALedgerEntryOVA1.Processed := FALSE;
              FALedgerEntryOVA1."Processed by Buffer Entry No" := 0;
              FALedgerEntryOVA1.MODIFY;
            UNTIL FALedgerEntryOVA.NEXT = 0;
          END;
          FALedgEntryError.CALCSUMS(Amount);

          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo1);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          FAJnlLine."OVA No." := FANo2;
          FAJnlLine.VALIDATE("FA Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE(Description,FABuffer.Description);
          FAJnlLine.VALIDATE(Amount, -FALedgEntryError.Amount);
          FAJnlLine.VALIDATE(Correction,TRUE);
          FaJnlAmountUSD := FALedgEntryError.Amount;
          FAJnlLine.VALIDATE(Quantity,-1);
          IF FaJnlAmountUSD = 0 THEN
          //NC MFA01 > DP
          {
          FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry('',FABuffer."Document No.",Text00113);
          }
          FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry2(FABuffer,Text00117,'EFA18');
          //NC MFA01 < DP
          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);

      END ELSE BEGIN

      IF FATransSetup."Leasing Object" THEN BEGIN
      //Расчет суммы ввода в эксплуатацию по всем операциям в карточке ОВА, распределение по кол-ву
        FALedgerEntry.RESET;
        FALedgerEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","Reklass. Capital %","Reclassification Entry",Processed,
                                    "Posting Date");
        FALedgerEntry.SETRANGE(FALedgerEntry."FA No.", FANo2);
        //FALedgerEntry.SETRANGE(FALedgerEntry."Reklass. Capital %", FALSE);
        //FALedgerEntry.SETRANGE(FALedgerEntry."Reclassification Entry", FALSE);
        FALedgerEntry.CALCSUMS(Quantity);
        FALedgerEntry.CALCSUMS(Amount);
        Qty := FALedgerEntry.Quantity;
        IF Qty <= 0 THEN Qty := 1;


      IF FALedgerEntry.COUNT > 0 THEN BEGIN
          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo1);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE("FA Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FALedgerEntry."External Document No.");
          FAJnlLine.VALIDATE(Description,FABuffer.Description);
          FAJnlLine.VALIDATE(Amount, FALedgerEntry.Amount/Qty);
          FaJnlAmountUSD := FALedgerEntry.Amount/Qty;
          IF NOT LeasReleaseGenJnlLineExist(FANo2) THEN BEGIN
            FAJnlLine.VALIDATE(Amount,
              FALedgerEntry.Amount - (Qty - 1) * ROUND(FALedgerEntry.Amount/Qty,0.01));
            FaJnlAmountUSD := FALedgerEntry.Amount - (Qty - 1) * ROUND(FALedgerEntry.Amount/Qty,0.01);
          END;
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          FAJnlLine."OVA No." := FANo2;
          FAJnlLine.INSERT(TRUE);
          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);
          LineNo += 10000;
        END ELSE BEGIN
        //Не найдены операции приобретения при вводе в эксплуатацию
          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo1);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          FAJnlLine."OVA No." := FANo2;
          //NC MFA01 > DP
          {
          FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry('',FABuffer."Document No.",Text00133);
          }
          FixedAsset.GET(FANo2);
          FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry1(FABuffer,FixedAsset,Text00133,'EFA12');
          //NC MFA01 > DP
          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);

        END;
      END ELSE BEGIN
      //Расчет суммы ввода в эксплуатацию по необработанным операциям в карточке ОВА
        FALedgerEntry.RESET;
        FALedgerEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","Reklass. Capital %","Reclassification Entry",Processed,
                                    "Posting Date");
        FALedgerEntry.SETRANGE(FALedgerEntry."FA No.", FANo2);
        FALedgerEntry.SETRANGE(FALedgerEntry."Reklass. Capital %", FALSE);
        FALedgerEntry.SETRANGE(FALedgerEntry."Reclassification Entry", FALSE);
        FALedgerEntry.SETRANGE(FALedgerEntry.Processed, FALSE);
        FALedgerEntry.SETFILTER(FALedgerEntry."Posting Date",'<=%1', FABuffer."Document Date");
        IF NOT FALedgerEntry.FINDSET(TRUE, TRUE) THEN BEGIN
        //Не найдены операции приобретения при вводе в эксплуатацию
          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo1);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          //FAJnlLine.VALIDATE("External Document No.", FALedgerEntry."External Document No.");
          //FAJnlLine.VALIDATE(Description, FALedgerEntry.Description);
          //FAJnlLine.VALIDATE(Amount, FALedgerEntry.Amount/Qty);
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          FAJnlLine."OVA No." := FANo2;

          //NC MFA01 > DP
          {
          FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry('',FABuffer."Document No.",Text00133);
          }
          FixedAsset.GET(FANo2);
          FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry1(FABuffer,FixedAsset,Text00133,'EFA12');
          //NC MFA01 > DP
          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);

        END ELSE
        REPEAT
        IF NOT FALedgerEntry."Capital %" THEN BEGIN
          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo1);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE("FA Posting Date", FALedgerEntry."FA Posting Date");
          FAJnlLine.VALIDATE("Posting Date", FALedgerEntry."Posting Date");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FALedgerEntry."External Document No.");
          FAJnlLine.VALIDATE(Description, FALedgerEntry.Description);
          FAJnlLine.VALIDATE(Amount, FALedgerEntry.Amount);
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          FAJnlLine."OVA No." := FANo2;
          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);

          FaJnlAmountUSD += FALedgerEntry.Amount;
          FALedgerEntry1 := FALedgerEntry;
          FALedgerEntry1.Processed := TRUE;
          FALedgerEntry1."Processed by Buffer Entry No" := FABuffer."Entry No.";
          FALedgerEntry1.MODIFY;
          LineNo += 10000;
          FixedAsset.GET(FANo1);
          IF FixedAsset."FA Type" = FixedAsset."FA Type"::"Future Expense" THEN BEGIN
            FADeprBookFE.GET(FANo1,FATransSetup."Depreciation Book Debit");
            FADeprBookFE.VALIDATE("Depreciation Starting Date",FABuffer."Document Date");
            FADeprBookFE.MODIFY;
          END;
          END;

        UNTIL FALedgerEntry.NEXT = 0;
      END;
      END;
      END ELSE BEGIN
      //Создание одной операции для локального учета
          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo1);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE("FA Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");
          FAJnlLine.VALIDATE(Description, FABuffer.Description);
          FAJnlLine.VALIDATE(Amount, FABuffer."Amount (LCY)");
          IF FABuffer."Amount (LCY)" < 0 THEN
            FAJnlLine.VALIDATE(Correction,TRUE);
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          FAJnlLine."OVA No." := FANo2;
          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);
          FixedAsset.GET(FANo1);
          IF FixedAsset."FA Type" = FixedAsset."FA Type"::"Future Expense" THEN BEGIN
            FADeprBookFE.GET(FANo1,FATransSetup."Depreciation Book Debit");
            FADeprBookFE.VALIDATE("Depreciation Starting Date",FABuffer."Document Date");
            FADeprBookFE.MODIFY;
          END;
      END;
    END;

    PROCEDURE CreateErrorLogEntry1@1000000009(FABufferErr@1000000006 : Record 50008;FA@1000000007 : Record 5600;ErrMessage@1000000008 : Text[250];ErrCode@1000000000 : Code[10]) : Integer;
    BEGIN
      //NC MFA01 > DP
      ErrorJournal.AddErrorBuferFA(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       FABufferErr."Cons. Source Code",FAConsRegister."No.",
                                       ErrCode,ErrMessage,COMPANYNAME,FABufferErr,FA,0);
      //NC NOS-26 > SPA
      //EXIT(ErrorJournal."Line No.");
      EXIT(ErrorJournal."Entry No.");
      //NC NOS-26 < SPA
      //NC MFA01 > DP
    END;

    PROCEDURE CreateErrorLogEntry2@1000000012(FABufferErr@1000000006 : Record 50008;ErrMessage@1000000008 : Text[250];ErrCode@1000000000 : Code[10]) : Integer;
    BEGIN
      //NC MFA01 > DP
      ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       FABufferErr."Cons. Source Code",FAConsRegister."No.",
                                       ErrCode,ErrMessage,COMPANYNAME,FABufferErr,0);
      //NC NOS-26 > SPA
      //EXIT(ErrorJournal."Line No.");
      EXIT(ErrorJournal."Entry No.");
      //NC NOS-26 < SPA
      //NC MFA01 > DP
    END;

    PROCEDURE CreateWarningLogEntry1@1000000030(FABufferErr@1000000006 : Record 50008;ErrMessage@1000000008 : Text[250];ErrCode@1000000000 : Code[10]) : Integer;
    BEGIN
      //NC MFA01 > DP
      ErrorJournal.AddErrorBufer(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Warning,
                                       FABufferErr."Cons. Source Code",FAConsRegister."No.",
                                       ErrCode,ErrMessage,COMPANYNAME,FABufferErr,0);
      //NC NOS-26 > SPA
      //EXIT(ErrorJournal."Line No.");
      EXIT(ErrorJournal."Entry No.");
      //NC NOS-26 < SPA
      //NC MFA01 > DP
    END;

    PROCEDURE CreateReklass@1210011(FANo1@1210004 : Code[20];FANo2@1210003 : Code[20];FABuffer@1210002 : Record 50008;VAR FATransSetup@1210001 : Record 50004;MappingCode@1000000002 : Code[20]);
    VAR
      FAReclassJnl@1210019 : Record 5624;
      FAReclassJnl1@1210018 : Record 5624;
      FASetup@1210017 : Record 5603;
      FixedAsset@1210016 : Record 5600;
      FAReclassTemplate@1210015 : Record 5622;
      FAReclassBatch@1210014 : Record 5623;
      LineNo@1210013 : Integer;
      FAReclassCheckLine@1210012 : Codeunit 5641;
      FAReclassTransferLine@1210011 : Codeunit 5642;
      ReclDone@1210010 : Boolean;
      GenJnlLine@1210009 : Record 81;
      DimMgt@1210006 : Codeunit 408;
      GenJnlPostLine@1210005 : Codeunit 12;
      DeprBookCode1@1210000 : Code[10];
      DimType@1210022 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210021 : Record 81;
      FADocLineFict@1210020 : Record 12477;
      FAJnlLineFict@1210023 : Record 5621;
      GenJnlLine1@1210024 : Record 81;
      GenJnlPostBatch@1210025 : Codeunit 13;
      FAJnlLine@1210026 : Record 5621;
      FAJnlLine1@1210027 : Record 5621;
      FAJnlPostBatch@1210028 : Codeunit 5633;
      NextGenJDocNo@1210029 : Code[20];
      NextFAJDocNo@1210030 : Code[20];
      ConsSetup2@1210031 : Record 50000;
      ConsSource2@1210032 : Record 50001;
      GenJnlBatch2@1210033 : Record 232;
      FAJnlBatch2@1210034 : Record 5620;
      GenJnlLine2@1210035 : Record 81;
      FAJnlLine2@1210036 : Record 5621;
      BatchName1@1210037 : Code[10];
      NewDimValueCode@1000000000 : Code[20];
      OldDimValueCode@1000000001 : Code[20];
    BEGIN
      FAReclassTemplate.SETRANGE("Page ID", PAGE::"FA Reclass. Journal");
      IF NOT FAReclassTemplate.FIND('-') THEN BEGIN
        Indicator.CLOSE;
        ERROR(Text00018);
      END;
      FAReclassBatch.SETRANGE("Journal Template Name", FAReclassTemplate.Name);
      IF NOT FAReclassBatch.FIND('-') THEN BEGIN
        Indicator.CLOSE;
        ERROR(Text00018);
      END;

      ConsSetup2.GET;
      //ConsSource2.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsSource2.GET(FABuffer."Cons. Source Code");

      GenJnlLine2.SETRANGE("Journal Template Name",ConsSetup2."FA Import Journal Template");
      GenJnlLine2.SETRANGE("Journal Batch Name",ConsSource2."Reclass. Gen. Batch Name");
      IF GenJnlLine2.FINDLAST THEN
        NextGenJDocNo := INCSTR(GenJnlLine2."Document No.")
      ELSE BEGIN
        GenJnlBatch2.GET(ConsSetup2."FA Import Journal Template",ConsSource2."Reclass. Gen. Batch Name");
        GenJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextGenJDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch2."No. Series",FABuffer."Document Date",FALSE);
      END;

      FAJnlLine2.SETRANGE("Journal Template Name",ConsSetup2."FA Import FA Jnl Template");
      FAJnlLine2.SETRANGE("Journal Batch Name",ConsSource2."Reclass. FA Batch Name");
      IF FAJnlLine2.FINDLAST THEN
        NextFAJDocNo := INCSTR(FAJnlLine2."Document No.")
      ELSE BEGIN
        FAJnlBatch2.GET(ConsSetup2."FA Import FA Jnl Template",ConsSource2."Reclass. FA Batch Name");
        FAJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextFAJDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch2."No. Series",FABuffer."Document Date",FALSE);
      END;

      FAReclassJnl1.SETRANGE("Journal Template Name", FAReclassJnl."Journal Template Name");
      FAReclassJnl1.SETRANGE("Journal Batch Name", FAReclassJnl."Journal Batch Name");
      IF FAReclassJnl1.FIND('+') THEN
        LineNo := FAReclassJnl1."Line No." + 10000
      ELSE
        LineNo := 10000;

      FAReclassJnl."Journal Template Name" := FAReclassTemplate.Name;
      FAReclassJnl."Journal Batch Name" :=  FAReclassBatch.Name;
      FAReclassJnl."Line No." := LineNo;
      FAReclassJnl.VALIDATE("FA Posting Date", FABuffer."Document Date");
      FAReclassJnl.VALIDATE("Posting Date", FABuffer."Document Date");
      FAReclassJnl.VALIDATE("FA No.", FANo2);
      FAReclassJnl.VALIDATE("New FA No.", FANo1);
      FAReclassJnl.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Credit");
      FAReclassJnl.VALIDATE("New Depreciation Book Code", FATransSetup."Depreciation Book Debit");



      //NC MFA16 > DP
      MovingDataSetup.GET;

      //NC MFA29 > DP
      IF FATransSetup."Leasing Object" THEN BEGIN
        MovingDataSetup.TESTFIELD("Customer Dimension Code");
        IF TempDebitLedgEntryDim.GET(17,FABuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN
          NewDimValueCode := TempDebitLedgEntryDim."Dimension Value Code";
        IF TempCreditLedgEntryDim.GET(17,FABuffer."Entry No.",MovingDataSetup."Customer Dimension Code") THEN
          OldDimValueCode := TempCreditLedgEntryDim."Dimension Value Code";
        IF NewDimValueCode<>OldDimValueCode THEN BEGIN
          FAReclassJnl."FA Dimension Code" := MovingDataSetup."Customer Dimension Code";
          FAReclassJnl."FA Dimension Value Code" :=OldDimValueCode;
          FAReclassJnl."New FA Dimension Value Code" := NewDimValueCode;
        END;

      END ELSE BEGIN
      //NC MFA29 > DP


      MovingDataSetup.TESTFIELD("PROFIT CENTER Dimension Code");
      IF TempDebitLedgEntryDim.GET(17,FABuffer."Entry No.",MovingDataSetup."PROFIT CENTER Dimension Code") THEN
        NewDimValueCode := TempDebitLedgEntryDim."Dimension Value Code";
      IF TempCreditLedgEntryDim.GET(17,FABuffer."Entry No.",MovingDataSetup."PROFIT CENTER Dimension Code") THEN
        OldDimValueCode := TempCreditLedgEntryDim."Dimension Value Code";
      IF NewDimValueCode<>OldDimValueCode THEN BEGIN
        FAReclassJnl."FA Dimension Code" := MovingDataSetup."PROFIT CENTER Dimension Code";
        FAReclassJnl."FA Dimension Value Code" :=OldDimValueCode;
        FAReclassJnl."New FA Dimension Value Code" := NewDimValueCode;
      END;
      //NC MFA16 < DP

      //NC MFA29 > DP
      END;
      //NC MFA29 < DP

      FAReclassJnl."Buffer Entry No." := FABuffer."Entry No.";
      FAReclassJnl."Cons. Source Code" := FABuffer."Cons. Source Code";

      IF FATransSetup."Navision Document Type" = FATransSetup."Navision Document Type"::"Gen. Journal" THEN BEGIN
        FAReclassJnl.VALIDATE("Reclassify Acq. Cost %", 100);
        FAReclassJnl.VALIDATE("Reclassify Depreciation", TRUE);
        BatchName1 := ConsSource2."Reclass. Gen. Batch Name";
      END ELSE BEGIN
        FAReclassJnl.VALIDATE("Reclassify Acq. Cost %", 100);
        FAReclassJnl.VALIDATE("Reclassify Depreciation", TRUE);
        BatchName1 := ConsSource2."Reclass. FA Batch Name";
      END;

      FAReclassJnl.VALIDATE("Reclassify Acquisition Cost", TRUE);

      //Учитываем заполненный журнал реклассификации -> создаются строки в фин. журнале.
      FAReclassCheckLine.RUN(FAReclassJnl);
      FAReclassTransferLine.FAReclassLine1(FAReclassJnl,ReclDone,FABuffer,NextFAJDocNo,NextGenJDocNo,BatchName1);

      IF FATransSetup."Navision Document Type" = FATransSetup."Navision Document Type"::"Gen. Journal" THEN BEGIN

        GenJnlLine.RESET;
        GenJnlLine.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
        GenJnlLine.SETRANGE(GenJnlLine."Buffer Entry No.", FABuffer."Entry No.");
        GenJnlLine.SETRANGE(GenJnlLine."Cons. Source Code", FABuffer."Cons. Source Code");

        IF GenJnlLine.FIND('-') THEN
          REPEAT
            DimType := DimType::Journal;
            IF GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Depreciation THEN
              GenJnlLine.VALIDATE(Correction,TRUE);
            CheckDimension(FABuffer, GenJnlLine, FADocLineFict, FAJnlLineFict,DimType,FALSE,MappingCode);
            IF GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Depreciation THEN
              GenJnlLine.VALIDATE(Correction,FALSE);
          UNTIL GenJnlLine.NEXT = 0;
      END ELSE BEGIN
        FAJnlLine.RESET;
        FAJnlLine.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
        FAJnlLine.SETRANGE("Buffer Entry No.", FABuffer."Entry No.");
        FAJnlLine.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");
        IF FAJnlLine.FIND('-') THEN
          REPEAT
            IF FAJnlLine."FA Posting Type" = FAJnlLine."FA Posting Type"::Depreciation THEN
              FAJnlLine.VALIDATE(Correction,TRUE);
            DimType := DimType::FAJournal;
            CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine, DimType,FALSE,MappingCode);
            IF FAJnlLine."FA Posting Type" = FAJnlLine."FA Posting Type"::Depreciation THEN
              FAJnlLine.VALIDATE(Correction,FALSE);
          UNTIL FAJnlLine.NEXT = 0;
      END;
    END;

    PROCEDURE CreateCorrReclassFAJourLine@1210005(FANo1@1210004 : Code[20];FANo2@1210003 : Code[20];FABuffer@1210002 : Record 50008;VAR FATransSetup@1210001 : Record 50004;Corr@1210019 : Boolean;MappingCode@1000000000 : Code[20]);
    VAR
      FAJnlAmountFict@1210018 : Decimal;
      SetupType@1210017 : 'Debet,Credit';
      CurTemplateCode@1210016 : Code[10];
      CurBatchCode@1210015 : Code[10];
      ConsolidationSource@1210014 : Record 50001;
      ConsolidationSetup@1210013 : Record 50000;
      FAJnlBatch@1210012 : Record 5620;
      CurDocNo@1210011 : Code[20];
      LineNo@1210010 : Integer;
      DimType@1210009 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210008 : Record 81;
      FADocLineFict@1210007 : Record 12477;
      FAJnlLine1@1210006 : Record 5621;
      FAJnlLine@1210005 : Record 5621;
      FAJnlPostBatch@1210000 : Codeunit 5633;
    BEGIN
        //Определение шаблона, раздела журнала, номера документа и строки
        //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
        ConsolidationSource.GET(FABuffer."Cons. Source Code");
        ConsolidationSource.TESTFIELD(ConsolidationSource."Reclass. FA Batch Name");
        CurBatchCode := ConsolidationSource."Reclass. FA Batch Name";

        ConsolidationSetup.GET;
        ConsolidationSetup.TESTFIELD(ConsolidationSetup."FA Import FA Jnl Template");
        CurTemplateCode := ConsolidationSetup."FA Import FA Jnl Template";

        FAJnlLine1.SETRANGE("Journal Template Name", CurTemplateCode);
        FAJnlLine1.SETRANGE("Journal Batch Name", CurBatchCode);
        IF FAJnlLine1.FIND('+') THEN BEGIN
          CurDocNo := INCSTR(FAJnlLine1."Document No.");
          LineNo := FAJnlLine1."Line No." + 10000
        END ELSE BEGIN
          LineNo := 10000;
          FAJnlBatch.GET(CurTemplateCode,CurBatchCode);
          FAJnlBatch.TESTFIELD("No. Series");
          CLEAR(NoSeriesMgt);
          CurDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch."No. Series", FABuffer."Document Date",FALSE);
        END;

          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo1);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransformationSetup."Depreciation Book Debit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE("FA Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");
          FAJnlLine.VALIDATE(Description, FABuffer.Description);
          FAJnlLine.VALIDATE(Amount, FABuffer."Amount (LCY)");
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          //NC MDA01 > MP
          {
          FAJnlLine."Source Code" := ConsSetup."Source Code";
          }
          FAJnlLine."Source Code" := SourceCodeSetup."FA Transformation";
          //NC MDA01 < MP
          FAJnlLine.VALIDATE(FAJnlLine.Correction, Corr);

          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);

          CurDocNo += INCSTR(CurDocNo);
          LineNo += 10000;

          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo2);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransformationSetup."Depreciation Book Credit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
          FAJnlLine.VALIDATE("FA Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");
          FAJnlLine.VALIDATE(Description, FABuffer.Description);
          FAJnlLine.VALIDATE(Amount, - FABuffer."Amount (LCY)");
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          FAJnlLine.VALIDATE(FAJnlLine.Correction, Corr);
          //NC MDA01 > MP
          {
          FAJnlLine."Source Code" := ConsSetup."Source Code";
          }
          FAJnlLine."Source Code" := SourceCodeSetup."FA Transformation";
          //NC MDA01 < MP
          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);
    END;

    PROCEDURE CreateDisposalFAJourLine@1210014(FANo1@1210003 : Code[20];FABuffer@1210001 : Record 50008;VAR FATransSetup@1210000 : Record 50004;MappingCode@1000000001 : Code[20]);
    VAR
      CurFANo1@1210018 : Code[20];
      FAJnlAmountFict@1210017 : Decimal;
      SetupType@1210016 : 'Debet,Credit';
      CurTemplateCode@1210015 : Code[10];
      CurBatchCode@1210014 : Code[10];
      ConsolidationSource@1210013 : Record 50001;
      ConsolidationSetup@1210012 : Record 50000;
      FAJnlBatch@1210011 : Record 5620;
      CurDocNo@1210010 : Code[20];
      LineNo@1210009 : Integer;
      DimType@1210008 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210007 : Record 81;
      FADocLineFict@1210006 : Record 12477;
      FAJnlLine1@1210005 : Record 5621;
      FAJnlLine@1210004 : Record 5621;
      FAJnlPostBatch@1210002 : Codeunit 5633;
      FixedAsset@1000000000 : Record 5600;
    BEGIN
        //Определение шаблона, раздела журнала, номера документа и строки
        //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
        ConsolidationSource.GET(FABuffer."Cons. Source Code");
        ConsolidationSource.TESTFIELD(ConsolidationSource."Dispose FA Batch Name");
        CurBatchCode := ConsolidationSource."Dispose FA Batch Name";

        ConsolidationSetup.GET;
        ConsolidationSetup.TESTFIELD(ConsolidationSetup."FA Import FA Jnl Template");
        CurTemplateCode := ConsolidationSetup."FA Import FA Jnl Template";

        FAJnlLine1.SETRANGE("Journal Template Name", CurTemplateCode);
        FAJnlLine1.SETRANGE("Journal Batch Name", CurBatchCode);
        IF FAJnlLine1.FIND('+') THEN BEGIN
          CurDocNo := INCSTR(FAJnlLine1."Document No.");
          LineNo := FAJnlLine1."Line No." + 10000
        END ELSE BEGIN
          LineNo := 10000;
          FAJnlBatch.GET(CurTemplateCode,CurBatchCode);
          FAJnlBatch.TESTFIELD("No. Series");
          CLEAR(NoSeriesMgt);
          CurDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch."No. Series", FABuffer."Document Date",FALSE);
        END;

      //Создание операции локального учета
          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FANo1);
          FAJnlLine.VALIDATE("Depreciation Book Code", FATransformationSetup."Depreciation Book Credit");
          FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::Disposal);
          FAJnlLine.VALIDATE("FA Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");
          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FABuffer."Document No.");
          FAJnlLine.VALIDATE(Description, FABuffer.Description);
          FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
          FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
          //NC MDA01 > MP
          {
          FAJnlLine."Source Code" := ConsSetup."Source Code";
          }
          FAJnlLine."Source Code" := SourceCodeSetup."FA Transformation";
          //NC MDA01 < MP

          IF FABuffer."Amount (LCY)" < 0 THEN
            //NC MFA01 > DP

            {
            FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry('',FABuffer."Document No.",Text00119);
            }
            BEGIN
            IF FixedAsset.GET(FANo1) THEN
              FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry1(FABuffer,FixedAsset, Text00119,'')
            ELSE
              FAJnlLine."Cons. Register Error Entry No." := CreateErrorLogEntry2(FABuffer,Text00119,'');
            END;
            //NC MFA01 > DP
          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);
    END;

    PROCEDURE CreateRemoveReleaseFAJourLine@1210010(FABuffer@1210001 : Record 50008;VAR FATransSetup@1210000 : Record 50004;ErrorConsSourceCode@1210022 : Code[20];ErrorBufEntryNo@1210021 : Integer;MappingCode@1000000000 : Code[20]);
    VAR
      CurTemplateCode@1210010 : Code[10];
      CurBatchCode@1210009 : Code[10];
      ConsolidationSource@1210008 : Record 50001;
      ConsolidationSetup@1210007 : Record 50000;
      FALedgerEntry@1210004 : Record 5601;
      Qty@1210005 : Integer;
      FAJnlLine@1210006 : Record 5621;
      FAJnlLine1@1210011 : Record 5621;
      FAJnlBatch@1210012 : Record 5620;
      CurDocNo@1210013 : Code[20];
      LineNo@1210014 : Integer;
      DimType@1210015 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210016 : Record 81;
      FADocLineFict@1210017 : Record 12477;
      FALedgerEntry1@1210018 : Record 5601;
      FAJnlPostBatch@1210020 : Codeunit 5633;
    BEGIN
      REPEAT
      //Поиск исходной операции в ОС Книге (либо для ПРИОБР_ОС, либо для РСБУ_ОС)
        FALedgEntryError.RESET;
        FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuffer."Cons. Source Code");
        FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuffer."Entry No.");
        FALedgEntryError.SETRANGE(FALedgEntryError."Depreciation Book Code", FATransSetup."Depreciation Book Debit");
        IF NOT FALedgEntryError.FINDFIRST THEN BEGIN
          Indicator.CLOSE;
          ERROR(Text00107, FABuffer."Entry No.", ErrorBufEntryNo);
        END;

      //Определение шаблона, раздела журнала, номера документа и строки
        //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
        ConsolidationSource.GET(FABuffer."Cons. Source Code");
        ConsolidationSource.TESTFIELD(ConsolidationSource."Release FA Batch Name");
        CurBatchCode := ConsolidationSource."Release FA Batch Name";

        ConsolidationSetup.GET;
        ConsolidationSetup.TESTFIELD(ConsolidationSetup."FA Import FA Jnl Template");
        CurTemplateCode := ConsolidationSetup."FA Import FA Jnl Template";

        FAJnlLine1.SETRANGE("Journal Template Name", CurTemplateCode);
        FAJnlLine1.SETRANGE("Journal Batch Name", CurBatchCode);
        IF FAJnlLine1.FIND('+') THEN BEGIN
          CurDocNo := INCSTR(FAJnlLine1."Document No.");
          LineNo := FAJnlLine1."Line No." + 10000
        END ELSE BEGIN
          LineNo := 10000;
          FAJnlBatch.GET(CurTemplateCode,CurBatchCode);
          FAJnlBatch.TESTFIELD("No. Series");
          CLEAR(NoSeriesMgt);
          CurDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch."No. Series", FABuffer."Document Date",FALSE);
        END;

        REPEAT
        //Создание сторнирующих операций
          FAJnlLine.INIT;
          FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
          FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
          FAJnlLine.VALIDATE("Line No.", LineNo);
          FAJnlLine.VALIDATE("FA No.", FALedgEntryError."FA No.");
          FAJnlLine.VALIDATE("Depreciation Book Code", FALedgEntryError."Depreciation Book Code");
          FAJnlLine.VALIDATE("FA Posting Type",FALedgEntryError."FA Posting Type");

          IF FALedgEntryError."Posting Date" < GLSetup."Allow Posting From" THEN
            FAJnlLine.VALIDATE("Posting Date", GLSetup."Allow Posting From")
          ELSE
            FAJnlLine.VALIDATE("Posting Date", FALedgEntryError."Posting Date");

          FAJnlLine.VALIDATE("FA Posting Date", FAJnlLine."Posting Date");

          FAJnlLine.VALIDATE("Document No.",CurDocNo);
          FAJnlLine.VALIDATE("External Document No.", FALedgEntryError."External Document No.");
          FAJnlLine.VALIDATE(Description, FALedgEntryError.Description);
          FAJnlLine.VALIDATE(Amount, -FALedgEntryError.Amount);
          FAJnlLine."Buffer Entry No." := ErrorBufEntryNo;
          FAJnlLine."Cons. Source Code" := ErrorConsSourceCode;
          FAJnlLine."FA Error Entry No." := FALedgEntryError."Entry No.";
          FAJnlLine."OVA No." := FALedgEntryError."OVA No.";
          //NC MDA01 > MP
          {
          FAJnlLine."Source Code" := ConsSetup."Source Code";
          }
          FAJnlLine."Source Code" := SourceCodeSetup."FA Transformation";
          //NC MDA01 < MP
          FAJnlLine.VALIDATE(Correction,TRUE);
          FAJnlLine.INSERT(TRUE);

          DimType := DimType::FAJournal;
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);
          LineNo += 10000;
        UNTIL FALedgEntryError.NEXT = 0;

      //Поиск операции приобретения, с которой нужно снять флаг Обработано
        FALedgerEntry.RESET;
        FALedgerEntry.SETCURRENTKEY("Cons. Source Code",Processed,"Processed by Buffer Entry No");
        FALedgerEntry.SETRANGE(FALedgerEntry."Cons. Source Code", FABuffer."Cons. Source Code");
        FALedgerEntry.SETRANGE(FALedgerEntry."Processed by Buffer Entry No", FABuffer."Entry No.");
        FALedgerEntry.SETRANGE(FALedgerEntry.Processed,TRUE);
        IF FALedgerEntry.FINDSET(TRUE,TRUE) THEN
        REPEAT
          FALedgerEntry1 := FALedgerEntry;
          FALedgerEntry1.Processed := FALSE;
          FALedgerEntry1."Processed by Buffer Entry No" := 0;
          FALedgerEntry1.MODIFY;
        UNTIL FALedgerEntry.NEXT = 0;
      UNTIL FATransSetup.NEXT = 0;
    END;

    PROCEDURE LeasReleaseGenJnlLineExist@1210001(FA_Ova@1210002 : Code[20]) : Boolean;
    VAR
      GenJnlLine1@1210003 : Record 81;
    BEGIN

      GenJnlLine1.RESET;
      GenJnlLine1.SETRANGE("Journal Template Name",ConsSetup."FA Import Journal Template");
      GenJnlLine1.SETRANGE("Journal Batch Name",ConsolidationSource."Release Gen. Batch Name");
      GenJnlLine1.SETRANGE("Account Type",GenJnlLine1."Account Type"::"Fixed Asset");
      GenJnlLine1.SETRANGE("Account No.",FA_Ova);
      IF GenJnlLine1.FINDLAST THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE CreateAcquisitionFAJourLine@1210013(FANo1@1210003 : Code[20];FANo2@1210002 : Code[20];FABuffer@1210001 : Record 50008;VAR FATransSetup@1210000 : Record 50004;ErrorConsSourceCode@1210022 : Code[20];ErrorBufEntryNo@1210023 : Integer;MappingCode@1000000000 : Code[20]);
    VAR
      CurTemplateCode@1210010 : Code[10];
      CurBatchCode@1210009 : Code[10];
      ConsolidationSource@1210008 : Record 50001;
      ConsolidationSetup@1210007 : Record 50000;
      FALedgerEntry@1210004 : Record 5601;
      Qty@1210005 : Integer;
      FAJnlLine@1210006 : Record 5621;
      FAJnlLine1@1210011 : Record 5621;
      FAJnlBatch@1210012 : Record 5620;
      CurDocNo@1210013 : Code[20];
      LineNo@1210014 : Integer;
      DimType@1210015 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210016 : Record 81;
      FADocLineFict@1210017 : Record 12477;
      FALedgerEntry1@1210018 : Record 5601;
      FAJnlPostBatch@1210020 : Codeunit 5633;
      FixedAsset@1210019 : Record 5600;
      FADeprBookFE@1210021 : Record 5612;
      CorrCoef@1210024 : Integer;
    BEGIN
      IF ErrorConsSourceCode <> '' THEN BEGIN
        CorrCoef := -1;
        FALedgEntryError.RESET;
        FALedgEntryError.SETRANGE("Depreciation Book Code",FATransSetup."Depreciation Book Debit");
        FALedgEntryError.SETRANGE("Cons. Source Code",FABuffer."Cons. Source Code");
        FALedgEntryError.SETRANGE("Buffer Entry No.",FABuffer."Entry No.");
        FALedgEntryError.SETRANGE("Reklass. Capital %",FALSE);
        FALedgEntryError.SETFILTER(FALedgEntryError."FA No.",'<>%1','');
        IF NOT FALedgEntryError.FINDFIRST THEN BEGIN
          Indicator.CLOSE;
          ERROR(Text00107, FABuffer."Entry No.", ErrorBufEntryNo);
        END;
      END ELSE
        CorrCoef := 1;

      //ConsolidationSource.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsolidationSource.GET(FABuffer."Cons. Source Code");
      ConsolidationSource.TESTFIELD("Acquisition FA Batch Name");
      CurBatchCode := ConsolidationSource."Acquisition FA Batch Name";

      ConsolidationSetup.GET;
      ConsolidationSetup.TESTFIELD("FA Import FA Jnl Template");
      CurTemplateCode := ConsolidationSetup."FA Import FA Jnl Template";

      FAJnlLine1.SETRANGE("Journal Template Name", CurTemplateCode);
      FAJnlLine1.SETRANGE("Journal Batch Name", CurBatchCode);
      IF FAJnlLine1.FIND('+') THEN BEGIN
        CurDocNo := INCSTR(FAJnlLine1."Document No.");
        LineNo := FAJnlLine1."Line No." + 10000
      END ELSE BEGIN
        LineNo := 10000;
        FAJnlBatch.GET(CurTemplateCode,CurBatchCode);
        FAJnlBatch.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        CurDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch."No. Series", FABuffer."Document Date",FALSE);
      END;
      FAJnlLine.INIT;
      FAJnlLine.VALIDATE("Journal Template Name", CurTemplateCode);
      FAJnlLine.VALIDATE("Journal Batch Name", CurBatchCode);
      FAJnlLine.VALIDATE("Line No.", LineNo);
      FAJnlLine.VALIDATE("FA No.", FANo1);
      FAJnlLine.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
      FAJnlLine.VALIDATE("FA Posting Type",FAJnlLine."FA Posting Type"::"Acquisition Cost");
      FAJnlLine.VALIDATE("FA Posting Date", FABuffer."Document Date");
      FAJnlLine.VALIDATE("Posting Date", FABuffer."Document Date");
      FAJnlLine.VALIDATE("Document No.",CurDocNo);
      //FAJnlLine.VALIDATE("External Document No.", FALedgerEntry."External Document No.");
      FAJnlLine.VALIDATE(Description, FABuffer.Description);
      FAJnlLine.VALIDATE(Quantity, CorrCoef*FABuffer.Quantity);
      FAJnlLine.VALIDATE(Amount,CorrCoef*FABuffer."Amount (LCY)");
      //NC MDA01 > MP
      {
      FAJnlLine."Source Code" := ConsSetup."Source Code";
      }
      FAJnlLine."Source Code" := SourceCodeSetup."FA Transformation";
      //NC MDA01 < MP

      IF ErrorConsSourceCode = '' THEN BEGIN
        FAJnlLine."Buffer Entry No." := FABuffer."Entry No.";
        FAJnlLine."Cons. Source Code" := FABuffer."Cons. Source Code";
      END ELSE BEGIN
        FAJnlLine."Buffer Entry No." := ErrorBufEntryNo;
        FAJnlLine."Cons. Source Code" := ErrorConsSourceCode;
        FAJnlLine.VALIDATE("FA Error Entry No.", FALedgEntryError."Entry No.");
      END;
      IF CorrCoef*FABuffer."Amount (LCY)" < 0 THEN
        FAJnlLine.VALIDATE(Correction,TRUE);
      FAJnlLine.INSERT(TRUE);
      FixedAsset.GET(FANo1);
      IF FixedAsset."FA Type" = FixedAsset."FA Type"::"Future Expense" THEN BEGIN
      FADeprBookFE.GET(FANo1,FATransSetup."Depreciation Book Debit");
        FADeprBookFE.VALIDATE("Depreciation Starting Date",FABuffer."Document Date");
        FADeprBookFE.MODIFY;
      END;

      DimType := DimType::FAJournal;
      CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine,DimType,FALSE,MappingCode);
    END;

    PROCEDURE CreateCorrGLReklass@1210015(FANo1@1210004 : Code[20];FANo2@1210003 : Code[20];FABuffer@1210002 : Record 50008;VAR FATransSetup@1210001 : Record 50004;MappingCode@1000000002 : Code[20]);
    VAR
      FAReclassJnl@1210019 : Record 5624;
      FAReclassJnl1@1210018 : Record 5624;
      FASetup@1210017 : Record 5603;
      FixedAsset@1210016 : Record 5600;
      FAReclassTemplate@1210015 : Record 5622;
      FAReclassBatch@1210014 : Record 5623;
      LineNo@1210013 : Integer;
      FAReclassCheckLine@1210012 : Codeunit 5641;
      FAReclassTransferLine@1210011 : Codeunit 5642;
      ReclDone@1210010 : Boolean;
      GenJnlLine@1210009 : Record 81;
      DimMgt@1210006 : Codeunit 408;
      GenJnlPostLine@1210005 : Codeunit 12;
      DeprBookCode1@1210000 : Code[10];
      DimType@1210022 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210021 : Record 81;
      FADocLineFict@1210020 : Record 12477;
      FAJnlLineFict@1210023 : Record 5621;
      GenJnlLine1@1210024 : Record 81;
      GenJnlPostBatch@1210025 : Codeunit 13;
      FAJnlLine@1210026 : Record 5621;
      FAJnlLine1@1210027 : Record 5621;
      FAJnlPostBatch@1210028 : Codeunit 5633;
      NextGenJDocNo@1210029 : Code[20];
      NextFAJDocNo@1210030 : Code[20];
      ConsSetup2@1210031 : Record 50000;
      ConsSource2@1210032 : Record 50001;
      GenJnlBatch2@1210033 : Record 232;
      FAJnlBatch2@1210034 : Record 5620;
      GenJnlLine2@1210035 : Record 81;
      FAJnlLine2@1210036 : Record 5621;
      BatchName1@1210037 : Code[10];
      NewDimValueCode@1000000001 : Code[20];
      OldDimValueCode@1000000000 : Code[20];
    BEGIN
      FAReclassTemplate.SETRANGE("Page ID", PAGE::"FA Reclass. Journal");
      IF NOT FAReclassTemplate.FIND('-') THEN BEGIN
        Indicator.CLOSE;
        ERROR(Text00018);
      END;
      FAReclassBatch.SETRANGE("Journal Template Name", FAReclassTemplate.Name);
      IF NOT FAReclassBatch.FIND('-') THEN BEGIN
        Indicator.CLOSE;
        ERROR(Text00018);
      END;

      ConsSetup2.GET;
      //ConsSource2.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsSource2.GET(FABuffer."Cons. Source Code");

      GenJnlLine2.SETRANGE("Journal Template Name",ConsSetup2."FA Import Journal Template");
      GenJnlLine2.SETRANGE("Journal Batch Name",ConsSource2."Reclass. Gen. Batch Name");
      IF GenJnlLine2.FINDLAST THEN
        NextGenJDocNo := INCSTR(GenJnlLine2."Document No.")
      ELSE BEGIN
        GenJnlBatch2.GET(ConsSetup2."FA Import Journal Template",ConsSource2."Reclass. Gen. Batch Name");
        GenJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextGenJDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch2."No. Series",FABuffer."Document Date",FALSE);
      END;

      FAJnlLine2.SETRANGE("Journal Template Name",ConsSetup2."FA Import FA Jnl Template");
      FAJnlLine2.SETRANGE("Journal Batch Name",ConsSource2."Reclass. FA Batch Name");
      IF FAJnlLine2.FINDLAST THEN
        NextFAJDocNo := INCSTR(FAJnlLine2."Document No.")
      ELSE BEGIN
        FAJnlBatch2.GET(ConsSetup2."FA Import FA Jnl Template",ConsSource2."Reclass. FA Batch Name");
        FAJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextFAJDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch2."No. Series",FABuffer."Document Date",FALSE);
      END;
      FAReclassJnl1.SETRANGE("Journal Template Name", FAReclassJnl."Journal Template Name");
      FAReclassJnl1.SETRANGE("Journal Batch Name", FAReclassJnl."Journal Batch Name");
      IF FAReclassJnl1.FIND('+') THEN
        LineNo := FAReclassJnl1."Line No." + 10000
      ELSE
        LineNo := 10000;

      FAReclassJnl."Journal Template Name" := FAReclassTemplate.Name;
      FAReclassJnl."Journal Batch Name" :=  FAReclassBatch.Name;
      FAReclassJnl."Line No." := LineNo;
      FAReclassJnl.VALIDATE("FA Posting Date", FABuffer."Document Date");
      FAReclassJnl.VALIDATE("Posting Date", FABuffer."Document Date");
      FAReclassJnl.VALIDATE("FA No.", FANo1);
      FAReclassJnl.VALIDATE("New FA No.", FANo2);
      FAReclassJnl.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
      FAReclassJnl.VALIDATE("New Depreciation Book Code", FATransSetup."Depreciation Book Credit");
      FAReclassJnl."Buffer Entry No." := FABuffer."Entry No.";
      FAReclassJnl."Cons. Source Code" := FABuffer."Cons. Source Code";

      //NC MFA16 > DP
      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("PROFIT CENTER Dimension Code");
      IF TempDebitLedgEntryDim.GET(17,FABuffer."Entry No.",MovingDataSetup."PROFIT CENTER Dimension Code") THEN
        NewDimValueCode := TempDebitLedgEntryDim."Dimension Value Code";
      IF TempCreditLedgEntryDim.GET(17,FABuffer."Entry No.",MovingDataSetup."PROFIT CENTER Dimension Code") THEN
        OldDimValueCode := TempCreditLedgEntryDim."Dimension Value Code";
      IF NewDimValueCode<>OldDimValueCode THEN BEGIN
        FAReclassJnl."FA Dimension Code" := MovingDataSetup."PROFIT CENTER Dimension Code";
        FAReclassJnl."FA Dimension Value Code" :=OldDimValueCode;
        FAReclassJnl."New FA Dimension Value Code" := NewDimValueCode;
      END;
      //NC MFA16 < DP

      IF FATransSetup."Navision Document Type" = FATransSetup."Navision Document Type"::"Gen. Journal" THEN BEGIN
        FAReclassJnl.VALIDATE("Reclassify Acq. Cost %", 100);
        FAReclassJnl.VALIDATE("Reclassify Depreciation", TRUE);
        BatchName1 := ConsSource2."Reclass. Gen. Batch Name";

      END ELSE BEGIN
        FAReclassJnl.VALIDATE("Reclassify Acq. Cost %", 100);
        FAReclassJnl.VALIDATE("Reclassify Depreciation", TRUE);
        BatchName1 := ConsSource2."Reclass. FA Batch Name";
      END;

      FAReclassJnl.VALIDATE("Reclassify Acquisition Cost", TRUE);

      //Учитываем заполненный журнал реклассификации -> создаются строки в фин. журнале.
      FAReclassCheckLine.RUN(FAReclassJnl);
      FAReclassTransferLine.FAReclassLine1(FAReclassJnl,ReclDone,FABuffer,NextFAJDocNo,NextGenJDocNo,BatchName1);

      IF FATransSetup."Navision Document Type" = FATransSetup."Navision Document Type"::"Gen. Journal" THEN BEGIN

        GenJnlLine.RESET;
        GenJnlLine.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
        GenJnlLine.SETRANGE(GenJnlLine."Buffer Entry No.", FABuffer."Entry No.");
        GenJnlLine.SETRANGE(GenJnlLine."Cons. Source Code", FABuffer."Cons. Source Code");

        IF GenJnlLine.FIND('-') THEN
          REPEAT
            DimType := DimType::Journal;
            GenJnlLine.VALIDATE(Correction,TRUE);//!!!!!
            CheckDimension(FABuffer, GenJnlLine, FADocLineFict, FAJnlLineFict,DimType,FALSE,MappingCode);
            GenJnlLine.MODIFY(TRUE);
          UNTIL GenJnlLine.NEXT = 0;

      END ELSE BEGIN

        FAJnlLine.RESET;
        FAJnlLine.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
        FAJnlLine.SETRANGE("Buffer Entry No.", FABuffer."Entry No.");
        FAJnlLine.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");

        IF FAJnlLine.FIND('-') THEN
          REPEAT
            DimType := DimType::FAJournal;
            FAJnlLine.VALIDATE(Correction,TRUE);
            CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine, DimType,FALSE,MappingCode);
          UNTIL FAJnlLine.NEXT = 0;
      END;
    END;

    PROCEDURE PostTransfer@1210016(FABuffer@1210000 : Record 50008;TempMapping@1000000002 : TEMPORARY Record 50022);
    VAR
      CurFANo1@1210001 : Code[20];
      CurFANo2@1210002 : Code[20];
      SetupType@1210003 : 'Debit,Credit';
      FATransSetupCorr@1210004 : Record 50004;
      FABufferCorr@1210005 : Record 50008;
      FABuffer1@1210006 : Record 50008;
      FADeprBook9@1210007 : Record 5612;
      BeginDeprDate@1210008 : Date;
      IsFATransSetupFound@1000000000 : Boolean;
      IsFACorrTransSetupFound@1000000001 : Boolean;
    BEGIN
      IF ((FABuffer."Source Operation No." = 0) AND (NOT FABuffer.Removed)) AND (NOT FABuffer."FA Operation Exported") THEN BEGIN
        FATransformationSetup.RESET;
        FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
        "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

        //NC MFA01 > DP
        IsFATransSetupFound := FALSE;
        FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
        //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
        FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
        {
        FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuffer."Cons. Source Code");
        }
        //NC MFA01 < DP

        FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                                                                    TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                    TempMapping."Temp No. Of Symb. In Masks"));
        FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                                                                     TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                     TempMapping."Temp No. Of Symb. In Masks"));
        FATransformationSetup.SETRANGE("FA Operation Type", FABuffer."FA Operation Type");
        FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                       FATransformationSetup."Navision Document Type"::"Gen. Journal");
        //NC MFA01 > DP
        IF FABuffer."FA Class Code"<>'' THEN
          FATransformationSetup.SETRANGE("FA Class Code", FABuffer."FA Class Code");

        IF FATransformationSetup.FINDFIRST THEN BEGIN

          IsFATransSetupFound := TRUE;
        END ELSE BEGIN
          FATransformationSetup.SETRANGE("Company Name");
          IF FATransformationSetup.FINDFIRST THEN
          BEGIN
            IsFATransSetupFound := TRUE;
          END ELSE BEGIN
            FATransformationSetup.SETRANGE("FA Class Code");
            IF FATransformationSetup.FINDFIRST THEN
              IsFATransSetupFound := TRUE;
          END;
        END;
        IF IsFATransSetupFound THEN BEGIN
        //NC MFA01 < DP

          IF FATransformationSetup."FA Card Type Debit" = FATransformationSetup."FA Card Type Debit"::CIP
          THEN BEGIN
          //Обрабатывается буфферная операция передачи В
            //CurFANo1 - на какую
            CurFANo1 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,0D);
            FABufferCorr.GET(FABuffer."Related Cons. Source Code",FABuffer."Related Entry No.");

            IF FABufferCorr."Amount (LCY)" <> FABuffer."Amount (LCY)" THEN
            //NC MFA11 > DP
              CreateWarningLogEntry1(FABuffer,
              STRSUBSTNO(Text00112,TRUE,FABufferCorr."Cons. Source Code",FABufferCorr."Entry No.",
                             FABuffer."Cons. Source Code",FABuffer."Entry No."),'MFA25');
              {
              IF NOT CONFIRM(Text00112,TRUE,FABufferCorr."Cons. Source Code",FABufferCorr."Entry No.",
                             FABuffer."Cons. Source Code",FABuffer."Entry No.")
              THEN BEGIN
                Indicator.CLOSE;
                ERROR(Text00111);
              END;
              }
            //NC MFA11 > DP

            FATransSetupCorr.RESET;
            FATransSetupCorr.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            FATransSetupCorr.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransSetupCorr.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
            FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransSetupCorr.SETFILTER("Consolidation Source Code",'%1|%2', '', FABufferCorr."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransSetupCorr.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferCorr."Debit G/L Account No.",
                                                                                   TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                   TempMapping."Temp No. Of Symb. In Masks"));
            FATransSetupCorr.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferCorr."Credit G/L Account No.",
                                                                                    TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                    TempMapping."Temp No. Of Symb. In Masks"));
            FATransSetupCorr.SETRANGE("FA Operation Type", FABufferCorr."FA Operation Type");
            FATransSetupCorr.SETRANGE(FATransSetupCorr."Navision Document Type",
                                        FATransSetupCorr."Navision Document Type"::"Gen. Journal");
            FATransSetupCorr.SETRANGE(FATransSetupCorr."FA Card Type Credit",FATransSetupCorr."FA Card Type Credit"::CIP);
            //NC MFA01.01 > DP
            IF FABufferCorr."FA Class Code"<>'' THEN
              FATransSetupCorr.SETRANGE("FA Class Code", FABufferCorr."FA Class Code");
            IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
              FATransSetupCorr.SETRANGE("Company Name");
              IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                FATransSetupCorr.SETRANGE("FA Class Code");
                IF FATransSetupCorr.FINDFIRST THEN;
              END;
            END;
            {
            IF NOT FATransSetupCorr.FIND('-') THEN;
            }
            //NC MFA01.01 < DP

            CurFANo2 := CreateFACard(FABufferCorr,SetupType::Credit,FATransSetupCorr,0D);
            CreateTransferReklass(CurFANo2,CurFANo1,FABufferCorr,FATransSetupCorr,
              FABuffer,FATransformationSetup,FATransformationSetup."FA Card Type Debit"::CIP,TempMapping.Code);

            //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABuffer1.GET(FABufferCorr."Cons. Source Code", FABufferCorr."Entry No.");
            FABuffer1."FA Operation Processed" := TRUE;
            FABuffer1."FA Operation Exported" := TRUE;
            FABuffer1.Accept := FALSE;
            //NC MFA12 > DP
            FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
            //NC MFA12 < DP

            FABuffer1.MODIFY;

          END;
          IF FATransformationSetup."FA Card Type Credit" = FATransformationSetup."FA Card Type Credit"::CIP
          THEN BEGIN
            CurFANo2 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
            //FABufferCorr.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABufferCorr.GET(FABuffer."Related Cons. Source Code",FABuffer."Related Entry No.");
            IF FABufferCorr."Amount (LCY)" <> FABuffer."Amount (LCY)" THEN
            //NC MFA11 > DP
              CreateWarningLogEntry1(FABuffer,
              STRSUBSTNO(Text00112,TRUE,FABufferCorr."Cons. Source Code",FABufferCorr."Entry No.",
                             FABuffer."Cons. Source Code",FABuffer."Entry No."),'MFA25');
              {
              IF NOT CONFIRM(Text00112,TRUE,FABufferCorr."Cons. Source Code",FABufferCorr."Entry No.",
                             FABuffer."Cons. Source Code",FABuffer."Entry No.")
              THEN BEGIN
                Indicator.CLOSE;
                ERROR(Text00111);
              END;
              }
            //NC MFA11 < DP
            FATransSetupCorr.RESET;
            FATransSetupCorr.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            FATransSetupCorr.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransSetupCorr.SETFILTER("Company Name",'%1|%2','', ConsolidationSource."FA Import Company Name");
            FATransSetupCorr.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransSetupCorr.SETFILTER("Consolidation Source Code",'%1|%2', '', FABufferCorr."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransSetupCorr.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferCorr."Debit G/L Account No.",
                                                                                   TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                   TempMapping."Temp No. Of Symb. In Masks"));
            FATransSetupCorr.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferCorr."Credit G/L Account No.",
                                                                                    TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                    TempMapping."Temp No. Of Symb. In Masks"));
            FATransSetupCorr.SETRANGE("FA Operation Type", FABufferCorr."FA Operation Type");
            FATransSetupCorr.SETRANGE(FATransSetupCorr."Navision Document Type",
                                        FATransSetupCorr."Navision Document Type"::"Gen. Journal");
            FATransSetupCorr.SETRANGE(FATransSetupCorr."FA Card Type Debit",FATransSetupCorr."FA Card Type Debit"::CIP);
            //NC MFA01.01 > DP
            IF FABufferCorr."FA Class Code"<>'' THEN
              FATransSetupCorr.SETRANGE("FA Class Code", FABufferCorr."FA Class Code");
            IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
              FATransSetupCorr.SETRANGE("Company Name");
              IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                FATransSetupCorr.SETRANGE("FA Class Code");
                IF FATransSetupCorr.FINDFIRST THEN;
              END;
            END;
            {
            IF NOT FATransSetupCorr.FIND('-') THEN;
            }
            //NC MFA01.01 < DP
            CurFANo1 := CreateFACard(FABufferCorr,SetupType::Debit,FATransSetupCorr,0D);
            CreateTransferReklass(CurFANo2,CurFANo1,FABuffer,FATransformationSetup,
              FABufferCorr,FATransSetupCorr,FATransformationSetup."FA Card Type Credit"::CIP,TempMapping.Code);

            FABuffer1.GET(FABufferCorr."Cons. Source Code", FABufferCorr."Entry No.");
            FABuffer1."FA Operation Processed" := TRUE;
            FABuffer1."FA Operation Exported" := TRUE;
            FABuffer1.Accept := FALSE;
            //NC MFA12 > DP
            FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
            NoOfCurrentEntryOK := NoOfCurrentEntryOK +1;
            //NC MFA12 < DP
            FABuffer1.MODIFY;

          END;
          //обработка 01 79 и 79 01 по МСФО >
          IF FATransformationSetup."FA Card Type Debit" = FATransformationSetup."FA Card Type Debit"::FA
          THEN BEGIN
          //Обрабатывается буфферная операция передачи В
            //CurFANo1 - на какую
            //FABufferCorr.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABufferCorr.GET(FABuffer."Related Cons. Source Code",FABuffer."Related Entry No.");
            IF FABufferCorr."Amount (LCY)" <> FABuffer."Amount (LCY)" THEN
            //NC MFA11 > DP
              CreateWarningLogEntry1(FABuffer,
              STRSUBSTNO(Text00112,TRUE,FABufferCorr."Cons. Source Code",FABufferCorr."Entry No.",
                             FABuffer."Cons. Source Code",FABuffer."Entry No."),'MFA25');
              {
              IF NOT CONFIRM(Text00112,TRUE,FABufferCorr."Cons. Source Code",FABufferCorr."Entry No.",
                             FABuffer."Cons. Source Code",FABuffer."Entry No.")
              THEN BEGIN
                Indicator.CLOSE;
                ERROR(Text00111);
              END;
              }
            //NC MFA11 < DP

            FATransSetupCorr.RESET;
            FATransSetupCorr.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            FATransSetupCorr.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransSetupCorr.SETFILTER("Company Name",'%1|%2','', ConsolidationSource."FA Import Company Name");
            FATransSetupCorr.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransSetupCorr.SETFILTER("Consolidation Source Code",'%1|%2', '', FABufferCorr."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransSetupCorr.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferCorr."Debit G/L Account No.",
                                                                                   TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                   TempMapping."Temp No. Of Symb. In Masks"));
            FATransSetupCorr.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferCorr."Credit G/L Account No.",
                                                                                    TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                    TempMapping."Temp No. Of Symb. In Masks"));
            FATransSetupCorr.SETRANGE("FA Operation Type", FABufferCorr."FA Operation Type");
            FATransSetupCorr.SETRANGE(FATransSetupCorr."Navision Document Type",
                                        FATransSetupCorr."Navision Document Type"::"Gen. Journal");
            FATransSetupCorr.SETRANGE(FATransSetupCorr."FA Card Type Credit",FATransSetupCorr."FA Card Type Credit"::FA);

            //NC MFA01.01 > DP
            IF FABufferCorr."FA Class Code"<>'' THEN
              FATransSetupCorr.SETRANGE("FA Class Code", FABufferCorr."FA Class Code");
            IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
              FATransSetupCorr.SETRANGE("Company Name");
              IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                FATransSetupCorr.SETRANGE("FA Class Code");
                IF FATransSetupCorr.FINDFIRST THEN;
              END;
            END;
            {
            IF NOT FATransSetupCorr.FIND('-') THEN;
            }
            //NC MFA01.01 < DP

            CurFANo2 := CreateFACard(FABufferCorr,SetupType::Credit,FATransSetupCorr,0D);
            IF FADeprBook9.GET(CurFANo2,FATransSetupCorr."Depreciation Book Credit") THEN
              BeginDeprDate := FADeprBook9."Depreciation Starting Date";
            CurFANo1 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,BeginDeprDate);
            CreateTransferReklass(CurFANo2,CurFANo1,FABufferCorr,FATransSetupCorr,
              FABuffer,FATransformationSetup,FATransformationSetup."FA Card Type Debit"::FA,TempMapping.Code);

            //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABuffer1.GET(FABufferCorr."Cons. Source Code", FABufferCorr."Entry No.");
            FABuffer1."FA Operation Processed" := TRUE;
            FABuffer1."FA Operation Exported" := TRUE;
            FABuffer1.Accept := FALSE;

            //NC MFA12 > DP
            FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
            //NC MFA12 < DP

            FABuffer1.MODIFY;
          END;
          IF FATransformationSetup."FA Card Type Credit" = FATransformationSetup."FA Card Type Credit"::FA
          THEN BEGIN
            CurFANo2 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
            //FABufferCorr.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABufferCorr.GET(FABuffer."Related Cons. Source Code",FABuffer."Related Entry No.");
            IF FABufferCorr."Amount (LCY)" <> FABuffer."Amount (LCY)" THEN
            //NC MFA11 > DP
              CreateWarningLogEntry1(FABuffer,
              STRSUBSTNO(Text00112,TRUE,FABufferCorr."Cons. Source Code",FABufferCorr."Entry No.",
                             FABuffer."Cons. Source Code",FABuffer."Entry No."),'MFA25');
              {
              IF NOT CONFIRM(Text00112,TRUE,FABufferCorr."Cons. Source Code",FABufferCorr."Entry No.",
                             FABuffer."Cons. Source Code",FABuffer."Entry No.")
              THEN BEGIN
                Indicator.CLOSE;
                ERROR(Text00111);
              END;
            }
            //NC MFA11 < DP
            FATransSetupCorr.RESET;
            FATransSetupCorr.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");

            //NC MFA01 > DP
            FATransSetupCorr.SETRANGE("Mapping Code",TempMapping.Code);
            //FATransSetupCorr.SETFILTER("Company Name",'%1|%2','', ConsolidationSource."FA Import Company Name");
            FATransSetupCorr.SETRANGE("Company Name",COMPANYNAME);
            {
            FATransSetupCorr.SETFILTER("Consolidation Source Code",'%1|%2', '', FABufferCorr."Cons. Source Code");
            }
            //NC MFA01 < DP

            FATransSetupCorr.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferCorr."Debit G/L Account No.",
                                                                                   TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                   TempMapping."Temp No. Of Symb. In Masks"));
            FATransSetupCorr.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferCorr."Credit G/L Account No.",
                                                                                    TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                    TempMapping."Temp No. Of Symb. In Masks"));
            FATransSetupCorr.SETRANGE("FA Operation Type", FABufferCorr."FA Operation Type");
            FATransSetupCorr.SETRANGE(FATransSetupCorr."Navision Document Type",
                                        FATransSetupCorr."Navision Document Type"::"Gen. Journal");
            FATransSetupCorr.SETRANGE(FATransSetupCorr."FA Card Type Debit",FATransSetupCorr."FA Card Type Debit"::FA);
            //NC MFA01.01 > DP
            IF FABufferCorr."FA Class Code"<>'' THEN
              FATransSetupCorr.SETRANGE("FA Class Code", FABufferCorr."FA Class Code");
            IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
              FATransSetupCorr.SETRANGE("Company Name");
              IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                FATransSetupCorr.SETRANGE("FA Class Code");
                IF FATransSetupCorr.FINDFIRST THEN;
              END;
            END;
            {
            IF NOT FATransSetupCorr.FIND('-') THEN;
            }
            //NC MFA01.01 < DP
            IF FADeprBook9.GET(CurFANo2,FATransformationSetup."Depreciation Book Credit") THEN
              BeginDeprDate := FADeprBook9."Depreciation Starting Date";
            CurFANo1 := CreateFACard(FABufferCorr,SetupType::Debit,FATransSetupCorr,BeginDeprDate);
            CreateTransferReklass(CurFANo2,CurFANo1,FABuffer,FATransformationSetup,
              FABufferCorr,FATransSetupCorr,FATransformationSetup."FA Card Type Credit"::FA,TempMapping.Code);

            //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABuffer1.GET(FABufferCorr."Cons. Source Code", FABufferCorr."Entry No.");
            FABuffer1."FA Operation Processed" := TRUE;
            FABuffer1."FA Operation Exported" := TRUE;
            FABuffer1.Accept := FALSE;

            //NC MFA12 > DP
            FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
            //NC MFA12 < DP
            NoOfCurrentEntryOK := NoOfCurrentEntryOK +1;
            FABuffer1.MODIFY;

          END;

        END ELSE BEGIN
          Indicator.CLOSE;
          ERROR(Text00001, FABuffer."Entry No.");
        END;
      END
      ELSE
        IF FABuffer.Removed THEN BEGIN
          IsFACorrTransSetupFound := FALSE;
          FABuf.RESET;
          //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
          FABuf.SETCURRENTKEY(FABuf."Remove Oper. No");
          FABuf.SETRANGE(FABuf."Remove Oper. No", FABuffer."Entry No.");

          FABuf.SETRANGE(FABuf."Cons. Source Code", FABuffer."Cons. Source Code");
          IF FABuf.FINDFIRST THEN BEGIN
            IF FABuf."FA Operation Exported" THEN BEGIN
              FATransformationSetup.RESET;
              FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
              //NC MFA11 > DP
              {
              FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
              }
              //FATransformationSetup.SETFILTER("Company Name",'%1|%2','',ConsolidationSource."FA Import Company Name");
              FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
              //NC MFA11 < DP
              FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                          TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                          TempMapping."Temp No. Of Symb. In Masks"));
              FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                           TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                           TempMapping."Temp No. Of Symb. In Masks"));
              FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
              FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                               FATransformationSetup."Navision Document Type"::"Gen. Journal");

              //NC MFA01 > DP
              IF FABuf."FA Class Code"<>'' THEN
              FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
              IF FATransformationSetup.FINDFIRST THEN BEGIN
                IsFACorrTransSetupFound := TRUE;
              END ELSE BEGIN
                FATransformationSetup.SETRANGE("Company Name");
                IF FATransformationSetup.FINDFIRST THEN
                BEGIN
                  IsFACorrTransSetupFound := TRUE;
                END ELSE BEGIN
                  FATransformationSetup.SETRANGE("FA Class Code");
                  IF FATransformationSetup.FINDFIRST THEN
                    IsFACorrTransSetupFound := TRUE;
                END;
              END;
              IF IsFACorrTransSetupFound THEN BEGIN
              //NC MFA01 < DP
                IF NOT FATransformationSetup."Not Reclass" THEN BEGIN
                  FALedgEntryError.RESET;
                  FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                  FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                  FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                  FATransformationSetup."Depreciation Book Credit", FATransformationSetup."Depreciation Book Debit");
                  IF FALedgEntryError.FINDFIRST THEN BEGIN
                    CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                  END ELSE BEGIN
                    Indicator.CLOSE;
                    ERROR(Text00107, FABuffer."Entry No.");
                  END;
                END;

                //NC MFA11 > DP
                {
                FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                       FATransformationSetup."Navision Document Type"::"FA Journal");
                IF FATransformationSetup.FIND('-') THEN BEGIN
                }
                //NC MFA11 < DP

                  FALedgEntryError.RESET;
                  FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                  FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                  FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                  FATransformationSetup."Depreciation Book Credit", FATransformationSetup."Depreciation Book Debit");
                  IF FALedgEntryError.FINDFIRST THEN BEGIN
                       CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                  END ELSE BEGIN
                    Indicator.CLOSE;
                    ERROR(Text00107, FABuffer."Entry No.",FABuf."Entry No.");
                  END;

                //NC MFA11 > DP
                {
                END ELSE BEGIN
                  Indicator.CLOSE;
                  ERROR(Text00001, FABuffer."Entry No.");
                END;
                }
                //NC MFA11 < DP


              END ELSE BEGIN
                Indicator.CLOSE;
                ERROR(Text00001, FABuffer."Entry No.");
              END;
            END;
          END ELSE BEGIN
            Indicator.CLOSE;
            ERROR(Text00106, FABuffer."Entry No.");
          END;
        END ELSE
          IF (FABuffer."Source Operation No." <> 0) THEN BEGIN
            FABuf.RESET;
            //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABuf.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");
            FABuf.SETRANGE("Entry No.",FABuffer."Source Operation No.");
            IF FABuf.FINDFIRST THEN BEGIN
              IF FABuf."FA Operation Exported" THEN BEGIN
                FATransformationSetup.RESET;
                FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
                //NC MFA11 > DP
                {
                FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuf."Cons. Source Code");
                }
                //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
                FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
                //NC MFA11 < DP
                FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
                FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");

                //NC MFA01 > DP
                IF FABuf."FA Class Code"<>'' THEN
                FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
                IF FATransformationSetup.FINDFIRST THEN BEGIN
                  IsFACorrTransSetupFound := TRUE;
                END ELSE BEGIN
                  FATransformationSetup.SETRANGE("Company Name");
                  IF FATransformationSetup.FINDFIRST THEN
                  BEGIN
                    IsFACorrTransSetupFound := TRUE;
                  END ELSE BEGIN
                    FATransformationSetup.SETRANGE("FA Class Code");
                    IF FATransformationSetup.FINDFIRST THEN
                      IsFACorrTransSetupFound := TRUE;
                  END;
                END;
                IF IsFACorrTransSetupFound THEN BEGIN
                //NC MFA01 < DP

                  IF NOT FATransformationSetup."Not Reclass" THEN BEGIN
                    FALedgEntryError.RESET;
                    FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                    FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                    FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                    FATransformationSetup."Depreciation Book Credit", FATransformationSetup."Depreciation Book Debit");
                    IF FALedgEntryError.FINDFIRST THEN BEGIN
                      CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                    END ELSE BEGIN
                      Indicator.CLOSE;
                      ERROR(Text00107, FABuffer."Entry No.");
                    END;
                  END;
                  //NC MFA11 > DP
                  {

                  FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                       FATransformationSetup."Navision Document Type"::"FA Journal");
                  IF FATransformationSetup.FIND('-') THEN BEGIN
                  }
                  //NC MFA11 < DP


                    FALedgEntryError.RESET;
                    FALedgEntryError.SETRANGE(FALedgEntryError."Cons. Source Code",FABuf."Cons. Source Code");
                    FALedgEntryError.SETRANGE(FALedgEntryError."Buffer Entry No.",FABuf."Entry No.");
                    FALedgEntryError.SETFILTER(FALedgEntryError."Depreciation Book Code",'%1|%2',
                    FATransformationSetup."Depreciation Book Credit", FATransformationSetup."Depreciation Book Debit");
                    IF FALedgEntryError.FINDFIRST THEN BEGIN
                      CancelFALedgEntries.TransferLineFromBuffer(FALedgEntryError,FALSE,FABuffer);
                      FATransformationSetup.RESET;
                      FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                      "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
                      //NC MFA11 > DP
                      {
                      FATransformationSetup.SETFILTER("Consolidation Source Code",'%1|%2', '', FABuffer."Cons. Source Code");
                      }
                      //FATransformationSetup.SETFILTER("Company Name",'%1',ConsolidationSource."FA Import Company Name");
                      FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
                      //NC MFA11 < DP
                      FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuffer."Debit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                      FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuffer."Credit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                      FATransformationSetup.SETRANGE("FA Operation Type", FABuffer."FA Operation Type");


                      //NC MFA01 > DP
                      IF FABuffer."FA Class Code"<>'' THEN
                        FATransformationSetup.SETRANGE("FA Class Code", FABuffer."FA Class Code");
                      IF FATransformationSetup.FINDFIRST THEN BEGIN
                        IsFATransSetupFound := TRUE;
                      END ELSE BEGIN
                        FATransformationSetup.SETRANGE("Company Name");
                        IF FATransformationSetup.FINDFIRST THEN
                        BEGIN
                          IsFATransSetupFound := TRUE;
                        END ELSE BEGIN
                          FATransformationSetup.SETRANGE("FA Class Code");
                          IF FATransformationSetup.FINDFIRST THEN
                            IsFATransSetupFound := TRUE;
                        END;
                      END;
                      IF IsFATransSetupFound THEN BEGIN
                      //NC MFA01 < DP

                        IF FATransformationSetup."FA Card Type Debit" = FATransformationSetup."FA Card Type Debit"::CIP
                          THEN BEGIN
                          //Обрабатывается буфферная операция передачи В
                          //CurFANo1 - на какую
                          CurFANo1 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,0D);
                          FABufferCorr.GET(FABuffer."Related Cons. Source Code",FABuffer."Related Entry No.");
                          FATransSetupCorr.RESET;
                          FATransSetupCorr.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                              "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
                          FATransSetupCorr.SETRANGE("Mapping Code",TempMapping.Code);
                          //FATransSetupCorr.SETFILTER("Company Name",'%1|%2','',ConsolidationSource."FA Import Company Name");
                          FATransSetupCorr.SETRANGE("Company Name",COMPANYNAME);
                          FATransSetupCorr.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferCorr."Debit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                       FATransSetupCorr.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferCorr."Credit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                          FATransSetupCorr.SETRANGE("FA Operation Type", FABufferCorr."FA Operation Type");
                          FATransSetupCorr.SETRANGE(FATransSetupCorr."Navision Document Type",
                                        FATransSetupCorr."Navision Document Type"::"Gen. Journal");
                          FATransSetupCorr.SETRANGE(FATransSetupCorr."FA Card Type Credit",FATransSetupCorr."FA Card Type Credit"::CIP);
                          //NC MFA01.01 > DP
                          IF FABufferCorr."FA Class Code"<>'' THEN
                            FATransSetupCorr.SETRANGE("FA Class Code", FABufferCorr."FA Class Code");
                          IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                            FATransSetupCorr.SETRANGE("Company Name");
                            IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                              FATransSetupCorr.SETRANGE("FA Class Code");
                              IF FATransSetupCorr.FINDFIRST THEN;
                            END;
                          END;
                          {
                          IF NOT FATransSetupCorr.FIND('-') THEN;
                          }
                          //NC MFA01.01 < DP
                          CurFANo2 := CreateFACard(FABufferCorr,SetupType::Credit,FATransSetupCorr,0D);
                          CreateTransferReklass(CurFANo2,CurFANo1,FABufferCorr,FATransSetupCorr,
                             FABuffer,FATransformationSetup,FATransformationSetup."FA Card Type Debit"::CIP,TempMapping.Code);
                          //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
                          FABuffer1.GET(FABufferCorr."Cons. Source Code", FABufferCorr."Entry No.");
                          FABuffer1."FA Operation Processed" := TRUE;
                          FABuffer1."FA Operation Exported" := TRUE;
                          FABuffer1.Accept := FALSE;

                          //NC MFA12 > DP
                          FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
                          //NC MFA12 < DP

                          FABuffer1.MODIFY;
                        END;
                        IF FATransformationSetup."FA Card Type Credit" = FATransformationSetup."FA Card Type Credit"::CIP
                          THEN BEGIN
                          CurFANo2 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
                          //FABufferCorr.CHANGECOMPANY(ConsSetup."Company for FA Import");
                          FABufferCorr.GET(FABuffer."Related Cons. Source Code",FABuffer."Related Entry No.");
                          FATransSetupCorr.RESET;
                          FATransSetupCorr.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                             "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
                          FATransSetupCorr.SETRANGE("Mapping Code",TempMapping.Code);
                          //FATransSetupCorr.SETFILTER("Company Name",'%1|%2','', ConsolidationSource."FA Import Company Name");
                          FATransSetupCorr.SETRANGE("Company Name",COMPANYNAME);
                          FATransSetupCorr.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferCorr."Debit G/L Account No.",
                                                                                     TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                     TempMapping."Temp No. Of Symb. In Masks"));
                        FATransSetupCorr.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferCorr."Credit G/L Account No.",
                                                                                     TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                     TempMapping."Temp No. Of Symb. In Masks"));
                          FATransSetupCorr.SETRANGE("FA Operation Type", FABufferCorr."FA Operation Type");
                          FATransSetupCorr.SETRANGE(FATransSetupCorr."Navision Document Type",
                                        FATransSetupCorr."Navision Document Type"::"Gen. Journal");
                          FATransSetupCorr.SETRANGE(FATransSetupCorr."FA Card Type Debit",FATransSetupCorr."FA Card Type Debit"::CIP);
                          //NC MFA01.01 > DP
                          IF FABufferCorr."FA Class Code"<>'' THEN
                            FATransSetupCorr.SETRANGE("FA Class Code", FABufferCorr."FA Class Code");
                          IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                            FATransSetupCorr.SETRANGE("Company Name");
                            IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                              FATransSetupCorr.SETRANGE("FA Class Code");
                              IF FATransSetupCorr.FINDFIRST THEN;
                            END;
                          END;
                          {
                          IF NOT FATransSetupCorr.FIND('-') THEN;
                          }
                          //NC MFA01.01 < DP
                          CurFANo1 := CreateFACard(FABufferCorr,SetupType::Debit,FATransSetupCorr,0D);
                          CreateTransferReklass(CurFANo2,CurFANo1,FABuffer,FATransformationSetup,
                             FABufferCorr,FATransSetupCorr,FATransformationSetup."FA Card Type Credit"::CIP,TempMapping.Code);
                          FABuffer1.GET(FABufferCorr."Cons. Source Code", FABufferCorr."Entry No.");
                          FABuffer1."FA Operation Processed" := TRUE;
                          FABuffer1."FA Operation Exported" := TRUE;
                          FABuffer1.Accept := FALSE;

                          //NC MFA12 > DP
                          FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
                          //NC MFA12 < DP

                          FABuffer1.MODIFY;
                          NoOfCurrentEntryOK := NoOfCurrentEntryOK +1;
                        END;
                        IF FATransformationSetup."FA Card Type Debit" = FATransformationSetup."FA Card Type Debit"::FA
                          THEN BEGIN
                          //Обрабатывается буфферная операция передачи В
                          //CurFANo1 - на какую
                          //FABufferCorr.CHANGECOMPANY(ConsSetup."Company for FA Import");
                          FABufferCorr.GET(FABuffer."Related Cons. Source Code",FABuffer."Related Entry No.");
                          FATransSetupCorr.RESET;
                          FATransSetupCorr.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                             "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
                          FATransSetupCorr.SETRANGE("Mapping Code",TempMapping.Code);
                          //FATransSetupCorr.SETFILTER("Company Name",'%1|%2','', ConsolidationSource."FA Import Company Name");
                          FATransSetupCorr.SETFILTER("Company Name",'%1|%2','',COMPANYNAME);
                          FATransSetupCorr.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferCorr."Debit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                        FATransSetupCorr.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferCorr."Credit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                          FATransSetupCorr.SETRANGE("FA Operation Type", FABufferCorr."FA Operation Type");
                          FATransSetupCorr.SETRANGE(FATransSetupCorr."Navision Document Type",
                                        FATransSetupCorr."Navision Document Type"::"Gen. Journal");
                          FATransSetupCorr.SETRANGE(FATransSetupCorr."FA Card Type Credit",FATransSetupCorr."FA Card Type Credit"::FA);
                          //NC MFA01.01 > DP
                          IF FABufferCorr."FA Class Code"<>'' THEN
                            FATransSetupCorr.SETRANGE("FA Class Code", FABufferCorr."FA Class Code");
                          IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                            FATransSetupCorr.SETRANGE("Company Name");
                            IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                              FATransSetupCorr.SETRANGE("FA Class Code");
                              IF FATransSetupCorr.FINDFIRST THEN;
                            END;
                          END;
                          {
                          IF NOT FATransSetupCorr.FIND('-') THEN;
                          }
                          //NC MFA01.01 < DP
                          CurFANo2 := CreateFACard(FABufferCorr,SetupType::Credit,FATransSetupCorr,0D);
                          IF FADeprBook9.GET(CurFANo2,FATransSetupCorr."Depreciation Book Credit") THEN
                            BeginDeprDate := FADeprBook9."Depreciation Starting Date";
                          CurFANo1 := CreateFACard(FABuffer,SetupType::Debit,FATransformationSetup,BeginDeprDate);
                          CreateTransferReklass(CurFANo2,CurFANo1,FABufferCorr,FATransSetupCorr,
                             FABuffer,FATransformationSetup,FATransformationSetup."FA Card Type Debit"::FA,TempMapping.Code);
                          //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
                          FABuffer1.GET(FABufferCorr."Cons. Source Code", FABufferCorr."Entry No.");
                          FABuffer1."FA Operation Processed" := TRUE;
                          FABuffer1."FA Operation Exported" := TRUE;
                          FABuffer1.Accept := FALSE;

                          //NC MFA12 > DP
                          FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
                          //NC MFA12 < DP

                          FABuffer1.MODIFY;
                        END;
                        IF FATransformationSetup."FA Card Type Credit" = FATransformationSetup."FA Card Type Credit"::FA
                        THEN BEGIN
                          CurFANo2 := CreateFACard(FABuffer,SetupType::Credit,FATransformationSetup,0D);
                          //FABufferCorr.CHANGECOMPANY(ConsSetup."Company for FA Import");
                          FABufferCorr.GET(FABuffer."Related Cons. Source Code",FABuffer."Related Entry No.");
                          FATransSetupCorr.RESET;
                          FATransSetupCorr.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                              "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
                          FATransSetupCorr.SETRANGE("Mapping Code",TempMapping.Code);
                          //FATransSetupCorr.SETFILTER("Company Name",'%1|%2','', ConsolidationSource."FA Import Company Name");
                          FATransSetupCorr.SETFILTER("Company Name",'%1|%2','', COMPANYNAME);
                          FATransSetupCorr.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferCorr."Debit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                        FATransSetupCorr.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferCorr."Credit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                          FATransSetupCorr.SETRANGE("FA Operation Type", FABufferCorr."FA Operation Type");
                          FATransSetupCorr.SETRANGE(FATransSetupCorr."Navision Document Type",
                                        FATransSetupCorr."Navision Document Type"::"Gen. Journal");
                          FATransSetupCorr.SETRANGE(FATransSetupCorr."FA Card Type Debit",FATransSetupCorr."FA Card Type Debit"::FA);
                          //NC MFA01.01 > DP
                          IF FABufferCorr."FA Class Code"<>'' THEN
                            FATransSetupCorr.SETRANGE("FA Class Code", FABufferCorr."FA Class Code");
                          IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                            FATransSetupCorr.SETRANGE("Company Name");
                            IF NOT FATransSetupCorr.FINDFIRST THEN BEGIN
                              FATransSetupCorr.SETRANGE("FA Class Code");
                              IF FATransSetupCorr.FINDFIRST THEN;
                            END;
                          END;
                          {
                          IF NOT FATransSetupCorr.FIND('-') THEN;
                          }
                          //NC MFA01.01 < DP
                          IF FADeprBook9.GET(CurFANo2,FATransformationSetup."Depreciation Book Credit") THEN
                            BeginDeprDate := FADeprBook9."Depreciation Starting Date";
                          CurFANo1 := CreateFACard(FABufferCorr,SetupType::Debit,FATransSetupCorr,BeginDeprDate);
                          CreateTransferReklass(CurFANo2,CurFANo1,FABuffer,FATransformationSetup,
                             FABufferCorr,FATransSetupCorr,FATransformationSetup."FA Card Type Credit"::FA,TempMapping.Code);
                          //FABuffer1.CHANGECOMPANY(ConsSetup."Company for FA Import");
                          FABuffer1.GET(FABufferCorr."Cons. Source Code", FABufferCorr."Entry No.");
                          FABuffer1."FA Operation Processed" := TRUE;
                          FABuffer1."FA Operation Exported" := TRUE;
                          FABuffer1.Accept := FALSE;

                          //NC MFA12 > DP
                          FABuffer1."FA Export Cons. Register" :=FAConsRegister."No.";
                          //NC MFA12 < DP

                          FABuffer1.MODIFY;
                          NoOfCurrentEntryOK := NoOfCurrentEntryOK +1;
                        END;
                      END ELSE BEGIN
                        Indicator.CLOSE;
                        ERROR(Text00001, FABuffer."Entry No.");
                      END;

                    END ELSE BEGIN
                      Indicator.CLOSE;
                      ERROR(Text00107, FABuffer."Entry No.");
                    END;
                  //NC MFA11 > DP
                  {
                  END ELSE BEGIN
                    Indicator.CLOSE;
                    ERROR(Text00001, FABuffer."Entry No.");
                  END;
                  }
                  //NC MFA11 < DP
                END ELSE BEGIN
                  Indicator.CLOSE;
                  ERROR(Text00001, FABuffer."Entry No.");
                END;
              END;
            END ELSE BEGIN
               Indicator.CLOSE;
               ERROR(Text00106, FABuffer."Entry No.");
             END;
           END;
      //NC PIF001 < DP
    END;

    PROCEDURE CreateTransferReklass@1210033(FANoFrom@1210004 : Code[20];FANoTo@1210003 : Code[20];FABufferFrom@1210002 : Record 50008;VAR FATransSetupFrom@1210001 : Record 50004;FABufferTo@1210037 : Record 50008;VAR FATransSetupTo@1210038 : Record 50004;FACardToType@1000000000 : ',FA,AFA';MappingCode@1000000003 : Code[20]);
    VAR
      FAReclassJnl@1210019 : Record 5624;
      FAReclassJnl1@1210018 : Record 5624;
      FASetup@1210017 : Record 5603;
      FixedAsset@1210016 : Record 5600;
      FAReclassTemplate@1210015 : Record 5622;
      FAReclassBatch@1210014 : Record 5623;
      LineNo@1210013 : Integer;
      FAReclassCheckLine@1210012 : Codeunit 5641;
      FAReclassTransferLine@1210011 : Codeunit 5642;
      ReclDone@1210010 : Boolean;
      GenJnlLine@1210009 : Record 81;
      DimMgt@1210006 : Codeunit 408;
      GenJnlPostLine@1210005 : Codeunit 12;
      DeprBookCode1@1210000 : Code[10];
      DimType@1210022 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210021 : Record 81;
      FADocLineFict@1210020 : Record 12477;
      FAJnlLineFict@1210023 : Record 5621;
      GenJnlLine1@1210024 : Record 81;
      GenJnlPostBatch@1210025 : Codeunit 13;
      FAJnlLine@1210026 : Record 5621;
      FAJnlLine1@1210027 : Record 5621;
      FAJnlPostBatch@1210028 : Codeunit 5633;
      NextGenJDocNo@1210029 : Code[20];
      NextFAJDocNo@1210030 : Code[20];
      ConsSetup2@1210031 : Record 50000;
      ConsSource2@1210032 : Record 50001;
      GenJnlBatch2@1210033 : Record 232;
      FAJnlBatch2@1210034 : Record 5620;
      GenJnlLine2@1210035 : Record 81;
      FAJnlLine2@1210036 : Record 5621;
      BatchName1@1210039 : Code[10];
      FALedgEntryFrom@1000000001 : Record 5601;
      FALedgEntryFrom2@1000000002 : Record 5601;
      GenJnlLine5@1210040 : Record 81;
    BEGIN
      //NC PIF001 > DP
      FAReclassTemplate.SETRANGE("Page ID", PAGE::"FA Reclass. Journal");
      IF NOT FAReclassTemplate.FIND('-') THEN BEGIN
        Indicator.CLOSE;
        ERROR(Text00018);
      END;
      FAReclassBatch.SETRANGE("Journal Template Name", FAReclassTemplate.Name);
      IF NOT FAReclassBatch.FIND('-') THEN BEGIN
        Indicator.CLOSE;
        ERROR(Text00018);
      END;

      ConsSetup2.GET;
      //ConsSource2.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsSource2.GET(FABufferFrom."Cons. Source Code");
      ConsSource2.TESTFIELD("Transfer Gen. Batch Name");
      ConsSource2.TESTFIELD("Transfer FA Batch Name");

      GenJnlLine2.SETRANGE("Journal Template Name",ConsSetup2."FA Import Journal Template");
      GenJnlLine2.SETRANGE("Journal Batch Name",ConsSource2."Transfer Gen. Batch Name");
      IF GenJnlLine2.FINDLAST THEN
        NextGenJDocNo := INCSTR(GenJnlLine2."Document No.")
      ELSE BEGIN
        GenJnlBatch2.GET(ConsSetup2."FA Import Journal Template",ConsSource2."Transfer Gen. Batch Name");
        GenJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextGenJDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch2."No. Series",FABufferFrom."Document Date",FALSE);
      END;

      FAJnlLine2.SETRANGE("Journal Template Name",ConsSetup2."FA Import FA Jnl Template");
      FAJnlLine2.SETRANGE("Journal Batch Name",ConsSource2."Transfer FA Batch Name");
      IF FAJnlLine2.FINDLAST THEN
        NextFAJDocNo := INCSTR(FAJnlLine2."Document No.")
      ELSE BEGIN
        FAJnlBatch2.GET(ConsSetup2."FA Import FA Jnl Template",ConsSource2."Transfer FA Batch Name");
        FAJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextFAJDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch2."No. Series",FABufferFrom."Document Date",FALSE);
      END;

      FAReclassJnl1.SETRANGE("Journal Template Name", FAReclassJnl."Journal Template Name");
      FAReclassJnl1.SETRANGE("Journal Batch Name", FAReclassJnl."Journal Batch Name");
      IF FAReclassJnl1.FIND('+') THEN
        LineNo := FAReclassJnl1."Line No." + 10000
      ELSE
        LineNo := 10000;

      FAReclassJnl."Journal Template Name" := FAReclassTemplate.Name;
      FAReclassJnl."Journal Batch Name" :=  FAReclassBatch.Name;
      FAReclassJnl."Line No." := LineNo;
      FAReclassJnl.VALIDATE("FA Posting Date", FABufferFrom."Document Date");
      FAReclassJnl.VALIDATE("Posting Date", FABufferFrom."Document Date");
      FAReclassJnl.VALIDATE("FA No.", FANoFrom);
      FAReclassJnl.VALIDATE("New FA No.", FANoTo);
      FAReclassJnl.VALIDATE("Depreciation Book Code", FATransSetupFrom."Depreciation Book Credit");
      FAReclassJnl.VALIDATE("New Depreciation Book Code", FATransSetupTo."Depreciation Book Debit");
      FAReclassJnl."Buffer Entry No." := FABufferFrom."Entry No.";
      FAReclassJnl."Cons. Source Code" := FABufferFrom."Cons. Source Code";


      IF FATransSetupFrom."Navision Document Type" = FATransSetupFrom."Navision Document Type"::"Gen. Journal" THEN BEGIN
        FAReclassJnl.VALIDATE("Reclassify Acq. Cost %", 100);
        BatchName1 := ConsSource2."Transfer Gen. Batch Name";
        FAReclassJnl.VALIDATE("Reclassify Depreciation", TRUE);
      END ELSE BEGIN
        FAReclassJnl.VALIDATE("Reclassify Acq. Cost %", 100);
        //FAReclassJnl.VALIDATE("Reclassify Acq. Cost Amount", FABufferFrom."Amount (LCY)");
        FAReclassJnl.VALIDATE("Reclassify Depreciation", TRUE);
        BatchName1 := ConsSource2."Transfer FA Batch Name";
      END;

      FAReclassJnl.VALIDATE("Reclassify Acquisition Cost", TRUE);

      //Учитываем заполненный журнал реклассификации -> создаются строки в фин. журнале.
      FAReclassCheckLine.RUN(FAReclassJnl);

      IF FACardToType = FACardToType::FA THEN
        FAReclassTransferLine.FAReclassLine1(FAReclassJnl,ReclDone,FABufferFrom,NextFAJDocNo,NextGenJDocNo,BatchName1);

      IF FACardToType = FACardToType::AFA THEN BEGIN
        FAReclassTransferLine.FAReclassLine2(FAReclassJnl,ReclDone,FABufferFrom,NextFAJDocNo,NextGenJDocNo,BatchName1);
        FALedgEntryFrom.RESET;
        FALedgEntryFrom.SETCURRENTKEY("FA No.",
                                      "Depreciation Book Code",
                                      "Reklass. Capital %",
                                      "Reclassification Entry",
                                      Processed,
                                      "Posting Date");
        FALedgEntryFrom.SETRANGE("FA No.",FANoFrom);
        FALedgEntryFrom.SETRANGE("Depreciation Book Code",FATransSetupFrom."Depreciation Book Credit");
        FALedgEntryFrom.SETRANGE("Reklass. Capital %",FALSE);
        FALedgEntryFrom.SETRANGE("Reclassification Entry",FALSE);
        FALedgEntryFrom.SETRANGE(Processed,FALSE);
        FALedgEntryFrom.SETRANGE("Posting Date",0D,FABufferFrom."Document Date");
        IF FALedgEntryFrom.FINDSET(TRUE,TRUE) THEN
          REPEAT
            FALedgEntryFrom2 := FALedgEntryFrom;
            FALedgEntryFrom2.Processed := TRUE;
            FALedgEntryFrom2."Processed by Buffer Entry No" := FABufferFrom."Entry No.";
            FALedgEntryFrom2.MODIFY;
          UNTIL FALedgEntryFrom.NEXT = 0;
        //Галка реклассификации снимается с строки фин. журнала для того, чтобы потом можно было ввести в экспл.
        GenJnlLine5.SETRANGE("Journal Template Name",ConsSetup2."FA Import Journal Template");
        GenJnlLine5.SETRANGE("Journal Batch Name",ConsSource2."Transfer Gen. Batch Name");
        GenJnlLine5.SETRANGE("Account Type",GenJnlLine5."Account Type"::"Fixed Asset");
        GenJnlLine5.SETRANGE("Account No.",FANoTo);
        IF GenJnlLine5.FINDFIRST THEN BEGIN
          GenJnlLine5."FA Reclassification Entry" := FALSE;
          GenJnlLine5.MODIFY;
        END;
      END;

      //NC MFA01 > DP
      //Вставка доопределяемой аналитики вид движения
      {
      GenJnlLine5.RESET;
      GenJnlLine5.SETRANGE("Journal Template Name",ConsSetup2."FA Import Journal Template");
      GenJnlLine5.SETRANGE("Journal Batch Name",ConsSource2."Transfer Gen. Batch Name");
      GenJnlLine5.SETRANGE("Document No.",NextGenJDocNo);
      IF GenJnlLine5.FINDFIRST THEN BEGIN
        REPEAT
          InsertReceiverDimensionValue(GenJnlLine5, FATransSetupTo);
        UNTIL GenJnlLine5.NEXT=0;
      END;
      }
      IF FATransSetupFrom."Navision Document Type" = FATransSetupFrom."Navision Document Type"::"Gen. Journal" THEN BEGIN
        GenJnlLine5.RESET;
        GenJnlLine5.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
        GenJnlLine5.SETRANGE("Buffer Entry No.", FABufferFrom."Entry No.");
        GenJnlLine5.SETRANGE("Cons. Source Code", FABufferFrom."Cons. Source Code");
        IF GenJnlLine5.FINDSET THEN
          REPEAT
            DimType := DimType::Journal;
            CheckDimension(FABufferFrom, GenJnlLine5, FADocLineFict, FAJnlLineFict,DimType,FALSE,MappingCode);
            GenJnlLine5.MODIFY(TRUE);
          UNTIL GenJnlLine5.NEXT = 0;
      END ELSE BEGIN
        FAJnlLine.RESET;
        FAJnlLine.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
        FAJnlLine.SETRANGE("Buffer Entry No.", FABufferFrom."Entry No.");
        FAJnlLine.SETRANGE("Cons. Source Code", FABufferFrom."Cons. Source Code");
        IF FAJnlLine.FIND('-') THEN
          REPEAT
            DimType := DimType::FAJournal;
            CheckDimension(FABufferFrom, GenJnlLineFict, FADocLineFict, FAJnlLine, DimType,FALSE,MappingCode);
          UNTIL FAJnlLine.NEXT = 0;
      END;
      //NC MFA01 < DP
    END;

    PROCEDURE CreateCorrFAReklass@1000000002(FANo1@1210004 : Code[20];FANo2@1210003 : Code[20];FABuffer@1210002 : Record 50008;VAR FATransSetup@1210001 : Record 50004;MappingCode@1000000003 : Code[20]);
    VAR
      FAReclassJnl@1210019 : Record 5624;
      FAReclassJnl1@1210018 : Record 5624;
      FASetup@1210017 : Record 5603;
      FixedAsset@1210016 : Record 5600;
      FAReclassTemplate@1210015 : Record 5622;
      FAReclassBatch@1210014 : Record 5623;
      LineNo@1210013 : Integer;
      FAReclassCheckLine@1210012 : Codeunit 5641;
      FAReclassTransferLine@1210011 : Codeunit 5642;
      ReclDone@1210010 : Boolean;
      DimMgt@1210006 : Codeunit 408;
      DeprBookCode1@1210000 : Code[10];
      DimType@1210022 : 'Journal,Document,FAJournal';
      FADocLineFict@1210020 : Record 12477;
      GenJnlLineFict@1000000002 : Record 81;
      FAJnlLineFict@1210023 : Record 5621;
      FAJnlLine@1210026 : Record 5621;
      FAJnlLine1@1210027 : Record 5621;
      FAJnlPostBatch@1210028 : Codeunit 5633;
      NextFAJDocNo@1210030 : Code[20];
      NextGenJDocNo@1000000001 : Code[20];
      ConsSetup2@1210031 : Record 50000;
      ConsSource2@1210032 : Record 50001;
      FAJnlBatch2@1210034 : Record 5620;
      FAJnlLine2@1210036 : Record 5621;
      BatchName1@1000000000 : Code[10];
    BEGIN
      FAReclassTemplate.SETRANGE("Page ID", PAGE::"FA Reclass. Journal");
      IF NOT FAReclassTemplate.FIND('-') THEN BEGIN
        Indicator.CLOSE;
        ERROR(Text00018);
      END;
      FAReclassBatch.SETRANGE("Journal Template Name", FAReclassTemplate.Name);
      IF NOT FAReclassBatch.FIND('-') THEN BEGIN
        Indicator.CLOSE;
        ERROR(Text00018);
      END;

      ConsSetup2.GET;
      //ConsSource2.CHANGECOMPANY(ConsSetup."Company for FA Import");
      ConsSource2.GET(FABuffer."Cons. Source Code");

      FAJnlLine2.SETRANGE("Journal Template Name",ConsSetup2."FA Import FA Jnl Template");
      FAJnlLine2.SETRANGE("Journal Batch Name",ConsSource2."Reclass. FA Batch Name");
      IF FAJnlLine2.FINDLAST THEN
        NextFAJDocNo := INCSTR(FAJnlLine2."Document No.")
      ELSE BEGIN
        FAJnlBatch2.GET(ConsSetup2."FA Import FA Jnl Template",ConsSource2."Reclass. FA Batch Name");
        FAJnlBatch2.TESTFIELD("No. Series");
        CLEAR(NoSeriesMgt);
        NextFAJDocNo := NoSeriesMgt.GetNextNo(FAJnlBatch2."No. Series",FABuffer."Document Date",FALSE);
      END;

      FAReclassJnl1.SETRANGE("Journal Template Name", FAReclassJnl."Journal Template Name");
      FAReclassJnl1.SETRANGE("Journal Batch Name", FAReclassJnl."Journal Batch Name");
      IF FAReclassJnl1.FIND('+') THEN
        LineNo := FAReclassJnl1."Line No." + 10000
      ELSE
        LineNo := 10000;

      FAReclassJnl."Journal Template Name" := FAReclassTemplate.Name;
      FAReclassJnl."Journal Batch Name" :=  FAReclassBatch.Name;
      FAReclassJnl."Line No." := LineNo;
      FAReclassJnl.VALIDATE("FA Posting Date", FABuffer."Document Date");
      FAReclassJnl.VALIDATE("Posting Date", FABuffer."Document Date");
      FAReclassJnl.VALIDATE("FA No.", FANo1);
      FAReclassJnl.VALIDATE("New FA No.", FANo2);
      FAReclassJnl.VALIDATE("Depreciation Book Code", FATransSetup."Depreciation Book Debit");
      FAReclassJnl.VALIDATE("New Depreciation Book Code", FATransSetup."Depreciation Book Credit");
      FAReclassJnl."Buffer Entry No." := FABuffer."Entry No.";
      FAReclassJnl."Cons. Source Code" := FABuffer."Cons. Source Code";

      FAReclassJnl.VALIDATE("Reclassify Acq. Cost %", 100);
      FAReclassJnl.VALIDATE("Reclassify Depreciation", TRUE);
      BatchName1 := ConsSource2."Reclass. FA Batch Name";
      FAReclassJnl.VALIDATE("Reclassify Acquisition Cost", TRUE);

      //Учитываем заполненный журнал реклассификации -> создаются строки в фин. журнале.
      FAReclassCheckLine.RUN(FAReclassJnl);
      FAReclassTransferLine.FAReclassLine1(FAReclassJnl,ReclDone,FABuffer,NextFAJDocNo,NextGenJDocNo,BatchName1);

      FAJnlLine.RESET;
      FAJnlLine.SETCURRENTKEY("Buffer Entry No.","Cons. Source Code");
      FAJnlLine.SETRANGE("Buffer Entry No.", FABuffer."Entry No.");
      FAJnlLine.SETRANGE("Cons. Source Code", FABuffer."Cons. Source Code");

      IF FAJnlLine.FIND('-') THEN
        REPEAT
          DimType := DimType::FAJournal;
          IF FAJnlLine."FA Posting Type" = FAJnlLine."FA Posting Type"::"Acquisition Cost" THEN
            FAJnlLine.VALIDATE(Correction,TRUE);
          CheckDimension(FABuffer, GenJnlLineFict, FADocLineFict, FAJnlLine, DimType,FALSE,MappingCode);
          IF FAJnlLine."FA Posting Type" = FAJnlLine."FA Posting Type"::Depreciation THEN
            FAJnlLine.VALIDATE(Correction,TRUE);
          FAJnlLine.MODIFY(TRUE);
        UNTIL FAJnlLine.NEXT = 0;
    END;

    PROCEDURE SetCompName@1000000006(CompName@1000000000 : Text[30]);
    BEGIN
      NewCompName := CompName;
    END;

    PROCEDURE GetCompName@1000000004() : Text[30];
    BEGIN
      //EXIT(NewCompName);
    END;

    PROCEDURE GetFABufferClassCode@1000000005(FABuffer@1000000000 : Record 50008;OperType@1000000003 : 'Debit,Credit') : Code[10];
    VAR
      FAClassCode@1000000001 : Code[10];
      FACatalog@1000000002 : Record 50044;
    BEGIN
      //NC MFA03 > DP
      FAClassCode :='';
      IF OperType = OperType::Debit THEN BEGIN
        IF FABuffer."Debit Dimension 17 Value Code" <>'' THEN
          FAClassCode := GetFAClassCode(FABuffer."Debit Dimension 17 Value Code",FAType::CIP);
        IF FABuffer."Debit Dimension 18 Value Code" <>'' THEN
          FAClassCode := GetFAClassCode(FABuffer."Debit Dimension 18 Value Code",FAType::IA);
        IF FABuffer."Debit Dimension 19 Value Code" <>'' THEN
          FAClassCode := GetFAClassCode(FABuffer."Debit Dimension 19 Value Code",FAType::FA);
        IF FABuffer."Debit Dimension 20 Value Code" <>'' THEN
          FAClassCode := GetFAClassCode(FABuffer."Debit Dimension 20 Value Code",FAType::FE);
      END;

      IF OperType = OperType::Credit THEN BEGIN
        IF FABuffer."Credit Dimension 17 Value Code" <>'' THEN
          FAClassCode := GetFAClassCode(FABuffer."Credit Dimension 17 Value Code",FAType::CIP);
        IF FABuffer."Credit Dimension 18 Value Code" <>'' THEN
          FAClassCode := GetFAClassCode(FABuffer."Credit Dimension 18 Value Code",FAType::IA);
        IF FABuffer."Credit Dimension 19 Value Code" <>'' THEN
          FAClassCode := GetFAClassCode(FABuffer."Credit Dimension 19 Value Code",FAType::FA);
        IF FABuffer."Credit Dimension 20 Value Code" <>'' THEN
          FAClassCode := GetFAClassCode(FABuffer."Credit Dimension 20 Value Code",FAType::FE);
      END;

      EXIT(FAClassCode);
      //NC MFA03 < DP
    END;

    PROCEDURE GetFAClassCode@1000000007(FACode@1000000000 : Code[20];FAType@1000000003 : 'CIP,FA,IA,PE') : Code[10];
    VAR
      FACataloge@1000000001 : Record 50044;
      FAClassCode@1000000002 : Code[10];
    BEGIN
      //NC MFA03 > DP
      FAClassCode :='';
        FACataloge.RESET;
        FACataloge.SETRANGE("No.",FACode);
        CASE FAType OF
          FAType::CIP,FAType::FA:
            FACataloge.SETRANGE("Type FA", FACataloge."Type FA"::FA);
          FAType::IA:
            FACataloge.SETRANGE("Type FA", FACataloge."Type FA"::IA);
          FAType::PE:
            FACataloge.SETRANGE("Type FA", FACataloge."Type FA"::FE);
        END;
        IF FACataloge.FINDFIRST THEN
          FAClassCode := FACataloge."FA Class Code";
      EXIT(FAClassCode);
      //NC MFA03 < DP
    END;

    PROCEDURE GetDimValueName@1000000008(DimCode@1000000002 : Code[20];DimValueCode@1000000001 : Code[20]) : Text[50];
    VAR
      DimValue@1000000000 : Record 349;
      DimName@1000000003 : Text[50];
    BEGIN
      //NC MFA01 > DP
      DimName := '';
      IF DimValue.GET(DimCode,DimValueCode) THEN
        DimName := DimValue.Name;
      EXIT(DimName);
      //NC MFA01 < DP
    END;

    PROCEDURE InsertReceiverDimensionValue@1101495000(GenJnlLine@1210001 : Record 81;FATransSetup@1210003 : Record 50004);
    BEGIN
      //NC MFA01 > DP
      EXIT;
      {
      IF (FATransSetup."Receiver Dim. Code"<>'') AND
         (FATransSetup."Receiver Dim. Value"<>'') THEN BEGIN
         JnlLineDim.INIT;
         JnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
         JnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
         JnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
         JnlLineDim."Journal Line No." := GenJnlLine."Line No.";
         JnlLineDim."Dimension Code" := FATransSetup."Receiver Dim. Code";
        IF JnlLineDim.FIND('=') THEN BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value";
          JnlLineDim.MODIFY(TRUE);
        END ELSE BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value";
          JnlLineDim.INSERT(TRUE);
        END;
      END;
      IF (FATransSetup."Receiver Dim. Code 2"<>'') AND
         (FATransSetup."Receiver Dim. Value 2"<>'') THEN BEGIN
         JnlLineDim.INIT;
         JnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
         JnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
         JnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
         JnlLineDim."Journal Line No." := GenJnlLine."Line No.";
         JnlLineDim."Dimension Code" := FATransSetup."Receiver Dim. Code 2";
        IF JnlLineDim.FIND('=') THEN BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value 2";
          JnlLineDim.MODIFY(TRUE);
        END ELSE BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value 2";
          JnlLineDim.INSERT(TRUE);
        END;
      END;
      IF (FATransSetup."Receiver Dim. Code 3"<>'') AND
         (FATransSetup."Receiver Dim. Value 3"<>'') THEN BEGIN
         JnlLineDim.INIT;
         JnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
         JnlLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
         JnlLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
         JnlLineDim."Journal Line No." := GenJnlLine."Line No.";
         JnlLineDim."Dimension Code" := FATransSetup."Receiver Dim. Code 3";
        IF JnlLineDim.FIND('=') THEN BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value 3";
          JnlLineDim.MODIFY(TRUE);
        END ELSE BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value 3";
          JnlLineDim.INSERT(TRUE);
        END;
      END;
      }
      //NC MFA01 < DP
    END;

    PROCEDURE InsertReceiverDimensionValue1@1000000011(FAReclassJnlLine@1210001 : Record 5624;FATransSetup@1210003 : Record 50004);
    BEGIN
      //NC MFA01 > DP
      EXIT;
      {
      IF (FATransSetup."Receiver Dim. Code"<>'') AND
         (FATransSetup."Receiver Dim. Value"<>'') THEN BEGIN
         JnlLineDim.INIT;
         JnlLineDim."Table ID" := DATABASE::"FA Reclass. Journal Line";
         JnlLineDim."Journal Template Name" := FAReclassJnlLine."Journal Template Name";
         JnlLineDim."Journal Batch Name" := FAReclassJnlLine."Journal Batch Name";
         JnlLineDim."Journal Line No." := FAReclassJnlLine."Line No.";
         JnlLineDim."Dimension Code" := FATransSetup."Receiver Dim. Code";
        IF JnlLineDim.FIND('=') THEN BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value";
          JnlLineDim.MODIFY(TRUE);
        END ELSE BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value";
          JnlLineDim.INSERT(TRUE);
        END;
      END;
      IF (FATransSetup."Receiver Dim. Code 2"<>'') AND
         (FATransSetup."Receiver Dim. Value 2"<>'') THEN BEGIN
         JnlLineDim.INIT;
         JnlLineDim."Table ID" := DATABASE::"FA Reclass. Journal Line";
         JnlLineDim."Journal Template Name" := FAReclassJnlLine."Journal Template Name";
         JnlLineDim."Journal Batch Name" := FAReclassJnlLine."Journal Batch Name";
         JnlLineDim."Journal Line No." := FAReclassJnlLine."Line No.";
         JnlLineDim."Dimension Code" := FATransSetup."Receiver Dim. Code 2";
        IF JnlLineDim.FIND('=') THEN BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value 2";
          JnlLineDim.MODIFY(TRUE);
        END ELSE BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value 2";
          JnlLineDim.INSERT(TRUE);
        END;
      END;

      IF (FATransSetup."Receiver Dim. Code 3"<>'') AND
         (FATransSetup."Receiver Dim. Value 3"<>'') THEN BEGIN
         JnlLineDim.INIT;
         JnlLineDim."Table ID" := DATABASE::"FA Reclass. Journal Line";
         JnlLineDim."Journal Template Name" := FAReclassJnlLine."Journal Template Name";
         JnlLineDim."Journal Batch Name" := FAReclassJnlLine."Journal Batch Name";
         JnlLineDim."Journal Line No." := FAReclassJnlLine."Line No.";
         JnlLineDim."Dimension Code" := FATransSetup."Receiver Dim. Code 3";
        IF JnlLineDim.FIND('=') THEN BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value 3";
          JnlLineDim.MODIFY(TRUE);
        END ELSE BEGIN
          JnlLineDim."Dimension Value Code" := FATransSetup."Receiver Dim. Value 3";
          JnlLineDim.INSERT(TRUE);
        END;
      END;
      }
      //NC MFA01 < DP
    END;

    PROCEDURE CalcFAReleaseAmount@1101495002(FANo1@1210003 : Code[20];FANo2@1210002 : Code[20];FABuffer@1210001 : Record 50008;VAR FATransSetup@1210000 : Record 50004;VAR ReleaseAmount@1210019 : Decimal);
    VAR
      CurTemplateCode@1210010 : Code[10];
      CurBatchCode@1210009 : Code[10];
      ConsolidationSource@1210008 : Record 50001;
      ConsolidationSetup@1210007 : Record 50000;
      FALedgerEntry@1210004 : Record 5601;
      Qty@1210005 : Decimal;
      FAJnlLine@1210006 : Record 5621;
      FAJnlLine1@1210011 : Record 5621;
      FAJnlBatch@1210012 : Record 5620;
      CurDocNo@1210013 : Code[20];
      LineNo@1210014 : Integer;
      DimType@1210015 : 'Journal,Document,FAJournal';
      GenJnlLineFict@1210016 : Record 81;
      FADocLineFict@1210017 : Record 12477;
      FALedgerEntry1@1210018 : Record 5601;
      FAJnlPostBatch@1210020 : Codeunit 5633;
      FixedAsset@1210021 : Record 5600;
      FADeprBookFE@1210022 : Record 5612;
      FALedgEntryError@1000000000 : Record 5601;
      FALedgerEntryOVA@1000000001 : Record 5601;
      FALedgerEntryOVA1@1000000002 : Record 5601;
    BEGIN
      //Определение шаблона, раздела журнала, номера документа и строки
      ReleaseAmount := 0;
      IF (FATransSetup."Currency Code" <> '')
        //NC MFA11 > DP
        OR (FATransSetup."Navision Document Type"=FATransSetup."Navision Document Type"::"Gen. Journal")
        //NC MFA11 < DP
        THEN BEGIN
        IF (FABuffer."Amount (LCY)" < 0) AND (FABuffer."Source Operation No."<>0) THEN BEGIN
          FALedgEntryError.RESET;
          FALedgEntryError.SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type",
                                         "FA Posting Date");
          FALedgEntryError.SETRANGE("FA No.",FANo1);
          FALedgEntryError.SETRANGE("Depreciation Book Code",FATransSetup."Depreciation Book Debit");
          FALedgEntryError.SETRANGE("FA Posting Type",
                                    FALedgEntryError."FA Posting Type"::"Acquisition Cost");
          FALedgEntryError.SETFILTER("FA Posting Date",'<=%1',FABuffer."Document Date");
          FALedgEntryError.CALCSUMS(Amount);
          ReleaseAmount := FALedgEntryError.Amount;
        END ELSE

        //NC M1 > DP
        IF (FABuffer."Amount (LCY)" < 0) AND (FABuffer."Source Operation No."=0) THEN BEGIN
          FALedgEntryError.RESET;
          FALedgEntryError.SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type",
                                         "FA Posting Date");
          FALedgEntryError.SETRANGE("FA No.",FANo1);
          FALedgEntryError.SETRANGE("Depreciation Book Code",FATransSetup."Depreciation Book Credit");
          FALedgEntryError.SETRANGE("FA Posting Type",
                                    FALedgEntryError."FA Posting Type"::"Acquisition Cost");
          FALedgEntryError.SETFILTER("FA Posting Date",'<=%1',FABuffer."Document Date");
          FALedgEntryError.CALCSUMS(Amount);
          ReleaseAmount := FALedgEntryError.Amount;
        END ELSE BEGIN
        //NC M1 < DP

          IF FATransSetup."Leasing Object" THEN BEGIN
          //Расчет суммы ввода в эксплуатацию по всем операциям в карточке ОВА, распределение по кол-ву
            FALedgerEntry.RESET;
            FALedgerEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","Reklass. Capital %","Reclassification Entry",Processed,
                                    "Posting Date");
            FALedgerEntry.SETRANGE(FALedgerEntry."FA No.", FANo2);
            FALedgerEntry.CALCSUMS(Quantity);
            FALedgerEntry.CALCSUMS(Amount);
            Qty := FALedgerEntry.Quantity;
            IF Qty <= 0 THEN Qty := 1;
            IF FALedgerEntry.COUNT > 0 THEN BEGIN
              ReleaseAmount := FALedgerEntry.Amount/Qty;
              IF NOT LeasReleaseGenJnlLineExist(FANo2) THEN BEGIN
                ReleaseAmount := FALedgerEntry.Amount - (Qty - 1) * ROUND(FALedgerEntry.Amount/Qty,0.01);
              END;
            END;
          END ELSE BEGIN
          //Расчет суммы ввода в эксплуатацию по необработанным операциям в карточке ОВА

            FALedgerEntry.RESET;
            FALedgerEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","Reklass. Capital %","Reclassification Entry",Processed,
                                    "Posting Date");
            FALedgerEntry.SETRANGE(FALedgerEntry."FA No.", FANo2);
            FALedgerEntry.SETRANGE(FALedgerEntry."Reklass. Capital %", FALSE);
            FALedgerEntry.SETRANGE("Depreciation Book Code", FATransSetup."Depreciation Book Credit");
            //IF NOT FABuffer.Transferred OR (FABuffer."Source Operation No."=0) THEN
            //  FALedgerEntry.SETRANGE(FALedgerEntry."Reclassification Entry", FALSE);

            //NC MFA07 > DP
            IF (FABuffer."Source Operation No."<>0) THEN
              FALedgerEntry.SETFILTER("Buffer Entry No.",'<>%1',FABuffer."Source Operation No.");
            //NC MFA07 > DP

            FALedgerEntry.SETRANGE(FALedgerEntry.Processed, FALSE);
            FALedgerEntry.SETFILTER(FALedgerEntry."Posting Date",'<=%1', FABuffer."Document Date");
            IF NOT FALedgerEntry.FINDSET(TRUE, TRUE) THEN BEGIN
            //Не найдены операции приобретения при вводе в эксплуатацию
              ReleaseAmount :=0;
            END ELSE
              REPEAT
                IF NOT FALedgerEntry."Capital %" THEN BEGIN
                  ReleaseAmount += FALedgerEntry.Amount;
                END;
              UNTIL FALedgerEntry.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE GetTmpLedgerEntryDim@1000000010(GenJnlLine@1000000000 : Record 81;VAR tmpLedgerEntryDimension@1000000001 : Record 360);
    VAR
      DimSetEntry@1101495000 : Record 480;
    BEGIN
      tmpLedgerEntryDimension.DELETEALL;
      //NC NOS-26 > SPA
      {
      JnlLineDimension.RESET;
      JnlLineDimension.SETRANGE("Table ID",81);
      JnlLineDimension.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      JnlLineDimension.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      JnlLineDimension.SETRANGE("Journal Line No.",GenJnlLine."Line No.");
      JnlLineDimension.SETRANGE("Allocation Line No.",0);
      IF JnlLineDimension.FINDSET THEN
        REPEAT
           tmpLedgerEntryDimension.INIT;
           tmpLedgerEntryDimension."Table ID" :=17;
           tmpLedgerEntryDimension."Entry No." := JnlLineDimension."Journal Line No.";
           tmpLedgerEntryDimension."Dimension Code" := JnlLineDimension."Dimension Code";
           tmpLedgerEntryDimension."Dimension Value Code" :=JnlLineDimension."Dimension Value Code";
           tmpLedgerEntryDimension.INSERT;
         UNTIL JnlLineDimension.NEXT=0;
      }
      DimSetEntry.SETRANGE("Dimension Set ID",GenJnlLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          tmpLedgerEntryDimension.INIT;
          tmpLedgerEntryDimension."Table ID" := 17;
          tmpLedgerEntryDimension."Entry No." := GenJnlLine."Line No.";
          tmpLedgerEntryDimension."Dimension Code" := DimSetEntry."Dimension Code";
          tmpLedgerEntryDimension."Dimension Value Code" := DimSetEntry."Dimension Value Code";
          tmpLedgerEntryDimension.INSERT;
        UNTIL DimSetEntry.NEXT = 0;
      //NC NOS-26 < SPA
    END;

    PROCEDURE CreateJnlLineFX@1101495004(SourceGenJnlLine@1101495001 : Record 81;GLBuffer@1101495004 : Record 50008;ConsolidationSource@1101495005 : Record 50001;VAR DebitLedgEntryDimTMP@1000000014 : Record 360;VAR CreditLedgEntryDimTMP@1101495000 : Record 360;FXAmountLCY@1101495006 : Decimal;DTAccountCode@1101495002 : Code[20];CTAccountCode@1101495003 : Code[20]);
    VAR
      GenJnlLine@1101495008 : Record 81;
      DimMgt@1101495007 : Codeunit 408;
      LastLineNo@1000000000 : Integer;
      TempDimSetEntry@1101495009 : TEMPORARY Record 480;
    BEGIN
      //NC MFA07 > MP
      ConsSetup.GET;
      GenJnlLine.INIT;
      GenJnlLine."Journal Template Name" := SourceGenJnlLine."Journal Template Name";
      GenJnlLine."Journal Batch Name" := SourceGenJnlLine."Journal Batch Name";
      GenJnlLine."Line No." := SourceGenJnlLine."Line No." + 3;

      GenJnlLine."Source Code" := SourceCodeSetup.Transformation;
      GenJnlLine."Posting Date" := SourceGenJnlLine."Posting Date";
      GenJnlLine."Source Historical Date" := SourceGenJnlLine."Source Historical Date";
      GenJnlLine."Document Type" := SourceGenJnlLine."Document Type";
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine."Account No." := ConsSetup."FX Difference G/L Account No.";

      GenJnlLine.Description := SourceGenJnlLine.Description;
      GenJnlLine."Business Unit Code" := SourceGenJnlLine."Business Unit Code";

      GenJnlLine."Special Correspondense" := SourceGenJnlLine."Special Correspondense";
      GenJnlLine.Amount := -FXAmountLCY;
      GenJnlLine.Correction := SourceGenJnlLine.Correction;

      GenJnlLine."Document No." := SourceGenJnlLine."Document No.";
      GenJnlLine."Export Cons. Source Code" := SourceGenJnlLine."Export Cons. Source Code";
      GenJnlLine."Source Entry No." := SourceGenJnlLine."Source Entry No.";
      GenJnlLine."Register No." := SourceGenJnlLine."Register No.";
      GenJnlLine."Export Register No." := SourceGenJnlLine."Export Register No.";
      GenJnlLine."External Document Type" := SourceGenJnlLine."External Document Type";
      GenJnlLine."External Document ID" := SourceGenJnlLine."External Document ID";
      GenJnlLine."External Document Date" := SourceGenJnlLine."External Document Date";
      GenJnlLine."External Operation No" := SourceGenJnlLine."External Operation No";
      GenJnlLine."External Document No." := SourceGenJnlLine."External Document No.";
      GenJnlLine.Removed := SourceGenJnlLine.Removed;
      GenJnlLine.Reposted := SourceGenJnlLine.Reposted;


      GenJnlLine."FA Operation" := SourceGenJnlLine."FA Operation";

      GenJnlLine."Buffer Entry No." := SourceGenJnlLine."Buffer Entry No.";
      GenJnlLine."Cons. Source Code" := SourceGenJnlLine."Cons. Source Code";
      GenJnlLine."Begining Date" := SourceGenJnlLine."Begining Date";
      GenJnlLine."Ending Date" := SourceGenJnlLine."Ending Date";
      GenJnlLine."Description 2" := SourceGenJnlLine."Description 2";
      GenJnlLine."Transaction Type" := GenJnlLine."Transaction Type"::Automatic;
      GenJnlLine.VALIDATE(Quantity,0);

      DimMgt.GetDimensionSet(TempDimSetEntry,0); // NC NOS-26 SPA check that table is temporary

      DebitLedgEntryDimTMP.SETRANGE("Table ID",17);
      DebitLedgEntryDimTMP.SETRANGE("Entry No.",GLBuffer."Entry No.");
      IF DebitLedgEntryDimTMP.FINDSET THEN
        REPEAT
          //NC NOS-26 > SPA
          {
          GenJnlLineDim.INIT;
          GenJnlLineDim."Table ID" := 81;
          GenJnlLineDim."Journal Template Name" := SourceGenJnlLine."Journal Template Name";
          GenJnlLineDim."Journal Batch Name" := SourceGenJnlLine."Journal Batch Name";
          GenJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
          GenJnlLineDim."Dimension Code" := DebitLedgEntryDimTMP."Dimension Code";
          GenJnlLineDim."Dimension Value Code" := DebitLedgEntryDimTMP."Dimension Value Code";
          GenJnlLineDim.INSERT;
          IF GenJnlLineDim."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
            GenJnlLine."Shortcut Dimension 1 Code" := GenJnlLineDim."Dimension Code";
          IF GenJnlLineDim."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
            GenJnlLine."Shortcut Dimension 2 Code" := GenJnlLineDim."Dimension Code";
          }
          TempDimSetEntry."Dimension Code" := DebitLedgEntryDimTMP."Dimension Code";
          TempDimSetEntry.VALIDATE("Dimension Value Code",DebitLedgEntryDimTMP."Dimension Value Code");
          TempDimSetEntry.INSERT;
          //NC NOS-26 < SPA
        UNTIL DebitLedgEntryDimTMP.NEXT = 0;

      CreditLedgEntryDimTMP.SETRANGE("Table ID",17);
      CreditLedgEntryDimTMP.SETRANGE("Entry No.",GLBuffer."Entry No.");
      IF CreditLedgEntryDimTMP.FINDSET THEN
        REPEAT
          //NC NOS-26 > SPA
          {
          GenJnlLineDim.INIT;
          GenJnlLineDim."Table ID" := 81;
          GenJnlLineDim."Journal Template Name" := SourceGenJnlLine."Journal Template Name";
          GenJnlLineDim."Journal Batch Name" := SourceGenJnlLine."Journal Batch Name";
          GenJnlLineDim."Journal Line No." := GenJnlLine."Line No.";
          GenJnlLineDim."Dimension Code" := CreditLedgEntryDimTMP."Dimension Code";
          GenJnlLineDim."Dimension Value Code" := CreditLedgEntryDimTMP."Dimension Value Code";
          IF NOT GenJnlLineDim.INSERT THEN BEGIN
          END ELSE BEGIN
            IF GenJnlLineDim."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
              GenJnlLine."Shortcut Dimension 1 Code" := GenJnlLineDim."Dimension Code";
            IF GenJnlLineDim."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
              GenJnlLine."Shortcut Dimension 2 Code" := GenJnlLineDim."Dimension Code";
          END;
          }
          TempDimSetEntry."Dimension Code" := CreditLedgEntryDimTMP."Dimension Code";
          IF NOT TempDimSetEntry.FIND THEN BEGIN
            TempDimSetEntry.VALIDATE("Dimension Value Code",CreditLedgEntryDimTMP."Dimension Value Code");
            TempDimSetEntry.INSERT;
          END;
          //NC NOS-26 < SPA
        UNTIL CreditLedgEntryDimTMP.NEXT = 0;

      //NC NOS-26 > SPA
      {
      InsertFXDim(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
                  ConsSetup."Debit FX Diff. Dim. Code",DTAccountCode);
      InsertFXDim(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
                  ConsSetup."Credit FX Diff. Dim. Code",CTAccountCode);
      }
      TempDimSetEntry."Dimension Code" := ConsSetup."Debit FX Diff. Dim. Code";
      IF NOT TempDimSetEntry.FIND THEN BEGIN
        TempDimSetEntry.VALIDATE("Dimension Value Code",DTAccountCode);
        TempDimSetEntry.INSERT;
      END;

      TempDimSetEntry."Dimension Code" := ConsSetup."Credit FX Diff. Dim. Code";
      IF NOT TempDimSetEntry.FIND THEN BEGIN
        TempDimSetEntry.VALIDATE("Dimension Value Code",CTAccountCode);
        TempDimSetEntry.INSERT;
      END;
      DimMgt.UpdateGenJnlLineDim(GenJnlLine,DimMgt.GetDimensionSetID(TempDimSetEntry));
      //NC NOS-26 < SPA

      //NC MFA25 > DP
      GenJnlLine."Balance Entry" := TRUE;
      //NC MFA25 < DP


      GenJnlLine.INSERT;
      LastLineNo := GenJnlLine."Line No.";
      //NC MFA07 < DP
    END;

    PROCEDURE InsertFXDim@1101495003(JnlTemplateCode@1101495000 : Code[10];JnlBatchCode@1101495001 : Code[10];JnlLineNo@1101495002 : Integer;DimCode@1101495003 : Code[20];DimValueCode@1101495004 : Code[20]);
    BEGIN
      //NC MFA07 > DP
      // NC MIGRATION 2017
      // GenJnlLineDim.INIT;
      // GenJnlLineDim."Table ID" := 81;
      // GenJnlLineDim."Journal Template Name" := JnlTemplateCode;
      // GenJnlLineDim."Journal Batch Name" := JnlBatchCode;
      // GenJnlLineDim."Journal Line No." := JnlLineNo;
      // GenJnlLineDim."Dimension Code" := DimCode;
      // GenJnlLineDim."Dimension Value Code" := DimValueCode;
      // GenJnlLineDim.INSERT;
      //NC MFA07 < DP
    END;

    PROCEDURE GetTmpFALedgerEntry@1000000013(GenJnlLine@1000000000 : Record 81;VAR tmpFALE@1000000001 : Record 5601);
    BEGIN
      //NC MFA07 > DP
      IF GenJnlLine."Account Type" =GenJnlLine."Account Type"::"Fixed Asset" THEN BEGIN
        tmpFALE.INIT;
        tmpFALE."FA No." :=GenJnlLine."Account No.";
        tmpFALE."FA Posting Date" := GenJnlLine."Posting Date";
        tmpFALE."Posting Date" := GenJnlLine."Posting Date";
        tmpFALE."FA Posting Type" := GenJnlLine."FA Posting Type" - 1;
        tmpFALE."Depreciation Book Code" := GenJnlLine."Depreciation Book Code";
        tmpFALE."FA Posting Group" := GenJnlLine."Posting Group";
        tmpFALE.INSERT;
      END;
      //NC MFA07 < DP
    END;

    PROCEDURE GetFAGLAccount@1000000014(GenJnlLine@1000000000 : Record 81) : Code[20];
    VAR
      FAGetGLAccountNo@1000000001 : Codeunit 5602;
      tmpFALE@1000000002 : TEMPORARY Record 5601;
      FAGLAccNo@1000000003 : Code[20];
    BEGIN
      //NC MFA07 > DP
      FAGLAccNo:='';
      IF GenJnlLine."Account Type" =GenJnlLine."Account Type"::"Fixed Asset" THEN BEGIN
        tmpFALE.DELETEALL;
        GetTmpFALedgerEntry(GenJnlLine,tmpFALE);
        FAGLAccNo :=FAGetGLAccountNo.GetAccNo(tmpFALE);
      END;
      EXIT(FAGLAccNo);
      //NC MFA07 < DP
    END;

    PROCEDURE CheckFABuffer@1000000015(VAR FABufferChck@1000000000 : Record 50008;ImportOperation@1000000002 : 'Приобретение,Ввод в Эксплуатацию,Передача Лизингополучателю,Амортизация,Реклассификация,Выбытие,Перемещение';TempMapping@1000000006 : TEMPORARY Record 50022);
    VAR
      FABuffer1@1000000001 : Record 50008;
      FABufferTransfer@1000000003 : Record 50008;
      FABufferTransfer2@1000000004 : Record 50008;
      IsError@1000000005 : Boolean;
      FAJnlAmount@1000000008 : Decimal;
      IsFATransSetupFound@1000000009 : Boolean;
      IsFACorrTransSetupFound@1000000010 : Boolean;
      CurFANo1@1000000011 : Code[20];
      CurFANo2@1000000012 : Code[20];
      SetupType@1000000013 : 'Debit,Credit';
    BEGIN
      //NC MFA11 > DP
      IsError := FALSE;
      FAJnlAmount :=0;
      //Поиск настройки трансформации

        IF ((FABufferChck."Source Operation No." = 0) AND (NOT FABufferChck.Removed)) THEN BEGIN

          FATransformationSetup.RESET;
          FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
            "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
          IsFATransSetupFound := FALSE;
          FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
          //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
          FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
          FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABufferChck."Debit G/L Account No.",
                                                                                      TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                      TempMapping."Temp No. Of Symb. In Masks"));
          FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABufferChck."Credit G/L Account No.",
                                                                                       TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                       TempMapping."Temp No. Of Symb. In Masks"));

          IF ImportOperation = ImportOperation::Приобретение THEN
            IF FABufferChck."IC FA Operation" THEN
              FATransformationSetup.SETRANGE("Int. Contragent",TRUE)
            ELSE
              FATransformationSetup.SETRANGE("Int. Contragent",FALSE);

          FATransformationSetup.SETRANGE("FA Operation Type", FABufferChck."FA Operation Type");
          FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
          IF FABufferChck."FA Class Code"<>'' THEN
            FATransformationSetup.SETRANGE("FA Class Code", FABufferChck."FA Class Code");
          IF FATransformationSetup.FINDFIRST THEN BEGIN
            IsFATransSetupFound := TRUE;
          END ELSE BEGIN
            FATransformationSetup.SETFILTER("Company Name",'%1','');
            IF FATransformationSetup.FINDFIRST THEN
            BEGIN
              IsFATransSetupFound := TRUE;
            END ELSE BEGIN
              FATransformationSetup.SETFILTER("FA Class Code",'%1','');
              IF FATransformationSetup.FINDFIRST THEN
                IsFATransSetupFound := TRUE;
            END;
          END;
          IF NOT IsFATransSetupFound THEN BEGIN
            IsError := TRUE;
            CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00001, FABufferChck."Entry No."),'EFA01');
          END ELSE BEGIN
            IF (ImportOperation = ImportOperation::Приобретение) THEN BEGIN
              CurFANo1 := GetCheckFANo(FABufferChck,SetupType::Debit);
              CheckFAGlobalDisp(CurFANo1,FATransformationSetup."Depreciation Book Debit",FABufferChck,IsError);
            END;
            IF (ImportOperation = ImportOperation::"Ввод в Эксплуатацию") THEN BEGIN
              CurFANo1 := GetCheckFANo(FABufferChck,SetupType::Debit);
              CurFANo2 := GetCheckFANo(FABufferChck,SetupType::Credit);
              CalcFAReleaseAmount(CurFANo1,CurFANo2,FABufferChck,FATransformationSetup,FAJnlAmount);
              CheckFAFirstEntry(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
              CheckFADisp(CurFANo1,FATransformationSetup."Depreciation Book Debit",FABufferChck,IsError);
              CheckFADisp(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
              {
              IF FAJnlAmount=0 THEN BEGIN
                IsError := TRUE;
                CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00001, FABufferChck."Entry No."));
              END;
              }
            END;
            IF (ImportOperation = ImportOperation::Выбытие) THEN BEGIN
              CurFANo1 := GetCheckFANo(FABufferChck,SetupType::Credit);
              IF CurFANo1<>'' THEN BEGIN
                CheckFADisp(CurFANo1,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
              END;
                CheckFADispLast(CurFANo1,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
              CheckFAFirstEntry(CurFANo1,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
            END;
            IF (ImportOperation = ImportOperation::Перемещение) THEN BEGIN
              CurFANo1 := GetCheckFANo(FABufferChck,SetupType::Debit);
              IF CurFANo1<>'' THEN
                CheckFADisp(CurFANo1,FATransformationSetup."Depreciation Book Debit",FABufferChck,IsError);
              CurFANo2 := GetCheckFANo(FABufferChck,SetupType::Credit);
              CheckFAFirstEntry(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
              IF CurFANo2<>'' THEN
                CheckFAAcqCostValue(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
            END;
            IF (ImportOperation = ImportOperation::Реклассификация) THEN BEGIN
              CurFANo1 := GetCheckFANo(FABufferChck,SetupType::Debit);
              IF CurFANo1<>'' THEN
                CheckFADisp(CurFANo1,FATransformationSetup."Depreciation Book Debit",FABufferChck,IsError);
              CurFANo2 := GetCheckFANo(FABufferChck,SetupType::Credit);
              CheckFAFirstEntry(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
              IF CurFANo2<>'' THEN
                CheckFAAcqCostValue(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);

            END;
            IsCredit :=FALSE;
            CheckCreateGJL(FABufferChck,FATransformationSetup,FAJnlAmount,IsError,'',0,FABufferChck);

          END;
        END ELSE
          IF FABufferChck.Removed THEN BEGIN
            FABuf.RESET;
            //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
            FABuf.SETCURRENTKEY(FABuf."Remove Oper. No");
            FABuf.SETRANGE(FABuf."Remove Oper. No", FABufferChck."Entry No.");
            FABuf.SETRANGE(FABuf."Cons. Source Code", FABufferChck."Cons. Source Code");
            IF FABuf.FINDFIRST THEN BEGIN
              IF FABuf."FA Operation Exported" THEN BEGIN
                FATransformationSetup.RESET;
                FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                  "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
                IsFACorrTransSetupFound := FALSE;
                FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
                //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
                FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
                FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                IF ImportOperation = ImportOperation::Приобретение THEN
                  IF FABuf."IC FA Operation" THEN
                    FATransformationSetup.SETRANGE("Int. Contragent",TRUE)
                  ELSE
                    FATransformationSetup.SETRANGE("Int. Contragent",FALSE);
                FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
                FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
                IF FABuf."FA Class Code"<>'' THEN
                  FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");
                IF FATransformationSetup.FIND('-') THEN BEGIN
                  IsFACorrTransSetupFound := TRUE;
                END ELSE BEGIN
                  FATransformationSetup.SETFILTER("Company Name",'%1','');
                  IF FATransformationSetup.FINDFIRST THEN
                  BEGIN
                    IsFACorrTransSetupFound := TRUE;
                  END ELSE BEGIN
                    FATransformationSetup.SETFILTER("FA Class Code",'%1','');
                    IF FATransformationSetup.FINDFIRST THEN
                      IsFACorrTransSetupFound := TRUE;
                  END;
                END;
                IF NOT IsFACorrTransSetupFound THEN BEGIN
                  IsError := TRUE;
                  CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00001, FABufferChck."Entry No."),'EFA01');
                END ELSE BEGIN

                  IF (ImportOperation = ImportOperation::"Ввод в Эксплуатацию") THEN BEGIN
                    CurFANo1 := GetCheckFANo(FABufferChck,SetupType::Debit);
                    CurFANo2 := GetCheckFANo(FABufferChck,SetupType::Credit);
                    CalcFAReleaseAmount(CurFANo1,CurFANo2,FABufferChck,FATransformationSetup,FAJnlAmount);
                    CheckFADepr(CurFANo1,FATransformationSetup."Depreciation Book Debit",FABufferChck,IsError);
                    CheckFADisp(CurFANo1,FATransformationSetup."Depreciation Book Debit",FABufferChck,IsError);
                    CheckFADisp(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
                  END;

                IF ImportOperation IN [ImportOperation::Перемещение,ImportOperation::Реклассификация] THEN BEGIN
                  CurFANo2 := GetCheckFANo(FABufferChck,SetupType::Credit);
                  IsCredit := (FATransformationSetup."Depreciation Book Credit"<>'');
                  CheckFANextEntry(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,FABuf,IsError);
                END ELSE
                  IsCredit :=FALSE;
                CheckCreateGJL(FABufferChck,
                FATransformationSetup,FAJnlAmount,IsError,FABufferChck."Cons. Source Code",FABufferChck."Entry No.",FABuf);
               END;
              END ELSE BEGIN
               IsError := TRUE;
               CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00107, FABufferChck."Entry No.",FABuf."Entry No."),'EFA17');
              END;

            END ELSE BEGIN
              IsError := TRUE;
              CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00106, FABufferChck."Entry No."),'EFA16');
            END;
          END ELSE
            IF (FABufferChck."Source Operation No." <> 0)THEN BEGIN
              FABuf.RESET;
              //FABuf.CHANGECOMPANY(ConsSetup."Company for FA Import");
              FABuf.SETRANGE("Cons. Source Code", FABufferChck."Cons. Source Code");
              FABuf.SETRANGE("Entry No.",FABufferChck."Source Operation No.");
              IF FABuf.FINDFIRST THEN BEGIN
                IF FABuf."FA Operation Exported" THEN BEGIN
                  FATransformationSetup.RESET;
                  FATransformationSetup.SETCURRENTKEY("Company Name","Extern. Debit Acc. No.","Extern. Credit Acc. No.",
                     "Int. Contragent","FA Operation Type","Navision Document Type","Currency Code");
                  IsFACorrTransSetupFound := FALSE;
                  FATransformationSetup.SETRANGE("Mapping Code",TempMapping.Code);
                  //FATransformationSetup.SETFILTER("Company Name",ConsolidationSource."FA Import Company Name");
                  FATransformationSetup.SETRANGE("Company Name",COMPANYNAME);
                  FATransformationSetup.SETRANGE("Extern. Debit Acc. No.", GetAccountNoByMask(FABuf."Debit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                  FATransformationSetup.SETRANGE("Extern. Credit Acc. No.", GetAccountNoByMask(FABuf."Credit G/L Account No.",
                                                                                            TempMapping.Code,TempMapping."Temp Use Masks",
                                                                                            TempMapping."Temp No. Of Symb. In Masks"));
                  IF ImportOperation = ImportOperation::Приобретение THEN
                    IF FABuf."IC FA Operation" THEN
                      FATransformationSetup.SETRANGE("Int. Contragent",TRUE)
                    ELSE
                      FATransformationSetup.SETRANGE("Int. Contragent",FALSE);
                  FATransformationSetup.SETRANGE("FA Operation Type", FABuf."FA Operation Type");
                  FATransformationSetup.SETRANGE(FATransformationSetup."Navision Document Type",
                                     FATransformationSetup."Navision Document Type"::"Gen. Journal");
                  IF FABuf."FA Class Code"<>'' THEN
                    FATransformationSetup.SETRANGE("FA Class Code", FABuf."FA Class Code");

                  IF FATransformationSetup.FIND('-') THEN BEGIN
                    IsFACorrTransSetupFound := TRUE;
                  END ELSE BEGIN
                    FATransformationSetup.SETFILTER("Company Name",'%1','');
                    IF FATransformationSetup.FINDFIRST THEN

                    BEGIN
                      IsFACorrTransSetupFound := TRUE;
                    END ELSE BEGIN
                      FATransformationSetup.SETFILTER("FA Class Code",'%1','');
                      IF FATransformationSetup.FINDFIRST THEN
                        IsFACorrTransSetupFound := TRUE;
                    END;

                  END;
                  IF NOT IsFACorrTransSetupFound THEN BEGIN
                    IsError := TRUE;
                    CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00001, FABufferChck."Entry No."),'EFA01');
                  END ELSE BEGIN
                    IF (ImportOperation = ImportOperation::"Ввод в Эксплуатацию") THEN BEGIN
                      CurFANo1 := GetCheckFANo(FABufferChck,SetupType::Debit);
                      CurFANo2 := GetCheckFANo(FABufferChck,SetupType::Credit);
                      CalcFAReleaseAmount(CurFANo1,CurFANo2,FABufferChck,FATransformationSetup,FAJnlAmount);
                      CheckFADepr(CurFANo1,FATransformationSetup."Depreciation Book Debit",FABufferChck,IsError);

                      CheckFADisp(CurFANo1,FATransformationSetup."Depreciation Book Debit",FABufferChck,IsError);
                      CheckFADisp(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
                    END;
                    IF (ImportOperation = ImportOperation::Выбытие) THEN BEGIN
                      CurFANo1 := GetCheckFANo(FABufferChck,SetupType::Credit);
                      IF CurFANo1<>'' THEN
                        CheckFADisp(CurFANo1,FATransformationSetup."Depreciation Book Credit",FABufferChck,IsError);
                    END;
                    IF ImportOperation IN [ImportOperation::Перемещение,ImportOperation::Реклассификация] THEN BEGIN
                      IsCredit := (FATransformationSetup."Depreciation Book Credit"<>'');
                      CurFANo2 := GetCheckFANo(FABufferChck,SetupType::Credit);
                      CheckFANextEntry(CurFANo2,FATransformationSetup."Depreciation Book Credit",FABufferChck,FABuf,IsError);
                    END ELSE
                      IsCredit :=FALSE;

                    CheckCreateGJL(FABufferChck,
                    FATransformationSetup,FAJnlAmount,IsError,FABufferChck."Cons. Source Code",FABufferChck."Entry No.",FABuf);
                  END;
                END ELSE BEGIN
                  FABuf."FA Operation Exported" :=TRUE;
                  FABuf."FA Operation Processed" :=TRUE;
                  FABuf.Accept := FALSE;
                  FABuf.MODIFY;
                  FABufferChck."Source Operation No." :=0;
                  FABufferChck.MODIFY;
                END;
              END ELSE BEGIN
                IsError := TRUE;
                CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00106, FABufferChck."Entry No."),'EFA16');
              END;
            END;
      IF IsError THEN BEGIN
        NoOfCurrentEntryError := NoOfCurrentEntryError+1;
        FABufferChck."Error in Import" := TRUE;
        FABufferChck."FA Export Cons. Register" := FAConsRegister."No.";
        FABufferChck.MODIFY;
      END ELSE
        IF NOT FABufferChck."Error in Import" THEN BEGIN
          NoOfCurrentEntryOK := NoOfCurrentEntryOK +1;
          FABufferChck."Error in Import" := FALSE;
          FABufferChck.MODIFY;
        END;
      //NC MFA11 < DP
    END;

    PROCEDURE GetCheckFANo@1000000016(FABufferChck@1000000000 : Record 50008;SetupType@1000000002 : 'Debit,Credit') : Code[20];
    VAR
      FACheck@1000000003 : Record 5600;
      FACheckNo@1000000001 : Code[20];
      NewFANo@1000000004 : Code[20];
    BEGIN
      //NC MFA11 < DP
      FACheckNo :='';
      IF SetupType = SetupType::Debit THEN BEGIN
        IF FABufferChck."Debit Dimension 17 Value Code" <> '' THEN BEGIN
          NewFANo := FABufferChck."Debit Dimension 17 Value Code";
          FAType := FAType::CIP;
        END ELSE
          IF FABufferChck."Debit Dimension 18 Value Code" <> '' THEN BEGIN
            NewFANo := FABufferChck."Debit Dimension 18 Value Code";
            FAType := FAType::IA;
          END ELSE
            IF FABufferChck."Debit Dimension 19 Value Code" <> '' THEN BEGIN
              NewFANo := FABufferChck."Debit Dimension 19 Value Code";
              FAType := FAType::FA;
            END ELSE
              IF FABufferChck."Debit Dimension 20 Value Code" <> '' THEN BEGIN
                NewFANo := FABufferChck."Debit Dimension 20 Value Code";
                FAType := FAType::FE;
              END
      END ELSE BEGIN
       IF FABufferChck."Credit Dimension 17 Value Code" <> '' THEN BEGIN
          NewFANo := FABufferChck."Credit Dimension 17 Value Code";
          FAType := FAType::CIP;
        END ELSE
          IF FABufferChck."Credit Dimension 18 Value Code" <> '' THEN BEGIN
            NewFANo := FABufferChck."Credit Dimension 18 Value Code";
            FAType := FAType::IA;
          END ELSE
            IF FABufferChck."Credit Dimension 19 Value Code" <> '' THEN BEGIN
              NewFANo := FABufferChck."Credit Dimension 19 Value Code";
              FAType := FAType::FA;
            END ELSE
              IF FABufferChck."Credit Dimension 20 Value Code" <> '' THEN BEGIN
                NewFANo := FABufferChck."Credit Dimension 20 Value Code";
                FAType := FAType::FE;
              END;
      END;

      IF NewFANo<>'' THEN BEGIN
        FACheck.RESET;
        FACheck.SETCURRENTKEY("Inventory Number","FA Card Type");
        FACheck.SETRANGE("Inventory Number",NewFANo);
        IF FAType = FAType::CIP THEN
          FACheck.SETRANGE("FA Card Type",FACheck."FA Card Type"::CIP)
        ELSE
          FACheck.SETRANGE("FA Card Type",FACheck."FA Card Type"::FA);

        IF FAType = FAType::FA THEN
          FACheck.SETRANGE("FA Type",FACheck."FA Type"::"Fixed Assets");
        IF FAType = FAType::IA THEN
          FACheck.SETRANGE("FA Type",FACheck."FA Type"::"Intangible Asset");
        IF FAType = FAType::FE THEN
          FACheck.SETRANGE("FA Type",FACheck."FA Type"::"Future Expense");
        IF FACheck.FINDFIRST THEN
          FACheckNo := FACheck."No."
        ELSE BEGIN
          FACheck.SETRANGE("FA Type");
          IF FACheck.FINDFIRST THEN
            FACheckNo := FACheck."No."
        END
      END;

      EXIT(FACheckNo);
      //NC MFA11 < DP
    END;

    PROCEDURE CheckCreateGJL@1000000018(VAR FABufferChck@1210002 : Record 50008;FATransSetup@1210000 : Record 50004;FaJnlAmount@1210022 : Decimal;VAR IsError@1210024 : Boolean;ErrorConsSourceCode@1000000008 : Code[20];ErrorBufEntryNo@1000000009 : Integer;FABuf@1000000010 : Record 50008);
    VAR
      FADeprBook@1210003 : Record 5612;
      OpType@1210004 : 'Debet,Credit';
      GenJnlLine@1210006 : Record 81;
      GenJnlLine1@1210007 : Record 81;
      Currency@1210008 : Record 4;
      GLSetup@1210010 : Record 98;
      LineNo@1210009 : Integer;
      FADocLineFict@1210011 : Record 12477;
      FAJnlLineFict@1210012 : Record 5621;
      DimType@1210013 : 'Journal,Document,FAJournal';
      CurDocNo@1210014 : Code[20];
      GenJnlBatch@1210015 : Record 232;
      NoSeriesMgt@1210016 : Codeunit 396;
      CurTemplateCode@1210017 : Code[10];
      CurBatchCode@1210018 : Code[10];
      ConsolidationSetup@1210020 : Record 50000;
      GenJnlPostBatch@1210021 : Codeunit 13;
      FixedAsset@1210023 : Record 5600;
      CorrCoef@1210026 : Decimal;
      FADeprBookFE@1210027 : Record 5612;
      GLEntryTemp@1101495000 : TEMPORARY Record 17;
      AccountType@1000000000 : 'Income Statement,Balance Sheet';
      FXAmountLCY@1000000001 : Decimal;
      DTGLAccCode@1000000002 : Code[20];
      CTGLAccCode@1000000007 : Code[20];
      ConsRegister@1000000005 : Record 50005;
      TempFALedgerEntry@1000000006 : TEMPORARY Record 5601;
      FAPostingGroup@1000000003 : Record 5606;
      DeprBook@1000000004 : Record 5611;
      GLAccount@1000000011 : Record 15;
    BEGIN
      //NC MFA11 > DP
      GLSetup.GET;
      //Проверка настройки трансформации
      IF (FATransSetup."Depreciation Book Debit" = '') AND (FATransSetup."Receiver Debit Acc. No"='') THEN BEGIN
        IsError := TRUE;
        CreateErrorLogEntry2(FABufferChck,
        STRSUBSTNO(Text00003,FATransSetup.FIELDCAPTION(FATransSetup."Depreciation Book Debit"),
                         FATransSetup.FIELDCAPTION(FATransSetup."Receiver Debit Acc. No"), FATransSetup."No."),'EFA02');
      END;
      IF (FATransSetup."Receiver Credit Acc. No" = '') AND (FATransSetup."Depreciation Book Credit"='') THEN BEGIN
        IsError := TRUE;
        CreateErrorLogEntry2(FABufferChck,
        STRSUBSTNO(Text00003,FATransSetup.FIELDCAPTION(FATransSetup."Depreciation Book Credit"),
                         FATransSetup.FIELDCAPTION(FATransSetup."Receiver Credit Acc. No"), FATransSetup."No."),'EFA02');
      END;

      IF (FATransSetup."Receiver Debit Acc. No"<>'') THEN
        IF NOT GLAccount.GET(FATransSetup."Receiver Debit Acc. No") THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,
          STRSUBSTNO(Text00009, FATransSetup.FIELDCAPTION("Receiver Debit Acc. No"),
                          FATransSetup."Receiver Debit Acc. No",FATransSetup."No."),'EFA28');
        END;
      IF (FATransSetup."Receiver Credit Acc. No"<>'') THEN
        IF NOT GLAccount.GET(FATransSetup."Receiver Credit Acc. No") THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,
          STRSUBSTNO(Text00009, FATransSetup.FIELDCAPTION("Receiver Credit Acc. No"),
                          FATransSetup."Receiver Credit Acc. No",FATransSetup."No."),'EFA28');
        END;

      IF FATransSetup."Depreciation Book Debit" <> '' THEN
        IF NOT DeprBook.GET(FATransSetup."Depreciation Book Debit") THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,
          STRSUBSTNO(Text00006, FATransSetup.FIELDCAPTION("Depreciation Book Debit"),
                          FATransSetup."No."),'EFA26');
        END;

      IF FATransSetup."Depreciation Book Credit" <> '' THEN
        IF NOT DeprBook.GET(FATransSetup."Depreciation Book Credit") THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,
          STRSUBSTNO(Text00006, FATransSetup.FIELDCAPTION("Depreciation Book Credit"),
                          FATransSetup."No."),'EFA26');
        END;

      //NC > MP
      IF FATransSetup."FA Operation Type" <> FATransSetup."FA Operation Type"::WriteOff THEN
      //NC < MP
      IF FATransSetup."Depreciation Book Debit" <> '' THEN BEGIN
        IF (FATransSetup."FA Posting Group Debit"='') OR
        ((FATransSetup."FA Posting Group Debit"<>'') AND
        NOT FAPostingGroup.GET(FATransSetup."FA Posting Group Debit")) THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,
          STRSUBSTNO(Text00005, FATransSetup.FIELDCAPTION("FA Posting Group Debit"),FATransSetup.FIELDCAPTION("Depreciation Book Debit"),
                          FATransSetup."No."),'EFA25');
       END;
      END;

      //NC > MP
      IF FATransSetup."FA Operation Type" <> FATransSetup."FA Operation Type"::WriteOff THEN
      //NC < MP
      IF FATransSetup."Depreciation Book Credit" <> '' THEN BEGIN
        IF (FATransSetup."FA Posting Group Credit"='') OR
        ((FATransSetup."FA Posting Group Credit"<>'') AND
        NOT FAPostingGroup.GET(FATransSetup."FA Posting Group Credit")) THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,
         STRSUBSTNO(Text00005, FATransSetup.FIELDCAPTION("FA Posting Group Credit"),FATransSetup.FIELDCAPTION("Depreciation Book Credit"),
                          FATransSetup."No."),'EFA25');
        END;
      END;

      //Доопределение измерений
      IF (FATransSetup."Receiver Dim. Code"<>'') AND (FATransSetup."Receiver Dim. Value"<>'') THEN BEGIN
        CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABufferChck."Entry No.",
            FATransSetup."Receiver Dim. Code",FATransSetup."Receiver Dim. Value");
        CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABufferChck."Entry No.",
            FATransSetup."Receiver Dim. Code",FATransSetup."Receiver Dim. Value");
      END;
      IF (FATransSetup."Receiver Dim. Code 2"<>'') AND (FATransSetup."Receiver Dim. Value 2"<>'') THEN BEGIN
        CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABufferChck."Entry No.",
            FATransSetup."Receiver Dim. Code 2",FATransSetup."Receiver Dim. Value 2");
        CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABufferChck."Entry No.",
            FATransSetup."Receiver Dim. Code 2",FATransSetup."Receiver Dim. Value 2");
      END;
      IF (FATransSetup."Receiver Dim. Code 3"<>'') AND (FATransSetup."Receiver Dim. Value 3"<>'') THEN BEGIN
        CreateDimBuffer(TempDebitLedgEntryDim,DATABASE::"G/L Entry",FABufferChck."Entry No.",
            FATransSetup."Receiver Dim. Code 3",FATransSetup."Receiver Dim. Value 3");
        CreateDimBuffer(TempCreditLedgEntryDim,DATABASE::"G/L Entry",FABufferChck."Entry No.",
            FATransSetup."Receiver Dim. Code 3",FATransSetup."Receiver Dim. Value 3");
      END;
      //Проверка обязательных/предопределенных/запрещенных измерений на счете

      CheckDefaultDimensions(ConsolidationSource.Code,FABufferChck,FAConsRegister."No.",FATransSetup);
      CheckSameCodeDimensions(ConsolidationSource.Code,FABufferChck,FAConsRegister."No.",FATransSetup);
      CheckRestrictedDimensions(ConsolidationSource.Code,FABufferChck,FAConsRegister."No.",FATransSetup);


      //Поиск ошибочных ОС операций
      IF ErrorConsSourceCode <> '' THEN BEGIN
        FALedgEntryError.RESET;
        FALedgEntryError.SETRANGE("Cons. Source Code",FABufferChck."Cons. Source Code");
        FALedgEntryError.SETRANGE("Buffer Entry No.",FABuf."Entry No.");
        FALedgEntryError.SETRANGE("Reklass. Capital %",FALSE);
        FALedgEntryError.SETFILTER("FA No.",'<>%1','');
        IF IsCredit THEN
          FALedgEntryError.SETRANGE("Depreciation Book Code",FATransSetup."Depreciation Book Credit")
        ELSE
          FALedgEntryError.SETRANGE("Depreciation Book Code",FATransSetup."Depreciation Book Debit");
        IF NOT FALedgEntryError.FINDFIRST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00107, FABuf."Entry No.", ErrorBufEntryNo),'EFA17');
        END;
      END;

      //Проверка валюты
      IF (FABufferChck."Debit Currency Code"<>'') AND (FABufferChck."Debit Currency Code" <> GLSetup."Extern. LCY Code") THEN BEGIN
        Currency.RESET;
        Currency.SETRANGE("Source Currency Code",FABufferChck."Debit Currency Code");
        IF NOT Currency.FINDFIRST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,
             STRSUBSTNO(Text00004, Currency.FIELDCAPTION("Source Currency Code"),FABufferChck."Debit Currency Code"),'EFA09');
        END;
      END;

      IF (FABufferChck."Credit Currency Code"<>'') AND (FABufferChck."Credit Currency Code" <> GLSetup."Extern. LCY Code") THEN BEGIN
        Currency.RESET;
        Currency.SETRANGE("Source Currency Code",FABufferChck."Credit Currency Code");
        IF NOT Currency.FINDFIRST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABufferChck,
             STRSUBSTNO(Text00004, Currency.FIELDCAPTION("Source Currency Code"),FABufferChck."Credit Currency Code"),'EFA09');
        END;
      END;


      //Проверка суммы
      CASE FABufferChck."FA Operation Type" OF
         FABufferChck."FA Operation Type"::Release:BEGIN
         IF FaJnlAmount = 0 THEN
           IF (FaJnlAmount = 0) AND (FABufferChck."Amount (LCY)" < 0) THEN BEGIN
             IsError := TRUE;
             CreateErrorLogEntry2(FABufferChck,Text00117,'EFA18');
           END ELSE
             IF FABufferChck."Source Operation No."=0 THEN
             BEGIN
               IsError := TRUE;
               IF IsCredit THEN
                 CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00118,Text00138,FATransSetup."Depreciation Book Credit"),'EFA11')
               ELSE
                 CreateErrorLogEntry2(FABufferChck,STRSUBSTNO(Text00118,Text00139,FATransSetup."Depreciation Book Debit"),'EFA11');
             END;
         END;
      END;
      //NC MFA11 < DP
    END;

    PROCEDURE CheckFADepr@1000000017(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20];FABuffer@1000000003 : Record 50008;VAR IsError@1000000004 : Boolean);
    VAR
      FALedgEntry@1000000002 : Record 5601;
    BEGIN
      //NC MFA011 > DP
      FALedgEntry.RESET;
      FALedgEntry.SETRANGE("FA No.",FANo);
      FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
      FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::Depreciation);
      FALedgEntry.SETFILTER("FA Posting Date",'%1..',FABuffer."Document Date");
      IF FALedgEntry.FINDFIRST THEN BEGIN
        IsError := TRUE;
        CreateErrorLogEntry2(FABuffer,STRSUBSTNO(Text00134, FANo),'EFA13');
      END;
      //NC MFA011 < DP
    END;

    PROCEDURE CheckFADisp@1000000019(FANo@1000000003 : Code[20];DeprBook@1000000002 : Code[20];FABuffer@1000000001 : Record 50008;VAR IsError@1000000000 : Boolean);
    VAR
      FALedgEntry@1000000004 : Record 5601;
      FA@1000000005 : Record 5600;
    BEGIN
      //NC MFA011 > DP
      IF FA.GET(FANo) THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Proceeds on Disposal");
        FALedgEntry.SETFILTER("FA Posting Date",'%1..',FABuffer."Document Date");
        IF FALedgEntry.FINDLAST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry1(FABuffer,FA,STRSUBSTNO(Text00135, FANo, DeprBook),'EFA14');
        END ELSE BEGIN
          FALedgEntry.RESET;
          FALedgEntry.SETRANGE("FA No.",FANo);
          FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
          FALedgEntry.SETRANGE(FALedgEntry."FA Posting Category",FALedgEntry."FA Posting Category"::Disposal);
          //FALedgEntry.SETFILTER("FA Posting Date",'%1..',FABuffer."Document Date");
          IF FALedgEntry.FINDLAST THEN BEGIN
            IsError := TRUE;
            CreateErrorLogEntry1(FABuffer,FA,STRSUBSTNO(Text00135, FANo, DeprBook),'EFA14');
          END;
        END;
      END;
      //NC MFA011 < DP
    END;

    PROCEDURE CheckFADispLast@1000000020(FANo@1000000003 : Code[20];DeprBook@1000000002 : Code[20];FABuffer@1000000001 : Record 50008;VAR IsError@1000000000 : Boolean);
    VAR
      FALedgEntry@1000000004 : Record 5601;
      FA@1000000005 : Record 5600;
    BEGIN
      //NC MFA011 > DP
      IF FA.GET(FANo) THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry.SETFILTER("FA Posting Date",'..%1',FABuffer."Document Date");
        IF NOT FALedgEntry.FINDFIRST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry1(FABuffer,FA,STRSUBSTNO(Text00136, FANo),'EFA15');
        END;
      END ELSE BEGIN
          IsError := TRUE;
          CreateErrorLogEntry1(FABuffer,FA,STRSUBSTNO(Text00136, FANo),'EFA15');
      END;
      //NC MFA011 < DP
    END;

    PROCEDURE CheckDefaultDimensions@1000000027(ConsSourceCode@1000000000 : Code[20];VAR FABufferChck@1000000001 : Record 50008;ConsRegNo@1000000004 : Integer;FATransfSetup@1000000007 : Record 50004);
    VAR
      GLMapp@1000000002 : Record 50002;
      DefDim@1000000003 : Record 352;
      Dim@1000000005 : Record 348;
      GLAcc@1000000006 : Record 15;
      DebitAccountNo@1000000008 : Code[20];
      CreditAccountNo@1000000009 : Code[20];
      Company@1101495000 : Record 2000000006;
    BEGIN
      //NC MFA011 > DP
      IF FABufferChck.Removed THEN BEGIN
        DebitAccountNo := FATransfSetup."Receiver Credit Acc. No";
        CreditAccountNo := FATransfSetup."Receiver Debit Acc. No";
      END ELSE BEGIN
        DebitAccountNo := FATransfSetup."Receiver Debit Acc. No";
        CreditAccountNo := FATransfSetup."Receiver Credit Acc. No";
      END;

      IF DebitAccountNo <> '' THEN BEGIN
        //NC OAM19 > DP
        //Company Type Def. Dimension
        Company.GET(COMPANYNAME);
        DefDim.RESET;
        DefDim.SETRANGE("Table ID", DATABASE::"Legal Entity Type");
        DefDim.SETRANGE("No.", Company."Legal Entity Type");
        IF DefDim.FINDSET THEN
          REPEAT
            TempDebitLedgEntryDim.INIT;
            TempDebitLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
            TempDebitLedgEntryDim."Entry No." := FABufferChck."Entry No.";
            TempDebitLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
            TempDebitLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

            IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
              (DefDim."Dimension Value Code" <> '') THEN BEGIN
              IF NOT TempDebitLedgEntryDim.INSERT(TRUE) THEN
                TempDebitLedgEntryDim.MODIFY(TRUE);
            END ELSE
            IF TempDebitLedgEntryDim.INSERT(TRUE) THEN;
          UNTIL DefDim.NEXT = 0;
        CheckCardDefDim(DebitAccountNo,FABufferChck,TempDebitLedgEntryDim);
        //NC OAM19 < DP

        DefDim.RESET;
        DefDim.SETRANGE("Table ID",15);
        DefDim.SETRANGE("No.",DebitAccountNo);
        DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Code Mandatory");
        IF DefDim.FINDSET THEN
          REPEAT
            TempDebitLedgEntryDim.RESET;
            TempDebitLedgEntryDim.SETRANGE("Table ID",17);
            TempDebitLedgEntryDim.SETRANGE("Entry No.",FABufferChck."Entry No.");
            TempDebitLedgEntryDim.SETRANGE("Dimension Code",DefDim."Dimension Code");
            IF NOT TempDebitLedgEntryDim.FINDFIRST THEN BEGIN
              //IsGlobalError := TRUE;
              ErrMessage := Text018 + FORMAT(DebitAccountNo) + Text019 + FORMAT(DefDim."Dimension Code");
              IF NOT GLAcc.GET(DebitAccountNo) THEN;
              IF NOT Dim.GET(DefDim."Dimension Code") THEN;
                ErrorJournal.AddErrorBuferGLAccFATransform(COMPANYNAME,
                                                      ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                      ConsSourceCode,ConsRegNo,'EFA06',
                                                      ErrMessage,COMPANYNAME,FABufferChck,GLAcc,FATransfSetup,0);
               FABufferChck."Error in Import" := TRUE;
               FABufferChck.MODIFY;
            END;
          UNTIL DefDim.NEXT = 0;
      END;
      IF CreditAccountNo <> '' THEN BEGIN
        //NC OAM19 > DP
        //Company Type Def. Dimension
        Company.GET(COMPANYNAME);
        DefDim.RESET;
        DefDim.SETRANGE("Table ID", DATABASE::"Legal Entity Type");
        DefDim.SETRANGE("No.", Company."Legal Entity Type");
        IF DefDim.FINDSET THEN
          REPEAT
            TempCreditLedgEntryDim.INIT;
            TempCreditLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
            TempCreditLedgEntryDim."Entry No." := FABufferChck."Entry No.";
            TempCreditLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
            TempCreditLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

            IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
              (DefDim."Dimension Value Code" <> '') THEN BEGIN
              IF NOT TempCreditLedgEntryDim.INSERT(TRUE) THEN
                TempCreditLedgEntryDim.MODIFY(TRUE);
            END ELSE
            IF TempCreditLedgEntryDim.INSERT(TRUE) THEN;
          UNTIL DefDim.NEXT = 0;
        CheckCardDefDim(CreditAccountNo,FABufferChck,TempCreditLedgEntryDim);
        //NC OAM19 < DP


        DefDim.RESET;
        DefDim.SETRANGE("Table ID",15);
        DefDim.SETRANGE("No.",CreditAccountNo);
        DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Code Mandatory");
        IF DefDim.FINDSET THEN
          REPEAT
            TempCreditLedgEntryDim.RESET;
            TempCreditLedgEntryDim.SETRANGE("Table ID",17);
            TempCreditLedgEntryDim.SETRANGE("Entry No.",FABufferChck."Entry No.");
            TempCreditLedgEntryDim.SETRANGE("Dimension Code",DefDim."Dimension Code");
            IF NOT TempCreditLedgEntryDim.FINDFIRST THEN BEGIN
              //IsGlobalError := TRUE;
              ErrMessage := Text018 + FORMAT(CreditAccountNo) + Text019 + FORMAT(DefDim."Dimension Code");
              IF NOT GLAcc.GET(CreditAccountNo) THEN;
              IF NOT Dim.GET(DefDim."Dimension Code") THEN;
              ErrorJournal.AddErrorBuferGLAccFATransform(COMPANYNAME,
                                                      ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                      ConsSourceCode,ConsRegNo,'EFA06',
                                                      ErrMessage,COMPANYNAME,FABufferChck,GLAcc,FATransfSetup,0);
               FABufferChck."Error in Import" := TRUE;
               FABufferChck.MODIFY;
            END;
          UNTIL DefDim.NEXT = 0;

      END;
      //NC MFA011 < DP
    END;

    PROCEDURE CheckSameCodeDimensions@1000000028(ConsSourceCode@1000000000 : Code[20];VAR FABufferChck@1000000001 : Record 50008;ConsRegNo@1000000004 : Integer;FATransfSetup@1000000007 : Record 50004);
    VAR
      GLMapp@1000000002 : Record 50002;
      DefDim@1000000003 : Record 352;
      GLAcc@1000000005 : Record 15;
      DimValue@1000000006 : Record 349;
      Dim@1000000008 : Record 348;
      DebitAccountNo@1000000010 : Code[20];
      CreditAccountNo@1000000009 : Code[20];
    BEGIN
      //NC MFA011 > DP
      IF FABufferChck.Removed THEN BEGIN
        DebitAccountNo := FATransfSetup."Receiver Credit Acc. No";
        CreditAccountNo := FATransfSetup."Receiver Debit Acc. No";
      END ELSE BEGIN
        DebitAccountNo := FATransfSetup."Receiver Debit Acc. No";
        CreditAccountNo := FATransfSetup."Receiver Credit Acc. No";
      END;

      IF DebitAccountNo <> '' THEN BEGIN
        DefDim.RESET;
        DefDim.SETRANGE("Table ID",15);
        DefDim.SETRANGE("No.",DebitAccountNo);
        DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Same Code");
        IF DefDim.FINDSET THEN
          REPEAT
            TempDebitLedgEntryDim.RESET;
            TempDebitLedgEntryDim.SETRANGE("Table ID",17);
            TempDebitLedgEntryDim.SETRANGE("Entry No.",FABufferChck."Entry No.");
            TempDebitLedgEntryDim.SETRANGE("Dimension Code",DefDim."Dimension Code");
            IF NOT TempDebitLedgEntryDim.FINDFIRST THEN BEGIN
              //IsGlobalError := TRUE;
              ErrMessage := Text020 + FORMAT(DebitAccountNo) + Text019 + FORMAT(DefDim."Dimension Code");
              IF NOT GLAcc.GET(DebitAccountNo) THEN;
              IF NOT Dim.GET(DefDim."Dimension Code") THEN;
                ErrorJournal.AddErrorBuferGLAccFATransform(COMPANYNAME,
                                                      ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                      ConsSourceCode,ConsRegNo,'EFA06',
                                                      ErrMessage,COMPANYNAME,FABufferChck,GLAcc,FATransfSetup,0);
                 FABufferChck."Error in Import" := TRUE;
                 FABufferChck.MODIFY;
            END;
          UNTIL DefDim.NEXT = 0;
      END;
      IF CreditAccountNo <> '' THEN BEGIN
        DefDim.RESET;
        DefDim.SETRANGE("Table ID",15);
        DefDim.SETRANGE("No.",CreditAccountNo);
        DefDim.SETRANGE("Value Posting",DefDim."Value Posting"::"Same Code");
        IF DefDim.FINDSET THEN
          REPEAT
            TempCreditLedgEntryDim.RESET;
            TempCreditLedgEntryDim.SETRANGE("Table ID",17);
            TempCreditLedgEntryDim.SETRANGE("Entry No.",FABufferChck."Entry No.");
            TempCreditLedgEntryDim.SETRANGE("Dimension Code",DefDim."Dimension Code");
            IF NOT TempCreditLedgEntryDim.FINDFIRST THEN BEGIN
              //IsGlobalError := TRUE;
              ErrMessage := Text020 + FORMAT(CreditAccountNo) + Text019 + FORMAT(DefDim."Dimension Code");
              IF NOT GLAcc.GET(CreditAccountNo) THEN;
              IF NOT Dim.GET(DefDim."Dimension Code") THEN;
              ErrorJournal.AddErrorBuferGLAccFATransform(COMPANYNAME,
                                                      ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                      ConsSourceCode,ConsRegNo,'EFA06',
                                                      ErrMessage,COMPANYNAME,FABufferChck,GLAcc,FATransfSetup,0);
              FABufferChck."Error in Import" := TRUE;
              FABufferChck.MODIFY;
            END;
          UNTIL DefDim.NEXT = 0;
      END;
      //NC MFA011 < DP
    END;

    PROCEDURE CheckRestrictedDimensions@1000000029(ConsSourceCode@1000000000 : Code[20];VAR FABufferChck@1000000001 : Record 50008;ConsRegNo@1000000004 : Integer;FATransfSetup@1000000007 : Record 50004);
    VAR
      GLMapp@1000000002 : Record 50002;
      DefDim@1000000003 : Record 352;
      AccDim@1000000005 : Record 50030;
      GLAcc@1000000006 : Record 15;
      DebitAccountNo@1000000009 : Code[20];
      CreditAccountNo@1000000008 : Code[20];
    BEGIN
      //NC MFA011 > DP
      GLSetup.GET;
      IF NOT GLSetup."Check Account Dimension" THEN
        EXIT;
      IF FABufferChck.Removed THEN BEGIN
        DebitAccountNo := FATransfSetup."Receiver Credit Acc. No";
        CreditAccountNo := FATransfSetup."Receiver Debit Acc. No";
      END ELSE BEGIN
        DebitAccountNo := FATransfSetup."Receiver Debit Acc. No";
        CreditAccountNo := FATransfSetup."Receiver Credit Acc. No";
      END;

      IF DebitAccountNo <> '' THEN BEGIN
        TempDebitLedgEntryDim.RESET;
        TempDebitLedgEntryDim.SETRANGE("Table ID",17);
        TempDebitLedgEntryDim.SETRANGE("Entry No.",FABufferChck."Entry No.");
        IF TempDebitLedgEntryDim.FINDSET THEN
          REPEAT
            AccDim.RESET;
            AccDim.SETRANGE("Account No.", DebitAccountNo);
            AccDim.SETRANGE("Dimension Code", TempDebitLedgEntryDim."Dimension Code");
            IF AccDim.FINDFIRST THEN
              IF NOT AccDim.GET(DebitAccountNo,
                                TempDebitLedgEntryDim."Dimension Code",
                                TempDebitLedgEntryDim."Dimension Value Code")
              THEN BEGIN
                //IsGlobalError := TRUE;
                ErrMessage := Text010 + FORMAT(DebitAccountNo) + Text028 +
                    FORMAT(TempDebitLedgEntryDim."Dimension Code") +
                    Text026 + FORMAT(TempDebitLedgEntryDim."Dimension Value Code") + Text029;
                IF NOT GLAcc.GET(DebitAccountNo) THEN;
                ErrorJournal.AddErrorBuferGLAccFATransform(COMPANYNAME,
                                                   ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSourceCode,ConsRegNo,'EFA07',
                                                   ErrMessage,COMPANYNAME,FABufferChck,GLAcc,FATransfSetup,0);
                 FABufferChck."Error in Import" := TRUE;
                 FABufferChck.MODIFY;
               END;
            UNTIL TempDebitLedgEntryDim.NEXT = 0;
        END;
      IF CreditAccountNo <> '' THEN BEGIN
        TempCreditLedgEntryDim.RESET;
        TempCreditLedgEntryDim.SETRANGE("Table ID",17);
        TempCreditLedgEntryDim.SETRANGE("Entry No.",FABufferChck."Entry No.");
        IF TempCreditLedgEntryDim.FINDSET THEN
          REPEAT
            AccDim.RESET;
            AccDim.SETRANGE("Account No.", CreditAccountNo);
            AccDim.SETRANGE("Dimension Code", TempCreditLedgEntryDim."Dimension Code");
            IF AccDim.FINDFIRST THEN
              IF NOT AccDim.GET(CreditAccountNo,
                                  TempCreditLedgEntryDim."Dimension Code",
                                  TempCreditLedgEntryDim."Dimension Value Code")
              THEN BEGIN
                //IsGlobalError := TRUE;
                ErrMessage := Text010 + FORMAT(CreditAccountNo) + Text028 +
                  FORMAT(TempCreditLedgEntryDim."Dimension Code") +
                  Text026 + FORMAT(TempCreditLedgEntryDim."Dimension Value Code") + Text029;
                IF NOT GLAcc.GET(CreditAccountNo) THEN;
                ErrorJournal.AddErrorBuferGLAccFATransform(COMPANYNAME,
                                                   ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                                   ConsSourceCode,ConsRegNo,'EFA07',
                                                  ErrMessage,COMPANYNAME,FABufferChck,GLAcc,FATransfSetup,0);
                 FABufferChck."Error in Import" := TRUE;
                 FABufferChck.MODIFY;
              END;
          UNTIL TempCreditLedgEntryDim.NEXT = 0;
      END;
      //NC MFA011 > DP
    END;

    PROCEDURE CreateDimBuffer@1000000021(VAR LedgerEntryDimTMP@1000000000 : Record 360;TableNo@1000000001 : Integer;EntryNo@1000000002 : Integer;DimensCode@1000000003 : Code[20];DimValue@1000000004 : Code[20]);
    VAR
      LinkedDim@1000000005 : Record 50016;
      DimValueOld@1000000006 : Code[20];
    BEGIN
      //NC MFA011 > DP
      IF DimValue = '' THEN
        EXIT;

      //NC MFA35 > DP
      DimValueOld :='';
      IF LedgerEntryDimTMP.GET(TableNo,EntryNo,DimensCode) THEN
        DimValueOld := LedgerEntryDimTMP."Dimension Value Code";
      //NC MFA35 > DP

      LedgerEntryDimTMP.INIT;
      LedgerEntryDimTMP."Table ID" := TableNo;
      LedgerEntryDimTMP."Entry No." := EntryNo;
      LedgerEntryDimTMP."Dimension Code" := DimensCode;
      LedgerEntryDimTMP."Dimension Value Code" := DimValue;
      IF NOT LedgerEntryDimTMP.INSERT THEN BEGIN

        //NC MFA35 > DP
        IF DimValueOld='' THEN
          LedgerEntryDimTMP.MODIFY;
        //NC MFA35 < DP

      END ELSE BEGIN
        LinkedDim.RESET;
        LinkedDim.SETRANGE("Dimension Code",DimensCode);
        LinkedDim.SETRANGE("Dimension Value",DimValue);
        IF LinkedDim.FINDSET THEN
          REPEAT
            LedgerEntryDimTMP.INIT;
            LedgerEntryDimTMP."Table ID" := TableNo;
            LedgerEntryDimTMP."Entry No." := EntryNo;
            LedgerEntryDimTMP."Dimension Code" := LinkedDim."Linked Dimension Code";
            LedgerEntryDimTMP."Dimension Value Code" := LinkedDim."Linked Dimension Value";
            IF NOT LedgerEntryDimTMP.INSERT THEN
              LedgerEntryDimTMP.MODIFY;
          UNTIL LinkedDim.NEXT = 0;
      END;
      //NC MFA011 < DP
    END;

    PROCEDURE CheckDimMapp@1000000032(VAR GLBuffer@1210001 : Record 50008;VAR LedgDimensionTmp1@1000000010 : TEMPORARY Record 360;ConsolidationSource@1000000009 : Record 50001;ConsSession@1210000 : Integer;OperationType@1000000000 : 'Debit,Credit';MappingCode@1000000005 : Code[20]) IsErr : Boolean;
    VAR
      ConvDimensions@1000000008 : Record 50003;
      DimensionCode@1000000014 : Code[20];
      DimVal@1000000013 : Code[20];
      tmp@1210002 : Integer;
      lDim1Exist@1210007 : Boolean;
      lDim2Exist@1210006 : Boolean;
      lDim3Exist@1210005 : Boolean;
      ConsDimCode@1210004 : Code[20];
      DimensionValue@1101495000 : Record 349;
      Dimension@1000000001 : Record 348;
      DimMappingSel@1000000003 : Record 50031;
      NeedMapping@1000000004 : Boolean;
      LedgDimensionTmp@1101495001 : TEMPORARY Record 360;
    BEGIN
      //NC MFA011 > DP

      //NC MDTM02.3 > DP
      MovingDataSetup.GET;
      //NC MDTM02.3 < DP

      IsErr := FALSE;
      LedgDimensionTmp.COPY(LedgDimensionTmp1);
      LedgDimensionTmp1.RESET;
      LedgDimensionTmp1.SETRANGE("Table ID", DATABASE::"G/L Entry");
      LedgDimensionTmp1.SETRANGE("Entry No.", GLBuffer."Entry No.");
      IF LedgDimensionTmp1.FINDSET THEN
        REPEAT
          DimensionCode := LedgDimensionTmp1."Dimension Code";
          DimVal := LedgDimensionTmp1."Dimension Value Code";

      //NC MDTM02.3 > DP
        IF ConsolidationSource."Catalog FA CostCenter" AND
              (DimensionCode=MovingDataSetup."PROFIT CENTER Dimension Code") THEN
          NeedMapping := FALSE
        ELSE
      //NC MDTM02.3 < DP

      //NC MDTM02.2 > PCH
      NeedMapping := DimMappingSel.GET(MappingCode,DimensionCode);
      //IF Dimension.GET(DimensionCode) AND Dimension."Need Mapping" THEN BEGIN
      IF Dimension.GET(DimensionCode) AND NeedMapping THEN BEGIN
      //NC MDTM02.2 < PCH
      IF ConsSetup."Mapping Dimension Type"=ConsSetup."Mapping Dimension Type"::"Combination-To-One" THEN BEGIN
        ConsDimCode :='';


        LedgDimensionTmp.RESET;
        LedgDimensionTmp.SETRANGE("Table ID", DATABASE::"G/L Entry");
        LedgDimensionTmp.SETRANGE("Entry No.", GLBuffer."Entry No.");

        ConvDimensions.RESET;
        ConvDimensions.ASCENDING(FALSE);
        ConvDimensions.SETRANGE("Mapping Code",MappingCode);
        ConvDimensions.SETRANGE("Source Dimension Code",DimensionCode);
        ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
        IF ConvDimensions.FINDSET THEN
          REPEAT
            //проверяем, есть ли строка, соответствующая исключению, в измерениях в данной операции

            IF ConsDimCode='' THEN BEGIN
              //Проверка на соответствие до 3-х измерений
              lDim1Exist := TRUE;
              lDim2Exist := TRUE;
              lDim3Exist := TRUE;

              WITH LedgDimensionTmp DO BEGIN
                IF ConvDimensions."Source Dimension Code" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code");
                  lDim1Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 2" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 2");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 2");
                  lDim2Exist := NOT ISEMPTY;
                END;

                IF ConvDimensions."Source Dimension Code 3" <> '' THEN BEGIN
                  SETRANGE("Dimension Code", ConvDimensions."Source Dimension Code 3");
                  SETRANGE("Dimension Value Code", ConvDimensions."Source Dimension Value Code 3");
                  lDim3Exist := NOT ISEMPTY;
                END;
              END;
             IF (lDim1Exist AND lDim2Exist AND lDim3Exist) THEN
               ConsDimCode := ConvDimensions."Receiver Dimension Code";
            END;
          UNTIL (ConvDimensions.NEXT = 0) OR (ConsDimCode <> '');
          IF ConsDimCode='' THEN BEGIN
            ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimCode) + Text014;
            IsErr := TRUE;
            //IsGlobalError := TRUE;
            IF NOT DimensionValue.GET(DimensionCode,DimVal) THEN;
            ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EFA08',
                                       ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,0);
            GLBuffer."Error in Import" := TRUE;
            GLBuffer.MODIFY;

         END ELSE
          IF OperationType = OperationType::Debit THEN BEGIN
            TempDebitLedgEntryDim.GET(17,LedgDimensionTmp1."Entry No.",LedgDimensionTmp1."Dimension Code");
            TempDebitLedgEntryDim.DELETE;
            TempDebitLedgEntryDim.INIT;
            TempDebitLedgEntryDim."Table ID" := 17;
            TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
            TempDebitLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
            TempDebitLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
            IF NOT TempDebitLedgEntryDim.INSERT THEN
              TempDebitLedgEntryDim.MODIFY;
          END ELSE BEGIN
            TempCreditLedgEntryDim.GET(17,LedgDimensionTmp1."Entry No.",LedgDimensionTmp1."Dimension Code");
            TempCreditLedgEntryDim.DELETE;
            TempCreditLedgEntryDim.INIT;
            TempCreditLedgEntryDim."Table ID" := 17;
            TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
            TempCreditLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
            TempCreditLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
            IF NOT TempCreditLedgEntryDim.INSERT THEN
              TempCreditLedgEntryDim.MODIFY;
          END;
      END ELSE BEGIN

        ConvDimensions.SETCURRENTKEY("Company Name","Source Dimension Code","Source Dimension Value Code");
        ConvDimensions.SETRANGE("Mapping Code",MappingCode);
        ConvDimensions.SETRANGE("Company Name",COMPANYNAME);
        ConvDimensions.SETRANGE("Source Dimension Code",DimensionCode);
        ConvDimensions.SETRANGE("Source Dimension Value Code",DimVal);
        IF NOT ConvDimensions.FINDFIRST THEN BEGIN
          ConvDimensions.SETRANGE("Company Name",'');
          IF NOT ConvDimensions.FINDFIRST THEN BEGIN
            IF OperationType = OperationType::Debit THEN
              ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimensionCode) + Text00140 + Text014
            ELSE
              ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimensionCode) + Text00141 + Text014;
            IsErr := TRUE;
            //IsGlobalError := TRUE;
            IF NOT DimensionValue.GET(DimCode,DimVal) THEN;
            ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EFA08',
                                       ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,0);
            GLBuffer."Error in Import" := TRUE;
            GLBuffer.MODIFY;

          END ELSE BEGIN
            IF (ConvDimensions."Receiver Dimension Code" = '') OR (ConvDimensions."Receiver Dimension Value Code" = '') THEN BEGIN
              IF OperationType = OperationType::Debit THEN
                ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimensionCode) + Text00140 + Text014
              ELSE
                ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimensionCode) + Text00141 + Text014;
              IsErr := TRUE;
              //IsGlobalError := TRUE;
              IF NOT DimensionValue.GET(DimensionCode,DimVal) THEN;
              ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                         ConsolidationSource.Code,ConsSession,'EFA08',
                                         ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,0);
              GLBuffer."Error in Import" := TRUE;
              GLBuffer.MODIFY;

            END ELSE BEGIN
              IF OperationType = OperationType::Debit THEN BEGIN
                TempDebitLedgEntryDim.GET(17,LedgDimensionTmp1."Entry No.",LedgDimensionTmp1."Dimension Code");
                TempDebitLedgEntryDim.DELETE;
                TempDebitLedgEntryDim.INIT;
                TempDebitLedgEntryDim."Table ID" := 17;
                TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                TempDebitLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
                TempDebitLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
                IF NOT TempDebitLedgEntryDim.INSERT THEN
                  TempDebitLedgEntryDim.MODIFY;
              END ELSE BEGIN
                TempCreditLedgEntryDim.GET(17,LedgDimensionTmp1."Entry No.",LedgDimensionTmp1."Dimension Code");
                TempCreditLedgEntryDim.DELETE;
                TempCreditLedgEntryDim.INIT;
                TempCreditLedgEntryDim."Table ID" := 17;
                TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
                TempCreditLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
                TempCreditLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
                IF NOT TempCreditLedgEntryDim.INSERT THEN
                  TempCreditLedgEntryDim.MODIFY;
              END;
            END;
          END;
        END ELSE BEGIN
          IF (ConvDimensions."Receiver Dimension Code" = '') OR (ConvDimensions."Receiver Dimension Value Code" = '') THEN BEGIN
            IF OperationType = OperationType::Debit THEN
              ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimensionCode) + Text00140 + Text014
            ELSE
              ErrMessage := Text012 + FORMAT(DimVal) + Text013 + FORMAT(DimensionCode) + Text00141 + Text014;
            IsErr := TRUE;
            //IsGlobalError := TRUE;
            IF NOT DimensionValue.GET(DimensionCode,DimVal) THEN;
            ErrorJournal.AddErrorBuferDimValue(COMPANYNAME,ErrorJournal."Error Group"::Transformation,ErrorJournal.Type::Error,
                                       ConsolidationSource.Code,ConsSession,'EFA08',
                                       ErrMessage,COMPANYNAME,GLBuffer,DimensionValue,0);
            GLBuffer."Error in Import" := TRUE;
            GLBuffer.MODIFY;
          END ELSE BEGIN
            IF OperationType = OperationType::Debit THEN BEGIN
              TempDebitLedgEntryDim.GET(17,LedgDimensionTmp1."Entry No.",LedgDimensionTmp1."Dimension Code");
              TempDebitLedgEntryDim.DELETE;
              TempDebitLedgEntryDim.INIT;
              TempDebitLedgEntryDim."Table ID" := 17;
              TempDebitLedgEntryDim."Entry No." := GLBuffer."Entry No.";
              TempDebitLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
              TempDebitLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
              IF NOT TempDebitLedgEntryDim.INSERT THEN
                TempDebitLedgEntryDim.MODIFY;
            END ELSE BEGIN
              TempCreditLedgEntryDim.GET(17,LedgDimensionTmp1."Entry No.",LedgDimensionTmp1."Dimension Code");
              TempCreditLedgEntryDim.DELETE;
              TempCreditLedgEntryDim.INIT;
              TempCreditLedgEntryDim."Table ID" := 17;
              TempCreditLedgEntryDim."Entry No." := GLBuffer."Entry No.";
              TempCreditLedgEntryDim."Dimension Code" := ConvDimensions."Receiver Dimension Code";
              TempCreditLedgEntryDim."Dimension Value Code" := ConvDimensions."Receiver Dimension Value Code";
              IF NOT TempCreditLedgEntryDim.INSERT THEN
                TempCreditLedgEntryDim.MODIFY;
            END;
          END;
         END;
      END;
      END;
      //NC MFA011 < DP
      UNTIL LedgDimensionTmp1.NEXT=0;
    END;

    PROCEDURE CheckFAAcqCostValue@1000000024(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20];FABuffer@1000000003 : Record 50008;VAR IsError@1000000004 : Boolean);
    VAR
      FALedgEntry@1000000002 : Record 5601;
      FA@1000000005 : Record 5600;
    BEGIN
      //NC MFA011 > DP
      IF FA.GET(FANo) THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type",
          "FA Posting Date","Depr. Bonus");
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Acquisition Cost");
        FALedgEntry.SETFILTER("FA Posting Date",'..%1',FABuffer."Document Date");
        FALedgEntry.CALCSUMS(Amount);
        IF FALedgEntry.Amount=0 THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry1(FABuffer,FA,STRSUBSTNO(Text00137, FANo,DeprBook),'EFA10');
        END;
      END;
      //NC MFA011 < DP
    END;

    PROCEDURE CheckFAGlobalDisp@1000000023(FANo@1000000003 : Code[20];DeprBook@1000000002 : Code[20];FABuffer@1000000001 : Record 50008;VAR IsError@1000000000 : Boolean);
    VAR
      FALedgEntry@1000000004 : Record 5601;
      FA@1000000005 : Record 5600;
    BEGIN
      //NC MFA011 > DP
      IF FA.GET(FANo) THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE(FALedgEntry."FA Posting Category",FALedgEntry."FA Posting Category"::Disposal);
        IF FALedgEntry.FINDLAST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry1(FABuffer,FA,STRSUBSTNO(Text00135, FANo),'EFA14');
        END;
      END;
      //NC MFA011 < DP
    END;

    PROCEDURE CreateConsRegister@1210062(ConsSource@1000000004 : Code[20];FromEntryNo@1000000002 : Integer;ToEntryNo@1000000003 : Integer;PostDate@1210001 : Date;FromDate@1000000000 : Date;ToDate@1000000001 : Date;VAR FAConsReg@1210003 : Record 50006);
    VAR
      ConsolSource1@1000000008 : Record 50001;
      ConsolidationSetup@1210000 : Record 50000;
    BEGIN
      //NC MFA12 > DP
      IF FromEntryNo > ToEntryNo THEN
        FromEntryNo := ToEntryNo;
      FAConsReg.INIT;
      FAConsReg."No." := GetNextRegisterNo(ConsSource);
      FAConsReg."Cons. Source Code" := ConsSource;
      FAConsReg."Consolidation Date" := TODAY;
      FAConsReg."Consolidation Time" := TIME;
      FAConsReg."User ID" := USERID;
      FAConsReg."From Entry No." := FromEntryNo;
      FAConsReg."To Entry No." := ToEntryNo;
      FAConsReg."From Posting Date" := FromDate;
      FAConsReg."To Posting Date" := ToDate;
      ConsolidationSetup.GET;
      ConsolSource1.GET(ConsSource);
      FAConsReg."Gen. Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
      FAConsReg."Gen. Journal Batch" := ConsolSource1."Acquisition Gen. Batch Name";
      FAConsReg."Closed Period Journal Template" := ConsolidationSetup."Gen. Jnl. Template";
      FAConsReg."Closed Period Journal Batch" := ConsolSource1."Closed Period Batch Name";
      FAConsReg.INSERT(TRUE);
      //NC MFA12 < DP
    END;

    PROCEDURE UpdateConsRegister@1000000025(ToEntryNo@1000000005 : Integer;PostDate@1000000004 : Date;FromDate@1000000003 : Date;ToDate@1000000002 : Date;VAR FAConsReg@1000000001 : Record 50006);
    BEGIN
      //NC MFA12 > DP
      IF ToEntryNo > FAConsReg."To Entry No." THEN
        FAConsReg."To Entry No." := ToEntryNo;
      IF FromDate < FAConsReg."From Posting Date" THEN BEGIN
        FAConsReg."From Posting Date" := FromDate;
      END;
      IF ToDate > FAConsReg."To Posting Date" THEN BEGIN
        FAConsReg."To Posting Date" := ToDate;
      END;
      FAConsReg."Consolidation Date" := TODAY;
      FAConsReg."Consolidation Time" := TIME;
      //NC MFA12 > DP
    END;

    PROCEDURE GetNextRegisterNo@1210061(ConsSource@1210000 : Code[20]) : Integer;
    VAR
      FAConsReg1@1000000002 : Record 50006;
    BEGIN
      //NC MFA12 > DP
      FAConsReg1.RESET;
      FAConsReg1.SETRANGE("Cons. Source Code", ConsSource);
      IF FAConsReg1.FINDLAST THEN
        EXIT(FAConsReg1."No." + 1)
      ELSE
        EXIT(1);
      //NC MFA12 < DP
    END;

    PROCEDURE GetAccountNoByMask@1000000001(ExtAccountNo@1000000000 : Code[20];MappingCode@1000000004 : Code[20];UseMask@1000000005 : Boolean;NoOfSymbInMask@1000000003 : Integer) : Code[20];
    VAR
      Mapping@1000000001 : Record 50022;
      AccNo@1000000002 : Code[20];
    BEGIN
      //NC MFA17 > DP
      IF NOT UseMask THEN
        EXIT(ExtAccountNo);
      AccNo := ExtAccountNo;
      //NC MDTM02.1 > MP
      {
      IF Mapping.GET(ConsolidationSource."Mapping Code") AND (Mapping."FA Mapping Mask"<>'') THEN BEGIN
        AccNo := ConsolidationMgt.GetAccountFromMask(Mapping."FA Mapping Mask",ExtAccountNo);
      END;
      }
      AccNo := ConsolidationMgt.FindAccountFromMask(ExtAccountNo,MappingCode,NoOfSymbInMask,1);
      //NC MDTM02.1 < MP
      EXIT(AccNo);
      //NC MFA17 < DP
    END;

    PROCEDURE CheckFANextEntry@1000000031(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20];FABuffer@1000000003 : Record 50008;FABuff@1000000006 : Record 50008;VAR IsError@1000000004 : Boolean);
    VAR
      FALedgEntry@1000000002 : Record 5601;
      FALedgEntry1@1000000005 : Record 5601;
    BEGIN
      //NC MFA16 > DP
      FALedgEntry.RESET;
      FALedgEntry.SETRANGE("FA No.",FANo);
      FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
      FALedgEntry.SETRANGE("Cons. Source Code",FABuff."Cons. Source Code");
      FALedgEntry.SETRANGE("Buffer Entry No.",FABuff."Entry No.");
      IF FALedgEntry.FINDFIRST THEN BEGIN
        FALedgEntry1.RESET;
        FALedgEntry1.SETRANGE("FA No.",FANo);
        FALedgEntry1.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry1.SETFILTER("Entry No.",'>%1',FALedgEntry."Entry No.");
        FALedgEntry1.SETFILTER("FA Posting Date",'>%1',FALedgEntry."Posting Date");
        IF FALedgEntry1.FINDFIRST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABuffer,STRSUBSTNO(Text00142, FANo, FORMAT(FABuffer."FA Operation Type")),'EFA26');
        END;
      END ELSE BEGIN
        FALedgEntry1.RESET;
        FALedgEntry1.SETRANGE("FA No.",FANo);
        FALedgEntry1.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry1.SETFILTER("FA Posting Date",'>%1',FABuffer."Document Date");
        IF FALedgEntry1.FINDFIRST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABuffer,STRSUBSTNO(Text00142, FANo, FORMAT(FABuffer."FA Operation Type")),'EFA26');
        END;
      END;
      //NC MFA16 < DP
    END;

    PROCEDURE CheckFAFirstEntry@1000000033(FANo@1000000000 : Code[20];DeprBook@1000000001 : Code[20];FABuffer@1000000003 : Record 50008;VAR IsError@1000000004 : Boolean);
    VAR
      FALedgEntry@1000000002 : Record 5601;
    BEGIN
      //NC MFA016 > DP
      IF FANo<>'' THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETRANGE("FA No.",FANo);
        FALedgEntry.SETRANGE("Depreciation Book Code",DeprBook);
        FALedgEntry.SETFILTER("FA Posting Date",'..%1',FABuffer."Document Date");
        IF NOT FALedgEntry.FINDFIRST THEN BEGIN
          IsError := TRUE;
          CreateErrorLogEntry2(FABuffer,STRSUBSTNO(Text00143, FANo, FORMAT(FABuffer."FA Operation Type")),'EFA27');
        END;
      END ELSE BEGIN
        IsError := TRUE;
        CreateErrorLogEntry2(FABuffer,STRSUBSTNO(Text00143, FANo, FORMAT(FABuffer."FA Operation Type")),'EFA27');
      END;
      //NC MFA016 < DP
    END;

    PROCEDURE SetConsSource@1000000034(ConsSourceCode@1000000000 : Code[20]);
    BEGIN
      //NC MFA017 > DP
      IF ConsolidationSource.GET(ConsSourceCode) THEN;
      //NC MFA017 < DP
    END;

    PROCEDURE GetGenJnlLineNo@1000000035(GenJnlTemplate1@1000000000 : Code[20];GenJnlBatch1@1000000001 : Code[20]) : Integer;
    VAR
      GenJnlLine1@1000000003 : Record 81;
      LineNo1@1000000004 : Integer;
    BEGIN
      //NC MFA33 > DP
      LineNo1 :=0;
      GenJnlLine1.RESET;
      GenJnlLine1.SETRANGE("Journal Template Name", GenJnlTemplate1);
      GenJnlLine1.SETRANGE("Journal Batch Name", GenJnlBatch1);
      IF GenJnlLine1.FINDLAST THEN
        LineNo1 :=GenJnlLine1."Line No.";

      EXIT(LineNo1);
      //NC MFA33 < DP
    END;

    PROCEDURE SetAccountTypeAccountNo2@1000000046(VAR GenJournalLine@1000000004 : Record 81;Buffer@1000000000 : Record 50008;VAR LedgEntryDim@1000000008 : Record 360;GLAccountCode@1000000001 : Code[20]) : Boolean;
    VAR
      ConsDataBuffer@1000000002 : Record 50008;
      GLAccount@1000000009 : Record 15;
      IsSpecialAccountType@1000000010 : Boolean;
      VendorPostingGroup@1000000003 : Record 93;
      CustomerPostingGroup@1000000005 : Record 92;
    BEGIN
      //NC MTD02 > AIG
      ConsSetup.GET;
      IsSpecialAccountType := FALSE;
      IF GLAccount.GET(GLAccountCode) THEN
        IF NOT GLAccount."Direct Posting" THEN
          IF GLAccount."Ext. Source Type" <> GLAccount."Ext. Source Type"::"G/L Account" THEN BEGIN
            IsSpecialAccountType := TRUE;
            // определяем сущность из настроек плана счетов
            GenJournalLine.VALIDATE("Account Type", GLAccount."Ext. Source Type");
            GenJournalLine."Account No." := SetAccountNo2(Buffer,GLAccount."Ext. Source Type",LedgEntryDim);
            GenJournalLine."Posting Group" := GLAccount."Source Posting Group";
            IF IsInterest(Buffer,GLAccount."Ext. Source Type",LedgEntryDim) THEN BEGIN
              IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN BEGIN
                IF CustomerPostingGroup.GET(GenJournalLine."Posting Group") THEN
                  IF CustomerPostingGroup."Loan Princ/Int. Posting Group" <>  '' THEN
                    GenJournalLine."Posting Group" := CustomerPostingGroup."Loan Princ/Int. Posting Group";
              END;
              IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN BEGIN
                IF VendorPostingGroup.GET(GenJournalLine."Posting Group") THEN
                  IF VendorPostingGroup."Loan Princ/Int. Posting Group" <>  '' THEN
                    GenJournalLine."Posting Group" := VendorPostingGroup."Loan Princ/Int. Posting Group";
              END;
            END;
          END;
      EXIT(IsSpecialAccountType);
      //NC MTD02 < AIG
    END;

    PROCEDURE SetAccountNo2@1000000051(Buffer@1000000003 : Record 50008;AccountType@1000000001 : 'G/L Account,Customer,Vendor,Bank Account';VAR LedgEntryDim@1000000000 : Record 360) : Code[20];
    VAR
      Customer@1000000004 : Record 18;
      Vendor@1000000005 : Record 23;
      BankAccount@1000000006 : Record 270;
      DefaultDimension@1000000007 : Record 352;
      DefaultDimension1@1000000008 : Record 352;
      DimensionValue@1000000010 : Record 349;
      AccNo@1000000011 : Code[20];
      EntryNo@1000000012 : Integer;
    BEGIN
      //NC MTD02.2 > DP
      CASE AccountType OF
        AccountType::Customer:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",Buffer."Entry No.",ConsSetup."Counterparty Dim Code") THEN BEGIN
            EXIT(LedgEntryDim."Dimension Value Code");
          END;
        AccountType::Vendor:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",Buffer."Entry No.",ConsSetup."Counterparty Dim Code") THEN BEGIN
            CreateVendorCard(ConsSetup."Counterparty Dim Code", LedgEntryDim."Dimension Value Code");
            EXIT(LedgEntryDim."Dimension Value Code");
          END;
        AccountType::"Bank Account":
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",Buffer."Entry No.",ConsSetup."Bank Account Dimension Code") THEN
          BEGIN
            EXIT(LedgEntryDim."Dimension Value Code");
          END;
      END;
      //NC MTD02.2 < DP
    END;

    PROCEDURE CreateVendorCard@1000000050(DimCode@1000000004 : Code[20];CustomerNo@1000000002 : Code[20]);
    VAR
      Customer@1000000000 : Record 18;
      Vendor@1000000001 : Record 23;
      DefaultDimension@1000000003 : Record 352;
    BEGIN
      //NC MTD02.2 > DP
      Customer.GET(CustomerNo);
      IF NOT Vendor.GET(CustomerNo) THEN BEGIN
        Vendor.INIT;
        Vendor."No." := CustomerNo;
        Vendor.Name := Customer.Name;
        Vendor."Search Name" := Customer."Search Name";
        Vendor."Name 2" := Customer."Name 2";
        Vendor.Address := Customer.Address;
        Vendor."Address 2" := Customer."Address 2";
        Vendor.City := Customer.City;
        Vendor."Phone No." := Customer."Phone No.";
        Vendor."Telex No." := Customer."Telex No.";
        Vendor."Currency Code" := Customer."Currency Code";
        Vendor."Agreement Posting" := Customer."Agreement Posting";
        Vendor.INSERT(TRUE);
      END;
      //NC MTD02.2 < DP
    END;

    PROCEDURE IsInterest@1101495008(Buffer@1000000003 : Record 50008;AccountType@1000000001 : 'G/L Account,Customer,Vendor,Bank Account';VAR LedgEntryDim@1000000000 : Record 360) : Boolean;
    VAR
      Customer@1000000004 : Record 18;
      Vendor@1000000005 : Record 23;
      BankAccount@1000000006 : Record 270;
      ConsSetup@1000000002 : Record 50000;
      DefaultDimension@1000000007 : Record 352;
      DefaultDimension1@1000000008 : Record 352;
      DimensionValue@1000000010 : Record 349;
      AccNo@1000000011 : Code[20];
      EntryNo@1000000012 : Integer;
      IsInterest@1101495000 : Boolean;
    BEGIN
      //NC MTD02.2 > DP
      MovingDataSetup.GET;
      CASE AccountType OF
        AccountType::Customer:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",Buffer."Entry No.",
            MovingDataSetup."Body/Percentage Dimension Code") THEN BEGIN
            EXIT((MovingDataSetup."Percentage Dimencion Value"=LedgEntryDim."Dimension Value Code"));
          END;
        AccountType::Vendor:
          IF LedgEntryDim.GET(DATABASE::"G/L Entry",Buffer."Entry No.",
            MovingDataSetup."Body/Percentage Dimension Code") THEN BEGIN
              EXIT((MovingDataSetup."Percentage Dimencion Value"=LedgEntryDim."Dimension Value Code"));
          END;
      END;
      EXIT(FALSE);
      //NC MTD02.2 < DP
    END;

    PROCEDURE CheckCardDefDim@1101495001(GLAccountCode@1101495003 : Code[20];Buffer@1101495004 : Record 50008;VAR TempLedgEntryDim@1101495005 : Record 360);
    VAR
      AccNo@1101495000 : Code[20];
      DefDim@1101495001 : Record 352;
      GLAccount@1101495002 : Record 15;
    BEGIN
      IF GLAccount.GET(GLAccountCode) THEN BEGIN
       CASE GLAccount."Ext. Source Type" OF
        GLAccount."Ext. Source Type"::Customer:
          IF TempLedgEntryDim.GET(DATABASE::"G/L Entry",Buffer."Entry No.",
                                             ConsSetup."Counterparty Dim Code") THEN BEGIN
            AccNo := TempLedgEntryDim."Dimension Value Code";
            DefDim.RESET;
            DefDim.SETRANGE("Table ID", DATABASE::Customer);
            DefDim.SETRANGE("No.", AccNo);
            IF DefDim.FINDSET THEN
              REPEAT
                TempLedgEntryDim.INIT;
                TempLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                TempLedgEntryDim."Entry No." := Buffer."Entry No.";
                TempLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                TempLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";
                IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                  (DefDim."Dimension Value Code" <> '') THEN BEGIN
                  IF NOT TempLedgEntryDim.INSERT(TRUE) THEN
                    TempLedgEntryDim.MODIFY(TRUE);
                  END ELSE
                    IF TempLedgEntryDim.INSERT(TRUE) THEN;
              UNTIL DefDim.NEXT = 0;
          END;
        GLAccount."Ext. Source Type"::Vendor:
          IF TempLedgEntryDim.GET(DATABASE::"G/L Entry",Buffer."Entry No.",
                                             ConsSetup."Counterparty Dim Code") THEN BEGIN
            AccNo := TempLedgEntryDim."Dimension Value Code";
            DefDim.RESET;
            DefDim.SETRANGE("Table ID", DATABASE::Vendor);
            DefDim.SETRANGE("No.", AccNo);
            IF DefDim.FINDSET THEN
              REPEAT
                TempLedgEntryDim.INIT;
                TempLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                TempLedgEntryDim."Entry No." := Buffer."Entry No.";
                TempLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                TempLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";

                IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                  (DefDim."Dimension Value Code" <> '') THEN BEGIN
                  IF NOT TempLedgEntryDim.INSERT(TRUE) THEN
                    TempLedgEntryDim.MODIFY(TRUE);
                  END ELSE
                    IF TempLedgEntryDim.INSERT(TRUE) THEN;
              UNTIL DefDim.NEXT = 0;
          END;
        GLAccount."Ext. Source Type"::"Bank Account":
          IF TempLedgEntryDim.GET(DATABASE::"G/L Entry",Buffer."Entry No.",
                                             ConsSetup."Bank Account Dimension Code") THEN BEGIN
            AccNo := TempLedgEntryDim."Dimension Value Code";
            DefDim.RESET;
            DefDim.SETRANGE("Table ID", DATABASE::"Bank Account");
            DefDim.SETRANGE("No.", AccNo);
            IF DefDim.FINDSET THEN
              REPEAT
                TempLedgEntryDim.INIT;
                TempLedgEntryDim."Table ID" := DATABASE::"G/L Entry";
                TempLedgEntryDim."Entry No." := Buffer."Entry No.";
                TempLedgEntryDim."Dimension Code" := DefDim."Dimension Code";
                TempLedgEntryDim."Dimension Value Code" := DefDim."Dimension Value Code";
                IF (DefDim."Value Posting" = DefDim."Value Posting"::"Code Mandatory") AND
                  (DefDim."Dimension Value Code" <> '') THEN BEGIN
                  IF NOT TempLedgEntryDim.INSERT(TRUE) THEN
                    TempLedgEntryDim.MODIFY(TRUE);
                  END ELSE
                    IF TempLedgEntryDim.INSERT(TRUE) THEN;
              UNTIL DefDim.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CreateAgreement@1101495005(VAR GenJournalLine@1101495002 : Record 81;VAR TempDimSetEntry@1101495003 : TEMPORARY Record 480);
    VAR
      Vendor@1101495004 : Record 23;
      VendorAgreement@1101495000 : Record 14901;
      Customer@1101495005 : Record 18;
      CustomerAgreement@1101495006 : Record 14902;
      DefaultDimension@1101495001 : Record 352;
    BEGIN
      //NC MTD03 > DP
      // создание карточки договора
      //NC NOS-26 > SPA
      //IF JournalLineDimension."Dimension Code" = ConsSetup."Deal Dimension Code" THEN BEGIN
      IF TempDimSetEntry."Dimension Value Code" = ConsSetup."Deal Dimension Code" THEN BEGIN
      //NC NOS-26 < SPA
        IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN BEGIN

          Vendor.GET(GenJournalLine."Account No.");
          Vendor."Agreement Posting" := Vendor."Agreement Posting"::Mandatory;
          IF Vendor.MODIFY(TRUE) THEN;

          //NC NOS-26 > SPA
          {
          IF (JournalLineDimension."Dimension Value Code" <> '') AND
            NOT VendorAgreement.GET(GenJournalLine."Account No.", JournalLineDimension."Dimension Value Code") THEN
          }
          IF (TempDimSetEntry."Dimension Value Code" <> '') AND
             NOT VendorAgreement.GET(GenJournalLine."Account No.",TempDimSetEntry."Dimension Value Code") THEN
          //NC NOS-26 < SPA
          BEGIN
            VendorAgreement.INIT;
            VendorAgreement."Vendor No." := GenJournalLine."Account No.";
            VendorAgreement."No." :=
              //JournalLineDimension."Dimension Value Code"; //NC NOS-26 SPA
              TempDimSetEntry."Dimension Value Code"; //NC NOS-26 SPA
            //JournalLineDimension.CALCFIELDS("Dimension Value Name");
            VendorAgreement."External Agreement No." :=
              //JournalLineDimension."Dimension Value Name"; //NC NOS-26 SPA
              TempDimSetEntry."Dimension Value Name"; //NC NOS-26 SPA
            VendorAgreement.Description :=
              //JournalLineDimension."Dimension Value Name"; //NC NOS-26 SPA
              TempDimSetEntry."Dimension Value Code"; //NC NOS-26 SPA
            VendorAgreement.Active := TRUE;
            VendorAgreement."Vendor Posting Group" := GenJournalLine."Posting Group";
            VendorAgreement."Deal No." :=
              //JournalLineDimension."Dimension Value Code"; //NC NOS-26 SPA
              TempDimSetEntry."Dimension Value Code"; //NC NOS-26 SPA
            VendorAgreement."Currency Code" := GenJournalLine."Currency Code";
            VendorAgreement."Agreement Type" := VendorAgreement."Agreement Type"::Trade;
            IF NOT VendorAgreement.INSERT(TRUE) THEN;
          END;
          GenJournalLine."Agreement No." :=
            //JournalLineDimension."Dimension Value Code"; //NC NOS-26 SPA
            TempDimSetEntry."Dimension Value Code"; //NC NOS-26 SPA
          GenJournalLine.MODIFY;

          DefaultDimension.RESET;
          DefaultDimension.SETRANGE("Table ID", 14901);
          DefaultDimension.SETRANGE("No.", GenJournalLine."Agreement No.");
          IF DefaultDimension.FINDSET THEN
            REPEAT
              //NC NOS-26 > SPA
              {
              JournalLineDimension.INIT;
              JournalLineDimension."Table ID" := 81;
              JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
              JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
              JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
              JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
              JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
              IF JournalLineDimension.INSERT THEN;
              }
              TempDimSetEntry."Dimension Code" := DefaultDimension."Dimension Code";
              TempDimSetEntry.VALIDATE("Dimension Value Code",DefaultDimension."Dimension Value Code");
              IF TempDimSetEntry.INSERT THEN;
              //NC NOS-26 < SPA
            UNTIL DefaultDimension.NEXT = 0;
        END;
        IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN BEGIN
          Customer.GET(GenJournalLine."Account No.");
          Customer."Agreement Posting" := Customer."Agreement Posting"::Mandatory;
          IF Customer.MODIFY(TRUE) THEN;
          //NC NOS-26 > SPA
          {
          IF (JournalLineDimension."Dimension Value Code" <> '') AND
            NOT CustomerAgreement.GET(GenJournalLine."Account No.", JournalLineDimension."Dimension Value Code") THEN
          }
          IF (TempDimSetEntry."Dimension Value Code" <> '') AND
              NOT CustomerAgreement.GET(GenJournalLine."Account No.",TempDimSetEntry."Dimension Value Code") THEN
          //NC NOS-26 < SPA
          BEGIN
            CustomerAgreement.INIT;
            CustomerAgreement."Customer No." := GenJournalLine."Account No.";
            CustomerAgreement."No." :=
              //JournalLineDimension."Dimension Value Code"; // NC NOS-26 SPA
              TempDimSetEntry."Dimension Value Code"; // NC NOS-26 SPA
            //JournalLineDimension.CALCFIELDS("Dimension Value Name");
            CustomerAgreement."External Agreement No." :=
              //JournalLineDimension."Dimension Value Name"; // NC NOS-26 SPA
              TempDimSetEntry."Dimension Value Name"; // NC NOS-26 SPA
            CustomerAgreement.Description :=
              //JournalLineDimension."Dimension Value Name"; // NC NOS-26 SPA
              TempDimSetEntry."Dimension Value Code"; // NC NOS-26 SPA
            CustomerAgreement.Active := TRUE;
            CustomerAgreement."Customer Posting Group" := GenJournalLine."Posting Group";
            CustomerAgreement."Deal No." :=
              //JournalLineDimension."Dimension Value Code"; // NC NOS-26 SPA
              TempDimSetEntry."Dimension Value Code"; // NC NOS-26 SPA
            CustomerAgreement."Currency Code" := GenJournalLine."Currency Code";
            CustomerAgreement."Agreement Type" := CustomerAgreement."Agreement Type"::Trade;
            IF CustomerAgreement.INSERT(TRUE) THEN;
          END;
          GenJournalLine."Agreement No." :=
            //JournalLineDimension."Dimension Value Code"; // NC NOS-26 SPA
            TempDimSetEntry."Dimension Value Code"; // NC NOS-26 SPA
          GenJournalLine.MODIFY;
          DefaultDimension.RESET;
          DefaultDimension.SETRANGE("Table ID", 14902);
          DefaultDimension.SETRANGE("No.", GenJournalLine."Agreement No.");
          IF DefaultDimension.FINDSET THEN
            REPEAT
              //NC NOS-26 > SPA
              {
              JournalLineDimension.INIT;
              JournalLineDimension."Table ID" := 81;
              JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
              JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
              JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
              JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
              JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
              IF JournalLineDimension.INSERT THEN;
              }
              TempDimSetEntry."Dimension Code" := DefaultDimension."Dimension Code";
              TempDimSetEntry.VALIDATE("Dimension Value Code",DefaultDimension."Dimension Value Code");
              IF TempDimSetEntry.INSERT THEN;
              //NC NOS-26 < SPA
            UNTIL DefaultDimension.NEXT = 0;
        END;
      END;
      //NC MTD03 < DP
    END;

    BEGIN
    {
      NC MDA01 MP Изменения в коде
      NC MFA01 DP Трансформация ОС операций
      NC MFA03 DP Фильтрация ОС трансформации по ОС Классу
      NC MFA04 DP Указание сроков амортизации для РБП при загрузке из ОС каталога
      NC MFA05 DP Расчет суммы ввода в эксплуатацию/суммы приобретения согласно правилам пересчета сумм
      NC MFA07 DP Формирование строки трансформационных разниц при загрузке небаласирующей проводки
      NC MFA11 DP Предварительная проверка записей буфера обработки перед загрузкой в журналы
      NC MFA12 DP Регистр ОС Консолидации
      NC MFA13 DP Раздел закрытого для трансформации периода
      NC MFA14 DP Создание измерения FA из ОС Каталога
      NC MFA15 DP Проверка связей операций перемещения через журнал ошибок
      NC MFA16 DP Изменение аналитики COSTCENTER на ОС
      NC MFA17 DP Поиск строки ОС трансформации по усеченному значению Внеш. Счет Но.
      NC MDTM02.1 MP изменения в коде
      NC MDTM02.2 PCH Перенос мэппинга измерений на таблицу "Dim. Mapping Selection"
      NC MFA33 DP Модификация по учету строк фин. журнала последней загрузки
      NC MFA34 DP Вставка измерений для связанной Errоперации
      NC MFA35 DP Вставка измерений для счета, у котрого есть измерения по умолчанию
      NC MDTM11 MP смена мэппинга
      NC M1 DP Установка обязательности аналитик при работе с карточкой
      NC MFA41 DP Установка группы учета РБП
      NC OAM19 DP Указание станд. аналитики с Legal Enity Type
      NC OAM19.1 DP Изменение функций InsertDimension, InsertFADimension (VAR)
      -----------------------------------------------
      NC NOS-26 SPA Миграция на NAV2017
    }
    END.
  }
}

