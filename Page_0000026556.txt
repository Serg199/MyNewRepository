OBJECT Page 26556 Stat. Report Requisites Groups
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Stat. Report Requisites Groups;
               RUS=Группы показателей регл. отчета];
    SourceTable=Table26557;
    DelayedInsert=Yes;
    SourceTableView=SORTING(Report Code,Sequence No.);
    DataCaptionFields=Report Code;
    PageType=List;
    OnInsertRecord=VAR
                     StatReportRequisitesGroup@1210001 : Record 26557;
                     SequenceNo@1210000 : Integer;
                   BEGIN
                     StatReportRequisitesGroup.SETCURRENTKEY("Report Code","Sequence No.");
                     StatReportRequisitesGroup.SETRANGE("Report Code","Report Code");

                     IF BelowxRec THEN BEGIN
                       IF StatReportRequisitesGroup.FINDLAST THEN;
                       "Sequence No." := StatReportRequisitesGroup."Sequence No." + 1;
                     END ELSE BEGIN
                       SequenceNo := xRec."Sequence No.";

                       StatReportRequisitesGroup.SETFILTER("Sequence No.",'%1..',SequenceNo);
                       IF StatReportRequisitesGroup.FIND('+') THEN
                         REPEAT
                           StatReportRequisitesGroup."Sequence No." := StatReportRequisitesGroup."Sequence No." + 1;
                           StatReportRequisitesGroup.MODIFY;
                         UNTIL StatReportRequisitesGroup.NEXT(-1) = 0;
                       "Sequence No." := SequenceNo;
                     END;
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210008 ;1   ;Action    ;
                      CaptionML=[ENU=&Requisites;
                                 RUS=&Показатели];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 26558;
                      RunPageLink=Report Code=FIELD(Report Code),
                                  Requisites Group Name=FIELD(Name);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=EntriesList;
                      PromotedCategory=Process }
      { 1210013 ;1   ;ActionGroup;
                      CaptionML=[ENU=Functions;
                                 RUS=Функции];
                      Image=Action }
      { 1210014 ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Copy Requisites Groups;
                                 RUS=Копировать группы показателей];
                      ApplicationArea=#Basic,#Suite;
                      Image=CopyWorksheet;
                      OnAction=BEGIN
                                 CopySections;
                               END;
                                }
      { 1210015 ;2   ;Separator  }
      { 1210016 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+W;
                      CaptionML=[ENU=Move Up;
                                 RUS=Сдвинуть вверх];
                      ApplicationArea=#Basic,#Suite;
                      Image=MoveUp;
                      OnAction=BEGIN
                                 MoveUp;
                               END;
                                }
      { 1210017 ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+S;
                      CaptionML=[ENU=Move Down;
                                 RUS=Сдвинуть вниз];
                      ApplicationArea=#Basic,#Suite;
                      Image=MoveDown;
                      OnAction=BEGIN
                                 MoveDown;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210000;1;Group     ;
                GroupType=Repeater }

    { 1210001;2;Field     ;
                ToolTipML=[ENU=Specifies the name associated with the statutory report requisites group.;
                           RUS=Определяет имя, связанное с группой показателей регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Name }

    { 1210003;2;Field     ;
                ToolTipML=[ENU=Specifies the description of the statutory report requisites group.;
                           RUS=Определяет описание группы показателей регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description }

    { 1210023;2;Field     ;
                ToolTipML=[ENU=Specifies the section number of the statutory report requisites group.;
                           RUS=Определяет номер раздела группы показателей регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Section No." }

    { 1210021;2;Field     ;
                ToolTipML=[ENU=Specifies the quantity associated with the statutory report requisites group.;
                           RUS=Определяет количество, связанное с группой показателей регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Requisites Quantity" }

    { 1210011;2;Field     ;
                ToolTipML=[ENU=Specifies the Microsoft Excel sheet name associated with the statutory report requisites group.;
                           RUS=Определяет имя листа Microsoft Excel, связанное с группой показателей регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Excel Sheet Name" }

    { 1210005;2;Field     ;
                ToolTipML=[ENU=Specifies the group end of the statutory report requisites group.;
                           RUS=Определяет конец группы для группы показателей регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Group End" }

    { 1210019;2;Field     ;
                ToolTipML=[ENU=Specifies the fragment end of the statutory report requisites group.;
                           RUS=Определяет конец фрагмента для группы показателей регламентного отчета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Fragment End" }

  }
  CODE
  {

    PROCEDURE CopySections@1210002();
    VAR
      StatReportRequisitesGroup@1210000 : Record 26557;
      StatReportRequisitesGroupBuffe@1210003 : TEMPORARY Record 26557;
      CopyStatReportRequisitesGroups@1210001 : Page 26578;
      SequenceNo@1210002 : Integer;
    BEGIN
      TESTFIELD("Report Code");
      CopyStatReportRequisitesGroups.LOOKUPMODE := TRUE;
      IF CopyStatReportRequisitesGroups.RUNMODAL = ACTION::LookupOK THEN BEGIN
        CopyStatReportRequisitesGroups.GetSectionBuffer(StatReportRequisitesGroupBuffe);
        StatReportRequisitesGroup.SETCURRENTKEY("Report Code","Sequence No.");
        StatReportRequisitesGroup.SETRANGE("Report Code","Report Code");
        IF StatReportRequisitesGroup.FINDLAST THEN;
        SequenceNo := StatReportRequisitesGroup."Sequence No." + 1;

        StatReportRequisitesGroupBuffe.SETCURRENTKEY("Report Code","Sequence No.");
        IF StatReportRequisitesGroupBuffe.FINDSET THEN
          REPEAT
            StatReportRequisitesGroup.INIT;
            StatReportRequisitesGroup."Report Code" := "Report Code";
            StatReportRequisitesGroup.Name := GetNewSectionName(StatReportRequisitesGroupBuffe.Name);
            StatReportRequisitesGroup.Description := StatReportRequisitesGroupBuffe.Description;
            StatReportRequisitesGroup."Sequence No." := SequenceNo;
            StatReportRequisitesGroup.INSERT;
            SequenceNo := SequenceNo + 1;

            CopyRequisites(StatReportRequisitesGroupBuffe,StatReportRequisitesGroup);
          UNTIL StatReportRequisitesGroupBuffe.NEXT = 0;
      END;
    END;

    PROCEDURE GetNewSectionName@1210003(SectionName@1210000 : Text[30]) NewSectionName : Text[30];
    VAR
      StatReportRequisitesGroup@1210001 : Record 26557;
    BEGIN
      StatReportRequisitesGroup.SETRANGE("Report Code","Report Code");
      StatReportRequisitesGroup.SETRANGE(Name,SectionName);
      IF NOT StatReportRequisitesGroup.FINDFIRST THEN
        EXIT(SectionName);

      NewSectionName := INCSTR(SectionName);
      IF NewSectionName <> '' THEN
        EXIT(GetNewSectionName(NewSectionName));

      EXIT(GetNewSectionName(SectionName + '2'));
    END;

    PROCEDURE CopyRequisites@1210005(FromStatReportRequisitesGroup@1210000 : Record 26557;ToStatReportRequisitesGroup@1210001 : Record 26557);
    VAR
      FromStatReportRequisite@1210002 : Record 26559;
      ToStatReportRequisite@1210003 : Record 26559;
    BEGIN
      FromStatReportRequisite.SETRANGE("Report Code",FromStatReportRequisitesGroup."Report Code");
      FromStatReportRequisite.SETRANGE("Requisites Group Name",FromStatReportRequisitesGroup.Name);
      IF FromStatReportRequisite.FINDSET THEN
        REPEAT
          ToStatReportRequisite := FromStatReportRequisite;
          ToStatReportRequisite."Report Code" := ToStatReportRequisitesGroup."Report Code";
          ToStatReportRequisite."Requisites Group Name" := ToStatReportRequisitesGroup.Name;
          ToStatReportRequisite."Table Code" := '';
          ToStatReportRequisite.INSERT;

          ToStatReportRequisite.CopyRequisite(FromStatReportRequisitesGroup."Report Code",
            FromStatReportRequisitesGroup.Name,FromStatReportRequisite.Name);
        UNTIL FromStatReportRequisite.NEXT = 0;
    END;

    PROCEDURE MoveUp@1210000();
    VAR
      UpperStatReportRequisitesGroup@1210000 : Record 26557;
      SequenceNo@1210001 : Integer;
    BEGIN
      UpperStatReportRequisitesGroup.SETCURRENTKEY("Report Code","Sequence No.");
      UpperStatReportRequisitesGroup.SETRANGE("Report Code","Report Code");
      UpperStatReportRequisitesGroup.SETFILTER("Sequence No.",'..%1',"Sequence No." - 1);
      IF UpperStatReportRequisitesGroup.FIND('+') THEN BEGIN
        SequenceNo := UpperStatReportRequisitesGroup."Sequence No.";
        UpperStatReportRequisitesGroup."Sequence No." := "Sequence No.";
        UpperStatReportRequisitesGroup.MODIFY;

        "Sequence No." := SequenceNo;
        MODIFY;
      END;
    END;

    PROCEDURE MoveDown@1210008();
    VAR
      LowerStatReportRequisitesGroup@1210000 : Record 26557;
      SequenceNo@1210001 : Integer;
    BEGIN
      LowerStatReportRequisitesGroup.SETCURRENTKEY("Report Code","Sequence No.");
      LowerStatReportRequisitesGroup.SETRANGE("Report Code","Report Code");
      LowerStatReportRequisitesGroup.SETFILTER("Sequence No.",'%1..',"Sequence No." + 1);
      IF LowerStatReportRequisitesGroup.FIND('-') THEN BEGIN
        SequenceNo := LowerStatReportRequisitesGroup."Sequence No.";
        LowerStatReportRequisitesGroup."Sequence No." := "Sequence No.";
        LowerStatReportRequisitesGroup.MODIFY;

        "Sequence No." := SequenceNo;
        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

