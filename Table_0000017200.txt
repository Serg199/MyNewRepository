OBJECT Table 17200 Tax Register
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TaxRegSection.GET("Section Code");
               TaxRegSection.ValidateChangeDeclaration;
               TESTFIELD("Table ID");
               TESTFIELD("No.");
               VALIDATE("No.");
             END;

    OnModify=BEGIN
               TESTFIELD("Table ID");
             END;

    OnDelete=BEGIN
               TaxRegSection.GET("Section Code");
               TaxRegSection.ValidateChangeDeclaration;

               TaxRegLineSetup.SETRANGE("Section Code","Section Code");
               TaxRegLineSetup.SETRANGE("Tax Register No.","No.");
               TaxRegLineSetup.DELETEALL(TRUE);

               TaxRegTemplate.SETRANGE("Section Code","Section Code");
               TaxRegTemplate.SETRANGE(Code,"No.");
               TaxRegTemplate.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text1000,TABLECAPTION);
             END;

    CaptionML=[ENU=Tax Register;
               RUS=Налоговый регистр];
    LookupPageID=Page17202;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code10        ;OnValidate=BEGIN
                                                                IF "No." = '' THEN
                                                                  "Register ID" := ''
                                                                ELSE BEGIN
                                                                  NotAllowedChar := '~^';
                                                                  IF STRLEN(DELCHR(CONVERTSTR("No.",NotAllowedChar,'  '),'=',' ')) <> STRLEN("No.") THEN
                                                                    ERROR(Text1001,FIELDCAPTION("No."));
                                                                  "Register ID" := CONVERTSTR("No.",'.',COPYSTR(NotAllowedChar,2))
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              RUS=Номер] }
    { 2   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 3   ;   ;Table ID            ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF "Table ID" <> xRec."Table ID" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                  "Costing Method" := "Costing Method"::" ";
                                                                  IF "Table ID" <> DATABASE::"Tax Register G/L Entry" THEN
                                                                    TESTFIELD("G/L Corr. Analysis View Code",'');
                                                                END;
                                                                CASE "Table ID" OF
                                                                  DATABASE::"Tax Register G/L Entry",
                                                                  DATABASE::"Tax Register PR Entry",
                                                                  DATABASE::"Tax Register CV Entry",
                                                                  DATABASE::"Tax Register FA Entry",
                                                                  DATABASE::"Tax Register Item Entry",
                                                                  DATABASE::"Tax Register FE Entry":
                                                                    VALIDATE("Storing Method","Storing Method"::"Build Entry");
                                                                END;
                                                                CALCFIELDS("Table Name");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              RUS=Код таблицы];
                                                   BlankZero=Yes }
    { 4   ;   ;Table Name          ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              RUS=Название таблицы];
                                                   Editable=No }
    { 5   ;   ;Page ID             ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Page));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Page Name");
                                                              END;

                                                   CaptionML=[ENU=Page ID;
                                                              RUS=Код страницы] }
    { 6   ;   ;Page Name           ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Page),
                                                                                                                Object ID=FIELD(Page ID)));
                                                   CaptionML=[ENU=Page Name;
                                                              RUS=Название страницы] }
    { 7   ;   ;Check               ;Boolean       ;CaptionML=[ENU=Check;
                                                              RUS=Проверка] }
    { 8   ;   ;Level               ;Integer       ;CaptionML=[ENU=Level;
                                                              RUS=Уровень] }
    { 10  ;   ;Register ID         ;Code10        ;CaptionML=[ENU=Register ID;
                                                              RUS=Код регистра];
                                                   Editable=No }
    { 11  ;   ;Storing Method      ;Option        ;OnValidate=BEGIN
                                                                IF "Storing Method" <> xRec."Storing Method" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                  IF "Storing Method" <> "Storing Method"::"Build Entry" THEN
                                                                    TESTFIELD("G/L Corr. Analysis View Code",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Storing Method;
                                                              RUS=Метод хранения];
                                                   OptionCaptionML=[ENU=Build Entry,Calculation;
                                                                    RUS=Операции,Расчет];
                                                   OptionString=Build Entry,Calculation }
    { 12  ;   ;Costing Method      ;Option        ;OnValidate=BEGIN
                                                                IF "Costing Method" <> "Costing Method"::" " THEN
                                                                  TESTFIELD("Table ID",DATABASE::"Tax Register Item Entry");
                                                                IF "Costing Method" <> xRec."Costing Method" THEN BEGIN
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Costing Method;
                                                              RUS=Метод учета себестоимости];
                                                   OptionCaptionML=[ENU=" ,FIFO,LIFO,Average,FIFO+LIFO";
                                                                    RUS=" ,FIFO,LIFO,Средняя,FIFO+LIFO"];
                                                   OptionString=[ ,FIFO,LIFO,Average,FIFO+LIFO] }
    { 13  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              RUS=Фильтр по дате] }
    { 15  ;   ;Section Code        ;Code10        ;TableRelation="Tax Register Section";
                                                   CaptionML=[ENU=Section Code;
                                                              RUS=Код секции];
                                                   NotBlank=Yes }
    { 20  ;   ;Used in Statutory Report;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Stat. Report Table Mapping" WHERE (Int. Source Type=CONST(Tax Register),
                                                                                                         Int. Source Section Code=FIELD(Section Code),
                                                                                                         Int. Source No.=FIELD(No.)));
                                                   CaptionML=[ENU=Used in Statutory Report;
                                                              RUS=Использ. в регламентном отчете];
                                                   Editable=No }
    { 25  ;   ;G/L Corr. Analysis View Code;Code10;TableRelation="G/L Corr. Analysis View";
                                                   OnValidate=VAR
                                                                TaxRegGLCorrDimFilter@1210000 : Record 17244;
                                                              BEGIN
                                                                IF "G/L Corr. Analysis View Code" <> xRec."G/L Corr. Analysis View Code" THEN BEGIN
                                                                  IF "G/L Corr. Analysis View Code" <> '' THEN BEGIN
                                                                    TESTFIELD("Table ID",DATABASE::"Tax Register G/L Entry");
                                                                    TESTFIELD("Storing Method","Storing Method"::"Build Entry");
                                                                  END;
                                                                  TaxRegGLCorrDimFilter.SETRANGE("Section Code","Section Code");
                                                                  TaxRegGLCorrDimFilter.SETRANGE("Tax Register No.","No.");
                                                                  IF NOT TaxRegGLCorrDimFilter.ISEMPTY THEN
                                                                    IF CONFIRM(Text1002,TRUE) THEN
                                                                      TaxRegGLCorrDimFilter.DELETEALL
                                                                    ELSE
                                                                      ERROR('');
                                                                  TaxRegSection.GET("Section Code");
                                                                  TaxRegSection.ValidateChangeDeclaration;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=G/L Corr. Analysis View Code;
                                                              RUS=Код аналит. отчета по корресп.] }
  }
  KEYS
  {
    {    ;Section Code,No.                        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description                          }
  }
  CODE
  {
    VAR
      TaxRegSection@1000 : Record 17207;
      TaxRegLineSetup@1001 : Record 17201;
      TaxRegTemplate@1002 : Record 17202;
      NotAllowedChar@1004 : Text[10];
      Text1000@1005 : TextConst 'ENU=You cannot rename an %1.;RUS=Переименование %1 невозможно.';
      Text1001@1006 : TextConst 'ENU=The value %1 has illegal symbol.;RUS=В значении %1 использован запрещенный символ';
      Text1002@1210000 : TextConst 'ENU=All related dimension filters will be deleted. Continue?;RUS=Все связанные фильтры измерений будут удалены. Продолжить?';

    PROCEDURE ShowDetails@1(TemplateLineNo@1000 : Integer);
    VAR
      TaxRegCVEntry@1002 : Record 17210;
      TaxRegItemEntry@1003 : Record 17212;
      TaxRegFEEntry@1006 : Record 17213;
      TaxRegTemplate@1008 : Record 17202;
      TaxDimMgt@1010 : Codeunit 17202;
    BEGIN
      CASE "Table ID" OF
        DATABASE::"Tax Register CV Entry":
          BEGIN
            TaxRegCVEntry.RESET;
            TaxRegCVEntry.SETCURRENTKEY("Section Code");
            TaxRegCVEntry.FILTERGROUP(2);
            TaxRegCVEntry.SETRANGE("Section Code","Section Code");
            TaxRegCVEntry.SETFILTER("Where Used Register IDs",'*~' + "Register ID" + '~*');
            TaxRegCVEntry.FILTERGROUP(0);
            COPYFILTER("Date Filter","Date Filter");
            PAGE.RUNMODAL("Page ID",TaxRegCVEntry);
          END;
        DATABASE::"Tax Register Item Entry":
          BEGIN
            TaxRegItemEntry.RESET;
            TaxRegItemEntry.SETCURRENTKEY("Section Code");
            TaxRegItemEntry.COPYFILTER("Date Filter","Date Filter");
            TaxRegItemEntry.FILTERGROUP(2);
            TaxRegItemEntry.SETRANGE("Section Code","Section Code");
            TaxRegItemEntry.SETFILTER("Where Used Register IDs",'*~' + "Register ID" + '~*');
            TaxRegItemEntry.FILTERGROUP(0);
            IF TemplateLineNo <> 0 THEN BEGIN
              TaxRegTemplate.GET("Section Code","No.",TemplateLineNo);
              TaxRegItemEntry.SetTemplateFilter(TaxRegTemplate);
              TaxDimMgt.SetDimFilters2TaxItemLine(TaxRegTemplate,TaxRegItemEntry);
            END;
            PAGE.RUNMODAL("Page ID",TaxRegItemEntry);
          END;
        DATABASE::"Tax Register FA Entry":
          ShowFAEntriesDetails(TemplateLineNo);
        DATABASE::"Tax Register FE Entry":
          BEGIN
            TaxRegFEEntry.RESET;
            TaxRegFEEntry.SETCURRENTKEY("Section Code");
            TaxRegFEEntry.FILTERGROUP(2);
            TaxRegFEEntry.SETRANGE("Section Code","Section Code");
            TaxRegFEEntry.SETFILTER("Where Used Register IDs",'*~' + "Register ID" + '~*');
            TaxRegFEEntry.FILTERGROUP(0);
            TaxRegFEEntry.COPYFILTER("Date Filter","Date Filter");
            PAGE.RUNMODAL("Page ID",TaxRegFEEntry);
          END;
        DATABASE::"Tax Register G/L Entry":
          ShowGLEntriesDetails(TemplateLineNo);
      END;
    END;

    PROCEDURE PrintReport@2(DateTextFilter@1000 : Text[1024]);
    VAR
      TaxRegister@1210001 : Record 17200;
      TaxRegRep@1210000 : Report 17208;
    BEGIN
      TaxRegister := Rec;
      TaxRegister.SETRECFILTER;
      TaxRegister.SETFILTER("Date Filter",DateTextFilter);
      TaxRegRep.SETTABLEVIEW(TaxRegister);
      TaxRegRep.RUNMODAL;
    END;

    PROCEDURE ShowGLEntriesDetails@1210000(TemplateLineNo@1210003 : Integer);
    VAR
      GLCorrespondenceEntry@1210007 : Record 12401;
      TempGLCorrespondenceEntry@1210008 : TEMPORARY Record 12401;
      GLCorrAnalysisView@1210006 : Record 14940;
      GLCorrAnalysisViewEntry@1210005 : Record 14942;
      TempGLCorrAnalysisViewEntry@1210000 : TEMPORARY Record 14942;
      TaxRegTemplate@1210002 : Record 17202;
      TaxDimMgt@1210004 : Codeunit 17202;
    BEGIN
      TaxRegTemplate.GET("Section Code","No.",TemplateLineNo);

      TaxRegLineSetup.SETRANGE("Section Code","Section Code");
      TaxRegLineSetup.SETRANGE("Tax Register No.","No.");
      IF TaxRegTemplate."Term Line Code" <> '' THEN
        TaxRegLineSetup.SETRANGE("Line Code",TaxRegTemplate."Term Line Code");
      IF FINDSET THEN
        REPEAT
          IF "G/L Corr. Analysis View Code" <> '' THEN BEGIN
            GLCorrAnalysisView.GET("G/L Corr. Analysis View Code");
            GLCorrAnalysisViewEntry.RESET;
            TaxDimMgt.SetDimFilters2GLCorrAnViewEntry(
              GLCorrAnalysisViewEntry,
              GLCorrAnalysisView,
              TaxRegTemplate,
              TaxRegLineSetup);
            COPYFILTER("Date Filter",GLCorrAnalysisViewEntry."Posting Date");

            CASE TaxRegLineSetup."Account Type" OF
              TaxRegLineSetup."Account Type"::Correspondence:
                BEGIN
                  IF TaxRegLineSetup."Account No." <> '' THEN
                    GLCorrAnalysisViewEntry.SETFILTER("Debit Account No.",TaxRegLineSetup."Account No.");
                  IF TaxRegLineSetup."Bal. Account No." <> '' THEN
                    GLCorrAnalysisViewEntry.SETFILTER("Credit Account No.",TaxRegLineSetup."Bal. Account No.");
                  AddGLCorrAnViewEntr2Buffer(GLCorrAnalysisViewEntry,TempGLCorrAnalysisViewEntry);
                END;
              TaxRegLineSetup."Account Type"::"G/L Account":
                CASE TaxRegLineSetup."Amount Type" OF
                  TaxRegLineSetup."Amount Type"::Debit:
                    BEGIN
                      IF TaxRegLineSetup."Account No." <> '' THEN
                        GLCorrAnalysisViewEntry.SETFILTER("Debit Account No.",TaxRegLineSetup."Account No.");
                      AddGLCorrAnViewEntr2Buffer(GLCorrAnalysisViewEntry,TempGLCorrAnalysisViewEntry);
                    END;
                  TaxRegLineSetup."Amount Type"::Credit:
                    BEGIN
                      IF TaxRegLineSetup."Account No." <> '' THEN
                        GLCorrAnalysisViewEntry.SETFILTER("Credit Account No.",TaxRegLineSetup."Account No.");
                      AddGLCorrAnViewEntr2Buffer(GLCorrAnalysisViewEntry,TempGLCorrAnalysisViewEntry);
                    END;
                  TaxRegLineSetup."Amount Type"::"Net Change":
                    IF TaxRegLineSetup."Account No." <> '' THEN BEGIN
                      GLCorrAnalysisViewEntry.SETFILTER("Debit Account No.",TaxRegLineSetup."Account No.");
                      AddGLCorrAnViewEntr2Buffer(GLCorrAnalysisViewEntry,TempGLCorrAnalysisViewEntry);
                      GLCorrAnalysisViewEntry.SETRANGE("Debit Account No.");
                      GLCorrAnalysisViewEntry.SETFILTER("Credit Account No.",TaxRegLineSetup."Account No.");
                      AddGLCorrAnViewEntr2Buffer(GLCorrAnalysisViewEntry,TempGLCorrAnalysisViewEntry);
                    END;
                END;
            END;
          END ELSE BEGIN
            COPYFILTER("Date Filter",GLCorrespondenceEntry."Posting Date");
            CASE TaxRegLineSetup."Account Type" OF
              TaxRegLineSetup."Account Type"::Correspondence:
                BEGIN
                  IF TaxRegLineSetup."Account No." <> '' THEN
                    GLCorrespondenceEntry.SETFILTER("Debit Account No.",TaxRegLineSetup."Account No.");
                  IF TaxRegLineSetup."Bal. Account No." <> '' THEN
                    GLCorrespondenceEntry.SETFILTER("Credit Account No.",TaxRegLineSetup."Bal. Account No.");
                  AddGLCorrEntries2Buffer(GLCorrespondenceEntry,TempGLCorrespondenceEntry);
                END;
              TaxRegLineSetup."Account Type"::"G/L Account":
                BEGIN
                  GLCorrespondenceEntry.RESET;
                  CASE TaxRegLineSetup."Amount Type" OF
                    TaxRegLineSetup."Amount Type"::Debit:
                      BEGIN
                        IF TaxRegLineSetup."Account No." <> '' THEN
                          GLCorrespondenceEntry.SETFILTER("Debit Account No.",TaxRegLineSetup."Account No.");
                        AddGLCorrEntries2Buffer(GLCorrespondenceEntry,TempGLCorrespondenceEntry);
                      END;
                    TaxRegLineSetup."Amount Type"::Credit:
                      BEGIN
                        IF TaxRegLineSetup."Account No." <> '' THEN
                          GLCorrespondenceEntry.SETFILTER("Credit Account No.",TaxRegLineSetup."Account No.");
                        AddGLCorrEntries2Buffer(GLCorrespondenceEntry,TempGLCorrespondenceEntry);
                      END;
                    TaxRegLineSetup."Amount Type"::"Net Change":
                      IF TaxRegLineSetup."Account No." <> '' THEN BEGIN
                        GLCorrespondenceEntry.SETFILTER("Debit Account No.",TaxRegLineSetup."Account No.");
                        AddGLCorrEntries2Buffer(GLCorrespondenceEntry,TempGLCorrespondenceEntry);
                        GLCorrespondenceEntry.SETRANGE("Debit Account No.");
                        GLCorrespondenceEntry.SETFILTER("Credit Account No.",TaxRegLineSetup."Account No.");
                        AddGLCorrEntries2Buffer(GLCorrespondenceEntry,TempGLCorrespondenceEntry);
                      END;
                  END;
                END;
            END;
          END;
        UNTIL TaxRegLineSetup.NEXT = 0;

      IF "G/L Corr. Analysis View Code" <> '' THEN BEGIN
        TempGLCorrAnalysisViewEntry.SETFILTER("G/L Corr. Analysis View Code","G/L Corr. Analysis View Code");
        PAGE.RUNMODAL(PAGE::"G/L Corr. Analysis View Entr.",TempGLCorrAnalysisViewEntry)
      END ELSE
        PAGE.RUNMODAL(PAGE::"G/L Correspondence Entries",TempGLCorrespondenceEntry);
    END;

    PROCEDURE ShowFAEntriesDetails@1210008(TemplateLineNo@1210003 : Integer);
    VAR
      FALedgEntry@1210000 : Record 5601;
      TaxRegTemplate@1210002 : Record 17202;
      CreateTaxRegisterFAEntry@1210007 : Codeunit 17205;
      DateBegin@1210005 : Date;
      DateEnd@1210006 : Date;
    BEGIN
      IF TemplateLineNo <> 0 THEN BEGIN
        DateBegin := GETRANGEMIN("Date Filter");
        DateEnd := GETRANGEMAX("Date Filter");
        TaxRegTemplate.GET("Section Code","No.",TemplateLineNo);
        CreateTaxRegisterFAEntry.SetFALedgerEntryFilters(FALedgEntry,TaxRegTemplate,DateBegin,DateEnd,1);
        PAGE.RUNMODAL(0,FALedgEntry);
      END;
    END;

    PROCEDURE AddGLCorrEntries2Buffer@1210002(VAR GLCorrespondenceEntry@1210001 : Record 12401;VAR TempGLCorrespondenceEntry@1210000 : TEMPORARY Record 12401);
    BEGIN
      IF GLCorrespondenceEntry.FINDSET THEN
        REPEAT
          TempGLCorrespondenceEntry := GLCorrespondenceEntry;
          IF NOT TempGLCorrespondenceEntry.INSERT THEN;
        UNTIL GLCorrespondenceEntry.NEXT = 0;
    END;

    PROCEDURE AddGLCorrAnViewEntr2Buffer@1210006(VAR GLCorrAnalysisViewEntry@1210001 : Record 14942;VAR TempGLCorrAnalysisViewEntry@1210000 : TEMPORARY Record 14942);
    BEGIN
      IF GLCorrAnalysisViewEntry.FINDSET THEN
        REPEAT
          TempGLCorrAnalysisViewEntry := GLCorrAnalysisViewEntry;
          IF NOT TempGLCorrAnalysisViewEntry.INSERT THEN;
        UNTIL GLCorrAnalysisViewEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

