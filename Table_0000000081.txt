OBJECT Table 81 Gen. Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=09.08.17;
    Time=17:59:25;
    Modified=Yes;
    Version List=NAVW110.00.00.15052,NAVRU10.00.00.15052,NOS-26;
  }
  PROPERTIES
  {
    Permissions=TableData 1221=rimd;
    OnInsert=VAR
               BankAcc@1210000 : Record 270;
             BEGIN
               GenJnlAlloc.LOCKTABLE;
               LOCKTABLE;
               GenJnlTemplate.GET("Journal Template Name");
               GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
               "Posting No. Series" := GenJnlBatch."Posting No. Series";
               "Check Printed" := FALSE;
               //NC MDB01 > MP
               "Transaction Type" := GenJnlBatch."Batch Type";
               //NC MDB01 < MP

               //NC NCS-1108 > DP
               "Bank Payment Type" := GenJnlBatch."Bank Payment Type";
               //NC NCS-1108 < DP

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               //TDRANCS-897 >
               GLSetup.GET;
               fn_CreateLinkDim(GLSetup."Shortcut Dimension 1 Code","Shortcut Dimension 1 Code");
               //TDRANCS-897 <
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
               //TDRANCS-897 >
               fn_CreateLinkDim(GLSetup."Shortcut Dimension 2 Code","Shortcut Dimension 2 Code");
               //TDRANCS-897 <

               IF GenJnlBatch."Bal. Account Type" = GenJnlBatch."Bal. Account Type"::"Bank Account" THEN
                 IF BankAcc.GET(GenJnlBatch."Bal. Account No.") THEN
                   "Bank Account No." := BankAcc."Bank Account No.";

               IF "Export Status" <> "Export Status"::" " THEN
                 "Export Status" := "Export Status"::New;

               //NC OFA002 > DP
               IF ("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Fixed Asset","Account Type"::"Fixed Asset"]) OR
                  ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Fixed Asset"])
               THEN
                  SetVATTaxDim;
               //NC OFA002 < DP

               //NC OFA21 > DP
               InsertLegalEntityDimValue(2);
               //NC OFA21 < DP

               //NC NCS-1880 > ORM
               "Modified By" := USERID;
               //NC NCS-1880 < ORM

               //NC NCS-2300.1 > DP
               "Approved By" :='';
               //NC NCS-2300.1 < DP
             END;

    OnModify=BEGIN
               //NC NCS-1108 > DP
               GLSetup.GET;
               //NC NCS-1108 < DP

               IF "Check Printed" THEN
                 IF FORMAT(xRec) <> FORMAT(Rec) THEN

                   //NC NCS-1108 > DP
                   IF NOT (((xRec."Posting Date"<>"Posting Date") OR (xRec."Posting Group"<> "Posting Group")) AND
                       GLSetup."Use Payment Check")
                   THEN
                   //NC NCS-1108 < DP

                   FIELDERROR("Check Printed");

               IF ("Applies-to ID" = '') AND (xRec."Applies-to ID" <> '') THEN
                 ClearCustVendApplnEntry;

               SetExportStatus;

               //NC NCS-2385 > DP
               IF NOT g_blnIsUpdate THEN
               //NC NCS-2385 < DP

               // NCS-1880 ORM >
               CheckModifyAgainstApproved;
               "Modified By" := USERID;
               UpdateModifiedByForDocument;
               // NCS-1880 ORM <
             END;

    OnDelete=BEGIN
               //NC NOS-26 > SPA
               IF "Transaction Type" <> "Transaction Type"::Automatic THEN
               //NC NOS-26 < SPA
                 ApprovalsMgmt.OnCancelGeneralJournalLineApprovalRequest(Rec);

               TESTFIELD("Check Printed",FALSE);

               ClearCustVendApplnEntry;
               ClearAppliedGenJnlLine;
               //NC NOS-26 > SPA
               IF "Transaction Type" <> "Transaction Type"::Automatic THEN BEGIN
               //NC NOS-26 < SPA
                 DeletePaymentFileErrors;
                 ClearDataExchangeEntries(FALSE);

                 GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
                 GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
                 GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
                 GenJnlAlloc.DELETEALL;

                 DeferralUtilities.DeferralCodeOnDelete(
                   DeferralDocType::"G/L",
                   "Journal Template Name",
                   "Journal Batch Name",0,'',"Line No.");
               //NC NOS-26 > SPA
               END;
               //NC NOS-26 < SPA
               VALIDATE("Incoming Document Entry No.",0);
             END;

    OnRename=BEGIN
               ApprovalsMgmt.RenameApprovalEntries(xRec.RECORDID,RECORDID);

               TESTFIELD("Check Printed",FALSE);
             END;

    CaptionML=[ENU=Gen. Journal Line;
               RUS=Строка финансового журнала];
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              RUS=Имя шаблона журнала] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              RUS=Номер строки] }
    { 3   ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                ChecAccType(0);  // NC MIO-11 AES


                                                                // NC MTF02 > II
                                                                {
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                                       "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                                            "Bal. Account Type"::"IC Partner"])
                                                                }
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                    "Account Type"::"IC Partner", "Account Type"::"Fixed Asset"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                    "Bal. Account Type"::"IC Partner", "Account Type"::"Fixed Asset"])
                                                                // NC MTF02 < II
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Account No.",'');
                                                                VALIDATE(Description,'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN BEGIN
                                                                  VALIDATE("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                  VALIDATE("Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Bal. Account Type" IN [
                                                                                             "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Account Type" IN
                                                                   [xRec."Account Type"::Customer,xRec."Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                  "VAT Registration No." := '';
                                                                END;

                                                                IF "Journal Template Name" <> '' THEN
                                                                  IF "Account Type" = "Account Type"::"IC Partner" THEN BEGIN
                                                                    GetTemplate;
                                                                    IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                      FIELDERROR("Account Type");
                                                                  END;
                                                                IF "Account Type" <> "Account Type"::Customer THEN
                                                                  VALIDATE("Credit Card No.",'');

                                                                VALIDATE("Deferral Code",'');
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              RUS=Тип счета];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    RUS=Счет ГК,Клиент,Поставщик,Банковский счет,Основное средство,МФ Партнер];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   Description=NC MTD06 AIG, NC MTD02 AIG }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                           Blocked=CONST(No))
                                                                                                                           ELSE IF (Account Type=CONST(Customer)) Customer
                                                                                                                           ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                                                                           ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                           ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                           ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=VAR
                                                                DefaultDimension@1101495000 : Record 352;
                                                                CustomerPostingGroup@1101495003 : Record 92;
                                                                VendorPostingGroup@1101495002 : Record 93;
                                                                BankAccountPG@1101495001 : Record 277;
                                                                TempDimSetEntry@1101495004 : TEMPORARY Record 480;
                                                              BEGIN
                                                                SetExportStatus;

                                                                IF "Account No." <> xRec."Account No." THEN BEGIN
                                                                  ClearAppliedAutomatically;
                                                                  VALIDATE("Job No.",'');
                                                                END;

                                                                IF xRec."Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"IC Partner"] THEN
                                                                  "IC Partner Code" := '';

                                                                IF "Account No." = '' THEN BEGIN
                                                                  CleanLine;
                                                                  EXIT;
                                                                END;

                                                                CASE "Account Type" OF
                                                                  "Account Type"::"G/L Account":
                                                                    GetGLAccount;
                                                                  "Account Type"::Customer:
                                                                    GetCustomerAccount;
                                                                  "Account Type"::Vendor:
                                                                    GetVendorAccount;
                                                                  "Account Type"::"Bank Account":
                                                                    GetBankAccount;
                                                                  "Account Type"::"Fixed Asset":
                                                                    GetFAAccount;
                                                                  "Account Type"::"IC Partner":
                                                                    GetICPartnerAccount;
                                                                 // // NC MTF02 > II
                                                                 //  "Account Type"::"6":
                                                                 //    BEGIN
                                                                 //      FI.GET("Account No.");
                                                                 //      //NC MTF002 > AKU
                                                                 //      {
                                                                 //      VALIDATE("Financial Instrument No.", "Account No.");
                                                                 //      }
                                                                 //      //NC MTF002 < AKU
                                                                 //      FI.TESTFIELD("Type FI");
                                                                 //      FIType.GET(FI."Type FI");
                                                                 //      FIType.TESTFIELD("FI Posting Group");
                                                                 //      FIType.TESTFIELD("Gen. Prod. Posting Group");
                                                                 //      FIType.TESTFIELD("VAT Prod. Posting Group");
                                                                 //      "FI Posting Group" := FIType."FI Posting Group";
                                                                 //      "Gen. Prod. Posting Group" := FIType."Gen. Prod. Posting Group";
                                                                 //      "VAT Prod. Posting Group" := FIType."VAT Prod. Posting Group";
                                                                 //      //NC > PCH
                                                                 //      {
                                                                 //      Description := FI.Name;
                                                                 //      }
                                                                 //      Description := COPYSTR(FI.Name,1,MAXSTRLEN(Description));
                                                                 //      //NC < PCH
                                                                 //    END;
                                                                 // // NC MTF02 < II
                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                VALIDATE("IC Partner G/L Acc. No.",GetDefaultICPartnerGLAccNo);
                                                                ValidateApplyRequirements(Rec);

                                                                IF xRec."Account No." <> "Account No." THEN
                                                                  AddPersonalDocInfo("Cash Order Including");

                                                                //NC MTD02 > AIG
                                                                DefaultDimension.RESET;
                                                                DefaultDimension.SETRANGE("Table ID", DATABASE::"G/L Account");

                                                                IF "Account Type" = "Account Type"::Customer THEN BEGIN
                                                                  IF "Posting Group" <> '' THEN BEGIN
                                                                    CustomerPostingGroup.GET("Posting Group");
                                                                    DefaultDimension.SETRANGE("No.",CustomerPostingGroup."Receivables Account");
                                                                  END;
                                                                END;

                                                                IF "Account Type" = "Account Type"::Vendor THEN BEGIN
                                                                  IF "Posting Group" <> '' THEN BEGIN
                                                                    VendorPostingGroup.GET("Posting Group");
                                                                    DefaultDimension.SETRANGE("No.",VendorPostingGroup."Payables Account");
                                                                  END;
                                                                END;

                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
                                                                  IF "Posting Group" <> '' THEN BEGIN
                                                                    BankAccountPG.GET("Posting Group");
                                                                    DefaultDimension.SETRANGE("No.", BankAccountPG."G/L Bank Account No.");
                                                                  END;
                                                                END;

                                                                IF (("Account Type" = "Account Type"::Customer) OR ("Account Type" = "Account Type"::Vendor) OR
                                                                   ("Account Type" = "Account Type"::"Bank Account")) AND ("Posting Group" <> '')
                                                                THEN
                                                                  IF DefaultDimension.FINDSET THEN BEGIN
                                                                    //NC NOS-26 > SPA
                                                                    IF "Dimension Set ID" <> 0 THEN
                                                                      DimMgt.GetDimensionSet(TempDimSetEntry, "Dimension Set ID");
                                                                    //NC NOS-26 < SPA
                                                                    REPEAT
                                                                      //NC NOS-26 > SPA
                                                                      {
                                                                      JournalLineDimension.INIT;
                                                                      JournalLineDimension."Table ID" := DATABASE::"Gen. Journal Line";
                                                                      JournalLineDimension."Journal Template Name" := "Journal Template Name";
                                                                      JournalLineDimension."Journal Batch Name" := "Journal Batch Name";
                                                                      JournalLineDimension."Journal Line No." := "Line No.";
                                                                      JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";

                                                                      //NC 1707 > DP
                                                                      IF (DefaultDimension."Dimension Value Code" <> '') AND
                                                                         (DefaultDimension."Value Posting" IN [DefaultDimension."Value Posting"::"Code Mandatory",
                                                                            DefaultDimension."Value Posting"::"Same Code"])
                                                                      THEN
                                                                        JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                                                                      //NC 1707 < DP

                                                                      IF JournalLineDimension.INSERT THEN;
                                                                      //NC R1074 > PCH
                                                                      IF JournalLineDimension."Dimension Code" IN [GLSetup."Global Dimension 1 Code",
                                                                                                                   GLSetup."Global Dimension 2 Code"]
                                                                      THEN
                                                                        IF JournalLineDimension.GET(JournalLineDimension."Table ID",
                                                                                                    JournalLineDimension."Journal Template Name",
                                                                                                    JournalLineDimension."Journal Batch Name",
                                                                                                    JournalLineDimension."Journal Line No.",
                                                                                                    JournalLineDimension."Allocation Line No.",
                                                                                                    JournalLineDimension."Dimension Code")
                                                                        THEN BEGIN
                                                                          IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                                                                            "Shortcut Dimension 1 Code" := JournalLineDimension."Dimension Value Code";
                                                                          IF JournalLineDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                                                                            "Shortcut Dimension 2 Code" := JournalLineDimension."Dimension Value Code";
                                                                        END;
                                                                      //NC R1074 < PCH
                                                                      }
                                                                      TempDimSetEntry.INIT;
                                                                      TempDimSetEntry.VALIDATE("Dimension Code", DefaultDimension."Dimension Code");
                                                                      IF NOT TempDimSetEntry.FIND THEN BEGIN
                                                                        IF (DefaultDimension."Dimension Value Code" <> '') AND
                                                                           (DefaultDimension."Value Posting" IN [DefaultDimension."Value Posting"::"Code Mandatory",
                                                                              DefaultDimension."Value Posting"::"Same Code"])
                                                                        THEN BEGIN
                                                                          TempDimSetEntry.VALIDATE("Dimension Value Code", DefaultDimension."Dimension Value Code");
                                                                          TempDimSetEntry.INSERT;
                                                                        END;
                                                                      END;
                                                                      //NC NOS-26 < SPA
                                                                    UNTIL DefaultDimension.NEXT = 0;

                                                                    //NC NOS-26 > SPA
                                                                    DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
                                                                    //NC NOS-26 < SPA
                                                                  END;
                                                                //NC MTD02 < AIG

                                                                //NC NOS-26 > SPA
                                                                // не требуется
                                                                {
                                                                //NC S1074 > PCH
                                                                VALIDATE("Shortcut Dimension 1 Code");
                                                                VALIDATE("Shortcut Dimension 2 Code");
                                                                //NC S1074 < PCH
                                                                }
                                                                //NC NOS-26 < SPA

                                                                //NC OFA021 > DP
                                                                InsertLegalEntityDimValue(0);
                                                                //NC OFA021 < DP

                                                                //NC MTF002 > AKU
                                                                // IF "Account Type" = "Account Type"::"6" THEN
                                                                //  VALIDATE("Financial Instrument No.", "Account No.");
                                                                //NC MTF002 < AKU
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              RUS=Номер счета];
                                                   Description=NC MTD06 AIG, NC MTD02 AIG }
    { 5   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                IF "Unrealized VAT Entry No." <> 0 THEN BEGIN
                                                                  IF "Posting Date" < "Document Date" THEN
                                                                    FIELDERROR("Posting Date");
                                                                  EXIT;
                                                                END;

                                                                IF "Reinstatement VAT Entry No." <> 0 THEN
                                                                  VATReinstMgt.CheckPostingDate(Rec);

                                                                IF NOT "Check Printed" THEN BEGIN
                                                                  VALIDATE("Document Date","Posting Date");
                                                                  VALIDATE("Currency Code");
                                                                END;

                                                                IF ("Posting Date" <> xRec."Posting Date") AND (Amount <> 0) THEN
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);

                                                                ValidateApplyRequirements(Rec);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                IF xRec."Posting Date" <> "Posting Date" THEN
                                                                  AddPersonalDocInfo("Cash Order Including");

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              RUS=Дата учета];
                                                   ClosingDates=Yes }
    { 6   ;   ;Document Type       ;Option        ;OnValidate=VAR
                                                                Cust@1000 : Record 18;
                                                                Vend@1001 : Record 23;
                                                              BEGIN
                                                                IF NOT "Check Printed" THEN
                                                                  VALIDATE("Payment Terms Code");
                                                                IF "Account No." <> '' THEN
                                                                  CASE "Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Bal. Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Bal. Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                UpdateSalesPurchLCY;
                                                                ValidateApplyRequirements(Rec);
                                                                IF NOT ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Платеж,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 7   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                SetExportStatus;
                                                              END;

                                                   CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 10  ;   ;VAT %               ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        ROUND(Amount * "VAT %" / (100 + "VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount - "VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        Amount -
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",
                                                                          "Posting Date",Amount,Quantity,"Currency Factor");
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / (Amount - "VAT Amount"),0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "VAT Base Amount" := Amount - "VAT Amount";
                                                                "VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=[ENU=VAT %;
                                                              RUS=НДС (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 11  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                                Blocked=CONST(No))
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Job No.",'');

                                                                IF xRec."Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,
                                                                                                "Bal. Account Type"::"IC Partner"]
                                                                THEN
                                                                  "IC Partner Code" := '';

                                                                IF "Bal. Account No." = '' THEN BEGIN
                                                                  UpdateLineBalance;
                                                                  UpdateSource;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
                                                                    "Recipient Bank Account" := '';
                                                                  IF xRec."Bal. Account No." <> '' THEN BEGIN
                                                                    ClearBalancePostingGroups;
                                                                    "Bal. Tax Area Code" := '';
                                                                    "Bal. Tax Liable" := FALSE;
                                                                    "Bal. Tax Group Code" := '';
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                CASE "Bal. Account Type" OF
                                                                  "Bal. Account Type"::"G/L Account":
                                                                    GetGLBalAccount;
                                                                  "Bal. Account Type"::Customer:
                                                                    GetCustomerBalAccount;
                                                                  "Bal. Account Type"::Vendor:
                                                                    GetVendorBalAccount;
                                                                  "Bal. Account Type"::"Bank Account":
                                                                    GetBankBalAccount;
                                                                  "Bal. Account Type"::"Fixed Asset":
                                                                    GetFABalAccount;
                                                                  "Bal. Account Type"::"IC Partner":
                                                                    GetICPartnerBalAccount;
                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                VALIDATE("IC Partner G/L Acc. No.",GetDefaultICPartnerGLAccNo);
                                                                ValidateApplyRequirements(Rec);

                                                                //NC OFA021 > DP
                                                                InsertLegalEntityDimValue(1);
                                                                //NC OFA021 < DP
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              RUS=Номер баланс. счета] }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                BankAcc@1000 : Record 270;
                                                              BEGIN
                                                                IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc.GET("Bal. Account No.") AND (BankAcc."Currency Code" <> '')THEN
                                                                    BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc.GET("Account No.") AND (BankAcc."Currency Code" <> '') THEN
                                                                    BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF ("Recurring Method" IN
                                                                    ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
                                                                   ("Currency Code" <> '')
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  GetCurrency;
                                                                  IF ("Currency Code" <> xRec."Currency Code") OR
                                                                     ("Posting Date" <> xRec."Posting Date") OR
                                                                     (CurrFieldNo = FIELDNO("Currency Code")) OR
                                                                     ("Currency Factor" = 0)
                                                                  THEN
                                                                    //NC NCS-815 > DP
                                                                    IF "Reversing Entry" AND ("Source Historical Date" <> 0D) THEN
                                                                     "Currency Factor" := CurrExchRate.ExchangeRate("Source Historical Date","Currency Code")
                                                                    ELSE
                                                                    //NC NCS-815 < DP
                                                                    "Currency Factor" :=
                                                                      CurrExchRate.ExchangeRate("Posting Date","Currency Code");
                                                                END ELSE
                                                                  "Currency Factor" := 0;
                                                                VALIDATE("Currency Factor");

                                                                IF NOT CustVendAccountNosModified THEN
                                                                  IF ("Currency Code" <> xRec."Currency Code") AND (Amount <> 0) THEN
                                                                    PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=Код валюты] }
    { 13  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                IF GLSetup."Enable Russian Accounting" AND ("Unrealized VAT Entry No." <> 0) THEN BEGIN
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    IF ABS(Amount) > ABS("Paid Amount") THEN
                                                                      FIELDERROR(Amount,STRSUBSTNO(Text14925,"Paid Amount"));
                                                                    IF Amount * "Paid Amount" > 0 THEN
                                                                      IF Amount > 0 THEN
                                                                        ERROR(Text011,FIELDCAPTION(Amount))
                                                                      ELSE
                                                                        ERROR(Text012,FIELDCAPTION(Amount));
                                                                  END;
                                                                  ManualAmount := Amount <> xRec.Amount;
                                                                END;

                                                                IF "Reinstatement VAT Entry No." <> 0 THEN
                                                                  IF Amount <> 0 THEN
                                                                    VATReinstMgt.CheckAmount(Rec);

                                                                GetCurrency;
                                                                IF "Currency Code" = '' THEN
                                                                  "Amount (LCY)" := Amount
                                                                ELSE
                                                                  //NC PIF001 > DP 13.02.07 Проверка заполнения поля "Историческая Дата"
                                                                  IF "Source Historical Date" = 0D THEN BEGIN
                                                                  //NC PIF001 < DP 13.02.07
                                                                  "Amount (LCY)" := ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        Amount,"Currency Factor"));
                                                                  //NC PIF001 > DP 13.02.07
                                                                  END ELSE BEGIN
                                                                    //NC NCS-815 > DP
                                                                    IF "Reversing Entry" THEN
                                                                    //NC NCS-815 < DP

                                                                    "Currency Factor" := CurrExchRate.ExchangeRate("Source Historical Date","Currency Code");
                                                                    "Amount (LCY)" := ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Source Historical Date","Currency Code",
                                                                        Amount,"Currency Factor"));
                                                                  END;
                                                                  //NC PIF001 < DP 13.02.07

                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (CurrFieldNo <> FIELDNO("Applies-to Doc. No.")) AND
                                                                   ((("Account Type" = "Account Type"::Customer) AND
                                                                     ("Account No." <> '') AND (Amount > 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Bal. Account No."))) OR
                                                                    (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                                                                     ("Bal. Account No." <> '') AND (Amount < 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Account No."))))
                                                                THEN
                                                                  CustCheckCreditLimit.GenJnlLineCheck(Rec);

                                                                VALIDATE("VAT %");
                                                                VALIDATE("Bal. VAT %");
                                                                UpdateLineBalance;
                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");

                                                                IF Amount <> xRec.Amount THEN BEGIN
                                                                  IF ("Applies-to Doc. No." <> '') OR ("Applies-to ID" <> '') THEN
                                                                    SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                SetExportStatus;
                                                                UpdatePaymentVATInfo(TRUE);
                                                                IF xRec.Amount <> Amount THEN
                                                                  AddPersonalDocInfo("Cash Order Including");
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Debit Amount        ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Debit Amount" := ROUND("Debit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Debit Amount" < 0;
                                                                Amount := "Debit Amount";
                                                                VALIDATE(Amount);

                                                                SetExportStatus;
                                                              END;

                                                   CaptionML=[ENU=Debit Amount;
                                                              RUS=Сумма по дебету];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Credit Amount       ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Credit Amount" := ROUND("Credit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Credit Amount" < 0;
                                                                Amount := -"Credit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Credit Amount;
                                                              RUS=Сумма по кредиту];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN BEGIN
                                                                  Amount := "Amount (LCY)";
                                                                  VALIDATE(Amount);
                                                                END ELSE BEGIN
                                                                  IF CheckFixedCurrency THEN BEGIN
                                                                    GetCurrency;
                                                                    Amount := ROUND(
                                                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                                                          "Posting Date","Currency Code",
                                                                          "Amount (LCY)","Currency Factor"),
                                                                        Currency."Amount Rounding Precision")
                                                                  END ELSE BEGIN
                                                                    TESTFIELD("Amount (LCY)");
                                                                    TESTFIELD(Amount);
                                                                    "Currency Factor" := Amount / "Amount (LCY)";
                                                                  END;

                                                                  VALIDATE("VAT %");
                                                                  VALIDATE("Bal. VAT %");
                                                                  UpdateLineBalance;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount (LCY);
                                                              RUS=Сумма (руб.)];
                                                   Description=NC PIF001 MP,TR204 EB;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,16' }
    { 17  ;   ;Balance (LCY)       ;Decimal       ;CaptionML=[ENU=Balance (LCY);
                                                              RUS=Сальдо (руб.)];
                                                   Description=NC PIF001 MP;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,17' }
    { 18  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Currency Code" = '') AND ("Currency Factor" <> 0) THEN
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text002,FIELDCAPTION("Currency Code")));
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              RUS=Коэффициент курса валюты];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 19  ;   ;Sales/Purch. (LCY)  ;Decimal       ;CaptionML=[ENU=Sales/Purch. (LCY);
                                                              RUS=Продажа/покупка (руб.)];
                                                   Description=NC PIF001 MP;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,19' }
    { 20  ;   ;Profit (LCY)        ;Decimal       ;CaptionML=[ENU=Profit (LCY);
                                                              RUS=Прибыль (руб.)];
                                                   Description=NC PIF001 MP;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,20' }
    { 21  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=[ENU=Inv. Discount (LCY);
                                                              RUS=Скидка счета (руб.)];
                                                   Description=NC PIF001 MP;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,21' }
    { 22  ;   ;Bill-to/Pay-to No.  ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                IF "Bill-to/Pay-to No." <> xRec."Bill-to/Pay-to No." THEN
                                                                  "Ship-to/Order Address Code" := '';
                                                                ReadGLSetup;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Bill-to/Pay-to No.");
                                                              END;

                                                   CaptionML=[ENU=Bill-to/Pay-to No.;
                                                              RUS=Код плательщика/получ. оплаты];
                                                   Editable=No }
    { 23  ;   ;Posting Group       ;Code10        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   OnValidate=VAR
                                                                CustomerPostingGroup@1101495004 : Record 92;
                                                                VendorPostingGroup@1101495003 : Record 93;
                                                                BankAccountPG@1101495002 : Record 277;
                                                                DefaultDimension@1101495000 : Record 352;
                                                                TempDimSetEntry@1101495001 : TEMPORARY Record 480;
                                                              BEGIN
                                                                //NC MTD02 > AIG
                                                                DefaultDimension.RESET;
                                                                DefaultDimension.SETRANGE("Table ID", DATABASE::"G/L Account");
                                                                IF "Account Type" = "Account Type"::Customer THEN BEGIN
                                                                  IF "Posting Group" <> '' THEN BEGIN
                                                                    CustomerPostingGroup.GET("Posting Group");
                                                                    DefaultDimension.SETRANGE("No.",CustomerPostingGroup."Receivables Account");
                                                                  END;
                                                                END;

                                                                IF "Account Type" = "Account Type"::Vendor THEN BEGIN
                                                                  IF "Posting Group" <> '' THEN BEGIN
                                                                    VendorPostingGroup.GET("Posting Group");
                                                                    DefaultDimension.SETRANGE("No.",VendorPostingGroup."Payables Account");
                                                                  END;
                                                                END;

                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
                                                                  IF "Posting Group" <> '' THEN BEGIN
                                                                    BankAccountPG.GET("Posting Group");
                                                                    DefaultDimension.SETRANGE("No.", BankAccountPG."G/L Bank Account No.");
                                                                  END;
                                                                END;

                                                                IF (("Account Type" = "Account Type"::Customer) OR ("Account Type" = "Account Type"::Vendor) OR
                                                                   ("Account Type" = "Account Type"::"Bank Account")) AND ("Posting Group" <> '')
                                                                THEN
                                                                  IF DefaultDimension.FINDSET THEN BEGIN
                                                                    //NC NOS-26 > SPA
                                                                    IF "Dimension Set ID" <> 0 THEN
                                                                      DimMgt.GetDimensionSet(TempDimSetEntry, "Dimension Set ID");
                                                                    //NC NOS-26 < SPA
                                                                    REPEAT
                                                                      //NC MTD02.1 > DP
                                                                      IF DefaultDimension."Value Posting" <> DefaultDimension."Value Posting"::" " THEN BEGIN
                                                                      //NC MTD02.1 < DP

                                                                        //NC NOS-26 > SPA
                                                                        {
                                                                        JournalLineDimension.INIT;
                                                                        JournalLineDimension."Table ID" := DATABASE::"Gen. Journal Line";
                                                                        JournalLineDimension."Journal Template Name" := "Journal Template Name";
                                                                        JournalLineDimension."Journal Batch Name" := "Journal Batch Name";
                                                                        JournalLineDimension."Journal Line No." := "Line No.";
                                                                        JournalLineDimension."Dimension Code" := DefaultDimension."Dimension Code";
                                                                        //NC 1707 > DP
                                                                        IF (DefaultDimension."Dimension Value Code"<>'') AND
                                                                          (DefaultDimension."Value Posting" IN [DefaultDimension."Value Posting"::"Code Mandatory",
                                                                          DefaultDimension."Value Posting"::"Same Code"])
                                                                        THEN
                                                                           JournalLineDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                                                                        //NC 1707 < DP
                                                                        IF JournalLineDimension.INSERT THEN;
                                                                        }
                                                                        TempDimSetEntry.INIT;
                                                                        TempDimSetEntry.VALIDATE("Dimension Code", DefaultDimension."Dimension Code");
                                                                        IF NOT TempDimSetEntry.FIND THEN BEGIN
                                                                          IF (DefaultDimension."Dimension Value Code"<>'') AND
                                                                             (DefaultDimension."Value Posting" IN [DefaultDimension."Value Posting"::"Code Mandatory",
                                                                              DefaultDimension."Value Posting"::"Same Code"])
                                                                          THEN BEGIN
                                                                            TempDimSetEntry.VALIDATE("Dimension Value Code", DefaultDimension."Dimension Value Code");
                                                                            TempDimSetEntry.INSERT;
                                                                          END;
                                                                        END;
                                                                        //NC NOS-26 < SPA
                                                                      //NC MTD02.1 > DP
                                                                      END;
                                                                      //NC MTD02.1 < DP

                                                                    UNTIL DefaultDimension.NEXT = 0;
                                                                    DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
                                                                  END;
                                                                //NC MTD02 < AIG
                                                              END;

                                                   CaptionML=[ENU=Posting Group;
                                                              RUS=Учетная группа];
                                                   Description=NC TR266 EB editable=true;
                                                   Editable=Yes }
    { 24  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                //TDRANCS-897 >
                                                                GLSetup.GET;
                                                                fn_CreateLinkDim(GLSetup."Shortcut Dimension 1 Code","Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              RUS=Код ярлыка измерения 1];
                                                   CaptionClass='1,2,1' }
    { 25  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                //TDRANCS-897 >
                                                                GLSetup.GET;
                                                                fn_CreateLinkDim(GLSetup."Shortcut Dimension 2 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              RUS=Код ярлыка измерения 2];
                                                   CaptionClass='1,2,2' }
    { 26  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              RUS=Код менеджера] }
    { 29  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              RUS=Код источника];
                                                   Editable=No }
    { 30  ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              RUS=Созданная системой операция];
                                                   Editable=No }
    { 34  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              RUS=На удержании] }
    { 35  ;   ;Applies-to Doc. Type;Option        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. Type" <> xRec."Applies-to Doc. Type" THEN
                                                                  VALIDATE("Applies-to Doc. No.",'');
                                                                IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN
                                                                  TESTFIELD(Prepayment,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Applies-to Doc. Type;
                                                              RUS=Примен. к док. - тип];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Платеж,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 36  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=VAR
                                                                CustLedgEntry@1000 : Record 21;
                                                                VendLedgEntry@1003 : Record 25;
                                                                TempGenJnlLine@1001 : TEMPORARY Record 81;
                                                              BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD(Prepayment,FALSE);

                                                                IF "Applies-to Doc. No." <> xRec."Applies-to Doc. No." THEN
                                                                  ClearCustVendApplnEntry;

                                                                IF ("Applies-to Doc. No." = '') AND (xRec."Applies-to Doc. No." <> '') THEN BEGIN
                                                                  PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");

                                                                  TempGenJnlLine := Rec;
                                                                  IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
                                                                     (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
                                                                  THEN
                                                                    CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);

                                                                  IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
                                                                    CustLedgEntry.SETCURRENTKEY("Document No.");
                                                                    CustLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                    IF NOT (xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                      CustLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                    CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
                                                                    CustLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF CustLedgEntry.FINDFIRST THEN BEGIN
                                                                      IF CustLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                        CustLedgEntry."Amount to Apply" := 0;
                                                                        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
                                                                      END;
                                                                      "Exported to Payment File" := CustLedgEntry."Exported to Payment File";
                                                                      "Applies-to Ext. Doc. No." := '';
                                                                    END;
                                                                  END ELSE
                                                                    IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN BEGIN
                                                                      VendLedgEntry.SETCURRENTKEY("Document No.");
                                                                      VendLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                      IF NOT (xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                        VendLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                      VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
                                                                      VendLedgEntry.SETRANGE(Open,TRUE);
                                                                      IF VendLedgEntry.FINDFIRST THEN BEGIN
                                                                        IF VendLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                          VendLedgEntry."Amount to Apply" := 0;
                                                                          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
                                                                        END;
                                                                        "Exported to Payment File" := VendLedgEntry."Exported to Payment File";
                                                                      END;
                                                                      "Applies-to Ext. Doc. No." := '';
                                                                    END;
                                                                END;

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (Amount <> 0) THEN BEGIN
                                                                  IF xRec."Applies-to Doc. No." <> '' THEN
                                                                    PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");
                                                                  SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                  xRec.ClearAppliedGenJnlLine;
                                                                END;

                                                                CASE "Account Type" OF
                                                                  "Account Type"::Customer:
                                                                    GetCustLedgerEntry;
                                                                  "Account Type"::Vendor:
                                                                    GetVendLedgerEntry;
                                                                END;

                                                                ValidateApplyRequirements(Rec);
                                                                SetJournalLineFieldsFromApplication;
                                                              END;

                                                   OnLookup=VAR
                                                              PaymentToleranceMgt@1001 : Codeunit 426;
                                                              AccType@1002 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
                                                              AccNo@1003 : Code[20];
                                                            BEGIN
                                                              xRec.Amount := Amount;
                                                              xRec."Currency Code" := "Currency Code";
                                                              xRec."Posting Date" := "Posting Date";

                                                              GetAccTypeAndNo(Rec,AccType,AccNo);
                                                              CLEAR(CustLedgEntry);
                                                              CLEAR(VendLedgEntry);

                                                              CASE AccType OF
                                                                AccType::Customer:
                                                                  LookUpAppliesToDocCust(AccNo);
                                                                AccType::Vendor:
                                                                  LookUpAppliesToDocVend(AccNo);
                                                              END;
                                                              SetJournalLineFieldsFromApplication;

                                                              IF xRec.Amount <> 0 THEN
                                                                IF NOT PaymentToleranceMgt.PmtTolGenJnl(Rec) THEN
                                                                  EXIT;
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              RUS=Примен. к док. - номер] }
    { 38  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              RUS=Срок оплаты] }
    { 39  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              RUS=Дата скидки оплаты] }
    { 40  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              RUS=Скидка оплаты (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 42  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF "Job No." = xRec."Job No." THEN
                                                                  EXIT;

                                                                SourceCodeSetup.GET;
                                                                IF "Source Code" <> SourceCodeSetup."Job G/L WIP" THEN
                                                                  VALIDATE("Job Task No.",'');
                                                                IF "Job No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Account Type","Account Type"::"G/L Account");

                                                                IF "Bal. Account No." <> '' THEN
                                                                  IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"]) THEN
                                                                    ERROR(Text016,FIELDCAPTION("Bal. Account Type"));

                                                                Job.GET("Job No.");
                                                                Job.TestBlocked;
                                                                "Job Currency Code" := Job."Currency Code";

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Job No.;
                                                              RUS=Код работы] }
    { 43  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              RUS=Кол-во];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;VAT Amount          ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("VAT Calculation Type" IN
                                                                        ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("VAT Calculation Type"),
                                                                    "VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "VAT Amount" * Amount < 0 THEN
                                                                  IF "VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("VAT Amount"));

                                                                "VAT Base Amount" := Amount - "VAT Amount";

                                                                "VAT Difference" :=
                                                                  "VAT Amount" -
                                                                  ROUND(
                                                                    Amount * "VAT %" / (100 + "VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF ABS("VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(Text013,FIELDCAPTION("VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=[ENU=VAT Amount;
                                                              RUS=Сумма НДС];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 45  ;   ;VAT Posting         ;Option        ;CaptionML=[ENU=VAT Posting;
                                                              RUS=Учет НДС];
                                                   OptionCaptionML=[ENU=Automatic VAT Entry,Manual VAT Entry;
                                                                    RUS=Автомат. операция НДС,Выполн. вручную операция НДС];
                                                   OptionString=Automatic VAT Entry,Manual VAT Entry;
                                                   Editable=No }
    { 47  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                "Due Date" := 0D;
                                                                "Pmt. Discount Date" := 0D;
                                                                "Payment Discount %" := 0;
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
                                                                THEN
                                                                  CASE "Document Type" OF
                                                                    "Document Type"::Invoice:
                                                                      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                        "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                        "Payment Discount %" := PaymentTerms."Discount %";
                                                                      END;
                                                                    "Document Type"::"Credit Memo":
                                                                      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                          "Pmt. Discount Date" :=
                                                                            CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                          "Payment Discount %" := PaymentTerms."Discount %";
                                                                        END ELSE
                                                                          "Due Date" := "Document Date";
                                                                      END;
                                                                    ELSE
                                                                      "Due Date" := "Document Date";
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              RUS=Код условий платежа] }
    { 48  ;   ;Applies-to ID       ;Code50        ;OnValidate=BEGIN
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN
                                                                  ClearCustVendApplnEntry;
                                                                SetJournalLineFieldsFromApplication;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              RUS=Код применения] }
    { 50  ;   ;Business Unit Code  ;Code20        ;TableRelation="Business Unit";
                                                   OnValidate=VAR
                                                                BusinessUnit@1101495000 : Record 220;
                                                              BEGIN
                                                                //NCS2068 > AAP
                                                                IF ("Business Unit Code" <> '') AND (xRec."Business Unit Code" <> "Business Unit Code") THEN BEGIN
                                                                  BusinessUnit.GET("Business Unit Code");
                                                                  IF "Not Consolidate" AND
                                                                     (NOT BusinessUnit."Not Transfer to Cons. Company") AND
                                                                     (CurrFieldNo = FIELDNO("Business Unit Code")) AND
                                                                     GUIALLOWED
                                                                  THEN BEGIN
                                                                    MESSAGE(Text50003,"Business Unit Code","Line No.",BusinessUnit.FIELDCAPTION("Not Transfer to Cons. Company"));
                                                                  END;
                                                                  "Not Consolidate" := "Not Consolidate" OR BusinessUnit."Not Transfer to Cons. Company";
                                                                END;
                                                                IF ("Business Unit Code" = '') AND (xRec."Business Unit Code" <> '') THEN BEGIN
                                                                  IF BusinessUnit.GET(xRec."Business Unit Code") THEN BEGIN
                                                                    IF "Not Consolidate" AND
                                                                       BusinessUnit."Not Transfer to Cons. Company" AND
                                                                       (CurrFieldNo = FIELDNO("Business Unit Code")) AND
                                                                       GUIALLOWED
                                                                    THEN BEGIN
                                                                      MESSAGE(Text50004,xRec."Business Unit Code","Line No.",BusinessUnit.FIELDCAPTION("Not Transfer to Cons. Company"));
                                                                    END;
                                                                  END;
                                                                END;
                                                                //NCS2068 < AAP
                                                              END;

                                                   CaptionML=[ENU=Business Unit Code;
                                                              RUS=Код филиала];
                                                   Description=NC PIF011 10->20 }
    { 51  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              RUS=Код раздела журнала] }
    { 52  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              RUS=Код причины] }
    { 53  ;   ;Recurring Method    ;Option        ;OnValidate=BEGIN
                                                                IF "Recurring Method" IN
                                                                   ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]
                                                                THEN
                                                                  TESTFIELD("Currency Code",'');
                                                              END;

                                                   CaptionML=[ENU=Recurring Method;
                                                              RUS=Метод повторения];
                                                   OptionCaptionML=[ENU=" ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance";
                                                                    RUS=" ,F - фикс.,V - перем.,B - сальдо,RF - реверс фикс.,RV - реверс перем.,RB - реверс сальдо"];
                                                   OptionString=[ ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance];
                                                   BlankZero=Yes }
    { 54  ;   ;Expiration Date     ;Date          ;CaptionML=[ENU=Expiration Date;
                                                              RUS=Годен до] }
    { 55  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=[ENU=Recurring Frequency;
                                                              RUS=Частота повторения] }
    { 56  ;   ;Allocated Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Gen. Jnl. Allocation".Amount WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                        Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                        Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Allocated Amt. (LCY);
                                                              RUS=Распред. сумма (руб.)];
                                                   Description=NC PIF001 MP;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,56' }
    { 57  ;   ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                IF ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Gen. Posting Type");
                                                                CheckVATInAlloc;
                                                                IF "Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("VAT Prod. Posting Group");
                                                                IF "Gen. Posting Type" <> "Gen. Posting Type"::Purchase THEN
                                                                  VALIDATE("Use Tax",FALSE)
                                                              END;

                                                   CaptionML=[ENU=Gen. Posting Type;
                                                              RUS=Общий тип учета];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    RUS=" ,Покупка,Продажа,Зачет"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 58  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Bus. Posting Group",'');
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              RUS=Общая бизнес-группа] }
    { 59  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Prod. Posting Group",'');
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              RUS=Общая товарная группа] }
    { 60  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              RUS=Тип расчета НДС];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    RUS=Обычный НДС,Обратный НДС,Полный НДС,Налог с продаж];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 61  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              RUS=Торговля вне ЕС];
                                                   Editable=No }
    { 62  ;   ;Allow Application   ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Application;
                                                              RUS=Разрешить применение] }
    { 63  ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                ChecAccType(1);  // NC MIO-11 AES

                                                                // NC MTF02 > II

                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                                       "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                                            "Bal. Account Type"::"IC Partner"])

                                                                // IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                //    "Account Type"::"IC Partner", "Account Type"::"6"]) AND
                                                                //   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                //    "Bal. Account Type"::"IC Partner", "Account Type"::"6"])
                                                                // NC MTF02 < II
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Bal. Account No.",'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN BEGIN
                                                                  VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                  VALIDATE("Bal. Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Bal. Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Account Type" IN [
                                                                                        "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;
                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Bal. Account Type" IN
                                                                   [xRec."Bal. Account Type"::Customer,xRec."Bal. Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                  "VAT Registration No." := '';
                                                                END;
                                                                IF ("Account Type" IN [
                                                                                       "Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]) AND
                                                                   ("Bal. Account Type" IN [
                                                                                            "Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"])
                                                                THEN
                                                                  VALIDATE("Payment Terms Code",'');

                                                                IF "Bal. Account Type" = "Bal. Account Type"::"IC Partner" THEN BEGIN
                                                                  GetTemplate;
                                                                  IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                    FIELDERROR("Bal. Account Type");
                                                                END;
                                                                IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Bal. Account Type;
                                                              RUS=Тип баланс. счета];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    RUS=Счет ГК,Клиент,Поставщик,Банковский счет,Основное средство,МФ Партнер];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 64  ;   ;Bal. Gen. Posting Type;Option      ;OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                IF ("Bal. Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Bal. Gen. Posting Type");
                                                                IF "Bal. Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("Bal. VAT Prod. Posting Group");

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF "Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::Purchase THEN
                                                                  VALIDATE("Bal. Use Tax",FALSE);
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Posting Type;
                                                              RUS=Бал. - общий тип учета];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    RUS=" ,Покупка,Продажа,Зачет"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 65  ;   ;Bal. Gen. Bus. Posting Group;Code10;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                                                                IF xRec."Bal. Gen. Bus. Posting Group" <> "Bal. Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Bal. Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Bus. Posting Group;
                                                              RUS=Бал. - общая бизнес-группа] }
    { 66  ;   ;Bal. Gen. Prod. Posting Group;Code10;
                                                   TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                                                                IF xRec."Bal. Gen. Prod. Posting Group" <> "Bal. Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Bal. Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Prod. Posting Group;
                                                              RUS=Бал. - общая товарная группа] }
    { 67  ;   ;Bal. VAT Calculation Type;Option   ;CaptionML=[ENU=Bal. VAT Calculation Type;
                                                              RUS=Бал. - тип расчета НДС];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    RUS=Обычный НДС,Обратный НДС,Полный НДС,Налог с продаж];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 68  ;   ;Bal. VAT %          ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND(-Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "Bal. VAT Base Amount" :=
                                                                        ROUND(-Amount - "Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    "Bal. VAT Amount" := -Amount;
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        -(Amount -
                                                                          SalesTaxCalculate.ReverseCalculateTax(
                                                                            "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                            "Posting Date",Amount,Quantity,"Currency Factor"));
                                                                      IF Amount + "Bal. VAT Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * -"Bal. VAT Amount" / (Amount + "Bal. VAT Amount"),0.00001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");
                                                                "Bal. VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT %;
                                                              RUS=Бал. - НДС (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 69  ;   ;Bal. VAT Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("Bal. VAT Calculation Type" IN
                                                                        ["Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                    "Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "Bal. VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("Bal. VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "Bal. VAT Amount" :=
                                                                  ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "Bal. VAT Amount" * Amount > 0 THEN
                                                                  IF "Bal. VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("Bal. VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("Bal. VAT Amount"));

                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");

                                                                "Bal. VAT Difference" :=
                                                                  "Bal. VAT Amount" -
                                                                  ROUND(
                                                                    -Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF ABS("Bal. VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(
                                                                    Text013,FIELDCAPTION("Bal. VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Amount;
                                                              RUS=Бал. - сумма НДС];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Bank Payment Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Bank Payment Type" <> "Bank Payment Type"::" ") AND
                                                                   ("Account Type" <> "Account Type"::"Bank Account") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                IF ("Account Type" = "Account Type"::"Fixed Asset") AND
                                                                   ("Bank Payment Type" <> "Bank Payment Type"::" ")
                                                                THEN
                                                                  FIELDERROR("Account Type");
                                                              END;

                                                   AccessByPermission=TableData 270=R;
                                                   CaptionML=[ENU=Bank Payment Type;
                                                              RUS=Вид платежа];
                                                   OptionCaptionML=[ENU=" ,Computer Check,Manual Check";
                                                                    RUS=" ,Компьютерный,Ручной"];
                                                   OptionString=[ ,Computer Check,Manual Check] }
    { 71  ;   ;VAT Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "VAT Base Amount" := ROUND("VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        "VAT Base Amount" * (1 + "VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF "VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable","Posting Date",
                                                                          "VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=VAT Base Amount;
                                                              RUS=База расчета НДС];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Bal. VAT Base Amount;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Bal. VAT Base Amount" := ROUND("Bal. VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        -"Bal. VAT Base Amount" * (1 + "Bal. VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    IF "Bal. VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "Bal. VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                          "Bal. VAT Calculation Type"));
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                          "Posting Date","Bal. VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "Bal. VAT Base Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * "Bal. VAT Amount" / "Bal. VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Base Amount;
                                                              RUS=Бал. - база расчета НДС];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 73  ;   ;Correction          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Correction;
                                                              RUS=Корректировка] }
    { 75  ;   ;Check Printed       ;Boolean       ;AccessByPermission=TableData 272=R;
                                                   CaptionML=[ENU=Check Printed;
                                                              RUS=Платеж. документ напечатан];
                                                   Editable=No }
    { 76  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              RUS=Дата документа];
                                                   ClosingDates=Yes }
    { 77  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              RUS=Номер внешнего документа] }
    { 78  ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource
                                                                ELSE
                                                                  "Source No." := '';
                                                              END;

                                                   CaptionML=[ENU=Source Type;
                                                              RUS=Тип источника];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bank Account,Fixed Asset,Employee";
                                                                    RUS=" ,Клиент,Поставщик,Банковский счет,ОС,Сотрудник"];
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset,Employee] }
    { 79  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Source Type=CONST(Employee)) Employee;
                                                   OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource;
                                                              END;

                                                   CaptionML=[ENU=Source No.;
                                                              RUS=Номер источника] }
    { 80  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              RUS=Учетная серия номеров] }
    { 82  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              RUS=Код налоговой области] }
    { 83  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              RUS=Облагается налогом] }
    { 84  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              RUS=Код налоговой группы] }
    { 85  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Use Tax" THEN
                                                                  EXIT;
                                                                TESTFIELD("Gen. Posting Type","Gen. Posting Type"::Purchase);
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Use Tax;
                                                              RUS=Использовать налог] }
    { 86  ;   ;Bal. Tax Area Code  ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Area Code;
                                                              RUS=Бал. - код налоговой области] }
    { 87  ;   ;Bal. Tax Liable     ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Liable;
                                                              RUS=Бал. - облагается налогом] }
    { 88  ;   ;Bal. Tax Group Code ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Group Code;
                                                              RUS=Бал. - код налоговой группы] }
    { 89  ;   ;Bal. Use Tax        ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Bal. Use Tax" THEN
                                                                  EXIT;
                                                                TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::Purchase);
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Use Tax;
                                                              RUS=Бал. - налог за использ.] }
    { 90  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=VAR
                                                                l_cuGenJnlCheckLine@1101495001 : Codeunit 11;
                                                                l_recVATBusPostGr@1101495000 : Record 323;
                                                                l_Text001@1101495002 : TextConst 'ENU="For %1 = %2 posting does not allowed by date %3. Check setup %4.";RUS="Для %1 = %2 не разрешен учет датой %3. Проверьте настройку %4."';
                                                              BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Bus. Posting Group",'');

                                                                //TDRANCS-875 >
                                                                IF "Source Historical Date" = 0D THEN BEGIN
                                                                  IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Posting Date",0,"VAT Bus. Posting Group")
                                                                    THEN ERROR(l_Text001,FIELDCAPTION("VAT Bus. Posting Group"),
                                                                               "VAT Bus. Posting Group","Posting Date",l_recVATBusPostGr.TABLECAPTION);
                                                                END ELSE BEGIN
                                                                  IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Source Historical Date",0,"VAT Bus. Posting Group")
                                                                    THEN ERROR(l_Text001,FIELDCAPTION("VAT Bus. Posting Group"),
                                                                               "VAT Bus. Posting Group","Source Historical Date",l_recVATBusPostGr.TABLECAPTION);
                                                                END;
                                                                //TDRANCS-875 <

                                                                VALIDATE("VAT Prod. Posting Group");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              RUS=НДС бизнес-группа] }
    { 91  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=VAR
                                                                l_cuGenJnlCheckLine@1101495001 : Codeunit 11;
                                                                l_recVATProdPostGr@1101495000 : Record 324;
                                                                l_Text001@1101495002 : TextConst 'ENU="For %1 = %2 posting does not allowed by date %3. Check setup %4.";RUS="Для %1 = %2 не разрешен учет датой %3. Проверьте настройку %4."';
                                                              BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Prod. Posting Group",'');

                                                                //TDRANCS-875 >
                                                                IF "Source Historical Date" = 0D THEN BEGIN
                                                                  IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Posting Date",1,"VAT Prod. Posting Group")
                                                                    THEN ERROR(l_Text001,FIELDCAPTION("VAT Prod. Posting Group"),
                                                                               "VAT Prod. Posting Group","Posting Date",l_recVATProdPostGr.TABLECAPTION);
                                                                END ELSE BEGIN
                                                                  IF l_cuGenJnlCheckLine.fn_VATDateNotAllowed("Source Historical Date",1,"VAT Prod. Posting Group")
                                                                    THEN ERROR(l_Text001,FIELDCAPTION("VAT Prod. Posting Group"),
                                                                               "VAT Prod. Posting Group","Source Historical Date",l_recVATProdPostGr.TABLECAPTION);
                                                                END;
                                                                //TDRANCS-875 <

                                                                CheckVATInAlloc;

                                                                "VAT %" := 0;
                                                                "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
                                                                IF "Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  CASE "VAT Calculation Type" OF
                                                                    "VAT Calculation Type"::"Normal VAT":
                                                                      "VAT %" := VATPostingSetup."VAT %";
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      CASE "Gen. Posting Type" OF
                                                                        "Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("VAT %");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                //NC OFA002 > DP
                                                                IF "Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Fixed Asset"{,"Account Type"::"6"}] THEN
                                                                  SetVATTaxDim;
                                                                //NC OFA002 < DP
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              RUS=НДС товарная группа] }
    { 92  ;   ;Bal. VAT Bus. Posting Group;Code10 ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Bus. Posting Group",'');

                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Bus. Posting Group;
                                                              RUS=Бал. - НДС бизнес-группа] }
    { 93  ;   ;Bal. VAT Prod. Posting Group;Code10;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Prod. Posting Group",'');

                                                                "Bal. VAT %" := 0;
                                                                "Bal. VAT Calculation Type" := "Bal. VAT Calculation Type"::"Normal VAT";
                                                                IF "Bal. Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "Bal. VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  CASE "Bal. VAT Calculation Type" OF
                                                                    "Bal. VAT Calculation Type"::"Normal VAT":
                                                                      "Bal. VAT %" := VATPostingSetup."VAT %";
                                                                    "Bal. VAT Calculation Type"::"Full VAT":
                                                                      CASE "Bal. Gen. Posting Type" OF
                                                                        "Bal. Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Bal. Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("Bal. VAT %");

                                                                //NC OFA002 > DP
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Fixed Asset"] THEN
                                                                  SetVATTaxDim;
                                                                //NC OFA002 < DP
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Prod. Posting Group;
                                                              RUS=Бал. - НДС товарная группа] }
    { 95  ;   ;Additional-Currency Posting;Option ;CaptionML=[ENU=Additional-Currency Posting;
                                                              RUS=Учет (ДОВ)];
                                                   OptionCaptionML=[ENU=None,Amount Only,Additional-Currency Amount Only;
                                                                    RUS=Нет,Только сумма,Только сумма в ДОВ];
                                                   OptionString=None,Amount Only,Additional-Currency Amount Only;
                                                   Editable=No }
    { 98  ;   ;FA Add.-Currency Factor;Decimal    ;CaptionML=[ENU=FA Add.-Currency Factor;
                                                              RUS=Коэффициент курса валюты ОС (ДОВ)];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 99  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Source Currency Code;
                                                              RUS=Код исходной валюты];
                                                   Editable=No }
    { 100 ;   ;Source Currency Amount;Decimal     ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Source Currency Amount;
                                                              RUS=Сумма в исходной валюте];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 101 ;   ;Source Curr. VAT Base Amount;Decimal;
                                                   AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Source Curr. VAT Base Amount;
                                                              RUS=База расчета НДС в исходной валюте];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;Source Curr. VAT Amount;Decimal    ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Source Curr. VAT Amount;
                                                              RUS=Сумма НДС в исходной валюте];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 103 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              RUS=База НДС - скидка (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 104 ;   ;VAT Amount (LCY)    ;Decimal       ;CaptionML=[ENU=VAT Amount (LCY);
                                                              RUS=Сумма НДС (руб.)];
                                                   Description=NC PIF001 MP;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,104' }
    { 105 ;   ;VAT Base Amount (LCY);Decimal      ;CaptionML=[ENU=VAT Base Amount (LCY);
                                                              RUS=База расчета НДС (руб.)];
                                                   Description=NC PIF001 MP;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,105' }
    { 106 ;   ;Bal. VAT Amount (LCY);Decimal      ;CaptionML=[ENU=Bal. VAT Amount (LCY);
                                                              RUS=Бал. - сумма НДС (руб.)];
                                                   Description=NC PIF001 MP;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,106' }
    { 107 ;   ;Bal. VAT Base Amount (LCY);Decimal ;CaptionML=[ENU=Bal. VAT Base Amount (LCY);
                                                              RUS=Бал. - база расчета НДС (руб.)];
                                                   Description=NC PIF001 MP;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,107' }
    { 108 ;   ;Reversing Entry     ;Boolean       ;CaptionML=[ENU=Reversing Entry;
                                                              RUS=Операция сторнирования];
                                                   Editable=No }
    { 109 ;   ;Allow Zero-Amount Posting;Boolean  ;CaptionML=[ENU=Allow Zero-Amount Posting;
                                                              RUS=Разрешить учет нулевых сумм];
                                                   Editable=No }
    { 110 ;   ;Ship-to/Order Address Code;Code10  ;TableRelation=IF (Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.));
                                                   CaptionML=[ENU=Ship-to/Order Address Code;
                                                              RUS=Код адреса получателя заказа] }
    { 111 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              RUS=Разница НДС];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 112 ;   ;Bal. VAT Difference ;Decimal       ;CaptionML=[ENU=Bal. VAT Difference;
                                                              RUS=Бал. - разница НДС];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              RUS=Код МФ-партнера];
                                                   Editable=No }
    { 114 ;   ;IC Direction        ;Option        ;CaptionML=[ENU=IC Direction;
                                                              RUS=Направление МФ];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    RUS=Исходящие,Входящие];
                                                   OptionString=Outgoing,Incoming }
    { 116 ;   ;IC Partner G/L Acc. No.;Code20     ;TableRelation="IC G/L Account";
                                                   OnValidate=VAR
                                                                ICGLAccount@1000 : Record 410;
                                                              BEGIN
                                                                IF "Journal Template Name" <> '' THEN
                                                                  IF "IC Partner G/L Acc. No." <> '' THEN BEGIN
                                                                    GetTemplate;
                                                                    GenJnlTemplate.TESTFIELD(Type,GenJnlTemplate.Type::Intercompany);
                                                                    IF ICGLAccount.GET("IC Partner G/L Acc. No.") THEN
                                                                      ICGLAccount.TESTFIELD(Blocked,FALSE);
                                                                  END
                                                              END;

                                                   CaptionML=[ENU=IC Partner G/L Acc. No.;
                                                              RUS=МФ Номер счета ГК партнера] }
    { 117 ;   ;IC Partner Transaction No.;Integer ;CaptionML=[ENU=IC Partner Transaction No.;
                                                              RUS=МФ Номер транзакции партнера];
                                                   Editable=No }
    { 118 ;   ;Sell-to/Buy-from No.;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Sell-to/Buy-from No.");
                                                              END;

                                                   CaptionML=[ENU=Sell-to/Buy-from No.;
                                                              RUS=Код клиента/поставщика] }
    { 119 ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',0);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              RUS=ИНН] }
    { 120 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Registration No.");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              RUS=Код страны/региона] }
    { 121 ;   ;Prepayment          ;Boolean       ;OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                IF GLSetup."Enable Russian Accounting" AND Prepayment THEN BEGIN
                                                                  IF NOT ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) THEN
                                                                    FIELDERROR("Document Type");
                                                                  CLEAR("Applies-to Doc. Type");
                                                                  CLEAR("Applies-to Doc. No.");
                                                                  IF "Prepayment Document No." <> '' THEN
                                                                    VALIDATE("Prepayment Document No.","Prepayment Document No.")
                                                                  ELSE
                                                                    GenJnlLine."Prepayment Document No." := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepayment;
                                                              RUS=Предоплата] }
    { 122 ;   ;Financial Void      ;Boolean       ;CaptionML=[ENU=Financial Void;
                                                              RUS=Финансовая отмена];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF Description = '' THEN
                                                                  Description := COPYSTR(IncomingDocument.Description,1,MAXSTRLEN(Description));
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetGenJournalLine(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              RUS=Номер операции входящего документа] }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=[ENU=Creditor No.;
                                                              RUS=Номер кредитора];
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=BEGIN
                                                                IF "Payment Reference" <> '' THEN
                                                                  TESTFIELD("Creditor No.");
                                                              END;

                                                   CaptionML=[ENU=Payment Reference;
                                                              RUS=Ссылка на оплату];
                                                   Numeric=Yes }
    { 172 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              RUS=Код способа оплаты] }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35    ;CaptionML=[ENU=Applies-to Ext. Doc. No.;
                                                              RUS=Применяемый внешний номер документа] }
    { 288 ;   ;Recipient Bank Account;Code10      ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Account No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Bal. Account No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Bal. Account No.));
                                                   OnValidate=BEGIN
                                                                IF "Recipient Bank Account" = '' THEN
                                                                  EXIT;
                                                                IF ("Document Type" = "Document Type"::Invoice) AND
                                                                   (("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) OR
                                                                    ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]))
                                                                THEN
                                                                  "Recipient Bank Account" := '';
                                                              END;

                                                   CaptionML=[ENU=Recipient Bank Account;
                                                              RUS=Банковский счет получателя] }
    { 289 ;   ;Message to Recipient;Text140       ;CaptionML=[ENU=Message to Recipient;
                                                              RUS=Сообщение получателю] }
    { 290 ;   ;Exported to Payment File;Boolean   ;CaptionML=[ENU=Exported to Payment File;
                                                              RUS=Экспортировано в файл платежей];
                                                   Editable=No }
    { 291 ;   ;Has Payment Export Error;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Payment Jnl. Export Error Text" WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                             Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                             Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Has Payment Export Error;
                                                              RUS=Имеет ошибку экспорта платежа];
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              RUS=Код набора измерений];
                                                   Editable=No }
    { 827 ;   ;Credit Card No.     ;Code20        ;CaptionML=[ENU=Credit Card No.;
                                                              RUS=Номер кредитной карты] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                IF "Job Task No." <> xRec."Job Task No." THEN
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  "Job Quantity" := 0;
                                                                  "Job Currency Factor" := 0;
                                                                  "Job Currency Code" := '';
                                                                  "Job Unit Price" := 0;
                                                                  "Job Total Price" := 0;
                                                                  "Job Line Amount" := 0;
                                                                  "Job Line Discount Amount" := 0;
                                                                  "Job Unit Cost" := 0;
                                                                  "Job Total Cost" := 0;
                                                                  "Job Line Discount %" := 0;

                                                                  "Job Unit Price (LCY)" := 0;
                                                                  "Job Total Price (LCY)" := 0;
                                                                  "Job Line Amount (LCY)" := 0;
                                                                  "Job Line Disc. Amount (LCY)" := 0;
                                                                  "Job Unit Cost (LCY)" := 0;
                                                                  "Job Total Cost (LCY)" := 0;
                                                                  EXIT;
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  CopyDimensionsFromJobTaskLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Task No.;
                                                              RUS=Номер рабочего задания] }
    { 1002;   ;Job Unit Price (LCY);Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Price (LCY);
                                                              RUS=Цена единицы работы (руб.)];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1003;   ;Job Total Price (LCY);Decimal      ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Price (LCY);
                                                              RUS=Общая цена работы (руб.)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1004;   ;Job Quantity        ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  IF "Job Planning Line No." <> 0 THEN
                                                                    VALIDATE("Job Planning Line No.");
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Quantity;
                                                              RUS=Объем работы];
                                                   DecimalPlaces=0:5 }
    { 1005;   ;Job Unit Cost (LCY) ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Cost (LCY);
                                                              RUS=Себестоимость единицы работы (руб.)];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1006;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Discount %;
                                                              RUS=Скидка строки работы (%)];
                                                   AutoFormatType=1 }
    { 1007;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Disc. Amount (LCY);
                                                              RUS=Сумма скидки строки работы (руб.)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1008;   ;Job Unit Of Measure Code;Code10    ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Job Unit Of Measure Code;
                                                              RUS=Код единицы работы] }
    { 1009;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text019,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Type;
                                                              RUS=Тип строки работы];
                                                   OptionCaptionML=[ENU=" ,Budget,Billable,Both Budget and Billable";
                                                                    RUS=" ,Бюджет,К оплате,Бюджет и к оплате"];
                                                   OptionString=[ ,Budget,Billable,Both Budget and Billable] }
    { 1010;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Price;
                                                              RUS=Цена единицы работы];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1011;   ;Job Total Price     ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Price;
                                                              RUS=Общая цена работы];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1012;   ;Job Unit Cost       ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Cost;
                                                              RUS=Себестоимость единицы работы];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1013;   ;Job Total Cost      ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Cost;
                                                              RUS=Работа (итоговая себест.)];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1014;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Discount Amount;
                                                              RUS=Сумма скидки строки работы];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1015;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Amount;
                                                              RUS=Сумма строки работы];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1016;   ;Job Total Cost (LCY);Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Cost (LCY);
                                                              RUS=Работа (итоговая себест.) (руб.)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1017;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Amount (LCY);
                                                              RUS=Сумма строки работы (руб.)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Job Currency Factor ;Decimal       ;CaptionML=[ENU=Job Currency Factor;
                                                              RUS=Коэффициент курса валюты для работы] }
    { 1019;   ;Job Currency Code   ;Code10        ;OnValidate=BEGIN
                                                                IF ("Job Currency Code" <> xRec."Job Currency Code") OR ("Job Currency Code" <> '') THEN
                                                                  IF JobTaskIsSet THEN BEGIN
                                                                    CreateTempJobJnlLine;
                                                                    UpdatePricesFromJobJnlLine;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Job Currency Code;
                                                              RUS=Код валюты работы] }
    { 1020;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                  JobPlanningLine.TESTFIELD("No.","Account No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - "Job Quantity");
                                                                END ELSE
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 1003;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                              JobPlanningLine.SETRANGE("No.","Account No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Planning Line No.;
                                                              RUS=Номер строки планирования работ];
                                                   BlankZero=Yes }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF ("Job Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text018,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Job Remaining Qty." < 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Job Remaining Qty." > 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Remaining Qty.;
                                                              RUS=Остающееся количество работы];
                                                   DecimalPlaces=0:5 }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation=IF (Account Type=CONST(Customer)) "SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Account No.));
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record 1230;
                                                              BEGIN
                                                                IF "Direct Debit Mandate ID" = '' THEN
                                                                  EXIT;
                                                                TESTFIELD("Account Type","Account Type"::Customer);
                                                                SEPADirectDebitMandate.GET("Direct Debit Mandate ID");
                                                                SEPADirectDebitMandate.TESTFIELD("Customer No.","Account No.");
                                                                "Recipient Bank Account" := SEPADirectDebitMandate."Customer Bank Account Code";
                                                              END;

                                                   CaptionML=[ENU=Direct Debit Mandate ID;
                                                              RUS=Идентификатор поручения на прямое дебетование] }
    { 1220;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch. Entry No.;
                                                              RUS=Номер операции обмена данными];
                                                   Editable=No }
    { 1221;   ;Payer Information   ;Text50        ;CaptionML=[ENU=Payer Information;
                                                              RUS=Сведения о плательщике] }
    { 1222;   ;Transaction Information;Text100    ;CaptionML=[ENU=Transaction Information;
                                                              RUS=Информация о транзакции] }
    { 1223;   ;Data Exch. Line No. ;Integer       ;CaptionML=[ENU=Data Exch. Line No.;
                                                              RUS=Номер строки обмена данными];
                                                   Editable=No }
    { 1224;   ;Applied Automatically;Boolean      ;CaptionML=[ENU=Applied Automatically;
                                                              RUS=Применено автоматически] }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=VAR
                                                                DeferralUtilities@1002 : Codeunit 1720;
                                                              BEGIN
                                                                IF "Deferral Code" <> '' THEN
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");

                                                                DeferralUtilities.DeferralCodeOnValidate("Deferral Code",DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",
                                                                  0,'',"Line No.",GetDeferralAmount,"Posting Date",Description,"Currency Code");
                                                              END;

                                                   CaptionML=[ENU=Deferral Code;
                                                              RUS=Код РБП] }
    { 1701;   ;Deferral Line No.   ;Integer       ;CaptionML=[ENU=Deferral Line No.;
                                                              RUS=Номер строки РБП] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              RUS=Код кампании] }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=[ENU=Prod. Order No.;
                                                              RUS=Номер производственного заказа];
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Date;
                                                              RUS=Дата учета ОС] }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF  NOT (("Account Type" = "Account Type"::"Fixed Asset") OR
                                                                         ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")) AND
                                                                   ("FA Posting Type" = "FA Posting Type"::" ")
                                                                THEN BEGIN
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "No. of Depreciation Days" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                  "FA Reclassification Entry" := FALSE;
                                                                  "FA Error Entry No." := 0;
                                                                END;

                                                                ReadGLSetup;
                                                                IF GLSetup."Enable Russian Accounting" THEN
                                                                  "Depr. until FA Posting Date" := "FA Posting Type" = "FA Posting Type"::Disposal;

                                                                IF "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" THEN
                                                                  TESTFIELD("Insurance No.",'');
                                                                IF "FA Posting Type" <> "FA Posting Type"::Maintenance THEN
                                                                  TESTFIELD("Maintenance Code",'');

                                                                //NC MCO05 > DP
                                                                SetFAConsOperType;
                                                                //NC MCO05 < DP

                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;

                                                                //NC MFA01 > DP
                                                                SetFAOperTypeDim("FA Posting Type");
                                                                //NC MFA01 < DP
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Type;
                                                              RUS=Тип учета ОС];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance";
                                                                    RUS=" ,Стоимость приобретения,Амортизация,Понижение,Повышение,Польз. метод 1,Польз. метод 2,Реализация,Обслуживание"];
                                                   OptionString=[ ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=VAR
                                                                FADeprBook@1000 : Record 5612;
                                                              BEGIN
                                                                IF "Depreciation Book Code" = '' THEN
                                                                  EXIT;

                                                                IF ("Account No." <> '') AND
                                                                   ("Account Type" = "Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                END;

                                                                IF ("Bal. Account No." <> '') AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                END;

                                                                //NC MCO05 > DP
                                                                SetFAConsOperType;
                                                                //NC MCO05 < DP

                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;

                                                                //NC MFA01 > DP
                                                                SetFAOperTypeDim("FA Posting Type");
                                                                //NC MFA01 < DP
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              RUS=Код книги амортизации] }
    { 5603;   ;Salvage Value       ;Decimal       ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Salvage Value;
                                                              RUS=Ликвидационная стоимость];
                                                   AutoFormatType=1 }
    { 5604;   ;No. of Depreciation Days;Integer   ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=No. of Depreciation Days;
                                                              RUS=Число дней амортизации];
                                                   BlankZero=Yes }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Depr. until FA Posting Date;
                                                              RUS=Амортизация до даты учета ОС] }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Depr. Acquisition Cost;
                                                              RUS=Аморт. - стоим. приобретения] }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   OnValidate=BEGIN
                                                                IF "Maintenance Code" <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::Maintenance);
                                                              END;

                                                   CaptionML=[ENU=Maintenance Code;
                                                              RUS=Код обслуживания] }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   OnValidate=BEGIN
                                                                IF "Insurance No." <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::"Acquisition Cost");
                                                              END;

                                                   CaptionML=[ENU=Insurance No.;
                                                              RUS=Номер страхования] }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=VAR
                                                                FA@1000 : Record 5600;
                                                              BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD("Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Budgeted FA No.;
                                                              RUS=Номер бюджетного ОС] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              RUS=Дубл. в книге амортизации] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Use Duplication List;
                                                              RUS=Использ. список дублирования] }
    { 5614;   ;FA Reclassification Entry;Boolean  ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Reclassification Entry;
                                                              RUS=Операция реклассификации ОС] }
    { 5615;   ;FA Error Entry No.  ;Integer       ;TableRelation="FA Ledger Entry";
                                                   CaptionML=[ENU=FA Error Entry No.;
                                                              RUS=Номер ошибочной операции ОС];
                                                   BlankZero=Yes }
    { 5616;   ;Index Entry         ;Boolean       ;CaptionML=[ENU=Index Entry;
                                                              RUS=Операция переоценки] }
    { 5617;   ;Source Line No.     ;Integer       ;CaptionML=[ENU=Source Line No.;
                                                              RUS=Номер строки источника] }
    { 5618;   ;Comment             ;Text250       ;CaptionML=[ENU=Comment;
                                                              RUS=Комментарий] }
    { 12400;  ;Initial Entry No.   ;Integer       ;CaptionML=[ENU=Initial Entry No.;
                                                              RUS=Номер начальной операции] }
    { 12401;  ;Beneficiary Bank Code;Code10       ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(G/L Account)) "Bank Account Details".Code WHERE (G/L Account=FIELD(Account No.));
                                                   OnValidate=VAR
                                                                BankAccountDetails@1210000 : Record 12436;
                                                              BEGIN
                                                                IF ("Account Type" = "Account Type"::"G/L Account") AND
                                                                   ("Beneficiary Bank Code" <> xRec."Beneficiary Bank Code") AND
                                                                   ("Beneficiary Bank Code" <> '')
                                                                THEN BEGIN
                                                                  BankAccountDetails.GET("Beneficiary Bank Code");
                                                                  BankAccountDetails.TESTFIELD("G/L Account");
                                                                  VALIDATE("Account No.",BankAccountDetails."G/L Account");
                                                                  "Beneficiary Bank Code" := BankAccountDetails.Code;
                                                                  "Bank Acc. Details VAT Reg. No." := BankAccountDetails."VAT Registration No.";
                                                                  "Bank Acc. Dtls. Bank Acc. No." := BankAccountDetails."Bank Account No.";
                                                                END;
                                                                SetExportStatus;
                                                                UpdatePaymentVATInfo(TRUE);
                                                              END;

                                                   CaptionML=[ENU=Beneficiary Bank Code;
                                                              RUS=Код банка получателя] }
    { 12402;  ;Payment Purpose     ;Text250       ;OnValidate=BEGIN
                                                                UpdatePaymentVATInfo(FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF PAGE.RUNMODAL(0,StdText) = ACTION::LookupOK THEN
                                                                "Payment Purpose" := StdText.Description;
                                                              UpdatePaymentVATInfo(FALSE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Payment Purpose;
                                                              RUS=Цель платежа] }
    { 12403;  ;Cash Order Including;Text250       ;OnValidate=BEGIN
                                                                UpdatePaymentVATInfo(FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF PAGE.RUNMODAL(0,StdText) = ACTION::LookupOK THEN
                                                                "Cash Order Including" := StdText.Description;
                                                              UpdatePaymentVATInfo(FALSE);
                                                            END;

                                                   CaptionML=[ENU=Cash Order Including;
                                                              RUS=Кассовый ордер - включ.] }
    { 12404;  ;Cash Order Supplement;Text80       ;OnValidate=BEGIN
                                                                UpdatePaymentVATInfo(FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF PAGE.RUNMODAL(0,StdText) = ACTION::LookupOK THEN
                                                                "Cash Order Supplement" := StdText.Description;
                                                              UpdatePaymentVATInfo(FALSE);
                                                            END;

                                                   CaptionML=[ENU=Cash Order Supplement;
                                                              RUS=Кассовый ордер - приложение] }
    { 12405;  ;Payment Method      ;Option        ;CaptionML=[ENU=Payment Method;
                                                              RUS=Способ платежа];
                                                   OptionCaptionML=[ENU=" ,Mail,Telegraph,Through Moscow,Clearing,Electronic";
                                                                    RUS=" ,Почтой,Телеграфом,Через Москву,Клиринг,Электронный"];
                                                   OptionString=[ ,Mail,Telegraph,Through Moscow,Clearing,Electronic] }
    { 12406;  ;Payment Date        ;Date          ;CaptionML=[ENU=Payment Date;
                                                              RUS=Дата оплаты] }
    { 12407;  ;Payment Subsequence ;Text2         ;CaptionML=[ENU=Payment Subsequence;
                                                              RUS=Очередность платежа] }
    { 12408;  ;Payment Code        ;Text20        ;CaptionML=[ENU=Payment Code;
                                                              RUS=Код платежа] }
    { 12409;  ;Payment Assignment  ;Text15        ;CaptionML=[ENU=Payment Assignment;
                                                              RUS=Назначение платежа] }
    { 12410;  ;Payment Type        ;Text5         ;CaptionML=[ENU=Payment Type;
                                                              RUS=Тип платежа] }
    { 12411;  ;Debit Amount (LCY)  ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Amount (LCY)",ROUND("Debit Amount (LCY)"));
                                                              END;

                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              RUS=Сумма по дебету (руб.)];
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,12411' }
    { 12412;  ;Credit Amount (LCY) ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Amount (LCY)",-ROUND("Credit Amount (LCY)"));
                                                              END;

                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              RUS=Сумма по кредиту (руб.)];
                                                   AutoFormatType=1;
                                                   CaptionClass='1,11,1,81,12412' }
    { 12413;  ;Prepmt. Diff.       ;Boolean       ;CaptionML=[ENU=Prepmt. Diff.;
                                                              RUS=Разница по предоплате];
                                                   Editable=No }
    { 12417;  ;VAT Transaction No. ;Integer       ;OnLookup=VAR
                                                              DtldVendLedgEntry@1470000 : Record 380;
                                                              DtldCustLedgEntry@1470001 : Record 379;
                                                            BEGIN
                                                              CASE "Account Type" OF
                                                                "Account Type"::Vendor:
                                                                  BEGIN
                                                                    DtldVendLedgEntry.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
                                                                    IF "VAT Transaction No." <> 0 THEN
                                                                      DtldVendLedgEntry.SETRANGE("Transaction No.","VAT Transaction No.");
                                                                    DtldVendLedgEntry.SETRANGE("Vendor No.","Account No.");
                                                                    IF "VAT Settlement Part" = "VAT Settlement Part"::" " THEN
                                                                      DtldVendLedgEntry.SETFILTER("Entry Type",'%1|%2|%3',DtldVendLedgEntry."Entry Type"::Application,
                                                                                                                          DtldVendLedgEntry."Entry Type"::"Realized Loss",
                                                                                                                          DtldVendLedgEntry."Entry Type"::"Realized Gain");
                                                                    PAGE.RUN(0,DtldVendLedgEntry);
                                                                  END;
                                                                "Account Type"::Customer:
                                                                  BEGIN
                                                                    DtldCustLedgEntry.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
                                                                    IF "VAT Transaction No." <> 0 THEN
                                                                      DtldCustLedgEntry.SETRANGE("Transaction No.","VAT Transaction No.");
                                                                    DtldCustLedgEntry.SETRANGE("Customer No.","Account No.");
                                                                    PAGE.RUN(0,DtldCustLedgEntry);
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=VAT Transaction No.;
                                                              RUS=Номер транзакции НДС] }
    { 12418;  ;VAT Settlement Part ;Option        ;CaptionML=[ENU=VAT Settlement Part;
                                                              RUS=Часть зачета НДС];
                                                   OptionCaptionML=[ENU=" ,,,,,,,Custom";
                                                                    RUS=" ,,,,,,,Польз."];
                                                   OptionString=[ ,,,,,,,Custom];
                                                   Editable=No }
    { 12419;  ;Unrealized VAT Entry No.;Integer   ;TableRelation="VAT Entry"."Entry No.";
                                                   OnValidate=VAR
                                                                VATEntry@1470000 : Record 254;
                                                                VATPostingSetup@1470001 : Record 325;
                                                                VendLedgEntry@1470002 : Record 25;
                                                                CustLedgEntry@1470003 : Record 21;
                                                              BEGIN
                                                                "VAT Settlement Part" := "VAT Settlement Part"::Custom;
                                                                VATEntry.GET("Unrealized VAT Entry No.");
                                                                IF VATEntry."VAT Calculation Type" = VATEntry."VAT Calculation Type"::"Full VAT" THEN
                                                                  VATEntry.TESTFIELD("Unrealized Amount")
                                                                ELSE
                                                                  VATEntry.TESTFIELD("Unrealized Base");
                                                                "Initial Entry No." := VATEntry."CV Ledg. Entry No.";
                                                                VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
                                                                CASE VATEntry.Type OF
                                                                  VATEntry.Type::Purchase:
                                                                    BEGIN
                                                                      "Account Type" := "Account Type"::Vendor;
                                                                      "Bal. Account No." := VATPostingSetup."Purch. VAT Unreal. Account";
                                                                      IF VendLedgEntry.GET(VATEntry."CV Ledg. Entry No.") THEN BEGIN
                                                                        Description := VendLedgEntry.Description;
                                                                        "Posting Group" := VendLedgEntry."Vendor Posting Group";
                                                                        "Dimension Set ID" := VendLedgEntry."Dimension Set ID";
                                                                        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                      END;
                                                                    END;
                                                                  VATEntry.Type::Sale:
                                                                    BEGIN
                                                                      "Account Type" := "Account Type"::Customer;
                                                                      "Bal. Account No." := VATPostingSetup."Sales VAT Unreal. Account";
                                                                      IF CustLedgEntry.GET(VATEntry."CV Ledg. Entry No.") THEN BEGIN
                                                                        Description := CustLedgEntry.Description;
                                                                        "Posting Group" := CustLedgEntry."Customer Posting Group";
                                                                        "Dimension Set ID" := CustLedgEntry."Dimension Set ID";
                                                                        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                      END;
                                                                    END;
                                                                END;
                                                                IF VATEntry."Bill-to/Pay-to No." <> '' THEN
                                                                  "Account No." := VATEntry."Bill-to/Pay-to No."
                                                                ELSE BEGIN
                                                                  "Account Type" := VATEntry."Object Type";
                                                                  "Account No." := VATEntry."Object No.";
                                                                END;
                                                                "Object Type" := VATEntry."Object Type";
                                                                "Object No." := VATEntry."Object No.";
                                                                "Document Type" := VATEntry."Document Type";
                                                                "Document No." := VATEntry."Document No.";
                                                                "Paid Amount" := VATEntry."Remaining Unrealized Amount"; // To rename
                                                                "Unrealized Amount" := VATEntry."Unrealized Amount";
                                                                "Posting Date" := VATEntry."Posting Date";
                                                                "Document Date" := VATEntry."Posting Date";
                                                                "Prepmt. Diff." := VATEntry."Prepmt. Diff.";
                                                                Correction := FALSE;
                                                                "Currency Code" := '';
                                                                CALCFIELDS("Allocated VAT Amount");
                                                                Amount := -"Allocated VAT Amount";
                                                              END;

                                                   CaptionML=[ENU=Unrealized VAT Entry No.;
                                                              RUS=Номер операции нереал. НДС];
                                                   BlankZero=Yes }
    { 12420;  ;Paid Amount         ;Decimal       ;CaptionML=[ENU=Paid Amount;
                                                              RUS=Оплаченная сумма];
                                                   Editable=No }
    { 12421;  ;FA Location Code    ;Code10        ;TableRelation="FA Location";
                                                   CaptionML=[ENU=FA Location Code;
                                                              RUS=Код местонахождения ОС] }
    { 12422;  ;Initial VAT Entry No.;Integer      ;TableRelation=IF (Account Type=CONST(Vendor)) "VAT Entry"."Entry No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                                Document No.=FIELD(Document No.),
                                                                                                                                Type=CONST(Purchase),
                                                                                                                                Unrealized VAT Entry No.=FILTER(<>0),
                                                                                                                                Bill-to/Pay-to No.=FIELD(Account No.),
                                                                                                                                Prepmt. Diff.=CONST(No))
                                                                                                                                ELSE IF (Account Type=CONST(Customer)) "VAT Entry"."Entry No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                                                                                                      Document No.=FIELD(Document No.),
                                                                                                                                                                                                      Type=CONST(Sale),
                                                                                                                                                                                                      Bill-to/Pay-to No.=FIELD(Account No.),
                                                                                                                                                                                                      Unrealized VAT Entry No.=FILTER(<>0),
                                                                                                                                                                                                      Prepmt. Diff.=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Prepmt. Diff.");
                                                              END;

                                                   CaptionML=[ENU=Initial VAT Entry No.;
                                                              RUS=Номер начальной операции НДС] }
    { 12423;  ;Object Type         ;Option        ;CaptionML=[ENU=Object Type;
                                                              RUS=Тип объекта];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,Employee;
                                                                    RUS=Счет ГК,Клиент,Поставщик,Банковский счет,Основное средство,МФ Партнер];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,Employee }
    { 12424;  ;Object No.          ;Code20        ;TableRelation=IF (Object Type=CONST(Customer)) Customer
                                                                 ELSE IF (Object Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Object Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Object Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Object Type=CONST(G/L Account)) "G/L Account";
                                                   CaptionML=[ENU=Object No.;
                                                              RUS=Номер объекта] }
    { 12425;  ;Prepayment Document No.;Code20     ;TableRelation=IF (Account Type=CONST(Customer)) "Sales Header".No. WHERE (Document Type=FILTER(Order|Invoice),
                                                                                                                             Bill-to Customer No.=FIELD(Account No.),
                                                                                                                             Agreement No.=FIELD(Agreement No.))
                                                                                                                             ELSE IF (Account Type=CONST(Vendor)) "Purchase Header".No. WHERE (Document Type=FILTER(Order|Invoice),
                                                                                                                                                                                               Buy-from Vendor No.=FIELD(Account No.),
                                                                                                                                                                                               Agreement No.=FIELD(Agreement No.));
                                                   OnValidate=VAR
                                                                Cust@1210000 : Record 18;
                                                              BEGIN
                                                                TESTFIELD(Prepayment,TRUE);
                                                                IF "Account Type" = "Account Type"::Customer THEN
                                                                  Cust.CheckPrepaymentDocNo(Rec,FALSE);
                                                              END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Prepayment Document No.;
                                                              RUS=Номер документа предоплаты] }
    { 12426;  ;Prepayment Status   ;Option        ;CaptionML=[ENU=Prepayment Status;
                                                              RUS=Статус предоплаты];
                                                   OptionCaptionML=[ENU=" ,Set,Reset";
                                                                    RUS=" ,Постановка,Снятие"];
                                                   OptionString=[ ,Set,Reset] }
    { 12427;  ;Advance VAT Base Amount;Decimal    ;CaptionML=[ENU=Advance VAT Base Amount;
                                                              RUS=Аванс - база расчета НДС] }
    { 12428;  ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              RUS=Номер строки документа] }
    { 12429;  ;Prepmt. Diff. Appln. Entry No.;Integer;
                                                   CaptionML=[ENU=Prepmt. Diff. Appln. Entry No.;
                                                              RUS=Ном. операции примен. для предоплаты разн.];
                                                   Editable=No }
    { 12430;  ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Employee No.;
                                                              RUS=Код сотрудника] }
    { 12431;  ;Corrective Doc. Type;Option        ;CaptionML=[ENU=Corrective Doc. Type;
                                                              RUS=Тип корректирующего док.];
                                                   OptionCaptionML=[ENU=" ,Correction,Revision";
                                                                    RUS=" ,Коррекция,Редакция"];
                                                   OptionString=[ ,Correction,Revision] }
    { 12434;  ;Initial Document No.;Code20        ;TableRelation=IF (Account Type=CONST(Vendor),
                                                                     Document Type=FILTER(Payment|Refund)) "Purch. Inv. Header" WHERE (Buy-from Vendor No.=FIELD(Account No.));
                                                   CaptionML=[ENU=Initial Document No.;
                                                              RUS=Номер начального документа] }
    { 12435;  ;Vendor VAT Invoice No.;Code30      ;CaptionML=[ENU=Vendor VAT Invoice No.;
                                                              RUS=Номер счета-фактуры поставщика] }
    { 12436;  ;Vendor VAT Invoice Date;Date       ;CaptionML=[ENU=Vendor VAT Invoice Date;
                                                              RUS=Дата счета-фактуры поставщика] }
    { 12437;  ;Vendor VAT Invoice Rcvd Date;Date  ;CaptionML=[ENU=Vendor VAT Invoice Rcvd Date;
                                                              RUS=Дата получения счета-фактуры поставщика] }
    { 12445;  ;VAT Entry Type      ;Code15        ;OnValidate=VAR
                                                                VATEntryType@1210000 : Record 14949;
                                                              BEGIN
                                                                VATEntryType.ValidateSetOfVATEntryCodes("VAT Entry Type");
                                                              END;

                                                   OnLookup=VAR
                                                              VATEntryType@1210000 : Record 14949;
                                                            BEGIN
                                                              VATEntryType.LookupSetOfVATEntryCodes("VAT Entry Type");
                                                            END;

                                                   CaptionML=[ENU=VAT Entry Type;
                                                              RUS=Тип операции НДС] }
    { 12470;  ;Vendor Receipts No. ;Code20        ;CaptionML=[ENU=Vendor Receipts No.;
                                                              RUS=Номер накладной поставщика] }
    { 12471;  ;Vendor Receipts Date;Date          ;CaptionML=[ENU=Vendor Receipts Date;
                                                              RUS=Дата накладной поставщика] }
    { 12472;  ;Applies-to Doc. Date;Date          ;CaptionML=[ENU=Applies-to Doc. Date;
                                                              RUS=Примен. к док. - дата] }
    { 12476;  ;FA Charge No.       ;Code20        ;TableRelation="FA Charge";
                                                   CaptionML=[ENU=FA Charge No.;
                                                              RUS=Код издержки ОС];
                                                   Editable=No }
    { 12480;  ;KBK                 ;Code20        ;TableRelation=KBK;
                                                   OnValidate=BEGIN
                                                                IF "Taxpayer Status" = 0 THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION(KBK),
                                                                    FIELDCAPTION("Taxpayer Status"),
                                                                    "Taxpayer Status");
                                                              END;

                                                   CaptionML=[ENU=KBK;
                                                              RUS=КБК] }
    { 12481;  ;OKATO               ;Code11        ;TableRelation=OKATO;
                                                   OnValidate=BEGIN
                                                                IF "Taxpayer Status" = 0 THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION(OKATO),
                                                                    FIELDCAPTION("Taxpayer Status"),
                                                                    "Taxpayer Status");
                                                              END;

                                                   CaptionML=[ENU=OKATO;
                                                              RUS=ОКАТО] }
    { 12482;  ;Period Code         ;Option        ;OnValidate=VAR
                                                                MonthText@1210000 : Text[2];
                                                                YearText@1210001 : Text[4];
                                                                QuarterText@1210002 : Text[30];
                                                                HalfYearText@1210003 : Text[30];
                                                              BEGIN
                                                                // ENU - D1,D2,D3,MH,QT,HY,YR
                                                                // RUS - Д1,Д2,Д3,МС,КВ,ПЛ,ГД
                                                                CASE "Period Code" OF
                                                                  "Period Code"::" ":
                                                                    "Tax Period" := '';
                                                                  "Period Code"::"0":
                                                                    "Tax Period" := '0';
                                                                  "Period Code"::D1,
                                                                  "Period Code"::D2,
                                                                  "Period Code"::D3:
                                                                    "Tax Period" :=
                                                                      STRSUBSTNO('%1.%2',
                                                                        COPYSTR(FORMAT("Period Code"),1,2),FORMAT("Posting Date",0,'<Month,2>.<Year4>'));

                                                                  "Period Code"::MH:
                                                                    "Tax Period" :=
                                                                      STRSUBSTNO('%1.%2',
                                                                        COPYSTR(FORMAT("Period Code"),1,2),
                                                                        FORMAT(CALCDATE('<-1M>',"Posting Date"),0,'<Month,2>.<Year4>'));

                                                                  "Period Code"::QT:
                                                                    "Tax Period" :=
                                                                      STRSUBSTNO('%1.%2.%3',
                                                                        COPYSTR(FORMAT("Period Code"),1,2),
                                                                        FORMAT("Posting Date",0,'<Quarter,2><Filler Character,0>'),
                                                                        FORMAT(CALCDATE('<-1Q>',"Posting Date"),0,'<Year4>'));

                                                                  "Period Code"::HY:
                                                                    BEGIN
                                                                      IF DATE2DMY(CALCDATE('<-2Q>',"Posting Date"),2) > 6 THEN
                                                                        HalfYearText := '02'
                                                                      ELSE
                                                                        HalfYearText := '01';
                                                                      "Tax Period" :=
                                                                        STRSUBSTNO('%1.%2.%3',
                                                                          COPYSTR(FORMAT("Period Code"),1,2),
                                                                          HalfYearText,
                                                                          FORMAT(CALCDATE('<-2Q>',"Posting Date"),0,'<Year4>'));
                                                                    END;

                                                                  "Period Code"::YR:
                                                                    "Tax Period" :=
                                                                      STRSUBSTNO('%1.%2.%3',
                                                                        COPYSTR(FORMAT("Period Code"),1,2),
                                                                        '00',
                                                                        FORMAT(CALCDATE('<-1Y>',"Posting Date"),0,'<Year4>'));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Period Code;
                                                              RUS=Код периода];
                                                   OptionCaptionML=[ENU=" ,0,D1-payment for the first decade of month,D2-payment for the second decade of month,D3-payment for the third decade of month,MH-monthly payments,QT-quarter payment,HY-half-year payments,YR-year payments";
                                                                    RUS=" ,0,Д1-платеж за первую декаду месяца,Д2-платеж за вторую декаду месяца,Д3-платеж за третью декаду месяца,МС-месячный платеж,КВ-квартальный платеж,ПЛ-полугодовой платеж,ГД-годовой платеж"];
                                                   OptionString=[ ,0,D1,D2,D3,MH,QT,HY,YR] }
    { 12483;  ;Payment Reason Code ;Code10        ;TableRelation="Payment Order Code".Code WHERE (Type=CONST(Payment Reason));
                                                   OnValidate=BEGIN
                                                                IF "Taxpayer Status" = 0 THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION("Payment Reason Code"),
                                                                    FIELDCAPTION("Taxpayer Status"),
                                                                    "Taxpayer Status");

                                                                PaymentOrderCode.GET(PaymentOrderCode.Type::"Payment Reason","Payment Reason Code");
                                                                "Reason Document No." := PaymentOrderCode."Reason Document No.";
                                                                "Reason Document Type" := PaymentOrderCode."Reason Document Type";
                                                              END;

                                                   CaptionML=[ENU=Payment Reason Code;
                                                              RUS=Код основания платежа] }
    { 12484;  ;Reason Document No. ;Code10        ;OnValidate=BEGIN
                                                                IF "Taxpayer Status" = 0 THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION("Reason Document No."),
                                                                    FIELDCAPTION("Taxpayer Status"),
                                                                    "Taxpayer Status");

                                                                PaymentOrderCode.GET(PaymentOrderCode.Type::"Payment Reason","Payment Reason Code");
                                                                IF (PaymentOrderCode."Reason Document No." <> '') AND
                                                                 ("Reason Document No." <> PaymentOrderCode."Reason Document No.")
                                                                THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION("Reason Document No."),
                                                                    FIELDCAPTION("Payment Reason Code"),
                                                                    "Payment Reason Code");
                                                              END;

                                                   CaptionML=[ENU=Reason Document No.;
                                                              RUS=Номер документа-основания] }
    { 12485;  ;Reason Document Date;Date          ;OnValidate=VAR
                                                                TestDate@1210000 : Date;
                                                              BEGIN
                                                                IF "Taxpayer Status" = 0 THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION("Reason Document Date"),
                                                                    FIELDCAPTION("Taxpayer Status"),
                                                                    "Taxpayer Status");

                                                                PaymentOrderCode.GET(PaymentOrderCode.Type::"Payment Reason","Payment Reason Code");
                                                                IF (PaymentOrderCode."Reason Document No." <> '') AND
                                                                 ("Reason Document No." <> PaymentOrderCode."Reason Document No.")
                                                                THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION("Reason Document Date"),
                                                                    FIELDCAPTION("Payment Reason Code"),
                                                                    "Payment Reason Code");
                                                              END;

                                                   CaptionML=[ENU=Reason Document Date;
                                                              RUS=Дата документа-основания];
                                                   AutoFormatType=2 }
    { 12486;  ;Tax Payment Type    ;Code10        ;TableRelation="Payment Order Code".Code WHERE (Type=CONST(Tax Payment Type));
                                                   OnValidate=BEGIN
                                                                IF "Taxpayer Status" = 0 THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION("Tax Payment Type"),
                                                                    FIELDCAPTION("Taxpayer Status"),
                                                                    "Taxpayer Status");
                                                              END;

                                                   CaptionML=[ENU=Tax Payment Type;
                                                              RUS=Тип налогового платежа] }
    { 12487;  ;Tax Period          ;Code10        ;OnValidate=BEGIN
                                                                IF "Taxpayer Status" = 0 THEN
                                                                  ERROR(Text001,
                                                                    FIELDCAPTION("Tax Period"),
                                                                    FIELDCAPTION("Taxpayer Status"),
                                                                    "Taxpayer Status");

                                                                IF ("Tax Period" <> '') AND ("Tax Period" <> '0') THEN BEGIN
                                                                  IF STRLEN("Tax Period") <> 10 THEN
                                                                    ERROR('');
                                                                  IF COPYSTR("Tax Period",3,1) <> '.' THEN
                                                                    ERROR('');
                                                                  IF COPYSTR("Tax Period",6,1) <> '.' THEN
                                                                    ERROR('');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Tax Period;
                                                              RUS=Налоговый период] }
    { 12488;  ;Reason Document Type;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Reason Document Date");
                                                              END;

                                                   CaptionML=[ENU=Reason Document Type;
                                                              RUS=Тип документа-основания];
                                                   OptionCaptionML=[ENU=" ,TR-Number of requirement about taxes payment from TA,RS-Number of decision about installment,OT-Number of decision about deferral,VU-Number of act of materials in court,PR-Number of decision about suspension of penalty,AP-Number of control act,AR-number of executive document";
                                                                    RUS=" ,ТР - номер требования об уплате налогов,РС - номер решения о рассрочке,ОТ - номер решения об отсрочке,ВУ - номер дела или материала дела в суде,ПР - номер решения о приостановлении взыскания,АП - номер акта проверки,АР - номер исполнительного документа"];
                                                   OptionString=[ ,TR,RS,OT,VU,PR,AP,AR];
                                                   Editable=No }
    { 12489;  ;Taxpayer Status     ;Option        ;OnValidate=VAR
                                                                Vend2@1210000 : Record 23;
                                                              BEGIN
                                                                IF "Taxpayer Status" = 0 THEN BEGIN
                                                                  "Period Code" := 0;
                                                                  VALIDATE("Payment Reason Code",'');
                                                                  "Reason Document No." := '';
                                                                  "Reason Document Date" := 0D;
                                                                  "Tax Payment Type" := '';
                                                                  "Tax Period" := '';
                                                                  OKATO := '';
                                                                  KBK := '';
                                                                END ELSE BEGIN
                                                                  IF ("Account Type" = "Account Type"::Vendor) AND Vend2.GET("Account No.") THEN
                                                                    Vend2.TESTFIELD("Vendor Type",Vend2."Vendor Type"::"Tax Authority")
                                                                  ELSE
                                                                    "Taxpayer Status" := "Taxpayer Status"::" ";
                                                                  "Period Code" := 1;
                                                                  VALIDATE("Payment Reason Code",'0');
                                                                  "Reason Document No." := '0';
                                                                  "Reason Document Date" := 0D;
                                                                  "Tax Payment Type" := '0';
                                                                  "Tax Period" := '0';
                                                                  OKATO := '0';
                                                                  KBK := '0';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Taxpayer Status;
                                                              RUS=Статус налогоплательщика];
                                                   OptionCaptionML=[ENU=" ,01-taxpayer (charges payer),02-tax agent,03-collector of taxes and charges,04-tax authority,05-service of officers of justice of Department of Justice of Russian Federation,06-participant of foreign-economic activity,07-tax authority,08-payer of other mandatory payments";
                                                                    RUS=" ,01-налогоплательщик (плательщик сборов),02-налоговый агент,03-сборщик налогов и сборов,04-налоговый орган,05-Федеральная служба судебных приставов,06-участник внешнеэкономической деятельности,07-таможенный орган,08-плательщик иных обязательных платежей"];
                                                   OptionString=[ ,01,02,03,04,05,06,07,08] }
    { 12490;  ;Agreement No.       ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Agreement".No. WHERE (Customer No.=FIELD(Account No.),
                                                                                                                                   Active=CONST(Yes))
                                                                                                                                   ELSE IF (Account Type=CONST(Vendor)) "Vendor Agreement".No. WHERE (Vendor No.=FIELD(Account No.),
                                                                                                                                                                                                      Active=CONST(Yes));
                                                   OnValidate=VAR
                                                                AgreementDetail@1101495001 : Record 50096;
                                                                MovingDataSetup@1101495000 : Record 50064;
                                                                DefaultDimAdv@1101495002 : Record 50128;
                                                              BEGIN
                                                                //NC 18/06/12 > DP
                                                                GLSetup.GET;
                                                                //NC 18/06/12 < DP

                                                                IF "Agreement No." <> '' THEN BEGIN
                                                                  IF "Line No." = 0 THEN
                                                                    ERROR(Text14900,FIELDCAPTION("Agreement No."));
                                                                  CASE "Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        CustAgrmt.GET("Account No.","Agreement No.");
                                                                        CustAgrmt.TESTFIELD(Active,TRUE);
                                                                        //NC MLN09.1 > DP
                                                                        IF CustAgrmt."Agreement Type" = CustAgrmt."Agreement Type"::Loans THEN
                                                                        //NC MLN09.4 > DP
                                                                        BEGIN
                                                                        //NC MLN09.4 < DP

                                                                        //NC NCS-1148 > DP
                                                                        {
                                                                          TESTFIELD("Amount Type");
                                                                        }
                                                                        IF "Amount Type" = "Amount Type"::" " THEN
                                                                          "Amount Type" := "Amount Type"::Principal;
                                                                        //NC NCS-1148 < DP

                                                                        //NC MLN09.1 < DP

                                                                        //NC MLN09.4 > DP
                                                                          AgreementDetail.RESET;
                                                                          AgreementDetail.SETCURRENTKEY("Source Type","Source No.","Agreement No.","Use Default");
                                                                          AgreementDetail.SETRANGE("Source Type",AgreementDetail."Source Type"::Customer);
                                                                          AgreementDetail.SETRANGE("Source No.","Account No.");
                                                                          AgreementDetail.SETRANGE("Agreement No.","Agreement No.");
                                                                          AgreementDetail.SETRANGE("Use Default",TRUE);
                                                                          IF AgreementDetail.FINDFIRST THEN
                                                                            "Agreement Condition No." := AgreementDetail."Condition No.";
                                                                        END;
                                                                        //NC MLN09.4 < DP

                                                                        //NC MLN09.3 > DP
                                                                        IF "Amount Type"="Amount Type"::Interest THEN BEGIN
                                                                          CustAgrmt.TESTFIELD("Interest Posting Group");
                                                                          //NC MLN09.3 > AKU
                                                                          {
                                                                          VALIDATE("Posting Group",CustAgrmt."Interest Posting Group");
                                                                          }
                                                                          "Posting Group" := CustAgrmt."Interest Posting Group";
                                                                          //NC MLN09.3 < AKU
                                                                        END ELSE
                                                                        //NC MLN09.3 < DP

                                                                        //NC NCS-1268 > DP
                                                                        IF "Amount Type" = "Amount Type"::Reserve THEN BEGIN
                                                                          CustAgrmt.TESTFIELD("Reserve Posting Group");
                                                                          "Posting Group" := CustAgrmt."Reserve Posting Group";
                                                                        END ELSE
                                                                        IF "Amount Type" = "Amount Type"::"Reserve%" THEN BEGIN
                                                                          CustAgrmt.TESTFIELD("Reserve % Posting Group");
                                                                          "Posting Group" := CustAgrmt."Reserve % Posting Group";
                                                                        END ELSE
                                                                        //NC NCS-1268 < DP

                                                                        //NC MLN09.3 > AKU
                                                                        {
                                                                        VALIDATE("Posting Group",CustAgrmt."Customer Posting Group");
                                                                        }
                                                                        "Posting Group" := CustAgrmt."Customer Posting Group";
                                                                        //NC MLN09.3 < AKU

                                                                        //NC 18/06/12 > DP
                                                                        IF CustAgrmt."Currency Code"<>GLSetup."LCY Code" THEN
                                                                        //NC 18/06/12 < DP
                                                                        //VALIDATE("Posting Group",CustAgrmt."Customer Posting Group");
                                                                        VALIDATE("Currency Code",CustAgrmt."Currency Code");
                                                                        VALIDATE("Payment Terms Code",CustAgrmt."Payment Terms Code");
                                                                        VALIDATE("Salespers./Purch. Code",CustAgrmt."Salesperson Code");
                                                                        //NC MLN09.3 > AKU
                                                                        VALIDATE("Posting Group");
                                                                        //NC MLN09.3 < AKU

                                                                        //NC OAM31 > PCH
                                                                        {
                                                                        "Dimension Set ID" :=
                                                                          CustAgrmt.GetDefaultDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                        }
                                                                        //NC NOS-26 > SPA
                                                                        "Dimension Set ID" :=
                                                                          CustAgrmt.GetDefaultAdvDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                        //NC NOS-26 < SPA
                                                                        //NC OAM31 < PCH

                                                                        //NC NCS-622.10 > DP
                                                                        MovingDataSetup.GET;
                                                                        MovingDataSetup.TESTFIELD("FI Dimension Code");
                                                                        //NC NCS-622.10 < DP
                                                                        //NC NOS-26 > SPA
                                                                        IF DimensionSetEntry.GET("Dimension Set ID", MovingDataSetup."FI Dimension Code") THEN
                                                                          IF DimensionSetEntry."Dimension Value Code" <> '' THEN
                                                                            "Financial Instrument No." := DimensionSetEntry."Dimension Value Code";
                                                                        //NC NOS-26 < SPA

                                                                        //NC MLN09.3 > DP
                                                                        IF "Amount Type" IN ["Amount Type"::Principal,"Amount Type"::Interest] THEN
                                                                          VALIDATE("Amount Type");
                                                                        //NC MLN09.3 < DP
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        VendAgrmt.GET("Account No.","Agreement No.");
                                                                        VendAgrmt.TESTFIELD(Active,TRUE);

                                                                        //NC MLN09.1 > DP
                                                                        IF VendAgrmt."Agreement Type" = VendAgrmt."Agreement Type"::Loans THEN

                                                                        //NC MLN09.4 > DP
                                                                        BEGIN
                                                                        //NC MLN09.4 < DP


                                                                        //NC NCS-1148 > DP
                                                                        {
                                                                          TESTFIELD("Amount Type");
                                                                        }
                                                                        IF "Amount Type"="Amount Type"::" " THEN
                                                                          "Amount Type" := "Amount Type"::Principal;
                                                                        //NC NCS-1148 < DP

                                                                        //NC MLN09.1 < DP

                                                                        //NC MLN09.4 > DP
                                                                          AgreementDetail.RESET;
                                                                          AgreementDetail.SETCURRENTKEY("Source Type","Source No.","Agreement No.","Use Default");
                                                                          AgreementDetail.SETRANGE("Source Type",AgreementDetail."Source Type"::Vendor);
                                                                          AgreementDetail.SETRANGE("Source No.","Account No.");
                                                                          AgreementDetail.SETRANGE("Agreement No.","Agreement No.");
                                                                          AgreementDetail.SETRANGE("Use Default",TRUE);
                                                                          IF AgreementDetail.FINDFIRST THEN
                                                                            "Agreement Condition No." := AgreementDetail."Condition No.";
                                                                        END;
                                                                        //NC MLN09.4 < DP

                                                                        //NC MLN09.3 > DP
                                                                        IF "Amount Type"="Amount Type"::Interest THEN BEGIN
                                                                          VendAgrmt.TESTFIELD("Interest Posting Group");
                                                                          VALIDATE("Posting Group",VendAgrmt."Interest Posting Group");
                                                                        END ELSE
                                                                        //NC MLN09.3 < DP

                                                                        //NC NCS-1268 > DP
                                                                        IF "Amount Type" = "Amount Type"::Reserve THEN BEGIN
                                                                          VendAgrmt.TESTFIELD("Reserve Posting Group");
                                                                          VALIDATE("Posting Group",VendAgrmt."Reserve Posting Group");
                                                                        END ELSE
                                                                        IF "Amount Type" = "Amount Type"::"Reserve%" THEN BEGIN
                                                                          VendAgrmt.TESTFIELD("Reserve % Posting Group");
                                                                          VALIDATE("Posting Group",VendAgrmt."Reserve % Posting Group");
                                                                        END ELSE
                                                                        //NC NCS-1268 < DP
                                                                        VALIDATE("Posting Group",VendAgrmt."Vendor Posting Group");

                                                                        //NC 18/06/12 > DP
                                                                        IF VendAgrmt."Currency Code"<>GLSetup."LCY Code" THEN
                                                                        //NC 18/06/12 < DP
                                                                          VALIDATE("Currency Code",VendAgrmt."Currency Code");
                                                                        VALIDATE("Payment Terms Code",VendAgrmt."Payment Terms Code");
                                                                        VALIDATE("Salespers./Purch. Code",VendAgrmt."Purchaser Code");


                                                                        //NC OAM31 > PCH
                                                                        {
                                                                        "Dimension Set ID" :=
                                                                          VendAgrmt.GetDefaultDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                        }
                                                                        //NC NOS-26 > SPA
                                                                        "Dimension Set ID" :=
                                                                          VendAgrmt.GetDefaultAdvDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                        //NC NOS-26 < SPA
                                                                        //NC OAM31 > PCH

                                                                        //NC NCS-622.10 > DP
                                                                        MovingDataSetup.GET;
                                                                        MovingDataSetup.TESTFIELD("FI Dimension Code");
                                                                        //NC NCS-622.10 < DP
                                                                        //NC NOS-26 > SPA
                                                                        IF DimensionSetEntry.GET("Dimension Set ID", MovingDataSetup."FI Dimension Code") THEN
                                                                          IF DimensionSetEntry."Dimension Value Code" <> '' THEN
                                                                            "Financial Instrument No." := DimensionSetEntry."Dimension Value Code";
                                                                        //NC NOS-26 < SPA

                                                                        //NC MLN09.3 > DP
                                                                        IF "Amount Type" IN ["Amount Type"::Principal,"Amount Type"::Interest] THEN
                                                                          VALIDATE("Amount Type");
                                                                        //NC MLN09.3 < DP
                                                                      END;
                                                                  END;
                                                                END;
                                                                IF "Agreement No." <> xRec."Agreement No." THEN
                                                                  "Prepayment Document No." := '';
                                                              END;

                                                   CaptionML=[ENU=Agreement No.;
                                                              RUS=Номер договора] }
    { 12491;  ;Depr. Period Starting Date;Date    ;TableRelation="Accounting Period";
                                                   CaptionML=[ENU=Depr. Period Starting Date;
                                                              RUS=Дата начала периода амортизации] }
    { 12492;  ;Payer Vendor No.    ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Payer Vendor No.;
                                                              RUS=Код плательщика] }
    { 12493;  ;Payer Beneficiary Bank Code;Code10 ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Payer Vendor No.));
                                                   CaptionML=[ENU=Payer Beneficiary Bank Code;
                                                              RUS=Код банка плательщика] }
    { 12497;  ;Include In Other VAT Ledger;Boolean;CaptionML=[ENU=Include In Other VAT Ledger;
                                                              RUS=Включить в другую книгу НДС] }
    { 12498;  ;Additional VAT Ledger Sheet;Boolean;CaptionML=[ENU=Additional VAT Ledger Sheet;
                                                              RUS=Дополнительный лист книги НДС] }
    { 12499;  ;Corrected Document Date;Date       ;CaptionML=[ENU=Corrected Document Date;
                                                              RUS=Дата скорректированного документа] }
    { 14900;  ;Export Status       ;Option        ;CaptionML=[ENU=Export Status;
                                                              RUS=Статус экспорта];
                                                   OptionCaptionML=[ENU=" ,New,Exported,Bank Statement Found";
                                                                    RUS=" ,Новый,Экспортировано,Обнаружена выписка с банк. счета"];
                                                   OptionString=[ ,New,Exported,Bank Statement Found];
                                                   Editable=No }
    { 14901;  ;Bank Account No.    ;Code20        ;CaptionML=[ENU=Bank Account No.;
                                                              RUS=Код банк. счета] }
    { 14902;  ;Statement No.       ;Code20        ;CaptionML=[ENU=Statement No.;
                                                              RUS=Номер выписки] }
    { 14903;  ;Statement Line No.  ;Integer       ;CaptionML=[ENU=Statement Line No.;
                                                              RUS=Номер строки выписки] }
    { 14904;  ;Bank Acc. Details VAT Reg. No.;Text20;
                                                   CaptionML=[ENU=Bank Acc. Details VAT Reg. No.;
                                                              RUS=Сведения о банк. счете - ИНН] }
    { 14905;  ;Bank Acc. Dtls. Bank Acc. No.;Code30;
                                                   CaptionML=[ENU=Bank Acc. Dtls. Bank Acc. No.;
                                                              RUS=Банк. счет подробно - код банк. счета] }
    { 14910;  ;Acc. Schedule Name  ;Code10        ;TableRelation="Acc. Schedule Name";
                                                   OnValidate=VAR
                                                                AccScheduleName@1210000 : Record 84;
                                                              BEGIN
                                                                IF "Acc. Schedule Name" <> '' THEN
                                                                  IF AccScheduleName.GET("Acc. Schedule Name") THEN
                                                                    IF AccScheduleName."Default Column Layout" <> '' THEN
                                                                      "Column Layout Name" := AccScheduleName."Default Column Layout";
                                                              END;

                                                   CaptionML=[ENU=Acc. Schedule Name;
                                                              RUS=Имя финансового отчета] }
    { 14911;  ;Acc. Schedule Line No.;Integer     ;TableRelation="Acc. Schedule Line"."Line No." WHERE (Schedule Name=FIELD(Acc. Schedule Name));
                                                   CaptionML=[ENU=Acc. Schedule Line No.;
                                                              RUS=Номер строки финансового отчета] }
    { 14912;  ;Column Layout Name  ;Code10        ;TableRelation="Column Layout Name";
                                                   CaptionML=[ENU=Column Layout Name;
                                                              RUS=Название раскладки столбцов] }
    { 14913;  ;Column Layout Line No.;Integer     ;TableRelation="Column Layout"."Line No." WHERE (Column Layout Name=FIELD(Column Layout Name));
                                                   CaptionML=[ENU=Column Layout Line No.;
                                                              RUS=Номер строки раскладки столбцов] }
    { 14925;  ;Allocated VAT Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("VAT Allocation Line".Amount WHERE (VAT Entry No.=FIELD(Unrealized VAT Entry No.)));
                                                   OnLookup=VAR
                                                              VATAllocLine@1210000 : Record 14925;
                                                              VATAllocation@1210001 : Page 14926;
                                                            BEGIN
                                                              VATAllocLine.SETRANGE("VAT Entry No.","Unrealized VAT Entry No.");
                                                              VATAllocLine.SETRANGE("Posting Date Filter",0D,"Posting Date");
                                                              VATAllocation.SETTABLEVIEW(VATAllocLine);
                                                              VATAllocation.RUNMODAL;
                                                            END;

                                                   CaptionML=[ENU=Allocated VAT Amount;
                                                              RUS=Сумма распред. НДС];
                                                   Editable=No }
    { 14926;  ;Unrealized Amount   ;Decimal       ;CaptionML=[ENU=Unrealized Amount;
                                                              RUS=Нереал. сумма] }
    { 14927;  ;VAT Allocation Type ;Option        ;CaptionML=[ENU=VAT Allocation Type;
                                                              RUS=Тип распределения НДС];
                                                   OptionCaptionML=[ENU=VAT,Write-Off,Charge;
                                                                    RUS=НДС,Списание,Расходы];
                                                   OptionString=VAT,WriteOff,Charge }
    { 14929;  ;Reinstatement VAT Entry No.;Integer;TableRelation="VAT Entry"."Entry No." WHERE (Amount=FILTER(<>0),
                                                                                                VAT Allocation Type=CONST(VAT),
                                                                                                Type=CONST(Purchase),
                                                                                                Reversed=CONST(No),
                                                                                                Unrealized VAT Entry No.=FILTER(<>0),
                                                                                                VAT Reinstatement=CONST(No));
                                                   OnValidate=VAR
                                                                VATEntry@1210000 : Record 254;
                                                                UnrealizedVATEntry@1210002 : Record 254;
                                                                AmountToReinstate@1210003 : Decimal;
                                                              BEGIN
                                                                VATEntry.GET("Reinstatement VAT Entry No.");
                                                                IF VATEntry."VAT Calculation Type" <> VATEntry."VAT Calculation Type"::"Full VAT" THEN
                                                                  VATEntry.TESTFIELD(Base);
                                                                "Initial Entry No." := VATEntry."CV Ledg. Entry No.";
                                                                VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
                                                                VATPostingSetup.TESTFIELD("Trans. VAT Type",VATPostingSetup."Trans. VAT Type"::" ");
                                                                VATPostingSetup.TESTFIELD("Trans. VAT Account",'');
                                                                IF NOT (VATPostingSetup."VAT Calculation Type" IN
                                                                  [VATPostingSetup."VAT Calculation Type"::"Normal VAT",VATPostingSetup."VAT Calculation Type"::"Full VAT"])
                                                                THEN
                                                                  VATPostingSetup.FIELDERROR("VAT Calculation Type");
                                                                "Account Type" := "Account Type"::Vendor;
                                                                "Bal. Account No." := VATPostingSetup."Purch. VAT Unreal. Account";
                                                                IF VendLedgEntry.GET(VATEntry."CV Ledg. Entry No.") THEN BEGIN
                                                                  Description := VendLedgEntry.Description;
                                                                  "Posting Group" := VendLedgEntry."Vendor Posting Group";
                                                                  "Dimension Set ID" := VendLedgEntry."Dimension Set ID";
                                                                  DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                END;

                                                                IF VATEntry."Bill-to/Pay-to No." <> '' THEN
                                                                  "Account No." := VATEntry."Bill-to/Pay-to No."
                                                                ELSE BEGIN
                                                                  "Account Type" := VATEntry."Object Type";
                                                                  "Account No." := VATEntry."Object No.";
                                                                END;
                                                                "Object Type" := VATEntry."Object Type";
                                                                "Object No." := VATEntry."Object No.";
                                                                "Document Type" := VATEntry."Document Type";
                                                                "Document No." := VATEntry."Document No.";
                                                                "Posting Date" := VATEntry."Posting Date";
                                                                "Document Date" := VATEntry."Posting Date";
                                                                Correction := FALSE;
                                                                "Currency Code" := '';
                                                                UnrealizedVATEntry.GET(VATEntry."Unrealized VAT Entry No.");
                                                                AmountToReinstate := UnrealizedVATEntry."Unrealized Amount" - UnrealizedVATEntry."Remaining Unrealized Amount";
                                                                IF VATEntry.Amount < AmountToReinstate THEN
                                                                  AmountToReinstate := VATEntry.Amount;
                                                                VALIDATE(Amount,AmountToReinstate);

                                                                GenJnlTemplate.GET("Journal Template Name");
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                "Source Code" := GenJnlTemplate."Source Code";
                                                                "Reason Code" := GenJnlBatch."Reason Code";
                                                              END;

                                                   CaptionML=[ENU=Reinstatement VAT Entry No.;
                                                              RUS=Номер опер. восст. НДС] }
    { 17201;  ;Depr. Bonus         ;Boolean       ;CaptionML=[ENU=Depr. Bonus;
                                                              RUS=Аморт. премия] }
    { 17202;  ;Tax. Diff. Dtld. Entry No.;Integer ;CaptionML=[ENU=Tax. Diff. Dtld. Entry No.;
                                                              RUS=Номер операции налоговой разницы] }
    { 17300;  ;Tax Difference Code ;Code10        ;TableRelation="Tax Difference" WHERE (Source Code Mandatory=CONST(Yes),
                                                                                         Depreciation Bonus=CONST(No));
                                                   OnValidate=VAR
                                                                FALedgerEntry@1210000 : Record 5601;
                                                              BEGIN
                                                                IF "Tax Difference Code" <> xRec."Tax Difference Code" THEN BEGIN
                                                                  IF "FA Error Entry No." <> 0 THEN BEGIN
                                                                    FALedgerEntry.GET("FA Error Entry No.");
                                                                    TESTFIELD("Tax Difference Code",FALedgerEntry."Tax Difference Code");
                                                                  END;
                                                                  IF "Tax Difference Code" <> '' THEN BEGIN
                                                                    TESTFIELD("Account Type","Account Type"::"Fixed Asset");
                                                                    TESTFIELD("FA Posting Type","FA Posting Type"::"Acquisition Cost");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Tax Difference Code;
                                                              RUS=Код налоговой разницы] }
    { 17301;  ;Depr. Group Elimination;Boolean    ;CaptionML=[ENU=Depr. Group Elimination;
                                                              RUS=Исключение группы аморт.] }
    { 17400;  ;Payroll Ledger Entry No.;Integer   ;TableRelation="Payroll Ledger Entry";
                                                   CaptionML=[ENU=Payroll Ledger Entry No.;
                                                              RUS=Номер операции зарплаты] }
    { 50001;  ;Buffer Entry No.    ;Integer       ;TableRelation="Cons. Data Buffer"."Entry No." WHERE (Cons. Source Code=FIELD(Cons. Source Code));
                                                   OnLookup=VAR
                                                              ConsSource@1101495004 : Record 50001;
                                                              ConsDataBuffer@1101495003 : Record 50008;
                                                              BufferDealEntry@1101495002 : Record 50155;
                                                              BufferListForm@1101495001 : Page 50002;
                                                              BufferDealEntryForm@1101495000 : Page 50221;
                                                            BEGIN
                                                              //NC NCS-622 > PCH
                                                               IF NOT ConsSource.GET("Cons. Source Code") THEN
                                                                EXIT;
                                                               CASE ConsSource."Import Format" OF
                                                                ConsSource."Import Format"::FromExtSystem,
                                                                ConsSource."Import Format"::FromBuffer :
                                                                  BEGIN
                                                                    ConsDataBuffer.RESET;
                                                                    ConsDataBuffer.SETRANGE("Cons. Source Code","Cons. Source Code");
                                                                    BufferListForm.SETTABLEVIEW(ConsDataBuffer);
                                                                    IF ConsDataBuffer.GET("Cons. Source Code","Buffer Entry No.") THEN
                                                                      BufferListForm.SETRECORD(ConsDataBuffer);
                                                                    BufferListForm.RUNMODAL;
                                                                  END;
                                                                ConsSource."Import Format"::FromPreBufferDealEntry,
                                                                ConsSource."Import Format"::FromBufferDealEntry :
                                                                  BEGIN
                                                                    BufferDealEntry.RESET;
                                                                    BufferDealEntry.SETRANGE("Cons. Source Code","Cons. Source Code");
                                                                    BufferDealEntryForm.SETTABLEVIEW(BufferDealEntry);
                                                                    IF BufferDealEntry.GET("Cons. Source Code","Buffer Entry No.") THEN
                                                                      BufferDealEntryForm.SETRECORD(BufferDealEntry);
                                                                    BufferDealEntryForm.RUNMODAL;
                                                                  END;
                                                               END;
                                                              //NC NCS-622 < PCH
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buffer Entry No.;
                                                              RUS=Буфер Операция Но.];
                                                   Description=NC PIF001 }
    { 50002;  ;Cons. Source Code   ;Code20        ;TableRelation="Consolidation Source";
                                                   CaptionML=[ENU=Cons. Source Code;
                                                              RUS=Источник Консолидации];
                                                   Description=NC PIF001 }
    { 50003;  ;Capital %           ;Boolean       ;CaptionML=[ENU=Capital %;
                                                              RUS=Капитализация %];
                                                   Description=NC PIF001 }
    { 50004;  ;Reclass. Capital %  ;Boolean       ;CaptionML=[ENU=Reclass. Capital %;
                                                              RUS=Реклассификация Капитализации %];
                                                   Description=NC PIF001 }
    { 50005;  ;FA Vendor No.       ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                //NC OFA001 > DP
                                                                TESTFIELD("FA Posting Type","FA Posting Type"::"Acquisition Cost");
                                                                //NC OFA001 < DP
                                                              END;

                                                   CaptionML=[ENU=FA Vendor No.;
                                                              RUS=ОС Поставщик Но.];
                                                   Description=NC OFA001 DP }
    { 50006;  ;Is Inc. Tax         ;Boolean       ;CaptionML=[ENU=Is Inc. Tax;
                                                              RUS=Есть Inc. Tax];
                                                   Description=NC MTD06 AIG }
    { 50007;  ;Cons. FA Export Type;Option        ;CaptionML=[ENU=Cons. FA Export Type;
                                                              RUS=Конс. ОС Экспорт Тип];
                                                   OptionCaptionML=[ENU=,Not Export,Acquisition,Release,Disposal,Reverse Acquisition;
                                                                    RUS=,Не Экспортировать,Приобретение,Ввод в Эксплуатацию,Реализация,Отмена Приобретения];
                                                   OptionString=,Not Export,Acquisition,Release,Disposal,Reverse Acquisition;
                                                   Description=NC MCO05 DP }
    { 50008;  ;Source FA Entry No. ;Integer       ;CaptionML=[ENU=Source FA Entry No.;
                                                              RUS=Источник ОС Операция Но.];
                                                   Description=NC MCO05 DP }
    { 50009;  ;Interest Accrual    ;Boolean       ;CaptionML=[ENU=Interest Accrual;
                                                              RUS=Проценты Начисление];
                                                   Description=NC APCOC56 }
    { 50010;  ;Agreement Condition No.;Integer    ;TableRelation=IF (Account Type=CONST(Customer)) "Agreement Detail"."Condition No." WHERE (Source Type=CONST(Customer),
                                                                                                                                             Source No.=FIELD(Account No.),
                                                                                                                                             Agreement No.=FIELD(Agreement No.))
                                                                                                                                             ELSE IF (Account Type=CONST(Vendor)) "Agreement Detail"."Condition No." WHERE (Source Type=CONST(Vendor),
                                                                                                                                                                                                                            Source No.=FIELD(Account No.),
                                                                                                                                                                                                                            Agreement No.=FIELD(Agreement No.));
                                                   CaptionML=[ENU=Agreement Condition No.;
                                                              RUS=Договор Условие Но.];
                                                   Description=NC MLN03 EB }
    { 50015;  ;Agreement Schedule Date;Date       ;CaptionML=[ENU=Agreement Schedule Date;
                                                              RUS=Договор График Дата];
                                                   Description=NC MLN09 DP }
    { 50020;  ;Interest Calc. No. of Days;Integer ;CaptionML=[ENU=Interest Calc. No. of Days;
                                                              RUS=Расчет Проценты Кол. Дней];
                                                   Description=NC MLN09 DP }
    { 50025;  ;Change Condition Block Status;Boolean;
                                                   CaptionML=[ENU=Change Block Condition Status;
                                                              RUS=Изменить Блокировка Условие Статус];
                                                   Description=NC MLN09.3 DP }
    { 50030;  ;FA Def. Dim. Change ;Boolean       ;CaptionML=[ENU=FA Def. Dim. Change;
                                                              RUS=ОС Станд. Измер. Изменить];
                                                   Description=NC MCO05 DP }
    { 50035;  ;FA Def. Dim. Code   ;Code20        ;TableRelation=Dimension;
                                                   CaptionML=[ENU=FA Def. Dim. Code;
                                                              RUS=ОС Станд. Измерение Код];
                                                   Description=NC MCO05 DP }
    { 50040;  ;FA Reclassification ;Boolean       ;CaptionML=[ENU=FA Reclassification;
                                                              RUS=ОС Реклассификация];
                                                   Description=NC MCO05 DP }
    { 50045;  ;FA Reclassification No.;Code20     ;TableRelation="Fixed Asset";
                                                   CaptionML=[ENU=FA Reclassification No.;
                                                              RUS=ОС Реклассификация Но.];
                                                   Description=NC MCO05 DP }
    { 50050;  ;Allocation ACY Amount;Decimal      ;CaptionML=[ENU=Allocation ACY Amount;
                                                              RUS=Распределение ДОВ Сумма];
                                                   Description=NC NCS-1820 DP }
    { 50055;  ;Allocation Entry    ;Boolean       ;CaptionML=[ENU=Allocation ACY Amount;
                                                              RUS=Распределение Операция];
                                                   Description=NC NCS-1820 DP }
    { 50100;  ;FI Posting Group    ;Code10        ;TableRelation="FI Posting Group".Code;
                                                   CaptionML=[ENU=FI Posting Group;
                                                              RUS=ФИ Учетная Группа];
                                                   Description=NC MTF02 II }
    { 50101;  ;FI EntryType        ;Option        ;OnValidate=BEGIN
                                                                 CASE "FI EntryType" OF
                                                                  "FI EntryType"::Purchase: VALIDATE("Gen. Posting Type", "Gen. Posting Type"::Purchase);
                                                                  "FI EntryType"::Sale: VALIDATE("Gen. Posting Type", "Gen. Posting Type"::Sale);
                                                                 ELSE
                                                                  VALIDATE("Gen. Posting Type", "Gen. Posting Type"::" ");
                                                                 END;
                                                              END;

                                                   CaptionML=[ENU=FI EntryType;
                                                              RUS=ФИ Тип Операции];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Charging%,Repayment%";
                                                                    RUS=" ,Покупка,Продажа,Приход,Расход,Начисление%,Погашение%"];
                                                   OptionString=[ ,Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Charging%,Repayment%];
                                                   Description=NC MTF02 II }
    { 50102;  ;Amount Type         ;Option        ;OnValidate=VAR
                                                                CustPostingGroup@1000000000 : Record 92;
                                                                VendPostingGroup@1000000001 : Record 93;
                                                                MovingDataSetup@1000000002 : Record 50064;
                                                                IsAddDim@1000000004 : Boolean;
                                                                GLAccDefDim@1000000005 : Record 352;
                                                                IsPGFound@1101495000 : Boolean;
                                                                TempDimSetEntry@1101495001 : TEMPORARY Record 480;
                                                              BEGIN
                                                                //NC MLN09 > DP
                                                                IsAddDim := FALSE;
                                                                MovingDataSetup.GET;
                                                                MovingDataSetup.TESTFIELD("Body/Percentage Dimension Code");
                                                                CASE "Account Type" OF
                                                                  "Account Type"::Customer:
                                                                  BEGIN
                                                                    CustPostingGroup.GET("Posting Group");
                                                                    IF "Amount Type" = "Amount Type"::Principal THEN
                                                                      CustPostingGroup.TESTFIELD("Loan Interest",FALSE)

                                                                    ELSE

                                                                    //NC MLN09.1 > DP
                                                                      IF "Amount Type" = "Amount Type"::Interest THEN
                                                                    //NC MLN09.1 < DP

                                                                      BEGIN
                                                                        CustAgrmt.RESET;
                                                                        CustAgrmt.SETRANGE("Customer No.","Account No.");
                                                                        IF "Agreement No."<>'' THEN
                                                                          CustAgrmt.SETRANGE("No.","Agreement No.");
                                                                        CustAgrmt.SETFILTER("Interest Posting Group",'<>%1','');
                                                                        IF CustAgrmt.FINDFIRST THEN BEGIN

                                                                          //NC MLN09.3 > DP
                                                                          IsPGFound := FALSE;
                                                                          IF "Posting Group"<>'' THEN BEGIN
                                                                            CustPostingGroup.GET("Posting Group");
                                                                            IsPGFound := CustPostingGroup."Loan Interest";
                                                                          END;
                                                                          IF NOT IsPGFound THEN
                                                                          //NC MLN09.3 < DP

                                                                          "Posting Group" :=CustAgrmt."Interest Posting Group";
                                                                          CustPostingGroup.GET("Posting Group");
                                                                        END ELSE

                                                                      CustPostingGroup.TESTFIELD("Loan Interest",TRUE)
                                                                      END
                                                                    //NC MLN09.1 > DP
                                                                      ELSE
                                                                        IF "Amount Type" = "Amount Type"::" " THEN BEGIN
                                                                          IF CustAgrmt.GET("Account No.","Agreement No.") THEN
                                                                            IF CustAgrmt."Agreement Type" = CustAgrmt."Agreement Type"::Loans THEN
                                                                              ERROR(Text50001,FIELDCAPTION("Amount Type"),FIELDCAPTION("Agreement No."),"Agreement No.");
                                                                        END;
                                                                    //NC MLN09.1 < DP

                                                                    IF Prepayment THEN BEGIN
                                                                      IF GLAccDefDim.GET(15,CustPostingGroup."Prepayment Account",MovingDataSetup."Body/Percentage Dimension Code") THEN
                                                                      IF GLAccDefDim."Value Posting" IN [GLAccDefDim."Value Posting"::"Code Mandatory", GLAccDefDim."Value Posting"::"Same Code"]
                                                                      THEN
                                                                        IsAddDim := TRUE;
                                                                    END ELSE
                                                                      IF GLAccDefDim.GET(15,CustPostingGroup."Receivables Account",MovingDataSetup."Body/Percentage Dimension Code") THEN
                                                                      IF GLAccDefDim."Value Posting" IN [GLAccDefDim."Value Posting"::"Code Mandatory", GLAccDefDim."Value Posting"::"Same Code"]
                                                                      THEN
                                                                          IsAddDim := TRUE;
                                                                  END;
                                                                  "Account Type"::Vendor:
                                                                  BEGIN
                                                                    VendPostingGroup.GET("Posting Group");
                                                                    IF "Amount Type" = "Amount Type"::Principal THEN
                                                                      VendPostingGroup.TESTFIELD("Loan Interest",FALSE)
                                                                    ELSE

                                                                    //NC MLN09.1 > DP
                                                                      IF "Amount Type" = "Amount Type"::Interest THEN BEGIN
                                                                    //NC MLN09.1 < DP

                                                                        VendAgrmt.RESET;
                                                                        VendAgrmt.SETRANGE("Vendor No.","Account No.");
                                                                        IF "Agreement No."<>'' THEN
                                                                          VendAgrmt.SETRANGE("No.","Agreement No.");

                                                                        VendAgrmt.SETFILTER("Interest Posting Group",'<>%1','');
                                                                        IF VendAgrmt.FINDFIRST THEN BEGIN

                                                                          //NC MLN09.3 > DP
                                                                          IsPGFound := FALSE;
                                                                          IF "Posting Group"<>'' THEN BEGIN
                                                                            VendPostingGroup.GET("Posting Group");
                                                                            IsPGFound := VendPostingGroup."Loan Interest";
                                                                          END;
                                                                          IF NOT IsPGFound THEN
                                                                          //NC MLN09.3 < DP

                                                                          "Posting Group" :=VendAgrmt."Interest Posting Group";
                                                                          VendPostingGroup.GET("Posting Group");
                                                                        END ELSE

                                                                        VendPostingGroup.TESTFIELD("Loan Interest",TRUE)
                                                                      END
                                                                    //NC MLN09.1 > DP
                                                                      ELSE
                                                                        IF "Amount Type" = "Amount Type"::" " THEN BEGIN
                                                                          IF VendAgrmt.GET("Account No.","Agreement No.") THEN
                                                                            IF VendAgrmt."Agreement Type" = VendAgrmt."Agreement Type"::Loans THEN
                                                                              ERROR(Text50001,FIELDCAPTION("Amount Type"),FIELDCAPTION("Agreement No."),"Agreement No.");
                                                                        END;
                                                                    //NC MLN09.1 < DP

                                                                    IF Prepayment THEN BEGIN
                                                                      IF GLAccDefDim.GET(15,VendPostingGroup."Prepayment Account",MovingDataSetup."Body/Percentage Dimension Code") THEN
                                                                      IF GLAccDefDim."Value Posting" IN [GLAccDefDim."Value Posting"::"Code Mandatory", GLAccDefDim."Value Posting"::"Same Code"]
                                                                      THEN
                                                                          IsAddDim := TRUE;
                                                                    END ELSE
                                                                      IF GLAccDefDim.GET(15,VendPostingGroup."Payables Account",MovingDataSetup."Body/Percentage Dimension Code") THEN
                                                                      IF GLAccDefDim."Value Posting" IN [GLAccDefDim."Value Posting"::"Code Mandatory", GLAccDefDim."Value Posting"::"Same Code"]
                                                                      THEN
                                                                          IsAddDim := TRUE;
                                                                  END;
                                                                END;

                                                                IF IsAddDim THEN BEGIN
                                                                  //NC NOS-26 > SPA
                                                                  {
                                                                  JLDim.INIT;
                                                                  JLDim."Table ID" := 81;
                                                                  JLDim."Journal Template Name" :="Journal Template Name";
                                                                  JLDim."Journal Batch Name" := "Journal Batch Name";
                                                                  JLDim."Journal Line No." := "Line No.";
                                                                  JLDim."Dimension Code" := MovingDataSetup."Body/Percentage Dimension Code";
                                                                  IF "Amount Type" = "Amount Type"::Principal THEN
                                                                    JLDim."Dimension Value Code" := MovingDataSetup."Body Dimension Value"
                                                                  ELSE
                                                                    JLDim."Dimension Value Code" := MovingDataSetup."Percentage Dimencion Value";
                                                                  IF NOT JLDim.INSERT(TRUE) THEN JLDim.MODIFY(TRUE);
                                                                  }
                                                                  IF "Dimension Set ID" <> 0 THEN
                                                                    DimMgt.GetDimensionSet(TempDimSetEntry, "Dimension Set ID");
                                                                  TempDimSetEntry.VALIDATE("Dimension Code", MovingDataSetup."Body/Percentage Dimension Code");
                                                                  IF TempDimSetEntry.FIND THEN
                                                                    TempDimSetEntry.DELETE;
                                                                  IF "Amount Type" = "Amount Type"::Principal THEN
                                                                    TempDimSetEntry.VALIDATE("Dimension Value Code", MovingDataSetup."Body Dimension Value")
                                                                  ELSE
                                                                    TempDimSetEntry.VALIDATE("Dimension Value Code", MovingDataSetup."Percentage Dimencion Value");
                                                                  TempDimSetEntry.SetObject(Rec);
                                                                  TempDimSetEntry.INSERT(TRUE);

                                                                  DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
                                                                  //NC NOS-26 < SPA
                                                                END;
                                                                //NC MLN09 < DP
                                                              END;

                                                   CaptionML=[ENU=Amount Type;
                                                              RUS=Тип Суммы];
                                                   OptionCaptionML=[ENU=" ,Principal,Interest income,Reserve,Reserve%";
                                                                    RUS=" ,Основная сумма,Проценты,Резерв,Резерв%"];
                                                   OptionString=[ ,Principal,Interest,Reserve,Reserve%];
                                                   Description=NC MTF02 II,NCS-1268 }
    { 50103;  ;FI Portfolio        ;Code10        ;TableRelation="FI Portfolio".Code;
                                                   CaptionML=[ENU=FI Portfolio;
                                                              RUS=ФИ Портфель];
                                                   Description=NC MTF02 II }
    { 50104;  ;FI Posting Book     ;Code10        ;TableRelation="FI Posting Book".Code;
                                                   CaptionML=[ENU=FI Posting Book;
                                                              RUS=ФИ Код Книги Учета];
                                                   Description=NC MTF02 II }
    { 50105;  ;Conversation        ;Boolean       ;CaptionML=[ENU=Conversation;
                                                              RUS=Конвертация];
                                                   Description=NC MTF02 II }
    { 50106;  ;Conversation ID     ;Code20        ;CaptionML=[ENU=Conversation ID;
                                                              RUS=Конвертация ID];
                                                   Description=NC MTF02 II }
    { 50107;  ;Short Position      ;Boolean       ;CaptionML=[ENU=Short Position;
                                                              RUS=Короткая Позиция];
                                                   Description=NC MTF02 II }
    { 50108;  ;GLEntryTypeForFI    ;Code20        ;CaptionML=[ENU=GLEntryTypeForFI;
                                                              RUS=Тип Операции Фин. Книги];
                                                   Description=NC MTF02 II }
    { 50109;  ;FIValueEntryNo      ;Integer       ;CaptionML=[ENU=GLEntryNoForFI;
                                                              RUS=Но. ФИ Операции Стоимости];
                                                   Description=NC MTF02 II }
    { 50110;  ;Appl. to FI Entry No.;Integer      ;CaptionML=[ENU=Appl. to FI Entry No.;
                                                              RUS=Прим. к ФИ Операция Но.];
                                                   Description=NC MTF02 AKU }
    { 50111;  ;FIValueEntryNo2     ;Integer       ;CaptionML=[ENU=GLEntryNoForFI;
                                                              RUS=Но. ФИ Операции Стоимости];
                                                   Description=NC MTF02 II }
    { 50122;  ;Transaction Type    ;Option        ;CaptionML=[ENU=Transaction Type;
                                                              RUS=Тип Транзакции];
                                                   OptionCaptionML=[ENU=Manual,Automatic;
                                                                    RUS=Ручная,Автоматическая];
                                                   OptionString=Manual,Automatic;
                                                   Description=NC PIF010 MP }
    { 50123;  ;Not Consolidate     ;Boolean       ;OnValidate=BEGIN
                                                                //TDRANCS-1683>
                                                                fn_CheckUserSetup(FIELDNO("Not Consolidate"));
                                                              END;

                                                   CaptionML=[ENU=Not Consolidate;
                                                              RUS=Не Консолидировать];
                                                   Description=NC PIF010 MP,TDRANCS-1683 }
    { 50125;  ;Line Dimension Value;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Set Entry"."Dimension Value Code" WHERE (Dimension Set ID=FIELD(Dimension Set ID),
                                                                                                                          Dimension Code=FIELD(Dimension Filter)));
                                                   CaptionML=[ENU=Line Dimension Value;
                                                              RUS=Строка Измерение Значение];
                                                   Description=NC M1;
                                                   Editable=No }
    { 50126;  ;Dimension Filter    ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Dimension;
                                                   CaptionML=[ENU=Dimension Filter;
                                                              RUS=Измерение Фильтр];
                                                   Description=NC M1 }
    { 51000;  ;Elimination         ;Boolean       ;CaptionML=[ENU=Elimination;
                                                              RUS=Элиминирование];
                                                   Description=NC MIFI02 MP }
    { 51010;  ;Eliminated Entry No.;Integer       ;TableRelation="G/L Entry";
                                                   CaptionML=[ENU=Eliminated Entry No.;
                                                              RUS=Элиминированная Операция Но.];
                                                   BlankZero=Yes;
                                                   Description=NC MIFI02 MP }
    { 52005;  ;Not Translate       ;Boolean       ;OnValidate=BEGIN
                                                                //TDRANCS-1425>
                                                                fn_CheckUserSetup(FIELDNO("Not Translate"));
                                                              END;

                                                   CaptionML=[ENU=Not Translate;
                                                              RUS=Не Транслировать];
                                                   Description=NC APCOC-92 DP }
    { 52010;  ;Not Translate IFRS  ;Boolean       ;OnValidate=BEGIN
                                                                //TDRANCS-1425>
                                                                fn_CheckUserSetup(FIELDNO("Not Translate IFRS"));
                                                              END;

                                                   CaptionML=[ENU=Not Translate IFRS;
                                                              RUS=Не Транслировать в IFRS];
                                                   Description=NC APCOC-117 RD }
    { 52015;  ;Not G/L Post        ;Boolean       ;CaptionML=[ENU=Not G/L Post;
                                                              RUS=Без фин. учета];
                                                   Description=NC MIO-28 AES }
    { 53000;  ;Modified By         ;Code20        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              LoginMgt@1170000000 : Codeunit 418;
                                                            BEGIN
                                                              LoginMgt.LookupUserID("Modified By");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Modified By;
                                                              RUS=Кем Изменено];
                                                   Description=NC NCS-1880;
                                                   Editable=No }
    { 53010;  ;Approved By         ;Code20        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              LoginMgt@1170000000 : Codeunit 418;
                                                            BEGIN
                                                              LoginMgt.LookupUserID("Approved By");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Approved By;
                                                              RUS=Кем утверждено];
                                                   Description=NC NCS-1880;
                                                   Editable=No }
    { 54990;  ;External System ID  ;Code2         ;TableRelation="External System";
                                                   CaptionML=[ENU=External System ID;
                                                              RUS=Внешняя Система ID];
                                                   Description=NC MDM01 PCH }
    { 54995;  ;Original System ID  ;Code2         ;TableRelation="External System";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Original System ID;
                                                              RUS=Оригин. Системы ID];
                                                   Description=NCMBD30 DP }
    { 55000;  ;Export Cons. Source Code;Code20    ;TableRelation="Consolidation Source";
                                                   CaptionML=[ENU=Consolidation Source Code;
                                                              RUS=Код Выгрузки];
                                                   Description=NC PIF001 }
    { 55001;  ;Source Entry No.    ;Integer       ;CaptionML=[ENU=Source Entry No.;
                                                              RUS=Источник Операция Но.];
                                                   Description=NC PIF001 }
    { 55003;  ;Register No.        ;Integer       ;TableRelation="Consolidation Register".No.;
                                                   CaptionML=[ENU=Register No.;
                                                              RUS=Регистр Но.];
                                                   Description=NC PIF001 }
    { 55004;  ;Cons. Register Error Entry No.;Integer;
                                                   TableRelation="Error Journal"."Entry No." WHERE (Error Group=CONST(Transformation),
                                                                                                    Cons. Source Code=FIELD(Cons. Source Code),
                                                                                                    Cons. Register=FIELD(Register No.));
                                                   CaptionML=[ENU=Cons. Register Error Entry No.;
                                                              RUS=Конс. Регистр Ошибка Операция Но.];
                                                   Description=NC PIF001 }
    { 55005;  ;Export Register No. ;Integer       ;TableRelation="Consolidation Register".No.;
                                                   CaptionML=[ENU=Export Register No.;
                                                              RUS=Регистр Выгрузки Но.];
                                                   Description=NC PIF001 }
    { 55011;  ;External Document Type;Text30      ;CaptionML=[ENU=External Document Type;
                                                              RUS=Внешний Тип Документа];
                                                   Description=NC PIF001;
                                                   Editable=No }
    { 55012;  ;External Document ID;Code50        ;CaptionML=[ENU=External Document ID;
                                                              RUS=Внешний Документ ID];
                                                   Description=NC PIF001;
                                                   Editable=No }
    { 55013;  ;External Document Date;Date        ;CaptionML=[ENU=External Document Date;
                                                              RUS=Внешняя Дата Документа];
                                                   Description=NC PIF001;
                                                   Editable=No }
    { 55014;  ;External Operation No;Integer      ;CaptionML=[ENU=External Operation No.;
                                                              RUS=Внешняя Операция Но.];
                                                   Description=NC PIF001;
                                                   Editable=No }
    { 55028;  ;Special Correspondense;Boolean     ;CaptionML=[ENU=Special Correspondense;
                                                              RUS=Специальная корреспонденция];
                                                   Description=NC PIF001 }
    { 55029;  ;Reposted            ;Boolean       ;CaptionML=[ENU=Reposted;
                                                              RUS=Изменено];
                                                   Description=NC PIF001 }
    { 55030;  ;Removed             ;Boolean       ;CaptionML=[ENU=Removed;
                                                              RUS=Удалено];
                                                   Description=NC PIF001 }
    { 55031;  ;FA Operation        ;Boolean       ;CaptionML=[ENU=FA Operation;
                                                              RUS=ОС Операция];
                                                   Description=NC PIF001 }
    { 55033;  ;Source Historical Date;Date        ;CaptionML=[ENU=Source Historical Date;
                                                              RUS=Источник Историческая Дата];
                                                   Description=NC PIF001 }
    { 55101;  ;Begining Date       ;Date          ;CaptionML=[ENU=Begining Date;
                                                              RUS=Дата Начала Выгрузки];
                                                   Description=DL }
    { 55102;  ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              RUS=Дата Окончания Выгрузки];
                                                   Description=DL }
    { 55104;  ;Currency Index Entry;Boolean       ;OnValidate=BEGIN
                                                                //TDRANCS-1394>
                                                                TESTFIELD("Account Type","Account Type"::"G/L Account");
                                                                //TDRANCS-1394<
                                                              END;

                                                   CaptionML=[ENU=Currency Index Entry;
                                                              RUS=Операция Валютной Переоценки];
                                                   Description=NC PIF001,TDRANCS-1394;
                                                   Editable=Yes }
    { 55105;  ;Currency Index      ;Code20        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Index;
                                                              RUS=Переоцениваемая Валюта];
                                                   Description=NC PIF001;
                                                   Editable=Yes }
    { 55106;  ;Local G/L Account   ;Code20        ;CaptionML=[ENU=Local G/L Account;
                                                              RUS=Локал. Фин. Счет Но.];
                                                   Description=NC PIF001 }
    { 55107;  ;Except Correspondence;Boolean      ;CaptionML=[ENU=Except Correspondence;
                                                              RUS=Исключающая Корреспонденция];
                                                   Description=NC MP }
    { 55108;  ;Analysis View Budget Entry No.;Integer;
                                                   CaptionML=[ENU=Analysis View Budget Entry No.;
                                                              RUS=Аналит. Отчет Бюджет Операция Но.];
                                                   Description=NC PIF001 }
    { 55109;  ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              RUS=Описание 2];
                                                   Description=NC PIF001 }
    { 55110;  ;Analysis View Budget Code;Code10   ;CaptionML=[ENU=Analysis View Budget Code.;
                                                              RUS=Аналит. Бюджет Код];
                                                   Description=NC PIF001 }
    { 55112;  ;Analysis View Code  ;Code10        ;TableRelation="Analysis View";
                                                   CaptionML=[ENU=Analysis View Code;
                                                              RUS=Аналит. Отчет Код];
                                                   Description=NC PIF001 }
    { 55115;  ;Financial Instrument No.;Code20    ;TableRelation="Financial Instrument".No.;
                                                   OnValidate=VAR
                                                                DefaultDimension@1000000000 : Record 352;
                                                                GLSetup@1000000002 : Record 98;
                                                                MovingDataSetup@1101495000 : Record 50064;
                                                                JnlLineDimExists@1101495001 : Boolean;
                                                                TempDimSetEntry@1101495002 : TEMPORARY Record 480;
                                                              BEGIN
                                                                //NC MDP01 > MP
                                                                //NCS-2356 > AAP
                                                                //ValidateShortcutDimCode(9,"Financial Instrument No.");
                                                                ValidateShortcutDimCode(20,"Financial Instrument No.");
                                                                //NCS-2356 < AAP
                                                                //NC MDP01 < MP

                                                                // NC NC-973 > SKV
                                                                MovingDataSetup.GET;
                                                                MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
                                                                // NC NC-973 < SKV

                                                                //NC MTD11 > AIG
                                                                //GLSetup.GET;
                                                                DefaultDimension.RESET;
                                                                DefaultDimension.SETRANGE("Table ID", 50021);
                                                                DefaultDimension.SETRANGE("No.", "Financial Instrument No.");
                                                                // NC NC-973 > SKV
                                                                // Это измерение будет обработанно особенным образом
                                                                DefaultDimension.SETFILTER("Dimension Code", '<>%1', MovingDataSetup."INC.TAX Dimension Code");
                                                                // NC NC-973 < SKV
                                                                IF DefaultDimension.FINDSET THEN BEGIN
                                                                  //NC NOS-26 > SPA
                                                                  {
                                                                  REPEAT
                                                                    JournalLineDimension.INIT;
                                                                    JournalLineDimension."Table ID" := 81;
                                                                    JournalLineDimension."Journal Template Name" := "Journal Template Name";
                                                                    JournalLineDimension."Journal Batch Name" := "Journal Batch Name";
                                                                    JournalLineDimension."Journal Line No." := "Line No.";
                                                                    JournalLineDimension.VALIDATE("Dimension Code", DefaultDimension."Dimension Code");
                                                                    JournalLineDimension.VALIDATE("Dimension Value Code", DefaultDimension."Dimension Value Code");
                                                                    IF NOT JournalLineDimension.INSERT(TRUE) THEN
                                                                      JournalLineDimension.MODIFY(TRUE);
                                                                  UNTIL DefaultDimension.NEXT = 0;
                                                                  }
                                                                  IF "Dimension Set ID" <> 0 THEN
                                                                    DimMgt.GetDimensionSet(TempDimSetEntry, "Dimension Set ID");
                                                                  REPEAT
                                                                    TempDimSetEntry.VALIDATE("Dimension Code", DefaultDimension."Dimension Code");
                                                                    IF TempDimSetEntry.FIND THEN
                                                                      TempDimSetEntry.DELETE;
                                                                    TempDimSetEntry.VALIDATE("Dimension Value Code", DefaultDimension."Dimension Value Code");
                                                                    TempDimSetEntry.SetObject(Rec);
                                                                    TempDimSetEntry.INSERT(TRUE);
                                                                  UNTIL DefaultDimension.NEXT = 0;
                                                                  DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
                                                                  //NC NOS-26 < SPA
                                                                END;
                                                                //NC MTD11 < AIG
                                                                // NC NC-973 > SKV
                                                                GetIncTaxDimCode(JnlLineDimExists);
                                                                IF JnlLineDimExists THEN
                                                                  // Если измерение существует - сначала во избежание ошибки при вставке удалим его
                                                                  DeleteIncTaxDimCode;
                                                                InsertIncTaxDimCode;
                                                                // NC NC-973 < SKV
                                                              END;

                                                   CaptionML=[ENU=Financial Instrument No.;
                                                              RUS=Финансовый Инструмент Но.];
                                                   Description=NC PIF001 }
    { 55125;  ;Linked G/L Entry No.;Integer       ;TableRelation="G/L Entry";
                                                   CaptionML=[ENU=Linked G/L Entry No.;
                                                              RUS=Связанная Фин. Операция Но.];
                                                   Description=NC PIF001 }
    { 56000;  ;Balance Entry       ;Boolean       ;CaptionML=[ENU=Balance Entry;
                                                              RUS=Балансирующая Операция];
                                                   Description=NC MDB01 }
    { 56010;  ;Debit Quantity      ;Decimal       ;CaptionML=[ENU=Debit Quantity;
                                                              RUS=Дебет Кол-во];
                                                   Description=NC PIF010 MP }
    { 56020;  ;Credit Quantity     ;Decimal       ;CaptionML=[ENU=Credit Quantity;
                                                              RUS=Кредит Кол-во];
                                                   Description=NC PIF010 MP }
    { 56030;  ;Source G/L Account No.;Code20      ;OnValidate=VAR
                                                                GLAcc@1101495000 : Record 15;
                                                                FGLAcc@1101495001 : Record 50193;
                                                              BEGIN
                                                                //NCS2055 > AAP
                                                                GLSetup.GET;
                                                                IF "Source G/L Account No." <> '' THEN BEGIN
                                                                  CASE GLSetup."Source Account Type" OF
                                                                    GLSetup."Source Account Type"::"NAV Account":BEGIN
                                                                      GLAcc.GET("Source G/L Account No.");
                                                                    END;
                                                                    GLSetup."Source Account Type"::"FiRe Account":BEGIN
                                                                      FGLAcc.GET("Source G/L Account No.");
                                                                    END;
                                                                  END;
                                                                END;
                                                                //NCS2055 < AAP
                                                              END;

                                                   OnLookup=VAR
                                                              GLAcc@1101495001 : Record 15;
                                                              FGLAcc@1101495000 : Record 50193;
                                                            BEGIN
                                                              //NCS2055 > AAP
                                                              GLSetup.GET;
                                                              CASE GLSetup."Source Account Type" OF
                                                                GLSetup."Source Account Type"::"NAV Account":BEGIN
                                                                  IF PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK THEN BEGIN
                                                                    VALIDATE("Source G/L Account No.", GLAcc."No.");
                                                                  END;
                                                                END;
                                                                GLSetup."Source Account Type"::"FiRe Account":BEGIN
                                                                  IF PAGE.RUNMODAL(0,FGLAcc) = ACTION::LookupOK THEN BEGIN
                                                                    VALIDATE("Source G/L Account No.", FGLAcc."No.");
                                                                  END;
                                                                END;
                                                              END;
                                                              //NCS2055 < AAP
                                                            END;

                                                   CaptionML=[ENU=Source G/L Account No.;
                                                              RUS=Источник Фин. Счет Но.];
                                                   Description=NC MIO-61 DP,NCS-1715,NCS-2055;
                                                   Editable=Yes }
    { 56040;  ;Source User ID      ;Code20        ;OnLookup=VAR
                                                              LoginMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                            END;

                                                   CaptionML=[ENU=Source User ID;
                                                              RUS=Источник Код Пользователя];
                                                   Description=NCMIO-10 DP;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   SumIndexFields=Balance (LCY);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Journal Template Name,Journal Batch Name,Posting Date,Document No.;
                                                   MaintainSQLIndex=No }
    {    ;Account Type,Account No.,Applies-to Doc. Type,Applies-to Doc. No. }
    {    ;Document No.                            ;MaintainSQLIndex=No }
    {    ;Incoming Document Entry No.              }
    {    ;Buffer Entry No.,Cons. Source Code       }
    {    ;Journal Template Name,Journal Batch Name,Export Register No.,Export Cons. Source Code }
    {    ;Journal Template Name,Journal Batch Name,Export Register No.,Export Cons. Source Code,Balance Entry }
    {    ;Export Register No.,Export Cons. Source Code,Except Correspondence }
    {    ;Except Correspondence,Account No.,External System ID,Posting Date,FA Operation }
    {    ;External Document ID,External Operation No }
    {    ;Source FA Entry No.,Cons. Source Code    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@="%1=Account Type,%2=Balance Account Type";ENU=%1 or %2 must be a G/L Account or Bank Account.;RUS=%1 или %2 должен быть счетом ГК или банковским счетом.';
      Text001@1001 : TextConst 'ENU=You must not specify %1 when %2 is %3.;RUS=Нельзя определять %1, когда %2 равно %3.';
      Text002@1002 : TextConst 'ENU=cannot be specified without %1;RUS=не может быть определено без %1';
      Text003@1003 : TextConst '@@@="%1=Caption of Currency Code field, %2=Caption of table Gen Journal, %3=FromCurrencyCode, %4=ToCurrencyCode";ENU=The %1 in the %2 will be changed from %3 to %4.\\Do you want to continue?;RUS=%1 в %2 будет изменен с %3 на %4.\\Продолжить?';
      Text005@1005 : TextConst 'ENU=The update has been interrupted to respect the warning.;RUS=Обновление прервано из-за предупреждения.';
      Text006@1006 : TextConst 'ENU=The %1 option can only be used internally in the system.;RUS=Параметр %1 может использоваться только системой.';
      Text007@1007 : TextConst '@@@="%1=Account Type,%2=Balance Account Type";ENU=%1 or %2 must be a bank account.;RUS=%1 или %2 должно быть банковским счетом.';
      Text008@1008 : TextConst 'ENU=" must be 0 when %1 is %2.";RUS=" должно быть 0, когда %1 равно %2."';
      Text009@1009 : TextConst 'ENU=LCY;RUS=руб.';
      Text010@1010 : TextConst 'ENU=%1 must be %2 or %3.;RUS=%1 должно быть %2 или %3.';
      Text011@1011 : TextConst 'ENU=%1 must be negative.;RUS=%1: требуется отрицательное значение.';
      Text012@1012 : TextConst 'ENU=%1 must be positive.;RUS=%1: требуется положительное значение.';
      Text013@1013 : TextConst 'ENU=The %1 must not be more than %2.;RUS=%1 не должно быть больше %2.';
      GenJnlTemplate@1014 : Record 80;
      GenJnlBatch@1015 : Record 232;
      GenJnlLine@1016 : Record 81;
      Currency@1022 : Record 4;
      CurrExchRate@1023 : Record 330;
      PaymentTerms@1024 : Record 3;
      CustLedgEntry@1025 : Record 21;
      VendLedgEntry@1026 : Record 25;
      GenJnlAlloc@1027 : Record 221;
      VATPostingSetup@1028 : Record 325;
      GenBusPostingGrp@1035 : Record 250;
      GenProdPostingGrp@1036 : Record 251;
      GLSetup@1037 : Record 98;
      Job@1060 : Record 167;
      SourceCodeSetup@1017 : Record 242;
      TempJobJnlLine@1059 : TEMPORARY Record 210;
      StdText@1210003 : Record 7;
      GLEntry@1210002 : Record 17;
      VATProdGr@1210005 : Record 324;
      SalesSetup@1210000 : Record 311;
      PurchSetup@1210001 : Record 312;
      VendAgrmt@1210008 : Record 14901;
      CustAgrmt@1210007 : Record 14902;
      BankAccountDetail@1210013 : Record 12436;
      PaymentOrderCode@1210004 : Record 14918;
      ApplyCustEntries@1210038 : Page 232;
      ApplyVendEntries@1210039 : Page 233;
      NoSeriesMgt@1040 : Codeunit 396;
      CustCheckCreditLimit@1041 : Codeunit 312;
      SalesTaxCalculate@1042 : Codeunit 398;
      GenJnlApply@1043 : Codeunit 225;
      GenJnlShowCTEntries@1039 : Codeunit 16;
      CustEntrySetApplID@1044 : Codeunit 101;
      VendEntrySetApplID@1045 : Codeunit 111;
      DimMgt@1046 : Codeunit 408;
      PaymentToleranceMgt@1053 : Codeunit 426;
      DeferralUtilities@1051 : Codeunit 1720;
      ApprovalsMgmt@1069 : Codeunit 1535;
      Window@1004 : Dialog;
      VATReinstMgt@1210017 : Codeunit 12418;
      DeferralDocType@1050 : 'Purchase,Sales,G/L';
      FromCurrencyCode@1048 : Code[10];
      ToCurrencyCode@1049 : Code[10];
      CurrencyCode@1052 : Code[10];
      Text014@1054 : TextConst '@@@="%1=Caption of Table Customer, %2=Customer No, %3=Caption of field Bill-to Customer No, %4=Value of Bill-to customer no.";ENU=The %1 %2 has a %3 %4.\\Do you still want to use %1 %2 in this journal line?;RUS=%1 %2 имеет %3 %4.\\Все равно использовать %1 %2 в этой строке журнала?';
      TemplateFound@1056 : Boolean;
      Text015@1058 : TextConst 'ENU=You are not allowed to apply and post an entry to an entry with an earlier posting date.\\Instead, post %1 %2 and then apply it to %3 %4.;RUS=Нельзя учитывать операцию и применять ее к операции с более ранней датой учета.\\Вместо этого выполните учет %1 %2, а затем примените результат к %3 %4.';
      CurrencyDate@1061 : Date;
      Text016@1062 : TextConst 'ENU=%1 must be G/L Account or Bank Account.;RUS=%1 должен быть "Счет ГК" или "Банк. счет".';
      HideValidationDialog@1064 : Boolean;
      Text018@1066 : TextConst 'ENU=%1 can only be set when %2 is set.;RUS=%1 может быть настроен, если настроен %2.';
      Text019@1067 : TextConst 'ENU=%1 cannot be changed when %2 is set.;RUS=Невозможно изменить %1, если установлен %2.';
      GLSetupRead@1019 : Boolean;
      ExportAgainQst@1038 : TextConst 'ENU=One or more of the selected lines have already been exported. Do you want to export them again?;RUS=Одна или несколько выбранных строк уже импортированы. Выполнить их экспорт повторно?';
      NothingToExportErr@1021 : TextConst 'ENU=There is nothing to export.;RUS=Нечего экспортировать.';
      NotExistErr@1068 : TextConst '@@@="%1=Document number";ENU=Document number %1 does not exist or is already closed.;RUS=Номер документа %1 не существует или уже закрыт.';
      DocNoFilterErr@1047 : TextConst 'ENU=The document numbers cannot be renumbered while there is an active filter on the Document No. field.;RUS=Номера документов нельзя перенумеровать при активном фильтре по полю "Номер документа".';
      DueDateMsg@1150 : TextConst 'ENU=This posting date will cause an overdue payment.;RUS=Эта дата учета приведет к появлению просроченного платежа.';
      CalcPostDateMsg@1169 : TextConst 'ENU=Processing payment journal lines #1##########;RUS=Обработка строк журнала платежей #1##########';
      Text14900@1210009 : TextConst 'ENU=You must save current line before entering %1.;RUS=Необходимо сохранить текущую строку перед вводом %1.';
      Text14910@1210011 : TextConst 'ENU=%1 series %2 number %3 issued by %4 %5.;RUS=%1 серия %2 номер %3 выдан %4 %5.';
      Text14925@1470000 : TextConst 'ENU=must be less than %1;RUS=должно быть меньше %1';
      ManualAmount@1210006 : Boolean;
      Text14700@1210014 : TextConst 'ENU=You cannot cancel payment order export because the payment order relates to import bank statement %1.;RUS=Невозможно отменить экспорт платежного поручения, так как оно относится к импорту выписки с банковского счета %1.';
      Text17300@1210010 : TextConst 'ENU="You must not specify %1 for ";RUS="Невозможно указать %1 для "';
      "NCV>"@1101495010 : Integer;
      NeedUserSetupCheck@1101495009 : Boolean;
      IsChange@1101495008 : Boolean;
      UserSetup@1101495007 : Record 91;
      GenJnlBatch1@1101495006 : Record 232;
      "MTF02 >"@1101495005 : Integer;
      FI@1101495004 : Record 50021;
      FIType@1101495003 : Record 50051;
      "MTF02 <"@1101495002 : Integer;
      ShouldBeApprove@1101495001 : Boolean;
      g_blnIsUpdate@1101495000 : Boolean;
      "NCT>"@1101495025 : TextConst;
      Text55010@1101495024 : TextConst 'ENU=You cannot edit auto batch %1.;RUS=Вы не можете редактировать автоматический раздел %1.';
      Text50001@1101495023 : TextConst 'ENU=You should define %1 for %2 %3;RUS=Укажите значение %1 для %2 %3';
      Text50002@1101495022 : TextConst 'ENU=It wasn''t found %1 for %2 %3 and %4 %5.;RUS=Не найдена %1 для %2 %3 и %4 %5.';
      Text50090@1101495021 : TextConst 'ENU=You cannot specify %1 %2 becaus in the Company %3 allowed G/L accounting only.;RUS=Вы не можете указать %1 %2, т.к. в фирме %3  разрешен только финансовый учет по плану счетов.';
      ApproveSameUserErr@1101495020 : TextConst 'ENU=You cannot approve the line which was modified by you.;RUS=Вы не можете утвердить строку которая была Вами же изменена.';
      ModifyApprovedErr@1101495019 : TextConst 'ENU="Your cannot modify gen. journal line %1=%2, %3=%4, %5=%6 because it is approved.";RUS="Вы не можете изменить строку фин. журнала %1=%2, %3=%4, %5=%6, потому что она утверждена."';
      PostNotApprovedErr@1101495018 : TextConst 'ENU="Gen. journal line %1=%2, %3=%4, %5=%6 cannot be posted because it is not approved.";RUS="Строка фин. журнала %1=%2, %3=%4, %5=%6 не может быть учтена, потому что она не утверждена."';
      Text50003@1101495017 : TextConst 'ENU=A warning! Not Consolidate flag has been setup for consolidated Business Unit %1 in the journal line %2.;RUS=Предупреждение! Филиал %1 является консолидируемым, но в строке %2 установлен признак %3';
      Text50004@1101495016 : TextConst 'ENU=A warning! Not Consolidate flag has been setup and non consolidated Business Unit %1 has been removed in the journal line %2.;RUS=Предупреждение! Неконсолидируемый филиал %1 удален из строки %2, но признак %3 установлен.';
      GenJnlApprovalSetupNotFoundErr@1101495015 : TextConst 'ENU="Gen. Jnl. Approval Setup is not found for G/L Account No.=%1, User ID=%2";RUS="Фин. Журнал Настройка Утверждения не найдена для счета ГК=%1, Код пользователя=%2"';
      ApprovalLimitAmountErr@1101495014 : TextConst 'ENU=Limit Amount %1 exceeded for account %2;RUS=Сумма Лимита %1 превышена для счета %2';
      NotAllowedApproveErr@1101495013 : TextConst 'ENU=You are not allowed to approve this line (%1).;RUS=Вы не можете утвердить эту строку (%1).';
      PostNotApprovedErr2@1101495012 : TextConst 'ENU="Gen. journal line %1=%2, %3=%4, %5=%6 cannot be posted because it is not approved.\Refer to %7.";RUS="Строка фин. журнала %1=%2, %3=%4, %5=%6 не может быть учтена, потому что она не утверждена.\Обратитесь к %7."';
      ApprovalSetupNotFoundErr@1101495011 : TextConst 'ENU="Gen. Jnl. Approval Setup is not found for G/L Account No.=%1, Amount(%2)=%3";RUS="Фин. Журнал Настройка Утверждения не найдена для счета ГК=%1, Сумма(%2)=%3 "';
      DimensionSetEntry@1101495026 : Record 480;

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        ("Account No." = '') AND (Amount = 0) AND
        (("Bal. Account No." = '') OR NOT "System-Created Entry"));
    END;

    PROCEDURE UpdateLineBalance@2();
    VAR
      VATAllocation@1470000 : Record 14925;
    BEGIN
      //NC MDB01 > MP
      {
      IF ((Amount > 0) AND (NOT Correction)) OR
         ((Amount < 0) AND Correction)
      }
      IF (((Amount > 0) OR (Quantity > 0)) AND (NOT Correction)) OR
         (((Amount < 0) OR (Quantity < 0)) AND Correction)
      //NC MDB01 < MP
      THEN BEGIN
        "Debit Amount" := Amount;
        "Credit Amount" := 0
        //NC PIF010 > MP
        ;
        "Debit Quantity" := Quantity;
        "Credit Quantity" := 0;
        //NC PIF010 < MP
      END ELSE BEGIN
        "Debit Amount" := 0;
        "Credit Amount" := -Amount;
        //NC PIF010 > MP
        "Debit Quantity" := 0;
        "Credit Quantity" := -Quantity;
        //NC PIF010 < MP
      END;
      IF "Currency Code" = '' THEN
        "Amount (LCY)" := Amount;
      IF (("Amount (LCY)" > 0) AND (NOT Correction)) OR
         (("Amount (LCY)" < 0) AND Correction)
      THEN BEGIN
        "Debit Amount (LCY)" := "Amount (LCY)";
        "Credit Amount (LCY)" := 0
      END ELSE BEGIN
        "Debit Amount (LCY)" := 0;
        "Credit Amount (LCY)" := -"Amount (LCY)";
      END;
      CASE TRUE OF
        ("Account No." <> '') AND ("Bal. Account No." <> ''):
          "Balance (LCY)" := 0;
        "Bal. Account No." <> '':
          "Balance (LCY)" := -"Amount (LCY)";
        ELSE
          IF "VAT Settlement Part" <> 0 THEN
            "Balance (LCY)" := "VAT Amount (LCY)"
          ELSE
            "Balance (LCY)" := "Amount (LCY)";
      END;

      CLEAR(GenJnlAlloc);
      //NC NOS-26 > SPA
      IF "Transaction Type" <> "Transaction Type"::Automatic THEN
      //NC NOS-26 < SPA
        GenJnlAlloc.UpdateAllocations(Rec);
      VATAllocation.UpdateAllocations(Rec,ManualAmount);
      ManualAmount := FALSE;

      UpdateSalesPurchLCY;

      IF ("Deferral Code" <> '') AND (Amount <> xRec.Amount) AND ((Amount <> 0) AND (xRec.Amount <> 0)) THEN
        VALIDATE("Deferral Code");
    END;

    PROCEDURE SetUpNewLine@9(LastGenJnlLine@1000 : Record 81;Balance@1001 : Decimal;BottomLine@1002 : Boolean);
    BEGIN
      GenJnlTemplate.GET("Journal Template Name");
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");

      GenJnlBatch.CheckBallAccType;  // NC MIO-11 AES

      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF GenJnlLine.FINDFIRST THEN BEGIN
        "Posting Date" := LastGenJnlLine."Posting Date";
        "Document Date" := LastGenJnlLine."Posting Date";
        //NC M1 > EB
        IF GenJnlTemplate.Type <> GenJnlTemplate.Type::"Bank Payments" THEN
        //NC M1 < EB
          "Document No." := LastGenJnlLine."Document No.";
        IF BottomLine AND
           (Balance - LastGenJnlLine."Balance (LCY)" = 0) AND
           NOT LastGenJnlLine.EmptyLine
        THEN
          IncrementDocumentNo;
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF GenJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
        END;
      END;
      IF GenJnlTemplate.Recurring THEN
        "Recurring Method" := LastGenJnlLine."Recurring Method";
      CASE GenJnlTemplate.Type OF
        GenJnlTemplate.Type::Payments:
          BEGIN
            "Account Type" := "Account Type"::Vendor;
            "Document Type" := "Document Type"::Payment;
          END;
        ELSE BEGIN
          "Account Type" := LastGenJnlLine."Account Type";
          "Document Type" := LastGenJnlLine."Document Type";
        END;
      END;
      "Source Code" := GenJnlTemplate."Source Code";
      "Reason Code" := GenJnlBatch."Reason Code";
      //NC MDB01 > MP
      "Transaction Type" := GenJnlBatch."Batch Type";
      //NC MDB01 < MP
      "Posting No. Series" := GenJnlBatch."Posting No. Series";
      "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset"]) AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset"])
      THEN
        "Account Type" := "Account Type"::"G/L Account";

      // NC MIO-11 > AES
      IF GLSetup.IsGLAccountingOnly AND
         ("Account Type" IN ["Account Type"::Customer,
                             "Account Type"::Vendor,
                             "Account Type"::"Bank Account"])
      THEN
        "Account Type" := "Account Type"::"G/L Account";
      // NC MIO-11 < AES

      VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      Description := '';
      IF GenJnlBatch."Suggest Balancing Amount" THEN
        SuggestBalancingAmount(LastGenJnlLine,BottomLine);

      //NC MTF02 > AKU
      "FI Portfolio" := GenJnlBatch."FI Portfolio";
      "FI Posting Book" := GenJnlBatch."FI Posting Book";
      //NC MTF02 < AKU

      //NC NCS-1880 > ORM
      "Modified By" := USERID;
      //NC NCS-1880 < ORM
    END;

    PROCEDURE InitNewLine@94(PostingDate@1000 : Date;DocumentDate@1001 : Date;PostingDescription@1002 : Text[50];ShortcutDim1Code@1003 : Code[20];ShortcutDim2Code@1004 : Code[20];DimSetID@1005 : Integer;ReasonCode@1006 : Code[10]);
    BEGIN
      INIT;
      "Posting Date" := PostingDate;
      "Document Date" := DocumentDate;
      Description := PostingDescription;
      "Shortcut Dimension 1 Code" := ShortcutDim1Code;
      "Shortcut Dimension 2 Code" := ShortcutDim2Code;
      "Dimension Set ID" := DimSetID;
      "Reason Code" := ReasonCode;
    END;

    PROCEDURE CheckDocNoOnLines@78();
    VAR
      GenJnlBatch@1002 : Record 232;
      GenJnlLine@1001 : Record 81;
      LastDocNo@1003 : Code[20];
    BEGIN
      GenJnlLine.COPYFILTERS(Rec);

      IF NOT GenJnlLine.FINDSET THEN
        EXIT;
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        EXIT;

      CLEAR(NoSeriesMgt);
      REPEAT
        GenJnlLine.CheckDocNoBasedOnNoSeries(LastDocNo,GenJnlBatch."No. Series",NoSeriesMgt);
        LastDocNo := GenJnlLine."Document No.";
      UNTIL GenJnlLine.NEXT = 0;
    END;

    PROCEDURE CheckDocNoBasedOnNoSeries@74(LastDocNo@1002 : Code[20];NoSeriesCode@1000 : Code[10];VAR NoSeriesMgtInstance@1001 : Codeunit 396);
    BEGIN
      IF NoSeriesCode = '' THEN
        EXIT;

      IF (LastDocNo = '') OR ("Document No." <> LastDocNo) THEN
        TESTFIELD("Document No.",NoSeriesMgtInstance.GetNextNo(NoSeriesCode,"Posting Date",FALSE));
    END;

    PROCEDURE RenumberDocumentNo@68();
    VAR
      GenJnlLine2@1006 : Record 81;
      DocNo@1003 : Code[20];
      FirstDocNo@1008 : Code[20];
      FirstTempDocNo@1009 : Code[20];
      LastTempDocNo@1010 : Code[20];
    BEGIN
      TESTFIELD("Check Printed",FALSE);

      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        EXIT;
      IF GETFILTER("Document No.") <> '' THEN
        ERROR(DocNoFilterErr);
      CLEAR(NoSeriesMgt);
      FirstDocNo := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
      FirstTempDocNo := 'RENUMBERED-000000001';
      // step1 - renumber to non-existing document number
      DocNo := FirstTempDocNo;
      GenJnlLine2 := Rec;
      GenJnlLine2.RESET;
      RenumberDocNoOnLines(DocNo,GenJnlLine2);
      LastTempDocNo := DocNo;

      // step2 - renumber to real document number (within Filter)
      DocNo := FirstDocNo;
      GenJnlLine2.COPYFILTERS(Rec);
      GenJnlLine2 := Rec;
      RenumberDocNoOnLines(DocNo,GenJnlLine2);

      // step3 - renumber to real document number (outside filter)
      DocNo := INCSTR(DocNo);
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Document No.",FirstTempDocNo,LastTempDocNo);
      RenumberDocNoOnLines(DocNo,GenJnlLine2);

      GET("Journal Template Name","Journal Batch Name","Line No.");
    END;

    LOCAL PROCEDURE RenumberDocNoOnLines@69(VAR DocNo@1000 : Code[20];VAR GenJnlLine2@1001 : Record 81);
    VAR
      LastGenJnlLine@1002 : Record 81;
      GenJnlLine3@1005 : Record 81;
      PrevDocNo@1004 : Code[20];
      FirstDocNo@1006 : Code[20];
      First@1003 : Boolean;
    BEGIN
      FirstDocNo := DocNo;
      WITH GenJnlLine2 DO BEGIN
        SETCURRENTKEY("Journal Template Name","Journal Batch Name","Document No.");
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        LastGenJnlLine.INIT;
        First := TRUE;
        IF FINDSET THEN BEGIN
          REPEAT
            IF "Document No." = FirstDocNo THEN
              EXIT;
            IF NOT First AND (("Document No." <> PrevDocNo) OR ("Bal. Account No." <> '')) AND NOT LastGenJnlLine.EmptyLine THEN
              DocNo := INCSTR(DocNo);
            PrevDocNo := "Document No.";
            IF "Document No." <> '' THEN BEGIN
              IF "Applies-to ID" = "Document No." THEN
                RenumberAppliesToID(GenJnlLine2,"Document No.",DocNo);
              RenumberAppliesToDocNo(GenJnlLine2,"Document No.",DocNo);
            END;
            GenJnlLine3.GET("Journal Template Name","Journal Batch Name","Line No.");
            GenJnlLine3."Document No." := DocNo;
            GenJnlLine3.MODIFY;
            First := FALSE;
            LastGenJnlLine := GenJnlLine2
          UNTIL NEXT = 0
        END
      END
    END;

    LOCAL PROCEDURE RenumberAppliesToID@70(GenJnlLine2@1002 : Record 81;OriginalAppliesToID@1000 : Code[50];NewAppliesToID@1001 : Code[50]);
    VAR
      CustLedgEntry@1003 : Record 21;
      CustLedgEntry2@1009 : Record 21;
      VendLedgEntry@1004 : Record 25;
      VendLedgEntry2@1010 : Record 25;
      AccType@1005 : Option;
      AccNo@1006 : Code[20];
    BEGIN
      GetAccTypeAndNo(GenJnlLine2,AccType,AccNo);
      CASE AccType OF
        "Account Type"::Customer:
          BEGIN
            CustLedgEntry.SETRANGE("Customer No.",AccNo);
            CustLedgEntry.SETRANGE("Applies-to ID",OriginalAppliesToID);
            IF CustLedgEntry.FINDSET THEN
              REPEAT
                CustLedgEntry2.GET(CustLedgEntry."Entry No.");
                CustLedgEntry2."Applies-to ID" := NewAppliesToID;
                CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry2);
              UNTIL CustLedgEntry.NEXT = 0;
          END;
        "Account Type"::Vendor:
          BEGIN
            VendLedgEntry.SETRANGE("Vendor No.",AccNo);
            VendLedgEntry.SETRANGE("Applies-to ID",OriginalAppliesToID);
            IF VendLedgEntry.FINDSET THEN
              REPEAT
                VendLedgEntry2.GET(VendLedgEntry."Entry No.");
                VendLedgEntry2."Applies-to ID" := NewAppliesToID;
                CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry2);
              UNTIL VendLedgEntry.NEXT = 0;
          END;
        ELSE
          EXIT
      END;
      GenJnlLine2."Applies-to ID" := NewAppliesToID;
      GenJnlLine2.MODIFY;
    END;

    LOCAL PROCEDURE RenumberAppliesToDocNo@71(GenJnlLine2@1002 : Record 81;OriginalAppliesToDocNo@1001 : Code[20];NewAppliesToDocNo@1000 : Code[20]);
    BEGIN
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine2."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine2."Journal Batch Name");
      GenJnlLine2.SETRANGE("Applies-to Doc. Type",GenJnlLine2."Document Type");
      GenJnlLine2.SETRANGE("Applies-to Doc. No.",OriginalAppliesToDocNo);
      GenJnlLine2.MODIFYALL("Applies-to Doc. No.",NewAppliesToDocNo);
    END;

    LOCAL PROCEDURE CheckVATInAlloc@1();
    BEGIN
      IF "Gen. Posting Type" <> 0 THEN BEGIN
        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
        IF GenJnlAlloc.FIND('-') THEN
          REPEAT
            GenJnlAlloc.CheckVAT(Rec);
          UNTIL GenJnlAlloc.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetCurrencyCode@4(AccType2@1000 : 'G/L Account,Customer,Vendor,Bank Account';AccNo2@1001 : Code[20]) : Boolean;
    VAR
      BankAcc@1002 : Record 270;
    BEGIN
      "Currency Code" := '';
      IF AccNo2 <> '' THEN
        IF AccType2 = AccType2::"Bank Account" THEN
          IF BankAcc.GET(AccNo2) THEN
            "Currency Code" := BankAcc."Currency Code";
      EXIT("Currency Code" <> '');
    END;

    PROCEDURE SetCurrencyFactor@130(CurrencyCode@1000 : Code[10];CurrencyFactor@1001 : Decimal);
    BEGIN
      "Currency Code" := CurrencyCode;
      IF "Currency Code" = '' THEN
        "Currency Factor" := 1
      ELSE
        "Currency Factor" := CurrencyFactor;
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      IF "Additional-Currency Posting" =
         "Additional-Currency Posting"::"Additional-Currency Amount Only"
      THEN BEGIN
        IF GLSetup."Additional Reporting Currency" = '' THEN
          ReadGLSetup;
        CurrencyCode := GLSetup."Additional Reporting Currency";
      END ELSE
        CurrencyCode := "Currency Code";

      IF CurrencyCode = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      END ELSE
        IF CurrencyCode <> Currency.Code THEN BEGIN
          Currency.GET(CurrencyCode);
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE UpdateSource@6();
    VAR
      SourceExists1@1000 : Boolean;
      SourceExists2@1001 : Boolean;
    BEGIN
      SourceExists1 := ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '');
      SourceExists2 := ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '');
      CASE TRUE OF
        SourceExists1 AND NOT SourceExists2:
          BEGIN
            "Source Type" := "Account Type";
            "Source No." := "Account No.";
          END;
        SourceExists2 AND NOT SourceExists1:
          BEGIN
            "Source Type" := "Bal. Account Type";
            "Source No." := "Bal. Account No.";
          END;
        ELSE BEGIN
          "Source Type" := "Source Type"::" ";
          "Source No." := '';
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGLAcc@7(GLAcc@1000 : Record 15);
    BEGIN
      GLAcc.CheckGLAcc;
      IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') OR "System-Created Entry" THEN
        EXIT;
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          EXIT;
      // NC MIO-11 > AES
      //GLAcc.TESTFIELD("Direct Posting",TRUE);
      IF NOT GLSetup.IsGLAccountingOnly THEN
        GLAcc.TESTFIELD("Direct Posting",TRUE);
      // NC MIO-11 < AES
    END;

    LOCAL PROCEDURE CheckICPartner@128(ICPartnerCode@1000 : Code[20];AccountType@1001 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';AccountNo@1002 : Code[20]);
    VAR
      ICPartner@1003 : Record 413;
    BEGIN
      IF ICPartnerCode <> '' THEN BEGIN
        IF GenJnlTemplate.GET("Journal Template Name") THEN;
        IF (ICPartnerCode <> '') AND ICPartner.GET(ICPartnerCode) THEN BEGIN
          ICPartner.CheckICPartnerIndirect(FORMAT(AccountType),AccountNo);
          "IC Partner Code" := ICPartnerCode;
        END;
      END;
    END;

    PROCEDURE GetFAAddCurrExchRate@8();
    VAR
      DeprBook@1000 : Record 5611;
      FADeprBook@1003 : Record 5612;
      FANo@1001 : Code[20];
      UseFAAddCurrExchRate@1002 : Boolean;
    BEGIN
      "FA Add.-Currency Factor" := 0;
      IF ("FA Posting Type" <> "FA Posting Type"::" ") AND
         ("Depreciation Book Code" <> '')
      THEN BEGIN
        IF "Account Type" = "Account Type"::"Fixed Asset" THEN
          FANo := "Account No.";
        IF "Bal. Account Type" = "Bal. Account Type"::"Fixed Asset" THEN
          FANo := "Bal. Account No.";
        IF FANo <> '' THEN BEGIN
          DeprBook.GET("Depreciation Book Code");
          CASE "FA Posting Type" OF
            "FA Posting Type"::"Acquisition Cost":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate - Acq. Cost";
            "FA Posting Type"::Depreciation:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Depr.";
            "FA Posting Type"::"Write-Down":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate -Write-Down";
            "FA Posting Type"::Appreciation:
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch. Rate - Apprec.";
            "FA Posting Type"::"Custom 1":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 1";
            "FA Posting Type"::"Custom 2":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 2";
            "FA Posting Type"::Disposal:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Disp.";
            "FA Posting Type"::Maintenance:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Maint.";
          END;
          IF UseFAAddCurrExchRate THEN BEGIN
            FADeprBook.GET(FANo,"Depreciation Book Code");
            FADeprBook.TESTFIELD("FA Add.-Currency Factor");
            "FA Add.-Currency Factor" := FADeprBook."FA Add.-Currency Factor";
          END;
        END;
      END;
    END;

    PROCEDURE GetShowCurrencyCode@10(CurrencyCode@1000 : Code[10]) : Code[10];
    BEGIN
      IF CurrencyCode <> '' THEN
        EXIT(CurrencyCode);

      EXIT(Text009);
    END;

    PROCEDURE ClearCustVendApplnEntry@11();
    VAR
      TempCustLedgEntry@1000 : TEMPORARY Record 21;
      TempVendLedgEntry@1001 : TEMPORARY Record 25;
      AccType@1004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1005 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          IF xRec."Applies-to ID" <> '' THEN BEGIN
            IF FindFirstCustLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID") THEN BEGIN
              ClearCustApplnEntryFields;
              TempCustLedgEntry.DELETEALL;
              CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
            END
          END ELSE
            IF xRec."Applies-to Doc. No." <> '' THEN
              IF FindFirstCustLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.") THEN BEGIN
                ClearCustApplnEntryFields;
                CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
              END;
        AccType::Vendor:
          IF xRec."Applies-to ID" <> '' THEN BEGIN
            IF FindFirstVendLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID") THEN BEGIN
              ClearVendApplnEntryFields;
              TempVendLedgEntry.DELETEALL;
              VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
            END
          END ELSE
            IF xRec."Applies-to Doc. No." <> '' THEN
              IF FindFirstVendLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.") THEN BEGIN
                ClearVendApplnEntryFields;
                CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
              END;
      END;
    END;

    LOCAL PROCEDURE ClearCustApplnEntryFields@56();
    BEGIN
      CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      CustLedgEntry."Amount to Apply" := 0;
    END;

    LOCAL PROCEDURE ClearVendApplnEntryFields@57();
    BEGIN
      VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      VendLedgEntry."Amount to Apply" := 0;
    END;

    PROCEDURE CheckFixedCurrency@12() : Boolean;
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Posting Date");

      IF NOT CurrExchRate.FINDLAST THEN
        EXIT(FALSE);

      IF CurrExchRate."Relational Currency Code" = '' THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      IF CurrExchRate."Fix Exchange Rate Amount" <>
         CurrExchRate."Fix Exchange Rate Amount"::Both
      THEN
        EXIT(FALSE);

      CurrExchRate.SETRANGE("Currency Code",CurrExchRate."Relational Currency Code");
      IF CurrExchRate.FINDLAST THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      EXIT(FALSE);
    END;

    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
      //NC NOS-26 > SPA
      //  DimMgt.GetDefaultDimID(
        DimMgt.GetDefaultDimID_Jnl(
          TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0,"Journal Template Name","Journal Batch Name");
      //NC NOS-26 < SPA
    END;

    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      TESTFIELD("Check Printed",FALSE);
      //NC NOS-26 > SPA
      //DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      DimMgt.ValidateShortcutDimValues_Jnl(FieldNumber,ShortcutDimCode,"Dimension Set ID",Rec);
      //NC NOS-26 < SPA
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      TESTFIELD("Check Printed",FALSE);
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [20] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowDimensions@26();
    VAR
      TableID@1101495001 : ARRAY [10] OF Integer;
      No@1101495000 : ARRAY [10] OF Code[20];
    BEGIN
      //NC NOS-26 > SPA
      DimMgt.SetObjectFrom(Rec);
      SpecifyTableID_No(TableID,No);
      //NC NOS-26 < SPA

      "Dimension Set ID" :=
      //NC NOS-26 > SPA
      //  DimMgt.EditDimensionSet2(
        DimMgt.EditDimensionSet3(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Financial Instrument No.",TableID,No);
      //NC NOS-26 < SPA
    END;

    PROCEDURE GetFAVATSetup@17();
    VAR
      LocalGlAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
      FABalAcc@1002 : Boolean;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
         ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
      THEN
        EXIT;
      FABalAcc := ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset");
      IF NOT FABalAcc THEN BEGIN
        ClearPostingGroups;
        "Tax Group Code" := '';
        VALIDATE("VAT Prod. Posting Group");
      END;
      IF FABalAcc THEN BEGIN
        ClearBalancePostingGroups;
        "Bal. Tax Group Code" := '';
        VALIDATE("Bal. VAT Prod. Posting Group");
      END;
      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
      THEN
        IF (("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") OR
            ("FA Posting Type" = "FA Posting Type"::Disposal) OR
            ("FA Posting Type" = "FA Posting Type"::Maintenance)) AND
           ("Posting Group" <> '')
        THEN
          IF FAPostingGr.GET("Posting Group") THEN BEGIN
            IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
              FAPostingGr.TESTFIELD("Acquisition Cost Account");
              LocalGlAcc.GET(FAPostingGr."Acquisition Cost Account");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Disposal THEN BEGIN
              FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
              LocalGlAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Maintenance THEN BEGIN
              FAPostingGr.TESTFIELD("Maintenance Expense Account");
              LocalGlAcc.GET(FAPostingGr."Maintenance Expense Account");
            END;
            LocalGlAcc.CheckGLAcc;
            IF NOT FABalAcc THEN BEGIN
              "Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("VAT Prod. Posting Group");
            END ELSE BEGIN;
              "Bal. Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Bal. Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Bal. Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "Bal. VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "Bal. VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Bal. Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("Bal. VAT Prod. Posting Group");
            END;
          END;
    END;

    LOCAL PROCEDURE GetFADeprBook@114();
    VAR
      FASetup@1000 : Record 5603;
      FADeprBook@1001 : Record 5612;
      DefaultFADeprBook@1002 : Record 5612;
    BEGIN
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;

        DefaultFADeprBook.SETRANGE("FA No.","Account No.");
        DefaultFADeprBook.SETRANGE("Default FA Depreciation Book",TRUE);

        CASE TRUE OF
          DefaultFADeprBook.FINDFIRST:
            "Depreciation Book Code" := DefaultFADeprBook."Depreciation Book Code";
          FADeprBook.GET("Account No.",FASetup."Default Depr. Book"):
            "Depreciation Book Code" := FASetup."Default Depr. Book";
          ELSE
            "Depreciation Book Code" := '';
        END;
      END;

      IF "Depreciation Book Code" <> '' THEN BEGIN
        FADeprBook.GET("Account No.","Depreciation Book Code");
        "Posting Group" := FADeprBook."FA Posting Group";
      END;
    END;

    PROCEDURE GetTemplate@16();
    BEGIN
      IF NOT TemplateFound THEN
        GenJnlTemplate.GET("Journal Template Name");
      TemplateFound := TRUE;
    END;

    LOCAL PROCEDURE UpdateSalesPurchLCY@19();
    BEGIN
      "Sales/Purch. (LCY)" := 0;
      IF (NOT "System-Created Entry") AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN BEGIN
        IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND ("Bal. Account No." <> '') THEN
          "Sales/Purch. (LCY)" := "Amount (LCY)" + "Bal. VAT Amount (LCY)";
        IF ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) AND ("Account No." <> '') THEN
          "Sales/Purch. (LCY)" := -("Amount (LCY)" - "VAT Amount (LCY)");
      END;
    END;

    PROCEDURE LookUpAppliesToDocCust@35(AccNo@1000 : Code[20]);
    VAR
      ApplyCustEntries@1002 : Page 232;
    BEGIN
      CLEAR(CustLedgEntry);
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
      IF AccNo <> '' THEN
        CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.ISEMPTY THEN BEGIN
          CustLedgEntry.SETRANGE("Document Type");
          CustLedgEntry.SETRANGE("Document No.");
        END;
      END;
      IF "Applies-to ID" <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE("Applies-to ID");
      END;
      IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE("Document Type");
      END;
      IF Amount <> 0 THEN BEGIN
        CustLedgEntry.SETRANGE(Positive,Amount < 0);
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE(Positive);
      END;
      ApplyCustEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
      ApplyCustEntries.SETRECORD(CustLedgEntry);
      ApplyCustEntries.LOOKUPMODE(TRUE);
      IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ApplyCustEntries.GETRECORD(CustLedgEntry);
        IF AccNo = '' THEN BEGIN
          AccNo := CustLedgEntry."Customer No.";
          IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN
            VALIDATE("Bal. Account No.",AccNo)
          ELSE
            VALIDATE("Account No.",AccNo);
        END;
        SetAmountWithCustLedgEntry;
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "Applies-to Doc. No." := CustLedgEntry."Document No.";
        "Applies-to ID" := '';
      END;
    END;

    PROCEDURE LookUpAppliesToDocVend@36(AccNo@1000 : Code[20]);
    VAR
      ApplyVendEntries@1001 : Page 233;
    BEGIN
      CLEAR(VendLedgEntry);
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      IF AccNo <> '' THEN
        VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.ISEMPTY THEN BEGIN
          VendLedgEntry.SETRANGE("Document Type");
          VendLedgEntry.SETRANGE("Document No.");
        END;
      END;
      IF "Applies-to ID" <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Applies-to ID");
      END;
      IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Document Type");
      END;
      IF  "Applies-to Doc. No." <> ''THEN BEGIN
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Document No.");
      END;
      IF Amount <> 0 THEN BEGIN
        VendLedgEntry.SETRANGE(Positive,Amount < 0);
        IF VendLedgEntry.ISEMPTY THEN;
        VendLedgEntry.SETRANGE(Positive);
      END;
      ApplyVendEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
      ApplyVendEntries.SETRECORD(VendLedgEntry);
      ApplyVendEntries.LOOKUPMODE(TRUE);
      IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ApplyVendEntries.GETRECORD(VendLedgEntry);
        IF AccNo = '' THEN BEGIN
          AccNo := VendLedgEntry."Vendor No.";
          IF "Bal. Account Type" = "Bal. Account Type"::Vendor THEN
            VALIDATE("Bal. Account No.",AccNo)
          ELSE
            VALIDATE("Account No.",AccNo);
        END;
        SetAmountWithVendLedgEntry;
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "Applies-to Doc. No." := VendLedgEntry."Document No.";
        "Applies-to ID" := '';
      END;
    END;

    PROCEDURE SetApplyToAmount@20();
    BEGIN
      IF "Account Type" = "Account Type"::Customer THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        CustLedgEntry.SETRANGE("Customer No.","Account No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        IF CustLedgEntry.FIND('-') THEN
          IF CustLedgEntry."Amount to Apply" = 0 THEN BEGIN
            CustLedgEntry.CALCFIELDS("Remaining Amount");
            CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
          END;
      END ELSE
        IF "Account Type" = "Account Type"::Vendor THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Document No.");
          VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
          VendLedgEntry.SETRANGE("Vendor No.","Account No.");
          VendLedgEntry.SETRANGE(Open,TRUE);
          IF VendLedgEntry.FIND('-') THEN
            IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END;
        END;
    END;

    PROCEDURE ValidateApplyRequirements@21(TempGenJnlLine@1000 : TEMPORARY Record 81);
    BEGIN
      IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
         (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
      THEN
        CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);

      IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
        IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
          CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
          CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
          CustLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
          CustLedgEntry.SETRANGE(Open,TRUE);
          IF CustLedgEntry.FIND('-') THEN
            REPEAT
              IF TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date" THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  CustLedgEntry."Document Type",CustLedgEntry."Document No.");
            UNTIL CustLedgEntry.NEXT = 0;
        END ELSE
          IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
            CustLedgEntry.SETCURRENTKEY("Document No.");
            CustLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
            IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
              CustLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
            CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
            IF CustLedgEntry.FIND('-') THEN
              IF TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date" THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  CustLedgEntry."Document Type",CustLedgEntry."Document No.");
          END;
      END ELSE
        IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN
          IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
            VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
            VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
            VendLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
            VendLedgEntry.SETRANGE(Open,TRUE);
            REPEAT
              IF TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date" THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            UNTIL VendLedgEntry.NEXT = 0;
            IF VendLedgEntry.FIND('-') THEN
              ;
          END ELSE
            IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgEntry.SETCURRENTKEY("Document No.");
              VendLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
              IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
                VendLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
              VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.FIND('-') THEN
                IF TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date" THEN
                  ERROR(
                    Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                    VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            END;
    END;

    LOCAL PROCEDURE UpdateCountryCodeAndVATRegNo@25(No@1000 : Code[20]);
    VAR
      Cust@1001 : Record 18;
      Vend@1002 : Record 23;
    BEGIN
      IF No = '' THEN BEGIN
        "Country/Region Code" := '';
        "VAT Registration No." := '';
        EXIT;
      END;

      ReadGLSetup;
      CASE TRUE OF
        ("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer):
          BEGIN
            Cust.GET(No);
            "Country/Region Code" := Cust."Country/Region Code";
            "VAT Registration No." := Cust."VAT Registration No.";
          END;
        ("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor):
          BEGIN
            Vend.GET(No);
            "Country/Region Code" := Vend."Country/Region Code";
            "VAT Registration No." := Vend."VAT Registration No.";
          END;
      END;
    END;

    PROCEDURE JobTaskIsSet@28() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND ("Account Type" = "Account Type"::"G/L Account"));
    END;

    PROCEDURE CreateTempJobJnlLine@27();
    VAR
      TmpJobJnlOverallCurrencyFactor@1001 : Decimal;
    BEGIN
      TESTFIELD("Posting Date");
      CLEAR(TempJobJnlLine);
      TempJobJnlLine.DontCheckStdCost;
      TempJobJnlLine.VALIDATE("Job No.","Job No.");
      TempJobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      IF CurrFieldNo <> FIELDNO("Posting Date") THEN
        TempJobJnlLine.VALIDATE("Posting Date","Posting Date")
      ELSE
        TempJobJnlLine.VALIDATE("Posting Date",xRec."Posting Date");
      TempJobJnlLine.VALIDATE(Type,TempJobJnlLine.Type::"G/L Account");
      IF "Job Currency Code" <> '' THEN BEGIN
        IF "Posting Date" = 0D THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Posting Date";

        IF "Currency Code" = "Job Currency Code" THEN
          "Job Currency Factor" := "Currency Factor"
        ELSE
          "Job Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Job Currency Code");
        TempJobJnlLine.SetCurrencyFactor("Job Currency Factor");
      END;
      TempJobJnlLine.VALIDATE("No.","Account No.");
      TempJobJnlLine.VALIDATE(Quantity,"Job Quantity");

      IF "Currency Factor" = 0 THEN BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := 1
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor";
      END ELSE BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := 1 / "Currency Factor"
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor" / "Currency Factor"
      END;

      IF "Job Quantity" <> 0 THEN
        TempJobJnlLine.VALIDATE("Unit Cost",((Amount - "VAT Amount") * TmpJobJnlOverallCurrencyFactor) / "Job Quantity");

      IF (xRec."Account No." = "Account No.") AND (xRec."Job Task No." = "Job Task No.") AND ("Job Unit Price" <> 0) THEN BEGIN
        IF TempJobJnlLine."Cost Factor" = 0 THEN
          TempJobJnlLine."Unit Price" := xRec."Job Unit Price";
        TempJobJnlLine."Line Amount" := xRec."Job Line Amount";
        TempJobJnlLine."Line Discount %" := xRec."Job Line Discount %";
        TempJobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        TempJobJnlLine.VALIDATE("Unit Price");
      END;
    END;

    PROCEDURE UpdatePricesFromJobJnlLine@22();
    BEGIN
      "Job Unit Price" := TempJobJnlLine."Unit Price";
      "Job Total Price" := TempJobJnlLine."Total Price";
      "Job Line Amount" := TempJobJnlLine."Line Amount";
      "Job Line Discount Amount" := TempJobJnlLine."Line Discount Amount";
      "Job Unit Cost" := TempJobJnlLine."Unit Cost";
      "Job Total Cost" := TempJobJnlLine."Total Cost";
      "Job Line Discount %" := TempJobJnlLine."Line Discount %";

      "Job Unit Price (LCY)" := TempJobJnlLine."Unit Price (LCY)";
      "Job Total Price (LCY)" := TempJobJnlLine."Total Price (LCY)";
      "Job Line Amount (LCY)" := TempJobJnlLine."Line Amount (LCY)";
      "Job Line Disc. Amount (LCY)" := TempJobJnlLine."Line Discount Amount (LCY)";
      "Job Unit Cost (LCY)" := TempJobJnlLine."Unit Cost (LCY)";
      "Job Total Cost (LCY)" := TempJobJnlLine."Total Cost (LCY)";
    END;

    PROCEDURE SetHideValidation@23(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetDefaultICPartnerGLAccNo@1058() : Code[20];
    VAR
      GLAcc@1001 : Record 15;
      GLAccNo@1002 : Code[20];
    BEGIN
      IF "IC Partner Code" <> '' THEN BEGIN
        IF "Account Type" = "Account Type"::"G/L Account" THEN
          GLAccNo := "Account No."
        ELSE
          GLAccNo := "Bal. Account No.";
        IF GLAcc.GET(GLAccNo) THEN
          EXIT(GLAcc."Default IC Partner G/L Acc. No")
      END;
    END;

    PROCEDURE IsApplied@30() : Boolean;
    BEGIN
      IF "Applies-to Doc. No." <> '' THEN
        EXIT(TRUE);
      IF "Applies-to ID" <> '' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE DataCaption@29() : Text[250];
    VAR
      GenJnlBatch@1000 : Record 232;
    BEGIN
      IF GenJnlBatch.GET("Journal Template Name","Journal Batch Name") THEN
        EXIT(GenJnlBatch.Name + '-' + GenJnlBatch.Description);
    END;

    LOCAL PROCEDURE ReadGLSetup@31();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
    END;

    PROCEDURE GetCustLedgerEntry@33();
    BEGIN
      IF ("Account Type" = "Account Type"::Customer) AND ("Account No." = '') AND
         ("Applies-to Doc. No." <> '') AND (Amount = 0)
      THEN BEGIN
        CustLedgEntry.RESET;
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        IF NOT CustLedgEntry.FINDFIRST THEN
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",CustLedgEntry."Customer No.");
        CustLedgEntry.CALCFIELDS("Remaining Amount");

        IF "Posting Date" <= CustLedgEntry."Pmt. Discount Date" THEN
          Amount := -(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -CustLedgEntry."Remaining Amount";

        IF "Currency Code" <> CustLedgEntry."Currency Code" THEN BEGIN
          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
          ToCurrencyCode := GetShowCurrencyCode(CustLedgEntry."Currency Code");
          IF NOT
             CONFIRM(
               Text003,TRUE,
               FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,
               ToCurrencyCode)
          THEN
            ERROR(Text005);
          VALIDATE("Currency Code",CustLedgEntry."Currency Code");
        END;

        "Document Type" := "Document Type"::Payment;
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "Applies-to Doc. No." := CustLedgEntry."Document No.";
        "Applies-to ID" := '';
        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice) AND
           ("Document Type" = "Document Type"::Payment)
        THEN
          "External Document No." := CustLedgEntry."External Document No.";
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF GenJnlBatch."Bal. Account No." <> '' THEN BEGIN
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        END ELSE
          VALIDATE(Amount);
      END;
    END;

    PROCEDURE GetVendLedgerEntry@37();
    BEGIN
      IF ("Account Type" = "Account Type"::Vendor) AND ("Account No." = '') AND
         ("Applies-to Doc. No." <> '') AND (Amount = 0)
      THEN BEGIN
        VendLedgEntry.RESET;
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        VendLedgEntry.SETRANGE(Open,TRUE);
        IF NOT VendLedgEntry.FINDFIRST THEN
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",VendLedgEntry."Vendor No.");
        VendLedgEntry.CALCFIELDS("Remaining Amount");

        IF "Posting Date" <= VendLedgEntry."Pmt. Discount Date" THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";

        IF "Currency Code" <> VendLedgEntry."Currency Code" THEN BEGIN
          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
          ToCurrencyCode := GetShowCurrencyCode(CustLedgEntry."Currency Code");
          IF NOT
             CONFIRM(
               Text003,
               TRUE,FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,ToCurrencyCode)
          THEN
            ERROR(Text005);
          VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        END;

        "Document Type" := "Document Type"::Payment;
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "Applies-to Doc. No." := VendLedgEntry."Document No.";
        "Applies-to ID" := '';
        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice) AND
           ("Document Type" = "Document Type"::Payment)
        THEN
          "External Document No." := VendLedgEntry."External Document No.";
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF GenJnlBatch."Bal. Account No." <> '' THEN BEGIN
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        END ELSE
          VALIDATE(Amount);
      END;
    END;

    LOCAL PROCEDURE CustVendAccountNosModified@32() : Boolean;
    BEGIN
      EXIT(
        (("Bal. Account No." <> xRec."Bal. Account No.") AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor])) OR
        (("Account No." <> xRec."Account No.") AND
         ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor])))
    END;

    LOCAL PROCEDURE CheckPaymentTolerance@34();
    BEGIN
      IF Amount <> 0 THEN
        IF ("Bal. Account No." <> xRec."Bal. Account No.") OR ("Account No." <> xRec."Account No.") THEN
          PaymentToleranceMgt.PmtTolGenJnl(Rec);
    END;

    PROCEDURE IncludeVATAmount@38() : Boolean;
    BEGIN
      EXIT(
        ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") AND
        ("VAT Calculation Type" <> "VAT Calculation Type"::"Reverse Charge VAT"));
    END;

    PROCEDURE ConvertAmtFCYToLCYForSourceCurrency@39(Amount@1000 : Decimal) : Decimal;
    VAR
      Currency@1001 : Record 4;
      CurrExchRate@1003 : Record 330;
      CurrencyFactor@1002 : Decimal;
    BEGIN
      IF (Amount = 0) OR ("Source Currency Code" = '') THEN
        EXIT(Amount);

      Currency.GET("Source Currency Code");
      CurrencyFactor := CurrExchRate.ExchangeRate("Posting Date","Source Currency Code");
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            "Posting Date","Source Currency Code",Amount,CurrencyFactor),
          Currency."Amount Rounding Precision"));
    END;

    PROCEDURE MatchSingleLedgerEntry@40();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",Rec);
    END;

    PROCEDURE GetStyle@41() : Text;
    BEGIN
      IF "Applied Automatically" THEN
        EXIT('Favorable')
    END;

    PROCEDURE GetOverdueDateInteractions@75(VAR OverdueWarningText@1001 : Text) : Text;
    VAR
      DueDate@1000 : Date;
    BEGIN
      DueDate := GetAppliesToDocDueDate;
      OverdueWarningText := '';
      IF (DueDate <> 0D) AND (DueDate < "Posting Date") THEN BEGIN
        OverdueWarningText := DueDateMsg;
        EXIT('Unfavorable');
      END;
      EXIT('');
    END;

    PROCEDURE ClearDataExchangeEntries@42(DeleteHeaderEntries@1002 : Boolean);
    VAR
      DataExchField@1001 : Record 1221;
      GenJournalLine@1000 : Record 81;
    BEGIN
      DataExchField.DeleteRelatedRecords("Data Exch. Entry No.","Data Exch. Line No.");

      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETRANGE("Data Exch. Entry No.","Data Exch. Entry No.");
      GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
      IF GenJournalLine.ISEMPTY OR DeleteHeaderEntries THEN
        DataExchField.DeleteRelatedRecords("Data Exch. Entry No.",0);
    END;

    PROCEDURE ClearAppliedGenJnlLine@49();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      IF "Applies-to Doc. No." = '' THEN
        EXIT;
      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
      GenJournalLine.SETRANGE("Document Type","Applies-to Doc. Type");
      GenJournalLine.SETRANGE("Document No.","Applies-to Doc. No.");
      GenJournalLine.MODIFYALL("Applied Automatically",FALSE);
      GenJournalLine.MODIFYALL("Account Type",GenJournalLine."Account Type"::"G/L Account");
      GenJournalLine.MODIFYALL("Account No.",'');
    END;

    PROCEDURE GetIncomingDocumentURL@50() : Text[1000];
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      IF "Incoming Document Entry No." = 0 THEN
        EXIT('');

      IncomingDocument.GET("Incoming Document Entry No.");
      EXIT(IncomingDocument.GetURL);
    END;

    PROCEDURE InsertPaymentFileError@64(Text@1001 : Text);
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.CreateNew(Rec,Text,'','');
    END;

    PROCEDURE InsertPaymentFileErrorWithDetails@83(ErrorText@1001 : Text;AddnlInfo@1002 : Text;ExtSupportInfo@1003 : Text);
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.CreateNew(Rec,ErrorText,AddnlInfo,ExtSupportInfo);
    END;

    PROCEDURE DeletePaymentFileBatchErrors@67();
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.DeleteJnlBatchErrors(Rec);
    END;

    PROCEDURE DeletePaymentFileErrors@61();
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.DeleteJnlLineErrors(Rec);
    END;

    PROCEDURE HasPaymentFileErrors@24() : Boolean;
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      EXIT(PaymentJnlExportErrorText.JnlLineHasErrors(Rec));
    END;

    PROCEDURE HasPaymentFileErrorsInBatch@65() : Boolean;
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      EXIT(PaymentJnlExportErrorText.JnlBatchHasErrors(Rec));
    END;

    LOCAL PROCEDURE UpdateDescription@43(Name@1000 : Text[50]);
    BEGIN
      IF NOT IsAdHocDescription THEN
        Description := Name;
    END;

    LOCAL PROCEDURE IsAdHocDescription@44() : Boolean;
    VAR
      GLAccount@1000 : Record 15;
      Customer@1001 : Record 18;
      Vendor@1002 : Record 23;
      BankAccount@1003 : Record 270;
      FixedAsset@1004 : Record 5600;
      ICPartner@1005 : Record 413;
    BEGIN
      IF Description = '' THEN
        EXIT(FALSE);
      IF xRec."Account No." = '' THEN
        EXIT(TRUE);

      CASE xRec."Account Type" OF
        xRec."Account Type"::"G/L Account":
          EXIT(GLAccount.GET(xRec."Account No.") AND (GLAccount.Name <> Description));
        xRec."Account Type"::Customer:
          EXIT(Customer.GET(xRec."Account No.") AND (Customer.Name <> Description));
        xRec."Account Type"::Vendor:
          EXIT(Vendor.GET(xRec."Account No.") AND (Vendor.Name <> Description));
        xRec."Account Type"::"Bank Account":
          EXIT(BankAccount.GET(xRec."Account No.") AND (BankAccount.Name <> Description));
        xRec."Account Type"::"Fixed Asset":
          EXIT(FixedAsset.GET(xRec."Account No.") AND (FixedAsset.Description <> Description));
        xRec."Account Type"::"IC Partner":
          EXIT(ICPartner.GET(xRec."Account No.") AND (ICPartner.Name <> Description));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetAppliesToDocEntryNo@63() : Integer;
    VAR
      CustLedgEntry@1000 : Record 21;
      VendLedgEntry@1001 : Record 25;
      AccType@1003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1002 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          BEGIN
            GetAppliesToDocCustLedgEntry(CustLedgEntry,AccNo);
            EXIT(CustLedgEntry."Entry No.");
          END;
        AccType::Vendor:
          BEGIN
            GetAppliesToDocVendLedgEntry(VendLedgEntry,AccNo);
            EXIT(VendLedgEntry."Entry No.");
          END;
      END;
    END;

    PROCEDURE GetAppliesToDocDueDate@62() : Date;
    VAR
      CustLedgEntry@1000 : Record 21;
      VendLedgEntry@1001 : Record 25;
      AccType@1003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1002 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          BEGIN
            GetAppliesToDocCustLedgEntry(CustLedgEntry,AccNo);
            EXIT(CustLedgEntry."Due Date");
          END;
        AccType::Vendor:
          BEGIN
            GetAppliesToDocVendLedgEntry(VendLedgEntry,AccNo);
            EXIT(VendLedgEntry."Due Date");
          END;
      END;
    END;

    LOCAL PROCEDURE GetAppliesToDocCustLedgEntry@60(VAR CustLedgEntry@1000 : Record 21;AccNo@1001 : Code[20]);
    BEGIN
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.FINDFIRST THEN;
      END ELSE
        IF "Applies-to ID" <> '' THEN BEGIN
          CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          IF CustLedgEntry.FINDFIRST THEN;
        END;
    END;

    LOCAL PROCEDURE GetAppliesToDocVendLedgEntry@53(VAR VendLedgEntry@1000 : Record 25;AccNo@1001 : Code[20]);
    BEGIN
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.FINDFIRST THEN;
      END ELSE
        IF "Applies-to ID" <> '' THEN BEGIN
          VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          IF VendLedgEntry.FINDFIRST THEN;
        END;
    END;

    LOCAL PROCEDURE SetJournalLineFieldsFromApplication@51();
    VAR
      AccType@1005 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1004 : Code[20];
    BEGIN
      "Exported to Payment File" := FALSE;
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          IF "Applies-to ID" <> '' THEN BEGIN
            IF FindFirstCustLedgEntryWithAppliesToID(AccNo,"Applies-to ID") THEN BEGIN
              CustLedgEntry.SETRANGE("Exported to Payment File",TRUE);
              "Exported to Payment File" := CustLedgEntry.FINDFIRST;
            END
          END ELSE
            IF "Applies-to Doc. No." <> '' THEN
              IF FindFirstCustLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.") THEN BEGIN
                "Exported to Payment File" := CustLedgEntry."Exported to Payment File";
                "Applies-to Ext. Doc. No." := CustLedgEntry."External Document No.";
              END;
        AccType::Vendor:
          IF "Applies-to ID" <> '' THEN BEGIN
            IF FindFirstVendLedgEntryWithAppliesToID(AccNo,"Applies-to ID") THEN BEGIN
              VendLedgEntry.SETRANGE("Exported to Payment File",TRUE);
              "Exported to Payment File" := VendLedgEntry.FINDFIRST;
            END
          END ELSE
            IF "Applies-to Doc. No." <> '' THEN
              IF FindFirstVendLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.") THEN BEGIN
                "Exported to Payment File" := VendLedgEntry."Exported to Payment File";
                "Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
              END;
      END;
    END;

    LOCAL PROCEDURE GetAccTypeAndNo@52(GenJnlLine2@1002 : Record 81;VAR AccType@1000 : Option;VAR AccNo@1001 : Code[20]);
    BEGIN
      IF GenJnlLine2."Bal. Account Type" IN
         [GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor]
      THEN BEGIN
        AccType := GenJnlLine2."Bal. Account Type";
        AccNo := GenJnlLine2."Bal. Account No.";
      END ELSE BEGIN
        AccType := GenJnlLine2."Account Type";
        AccNo := GenJnlLine2."Account No.";
      END;
    END;

    LOCAL PROCEDURE FindFirstCustLedgEntryWithAppliesToID@54(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50]) : Boolean;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      CustLedgEntry.SETRANGE(Open,TRUE);
      EXIT(CustLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstCustLedgEntryWithAppliesToDocNo@55(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20]) : Boolean;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      EXIT(CustLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstVendLedgEntryWithAppliesToID@58(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50]) : Boolean;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      VendLedgEntry.SETRANGE(Open,TRUE);
      EXIT(VendLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstVendLedgEntryWithAppliesToDocNo@59(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20]) : Boolean;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      EXIT(VendLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE ClearPostingGroups@45();
    BEGIN
      "Gen. Posting Type" := "Gen. Posting Type"::" ";
      "Gen. Bus. Posting Group" := '';
      "Gen. Prod. Posting Group" := '';
      "VAT Bus. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
    END;

    LOCAL PROCEDURE ClearBalancePostingGroups@48();
    BEGIN
      "Bal. Gen. Posting Type" := "Bal. Gen. Posting Type"::" ";
      "Bal. Gen. Bus. Posting Group" := '';
      "Bal. Gen. Prod. Posting Group" := '';
      "Bal. VAT Bus. Posting Group" := '';
      "Bal. VAT Prod. Posting Group" := '';
    END;

    LOCAL PROCEDURE CleanLine@66();
    BEGIN
      UpdateLineBalance;
      UpdateSource;
      CreateDim(
        DimMgt.TypeToTableID1("Account Type"),"Account No.",
        DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
        DATABASE::Job,"Job No.",
        DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
        DATABASE::Campaign,"Campaign No.");
      IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) THEN
        "Recipient Bank Account" := '';
      IF xRec."Account No." <> '' THEN BEGIN
        ClearPostingGroups;
        "Tax Area Code" := '';
        "Tax Liable" := FALSE;
        "Tax Group Code" := '';
        "Bill-to/Pay-to No." := '';
        "Ship-to/Order Address Code" := '';
        "Sell-to/Buy-from No." := '';
        UpdateCountryCodeAndVATRegNo('');
        "Beneficiary Bank Code" := '';
      END;
      //NC S1074 > PCH
      VALIDATE("Shortcut Dimension 1 Code");
      VALIDATE("Shortcut Dimension 2 Code");
      //NC S1074 < PCH
    END;

    LOCAL PROCEDURE ReplaceDescription@84() : Boolean;
    BEGIN
      IF "Bal. Account No." = '' THEN
        EXIT(TRUE);
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      EXIT(GenJnlBatch."Bal. Account No." <> '');
    END;

    PROCEDURE IsExportedToPaymentFile@1020() : Boolean;
    BEGIN
      EXIT(IsPaymentJournallLineExported OR IsAppliedToVendorLedgerEntryExported);
    END;

    PROCEDURE IsPaymentJournallLineExported@80() : Boolean;
    VAR
      GenJnlLine@1001 : Record 81;
      OldFilterGroup@1000 : Integer;
      HasExportedLines@1002 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        COPYFILTERS(Rec);
        OldFilterGroup := FILTERGROUP;
        FILTERGROUP := 10;
        SETRANGE("Exported to Payment File",TRUE);
        HasExportedLines := NOT ISEMPTY;
        SETRANGE("Exported to Payment File");
        FILTERGROUP := OldFilterGroup;
      END;
      EXIT(HasExportedLines);
    END;

    PROCEDURE IsAppliedToVendorLedgerEntryExported@79() : Boolean;
    VAR
      GenJnlLine@1001 : Record 81;
      VendLedgerEntry@1002 : Record 25;
    BEGIN
      GenJnlLine.COPYFILTERS(Rec);

      IF GenJnlLine.FINDSET THEN
        REPEAT
          IF GenJnlLine.IsApplied THEN BEGIN
            VendLedgerEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
            IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgerEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
              VendLedgerEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
            END;
            IF GenJnlLine."Applies-to ID" <> '' THEN
              VendLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            VendLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
            IF NOT VendLedgerEntry.ISEMPTY THEN
              EXIT(TRUE);
          END;

          VendLedgerEntry.RESET;
          VendLedgerEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
          VendLedgerEntry.SETRANGE("Applies-to Doc. Type",GenJnlLine."Document Type");
          VendLedgerEntry.SETRANGE("Applies-to Doc. No.",GenJnlLine."Document No.");
          VendLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
          IF NOT VendLedgerEntry.ISEMPTY THEN
            EXIT(TRUE);
        UNTIL GenJnlLine.NEXT = 0;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearAppliedAutomatically@72();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        "Applied Automatically" := FALSE;
    END;

    PROCEDURE SetPostingDateAsDueDate@77(DueDate@1002 : Date;DateOffset@1000 : DateFormula) : Boolean;
    VAR
      NewPostingDate@1001 : Date;
    BEGIN
      IF DueDate = 0D THEN
        EXIT(FALSE);

      NewPostingDate := CALCDATE(DateOffset,DueDate);
      IF NewPostingDate < WORKDATE THEN BEGIN
        VALIDATE("Posting Date",WORKDATE);
        EXIT(TRUE);
      END;

      VALIDATE("Posting Date",NewPostingDate);
      EXIT(FALSE);
    END;

    PROCEDURE CalculatePostingDate@76();
    VAR
      GenJnlLine@1000 : Record 81;
      EmptyDateFormula@1001 : DateFormula;
    BEGIN
      GenJnlLine.COPY(Rec);
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");

      IF GenJnlLine.FINDSET THEN BEGIN
        Window.OPEN(CalcPostDateMsg);
        REPEAT
          EVALUATE(EmptyDateFormula,'<0D>');
          GenJnlLine.SetPostingDateAsDueDate(GenJnlLine.GetAppliesToDocDueDate,EmptyDateFormula);
          GenJnlLine.MODIFY(TRUE);
          Window.UPDATE(1,GenJnlLine."Document No.");
        UNTIL GenJnlLine.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE UpdatePaymentVATInfo@1210001(UseDefaultPmtPurpose@1210004 : Boolean);
    BEGIN
      SetPaymentVATInfoOnField("Payment Purpose",UseDefaultPmtPurpose);
      SetPaymentVATInfoOnField("Cash Order Including",FALSE);
      SetPaymentVATInfoOnField("Cash Order Supplement",FALSE);
    END;

    LOCAL PROCEDURE SetPaymentVATInfoOnField@1210000(VAR FieldValue@1210012 : Text[250];UseDefaultPmtPurpose@1210004 : Boolean);
    VAR
      BankAcc@1210007 : Record 270;
      VendBankAcc@1210002 : Record 288;
      StdRepMgt@1210006 : Codeunit 12401;
      MaxDecPoints@1210005 : Integer;
      VATAmount@1210003 : Decimal;
      TempAmount@1210008 : Decimal;
      PersonalAccountNo@1210000 : Text[20];
      BankBranchNo@1210001 : Text[60];
    BEGIN
      IF ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account") OR ("Bal. Account No." = '') THEN
        EXIT;

      BankAcc.GET("Bal. Account No.");

      IF NOT Currency.GET("Currency Code") THEN
        Currency.InitRoundingPrecision;
      StdRepMgt.RefreshDecimalPoints(MaxDecPoints,Currency."Amount Rounding Precision");

      IF ("Currency Code" = '') OR Currency.Conventional THEN
        TempAmount := "Amount (LCY)"
      ELSE
        TempAmount := Amount;
      VATAmount := ROUND(
        TempAmount * (1 - 1 / (1 + BankAcc."VAT % for Document" / 100)),Currency."Amount Rounding Precision");

      BankBranchNo := '';
      PersonalAccountNo := '';
      IF UseDefaultPmtPurpose THEN
        IF BankAcc."Account Type" = BankAcc."Account Type"::"Bank Account" THEN
          IF ("Account Type" = "Account Type"::Vendor) AND ("Account No." <> '') THEN
            IF VendBankAcc.GET("Account No.","Beneficiary Bank Code") THEN BEGIN
              FieldValue := VendBankAcc."Def. Payment Purpose";
              IF VendBankAcc."Bank Branch No." <> '' THEN BEGIN
                BankBranchNo := VendBankAcc."Bank Branch No.";
                PersonalAccountNo := VendBankAcc."Personal Account No.";
              END;
            END;

      // Format: %1 - Amount incl. VAT, %2 - VAT Amount, %3 - Amount w/o VAT, %4 - Applied Doc. No., %5 - Applied Doc. Date
      FieldValue :=
        COPYSTR(
          STRSUBSTNO(
            FieldValue,
            FORMAT(TempAmount,0,STRSUBSTNO('<Sign><Integer><Decimals,%1>',MaxDecPoints + 1)),
            FORMAT(VATAmount * (-1),0,STRSUBSTNO('<Sign><Integer><Decimals,%1>',MaxDecPoints + 1)),
            FORMAT((TempAmount - VATAmount) * (-1),0,STRSUBSTNO('<Sign><Integer><Decimals,%1>',MaxDecPoints + 1)),
            "Applies-to Doc. No.","Applies-to Doc. Date",BankBranchNo,PersonalAccountNo),
          1,MAXSTRLEN(FieldValue));
    END;

    PROCEDURE AddPersonalDocInfo@1210007(VAR PersonalDoc@1210012 : Text[250]);
    VAR
      TaxpayerDocType@1210000 : Record 12429;
      Person@1210001 : Record 17350;
      PersonalDocument@1210002 : Record 17352;
      Employee@1210003 : Record 5200;
      BankAcc@1210004 : Record 270;
      Vend@1210005 : Record 23;
    BEGIN
      PersonalDoc := '';

      IF ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account") OR ("Bal. Account No." = '') THEN
        EXIT;

      BankAcc.GET("Bal. Account No.");
      IF BankAcc."Account Type" <> BankAcc."Account Type"::"Cash Account" THEN
        EXIT;

      IF ("Account Type" = "Account Type"::Vendor) AND ("Account No." <> '') AND ("Debit Amount" <> 0) THEN BEGIN
        Vend.GET("Account No.");
        IF Vend."Vendor Type" IN [Vend."Vendor Type"::"Resp. Employee",Vend."Vendor Type"::Person] THEN BEGIN
          CASE Vend."Vendor Type" OF
            Vend."Vendor Type"::"Resp. Employee":
              BEGIN
                IF Employee.GET(Vend."Employee No.") THEN
                  Person.SETRANGE("No.",Employee."Person No.");
              END;
            Vend."Vendor Type"::Person:
              Person.SETRANGE("Vendor No.",Vend."No.");
          END;
          IF Person.FINDFIRST THEN
            IF TaxpayerDocType.GET(Person."Identity Document Type") THEN BEGIN
              Person.GetIdentityDoc("Posting Date",PersonalDocument);
              PersonalDoc :=
                COPYSTR(
                  STRSUBSTNO(
                    Text14910,
                    TaxpayerDocType."Document Name",
                    PersonalDocument."Document Series",
                    PersonalDocument."Document No.",
                    PersonalDocument."Issue Authority",
                    PersonalDocument."Issue Date"),
                  1,MAXSTRLEN("Cash Order Including"));
            END;
        END;
      END;
    END;

    PROCEDURE GetUnrealizedVATAmount@1210002(Remaining@1210000 : Boolean) Result : Decimal;
    VAR
      VATEntry@1210001 : Record 254;
    BEGIN
      IF VATEntry.GET("Unrealized VAT Entry No.") THEN
        IF Remaining THEN
          Result := VATEntry."Remaining Unrealized Amount"
        ELSE
          Result := VATEntry."Unrealized Amount";
    END;

    PROCEDURE SetExportStatus@1210003();
    VAR
      BankAcc@1210000 : Record 270;
    BEGIN
      IF NOT ("Document Type" IN ["Document Type"::" ","Document Type"::Payment,"Document Type"::Refund]) THEN
        EXIT;

      IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
        EXIT;

      IF NOT BankAcc.GET("Bal. Account No.") THEN
        EXIT;

      IF NOT BankAcc."Use Client-Bank" THEN
        EXIT;

      IF "Export Status" >= "Export Status"::Exported THEN
        EXIT;

      IF ("Document No." <> '') AND ("Account No." <> '') THEN BEGIN
        IF ("Beneficiary Bank Code" <> '') AND (Amount <> 0) THEN
            "Export Status" := "Export Status"::New
          ELSE
            "Export Status" := "Export Status"::" ";
        END ELSE
          "Export Status" := "Export Status"::" ";
    END;

    PROCEDURE ExportCancel@1210004();
    BEGIN
      IF "Export Status" = "Export Status"::"Bank Statement Found" THEN
        ERROR(Text14700,"Statement No.");
      IF "Export Status" = "Export Status"::Exported THEN BEGIN
        "Export Status" := "Export Status"::New;
        MODIFY;
      END;
    END;

    PROCEDURE SetBankAccDetail@1210006(BankAccDetailLoc@1210000 : Record 12436);
    BEGIN
      BankAccountDetail := BankAccDetailLoc;
    END;

    PROCEDURE ImportBankStatement@73();
    VAR
      ProcessGenJnlLines@1000 : Codeunit 1247;
    BEGIN
      ProcessGenJnlLines.ImportBankStatement(Rec);
    END;

    PROCEDURE ExportPaymentFile@81();
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      IF NOT FINDSET THEN
        ERROR(NothingToExportErr);
      SETRANGE("Journal Template Name","Journal Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
      TESTFIELD("Check Printed",FALSE);

      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlBatch.TESTFIELD("Bal. Account Type",GenJnlBatch."Bal. Account Type"::"Bank Account");
      GenJnlBatch.TESTFIELD("Bal. Account No.");

      CheckDocNoOnLines;
      IF IsExportedToPaymentFile THEN
        IF NOT CONFIRM(ExportAgainQst) THEN
          EXIT;
      BankAcc.GET(GenJnlBatch."Bal. Account No.");
      IF BankAcc.GetPaymentExportCodeunitID > 0 THEN
        CODEUNIT.RUN(BankAcc.GetPaymentExportCodeunitID,Rec)
      ELSE
        CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Gen. Jnl.",Rec);
    END;

    PROCEDURE TotalExportedAmount@85() : Decimal;
    VAR
      CreditTransferEntry@1000 : Record 1206;
    BEGIN
      IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
        EXIT(0);
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);
      CreditTransferEntry.CALCSUMS("Transfer Amount");
      EXIT(CreditTransferEntry."Transfer Amount");
    END;

    PROCEDURE DrillDownExportedAmount@95();
    VAR
      CreditTransferEntry@1000 : Record 1206;
    BEGIN
      IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
        EXIT;
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);
      PAGE.RUN(PAGE::"Credit Transfer Reg. Entries",CreditTransferEntry);
    END;

    LOCAL PROCEDURE CopyDimensionsFromJobTaskLine@82();
    BEGIN
      "Dimension Set ID" := TempJobJnlLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := TempJobJnlLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := TempJobJnlLine."Shortcut Dimension 2 Code";
    END;

    PROCEDURE CopyDocumentFields@129(DocType@1004 : Option;DocNo@1003 : Code[20];ExtDocNo@1002 : Text[35];SourceCode@1001 : Code[10];NoSeriesCode@1000 : Code[10]);
    BEGIN
      "Document Type" := DocType;
      "Document No." := DocNo;
      "External Document No." := ExtDocNo;
      "Source Code" := SourceCode;
      IF NoSeriesCode <> '' THEN
        "Posting No. Series" := NoSeriesCode;
    END;

    PROCEDURE CopyCustLedgEntry@134(CustLedgerEntry@1000 : Record 21);
    BEGIN
      "Document Type" := CustLedgerEntry."Document Type";
      Description := CustLedgerEntry.Description;
      "Shortcut Dimension 1 Code" := CustLedgerEntry."Global Dimension 1 Code";
      "Shortcut Dimension 2 Code" := CustLedgerEntry."Global Dimension 2 Code";
      "Dimension Set ID" := CustLedgerEntry."Dimension Set ID";
      "Posting Group" := CustLedgerEntry."Customer Posting Group";
      "Source Type" := "Source Type"::Customer;
      "Source No." := CustLedgerEntry."Customer No.";
    END;

    PROCEDURE CopyFromGenJnlAllocation@113(GenJnlAlloc@1000 : Record 221);
    BEGIN
      "Account No." := GenJnlAlloc."Account No.";
      "Shortcut Dimension 1 Code" := GenJnlAlloc."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := GenJnlAlloc."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlAlloc."Dimension Set ID";
      "Gen. Posting Type" := GenJnlAlloc."Gen. Posting Type";
      "Gen. Bus. Posting Group" := GenJnlAlloc."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GenJnlAlloc."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GenJnlAlloc."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GenJnlAlloc."VAT Prod. Posting Group";
      "Tax Area Code" := GenJnlAlloc."Tax Area Code";
      "Tax Liable" := GenJnlAlloc."Tax Liable";
      "Tax Group Code" := GenJnlAlloc."Tax Group Code";
      "Use Tax" := GenJnlAlloc."Use Tax";
      "VAT Calculation Type" := GenJnlAlloc."VAT Calculation Type";
      "VAT Amount" := GenJnlAlloc."VAT Amount";
      "VAT Base Amount" := GenJnlAlloc.Amount - GenJnlAlloc."VAT Amount";
      "VAT %" := GenJnlAlloc."VAT %";
      "Source Currency Amount" := GenJnlAlloc."Additional-Currency Amount";
      Amount := GenJnlAlloc.Amount;
      "Amount (LCY)" := GenJnlAlloc.Amount;
    END;

    PROCEDURE CopyFromInvoicePostBuffer@112(InvoicePostBuffer@1001 : Record 49);
    BEGIN
      "Account No." := InvoicePostBuffer."G/L Account";
      "System-Created Entry" := InvoicePostBuffer."System-Created Entry";
      "Gen. Bus. Posting Group" := InvoicePostBuffer."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := InvoicePostBuffer."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := InvoicePostBuffer."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := InvoicePostBuffer."VAT Prod. Posting Group";
      "Tax Area Code" := InvoicePostBuffer."Tax Area Code";
      "Tax Liable" := InvoicePostBuffer."Tax Liable";
      "Tax Group Code" := InvoicePostBuffer."Tax Group Code";
      "Use Tax" := InvoicePostBuffer."Use Tax";
      Quantity := InvoicePostBuffer.Quantity;
      "VAT %" := InvoicePostBuffer."VAT %";
      "VAT Calculation Type" := InvoicePostBuffer."VAT Calculation Type";
      "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
      "Job No." := InvoicePostBuffer."Job No.";
      "Deferral Code" := InvoicePostBuffer."Deferral Code";
      "Deferral Line No." := InvoicePostBuffer."Deferral Line No.";
      Amount := InvoicePostBuffer.Amount;
      "Source Currency Amount" := InvoicePostBuffer."Amount (ACY)";
      "VAT Base Amount" := InvoicePostBuffer."VAT Base Amount";
      "Source Curr. VAT Base Amount" := InvoicePostBuffer."VAT Base Amount (ACY)";
      "VAT Amount" := InvoicePostBuffer."VAT Amount";
      "Source Curr. VAT Amount" := InvoicePostBuffer."VAT Amount (ACY)";
      "VAT Difference" := InvoicePostBuffer."VAT Difference";
    END;

    PROCEDURE CopyFromInvoicePostBufferFA@111(InvoicePostBuffer@1001 : Record 49);
    BEGIN
      "Account Type" := "Account Type"::"Fixed Asset";
      "FA Posting Date" := InvoicePostBuffer."FA Posting Date";
      "Depreciation Book Code" := InvoicePostBuffer."Depreciation Book Code";
      "Salvage Value" := InvoicePostBuffer."Salvage Value";
      "Depr. until FA Posting Date" := InvoicePostBuffer."Depr. until FA Posting Date";
      "Depr. Acquisition Cost" := InvoicePostBuffer."Depr. Acquisition Cost";
      "Maintenance Code" := InvoicePostBuffer."Maintenance Code";
      "Insurance No." := InvoicePostBuffer."Insurance No.";
      "Budgeted FA No." := InvoicePostBuffer."Budgeted FA No.";
      "Duplicate in Depreciation Book" := InvoicePostBuffer."Duplicate in Depreciation Book";
      "Use Duplication List" := InvoicePostBuffer."Use Duplication List";
    END;

    PROCEDURE CopyFromPrepmtInvoiceBuffer@110(PrepmtInvLineBuffer@1001 : Record 461);
    BEGIN
      "Account No." := PrepmtInvLineBuffer."G/L Account No.";
      "Gen. Bus. Posting Group" := PrepmtInvLineBuffer."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := PrepmtInvLineBuffer."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := PrepmtInvLineBuffer."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := PrepmtInvLineBuffer."VAT Prod. Posting Group";
      "Tax Area Code" := PrepmtInvLineBuffer."Tax Area Code";
      "Tax Liable" := PrepmtInvLineBuffer."Tax Liable";
      "Tax Group Code" := PrepmtInvLineBuffer."Tax Group Code";
      "Use Tax" := FALSE;
      "VAT Calculation Type" := PrepmtInvLineBuffer."VAT Calculation Type";
      "Job No." := PrepmtInvLineBuffer."Job No.";
      Amount := PrepmtInvLineBuffer.Amount;
      "Source Currency Amount" := PrepmtInvLineBuffer."Amount (ACY)";
      "VAT Base Amount" := PrepmtInvLineBuffer."VAT Base Amount";
      "Source Curr. VAT Base Amount" := PrepmtInvLineBuffer."VAT Base Amount (ACY)";
      "VAT Amount" := PrepmtInvLineBuffer."VAT Amount";
      "Source Curr. VAT Amount" := PrepmtInvLineBuffer."VAT Amount (ACY)";
      "VAT Difference" := PrepmtInvLineBuffer."VAT Difference";
    END;

    PROCEDURE CopyFromPurchHeader@109(PurchHeader@1001 : Record 38);
    BEGIN
      "Source Currency Code" := PurchHeader."Currency Code";
      "Currency Factor" := PurchHeader."Currency Factor";
      Correction := PurchHeader.Correction;
      "VAT Base Discount %" := PurchHeader."VAT Base Discount %";
      "Sell-to/Buy-from No." := PurchHeader."Buy-from Vendor No.";
      "Bill-to/Pay-to No." := PurchHeader."Pay-to Vendor No.";
      "Country/Region Code" := PurchHeader."VAT Country/Region Code";
      "VAT Registration No." := PurchHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Vendor;
      "Source No." := PurchHeader."Pay-to Vendor No.";
      "Posting No. Series" := PurchHeader."Posting No. Series";
      "IC Partner Code" := PurchHeader."Pay-to IC Partner Code";
      "Ship-to/Order Address Code" := PurchHeader."Order Address Code";
      "Salespers./Purch. Code" := PurchHeader."Purchaser Code";
      "On Hold" := PurchHeader."On Hold";
      IF "Account Type" = "Account Type"::Vendor THEN
        "Posting Group" := PurchHeader."Vendor Posting Group";
    END;

    PROCEDURE CopyFromPurchHeaderPrepmt@127(PurchHeader@1000 : Record 38);
    BEGIN
      "Source Currency Code" := PurchHeader."Currency Code";
      "VAT Base Discount %" := PurchHeader."VAT Base Discount %";
      "Bill-to/Pay-to No." := PurchHeader."Pay-to Vendor No.";
      "Country/Region Code" := PurchHeader."VAT Country/Region Code";
      "VAT Registration No." := PurchHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Vendor;
      "Source No." := PurchHeader."Pay-to Vendor No.";
      "IC Partner Code" := PurchHeader."Buy-from IC Partner Code";
      "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
      "System-Created Entry" := TRUE;
      Prepayment := TRUE;
    END;

    PROCEDURE CopyFromPurchHeaderPrepmtPost@137(PurchHeader@1000 : Record 38;UsePmtDisc@1001 : Boolean);
    BEGIN
      "Account Type" := "Account Type"::Vendor;
      "Account No." := PurchHeader."Pay-to Vendor No.";
      SetCurrencyFactor(PurchHeader."Currency Code",PurchHeader."Currency Factor");
      "Source Currency Code" := PurchHeader."Currency Code";
      "Bill-to/Pay-to No." := PurchHeader."Pay-to Vendor No.";
      "Sell-to/Buy-from No." := PurchHeader."Buy-from Vendor No.";
      "Salespers./Purch. Code" := PurchHeader."Purchaser Code";
      "Source Type" := "Source Type"::Customer;
      "Source No." := PurchHeader."Pay-to Vendor No.";
      "IC Partner Code" := PurchHeader."Buy-from IC Partner Code";
      "System-Created Entry" := TRUE;
      Prepayment := TRUE;
      "Due Date" := PurchHeader."Prepayment Due Date";
      "Payment Terms Code" := PurchHeader."Payment Terms Code";
      IF UsePmtDisc THEN BEGIN
        "Pmt. Discount Date" := PurchHeader."Prepmt. Pmt. Discount Date";
        "Payment Discount %" := PurchHeader."Prepmt. Payment Discount %";
      END;
    END;

    PROCEDURE CopyFromPurchHeaderApplyTo@107(PurchHeader@1001 : Record 38);
    BEGIN
      "Applies-to Doc. Type" := PurchHeader."Applies-to Doc. Type";
      "Applies-to Doc. No." := PurchHeader."Applies-to Doc. No.";
      "Applies-to ID" := PurchHeader."Applies-to ID";
      "Allow Application" := PurchHeader."Bal. Account No." = '';
    END;

    PROCEDURE CopyFromPurchHeaderPayment@104(PurchHeader@1001 : Record 38);
    BEGIN
      "Due Date" := PurchHeader."Due Date";
      "Payment Terms Code" := PurchHeader."Payment Terms Code";
      "Pmt. Discount Date" := PurchHeader."Pmt. Discount Date";
      "Payment Discount %" := PurchHeader."Payment Discount %";
      "Creditor No." := PurchHeader."Creditor No.";
      "Payment Reference" := PurchHeader."Payment Reference";
      "Payment Method Code" := PurchHeader."Payment Method Code";
    END;

    PROCEDURE CopyFromSalesHeader@103(SalesHeader@1001 : Record 36);
    BEGIN
      "Source Currency Code" := SalesHeader."Currency Code";
      "Currency Factor" := SalesHeader."Currency Factor";
      "VAT Base Discount %" := SalesHeader."VAT Base Discount %";
      Correction := SalesHeader.Correction;
      "EU 3-Party Trade" := SalesHeader."EU 3-Party Trade";
      "Sell-to/Buy-from No." := SalesHeader."Sell-to Customer No.";
      "Bill-to/Pay-to No." := SalesHeader."Bill-to Customer No.";
      "Country/Region Code" := SalesHeader."VAT Country/Region Code";
      "VAT Registration No." := SalesHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Customer;
      "Source No." := SalesHeader."Bill-to Customer No.";
      "Posting No. Series" := SalesHeader."Posting No. Series";
      "Ship-to/Order Address Code" := SalesHeader."Ship-to Code";
      "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
      "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
      "On Hold" := SalesHeader."On Hold";
      IF "Account Type" = "Account Type"::Customer THEN
        "Posting Group" := SalesHeader."Customer Posting Group";
    END;

    PROCEDURE CopyFromSalesHeaderPrepmt@119(SalesHeader@1000 : Record 36);
    BEGIN
      "Source Currency Code" := SalesHeader."Currency Code";
      "VAT Base Discount %" := SalesHeader."VAT Base Discount %";
      "EU 3-Party Trade" := SalesHeader."EU 3-Party Trade";
      "Bill-to/Pay-to No." := SalesHeader."Bill-to Customer No.";
      "Country/Region Code" := SalesHeader."VAT Country/Region Code";
      "VAT Registration No." := SalesHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Customer;
      "Source No." := SalesHeader."Bill-to Customer No.";
      "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
      "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
      "System-Created Entry" := TRUE;
      Prepayment := TRUE;
    END;

    PROCEDURE CopyFromSalesHeaderPrepmtPost@138(SalesHeader@1000 : Record 36;UsePmtDisc@1001 : Boolean);
    BEGIN
      "Account Type" := "Account Type"::Customer;
      "Account No." := SalesHeader."Bill-to Customer No.";
      SetCurrencyFactor(SalesHeader."Currency Code",SalesHeader."Currency Factor");
      "Source Currency Code" := SalesHeader."Currency Code";
      "Sell-to/Buy-from No." := SalesHeader."Sell-to Customer No.";
      "Bill-to/Pay-to No." := SalesHeader."Bill-to Customer No.";
      "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
      "Source Type" := "Source Type"::Customer;
      "Source No." := SalesHeader."Bill-to Customer No.";
      "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
      "System-Created Entry" := TRUE;
      Prepayment := TRUE;
      "Due Date" := SalesHeader."Prepayment Due Date";
      "Payment Terms Code" := SalesHeader."Prepmt. Payment Terms Code";
      IF UsePmtDisc THEN BEGIN
        "Pmt. Discount Date" := SalesHeader."Prepmt. Pmt. Discount Date";
        "Payment Discount %" := SalesHeader."Prepmt. Payment Discount %";
      END;
    END;

    PROCEDURE CopyFromSalesHeaderApplyTo@100(SalesHeader@1001 : Record 36);
    BEGIN
      "Applies-to Doc. Type" := SalesHeader."Applies-to Doc. Type";
      "Applies-to Doc. No." := SalesHeader."Applies-to Doc. No.";
      "Applies-to ID" := SalesHeader."Applies-to ID";
      "Allow Application" := SalesHeader."Bal. Account No." = '';
    END;

    PROCEDURE CopyFromSalesHeaderPayment@99(SalesHeader@1001 : Record 36);
    BEGIN
      "Due Date" := SalesHeader."Due Date";
      "Payment Terms Code" := SalesHeader."Payment Terms Code";
      "Payment Method Code" := SalesHeader."Payment Method Code";
      "Pmt. Discount Date" := SalesHeader."Pmt. Discount Date";
      "Payment Discount %" := SalesHeader."Payment Discount %";
      "Direct Debit Mandate ID" := SalesHeader."Direct Debit Mandate ID";
    END;

    PROCEDURE CopyFromServiceHeader@98(ServiceHeader@1001 : Record 5900);
    BEGIN
      "Source Currency Code" := ServiceHeader."Currency Code";
      Correction := ServiceHeader.Correction;
      "VAT Base Discount %" := ServiceHeader."VAT Base Discount %";
      "Sell-to/Buy-from No." := ServiceHeader."Customer No.";
      "Bill-to/Pay-to No." := ServiceHeader."Bill-to Customer No.";
      "Country/Region Code" := ServiceHeader."VAT Country/Region Code";
      "VAT Registration No." := ServiceHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Customer;
      "Source No." := ServiceHeader."Bill-to Customer No.";
      "Posting No. Series" := ServiceHeader."Posting No. Series";
      "Ship-to/Order Address Code" := ServiceHeader."Ship-to Code";
      "EU 3-Party Trade" := ServiceHeader."EU 3-Party Trade";
    END;

    PROCEDURE CopyFromServiceHeaderApplyTo@97(ServiceHeader@1001 : Record 5900);
    BEGIN
      "Applies-to Doc. Type" := ServiceHeader."Applies-to Doc. Type";
      "Applies-to Doc. No." := ServiceHeader."Applies-to Doc. No.";
      "Applies-to ID" := ServiceHeader."Applies-to ID";
      "Allow Application" := ServiceHeader."Bal. Account No." = '';
    END;

    PROCEDURE CopyFromServiceHeaderPayment@96(ServiceHeader@1001 : Record 5900);
    BEGIN
      "Due Date" := ServiceHeader."Due Date";
      "Payment Terms Code" := ServiceHeader."Payment Terms Code";
      "Payment Method Code" := ServiceHeader."Payment Method Code";
      "Pmt. Discount Date" := ServiceHeader."Pmt. Discount Date";
      "Payment Discount %" := ServiceHeader."Payment Discount %";
    END;

    LOCAL PROCEDURE SetAmountWithCustLedgEntry@102();
    BEGIN
      IF "Currency Code" <> CustLedgEntry."Currency Code" THEN
        CheckModifyCurrencyCode(GenJnlLine."Account Type"::Customer,CustLedgEntry."Currency Code");
      IF Amount = 0 THEN BEGIN
        CustLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE),
          CustLedgEntry."Amount to Apply",CustLedgEntry."Remaining Amount",CustLedgEntry."Remaining Pmt. Disc. Possible");
      END;
    END;

    LOCAL PROCEDURE SetAmountWithVendLedgEntry@91();
    BEGIN
      IF "Currency Code" <> VendLedgEntry."Currency Code" THEN
        CheckModifyCurrencyCode("Account Type"::Vendor,VendLedgEntry."Currency Code");
      IF Amount = 0 THEN BEGIN
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE),
          VendLedgEntry."Amount to Apply",VendLedgEntry."Remaining Amount",VendLedgEntry."Remaining Pmt. Disc. Possible");
      END;
    END;

    PROCEDURE CheckModifyCurrencyCode@105(AccountType@1000 : Option;CustVendLedgEntryCurrencyCode@1001 : Code[10]);
    BEGIN
      IF Amount = 0 THEN BEGIN
        FromCurrencyCode := GetShowCurrencyCode("Currency Code");
        ToCurrencyCode := GetShowCurrencyCode(CustVendLedgEntryCurrencyCode);
        IF NOT
           CONFIRM(
             Text003,TRUE,FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,ToCurrencyCode)
        THEN
          ERROR(Text005);
        VALIDATE("Currency Code",CustVendLedgEntryCurrencyCode);
      END ELSE
        GenJnlApply.CheckAgainstApplnCurrency(
          "Currency Code",CustVendLedgEntryCurrencyCode,AccountType,TRUE);
    END;

    LOCAL PROCEDURE SetAmountWithRemaining@101(CalcPmtDisc@1000 : Boolean;AmountToApply@1001 : Decimal;RemainingAmount@1002 : Decimal;RemainingPmtDiscPossible@1003 : Decimal);
    BEGIN
      IF AmountToApply <> 0 THEN
        IF CalcPmtDisc AND (ABS(AmountToApply) >= ABS(RemainingAmount - RemainingPmtDiscPossible)) THEN
          Amount := -(RemainingAmount - RemainingPmtDiscPossible)
        ELSE
          Amount := -AmountToApply
      ELSE
        IF CalcPmtDisc THEN
          Amount := -(RemainingAmount - RemainingPmtDiscPossible)
        ELSE
          Amount := -RemainingAmount;
      IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor] THEN
        Amount := -Amount;
      VALIDATE(Amount);
    END;

    PROCEDURE IsOpenedFromBatch@87() : Boolean;
    VAR
      GenJournalBatch@1002 : Record 232;
      TemplateFilter@1001 : Text;
      BatchFilter@1000 : Text;
    BEGIN
      BatchFilter := GETFILTER("Journal Batch Name");
      IF BatchFilter <> '' THEN BEGIN
        TemplateFilter := GETFILTER("Journal Template Name");
        IF TemplateFilter <> '' THEN
          GenJournalBatch.SETFILTER("Journal Template Name",TemplateFilter);
        GenJournalBatch.SETFILTER(Name,BatchFilter);
        GenJournalBatch.FINDFIRST;
      END;

      EXIT((("Journal Batch Name" <> '') AND ("Journal Template Name" = '')) OR (BatchFilter <> ''));
    END;

    PROCEDURE GetDeferralAmount@88() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := Amount;
    END;

    PROCEDURE ShowDeferrals@108(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    VAR
      DeferralUtilities@1002 : Codeunit 1720;
    BEGIN
      EXIT(
        DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",GetDeferralDocType,"Journal Template Name","Journal Batch Name",0,'',"Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    PROCEDURE GetDeferralDocType@106() : Integer;
    BEGIN
      EXIT(DeferralDocType::"G/L");
    END;

    PROCEDURE IsForPurchase@86() : Boolean;
    BEGIN
      IF ("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE IsForSales@89() : Boolean;
    BEGIN
      IF ("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckGenJournalLinePostRestrictions@90();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckGenJournalLinePrintCheckRestrictions@92();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnMoveGenJournalLine@93(ToRecordID@1000 : RecordID);
    BEGIN
    END;

    LOCAL PROCEDURE IncrementDocumentNo@120();
    VAR
      NoSeriesLine@1001 : Record 309;
    BEGIN
      IF GenJnlBatch."No. Series" <> '' THEN BEGIN
        NoSeriesMgt.SetNoSeriesLineFilter(NoSeriesLine,GenJnlBatch."No. Series","Posting Date");
        IF NoSeriesLine."Increment-by No." > 1 THEN
          NoSeriesMgt.IncrementNoText("Document No.",NoSeriesLine."Increment-by No.")
        ELSE
          "Document No." := INCSTR("Document No.");
      END ELSE
        "Document No." := INCSTR("Document No.");
    END;

    PROCEDURE NeedCheckZeroAmount@196() : Boolean;
    BEGIN
      EXIT(
        ("Account No." <> '') AND
        NOT "System-Created Entry" AND
        NOT "Allow Zero-Amount Posting" AND
        ("Account Type" <> "Account Type"::"Fixed Asset"));
    END;

    PROCEDURE IsRecurring@199() : Boolean;
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      IF "Journal Template Name" <> '' THEN
        IF GenJournalTemplate.GET("Journal Template Name") THEN
          EXIT(GenJournalTemplate.Recurring);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SuggestBalancingAmount@46(LastGenJnlLine@1001 : Record 81;BottomLine@1003 : Boolean);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      IF "Document No." = '' THEN
        EXIT;
      IF GETFILTERS <> '' THEN
        EXIT;

      GenJournalLine.SETRANGE("Journal Template Name",LastGenJnlLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",LastGenJnlLine."Journal Batch Name");
      IF BottomLine THEN
        GenJournalLine.SETFILTER("Line No.",'<=%1',LastGenJnlLine."Line No.")
      ELSE
        GenJournalLine.SETFILTER("Line No.",'<%1',LastGenJnlLine."Line No.");

      IF GenJournalLine.FINDLAST THEN BEGIN
        IF BottomLine THEN BEGIN
          GenJournalLine.SETRANGE("Document No.",LastGenJnlLine."Document No.");
          GenJournalLine.SETRANGE("Posting Date",LastGenJnlLine."Posting Date");
        END ELSE BEGIN
          GenJournalLine.SETRANGE("Document No.",GenJournalLine."Document No.");
          GenJournalLine.SETRANGE("Posting Date",GenJournalLine."Posting Date");
        END;
        GenJournalLine.SETRANGE("Bal. Account No.",'');
        IF GenJournalLine.FINDFIRST THEN BEGIN
          GenJournalLine.CALCSUMS(Amount);
          "Document No." := GenJournalLine."Document No.";
          "Posting Date" := GenJournalLine."Posting Date";
          VALIDATE(Amount,-GenJournalLine.Amount);
        END;
      END;
    END;

    LOCAL PROCEDURE GetGLAccount@146();
    VAR
      GLAcc@1000 : Record 15;
    BEGIN
      GLAcc.GET("Account No.");
      CheckGLAcc(GLAcc);
      IF ReplaceDescription AND (NOT GLAcc."Omit Default Descr. in Jnl.") THEN
        UpdateDescription(GLAcc.Name)
      ELSE
        IF GLAcc."Omit Default Descr. in Jnl." THEN
          Description := '';
      IF ("Bal. Account No." = '') OR
         ("Bal. Account Type" IN
          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
      THEN BEGIN
        "Posting Group" := '';
        "Salespers./Purch. Code" := '';
        "Payment Terms Code" := '';
      END;

      //NC MTD06 > AIG
      {
      IF "Bal. Account No." = '' THEN
        "Currency Code" := '';
      }
      //NC MTD06 < AIG
      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
      THEN BEGIN
        "Gen. Posting Type" := GLAcc."Gen. Posting Type";
        "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
        "VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
      END;
      "Tax Area Code" := GLAcc."Tax Area Code";
      "Tax Liable" := GLAcc."Tax Liable";
      "Tax Group Code" := GLAcc."Tax Group Code";
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          ClearPostingGroups;
      VALIDATE("Beneficiary Bank Code",'');
      VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
    END;

    LOCAL PROCEDURE GetGLBalAccount@121();
    VAR
      GLAcc@1000 : Record 15;
    BEGIN
      GLAcc.GET("Bal. Account No.");
      CheckGLAcc(GLAcc);
      IF "Account No." = '' THEN BEGIN
        Description := GLAcc.Name;
        "Currency Code" := '';
      END;
      IF ("Account No." = '') OR
         ("Account Type" IN
          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
      THEN BEGIN
        "Posting Group" := '';
        "Salespers./Purch. Code" := '';
        "Payment Terms Code" := '';
      END;
      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
      THEN BEGIN
        "Bal. Gen. Posting Type" := GLAcc."Gen. Posting Type";
        "Bal. Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
        "Bal. Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
        "Bal. VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
        "Bal. VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
      END;
      "Bal. Tax Area Code" := GLAcc."Tax Area Code";
      "Bal. Tax Liable" := GLAcc."Tax Liable";
      "Bal. Tax Group Code" := GLAcc."Tax Group Code";
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          ClearBalancePostingGroups;
    END;

    LOCAL PROCEDURE GetCustomerAccount@47();
    VAR
      Cust@1000 : Record 18;
    BEGIN
      Cust.GET("Account No.");
      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
      CheckICPartner(Cust."IC Partner Code","Account Type","Account No.");
      //NC NOS-26 > SPA
      //UpdateDescription(Cust.Name);
      UpdateDescription(Cust."No." + ' ' + COPYSTR(Cust.Name, 1, 49-STRLEN(Cust."No.")));
      //NC NOS-26 < SPA
      "Payment Method Code" := Cust."Payment Method Code";
      VALIDATE("Recipient Bank Account",Cust."Preferred Bank Account Code");
      "Posting Group" := Cust."Customer Posting Group";
      "Salespers./Purch. Code" := Cust."Salesperson Code";
      "Payment Terms Code" := Cust."Payment Terms Code";
      VALIDATE("Bill-to/Pay-to No.","Account No.");
      VALIDATE("Sell-to/Buy-from No.","Account No.");
      IF NOT SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
        "Currency Code" := Cust."Currency Code";
      ClearPostingGroups;
      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Account No.") AND
         NOT HideValidationDialog
      THEN
        IF NOT CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
             Cust."Bill-to Customer No.")
        THEN
          ERROR('');
      VALIDATE("Payment Terms Code");
      CheckPaymentTolerance;
      IF ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) AND (Cust."Default Bank Code" <> '') THEN
        VALIDATE("Beneficiary Bank Code",Cust."Default Bank Code")
      ELSE
        VALIDATE("Beneficiary Bank Code",'');
    END;

    LOCAL PROCEDURE GetCustomerBalAccount@122();
    VAR
      Cust@1000 : Record 18;
    BEGIN
      Cust.GET("Bal. Account No.");
      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
      CheckICPartner(Cust."IC Partner Code","Bal. Account Type","Bal. Account No.");
      IF "Account No." = '' THEN
        Description := Cust.Name;
      "Payment Method Code" := Cust."Payment Method Code";
      VALIDATE("Recipient Bank Account",Cust."Preferred Bank Account Code");
      "Posting Group" := Cust."Customer Posting Group";
      "Salespers./Purch. Code" := Cust."Salesperson Code";
      "Payment Terms Code" := Cust."Payment Terms Code";
      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
        "Currency Code" := Cust."Currency Code";
      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
        "Currency Code" := Cust."Currency Code";
      ClearBalancePostingGroups;
      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Bal. Account No.") THEN
        IF NOT CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
             Cust."Bill-to Customer No.")
        THEN
          ERROR('');
      VALIDATE("Payment Terms Code");
      CheckPaymentTolerance;
    END;

    LOCAL PROCEDURE GetVendorAccount@115();
    VAR
      Vend@1000 : Record 23;
    BEGIN
      Vend.GET("Account No.");
      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
      CheckICPartner(Vend."IC Partner Code","Account Type","Account No.");
      //NC NOS-26 > SPA
      //UpdateDescription(Vend.Name);
      UpdateDescription(Vend."No." + ' ' + COPYSTR(Vend.Name, 1, 49-STRLEN(Vend."No.")));
      //NC NOS-26 < SPA
      "Payment Method Code" := Vend."Payment Method Code";
      "Creditor No." := Vend."Creditor No.";
      VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account Code");
      "Posting Group" := Vend."Vendor Posting Group";
      "Salespers./Purch. Code" := Vend."Purchaser Code";
      "Payment Terms Code" := Vend."Payment Terms Code";
      VALIDATE("Bill-to/Pay-to No.","Account No.");
      VALIDATE("Sell-to/Buy-from No.","Account No.");
      IF NOT SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
        "Currency Code" := Vend."Currency Code";
      ClearPostingGroups;
      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Account No.") AND
         NOT HideValidationDialog
      THEN
        IF NOT CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
             Vend."Pay-to Vendor No.")
        THEN
          ERROR('');
      VALIDATE("Payment Terms Code");
      CheckPaymentTolerance;
      IF ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) AND (Vend."Default Bank Code" <> '') THEN
        VALIDATE("Beneficiary Bank Code",Vend."Default Bank Code")
      ELSE
        VALIDATE("Beneficiary Bank Code",'');
      "Tax Period" := Vend."Tax Authority Code";
    END;

    LOCAL PROCEDURE GetVendorBalAccount@123();
    VAR
      Vend@1000 : Record 23;
    BEGIN
      Vend.GET("Bal. Account No.");
      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
      CheckICPartner(Vend."IC Partner Code","Bal. Account Type","Bal. Account No.");
      IF "Account No." = '' THEN
        Description := Vend.Name;
      "Payment Method Code" := Vend."Payment Method Code";
      VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account Code");
      "Posting Group" := Vend."Vendor Posting Group";
      "Salespers./Purch. Code" := Vend."Purchaser Code";
      "Payment Terms Code" := Vend."Payment Terms Code";
      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
        "Currency Code" := Vend."Currency Code";
      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
        "Currency Code" := Vend."Currency Code";
      ClearBalancePostingGroups;
      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Bal. Account No.") AND
         NOT HideValidationDialog
      THEN
        IF NOT CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
             Vend."Pay-to Vendor No.")
        THEN
          ERROR('');
      VALIDATE("Payment Terms Code");
      CheckPaymentTolerance;
    END;

    LOCAL PROCEDURE GetBankAccount@116();
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      BankAcc.GET("Account No.");
      BankAcc.TESTFIELD(Blocked,FALSE);
      IF ReplaceDescription THEN
        UpdateDescription(BankAcc.Name);
      IF ("Bal. Account No." = '') OR
         ("Bal. Account Type" IN
          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
      THEN BEGIN
        "Posting Group" := '';
        "Salespers./Purch. Code" := '';
        "Payment Terms Code" := '';
      END;
      IF BankAcc."Currency Code" = '' THEN BEGIN
        IF "Bal. Account No." = '' THEN
          "Currency Code" := '';
      END ELSE
        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
          BankAcc.TESTFIELD("Currency Code","Currency Code")
        ELSE
          "Currency Code" := BankAcc."Currency Code";
      ClearPostingGroups;
    END;

    LOCAL PROCEDURE GetBankBalAccount@124();
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      BankAcc.GET("Bal. Account No.");
      BankAcc.TESTFIELD(Blocked,FALSE);
      ReadGLSetup;
      IF GLSetup."Enable Russian Accounting" THEN
        BankAcc.TESTFIELD("Bank Acc. Posting Group");
      IF "Account No." = '' THEN
        Description := BankAcc.Name;

      IF ("Account No." = '') OR
         ("Account Type" IN
          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
      THEN BEGIN
        "Posting Group" := '';
        "Salespers./Purch. Code" := '';
        "Payment Terms Code" := '';
      END;
      IF BankAcc."Currency Code" = '' THEN BEGIN
        IF "Account No." = '' THEN
          "Currency Code" := '';
      END ELSE
        IF SetCurrencyCode("Account Type","Account No.") THEN BEGIN
          IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN BEGIN
            BankAcc.TESTFIELD("Currency Code","Currency Code");
            "Currency Code" := BankAcc."Currency Code";
          END
        END ELSE
          IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
            "Currency Code" := BankAcc."Currency Code";
      ClearBalancePostingGroups;
    END;

    LOCAL PROCEDURE GetFAAccount@117();
    VAR
      FA@1000 : Record 5600;
    BEGIN
      FA.GET("Account No.");
      FA.TESTFIELD(Blocked,FALSE);
      FA.TESTFIELD(Inactive,FALSE);
      FA.TESTFIELD("Budgeted Asset",FALSE);
      UpdateDescription(FA.Description);
      GetFADeprBook;

      //NC MCO05 > DP
      SetFAConsOperType;
      //NC MCO05 < DP

      GetFAVATSetup;
      GetFAAddCurrExchRate;
      IF "Employee No." = '' THEN
        "Employee No." := FA."Responsible Employee";
      IF "FA Location Code" = '' THEN
        "FA Location Code" := FA."FA Location Code";
    END;

    LOCAL PROCEDURE GetFABalAccount@125();
    VAR
      FA@1000 : Record 5600;
    BEGIN
      FA.GET("Bal. Account No.");
      FA.TESTFIELD(Blocked,FALSE);
      FA.TESTFIELD(Inactive,FALSE);
      FA.TESTFIELD("Budgeted Asset",FALSE);
      IF "Account No." = '' THEN
        Description := FA.Description;
      GetFADeprBook;

      //NC MCO05 > DP
      SetFAConsOperType;
      //NC MCO05 < DP

      GetFAVATSetup;
      GetFAAddCurrExchRate;
    END;

    LOCAL PROCEDURE GetICPartnerAccount@118();
    VAR
      ICPartner@1000 : Record 413;
    BEGIN
      ICPartner.GET("Account No.");
      ICPartner.CheckICPartner;
      UpdateDescription(ICPartner.Name);
      IF ("Bal. Account No." = '') OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") THEN
        "Currency Code" := ICPartner."Currency Code";
      IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
        "Currency Code" := ICPartner."Currency Code";
      ClearPostingGroups;
      "IC Partner Code" := "Account No.";
    END;

    LOCAL PROCEDURE GetICPartnerBalAccount@126();
    VAR
      ICPartner@1000 : Record 413;
    BEGIN
      ICPartner.GET("Bal. Account No.");
      IF "Account No." = '' THEN
        Description := ICPartner.Name;

      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
        "Currency Code" := ICPartner."Currency Code";
      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
        "Currency Code" := ICPartner."Currency Code";
      ClearBalancePostingGroups;
      "IC Partner Code" := "Bal. Account No.";
    END;

    PROCEDURE CreateFAAcquisitionLines@131(VAR FAGenJournalLine@1008 : Record 81);
    VAR
      BalancingGenJnlLine@1006 : Record 81;
      LocalGlAcc@1001 : Record 15;
      FAPostingGr@1000 : Record 5606;
      FAGetBalAcc@1002 : Codeunit 5603;
    BEGIN
      TESTFIELD("Journal Template Name");
      TESTFIELD("Journal Batch Name");
      TESTFIELD("Posting Date");
      TESTFIELD("Account Type");
      TESTFIELD("Account No.");
      TESTFIELD("Posting Date");

      // Creating Fixed Asset Line
      FAGenJournalLine.INIT;
      FAGenJournalLine.VALIDATE("Journal Template Name","Journal Template Name");
      FAGenJournalLine.VALIDATE("Journal Batch Name","Journal Batch Name");
      FAGenJournalLine.VALIDATE("Line No.",GetNewLineNo("Journal Template Name","Journal Batch Name"));
      FAGenJournalLine.VALIDATE("Document Type","Document Type");
      FAGenJournalLine.VALIDATE("Document No.",GenerateLineDocNo("Journal Batch Name","Posting Date","Journal Template Name"));
      FAGenJournalLine.VALIDATE("Account Type","Account Type");
      FAGenJournalLine.VALIDATE("Account No.","Account No.");
      FAGenJournalLine.VALIDATE(Amount,Amount);
      FAGenJournalLine.VALIDATE("Posting Date","Posting Date");
      FAGenJournalLine.VALIDATE("FA Posting Type","FA Posting Type"::"Acquisition Cost");
      FAGenJournalLine.VALIDATE("External Document No.","External Document No.");
      FAGenJournalLine.INSERT(TRUE);

      // Creating Balancing Line
      BalancingGenJnlLine.COPY(FAGenJournalLine);
      BalancingGenJnlLine.SETRECFILTER;
      FAGetBalAcc.InsertAccWithBalAccountInfo(BalancingGenJnlLine,"Bal. Account Type","Bal. Account No.");

      FAGenJournalLine.TESTFIELD("Posting Group");

      // Inserting additional fields in Fixed Asset line required for acquisition
      IF FAPostingGr.GET(FAGenJournalLine."Posting Group") THEN BEGIN
        LocalGlAcc.GET(FAPostingGr."Acquisition Cost Account");
        LocalGlAcc.CheckGLAcc;
        FAGenJournalLine.VALIDATE("Gen. Posting Type",LocalGlAcc."Gen. Posting Type");
        FAGenJournalLine.VALIDATE("Gen. Bus. Posting Group",LocalGlAcc."Gen. Bus. Posting Group");
        FAGenJournalLine.VALIDATE("Gen. Prod. Posting Group",LocalGlAcc."Gen. Prod. Posting Group");
        FAGenJournalLine.VALIDATE("VAT Bus. Posting Group",LocalGlAcc."VAT Bus. Posting Group");
        FAGenJournalLine.VALIDATE("VAT Prod. Posting Group",LocalGlAcc."VAT Prod. Posting Group");
        FAGenJournalLine.VALIDATE("Tax Group Code",LocalGlAcc."Tax Group Code");
        FAGenJournalLine.VALIDATE("VAT Prod. Posting Group");
        FAGenJournalLine.MODIFY(TRUE)
      END;

      // Inserting Source Code
      IF "Source Code" = '' THEN BEGIN
        GenJnlTemplate.GET("Journal Template Name");
        FAGenJournalLine.VALIDATE("Source Code",GenJnlTemplate."Source Code");
        FAGenJournalLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GenerateLineDocNo@132(BatchName@1004 : Code[10];PostingDate@1002 : Date;TemplateName@1005 : Code[20]) DocumentNo : Code[20];
    VAR
      GenJournalBatch@1000 : Record 232;
      NoSeriesManagement@1003 : Codeunit 396;
    BEGIN
      GenJournalBatch.GET(TemplateName,BatchName);
      IF GenJournalBatch."No. Series" <> '' THEN
        DocumentNo := NoSeriesManagement.TryGetNextNo(GenJournalBatch."No. Series",PostingDate);
    END;

    LOCAL PROCEDURE GetFilterAccountNo@133() : Code[20];
    BEGIN
      IF GETFILTER("Account No.") <> '' THEN
        IF GETRANGEMIN("Account No.") = GETRANGEMAX("Account No.") THEN
          EXIT(GETRANGEMAX("Account No."));
    END;

    PROCEDURE SetAccountNoFromFilter@135();
    VAR
      AccountNo@1000 : Code[20];
    BEGIN
      AccountNo := GetFilterAccountNo;
      IF AccountNo = '' THEN BEGIN
        FILTERGROUP(2);
        AccountNo := GetFilterAccountNo;
        FILTERGROUP(0);
      END;
      IF AccountNo <> '' THEN
        "Account No." := AccountNo;
    END;

    PROCEDURE GetNewLineNo@136(TemplateName@1000 : Code[10];BatchName@1001 : Code[10]) : Integer;
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GenJournalLine.VALIDATE("Journal Template Name",TemplateName);
      GenJournalLine.VALIDATE("Journal Batch Name",BatchName);
      GenJournalLine.SETRANGE("Journal Template Name",TemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",BatchName);
      IF GenJournalLine.FINDLAST THEN
        EXIT(GenJournalLine."Line No." + 10000);
      EXIT(10000);
    END;

    PROCEDURE "NCF>"@1000000001();
    BEGIN
    END;

    PROCEDURE SetFAOperTypeDim@1000000000(FAOperType@1000000000 : ' ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance');
    VAR
      FASetup@1000000002 : Record 5603;
      DeprBook@1000000003 : Record 5611;
      TempDimSetEntry@1101495000 : TEMPORARY Record 480;
      FADimValueCode@1000000004 : Code[20];
    BEGIN
      //NC MFA01 > DP
      FADimValueCode := '';
      IF (FAOperType <> FAOperType::" ") AND
         ("Line No." <> 0) // NC NOS-26 SPA
      THEN BEGIN
        IF ("Depreciation Book Code" <> '') AND DeprBook.GET("Depreciation Book Code") THEN BEGIN
          FASetup.GET;
          FASetup.TESTFIELD("FA Operation Type Dim. Code");
          CASE FAOperType OF
            FAOperType::"Acquisition Cost":
              FADimValueCode := DeprBook."Acq. Cost Dim. Value Code";
            FAOperType::Depreciation:
              FADimValueCode := DeprBook."Depreciation Dim. Value Code";
            FAOperType::"Write-Down":
              FADimValueCode := DeprBook."Write-Down Dim. Value Code";
            FAOperType::Appreciation:
              FADimValueCode := DeprBook."Appreciation Dim. Value Code";
            FAOperType::"Custom 1":
              FADimValueCode := DeprBook."Custom 1 Dim. Value Code";
            FAOperType::"Custom 2":
              FADimValueCode := DeprBook."Custom 2 Dim. Value Code";
            FAOperType::Disposal:
              FADimValueCode := DeprBook."Disposal Dim. Value Code";
            FAOperType::Maintenance:
              FADimValueCode := DeprBook."Maintenance Dim. Value Code"
          END;
          //NC NOS-26 > SPA
          {
          IF FADimValueCode<>'' THEN BEGIN
            JnlLineDim.INIT;
            JnlLineDim."Table ID":=81;
            JnlLineDim."Journal Template Name" := "Journal Template Name";
            JnlLineDim."Journal Batch Name" := "Journal Batch Name";
            JnlLineDim."Journal Line No." := "Line No.";
            JnlLineDim."Dimension Code" := FASetup."FA Operation Type Dim. Code";
            JnlLineDim."Dimension Value Code" :=FADimValueCode;
            IF NOT JnlLineDim.INSERT(TRUE) THEN JnlLineDim.MODIFY(TRUE);
          END;
          }
          IF FADimValueCode<>'' THEN BEGIN
            IF "Dimension Set ID" <> 0 THEN
              DimMgt.GetDimensionSet(TempDimSetEntry, "Dimension Set ID");
            TempDimSetEntry.VALIDATE("Dimension Code", FASetup."FA Operation Type Dim. Code");
            IF TempDimSetEntry.FIND THEN
              TempDimSetEntry.DELETE;
            TempDimSetEntry.VALIDATE("Dimension Value Code", FADimValueCode);
            TempDimSetEntry.SetObject(Rec);
            TempDimSetEntry.INSERT(TRUE);
            DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
          END;
          //NC NOS-26 < SPA
        END;
      END;
      //NC MFA01 > DP
    END;

    PROCEDURE SetUserSetupCheck@1000000002();
    BEGIN
      //NC MDR03 > MP
      NeedUserSetupCheck := TRUE;
      //NC MDR03 < MP
    END;

    PROCEDURE IsCheckEdit@1000000003();
    BEGIN
      //NC MDR03 > MP
      IsChange := FALSE;
      IF NOT GenJnlBatch1.GET("Journal Template Name","Journal Batch Name") THEN BEGIN
        IsChange := FALSE;
        EXIT;
      END ELSE
        IsChange := (GenJnlBatch1."Batch Type" = GenJnlBatch."Batch Type"::Manual);

      IF NOT IsChange THEN BEGIN
        IF NOT UserSetup.GET(USERID) THEN
          IsChange := FALSE
        ELSE
          IsChange := UserSetup."Data Admin";
      END;
      //NC MDR03 < MP
    END;

    PROCEDURE SetVATTaxDim@1000000004();
    VAR
      VATProductPostGroup@1000000001 : Record 324;
      TempDimSetEntry@1101495000 : TEMPORARY Record 480;
      TempDimSetEntry2@1101495001 : TEMPORARY Record 480;
    BEGIN
      //NC OFA002 > DP
      //NC OFA002.1 > DP
      IF ("Line No." <> 0) AND ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN BEGIN
      //NC OFA002.1 < DP
        IF "VAT Prod. Posting Group" <> '' THEN BEGIN
          IF VATProductPostGroup.GET("VAT Prod. Posting Group") AND (VATProductPostGroup."VAT Dimension Value Code" <> '') THEN BEGIN
            GLSetup.GET;
            GLSetup.TESTFIELD("Tax Dimension Code");
            //NC NOS-26 > SPA
            {
            JnlLineDim.INIT;
            JnlLineDim."Table ID":= 81;
            JnlLineDim."Journal Template Name" := "Journal Template Name";
            JnlLineDim."Journal Batch Name" := "Journal Batch Name";
            JnlLineDim."Journal Line No." := "Line No.";
            JnlLineDim."Dimension Code" := GLSetup."Tax Dimension Code";
            JnlLineDim."Dimension Value Code" := VATProductPostGroup."VAT Dimension Value Code";
            IF NOT JnlLineDim.INSERT(TRUE) THEN JnlLineDim.MODIFY(TRUE);
            }
            TempDimSetEntry.VALIDATE("Dimension Code", GLSetup."Tax Dimension Code");
            IF TempDimSetEntry.FIND THEN
              TempDimSetEntry.DELETE;
            TempDimSetEntry.VALIDATE("Dimension Value Code", VATProductPostGroup."VAT Dimension Value Code");
            TempDimSetEntry.SetObject(Rec);
            TempDimSetEntry.INSERT(TRUE);
            //NC NOS-26 < SPA
          END
        END;
        IF "Bal. VAT Prod. Posting Group" <> '' THEN BEGIN
          IF VATProductPostGroup.GET("Bal. VAT Prod. Posting Group") AND (VATProductPostGroup."VAT Dimension Value Code" <> '') THEN BEGIN
            GLSetup.GET;
            GLSetup.TESTFIELD("Tax Dimension Code");
            //NC NOS-26 > SPA
            {
            JnlLineDim.INIT;
            JnlLineDim."Table ID":= 81;
            JnlLineDim."Journal Template Name" := "Journal Template Name";
            JnlLineDim."Journal Batch Name" := "Journal Batch Name";
            JnlLineDim."Journal Line No." := "Line No.";
            JnlLineDim."Dimension Code" := GLSetup."Tax Dimension Code";
            JnlLineDim."Dimension Value Code" := VATProductPostGroup."VAT Dimension Value Code";
            IF NOT JnlLineDim.INSERT(TRUE) THEN JnlLineDim.MODIFY(TRUE);
            }
            TempDimSetEntry.VALIDATE("Dimension Code", GLSetup."Tax Dimension Code");
            IF TempDimSetEntry.FIND THEN
              TempDimSetEntry.DELETE;
            TempDimSetEntry.VALIDATE("Dimension Value Code", VATProductPostGroup."VAT Dimension Value Code");
            TempDimSetEntry.SetObject(Rec);
            TempDimSetEntry.INSERT(TRUE);
            //NC NOS-26 < SPA
          END;
        END;

        //NC NOS-26 > SPA
        IF TempDimSetEntry.ISEMPTY THEN
          EXIT;

        IF "Dimension Set ID" <> 0 THEN
          DimMgt.GetDimensionSet(TempDimSetEntry2, "Dimension Set ID");

        TempDimSetEntry.FINDSET;
        REPEAT
          TempDimSetEntry2.VALIDATE("Dimension Code", TempDimSetEntry."Dimension Code");
          IF TempDimSetEntry2.FIND THEN
            TempDimSetEntry2.DELETE;
          TempDimSetEntry2.VALIDATE("Dimension Value Code", TempDimSetEntry."Dimension Value Code");
          TempDimSetEntry2.INSERT;
        UNTIL TempDimSetEntry.NEXT = 0;
        DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry2));
        //NC NOS-26 < SPA
      END;
      //NC OFA002 < DP
    END;

    PROCEDURE FillForSalesHeader@1000000005(VAR SalesHeader@1000000000 : Record 36);
    BEGIN
      //NC MTF01 > PCH
      "Description 2" := SalesHeader."Description 2";

      //NCS-2068 > AAP
      //"Business Unit Code" := SalesHeader."Business Unit Code";
      VALIDATE("Business Unit Code",SalesHeader."Business Unit Code");
      //NCS-2068 < AAP

      "External Document ID" := SalesHeader."External Document ID";
      "Export Cons. Source Code" := SalesHeader."Export Cons. Source Code";
      "Export Register No." := SalesHeader."Export Register No.";
      "Cons. Source Code" := SalesHeader."Cons. Source Code";
      "Register No." := SalesHeader."Register No.";
      "Buffer Entry No." := SalesHeader."Buffer Entry No.";
      "Source Entry No." := SalesHeader."Source Entry No.";
      "External Operation No" := SalesHeader."External Operation No";
      "External System ID" := SalesHeader."External System ID";
      "Transaction Type" := SalesHeader."Transaction Type in Gen. Jrnl.";
      Removed := SalesHeader.Removed;
      Reposted := SalesHeader.Reposted;

      //NCS-2068 > AAP
      //"Not Consolidate" := SalesHeader."Not Consolidate";
      "Not Consolidate" := "Not Consolidate" OR SalesHeader."Not Consolidate";
      //NCS-2068 < AAP

      //NC MTF01 < PCH
    END;

    PROCEDURE FillForPurchHeader@1000000007(VAR PurchHeader@1000000000 : Record 38);
    BEGIN
      //NC MTF01 > PCH
      "Description 2" := PurchHeader."Description 2";

      //NCS-2068 > AAP
      //"Business Unit Code" := PurchHeader."Business Unit Code";
      VALIDATE("Business Unit Code", PurchHeader."Business Unit Code");
      //NCS-2068 < AAP

      "External Document ID" := PurchHeader."External Document ID";
      "Export Cons. Source Code" := PurchHeader."Export Cons. Source Code";
      "Export Register No." := PurchHeader."Export Register No.";
      "Cons. Source Code" := PurchHeader."Cons. Source Code";
      "Register No." := PurchHeader."Register No.";
      "Buffer Entry No." := PurchHeader."Buffer Entry No.";
      "Source Entry No." := PurchHeader."Source Entry No.";
      "External Operation No" := PurchHeader."External Operation No";
      "External System ID" := PurchHeader."External System ID";
      "Transaction Type" := PurchHeader."Transaction Type in Gen. Jrnl.";
      Removed := PurchHeader.Removed;
      Reposted := PurchHeader.Reposted;

      //NCS-2068 > AAP
      //"Not Consolidate" := PurchHeader."Not Consolidate";
      "Not Consolidate" := "Not Consolidate" OR PurchHeader."Not Consolidate";
      //NCS-2068 < AAP

      //NC MTF01 < PCH
    END;

    PROCEDURE InsertLegalEntityDimValue@1101495002(AccType@1101495004 : ' ,Balance,Both');
    VAR
      CustomerPostingGroup@1101495010 : Record 92;
      VendorPostingGroup@1101495009 : Record 93;
      BankAccountPG@1101495008 : Record 277;
      DefaultDimension@1101495006 : Record 352;
      DefDimAccNo@1101495000 : Code[20];
    BEGIN
      //NC OFA21 > DP
        IF AccType IN [AccType::" ",AccType::Both] THEN BEGIN
          DefDimAccNo :='';
          IF "Account Type" = "Account Type"::"G/L Account" THEN
            DefDimAccNo :="Account No.";
          IF "Account Type" = "Account Type"::Customer THEN BEGIN
            IF "Posting Group" <> '' THEN BEGIN
              CustomerPostingGroup.GET("Posting Group");
              IF Prepayment THEN
                DefDimAccNo := CustomerPostingGroup."Prepayment Account"
              ELSE
                DefDimAccNo := CustomerPostingGroup."Receivables Account";
            END;
          END;
          IF "Account Type" = "Account Type"::Vendor THEN BEGIN
            IF "Posting Group" <> '' THEN BEGIN
              VendorPostingGroup.GET("Posting Group");
              IF Prepayment THEN
                DefDimAccNo :=VendorPostingGroup."Prepayment Account"
              ELSE
                DefDimAccNo :=VendorPostingGroup."Payables Account";
            END;
          END;
          IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
            IF "Posting Group" <> '' THEN BEGIN
              IF BankAccountPG.GET("Posting Group") THEN
                DefDimAccNo :=BankAccountPG."G/L Bank Account No.";
            END;
          END;
          IF (DefDimAccNo<>'') AND ("Line No."<>0) THEN
            InsertLegalEntityDefDimValue(DefDimAccNo);
        END;

        IF AccType IN [AccType::Balance,AccType::Both] THEN BEGIN
          DefDimAccNo :='';
          IF "Bal. Account Type" = "Bal. Account Type"::"G/L Account" THEN
            DefDimAccNo :="Account No.";
          IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN BEGIN
            IF "Posting Group" <> '' THEN BEGIN
              CustomerPostingGroup.GET("Posting Group");
              IF Prepayment THEN
                DefDimAccNo := CustomerPostingGroup."Prepayment Account"
              ELSE
                DefDimAccNo := CustomerPostingGroup."Receivables Account";
            END;
          END;
          IF "Bal. Account Type" = "Bal. Account Type"::Vendor THEN BEGIN
            IF "Posting Group" <> '' THEN BEGIN
              VendorPostingGroup.GET("Posting Group");
              IF Prepayment THEN
                DefDimAccNo :=VendorPostingGroup."Prepayment Account"
              ELSE
                DefDimAccNo :=VendorPostingGroup."Payables Account";
            END;
          END;
          IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN BEGIN
            IF "Posting Group" <> '' THEN BEGIN
              IF BankAccountPG.GET("Posting Group") THEN
                DefDimAccNo :=BankAccountPG."G/L Bank Account No.";
            END;
          END;
          IF (DefDimAccNo<>'')  AND ("Line No."<>0) THEN
            InsertLegalEntityDefDimValue(DefDimAccNo);
        END;
      //NC OFA21 < DP
    END;

    PROCEDURE InsertLegalEntityDefDimValue@1101495001(AccNo@1101495004 : Code[20]);
    VAR
      DefDimCompType@1101495001 : Record 352;
      DefDimGLAccount@1101495002 : Record 352;
      LegalEntity@1101495000 : Record 2000000006;
      IsAddDimValue@1101495003 : Boolean;
      TempDimSetEntry@1101495005 : TEMPORARY Record 480;
    BEGIN
      //NC OFA21 > DP
      LegalEntity.GET(COMPANYNAME);
      IF LegalEntity."Legal Entity Type" <> '' THEN BEGIN

        //NC NOS-26 > SPA
        IF "Dimension Set ID" <> 0 THEN
          DimMgt.GetDimensionSet(TempDimSetEntry, "Dimension Set ID");
        //NC NOS-26 < SPA

        DefDimCompType.RESET;
        DefDimCompType.SETRANGE("Table ID",DATABASE::"Legal Entity Type");
        DefDimCompType.SETRANGE("No.",LegalEntity."Legal Entity Type");
        DefDimCompType.SETFILTER("Dimension Value Code",'<>%1','');
        IF DefDimCompType.FINDSET THEN
          REPEAT
            IF AccNo<>'' THEN BEGIN
              IsAddDimValue := DefDimGLAccount.GET(DATABASE::"G/L Account",AccNo,DefDimCompType."Dimension Code");
              IF IsAddDimValue THEN BEGIN
                //NC NOS-26 > SPA
                {
                JournalLineDimension.INIT;
                JournalLineDimension."Table ID" := DATABASE::"Gen. Journal Line";
                JournalLineDimension."Journal Template Name" := "Journal Template Name";
                JournalLineDimension."Journal Batch Name" := "Journal Batch Name";
                JournalLineDimension."Journal Line No." := "Line No.";
                JournalLineDimension.VALIDATE("Dimension Code", DefDimCompType."Dimension Code");
                JournalLineDimension.VALIDATE("Dimension Value Code", DefDimCompType."Dimension Value Code");
                IF  DefDimCompType."Value Posting" IN [DefDimCompType."Value Posting"::"Same Code",
                  DefDimCompType."Value Posting"::"Code Mandatory"]
                THEN BEGIN
                  IF NOT JournalLineDimension.INSERT(TRUE) THEN
                    JournalLineDimension.MODIFY(TRUE);
                END ELSE
                  IF NOT JournalLineDimension.INSERT(TRUE) THEN;
                }
                TempDimSetEntry.SetObject(Rec);
                IF DefDimCompType."Value Posting" IN
                    [DefDimCompType."Value Posting"::"Same Code",
                     DefDimCompType."Value Posting"::"Code Mandatory"]
                THEN BEGIN
                  TempDimSetEntry.VALIDATE("Dimension Code", DefDimCompType."Dimension Code");
                  IF TempDimSetEntry.FIND THEN
                    TempDimSetEntry.DELETE;
                  TempDimSetEntry.VALIDATE("Dimension Value Code", DefDimCompType."Dimension Value Code");
                  TempDimSetEntry.INSERT(TRUE);
                END ELSE BEGIN
                  TempDimSetEntry.VALIDATE("Dimension Code", DefDimCompType."Dimension Code");
                  IF NOT TempDimSetEntry.FIND THEN BEGIN
                    TempDimSetEntry.VALIDATE("Dimension Value Code", DefDimCompType."Dimension Value Code");
                    TempDimSetEntry.INSERT(TRUE);
                  END;
                END;
                //NC NOS-26 < SPA
              END;
            END;
          UNTIL DefDimCompType.NEXT = 0;

        //NC NOS-26 > SPA
        IF TempDimSetEntry.ISEMPTY THEN
          EXIT;

        DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
        //NC NOS-26 < SPA

      END;
      //NC OFA21 < DP
    END;

    PROCEDURE SetFAConsOperType@1101495000();
    VAR
      CompanyLoc@1101495000 : Record 2000000006;
      FAConsExceptionSetup@1101495001 : Record 50115;
    BEGIN
      //NC MCO05 > DP

      CompanyLoc.GET(COMPANYNAME);
      IF CompanyLoc."Company Type" = CompanyLoc."Company Type"::Standalone THEN BEGIN
        IF NOT "System-Created Entry" THEN BEGIN
        IF ("Depreciation Book Code" = '') OR ("FA Posting Type" = 0) THEN
          "FA Operation" := FALSE ELSE BEGIN
          FAConsExceptionSetup.RESET;
          FAConsExceptionSetup.SETRANGE(FAConsExceptionSetup."Depr. Book Code","Depreciation Book Code");
          CASE "FA Posting Type" OF
               "FA Posting Type"::"Acquisition Cost":
               FAConsExceptionSetup.SETRANGE("FA Posting Type",FAConsExceptionSetup."FA Posting Type"::"Acquisition Cost");
               "FA Posting Type"::Depreciation:
               FAConsExceptionSetup.SETRANGE("FA Posting Type",FAConsExceptionSetup."FA Posting Type"::Depreciation);
               "FA Posting Type"::Disposal:
               FAConsExceptionSetup.SETRANGE("FA Posting Type",FAConsExceptionSetup."FA Posting Type"::Disposal);
          END;
          FAConsExceptionSetup.SETRANGE("Local G/L Cons. Exception",TRUE);
          "FA Operation" := FAConsExceptionSetup.FINDFIRST;
        END;
        END;

        IF "Cons. FA Export Type" <> "Cons. FA Export Type"::"Not Export" THEN BEGIN
        IF ("Depreciation Book Code" = '') THEN "Cons. FA Export Type" := 0
        ELSE BEGIN
          FAConsExceptionSetup.RESET;
          FAConsExceptionSetup.SETRANGE(FAConsExceptionSetup."Depr. Book Code","Depreciation Book Code");
          CASE "FA Posting Type" OF
               "FA Posting Type"::"Acquisition Cost":
               BEGIN
                 FAConsExceptionSetup.SETRANGE("FA Posting Type",FAConsExceptionSetup."FA Posting Type"::"Acquisition Cost");
                 IF "FA Reclassification No."<>'' THEN
                   FAConsExceptionSetup.SETRANGE("FA Reclassification",TRUE);

                 IF "FA Def. Dim. Code"<>'' THEN
                   FAConsExceptionSetup.SETRANGE("FA Def. Dim. Reclass",TRUE);
               END;
               "FA Posting Type"::Depreciation:
               FAConsExceptionSetup.SETRANGE("FA Posting Type",FAConsExceptionSetup."FA Posting Type"::Depreciation);
               "FA Posting Type"::Disposal:
               FAConsExceptionSetup.SETRANGE("FA Posting Type",FAConsExceptionSetup."FA Posting Type"::Disposal);
          END;

          IF FAConsExceptionSetup.FINDFIRST THEN
            "Cons. FA Export Type" := FAConsExceptionSetup."Cons. Export Type"

          //NC MCO05.1 > DP
          ELSE
            ERROR(STRSUBSTNO(Text50002,FAConsExceptionSetup.TABLECAPTION,
            FIELDCAPTION("Depreciation Book Code"),"Depreciation Book Code",
            FIELDCAPTION("FA Posting Type"),"FA Posting Type"));
          //NC MCO05.1 < DP

            ;
        END;
        END;
      END;

      //NC MCO05 < DP
    END;

    PROCEDURE fn_CreateLinkDim@1000000008(p_codeDim@1000000000 : Code[20];p_codeDimValue@1000000001 : Code[20]);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
      TempDimSetEntry@1101495000 : TEMPORARY Record 480;
    BEGIN
      //TDRANCS-897 >
      DimMgt.fn_GetLinkDim(p_codeDim,p_codeDimValue);

      IF "Line No." <> 0 THEN
      //NC NOS-26 > SPA
      //  DimMgt.fn_UpdateJnlLineLinkDim(
      //    DATABASE::"Gen. Journal Line","Journal Template Name",
      //    "Journal Batch Name","Line No.",0,
      //    "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      BEGIN
        DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
        DimMgt.fn_UpdateJnlLineLinkDim(
          TempDimSetEntry,"Journal Template Name","Journal Batch Name");
        DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
      END;
      //NC NOS-26 < SPA
    END;

    PROCEDURE GetIncTaxDimCode@1101495003(VAR PJournalLineDimensionExists@1101495003 : Boolean) : Code[20];
    VAR
      MovingDataSetup@1101495000 : Record 50064;
      DefaultDimension@1101495001 : Record 352;
    BEGIN
      // NC NC-973 SKV
      PJournalLineDimensionExists := FALSE;
      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
      //Table ID,Journal Template Name,Journal Batch Name,Journal Line No.,Allocation Line No.,Dimension Code

      //NC NOS-26 > SPA
      {
      IF JournalLineDimension.GET(DATABASE::"Gen. Journal Line",
                                  "Journal Template Name",
                                  "Journal Batch Name",
                                  "Line No.",
                                  0,
                                  MovingDataSetup."INC.TAX Dimension Code") THEN BEGIN
        PJournalLineDimensionExists := TRUE;
        EXIT(JournalLineDimension."Dimension Value Code");
      }
      IF DimensionSetEntry.GET("Dimension Set ID", MovingDataSetup."INC.TAX Dimension Code") THEN BEGIN
        PJournalLineDimensionExists := TRUE;
        EXIT(DimensionSetEntry."Dimension Value Code");
      //NC NOS-26 < SPA
      END ELSE
        EXIT('');
    END;

    PROCEDURE DeleteIncTaxDimCode@1101495005() Success : Boolean;
    VAR
      MovingDataSetup@1101495000 : Record 50064;
      DefaultDimension@1101495001 : Record 352;
      TempDimSetEntry@1101495002 : TEMPORARY Record 480;
    BEGIN
      // NC NC-973 SKV
      MovingDataSetup.GET;
      MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
      //Table ID,Journal Template Name,Journal Batch Name,Journal Line No.,Allocation Line No.,Dimension Code

      //NC NOS-26 > SPA
      {
      IF JournalLineDimension.GET(DATABASE::"Gen. Journal Line",
                                  "Journal Template Name",
                                  "Journal Batch Name",
                                  "Line No.",
                                  0,
                                  MovingDataSetup."INC.TAX Dimension Code") THEN BEGIN
        JournalLineDimension.DELETE(TRUE);
        EXIT(TRUE);
      END;
      }
      IF DimensionSetEntry.GET("Dimension Set ID", MovingDataSetup."INC.TAX Dimension Code") THEN BEGIN
        DimMgt.GetDimensionSet(TempDimSetEntry, "Dimension Set ID");
        IF TempDimSetEntry.GET("Dimension Set ID", MovingDataSetup."INC.TAX Dimension Code") THEN
          TempDimSetEntry.DELETE;

        DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
        EXIT(TRUE);
      END;
      //NC NOS-26 < SPA
      EXIT(FALSE);
    END;

    PROCEDURE InsertIncTaxDimCode@1101495004() Success : Boolean;
    VAR
      MovingDataSetup@1101495002 : Record 50064;
      FI@1101495000 : Record 50021;
      IncTaxDimCode@1101495001 : Code[20];
      TempDimSetEntry@1101495003 : TEMPORARY Record 480;
    BEGIN
      // NC NC-973 SKV
      IF "Financial Instrument No." = '' THEN
        EXIT(FALSE); // не с чем работать

      FI.GET("Financial Instrument No.");
      IncTaxDimCode := FI.GetIncTaxDimCode;
      IF IncTaxDimCode IN ['','MIXED'] THEN BEGIN
        IF FI."Underlying Asset" <> '' THEN BEGIN
          FI.GET(FI."Underlying Asset");
          IncTaxDimCode := FI.GetIncTaxDimCode;
        END;
      END;

      IF IncTaxDimCode <> '' THEN BEGIN
        MovingDataSetup.GET;
        MovingDataSetup.TESTFIELD("INC.TAX Dimension Code");
        //NC NOS-26 > SPA
        {
        JournalLineDimension.INIT;
        JournalLineDimension."Table ID" := DATABASE::"Gen. Journal Line";
        JournalLineDimension."Journal Template Name" := "Journal Template Name";
        JournalLineDimension."Journal Batch Name" := "Journal Batch Name";
        JournalLineDimension."Journal Line No." := "Line No.";
        JournalLineDimension.VALIDATE("Dimension Code", MovingDataSetup."INC.TAX Dimension Code");
        JournalLineDimension.VALIDATE("Dimension Value Code", IncTaxDimCode);
        JournalLineDimension.INSERT(TRUE);
        }
        IF "Dimension Set ID" <> 0 THEN
          DimMgt.GetDimensionSet(TempDimSetEntry, "Dimension Set ID");
        TempDimSetEntry.VALIDATE("Dimension Code", MovingDataSetup."INC.TAX Dimension Code");
        IF TempDimSetEntry.FIND THEN
          TempDimSetEntry.DELETE;
        TempDimSetEntry.VALIDATE("Dimension Value Code", IncTaxDimCode);
        TempDimSetEntry.SetObject(Rec);
        TempDimSetEntry.INSERT(TRUE);

        DimMgt.UpdateGenJnlLineDim(Rec, DimMgt.GetDimensionSetID(TempDimSetEntry));
        //NC NOS-26 < SPA
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ChecAccType@1101495008(WhatToCheck@1101495000 : 'Account,Bal. Account,Both');
    BEGIN
      // NC MIO-11 AES
      IF NOT GLSetup.IsGLAccountingOnly THEN
        EXIT;
      IF WhatToCheck IN [WhatToCheck::Account,
                         WhatToCheck::Both]
      THEN BEGIN
        IF "Account Type" IN ["Account Type"::Customer,
                              "Account Type"::Vendor,
                              "Account Type"::"Bank Account"]
        THEN
          ERROR(Text50090,FIELDCAPTION("Account Type"),"Account Type",COMPANYNAME);
      END;
      IF WhatToCheck IN [WhatToCheck::"Bal. Account",
                         WhatToCheck::Both]
      THEN BEGIN
        IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,
                                   "Bal. Account Type"::Vendor,
                                   "Bal. Account Type"::"Bank Account"]
        THEN
          ERROR(Text50090,FIELDCAPTION("Bal. Account Type"),"Bal. Account Type",COMPANYNAME);
      END;
    END;

    PROCEDURE fn_CheckUserSetup@1000000009(p_intFieldNo@1000000000 : Integer);
    VAR
      l_recUserSetup@1000000001 : Record 91;
    BEGIN
      //TDRANCS-1683>
      IF NOT GUIALLOWED
        THEN EXIT;
      l_recUserSetup.GET(USERID);
      CASE p_intFieldNo OF
        FIELDNO("Not Consolidate"):
          l_recUserSetup.TESTFIELD(l_recUserSetup."Allow Not Consolidate",TRUE);
        //TDRANCS-1425>
        FIELDNO("Not Translate"):
          l_recUserSetup.TESTFIELD(l_recUserSetup."Allow Not Translate",TRUE);
        FIELDNO("Not Translate IFRS"):
          l_recUserSetup.TESTFIELD(l_recUserSetup."Allow Not Translate",TRUE);
        //TDRANCS-1425<
      END;
    END;

    PROCEDURE Approve@1101495006();
    BEGIN
      // NC NCS-1880 > ORM
      CheckLineForApproval;
      "Approved By" := USERID;
      MODIFY;
      // NC NCS-1880 < ORM
    END;

    PROCEDURE Reopen@1101495007() : Boolean;
    BEGIN
      // NC NCS-1880 > ORM
      IF "Approved By" = '' THEN
        EXIT(FALSE);

      "Approved By" := '';
      MODIFY;

      EXIT(TRUE);
      // NC NCS-1880 < ORM
    END;

    PROCEDURE CheckLineForApproval@1101495013();
    VAR
      UserSetup@1101495000 : Record 91;
      LoginMgt@1170000000 : Codeunit 418;
    BEGIN
      // NC NCS-1880 > ORM
      TESTFIELD("Approved By",'');

      IF "Modified By" = UPPERCASE(USERID) THEN
        ERROR(ApproveSameUserErr);

      // NC NCS-2142 > ORM
      GLSetup.GET;
      CASE GLSetup."4 Eyes Approval Type" OF
        GLSetup."4 Eyes Approval Type"::"By Document":
          CheckLineForDocumentApproval;

        GLSetup."4 Eyes Approval Type"::"By Entry":
          CheckLineForEntryApproval;
      END;
      // NC NCS-2142 < ORM
    END;

    PROCEDURE CheckLineForDocumentApproval@1170000007();
    BEGIN
      // NC NCS-2142 > ORM
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Allow Approval",TRUE);
      // NC NCS-2142 < ORM
    END;

    PROCEDURE CheckLineForEntryApproval@1170000008();
    VAR
      ExchAccGenJournalLine@1170000003 : Record 81;
      AccountNo@1170000000 : Code[20];
    BEGIN
      // NC NCS-2142 > ORM
      FindApprovalSetupAndCheckLimit;

      IF "Bal. Account No." <> '' THEN BEGIN
        GetExchAccJnlLine(ExchAccGenJournalLine);
        ExchAccGenJournalLine.FindApprovalSetupAndCheckLimit;
      END;
      // NC NCS-2142 < ORM
    END;

    PROCEDURE FindApprovalSetupAndCheckLimit@1170000011();
    VAR
      GenJnlApprovalSetup@1170000001 : Record 50214;
      AccountNo@1170000000 : Code[20];
    BEGIN
      // NC NCS-2142 > ORM
      AccountNo := GetGLAccountNo(TRUE);

      //NC NCS-2300 > DP
      {
      FindGenJnlApprovalSetup(GenJnlApprovalSetup,AccountNo,USERID);
      }
      FindGenJnlApprovalSetup(GenJnlApprovalSetup,AccountNo,USERID,0);
      //NC NCS-2300 > DP

      IF GenJnlApprovalSetup."Limit Amount" < ABS("Amount (LCY)") THEN
        ERROR(
          NotAllowedApproveErr,
          STRSUBSTNO(
            ApprovalLimitAmountErr,GenJnlApprovalSetup."Limit Amount",AccountNo));
      // NC NCS-2142 < ORM
    END;

    PROCEDURE CheckAgainstApproved@1101495020();
    VAR
      UserSetup@1170000000 : Record 91;
      GenJnlApprovalSetup@1101495001 : Record 50214;
      GenJnlApprovalSetup2@1101495002 : Record 50214;
    BEGIN
      // NC NCS-1880 > ORM
      IF "System-Created Entry" THEN
        EXIT;

      IF ("Journal Template Name" = '') AND ("Journal Batch Name" = '') THEN
        EXIT;

      //NC NCS-2300 > DP
      GLSetup.GET;
      CASE GLSetup."4 Eyes Approval Type" OF
        GLSetup."4 Eyes Approval Type"::"By Document":
      //NC NCS-2300 < DP

      IF "Approved By" = '' THEN BEGIN
        UserSetup.GET(USERID);
        IF NOT UserSetup."Allow Skip Approval" THEN
          ERROR(PostNotApprovedErr,
            FIELDCAPTION("Journal Template Name"),"Journal Template Name",
            FIELDCAPTION("Journal Batch Name"),"Journal Batch Name",
            FIELDCAPTION("Line No."),"Line No.");
      END;
      // NC NCS-1880 < ORM

      //NC NCS-2300 > DP
        GLSetup."4 Eyes Approval Type"::"By Entry":
          BEGIN

            //NC NCS-2300.1 > DP
            ShouldBeApprove := ("Approved By" = '');
            {
            ShouldBeApprove := TRUE;
            }
            //NC NCS-2300.1 < DP

            FindGenJnlApprovalSetup(GenJnlApprovalSetup,'','',1);
            IF GenJnlApprovalSetup."Limit Amount" < ABS("Amount (LCY)") THEN
              IF ShouldBeApprove THEN BEGIN
                UserSetup.GET(USERID);
                IF NOT UserSetup."Allow Skip Approval" THEN BEGIN
                  FindGenJnlApprovalSetup2(GenJnlApprovalSetup2,0);
                  ERROR(PostNotApprovedErr2,
                    FIELDCAPTION("Journal Template Name"),"Journal Template Name",
                    FIELDCAPTION("Journal Batch Name"),"Journal Batch Name",
                    FIELDCAPTION("Line No."),"Line No.",GenJnlApprovalSetup2."User ID");
                END;
              END;
          END;
      END;
      //NC NCS-2300 < DP
    END;

    PROCEDURE CheckModifyAgainstApproved@1170000001();
    VAR
      UserSetup@1170000000 : Record 91;
    BEGIN
      // NC NCS-1880 > ORM
      IF "Approved By" <> '' THEN
        ERROR(ModifyApprovedErr,
          FIELDCAPTION("Journal Template Name"),"Journal Template Name",
          FIELDCAPTION("Journal Batch Name"),"Journal Batch Name",
          FIELDCAPTION("Line No."),"Line No.");
      // NC NCS-1880 < ORM
    END;

    PROCEDURE UpdateModifiedByForDocument@1170000000();
    VAR
      GenJournalLine@1170000000 : Record 81;
    BEGIN
      // NC NCS-1880 > PCH
      IF "System-Created Entry" OR
         NOT GLSetup."Approval for Gen. Journal Line" THEN
        EXIT;
      // NC NCS-1880 < PCH
      // NC NCS-1880 > ORM
      IF "Document No." <> '' THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
        GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJournalLine.SETRANGE("Document No.","Document No.");
        GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
        IF NOT GenJournalLine.ISEMPTY THEN
          GenJournalLine.MODIFYALL("Modified By",USERID);
      END;
      // NC NCS-1880 < ORM
    END;

    PROCEDURE FindGenJnlApprovalSetup@1170000003(VAR GenJnlApprovalSetup@1170000000 : Record 50214;AccountNo@1170000002 : Code[20];ApprovingUserID@1170000001 : Code[20];ApprovementType@1101495000 : 'Approvement,Posting');
    BEGIN
      // NC NCS-2142 > ORM
      AccountNo := GetGLAccountNo(TRUE);
      GenJnlApprovalSetup.SETCURRENTKEY("User ID","Limit Amount");
      //NC NCS-2300 > DP
      GenJnlApprovalSetup.SETRANGE(Type,ApprovementType);
      //NC NCS-2300 < DP
      GenJnlApprovalSetup.SETRANGE("User ID",ApprovingUserID);
      IF GenJnlApprovalSetup.FINDLAST THEN
        REPEAT
          IF IsGLAccountInFilter(AccountNo,GenJnlApprovalSetup."G/L Account Filter") THEN
            EXIT;
        UNTIL GenJnlApprovalSetup.NEXT(-1) = 0;

      //NC NCS-2300 > DP
      IF ApprovementType=ApprovementType::Posting THEN
        ShouldBeApprove := FALSE
      ELSE
      //NC NCS-2300 < DP

      ERROR(
        NotAllowedApproveErr,
        STRSUBSTNO(
          GenJnlApprovalSetupNotFoundErr,AccountNo,ApprovingUserID,ABS(Amount)));
      // NC NCS-2142 < ORM
    END;

    PROCEDURE IsGLAccountInFilter@1170000005(AccountNo@1170000000 : Code[20];AccountFilter@1170000001 : Code[250]) : Boolean;
    VAR
      GLAccount@1170000002 : Record 15;
    BEGIN
      // NC NCS-2142 > ORM
      GLAccount.FILTERGROUP(2);
      GLAccount.SETRANGE("No.",AccountNo);
      GLAccount.FILTERGROUP(0);
      GLAccount.SETFILTER("No.",AccountFilter);
      EXIT(NOT GLAccount.ISEMPTY);
      // NC NCS-2142 < ORM
    END;

    PROCEDURE GetGLAccountNo@1170000006(PostingGroupMandatory@1170000004 : Boolean) : Code[20];
    VAR
      CustomerPostingGroup@1170000000 : Record 92;
      VendorPostingGroup@1170000001 : Record 93;
      BankAccountPostingGroup@1170000002 : Record 277;
      FAPostingGroup@1170000003 : Record 5606;
    BEGIN
      // NC NCS-2142 > ORM
      CASE "Account Type" OF
        "Account Type"::"G/L Account":
          EXIT("Account No.");
        "Account Type"::Customer:
          BEGIN
            IF PostingGroupMandatory THEN
              TESTFIELD("Posting Group");
            IF "Posting Group" <> '' THEN
              CustomerPostingGroup.GET("Posting Group");
            EXIT(CustomerPostingGroup."Receivables Account");
          END;
        "Account Type"::Vendor:
          BEGIN
            IF PostingGroupMandatory THEN
              TESTFIELD("Posting Group");
            IF "Posting Group" <> '' THEN
              VendorPostingGroup.GET("Posting Group");
            EXIT(VendorPostingGroup."Payables Account");
          END;
        "Account Type"::"Bank Account":
          BEGIN
            IF PostingGroupMandatory THEN
              TESTFIELD("Posting Group");
            IF "Posting Group" <> '' THEN
              BankAccountPostingGroup.GET("Posting Group");
            EXIT(BankAccountPostingGroup."G/L Bank Account No.");
          END;
        "Account Type"::"Fixed Asset":
          BEGIN
            IF PostingGroupMandatory THEN
              TESTFIELD("Posting Group");
            IF "Posting Group" <> '' THEN
              FAPostingGroup.GET("Posting Group");
            EXIT(FAPostingGroup."Acquisition Cost Account");
          END;
      END;
      // NC NCS-2142 < ORM
    END;

    PROCEDURE GetExchAccJnlLine@1170000002(VAR ExchAccGenJournalLine@1170000000 : Record 81);
    VAR
      GenJournalLine@1170000001 : Record 81;
    BEGIN
      // NC NCS-2142 > ORM
      ExchAccGenJournalLine.TRANSFERFIELDS(Rec);
      CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",ExchAccGenJournalLine);
      // NC NCS-2142 < ORM
    END;

    PROCEDURE FindGenJnlApprovalSetup2@1101495010(VAR GenJnlApprovalSetup@1170000000 : Record 50214;ApprovementType@1101495000 : 'Approvement,Posting');
    VAR
      AccountNo@1101495001 : Code[20];
    BEGIN
      //NC NCS-2300 > DP
      AccountNo := GetGLAccountNo(TRUE);
      GenJnlApprovalSetup.SETCURRENTKEY("Limit Amount","User ID");
      GenJnlApprovalSetup.SETRANGE(Type,ApprovementType);
      GenJnlApprovalSetup.SETFILTER("Limit Amount",'>%1',"Amount (LCY)");
      IF GenJnlApprovalSetup.FINDSET THEN
        REPEAT
          IF IsGLAccountInFilter(AccountNo,GenJnlApprovalSetup."G/L Account Filter") THEN
            EXIT;
        UNTIL GenJnlApprovalSetup.NEXT(1) = 0;
      ERROR(
        NotAllowedApproveErr,
        STRSUBSTNO(
          ApprovalSetupNotFoundErr,AccountNo,GLSetup."LCY Code","Amount (LCY)"));
      //NC NCS-2300 < DP
    END;

    PROCEDURE fn_SetUpdate@1101495011();
    BEGIN
      //NC NCS-2385 > DP
      g_blnIsUpdate := TRUE;
      //NC NCS-2385 < DP
    END;

    PROCEDURE SpecifyTableID_No@1101495009(VAR TableID@1101495000 : ARRAY [10] OF Integer;VAR No@1101495001 : ARRAY [10] OF Code[20]);
    BEGIN
      //NC NOS-26 SPA
      TableID[1] := DimMgt.TypeToTableID1("Account Type");
      No[1] := "Account No.";
      TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
      No[2] := "Bal. Account No.";
      TableID[3] := DATABASE::"Financial Instrument";
      No[3] := "Financial Instrument No.";
      IF TableID[1] = DATABASE::Customer THEN
        TableID[4] := DATABASE::"Customer Agreement"
      ELSE
        IF TableID[1] = DATABASE::Vendor THEN
          TableID[4] := DATABASE::"Vendor Agreement";
      IF TableID[4] <> 0 THEN
        No[4] := "Agreement No.";
    END;

    BEGIN
    {
      NC PIF001 DL Добавлены поля Buffer Entry No., Cons. Source Code, Capital %, Reklass. Capital %
      NC PIF001 AK Добавлены поля 55000-55045
      NC PIF001.01 DL Добавлен ключ Buffer Entry No.,Cons. Source Code
      NC PIF001 AK Добавлен ключ Journal Template Name,Journal Batch Name,Export Register No.,Export Cons. Source Code
      NC PIF001 MP Изменения в триггере Amount - On Validate
      NC MP 27.02.07 Новое Поле Except Correspondence
                     Новый ключ Except Correspondence
                     Новый ключ Export Register No.,Export Cons. Source Code,Except Correspondence
      NC MP 27.03.07 Изменения в OnDelete
      NC PIF001 MP Изменен CaptionClass у полей c (LCY)
      NC MP 24.09.07 Изменен Expression - OnLookup()
      NC PIF001 DP Добавлено Analysis View Budget Entry No.
      NCS CFM Fields RFP No., RFP Entry No. added
      NCS CFM Keys added "RFP No." (Amount,Amount (LCY)), "RFP Entry No." (Amount,Amount (LCY))
      NC MDB01 MP Изменения в коде
      ----------------------------------
      NC BLD001 Создан билд NAVW15.00.01,NAVRU5.00.01.03,PS22598,PS22709,NCPIF001,NCSCFM1.01,MDB01,MDP01
      NC MIFI02 MP Новые поля Eliminated Entry No., Elimination
      NC TR266 EB "Posting Group" editable=true
      NC TR204 EB Изменено свойсво Editable поля "Amount (LCY)"
      NC MTD06 AIG Изменения в коде
      NC MTD11 AIG Доопределение стандартной аналитики с фин. инструмента
      NC OBM004 EB изменено формирование описания
      NC MTD02 AIG Закрыта валидация учетной группы банковского счета
      ----------------------------------
      NC BLD02 AKU Создан билд. Доработки NCBLD001,MDR03,MIFI02,TR266,MTD06,MTD11,MTF02,MLN03
      NC MTF02 II Добавлены поля 50100-50107
      NC MTF02 II Исправлены поля Account Type, Bal. Account Type
      NC MTF02 II Исправлен код
      NC MTF02 AKU Копирование значений "FI Portfolio", "FI Posting Book" из настройки раздела при создании новой строки
      NC MTF02 II Добавлен ключ Conversation ID,FI EntryType,Amount Type
      NC MLN03 EB добавлено поле Agreement Condition No.
      ---------------------------------
      NC BLD03 AKU Создан билд. Доработки NCBLD002,MTF02,MLN03
      NC OFA002 DP Добавлена функция вставки измерения TAX.OTHER для НДС
      NC MLN09 DP Функция вставки измерения AC.COMP в зависимости от "Amount Type", поле
      NC MLN09 DP Добавлено поле "Interest Calc. No. of Days"
      NC MLN09.1 DP Изменен код триггеров ON_VALIDATE для полей "Agreement No.", "Amount Type"
      NC BLD03 PCH Создан билд. Доработки NCBLD02,OFA002,MLN09,MTF02,MLN09.1
      NC MTF01 PCH добавлены функции для заполнения служ. полей консолидации
      ---------------------------------
      NC BLD04 DP Создан билд. Доработки NCBLD03,MTF01,MLN09.3,MFA22,OFA21
      NC MLN09.4 DP Изменен код триггера ON_VALIDATE для поля "Agreement No."
      NC MLN09.5 DP Изменен код триггера ON_VALIDATE для поля "Agreement No.", "Amount Type"
      NC MTF02 II Добавлены поля GLEntryTypeForFI, FIValueEntryNo
      NC MTF02 AKU Добавлено поле "Appl. to FI Entry No.". Используется для сторннирования учтенной операции с фин. инструментом
      NC OFA002.1 DP Изменена функция вставки измерения TAX.OTHER для кредит-нот
      ---------------------------------
      NC BLD05 DP Создан билд. Доработки NCBLD05,MLN09.5,MTF02,OFA002.1
      NC OAM31 PCH Перевод измерений по договорам по умолчанию на таблицу Default Dimension Advanced
      NC MTF02 AKU Контроль количества. В ключ Account No.,FI Posting Book,FI Portfolio,Amount Type добавил Posting Date, Short Position
      NC MLN09.3 AKU Обход ошибки RUNMODAL из-за VALIDATE("Posting Group",...) при выборе "Agreement No."
      NC MCO05 DP Добавлены поля "FA Def. Dim. Change", "FA Def. Dim. Code"
      ---------------------------------
      NC BLD06 DP Создан билд. Доработки NCBLD05,OAM31,OAM37,MCO05.4,MLN09.3
      NC APCOC-92 DP Поле "Not Translate"
      NC APCOC-117 RD Добавлено поле Not Translate IFRS
      ----------------------------------
      NC BLD07 PCH Создан билд. BLD07=NCBLD06,APCOC-92,APCOC-56,APCOC-117
      NC NCS-622 PCH Lookup для Buffer Entry No.
      NC NCS-622.10 Указание "Financial Instrument No." по ст. измерения договора
      NC NCS-815 DP Сумма в локальной валюте для реверсивных проводок
      TDRANCS-897 >
      -----------------------------------
      BLD08 NAVW15.00.01,NAVRU5.00.01.03,PS22598,PS22709,NCBLD07,S622.10,NCS-815
        Corrected update linked dimensions
        ADD Function fn_CreateLinkDim
      TDRANCS-875 >
        Modify OnValidate "VAT Bus. Posting Group", "VAT Prod. Posting Group" (check date)
      NC NC-973 SKV
        add function GetIncTaxDimCode, DeleteIncTaxDimCode, InsertIncTaxDimCode
        modify "Financial Instrument No." - OnValidate
      NC S1074 PCH
      TDRANCS-1071> Modified ValidateShortcutDimCode
      ---------------------------------
      NC BLD09 DP Создан билд. доработки  BLD08,TDNCS-897,TDNCS-875,NC-973,S1074,NCS-1071
      NC NCS-1108 DP Определение "Bank Payment Type" из аналогичного поля Gen. Jnl. Batch, смена даты учета после печати чека
      NC NCS-1148 DP Изменена последовательность указания значения в поле тип суммы
      NC NCS-1213 DP Изменен ключ "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No."(добавлено поле"Applies-to ID")
      NC NCS-1268 DP Изменен OptionString поля "Amount Type"
      NC MIO-10 DP Поле "Source User ID"
      TDRANCS-1394
        Modified OnValidate "Currency Index Entry"
      NC MIO-11 AES:
        Новые функции:
          ChecAccType,
        Изменены функции:
          SetUpNewLine,
          CheckGLAcc
        Измененные триггеры:
          "Account Type" - OnValidate,
          "Bal. Account Type" - OnValidate
        Новые текстовые конст.:
          Text50090
      NC MIO-10 DP Поле "Source User ID"
      NC MIO-28 AES Отключить формирование операций в G/L Entry при формировании переоценок
        Новое поле: "Not G/L Post"
      NC MIO-61,NCS-1715 DP Добавлено поле Source "G/L Account No."
      TDRAMIO-80 added Key Source FA Entry No.,Cons. Source Code
      TDRANCS-1683
        MODIFIED  Not Consolidate - OnValidate(), fn_CheckUserSetup
      TDRA
        created BLD10 - BLD09,NCS-1108,1213,1268,1394,MIO-11,MIO-10,MIO-28
      TDRANCS-1425
        MODIFIED  Not Translate, Not Translate IFRS  - OnValidate(), fn_CheckUserSetup
      TDRANCS-1735
        Switched off keys
        Journal Template Name,Journal Batch Name,Conversation ID,FI EntryType,Amount Type
        Financial Instrument No.,FI Posting Book,FI Portfolio,Amount Type,Posting Date,Short Position
      NC NCS-1820 DP Добавлены поля "Allocation ACY Amount", "Allocation Entry"
      NC NCS-1880 ORM Добавлены поля "Modified By", "Approved By" и функции по их конролю и заполнению
      NCS-2055 AAP Modify triggers "Source G/L Account No.": OnValidate, OnLookUp
      NCS-2068 AAP: копирование поля "Business Unit"."Not Consolidate" в "Not Consolidate"
      NC NCS-2142 ORM Added functions FindGenJnlApprovalSetup, IsGLAccountInFilter, GetGLAccountNo, GetExchAccJnlLine
      ---------------------------------------
      NC BLD11 ORM создан билд доработки BLD10,MIO-80,s-1683,s-1425,s-1735,1715,1148
      NC NCS-2300 DP Changed function FindApprovalSetupAndCheckLimit, FindGenJnlApprovalSetup, CheckAgainstApproved
                             added function FindGenJnlApprovalSetup2
      NC NCS-2300.1 DP Changed trigger OnInsert, function CheckAgainstApproved
      NC NCS-2385 DP Added function fn_SetUpdate, changed function OnModify
      NC NCS-2356 DP Changed dimension of array ShortcutDimCode 8->10 function ShowShortcutDimCode
                     Modify "Financial Instrument No.".OnValidate
      -----------------------------------
      NC NOS-26 SPA Миграция на новую версию программы
                      Добавлены ограничения для автоматического фин. журнала при удалении и обновлении баланса
    }
    END.
  }
}

