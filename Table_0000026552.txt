OBJECT Table 26552 Statutory Report Table
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVRU10.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               StatReportTableColumn@1210001 : Record 26554;
               StatReportTableRow@1210002 : Record 26553;
               TableIndividualRequisite@1210000 : Record 26556;
               PageIndicationXMLElement@1210003 : Record 26571;
             BEGIN
               StatReportTableColumn.SETRANGE("Report Code","Report Code");
               StatReportTableColumn.SETRANGE("Table Code",Code);
               IF StatReportTableColumn.FINDFIRST THEN
                 StatReportTableColumn.DELETEALL(TRUE);

               StatReportTableRow.SETRANGE("Report Code","Report Code");
               StatReportTableRow.SETRANGE("Table Code",Code);
               IF StatReportTableRow.FINDFIRST THEN
                 StatReportTableRow.DELETEALL(TRUE);

               TableIndividualRequisite.SETRANGE("Report Code","Report Code");
               TableIndividualRequisite.SETRANGE("Table Code",Code);
               IF TableIndividualRequisite.FINDFIRST THEN
                 TableIndividualRequisite.DELETEALL(TRUE);

               PageIndicationXMLElement.SETRANGE("Report Code","Report Code");
               PageIndicationXMLElement.SETRANGE("Table Code",Code);
               IF PageIndicationXMLElement.FINDFIRST THEN
                 PageIndicationXMLElement.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Statutory Report Table;
               RUS=Таблица регламентного отчета];
    LookupPageID=Page26552;
  }
  FIELDS
  {
    { 1   ;   ;Report Code         ;Code20        ;TableRelation="Statutory Report";
                                                   CaptionML=[ENU=Report Code;
                                                              RUS=Код отчета] }
    { 2   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              RUS=Код];
                                                   NotBlank=Yes }
    { 3   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 9   ;   ;Sequence No.        ;Integer       ;CaptionML=[ENU=Sequence No.;
                                                              RUS=Порядковый номер] }
    { 11  ;   ;Excel Sheet Name    ;Text30        ;TableRelation="Stat. Report Excel Sheet"."Sheet Name" WHERE (Report Code=FIELD(Report Code),
                                                                                                                Report Data No.=CONST());
                                                   OnLookup=BEGIN
                                                              StatutoryReport.GET("Report Code");
                                                              StatutoryReport.LookupExcelSheetNames("Excel Sheet Name");
                                                            END;

                                                   CaptionML=[ENU=Excel Sheet Name;
                                                              RUS=Имя листа Excel] }
    { 12  ;   ;Scalable Table      ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Scalable Table" THEN BEGIN
                                                                  "Scalable Table First Row No." := 0;
                                                                  "Scalable Table Row Step" := 0;
                                                                  "Scalable Table Max Rows Qty" := 0;
                                                                  "Vertical Table" := FALSE;
                                                                  DeletePageIndicationElements;

                                                                  IF NOT "Multipage Table" THEN BEGIN
                                                                    "Page Indication Text" := '';
                                                                    "Page Indic. Excel Cell Name" := '';
                                                                    "Page Indic. Requisite Line No." := 0;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Table Indication Text" := '';
                                                                  "Table Indic. Excel Cell Name" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Scalable Table;
                                                              RUS=Расширяемая таблица] }
    { 15  ;   ;Row Code            ;Text20        ;CaptionML=[ENU=Row Code;
                                                              RUS=Код строки] }
    { 16  ;   ;Rows Quantity       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Stat. Report Table Row" WHERE (Report Code=FIELD(Report Code),
                                                                                                     Table Code=FIELD(Code)));
                                                   CaptionML=[ENU=Rows Quantity;
                                                              RUS=Количество строк];
                                                   Editable=No }
    { 17  ;   ;Columns Quantity    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Stat. Report Table Column" WHERE (Report Code=FIELD(Report Code),
                                                                                                        Table Code=FIELD(Code)));
                                                   CaptionML=[ENU=Columns Quantity;
                                                              RUS=Количество столбцов];
                                                   Editable=No }
    { 20  ;   ;Scalable Table First Row No.;Integer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Scalable Table",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Scalable Table First Row No.;
                                                              RUS=Номер первой строки расширяемой таблицы] }
    { 21  ;   ;Scalable Table Row Step;Integer    ;OnValidate=BEGIN
                                                                TESTFIELD("Scalable Table",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Scalable Table Row Step;
                                                              RUS=Шаг строки расширяемой таблицы] }
    { 22  ;   ;Scalable Table Max Rows Qty;Integer;CaptionML=[ENU=Scalable Table Max Rows Qty;
                                                              RUS=Макс. кол-во строк расширяемой таблицы] }
    { 23  ;   ;Multipage Table     ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Multipage Table" THEN BEGIN
                                                                  "Table Indication Text" := '';
                                                                  "Table Indic. Excel Cell Name" := '';

                                                                  IF NOT "Scalable Table" THEN BEGIN
                                                                    "Page Indication Text" := '';
                                                                    "Page Indic. Excel Cell Name" := '';
                                                                    "Page Indic. Requisite Line No." := 0;
                                                                  END;

                                                                  DeletePageIndicationElements;
                                                                END;

                                                                IF "Multipage Table" THEN
                                                                  "Vertical Table" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Multipage Table;
                                                              RUS=Многостраничная таблица] }
    { 24  ;   ;Page Indication Text;Text250       ;OnValidate=BEGIN
                                                                IF NOT "Scalable Table" THEN
                                                                  TESTFIELD("Multipage Table",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Page Indication Text;
                                                              RUS=Текст - признак страницы] }
    { 25  ;   ;Page Indic. Excel Cell Name;Code10 ;OnValidate=BEGIN
                                                                IF NOT "Scalable Table" THEN
                                                                  TESTFIELD("Multipage Table",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Page Indic. Excel Cell Name;
                                                              RUS=Имя ячейки Excel - признак страницы] }
    { 26  ;   ;Page Indic. Requisite Line No.;Integer;
                                                   TableRelation="Table Individual Requisite"."Line No." WHERE (Report Code=FIELD(Report Code),
                                                                                                                Table Code=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Multipage Table",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Page Indic. Requisite Line No.;
                                                              RUS=Указ. страницы - номер строки показателей] }
    { 27  ;   ;Table Indication Text;Text250      ;OnValidate=BEGIN
                                                                IF "Table Indication Text" <> '' THEN BEGIN
                                                                  TESTFIELD("Scalable Table",FALSE);
                                                                  TESTFIELD("Multipage Table",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Table Indication Text;
                                                              RUS=Текст - признак таблицы] }
    { 28  ;   ;Table Indic. Excel Cell Name;Code10;OnValidate=BEGIN
                                                                IF "Table Indic. Excel Cell Name" <> '' THEN BEGIN
                                                                  TESTFIELD("Scalable Table",FALSE);
                                                                  TESTFIELD("Multipage Table",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Table Indic. Excel Cell Name;
                                                              RUS=Имя ячейки Excel - признак таблицы] }
    { 30  ;   ;Parent Table Code   ;Code20        ;TableRelation="Statutory Report Table".Code WHERE (Report Code=FIELD(Report Code));
                                                   OnValidate=BEGIN
                                                                IF "Parent Table Code" = Code THEN
                                                                  FIELDERROR("Parent Table Code");
                                                              END;

                                                   CaptionML=[ENU=Parent Table Code;
                                                              RUS=Код родительской таблицы] }
    { 31  ;   ;Vertical Table      ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Scalable Table",TRUE);
                                                                IF "Vertical Table" THEN
                                                                  "Multipage Table" := FALSE
                                                                ELSE
                                                                  DeletePageIndicationElements;
                                                              END;

                                                   CaptionML=[ENU=Vertical Table;
                                                              RUS=Вертикальная таблица] }
    { 50  ;   ;Int. Source Type    ;Option        ;OnValidate=BEGIN
                                                                IF "Int. Source Type" <> xRec."Int. Source Type" THEN BEGIN
                                                                  "Int. Source Section Code" := '';
                                                                  VALIDATE("Int. Source No.",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Int. Source Type;
                                                              RUS=Тип внутр. источника];
                                                   OptionCaptionML=[ENU=" ,Acc. Schedule,Tax Register,Tax Difference,Payroll Analysis Report";
                                                                    RUS=" ,Фин. отчет,Налоговый регистр,Налоговая разница,Аналитический отчет по зарплате"];
                                                   OptionString=[ ,Acc. Schedule,Tax Register,Tax Difference,Payroll Analysis Report] }
    { 51  ;   ;Int. Source Section Code;Code10    ;TableRelation=IF (Int. Source Type=FILTER(Tax Register)) "Tax Register Section"
                                                                 ELSE IF (Int. Source Type=CONST(Tax Difference)) "Tax Calc. Section";
                                                   OnValidate=BEGIN
                                                                IF "Int. Source Type" IN ["Int. Source Type"::" ","Int. Source Type"::"Acc. Schedule"] THEN
                                                                  FIELDERROR("Int. Source Type");

                                                                IF "Int. Source Section Code" <> xRec."Int. Source Section Code" THEN
                                                                  VALIDATE("Int. Source No.",'');
                                                              END;

                                                   CaptionML=[ENU=Int. Source Section Code;
                                                              RUS=Код секции внутр. источника] }
    { 52  ;   ;Int. Source No.     ;Code10        ;TableRelation=IF (Int. Source Type=CONST(Acc. Schedule)) "Acc. Schedule Name"
                                                                 ELSE IF (Int. Source Type=CONST(Tax Register)) "Tax Register".No. WHERE (Section Code=FIELD(Int. Source Section Code))
                                                                 ELSE IF (Int. Source Type=CONST(Tax Difference)) "Tax Calc. Header".No. WHERE (Section Code=FIELD(Int. Source Section Code))
                                                                 ELSE IF (Int. Source Type=CONST(Payroll Analysis Report)) "Payroll Analysis Report Name";
                                                   OnValidate=BEGIN
                                                                IF "Int. Source No." <> xRec."Int. Source No." THEN
                                                                  IF "Int. Source No." <> '' THEN BEGIN
                                                                    TESTFIELD("Int. Source Type");
                                                                    UpdateIntSourceLinks;
                                                                  END ELSE
                                                                    CheckIntSourceMappingExistence;
                                                              END;

                                                   CaptionML=[ENU=Int. Source No.;
                                                              RUS=Код внутр. источника] }
    { 53  ;   ;Exception           ;Option        ;CaptionML=[ENU=Exception;
                                                              RUS=Исключение];
                                                   OptionCaptionML=[ENU=" ,RSV1 Section 2";
                                                                    RUS=" ,RSV1 секция 2"];
                                                   OptionString=[ ,RSV1 Section 2] }
  }
  KEYS
  {
    {    ;Report Code,Code                        ;Clustered=Yes }
    {    ;Report Code,Sequence No.                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      StatutoryReport@1210000 : Record 26550;
      FormatVersion@1210016 : Record 26573;
      BLOBRef@1210010 : TEMPORARY Record 99008535;
      ExcelMgt@1210003 : Codeunit 12416;
      FileMgt@1210002 : Codeunit 419;
      Text000@1210012 : TextConst 'ENU=Excel not found.;RUS=Excel не установлен.';
      Text001@1210011 : TextConst 'ENU=You must enter a file name.;RUS=Необходимо ввести имя файла.';
      Text003@1210009 : TextConst 'ENU=The file %1 does not exist.;RUS=Файл %1 не существует.';
      Text004@1210008 : TextConst 'ENU=The Excel worksheet %1 does not exist.;RUS=Лист Excel %1 не существует.';
      Text008@1210024 : TextConst 'ENU=You must specify an Acc. Schedule Name.;RUS=Необходимо указать имя фин. отчета.';
      Text009@1210017 : TextConst 'ENU=You must specify a Column Layout Name.;RUS=Необходимо указать имя раскладки столбцов.';
      Text018@1210026 : TextConst 'ENU=All related page indication elements will be deleted. Proceed?;RUS=Все связанные элементы признака страницы будут удалены. Продолжить?';
      Text019@1210001 : TextConst 'ENU=All related mapping information will be deleted. Do you want to continue?;RUS=Все связанные сведения соответствия будут удалены. Продолжить?';
      Text023@1210036 : TextConst 'ENU=Account schedule has been created successfully.;RUS=Финансовый отчет успешно создан.';
      XlApp@1210007 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1210006 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorkbookClass" RUNONCLIENT;
      XlWrkSht@1210005 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;
      XlWrkshts@1210004 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheets";
      XlHelper@1210013 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;

    PROCEDURE OpenBook@2();
    VAR
      i@1002 : Integer;
      EndOfLoop@1003 : Integer;
      Found@1004 : Boolean;
      FileName@1210000 : Text[250];
    BEGIN
      FormatVersion.CALCFIELDS("Report Template");
      IF FormatVersion."Report Template".HASVALUE THEN BEGIN
        BLOBRef.Blob := FormatVersion."Report Template";
        FileName := FileMgt.BLOBExport(BLOBRef,FormatVersion."Excel File Name",FALSE);
      END;

      IF FileName = '' THEN
        ERROR(Text001);

      IF NOT EXISTS(FileName) THEN
        ERROR(Text003,FileName);

      XlApp := XlApp.ApplicationClass;
      IF ISNULL(XlApp) THEN
        ERROR(Text000);

      XlHelper.CallOpen(XlApp,FileName);
      XlWrkBk := XlApp.ActiveWorkbook;
      i := 1;
      EndOfLoop := XlWrkBk.Worksheets.Count;
      WHILE (i <= EndOfLoop) AND (NOT Found) DO BEGIN
        XlWrkSht := XlWrkBk.Worksheets.Item(i);
        IF "Excel Sheet Name" = XlWrkSht.Name THEN
          Found := TRUE;
        i := i + 1;
      END;
      IF Found THEN
        XlWrkSht := XlWrkBk.Worksheets.Item("Excel Sheet Name")
      ELSE BEGIN
        CLEAR(XlWrkBk);
        XlApp.Quit;
        CLEAR(XlApp);
        ERROR(Text004,"Excel Sheet Name");
      END;
    END;

    PROCEDURE CreateAccSchedule@1210008();
    VAR
      AccScheduleLine@1210003 : Record 85;
      ColumnLayout@1210004 : Record 334;
      StatReportTableRow@1210006 : Record 26553;
      StatReportTableColumn@1210007 : Record 26554;
      CreateAccScheduleForm@1210000 : Page 26577;
      AccSchedName@1210001 : Code[10];
      ColLayoutName@1210002 : Code[10];
      ReplaceExistLines@1210005 : Boolean;
      LineNo@1210008 : Integer;
    BEGIN
      CreateAccScheduleForm.SetParameters("Report Code",Code);
      IF CreateAccScheduleForm.RUNMODAL <> ACTION::OK THEN
        EXIT;

      CreateAccScheduleForm.GetParameters(AccSchedName,ColLayoutName,ReplaceExistLines);

      IF AccSchedName = '' THEN
        ERROR(Text008);

      IF ColLayoutName = '' THEN
        ERROR(Text009);

      AccScheduleLine.SETRANGE("Schedule Name",AccSchedName);
      IF ReplaceExistLines THEN BEGIN
        IF AccScheduleLine.FINDFIRST THEN
          AccScheduleLine.DELETEALL;
      END ELSE BEGIN
        IF AccScheduleLine.FINDLAST THEN;
        LineNo := AccScheduleLine."Line No.";
      END;

      StatReportTableRow.SETRANGE("Report Code","Report Code");
      StatReportTableRow.SETRANGE("Table Code",Code);
      IF StatReportTableRow.FINDSET THEN
        REPEAT
          LineNo := LineNo + 10000;
          AccScheduleLine.INIT;
          AccScheduleLine."Schedule Name" := AccSchedName;
          AccScheduleLine."Line No." := LineNo;
          AccScheduleLine.Description := StatReportTableRow.Description;
          AccScheduleLine.Bold := StatReportTableRow.Bold;
          AccScheduleLine.INSERT;
        UNTIL StatReportTableRow.NEXT = 0;

      ColumnLayout.SETRANGE("Column Layout Name",ColLayoutName);
      IF ColumnLayout.ISEMPTY THEN BEGIN
        LineNo := 0;
        StatReportTableColumn.SETRANGE("Report Code","Report Code");
        StatReportTableColumn.SETRANGE("Table Code",Code);
        IF StatReportTableColumn.FINDSET THEN
          REPEAT
            LineNo := LineNo + 10000;
            ColumnLayout."Column Layout Name" := ColLayoutName;
            ColumnLayout."Line No." := LineNo;
            ColumnLayout."Column Header" :=
              COPYSTR(StatReportTableColumn."Column Header",
                1,
                MAXSTRLEN(ColumnLayout."Column Header"));
            ColumnLayout.INSERT;
          UNTIL StatReportTableColumn.NEXT = 0;
      END;

      MESSAGE(Text023);
    END;

    PROCEDURE GetRecDescription@1210004() : Text[250];
    BEGIN
      EXIT(STRSUBSTNO('%1 %2=''%3'', %4=''%5''',TABLECAPTION,
          FIELDCAPTION("Report Code"),"Report Code",
          FIELDCAPTION(Code),Code));
    END;

    PROCEDURE CopyTableStructure@1210011(ReportFromCode@1210000 : Code[20];TableFromCode@1210001 : Code[20]);
    VAR
      StatReportTableRow@1210002 : Record 26553;
      StatReportTableRowFrom@1210005 : Record 26553;
      StatReportTableColumn@1210003 : Record 26554;
      StatReportTableColumnFrom@1210004 : Record 26554;
      TableIndividualRequisite@1210006 : Record 26556;
      TableIndividualRequisiteFrom@1210007 : Record 26556;
    BEGIN
      StatReportTableRowFrom.SETRANGE("Report Code",ReportFromCode);
      StatReportTableRowFrom.SETRANGE("Table Code",TableFromCode);
      IF StatReportTableRowFrom.FINDSET THEN
        REPEAT
          StatReportTableRow := StatReportTableRowFrom;
          StatReportTableRow."Report Code" := "Report Code";
          StatReportTableRow.INSERT;
        UNTIL StatReportTableRowFrom.NEXT = 0;

      StatReportTableColumnFrom.SETRANGE("Report Code",ReportFromCode);
      StatReportTableColumnFrom.SETRANGE("Table Code",TableFromCode);
      IF StatReportTableColumnFrom.FINDSET THEN
        REPEAT
          StatReportTableColumn := StatReportTableColumnFrom;
          StatReportTableColumn."Report Code" := "Report Code";
          StatReportTableColumn.INSERT;
        UNTIL StatReportTableColumnFrom.NEXT = 0;

      TableIndividualRequisiteFrom.SETRANGE("Report Code",ReportFromCode);
      TableIndividualRequisiteFrom.SETRANGE("Table Code",TableFromCode);
      IF TableIndividualRequisiteFrom.FINDSET THEN
        REPEAT
          TableIndividualRequisite := TableIndividualRequisiteFrom;
          TableIndividualRequisite."Report Code" := "Report Code";
          TableIndividualRequisite.INSERT;
        UNTIL TableIndividualRequisiteFrom.NEXT = 0;
    END;

    PROCEDURE ImportExcelSheet@1210013(DataHeaderNo@1210019 : Code[20];VAR XlWrkShtImport@1210000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;ExcelSheetName@1210005 : Text[30];VAR ErrorMessage@1210010 : Text[250]) : Boolean;
    VAR
      StatReportExcelSheet@1210004 : Record 26562;
      PrevStatReportExcelSheet@1210023 : Record 26562;
    BEGIN
      StatReportExcelSheet."Report Code" := "Report Code";
      StatReportExcelSheet."Table Code" := Code;
      StatReportExcelSheet."Report Data No." := DataHeaderNo;
      StatReportExcelSheet."Sheet Name" := ExcelSheetName;
      StatReportExcelSheet."Parent Sheet Name" := "Excel Sheet Name";
      IF "Excel Sheet Name" = ExcelSheetName THEN
        StatReportExcelSheet."New Page" := TRUE;
      StatReportExcelSheet.INSERT(TRUE);

      StatutoryReport.GET("Report Code");

      IF StatutoryReport.IsXML THEN BEGIN
        IF NOT ImportExcelSheetXML(DataHeaderNo,XlWrkShtImport,ExcelSheetName,ErrorMessage,StatReportExcelSheet) THEN
          EXIT(FALSE);
      END ELSE BEGIN
        IF NOT ImportExcelSheetTXT(DataHeaderNo,XlWrkShtImport,ExcelSheetName,ErrorMessage,StatReportExcelSheet) THEN
          EXIT(FALSE);
      END;

      IF "Multipage Table" AND NOT "Scalable Table" THEN BEGIN
        StatReportExcelSheet."New Page" := TRUE;
        StatReportExcelSheet.MODIFY;
      END;

      IF "Multipage Table" AND "Scalable Table" THEN BEGIN
        PrevStatReportExcelSheet.SETCURRENTKEY("Report Code","Table Code","Report Data No.","Parent Sheet Name","Sequence No.");
        PrevStatReportExcelSheet.SETRANGE("Report Code","Report Code");
        PrevStatReportExcelSheet.SETRANGE("Report Data No.",DataHeaderNo);
        PrevStatReportExcelSheet.SETRANGE("Table Code",Code);
        PrevStatReportExcelSheet.SETRANGE("Parent Sheet Name",StatReportExcelSheet."Parent Sheet Name");
        PrevStatReportExcelSheet.SETFILTER("Sequence No.",'<%1',StatReportExcelSheet."Sequence No.");
        IF PrevStatReportExcelSheet.FINDLAST THEN BEGIN
          IF StatReportExcelSheet."Page Indic. Requisite Value" <>
             PrevStatReportExcelSheet."Page Indic. Requisite Value"
          THEN BEGIN
            StatReportExcelSheet."New Page" := TRUE;
            StatReportExcelSheet.MODIFY;
          END;
        END ELSE BEGIN
          StatReportExcelSheet."New Page" := TRUE;
          StatReportExcelSheet.MODIFY;
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ImportExcelSheetTXT@1210007(DataHeaderNo@1210019 : Code[20];VAR XlWrkShtImport@1210004 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;ExcelSheetName@1210005 : Text[30];VAR ErrorMessage@1210010 : Text[250];VAR StatReportExcelSheet@1210025 : Record 26562) : Boolean;
    VAR
      StatutoryReportDataValue@1210003 : Record 26564;
      StatReportRequisite@1210000 : Record 26559;
      CellValueAsText@1210001 : Text[250];
    BEGIN
      IF "Scalable Table" THEN
        IF NOT ImportScalableTableDataTXT(DataHeaderNo,XlWrkShtImport,ExcelSheetName,ErrorMessage) THEN
          EXIT(FALSE);

      StatReportRequisite.SETRANGE("Report Code","Report Code");
      StatReportRequisite.SETRANGE("Table Code",Code);
      StatReportRequisite.SETRANGE("Source Type",StatReportRequisite."Source Type"::"Table Data",
        StatReportRequisite."Source Type"::"Inserted Requisite");
      StatReportRequisite.SETRANGE("Scalable Table Row Template",FALSE);
      IF StatReportRequisite.FINDSET THEN
        REPEAT
          IF (StatReportRequisite."Excel Cell Name" <> '') OR
             (StatReportRequisite."Excel Mapping Type" = StatReportRequisite."Excel Mapping Type"::Option)
          THEN BEGIN
            CellValueAsText := '';
            IF NOT StatReportRequisite.ImportFromExcel(XlWrkShtImport,CellValueAsText,
                 ErrorMessage,StatReportRequisite."Excel Cell Name")
            THEN
              EXIT(FALSE);

            IF CellValueAsText <> '' THEN BEGIN
              StatutoryReportDataValue.INIT;
              StatutoryReportDataValue."Report Data No." := DataHeaderNo;
              StatutoryReportDataValue."Report Code" := "Report Code";
              StatutoryReportDataValue."Table Code" := StatReportRequisite."Table Code";
              StatutoryReportDataValue."Excel Sheet Name" := ExcelSheetName;
              StatutoryReportDataValue."Row No." := StatReportRequisite."Row Link No.";
              StatutoryReportDataValue."Column No." := StatReportRequisite."Column Link No.";
              IF NOT StatReportRequisite.FormatValue(1,CellValueAsText,StatutoryReportDataValue.Value,ErrorMessage) THEN
                EXIT(FALSE);
              StatutoryReportDataValue.INSERT;
            END;
          END;
        UNTIL StatReportRequisite.NEXT = 0;

      IF "Page Indic. Requisite Line No." <> 0 THEN
        IF StatutoryReportDataValue.GET(DataHeaderNo,
             "Report Code",Code,ExcelSheetName,"Page Indic. Requisite Line No.",0)
        THEN
          IF StatutoryReportDataValue.Value <> '' THEN BEGIN
            StatReportExcelSheet."Page Indic. Requisite Value" := StatutoryReportDataValue.Value;
            StatReportExcelSheet.MODIFY;
          END;

      EXIT(TRUE);
    END;

    PROCEDURE ImportExcelSheetXML@1210002(DataHeaderNo@1210019 : Code[20];VAR XlWrkShtImport@1210000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;ExcelSheetName@1210005 : Text[30];VAR ErrorMessage@1210010 : Text[250];VAR StatReportExcelSheet@1210004 : Record 26562) : Boolean;
    VAR
      ParentStatReportExcelSheet@1210026 : Record 26562;
      StatutoryReportDataValue@1210018 : Record 26564;
      XMLElementLine@1210015 : Record 26570;
      PageIndicationXMLElement@1210027 : Record 26571;
      CellValueAsText@1210016 : Text[250];
      RequisiteValue@1210025 : Text[250];
    BEGIN
      IF "Scalable Table" THEN
        IF NOT ImportScalableTableDataXML(DataHeaderNo,XlWrkShtImport,ExcelSheetName,ErrorMessage) THEN
          EXIT(FALSE);

      XMLElementLine.SETRANGE("Report Code","Report Code");
      XMLElementLine.SETRANGE("Table Code",Code);
      IF "Scalable Table" THEN
        XMLElementLine.SETRANGE("Source Type",XMLElementLine."Source Type"::"Individual Element",
          XMLElementLine."Source Type"::"Inserted Element")
      ELSE
        XMLElementLine.SETRANGE("Source Type",XMLElementLine."Source Type"::"Table Data",
          XMLElementLine."Source Type"::"Inserted Element");
      IF XMLElementLine.FINDSET THEN
        REPEAT
          IF XMLElementLine."Excel Cell Name" <> '' THEN BEGIN
            CellValueAsText := '';
            IF NOT XMLElementLine.ImportFromExcel(XlWrkShtImport,CellValueAsText,
                 ErrorMessage,XMLElementLine."Excel Cell Name")
            THEN
              EXIT(FALSE);

            StatutoryReportDataValue.INIT;
            StatutoryReportDataValue."Report Data No." := DataHeaderNo;
            StatutoryReportDataValue."Report Code" := "Report Code";
            StatutoryReportDataValue."Table Code" := XMLElementLine."Table Code";
            StatutoryReportDataValue."Excel Sheet Name" := ExcelSheetName;
            StatutoryReportDataValue."Row No." := XMLElementLine."Row Link No.";
            StatutoryReportDataValue."Column No." := XMLElementLine."Column Link No.";
            IF NOT XMLElementLine.FormatValue(2,CellValueAsText,StatutoryReportDataValue.Value,ErrorMessage) THEN
              EXIT(FALSE);
            StatutoryReportDataValue.INSERT;
          END;
        UNTIL XMLElementLine.NEXT = 0;

      UpdatePageIndicReqValue(DataHeaderNo,ExcelSheetName,StatReportExcelSheet);

      IF "Parent Table Code" <> '' THEN BEGIN
        // take page indication Requisite value from the last sheet of the parent table
        ParentStatReportExcelSheet.SETCURRENTKEY("Report Code","Report Data No.","Table Sequence No.");
        ParentStatReportExcelSheet.SETRANGE("Report Code","Report Code");
        ParentStatReportExcelSheet.SETRANGE("Report Data No.",DataHeaderNo);
        ParentStatReportExcelSheet.SETRANGE("Table Code","Parent Table Code");
        IF ParentStatReportExcelSheet.FINDLAST THEN
          IF StatReportExcelSheet."Page Indic. Requisite Value" = '' THEN BEGIN
            StatReportExcelSheet."Page Indic. Requisite Value" := ParentStatReportExcelSheet."Page Indic. Requisite Value";
            StatReportExcelSheet.MODIFY;
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ImportScalableTableDataTXT@1210012(ResultCode@1210019 : Code[20];VAR XlWrkShtImport@1210000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;ExcelSheetName@1210001 : Text[30];VAR ErrorMessage@1210003 : Text[250]) : Boolean;
    VAR
      StatReportTableColumn@1210014 : Record 26554;
      ScalableTableRow@1210017 : Record 26555;
      StatutoryReportDataValue@1210018 : Record 26564;
      StatReportRequisite@1210015 : Record 26559;
      CellValueAsText@1210016 : Text[250];
      CellName@1210005 : Code[10];
      DistensTabMaxRowNumber@1210020 : Integer;
      CurrRowNo@1210021 : Integer;
      LineNo@1210022 : Integer;
    BEGIN
      DistensTabMaxRowNumber := "Scalable Table First Row No." +
        "Scalable Table Max Rows Qty" * "Scalable Table Row Step";

      CurrRowNo := "Scalable Table First Row No.";
      WHILE CurrRowNo < DistensTabMaxRowNumber DO BEGIN
        StatReportTableColumn.SETRANGE("Report Code","Report Code");
        StatReportTableColumn.SETRANGE("Table Code",Code);
        StatReportTableColumn.SETFILTER("Excel Column Name",'<>''''');
        IF StatReportTableColumn.FINDSET THEN
          REPEAT
            StatReportRequisite.SETRANGE("Report Code","Report Code");
            StatReportRequisite.SETRANGE("Table Code",Code);
            StatReportRequisite.SETRANGE("Column Link No.",StatReportTableColumn."Line No.");
            StatReportRequisite.SETRANGE("Scalable Table Row Template",TRUE);
            IF StatReportRequisite.FINDFIRST THEN BEGIN
              CellValueAsText := '';
              IF "Vertical Table" THEN
                CellName :=
                  ExcelMgt.CellName2ColumnName(StatReportRequisite."Excel Cell Name") +
                  FORMAT(CurrRowNo + StatReportTableColumn."Vert. Table Row Shift")
              ELSE
                CellName := StatReportTableColumn."Excel Column Name" + FORMAT(CurrRowNo);

              IF NOT StatReportRequisite.ImportFromExcel(XlWrkShtImport,CellValueAsText,ErrorMessage,CellName) THEN
                EXIT(FALSE);

              IF CellValueAsText <> '' THEN BEGIN
                ScalableTableRow.SETRANGE("Report Data No.",ResultCode);
                ScalableTableRow.SETRANGE("Report Code","Report Code");
                ScalableTableRow.SETRANGE("Table Code",Code);
                ScalableTableRow.SETRANGE("Excel Sheet Name",ExcelSheetName);
                ScalableTableRow.SETRANGE("Excel Row No.",CurrRowNo);
                IF NOT ScalableTableRow.FINDFIRST THEN BEGIN
                  ScalableTableRow.SETRANGE("Report Data No.",ResultCode);
                  ScalableTableRow.SETRANGE("Report Code","Report Code");
                  ScalableTableRow.SETRANGE("Table Code",Code);
                  ScalableTableRow.SETRANGE("Excel Sheet Name",ExcelSheetName);
                  IF ScalableTableRow.FINDLAST THEN;
                  LineNo := ScalableTableRow."Line No." + 10000;

                  ScalableTableRow.INIT;
                  ScalableTableRow."Report Data No." := ResultCode;
                  ScalableTableRow."Report Code" := "Report Code";
                  ScalableTableRow."Table Code" := Code;
                  ScalableTableRow."Excel Sheet Name" := ExcelSheetName;
                  ScalableTableRow."Line No." := LineNo;
                  ScalableTableRow."Excel Row No." := CurrRowNo;
                  ScalableTableRow.INSERT;
                END;

                StatutoryReportDataValue.INIT;
                StatutoryReportDataValue."Report Data No." := ResultCode;
                StatutoryReportDataValue."Report Code" := "Report Code";
                StatutoryReportDataValue."Table Code" := Code;
                StatutoryReportDataValue."Excel Sheet Name" := ExcelSheetName;
                StatutoryReportDataValue."Row No." := ScalableTableRow."Line No.";
                StatutoryReportDataValue."Column No." := StatReportTableColumn."Line No.";
                IF NOT StatReportRequisite.FormatValue(1,CellValueAsText,StatutoryReportDataValue.Value,ErrorMessage) THEN
                  EXIT(FALSE);
                StatutoryReportDataValue.INSERT;
              END;
            END;
          UNTIL StatReportTableColumn.NEXT = 0;

        CurrRowNo := CurrRowNo + "Scalable Table Row Step";
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ImportScalableTableDataXML@1210000(ResultCode@1210019 : Code[20];VAR XlWrkShtImport@1210000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT;ExcelSheetName@1210001 : Text[30];VAR ErrorMessage@1210003 : Text[250]) : Boolean;
    VAR
      StatReportTableColumn@1210014 : Record 26554;
      ScalableTableRow@1210017 : Record 26555;
      StatutoryReportDataValue@1210018 : Record 26564;
      XMLElementLine@1210015 : Record 26570;
      CellValueAsText@1210016 : Text[250];
      CellName@1210005 : Code[10];
      DistensTabMaxRowNumber@1210020 : Integer;
      CurrRowNo@1210021 : Integer;
      LineNo@1210022 : Integer;
    BEGIN
      DistensTabMaxRowNumber := "Scalable Table First Row No." +
        "Scalable Table Max Rows Qty" * "Scalable Table Row Step";

      CurrRowNo := "Scalable Table First Row No.";
      WHILE CurrRowNo < DistensTabMaxRowNumber DO BEGIN
        StatReportTableColumn.SETRANGE("Report Code","Report Code");
        StatReportTableColumn.SETRANGE("Table Code",Code);
        IF StatReportTableColumn.FINDSET THEN
          REPEAT
            XMLElementLine.SETRANGE("Report Code","Report Code");
            XMLElementLine.SETRANGE("Table Code",Code);
            XMLElementLine.SETRANGE("Column Link No.",StatReportTableColumn."Line No.");
            IF XMLElementLine.FINDFIRST THEN BEGIN
              CellValueAsText := '';
              IF "Vertical Table" THEN
                CellName := ExcelMgt.CellName2ColumnName(XMLElementLine."Excel Cell Name") +
                  FORMAT(CurrRowNo + StatReportTableColumn."Vert. Table Row Shift")
              ELSE
                CellName := ExcelMgt.CellName2ColumnName(XMLElementLine."Excel Cell Name") +
                  FORMAT(CurrRowNo + ExcelMgt.CellName2RowNo(XMLElementLine."Excel Cell Name") - "Scalable Table First Row No.");

              IF NOT XMLElementLine.ImportFromExcel(XlWrkShtImport,CellValueAsText,ErrorMessage,CellName) THEN
                EXIT(FALSE);

              ScalableTableRow.SETRANGE("Report Data No.",ResultCode);
              ScalableTableRow.SETRANGE("Report Code","Report Code");
              ScalableTableRow.SETRANGE("Table Code",Code);
              ScalableTableRow.SETRANGE("Excel Sheet Name",ExcelSheetName);
              ScalableTableRow.SETRANGE("Excel Row No.",CurrRowNo);
              IF NOT ScalableTableRow.FINDFIRST THEN BEGIN
                ScalableTableRow.SETRANGE("Report Data No.",ResultCode);
                ScalableTableRow.SETRANGE("Report Code","Report Code");
                ScalableTableRow.SETRANGE("Table Code",Code);
                ScalableTableRow.SETRANGE("Excel Sheet Name",ExcelSheetName);
                IF ScalableTableRow.FINDLAST THEN;
                LineNo := ScalableTableRow."Line No." + 10000;

                ScalableTableRow.INIT;
                ScalableTableRow."Report Data No." := ResultCode;
                ScalableTableRow."Report Code" := "Report Code";
                ScalableTableRow."Table Code" := Code;
                ScalableTableRow."Excel Sheet Name" := ExcelSheetName;
                ScalableTableRow."Line No." := LineNo;
                ScalableTableRow."Excel Row No." := CurrRowNo;
                ScalableTableRow.INSERT;
              END;

              StatutoryReportDataValue.INIT;
              StatutoryReportDataValue."Report Data No." := ResultCode;
              StatutoryReportDataValue."Report Code" := "Report Code";
              StatutoryReportDataValue."Table Code" := Code;
              StatutoryReportDataValue."Excel Sheet Name" := ExcelSheetName;
              StatutoryReportDataValue."Row No." := ScalableTableRow."Line No.";
              StatutoryReportDataValue."Column No." := StatReportTableColumn."Line No.";
              IF NOT XMLElementLine.FormatValue(2,CellValueAsText,StatutoryReportDataValue.Value,ErrorMessage) THEN
                EXIT(FALSE);
              StatutoryReportDataValue.INSERT;
            END;
          UNTIL StatReportTableColumn.NEXT = 0;

        CurrRowNo := CurrRowNo + "Scalable Table Row Step";
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetSectionNo@1210015() SectionNo : Code[10];
    VAR
      StatReportTableRow@1210000 : Record 26553;
      StatReportRequisitesGroup@1210001 : Record 26557;
    BEGIN
      StatReportTableRow.SETRANGE("Report Code","Report Code");
      StatReportTableRow.SETRANGE("Table Code",Code);
      IF StatReportTableRow.FINDFIRST THEN
        IF StatReportTableRow."Requisites Group Name" <> '' THEN BEGIN
          StatReportRequisitesGroup.GET("Report Code",StatReportTableRow."Requisites Group Name");
          SectionNo := StatReportRequisitesGroup."Section No.";
        END;
    END;

    PROCEDURE CheckTableIdentText@1210017(VAR XlWrkShtImport@1210001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.WorksheetClass" RUNONCLIENT) : Boolean;
    BEGIN
      IF "Table Indic. Excel Cell Name" <> '' THEN
        EXIT(FORMAT(XlWrkShtImport.Range("Table Indic. Excel Cell Name").Value) = "Table Indication Text");

      EXIT(TRUE);
    END;

    PROCEDURE GetXMLElementValue@1210003(VAR XMLElementLine@1210002 : Record 26570;DataHeaderNo@1210000 : Code[20];ExcelSheetName@1210001 : Text[30]) : Text[250];
    VAR
      StatRepBuffer@1210003 : Record 26568;
    BEGIN
      StatRepBuffer."Report Data No." := DataHeaderNo;
      StatRepBuffer."Excel Sheet Name" := ExcelSheetName;
      EXIT(XMLElementLine.GetElementValue(StatRepBuffer));
    END;

    PROCEDURE DeletePageIndicationElements@1210001();
    VAR
      PageIndicationXMLElement@1210000 : Record 26571;
    BEGIN
      IF (NOT "Vertical Table") AND (NOT "Multipage Table") THEN BEGIN
        PageIndicationXMLElement.SETRANGE("Report Code","Report Code");
        PageIndicationXMLElement.SETRANGE("Table Code",Code);
        IF NOT PageIndicationXMLElement.ISEMPTY THEN BEGIN
          IF NOT CONFIRM(Text018) THEN
            ERROR('');
          PageIndicationXMLElement.DELETEALL;
        END;
      END;
    END;

    PROCEDURE UpdateIntSourceLinks@1210019();
    VAR
      AccScheduleName@1210006 : Record 84;
      AccScheduleLine@1210000 : Record 85;
      ColumnLayout@1210001 : Record 334;
      TaxRegisterTemplate@1210002 : Record 17202;
      TaxRegisterAccumulation@1210008 : Record 17208;
      TaxCalcLine@1210003 : Record 17310;
      PayrollAnalysisReportName@1210009 : Record 14960;
      PayrollAnalysisLine@1210010 : Record 14962;
      PayrollAnalysisColumn@1210011 : Record 14964;
      StatReportTableRow@1210004 : Record 26553;
      StatReportTableColumn@1210005 : Record 26554;
      StatReportTableMapping@1210007 : Record 26587;
    BEGIN
      CheckIntSourceMappingExistence;

      StatReportTableColumn.SETRANGE("Report Code","Report Code");
      StatReportTableColumn.SETRANGE("Table Code",Code);

      CASE "Int. Source Type" OF
        "Int. Source Type"::"Acc. Schedule":
          BEGIN
            AccScheduleName.GET("Int. Source No.");
            AccScheduleName.TESTFIELD("Default Column Layout");
            AccScheduleLine.SETRANGE("Schedule Name","Int. Source No.");
            StatReportTableRow.SETRANGE("Report Code","Report Code");
            StatReportTableRow.SETRANGE("Table Code",Code);

            ColumnLayout.SETRANGE("Column Layout Name",AccScheduleName."Default Column Layout");

            IF AccScheduleLine.FINDSET AND StatReportTableRow.FINDSET THEN BEGIN
              REPEAT
                IF ColumnLayout.FINDSET AND StatReportTableColumn.FINDSET THEN BEGIN
                  REPEAT
                    StatReportTableMapping.INIT;
                    StatReportTableMapping."Report Code" := "Report Code";
                    StatReportTableMapping."Table Code" := Code;
                    StatReportTableMapping."Table Row No." := StatReportTableRow."Line No.";
                    StatReportTableMapping."Table Column No." := StatReportTableColumn."Line No.";
                    StatReportTableMapping."Table Row Description" := StatReportTableRow.Description;
                    StatReportTableMapping."Table Column Header" := StatReportTableColumn."Column Header";
                    StatReportTableMapping."Int. Source Type" := "Int. Source Type";
                    StatReportTableMapping."Int. Source Section Code" := "Int. Source Section Code";
                    StatReportTableMapping."Int. Source No." := "Int. Source No.";
                    StatReportTableMapping."Internal Source Row No." := AccScheduleLine."Line No.";
                    StatReportTableMapping."Internal Source Column No." := ColumnLayout."Line No.";
                    StatReportTableMapping."Int. Source Row Description" := AccScheduleLine.Description;
                    StatReportTableMapping."Int. Source Column Header" := ColumnLayout."Column Header";
                    StatReportTableMapping.INSERT;
                  UNTIL (ColumnLayout.NEXT = 0) OR (StatReportTableColumn.NEXT = 0);
                END;
              UNTIL (AccScheduleLine.NEXT = 0) OR (StatReportTableRow.NEXT = 0);
            END;
          END;
        "Int. Source Type"::"Tax Register":
          BEGIN
            TaxRegisterTemplate.SETRANGE("Section Code","Int. Source Section Code");
            TaxRegisterTemplate.SETRANGE(Code,"Int. Source No.");
            StatReportTableRow.SETRANGE("Report Code","Report Code");
            StatReportTableRow.SETRANGE("Table Code",Code);

            IF TaxRegisterTemplate.FINDSET AND
               StatReportTableColumn.FINDFIRST AND
               StatReportTableRow.FINDSET
            THEN BEGIN
              REPEAT
                StatReportTableMapping.INIT;
                StatReportTableMapping."Report Code" := "Report Code";
                StatReportTableMapping."Table Code" := Code;
                StatReportTableMapping."Table Row No." := StatReportTableRow."Line No.";
                StatReportTableMapping."Table Column No." := StatReportTableColumn."Line No.";
                StatReportTableMapping."Table Row Description" := StatReportTableRow.Description;
                StatReportTableMapping."Table Column Header" := StatReportTableColumn."Column Header";
                StatReportTableMapping."Int. Source Type" := "Int. Source Type";
                StatReportTableMapping."Int. Source Section Code" := "Int. Source Section Code";
                StatReportTableMapping."Int. Source No." := "Int. Source No.";
                StatReportTableMapping."Internal Source Row No." := TaxRegisterTemplate."Line No.";
                StatReportTableMapping."Internal Source Column No." := 10000;
                StatReportTableMapping."Int. Source Row Description" := TaxRegisterTemplate.Description;
                StatReportTableMapping."Int. Source Column Header" := TaxRegisterAccumulation.FIELDCAPTION(Amount);
                StatReportTableMapping.INSERT;
              UNTIL (TaxRegisterTemplate.NEXT = 0) OR (StatReportTableRow.NEXT = 0);
            END;
          END;
        "Int. Source Type"::"Tax Difference":
          BEGIN
            TaxCalcLine.SETRANGE("Section Code","Int. Source Section Code");
            TaxCalcLine.SETRANGE(Code,"Int. Source No.");
            StatReportTableRow.SETRANGE("Report Code","Report Code");
            StatReportTableRow.SETRANGE("Table Code",Code);

            IF TaxCalcLine.FINDSET AND
               StatReportTableColumn.FINDFIRST AND
               StatReportTableRow.FINDSET
            THEN BEGIN
              REPEAT
                StatReportTableMapping.INIT;
                StatReportTableMapping."Report Code" := "Report Code";
                StatReportTableMapping."Table Code" := Code;
                StatReportTableMapping."Table Row No." := StatReportTableRow."Line No.";
                StatReportTableMapping."Table Column No." := StatReportTableColumn."Line No.";
                StatReportTableMapping."Table Row Description" := StatReportTableRow.Description;
                StatReportTableMapping."Table Column Header" := StatReportTableColumn."Column Header";
                StatReportTableMapping."Int. Source Type" := "Int. Source Type";
                StatReportTableMapping."Int. Source Section Code" := "Int. Source Section Code";
                StatReportTableMapping."Int. Source No." := "Int. Source No.";
                StatReportTableMapping."Internal Source Row No." := TaxCalcLine."Line No.";
                StatReportTableMapping."Internal Source Column No." := 10000;
                StatReportTableMapping."Int. Source Row Description" := TaxCalcLine.Description;
                StatReportTableMapping."Int. Source Column Header" := TaxRegisterAccumulation.FIELDCAPTION(Amount);
                StatReportTableMapping.INSERT;
              UNTIL (TaxCalcLine.NEXT = 0) OR (StatReportTableRow.NEXT = 0);
            END;
          END;
        "Int. Source Type"::"Payroll Analysis Report":
          BEGIN
            PayrollAnalysisReportName.GET("Int. Source No.");
            PayrollAnalysisReportName.TESTFIELD("Analysis Line Template Name");
            PayrollAnalysisReportName.TESTFIELD("Analysis Column Template Name");
            PayrollAnalysisLine.SETRANGE("Analysis Line Template Name",PayrollAnalysisReportName."Analysis Line Template Name");
            PayrollAnalysisColumn.SETRANGE("Analysis Column Template",PayrollAnalysisReportName."Analysis Column Template Name");
            StatReportTableRow.SETRANGE("Report Code","Report Code");
            StatReportTableRow.SETRANGE("Table Code",Code);

            IF PayrollAnalysisLine.FINDSET AND StatReportTableRow.FINDSET THEN BEGIN
              REPEAT
                IF PayrollAnalysisColumn.FINDSET AND StatReportTableColumn.FINDSET THEN BEGIN
                  REPEAT
                    StatReportTableMapping.INIT;
                    StatReportTableMapping."Report Code" := "Report Code";
                    StatReportTableMapping."Table Code" := Code;
                    StatReportTableMapping."Table Row No." := StatReportTableRow."Line No.";
                    StatReportTableMapping."Table Column No." := StatReportTableColumn."Line No.";
                    StatReportTableMapping."Table Row Description" := StatReportTableRow.Description;
                    StatReportTableMapping."Table Column Header" := StatReportTableColumn."Column Header";
                    StatReportTableMapping."Int. Source Type" := "Int. Source Type";
                    StatReportTableMapping."Int. Source Section Code" := "Int. Source Section Code";
                    StatReportTableMapping."Int. Source No." := "Int. Source No.";
                    StatReportTableMapping."Internal Source Row No." := PayrollAnalysisLine."Line No.";
                    StatReportTableMapping."Internal Source Column No." := PayrollAnalysisColumn."Line No.";
                    StatReportTableMapping."Int. Source Row Description" := PayrollAnalysisLine.Description;
                    StatReportTableMapping."Int. Source Column Header" := PayrollAnalysisColumn."Column Header";
                    StatReportTableMapping.INSERT;
                  UNTIL (PayrollAnalysisColumn.NEXT = 0) OR (StatReportTableColumn.NEXT = 0);
                END;
              UNTIL (PayrollAnalysisLine.NEXT = 0) OR (StatReportTableRow.NEXT = 0);
            END;
          END;
      END;
    END;

    PROCEDURE CheckIntSourceMappingExistence@1210020();
    VAR
      StatReportTableMapping@1210000 : Record 26587;
    BEGIN
      StatReportTableMapping.SETRANGE("Report Code","Report Code");
      StatReportTableMapping.SETRANGE("Table Code",Code);
      StatReportTableMapping.SETFILTER("Table Column No.",'<>0');
      IF NOT StatReportTableMapping.ISEMPTY THEN
        IF CONFIRM(Text019) THEN
          StatReportTableMapping.DELETEALL
        ELSE
          ERROR('');
    END;

    PROCEDURE UpdatePageIndicReqValue@1170000000(DataHeaderNo@1170000004 : Code[20];ExcelSheetName@1170000005 : Text[30];VAR StatReportExcelSheet@1170000000 : Record 26562);
    VAR
      XMLElementLine@1170000003 : Record 26570;
      PageIndicationXMLElement@1170000002 : Record 26571;
      RequisiteValue@1170000001 : Text[250];
    BEGIN
      PageIndicationXMLElement.SETRANGE("Report Code","Report Code");
      PageIndicationXMLElement.SETRANGE("Table Code",Code);
      IF PageIndicationXMLElement.FINDSET THEN BEGIN
        REPEAT
          XMLElementLine.GET("Report Code",PageIndicationXMLElement."XML Element Line No.");
          RequisiteValue := GetXMLElementValue(XMLElementLine,DataHeaderNo,ExcelSheetName);
          IF RequisiteValue <> '' THEN
            StatReportExcelSheet."Page Indic. Requisite Value" := StatReportExcelSheet."Page Indic. Requisite Value" + RequisiteValue;
        UNTIL PageIndicationXMLElement.NEXT = 0;

        StatReportExcelSheet.MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

