OBJECT Table 272 Check Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00,NAVRU10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Check Ledger Entry;
               RUS=Книга платежных документов];
    LookupPageID=Page374;
    DrillDownPageID=Page374;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              RUS=Номер операции] }
    { 2   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=[ENU=Bank Account No.;
                                                              RUS=Код банк. счета] }
    { 3   ;   ;Bank Account Ledger Entry No.;Integer;
                                                   TableRelation="Bank Account Ledger Entry";
                                                   CaptionML=[ENU=Bank Account Ledger Entry No.;
                                                              RUS=Номер банковской операции] }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              RUS=Дата учета] }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=Тип документа];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,Платеж,Счет,Кредит-нота,Процент-нота,Напоминание,Возмещение"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              RUS=Номер документа] }
    { 7   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              RUS=Описание] }
    { 8   ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              RUS=Сумма];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromBank }
    { 9   ;   ;Check Date          ;Date          ;CaptionML=[ENU=Check Date;
                                                              RUS=Дата платежного документа] }
    { 10  ;   ;Check No.           ;Code20        ;CaptionML=[ENU=Check No.;
                                                              RUS=Номер платежного документа] }
    { 11  ;   ;Check Type          ;Option        ;CaptionML=[ENU=Check Type;
                                                              RUS=Тип платеж. документа];
                                                   OptionCaptionML=[ENU=Total Check,Partial Check;
                                                                    RUS=Полный платеж,Частичный платеж];
                                                   OptionString=Total Check,Partial Check }
    { 12  ;   ;Bank Payment Type   ;Option        ;CaptionML=[ENU=Bank Payment Type;
                                                              RUS=Вид платежа];
                                                   OptionCaptionML=[ENU=" ,Computer Check,Manual Check";
                                                                    RUS=" ,Компьютерный,Ручной"];
                                                   OptionString=[ ,Computer Check,Manual Check] }
    { 13  ;   ;Entry Status        ;Option        ;CaptionML=[ENU=Entry Status;
                                                              RUS=Статус операции];
                                                   OptionCaptionML=[ENU=,Printed,Voided,Posted,Financially Voided,Test Print;
                                                                    RUS=,Напечатано,Аннулировано,Учтено,Фин. отменено,Тест печати];
                                                   OptionString=,Printed,Voided,Posted,Financially Voided,Test Print }
    { 14  ;   ;Original Entry Status;Option       ;CaptionML=[ENU=Original Entry Status;
                                                              RUS=Статус исходной операции];
                                                   OptionCaptionML=[ENU=" ,Printed,Voided,Posted,Financially Voided";
                                                                    RUS=" ,Напечатана,Отменена,Учтена,Фин. отменена"];
                                                   OptionString=[ ,Printed,Voided,Posted,Financially Voided] }
    { 15  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              RUS=Тип баланс. счета];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                                    RUS=Счет ГК,Клиент,Поставщик,Банк. счет,ОС];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 16  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              RUS=Номер баланс. счета] }
    { 17  ;   ;Open                ;Boolean       ;CaptionML=[ENU=Open;
                                                              RUS=Открыто] }
    { 18  ;   ;Statement Status    ;Option        ;CaptionML=[ENU=Statement Status;
                                                              RUS=Статус выписки];
                                                   OptionCaptionML=[ENU=Open,Bank Acc. Entry Applied,Check Entry Applied,Closed;
                                                                    RUS=Открыта,Операция банк. счета применена,Операция платежа применена,Закрыта];
                                                   OptionString=Open,Bank Acc. Entry Applied,Check Entry Applied,Closed }
    { 19  ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation Line"."Statement No." WHERE (Bank Account No.=FIELD(Bank Account No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Statement No.;
                                                              RUS=Номер выписки] }
    { 20  ;   ;Statement Line No.  ;Integer       ;TableRelation="Bank Acc. Reconciliation Line"."Statement Line No." WHERE (Bank Account No.=FIELD(Bank Account No.),
                                                                                                                             Statement No.=FIELD(Statement No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Statement Line No.;
                                                              RUS=Номер строки выписки] }
    { 21  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              RUS=Код пользователя] }
    { 22  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              RUS=Номер внешнего документа] }
    { 23  ;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch. Entry No.;
                                                              RUS=Номер операции обмена данными];
                                                   Editable=No }
    { 24  ;   ;Data Exch. Voided Entry No.;Integer;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch. Voided Entry No.;
                                                              RUS=Номер аннулированной операции обмена данными];
                                                   Editable=No }
    { 25  ;   ;Positive Pay Exported;Boolean      ;CaptionML=[ENU=Positive Pay Exported;
                                                              RUS=Positive Pay экспортирован] }
    { 26  ;   ;Record ID to Print  ;RecordID      ;CaptionML=[ENU=Record ID to Print;
                                                              RUS=Код записи для печати] }
    { 12400;  ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              RUS=Положит.] }
    { 12401;  ;Beneficiary Bank Code;Code10       ;TableRelation=IF (Bal. Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Bal. Account No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Bal. Account No.));
                                                   CaptionML=[ENU=Beneficiary Bank Code;
                                                              RUS=Код банка получателя] }
    { 12402;  ;Payment Purpose     ;Text250       ;CaptionML=[ENU=Payment Purpose;
                                                              RUS=Цель платежа] }
    { 12403;  ;Cash Order Including;Text250       ;CaptionML=[ENU=Cash Order Including;
                                                              RUS=Кассовый ордер - включ.] }
    { 12404;  ;Cash Order Supplement;Text80       ;CaptionML=[ENU=Cash Order Supplement;
                                                              RUS=Кассовый ордер - приложение] }
    { 12405;  ;Payment Method      ;Option        ;CaptionML=[ENU=Payment Method;
                                                              RUS=Способ платежа];
                                                   OptionCaptionML=[ENU=" ,Mail,Telegraph,Through Moscow,Clearing";
                                                                    RUS=" ,Почта,Телеграф,Через Москву,Клиринг"];
                                                   OptionString=[ ,Mail,Telegraph,Through Moscow,Clearing] }
    { 12406;  ;Payment Before Date ;Date          ;CaptionML=[ENU=Payment Before Date;
                                                              RUS=Оплата до даты] }
    { 12407;  ;Payment Subsequence ;Text2         ;CaptionML=[ENU=Payment Subsequence;
                                                              RUS=Очередность платежа] }
    { 12408;  ;Payment Code        ;Text20        ;CaptionML=[ENU=Payment Code;
                                                              RUS=Код платежа] }
    { 12409;  ;Payment Assignment  ;Text15        ;CaptionML=[ENU=Payment Assignment;
                                                              RUS=Назначение платежа] }
    { 12410;  ;Payment Type        ;Text5         ;CaptionML=[ENU=Payment Type;
                                                              RUS=Тип платежа] }
    { 12411;  ;Payer BIC           ;Text20        ;CaptionML=[ENU=Payer BIC;
                                                              RUS=БИК плательщика] }
    { 12412;  ;Payer Corr. Account No.;Text20     ;CaptionML=[ENU=Payer Corr. Account No.;
                                                              RUS=Номер корр. счета плательщика] }
    { 12413;  ;Payer Bank Account No.;Text20      ;CaptionML=[ENU=Payer Bank Account No.;
                                                              RUS=Код банк. счета плательщика] }
    { 12414;  ;Payer Name          ;Text50        ;CaptionML=[ENU=Payer Name;
                                                              RUS=Название плательщика] }
    { 12415;  ;Payer Bank          ;Text50        ;CaptionML=[ENU=Payer Bank;
                                                              RUS=Банк плательщика] }
    { 12416;  ;Payer VAT Reg. No.  ;Text12        ;CaptionML=[ENU=Payer VAT Reg. No.;
                                                              RUS=ИНН плательщика] }
    { 12417;  ;Beneficiary BIC     ;Text20        ;CaptionML=[ENU=Beneficiary BIC;
                                                              RUS=БИК получателя] }
    { 12418;  ;Beneficiary Corr. Acc. No.;Text20  ;CaptionML=[ENU=Beneficiary Corr. Acc. No.;
                                                              RUS=Номер корр. счета получателя] }
    { 12419;  ;Beneficiary Bank Acc. No.;Text20   ;CaptionML=[ENU=Beneficiary Bank Acc. No.;
                                                              RUS=Номер расч. счета получателя] }
    { 12420;  ;Beneficiary Name    ;Text50        ;CaptionML=[ENU=Beneficiary Name;
                                                              RUS=Название получателя] }
    { 12421;  ;Beneficiary VAT Reg No.;Text12     ;CaptionML=[ENU=Beneficiary VAT Reg No.;
                                                              RUS=ИНН получателя] }
    { 12422;  ;Cashier Report Printed;Integer     ;CaptionML=[ENU=Cashier Report Printed;
                                                              RUS=Кассовый отчет напечатан];
                                                   Editable=Yes }
    { 12423;  ;Cashier Report No.  ;Code20        ;CaptionML=[ENU=Cashier Report No.;
                                                              RUS=Номер кассового отчета] }
    { 12424;  ;Debit Amount        ;Decimal       ;CaptionML=[ENU=Debit Amount;
                                                              RUS=Сумма по дебету];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromBank }
    { 12425;  ;Credit Amount       ;Decimal       ;CaptionML=[ENU=Credit Amount;
                                                              RUS=Сумма по кредиту];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromBank }
    { 12427;  ;Bank Account Type   ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Bank Account"."Account Type" WHERE (No.=FIELD(Bank Account No.)));
                                                   CaptionML=[ENU=Bank Account Type;
                                                              RUS=Тип банковского счета];
                                                   OptionCaptionML=[ENU=Bank Account,Cash Account;
                                                                    RUS=Банковский счет,Кассовый счет];
                                                   OptionString=Bank Account,Cash Account }
    { 12428;  ;Payer KPP           ;Code10        ;CaptionML=[ENU=Payer KPP;
                                                              RUS=КПП плательщика] }
    { 12429;  ;Beneficiary KPP     ;Code10        ;CaptionML=[ENU=Beneficiary KPP;
                                                              RUS=КПП получателя] }
    { 12430;  ;Posting Group       ;Code10        ;TableRelation=IF (Bal. Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account Posting Group"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              RUS=Учетная группа] }
    { 12480;  ;KBK                 ;Code20        ;TableRelation=KBK;
                                                   CaptionML=[ENU=KBK;
                                                              RUS=КБК] }
    { 12481;  ;OKATO               ;Code11        ;TableRelation=OKATO;
                                                   CaptionML=[ENU=OKATO;
                                                              RUS=ОКАТО] }
    { 12482;  ;Period Code         ;Option        ;CaptionML=[ENU=Period Code;
                                                              RUS=Код периода];
                                                   OptionCaptionML=[ENU=" ,0,D1-payment for the first decade of month,D2-payment for the second decade of month,D3-payment for the third decade of month,MH-monthly payments,QT-quarter payment,HY-half-year payments,YR-year payments";
                                                                    RUS=" ,0,Д1-платеж за первую декаду месяца,Д2-платеж за вторую декаду месяца,Д3-платеж за третью декаду месяца,МС-месячный платеж,КВ-квартальный платеж,ПЛ-полугодовой платеж,ГД-годовой платеж"];
                                                   OptionString=[ ,0,D1,D2,D3,MH,QT,HY,YR] }
    { 12483;  ;Payment Reason Code ;Code10        ;TableRelation="Payment Order Code".Code WHERE (Type=CONST(Payment Reason));
                                                   CaptionML=[ENU=Payment Reason Code;
                                                              RUS=Код основания платежа] }
    { 12484;  ;Reason Document No. ;Code10        ;CaptionML=[ENU=Reason Document No.;
                                                              RUS=Номер документа-основания] }
    { 12485;  ;Reason Document Date;Date          ;CaptionML=[ENU=Reason Document Date;
                                                              RUS=Дата документа-основания] }
    { 12486;  ;Tax Payment Type    ;Code10        ;TableRelation="Payment Order Code".Code WHERE (Type=CONST(Tax Payment Type));
                                                   CaptionML=[ENU=Tax Payment Type;
                                                              RUS=Тип налогового платежа] }
    { 12487;  ;Tax Period          ;Code10        ;CaptionML=[ENU=Tax Period;
                                                              RUS=Налоговый период] }
    { 12488;  ;Reason Document Type;Option        ;CaptionML=[ENU=Reason Document Type;
                                                              RUS=Тип документа-основания];
                                                   OptionCaptionML=[ENU=" ,TR-Number of requirement about taxes payment from TA,RS-Number of decision about installment,OT-Number of decision about deferral,VU-Number of act of materials in court,PR-Number of decision about suspension of penalty,AP-Number of control act,AR-number of executive document";
                                                                    RUS=" ,ТР - номер требования об уплате налогов,РС - номер решения о рассрочке,ОТ - номер решения об отсрочке,ВУ - номер дела или материала дела в суде,ПР - номер решения о приостановлении взыскания,АП - номер акта проверки,АР - номер исполнительного документа"];
                                                   OptionString=[ ,TR,RS,OT,VU,PR,AP,AR] }
    { 12489;  ;Taxpayer Status     ;Option        ;CaptionML=[ENU=Taxpayer Status;
                                                              RUS=Статус налогоплательщика];
                                                   OptionCaptionML=[ENU=" ,01-taxpayer (charges payer),02-tax agent,03-collector of taxes and charges,04-tax authority,05-service of officers of justice of Department of Justice of Russian Federation,06-participant of foreign-economic activity,07-tax authority,08-payer of other mandatory payments";
                                                                    RUS=" ,01-налогоплательщик (плательщик сборов),02-налоговый агент,03-сборщик налогов и сборов,04-налоговый орган,05-Федеральная служба судебных приставов,06-участник внешнеэкономической деятельности,07-таможенный орган,08-плательщик иных обязательных платежей"];
                                                   OptionString=[ ,01,02,03,04,05,06,07,08] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Bank Account No.,Check Date              }
    {    ;Bank Account No.,Entry Status,Check No.  }
    {    ;Bank Account Ledger Entry No.            }
    {    ;Bank Account No.,Open                    }
    {    ;Document No.,Posting Date                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NothingToExportErr@1000 : TextConst 'ENU=There is nothing to export.;RUS=Нечего экспортировать.';

    PROCEDURE GetCurrencyCodeFromBank@1() : Code[10];
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      IF "Bank Account No." = BankAcc."No." THEN
        EXIT(BankAcc."Currency Code");

      IF BankAcc.GET("Bank Account No.") THEN
        EXIT(BankAcc."Currency Code");

      EXIT('');
    END;

    PROCEDURE CopyFromBankAccLedgEntry@2(BankAccLedgEntry@1000 : Record 271);
    BEGIN
      "Bank Account No." := BankAccLedgEntry."Bank Account No.";
      "Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
      "Posting Date" := BankAccLedgEntry."Posting Date";
      "Document Type" := BankAccLedgEntry."Document Type";
      "Document No." := BankAccLedgEntry."Document No.";
      "External Document No." := BankAccLedgEntry."External Document No.";
      Description := BankAccLedgEntry.Description;
      "Bank Payment Type" := "Bank Payment Type";
      "Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
      "Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
      "Entry Status" := "Entry Status"::Posted;
      Open := TRUE;
      "User ID" := USERID;
      "Check Date" := BankAccLedgEntry."Posting Date";
      "Check No." := BankAccLedgEntry."Document No.";
    END;

    PROCEDURE ExportCheckFile@3();
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      IF NOT FINDSET THEN
        ERROR(NothingToExportErr);

      BankAcc.GET("Bank Account No.");
      IF BankAcc.GetPosPayExportCodeunitID > 0 THEN
        CODEUNIT.RUN(BankAcc.GetPosPayExportCodeunitID,Rec)
      ELSE
        CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Pos. Pay",Rec);
    END;

    PROCEDURE GetPayee@4() Payee : Text[50];
    VAR
      Vendor@1003 : Record 23;
      Customer@1002 : Record 18;
      GLAccount@1001 : Record 15;
      BankAccount@1000 : Record 270;
    BEGIN
      CASE "Bal. Account Type" OF
        "Bal. Account Type"::"G/L Account":
          IF "Bal. Account No." <> '' THEN BEGIN
            GLAccount.GET("Bal. Account No.");
            Payee := GLAccount.Name;
          END;
        "Bal. Account Type"::Customer:
          IF "Bal. Account No." <> '' THEN BEGIN
            Customer.GET("Bal. Account No.");
            Payee := Customer.Name;
          END;
        "Bal. Account Type"::Vendor:
          IF "Bal. Account No." <> '' THEN BEGIN
            Vendor.GET("Bal. Account No.");
            Payee := Vendor.Name;
          END;
        "Bal. Account Type"::"Bank Account":
          IF "Bal. Account No." <> '' THEN BEGIN
            BankAccount.GET("Bal. Account No.");
            Payee := BankAccount.Name;
          END;
        "Bal. Account Type"::"Fixed Asset":
          Payee := "Bal. Account No.";
      END;
    END;

    PROCEDURE SetFilterBankAccNoOpen@6(BankAccNo@1000 : Code[20]);
    BEGIN
      RESET;
      SETCURRENTKEY("Bank Account No.",Open);
      SETRANGE("Bank Account No.",BankAccNo);
      SETRANGE(Open,TRUE);
    END;

    BEGIN
    END.
  }
}

