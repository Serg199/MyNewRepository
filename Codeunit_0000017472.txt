OBJECT Codeunit 17472 RSV Common XML Export
{
  OBJECT-PROPERTIES
  {
    Date=15.09.15;
    Time=12:00:00;
    Version List=NAVRU9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1210002 : Record 79;
      RSVCalculationMgt@1210005 : Codeunit 17470;
      XMLCurrNode@1210001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BlockType@1210018 : 'All,Period,Additional';
      TotalSheetCount@1210003 : Integer;
      SkipExport@1210004 : Boolean;
      ReportingYearTxt@1210147 : TextConst '@@@={Locked};ENU=ReportingYear;RUS=ReportingYear';
      NumberInPackTxt@1210144 : TextConst '@@@={Locked};ENU=NumberInPack;RUS=NumberInPack';
      RegistrationNumberPFRTxt@1210138 : TextConst '@@@={Locked};ENU=RegistrationNumberPFR;RUS=RegistrationNumberPFR';
      FillDateTxt@1210134 : TextConst '@@@={Locked};ENU=FillDate;RUS=FillDate';
      FilePFRTxt@1210129 : TextConst '@@@={Locked};ENU=FilePFR;RUS=FilePFR';
      FileNameTxt@1210128 : TextConst '@@@={Locked};ENU=FileName;RUS=FileName';
      IncomingDocumentPackTxt@1210124 : TextConst '@@@={Locked};ENU=IncomingDocumentPack;RUS=IncomingDocumentPack';
      SurroundingTxt@1210122 : TextConst '@@@={Locked};ENU=Surrounding;RUS=Surrounding';
      FileHeaderTxt@1210118 : TextConst '@@@={Locked};ENU=FileHeader;RUS=FileHeader';
      FileTypeTxt@1210117 : TextConst '@@@={Locked};ENU=FileType;RUS=FileType';
      FormatVersionTxt@1210116 : TextConst '@@@={Locked};ENU=FormatVersion;RUS=FormatVersion';
      DataPreparationProgramTxt@1210114 : TextConst '@@@={Locked};ENU=DataPreparationProgram;RUS=DataPreparationProgram';
      ProgramNameTxt@1210113 : TextConst '@@@={Locked};ENU=ProgramName;RUS=ProgramName';
      VersionTxt@1210112 : TextConst '@@@={Locked};ENU=Version;RUS=Version';
      DataSourceTxt@1210111 : TextConst '@@@={Locked};ENU=DataSourceTxt;RUS=DataSourceTxt';
      INSURERTxt@1210110 : TextConst '@@@={Locked};ENU=INSURER;RUS=INSURER';
      INNSymbolicTxt@1210167 : TextConst '@@@={Locked};ENU=INNSymbolic;RUS=INNSymbolic';
      KPPTxt@1210102 : TextConst '@@@={Locked};ENU=KPP;RUS=KPP';
      LastNameTxt@1210100 : TextConst '@@@={Locked};ENU=LastName;RUS=LastName';
      FirstNameTxt@1210099 : TextConst '@@@={Locked};ENU=FirstName;RUS=FirstName';
      MiddleNameTxt@1210098 : TextConst '@@@={Locked};ENU=MiddleName;RUS=MiddleName';
      PhoneTxt@1210056 : TextConst '@@@={Locked};ENU=Phone;RUS=Phone';
      CompanyNameTxt@1210052 : TextConst '@@@={Locked};ENU=CompanyName;RUS=CompanyName';
      EXTERNALTxt@1210047 : TextConst '@@@={Locked};ENU=EXTERNAL;RUS=EXTERNAL';
      SingleRequestTxt@1210162 : TextConst '@@@={Locked};ENU=Single Request;RUS=Single Request';
      CorrectionNumberTxt@1210163 : TextConst '@@@={Locked};ENU=CorrectionNumber;RUS=CorrectionNumber';
      CorrectionTypeTxt@1210164 : TextConst '@@@={Locked};ENU=CorrectionType;RUS=CorrectionType';
      ReportingPeriodCodeTxt@1210165 : TextConst '@@@={Locked};ENU=ReportingPeriodCode;RUS=ReportingPeriodCode';
      OKVEDCodeTxt@1210168 : TextConst '@@@={Locked};ENU=OKVEDCode;RUS=OKVEDCode';
      QuantityIPTxt@1210169 : TextConst '@@@={Locked};ENU=QuantityIP;RUS=QuantityIP';
      AverageHeadcountTxt@1210170 : TextConst '@@@={Locked};ENU=AverageHeadcount;RUS=AverageHeadcount';
      NumberOfPagesTxt@1210171 : TextConst '@@@={Locked};ENU=NumberOfPages;RUS=NumberOfPages';
      RSVTitleTxt@1210172 : TextConst '@@@={Locked};ENU=RSVTitle;RUS=RSVTitle';
      ConfirmingPersonTxt@1210166 : TextConst '@@@={Locked};ENU=ConfirmingPerson;RUS=ConfirmingPerson';
      Chapter1TitleTxt@1210173 : TextConst '@@@={Locked};ENU=Chapter1Title;RUS=Chapter1Title';
      LineCodeTxt@1210174 : TextConst '@@@={Locked};ENU=LineCode;RUS=LineCode';
      OutstandingPaymentDueAtStartDateTxt@1210175 : TextConst '@@@={Locked};ENU=OutstandingPaymentDueAtStartDate;RUS=OutstandingPaymentDueAtStartDate';
      OutstandingPaymentDueAtEndDateTxt@1210176 : TextConst '@@@={Locked};ENU=OutstandingPaymentDueAtEndDate;RUS=OutstandingPaymentDueAtEndDate';
      AccruedFromCalculationPeriodStartDateTxt@1210177 : TextConst '@@@={Locked};ENU=AccruedFromCalculationPeriodStartDate;RUS=AccruedFromCalculationPeriodStartDate';
      AddedFromCalculationPeriodStartTotalTxt@1210178 : TextConst '@@@={Locked};ENU=AddedFromCalculationPeriodStartTotal;RUS=AddedFromCalculationPeriodStartTotal';
      AddedFromCalculationPeriodStartExtraTxt@1210179 : TextConst '@@@={Locked};ENU=AddedFromCalculationPeriodExtraTotal;RUS=AddedFromCalculationPeriodExtraTotal';
      TotalToPayTxt@1210180 : TextConst '@@@={Locked};ENU=TotalToPay;RUS=TotalToPay';
      PaidFromCalculationPeriodStartDateTxt@1210181 : TextConst '@@@={Locked};ENU=PaidFromCalculationPeriodStartDate;RUS=PaidFromCalculationPeriodStartDate';
      InsuranceContributionOPSTxt@1210182 : TextConst '@@@={Locked};ENU=InsuranceContributionOPS;RUS=InsuranceContributionOPS';
      InsuranceContributionsOMSTxt@1210186 : TextConst '@@@={Locked};ENU=InsuranceContributionsOMS;RUS=InsuranceContributionsOMS';
      OPSinsuredPartTxt@1210183 : TextConst '@@@={Locked};ENU=OPSinsuredPart;RUS=OPSinsuredPart';
      OPSaccumulatedPartTxt@1210184 : TextConst '@@@={Locked};ENU=OPSaccumulatedPart;RUS=OPSaccumulatedPart';
      ContributionsByExtraTariffTxt@1210185 : TextConst '@@@={Locked};ENU=ContributionsByExtraTariff;RUS=ContributionsByExtraTariff';
      LastThreeMonthsTxt@1210187 : TextConst '@@@={Locked};ENU=LastThreeMonths;RUS=LastThreeMonths';
      LastThreeMonthsTotalTxt@1210189 : TextConst '@@@={Locked};ENU=LastThreeMonthsTotal;RUS=LastThreeMonthsTotal';
      TotalFromCalculationPeriodStartDateTxt@1210188 : TextConst '@@@={Locked};ENU=TotalFromCalculationPeriodStartDate;RUS=TotalFromCalculationPeriodStartDate';
      Chapter2TitleTxt@1210190 : TextConst '@@@={Locked};ENU=Chapter2Title;RUS=Chapter2Title';
      Chapter21Txt@1210191 : TextConst '@@@={Locked};ENU=Chapter_2_1;RUS=Chapter_2_1';
      TariffCodeTxt@1210192 : TextConst '@@@={Locked};ENU=TariffCode;RUS=TariffCode';
      ForMandatoryPensionInsuranceTxt@1210193 : TextConst '@@@={Locked};ENU=ForMandatoryPensionInsurance;RUS=ForMandatoryPensionInsurance';
      PaymentAndRewardAmountOPSTxt@1210194 : TextConst '@@@={Locked};ENU=PaymentAndRewardAmountOPS;RUS=PaymentAndRewardAmountOPS';
      NotLiableForOPSTxt@1210195 : TextConst '@@@={Locked};ENU=NotLiableForOPS;RUS=NotLiableForOPS';
      ExpenseAmountForDeductionOPSTxt@1210196 : TextConst '@@@={Locked};ENU=ExpenseAmountForDeductionOPS;RUS=ExpenseAmountForDeductionOPS';
      AboveBaseLimitOPSTxt@1210197 : TextConst '@@@={Locked};ENU=AboveBaseLimitOPS;RUS=AboveBaseLimitOPS';
      BaseForInsuranceContributionAccrualsForOPSTxt@1210198 : TextConst '@@@={Locked};ENU=BaseForInsuranceContributionAccrualsForOPS;RUS=BaseForInsuranceContributionAccrualsForOPS';
      AccruedForOPSForAmountsLessThanTxt@1210199 : TextConst '@@@={Locked};ENU=AccruedForOPSForAmountsLessThan;RUS=AccruedForOPSForAmountsLessThan';
      AccruedForOPSForAmountsExceededTxt@1210200 : TextConst '@@@={Locked};ENU=AccruedForOPSForAmountsExceeded;RUS=AccruedForOPSForAmountsExceeded';
      QuantotyOfFPtotalTxt@1210201 : TextConst '@@@={Locked};ENU=QuantotyOfFPtotal;RUS=QuantotyOfFPtotal';
      QuantityFPWithBaseExceedLimitTxt@1210202 : TextConst '@@@={Locked};ENU=QuantityFPWithBaseExceedLimit;RUS=QuantityFPWithBaseExceedLimit';
      AmountCalcTxt@1210203 : TextConst '@@@={Locked};ENU=AmountCalc;RUS=AmountCalc';
      TotalAmountFromCalculationPeriodStartDateTxt@1210204 : TextConst '@@@={Locked};ENU=TotalAmountFromCalculationPeriodStartDate;RUS=TotalAmountFromCalculationPeriodStartDate';
      AmountLast1MonthTxt@1210205 : TextConst '@@@={Locked};ENU=AmountLast1Month;RUS=AmountLast1Month';
      AmountLast2MonthTxt@1210206 : TextConst '@@@={Locked};ENU=AmountLast2Month;RUS=AmountLast2Month';
      AmountLast3MonthTxt@1210207 : TextConst '@@@={Locked};ENU=AmountLast3Month;RUS=AmountLast3Month';
      QuantityIP_TotalTxt@1210208 : TextConst '@@@={Locked};ENU=QuantityIP_Total;RUS=QuantityIP_Total';
      QuantityIP_1monthTxt@1210209 : TextConst '@@@={Locked};ENU=QuantityIP_1month;RUS=QuantityIP_1month';
      QuantityIP_2monthTxt@1210210 : TextConst '@@@={Locked};ENU=QuantityIP_2month;RUS=QuantityIP_2month';
      QuantityIP_3monthTxt@1210211 : TextConst '@@@={Locked};ENU=QuantityIP_3month;RUS=QuantityIP_3month';
      ForMandatoryMedicalInsuranceTxt@1210212 : TextConst '@@@={Locked};ENU=ForMandatoryMedicalInsurance;RUS=ForMandatoryMedicalInsurance';
      PaymentAndRewardAmountTxt@1210213 : TextConst '@@@={Locked};ENU=PaymentAndRewardAmount;RUS=PaymentAndRewardAmount';
      NotLiableTxt@1210214 : TextConst '@@@={Locked};ENU=NotLiable;RUS=NotLiable';
      ExpenseAmountForDeductionTxt@1210215 : TextConst '@@@={Locked};ENU=ExpenseAmountForDeduction;RUS=ExpenseAmountForDeduction';
      BaseForInsuranceContributionAccrualsForOMSTxt@1210216 : TextConst '@@@={Locked};ENU=BaseForInsuranceContributionAccrualsForOMS;RUS=BaseForInsuranceContributionAccrualsForOMS';
      AccruedForOMSTxt@1210217 : TextConst '@@@={Locked};ENU=AccruedForOMS;RUS=AccruedForOMS';
      QuantityIPTotalTxt@1210218 : TextConst '@@@={Locked};ENU=QuantityIPTotal;RUS=QuantityIPTotal';
      Chapter25Txt@1210219 : TextConst '@@@={Locked};ENU=Chapter_2_5;RUS=Chapter_2_5';
      PackListForPFTxt@1210220 : TextConst '@@@={Locked};ENU=PackListForPF;RUS=PackListForPF';
      QuantityOfPacksTxt@1210221 : TextConst '@@@={Locked};ENU=QuantityOfPacks;RUS=QuantityOfPacks';
      InfoAboutPackTxt@1210222 : TextConst '@@@={Locked};ENU=InfoAboutPack;RUS=InfoAboutPack';
      TotalInfoByPacksTxt@1210223 : TextConst '@@@={Locked};ENU=TotalInfoByPacks;RUS=TotalInfoByPacks';
      NumberPPTxt@1210224 : TextConst '@@@={Locked};ENU=NumberPP;RUS=NumberPP';
      BaseForInsuranceContributionsAccrualsLessThanLimitTxt@1210225 : TextConst '@@@={Locked};ENU=BaseForInsuranceCOntributionsAccrualsLessThanLimit;RUS=BaseForInsuranceCOntributionsAccrualsLessThanLimit';
      InsuranceContributionsOPSTxt@1210226 : TextConst '@@@={Locked};ENU=InsuranceContributionsOPS;RUS=InsuranceContributionsOPS';
      QuantityIPInPackTxt@1210227 : TextConst '@@@={Locked};ENU=QuantityIPInPack;RUS=QuantityIPInPack';
      ConfirmingPersonNameTxt@1210228 : TextConst '@@@={Locked};ENU=ConfirmingPersonName;RUS=ConfirmingPersonName';

    PROCEDURE ExportCommonXML@1210058(VAR Person@1210005 : Record 17350;VAR PackPayrollReportingBuffer@1210000 : Record 17470;StartDate@1210004 : Date;EndDate@1210003 : Date;CreationDate@1210002 : Date;FolderName@1210016 : Text);
    VAR
      TempDetailPayrollReportingBuffer@1210008 : TEMPORARY Record 17470;
      TempPersonPayrollReportingBuffer@1210007 : TEMPORARY Record 17470;
      TempTotalPaidPayrollReportingBuffer@1210006 : TEMPORARY Record 17470;
      XmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      FileName@1210015 : Text[250];
    BEGIN
      IF Person.ISEMPTY THEN
        EXIT;

      FileName := GetXMLFileName(StartDate,0,0);
      CompanyInfo.GET;

      RSVCalculationMgt.CalcDetailedBuffer(
        TempDetailPayrollReportingBuffer,TempTotalPaidPayrollReportingBuffer,Person,StartDate,EndDate);
      RSVCalculationMgt.CalcBeginBalanceBuffer(TempTotalPaidPayrollReportingBuffer,Person,StartDate);
      RSVCalculationMgt.GetReportingPersonList(TempPersonPayrollReportingBuffer,TempDetailPayrollReportingBuffer);
      TotalSheetCount :=
        RSVCalculationMgt.GetReportingSheetCount(TempDetailPayrollReportingBuffer,TempPersonPayrollReportingBuffer);

      CreateXMLDoc(XmlDoc,XMLCurrNode);
      XMLAddComplexElement(FilePFRTxt);
      XMLAddSimpleElement(FileNameTxt,FileName);
      AddFileHeader;
      XMLAddComplexElement(IncomingDocumentPackTxt);
      XMLAddAttribute(XMLCurrNode,SurroundingTxt,SingleRequestTxt);

      FillInsuranceCalculation(
        CreationDate,EndDate,TempPersonPayrollReportingBuffer.COUNT,
        TempDetailPayrollReportingBuffer,TempTotalPaidPayrollReportingBuffer,PackPayrollReportingBuffer);

      IF NOT SkipExport THEN
        SaveXMLFile(XmlDoc,FolderName,FileName);
    END;

    LOCAL PROCEDURE FillInsuranceCalculation@1210012(CreationDate@1210004 : Date;EndDate@1210000 : Date;EmployeeQty@1210001 : Integer;VAR DetailPayrollReportingBuffer@1210002 : Record 17470;VAR TotalPaidPayrollReportingBuffer@1210005 : Record 17470;VAR PackPayrollReportingBuffer@1210003 : Record 17470);
    VAR
      PhoneNo@1210006 : Text[30];
    BEGIN
      XMLAddComplexElement(RSVTitleTxt);
      XMLAddSimpleElement(NumberInPackTxt,'1');
      XMLAddSimpleElement(RegistrationNumberPFRTxt,CompanyInfo."Pension Fund Registration No.");
      XMLAddSimpleElement(CorrectionNumberTxt,'000');
      XMLAddSimpleElement(ReportingPeriodCodeTxt,FORMAT(GetAccountingPeriod(EndDate),0,9));
      XMLAddSimpleElement(ReportingYearTxt,FORMAT(DATE2DMY(EndDate,3),0,9));
      XMLAddSimpleElement(CorrectionTypeTxt,'');
      XMLAddSimpleElement(CompanyNameTxt,CompanyInfo.Name);
      XMLAddSimpleElement(INNSymbolicTxt,CompanyInfo."VAT Registration No.");
      XMLAddSimpleElement(KPPTxt,CompanyInfo."KPP Code");
      XMLAddSimpleElement(OKVEDCodeTxt,CompanyInfo."OKVED Code");
      PhoneNo := DELCHR(CompanyInfo."Phone No.",'=',DELCHR(CompanyInfo."Phone No.",'=','0123456789'));
      XMLAddSimpleElement(PhoneTxt,PhoneNo);
      XMLAddSimpleElement(QuantityIPTxt,FORMAT(EmployeeQty,0,9));
      XMLAddSimpleElement(AverageHeadcountTxt,FormatDecimal(EmployeeQty));
      XMLAddSimpleElement(NumberOfPagesTxt,FORMAT(TotalSheetCount,0,9));

      FillSection1(DetailPayrollReportingBuffer,TotalPaidPayrollReportingBuffer);
      FillSection2(DetailPayrollReportingBuffer,PackPayrollReportingBuffer);

      XMLAddSimpleElement(ConfirmingPersonTxt,'1');
      FillResponsibleName;

      XMLAddSimpleElement(FillDateTxt,FormatDate(CreationDate));
      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillSection1@1210019(VAR DetailPayrollReportingBuffer@1210000 : Record 17470;VAR TotalPaidPayrollReportingBuffer@1210006 : Record 17470);
    VAR
      TempTotalChargeAmtPayrollReportingBuffer@1210005 : TEMPORARY Record 17470;
      TempTotalAmt100PayrollReportingBuffer@1210003 : TEMPORARY Record 17470;
      TempTotalAmt130PayrollReportingBuffer@1210002 : TEMPORARY Record 17470;
      TempTotalAmt150PayrollReportingBuffer@1210001 : TEMPORARY Record 17470;
    BEGIN
      XMLAddComplexElement(Chapter1TitleTxt);

      // Calculate Amounts
      RSVCalculationMgt.CalcTotals110_113(DetailPayrollReportingBuffer,TempTotalChargeAmtPayrollReportingBuffer);
      RSVCalculationMgt.CalcTotals100(TotalPaidPayrollReportingBuffer,TempTotalAmt100PayrollReportingBuffer);
      RSVCalculationMgt.CalcTotalsSums(
        TempTotalAmt130PayrollReportingBuffer,TempTotalAmt100PayrollReportingBuffer,TempTotalChargeAmtPayrollReportingBuffer,1);
      RSVCalculationMgt.CalcTotalsSums(
        TempTotalAmt150PayrollReportingBuffer,TempTotalAmt130PayrollReportingBuffer,TotalPaidPayrollReportingBuffer,-1);

      FillPayments(OutstandingPaymentDueAtStartDateTxt,BlockType::All,'100',TempTotalAmt100PayrollReportingBuffer);
      FillPaymentsForPeriod(AccruedFromCalculationPeriodStartDateTxt,BlockType::Period,110,TempTotalChargeAmtPayrollReportingBuffer);

      // Empty Values
      TempTotalAmt100PayrollReportingBuffer.INIT;
      FillPayments(AddedFromCalculationPeriodStartTotalTxt,BlockType::All,'120',TempTotalAmt100PayrollReportingBuffer);
      FillPayments(AddedFromCalculationPeriodStartExtraTxt,BlockType::Additional,'121',TempTotalAmt100PayrollReportingBuffer);
      FillPayments(TotalToPayTxt,BlockType::All,'130',TempTotalAmt130PayrollReportingBuffer);
      FillPaymentsForPeriod(PaidFromCalculationPeriodStartDateTxt,BlockType::All,140,TotalPaidPayrollReportingBuffer);
      FillPayments(OutstandingPaymentDueAtEndDateTxt,BlockType::All,'150',TempTotalAmt150PayrollReportingBuffer);

      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillPayments@1210022(BlockNodeText@1210000 : Text[250];BlockType@1210008 : 'All,Period,Additional';LineCode@1210001 : Text[250];VAR AmountsPayrollReportingBuffer@1210009 : Record 17470);
    BEGIN
      XMLAddComplexElement(BlockNodeText);

      XMLAddSimpleElement(LineCodeTxt,LineCode);
      XMLAddSimpleElement(InsuranceContributionOPSTxt,FormatDecimal(AmountsPayrollReportingBuffer."Amount 1"));

      IF BlockType <> BlockType::Period THEN
        XMLAddSimpleElement(OPSinsuredPartTxt,FormatDecimal(AmountsPayrollReportingBuffer."Amount 2"));
      IF BlockType = BlockType::All THEN
        XMLAddSimpleElement(OPSaccumulatedPartTxt,FormatDecimal(AmountsPayrollReportingBuffer."Amount 3"));

      IF BlockType <> BlockType::Additional THEN BEGIN
        XMLAddSimpleElement(ContributionsByExtraTariffTxt + '1',FormatDecimal(AmountsPayrollReportingBuffer."Amount 4"));
        XMLAddSimpleElement(ContributionsByExtraTariffTxt + '2_18',FormatDecimal(AmountsPayrollReportingBuffer."Amount 5"));
        XMLAddSimpleElement(InsuranceContributionsOMSTxt,FormatDecimal(AmountsPayrollReportingBuffer."Amount 6"));
      END;

      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillPaymentsForPeriod@1210049(PaymentTitle@1210000 : Text[250];BlockType@1210006 : Option;StartCodeValue@1210002 : Integer;VAR AmountsPayrollReportingBuffer@1210001 : Record 17470);
    BEGIN
      XMLAddComplexElement(PaymentTitle);

      WITH AmountsPayrollReportingBuffer DO BEGIN
        IF GET(1) THEN
          FillPayments(TotalFromCalculationPeriodStartDateTxt,BlockType,FORMAT(StartCodeValue),AmountsPayrollReportingBuffer);
        IF GET(2) THEN
          FillPayments(LastThreeMonthsTxt + '1',BlockType,FORMAT(StartCodeValue + 1),AmountsPayrollReportingBuffer);
        IF GET(3) THEN
          FillPayments(LastThreeMonthsTxt + '2',BlockType,FORMAT(StartCodeValue + 2),AmountsPayrollReportingBuffer);
        IF GET(4) THEN
          FillPayments(LastThreeMonthsTxt + '3',BlockType,FORMAT(StartCodeValue + 3),AmountsPayrollReportingBuffer);

        RESET;
        SETRANGE("Entry No.",2,4);
        CALCSUMS("Amount 1","Amount 2","Amount 3","Amount 4","Amount 5","Amount 6");
        FillPayments(LastThreeMonthsTotalTxt,BlockType,FORMAT(StartCodeValue + 4),AmountsPayrollReportingBuffer);
      END;

      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillSection2@1210018(VAR PersonifiedPayrollReportingBuffer@1210000 : Record 17470;VAR PackPayrollReportingBuffer@1210001 : Record 17470);
    BEGIN
      XMLAddComplexElement(Chapter2TitleTxt);

      PersonifiedPayrollReportingBuffer.RESET;
      PersonifiedPayrollReportingBuffer.SETRANGE("Code 3",'01');
      FillSection2_1(PersonifiedPayrollReportingBuffer);

      PersonifiedPayrollReportingBuffer.SETRANGE("Code 3",'03');
      FillSection2_1(PersonifiedPayrollReportingBuffer);
      PersonifiedPayrollReportingBuffer.SETRANGE("Code 3");

      FillSection2_5(PersonifiedPayrollReportingBuffer,PackPayrollReportingBuffer);

      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillSection2_1@1210008(VAR PersonifiedPayrollReportingBuffer@1210000 : Record 17470);
    VAR
      Amount200@1210015 : ARRAY [4] OF Decimal;
      Amount201@1210014 : ARRAY [4] OF Decimal;
      Amount202@1210013 : ARRAY [4] OF Decimal;
      Amount203@1210012 : ARRAY [4] OF Decimal;
      Amount204@1210011 : ARRAY [4] OF Decimal;
      Amount205@1210010 : ARRAY [4] OF Decimal;
      Amount206@1210009 : ARRAY [4] OF Decimal;
      Amount207@1210008 : ARRAY [4] OF Decimal;
      Amount208@1210007 : ARRAY [4] OF Decimal;
      Amount210@1210006 : ARRAY [4] OF Decimal;
      Amount211@1210005 : ARRAY [4] OF Decimal;
      Amount213@1210003 : ARRAY [4] OF Decimal;
      Amount214@1210002 : ARRAY [4] OF Decimal;
      Amount215@1210001 : ARRAY [4] OF Decimal;
    BEGIN
      IF NOT PersonifiedPayrollReportingBuffer.FINDFIRST THEN
        EXIT;

      XMLAddComplexElement(Chapter21Txt);
      XMLAddSimpleElement(TariffCodeTxt,PersonifiedPayrollReportingBuffer."Code 3");
      Calculate2_1Amounts(PersonifiedPayrollReportingBuffer,
        Amount200,Amount201,Amount202,Amount203,Amount204,Amount205,Amount206,Amount207,Amount208,
        Amount210,Amount211,Amount202,Amount213,Amount214,Amount215);

      FillPensionInsurance(Amount200,Amount201,Amount202,Amount203,Amount204,Amount205,Amount206,Amount207,Amount208);
      FillMedicalInsurance(Amount210,Amount211,Amount202,Amount213,Amount214,Amount215);
      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillPensionInsurance@1210014(Amount200@1210008 : ARRAY [4] OF Decimal;Amount201@1210007 : ARRAY [4] OF Decimal;Amount202@1210006 : ARRAY [4] OF Decimal;Amount203@1210005 : ARRAY [4] OF Decimal;Amount204@1210004 : ARRAY [4] OF Decimal;Amount205@1210003 : ARRAY [4] OF Decimal;Amount206@1210002 : ARRAY [4] OF Decimal;Amount207@1210001 : ARRAY [4] OF Decimal;Amount208@1210000 : ARRAY [4] OF Decimal);
    BEGIN
      XMLAddComplexElement(ForMandatoryPensionInsuranceTxt);

      FillPaymentCalulation(PaymentAndRewardAmountOPSTxt,'200',Amount200);
      FillPaymentCalulation(NotLiableForOPSTxt,'201',Amount201);
      FillPaymentCalulation(ExpenseAmountForDeductionOPSTxt,'202',Amount202);
      FillPaymentCalulation(AboveBaseLimitOPSTxt,'203',Amount203);
      FillPaymentCalulation(BaseForInsuranceContributionAccrualsForOPSTxt,'204',Amount204);
      FillPaymentCalulation(AccruedForOPSForAmountsLessThanTxt,'205',Amount205);
      FillPaymentCalulation(AccruedForOPSForAmountsExceededTxt,'206',Amount206);
      FillFL(QuantotyOfFPtotalTxt,'207',Amount207);
      FillFL(QuantityFPWithBaseExceedLimitTxt,'208',Amount208);

      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillPaymentCalulation@1210021(Title@1210000 : Text[250];LineCode@1210001 : Text[250];Amount@1210002 : ARRAY [4] OF Decimal);
    VAR
      i@1210003 : Integer;
    BEGIN
      XMLAddComplexElement(Title);
      XMLAddSimpleElement(LineCodeTxt,LineCode);
      XMLAddComplexElement(AmountCalcTxt);

      FOR i := 0 TO 3 DO
        IF Amount[i + 1] < 0 THEN
          Amount[i + 1] := 0;

      XMLAddSimpleElement(TotalAmountFromCalculationPeriodStartDateTxt,FormatDecimal(Amount[1]));
      XMLAddSimpleElement(AmountLast1MonthTxt,FormatDecimal(Amount[2]));
      XMLAddSimpleElement(AmountLast2MonthTxt,FormatDecimal(Amount[3]));
      XMLAddSimpleElement(AmountLast3MonthTxt,FormatDecimal(Amount[4]));
      XMLBackToParent;
      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillFL@1210028(Title@1210005 : Text[250];LineCode@1210001 : Text[250];Amount@1210000 : ARRAY [4] OF Decimal);
    BEGIN
      XMLAddComplexElement(Title);

      XMLAddSimpleElement(LineCodeTxt,LineCode);
      XMLAddSimpleElement(QuantityIP_TotalTxt,FormatDecimal(Amount[1]));
      XMLAddSimpleElement(QuantityIP_1monthTxt,FormatDecimal(Amount[2]));
      XMLAddSimpleElement(QuantityIP_2monthTxt,FormatDecimal(Amount[3]));
      XMLAddSimpleElement(QuantityIP_3monthTxt,FormatDecimal(Amount[4]));

      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillMedicalInsurance@1210016(Amount210@1210005 : ARRAY [4] OF Decimal;Amount211@1210004 : ARRAY [4] OF Decimal;Amount212@1210003 : ARRAY [4] OF Decimal;Amount213@1210002 : ARRAY [4] OF Decimal;Amount214@1210001 : ARRAY [4] OF Decimal;Amount215@1210000 : ARRAY [4] OF Decimal);
    BEGIN
      XMLAddComplexElement(ForMandatoryMedicalInsuranceTxt);

      FillPaymentCalulation(PaymentAndRewardAmountTxt,'210',Amount210);
      FillPaymentCalulation(NotLiableTxt,'211',Amount211);
      FillPaymentCalulation(ExpenseAmountForDeductionTxt,'212',Amount212);
      FillPaymentCalulation(BaseForInsuranceContributionAccrualsForOMSTxt,'213',Amount213);
      FillPaymentCalulation(AccruedForOMSTxt,'214',Amount214);
      FillFL(QuantityIPTotalTxt,'215',Amount215);

      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillSection2_5@1210050(VAR PersonifiedPayrollReportingBuffer@1210000 : Record 17470;VAR PackPayrollReportingBuffer@1210001 : Record 17470);
    BEGIN
      XMLAddComplexElement(Chapter25Txt);
      XMLAddComplexElement(PackListForPFTxt);
      XMLAddSimpleElement(QuantityOfPacksTxt,FORMAT(PackPayrollReportingBuffer.COUNT));

      IF PackPayrollReportingBuffer.FINDSET THEN
        REPEAT
          FillPackInfo(InfoAboutPackTxt,FALSE,PersonifiedPayrollReportingBuffer,
            PackPayrollReportingBuffer."File Name",PackPayrollReportingBuffer."Entry No.");
        UNTIL PackPayrollReportingBuffer.NEXT = 0;
      FillPackInfo(TotalInfoByPacksTxt,TRUE,PersonifiedPayrollReportingBuffer,'',0);

      XMLBackToParent;
      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillPackInfo@1210053(Title@1210006 : Text[250];IsTotal@1210000 : Boolean;VAR PersonifiedPayrollReportingBuffer@1210001 : Record 17470;FileName@1210002 : Text[250];PackNo@1210003 : Integer);
    VAR
      Amount2@1210004 : Decimal;
      Amount4@1210005 : Decimal;
    BEGIN
      PersonifiedPayrollReportingBuffer.SETRANGE("Code 2");
      IF PackNo = 0 THEN
        PersonifiedPayrollReportingBuffer.SETRANGE("Pack No.")
      ELSE
        PersonifiedPayrollReportingBuffer.SETRANGE("Pack No.",PackNo);

      PersonifiedPayrollReportingBuffer.SETFILTER("Code 2",'<>%1','0');
      PersonifiedPayrollReportingBuffer.CALCSUMS("Amount 2","Amount 4");
      Amount2 := PersonifiedPayrollReportingBuffer."Amount 2";
      Amount4 := -PersonifiedPayrollReportingBuffer."Amount 4";

      XMLAddComplexElement(Title);
      IF NOT IsTotal THEN
        XMLAddSimpleElement(NumberPPTxt,FORMAT(PackNo));
      XMLAddSimpleElement(BaseForInsuranceContributionsAccrualsLessThanLimitTxt,FormatDecimal(Amount2));
      XMLAddSimpleElement(InsuranceContributionsOPSTxt,FormatDecimal(Amount4));
      PersonifiedPayrollReportingBuffer.SETRANGE("Code 2",'0');
      XMLAddSimpleElement(QuantityIPInPackTxt,FormatDecimal(PersonifiedPayrollReportingBuffer.COUNT));
      IF NOT IsTotal THEN
        XMLAddSimpleElement(FileNameTxt,FileName);
      XMLBackToParent;
    END;

    LOCAL PROCEDURE FillResponsibleName@1210015();
    BEGIN
      XMLAddComplexElement(ConfirmingPersonNameTxt);
      XMLAddSimpleElement(LastNameTxt,'');
      XMLAddSimpleElement(FirstNameTxt,'');
      XMLAddSimpleElement(MiddleNameTxt,'');
      XMLBackToParent;
    END;

    LOCAL PROCEDURE GetXMLFileName@1210025(StartDate@1210000 : Date;DepartmentNo@1210002 : Integer;DepartmentPackNo@1210003 : Integer) : Text[250];
    VAR
      CompanyInfo@1210004 : Record 79;
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD("Pension Fund Registration No.");
      EXIT(
        'PFR-700-' +
        'Y-' + FORMAT(StartDate,0,'<Year4>') +
        '-ORG-' + CompanyInfo."Pension Fund Registration No." +
        '-DCK-' + FormatNumber(1,5) +
        '-DPT-' + FormatNumber(DepartmentNo,6) +
        '-DCK-' + FormatNumber(DepartmentPackNo,5) + '.XML'
        );
    END;

    PROCEDURE CreateXMLDoc@1210010(VAR XmlDoc@1210005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ProcInstr@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction");
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;
      ProcInstr := XmlDoc.CreateProcessingInstruction('xml','version="1.0" encoding="windows-1251"');
      XmlDoc.AppendChild(ProcInstr);
    END;

    PROCEDURE SaveXMLFile@1210036(VAR XmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";FolderName@1210006 : Text;FileName@1210000 : Text[250]);
    VAR
      TempTempBlob@1210004 : TEMPORARY Record 99008535;
      XmlExcelReportsMgt@1210001 : Codeunit 12408;
      OutStr@1210003 : OutStream;
      InStr@1210002 : InStream;
    BEGIN
      TempTempBlob.INIT;
      TempTempBlob.INSERT;
      TempTempBlob.Blob.CREATEOUTSTREAM(OutStr);

      XmlExcelReportsMgt.SaveXMLDocWithEncoding(OutStr,XmlDoc,'windows-1251');

      IF FolderName = '' THEN BEGIN
        TempTempBlob.Blob.CREATEINSTREAM(InStr);
        DOWNLOADFROMSTREAM(InStr,'Export','','All Files (*.*)|*.*',FileName)
      END ELSE BEGIN
        IF FolderName <> '' THEN
          IF COPYSTR(FolderName,STRLEN(FolderName),1) <> '\' THEN
            FolderName += '\';
        TempTempBlob.Blob.EXPORT(FolderName + FileName);
      END;
    END;

    LOCAL PROCEDURE XMLAddElement@1(VAR XMLNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1002 : Text[250];NodeText@1003 : Text[250];NameSpace@1004 : Text[250];VAR CreatedXMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") ExitStatus@1000 : Integer;
    VAR
      NewChildNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeType@1210000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeType";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode(XmlNodeType.Element,NodeName,NameSpace);

      IF ISNULL(NewChildNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF NodeText <> '' THEN
        NewChildNode.InnerText := NodeText;

      IF XMLNode.NodeType.Equals(XmlNodeType.ProcessingInstruction) THEN
        CreatedXMLNode := XMLNode.OwnerDocument.AppendChild(NewChildNode)
      ELSE BEGIN
        XMLNode.AppendChild(NewChildNode);
        CreatedXMLNode := NewChildNode;
      END;

      ExitStatus := 0;
    END;

    LOCAL PROCEDURE XMLAddAttribute@2(VAR XMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text[260];NodeValue@1003 : Text[260]) ExitStatus@1000 : Integer;
    VAR
      XMLNewAttributeNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLNewAttributeNode := XMLNode.OwnerDocument.CreateAttribute(Name);

      IF ISNULL(XMLNewAttributeNode) THEN BEGIN
        ExitStatus := 60;
        EXIT(ExitStatus)
      END;

      IF NodeValue <> '' THEN
        XMLNewAttributeNode.Value := NodeValue;

      XMLNode.Attributes.SetNamedItem(XMLNewAttributeNode);
    END;

    LOCAL PROCEDURE XMLAddSimpleElement@1210000(NodeName@1210001 : Text[250];NodeText@1210000 : Text[250]);
    BEGIN
      XMLAddElement(XMLCurrNode,NodeName,UPPERCASE(NodeText),'',XMLNewChild);
    END;

    LOCAL PROCEDURE XMLAddComplexElement@1210003(NodeName@1210001 : Text[250]);
    BEGIN
      XMLAddElement(XMLCurrNode,NodeName,'','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
    END;

    LOCAL PROCEDURE XMLBackToParent@1210005();
    BEGIN
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddFileHeader@1210013();
    BEGIN
      XMLAddComplexElement(FileHeaderTxt);
      XMLAddSimpleElement(FormatVersionTxt,'07.00');
      XMLAddSimpleElement(FileTypeTxt,EXTERNALTxt);
      XMLAddComplexElement(DataPreparationProgramTxt);
      XMLAddSimpleElement(ProgramNameTxt,'MICROSOFT DYNAMICS NAV');
      XMLAddSimpleElement(VersionTxt,'2016');
      XMLBackToParent;
      XMLAddSimpleElement(DataSourceTxt,INSURERTxt);
      XMLBackToParent;
    END;

    LOCAL PROCEDURE FormatNumber@1210039(Number@1210000 : Integer;StrLength@1210001 : Integer) : Text[30];
    BEGIN
      EXIT(PADSTR('',StrLength - STRLEN(FORMAT(Number)),'0') + FORMAT(Number));
    END;

    LOCAL PROCEDURE FormatDate@1210002(Date@1210000 : Date) : Text[30];
    BEGIN
      EXIT(FORMAT(Date,0,'<Day,2>.<Month,2>.<Year4>'));
    END;

    LOCAL PROCEDURE FormatDecimal@1210064(Amount@1210000 : Decimal) : Text[30];
    BEGIN
      EXIT(FORMAT(Amount,0,9));
    END;

    LOCAL PROCEDURE GetAccountingPeriod@1210128(EndDate@1210000 : Date) : Integer;
    VAR
      Month@1210001 : Integer;
    BEGIN
      Month := DATE2DMY(EndDate,2);
      IF Month = 12 THEN
        EXIT(0);
      EXIT(Month);
    END;

    PROCEDURE Calculate2_1Amounts@1210037(VAR PersonifiedPayrollReportingBuffer@1210016 : Record 17470;VAR Amount200@1210014 : ARRAY [4] OF Decimal;VAR Amount201@1210013 : ARRAY [4] OF Decimal;VAR Amount202@1210012 : ARRAY [4] OF Decimal;VAR Amount203@1210011 : ARRAY [4] OF Decimal;VAR Amount204@1210010 : ARRAY [4] OF Decimal;VAR Amount205@1210009 : ARRAY [4] OF Decimal;VAR Amount206@1210008 : ARRAY [4] OF Decimal;VAR Amount207@1210007 : ARRAY [4] OF Decimal;VAR Amount208@1210006 : ARRAY [4] OF Decimal;VAR Amount210@1210005 : ARRAY [4] OF Decimal;VAR Amount211@1210004 : ARRAY [4] OF Decimal;VAR Amount212@1210003 : ARRAY [4] OF Decimal;VAR Amount213@1210002 : ARRAY [4] OF Decimal;VAR Amount214@1210001 : ARRAY [4] OF Decimal;VAR Amount215@1210000 : ARRAY [4] OF Decimal);
    VAR
      i@1210015 : Integer;
    BEGIN
      FOR i := 0 TO 3 DO BEGIN
        PersonifiedPayrollReportingBuffer.SETRANGE("Code 2",FORMAT(i));
        PersonifiedPayrollReportingBuffer.CALCSUMS("Amount 1","Amount 3","Amount 4","Amount 7","Amount 8","Amount 9");
        Amount200[i + 1] := PersonifiedPayrollReportingBuffer."Amount 1";
        Amount201[i + 1] := PersonifiedPayrollReportingBuffer."Amount 1" - PersonifiedPayrollReportingBuffer."Amount 7";
        Amount202[i + 1] := 0;
        Amount203[i + 1] := PersonifiedPayrollReportingBuffer."Amount 3";
        Amount204[i + 1] := Amount200[i + 1] - Amount201[i + 1] - Amount202[i + 1] - Amount203[i + 1];
        Amount205[i + 1] := -PersonifiedPayrollReportingBuffer."Amount 4";
        Amount206[i + 1] := -(PersonifiedPayrollReportingBuffer."Amount 8" - PersonifiedPayrollReportingBuffer."Amount 4");

        PersonifiedPayrollReportingBuffer.SETFILTER("Amount 7",'<>%1',0);
        Amount207[i + 1] := PersonifiedPayrollReportingBuffer.COUNT;
        PersonifiedPayrollReportingBuffer.SETRANGE("Amount 7");

        PersonifiedPayrollReportingBuffer.SETFILTER("Amount 3",'<>%1',0);
        Amount208[i + 1] := PersonifiedPayrollReportingBuffer.COUNT;
        PersonifiedPayrollReportingBuffer.SETRANGE("Amount 3");

        Amount210[i + 1] := Amount200[i + 1];
        Amount211[i + 1] := Amount201[i + 1];
        Amount212[i + 1] := 0;
        Amount213[i + 1] := Amount210[i + 1] - Amount211[i + 1] - Amount212[i + 1];
        Amount214[i + 1] := -PersonifiedPayrollReportingBuffer."Amount 9";

        PersonifiedPayrollReportingBuffer.SETFILTER("Amount 9",'<>%1',0);
        Amount215[i + 1] := PersonifiedPayrollReportingBuffer.COUNT;
        PersonifiedPayrollReportingBuffer.SETRANGE("Amount 9");
      END;
    END;

    PROCEDURE SetSkipExport@1210001(NewSkipExport@1210000 : Boolean);
    BEGIN
      SkipExport := NewSkipExport;
    END;

    BEGIN
    END.
  }
}

