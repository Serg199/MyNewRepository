OBJECT Codeunit 17202 Tax Dimension Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=18.12.13;
    Time=12:00:00;
    Version List=NAVRU7.10;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text1001@1000 : TextConst 'ENU="Change cannot be completed because %1 has records with %2=%3, %4=%5, %6=%7, %8=%9.";RUS="Изменение не может быть выполнено, т.к. %1 содержит записи с %2=%3, %4=%5, %6=%7, %8=%9."';
      Text1002@1001 : TextConst 'ENU="Deletion cannot be completed because %1 has records with %2=%3.";RUS="Удаление не может быть выполнено, т.к. %1 содержит записи с %2=%3."';
      Text1003@1002 : TextConst 'ENU="Deletion cannot be completed because %1 has records with %2=%3, %4=%5.";RUS="Удаление не может быть выполнено, т.к. %1 содержит записи с %2=%3, %4=%5."';
      TaxRegSection@1003 : Record 17207;
      TempDimBuf1@1004 : TEMPORARY Record 360;
      Text1004@1005 : TextConst 'ENU=Entry %1 %2\Debit %3 Credit %4;RUS=Операция %1 %2\дб. %3 - кр. %4';
      Text1005@1006 : TextConst 'ENU=\\Skip?;RUS=\\Пропустить?';
      TempDimBuf2@1007 : TEMPORARY Record 360;
      GLSetup@1008 : Record 98;
      GLSetupReady@1009 : Boolean;
      Text1006@1010 : TextConst 'ENU=Entry %1 %2 Debit %3;RUS=Операция %1 %2, дб. %3';
      Text1007@1011 : TextConst 'ENU=Entry %1 %2 Credit %3;RUS=Операция %1 %2, кр. %3';
      Text1008@1012 : TextConst 'ENU=Entry %1 %2 Line %3;RUS=Операция %1 %2, строка %3';
      Text1009@1013 : TextConst 'ENU=\Dimension %1 not found.\Filter %2.;RUS=\Измерение %1 не найдено.\Фильтр %2';
      Text1010@1210000 : TextConst 'ENU="LineNo = %1 TaxRegDimComb.""Line No."" = %2";RUS="LineNo = %1 TaxRegDimComb.""Line No."" = %2"';

    PROCEDURE SetDimFilters2TaxGLLine@4(TaxRegTemplate@1000 : Record 17202;VAR TaxRegGLEntry@1001 : Record 17209);
    VAR
      TaxRegDimFilter@1002 : Record 17218;
    BEGIN
      TaxRegDimFilter.SETRANGE("Section Code",TaxRegTemplate."Section Code");
      TaxRegDimFilter.SETRANGE("Tax Register No.",TaxRegTemplate.Code);
      TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::Template);
      TaxRegDimFilter.SETRANGE("Line No.",TaxRegTemplate."Line No.");
      TaxRegDimFilter.SETFILTER("Dimension Value Filter",'<>%1','');
      IF TaxRegDimFilter.FINDSET THEN BEGIN
        IF TaxRegSection.Code <> TaxRegTemplate."Section Code" THEN
          TaxRegSection.GET(TaxRegTemplate."Section Code");
        REPEAT
          IF TaxRegSection."Dimension 1 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegGLEntry.SETFILTER("Dimension 1 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 2 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegGLEntry.SETFILTER("Dimension 2 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 3 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegGLEntry.SETFILTER("Dimension 3 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 4 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegGLEntry.SETFILTER("Dimension 4 Value Code",TaxRegDimFilter."Dimension Value Filter");
        UNTIL TaxRegDimFilter.NEXT(1) = 0;
      END;
    END;

    PROCEDURE SetDimFilters2TaxItemLine@5(TaxRegTemplate@1000 : Record 17202;VAR TaxRegItemEntry@1001 : Record 17212);
    VAR
      TaxRegDimFilter@1002 : Record 17218;
    BEGIN
      TaxRegDimFilter.SETRANGE("Section Code",TaxRegTemplate."Section Code");
      TaxRegDimFilter.SETRANGE("Tax Register No.",TaxRegTemplate.Code);
      TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::Template);
      TaxRegDimFilter.SETRANGE("Line No.",TaxRegTemplate."Line No.");
      TaxRegDimFilter.SETFILTER("Dimension Value Filter",'<>%1','');
      IF TaxRegDimFilter.FINDSET THEN BEGIN
        IF TaxRegSection.Code <> TaxRegTemplate."Section Code" THEN
          TaxRegSection.GET(TaxRegTemplate."Section Code");
        REPEAT
          IF TaxRegSection."Dimension 1 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegItemEntry.SETFILTER("Dimension 1 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 2 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegItemEntry.SETFILTER("Dimension 2 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 3 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegItemEntry.SETFILTER("Dimension 3 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 4 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegItemEntry.SETFILTER("Dimension 4 Value Code",TaxRegDimFilter."Dimension Value Filter");
        UNTIL TaxRegDimFilter.NEXT(1) = 0;
      END;
    END;

    PROCEDURE SetDimFilters2TaxPRLine@6(TaxRegTemplate@1000 : Record 17202;VAR TaxRegPREntry@1001 : Record 17214);
    VAR
      TaxRegDimFilter@1002 : Record 17218;
    BEGIN
      TaxRegDimFilter.SETRANGE("Section Code",TaxRegTemplate."Section Code");
      TaxRegDimFilter.SETRANGE("Tax Register No.",TaxRegTemplate.Code);
      TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::Template);
      TaxRegDimFilter.SETRANGE("Line No.",TaxRegTemplate."Line No.");
      TaxRegDimFilter.SETFILTER("Dimension Value Filter",'<>%1','');
      IF TaxRegDimFilter.FINDSET THEN BEGIN
        IF TaxRegSection.Code <> TaxRegTemplate."Section Code" THEN
          TaxRegSection.GET(TaxRegTemplate."Section Code");
        REPEAT
          IF TaxRegSection."Dimension 1 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegPREntry.SETFILTER("Dimension 1 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 2 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegPREntry.SETFILTER("Dimension 2 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 3 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegPREntry.SETFILTER("Dimension 3 Value Code",TaxRegDimFilter."Dimension Value Filter");
          IF TaxRegSection."Dimension 4 Code" = TaxRegDimFilter."Dimension Code" THEN
            TaxRegPREntry.SETFILTER("Dimension 4 Value Code",TaxRegDimFilter."Dimension Value Filter");
        UNTIL TaxRegDimFilter.NEXT(1) = 0;
      END;
    END;

    PROCEDURE ValidateTemplateDimFilters@7(TaxRegTemplate@1000 : Record 17202) : Boolean;
    VAR
      TaxRegDimFilter@1001 : Record 17218;
      DimensionValue@1002 : Record 349;
    BEGIN
      TempDimBuf1.RESET;

      TaxRegDimFilter.SETRANGE("Section Code",TaxRegTemplate."Section Code");
      TaxRegDimFilter.SETRANGE("Tax Register No.",TaxRegTemplate.Code);
      TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::Template);
      TaxRegDimFilter.SETRANGE("Line No.",TaxRegTemplate."Line No.");
      IF TaxRegDimFilter.FINDSET THEN
        REPEAT
          IF NOT TempDimBuf1.GET(0,0,TaxRegDimFilter."Dimension Code") THEN BEGIN
            IF NOT (TaxRegDimFilter."Dimension Value Filter" IN ['','''''']) THEN
              EXIT(FALSE);
          END ELSE BEGIN
            DimensionValue.SETRANGE("Dimension Code",TaxRegDimFilter."Dimension Code");
            DimensionValue.SETFILTER(Code,TaxRegDimFilter."Dimension Value Filter");
            DimensionValue."Dimension Code" := TaxRegDimFilter."Dimension Code";
            DimensionValue.Code := TempDimBuf1."Dimension Value Code";
            IF NOT DimensionValue.FIND THEN
              EXIT(FALSE);
          END;
        UNTIL TaxRegDimFilter.NEXT(1) = 0;

      EXIT(TRUE);
    END;

    PROCEDURE SetTaxEntryDim@8(TaxRegSectionCode@1000 : Code[10];Dimension1ValueCode@1001 : Code[20];Dimension2ValueCode@1002 : Code[20];Dimension3ValueCode@1003 : Code[20];Dimension4ValueCode@1004 : Code[20]);
    BEGIN
      IF TaxRegSection.Code <> TaxRegSectionCode THEN
        TaxRegSection.GET(TaxRegSectionCode);
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;

      IF (Dimension1ValueCode <> '') AND (TaxRegSection."Dimension 1 Code" <> '') THEN BEGIN
        TempDimBuf1."Dimension Code" := TaxRegSection."Dimension 1 Code";
        TempDimBuf1."Dimension Value Code" := Dimension1ValueCode;
        TempDimBuf1.INSERT;
      END;

      IF (Dimension2ValueCode <> '') AND (TaxRegSection."Dimension 2 Code" <> '') THEN BEGIN
        TempDimBuf1."Dimension Code" := TaxRegSection."Dimension 2 Code";
        TempDimBuf1."Dimension Value Code" := Dimension2ValueCode;
        TempDimBuf1.INSERT;
      END;

      IF (Dimension3ValueCode <> '') AND (TaxRegSection."Dimension 3 Code" <> '') THEN BEGIN
        TempDimBuf1."Dimension Code" := TaxRegSection."Dimension 3 Code";
        TempDimBuf1."Dimension Value Code" := Dimension3ValueCode;
        TempDimBuf1.INSERT;
      END;

      IF (Dimension4ValueCode <> '') AND (TaxRegSection."Dimension 4 Code" <> '') THEN BEGIN
        TempDimBuf1."Dimension Code" := TaxRegSection."Dimension 4 Code";
        TempDimBuf1."Dimension Value Code" := Dimension4ValueCode;
        TempDimBuf1.INSERT;
      END;
    END;

    PROCEDURE WhereUsedByDimensions@9(TaxRegGLCorrEntry@1000 : Record 17203;VAR TaxRegIDTotaling@1001 : Code[250];VAR Dimension1ValueCode@1002 : Code[20];VAR Dimension2ValueCode@1003 : Code[20];VAR Dimension3ValueCode@1004 : Code[20];VAR Dimension4ValueCode@1005 : Code[20]) : Boolean;
    VAR
      TaxRegDimCorrFilter@1006 : Record 17219;
      TaxRegDimFilter@1007 : Record 17218;
      TaxReg@1009 : Record 17200;
      MessageText@1010 : Text[250];
    BEGIN
      Dimension1ValueCode := '';
      Dimension2ValueCode := '';
      Dimension3ValueCode := '';
      Dimension4ValueCode := '';
      IF (TaxRegGLCorrEntry."Debit Account No." <> '') AND (TaxRegGLCorrEntry."Credit Account No." <> '') THEN
        MessageText :=
          STRSUBSTNO(Text1004,
            TaxReg.TABLECAPTION,TaxRegDimFilter."Tax Register No.",
            TaxRegGLCorrEntry."Debit Account No.",TaxRegGLCorrEntry."Credit Account No.")
      ELSE
        IF TaxRegGLCorrEntry."Debit Account No." <> '' THEN
          MessageText :=
            STRSUBSTNO(Text1006,
              TaxReg.TABLECAPTION,TaxRegDimFilter."Tax Register No.",
              TaxRegGLCorrEntry."Debit Account No.")
        ELSE
          MessageText :=
            STRSUBSTNO(Text1007,
              TaxReg.TABLECAPTION,TaxRegDimFilter."Tax Register No.",
              TaxRegGLCorrEntry."Credit Account No.");

      TaxRegDimCorrFilter.SETRANGE("Section Code",TaxRegGLCorrEntry."Section Code");
      TaxRegDimCorrFilter.SETRANGE("G/L Corr. Entry No.",TaxRegGLCorrEntry."Entry No.");
      TaxRegDimCorrFilter.SETRANGE("Connection Type",TaxRegDimCorrFilter."Connection Type"::Combinations);
      IF NOT CheckDimRestrictions(TaxRegDimCorrFilter) THEN
        EXIT(FALSE);
      TaxRegDimCorrFilter.SETRANGE("Connection Type",TaxRegDimCorrFilter."Connection Type"::Filters);
      TaxRegIDTotaling := TaxRegGLCorrEntry."Tax Register ID Totaling";
      IF TaxRegDimCorrFilter.FINDSET THEN
        REPEAT
          TaxRegDimFilter.SETCURRENTKEY("Section Code","Entry No.");
          TaxRegDimFilter.SETRANGE("Section Code",TaxRegGLCorrEntry."Section Code");
          TaxRegDimFilter.SETRANGE("Entry No.",TaxRegDimCorrFilter."Connection Entry No.");
          IF NOT CheckSetupDimFilters(TaxRegDimFilter,MessageText) THEN
            EXIT(FALSE);
          IF TaxRegDimFilter.FINDSET THEN
            REPEAT
              TaxReg.GET(TaxRegDimFilter."Section Code",TaxRegDimFilter."Tax Register No.");
              IF TaxRegIDTotaling = '' THEN
                TaxRegIDTotaling := '~';
              IF STRPOS(TaxRegIDTotaling,'~' + TaxReg."Register ID" + '~') = 0 THEN
                TaxRegIDTotaling :=
                  STRSUBSTNO('%1%2~',TaxRegIDTotaling,TaxReg."Register ID");
            UNTIL TaxRegDimFilter.NEXT(1) = 0;
        UNTIL TaxRegDimCorrFilter.NEXT(1) = 0;
      TempDimBuf2.RESET;
      IF TempDimBuf2.FINDSET THEN
        REPEAT
          CASE TempDimBuf2."Dimension Code" OF
            TaxRegSection."Dimension 1 Code":
              Dimension1ValueCode := TempDimBuf2."Dimension Value Code";
            TaxRegSection."Dimension 2 Code":
              Dimension2ValueCode := TempDimBuf2."Dimension Value Code";
            TaxRegSection."Dimension 3 Code":
              Dimension3ValueCode := TempDimBuf2."Dimension Value Code";
            TaxRegSection."Dimension 4 Code":
              Dimension4ValueCode := TempDimBuf2."Dimension Value Code";
          END;
        UNTIL TempDimBuf2.NEXT(1) = 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckSetupDimFilters@10(VAR TaxRegDimFilter@1000 : Record 17218;MessageText@1001 : Text[250]) : Boolean;
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      TempDimBuf1.RESET;
      IF TempDimBuf1.FINDSET THEN
        REPEAT
          TaxRegDimFilter.SETRANGE("Dimension Code",TempDimBuf1."Dimension Code");
          IF TaxRegDimFilter.FINDSET THEN BEGIN
            DimensionValue."Dimension Code" := TempDimBuf1."Dimension Code";
            DimensionValue.Code := TempDimBuf1."Dimension Value Code";
            DimensionValue.SETRANGE("Dimension Code",TempDimBuf1."Dimension Code");
            REPEAT
              DimensionValue.SETFILTER(Code,TaxRegDimFilter."Dimension Value Filter");
              IF NOT DimensionValue.FIND THEN
                EXIT(FALSE);
            UNTIL TaxRegDimFilter.NEXT(1) = 0;
          END;
        UNTIL TempDimBuf1.NEXT = 0;

      TaxRegDimFilter.SETRANGE("Dimension Code");
      IF TaxRegDimFilter.FINDSET THEN
        REPEAT
          IF TaxRegDimFilter."If No Value" <> TaxRegDimFilter."If No Value"::Ignore THEN BEGIN
            TempDimBuf1.SETRANGE("Dimension Code",TaxRegDimFilter."Dimension Code");
            IF NOT TempDimBuf1.FINDFIRST THEN
              CASE TaxRegDimFilter."If No Value" OF
                TaxRegDimFilter."If No Value"::Skip:
                  EXIT(FALSE);
                TaxRegDimFilter."If No Value"::Confirm:
                  BEGIN
                    IF CONFIRM(MessageText + Text1009 + Text1005,
                         FALSE,
                         TaxRegDimFilter."Dimension Code",
                         TaxRegDimFilter."Dimension Value Filter")
                    THEN
                      EXIT(FALSE);
                    ERROR('');
                  END;
                TaxRegDimFilter."If No Value"::Error:
                  ERROR(MessageText + Text1009,
                    TaxRegDimFilter."Dimension Code",
                    TaxRegDimFilter."Dimension Value Filter");
              END;
          END;
        UNTIL TaxRegDimFilter.NEXT(1) = 0;
      EXIT(TRUE);
    END;

    PROCEDURE ValidateSetupDimFilters@11(TaxRegEntrySetup@1000 : Record 17201) : Boolean;
    VAR
      TaxRegDimFilter@1001 : Record 17218;
      TaxReg@1002 : Record 17200;
      MessageText@1003 : Text[250];
    BEGIN
      WITH TaxRegEntrySetup DO BEGIN
        MessageText :=
          STRSUBSTNO(Text1008,
            TaxReg.TABLECAPTION,"Tax Register No.","Line No.");
        TaxRegDimFilter.SETRANGE("Section Code","Section Code");
        TaxRegDimFilter.SETRANGE("Tax Register No.","Tax Register No.");
        TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::"Entry Setup");
        TaxRegDimFilter.SETRANGE("Line No.","Line No.");
        EXIT(CheckSetupDimFilters(TaxRegDimFilter,MessageText))
      END;
    END;

    PROCEDURE SetLedgEntryDim@12(TaxRegSectionCode@1000 : Code[10];DimSetID@1210000 : Integer);
    VAR
      TempDimSetEntry@1210002 : TEMPORARY Record 480;
      DimMgt@1210001 : Codeunit 408;
    BEGIN
      IF TaxRegSection.Code <> TaxRegSectionCode THEN
        TaxRegSection.GET(TaxRegSectionCode);
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;

      DimMgt.GetDimensionSet(TempDimSetEntry,DimSetID);
      IF TempDimSetEntry.FINDSET THEN
        REPEAT
          TempDimBuf1."Dimension Code" := TempDimSetEntry."Dimension Code";
          TempDimBuf1."Dimension Value Code" := TempDimSetEntry."Dimension Value Code";
          TempDimBuf1.INSERT;
        UNTIL TempDimSetEntry.NEXT = 0;
    END;

    PROCEDURE CheckDimComb@13(DimComb@1000 : Record 350;TaxRegSectionCode@1001 : Code[10]);
    VAR
      TaxRegDimComb@1002 : Record 17215;
      TaxRegDimValueComb@1003 : Record 17216;
      TaxRegDimDefValue@1004 : Record 17217;
    BEGIN
      TaxRegDimComb.SETRANGE("Section Code",TaxRegSectionCode);
      TaxRegDimComb.SETRANGE("Dimension 1 Code",DimComb."Dimension 1 Code");
      TaxRegDimComb.SETRANGE("Dimension 2 Code",DimComb."Dimension 2 Code");
      IF TaxRegDimComb.FINDSET THEN BEGIN
        REPEAT
          IF TaxRegDimComb."Combination Restriction" = TaxRegDimComb."Combination Restriction"::Limited THEN BEGIN
            TaxRegDimValueComb.SETRANGE("Section Code",TaxRegDimComb."Section Code");
            TaxRegDimValueComb.SETRANGE("Tax Register No.",TaxRegDimComb."Tax Register No.");
            TaxRegDimValueComb.SETRANGE("Line No.",TaxRegDimComb."Line No.");
            TaxRegDimValueComb.SETRANGE("Dimension 1 Code",TaxRegDimComb."Dimension 1 Code");
            TaxRegDimValueComb.SETRANGE("Dimension 2 Code",TaxRegDimComb."Dimension 2 Code");
            IF TaxRegDimValueComb.FINDSET THEN
              REPEAT
                IF TaxRegDimValueComb."Type Limit" = TaxRegDimValueComb."Type Limit"::Blocked THEN BEGIN
                  TaxRegDimDefValue.SETRANGE("Section Code",TaxRegDimValueComb."Section Code");
                  TaxRegDimDefValue.SETRANGE("Tax Register No.",TaxRegDimValueComb."Tax Register No.");
                  TaxRegDimDefValue.SETRANGE("Line No.",TaxRegDimValueComb."Line No.");
                  TaxRegDimDefValue.SETRANGE("Dimension 1 Code",TaxRegDimValueComb."Dimension 1 Code");
                  TaxRegDimDefValue.SETRANGE("Dimension 1 Value Code",TaxRegDimValueComb."Dimension 1 Value Code");
                  TaxRegDimDefValue.SETRANGE("Dimension 2 Code",TaxRegDimValueComb."Dimension 2 Code");
                  TaxRegDimDefValue.SETRANGE("Dimension 2 Value Code",TaxRegDimValueComb."Dimension 2 Value Code");
                  IF TaxRegDimDefValue.FINDFIRST THEN
                    IF DimComb."Combination Restriction" = DimComb."Combination Restriction"::Blocked THEN
                      ERROR(Text1001,
                        TaxRegDimDefValue.TABLECAPTION,
                        TaxRegDimDefValue.FIELDCAPTION("Dimension 1 Code"),TaxRegDimDefValue."Dimension 1 Code",
                        TaxRegDimDefValue.FIELDCAPTION("Dimension 2 Code"),TaxRegDimDefValue."Dimension 2 Code",
                        TaxRegDimDefValue.FIELDCAPTION("Dimension Code"),TaxRegDimDefValue."Dimension Code",
                        TaxRegDimDefValue.FIELDCAPTION("Dimension Value"),TaxRegDimDefValue."Dimension Value");
                END;
              UNTIL TaxRegDimValueComb.NEXT(1) = 0;
          END;
        UNTIL TaxRegDimComb.NEXT(1) = 0;
      END;
    END;

    PROCEDURE CheckDimCode@14(Dim@1000 : Record 348;TaxRegSectionCode@1001 : Code[10]);
    VAR
      TaxRegDimComb@1002 : Record 17215;
      TaxRegDimDefValue@1003 : Record 17217;
    BEGIN
      IF TaxRegSectionCode <> '' THEN
        TaxRegDimComb.SETRANGE("Section Code",TaxRegSectionCode);
      TaxRegDimComb.SETRANGE("Dimension 1 Code",Dim.Code);
      IF TaxRegDimComb.FINDFIRST THEN
        ERROR(Text1002,
          TaxRegDimComb.TABLECAPTION,
          TaxRegDimComb.FIELDCAPTION("Dimension 1 Code"),TaxRegDimComb."Dimension 1 Code");

      TaxRegDimComb.RESET;
      IF TaxRegSectionCode <> '' THEN
        TaxRegDimComb.SETRANGE("Section Code",TaxRegSectionCode);
      TaxRegDimComb.SETRANGE("Dimension 2 Code",Dim.Code);
      IF TaxRegDimComb.FINDFIRST THEN
        ERROR(Text1002,
          TaxRegDimComb.TABLECAPTION,
          TaxRegDimComb.FIELDCAPTION("Dimension 2 Code"),TaxRegDimComb."Dimension 2 Code");

      IF TaxRegSectionCode <> '' THEN
        TaxRegDimDefValue.SETRANGE("Section Code",TaxRegSectionCode);
      TaxRegDimDefValue.SETRANGE("Dimension Code",Dim.Code);
      IF TaxRegDimDefValue.FINDFIRST THEN
        ERROR(Text1002,
          TaxRegDimDefValue.TABLECAPTION,
          TaxRegDimDefValue.FIELDCAPTION("Dimension Code"),TaxRegDimDefValue."Dimension Code");
    END;

    PROCEDURE CheckDimValue@15(DimValue@1000 : Record 349;TaxRegSectionCode@1001 : Code[10]);
    VAR
      TaxRegDimValueComb@1003 : Record 17216;
      TaxRegDimDefValue@1004 : Record 17217;
    BEGIN
      TaxRegDimValueComb.SETRANGE("Section Code",TaxRegSectionCode);
      IF TaxRegSectionCode <> '' THEN
        TaxRegDimValueComb.SETRANGE("Dimension 1 Code",DimValue."Dimension Code");
      TaxRegDimValueComb.SETRANGE("Dimension 1 Value Code",DimValue.Code);
      IF TaxRegDimValueComb.FINDFIRST THEN
        ERROR(Text1003,
          TaxRegDimValueComb.TABLECAPTION,
          TaxRegDimValueComb.FIELDCAPTION("Dimension 1 Code"),TaxRegDimValueComb."Dimension 1 Code",
          TaxRegDimValueComb.FIELDCAPTION("Dimension 1 Value Code"),TaxRegDimValueComb."Dimension 1 Value Code");

      TaxRegDimValueComb.RESET;
      IF TaxRegSectionCode <> '' THEN
        TaxRegDimValueComb.SETRANGE("Section Code",TaxRegSectionCode);
      TaxRegDimValueComb.SETRANGE("Dimension 2 Code",DimValue."Dimension Code");
      TaxRegDimValueComb.SETRANGE("Dimension 2 Value Code",DimValue.Code);
      IF TaxRegDimValueComb.FINDFIRST THEN
        ERROR(Text1003,
          TaxRegDimValueComb.TABLECAPTION,
          TaxRegDimValueComb.FIELDCAPTION("Dimension 2 Code"),TaxRegDimValueComb."Dimension 2 Code",
          TaxRegDimValueComb.FIELDCAPTION("Dimension 2 Value Code"),TaxRegDimValueComb."Dimension 2 Value Code");

      TaxRegDimDefValue.SETRANGE("Section Code",TaxRegSectionCode);
      IF TaxRegSectionCode <> '' THEN
        TaxRegDimDefValue.SETRANGE("Dimension Code",DimValue."Dimension Code");
      TaxRegDimDefValue.SETRANGE("Dimension Value",DimValue.Code);
      IF TaxRegDimDefValue.FINDFIRST THEN
        ERROR(Text1003,
          TaxRegDimDefValue.TABLECAPTION,
          TaxRegDimDefValue.FIELDCAPTION("Dimension Code"),TaxRegDimDefValue."Dimension Code",
          TaxRegDimDefValue.FIELDCAPTION("Dimension Value"),TaxRegDimDefValue."Dimension Value");
    END;

    PROCEDURE SetDimFilters2TaxGLRecordRef@16(TaxRegTemplate@1000 : Record 17202;VAR TaxRegRecordRef@1001 : RecordRef);
    VAR
      TaxRegGLEntry@1002 : Record 17209;
      TaxRegDimFilter@1003 : Record 17218;
      TaxRegFieldRef@1004 : FieldRef;
    BEGIN
      TaxRegDimFilter.SETRANGE("Section Code",TaxRegTemplate."Section Code");
      TaxRegDimFilter.SETRANGE("Tax Register No.",TaxRegTemplate.Code);
      TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::Template);
      TaxRegDimFilter.SETRANGE("Line No.",TaxRegTemplate."Line No.");
      TaxRegDimFilter.SETFILTER("Dimension Value Filter",'<>%1','');
      IF TaxRegDimFilter.FINDSET THEN BEGIN
        IF TaxRegSection.Code <> TaxRegTemplate."Section Code" THEN
          TaxRegSection.GET(TaxRegTemplate."Section Code");
        REPEAT
          IF TaxRegSection."Dimension 1 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegGLEntry.FIELDNO("Dimension 1 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 2 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegGLEntry.FIELDNO("Dimension 2 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 3 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegGLEntry.FIELDNO("Dimension 3 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 4 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegGLEntry.FIELDNO("Dimension 4 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
        UNTIL TaxRegDimFilter.NEXT(1) = 0;
      END;
    END;

    PROCEDURE SetDimFilters2TaxItemRecordRef@17(TaxRegTemplate@1000 : Record 17202;VAR TaxRegRecordRef@1001 : RecordRef);
    VAR
      TaxRegItemEntry@1002 : Record 17212;
      TaxRegDimFilter@1003 : Record 17218;
      TaxRegFieldRef@1004 : FieldRef;
    BEGIN
      TaxRegDimFilter.SETRANGE("Section Code",TaxRegTemplate."Section Code");
      TaxRegDimFilter.SETRANGE("Tax Register No.",TaxRegTemplate.Code);
      TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::Template);
      TaxRegDimFilter.SETRANGE("Line No.",TaxRegTemplate."Line No.");
      TaxRegDimFilter.SETFILTER("Dimension Value Filter",'<>%1','');
      IF TaxRegDimFilter.FINDSET THEN BEGIN
        IF TaxRegSection.Code <> TaxRegTemplate."Section Code" THEN
          TaxRegSection.GET(TaxRegTemplate."Section Code");
        REPEAT
          IF TaxRegSection."Dimension 1 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegItemEntry.FIELDNO("Dimension 1 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 2 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegItemEntry.FIELDNO("Dimension 2 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 3 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegItemEntry.FIELDNO("Dimension 3 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 4 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegItemEntry.FIELDNO("Dimension 4 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
        UNTIL TaxRegDimFilter.NEXT(1) = 0;
      END;
    END;

    PROCEDURE SetDimFilters2TaxPRRecordRef@18(TaxRegTemplate@1000 : Record 17202;VAR TaxRegRecordRef@1001 : RecordRef);
    VAR
      TaxRegPREntry@1002 : Record 17214;
      TaxRegDimFilter@1003 : Record 17218;
      TaxRegFieldRef@1004 : FieldRef;
    BEGIN
      TaxRegDimFilter.SETRANGE("Section Code",TaxRegTemplate."Section Code");
      TaxRegDimFilter.SETRANGE("Tax Register No.",TaxRegTemplate.Code);
      TaxRegDimFilter.SETRANGE(Define,TaxRegDimFilter.Define::Template);
      TaxRegDimFilter.SETRANGE("Line No.",TaxRegTemplate."Line No.");
      TaxRegDimFilter.SETFILTER("Dimension Value Filter",'<>%1','');
      IF TaxRegDimFilter.FINDSET THEN BEGIN
        IF TaxRegSection.Code <> TaxRegTemplate."Section Code" THEN
          TaxRegSection.GET(TaxRegTemplate."Section Code");
        REPEAT
          IF TaxRegSection."Dimension 1 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegPREntry.FIELDNO("Dimension 1 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 2 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegPREntry.FIELDNO("Dimension 2 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 3 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegPREntry.FIELDNO("Dimension 3 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
          IF TaxRegSection."Dimension 4 Code" = TaxRegDimFilter."Dimension Code" THEN BEGIN
            TaxRegFieldRef := TaxRegRecordRef.FIELD(TaxRegPREntry.FIELDNO("Dimension 4 Value Code"));
            TaxRegFieldRef.SETFILTER(TaxRegDimFilter."Dimension Value Filter");
          END;
        UNTIL TaxRegDimFilter.NEXT(1) = 0;
      END;
    END;

    PROCEDURE CheckDimRestrictions@19(VAR TaxRegDimCorrFilter@1000 : Record 17219) : Boolean;
    VAR
      TempDimBuf0@1001 : TEMPORARY Record 360;
      TaxRegDimComb@1003 : Record 17215;
      TempTaxRegDimComb@1004 : TEMPORARY Record 17215;
      TaxRegDimValueComb@1005 : Record 17216;
      TaxRegDimDefaultValue@1006 : Record 17217;
      SectionCode@1007 : Code[10];
      RegisterNo@1008 : Code[10];
      LineNo@1009 : Integer;
      CurrentDimCode@1010 : Code[20];
      CurrentDimValCode@1011 : Code[20];
      NextRecord@1012 : Boolean;
    BEGIN
      TempDimBuf2.DELETEALL;

      TempDimBuf1.RESET;
      IF NOT TempDimBuf1.FINDFIRST THEN
        EXIT(TRUE);

      IF NOT TaxRegDimCorrFilter.FINDFIRST THEN BEGIN
        REPEAT
          TempDimBuf2 := TempDimBuf1;
          TempDimBuf2.INSERT;
        UNTIL TempDimBuf1.NEXT(1) = 0;
        EXIT(TRUE);
      END;

      TaxRegDimComb.SETCURRENTKEY("Section Code","Entry No.");
      TaxRegDimComb.SETRANGE("Section Code",TaxRegDimCorrFilter."Section Code");

      LineNo := -1;
      REPEAT
        TaxRegDimComb.SETRANGE("Entry No.",TaxRegDimCorrFilter."Connection Entry No.");
        TaxRegDimComb.FINDFIRST;
        TempTaxRegDimComb := TaxRegDimComb;
        TempTaxRegDimComb.INSERT;
        IF LineNo <> -1 THEN
          IF LineNo <> TaxRegDimComb."Line No." THEN BEGIN
            LineNo := LineNo;
            ERROR(Text1010,LineNo,TaxRegDimComb."Line No.");
          END;
        LineNo := TaxRegDimComb."Line No.";
      UNTIL TaxRegDimCorrFilter.NEXT(1) = 0;

      SectionCode := TaxRegDimComb."Section Code";
      RegisterNo := TaxRegDimComb."Tax Register No.";
      LineNo := TaxRegDimComb."Line No.";

      TaxRegDimDefaultValue.SETRANGE("Section Code",SectionCode);
      TaxRegDimDefaultValue.SETRANGE("Tax Register No.",RegisterNo);
      TaxRegDimDefaultValue.SETRANGE("Line No.",LineNo);

      REPEAT
        TempDimBuf0 := TempDimBuf1;
        TempDimBuf0.INSERT;
      UNTIL TempDimBuf1.NEXT(1) = 0;

      WHILE TempDimBuf0.FINDSET DO BEGIN
        CurrentDimCode := TempDimBuf0."Dimension Code";
        CurrentDimValCode := TempDimBuf0."Dimension Value Code";
        TempDimBuf0.DELETE;
        NextRecord := FALSE;
        IF TaxRegDimComb.GET(SectionCode,RegisterNo,LineNo,CurrentDimCode,'') THEN BEGIN
          IF TaxRegDimComb."Combination Restriction" = TaxRegDimComb."Combination Restriction"::Blocked THEN
            EXIT(FALSE);
          IF TaxRegDimValueComb.GET(SectionCode,RegisterNo,LineNo,CurrentDimCode,CurrentDimValCode,'','') THEN BEGIN
            IF TaxRegDimValueComb."Type Limit" = TaxRegDimValueComb."Type Limit"::Blocked THEN
              EXIT(FALSE);
            TaxRegDimDefaultValue.SETRANGE("Dimension 1 Code",CurrentDimCode);
            TaxRegDimDefaultValue.SETRANGE("Dimension 1 Value Code",CurrentDimValCode);
            TaxRegDimDefaultValue.SETFILTER("Dimension 2 Code",'''''');
            TaxRegDimDefaultValue.SETFILTER("Dimension 2 Value Code",'''''');
            IF TaxRegDimDefaultValue.FINDSET THEN
              REPEAT
                TempDimBuf2."Dimension Code" := TaxRegDimDefaultValue."Dimension Code";
                TempDimBuf2."Dimension Value Code" := TaxRegDimDefaultValue."Dimension Value";
                TempDimBuf2.INSERT;
              UNTIL TaxRegDimDefaultValue.NEXT(1) = 0;
            NextRecord := TRUE;
          END;
        END ELSE
          IF TempDimBuf0.FINDSET THEN
            REPEAT
              IF CurrentDimCode > TempDimBuf0."Dimension Code" THEN BEGIN
                IF TaxRegDimComb.GET(SectionCode,RegisterNo,LineNo,TempDimBuf0."Dimension Code",CurrentDimCode) THEN BEGIN
                  IF TaxRegDimComb."Combination Restriction" = TaxRegDimComb."Combination Restriction"::Blocked THEN
                    EXIT(FALSE);
                  IF TaxRegDimValueComb.GET(SectionCode,RegisterNo,LineNo,CurrentDimCode,CurrentDimValCode,
                       TempDimBuf0."Dimension Code",TempDimBuf0."Dimension Value Code")
                  THEN BEGIN
                    IF TaxRegDimValueComb."Type Limit" = TaxRegDimValueComb."Type Limit"::Blocked THEN
                      EXIT(FALSE);
                    TaxRegDimDefaultValue.SETRANGE("Dimension 1 Code",CurrentDimCode);
                    TaxRegDimDefaultValue.SETRANGE("Dimension 1 Value Code",CurrentDimValCode);
                    TaxRegDimDefaultValue.SETRANGE("Dimension 2 Code",TempDimBuf0."Dimension Code");
                    TaxRegDimDefaultValue.SETRANGE("Dimension 2 Value Code",TempDimBuf0."Dimension Value Code");
                    IF TaxRegDimDefaultValue.FINDSET THEN
                      REPEAT
                        TempDimBuf2."Dimension Code" := TaxRegDimDefaultValue."Dimension Code";
                        TempDimBuf2."Dimension Value Code" := TaxRegDimDefaultValue."Dimension Value";
                        TempDimBuf2.INSERT;
                      UNTIL TaxRegDimDefaultValue.NEXT(1) = 0;
                    NextRecord := TRUE;
                  END;
                END;
              END ELSE
                IF TaxRegDimComb.GET(SectionCode,RegisterNo,LineNo,CurrentDimCode,TempDimBuf0."Dimension Code") THEN BEGIN
                  IF TaxRegDimComb."Combination Restriction" = TaxRegDimComb."Combination Restriction"::Blocked THEN
                    EXIT(FALSE);
                  IF TaxRegDimValueComb.GET(SectionCode,RegisterNo,LineNo,
                       TempDimBuf0."Dimension Code",TempDimBuf0."Dimension Value Code",
                       CurrentDimCode,CurrentDimValCode)
                  THEN BEGIN
                    IF TaxRegDimValueComb."Type Limit" = TaxRegDimValueComb."Type Limit"::Blocked THEN
                      EXIT(FALSE);
                    TaxRegDimDefaultValue.SETRANGE("Dimension 1 Code",TempDimBuf0."Dimension Code");
                    TaxRegDimDefaultValue.SETRANGE("Dimension 1 Value Code",TempDimBuf0."Dimension Value Code");
                    TaxRegDimDefaultValue.SETRANGE("Dimension 2 Code",CurrentDimCode);
                    TaxRegDimDefaultValue.SETRANGE("Dimension 2 Value Code",CurrentDimValCode);
                    IF TaxRegDimDefaultValue.FINDSET THEN
                      REPEAT
                        TempDimBuf2."Dimension Code" := TaxRegDimDefaultValue."Dimension Code";
                        TempDimBuf2."Dimension Value Code" := TaxRegDimDefaultValue."Dimension Value";
                        TempDimBuf2.INSERT;
                      UNTIL TaxRegDimDefaultValue.NEXT(1) = 0;
                    NextRecord := TRUE;
                  END;
                END;
            UNTIL NextRecord OR (TempDimBuf0.NEXT = 0);
        IF NOT NextRecord THEN BEGIN
          TempDimBuf2."Dimension Code" := CurrentDimCode;
          TempDimBuf2."Dimension Value Code" := CurrentDimValCode;
          TempDimBuf2.INSERT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SetDimFilters2GLCorrAnViewEntry@1210000(VAR GLCorrAnalysisViewEntry@1210000 : Record 14942;GLCorrAnalysisView@1210003 : Record 14940;TaxRegTemplate@1210002 : Record 17202;TaxRegEntrySetup@1210001 : Record 17201);
    BEGIN
      GLCorrAnalysisViewEntry.FILTERGROUP(2);
      GLCorrAnalysisViewEntry.SETFILTER(
        "Debit Dimension 1 Value Code",
        TaxRegTemplate.GetGLCorrDimFilter(GLCorrAnalysisView."Debit Dimension 1 Code",0));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Debit Dimension 2 Value Code",
        TaxRegTemplate.GetGLCorrDimFilter(GLCorrAnalysisView."Debit Dimension 2 Code",0));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Debit Dimension 3 Value Code",
        TaxRegTemplate.GetGLCorrDimFilter(GLCorrAnalysisView."Debit Dimension 3 Code",0));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Credit Dimension 1 Value Code",
        TaxRegTemplate.GetGLCorrDimFilter(GLCorrAnalysisView."Credit Dimension 1 Code",1));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Credit Dimension 2 Value Code",
        TaxRegTemplate.GetGLCorrDimFilter(GLCorrAnalysisView."Credit Dimension 2 Code",1));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Credit Dimension 3 Value Code",
        TaxRegTemplate.GetGLCorrDimFilter(GLCorrAnalysisView."Credit Dimension 3 Code",1));
      GLCorrAnalysisViewEntry.FILTERGROUP(4);
      GLCorrAnalysisViewEntry.SETFILTER(
        "Debit Dimension 1 Value Code",
        TaxRegEntrySetup.GetGLCorrDimFilter(GLCorrAnalysisView."Debit Dimension 1 Code",0));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Debit Dimension 2 Value Code",
        TaxRegEntrySetup.GetGLCorrDimFilter(GLCorrAnalysisView."Debit Dimension 2 Code",0));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Debit Dimension 3 Value Code",
        TaxRegEntrySetup.GetGLCorrDimFilter(GLCorrAnalysisView."Debit Dimension 3 Code",0));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Credit Dimension 1 Value Code",
        TaxRegEntrySetup.GetGLCorrDimFilter(GLCorrAnalysisView."Credit Dimension 1 Code",1));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Credit Dimension 2 Value Code",
        TaxRegEntrySetup.GetGLCorrDimFilter(GLCorrAnalysisView."Credit Dimension 2 Code",1));
      GLCorrAnalysisViewEntry.SETFILTER(
        "Credit Dimension 3 Value Code",
        TaxRegEntrySetup.GetGLCorrDimFilter(GLCorrAnalysisView."Credit Dimension 3 Code",1));
      GLCorrAnalysisViewEntry.FILTERGROUP(0);
    END;

    BEGIN
    END.
  }
}

