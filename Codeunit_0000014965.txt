OBJECT Codeunit 14965 Export Payroll Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=09.09.14;
    Time=12:00:00;
    Version List=NAVRU8.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempDimValue2@1210005 : TEMPORARY Record 349;
      TempDimValue3@1210004 : TEMPORARY Record 349;
      TempEmployee2@1210003 : TEMPORARY Record 5200;
      TempEmployee3@1210002 : TEMPORARY Record 5200;
      FileMgt@1210006 : Codeunit 419;
      xlApp@1011 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlWorkSheet@1009 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlWorkSheet2@1008 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlPivotTable@1006 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";
      xlPivotCache@1005 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{0002441C-0000-0000-C000-000000000046}:Unknown Automation Server.PivotCache";
      xlPivotField@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020874-0000-0000-C000-000000000046}:Unknown Automation Server.PivotField";
      xlWorkSheet3@1038 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      NoOfColumns@1001 : Integer;
      MaxLevel@1039 : Integer;
      MaxLevelDim@1019 : ARRAY [4] OF Integer;
      CharsNavision@1016 : Text[250];
      CharsWindows@1015 : Text[250];
      FileName@1013 : Text[250];
      Text002@1023 : TextConst 'ENU=General Info._;RUS=Общая информация._';
      Text003@1020 : TextConst 'ENU=None;RUS=Нет';
      Text004@1033 : TextConst 'ENU=Day;RUS=День';
      Text005@1024 : TextConst 'ENU=Week;RUS=Неделя';
      Text006@1014 : TextConst 'ENU=Month;RUS=Месяц';
      Text007@1025 : TextConst 'ENU=Quarter;RUS=Квартал';
      Text008@1026 : TextConst 'ENU=Year;RUS=Год';
      Text009@1027 : TextConst 'ENU=Payroll Period;RUS=Зарплатный период';
      Text011@1029 : TextConst 'ENU="Analysis by Dimension ";RUS="Анализ по измерению "';
      Text012@1030 : TextConst 'ENU=Amount Type;RUS=Тип суммы';
      Text014@1210001 : TextConst 'ENU=Org. Unit Filter;RUS=Фильтр по подразделению';
      Text015@1018 : TextConst 'ENU=Element Group Filter;RUS=Фильтр по группе элементов';
      Text016@1210000 : TextConst 'ENU=Date Filter;RUS=Фильтр по дате';
      Text017@1034 : TextConst 'ENU=Pivot Table_;RUS=Сводная таблица_';
      Text018@1017 : TextConst 'ENU=Employee;RUS=Сотрудник';
      Text019@1035 : TextConst 'ENU=Period;RUS=Период';
      Text022@1043 : TextConst 'ENU=Level;RUS=Уровень';
      Employee@1044 : Code[20];
      Text023@1040 : TextConst 'ENU=Analysis View Name;RUS=Название аналитического отчета';
      Text028@1048 : TextConst 'ENU=Show Opposite Sign;RUS=Показать с против. знаком';
      Text029@1004 : TextConst 'ENU=Yes;RUS=Да';
      Text030@1003 : TextConst 'ENU=No;RUS=Нет';
      Text031@1051 : TextConst 'ENU=Data_;RUS=Данные_';
      Text032@1000 : TextConst 'ENU=Payroll Amount;RUS=Сумма зарплаты';
      Text033@1053 : TextConst 'ENU=Taxable Amount;RUS=Налогооблагаемая сумма';
      Text039@1036 : TextConst 'ENU=Element Type Filter;RUS=Фильтр по типу элемента';

    PROCEDURE ExportData@3(VAR PayrollAnalysisViewEntry@1000 : Record 14966;Line@1002 : Text[30];Column@1005 : Text[30];AmountField@1009 : Option;PeriodType@1010 : Option;ShowName@1011 : Boolean;ElementTypeFilter@1210005 : Code[250];ElementFilter@1210004 : Code[250];ElementGroupFilter@1210003 : Code[250];EmployeeFilter@1210002 : Code[250];OrgUnitFilter@1210001 : Code[250];DateFilter@1210006 : Code[250];Dim1Filter@1015 : Code[250];Dim2Filter@1017 : Code[250];Dim3Filter@1018 : Code[250];Dim4Filter@1210000 : Code[250];Sign@1006 : Boolean);
    VAR
      PayrollElement@1210007 : Record 17400;
      PayrollAnalysisViewFilter@1028 : Record 14967;
      GLSetup@1025 : Record 98;
      ExcelBuffer@1023 : TEMPORARY Record 370;
      PayrollAnalysisView@1001 : Record 14965;
      FormatString@1012 : Text[30];
      NoOfRows@1003 : Integer;
      RowNoCount@1020 : Integer;
      xlSheetName@1032 : Text[100];
    BEGIN
      CREATE(xlApp,TRUE,TRUE);
      InitCharTables;
      WITH PayrollAnalysisViewEntry DO BEGIN
        NoOfRows :=
          CreateFile(
            PayrollAnalysisViewEntry,ShowName,
            ElementTypeFilter,ElementFilter,ElementGroupFilter,EmployeeFilter,OrgUnitFilter,
            Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter,DateFilter,Sign);
        FileName := FileMgt.DownloadTempFile(FileName);
        xlApp.Workbooks._OpenText(FileName);
        xlWorkSheet := xlApp.ActiveSheet;
        xlSheetName := FORMAT(Text031) + "Analysis View Code";
        xlSheetName := CONVERTSTR(xlSheetName,' -+','___');
        xlWorkSheet.Name := xlSheetName;
        xlApp.ActiveWorkbook.Sheets.Add;
        xlWorkSheet3 := xlApp.ActiveSheet;
        xlWorkSheet3.Name := FORMAT(Text002) + CONVERTSTR("Analysis View Code",' -+','___');
        xlWorkSheet3.Range('A1').Value := PayrollAnalysisView.TABLECAPTION;
        xlWorkSheet3.Range('B2').Value := FIELDCAPTION("Analysis View Code");
        xlWorkSheet3.Range('C2').Value := "Analysis View Code";
        xlWorkSheet3.Range('B3').Value := FORMAT(Text023);
        PayrollAnalysisView.GET("Analysis View Code");
        xlWorkSheet3.Range('C3').Value := PayrollAnalysisView.Name;
        RowNoCount := 3;
        IF PayrollAnalysisView."Employee Filter" <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView.FIELDCAPTION("Employee Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := PayrollAnalysisView."Employee Filter";
        END;
        RowNoCount := RowNoCount + 1;

        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView.FIELDCAPTION("Date Compression");

        CASE PayrollAnalysisView."Date Compression" OF
          0:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text003);
          1:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text004);
          2:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text005);
          3:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text006);
          4:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text007);
          5:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text008);
          6:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text009);
        END;
        IF PayrollAnalysisView."Starting Date" <> 0D THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView.FIELDCAPTION("Starting Date");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(PayrollAnalysisView."Starting Date");
        END;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView.FIELDCAPTION("Last Date Updated");
        xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := PayrollAnalysisView."Last Date Updated";
        PayrollAnalysisViewFilter.SETFILTER("Analysis View Code","Analysis View Code");
        IF PayrollAnalysisViewFilter.FIND('-') THEN
          REPEAT
            RowNoCount := RowNoCount + 1;
            xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisViewFilter."Dimension Code";
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := PayrollAnalysisViewFilter."Dimension Value Filter";
          UNTIL PayrollAnalysisViewFilter.NEXT = 0;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('A' + FORMAT(RowNoCount)).Value := FORMAT(Text011);
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text012);

        IF DateFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text016);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := DateFilter;
        END;
        IF ElementTypeFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text039);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := ElementTypeFilter;
        END;
        IF ElementFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView.FIELDCAPTION("Payroll Element Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := ElementFilter;
        END;
        IF ElementGroupFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text015);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := ElementGroupFilter;
        END;
        IF EmployeeFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView.FIELDCAPTION("Employee Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := EmployeeFilter;
        END;
        IF OrgUnitFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text014);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := OrgUnitFilter;
        END;
        IF Dim1Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView."Dimension 1 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim1Filter;
        END;
        IF Dim2Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView."Dimension 2 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim2Filter;
        END;
        IF Dim3Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView."Dimension 3 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim3Filter;
        END;
        IF Dim4Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := PayrollAnalysisView."Dimension 4 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim4Filter;
        END;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text028);
        IF Sign THEN
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text029)
        ELSE
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text030);

        ExcelBuffer.VALIDATE("Column No.",12 + NoOfColumns);
        xlPivotCache :=
          xlApp.ActiveWorkbook.PivotCaches.Add(1,STRSUBSTNO('%1!A1:%2%3',
              xlSheetName,ExcelBuffer.xlColID,NoOfRows + 1));
        xlPivotCache.CreatePivotTable('','PivotTable1');

        xlWorkSheet2 := xlApp.ActiveSheet;
        xlPivotTable := xlWorkSheet2.PivotTables('PivotTable1');
        xlWorkSheet2.Name := FORMAT(Text017) + CONVERTSTR("Analysis View Code",' -+','___');

        IF Line <> '' THEN
          CASE Line OF
            Text018:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(MaxLevel));
            PayrollElement.TABLECAPTION:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(MaxLevel));
            Text019:
              CASE PeriodType OF
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              END;
            Text039:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text039));
            PayrollAnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(PayrollAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            PayrollAnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(PayrollAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            PayrollAnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(PayrollAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
            PayrollAnalysisView."Dimension 4 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(PayrollAnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[4]));
          END;

        xlPivotField.Orientation := 1; // xlRowField
        xlPivotField.Position := 1;

        IF Column <> '' THEN
          CASE Column OF
            Text018:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(MaxLevel));
            Text019:
              CASE PeriodType OF
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              END;
            Text039:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text039));
            PayrollAnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(PayrollAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            PayrollAnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(PayrollAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            PayrollAnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(PayrollAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
            PayrollAnalysisView."Dimension 4 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(PayrollAnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[4]));
          END;
        xlPivotField.Orientation := 2; // xlColumnField
        xlPivotField.Position := 1;

        CASE AmountField OF
          0:
            xlPivotField := xlPivotTable.PivotFields(FORMAT(Text032));
          1:
            xlPivotField := xlPivotTable.PivotFields(FORMAT(Text033));
        END;

        xlPivotField.Orientation := 4; // xlDataField
        xlPivotField.Position := 1;
        xlPivotField."Function" := 0;// sum

        GLSetup.GET;
        FormatString := DELCHR(FORMAT(ROUND(1000.01,GLSetup."Amount Rounding Precision"),0),'<',' ');
        FormatString[1] := '#';
        FormatString[3] := '#';
        FormatString[4] := '#';
        IF STRLEN(FormatString) >= 8 THEN
          FormatString[8] := '0';
        xlPivotField.NumberFormat := FormatString; // '#.##0,00';

        xlPivotTable.SmallGrid := FALSE;
      END;
      xlApp.Visible := TRUE
    END;

    LOCAL PROCEDURE CreateFile@1(VAR PayrollAnalysisViewEntry@1000 : Record 14966;ShowName@1018 : Boolean;ElementTypeFilter@1210004 : Code[250];ElementFilter@1210003 : Code[250];ElementGroupFilter@1210002 : Code[250];EmployeeFilter@1210001 : Code[250];OrgUnitFilter@1210000 : Code[250];Dim1Filter@1025 : Code[250];Dim2Filter@1024 : Code[250];Dim3Filter@1023 : Code[250];Dim4Filter@1210005 : Code[250];DateFilter@1011 : Code[250];Sign@1009 : Boolean) : Integer;
    VAR
      PayrollAnalysisViewEntry2@1001 : Record 14966;
      PayrollAnalysisView@1002 : Record 14965;
      Employee@1015 : Record 5200;
      TextFile@1003 : File;
      Column@1019 : Text[100];
      Line@1004 : ARRAY [5] OF Text[1024];
      Line2@1038 : Text[1024];
      Tab@1005 : Text[1];
      c@1006 : Char;
      StartDate@1028 : Date;
      EndDate@1013 : Date;
      NoOfRows@1008 : Integer;
      WeekNo@1029 : Integer;
      Year@1026 : Integer;
      SignValue@1007 : Integer;
      i@1012 : Integer;
      j@1016 : Integer;
    BEGIN
      TextFile.CREATETEMPFILE;
      FileName := TextFile.NAME + '.txt';
      TextFile.CLOSE;

      TextFile.TEXTMODE(TRUE);
      TextFile.CREATE(FileName);
      PayrollAnalysisViewEntry2.COPY(PayrollAnalysisViewEntry);
      PayrollAnalysisView.GET(PayrollAnalysisViewEntry."Analysis View Code");
      PayrollAnalysisViewEntry2.SETRANGE("Analysis View Code",PayrollAnalysisView.Code);
      IF Employee.FIND('-') THEN
        REPEAT
          TempEmployee3.COPY(Employee);
          TempEmployee3.INSERT;
        UNTIL Employee.NEXT = 0;

      TempEmployee3.SETFILTER("No.",EmployeeFilter);
      IF TempEmployee3.FIND('-') THEN
        REPEAT
          TempEmployee2.COPY(TempEmployee3);
          TempEmployee2.INSERT;
        UNTIL TempEmployee3.NEXT = 0;
      TempEmployee3.SETRANGE("No.");
      FindDimLevel(PayrollAnalysisView."Dimension 1 Code",Dim1Filter,1);
      FindDimLevel(PayrollAnalysisView."Dimension 2 Code",Dim2Filter,2);
      FindDimLevel(PayrollAnalysisView."Dimension 3 Code",Dim3Filter,3);
      FindDimLevel(PayrollAnalysisView."Dimension 4 Code",Dim3Filter,4);

      c := 9;
      Tab[1] := c;
      SignValue := 1;
      IF Sign THEN
        SignValue := -1;

      NoOfRows := 0;

      WITH PayrollAnalysisViewEntry2 DO BEGIN
        FOR i := 0 TO MaxLevel DO BEGIN
          Line[1] := Line[1] + FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
          NoOfColumns := NoOfColumns + 1;
        END;
        IF PayrollAnalysisView."Dimension 1 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[1] DO BEGIN
            Line[1] := Line[1] + PayrollAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF PayrollAnalysisView."Dimension 2 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[2] DO BEGIN
            Line[1] := Line[1] + PayrollAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF PayrollAnalysisView."Dimension 3 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[3] DO BEGIN
            Line[1] := Line[1] + PayrollAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF PayrollAnalysisView."Dimension 4 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[4] DO BEGIN
            Line[1] := Line[1] + PayrollAnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;

        Line[1] := Line[1] + Text004 + Tab + Text005 + Tab + Text006 + Tab + Text007 +
          Tab + Text008 + Tab + Text009 + Tab +
          FIELDCAPTION("Element Code") + Tab +
          FIELDCAPTION("Payroll Element Type") + Tab +
          FIELDCAPTION("Element Group") + Tab +
          FIELDCAPTION("Org. Unit Code") + Tab +
          Text032 + Tab + Text033 + Tab;

        Line[1] := CONVERTSTR(Line[1],CharsNavision,CharsWindows);
        TextFile.WRITE(Line[1]);
        StartDate := "Posting Date";

        IF FIND('-') THEN
          REPEAT
            IF "Posting Date" = NORMALDATE("Posting Date") THEN BEGIN
              IF "Posting Date" >= EndDate THEN
                EndDate := "Posting Date"
              ELSE
                IF "Posting Date" <= StartDate THEN
                  StartDate := "Posting Date";
              Line[1] := '';
              Line[2] := '';
              Line[3] := '';
              Line[4] := '';
              Line[5] := '';
              NoOfRows := NoOfRows + 1;
              IF TempEmployee2.GET("Employee No.") THEN
                TempEmployee2.MARK(TRUE);
              Line[1] := CONVERTSTR(FillOutEmployee("Employee No.",ShowName),CharsNavision,CharsWindows);
              IF PayrollAnalysisView."Dimension 1 Code" <> '' THEN
                Line[2] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 1 Value Code",PayrollAnalysisView."Dimension 1 Code",1,ShowName),
                    CharsNavision,CharsWindows);

              IF PayrollAnalysisView."Dimension 2 Code" <> '' THEN
                Line[3] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 2 Value Code",PayrollAnalysisView."Dimension 2 Code",2,ShowName),
                    CharsNavision,CharsWindows);

              IF PayrollAnalysisView."Dimension 3 Code" <> '' THEN
                Line[4] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 3 Value Code",PayrollAnalysisView."Dimension 3 Code",3,ShowName),
                    CharsNavision,CharsWindows);

              IF PayrollAnalysisView."Dimension 4 Code" <> '' THEN
                Line[5] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 4 Value Code",PayrollAnalysisView."Dimension 4 Code",4,ShowName),
                    CharsNavision,CharsWindows);

              Line2 :=
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                "Element Code" + Tab +
                FORMAT("Payroll Element Type") + Tab +
                "Element Group" + Tab +
                "Org. Unit Code" + Tab +
                FORMAT("Payroll Amount" * SignValue,0,1) + Tab +
                FORMAT("Taxable Amount" * SignValue,0,1) + Tab;

              TextFile.WRITE(Line[1] + Line[2] + Line[3] + Line[4] + Line[5] + Line2);
            END;
          UNTIL NEXT = 0;
      END;

      Line2 := '';
      IF TempEmployee2.FIND('-') THEN
        REPEAT
          IF NOT TempEmployee2.MARK THEN BEGIN
            NoOfRows := NoOfRows + 1;
            Line2 :=
              CONVERTSTR(
                FillOutEmployee(TempEmployee2."No.",ShowName),
                CharsNavision,CharsWindows);
            TextFile.WRITE(Line2);
          END;
        UNTIL TempEmployee2.NEXT = 0;

      IF PayrollAnalysisView."Dimension 1 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim1Filter);
        TempDimValue2.SETFILTER("Dimension Code",PayrollAnalysisView."Dimension 1 Code");
        Line[1] := '';
        FOR j := 1 TO MaxLevel DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,PayrollAnalysisView."Dimension 1 Code",1,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      IF PayrollAnalysisView."Dimension 2 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim2Filter);
        TempDimValue2.SETFILTER("Dimension Code",PayrollAnalysisView."Dimension 2 Code");
        Line[1] := '';
        FOR j := 1 TO (MaxLevel + MaxLevelDim[1]) DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,PayrollAnalysisView."Dimension 2 Code",2,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      IF PayrollAnalysisView."Dimension 3 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim3Filter);
        TempDimValue2.SETFILTER("Dimension Code",PayrollAnalysisView."Dimension 3 Code");
        Line[1] := '';
        FOR j := 1 TO (MaxLevel + MaxLevelDim[1] + MaxLevelDim[2]) DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,PayrollAnalysisView."Dimension 3 Code",3,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Tab + Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      WeekNo := DATE2DWY(StartDate,2);
      Year := DATE2DWY(StartDate,3);
      StartDate := DWY2DATE(1,WeekNo,Year);
      Line2 := '';
      FOR i := 1 TO NoOfColumns DO
        Line2 := Line2 + Tab;

      WHILE StartDate <= EndDate DO BEGIN
        NoOfRows := NoOfRows + 1;
        TextFile.WRITE(
          Line2 + Tab + FORMAT(StartDate) + Tab + FORMAT(CalculatePeriodStart(StartDate,1)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,2)) + Tab + FORMAT(CalculatePeriodStart(StartDate,3)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,4)));
        StartDate := CALCDATE('<1W>',StartDate);
      END;

      TextFile.CLOSE;
      EXIT(NoOfRows);
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record 50;
      PrevPostingDate@1004 : Date;
      PrevCalculatedPostingDate@1005 : Date;
    BEGIN
      CASE DateCompression OF
        0:// Week :
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        1:// Month :
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        2:// Quarter :
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        3:// Year :
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        4:// Period :
          BEGIN
            IF PostingDate <> PrevPostingDate THEN BEGIN
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              IF AccountingPeriod.FINDLAST THEN BEGIN
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              END ELSE
                PrevCalculatedPostingDate := PostingDate;
            END;
            PostingDate := PrevCalculatedPostingDate;
          END;
      END;
      EXIT(PostingDate);
    END;

    PROCEDURE InitCharTables@2();
    VAR
      CharFile@1210000 : File;
      TempFileName@1210001 : Text;
      i@1000 : Integer;
      c@1001 : Char;
    BEGIN
      FOR i := 65 TO 255 DO BEGIN
        c := i;
        CharsWindows[i - 64] := c;
      END;

      CharFile.CREATETEMPFILE;
      TempFileName := CharFile.NAME + '.txt';
      CharFile.CLOSE;
      CharFile.CREATE(TempFileName);
      CharFile.TEXTMODE := TRUE;
      CharFile.WRITE(CharsWindows);
      CharFile.CLOSE;

      TempFileName := FileMgt.DownloadTempFile(TempFileName);

      xlApp.Workbooks.OpenText(TempFileName);
      xlWorkSheet := xlApp.ActiveSheet;
      CharsNavision := xlWorkSheet.Range('A1').Value;
      xlApp.ActiveWorkbook.Close(FALSE);
      IF STRLEN(CharsWindows) <> STRLEN(CharsNavision) THEN BEGIN
        IF (STRLEN(CharsWindows) = STRLEN(CharsNavision) + 2) AND
           (CharsWindows[1] = '"') AND (CharsWindows[STRLEN(CharsWindows)] = '"')
        THEN
          CharsWindows := COPYSTR(CharsWindows,2,STRLEN(CharsWindows) - 2)
        ELSE
          CharsWindows := CharsNavision; // Not possible to translate.
      END;
    END;

    PROCEDURE FindDimLevel@8(DimCode@1000 : Code[20];DimFilter@1001 : Code[250];ArrayNo@1003 : Integer);
    VAR
      DimValue@1002 : Record 349;
    BEGIN
      IF DimCode = '' THEN
        EXIT;
      DimValue.SETRANGE("Dimension Code",DimCode);
      IF DimValue.FIND('-') THEN
        REPEAT
          TempDimValue2.COPY(DimValue);
          TempDimValue2.INSERT;
          TempDimValue3.COPY(DimValue);
          TempDimValue3.INSERT;
        UNTIL DimValue.NEXT = 0;
      TempDimValue2.SETFILTER(Code,DimFilter);
      IF TempDimValue2.FIND('-') THEN
        REPEAT
          IF MaxLevelDim[ArrayNo] < TempDimValue2.Indentation THEN
            MaxLevelDim[ArrayNo] := TempDimValue2.Indentation;
        UNTIL TempDimValue2.NEXT = 0;
    END;

    PROCEDURE FindDimParent@6(VAR Account@1000 : Code[20];DimensionCode@1001 : Code[20]);
    BEGIN
      TempDimValue3.RESET;
      TempDimValue3.SETRANGE("Dimension Code",DimensionCode);
      TempDimValue3.GET(DimensionCode,Account);
      IF TempDimValue3.Indentation <> 0 THEN BEGIN
        TempDimValue3.SETRANGE(Indentation,TempDimValue3.Indentation - 1);
        TempDimValue3.NEXT(-1);
      END;
      Account := TempDimValue3.Code;
    END;

    PROCEDURE FillOutDim@9(DimValueCode@1003 : Code[20];DimCode@1004 : Code[20];DimNo@1005 : Integer;ShowName@1006 : Boolean) Line@1000 : Text[1024];
    VAR
      Indent@1002 : Integer;
      i@1001 : Integer;
      Tab@1008 : Text[1];
      c@1007 : Char;
    BEGIN
      c := 9;
      Tab[1] := c;

      IF DimValueCode <> '' THEN BEGIN
        IF TempDimValue2.GET(DimCode,DimValueCode) THEN
          TempDimValue2.MARK(TRUE);
        Employee := DimValueCode;
        Indent := TempDimValue2.Indentation;
        IF ShowName AND (Employee <> '') THEN
          Line := Employee + ' ' + TempDimValue2.Name + Tab
        ELSE
          Line := Employee + Tab;
        IF Indent <> MaxLevelDim[DimNo] THEN
          FOR i := Indent + 1 TO MaxLevelDim[DimNo] DO
            IF ShowName THEN
              Line := Line + Employee + ' ' + TempDimValue2.Name + Tab
            ELSE
              Line := Line + Employee + Tab;
        IF (Indent <> 0) AND (Employee <> '') THEN
          FOR i := Indent DOWNTO 1 DO BEGIN
            FindDimParent(Employee,DimCode);
            IF ShowName THEN
              Line := Employee + ' ' + TempDimValue3.Name + Tab + Line
            ELSE
              Line := Employee + Tab + Line;
          END;
      END ELSE
        FOR i := 0 TO MaxLevelDim[DimNo] DO
          Line := Line + Tab;
      EXIT(Line)
    END;

    PROCEDURE FillOutEmployee@5(EmployeeNo@1001 : Code[20];ShowName@1005 : Boolean) Line@1009 : Text[1024];
    VAR
      Tab@1003 : Text[1];
      c@1000 : Char;
      i@1004 : Integer;
      Indent@1008 : Integer;
    BEGIN
      c := 9;
      Tab[1] := c;

      Employee := EmployeeNo;
      IF ShowName THEN BEGIN
        TempEmployee3.GET(Employee);
        Line := Employee + ' ' + TempEmployee3."Short Name" + Tab
      END ELSE
        Line := Employee + Tab;
      IF Indent <> MaxLevel THEN
        FOR i := Indent + 1 TO MaxLevel DO
          IF ShowName THEN BEGIN
            TempEmployee3.GET(Employee);
            Line := Line + Employee + ' ' + TempEmployee3."Short Name" + Tab
          END ELSE
            Line := Line + Employee + Tab;
    END;

    PROCEDURE SetCommonFilters@10(CurrentAnalysisViewCode@1210011 : Code[10];VAR PayrollAnalysisViewEntry@1210010 : Record 14966;ElementTypeFilter@1210009 : Code[250];ElementFilter@1210008 : Code[250];ElementGroupFilter@1210007 : Code[250];EmployeeFilter@1210006 : Code[250];OrgUnitFilter@1210005 : Code[250];DateFilter@1210004 : Text[30];Dim1Filter@1210003 : Code[250];Dim2Filter@1210002 : Code[250];Dim3Filter@1210001 : Code[250];Dim4Filter@1210000 : Code[250]);
    BEGIN
      PayrollAnalysisViewEntry.SETRANGE("Analysis View Code",CurrentAnalysisViewCode);
      IF DateFilter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Posting Date",DateFilter);

      IF ElementTypeFilter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Payroll Element Type",ElementTypeFilter);
      IF ElementFilter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Element Code",ElementFilter);
      IF ElementGroupFilter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Element Group",ElementGroupFilter);
      IF EmployeeFilter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Employee No.",EmployeeFilter);
      IF OrgUnitFilter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Org. Unit Code",OrgUnitFilter);

      IF Dim1Filter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",Dim1Filter);
      IF Dim2Filter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",Dim2Filter);
      IF Dim3Filter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",Dim3Filter);
      IF Dim4Filter <> '' THEN
        PayrollAnalysisViewEntry.SETFILTER("Dimension 4 Value Code",Dim4Filter);
    END;

    BEGIN
    END.
  }
}

