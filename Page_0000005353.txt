OBJECT Page 5353 CRM Sales Order List
{
  OBJECT-PROPERTIES
  {
    Date=25.10.16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Microsoft Dynamics CRM Sales Orders;
               RUS=Заказы на продажу Microsoft Dynamics CRM];
    SourceTable=Table5353;
    SourceTableView=WHERE(StateCode=FILTER(Submitted),
                          LastBackofficeSubmit=FILTER(''));
    PageType=List;
    CardPageID=CRM Sales Order;
    OnInit=BEGIN
             CODEUNIT.RUN(CODEUNIT::"CRM Integration Management");
           END;

    OnOpenPage=VAR
                 CRMIntegrationManagement@1000 : Codeunit 5330;
               BEGIN
                 CRMIntegrationEnabled := CRMIntegrationManagement.IsCRMIntegrationEnabled;
               END;

    OnAfterGetRecord=BEGIN
                       HasRecords := NOT ISEMPTY;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           RecalculateRecordCouplingStatus;
                         END;

    ActionList=ACTIONS
    {
      { 24      ;    ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 25      ;1   ;ActionGroup;
                      Name=ActionGroupCRM;
                      CaptionML=[ENU=Dynamics CRM;
                                 RUS=Dynamics CRM] }
      { 11      ;2   ;Action    ;
                      Name=CRMGoToSalesOrder;
                      CaptionML=[ENU=Sales Order;
                                 RUS=Заказ на продажу];
                      ToolTipML=[ENU=Open the coupled Microsoft Dynamics CRM sales order.;
                                 RUS=Открытие связанного заказа на продажу Microsoft Dynamics CRM.];
                      ApplicationArea=#Suite;
                      RunPageOnRec=Yes;
                      Enabled=HasRecords;
                      Image=CoupledOrder;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 IF ISEMPTY THEN
                                   EXIT;
                                 HYPERLINK(CRMIntegrationManagement.GetCRMEntityUrlFromCRMID(DATABASE::"CRM Salesorder",SalesOrderId));
                               END;
                                }
      { 28      ;1   ;ActionGroup;
                      Name=ActionGroupNAV;
                      CaptionML=[ENU=Dynamics NAV;
                                 RUS=Dynamics NAV];
                      Visible=CRMIntegrationEnabled }
      { 30      ;2   ;Action    ;
                      Name=NAVOpenSalesOrderCard;
                      CaptionML=[ENU=Sales Order;
                                 RUS=Заказ на продажу];
                      ToolTipML=[ENU=Open the coupled Dynamics NAV sales order.;
                                 RUS=Открытие связанного заказа на продажу Dynamics NAV.];
                      ApplicationArea=#Suite;
                      Enabled=CRMIsCoupledToRecord;
                      Image=Order;
                      OnAction=VAR
                                 SalesHeader@1000 : Record 36;
                                 CRMSalesOrderToSalesOrder@1001 : Codeunit 5343;
                               BEGIN
                                 IF ISEMPTY THEN
                                   EXIT;

                                 IF NOT CRMSalesOrderToSalesOrder.GetCoupledSalesHeader(Rec,SalesHeader) THEN
                                   ERROR(GETLASTERRORTEXT);

                                 PAGE.RUNMODAL(PAGE::"Sales Order",SalesHeader);
                                 RecalculateRecordCouplingStatus;
                               END;
                                }
      { 29      ;2   ;Action    ;
                      Name=CreateInNAV;
                      CaptionML=[ENU=Create in Dynamics NAV;
                                 RUS=Создать в Dynamics NAV];
                      ToolTipML=[ENU=Create a sales order in Dynamics NAV that is coupled to the CRM entity.;
                                 RUS=Создание в Dynamics NAV заказа на продажу, связанного с сущностью CRM.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Enabled=NOT CRMIsCoupledToRecord;
                      Image=New;
                      OnAction=VAR
                                 SalesHeader@1005 : Record 36;
                                 CRMCouplingManagement@1001 : Codeunit 5331;
                                 CRMSalesOrderToSalesOrder@1000 : Codeunit 5343;
                               BEGIN
                                 IF ISEMPTY THEN
                                   EXIT;

                                 IF CRMSalesOrderToSalesOrder.CreateInNAV(Rec,SalesHeader) THEN BEGIN
                                   COMMIT;
                                   CRMIsCoupledToRecord :=
                                     CRMCouplingManagement.IsRecordCoupledToNAV(SalesOrderId,DATABASE::"Sales Header") AND CRMIntegrationEnabled;
                                   PAGE.RUNMODAL(PAGE::"Sales Order",SalesHeader);
                                 END;
                                 RecalculateRecordCouplingStatus;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 26  ;2   ;Field     ;
                Name=Coupled;
                CaptionML=[ENU=Coupled;
                           RUS=Связано];
                ToolTipML=[ENU=Specifies if the Dynamics CRM record is coupled to Dynamics NAV.;
                           RUS=Указывает, что запись Dynamics CRM связана с Dynamics NAV.];
                ApplicationArea=#Suite;
                SourceExpr=CRMIsCoupledToRecord }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Order ID;
                           RUS=Код заказа];
                ApplicationArea=#Suite;
                SourceExpr=OrderNumber }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Name;
                           RUS=Имя];
                ToolTipML=[ENU=Specifies the name of the record.;
                           RUS=Определяет имя записи.];
                ApplicationArea=#Suite;
                SourceExpr=Name }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Transaction Currency;
                           RUS=Валюта транзакции];
                ApplicationArea=#Suite;
                SourceExpr=TransactionCurrencyIdName }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Price List;
                           RUS=Прайс-лист];
                ToolTipML=[ENU=Specifies a list of your items and their prices, for example, to send to customers. You can create the list for specific customers, campaigns, currencies, or other criteria.;
                           RUS=Определяет список ваших товаров и их цен, например для отправки клиентам. Можно создавать списки по отдельным клиентам, кампаниям, валютам или другим критериям.];
                ApplicationArea=#Suite;
                SourceExpr=PriceLevelIdName }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Prices Locked;
                           RUS=Цены заблокированы];
                ApplicationArea=#Suite;
                SourceExpr=IsPriceLocked }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Total Amount;
                           RUS=Общая сумма];
                ApplicationArea=#Suite;
                SourceExpr=TotalAmount }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Status;
                           RUS=Статус];
                ApplicationArea=#Suite;
                SourceExpr=StateCode }

    { 10  ;2   ;Field     ;
                CaptionML=[ENU=Status Reason;
                           RUS=Причина статуса];
                ApplicationArea=#Suite;
                SourceExpr=StatusCode }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Requested Delivery Date;
                           RUS=Требуемая дата доставки];
                ApplicationArea=#Suite;
                SourceExpr=RequestDeliveryBy }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Date Fulfilled;
                           RUS=Дата выполнения];
                ToolTipML=[ENU=Specifies when the sales order was delivered.;
                           RUS=Определяет дату выполнения заказа на продажу.];
                ApplicationArea=#Suite;
                SourceExpr=DateFulfilled }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Shipping Method;
                           RUS=Метод отгрузки];
                ApplicationArea=#Suite;
                SourceExpr=ShippingMethodCode }

    { 15  ;2   ;Field     ;
                CaptionML=[ENU=Payment Terms;
                           RUS=Условия платежа];
                ToolTipML=[ENU=Specifies the payment terms that you select from on customer cards to define when the customer must pay, such as within 14 days.;
                           RUS=Определяет условия оплаты, выбираемые в карточках клиентов для определения требуемого от клиента срока оплаты, например в течение 14 дней.];
                ApplicationArea=#Suite;
                SourceExpr=PaymentTermsCode }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Freight Terms;
                           RUS=Условия перевозки];
                ToolTipML=[ENU=Specifies the shipment method.;
                           RUS=Определяет метод поставки.];
                ApplicationArea=#Suite;
                SourceExpr=FreightTermsCode }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Bill To Address;
                           RUS=Адрес плательщика];
                ToolTipML=[ENU=Specifies the address that the invoice will be sent to.;
                           RUS=Определяет адрес, по которому будет отправлен счет.];
                ApplicationArea=#Suite;
                SourceExpr=BillTo_Composite }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Ship To;
                           RUS=Получатель];
                ApplicationArea=#Suite;
                SourceExpr=WillCall }

    { 19  ;2   ;Field     ;
                CaptionML=[ENU=Ship To Address;
                           RUS=Адрес получателя];
                ApplicationArea=#Suite;
                SourceExpr=ShipTo_Composite }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Opportunity;
                           RUS=Возможность];
                ToolTipML=[ENU=Specifies the sales opportunity that is coupled to this Dynamics CRM opportunity.;
                           RUS=Определяет возможность продажи, связанную с этой возможной сделкой в Dynamics CRM.];
                ApplicationArea=#Suite;
                SourceExpr=OpportunityIdName }

    { 21  ;2   ;Field     ;
                CaptionML=[ENU=Quote;
                           RUS=Предложение];
                ApplicationArea=#Suite;
                SourceExpr=QuoteIdName }

    { 22  ;2   ;Field     ;
                CaptionML=[ENU=Account;
                           RUS=Организация];
                ToolTipML=[ENU=Specifies the coupled Dynamics CRM account.;
                           RUS=Определяет связанную организацию Dynamics CRM.];
                ApplicationArea=#Suite;
                SourceExpr=GetCustomerName }

    { 23  ;2   ;Field     ;
                CaptionML=[ENU=Contact;
                           RUS=Контакт];
                ToolTipML=[ENU=Specifies the contact person at the customer.;
                           RUS=Определяет контактное лицо у клиента.];
                ApplicationArea=#Suite;
                SourceExpr=ContactIdName }

  }
  CODE
  {
    VAR
      CRMIntegrationEnabled@1000 : Boolean;
      CRMIsCoupledToRecord@1001 : Boolean;
      HasRecords@1002 : Boolean;

    LOCAL PROCEDURE GetCustomerName@1() : Text;
    VAR
      CRMAccount@1000 : Record 5341;
      CRMContact@1001 : Record 5342;
    BEGIN
      IF (CustomerIdType = CustomerIdType::account) AND (NOT ISNULLGUID(CustomerId)) THEN BEGIN
        IF CRMAccount.GET(CustomerId) THEN
          EXIT(CRMAccount.Name);
      END ELSE
        IF CustomerIdType = CustomerIdType::contact THEN
          IF  CRMContact.GET(CustomerId) THEN
            IF CRMAccount.GET(CRMContact.ParentCustomerId) THEN
              EXIT(CRMAccount.Name);
    END;

    LOCAL PROCEDURE RecalculateRecordCouplingStatus@7();
    VAR
      CRMSalesOrderToSalesOrder@1000 : Codeunit 5343;
    BEGIN
      CRMIsCoupledToRecord := FALSE;
      IF CRMIntegrationEnabled THEN
        CRMIsCoupledToRecord := CRMSalesOrderToSalesOrder.CRMIsCoupledToValidRecord(Rec,DATABASE::"Sales Header")
    END;

    BEGIN
    END.
  }
}

