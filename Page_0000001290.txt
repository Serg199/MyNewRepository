OBJECT Page 1290 Payment Reconciliation Journal
{
  OBJECT-PROPERTIES
  {
    Date=22.05.17;
    Time=11:22:41;
    Modified=Yes;
    Version List=NAVW110.00,NOS-26;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payment Reconciliation Journal;
               RUS=Журнал выверки платежей];
    LinksAllowed=No;
    SourceTable=Table274;
    DataCaptionExpr="Bank Account No.";
    DelayedInsert=Yes;
    SourceTableView=WHERE(Statement Type=CONST(Payment Application));
    PageType=Worksheet;
    AutoSplitKey=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Manual Application,Review,Details,View;
                                RUS=Создать,Обработать,Отчет,Применение вручную,Проверить,Сведения,Просмотреть];
    OnOpenPage=BEGIN
                 PageClosedByPosting := FALSE;
               END;

    OnAfterGetRecord=VAR
                       PaymentMatchingDetails@1000 : Record 1299;
                     BEGIN
                       MatchDetails := PaymentMatchingDetails.MergeMessages(Rec);

                       GetAppliedPmtData(AppliedPmtEntry,RemainingAmountAfterPosting,StatementToRemAmtDifference,PmtAppliedToTxt);
                       ShowShortcutDimCode(ShortcutDimCode);
                     END;

    OnNewRecord=BEGIN
                  SetUpNewLine;
                  AppliedPmtEntry.INIT;
                  StatementToRemAmtDifference := 0;
                  RemainingAmountAfterPosting := 0;
                END;

    OnAfterGetCurrRecord=BEGIN
                           IF NOT IsBankAccReconInitialized THEN BEGIN
                             BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
                             IsBankAccReconInitialized := TRUE;
                           END;

                           FinanceChargeMemoEnabled := "Account Type" = "Account Type"::Customer;
                           BankAccReconciliation.CALCFIELDS("Total Balance on Bank Account","Total Unposted Applied Amount","Total Transaction Amount",
                             "Total Applied Amount","Total Outstd Bank Transactions","Total Outstd Payments","Total Applied Amount Payments");

                           OutstandingTransactions := BankAccReconciliation."Total Outstd Bank Transactions" -
                             (BankAccReconciliation."Total Applied Amount" - BankAccReconciliation."Total Unposted Applied Amount") +
                             BankAccReconciliation."Total Applied Amount Payments";
                           OutstandingPayments := BankAccReconciliation."Total Outstd Payments" - BankAccReconciliation."Total Applied Amount Payments";

                           UpdateBalanceAfterPostingStyleExpr;

                           TestIfFiltershaveBeenRemovedWithRefreshAndClose;
                         END;

    ActionList=ACTIONS
    {
      { 45      ;0   ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 57      ;1   ;ActionGroup;
                      CaptionML=[ENU=Process;
                                 RUS=Обработать] }
      { 22      ;2   ;Action    ;
                      Name=ImportBankTransactions;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Import Bank Transactions;
                                 RUS=&Импорт банковских транзакций];
                      ToolTipML=[ENU=Import a file for transaction payments that was made from your bank account and apply the payments to the entry. The file name must end in .csv, .txt, asc, or .xml.;
                                 RUS=Импорт файла платежей, созданного на основе банковского счета, и применение платежей к операции. Имя файла должно оканчиваться на .csv, .txt, asc или .xml.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
                                 BankAccReconciliation.ImportBankStatement;
                                 IF BankAccReconciliation.FIND THEN;
                               END;
                                }
      { 29      ;2   ;Action    ;
                      Name=ApplyAutomatically;
                      CaptionML=[ENU=Apply Automatically;
                                 RUS=Применить автоматически];
                      ToolTipML=[ENU=Apply payments to their related open entries based on data matches between bank transaction text and entry information.;
                                 RUS=Применение платежей к соответствующим открытым операциям на основе совпадений данных между текстом банковских транзакций и информации в операциях.];
                      ApplicationArea=#Basic,#Suite;
                      RunPageOnRec=Yes;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MapAccounts;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 BankAccReconciliation@1000 : Record 273;
                                 AppliedPaymentEntry@1001 : Record 1294;
                               BEGIN
                                 AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
                                 AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
                                 AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");

                                 IF AppliedPaymentEntry.COUNT > 0 THEN
                                   IF NOT CONFIRM(RemoveExistingApplicationsQst) THEN
                                     EXIT;

                                 BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
                                 CODEUNIT.RUN(CODEUNIT::"Match Bank Pmt. Appl.",BankAccReconciliation);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 58      ;2   ;ActionGroup;
                      CaptionML=[ENU=Post;
                                 RUS=Учет];
                      Image=Post }
      { 72      ;3   ;Action    ;
                      Name=TestReport;
                      CaptionML=[ENU=&Test Report;
                                 RUS=&Тестовый отчет];
                      ToolTipML=[ENU=Preview the resulting payment reconciliations to see the consequences before you perform the actual posting.;
                                 RUS=Предварительный просмотр итоговых выверок платежей, чтобы увидеть последствия перед фактическим учетом.];
                      ApplicationArea=#Basic,#Suite;
                      Image=TestReport;
                      OnAction=VAR
                                 TestReportPrint@1001 : Codeunit 228;
                               BEGIN
                                 BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
                                 TestReportPrint.PrintBankAccRecon(BankAccReconciliation);
                               END;
                                }
      { 35      ;3   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Post Payments and Reconcile Bank Account;
                                 RUS=Учесть платежи и выверить банковский счет];
                      ToolTipML=[ENU=Reconcile the bank account for payments that you post with the journal and close related ledger entries.;
                                 RUS=Повторная выверка банковского счета по платежам, которые учтены с использованием журнала, и закрытие соответствующих операций книги.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostApplication;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 InvokePost(FALSE)
                               END;
                                }
      { 60      ;3   ;Action    ;
                      Name=PostPaymentsOnly;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Post Payments Only;
                                 RUS=Учесть только платежи];
                      ToolTipML=[ENU=Post payments but do not close related bank account ledger entries or reconcile the bank account.;
                                 RUS=Учет платежей без закрытия соответствующих операций книги банковских счетов или выверки банковского счета.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PaymentJournal;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 InvokePost(TRUE)
                               END;
                                }
      { 42      ;1   ;ActionGroup;
                      CaptionML=[ENU=New Documents;
                                 RUS=Новые документы] }
      { 20      ;2   ;Action    ;
                      Name=FinanceChargeMemo;
                      CaptionML=[ENU=New Finance Charge Memo;
                                 RUS=Создать процент-ноту];
                      ToolTipML=[ENU=Define a memo that includes information about the calculated interest on outstanding balances of an account. You can then send the memo in an email to the customer.;
                                 RUS=Определение ноты, включающее сведения о рассчитанном проценте по просроченной задолженности по счету. Эту ноту можно будет отправить клиенту по электронной почте.];
                      RunObject=Page 446;
                      RunPageLink=Customer No.=FIELD(Account No.);
                      Enabled=FinanceChargeMemoEnabled;
                      PromotedIsBig=Yes;
                      Image=FinChargeMemo;
                      RunPageMode=Create }
      { 41      ;2   ;Action    ;
                      Name=OpenGenJnl;
                      CaptionML=[ENU=General Journal;
                                 RUS=Финансовый журнал];
                      ToolTipML=[ENU=Open the general journal, for example, to record or post a payment that has no related document.;
                                 RUS=Открытие финансового журнала, например для записи или учета платежа, у которого нет связанного документа.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 39;
                      PromotedIsBig=Yes;
                      Image=GLRegisters }
      { 40      ;2   ;Action    ;
                      CaptionML=[ENU=Payment Journal;
                                 RUS=Журнал платежей];
                      ToolTipML=[ENU=View or edit the payment journal where you can register payments to vendors.;
                                 RUS=Просмотр или изменение журнала платежей, в котором можно регистрировать платежи поставщикам.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 256;
                      PromotedIsBig=Yes;
                      Image=PaymentJournal }
      { 63      ;1   ;ActionGroup;
                      CaptionML=[ENU=Manual Application;
                                 RUS=Применение вручную] }
      { 59      ;2   ;Action    ;
                      Name=TransferDiffToAccount;
                      CaptionML=[ENU=Transfer Difference to Account;
                                 RUS=Перевести разницу на счет];
                      ToolTipML=[ENU=Specify the balancing account to which you want a non-applicable payment amount on a payment reconciliation journal line to be posted when you post the journal.;
                                 RUS=Определение балансирующего счета, на котором требуется учесть неприменимую сумму платежа по строке журнала выверки платежей при учете журнала.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=TransferToGeneralJournal;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 MatchBankPayments@1001 : Codeunit 1255;
                               BEGIN
                                 MatchBankPayments.TransferDiffToAccount(Rec,TempGenJournalLine)
                               END;
                                }
      { 30      ;2   ;Action    ;
                      Name=AddMappingRule;
                      CaptionML=[ENU=Map Text to Account;
                                 RUS=Определить соответствие текста счетам];
                      ToolTipML=[ENU=Associate text on payments with debit, credit, and balancing accounts, so payments are posted to the accounts when you post payments. The payments are not applied to invoices or credit memos, and are suited for recurring cash receipts or expenses.;
                                 RUS=Связывание текста платежей с дебетовыми, кредитовыми и балансирующими счетами, чтобы платежи учитывались на счетах при учете платежей. Платежи не применяются к счетам и кредит-нотам и подходят к повторяющимся приходным и расходным кассовым ордерам.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Add;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 TextToAccMapping@1000 : Record 1251;
                                 MatchBankPayments@1001 : Codeunit 1255;
                               BEGIN
                                 TextToAccMapping.InsertRecFromBankAccReconciliationLine(Rec);
                                 MatchBankPayments.RerunTextMapper(Rec);
                               END;
                                }
      { 31      ;2   ;Action    ;
                      Name=ApplyEntries;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Apply Manually;
                                 RUS=&Применить вручную];
                      ToolTipML=[ENU=Review and apply payments that were applied automatically to wrong open entries or not applied at all.;
                                 RUS=Просмотр и применение платежей, которые автоматически были применены к неверным открытым операциям или вообще не были применены.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ApplyEntries;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 DisplayApplication;
                                 GetAppliedPmtData(AppliedPmtEntry,RemainingAmountAfterPosting,StatementToRemAmtDifference,PmtAppliedToTxt);
                               END;
                                }
      { 44      ;1   ;ActionGroup;
                      CaptionML=[ENU=Review;
                                 RUS=Просмотр] }
      { 36      ;2   ;Action    ;
                      Name=Accept;
                      CaptionML=[ENU=Accept Applications;
                                 RUS=Принять применения];
                      ToolTipML=[ENU=Accept a payment application after reviewing it or manually applying it to entries. This closes the payment application and sets the Match Confidence to Accepted.;
                                 RUS=Принятие применения платежа после его проверки или ручное применение его к операциям. При этом применение платежа закрывается, а для поля "Достоверность совпадения" устанавливается значение "Принято".];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BankAccReconciliationLine@1000 : Record 274;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(BankAccReconciliationLine);
                                 BankAccReconciliationLine.AcceptAppliedPaymentEntriesSelectedLines;
                               END;
                                }
      { 37      ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=[ENU=Remove Applications;
                                 RUS=Удалить применения];
                      ToolTipML=[ENU=Remove a payment application from an entry. This unapplies the payment.;
                                 RUS=Удаление применения платежа из операции. Платеж будет отменен.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BankAccReconciliationLine@1000 : Record 274;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(BankAccReconciliationLine);
                                 BankAccReconciliationLine.RejectAppliedPaymentEntriesSelectedLines;
                               END;
                                }
      { 15      ;1   ;ActionGroup;
                      CaptionML=[ENU=Custom Sorting;
                                 RUS=Пользовательская сортировка] }
      { 56      ;2   ;Action    ;
                      Name=ShowNonAppliedLines;
                      CaptionML=[ENU=Show Non-Applied Lines;
                                 RUS=Показать непримененные строки];
                      ToolTipML=[ENU=Display only payments in the list that have not been applied.;
                                 RUS=Отображение в списке только тех платежей, которые не были применены.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=FilterLines;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 SETFILTER(Difference,'<>0');
                                 CurrPage.UPDATE;
                               END;
                                }
      { 55      ;2   ;Action    ;
                      Name=ShowAllLines;
                      CaptionML=[ENU=Show All Lines;
                                 RUS=Показать все строки];
                      ToolTipML=[ENU=Display all payments in the list no matter what their status is.;
                                 RUS=Отображение в списке всех платежей независимо от их состояния.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=AllLines;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 SETRANGE(Difference);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 32      ;2   ;Action    ;
                      Name=SortForReviewDescending;
                      CaptionML=[ENU=Sort for Review Descending;
                                 RUS=Отсортировать для просмотра по убыванию];
                      ToolTipML=[ENU=Sort the lines in ascending order.;
                                 RUS=Сортировка строк по возрастанию.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MoveDown;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 UpdateSorting(FALSE);
                               END;
                                }
      { 34      ;2   ;Action    ;
                      Name=SortForReviewAscending;
                      CaptionML=[ENU=Sort for Review Ascending;
                                 RUS=Отсортировать для просмотра по возрастанию];
                      ToolTipML=[ENU=Sort the lines in descending order.;
                                 RUS=Сортировка строк по убыванию.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MoveUp;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 UpdateSorting(TRUE);
                               END;
                                }
      { 39      ;    ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 38      ;1   ;Action    ;
                      Name=Dimensions;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 RUS=Измерения];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 RUS=Просмотр или изменение измерений, например области, проекта или отдела, которые можно назначать документам покупки и продажи для распределения себестоимости и анализа истории транзакций.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
                                 BankAccReconciliation.ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=LineDimensions;
                      CaptionML=[ENU=Line Dimensions;
                                 RUS=Измерения строки];
                      ToolTipML=[ENU=View or edit the line dimensions sets that are set up for the current line.;
                                 RUS=Просмотр или изменение наборов измерений строк, настроенных для текущей строки.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 21      ;1   ;Action    ;
                      CaptionML=[ENU=Bank Account Card;
                                 RUS=Карточка банковского счета];
                      ToolTipML=[ENU=View or edit information about the bank account that is related to the payment reconciliation journal.;
                                 RUS=Просмотр или изменение сведений о банковском счете, которые связаны с журналом выверки платежей.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 1283;
                      RunPageLink=No.=FIELD(Bank Account No.);
                      Image=BankAccount }
      { 53      ;1   ;ActionGroup;
                      CaptionML=[ENU=Details;
                                 RUS=Подробности] }
      { 27      ;2   ;Action    ;
                      Name=ShowBankTransactionDetails;
                      CaptionML=[ENU=Bank Transaction Details;
                                 RUS=Сведения о банковской транзакции];
                      ToolTipML=[ENU=View the values that exist in an imported bank statement file for the selected line.;
                                 RUS=Просмотр в импортированном файле банковской выписки значений, которые относятся к выбранной строке.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 1221;
                      RunPageLink=Data Exch. No.=FIELD(Data Exch. Entry No.),
                                  Line No.=FIELD(Data Exch. Line No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExternalDocument;
                      PromotedCategory=Category6 }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater;
                FreezeColumnID=Statement Amount }

    { 9   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quality of the automatic payment application on the journal line.;
                           RUS=Определяет качество автоматического применения платежа к строке журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Match Confidence";
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DisplayApplication;
                            END;
                             }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the payment represented by the journal line was recorded in the bank account.;
                           RUS=Определяет дату, когда платеж, представленный строкой журнала, был записан на банковском счету.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Transaction Date" }

    { 16  ;2   ;Field     ;
                Width=40;
                ToolTipML=[ENU=Specifies the text that the customer or vendor entered on that payment transaction that is represented by the journal line.;
                           RUS=Определяет текст, введенный клиентом или поставщиком в транзакцию платежа, представленную строкой журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Transaction Text" }

    { 62  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the imported bank transaction.;
                           RUS=Определяет идентификатор импортированной банковской транзакции.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Transaction ID";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Transaction Amount;
                           RUS=Сумма транзакции];
                ToolTipML=[ENU=Specifies the amount that was paid into the bank account and then imported as a bank statement line represented by the journal line.;
                           RUS=Определяет сумму, переведенную на банковский счет, а затем импортированную в качестве строки банковской выписки, представленной строкой журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Statement Amount";
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                             CurrPage.UPDATE(FALSE)
                           END;
                            }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that has been applied to one or more open entries.;
                           RUS=Определяет сумму, которая была применена к одной или нескольким открытым операциям.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applied Amount" }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the difference between the amount in the Statement Amount field and the amount in the Applied Amount field.;
                           RUS=Определяет разницу между суммой в поле "Сумма по выписке" и суммой в поле "Примененная сумма".];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Difference;
                Editable=FALSE;
                Style=Unfavorable }

    { 52  ;2   ;Field     ;
                Name=StatementToRemAmtDifference;
                CaptionML=[ENU=Difference from Remaining Amount;
                           RUS=Разность с остатком суммы];
                ToolTipML=[ENU=Specifies the difference between the values in the Statement Amount and the Remaining Amount After Posting fields.;
                           RUS=Определяет разницу между значениями в полях "Сумма по выписке" и "Сумма остатка после учета".];
                ApplicationArea=#Basic,#Suite;
                BlankZero=Yes;
                SourceExpr=StatementToRemAmtDifference;
                Visible=FALSE;
                Enabled=FALSE }

    { 49  ;2   ;Field     ;
                CaptionML=[ENU=Document No.;
                           RUS=Номер документа];
                ToolTipML=[ENU=Specifies the document number of the open entry that the payment is applied to.;
                           RUS=Определяет номер документа открытой операции, к которой был применен платеж.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetAppliedToDocumentNo }

    { 47  ;2   ;Field     ;
                Name=DescAppliedEntry;
                CaptionML=[ENU=Description;
                           RUS=Описание];
                ToolTipML=[ENU=Specifies the description on the open entry that the payment is applied to.;
                           RUS=Определяет описание открытой операции, к которой был применен платеж.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedPmtEntry.Description;
                Editable=FALSE }

    { 50  ;2   ;Field     ;
                Name=DueDateAppliedEntry;
                CaptionML=[ENU=Due Date;
                           RUS=Срок выполнения];
                ToolTipML=[ENU=Specifies the due date on the open entry that the payment is applied to.;
                           RUS=Определяет срок выполнения открытой операции, к которой был применен платеж.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedPmtEntry."Due Date" }

    { 43  ;2   ;Field     ;
                Name=AccountName;
                CaptionML=[ENU=Account Name;
                           RUS=Название счета];
                ToolTipML=[ENU=Specifies the name of the customer or vendor that the payment is applied to.;
                           RUS=Определяет имя клиента или поставщика, к которым был применен платеж.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetAppliedToName;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              AppliedToDrillDown;
                            END;
                             }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of account that the payment application will be posted to when you post the worksheet.;
                           RUS=Определяет тип счета, на котором будет учтено применение платежа при учете листа.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Account Type" }

    { 13  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the account number that the payment application will be posted to when you post the worksheet.;
                           RUS=Определяет номер счета, на котором будет учтено применение платежа при учете листа.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Account No.";
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                             IF Difference > 0 THEN
                               TransferRemainingAmountToAccount;
                           END;
                            }

    { 46  ;2   ;Field     ;
                Name=PostingDateAppliedEntry;
                CaptionML=[ENU=Posting Date;
                           RUS=Дата учета];
                ToolTipML=[ENU=Specifies the posting date on the open entry that the payment is applied to.;
                           RUS=Определяет дату учета открытой операции, к которой был применен платеж.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedPmtEntry."Posting Date";
                Visible=FALSE;
                Editable=FALSE }

    { 51  ;2   ;Field     ;
                CaptionML=[ENU=Entry Currency Code;
                           RUS=Код валюты операции];
                ToolTipML=[ENU=Specifies the currency code on the open entry that the payment is applied to.;
                           RUS=Определяет код валюты открытой операции, к которой был применен платеж.];
                ApplicationArea=#Suite;
                SourceExpr=AppliedPmtEntry."Currency Code";
                Visible=FALSE }

    { 2   ;2   ;Field     ;
                Name=Match Details;
                CaptionML=[ENU=Match Details;
                           RUS=Сведения по совпадению];
                ToolTipML=[ENU=Specifies details about the payment application on the journal line.;
                           RUS=Определяет сведения о применении платежа к строке журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MatchDetails;
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DisplayApplication;
                            END;
                             }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies for a journal line where the payment has been applied, how many entries the payment has been applied to.;
                           RUS=Определяет строку журнала, к которой применен платеж, и количество операций, к которым был применен платеж.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applied Entries";
                Visible=FALSE }

    { 48  ;2   ;Field     ;
                Name=RemainingAmount;
                CaptionML=[ENU=Remaining Amount After Posting;
                           RUS=Сумма остатка после учета];
                ToolTipML=[ENU=Specifies the amount that remains to be paid on the open entry that the payment is applied to.;
                           RUS=Определяет сумму, которую остается оплатить по открытой операции, к которой применяется платеж.];
                ApplicationArea=#Basic,#Suite;
                BlankZero=Yes;
                SourceExpr=RemainingAmountAfterPosting;
                Visible=FALSE;
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                Width=40;
                ToolTipML=[ENU=Specifies additional information on the bank statement line for the payment.;
                           RUS=Определяет дополнительные сведения по строке банковской выписки для платежа.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Additional Transaction Info";
                Visible=FALSE;
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                Width=30;
                ToolTipML=[ENU=Specifies the address of the customer or vendor who made the payment that is represented by the journal line.;
                           RUS=Определяет адрес клиента или поставщика, который осуществил платеж, представленный строкой журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Related-Party Address";
                Visible=FALSE;
                Editable=FALSE }

    { 5   ;2   ;Field     ;
                Width=20;
                ToolTipML=[ENU=Specifies the bank account number of the customer or vendor who made the payment.;
                           RUS=Определяет номер банковского счета клиента или поставщика, который осуществил платеж.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Related-Party Bank Acc. No.";
                Visible=FALSE;
                Editable=FALSE }

    { 19  ;2   ;Field     ;
                Width=10;
                ToolTipML=[ENU=Specifies the city name of the customer or vendor.;
                           RUS=Определяет название города клиента или поставщика.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Related-Party City";
                Visible=FALSE;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                Width=30;
                ToolTipML=[ENU=Specifies the name of the customer or vendor who made the payment that is represented by the journal line.;
                           RUS=Определяет имя клиента или поставщика, который осуществил платеж, представленный строкой журнала.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Related-Party Name";
                Visible=FALSE;
                Editable=FALSE }

    { 64  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 1.;
                           RUS=Определяет код ярлыка измерения 1.];
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE }

    { 65  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 2.;
                           RUS=Определяет код ярлыка измерения 2.];
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE }

    { 71  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code linked to the journal line.;
                           RUS=Определяет код значения измерения, связанный со строкой журнала.];
                SourceExpr=ShortcutDimCode[3];
                CaptionClass='1,2,3';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(3),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(3,ShortcutDimCode[3]);
                           END;
                            }

    { 70  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code linked to the journal line.;
                           RUS=Определяет код значения измерения, связанный со строкой журнала.];
                SourceExpr=ShortcutDimCode[4];
                CaptionClass='1,2,4';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(4),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(4,ShortcutDimCode[4]);
                           END;
                            }

    { 69  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code linked to the journal line.;
                           RUS=Определяет код значения измерения, связанный со строкой журнала.];
                SourceExpr=ShortcutDimCode[5];
                CaptionClass='1,2,5';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(5),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(5,ShortcutDimCode[5]);
                           END;
                            }

    { 68  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code linked to the journal line.;
                           RUS=Определяет код значения измерения, связанный со строкой журнала.];
                SourceExpr=ShortcutDimCode[6];
                CaptionClass='1,2,6';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(6),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(6,ShortcutDimCode[6]);
                           END;
                            }

    { 67  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code linked to the journal line.;
                           RUS=Определяет код значения измерения, связанный со строкой журнала.];
                SourceExpr=ShortcutDimCode[7];
                CaptionClass='1,2,7';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(7),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(7,ShortcutDimCode[7]);
                           END;
                            }

    { 66  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code linked to the journal line.;
                           RUS=Определяет код значения измерения, связанный со строкой журнала.];
                SourceExpr=ShortcutDimCode[8];
                CaptionClass='1,2,8';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(8),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(8,ShortcutDimCode[8]);
                           END;
                            }

    { 28  ;1   ;Group     ;
                GroupType=Group }

    { 33  ;2   ;Group     ;
                Editable=FALSE;
                GroupType=Group }

    { 25  ;3   ;Field     ;
                Name=BalanceOnBankAccount;
                CaptionML=[ENU=Balance on Bank Account;
                           RUS=Сальдо на банковском счету];
                ToolTipML=[ENU=Specifies the balance of the bank account per the last time you reconciled the bank account.;
                           RUS=Определяет баланс банковского счета на момент последней выверки банковского счета.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BankAccReconciliation."Total Balance on Bank Account";
                AutoFormatType=1;
                OnDrillDown=BEGIN
                              BankAccReconciliation.DrillDownOnBalanceOnBankAccount;
                            END;
                             }

    { 26  ;3   ;Field     ;
                Name=TotalTransactionAmount;
                CaptionML=[ENU=Total Transaction Amount;
                           RUS=Общая сумма транзакции];
                ToolTipML=[ENU=Specifies the sum of values in the Statement Amount field on all the lines in the Payment Reconciliation Journal window.;
                           RUS=Определяет сумму значений в поле "Сумма по выписке" по всем строкам в окне "Журнал выверки платежей".];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BankAccReconciliation."Total Transaction Amount";
                AutoFormatType=1 }

    { 24  ;3   ;Field     ;
                Name=BalanceOnBankAccountAfterPosting;
                CaptionML=[ENU=Balance on Bank Account After Posting;
                           RUS=Сальдо на банковском счету после учета];
                ToolTipML=[ENU=Specifies the total amount that will exist on the bank account as a result of payment applications that you post in the Payment Reconciliation Journal window.;
                           RUS=Определяет общую сумму на банковском счете в результате применения платежей, учитываемых в окне "Журнал выверки платежей".];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BankAccReconciliation."Total Balance on Bank Account" + BankAccReconciliation."Total Unposted Applied Amount";
                AutoFormatType=1;
                StyleExpr=BalanceAfterPostingStyleExpr }

    { 3   ;2   ;Group     ;
                GroupType=Group }

    { 54  ;3   ;Field     ;
                Name=OutstandingTransactions;
                CaptionML=[ENU=Outstanding Transactions;
                           RUS=Невыполненные транзакции];
                ToolTipML=[ENU=Specifies the outstanding bank transactions that have not been applied.;
                           RUS=Определяет невыполненные банковские транзакции, которые не были применены.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OutstandingTransactions;
                Editable=FALSE;
                OnDrillDown=VAR
                              DummyOutstandingBankTransaction@1001 : Record 1284;
                            BEGIN
                              DummyOutstandingBankTransaction.DrillDown("Bank Account No.",
                                DummyOutstandingBankTransaction.Type::"Bank Account Ledger Entry","Statement Type","Statement No.");
                            END;
                             }

    { 61  ;3   ;Field     ;
                Name=OutstandingPayments;
                CaptionML=[ENU=Outstanding Payments;
                           RUS=Невыполненные платежи];
                ToolTipML=[ENU=Specifies the outstanding check transactions that have not been applied.;
                           RUS=Определяет невыполненные транзакции платежного документа, которые не были применены.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OutstandingPayments;
                Editable=FALSE;
                OnDrillDown=VAR
                              DummyOutstandingBankTransaction@1001 : Record 1284;
                            BEGIN
                              DummyOutstandingBankTransaction.DrillDown("Bank Account No.",
                                DummyOutstandingBankTransaction.Type::"Check Ledger Entry","Statement Type","Statement No.");
                            END;
                             }

    { 23  ;3   ;Field     ;
                Name=StatementEndingBalance;
                CaptionML=[ENU=Statement Ending Balance;
                           RUS=Конечное сальдо выписки];
                ToolTipML=[ENU=Specifies the balance on your actual bank account after the bank has processed the payments that you have imported with the bank statement file.;
                           RUS=Определяет баланс фактического банковского счета после обработки банком платежей, импортированных с файлом банковской выписки.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BankAccReconciliation."Statement Ending Balance";
                AutoFormatType=1;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      BankAccReconciliation@1000 : Record 273;
      AppliedPmtEntry@1007 : Record 1294;
      TempGenJournalLine@1009 : TEMPORARY Record 81;
      MatchDetails@1002 : Text;
      PmtAppliedToTxt@1003 : TextConst '@@@="%1=integer value for number of entries";ENU=The payment has been applied to %1 entries.;RUS=Платеж применен к %1 операциям.';
      IsBankAccReconInitialized@1004 : Boolean;
      StatementToRemAmtDifference@1005 : Decimal;
      FinanceChargeMemoEnabled@1001 : Boolean;
      RemainingAmountAfterPosting@1006 : Decimal;
      RemoveExistingApplicationsQst@1008 : TextConst 'ENU=When you run the Apply Automatically action, it will undo all previous applications.\\Do you want to continue?;RUS=При запуске действия "Применить автоматически" также будут отменены все предыдущие применения.\\Продолжить?';
      BalanceAfterPostingStyleExpr@1010 : Text;
      PageMustCloseMsg@1011 : TextConst 'ENU=The Payment Reconciliation Journal window has been closed because the connection was suspended.;RUS=Окно журнала выверки платежей закрыто из-за приостановки подключения.';
      PageClosedByPosting@1012 : Boolean;
      OutstandingTransactions@1015 : Decimal;
      OutstandingPayments@1014 : Decimal;
      ShortcutDimCode@1013 : ARRAY [20] OF Code[20];

    LOCAL PROCEDURE UpdateSorting@4(IsAscending@1003 : Boolean);
    VAR
      BankAccReconciliationLine@1005 : Record 274;
      PaymentMatchingDetails@1000 : Record 1299;
      AppliedPaymentEntry2@1002 : Record 1294;
      AmountDifference@1001 : Decimal;
      ScoreRange@1004 : Integer;
    BEGIN
      BankAccReconciliationLine.SETRANGE("Statement Type","Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.","Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.","Statement No.");
      BankAccReconciliationLine.SETAUTOCALCFIELDS("Match Confidence");

      IF BankAccReconciliationLine.FINDSET THEN BEGIN
        REPEAT
          ScoreRange := 10000;
          BankAccReconciliationLine."Sorting Order" := BankAccReconciliationLine."Match Confidence" * ScoreRange;

          // Update sorting for same match confidence based onother criteria
          GetAppliedPmtData(AppliedPaymentEntry2,RemainingAmountAfterPosting,AmountDifference,PmtAppliedToTxt);

          ScoreRange := ScoreRange / 10;
          IF AmountDifference <> 0 THEN
            BankAccReconciliationLine."Sorting Order" -= ScoreRange;

          ScoreRange := ScoreRange / 10;
          IF Difference <> 0 THEN
            BankAccReconciliationLine."Sorting Order" -= ScoreRange;

          ScoreRange := ScoreRange / 10;
          IF PaymentMatchingDetails.MergeMessages(Rec) <> '' THEN
            BankAccReconciliationLine."Sorting Order" -= ScoreRange;

          BankAccReconciliationLine.MODIFY;
        UNTIL BankAccReconciliationLine.NEXT = 0;

        SETCURRENTKEY("Sorting Order");
        ASCENDING(IsAscending);

        CurrPage.UPDATE(FALSE);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE InvokePost@2(OnlyPayments@1000 : Boolean);
    VAR
      BankAccReconciliation@1001 : Record 273;
      BankAccReconPostYesNo@1002 : Codeunit 371;
    BEGIN
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      BankAccReconciliation."Post Payments Only" := OnlyPayments;

      IF BankAccReconPostYesNo.BankAccReconPostYesNo(BankAccReconciliation) THEN BEGIN
        RESET;
        PageClosedByPosting := TRUE;
        CurrPage.CLOSE;
      END;
    END;

    LOCAL PROCEDURE UpdateBalanceAfterPostingStyleExpr@3();
    BEGIN
      WITH BankAccReconciliation DO
        IF "Total Balance on Bank Account" + "Total Unposted Applied Amount" <> "Statement Ending Balance" THEN
          BalanceAfterPostingStyleExpr := 'Unfavorable'
        ELSE
          BalanceAfterPostingStyleExpr := 'Favorable';
    END;

    LOCAL PROCEDURE TestIfFiltershaveBeenRemovedWithRefreshAndClose@5();
    BEGIN
      FILTERGROUP := 2;
      IF NOT PageClosedByPosting THEN
        IF GETFILTER("Bank Account No.") + GETFILTER("Statement Type") + GETFILTER("Statement No.") = '' THEN BEGIN
          MESSAGE(PageMustCloseMsg);
          CurrPage.CLOSE;
        END;
      FILTERGROUP := 0;
    END;

    BEGIN
    END.
  }
}

