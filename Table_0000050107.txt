OBJECT Table 50107 FI Value Entry
{
  OBJECT-PROPERTIES
  {
    Date=23.05.17;
    Time=18:36:41;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnDelete=VAR
               GL_FIValue_Relation@1101495001 : Record 50117;
               FIAvgCostAdjmt@1101495002 : Record 50104;
             BEGIN
               // //NC MTF02 > AKU
               // //Измерения
               // LEDimension.RESET;
               // LEDimension.SETRANGE("Table ID", DATABASE::"FI Value Entry");
               // LEDimension.SETRANGE("Entry No.", "Entry No.");
               // LEDimension.DELETEALL;
               //
               // //Удаляем связь с GL Entry
               // GL_FIValue_Relation.RESET;
               // GL_FIValue_Relation.SETRANGE("FI Value Entry No.", "Entry No.");
               // GL_FIValue_Relation.DELETEALL;
               //
               // //Снимаем признак, что себестоимость скорректирована
               // FIAvgCostAdjmt.RESET;
               // FIAvgCostAdjmt.SETRANGE("FI No.", "FI No.");
               // FIAvgCostAdjmt.SETRANGE("FI Portfolio", "FI Portfolio");
               // FIAvgCostAdjmt.SETRANGE("FI Posting Book", "FI Posting Book");
               // FIAvgCostAdjmt.SETRANGE("Valuation Date", "Posting Date", 31129999D);
               // FIAvgCostAdjmt.SETRANGE("Cost Is Adjusted", TRUE);
               // IF NOT FIAvgCostAdjmt.ISEMPTY THEN BEGIN
               //  FIAvgCostAdjmt.MODIFYALL("Cost Is Adjusted", FALSE);
               // END;
               // //NC MTF02 < AKU
             END;

    CaptionML=[ENU=FI Value Entry;
               RUS=ФИ Операции Стоимости];
    LookupPageID=Page50186;
    DrillDownPageID=Page50186;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              RUS=Операция Но.] }
    { 2   ;   ;FI No.              ;Code20        ;TableRelation="Financial Instrument".No.;
                                                   CaptionML=[ENU=FI No.;
                                                              RUS=ФИ Но.] }
    { 3   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              RUS=Дата Учета] }
    { 4   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              RUS=Документ Но.] }
    { 5   ;   ;FI Ledger Entry No. ;Integer       ;TableRelation="FI Ledger Entry";
                                                   CaptionML=[ENU=FI Ledger Entry No.;
                                                              RUS=ФИ Операция Но.] }
    { 6   ;   ;FI Currency Code    ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=FI Currency Code;
                                                              RUS=Код Валюты ФИ] }
    { 7   ;   ;Amount Type         ;Option        ;CaptionML=[ENU=Amount Type;
                                                              RUS=Тип Суммы];
                                                   OptionCaptionML=[ENU=" ,Principal,Interest";
                                                                    RUS=" ,Основная сумма,Проценты"];
                                                   OptionString=[ ,Principal,Interest] }
    { 9   ;   ;Sales Amount        ;Decimal       ;CaptionML=[ENU=Sales Amount;
                                                              RUS=Сумма Продаж];
                                                   AutoFormatType=1 }
    { 10  ;   ;Sales Amount (CFI)  ;Decimal       ;CaptionML=[ENU=Sales Amount;
                                                              RUS=Сумма Продаж (Валюта ФИ)];
                                                   AutoFormatType=1 }
    { 11  ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Cost Amount;
                                                              RUS=Сумма Себест.];
                                                   AutoFormatType=1 }
    { 12  ;   ;Cost Amount (CFI)   ;Decimal       ;CaptionML=[ENU=Cost Amount (CFI);
                                                              RUS=Сумма Себест. (Валюта ФИ)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode_ }
    { 13  ;   ;Cost Not Post To GL ;Boolean       ;CaptionML=[ENU=Cost Not Post To GL;
                                                              RUS=С-сть не учтена в ГК] }
    { 15  ;No ;Valued Quantity     ;Decimal       ;CaptionML=[ENU=Valued Quantity;
                                                              RUS=Оцен. Кол-во];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;FI Ledger Entry Quantity;Decimal   ;CaptionML=[ENU=FI Ledger Entry Quantity;
                                                              RUS=Кол-во по ФИ Операции];
                                                   DecimalPlaces=0:5 }
    { 19  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              RUS=Сумма Операции] }
    { 20  ;   ;Reversed            ;Boolean       ;CaptionML=[ENU=Reversed;
                                                              RUS=Аннулировано] }
    { 21  ;   ;Reversed by Entry No.;Integer      ;TableRelation="FI Value Entry";
                                                   CaptionML=[ENU=Reversed by Entry No.;
                                                              RUS=Аннулировано Операцией Но.];
                                                   BlankZero=Yes }
    { 22  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="FI Value Entry";
                                                   CaptionML=[ENU=Reversed Entry No.;
                                                              RUS=Аннулированная Операция Но.];
                                                   BlankZero=Yes }
    { 23  ;No ;Cost per Unit       ;Decimal       ;CaptionML=[ENU=Cost per Unit;
                                                              RUS=Себест. за Единицу];
                                                   AutoFormatType=2 }
    { 24  ;No ;Cost per Unit (CFI) ;Decimal       ;CaptionML=[ENU=Cost per Unit (CFI);
                                                              RUS=Себест. Единицы (Валюта ФИ)];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode_ }
    { 25  ;   ;FI Entry Type       ;Option        ;CaptionML=[ENU=FI EntryType;
                                                              RUS=ФИ Тип Операции];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Charging%,Repayment%";
                                                                    RUS=" ,Покупка,Продажа,Приход,Расход,Начисление%,Погашение%"];
                                                   OptionString=[ ,Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Charging%,Repayment%] }
    { 26  ;   ;FI Posting Book     ;Code10        ;TableRelation="FI Posting Book";
                                                   CaptionML=[ENU=FI Posting Book;
                                                              RUS=ФИ Книга Учета Код] }
    { 27  ;   ;FI Portfolio        ;Code10        ;TableRelation="FI Portfolio";
                                                   CaptionML=[ENU=FI Portfolio;
                                                              RUS=ФИ Портфель Код] }
    { 28  ;   ;Conversation        ;Boolean       ;CaptionML=[ENU=Conversation;
                                                              RUS=Конвертация] }
    { 29  ;   ;Short Position      ;Boolean       ;CaptionML=[ENU=Short Position;
                                                              RUS=Короткая Позиция] }
    { 30  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              RUS=Положительна] }
    { 31  ;   ;Amount (CFI)        ;Decimal       ;CaptionML=[ENU=Amount (CFI);
                                                              RUS=Сумма Операции (Валюта ФИ)] }
    { 32  ;   ;CostGLEntryNoD      ;Integer       ;TableRelation="G/L Entry"."Entry No.";
                                                   CaptionML=[ENU=CostGLEntryNoD;
                                                              RUS=Номер операции гл. книги по с-сти Дебет] }
    { 33  ;No ;CurrDiffGLEntryNoD  ;Integer       ;TableRelation="G/L Entry"."Entry No.";
                                                   CaptionML=[ENU=CurrDiffGLEntryNoD;
                                                              RUS=Номер операции гл. книги по курсовой разнице Дебет] }
    { 34  ;   ;CostGLEntryNoK      ;Integer       ;TableRelation="G/L Entry"."Entry No.";
                                                   CaptionML=[ENU=CostGLEntryNoK;
                                                              RUS=Номер операции гл. книги по с-сти Кредит] }
    { 35  ;No ;CurrDiffGLEntryNoK  ;Integer       ;TableRelation="G/L Entry"."Entry No.";
                                                   CaptionML=[ENU=CurrDiffGLEntryNoK;
                                                              RUS=Номер операции гл. книги по курсовой разнице Кредит] }
    { 36  ;   ;Cupon Amount        ;Decimal       ;CaptionML=[ENU=Cupon Amount;
                                                              RUS=Сумма Начислений];
                                                   AutoFormatType=1 }
    { 37  ;   ;Cupon Amount (CFI)  ;Decimal       ;CaptionML=[ENU=Cupon Amount (CFI);
                                                              RUS=Сумма Начислений (Валюта ФИ)];
                                                   AutoFormatType=1 }
    { 38  ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              RUS=Транзакция Но.] }
    { 39  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              RUS=Глобал. Измерение 1 Код];
                                                   CaptionClass='1,1,1' }
    { 40  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              RUS=Глобал. Измерение 2 Код];
                                                   CaptionClass='1,1,2' }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;FI Ledger Entry No.                     ;SumIndexFields=Sales Amount,Amount,Sales Amount (CFI),Cost Amount,Cost Amount (CFI),Amount (CFI),Cupon Amount,Cupon Amount (CFI) }
    {    ;Document No.,Posting Date                }
    {    ;FI No.,FI Portfolio,FI Posting Book,Reversed,Posting Date,Short Position,Positive,Amount Type,FI Entry Type,Global Dimension 1 Code,Global Dimension 2 Code;
                                                   SumIndexFields=Cost Amount,Cost Amount (CFI),FI Ledger Entry Quantity,Cupon Amount,Cupon Amount (CFI) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1000000001 : Record 98;
      GLSetupRead@1000000000 : Boolean;

    PROCEDURE GetCurrencyCode_@1() : Code[10];
    BEGIN
      {
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
       }
    END;

    PROCEDURE GetValuationDate_@55() : Date;
    BEGIN
      {
      IF "Valuation Date" < "Posting Date" THEN
        EXIT("Posting Date");
      EXIT("Valuation Date");
      }
    END;

    PROCEDURE AddActualCostBuf_@2(ValueEntry@1000 : Record 5802;NewAdjustedCost@1002 : Decimal;NewAdjustedCostACY@1003 : Decimal;ItemLedgEntryPostingDate@1001 : Date);
    BEGIN
      {
      RESET;
      "Entry No." := ValueEntry."Entry No.";
      IF FIND THEN BEGIN
        IF ValueEntry."Expected Cost" THEN BEGIN
          "Cost Amount (Expected)" := "Cost Amount (Expected)" + NewAdjustedCost;
          "Cost Amount (Expected) (ACY)" := "Cost Amount (Expected) (ACY)" + NewAdjustedCostACY;
        END ELSE BEGIN
          "Cost Amount (Actual)" := "Cost Amount (Actual)" + NewAdjustedCost;
          "Cost Amount (Actual) (ACY)" := "Cost Amount (Actual) (ACY)" + NewAdjustedCostACY;
        END;
        MODIFY;
      END ELSE BEGIN
        INIT;
        "Item No." := ValueEntry."Item No.";
        "Document No." := ValueEntry."Document No.";
        "Location Code" := ValueEntry."Location Code";
        "Variant Code" := ValueEntry."Variant Code";
        "Entry Type" := ValueEntry."Entry Type";
        "Item Ledger Entry No." := ValueEntry."Item Ledger Entry No.";
        "Expected Cost" := ValueEntry."Expected Cost";
        IF ItemLedgEntryPostingDate = 0D THEN
          "Posting Date" := ValueEntry."Posting Date"
        ELSE
          "Posting Date" := ItemLedgEntryPostingDate;
        IF ValueEntry."Expected Cost" THEN BEGIN
          "Cost Amount (Expected)" := NewAdjustedCost;
          "Cost Amount (Expected) (ACY)" := NewAdjustedCostACY;
        END ELSE BEGIN
          "Cost Amount (Actual)" := NewAdjustedCost;
          "Cost Amount (Actual) (ACY)" := NewAdjustedCostACY;
        END;
        "Valued By Average Cost" := ValueEntry."Valued By Average Cost";
        "Valuation Date" := ValueEntry."Valuation Date";
        INSERT;
      END;
      }
    END;

    PROCEDURE AddBalanceExpectedCostBuf_@6(ValueEntry@1002 : Record 5802;NewAdjustedCost@1001 : Decimal;NewAdjustedCostACY@1000 : Decimal);
    BEGIN
      {
      IF ValueEntry."Expected Cost" OR
        (ValueEntry."Entry Type" <> ValueEntry."Entry Type"::"Direct Cost")
      THEN
        EXIT;

      RESET;
      "Entry No." := ValueEntry."Entry No.";
      FIND;
      "Cost Amount (Expected)" := NewAdjustedCost;
      "Cost Amount (Expected) (ACY)" := NewAdjustedCostACY;
      MODIFY;
      }
    END;

    PROCEDURE AddCost_@3(ValueEntry@1000 : Record 5802);
    BEGIN
      {
      "Cost Amount (Expected)" := "Cost Amount (Expected)" + ValueEntry."Cost Amount (Expected)";
      "Cost Amount (Expected) (ACY)" := "Cost Amount (Expected) (ACY)" + ValueEntry."Cost Amount (Expected) (ACY)";
      "Cost Amount (Actual)" := "Cost Amount (Actual)" + ValueEntry."Cost Amount (Actual)";
      "Cost Amount (Actual) (ACY)" := "Cost Amount (Actual) (ACY)" + ValueEntry."Cost Amount (Actual) (ACY)";
      }
    END;

    PROCEDURE SumCostsTillValuationDate_@4(VAR ValueEntry@1000 : Record 5802);
    VAR
      AvgCostAdjmtPoint@1003 : Record 5804;
      CalendarPeriod@1001 : Record 2000000007;
      AccountingPeriod@1002 : Record 50;
      PrevAccountingPeriod@1007 : Record 50;
      PrevValueEntrySum@1008 : Record 5802;
      Item@1010 : Record 27;
      FromDate@1005 : Date;
      ToDate@1006 : Date;
      CostCalcIsChanged@1004 : Boolean;
      QtyFactor@1009 : Decimal;
    BEGIN
      {
      Item.GET(ValueEntry."Item No.");
      IF Item."Costing Method" = Item."Costing Method"::Average THEN BEGIN
        CalendarPeriod."Period Start" := ValueEntry."Valuation Date";
        AvgCostAdjmtPoint."Valuation Date" := ValueEntry."Valuation Date";
        AvgCostAdjmtPoint.GetValuationPeriod(CalendarPeriod);
        ToDate := CalendarPeriod."Period End";
      END ELSE
        ToDate := "Valuation Date";

      REPEAT
        IF Item."Costing Method" = Item."Costing Method"::Average THEN BEGIN
          FromDate := ToDate;
          AccountingPeriod.SETRANGE("Starting Date",0D,ToDate);
          AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
          IF NOT AccountingPeriod.FIND('+') THEN BEGIN
            AccountingPeriod.SETRANGE("Starting Date");
            AccountingPeriod.FIND('-');
          END;

          WHILE (FromDate = ToDate) AND (FromDate <> 0D) DO BEGIN
            PrevAccountingPeriod := AccountingPeriod;
            CASE TRUE OF
              AccountingPeriod."Average Cost Calc. Type" = AccountingPeriod."Average Cost Calc. Type"::Item:
                FromDate := 0D;
              AccountingPeriod.NEXT(-1) = 0:
                FromDate := 0D;
              AccountingPeriod."Average Cost Calc. Type" <> PrevAccountingPeriod."Average Cost Calc. Type":
                BEGIN
                  FromDate := PrevAccountingPeriod."Starting Date";
                  CostCalcIsChanged := TRUE;
                END;
            END;
          END;
          AccountingPeriod := PrevAccountingPeriod;
        END ELSE
          FromDate := 0D;

        QtyFactor := 1;
        RESET;
        SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
        SETRANGE("Item No.",ValueEntry."Item No.");
        SETRANGE("Valuation Date",FromDate,ToDate);
        IF (AccountingPeriod."Average Cost Calc. Type" =
            AccountingPeriod."Average Cost Calc. Type"::"Item & Location & Variant") OR
           (Item."Costing Method" <> Item."Costing Method"::Average)
        THEN BEGIN
          SETRANGE("Location Code",ValueEntry."Location Code");
          SETRANGE("Variant Code",ValueEntry."Variant Code");
        END ELSE
          IF CostCalcIsChanged THEN
            QtyFactor := CalcQtyFactor(ValueEntry);

        CALCSUMS(
          "Item Ledger Entry Quantity",
          "Cost Amount (Actual)","Cost Amount (Actual) (ACY)",
          "Cost Amount (Expected)","Cost Amount (Expected) (ACY)");

        "Item Ledger Entry Quantity" :=
          ROUND("Item Ledger Entry Quantity" * QtyFactor,0.00001) + PrevValueEntrySum."Item Ledger Entry Quantity";
        "Cost Amount (Actual)" :=
          "Cost Amount (Actual)" * QtyFactor + PrevValueEntrySum."Cost Amount (Actual)";
        "Cost Amount (Expected)" :=
          "Cost Amount (Expected)" * QtyFactor + PrevValueEntrySum."Cost Amount (Expected)";
        "Cost Amount (Expected) (ACY)" :=
          "Cost Amount (Expected) (ACY)" * QtyFactor + PrevValueEntrySum."Cost Amount (Expected) (ACY)";
        "Cost Amount (Actual) (ACY)" :=
          "Cost Amount (Actual) (ACY)" * QtyFactor + PrevValueEntrySum."Cost Amount (Actual) (ACY)";
        PrevValueEntrySum := Rec;

        IF FromDate <> 0D THEN
          ToDate := CALCDATE('<-1D>',FromDate);
      UNTIL FromDate = 0D;
      }
    END;

    PROCEDURE CalcItemLedgEntryCost_@5(ItemLedgEntryNo@1000 : Integer;Expected@1001 : Boolean);
    VAR
      ItemLedgEntryQty@1006 : Decimal;
      CostAmtActual@1002 : Decimal;
      CostAmtActualACY@1003 : Decimal;
      CostAmtExpected@1004 : Decimal;
      CostAmtExpectedACY@1005 : Decimal;
    BEGIN
      {
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      IF FIND('-') THEN
        REPEAT
          IF "Expected Cost" = Expected THEN BEGIN
            ItemLedgEntryQty := ItemLedgEntryQty + "Item Ledger Entry Quantity";
            CostAmtActual := CostAmtActual + "Cost Amount (Actual)";
            CostAmtActualACY := CostAmtActualACY + "Cost Amount (Actual) (ACY)";
            CostAmtExpected := CostAmtExpected + "Cost Amount (Expected)";
            CostAmtExpectedACY := CostAmtExpectedACY + "Cost Amount (Expected) (ACY)";
          END;
        UNTIL NEXT = 0;

      "Item Ledger Entry Quantity" := ItemLedgEntryQty;
      "Cost Amount (Actual)" := CostAmtActual;
      "Cost Amount (Actual) (ACY)" := CostAmtActualACY;
      "Cost Amount (Expected)" := CostAmtExpected;
      "Cost Amount (Expected) (ACY)" := CostAmtExpectedACY;
      }
    END;

    PROCEDURE NotInvdRevaluationExists_@7(ItemLedgEntryNo@1000 : Integer) : Boolean;
    BEGIN
      {
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      SETRANGE("Entry Type","Entry Type"::Revaluation);
      SETRANGE("Applies-to Entry",0);
      EXIT(FINDSET);
      }
    END;

    LOCAL PROCEDURE CalcQtyFactor_@8(ValueEntry@1000 : Record 5802) QtyFactor : Decimal;
    VAR
      ValueEntry2@1001 : Record 5802;
    BEGIN
      {
      ValueEntry2.SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
      ValueEntry2.COPYFILTERS(Rec);
      ValueEntry2.SETRANGE("Location Code",ValueEntry."Location Code");
      ValueEntry2.SETRANGE("Variant Code",ValueEntry."Variant Code");
      ValueEntry2.CALCSUMS("Item Ledger Entry Quantity");
      QtyFactor := ValueEntry2."Item Ledger Entry Quantity";
      ValueEntry2.SETRANGE("Location Code");
      ValueEntry2.SETRANGE("Variant Code");
      ValueEntry2.CALCSUMS("Item Ledger Entry Quantity");
      IF ValueEntry2."Item Ledger Entry Quantity" <> 0 THEN
        QtyFactor := QtyFactor / ValueEntry2."Item Ledger Entry Quantity";

      EXIT(QtyFactor);
      }
    END;

    PROCEDURE ShowGL_@9();
    VAR
      GLItemLedgRelation@1000 : Record 5823;
      GLEntry@1002 : Record 17;
      TempGLEntry@1001 : TEMPORARY Record 17;
    BEGIN
      {
      GLItemLedgRelation.SETCURRENTKEY("Value Entry No.");
      GLItemLedgRelation.SETRANGE("Value Entry No.","Entry No.");
      IF GLItemLedgRelation.FINDSET THEN
        REPEAT
          GLEntry.GET(GLItemLedgRelation."G/L Entry No.");
          TempGLEntry.INIT;
          TempGLEntry := GLEntry;
          TempGLEntry.INSERT;
        UNTIL GLItemLedgRelation.NEXT = 0;

      FORM.RUNMODAL(0,TempGLEntry);
      }
    END;

    PROCEDURE IsAvgCostException_@10() : Boolean;
    VAR
      AvgCostAdjmtPoint@1000 : Record 5804;
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      {
      IF "Partial Revaluation" THEN
        EXIT(TRUE);
      IF "Item Ledger Entry Type" = "Item Ledger Entry Type"::Transfer THEN
        EXIT(TRUE);
      IF ItemApplnEntry.AppliedInbndEntryExists("Item Ledger Entry No.",TRUE) THEN
        EXIT(TRUE);
      EXIT(FALSE);
      }
    END;

    PROCEDURE IsDebit_@1210007() Debit : Boolean;
    BEGIN
      {
      EXIT(("Cost Amount (Actual)" > 0) XOR "Red Storno");
      }
    END;

    BEGIN
    {
      NC MTF02 II Учет ФИ
      NC MTF02 AKU Триггер OnDelete
    }
    END.
  }
}

